_QWORD *mlir::Dialect::addType<mlir::Float8E4M3B11FNUZType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E4M3B11FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_21Float8E4M3B11FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_21Float8E4M3B11FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_21Float8E4M3B11FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::BFloat16Type>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::BFloat16Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12BFloat16TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12BFloat16TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_12BFloat16TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::Float16Type>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float16Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float16TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float16TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float16TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::FloatTF32Type>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::FloatTF32Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13FloatTF32TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13FloatTF32TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_13FloatTF32TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::Float32Type>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float32Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float32TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float32TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float32TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::Float64Type>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float64Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float64TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float64TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float64TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::Float80Type>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float80Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float80TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float80TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float80TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

_QWORD *mlir::Dialect::addType<mlir::Float128Type>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float128Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12Float128TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12Float128TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_12Float128TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

uint64_t *mlir::Dialect::addType<mlir::FunctionType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::FunctionType,mlir::Type,mlir::detail::FunctionTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12FunctionTypeES2_NSB_19FunctionTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12FunctionTypeES2_NSA_19FunctionTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, 0, v10);
}

_QWORD *mlir::Dialect::addType<mlir::IndexType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::IndexType,mlir::Type,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9IndexTypeES2_NS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9IndexTypeES2_NS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IndexType,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_9IndexTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IndexType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

uint64_t *mlir::Dialect::addType<mlir::IntegerType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::IntegerType,mlir::Type,mlir::detail::IntegerTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerTypeES2_NSB_18IntegerTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerTypeES2_NSA_18IntegerTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addType<mlir::MemRefType>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *TypeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractType::get<mlir::MemRefType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, 0, v9);
}

_QWORD *mlir::Dialect::addType<mlir::NoneType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  mlir::MLIRContext *v11;
  uint64_t (**v12)(uint64_t, uint64_t *);
  uint64_t (*v13)(uint64_t, uint64_t *);
  void *v14;
  uint64_t v15;
  _BYTE v16[48];
  llvm *v17[2];
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t (***v20)(uint64_t, uint64_t *);
  uint64_t (*v21)(uint64_t, uint64_t);
  mlir::MLIRContext **v22;
  void *v23;
  mlir::MLIRContext **v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(v26, 0, sizeof(v26));
  v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  v14 = v16;
  v15 = 0x300000000;
  v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::NoneType,mlir::Type,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8NoneTypeES2_NS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v20 = &v12;
  v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8NoneTypeES2_NS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v22 = &v11;
  v23 = &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NoneType,void>::id, (uint64_t)&v13);
  v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v4 = v17;
      else
        v4 = (llvm **)v17[0];
      (*(void (**)(uint64_t, void *))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v17[0], v17[1]);
  }
  v5 = v14;
  if ((_DWORD)v15)
  {
    v6 = 16 * v15;
    v7 = (void **)((char *)v14 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v14;
  }
  if (v5 != v16)
    free(v5);
  v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  v24 = &v11;
  v25 = &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id;
  v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_8NoneTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v14 = &v24;
  v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NoneType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

uint64_t *mlir::Dialect::addType<mlir::OpaqueType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, _QWORD *, uint64_t *, uint64_t *);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::OpaqueType,mlir::Type,mlir::detail::OpaqueTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueTypeES2_NSB_17OpaqueTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueTypeES2_NSA_17OpaqueTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addType<mlir::RankedTensorType>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *TypeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractType::get<mlir::RankedTensorType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addType<mlir::TupleType>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::TupleType,mlir::Type,mlir::detail::TupleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9TupleTypeES2_NSB_16TupleTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9TupleTypeES2_NSA_16TupleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addType<mlir::UnrankedMemRefType>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *TypeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractType::get<mlir::UnrankedMemRefType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addType<mlir::UnrankedTensorType>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *TypeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractType::get<mlir::UnrankedTensorType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addType<mlir::VectorType>(uint64_t a1)
{
  char v2;
  llvm **v3;
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *TypeUniquer;
  uint64_t v9;
  _BYTE v11[8];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15[2];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  mlir::AbstractType::get<mlir::VectorType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::VectorType,void>::id, (uint64_t)v11);
  v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0)
        v3 = v15;
      else
        v3 = (llvm **)v15[0];
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0)
      llvm::deallocate_buffer(v15[0], v15[1]);
  }
  v4 = (uint64_t *)v12;
  if (v13)
  {
    v5 = 16 * v13;
    v6 = (void **)((char *)v12 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = (uint64_t *)v12;
  }
  if (v4 != &v14)
    free(v4);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::VectorType,void>::id, 0, v9);
}

uint64_t mlir::detail::StorageUserBase<mlir::ComplexType,mlir::Type,mlir::detail::ComplexTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11ComplexTypeES2_NSB_18ComplexTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11ComplexTypeES2_NSA_18ComplexTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 **TypeUniquer;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  mlir::MLIRContext *Context;

  v8 = a2;
  if (*(_QWORD *)(a2 + 8))
    v5 = *a5;
  else
    v5 = 0;
  mlir::Attribute::getContext((mlir::Attribute *)&v8);
  v9 = v5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  v10[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18ComplexTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11ComplexTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id, &v9);
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E5M2Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14Float8E5M2TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  char *buffer;
  uint64_t v10;
  _QWORD *v11;
  void (**v12)(_QWORD, _QWORD *);
  void (*v13)(_QWORD, _QWORD *);
  _QWORD *v14;

  a2[10] += 8;
  v4 = *a2;
  v5 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2)
    v6 = v5 + 8 > a2[1] - *a2;
  else
    v6 = 1;
  if (v6)
  {
    v7 = *((_DWORD *)a2 + 6) >> 7;
    if (v7 >= 0x1E)
      LOBYTE(v7) = 30;
    v8 = 4096 << v7;
    buffer = (char *)llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
    v10 = *((unsigned int *)a2 + 6);
    if (v10 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v10 + 1, 8);
      LODWORD(v10) = *((_DWORD *)a2 + 6);
    }
    *(_QWORD *)(a2[2] + 8 * v10) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v8];
    v11 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *v11 = 0;
    *a2 = (uint64_t)(v11 + 1);
    v12 = *a1;
    v13 = **a1;
    if (v13)
      goto LABEL_13;
  }
  else
  {
    v11 = (_QWORD *)(v4 + v5);
    v14 = (_QWORD *)(v4 + v5);
    *v14 = 0;
    *a2 = (uint64_t)(v14 + 1);
    v12 = *a1;
    v13 = **a1;
    if (v13)
LABEL_13:
      v13(v12[1], v11);
  }
  return v11;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_14Float8E5M2TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E4M3FNType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16Float8E4M3FNTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_16Float8E4M3FNTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E5M2FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E5M2FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_18Float8E5M2FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E4M3FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E4M3FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_18Float8E4M3FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E4M3B11FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_21Float8E4M3B11FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_21Float8E4M3B11FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::BFloat16Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12BFloat16TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_12BFloat16TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float16Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float16TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float16TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::FloatTF32Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13FloatTF32TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_13FloatTF32TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float32Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float32TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float32TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float64Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float64TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float64TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float80Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float80TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float80TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float128Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12Float128TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_12Float128TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::FunctionType,mlir::Type,mlir::detail::FunctionTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12FunctionTypeES2_NSB_19FunctionTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::walkImmediateSubElementsImpl<mlir::FunctionType>(a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::walkImmediateSubElementsImpl<mlir::FunctionType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 12);
  v12 = v9 + 8 * v10;
  mlir::ValueRange::ValueRange((unint64_t *)&v23, v9, v10);
  result = (uint64_t)mlir::ValueRange::ValueRange((unint64_t *)&v25, v12, v11);
  v22[0] = a2;
  v22[1] = a3;
  v22[2] = a4;
  v22[3] = a5;
  v14 = v24;
  if (v24)
  {
    v15 = 0;
    v16 = v23;
    do
    {
      v17 = mlir::TypeRange::dereference_iterator(v16, v15);
      result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v22, v17);
      ++v15;
    }
    while (v14 != v15);
  }
  v18 = v26;
  if (v26)
  {
    v19 = 0;
    v20 = v25;
    do
    {
      v21 = mlir::TypeRange::dereference_iterator(v20, v19);
      result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v22, v21);
      ++v19;
    }
    while (v18 != v19);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12FunctionTypeES2_NSA_19FunctionTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7[2];
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::FunctionType>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::FunctionType>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  mlir::MLIRContext **v15;
  unint64_t v16;
  void *v17;
  mlir::MLIRContext **v18;
  mlir::MLIRContext *Context;
  unsigned __int8 **TypeUniquer;
  uint64_t v22;
  mlir::MLIRContext *v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  mlir::MLIRContext **v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v22 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 12);
  v7 = v4 + 8 * v5;
  mlir::ValueRange::ValueRange(&v24, v4, v5);
  mlir::ValueRange::ValueRange(&v26, v7, v6);
  v8 = *a3;
  v9 = a3[1];
  v10 = v9 - v25;
  if (v9 >= v25)
    v11 = v25;
  else
    v11 = a3[1];
  v12 = v8 + 8 * v25;
  v13 = mlir::ValueRange::ValueRange((unint64_t *)&v30, v8, v11);
  v14 = v30;
  v15 = v31;
  if (v10 >= v27)
    v16 = v27;
  else
    v16 = v10;
  mlir::ValueRange::ValueRange(v13, v12, v16);
  v17 = v30;
  v18 = v31;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  *(_QWORD *)&v29 = v14;
  *((_QWORD *)&v29 + 1) = v15;
  *(_QWORD *)&v28 = v17;
  *((_QWORD *)&v28 + 1) = v18;
  v23 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v30 = &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id;
  v31 = &v23;
  return mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail19FunctionTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_12FunctionTypeEJRNS1_9TypeRangeESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)&v30, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, &v29, &v28);
}

uint64_t mlir::detail::StorageUserBase<mlir::IndexType,mlir::Type,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9IndexTypeES2_NS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_9IndexTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::IntegerType,mlir::Type,mlir::detail::IntegerTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerTypeES2_NSA_18IntegerTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t Context;
  uint64_t v7;

  v7 = a2;
  v2 = *(_DWORD *)(a2 + 8);
  v3 = v2 & 0x3FFFFFFF;
  v4 = v2 >> 30;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v7);
  return mlir::IntegerType::get(Context, v3, v4);
}

void mlir::AbstractType::get<mlir::MemRefType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::MemRefType,mlir::BaseMemRefType,mlir::detail::MemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10MemRefTypeENS1_14BaseMemRefTypeENSB_17MemRefTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10MemRefTypeENS1_14BaseMemRefTypeENSA_17MemRefTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::getShape;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      v15 = 66;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[133], v2);
}

_QWORD *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::cloneWith(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  mlir::AffineMap *v6;
  _QWORD *v7;

  v5 = *(void **)a3;
  v6 = *(mlir::AffineMap **)(a3 + 8);
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      v5 = *(void **)(a2 + 8);
      v6 = *(mlir::AffineMap **)(a2 + 16);
    }
    v7 = (_QWORD *)mlir::MemRefType::get(v5, v6, a4, *(_QWORD **)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
    if (!v7)
      return v7;
LABEL_8:
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    return v7;
  }
  if (*(_BYTE *)(a3 + 16))
  {
    v7 = (_QWORD *)mlir::MemRefType::get(v5, v6, a4, 0, 0, *(_QWORD *)(a2 + 16));
    if (v7)
      goto LABEL_8;
  }
  else
  {
    v7 = (_QWORD *)mlir::UnrankedMemRefType::get(a4, *(_QWORD *)(a2 + 16));
    if (v7)
      goto LABEL_8;
  }
  return v7;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

BOOL mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::hasRank(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::getShape(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::MemRefType,mlir::BaseMemRefType,mlir::detail::MemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      v15 = 80;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[489] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10MemRefTypeENS1_14BaseMemRefTypeENSB_17MemRefTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v6);
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v7);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v8);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10MemRefTypeENS1_14BaseMemRefTypeENSA_17MemRefTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;

  *(_QWORD *)&v8 = a3;
  *((_QWORD *)&v8 + 1) = a4;
  *(_QWORD *)&v7 = a5;
  *((_QWORD *)&v7 + 1) = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::MemRefType>(a2, &v8, &v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::MemRefType>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  mlir::AffineMap *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17[2];
  void *v18;
  uint64_t v19;
  _QWORD v20[7];
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_OWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = a1;
  v11 = *a2;
  v12 = v3;
  v10 = *a3;
  v17[0] = (uint64_t **)&v11;
  v17[1] = (uint64_t **)&v10;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,mlir::MemRefLayoutAttrInterface const&,mlir::Attribute const&)#1}::operator()(v17, (uint64_t)&v12, &v13, &v14, &v15, (uint64_t)&v23);
  mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v18 = v20;
  v19 = 0x600000000;
  v4 = (mlir::AffineMap *)v24;
  if (!v24)
  {
    v4 = 0;
    v7 = v20;
    goto LABEL_9;
  }
  if (v24 < 7)
  {
    v6 = v20;
    v5 = v24;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v24, 8);
  v5 = v24;
  if (v24)
  {
    v6 = v18;
LABEL_7:
    memcpy(v6, v23, 8 * v5);
  }
  LODWORD(v19) = (_DWORD)v4;
  v7 = v18;
LABEL_9:
  v21 = v27;
  v20[6] = v26;
  v22 = v28;
  v8 = mlir::MemRefType::get(v7, v4, v26, (_QWORD *)v27, *((uint64_t *)&v27 + 1), v28);
  if (v18 != v20)
    free(v18);
  if (v23 != &v25)
    free(v23);
  return v8;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,mlir::MemRefLayoutAttrInterface const&,mlir::Attribute const&)#1}::operator()(uint64_t ***a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  void *__src;
  unsigned int v29;
  int v30;
  _QWORD v31[7];

  v31[6] = *MEMORY[0x1E0C80C00];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(*(uint64_t **)a2, *(_QWORD *)(a2 + 8), (uint64_t)&__src);
  if (*a3)
  {
    v11 = a1[1];
    v12 = *v11;
    v13 = (uint64_t)v11[1] - 1;
    ++*v11;
    v11[1] = (uint64_t *)v13;
    v14 = *v12;
    if (*a4)
      goto LABEL_3;
LABEL_7:
    v19 = 0;
    v18 = 0;
    if (*a5)
      goto LABEL_8;
LABEL_10:
    v23 = 0;
    goto LABEL_11;
  }
  v14 = 0;
  if (!*a4)
    goto LABEL_7;
LABEL_3:
  v15 = *a1;
  v16 = **a1;
  v17 = (uint64_t)(*a1)[1] - 1;
  *v15 = v16 + 1;
  v15[1] = (uint64_t *)v17;
  v18 = (_QWORD *)*v16;
  if (!*v16)
  {
    v19 = 0;
    if (*a5)
      goto LABEL_8;
    goto LABEL_10;
  }
  v19 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v18 + 8);
  if (!*a5)
    goto LABEL_10;
LABEL_8:
  v20 = *a1;
  v21 = **a1;
  v22 = (uint64_t)(*a1)[1] - 1;
  *v20 = v21 + 1;
  v20[1] = (uint64_t *)v22;
  v23 = *v21;
LABEL_11:
  *(_QWORD *)a6 = a6 + 16;
  *(_QWORD *)(a6 + 8) = 0x600000000;
  v24 = v29;
  v25 = __src;
  if (v29 && &__src != (void **)a6)
  {
    if (__src == v31)
    {
      v27 = v29;
      if (v29 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), v29, 8), v27 = v29, v25 = __src, v29))
      {
        memcpy(*(void **)a6, v25, 8 * v27);
        v25 = __src;
      }
      *(_DWORD *)(a6 + 8) = v24;
    }
    else
    {
      *(_QWORD *)a6 = __src;
      v26 = v30;
      *(_DWORD *)(a6 + 8) = v24;
      *(_DWORD *)(a6 + 12) = v26;
      __src = v31;
      v30 = 0;
      v25 = v31;
    }
    v29 = 0;
  }
  *(_QWORD *)(a6 + 64) = v14;
  *(_QWORD *)(a6 + 72) = v18;
  *(_QWORD *)(a6 + 80) = v19;
  *(_QWORD *)(a6 + 88) = v23;
  if (v25 != v31)
    free(v25);
}

uint64_t mlir::detail::StorageUserBase<mlir::NoneType,mlir::Type,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8NoneTypeES2_NS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_8NoneTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)(a1 + 8), **(_QWORD **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::OpaqueType,mlir::Type,mlir::detail::OpaqueTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueTypeES2_NSB_17OpaqueTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueTypeES2_NSA_17OpaqueTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5[2];

  v5[0] = a3;
  v5[1] = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueType>(a2, v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueType>(_QWORD *a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **TypeUniquer;
  unsigned int v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[2];
  mlir::MLIRContext *Context;
  _QWORD v12[2];
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v8 = a1;
  v2 = a1[2];
  v3 = a1[3];
  if (a1[1])
    v4 = **a2;
  else
    v4 = 0;
  mlir::Attribute::getContext((mlir::Attribute *)&v8);
  v9 = v4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  v10[1] = &Context;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10OpaqueTypeEJRNS1_10StringAttrERNS_9StringRefEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v16[1] = v10;
  v14 = v9;
  v15[0] = v2;
  v15[1] = v3;
  v6 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef>(&v14, (uint64_t)v15);
  v12[0] = &v14;
  v12[1] = v16;
  v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

void mlir::AbstractType::get<mlir::RankedTensorType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::RankedTensorType,mlir::TensorType,mlir::detail::RankedTensorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16RankedTensorTypeENS1_10TensorTypeENSB_23RankedTensorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16RankedTensorTypeENS1_10TensorTypeENSA_23RankedTensorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::getShape;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      v15 = 66;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[133], v2);
}

_QWORD *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::cloneWith(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a3;
  v8 = *((_QWORD *)a3 + 2);
  v9 = a2;
  v4 = (_QWORD *)mlir::TensorType::cloneWith((uint64_t)&v9, (uint64_t)&v7, a4);
  v5 = v4;
  if (!v4)
    return 0;
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
  return v5;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

BOOL mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::hasRank(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::getShape(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::RankedTensorType,mlir::TensorType,mlir::detail::RankedTensorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      v15 = 80;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[489] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16RankedTensorTypeENS1_10TensorTypeENSB_23RankedTensorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16RankedTensorTypeENS1_10TensorTypeENSA_23RankedTensorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;

  *(_QWORD *)&v8 = a3;
  *((_QWORD *)&v8 + 1) = a4;
  *(_QWORD *)&v7 = a5;
  *((_QWORD *)&v7 + 1) = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::RankedTensorType>(a2, &v8, &v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::RankedTensorType>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 *v5;
  unsigned int v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t v9;
  unsigned __int8 **TypeUniquer;
  unsigned int v11;
  uint64_t ParametricStorageTypeImpl;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  mlir::MLIRContext *Context;
  _QWORD v22[2];
  __int128 **v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  void *v29;
  uint64_t v30;
  _QWORD v31[8];
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v3 = *(_OWORD *)(a1 + 24);
  v16 = *(_OWORD *)(a1 + 8);
  v17 = v3;
  v4 = *a2;
  v14 = *a3;
  v15 = v4;
  v24 = &v15;
  v25 = &v14;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,mlir::Attribute const&)#1}::operator()((uint64_t)&v24, (uint64_t)&v16, &v17, (_QWORD *)&v17 + 1, (uint64_t)&v32);
  mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v29 = v31;
  v30 = 0x600000000;
  v5 = (__int128 *)v33;
  if (!v33)
  {
    v5 = 0;
    v8 = (__int128 *)v31;
    goto LABEL_9;
  }
  if (v33 < 7)
  {
    v7 = v31;
    v6 = v33;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v33, 8);
  v6 = v33;
  if (v33)
  {
    v7 = v29;
LABEL_7:
    memcpy(v7, v32, 8 * v6);
  }
  LODWORD(v30) = (_DWORD)v5;
  v8 = (__int128 *)v29;
LABEL_9:
  v9 = v36;
  v31[6] = v35;
  v31[7] = v36;
  v19 = v35;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v20[0] = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
  v20[1] = &Context;
  v28[0] = _ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
  v28[1] = v20;
  v24 = v8;
  v25 = v5;
  v26 = v19;
  v27 = v9;
  v11 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>((uint64_t)&v24, &v26, &v27);
  v22[0] = &v24;
  v22[1] = v28;
  v23 = &v24;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v23, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v22);
  if (v29 != v31)
    free(v29);
  if (v32 != &v34)
    free(v32);
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,mlir::Attribute const&)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  int v19;
  unsigned int v20;
  void *__src;
  unsigned int v22;
  int v23;
  _QWORD v24[7];

  v24[6] = *MEMORY[0x1E0C80C00];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(*(uint64_t **)a2, *(_QWORD *)(a2 + 8), (uint64_t)&__src);
  if (!*a3)
  {
    v12 = 0;
    if (*a4)
      goto LABEL_3;
LABEL_5:
    v16 = 0;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(uint64_t **)v9;
  v11 = *(_QWORD *)(v9 + 8) - 1;
  *(_QWORD *)v9 += 8;
  *(_QWORD *)(v9 + 8) = v11;
  v12 = *v10;
  if (!*a4)
    goto LABEL_5;
LABEL_3:
  v13 = *(uint64_t ***)a1;
  v14 = **(uint64_t ***)a1;
  v15 = *(_QWORD *)(*(_QWORD *)a1 + 8) - 1;
  *v13 = v14 + 1;
  v13[1] = (uint64_t *)v15;
  v16 = *v14;
LABEL_6:
  *(_QWORD *)a5 = a5 + 16;
  *(_QWORD *)(a5 + 8) = 0x600000000;
  v17 = v22;
  v18 = __src;
  if (v22 && &__src != (void **)a5)
  {
    if (__src == v24)
    {
      v20 = v22;
      if (v22 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v22, 8), v20 = v22, v18 = __src, v22))
      {
        memcpy(*(void **)a5, v18, 8 * v20);
        v18 = __src;
      }
      *(_DWORD *)(a5 + 8) = v17;
    }
    else
    {
      *(_QWORD *)a5 = __src;
      v19 = v23;
      *(_DWORD *)(a5 + 8) = v17;
      *(_DWORD *)(a5 + 12) = v19;
      __src = v24;
      v23 = 0;
      v18 = v24;
    }
    v22 = 0;
  }
  *(_QWORD *)(a5 + 64) = v12;
  *(_QWORD *)(a5 + 72) = v16;
  if (v18 != v24)
    free(v18);
}

uint64_t mlir::detail::StorageUserBase<mlir::TupleType,mlir::Type,mlir::detail::TupleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9TupleTypeES2_NSB_16TupleTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)mlir::ValueRange::ValueRange(&v15, a2 + 16, *(unsigned int *)(a2 + 8));
  v11 = v15;
  v12 = v16;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  if (v12)
  {
    for (i = 0; i != v12; ++i)
    {
      v14 = mlir::TypeRange::dereference_iterator(v11, i);
      result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)&v15, v14);
    }
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9TupleTypeES2_NSA_16TupleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7[2];
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::TupleType>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::TupleType>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **TypeUniquer;
  unsigned int v8;
  uint64_t v10;
  _QWORD v11[2];
  mlir::MLIRContext *Context;
  _QWORD v13[2];
  _QWORD *v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t *);
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  mlir::ValueRange::ValueRange((unint64_t *)&v16, a1 + 16, *(unsigned int *)(a1 + 8));
  if (a3[1] >= (unint64_t)v17)
    v4 = v17;
  else
    v4 = a3[1];
  mlir::ValueRange::ValueRange((unint64_t *)&v16, *a3, v4);
  v5 = (uint64_t)v16;
  v6 = (uint64_t)v17;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id;
  v11[1] = &Context;
  v16 = _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJRNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v17 = v11;
  v15[0] = v5;
  v15[1] = v6;
  v8 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v5, 0, v5, v6);
  v13[1] = &v16;
  v14 = v15;
  v13[0] = v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

void mlir::AbstractType::get<mlir::UnrankedMemRefType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::UnrankedMemRefType,mlir::BaseMemRefType,mlir::detail::UnrankedMemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedMemRefTypeENS1_14BaseMemRefTypeENSB_25UnrankedMemRefTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedMemRefTypeENS1_14BaseMemRefTypeENSA_25UnrankedMemRefTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::getShape;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      v15 = 66;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[133], v2);
}

_QWORD *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::cloneWith(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  mlir::AffineMap *v6;
  _QWORD *v7;

  v5 = *(void **)a3;
  v6 = *(mlir::AffineMap **)(a3 + 8);
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      v5 = *(void **)(a2 + 8);
      v6 = *(mlir::AffineMap **)(a2 + 16);
    }
    v7 = (_QWORD *)mlir::MemRefType::get(v5, v6, a4, *(_QWORD **)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
    if (!v7)
      return v7;
LABEL_8:
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    return v7;
  }
  if (*(_BYTE *)(a3 + 16))
  {
    v7 = (_QWORD *)mlir::MemRefType::get(v5, v6, a4, 0, 0, *(_QWORD *)(a2 + 16));
    if (v7)
      goto LABEL_8;
  }
  else
  {
    v7 = (_QWORD *)mlir::UnrankedMemRefType::get(a4, *(_QWORD *)(a2 + 16));
    if (v7)
      goto LABEL_8;
  }
  return v7;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::hasRank(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::getShape()
{
  return 0;
}

BOOL mlir::detail::StorageUserBase<mlir::UnrankedMemRefType,mlir::BaseMemRefType,mlir::detail::UnrankedMemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      v15 = 80;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[489] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedMemRefTypeENS1_14BaseMemRefTypeENSB_25UnrankedMemRefTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedMemRefTypeENS1_14BaseMemRefTypeENSA_25UnrankedMemRefTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a2 + 8))
  {
    v6 = 0;
    if (v5)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v6 = *a5;
  if (!v5)
    goto LABEL_5;
LABEL_3:
  v7 = *a3;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  return mlir::UnrankedMemRefType::get(v6, v7);
}

void mlir::AbstractType::get<mlir::UnrankedTensorType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::UnrankedTensorType,mlir::TensorType,mlir::detail::UnrankedTensorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedTensorTypeENS1_10TensorTypeENSB_25UnrankedTensorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedTensorTypeENS1_10TensorTypeENSA_25UnrankedTensorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::getShape;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      v15 = 66;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[133], v2);
}

_QWORD *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::cloneWith(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a3;
  v8 = *((_QWORD *)a3 + 2);
  v9 = a2;
  v4 = (_QWORD *)mlir::TensorType::cloneWith((uint64_t)&v9, (uint64_t)&v7, a4);
  v5 = v4;
  if (!v4)
    return 0;
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
  return v5;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::hasRank(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::getShape()
{
  return 0;
}

BOOL mlir::detail::StorageUserBase<mlir::UnrankedTensorType,mlir::TensorType,mlir::detail::UnrankedTensorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      v15 = 80;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[489] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedTensorTypeENS1_10TensorTypeENSB_25UnrankedTensorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedTensorTypeENS1_10TensorTypeENSA_25UnrankedTensorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 **TypeUniquer;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  mlir::MLIRContext *Context;

  v8 = a2;
  if (*(_QWORD *)(a2 + 8))
    v5 = *a5;
  else
    v5 = 0;
  mlir::Attribute::getContext((mlir::Attribute *)&v8);
  v9 = v5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v10[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail25UnrankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedTensorTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, &v9);
}

void mlir::AbstractType::get<mlir::VectorType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  char v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>>((uint64_t)&v11);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::VectorType,mlir::Type,mlir::detail::VectorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10VectorTypeES2_NSB_17VectorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(_QWORD *)(a2 + 112) = &v9;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10VectorTypeES2_NSA_17VectorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(_QWORD *)(a2 + 128) = &v8;
  *(_QWORD *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
  v4 = v11;
  if ((_DWORD)v12)
  {
    v5 = 16 * v12;
    v6 = (void **)((char *)v11 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v11;
  }
  if (v4 != v13)
    free(v4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::getShape;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      v15 = 66;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[133], v2);
}

_QWORD *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::cloneWith(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (*(_BYTE *)(a3 + 16))
  {
    v4 = *(_QWORD *)a3;
    v5 = (unint64_t *)(a3 + 8);
  }
  else
  {
    v5 = (unint64_t *)(a2 + 16);
    v4 = *(_QWORD *)(a2 + 8);
  }
  v6 = (_QWORD *)mlir::VectorType::get(v4, *v5, a4, *(_QWORD **)(a2 + 32), *(_QWORD *)(a2 + 40));
  v7 = v6;
  if (!v6)
    return 0;
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  return v7;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::hasRank()
{
  return 1;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::getShape(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::VectorType,mlir::Type,mlir::detail::VectorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      v15 = 80;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  return v2[489] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10VectorTypeES2_NSB_17VectorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 24);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10VectorTypeES2_NSA_17VectorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;

  *(_QWORD *)&v8 = a3;
  *((_QWORD *)&v8 + 1) = a4;
  *(_QWORD *)&v7 = a5;
  *((_QWORD *)&v7 + 1) = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::VectorType>(a2, &v8, &v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::VectorType>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  unsigned int v4;
  unsigned int v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[2];
  void *v21;
  uint64_t v22;
  _BYTE v23[48];
  uint64_t v24;
  void *v25;
  __int128 v26;
  _BYTE v27[40];
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  _QWORD v34[6];

  v34[5] = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_OWORD *)(a1 + 32);
  v15 = *a2;
  v16 = v3;
  v14 = *a3;
  v19 = a1;
  v20[0] = &v15;
  v20[1] = &v14;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,llvm::ArrayRef<BOOL> const&)#1}::operator()((uint64_t)v20, (uint64_t)&v16, &v17, (uint64_t)&v18, (uint64_t)&v28);
  mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v21 = v23;
  v22 = 0x600000000;
  v4 = v29;
  if (v29)
  {
    if (v29 < 7)
    {
      v6 = v23;
      v5 = v29;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v29, 8);
      v5 = v29;
      if (!v29)
      {
LABEL_7:
        LODWORD(v22) = v4;
        goto LABEL_8;
      }
      v6 = v21;
    }
    memcpy(v6, v28, 8 * v5);
    goto LABEL_7;
  }
LABEL_8:
  v7 = v31;
  v8 = v33;
  v24 = v31;
  v25 = v27;
  v26 = xmmword_181233150;
  if (!v33)
  {
    v11 = v27;
    goto LABEL_16;
  }
  if (v33 < 0x29)
  {
    v10 = v27;
    v9 = v33;
    goto LABEL_14;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v25, v27, v33, 1);
  v9 = v33;
  if (v33)
  {
    v10 = v25;
LABEL_14:
    memcpy(v10, v32, v9);
  }
  *(_QWORD *)&v26 = v8;
  v4 = v22;
  v7 = v24;
  v11 = v25;
LABEL_16:
  v12 = mlir::VectorType::get((uint64_t)v21, v4, v7, v11, v8);
  if (v25 != v27)
    free(v25);
  if (v21 != v23)
    free(v21);
  if (v32 != v34)
    free(v32);
  if (v28 != &v30)
    free(v28);
  return v12;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,llvm::ArrayRef<BOOL> const&)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  _BYTE *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE v22[40];
  void *__src;
  unsigned int v24;
  int v25;
  _QWORD v26[7];

  v26[6] = *MEMORY[0x1E0C80C00];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(*(uint64_t **)a2, *(_QWORD *)(a2 + 8), (uint64_t)&__src);
  if (*a3)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(uint64_t **)v9;
    v11 = *(_QWORD *)(v9 + 8) - 1;
    *(_QWORD *)v9 += 8;
    *(_QWORD *)(v9 + 8) = v11;
    v12 = *v10;
  }
  else
  {
    v12 = 0;
  }
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<BOOL>,void>::replace(*(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)&v19);
  *(_QWORD *)a5 = a5 + 16;
  *(_QWORD *)(a5 + 8) = 0x600000000;
  v13 = v24;
  if (v24 && &__src != (void **)a5)
  {
    if (__src == v26)
    {
      v15 = v24;
      if (v24 < 7 || (llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v24, 8), (v15 = v24) != 0))
        memcpy(*(void **)a5, __src, 8 * v15);
      *(_DWORD *)(a5 + 8) = v13;
    }
    else
    {
      *(_QWORD *)a5 = __src;
      v14 = v25;
      *(_DWORD *)(a5 + 8) = v13;
      *(_DWORD *)(a5 + 12) = v14;
      __src = v26;
      v25 = 0;
    }
    v24 = 0;
  }
  *(_QWORD *)(a5 + 72) = a5 + 96;
  *(_QWORD *)(a5 + 64) = v12;
  *(_OWORD *)(a5 + 80) = xmmword_181233150;
  v16 = v19;
  if ((void **)(a5 + 72) != &v19)
  {
    v17 = v20;
    if (v20)
    {
      if (v19 != v22)
      {
        *(_QWORD *)(a5 + 72) = v19;
        *(_QWORD *)(a5 + 80) = v17;
        *(_QWORD *)(a5 + 88) = v21;
        goto LABEL_23;
      }
      v18 = v20;
      if (v20 < 0x29
        || (llvm::SmallVectorBase<unsigned long long>::grow_pod(a5 + 72, (void *)(a5 + 96), v20, 1),
            v16 = v19,
            (v18 = v20) != 0))
      {
        memcpy(*(void **)(a5 + 72), v16, v18);
        v16 = v19;
      }
      *(_QWORD *)(a5 + 80) = v17;
      v20 = 0;
    }
  }
  if (v16 != v22)
    free(v16);
LABEL_23:
  if (__src != v26)
    free(__src);
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<BOOL>,void>::replace(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char v8;
  char v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD v20[6];

  v20[5] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v4 = xmmword_181233150;
  v19 = xmmword_181233150;
  if (a2)
  {
    v5 = a2;
    v6 = 0;
    v7 = v20;
    do
    {
      while (v6 < *((_QWORD *)&v19 + 1))
      {
        v8 = *a1++;
        *((_BYTE *)v18 + v6++) = v8;
        *(_QWORD *)&v19 = v6;
        if (!--v5)
          goto LABEL_9;
      }
      v9 = *a1;
      v10 = v6 + 1;
      if (v6 + 1 > *((_QWORD *)&v19 + 1))
      {
        v16 = v5;
        v17 = a1;
        v11 = v7;
        v15 = *a1;
        v14 = v4;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v18, v7, v10, 1);
        v4 = v14;
        v9 = v15;
        v5 = v16;
        a1 = v17;
        v7 = v11;
        v6 = v19;
      }
      *((_BYTE *)v18 + v6) = v9;
      v6 = v19 + 1;
      *(_QWORD *)&v19 = v19 + 1;
      ++a1;
      --v5;
    }
    while (v5);
LABEL_9:
    v12 = v18;
    *(_QWORD *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = v4;
    if (v6 && &v18 != (_QWORD **)a3)
    {
      if (v12 != v20)
      {
        *(_QWORD *)a3 = v12;
        *(_QWORD *)(a3 + 8) = v6;
        *(_QWORD *)(a3 + 16) = *((_QWORD *)&v19 + 1);
        return;
      }
      v13 = v6;
      if (v6 < 0x29
        || (llvm::SmallVectorBase<unsigned long long>::grow_pod(a3, (void *)(a3 + 24), v6, 1),
            v7 = v18,
            (v13 = v19) != 0))
      {
        memcpy(*(void **)a3, v7, v13);
        v7 = v18;
      }
      *(_QWORD *)(a3 + 8) = v6;
      *(_QWORD *)&v19 = 0;
      v12 = v7;
    }
    if (v12 != v20)
      free(v12);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = xmmword_181233150;
  }
}

char *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucket<unsigned int const&,llvm::detail::DenseSetEmpty&>(_DWORD *__b, char *a2, _DWORD *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  char *v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *__b;
  v7 = *__b >> 1;
  if ((*__b & 1) != 0)
    v8 = 4;
  else
    v8 = __b[4];
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - __b[1] > v8 >> 3)
  {
    v9 = *__b & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow((uint64_t)__b, v8);
  v11 = (char *)(__b + 2);
  v6 = *__b;
  if ((*__b & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = __b[4];
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = (char *)*((_QWORD *)__b + 1);
  }
  v9 = *__b & 1;
  v13 = v12 - 1;
  v14 = (37 * *a3) & (v12 - 1);
  a2 = &v11[4 * v14];
  v15 = *(_DWORD *)a2;
  if (*a3 != *(_DWORD *)a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -1)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -2;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = &v11[4 * (v19 & v13)];
      v15 = *(_DWORD *)a2;
      if (*a3 == *(_DWORD *)a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *__b = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(_DWORD *)a2 != -1)
    --__b[1];
  *(_DWORD *)a2 = *a3;
  return a2;
}

uint64_t llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t __b, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *buffer;
  BOOL v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  int v25;
  int v26;
  _DWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  BOOL v41;
  int v42;
  int v43;
  _BYTE v44[20];

  v2 = a2;
  v3 = __b;
  *(_QWORD *)&v44[12] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_BYTE *)__b & 1) == 0)
  {
    v7 = *(llvm **)(__b + 8);
    v8 = *(unsigned int *)(__b + 16);
    if (v2 > 4)
    {
      buffer = llvm::allocate_buffer(4 * v2, (std::align_val_t)4uLL);
      *(_QWORD *)(v3 + 8) = buffer;
      *(_QWORD *)(v3 + 16) = v2;
      v17 = (*(_DWORD *)v3 & 1) == 0;
      *(_QWORD *)v3 = *(_DWORD *)v3 & 1;
      if (v17)
        v18 = v2;
      else
        v18 = 4;
      if (!v17)
        buffer = (void *)(v3 + 8);
      memset(buffer, 255, 4 * v18);
      if (!(_DWORD)v8)
        goto LABEL_43;
    }
    else
    {
      *(_QWORD *)__b = 1;
      memset((void *)(__b + 8), 255, 0x10uLL);
      if (!(_DWORD)v8)
        goto LABEL_43;
    }
    v19 = v7;
    do
    {
      v26 = *(_DWORD *)v19;
      if (*(_DWORD *)v19 <= 0xFFFFFFFD)
      {
        if ((*(_BYTE *)v3 & 1) != 0)
        {
          v21 = 4;
          v20 = v3 + 8;
        }
        else
        {
          v20 = *(_QWORD *)(v3 + 8);
          v21 = *(_DWORD *)(v3 + 16);
        }
        v22 = v21 - 1;
        v23 = (v21 - 1) & (37 * v26);
        v24 = (_DWORD *)(v20 + 4 * v23);
        v25 = *v24;
        if (v26 != *v24)
        {
          v27 = 0;
          v28 = 1;
          while (v25 != -1)
          {
            if (v27)
              v29 = 0;
            else
              v29 = v25 == -2;
            if (v29)
              v27 = v24;
            v30 = v23 + v28++;
            v23 = v30 & v22;
            v24 = (_DWORD *)(v20 + 4 * (v30 & v22));
            v25 = *v24;
            if (v26 == *v24)
              goto LABEL_26;
          }
          if (v27)
            v24 = v27;
        }
LABEL_26:
        *v24 = v26;
        *(_DWORD *)v3 += 2;
      }
      v19 = (llvm *)((char *)v19 + 4);
    }
    while (v19 != (llvm *)((char *)v7 + 4 * v8));
LABEL_43:
    llvm::deallocate_buffer(v7, (void *)(4 * v8));
  }
  v9 = (unsigned int *)&v43;
  if (*(_DWORD *)(__b + 8) <= 0xFFFFFFFD)
  {
    v43 = *(_DWORD *)(__b + 8);
    v9 = (unsigned int *)v44;
    v10 = *(_DWORD *)(__b + 12);
    if (v10 > 0xFFFFFFFD)
    {
LABEL_11:
      v11 = *(_DWORD *)(__b + 16);
      if (v11 > 0xFFFFFFFD)
        goto LABEL_12;
      goto LABEL_46;
    }
  }
  else
  {
    v10 = *(_DWORD *)(__b + 12);
    if (v10 > 0xFFFFFFFD)
      goto LABEL_11;
  }
  *v9++ = v10;
  v11 = *(_DWORD *)(__b + 16);
  if (v11 > 0xFFFFFFFD)
  {
LABEL_12:
    v12 = *(_DWORD *)(__b + 20);
    if (v12 > 0xFFFFFFFD)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  *v9++ = v11;
  v12 = *(_DWORD *)(__b + 20);
  if (v12 > 0xFFFFFFFD)
  {
LABEL_13:
    v13 = *(_DWORD *)__b;
    if (v2 < 5)
      goto LABEL_14;
LABEL_48:
    *(_DWORD *)__b = v13 & 0xFFFFFFFE;
    __b = (uint64_t)llvm::allocate_buffer(4 * v2, (std::align_val_t)4uLL);
    *(_QWORD *)(v3 + 8) = __b;
    *(_QWORD *)(v3 + 16) = v2;
    v31 = *(_DWORD *)v3;
    *(_QWORD *)v3 = *(_DWORD *)v3 & 1;
    if ((v31 & 1) == 0)
      goto LABEL_15;
LABEL_49:
    v14 = 4;
    v15 = (void *)(v3 + 8);
    goto LABEL_50;
  }
LABEL_47:
  *v9++ = v12;
  v13 = *(_DWORD *)__b;
  if (v2 >= 5)
    goto LABEL_48;
LABEL_14:
  *(_QWORD *)__b = v13 & 1;
  if ((v13 & 1) != 0)
    goto LABEL_49;
LABEL_15:
  v14 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v14)
    goto LABEL_51;
  v15 = *(void **)(v3 + 8);
LABEL_50:
  __b = (uint64_t)memset(v15, 255, 4 * v14);
LABEL_51:
  if (&v43 != (int *)v9)
  {
    v32 = (unsigned int *)&v43;
    do
    {
      v39 = *v32;
      if (*v32 <= 0xFFFFFFFD)
      {
        if ((*(_BYTE *)v3 & 1) != 0)
        {
          v34 = 4;
          v33 = v3 + 8;
        }
        else
        {
          v33 = *(_QWORD *)(v3 + 8);
          v34 = *(_DWORD *)(v3 + 16);
        }
        v35 = v34 - 1;
        v36 = (v34 - 1) & (37 * v39);
        v37 = (unsigned int *)(v33 + 4 * v36);
        v38 = *v37;
        if (v39 != *v37)
        {
          v40 = 0;
          __b = 1;
          while (v38 != -1)
          {
            if (v40)
              v41 = 0;
            else
              v41 = v38 == -2;
            if (v41)
              v40 = v37;
            v42 = v36 + __b;
            __b = (__b + 1);
            v36 = v42 & v35;
            v37 = (unsigned int *)(v33 + 4 * (v42 & v35));
            v38 = *v37;
            if (v39 == *v37)
              goto LABEL_55;
          }
          if (v40)
            v37 = v40;
        }
LABEL_55:
        *v37 = v39;
        *(_DWORD *)v3 += 2;
      }
      ++v32;
    }
    while (v32 != v9);
  }
  return __b;
}

unint64_t llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned __int8 v7;
  char *v8;
  char *v9;
  char *v10;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD v18[4];
  _OWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  if ((v7 & 1) == 0)
  {
    v14 = a1;
    a1 = v14;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a1 = v14;
    }
  }
  v21 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v18[0] = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a1, *(_QWORD *)a1 + 8 * *(_QWORD *)(a1 + 8));
  v15 = 0;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v15, (_QWORD *)v18 + 1, (unint64_t)v19, (*a2 >> 4) ^ (*a2 >> 9));
  v16 = v15;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v16, v8, (unint64_t)v19, (*a3 >> 4) ^ (*a3 >> 9));
  v17 = v16;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v17, v9, (unint64_t)v19, (*a4 >> 4) ^ (*a4 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v18, v17, v10, (char *)v19);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 16);
  return v3 == *(_QWORD *)(*a1 + 8)
      && !memcmp(*(const void **)(a2 + 8), *(const void **)v2, 8 * v3)
      && *(_QWORD *)(a2 + 24) == *(_QWORD *)(v2 + 16)
      && *(_QWORD *)(a2 + 32) == *(_QWORD *)(v2 + 24)
      && *(_QWORD *)(a2 + 48) == *(_QWORD *)(v2 + 40);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::detail::MemRefTypeStorage::construct(a2, (uint64_t *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::detail::MemRefTypeStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  char *buffer;
  uint64_t v23;
  unint64_t v24;
  __n128 result;
  __n128 v26;

  v3 = a2[1];
  v4 = a2[2];
  v26 = *(__n128 *)(a2 + 3);
  v5 = a2[5];
  if (v3)
  {
    v6 = *a2;
    v7 = 8 * v3;
    v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
    v9 = v8;
    if ((unint64_t)(8 * v3 - 8) < 0x18)
    {
      v10 = (_QWORD *)v8;
      v11 = (uint64_t *)v6;
    }
    else
    {
      v10 = (_QWORD *)v8;
      v11 = (uint64_t *)v6;
      if ((unint64_t)(v8 - v6) >= 0x20)
      {
        v12 = ((unint64_t)(v7 - 8) >> 3) + 1;
        v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
        v10 = (_QWORD *)(v8 + v13);
        v11 = (uint64_t *)(v6 + v13);
        v14 = (__int128 *)(v6 + 16);
        v15 = (_OWORD *)(v8 + 16);
        v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v17 = *v14;
          *(v15 - 1) = *(v14 - 1);
          *v15 = v17;
          v14 += 2;
          v15 += 2;
          v16 -= 4;
        }
        while (v16);
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    do
    {
      v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != (uint64_t *)(v6 + v7));
  }
  else
  {
    v9 = 0;
  }
LABEL_11:
  *(_QWORD *)(__sz + 80) += 56;
  if (*(_QWORD *)__sz)
    v19 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 56 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v19 = 1;
  if (v19)
  {
    v20 = *(_DWORD *)(__sz + 24) >> 7;
    if (v20 >= 0x1E)
      LOBYTE(v20) = 30;
    v21 = 4096 << v20;
    buffer = (char *)llvm::allocate_buffer(4096 << v20, (std::align_val_t)8uLL);
    v23 = *(unsigned int *)(__sz + 24);
    if (v23 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v23 + 1, 8);
      LODWORD(v23) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v23) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v21];
    v24 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v24 = (*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)__sz = v24 + 56;
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = v9;
  *(_QWORD *)(v24 + 16) = v3;
  *(_QWORD *)(v24 + 24) = v4;
  result = v26;
  *(__n128 *)(v24 + 32) = v26;
  *(_QWORD *)(v24 + 48) = v5;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_25MemRefLayoutAttrInterfaceERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 16);
  return v3 == *(_QWORD *)(*a1 + 8)
      && !memcmp(*(const void **)(a2 + 8), *(const void **)v2, 8 * v3)
      && *(_QWORD *)(a2 + 24) == *(_QWORD *)(v2 + 16)
      && *(_QWORD *)(a2 + 32) == *(_QWORD *)(v2 + 24)
      && *(_QWORD *)(a2 + 48) == *(_QWORD *)(v2 + 40);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::detail::MemRefTypeStorage::construct(__sz, (uint64_t *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_13AffineMapAttrERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::ShapedType::cloneWith(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t (**v3)(_QWORD, uint64_t, __int128 *, uint64_t);
  uint64_t v4;
  uint64_t (*v5)(_QWORD, uint64_t, __int128 *, uint64_t);
  __int128 v7;
  uint64_t v8;

  v4 = *a1;
  v3 = (uint64_t (**)(_QWORD, uint64_t, __int128 *, uint64_t))a1[1];
  v5 = *v3;
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  return v5(v3, v4, &v7, a3);
}

uint64_t mlir::ShapedType::getNumElements(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (a2)
  {
    v2 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v2)
    {
      v3 = v2 + 1;
      v4 = (v2 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v5 = &a1[v4];
      v6 = a1 + 1;
      v7 = 1;
      v8 = v4;
      v9 = 1;
      do
      {
        v7 *= *(v6 - 1);
        v9 *= *v6;
        v6 += 2;
        v8 -= 2;
      }
      while (v8);
      v10 = v9 * v7;
      if (v3 == v4)
        return v10;
    }
    else
    {
      v10 = 1;
      v5 = a1;
    }
    do
    {
      v12 = *v5++;
      v10 *= v12;
    }
    while (v5 != &a1[a2]);
    return v10;
  }
  return 1;
}

uint64_t mlir::DiagnosticArgument::DiagnosticArgument(uint64_t result, uint64_t a2)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

{
  *(_DWORD *)result = 4;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void mlir::DiagnosticArgument::print(mlir::DiagnosticArgument *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  const void *v4;
  size_t v5;
  void *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v2 = a2;
  switch(*(_DWORD *)this)
  {
    case 0:
      v9 = *((_QWORD *)this + 1);
      mlir::Attribute::print((mlir::Attribute *)&v9, a2, 0);
      break;
    case 1:
      llvm::raw_ostream::operator<<(a2, *((double *)this + 1));
      break;
    case 2:
      llvm::raw_ostream::operator<<(a2, *((_QWORD *)this + 1));
      break;
    case 3:
      v4 = (const void *)*((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = (void *)*((_QWORD *)v2 + 4);
      if (v5 <= *((_QWORD *)v2 + 3) - (_QWORD)v6)
      {
        if (v5)
        {
          memcpy(v6, v4, v5);
          *((_QWORD *)v2 + 4) += v5;
        }
      }
      else
      {
        llvm::raw_ostream::write(v2, (const char *)v4, v5);
      }
      break;
    case 4:
      v7 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 3))
      {
        v2 = llvm::raw_ostream::write(a2, 39);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v7 + 1;
        *v7 = 39;
      }
      v9 = *((_QWORD *)this + 1);
      mlir::Type::print((llvm::raw_ostream *)&v9, v2);
      v8 = (_BYTE *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v8 >= *((_QWORD *)v2 + 3))
      {
        llvm::raw_ostream::write(v2, 39);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v8 + 1;
        *v8 = 39;
      }
      break;
    case 5:
      llvm::raw_ostream::operator<<(a2, *((_QWORD *)this + 1));
      break;
    default:
      return;
  }
}

uint64_t mlir::Diagnostic::operator<<(uint64_t a1, char a2)
{
  const void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  const void **v15;
  __int16 v16;
  int v17;
  const void **v18;
  uint64_t v19;

  v16 = 264;
  LOBYTE(v15) = a2;
  v3 = twineToStrRef(&v15, (_QWORD *)(a1 + 128));
  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v17 = 3;
  v18 = v3;
  v19 = v6;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = &v17;
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v17;
    if (v5 <= (unint64_t)&v17 && v13)
    {
      v14 = (char *)&v17 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      v5 = *(_QWORD *)(a1 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      v5 = *(_QWORD *)(a1 + 16);
      v8 = &v17;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(a1 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::Diagnostic::operator<<(uint64_t a1, const void ***a2)
{
  const void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  const void **v16;
  uint64_t v17;

  v3 = twineToStrRef(a2, (_QWORD *)(a1 + 128));
  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v15 = 3;
  v16 = v3;
  v17 = v6;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      v5 = *(_QWORD *)(a1 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      v5 = *(_QWORD *)(a1 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(a1 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

const void **twineToStrRef(const void ***a1, _QWORD *a2)
{
  const void **v3;
  size_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  int v11;
  void *__p;
  void *v13;
  __int128 v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = xmmword_181236C00;
  if (*((_BYTE *)a1 + 33) == 1)
  {
    v3 = 0;
    switch(*((_BYTE *)a1 + 32))
    {
      case 1:
        return v3;
      case 3:
        v3 = *a1;
        if (!*a1)
          return v3;
        v4 = strlen((const char *)*a1);
        v5 = v15;
        break;
      case 4:
        v11 = *((char *)*a1 + 23);
        if (v11 >= 0)
          v3 = *a1;
        else
          v3 = (const void **)**a1;
        if (v11 >= 0)
          v4 = *((unsigned __int8 *)*a1 + 23);
        else
          v4 = (size_t)(*a1)[1];
        v5 = v15;
        break;
      case 5:
      case 6:
        v3 = *a1;
        v4 = (size_t)a1[1];
        v5 = v15;
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a1, (uint64_t)&v13);
    v5 = v13;
    v4 = v14;
    v3 = (const void **)v13;
  }
  if (v4)
  {
    v6 = operator new[](v4);
    __p = v6;
    v7 = (_QWORD *)a2[1];
    if ((unint64_t)v7 >= a2[2])
    {
      v8 = std::vector<std::unique_ptr<char []>>::__push_back_slow_path<std::unique_ptr<char []>>(a2, (uint64_t *)&__p);
      v9 = __p;
      a2[1] = v8;
      __p = 0;
      if (v9)
      {
        operator delete[](v9);
        v8 = (_QWORD *)a2[1];
      }
    }
    else
    {
      *v7 = v6;
      v8 = v7 + 1;
      a2[1] = v8;
    }
    memcpy((void *)*(v8 - 1), v3, v4);
    v3 = *(const void ***)(a2[1] - 8);
    v5 = v13;
  }
  if (v5 != v15)
    free(v5);
  return v3;
}

uint64_t mlir::Diagnostic::operator<<(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v11;
  BOOL v12;
  char *v13;
  int v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a1 + 16);
  v3 = a1 + 16;
  v4 = v5;
  v14 = 0;
  v15 = a2;
  v6 = *(unsigned int *)(v3 + 8);
  v7 = (char *)&v14;
  if (v6 >= *(_DWORD *)(v3 + 12))
  {
    v11 = v6 + 1;
    v12 = v4 + 24 * v6 > (unint64_t)&v14;
    if (v4 <= (unint64_t)&v14 && v12)
    {
      v13 = (char *)&v14 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 32), v11, 24);
      v4 = *(_QWORD *)(a1 + 16);
      v7 = &v13[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 32), v11, 24);
      v4 = *(_QWORD *)(a1 + 16);
      v7 = (char *)&v14;
    }
  }
  v8 = v4 + 24 * *(unsigned int *)(a1 + 24);
  v9 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v8 = v9;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

{
  uint64_t AttrData;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  _QWORD v15[3];

  v15[0] = *(_QWORD *)(a2 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v15);
  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  LODWORD(v15[0]) = 3;
  v15[1] = AttrData;
  v15[2] = v6;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (char *)v15;
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)v15;
    if (v5 <= (unint64_t)v15 && v13)
    {
      v14 = (char *)v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      v5 = *(_QWORD *)(a1 + 16);
      v8 = &v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      v5 = *(_QWORD *)(a1 + 16);
      v8 = (char *)v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(a1 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

{
  int v3;
  const void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  void **v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void **v33;
  uint64_t v34;

  v30 = 0;
  v31 = a2;
  v29[0] = 0;
  v29[1] = 0;
  v21 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v20 = &unk_1E0E22B10;
  v28 = v29;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v20, 0, 0, 0);
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v16);
  v3 = *(_DWORD *)(a1 + 8);
  mlir::OpPrintingFlags::useLocalScope((uint64_t)v16);
  mlir::OpPrintingFlags::elideLargeElementsAttrs((uint64_t)v16, 16);
  if (v3 == 2)
    mlir::OpPrintingFlags::printGenericOpForm((uint64_t)v16, 1);
  v18[0] = v16[0];
  v18[1] = v16[1];
  v19 = v17;
  mlir::Value::print((mlir::Value *)&v31, (llvm::raw_ostream *)&v20, (const mlir::OpPrintingFlags *)v18);
  LOWORD(v19) = 260;
  *(_QWORD *)&v18[0] = v28;
  v4 = twineToStrRef((const void ***)v18, (_QWORD *)(a1 + 128));
  v5 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  v32 = 3;
  v33 = v4;
  v34 = v7;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v32;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v13 = v8 + 1;
    v14 = v6 + 24 * v8 > (unint64_t)&v32;
    if (v6 <= (unint64_t)&v32 && v14)
    {
      v15 = (char *)&v32 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v15[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = &v32;
    }
  }
  v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v20);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
  return a1;
}

mlir::Diagnostic *mlir::Diagnostic::operator<<(mlir::Diagnostic *a1, mlir::Operation *a2)
{
  _BYTE v5[40];

  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v5);
  return mlir::Diagnostic::appendOp(a1, a2, (const mlir::OpPrintingFlags *)v5);
}

mlir::Diagnostic *mlir::Diagnostic::appendOp(mlir::Diagnostic *this, mlir::Operation *a2, const mlir::OpPrintingFlags *a3)
{
  __int128 v6;
  const void **v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v16;
  BOOL v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  std::string *v32;
  std::string v33;
  int v34;
  const void **v35;
  uint64_t v36;

  memset(&v33, 0, sizeof(v33));
  v25 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 1;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v24 = &unk_1E0E22B10;
  v32 = &v33;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v24, 0, 0, 0);
  v6 = *((_OWORD *)a3 + 1);
  v19 = *(_OWORD *)a3;
  v20 = v6;
  v21 = *((_QWORD *)a3 + 4);
  LODWORD(a3) = *((_DWORD *)this + 2);
  mlir::OpPrintingFlags::useLocalScope((uint64_t)&v19);
  mlir::OpPrintingFlags::elideLargeElementsAttrs((uint64_t)&v19, 16);
  if ((_DWORD)a3 == 2)
    mlir::OpPrintingFlags::printGenericOpForm((uint64_t)&v19, 1);
  v22[0] = v19;
  v22[1] = v20;
  v23 = v21;
  mlir::Operation::print(a2, (llvm::raw_ostream *)&v24, (const mlir::OpPrintingFlags *)v22);
  if (std::string::find(&v33, 10, 0) != -1)
    mlir::Diagnostic::operator<<((uint64_t)this, 10);
  LOWORD(v23) = 260;
  *(_QWORD *)&v22[0] = v32;
  v7 = twineToStrRef((const void ***)v22, (_QWORD *)this + 16);
  v8 = (char *)this + 16;
  v9 = *((_QWORD *)this + 2);
  v34 = 3;
  v35 = v7;
  v36 = v10;
  v11 = *((unsigned int *)this + 6);
  v12 = &v34;
  if (v11 >= *((_DWORD *)this + 7))
  {
    v16 = v11 + 1;
    v17 = v9 + 24 * v11 > (unint64_t)&v34;
    if (v9 <= (unint64_t)&v34 && v17)
    {
      v18 = (char *)&v34 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, (char *)this + 32, v16, 24);
      v9 = *((_QWORD *)this + 2);
      v12 = (int *)&v18[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, (char *)this + 32, v16, 24);
      v9 = *((_QWORD *)this + 2);
      v12 = &v34;
    }
  }
  v13 = v9 + 24 * *((unsigned int *)this + 6);
  v14 = *(_OWORD *)v12;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
  *(_OWORD *)v13 = v14;
  ++*((_DWORD *)this + 6);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v24);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  return this;
}

void mlir::Diagnostic::print(mlir::Diagnostic *this, llvm::raw_ostream *a2)
{
  uint64_t v2;
  mlir::DiagnosticArgument *v4;
  uint64_t v5;

  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2)
  {
    v4 = (mlir::DiagnosticArgument *)*((_QWORD *)this + 2);
    v5 = 24 * v2;
    do
    {
      mlir::DiagnosticArgument::print(v4, a2);
      v4 = (mlir::DiagnosticArgument *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
}

void mlir::Diagnostic::str(mlir::Diagnostic *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  mlir::DiagnosticArgument *v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17[2];
  uint64_t v18;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v8 = &unk_1E0E22B10;
  v16 = v17;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v8, 0, 0, 0);
  v4 = *((unsigned int *)this + 6);
  if ((_DWORD)v4)
  {
    v5 = (mlir::DiagnosticArgument *)*((_QWORD *)this + 2);
    v6 = 24 * v4;
    do
    {
      mlir::DiagnosticArgument::print(v5, (llvm::raw_ostream *)&v8);
      v5 = (mlir::DiagnosticArgument *)((char *)v5 + 24);
      v6 -= 24;
    }
    while (v6);
  }
  if ((*((char *)v16 + 23) & 0x80000000) == 0)
  {
    v7 = *(_OWORD *)v16;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v16[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v7;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v17[0]);
    return;
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v16, (std::string::size_type)v16[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
  if (SHIBYTE(v18) < 0)
    goto LABEL_8;
}

uint64_t mlir::Diagnostic::attachNote(uint64_t *a1, uint64_t a2, char a3)
{
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;

  if (!a3)
    a2 = *a1;
  v5 = operator new(0xB0uLL);
  *(_QWORD *)v5 = a2;
  v5[2] = 0;
  *((_QWORD *)v5 + 2) = v5 + 8;
  *((_QWORD *)v5 + 3) = 0x400000000;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  v9 = v5;
  v6 = (_QWORD *)a1[20];
  if ((unint64_t)v6 >= a1[21])
  {
    v7 = std::vector<std::unique_ptr<mlir::Diagnostic>>::__push_back_slow_path<std::unique_ptr<mlir::Diagnostic>>(a1 + 19, (uint64_t *)&v9);
  }
  else
  {
    v9 = 0;
    *v6 = v5;
    v7 = v6 + 1;
  }
  a1[20] = (uint64_t)v7;
  std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](&v9);
  return *(_QWORD *)(a1[20] - 8);
}

uint64_t mlir::Diagnostic::operator mlir::LogicalResult()
{
  return 0;
}

uint64_t mlir::InFlightDiagnostic::operator mlir::LogicalResult(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 184) ^ 1u;
}

void mlir::InFlightDiagnostic::report(mlir::InFlightDiagnostic *this)
{
  if (*(_QWORD *)this)
  {
    mlir::detail::DiagnosticEngineImpl::emit(**(_QWORD **)this, (uint64_t *)this + 1);
    *(_QWORD *)this = 0;
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::reset[abi:nn180100]((uint64_t)this + 8);
}

_QWORD *mlir::InFlightDiagnostic::abandon(_QWORD *this)
{
  *this = 0;
  return this;
}

void mlir::detail::DiagnosticEngineImpl::emit(uint64_t a1, uint64_t *a2)
{
  llvm *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  _DWORD *v10;
  uint64_t v11;
  mlir::DiagnosticArgument *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  v5 = 40 * *(unsigned int *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 112) + v5;
  while (v5)
  {
    v7 = *(_QWORD *)(v6 - 8);
    v6 -= 40;
    v4 = (llvm *)(*(uint64_t (**)(void))(v7 & 0xFFFFFFFFFFFFFFF8))();
    v5 -= 40;
    if ((_BYTE)v4)
      goto LABEL_21;
  }
  if (*((_DWORD *)a2 + 2) != 2)
    goto LABEL_21;
  v8 = (llvm::raw_ostream *)llvm::errs(v4);
  if (*(_UNKNOWN **)(*(_QWORD *)*a2 + 136) == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
  {
LABEL_9:
    v10 = (_DWORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v10 <= 6uLL)
      goto LABEL_10;
    goto LABEL_13;
  }
  v15 = *a2;
  mlir::Attribute::print((mlir::Attribute *)&v15, v8, 0);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 <= 1uLL)
  {
    llvm::raw_ostream::write(v8, ": ", 2uLL);
    goto LABEL_9;
  }
  *v9 = 8250;
  *((_QWORD *)v8 + 4) += 2;
  v10 = (_DWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v10 <= 6uLL)
  {
LABEL_10:
    llvm::raw_ostream::write(v8, "error: ", 7uLL);
    v11 = *((unsigned int *)a2 + 6);
    if (!(_DWORD)v11)
      goto LABEL_16;
LABEL_14:
    v12 = (mlir::DiagnosticArgument *)a2[2];
    v13 = 24 * v11;
    do
    {
      mlir::DiagnosticArgument::print(v12, v8);
      v12 = (mlir::DiagnosticArgument *)((char *)v12 + 24);
      v13 -= 24;
    }
    while (v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_DWORD *)((char *)v10 + 3) = 540701295;
  *v10 = 1869771365;
  *((_QWORD *)v8 + 4) += 7;
  v11 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v11)
    goto LABEL_14;
LABEL_16:
  v14 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v14 < *((_QWORD *)v8 + 3))
  {
    *((_QWORD *)v8 + 4) = v14 + 1;
    *v14 = 10;
    if (*((_QWORD *)v8 + 4) == *((_QWORD *)v8 + 2))
      goto LABEL_21;
    goto LABEL_20;
  }
  llvm::raw_ostream::write(v8, 10);
  if (*((_QWORD *)v8 + 4) != *((_QWORD *)v8 + 2))
LABEL_20:
    llvm::raw_ostream::flush_nonempty(v8);
LABEL_21:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

mlir::DiagnosticEngine *mlir::DiagnosticEngine::DiagnosticEngine(mlir::DiagnosticEngine *this)
{
  _OWORD *v2;
  char *v3;
  uint64_t v4;

  v2 = operator new(0xD8uLL);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  *((_QWORD *)v2 + 26) = 0;
  v2[8] = 0u;
  v3 = (char *)(v2 + 8);
  v4 = MEMORY[0x186DA1428]();
  *(_DWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 1;
  *(_QWORD *)(v4 + 80) = -1;
  *(_QWORD *)(v4 + 96) = -1;
  *(_QWORD *)(v4 + 112) = v3;
  *(_QWORD *)(v4 + 120) = 0x200000000;
  *(_QWORD *)(v4 + 208) = 1;
  *(_QWORD *)this = v4;
  return this;
}

void mlir::DiagnosticEngine::~DiagnosticEngine(std::recursive_mutex **this)
{
  std::recursive_mutex *v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<mlir::detail::DiagnosticEngineImpl>::operator()[abi:nn180100]((int)this, v1);
}

uint64_t mlir::DiagnosticEngine::registerHandler(std::recursive_mutex **a1, __int128 *a2)
{
  std::recursive_mutex *v4;
  std::recursive_mutex *v5;
  uint64_t v6;
  uint64_t opaque;
  unint64_t v8;
  char v9;
  __int128 *v10;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  std::recursive_mutex::lock(*a1);
  v5 = *a1;
  v6 = *(_QWORD *)&(*a1)[3].__m_.__opaque[8];
  *(_QWORD *)&v5[3].__m_.__opaque[8] = v6 + 1;
  opaque = (uint64_t)v5[1].__m_.__opaque;
  v8 = *((_QWORD *)a2 + 3);
  v12 = v6;
  v15 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 2) != 0 && (v8 & 4) != 0)
    {
      (*(void (**)(__int128 *, __int128 *))((v8 & 0xFFFFFFFFFFFFFFF8) + 8))(&v13, a2);
    }
    else
    {
      v13 = *a2;
      v14 = *((_QWORD *)a2 + 2);
    }
    *((_QWORD *)a2 + 3) = 0;
  }
  llvm::MapVector<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>,llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,llvm::SmallVector<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,2u>>::try_emplace<llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>(opaque, &v12, (uint64_t)&v13);
  v9 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 4) != 0)
    {
      if ((v15 & 2) != 0)
        v10 = &v13;
      else
        v10 = (__int128 *)v13;
      (*(void (**)(__int128 *))((v15 & 0xFFFFFFFFFFFFFFF8) + 16))(v10);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v13, *((void **)&v13 + 1));
  }
  std::recursive_mutex::unlock(v4);
  return v6;
}

void mlir::DiagnosticEngine::eraseHandler(std::recursive_mutex **this, uint64_t a2)
{
  std::recursive_mutex *v4;
  std::recursive_mutex *v5;
  int v6;
  char *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  char *v19;
  unsigned int v20;

  v4 = *this;
  std::recursive_mutex::lock(*this);
  v5 = *this;
  v6 = *(_DWORD *)(*this)[1].__m_.__opaque;
  if ((v6 & 1) != 0)
  {
    v7 = &v5[1].__m_.__opaque[8];
    v8 = 2;
  }
  else
  {
    v7 = *(char **)&v5[1].__m_.__opaque[8];
    v8 = *(_DWORD *)&v5[1].__m_.__opaque[16];
    if (!v8)
    {
      v9 = 0;
      v10 = 0;
LABEL_4:
      v11 = &v7[16 * v10];
      v12 = (uint64_t)&v7[16 * v9];
      goto LABEL_18;
    }
  }
  v13 = v8 - 1;
  LODWORD(v14) = (v8 - 1) & (37 * a2);
  v11 = &v7[16 * v14];
  v15 = *(_QWORD *)v11;
  if (*(_QWORD *)v11 == a2)
  {
    if ((v6 & 1) == 0)
    {
LABEL_8:
      v12 = *(_QWORD *)&v5[1].__m_.__opaque[8] + 16 * *(unsigned int *)&v5[1].__m_.__opaque[16];
      goto LABEL_18;
    }
  }
  else
  {
    v16 = 1;
    while (v15 != -1)
    {
      v17 = v14 + v16++;
      v14 = v17 & v13;
      v15 = *(_QWORD *)&v7[16 * v14];
      if (v15 == a2)
      {
        v11 = &v7[16 * v14];
        if ((v6 & 1) == 0)
          goto LABEL_8;
        goto LABEL_17;
      }
    }
    if ((v6 & 1) == 0)
    {
      v7 = *(char **)&v5[1].__m_.__opaque[8];
      v9 = *(_DWORD *)&v5[1].__m_.__opaque[16];
      v10 = v9;
      goto LABEL_4;
    }
    v11 = &v5[1].__m_.__opaque[40];
  }
LABEL_17:
  v12 = (uint64_t)&v5[1].__m_.__opaque[40];
LABEL_18:
  v18 = v11 == (char *)v12;
  v19 = &v5[1].__m_.__opaque[48];
  if (!v18)
    v19 = v11 + 8;
  v20 = *(_DWORD *)v19;
  if (v20 != *(_DWORD *)&v5[1].__m_.__opaque[48])
    llvm::MapVector<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>,llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,llvm::SmallVector<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,2u>>::erase((int *)(*this)[1].__m_.__opaque, (_QWORD *)(*(_QWORD *)&v5[1].__m_.__opaque[40] + 40 * v20));
  std::recursive_mutex::unlock(v4);
}

void mlir::emitError(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v2[32];
  __int16 v3;

  v3 = 257;
  emitDiag(a2, a1, 2, (uint64_t)v2);
}

void mlir::emitError(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  emitDiag(a3, a1, 2, a2);
}

void emitDiag(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t DiagEngine;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void ***v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void ***v26;
  uint64_t v27;
  __int128 v28;
  const void **v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  BOOL v41;
  char *v42;
  char *v43;
  char *v44;
  void **v45;
  const void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int v52;
  void **p_p;
  void *__p;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  const void **v59;
  uint64_t v60;

  v57 = a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v57);
  DiagEngine = mlir::MLIRContext::getDiagEngine(Context);
  v9 = v57;
  *(_QWORD *)a1 = DiagEngine;
  *(_QWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  v10 = (unint64_t *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 184) = 1;
  if (*(unsigned __int8 *)(a4 + 32) >= 2u)
  {
    LODWORD(v45) = 3;
    v46 = twineToStrRef((const void ***)a4, (_QWORD *)(a1 + 136));
    v47 = v11;
    v12 = *(unsigned int *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 24);
    v14 = &v45;
    if (v12 >= *(_DWORD *)(a1 + 36))
    {
      v36 = v12 + 1;
      v37 = v13 + 24 * v12 > (unint64_t)&v45;
      if (v13 <= (unint64_t)&v45 && v37)
      {
        v42 = (char *)&v45 - v13;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v36, 24);
        v13 = *v10;
        v14 = (void ***)&v42[*v10];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v36, 24);
        v13 = *v10;
        v14 = &v45;
      }
    }
    v15 = v13 + 24 * *(unsigned int *)(a1 + 32);
    v16 = *(_OWORD *)v14;
    *(_QWORD *)(v15 + 16) = v14[2];
    *(_OWORD *)v15 = v16;
    ++*(_DWORD *)(a1 + 32);
  }
  if (mlir::MLIRContext::shouldPrintStackTraceOnDiagnostic(Context))
  {
    __p = 0;
    v55 = 0;
    v56 = 0;
    LODWORD(v46) = 0;
    v50 = 0;
    v51 = 0;
    v52 = 1;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    v45 = (void **)&unk_1E0E22B10;
    p_p = &__p;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v45, 0, 0, 0);
    llvm::sys::PrintStackTrace((llvm::sys *)&v45, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v45);
    v17 = HIBYTE(v56);
    v18 = HIBYTE(v56);
    if (v56 < 0)
      v17 = v55;
    if (v17)
    {
      v19 = *(_QWORD *)(a1 + 8);
      v20 = operator new(0xB0uLL);
      *(_QWORD *)v20 = v19;
      v20[2] = 0;
      *((_QWORD *)v20 + 2) = v20 + 8;
      *((_QWORD *)v20 + 3) = 0x400000000;
      *((_OWORD *)v20 + 8) = 0u;
      *((_OWORD *)v20 + 9) = 0u;
      *((_OWORD *)v20 + 10) = 0u;
      v45 = (void **)v20;
      v21 = *(_QWORD **)(a1 + 168);
      if ((unint64_t)v21 >= *(_QWORD *)(a1 + 176))
      {
        v22 = std::vector<std::unique_ptr<mlir::Diagnostic>>::__push_back_slow_path<std::unique_ptr<mlir::Diagnostic>>((_QWORD *)(a1 + 160), (uint64_t *)&v45);
      }
      else
      {
        v45 = 0;
        *v21 = v20;
        v22 = v21 + 1;
      }
      *(_QWORD *)(a1 + 168) = v22;
      std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](&v45);
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 168) - 8);
      v24 = *(_QWORD *)(v23 + 16);
      LODWORD(v45) = 3;
      v46 = (const void **)"diagnostic emitted with trace:\n";
      v47 = 31;
      v25 = *(unsigned int *)(v23 + 24);
      v26 = &v45;
      if (v25 >= *(_DWORD *)(v23 + 28))
      {
        v38 = v25 + 1;
        v39 = v24 + 24 * v25 > (unint64_t)&v45;
        if (v24 <= (unint64_t)&v45 && v39)
        {
          v43 = (char *)&v45 - v24;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v23 + 16, (void *)(v23 + 32), v38, 24);
          v24 = *(_QWORD *)(v23 + 16);
          v26 = (void ***)&v43[v24];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v23 + 16, (void *)(v23 + 32), v38, 24);
          v24 = *(_QWORD *)(v23 + 16);
          v26 = &v45;
        }
      }
      v27 = v24 + 24 * *(unsigned int *)(v23 + 24);
      v28 = *(_OWORD *)v26;
      *(_QWORD *)(v27 + 16) = v26[2];
      *(_OWORD *)v27 = v28;
      ++*(_DWORD *)(v23 + 24);
      LOWORD(v49) = 260;
      v45 = &__p;
      v29 = twineToStrRef((const void ***)&v45, (_QWORD *)(v23 + 128));
      v58 = 3;
      v59 = v29;
      v60 = v30;
      v31 = *(unsigned int *)(v23 + 24);
      v32 = *(_QWORD *)(v23 + 16);
      v33 = &v58;
      if (v31 >= *(_DWORD *)(v23 + 28))
      {
        v40 = v31 + 1;
        v41 = v32 + 24 * v31 > (unint64_t)&v58;
        if (v32 <= (unint64_t)&v58 && v41)
        {
          v44 = (char *)&v58 - v32;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v23 + 16, (void *)(v23 + 32), v40, 24);
          v32 = *(_QWORD *)(v23 + 16);
          v33 = (int *)&v44[v32];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v23 + 16, (void *)(v23 + 32), v40, 24);
          v32 = *(_QWORD *)(v23 + 16);
          v33 = &v58;
        }
      }
      v34 = v32 + 24 * *(unsigned int *)(v23 + 24);
      v35 = *(_OWORD *)v33;
      *(_QWORD *)(v34 + 16) = *((_QWORD *)v33 + 2);
      *(_OWORD *)v34 = v35;
      ++*(_DWORD *)(v23 + 24);
      v18 = HIBYTE(v56);
    }
    if (v18 < 0)
      operator delete(__p);
  }
}

void mlir::emitWarning(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v2[32];
  __int16 v3;

  v3 = 257;
  emitDiag(a2, a1, 1, (uint64_t)v2);
}

void mlir::ScopedDiagnosticHandler::~ScopedDiagnosticHandler(mlir::MLIRContext **this)
{
  std::recursive_mutex **DiagEngine;

  if (*this)
  {
    DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(this[1]);
    mlir::DiagnosticEngine::eraseHandler(DiagEngine, (uint64_t)*this);
  }
}

uint64_t mlir::SourceMgrDiagnosticHandler::SourceMgrDiagnosticHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v6;
  _OWORD *v8;
  __int128 v9;
  _QWORD *v10;
  std::recursive_mutex **DiagEngine;
  std::recursive_mutex **v12;
  uint64_t v13;
  char v14;
  __int128 *v15;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = *((_QWORD *)a5 + 3);
  *(_QWORD *)(a1 + 56) = v6;
  if (*((_QWORD *)a5 + 3) >= 8uLL)
  {
    v8 = (_OWORD *)(a1 + 32);
    if ((v6 & 2) != 0 && (v6 & 4) != 0)
    {
      (*(void (**)(_OWORD *, __int128 *))((v6 & 0xFFFFFFFFFFFFFFF8) + 8))(v8, a5);
    }
    else
    {
      v9 = *a5;
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a5 + 2);
      *v8 = v9;
    }
    *((_QWORD *)a5 + 3) = 0;
  }
  *(_DWORD *)(a1 + 64) = 10;
  v10 = operator new(0x18uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  *((_DWORD *)v10 + 5) = 16;
  *(_QWORD *)(a1 + 72) = v10;
  DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(*(mlir::MLIRContext **)(a1 + 8));
  v12 = DiagEngine;
  if (*(_QWORD *)a1)
    mlir::DiagnosticEngine::eraseHandler(DiagEngine, *(_QWORD *)a1);
  *(_QWORD *)&v17 = a1;
  v18 = (unint64_t)_ZN4llvm6detail18UniqueFunctionBaseIN4mlir13LogicalResultEJRNS2_10DiagnosticEEE15CallbacksHolderIZNS2_16DiagnosticEngine15registerHandlerIZNS2_26SourceMgrDiagnosticHandlerC1ERNS_9SourceMgrEPNS2_11MLIRContextERNS_11raw_ostreamEONS_15unique_functionIFbNS2_8LocationEEEEE3__0vEENSt3__19enable_ifIXsr3std7is_sameIT0_vEE5valueEyE4typeEOT_EUlS5_E_SU_vE9CallbacksE
      + 2;
  v13 = mlir::DiagnosticEngine::registerHandler(v12, &v17);
  v14 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0)
        v15 = &v17;
      else
        v15 = (__int128 *)v17;
      (*(void (**)(uint64_t@<X0>, uint64_t@<X8>))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v15, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16));
    }
    if ((v14 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v17, *((void **)&v17 + 1));
  }
  *(_QWORD *)a1 = v13;
  return a1;
}

uint64_t mlir::SourceMgrDiagnosticHandler::SourceMgrDiagnosticHandler(llvm *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  void *v8;

  v8 = llvm::errs(a1);
  return mlir::SourceMgrDiagnosticHandler::SourceMgrDiagnosticHandler((uint64_t)a1, a2, a3, (uint64_t)v8, a4);
}

void mlir::SourceMgrDiagnosticHandler::~SourceMgrDiagnosticHandler(mlir::SourceMgrDiagnosticHandler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  unint64_t v7;
  _QWORD *v8;
  std::recursive_mutex **DiagEngine;

  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 12))
    {
      v3 = *(unsigned int *)(v2 + 8);
      if ((_DWORD)v3)
      {
        v4 = 0;
        do
        {
          v5 = *(llvm **)(*(_QWORD *)v2 + v4);
          if (v5 != (llvm *)-8 && v5 != 0)
            llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
          v4 += 8;
        }
        while (8 * v3 != v4);
      }
    }
    free(*(void **)v2);
    operator delete((void *)v2);
  }
  v7 = *((_QWORD *)this + 7);
  if (v7 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      v8 = (_QWORD *)((char *)this + 32);
      if ((v7 & 2) == 0)
        v8 = (_QWORD *)*v8;
      (*(void (**)(_QWORD *))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(*((llvm **)this + 4), *((void **)this + 5));
  }
  if (*(_QWORD *)this)
  {
    DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(*((mlir::MLIRContext **)this + 1));
    mlir::DiagnosticEngine::eraseHandler(DiagEngine, *(_QWORD *)this);
  }
}

void mlir::SourceMgrDiagnosticHandler::emitDiagnostic(uint64_t a1, uint64_t a2, llvm::Twine *a3, int a4, int a5)
{
  const char *v9;
  uint64_t v10;
  size_t v11;
  const void *AttrData;
  size_t v13;
  char *v14;
  llvm::raw_ostream *v15;
  char **v16;
  unsigned int Position;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  unsigned int Column;
  int v22;
  const void *v23;
  size_t v24;
  int v25;
  std::string *p_p;
  size_t size;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  llvm::raw_ostream *v37;
  int v38;
  uint64_t v39;
  std::string __p;
  void **v41;
  int v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  uint64_t v47;
  int v48;
  void **v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *Value;
  uint64_t v56;
  void *v57;
  size_t v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void **v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[22];

  v70[20] = *MEMORY[0x1E0C80C00];
  v54 = a2;
  Value = 0;
  v41 = &Value;
  mlir::LocationAttr::walk(&v54, (uint64_t (*)(uint64_t, _QWORD))llvm::function_ref<mlir::WalkResult ()(mlir::Location)>::callback_fn<mlir::FileLineColLoc mlir::LocationAttr::findInstanceOf<mlir::FileLineColLoc>(void)::{lambda(mlir::FileLineColLoc)#1}>, (uint64_t)&v41);
  v53 = Value;
  if (!Value)
  {
    v50 = 0;
    v51 = 0;
    v52 = 0;
    LODWORD(v56) = 0;
    LOBYTE(v60) = 0;
    v61 = 0;
    LODWORD(v62) = 1;
    v58 = 0;
    v59 = 0;
    v57 = 0;
    Value = &unk_1E0E22B10;
    v63 = &v50;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&Value, 0, 0, 0);
    if (*(_UNKNOWN **)(*(_QWORD *)v54 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
    {
      mlir::Attribute::print((mlir::Attribute *)&v54, (llvm::raw_ostream *)&Value, 0);
      if (v58 - (unint64_t)v59 > 1)
        *v59++ = 8250;
      else
        llvm::raw_ostream::write((llvm::raw_ostream *)&Value, ": ", 2uLL);
    }
    llvm::Twine::print(a3, (llvm::raw_ostream *)&Value);
    v36 = *(uint64_t **)(a1 + 16);
    v37 = *(llvm::raw_ostream **)(a1 + 24);
    v38 = dword_18123E880[a4];
    LOWORD(v45) = 260;
    v41 = v63;
    llvm::SourceMgr::PrintMessage(v36, v37, 0, v38, (llvm::Twine *)&v41, 0, 0, v39, 0, 0, 1);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&Value);
    if (SHIBYTE(v52) < 0)
      goto LABEL_59;
    return;
  }
  if (a5)
  {
    v9 = (const char *)mlir::SourceMgrDiagnosticHandler::convertLocToSMLoc(a1, (uint64_t)Value);
    if (v9)
    {
      llvm::SourceMgr::PrintMessage(*(uint64_t **)(a1 + 16), *(llvm::raw_ostream **)(a1 + 24), v9, dword_18123E880[a4], a3, 0, 0, v10, 0, 0, 1);
      return;
    }
  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v42 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 1;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v41 = (void **)&unk_1E0E22B10;
  v49 = &v50;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v41, 0, 0, 0);
  Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v53);
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
  v13 = v11;
  v14 = v45;
  if (v11 <= v44 - v45)
  {
    v16 = &v45;
    if (v11)
    {
      memcpy(v45, AttrData, v11);
      v14 = &v45[v13];
      v45 += v13;
    }
    v15 = (llvm::raw_ostream *)&v41;
    if (v44 != v14)
      goto LABEL_7;
  }
  else
  {
    v15 = llvm::raw_ostream::write((llvm::raw_ostream *)&v41, (const char *)AttrData, v11);
    v16 = (char **)((char *)v15 + 32);
    v14 = (char *)*((_QWORD *)v15 + 4);
    if (*((char **)v15 + 3) != v14)
    {
LABEL_7:
      *v14 = 58;
      ++*v16;
      goto LABEL_15;
    }
  }
  v15 = llvm::raw_ostream::write(v15, ":", 1uLL);
LABEL_15:
  Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v53);
  v18 = llvm::raw_ostream::operator<<(v15, Position);
  v19 = v18;
  v20 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v20)
  {
    v19 = llvm::raw_ostream::write(v18, ":", 1uLL);
  }
  else
  {
    *v20 = 58;
    ++*((_QWORD *)v18 + 4);
  }
  Column = mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)&v53);
  llvm::raw_ostream::operator<<(v19, Column);
  v22 = *((char *)v49 + 23);
  if (v22 >= 0)
    v23 = v49;
  else
    v23 = *v49;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)v49 + 23);
  else
    v24 = (size_t)v49[1];
  v25 = dword_18123E880[a4];
  p_p = &__p;
  llvm::Twine::str(a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Value = 0;
  v56 = 0;
  if (v24 > 0x7FFFFFFFFFFFFFF7)
LABEL_68:
    abort();
  if (v24 >= 0x17)
  {
    v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v29 = v24 | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    v58 = v24;
    v59 = (_WORD *)(v30 | 0x8000000000000000);
    v57 = v28;
    goto LABEL_34;
  }
  v28 = &v57;
  HIBYTE(v59) = v24;
  if (v24)
LABEL_34:
    memmove(v28, v23, v24);
  *((_BYTE *)v28 + v24) = 0;
  v60 = -1;
  LODWORD(v61) = v25;
  if (size > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_68;
  if (size >= 0x17)
  {
    v32 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v32 = size | 7;
    v33 = v32 + 1;
    v31 = operator new(v32 + 1);
    v63 = (void **)size;
    v64 = v33 | 0x8000000000000000;
    v62 = v31;
    goto LABEL_42;
  }
  v31 = &v62;
  HIBYTE(v64) = size;
  if (size)
LABEL_42:
    memmove(v31, p_p, size);
  *((_BYTE *)v31 + size) = 0;
  v66 = 0u;
  v67 = 0u;
  v65 = 0u;
  v68 = v70;
  v69 = 0x400000000;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)&Value, 0, *(llvm::raw_ostream **)(a1 + 24), 1, 1);
  v34 = (char *)v68;
  if ((_DWORD)v69)
  {
    v35 = 40 * v69;
    do
    {
      if (v34[v35 - 1] < 0)
        operator delete(*(void **)&v34[v35 - 24]);
      v35 -= 40;
    }
    while (v35);
    v34 = (char *)v68;
  }
  if (v34 != (char *)v70)
    free(v34);
  if (*((_QWORD *)&v66 + 1))
  {
    *(_QWORD *)&v67 = *((_QWORD *)&v66 + 1);
    operator delete(*((void **)&v66 + 1));
  }
  if (SBYTE7(v66) < 0)
  {
    operator delete((void *)v65);
    if ((SHIBYTE(v64) & 0x80000000) == 0)
    {
LABEL_57:
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_58;
      goto LABEL_63;
    }
  }
  else if ((SHIBYTE(v64) & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(v62);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_58:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v41);
    if ((SHIBYTE(v52) & 0x80000000) == 0)
      return;
    goto LABEL_59;
  }
LABEL_63:
  operator delete(v57);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v41);
  if (SHIBYTE(v52) < 0)
LABEL_59:
    operator delete(v50);
}

unint64_t mlir::SourceMgrDiagnosticHandler::convertLocToSMLoc(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  int8x16_t *AttrData;
  size_t v6;
  int SourceMgrBufferIDForFile;
  int v8;
  llvm::SourceMgr *v9;
  unsigned int Position;
  unsigned int Column;
  uint64_t Value;
  uint64_t v14;

  v14 = a2;
  if (!mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v14))
    return 0;
  if (!mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)&v14))
    return 0;
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD **)(a1 + 16);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
  SourceMgrBufferIDForFile = mlir::detail::SourceMgrDiagnosticHandlerImpl::getSourceMgrBufferIDForFile(v3, v4, AttrData, v6);
  if (!SourceMgrBufferIDForFile)
    return 0;
  v8 = SourceMgrBufferIDForFile;
  v9 = *(llvm::SourceMgr **)(a1 + 16);
  Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v14);
  Column = mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)&v14);
  return llvm::SourceMgr::FindLocForLineAndColumn(v9, v8, Position, Column);
}

void mlir::SourceMgrDiagnosticHandler::emitDiagnostic(mlir::SourceMgrDiagnosticHandler *this, mlir::Diagnostic *a2)
{
  uint64_t LHS;
  unint64_t LocToShow;
  char v6;
  std::string::__raw *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char v11;
  std::string::__raw *v12;
  char v13;
  unint64_t v14;
  std::string *p_p;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  int64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  std::string *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **i;
  uint64_t *v28;
  uint64_t v29;
  std::string *v30;
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  std::string *v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  unint64_t v38;
  uint64_t v39;
  std::string __p;
  std::string *v41;
  uint64_t v42;
  _QWORD v43[8];

  v43[6] = *MEMORY[0x1E0C80C00];
  v41 = (std::string *)v43;
  v42 = 0x200000000;
  LHS = *(_QWORD *)a2;
  LocToShow = mlir::SourceMgrDiagnosticHandler::findLocToShow((uint64_t)this, *(_QWORD *)a2);
  if (v6)
  {
    v7 = (std::string::__raw *)&v41[v42];
    v7->__words[1] = 0;
    v7->__words[2] = 0;
    v7->__words[0] = LocToShow;
    LODWORD(v42) = v42 + 1;
  }
  v38 = getCallSiteLoc(LHS);
  v39 = v8;
  if ((_BYTE)v8)
  {
    LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v38);
    if (*((_DWORD *)this + 16))
    {
      v9 = 0;
      do
      {
        v10 = mlir::SourceMgrDiagnosticHandler::findLocToShow((uint64_t)this, LHS);
        if (v11)
        {
          if (v42 >= HIDWORD(v42))
          {
            __p.__r_.__value_.__r.__words[0] = v10;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"called from";
            __p.__r_.__value_.__r.__words[2] = 11;
            v14 = v42 + 1;
            if (v41 <= &__p && &v41[v42] > &__p)
            {
              v19 = (char *)&__p - (char *)v41;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v14, 24);
              v16 = v41;
              p_p = (std::string *)((char *)v41 + v19);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v14, 24);
              p_p = &__p;
              v16 = v41;
            }
            v17 = &v16[v42];
            v18 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
            v17->__r_.__value_.__r.__words[2] = p_p->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          else
          {
            v12 = (std::string::__raw *)&v41[v42];
            v12->__words[0] = v10;
            v12->__words[1] = (std::string::size_type)"called from";
            v12->__words[2] = 11;
          }
          LODWORD(v42) = v42 + 1;
        }
        v38 = getCallSiteLoc(LHS);
        LOBYTE(v39) = v13;
        if (!v13)
          break;
        LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v38);
        ++v9;
      }
      while (v9 < *((_DWORD *)this + 16));
    }
  }
  if ((_DWORD)v42)
  {
    v20 = v41->__r_.__value_.__r.__words[0];
    mlir::Diagnostic::str(a2, &__p);
    v35 = 260;
    v34 = &__p;
    mlir::SourceMgrDiagnosticHandler::emitDiagnostic((uint64_t)this, v20, (llvm::Twine *)&v34, *((_DWORD *)a2 + 2), 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v21 = v42;
      if ((_DWORD)v42 == 1)
        goto LABEL_27;
    }
    else
    {
      v21 = v42;
      if ((_DWORD)v42 == 1)
        goto LABEL_27;
    }
    v23 = &v41[v21];
    v24 = (uint64_t *)&v41[1];
    do
    {
      v25 = *v24;
      v33 = 261;
      v32[0] = v24[1];
      v32[1] = v24[2];
      mlir::SourceMgrDiagnosticHandler::emitDiagnostic((uint64_t)this, v25, (llvm::Twine *)v32, 0, 1);
      v24 += 3;
    }
    while (v24 != (uint64_t *)v23);
  }
  else
  {
    v22 = *(_QWORD *)a2;
    mlir::Diagnostic::str(a2, &__p);
    v37 = 260;
    v36 = &__p;
    mlir::SourceMgrDiagnosticHandler::emitDiagnostic((uint64_t)this, v22, (llvm::Twine *)&v36, *((_DWORD *)a2 + 2), 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_27:
  v26 = (uint64_t **)*((_QWORD *)a2 + 19);
  for (i = (uint64_t **)*((_QWORD *)a2 + 20); v26 != i; ++v26)
  {
    v28 = *v26;
    v29 = **v26;
    mlir::Diagnostic::str((mlir::Diagnostic *)*v26, &__p);
    v31 = 260;
    v30 = &__p;
    mlir::SourceMgrDiagnosticHandler::emitDiagnostic((uint64_t)this, v29, (llvm::Twine *)&v30, *((_DWORD *)v28 + 2), LHS != *v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    LHS = *v28;
  }
  if (v41 != (std::string *)v43)
    free(v41);
}

unint64_t getCallSiteLoc(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t LHS;
  unint64_t v4;
  uint64_t Value;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v1 = a1;
  v2 = *(void **)(*(_QWORD *)a1 + 136);
  if (a1 && v2 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
  {
    v12 = a1;
    LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
    a1 = getCallSiteLoc(LHS);
    v4 = a1 & 0xFFFFFFFFFFFFFF00;
  }
  else if (a1 && v2 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id)
  {
    v4 = a1 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(a1) = 0;
    if (v1)
    {
      v4 = 0;
      if (v2 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id)
      {
        v12 = v1;
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12);
        if (v6)
        {
          v7 = (_QWORD *)Value;
          v8 = 8 * v6;
          while (1)
          {
            a1 = getCallSiteLoc(*v7);
            v9 = a1;
            if (v10)
              break;
            ++v7;
            v8 -= 8;
            if (!v8)
            {
              LOBYTE(a1) = 0;
              break;
            }
          }
          v4 = v9 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          LOBYTE(a1) = 0;
          v4 = 0;
        }
      }
    }
    else
    {
      v4 = 0;
    }
  }
  return v4 | a1;
}

uint64_t mlir::detail::SourceMgrDiagnosticHandlerImpl::getSourceMgrBufferIDForFile(uint64_t a1, _QWORD *a2, int8x16_t *a3, size_t a4)
{
  int Key;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  unint64_t v20;
  void *v21[2];
  uint64_t v22;

  Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a3, (const unsigned __int8 *)a4);
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 8))
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * Key) + 8);
  v9 = -1431655765 * ((a2[1] - *a2) >> 3);
  if (!(_DWORD)v9)
  {
LABEL_10:
    v21[0] = 0;
    v21[1] = 0;
    v22 = 0;
    if (a4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a4 >= 0x17)
    {
      v16 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a4 | 7) != 0x17)
        v16 = a4 | 7;
      v17 = v16 + 1;
      v15 = operator new(v16 + 1);
      __p[1] = (void *)a4;
      v20 = v17 | 0x8000000000000000;
      __p[0] = v15;
    }
    else
    {
      HIBYTE(v20) = a4;
      v15 = __p;
      if (!a4)
        goto LABEL_19;
    }
    memmove(v15, a3, a4);
LABEL_19:
    *((_BYTE *)v15 + a4) = 0;
    v12 = llvm::SourceMgr::AddIncludeFile(a2, (uint64_t)__p, 0, (uint64_t)v21);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1, a3, (const unsigned __int8 *)a4)
              + 8) = v12;
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    return v12;
  }
  v10 = 0;
  v11 = 24 * v9;
  v12 = 1;
  while (1)
  {
    v13 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + v10) + 16))(*(_QWORD *)(*a2 + v10));
    if (v14 == a4 && (!a4 || !memcmp(v13, a3, a4)))
      break;
    v12 = (v12 + 1);
    v10 += 24;
    if (v11 == v10)
      goto LABEL_10;
  }
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1, a3, (const unsigned __int8 *)a4)
            + 8) = v12;
  return v12;
}

unint64_t mlir::SourceMgrDiagnosticHandler::findLocToShow(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v5;
  void *v6;
  unint64_t v10;
  uint64_t LocToShow;
  uint64_t v12;
  uint64_t RHS;
  uint64_t Value;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 56);
  if (v3 <= 7)
  {
    v10 = a2 & 0xFFFFFFFFFFFFFF00;
    v12 = a2;
  }
  else
  {
    v5 = (_QWORD *)(a1 + 32);
    if ((v3 & 2) == 0)
      v5 = (_QWORD *)*v5;
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFF8))(v5, a2))
    {
      v6 = *(void **)(*(_QWORD *)a2 + 136);
      if (v6 != &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id || a2 == 0)
      {
        if (v6 == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
        {
          v10 = a2 & 0xFFFFFFFFFFFFFF00;
          LOBYTE(LocToShow) = a2;
          goto LABEL_28;
        }
        if (v6 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id && a2 != 0)
        {
          v20 = a2;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20);
          if (v16)
          {
            v17 = (_QWORD *)Value;
            v18 = 8 * v16;
            while (1)
            {
              LocToShow = mlir::SourceMgrDiagnosticHandler::findLocToShow(a1, *v17);
              if (v19)
                break;
              ++v17;
              v18 -= 8;
              if (!v18)
              {
                LocToShow &= 0xFFFFFFFFFFFFFF00;
                goto LABEL_27;
              }
            }
          }
          else
          {
            LocToShow = 0;
          }
          goto LABEL_27;
        }
        if (v6 != &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id || a2 == 0)
        {
          if (v6 != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id)
          {
            v10 = 0;
            LOBYTE(LocToShow) = 0;
            goto LABEL_28;
          }
          v10 = 0;
          LOBYTE(LocToShow) = 0;
          if (!a2)
          {
LABEL_28:
            v12 = LocToShow;
            return v10 | v12;
          }
          v20 = a2;
          RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v20);
        }
        else
        {
          v20 = a2;
          RHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v20);
        }
      }
      else
      {
        v20 = a2;
        RHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v20);
      }
      LocToShow = mlir::SourceMgrDiagnosticHandler::findLocToShow(a1, RHS);
LABEL_27:
      v10 = LocToShow & 0xFFFFFFFFFFFFFF00;
      goto LABEL_28;
    }
    v12 = 0;
    v10 = 0;
  }
  return v10 | v12;
}

mlir::ParallelDiagnosticHandler *mlir::ParallelDiagnosticHandler::ParallelDiagnosticHandler(mlir::ParallelDiagnosticHandler *this, mlir::MLIRContext *a2)
{
  mlir::detail::ParallelDiagnosticHandlerImpl *v4;

  v4 = (mlir::detail::ParallelDiagnosticHandlerImpl *)operator new(0x98uLL);
  *(_QWORD *)this = mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(v4, a2);
  return this;
}

void mlir::ParallelDiagnosticHandler::~ParallelDiagnosticHandler(mlir::ParallelDiagnosticHandler *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void mlir::ParallelDiagnosticHandler::setOrderIDForThread(mlir::ParallelDiagnosticHandler *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t threadid;

  v3 = *(_QWORD *)this;
  threadid = llvm::get_threadid(this);
  std::recursive_mutex::lock((std::recursive_mutex *)(v3 + 16));
  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>,unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::FindAndConstruct(v3 + 88, &threadid)[1] = a2;
  std::recursive_mutex::unlock((std::recursive_mutex *)(v3 + 16));
}

void mlir::ParallelDiagnosticHandler::eraseOrderIDForThread(mlir::ParallelDiagnosticHandler *this)
{
  uint64_t v1;
  uint64_t threadid;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  v1 = *(_QWORD *)this;
  threadid = llvm::get_threadid(this);
  std::recursive_mutex::lock((std::recursive_mutex *)(v1 + 16));
  v3 = *(_DWORD *)(v1 + 104);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 88);
    v5 = v3 - 1;
    LODWORD(v6) = (v3 - 1) & (37 * threadid);
    v7 = (uint64_t *)(v4 + 16 * v6);
    v8 = *v7;
    if (threadid == *v7)
    {
LABEL_3:
      *v7 = -2;
      *(int32x2_t *)(v1 + 96) = vadd_s32(*(int32x2_t *)(v1 + 96), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v9 = 1;
      while (v8 != -1)
      {
        v10 = v6 + v9++;
        v6 = v10 & v5;
        v8 = *(_QWORD *)(v4 + 16 * v6);
        if (threadid == v8)
        {
          v7 = (uint64_t *)(v4 + 16 * v6);
          goto LABEL_3;
        }
      }
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v1 + 16));
}

_QWORD *std::vector<std::unique_ptr<char []>>::__push_back_slow_path<std::unique_ptr<char []>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  void *v27;
  void *v28;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = (void *)*((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
        operator delete[](v27);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

mlir::detail::ParallelDiagnosticHandlerImpl *mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(mlir::detail::ParallelDiagnosticHandlerImpl *this, mlir::MLIRContext *a2)
{
  llvm::PrettyStackTraceEntry *v4;
  std::recursive_mutex **DiagEngine;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = llvm::PrettyStackTraceEntry::PrettyStackTraceEntry(this);
  *(_QWORD *)v4 = &unk_1E0E4EAB8;
  MEMORY[0x186DA1428]((char *)v4 + 16);
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = a2;
  DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(a2);
  *(_QWORD *)&v11 = this;
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallbacksHolder<mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(mlir::MLIRContext *)::{lambda(mlir::Diagnostic &)#1},mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(mlir::MLIRContext *)::{lambda(mlir::Diagnostic &)#1},void>::Callbacks
      + 2;
  *((_QWORD *)this + 17) = mlir::DiagnosticEngine::registerHandler(DiagEngine, &v11);
  v8 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v9 = (uint64_t *)&v11;
      else
        v9 = (uint64_t *)v11;
      (*(void (**)(uint64_t *, unint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))(v9, v6, v7);
    }
    if ((v8 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v11, *((void **)&v11 + 1));
  }
  return this;
}

void mlir::detail::ParallelDiagnosticHandlerImpl::~ParallelDiagnosticHandlerImpl(mlir::detail::ParallelDiagnosticHandlerImpl *this)
{
  mlir::detail::ParallelDiagnosticHandlerImpl::~ParallelDiagnosticHandlerImpl(this);
}

{
  std::recursive_mutex **DiagEngine;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  mlir::detail::ParallelDiagnosticHandlerImpl *v6;

  *(_QWORD *)this = &unk_1E0E4EAB8;
  DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(*((mlir::MLIRContext **)this + 18));
  mlir::DiagnosticEngine::eraseHandler(DiagEngine, *((_QWORD *)this + 17));
  v3 = (_QWORD *)*((_QWORD *)this + 14);
  if (v3 != *((_QWORD **)this + 15))
  {
    v6 = this;
    mlir::detail::ParallelDiagnosticHandlerImpl::emitDiagnostics((uint64_t)this, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::detail::ParallelDiagnosticHandlerImpl::~ParallelDiagnosticHandlerImpl()::{lambda(mlir::Diagnostic &)#1}>, (uint64_t)&v6);
    v3 = (_QWORD *)*((_QWORD *)this + 14);
  }
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 15);
    v5 = v3;
    if (v4 != v3)
    {
      do
      {
        v4 -= 23;
        std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::destroy[abi:nn180100]((uint64_t)this + 128, v4);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v3;
    operator delete(v5);
  }
  llvm::deallocate_buffer(*((llvm **)this + 11), (void *)(16 * *((unsigned int *)this + 26)));
}

void sub_1804150D0(void *__p)
{
  operator delete(__p);
}

void mlir::detail::ParallelDiagnosticHandlerImpl::print(mlir::detail::ParallelDiagnosticHandlerImpl *this, llvm::raw_ostream *a2)
{
  void *v4;
  llvm::raw_ostream *v5;

  if (*((_QWORD *)this + 14) != *((_QWORD *)this + 15))
  {
    v4 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x16uLL)
    {
      qmemcpy(v4, "In-Flight Diagnostics:\n", 23);
      *((_QWORD *)a2 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(a2, "In-Flight Diagnostics:\n", 0x17uLL);
    }
    v5 = a2;
    mlir::detail::ParallelDiagnosticHandlerImpl::emitDiagnostics((uint64_t)this, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::detail::ParallelDiagnosticHandlerImpl::print(llvm::raw_ostream &)::{lambda(mlir::Diagnostic const&)#1}>, (uint64_t)&v5);
  }
}

uint64_t mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(mlir::MLIRContext *)::{lambda(mlir::Diagnostic &)#1}::operator()(llvm *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t threadid;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v17;

  v3 = *(_QWORD *)a1;
  threadid = llvm::get_threadid(a1);
  v17 = threadid;
  std::recursive_mutex::lock((std::recursive_mutex *)(v3 + 16));
  v5 = *(_DWORD *)(v3 + 104);
  if (!v5)
  {
LABEL_11:
    v13 = 0;
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(v3 + 88);
  v7 = v5 - 1;
  v8 = (37 * threadid) & v7;
  v9 = *(_QWORD *)(v6 + 16 * v8);
  if (threadid != v9)
  {
    v14 = 1;
    while (v9 != -1)
    {
      v15 = v8 + v14++;
      v8 = v15 & v7;
      v9 = *(_QWORD *)(v6 + 16 * (v15 & v7));
      if (threadid == v9)
        goto LABEL_3;
    }
    goto LABEL_11;
  }
LABEL_3:
  v10 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>,unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::FindAndConstruct(v3 + 88, &v17)+ 1;
  v11 = *(_QWORD *)(v3 + 120);
  if (v11 >= *(_QWORD *)(v3 + 128))
  {
    v12 = std::vector<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::__emplace_back_slow_path<unsigned long &,mlir::Diagnostic>((uint64_t *)(v3 + 112), v10, a2);
  }
  else
  {
    std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::construct[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic,unsigned long &,mlir::Diagnostic>(v3 + 128, *(_QWORD *)(v3 + 120), v10, a2);
    v12 = v11 + 184;
  }
  *(_QWORD *)(v3 + 120) = v12;
  v13 = 1;
LABEL_12:
  std::recursive_mutex::unlock((std::recursive_mutex *)(v3 + 16));
  return v13;
}

uint64_t std::vector<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::__emplace_back_slow_path<unsigned long &,mlir::Diagnostic>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;

  v3 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642)
    abort();
  v8 = (uint64_t)(a1 + 2);
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21)
    v9 = 0x1642C8590B21642;
  else
    v9 = v4;
  if (v9)
  {
    if (v9 > 0x1642C8590B21642)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(184 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = (uint64_t)&v10[184 * v3];
  v12 = &v10[184 * v9];
  std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::construct[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic,unsigned long &,mlir::Diagnostic>(v8, v11, a2, a3);
  v13 = v11 + 184;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
    if (!v14)
      return v11 + 184;
    goto LABEL_19;
  }
  v16 = 0;
  do
  {
    v17 = v11 + v16;
    v18 = &v14[v16];
    *(_QWORD *)(v11 + v16 - 184) = *(_QWORD *)&v14[v16 - 184];
    v19 = *(_QWORD *)&v14[v16 - 176];
    v20 = *(_DWORD *)&v14[v16 - 168];
    *(_QWORD *)(v11 + v16 - 160) = v11 + v16 - 144;
    v21 = v11 + v16 - 160;
    *(_DWORD *)(v21 - 8) = v20;
    *(_QWORD *)(v21 - 16) = v19;
    *(_QWORD *)(v21 + 8) = 0x400000000;
    if (*(_DWORD *)&v14[v16 - 152])
      llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v21, (uint64_t)(v18 - 160));
    *(_QWORD *)(v17 - 48) = 0;
    *(_QWORD *)(v17 - 40) = 0;
    *(_QWORD *)(v17 - 32) = 0;
    *(_OWORD *)(v17 - 48) = *((_OWORD *)v18 - 3);
    *(_QWORD *)(v17 - 32) = *((_QWORD *)v18 - 4);
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v18 - 5) = 0;
    *((_QWORD *)v18 - 4) = 0;
    *(_QWORD *)(v17 - 24) = 0;
    *(_QWORD *)(v17 - 16) = 0;
    *(_QWORD *)(v17 - 8) = 0;
    *(_OWORD *)(v17 - 24) = *(_OWORD *)(v18 - 24);
    *(_QWORD *)(v17 - 8) = *((_QWORD *)v18 - 1);
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v18 - 2) = 0;
    *((_QWORD *)v18 - 1) = 0;
    v16 -= 184;
  }
  while (&v14[v16] != v15);
  v14 = (char *)*a1;
  v22 = (char *)a1[1];
  *a1 = v11 + v16;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  while (v22 != v14)
  {
    v22 -= 184;
    std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::destroy[abi:nn180100](v8, v22);
  }
  if (v14)
LABEL_19:
    operator delete(v14);
  return v11 + 184;
}

void std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::construct[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic,unsigned long &,mlir::Diagnostic>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *__src;
  uint64_t v19;
  _BYTE v20[96];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v16 = *a4;
  v17 = *((_DWORD *)a4 + 2);
  __src = v20;
  v19 = 0x400000000;
  if (*((_DWORD *)a4 + 6))
  {
    llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=((uint64_t)&__src, (uint64_t)(a4 + 2));
    v7 = v19;
  }
  else
  {
    v7 = 0;
  }
  v8 = a4[16];
  v9 = a4[17];
  v21 = v8;
  v22 = v9;
  a4[16] = 0;
  a4[17] = 0;
  v10 = a4[18];
  v11 = a4[19];
  a4[18] = 0;
  a4[19] = 0;
  v23 = v10;
  v24 = v11;
  v12 = a4[20];
  v13 = a4[21];
  v25 = v12;
  v26 = v13;
  a4[20] = 0;
  a4[21] = 0;
  *(_DWORD *)(a2 + 16) = v17;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 24) = a2 + 40;
  *(_QWORD *)(a2 + 32) = 0x400000000;
  if ((void **)(a2 + 24) != &__src && v7)
  {
    if (__src == v20)
    {
      v15 = v7;
      if (v7 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v7, 24),
            v15 = v19,
            (_DWORD)v19))
      {
        memcpy(*(void **)(a2 + 24), __src, 24 * v15);
      }
      *(_DWORD *)(a2 + 32) = v7;
      v8 = v21;
      v9 = v22;
      v10 = v23;
      v11 = v24;
      v12 = v25;
      v13 = v26;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = __src;
      v14 = HIDWORD(v19);
      *(_DWORD *)(a2 + 32) = v7;
      *(_DWORD *)(a2 + 36) = v14;
      __src = v20;
      HIDWORD(v19) = 0;
    }
    LODWORD(v19) = 0;
  }
  *(_QWORD *)(a2 + 136) = v8;
  *(_QWORD *)(a2 + 144) = v9;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  *(_QWORD *)(a2 + 152) = v10;
  *(_QWORD *)(a2 + 160) = v11;
  *(_QWORD *)(a2 + 168) = v12;
  *(_QWORD *)(a2 + 176) = v13;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  if (__src != v20)
    free(__src);
}

void std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::destroy[abi:nn180100](uint64_t a1, _QWORD *a2)
{
  _QWORD **v3;
  _QWORD **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;

  v3 = (_QWORD **)a2[20];
  if (v3)
  {
    v4 = (_QWORD **)a2[21];
    v5 = (void *)a2[20];
    if (v4 != v3)
    {
      do
        v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
      while (v4 != v3);
      v5 = (void *)a2[20];
    }
    a2[21] = v3;
    operator delete(v5);
  }
  v6 = (_QWORD *)a2[17];
  if (v6)
  {
    v7 = (_QWORD *)a2[18];
    v8 = (void *)a2[17];
    if (v7 != v6)
    {
      do
      {
        v10 = (void *)*--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          operator delete[](v9);
      }
      while (v7 != v6);
      v8 = (void *)a2[17];
    }
    a2[18] = v6;
    operator delete(v8);
  }
  v11 = (_QWORD *)a2[3];
  if (v11 != a2 + 5)
    free(v11);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>,unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  unsigned int v20;

  v4 = *(_DWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_22;
  v5 = (37 * *a2) & (v4 - 1);
  result = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *result;
  if (*a2 == *result)
    return result;
  v9 = 0;
  v10 = 1;
  while (v7 != -1)
  {
    if (v9)
      v11 = 0;
    else
      v11 = v7 == -2;
    if (v11)
      v9 = result;
    v12 = v5 + v10++;
    v5 = v12 & (v4 - 1);
    result = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *result;
    if (*a2 == *result)
      return result;
  }
  if (v9)
    result = v9;
  v13 = *(_DWORD *)(a1 + 8);
  if (4 * v13 + 4 < 3 * v4)
  {
    if (v4 + ~v13 - *(_DWORD *)(a1 + 12) > v4 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_22:
    v4 *= 2;
  }
  llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::grow(a1, v4);
  v8 = *a2;
  v14 = *(_DWORD *)(a1 + 16) - 1;
  v15 = (37 * *a2) & v14;
  result = (uint64_t *)(*(_QWORD *)a1 + 16 * v15);
  v16 = *result;
  if (*a2 == *result)
    goto LABEL_7;
  v17 = 0;
  v18 = 1;
  while (v16 != -1)
  {
    if (v17)
      v19 = 0;
    else
      v19 = v16 == -2;
    if (v19)
      v17 = result;
    v20 = v15 + v18++;
    v15 = v20 & v14;
    result = (uint64_t *)(*(_QWORD *)a1 + 16 * v15);
    v16 = *result;
    if (v8 == *result)
      goto LABEL_7;
  }
  if (v17)
    result = v17;
LABEL_6:
  v8 = *result;
LABEL_7:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_39;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        *v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_39:
        do
        {
          *v10 = -1;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if ((_DWORD)v3)
    {
      v15 = 0;
      v16 = v11 - 1;
      v17 = v4;
      do
      {
        v25 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v26 = (37 * v25) & v16;
          v23 = &result[2 * v26];
          v27 = *v23;
          if (v25 != *v23)
          {
            v28 = 0;
            v29 = 1;
            while (v27 != -1)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v27 == -2;
              if (v30)
                v28 = v23;
              v31 = v26 + v29++;
              v26 = v31 & v16;
              v23 = &result[2 * (v31 & v16)];
              v27 = *v23;
              if (v25 == *v23)
                goto LABEL_23;
            }
            if (v28)
              v23 = v28;
          }
LABEL_23:
          v24 = *((_QWORD *)v17 + 1);
          *v23 = v25;
          v23[1] = v24;
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_18;
    v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    v20 = result + 2;
    v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -1;
      *v20 = -1;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v22 = &result[2 * v18];
      do
      {
        *v10 = -1;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

void sub_180415B3C()
{
  uint64_t v0;

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v0 + 16));
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v0);
}

void mlir::detail::ParallelDiagnosticHandlerImpl::emitDiagnostics(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t *v6;
  unint64_t *v7;
  const std::nothrow_t *v8;
  unint64_t v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t i;
  uint64_t v13;
  uint64_t *v14;
  char v15;

  v6 = *(uint64_t **)(a1 + 112);
  v7 = *(unint64_t **)(a1 + 120);
  if ((char *)v7 - (char *)v6 < 1)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v6, v7, (uint64_t)&v15, 0xD37A6F4DE9BD37A7 * (((char *)v7 - (char *)v6) >> 3), 0, 0);
    v13 = *(_QWORD *)(a1 + 112);
    i = *(_QWORD *)(a1 + 120);
    if (v13 == i)
      return;
    goto LABEL_8;
  }
  v8 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v9 = 0xD37A6F4DE9BD37A7 * (((char *)v7 - (char *)v6) >> 3);
  while (1)
  {
    v10 = (uint64_t *)operator new(184 * v9, v8);
    if (v10)
      break;
    v11 = v9 > 1;
    v9 >>= 1;
    if (!v11)
      goto LABEL_5;
  }
  v14 = v10;
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v6, v7, (uint64_t)&v15, 0xD37A6F4DE9BD37A7 * (((char *)v7 - (char *)v6) >> 3), v10, v9);
  operator delete(v14);
  v13 = *(_QWORD *)(a1 + 112);
  for (i = *(_QWORD *)(a1 + 120); v13 != i; v13 += 184)
LABEL_8:
    a2(a3, v13 + 8);
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if (a4 >= 2)
  {
    v7 = a1;
    if (a4 == 2)
    {
      if (*(a2 - 23) < *a1)
        std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(a1, (uint64_t *)a2 - 23);
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>((unint64_t *)a1, a2);
    }
    else
    {
      v12 = a4 >> 1;
      v13 = (unint64_t *)&a1[23 * (a4 >> 1)];
      v14 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>((uint64_t)a1, v13, a3, v14, (uint64_t)a5);
        v16 = (uint64_t)&a5[23 * v12];
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>((uint64_t)&v7[23 * (a4 >> 1)], a2, a3, a4 - v12, v16);
        v25 = a4;
        v17 = &a5[23 * a4];
        v18 = (uint64_t *)v16;
        v19 = a5;
        while (v18 != v17)
        {
          v20 = (uint64_t)(v7 + 1);
          if (*v18 >= (unint64_t)*v19)
          {
            *v7 = *v19;
            v7 += 23;
            mlir::Diagnostic::operator=(v20, v19 + 1);
            v19 += 23;
            if (v19 == (uint64_t *)v16)
              goto LABEL_15;
          }
          else
          {
            *v7 = *v18;
            v7 += 23;
            mlir::Diagnostic::operator=(v20, v18 + 1);
            v18 += 23;
            if (v19 == (uint64_t *)v16)
            {
LABEL_15:
              if (v18 != v17)
              {
                v21 = 0;
                do
                {
                  v22 = (uint64_t)&v18[v21 + 23];
                  v7[v21] = v18[v21];
                  mlir::Diagnostic::operator=((uint64_t)&v7[v21 + 1], &v18[v21 + 1]);
                  v21 += 23;
                }
                while ((uint64_t *)v22 != v17);
              }
              goto LABEL_22;
            }
          }
        }
        if (v19 != (uint64_t *)v16)
        {
          v23 = 0;
          do
          {
            v24 = (uint64_t)&v19[v23 + 23];
            v7[v23] = v19[v23];
            mlir::Diagnostic::operator=((uint64_t)&v7[v23 + 1], &v19[v23 + 1]);
            v23 += 23;
          }
          while (v24 != v16);
        }
LABEL_22:
        if (a5)
          std::__destruct_n::__process[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(&v25, a5);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(a1, v13, a3, v14, a5, a6);
        v15 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v13, a2, a3, v15, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v7, (uint64_t *)v13, (uint64_t *)a2, a3, v12, v15, a5, a6);
      }
    }
  }
}

void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  unint64_t *v15;
  _QWORD *v16;
  void **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD **v26;
  _QWORD **v27;
  _QWORD *v28;
  void *v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  void *v41[2];
  _BYTE v42[96];
  void *v43[2];
  unint64_t v44;
  void *__p[2];
  unint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return;
  v4 = a1 + 23;
  if (a1 + 23 == a2)
    return;
  v5 = a1;
  while (2)
  {
    v6 = v4;
    v7 = *v4;
    if (v7 >= *v5)
      goto LABEL_4;
    v39 = v5[24];
    v40 = *((_DWORD *)v5 + 50);
    v38 = v7;
    v41[0] = v42;
    v41[1] = (void *)0x400000000;
    if (*((_DWORD *)v5 + 54))
      llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=((uint64_t)v41, (uint64_t)(v5 + 26));
    *(_OWORD *)v43 = *((_OWORD *)v5 + 20);
    v44 = v5[42];
    v5[40] = 0;
    v5[41] = 0;
    *(_OWORD *)__p = *(_OWORD *)(v5 + 43);
    v46 = v5[45];
    v5[42] = 0;
    v5[43] = 0;
    v5[44] = 0;
    v5[45] = 0;
    v8 = v6;
    v9 = *v5;
    while (1)
    {
      v10 = v5;
      *v8 = v9;
      v12 = (uint64_t)(v5 + 1);
      v11 = v5[1];
      *((_DWORD *)v8 + 4) = *((_DWORD *)v5 + 4);
      v8[1] = v11;
      v13 = (const void *)v5[3];
      v14 = v5 + 5;
      if (v13 == v14)
      {
        v17 = (void **)(v8 + 3);
        v18 = *((unsigned int *)v10 + 8);
        v19 = *((unsigned int *)v8 + 8);
        if (v19 >= v18)
        {
          if ((_DWORD)v18)
            memmove(*v17, v13, 24 * v18);
        }
        else
        {
          if (*((_DWORD *)v8 + 9) < v18)
          {
            *((_DWORD *)v8 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 3), v8 + 5, v18, 24);
            v19 = 0;
            LODWORD(v20) = *((_DWORD *)v10 + 8);
            if (!(_DWORD)v20)
              goto LABEL_23;
            goto LABEL_22;
          }
          if ((_DWORD)v19)
          {
            memmove(*v17, v13, 24 * v19);
            v20 = *((unsigned int *)v10 + 8);
            if (v19 == v20)
              goto LABEL_23;
            goto LABEL_22;
          }
          v19 = 0;
          LODWORD(v20) = *((_DWORD *)v10 + 8);
          if ((_DWORD)v20)
LABEL_22:
            memcpy((char *)*v17 + 24 * v19, (const void *)(v10[3] + 24 * v19), 24 * v20 - 24 * v19);
        }
LABEL_23:
        *((_DWORD *)v8 + 8) = v18;
        *((_DWORD *)v10 + 8) = 0;
        v16 = (_QWORD *)v8[17];
        if (!v16)
          goto LABEL_31;
LABEL_24:
        v21 = v8 + 18;
        v22 = (_QWORD *)v8[18];
        v23 = v16;
        if (v22 != v16)
        {
          do
          {
            v25 = (void *)*--v22;
            v24 = v25;
            *v22 = 0;
            if (v25)
              operator delete[](v24);
          }
          while (v22 != v16);
          v23 = (void *)v8[17];
        }
        *v21 = v16;
        operator delete(v23);
        *v21 = 0;
        v8[19] = 0;
        goto LABEL_31;
      }
      v15 = (unint64_t *)v8[3];
      if (v15 != v8 + 5)
      {
        free(v15);
        v13 = (const void *)v10[3];
      }
      v8[3] = (unint64_t)v13;
      v8[4] = v10[4];
      v10[3] = (unint64_t)v14;
      v10[4] = 0;
      v16 = (_QWORD *)v8[17];
      if (v16)
        goto LABEL_24;
LABEL_31:
      *(_OWORD *)(v8 + 17) = *(_OWORD *)(v10 + 17);
      v8[19] = v10[19];
      v10[17] = 0;
      v10[18] = 0;
      v10[19] = 0;
      v26 = (_QWORD **)v8[20];
      if (v26)
      {
        v28 = v8 + 21;
        v27 = (_QWORD **)v8[21];
        v29 = (void *)v8[20];
        if (v27 != v26)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v29 = (void *)v8[20];
        }
        *v28 = v26;
        operator delete(v29);
        *v28 = 0;
        v8[22] = 0;
      }
      *((_OWORD *)v8 + 10) = *((_OWORD *)v10 + 10);
      v8[22] = v10[22];
      v10[20] = 0;
      v10[21] = 0;
      v10[22] = 0;
      if (v10 == a1)
        break;
      v5 = v10 - 23;
      v9 = *(v10 - 23);
      v8 = v10;
      if (v38 >= v9)
        goto LABEL_42;
    }
    v10 = a1;
LABEL_42:
    *v10 = v38;
    mlir::Diagnostic::operator=(v12, (uint64_t *)&v39);
    v30 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v31 = (_QWORD **)__p[1];
      v32 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p[0];
      }
      __p[1] = v30;
      operator delete(v32);
    }
    v33 = v43[0];
    if (v43[0])
    {
      v34 = v43[1];
      v35 = v43[0];
      if (v43[1] != v43[0])
      {
        do
        {
          v37 = (void *)*--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            operator delete[](v36);
        }
        while (v34 != v33);
        v35 = v43[0];
      }
      v43[1] = v33;
      operator delete(v35);
    }
    if (v41[0] != v42)
      free(v41[0]);
LABEL_4:
    v4 = v6 + 23;
    v5 = v6;
    if (v6 + 23 != a2)
      continue;
    break;
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  if (a4)
  {
    v8 = result;
    if (a4 == 2)
    {
      v11 = *(a2 - 23);
      v12 = (_QWORD *)(a5 + 8);
      v13 = a5 + 24;
      v14 = a5 + 40;
      if (v11 < *(_QWORD *)v8)
      {
        *(_QWORD *)a5 = v11;
        v15 = *(a2 - 22);
        *(_DWORD *)(a5 + 16) = *((_DWORD *)a2 - 42);
        *v12 = v15;
        *(_QWORD *)(a5 + 24) = v14;
        *(_QWORD *)(a5 + 32) = 0x400000000;
        if (*((_DWORD *)a2 - 38))
          llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v13, (uint64_t)(a2 - 20));
        *(_QWORD *)(a5 + 136) = 0;
        *(_QWORD *)(a5 + 144) = 0;
        *(_QWORD *)(a5 + 152) = 0;
        *(_OWORD *)(a5 + 136) = *((_OWORD *)a2 - 3);
        *(_QWORD *)(a5 + 152) = *(a2 - 4);
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *(_QWORD *)(a5 + 160) = 0;
        *(_QWORD *)(a5 + 168) = 0;
        *(_QWORD *)(a5 + 176) = 0;
        *(_OWORD *)(a5 + 160) = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(a5 + 176) = *(a2 - 1);
        *(a2 - 3) = 0;
        *(a2 - 2) = 0;
        *(a2 - 1) = 0;
        *(_QWORD *)(a5 + 184) = *(_QWORD *)v8;
        v16 = *(_QWORD *)(v8 + 8);
        v17 = *(_DWORD *)(v8 + 16);
        *(_QWORD *)(a5 + 208) = a5 + 224;
        result = a5 + 208;
        *(_DWORD *)(a5 + 200) = v17;
        *(_QWORD *)(a5 + 192) = v16;
        *(_QWORD *)(a5 + 216) = 0x400000000;
        if (*(_DWORD *)(v8 + 32))
          result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v8 + 24);
        *(_QWORD *)(a5 + 320) = 0;
        *(_QWORD *)(a5 + 328) = 0;
        *(_QWORD *)(a5 + 336) = 0;
        *(_OWORD *)(a5 + 320) = *(_OWORD *)(v8 + 136);
        *(_QWORD *)(a5 + 336) = *(_QWORD *)(v8 + 152);
        *(_QWORD *)(v8 + 136) = 0;
        *(_QWORD *)(v8 + 144) = 0;
        *(_QWORD *)(v8 + 152) = 0;
        *(_QWORD *)(a5 + 344) = 0;
        *(_QWORD *)(a5 + 352) = 0;
        *(_QWORD *)(a5 + 360) = 0;
        *(_OWORD *)(a5 + 344) = *(_OWORD *)(v8 + 160);
        *(_QWORD *)(a5 + 360) = *(_QWORD *)(v8 + 176);
        goto LABEL_13;
      }
      *(_QWORD *)a5 = *(_QWORD *)v8;
      v19 = *(_QWORD *)(v8 + 8);
      *(_DWORD *)(a5 + 16) = *(_DWORD *)(v8 + 16);
      *v12 = v19;
      *(_QWORD *)(a5 + 24) = v14;
      *(_QWORD *)(a5 + 32) = 0x400000000;
      if (*(_DWORD *)(v8 + 32))
        llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v13, v8 + 24);
      *(_QWORD *)(a5 + 136) = 0;
      *(_QWORD *)(a5 + 144) = 0;
      *(_QWORD *)(a5 + 152) = 0;
      *(_OWORD *)(a5 + 136) = *(_OWORD *)(v8 + 136);
      *(_QWORD *)(a5 + 152) = *(_QWORD *)(v8 + 152);
      *(_QWORD *)(v8 + 136) = 0;
      *(_QWORD *)(v8 + 144) = 0;
      *(_QWORD *)(v8 + 152) = 0;
      *(_QWORD *)(a5 + 160) = 0;
      *(_QWORD *)(a5 + 168) = 0;
      *(_QWORD *)(a5 + 176) = 0;
      *(_OWORD *)(a5 + 160) = *(_OWORD *)(v8 + 160);
      *(_QWORD *)(a5 + 176) = *(_QWORD *)(v8 + 176);
      *(_QWORD *)(v8 + 160) = 0;
      *(_QWORD *)(v8 + 168) = 0;
      *(_QWORD *)(v8 + 176) = 0;
      *(_QWORD *)(a5 + 184) = *(a2 - 23);
      v20 = *(a2 - 22);
      v21 = *((_DWORD *)a2 - 42);
      *(_QWORD *)(a5 + 208) = a5 + 224;
      result = a5 + 208;
      *(_DWORD *)(a5 + 200) = v21;
      *(_QWORD *)(a5 + 192) = v20;
      *(_QWORD *)(a5 + 216) = 0x400000000;
      if (*((_DWORD *)a2 - 38))
        result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, (uint64_t)(a2 - 20));
      *(_QWORD *)(a5 + 320) = 0;
      *(_QWORD *)(a5 + 328) = 0;
      *(_QWORD *)(a5 + 336) = 0;
      *(_OWORD *)(a5 + 320) = *((_OWORD *)a2 - 3);
      *(_QWORD *)(a5 + 336) = *(a2 - 4);
      *(a2 - 6) = 0;
      *(a2 - 5) = 0;
      *(a2 - 4) = 0;
      *(_QWORD *)(a5 + 344) = 0;
      *(_QWORD *)(a5 + 352) = 0;
      *(_QWORD *)(a5 + 360) = 0;
      *(_OWORD *)(a5 + 344) = *(_OWORD *)(a2 - 3);
      *(_QWORD *)(a5 + 360) = *(a2 - 1);
      *(a2 - 3) = 0;
      *(a2 - 2) = 0;
      *(a2 - 1) = 0;
    }
    else
    {
      if (a4 == 1)
      {
        *(_QWORD *)a5 = *(_QWORD *)result;
        v9 = *(_QWORD *)(result + 8);
        v10 = *(_DWORD *)(result + 16);
        *(_QWORD *)(a5 + 24) = a5 + 40;
        result = a5 + 24;
        *(_DWORD *)(a5 + 16) = v10;
        *(_QWORD *)(a5 + 8) = v9;
        *(_QWORD *)(a5 + 32) = 0x400000000;
        if (*(_DWORD *)(v8 + 32))
          result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v8 + 24);
        *(_QWORD *)(a5 + 136) = 0;
        *(_QWORD *)(a5 + 144) = 0;
        *(_QWORD *)(a5 + 152) = 0;
        *(_OWORD *)(a5 + 136) = *(_OWORD *)(v8 + 136);
        *(_QWORD *)(a5 + 152) = *(_QWORD *)(v8 + 152);
        *(_QWORD *)(v8 + 136) = 0;
        *(_QWORD *)(v8 + 144) = 0;
        *(_QWORD *)(v8 + 152) = 0;
        *(_QWORD *)(a5 + 160) = 0;
        *(_QWORD *)(a5 + 168) = 0;
        *(_QWORD *)(a5 + 176) = 0;
        *(_OWORD *)(a5 + 160) = *(_OWORD *)(v8 + 160);
        *(_QWORD *)(a5 + 176) = *(_QWORD *)(v8 + 176);
LABEL_13:
        *(_QWORD *)(v8 + 160) = 0;
        *(_QWORD *)(v8 + 168) = 0;
        *(_QWORD *)(v8 + 176) = 0;
        return result;
      }
      if ((uint64_t)a4 > 8)
      {
        v22 = a4 >> 1;
        v23 = 184 * (a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(result, result + v23, a3, a4 >> 1, a5, a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v8 + v23, a2, a3, a4 - v22, a5 + v23, a4 - v22);
        return std::__merge_move_construct[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v8, v8 + v23, v8 + v23, (uint64_t)a2, (_QWORD *)a5);
      }
      else
      {
        return std::__insertion_sort_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(result, a2, a5);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *i;
  uint64_t *v28;
  uint64_t *v29;
  _BOOL4 v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;

  if (a6)
  {
    v8 = a6;
    while (1)
    {
      if (v8 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(a1, a2, a3, a4, a5, v8, a7);
        return;
      }
      if (!a5)
        return;
      v12 = 0;
      v13 = -a5;
      while (*a2 >= (unint64_t)a1[v12 / 8])
      {
        v12 += 184;
        if (__CFADD__(v13++, 1))
          return;
      }
      v15 = -v13;
      if (-v13 >= v8)
      {
        if (v13 == -1)
        {
          std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(&a1[v12 / 8], a2);
          return;
        }
        if (v13 > 0)
          v15 = 1 - v13;
        v25 = v15 >> 1;
        v19 = &a1[23 * (v15 >> 1) + v12 / 8];
        v18 = a2;
        if (a2 != a3)
        {
          v32 = 0xD37A6F4DE9BD37A7 * (a3 - a2);
          v18 = a2;
          do
          {
            v33 = v32 >> 1;
            v34 = (unint64_t *)&v18[23 * (v32 >> 1)];
            v36 = *v34;
            v35 = (uint64_t *)(v34 + 23);
            v32 += ~(v32 >> 1);
            if (v36 < *v19)
              v18 = v35;
            else
              v32 = v33;
          }
          while (v32);
        }
        v17 = 0xD37A6F4DE9BD37A7 * (v18 - a2);
        v55 = &a1[v12 / 8];
        if (v19 != a2)
        {
LABEL_22:
          if (v18 == a2)
          {
            v26 = v19;
          }
          else
          {
            v49 = v17;
            v50 = v25;
            v51 = a3;
            v52 = a8;
            v53 = a4;
            v54 = a7;
            std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(v19, a2);
            v26 = v19 + 23;
            for (i = a2 + 23; i != v18; i += 23)
            {
              if (v26 == a2)
                a2 = i;
              std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(v26, i);
              v26 += 23;
            }
            if (v26 != a2)
            {
              v28 = v26;
              v29 = a2;
              while (1)
              {
                std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(v28, v29);
                v29 += 23;
                v30 = v28 + 23 == a2;
                if (v29 == v18)
                {
                  if (v28 + 23 == a2)
                    break;
                  v29 = a2 + 23;
                  v28 += 46;
                  while (1)
                  {
                    std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(v28 - 23, a2);
                    v30 = v28 == a2;
                    if (v29 != v18)
                      break;
                    v31 = v28 == a2;
                    v28 += 23;
                    if (v31)
                      goto LABEL_39;
                  }
                }
                else
                {
                  v28 += 23;
                }
                if (v30)
                  a2 = v29;
              }
            }
LABEL_39:
            a4 = v53;
            a7 = v54;
            a3 = v51;
            a8 = v52;
            v17 = v49;
            v25 = v50;
          }
          goto LABEL_52;
        }
      }
      else
      {
        if (v8 >= 0)
          v16 = v8;
        else
          v16 = v8 + 1;
        v17 = v16 >> 1;
        v18 = &a2[23 * (v16 >> 1)];
        v19 = a2;
        if ((char *)a2 - (char *)a1 != v12)
        {
          v20 = 0xD37A6F4DE9BD37A7 * ((uint64_t)((char *)a2 - (char *)a1 - v12) >> 3);
          v19 = &a1[v12 / 8];
          do
          {
            v21 = v20 >> 1;
            v22 = &v19[23 * (v20 >> 1)];
            v24 = *v22;
            v23 = v22 + 23;
            v20 += ~(v20 >> 1);
            if (*v18 < v24)
              v20 = v21;
            else
              v19 = v23;
          }
          while (v20);
        }
        v25 = 0xD37A6F4DE9BD37A7 * ((uint64_t)((char *)v19 - (char *)a1 - v12) >> 3);
        v55 = &a1[v12 / 8];
        if (v19 != a2)
          goto LABEL_22;
      }
      v26 = v18;
LABEL_52:
      a5 = -v25 - v13;
      v37 = v8 - v17;
      if (v25 + v17 >= v8 - (v25 + v17) - v13)
      {
        v43 = a4;
        v44 = v25;
        v45 = v17;
        v46 = a7;
        v47 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v26, v18, a3);
        a8 = v47;
        a4 = v43;
        a7 = v46;
        a2 = v19;
        v48 = v45;
        a5 = v44;
        a3 = v26;
        a1 = v55;
        v8 = v48;
        if (!v48)
          return;
      }
      else
      {
        v38 = &a1[v12 / 8];
        v39 = a3;
        v40 = a4;
        v41 = a7;
        v42 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v38, v19, v26);
        a3 = v39;
        a8 = v42;
        a4 = v40;
        a7 = v41;
        a1 = v26;
        a2 = v18;
        v8 = v37;
        if (!v37)
          return;
      }
    }
  }
}

void std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19[2];
  _BYTE v20[96];
  void *v21[2];
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)(a1 + 1);
  v16 = *a1;
  v17 = a1[1];
  v18 = *((_DWORD *)a1 + 4);
  v19[0] = v20;
  v19[1] = (void *)0x400000000;
  if (*((_DWORD *)a1 + 8))
    llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=((uint64_t)v19, (uint64_t)(a1 + 3));
  *(_OWORD *)v21 = *(_OWORD *)(a1 + 17);
  v5 = a1[19];
  a1[17] = 0;
  a1[18] = 0;
  v6 = *((_OWORD *)a1 + 10);
  v7 = a1[22];
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[22] = 0;
  *a1 = *a2;
  v22 = v5;
  *(_OWORD *)__p = v6;
  v24 = v7;
  mlir::Diagnostic::operator=(v4, a2 + 1);
  *a2 = v16;
  mlir::Diagnostic::operator=((uint64_t)(a2 + 1), &v17);
  v8 = (_QWORD **)__p[0];
  if (__p[0])
  {
    v9 = (_QWORD **)__p[1];
    v10 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
      while (v9 != v8);
      v10 = __p[0];
    }
    __p[1] = v8;
    operator delete(v10);
  }
  v11 = v21[0];
  if (v21[0])
  {
    v12 = v21[1];
    v13 = v21[0];
    if (v21[1] != v21[0])
    {
      do
      {
        v15 = (void *)*--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          operator delete[](v14);
      }
      while (v12 != v11);
      v13 = v21[0];
    }
    v21[1] = v11;
    operator delete(v13);
  }
  if (v19[0] != v20)
    free(v19[0]);
}

uint64_t mlir::Diagnostic::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(a1 + 16, (uint64_t)(a2 + 2));
  v5 = (void **)(a1 + 128);
  v6 = *(_QWORD **)(a1 + 128);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 136);
    v8 = *(void **)(a1 + 128);
    if (v7 != v6)
    {
      do
      {
        v10 = (void *)*--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          operator delete[](v9);
      }
      while (v7 != v6);
      v8 = *v5;
    }
    *(_QWORD *)(a1 + 136) = v6;
    operator delete(v8);
    *v5 = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(_QWORD *)(a1 + 144) = a2[18];
  a2[16] = 0;
  a2[17] = 0;
  a2[18] = 0;
  v11 = (void **)(a1 + 152);
  v12 = *(_QWORD ***)(a1 + 152);
  if (v12)
  {
    v13 = *(_QWORD ***)(a1 + 160);
    v14 = *(void **)(a1 + 152);
    if (v13 != v12)
    {
      do
        v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
      while (v13 != v12);
      v14 = *v11;
    }
    *(_QWORD *)(a1 + 160) = v12;
    operator delete(v14);
    *v11 = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
  *(_QWORD *)(a1 + 168) = a2[21];
  a2[19] = 0;
  a2[20] = 0;
  a2[21] = 0;
  return a1;
}

uint64_t std::__insertion_sort_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t result, unint64_t *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  _QWORD *v21;
  void **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  if ((unint64_t *)result != a2)
  {
    v5 = (_QWORD *)result;
    *(_QWORD *)a3 = *(_QWORD *)result;
    v6 = *(_QWORD *)(result + 8);
    v7 = *(_DWORD *)(result + 16);
    *(_QWORD *)(a3 + 24) = a3 + 40;
    result = a3 + 24;
    *(_DWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 32) = 0x400000000;
    if (*((_DWORD *)v5 + 8))
      result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, (uint64_t)(v5 + 3));
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 152) = 0;
    *(_OWORD *)(a3 + 136) = *(_OWORD *)(v5 + 17);
    *(_QWORD *)(a3 + 152) = v5[19];
    v5[17] = 0;
    v5[18] = 0;
    v5[19] = 0;
    *(_QWORD *)(a3 + 160) = 0;
    *(_QWORD *)(a3 + 168) = 0;
    *(_QWORD *)(a3 + 176) = 0;
    *(_OWORD *)(a3 + 160) = *((_OWORD *)v5 + 10);
    *(_QWORD *)(a3 + 176) = v5[22];
    v5[20] = 0;
    v5[21] = 0;
    v5[22] = 0;
    v8 = v5 + 23;
    if (v5 + 23 != a2)
    {
      v9 = a3;
      while (1)
      {
        while (1)
        {
          v11 = v8;
          v12 = *v8;
          v13 = (_QWORD *)(v9 + 192);
          result = v9 + 208;
          v14 = v9 + 224;
          if (v12 < *(_QWORD *)v9)
            break;
          *(_QWORD *)(v9 + 184) = v12;
          v34 = v5[24];
          *(_DWORD *)(v9 + 200) = *((_DWORD *)v5 + 50);
          *v13 = v34;
          *(_QWORD *)(v9 + 208) = v14;
          *(_QWORD *)(v9 + 216) = 0x400000000;
          if (*((_DWORD *)v5 + 54))
            result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, (uint64_t)(v5 + 26));
          *(_QWORD *)(v9 + 320) = 0;
          *(_QWORD *)(v9 + 328) = 0;
          *(_QWORD *)(v9 + 336) = 0;
          *(_OWORD *)(v9 + 320) = *((_OWORD *)v5 + 20);
          *(_QWORD *)(v9 + 336) = v5[42];
          v5[40] = 0;
          v5[41] = 0;
          v5[42] = 0;
          *(_QWORD *)(v9 + 344) = 0;
          *(_QWORD *)(v9 + 352) = 0;
          *(_QWORD *)(v9 + 360) = 0;
          v35 = v5[44];
          *(_QWORD *)(v9 + 344) = v5[43];
          *(_QWORD *)(v9 + 352) = v35;
          *(_QWORD *)(v9 + 360) = v5[45];
          v5[43] = 0;
          v5[44] = 0;
          v5[45] = 0;
          v9 += 184;
          v8 = v11 + 23;
          v5 = v11;
          if (v11 + 23 == a2)
            return result;
        }
        *(_QWORD *)(v9 + 184) = *(_QWORD *)v9;
        *v13 = *(_QWORD *)(v9 + 8);
        *(_DWORD *)(v9 + 200) = *(_DWORD *)(v9 + 16);
        *(_QWORD *)(v9 + 208) = v14;
        *(_QWORD *)(v9 + 216) = 0x400000000;
        if (*(_DWORD *)(v9 + 32))
          llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v9 + 24);
        *(_OWORD *)(v9 + 320) = *(_OWORD *)(v9 + 136);
        *(_QWORD *)(v9 + 336) = *(_QWORD *)(v9 + 152);
        *(_QWORD *)(v9 + 136) = 0;
        *(_QWORD *)(v9 + 144) = 0;
        *(_OWORD *)(v9 + 344) = *(_OWORD *)(v9 + 160);
        *(_QWORD *)(v9 + 360) = *(_QWORD *)(v9 + 176);
        *(_QWORD *)(v9 + 152) = 0;
        *(_QWORD *)(v9 + 160) = 0;
        v10 = a3;
        *(_QWORD *)(v9 + 168) = 0;
        *(_QWORD *)(v9 + 176) = 0;
        if (v9 != a3)
          break;
LABEL_7:
        *(_QWORD *)v10 = *v11;
        result = mlir::Diagnostic::operator=(v10 + 8, v5 + 24);
        v9 += 184;
        v8 = v11 + 23;
        v5 = v11;
        if (v11 + 23 == a2)
          return result;
      }
      v10 = v9;
      v15 = v9;
      while (1)
      {
        v17 = *(_QWORD *)(v15 - 184);
        v15 -= 184;
        v16 = v17;
        if (*v11 >= v17)
          goto LABEL_7;
        v18 = *(_QWORD *)(v10 - 176);
        *(_QWORD *)v10 = v16;
        *(_QWORD *)(v10 + 8) = v18;
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v10 - 168);
        v19 = *(const void **)(v10 - 160);
        if (v19 != (const void *)(v10 - 144))
        {
          v20 = *(void **)(v10 + 24);
          if (v20 != (void *)(v10 + 40))
          {
            free(v20);
            v19 = *(const void **)(v10 - 160);
          }
          *(_QWORD *)(v10 + 24) = v19;
          *(_QWORD *)(v10 + 32) = *(_QWORD *)(v10 - 152);
          *(_QWORD *)(v10 - 160) = v10 - 144;
          *(_QWORD *)(v10 - 152) = 0;
          v21 = *(_QWORD **)(v10 + 136);
          if (!v21)
            goto LABEL_38;
LABEL_31:
          v26 = *(_QWORD **)(v10 + 144);
          v27 = v21;
          if (v26 != v21)
          {
            do
            {
              v29 = (void *)*--v26;
              v28 = v29;
              *v26 = 0;
              if (v29)
                operator delete[](v28);
            }
            while (v26 != v21);
            v27 = *(void **)(v10 + 136);
          }
          *(_QWORD *)(v10 + 144) = v21;
          operator delete(v27);
          goto LABEL_38;
        }
        v22 = (void **)(v10 + 24);
        v23 = *(unsigned int *)(v10 - 152);
        v24 = *(unsigned int *)(v10 + 32);
        if (v24 >= v23)
        {
          if ((_DWORD)v23)
            memmove(*v22, v19, 24 * v23);
        }
        else if (*(_DWORD *)(v10 + 36) >= v23)
        {
          if ((_DWORD)v24)
          {
            memmove(*v22, v19, 24 * v24);
            v25 = *(unsigned int *)(v10 - 152);
            if (v24 == v25)
              goto LABEL_30;
LABEL_29:
            memcpy((void *)(*(_QWORD *)(v10 + 24) + 24 * v24), (const void *)(*(_QWORD *)(v10 - 160) + 24 * v24), 24 * v25 - 24 * v24);
            goto LABEL_30;
          }
          v24 = 0;
          LODWORD(v25) = *(_DWORD *)(v10 - 152);
          if ((_DWORD)v25)
            goto LABEL_29;
        }
        else
        {
          *(_DWORD *)(v10 + 32) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v22, (void *)(v10 + 40), v23, 24);
          v24 = 0;
          LODWORD(v25) = *(_DWORD *)(v10 - 152);
          if ((_DWORD)v25)
            goto LABEL_29;
        }
LABEL_30:
        *(_DWORD *)(v10 + 32) = v23;
        *(_DWORD *)(v10 - 152) = 0;
        v21 = *(_QWORD **)(v10 + 136);
        if (v21)
          goto LABEL_31;
LABEL_38:
        v30 = (_QWORD *)(v10 - 48);
        *(_OWORD *)(v10 + 136) = *(_OWORD *)(v10 - 48);
        *(_QWORD *)(v10 + 152) = *(_QWORD *)(v10 - 32);
        v30[1] = 0;
        v30[2] = 0;
        *v30 = 0;
        v31 = *(_QWORD ***)(v10 + 160);
        if (v31)
        {
          v32 = *(_QWORD ***)(v10 + 168);
          v33 = *(void **)(v10 + 160);
          if (v32 != v31)
          {
            do
              v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            v33 = *(void **)(v10 + 160);
          }
          *(_QWORD *)(v10 + 168) = v31;
          operator delete(v33);
        }
        *(_OWORD *)(v10 + 160) = *(_OWORD *)(v10 - 24);
        *(_QWORD *)(v10 + 176) = *(_QWORD *)(v10 - 8);
        *(_QWORD *)(v10 - 16) = 0;
        *(_QWORD *)(v10 - 8) = 0;
        *(_QWORD *)(v10 - 24) = 0;
        v10 = v15;
        if (v15 == a3)
        {
          v10 = a3;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t std::__merge_move_construct[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v5 = a5;
  if (result == a2)
  {
LABEL_18:
    if (a3 != a4)
    {
      v20 = 0;
      do
      {
        v21 = &v5[v20];
        v22 = a3 + v20 * 8;
        v5[v20] = *(_QWORD *)(a3 + v20 * 8);
        v23 = *(_QWORD *)(a3 + v20 * 8 + 8);
        v24 = *(_DWORD *)(a3 + v20 * 8 + 16);
        v5[v20 + 3] = &v5[v20 + 5];
        result = (uint64_t)&v5[v20 + 3];
        *(_DWORD *)(result - 8) = v24;
        *(_QWORD *)(result - 16) = v23;
        *(_QWORD *)(result + 8) = 0x400000000;
        if (*(_DWORD *)(a3 + v20 * 8 + 32))
          result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v22 + 24);
        v21[17] = 0;
        v21[18] = 0;
        v21[19] = 0;
        *(_OWORD *)(v21 + 17) = *(_OWORD *)(v22 + 136);
        v21[19] = *(_QWORD *)(v22 + 152);
        *(_QWORD *)(v22 + 136) = 0;
        *(_QWORD *)(v22 + 144) = 0;
        *(_QWORD *)(v22 + 152) = 0;
        v21[20] = 0;
        v21[21] = 0;
        v21[22] = 0;
        *((_OWORD *)v21 + 10) = *(_OWORD *)(v22 + 160);
        v21[22] = *(_QWORD *)(v22 + 176);
        *(_QWORD *)(v22 + 160) = 0;
        *(_QWORD *)(v22 + 168) = 0;
        *(_QWORD *)(v22 + 176) = 0;
        v20 += 23;
      }
      while (v22 + 184 != a4);
    }
  }
  else
  {
    v9 = result;
    v10 = a5 + 22;
    while (a3 != a4)
    {
      v11 = v10 - 21;
      result = (uint64_t)(v10 - 19);
      v12 = v10 - 17;
      if (*(_QWORD *)a3 >= *(_QWORD *)v9)
      {
        *(v10 - 22) = *(_QWORD *)v9;
        v14 = *(_QWORD *)(v9 + 8);
        *((_DWORD *)v10 - 40) = *(_DWORD *)(v9 + 16);
        *v11 = v14;
        *(v10 - 19) = v12;
        *(v10 - 18) = 0x400000000;
        if (*(_DWORD *)(v9 + 32))
          result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v9 + 24);
        *(v10 - 5) = 0;
        *(v10 - 4) = 0;
        *(v10 - 3) = 0;
        *(_OWORD *)(v10 - 5) = *(_OWORD *)(v9 + 136);
        *(v10 - 3) = *(_QWORD *)(v9 + 152);
        *(_QWORD *)(v9 + 136) = 0;
        *(_QWORD *)(v9 + 144) = 0;
        *(_QWORD *)(v9 + 152) = 0;
        *(v10 - 2) = 0;
        *(v10 - 1) = 0;
        *v10 = 0;
        *((_OWORD *)v10 - 1) = *(_OWORD *)(v9 + 160);
        *v10 = *(_QWORD *)(v9 + 176);
        v10 += 23;
        *(_QWORD *)(v9 + 160) = 0;
        *(_QWORD *)(v9 + 168) = 0;
        *(_QWORD *)(v9 + 176) = 0;
        v9 += 184;
        if (v9 == a2)
        {
LABEL_17:
          v5 = v10 - 22;
          goto LABEL_18;
        }
      }
      else
      {
        *(v10 - 22) = *(_QWORD *)a3;
        v13 = *(_QWORD *)(a3 + 8);
        *((_DWORD *)v10 - 40) = *(_DWORD *)(a3 + 16);
        *v11 = v13;
        *(v10 - 19) = v12;
        *(v10 - 18) = 0x400000000;
        if (*(_DWORD *)(a3 + 32))
          result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, a3 + 24);
        *(v10 - 5) = 0;
        *(v10 - 4) = 0;
        *(v10 - 3) = 0;
        *(_OWORD *)(v10 - 5) = *(_OWORD *)(a3 + 136);
        *(v10 - 3) = *(_QWORD *)(a3 + 152);
        *(_QWORD *)(a3 + 136) = 0;
        *(_QWORD *)(a3 + 144) = 0;
        *(_QWORD *)(a3 + 152) = 0;
        *(v10 - 2) = 0;
        *(v10 - 1) = 0;
        *v10 = 0;
        *((_OWORD *)v10 - 1) = *(_OWORD *)(a3 + 160);
        *v10 = *(_QWORD *)(a3 + 176);
        v10 += 23;
        *(_QWORD *)(a3 + 160) = 0;
        *(_QWORD *)(a3 + 168) = 0;
        *(_QWORD *)(a3 + 176) = 0;
        a3 += 184;
        if (v9 == a2)
          goto LABEL_17;
      }
    }
    if (v9 != a2)
    {
      v15 = 0;
      do
      {
        v16 = &v10[v15];
        v17 = v9 + v15 * 8;
        v10[v15 - 22] = *(_QWORD *)(v9 + v15 * 8);
        v18 = *(_QWORD *)(v9 + v15 * 8 + 8);
        v19 = *(_DWORD *)(v9 + v15 * 8 + 16);
        v10[v15 - 19] = &v10[v15 - 17];
        result = (uint64_t)&v10[v15 - 19];
        *(_DWORD *)(result - 8) = v19;
        *(_QWORD *)(result - 16) = v18;
        *(_QWORD *)(result + 8) = 0x400000000;
        if (*(_DWORD *)(v9 + v15 * 8 + 32))
          result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v17 + 24);
        *(v16 - 5) = 0;
        *(v16 - 4) = 0;
        *(v16 - 3) = 0;
        *(_OWORD *)(v16 - 5) = *(_OWORD *)(v17 + 136);
        *(v16 - 3) = *(_QWORD *)(v17 + 152);
        *(_QWORD *)(v17 + 136) = 0;
        *(_QWORD *)(v17 + 144) = 0;
        *(_QWORD *)(v17 + 152) = 0;
        *(v16 - 2) = 0;
        *(v16 - 1) = 0;
        *v16 = 0;
        *((_OWORD *)v16 - 1) = *(_OWORD *)(v17 + 160);
        *v16 = *(_QWORD *)(v17 + 176);
        *(_QWORD *)(v17 + 160) = 0;
        *(_QWORD *)(v17 + 168) = 0;
        *(_QWORD *)(v17 + 176) = 0;
        v15 += 23;
      }
      while (v17 + 184 != a2);
    }
  }
  return result;
}

void std::__destruct_n::__process[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;

  if (*a1)
  {
    v4 = 0;
    do
    {
      v5 = (_QWORD **)a2[20];
      if (v5)
      {
        v6 = (_QWORD **)a2[21];
        v7 = (void *)a2[20];
        if (v6 != v5)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = (void *)a2[20];
        }
        a2[21] = v5;
        operator delete(v7);
      }
      v8 = (_QWORD *)a2[17];
      if (v8)
      {
        v9 = (_QWORD *)a2[18];
        v10 = (void *)a2[17];
        if (v9 != v8)
        {
          do
          {
            v12 = (void *)*--v9;
            v11 = v12;
            *v9 = 0;
            if (v12)
              operator delete[](v11);
          }
          while (v9 != v8);
          v10 = (void *)a2[17];
        }
        a2[18] = v8;
        operator delete(v10);
      }
      v13 = (_QWORD *)a2[3];
      if (v13 != a2 + 5)
        free(v13);
      ++v4;
      a2 += 23;
    }
    while (v4 < *a1);
  }
}

void std::__buffered_inplace_merge[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;

  v9 = a2;
  v10 = a1;
  if (a5 > a6)
  {
    if (a2 != a3)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = &a7[v11];
        v14 = &v9[v11];
        a7[v11] = v9[v11];
        v15 = v9[v11 + 1];
        v16 = v9[v11 + 2];
        a7[v11 + 3] = &a7[v11 + 5];
        v17 = (uint64_t)&a7[v11 + 3];
        *(_DWORD *)(v17 - 8) = v16;
        *(_QWORD *)(v17 - 16) = v15;
        *(_QWORD *)(v17 + 8) = 0x400000000;
        if (LODWORD(v9[v11 + 4]))
          llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v17, (uint64_t)(v14 + 3));
        v13[17] = 0;
        v13[18] = 0;
        v13[19] = 0;
        *(_OWORD *)(v13 + 17) = *(_OWORD *)(v14 + 17);
        v13[19] = v14[19];
        v14[17] = 0;
        v14[18] = 0;
        v14[19] = 0;
        v13[20] = 0;
        v13[21] = 0;
        v13[22] = 0;
        *((_OWORD *)v13 + 10) = *((_OWORD *)v14 + 10);
        v13[22] = v14[22];
        v14[20] = 0;
        v14[21] = 0;
        v14[22] = 0;
        ++v12;
        v11 += 23;
      }
      while (v14 + 23 != a3);
      v39 = v12;
      if (v11 * 8)
      {
        v25 = &a7[v11];
        v26 = a3 - 23;
        while (v9 != v10)
        {
          v27 = *(v25 - 23);
          v28 = *(v9 - 23);
          v29 = (uint64_t)(v26 + 1);
          v30 = v27 >= v28;
          if (v27 <= v28)
            v27 = *(v9 - 23);
          if (v30)
            v31 = v25;
          else
            v31 = v9;
          if (v30)
            v25 -= 23;
          else
            v9 -= 23;
          *v26 = v27;
          v26 -= 23;
          mlir::Diagnostic::operator=(v29, v31 - 22);
          if (v25 == a7)
            goto LABEL_38;
        }
        v36 = 0;
        do
        {
          v26[v36] = v25[v36 - 23];
          mlir::Diagnostic::operator=((uint64_t)&v26[v36 + 1], &v25[v36 - 22]);
          v36 -= 23;
        }
        while (&v25[v36] != a7);
      }
      goto LABEL_38;
    }
LABEL_12:
    v39 = 0;
    goto LABEL_38;
  }
  if (a1 == a2)
    goto LABEL_12;
  v18 = 0;
  v19 = 0;
  do
  {
    v20 = &a7[v18];
    v21 = &v10[v18];
    a7[v18] = v10[v18];
    v22 = v10[v18 + 1];
    v23 = v10[v18 + 2];
    a7[v18 + 3] = &a7[v18 + 5];
    v24 = (uint64_t)&a7[v18 + 3];
    *(_DWORD *)(v24 - 8) = v23;
    *(_QWORD *)(v24 - 16) = v22;
    *(_QWORD *)(v24 + 8) = 0x400000000;
    if (LODWORD(v10[v18 + 4]))
      llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v24, (uint64_t)(v21 + 3));
    v20[17] = 0;
    v20[18] = 0;
    v20[19] = 0;
    *(_OWORD *)(v20 + 17) = *(_OWORD *)(v21 + 17);
    v20[19] = v21[19];
    v21[17] = 0;
    v21[18] = 0;
    v21[19] = 0;
    v20[20] = 0;
    v20[21] = 0;
    v20[22] = 0;
    *((_OWORD *)v20 + 10) = *((_OWORD *)v21 + 10);
    v20[22] = v21[22];
    v21[20] = 0;
    v21[21] = 0;
    v21[22] = 0;
    ++v19;
    v18 += 23;
  }
  while (v21 + 23 != v9);
  v39 = v19;
  if (v18 * 8)
  {
    v32 = &a7[v18];
    v33 = (uint64_t)&a7[v18 - 23];
    v34 = a7;
    while (v9 != a3)
    {
      v35 = (uint64_t)(v10 + 1);
      if (*v9 >= *v34)
      {
        *v10 = *v34;
        v10 += 23;
        mlir::Diagnostic::operator=(v35, v34 + 1);
        v34 += 23;
        if (v32 == v34)
          goto LABEL_38;
      }
      else
      {
        *v10 = *v9;
        v10 += 23;
        mlir::Diagnostic::operator=(v35, v9 + 1);
        v9 += 23;
        if (v32 == v34)
          goto LABEL_38;
      }
    }
    v37 = 0;
    do
    {
      v38 = &v34[v37];
      v10[v37] = v34[v37];
      mlir::Diagnostic::operator=((uint64_t)&v10[v37 + 1], &v34[v37 + 1]);
      v37 += 23;
    }
    while ((_QWORD *)v33 != v38);
  }
LABEL_38:
  if (a7)
    std::__destruct_n::__process[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(&v39, a7);
}

void llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::detail::ParallelDiagnosticHandlerImpl::~ParallelDiagnosticHandlerImpl()::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t *DiagEngine;

  DiagEngine = (uint64_t *)mlir::MLIRContext::getDiagEngine(*(mlir::MLIRContext **)(*(_QWORD *)a1 + 144));
  mlir::detail::DiagnosticEngineImpl::emit(*DiagEngine, a2);
}

void mlir::detail::ParallelDiagnosticHandlerImpl::print(llvm::raw_ostream &)const::{lambda(mlir::Diagnostic const&)#1}::operator()(llvm::raw_ostream **a1, uint64_t *a2)
{
  llvm::raw_ostream *v4;
  _WORD *v5;
  unsigned int v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  mlir::DiagnosticArgument *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;

  llvm::raw_ostream::indent(*a1, 4u);
  if (*(_UNKNOWN **)(*(_QWORD *)*a2 + 136) == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
  {
LABEL_4:
    v6 = *((_DWORD *)a2 + 2);
    if (v6 > 3)
      goto LABEL_21;
    goto LABEL_7;
  }
  v4 = *a1;
  v18 = *a2;
  mlir::Attribute::print((mlir::Attribute *)&v18, v4, 0);
  v5 = (_WORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 <= 1uLL)
  {
    llvm::raw_ostream::write(v4, ": ", 2uLL);
    goto LABEL_4;
  }
  *v5 = 8250;
  *((_QWORD *)v4 + 4) += 2;
  v6 = *((_DWORD *)a2 + 2);
LABEL_7:
  switch(v6)
  {
    case 0u:
      v7 = *a1;
      v8 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v8) > 5)
      {
        *(_WORD *)(v8 + 4) = 8250;
        *(_DWORD *)v8 = 1702129518;
        v12 = *((_QWORD *)v7 + 4) + 6;
        goto LABEL_20;
      }
      llvm::raw_ostream::write(v7, "note: ", 6uLL);
      break;
    case 1u:
      v7 = *a1;
      v11 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v11) > 8)
      {
        *(_BYTE *)(v11 + 8) = 32;
        *(_QWORD *)v11 = *(_QWORD *)"warning: ";
        v12 = *((_QWORD *)v7 + 4) + 9;
        goto LABEL_20;
      }
      llvm::raw_ostream::write(v7, "warning: ", 9uLL);
      break;
    case 2u:
      v7 = *a1;
      v9 = (_DWORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v9 > 6uLL)
      {
        *(_DWORD *)((char *)v9 + 3) = 540701295;
        *v9 = 1869771365;
        v12 = *((_QWORD *)v7 + 4) + 7;
        goto LABEL_20;
      }
      llvm::raw_ostream::write(v7, "error: ", 7uLL);
      break;
    case 3u:
      v7 = *a1;
      v10 = (_QWORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v10 > 7uLL)
      {
        *v10 = 0x203A6B72616D6572;
        v12 = *((_QWORD *)v7 + 4) + 8;
LABEL_20:
        *((_QWORD *)v7 + 4) = v12;
      }
      else
      {
        llvm::raw_ostream::write(v7, "remark: ", 8uLL);
      }
      break;
    default:
      break;
  }
LABEL_21:
  v13 = *a1;
  v14 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v14)
  {
    v15 = (mlir::DiagnosticArgument *)a2[2];
    v16 = 24 * v14;
    do
    {
      mlir::DiagnosticArgument::print(v15, v13);
      v15 = (mlir::DiagnosticArgument *)((char *)v15 + 24);
      v16 -= 24;
    }
    while (v16);
  }
  v17 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v17 + 1;
    *v17 = 10;
  }
}

_QWORD *std::vector<std::unique_ptr<mlir::Diagnostic>>::__push_back_slow_path<std::unique_ptr<mlir::Diagnostic>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_22;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_30;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v19 = &v15[-v18];
  v10 -= v18;
  v20 = &v9[8 * v3 - 16];
  v21 = v15 - 16;
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v21 - 1);
    v23 = *(_OWORD *)v21;
    *((_OWORD *)v21 - 1) = 0uLL;
    *(_OWORD *)v21 = 0uLL;
    *((_OWORD *)v20 - 1) = v24;
    *(_OWORD *)v20 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v15 = (char *)*a1;
  v26 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  for (a1[2] = v11;
        v26 != v15;
  if (v15)
LABEL_22:
    operator delete(v15);
  return v13;
}

void std::default_delete<mlir::detail::DiagnosticEngineImpl>::operator()[abi:nn180100](int a1, std::recursive_mutex *this)
{
  std::recursive_mutex *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  llvm **v7;
  llvm *v8;
  void *v9;

  if (this)
  {
    v3 = *(std::recursive_mutex **)&this[1].__m_.__opaque[40];
    v4 = *(unsigned int *)&this[1].__m_.__opaque[48];
    if ((_DWORD)v4)
    {
      v5 = 40 * v4;
      do
      {
        v6 = *(_QWORD *)((char *)v3 + v5 - 8);
        if (v6 >= 8)
        {
          v7 = (llvm **)((char *)v3 + v5 - 32);
          if ((v6 & 4) != 0)
          {
            v8 = (llvm *)((char *)v3 + v5 - 32);
            if ((v6 & 2) == 0)
              v8 = *v7;
            (*(void (**)(llvm *))((v6 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
          }
          if ((v6 & 2) == 0)
            llvm::deallocate_buffer(*v7, *(void **)((char *)v3 + v5 - 24));
        }
        v5 -= 40;
      }
      while (v5);
      v3 = *(std::recursive_mutex **)&this[1].__m_.__opaque[40];
    }
    if (v3 != &this[2])
      free(v3);
    if ((this[1].__m_.__opaque[0] & 1) == 0)
      llvm::deallocate_buffer(*(llvm **)&this[1].__m_.__opaque[8], (void *)(16 * *(unsigned int *)&this[1].__m_.__opaque[16]));
    std::recursive_mutex::~recursive_mutex(this);
    operator delete(v9);
  }
}

uint64_t llvm::MapVector<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>,llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,llvm::SmallVector<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,2u>>::try_emplace<llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v14;
  uint64_t *inserted;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  unsigned int v22;
  uint64_t *v23;
  int v24;
  BOOL v25;
  int v26;
  __int128 *v27;
  _QWORD *v28;
  int v29;

  v6 = (_QWORD *)*a2;
  v28 = (_QWORD *)*a2;
  v29 = 0;
  v7 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v8 = 2;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 16);
    if (!v8)
    {
      v14 = 0;
      goto LABEL_8;
    }
    v7 = *(_QWORD *)(a1 + 8);
  }
  v9 = v8 - 1;
  v10 = (v8 - 1) & (37 * (_DWORD)v6);
  v11 = (uint64_t *)(v7 + 16 * v10);
  v12 = (_QWORD *)*v11;
  if (v6 == (_QWORD *)*v11)
    return *(_QWORD *)(a1 + 40) + 40 * *(unsigned int *)(v7 + 16 * v10 + 8);
  v23 = 0;
  v24 = 1;
  while (v12 != (_QWORD *)-1)
  {
    if (v23)
      v25 = 0;
    else
      v25 = v12 == (_QWORD *)-2;
    if (v25)
      v23 = v11;
    v26 = v10 + v24++;
    v10 = v26 & v9;
    v11 = (uint64_t *)(v7 + 16 * v10);
    v12 = (_QWORD *)*v11;
    if (v6 == (_QWORD *)*v11)
      return *(_QWORD *)(a1 + 40) + 40 * *(unsigned int *)(v7 + 16 * v10 + 8);
  }
  if (v23)
    v14 = v23;
  else
    v14 = v11;
LABEL_8:
  inserted = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,unsigned long long,unsigned int,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>::InsertIntoBucket<unsigned long long,unsigned int>(a1, v14, (uint64_t *)&v28, &v29);
  v16 = (_QWORD *)(a1 + 40);
  v17 = *(_DWORD *)(a1 + 48);
  *((_DWORD *)inserted + 2) = v17;
  v27 = (__int128 *)a3;
  v28 = a2;
  if (v17 >= *(_DWORD *)(a1 + 52))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>&&>>(a1 + 40, (uint64_t)&std::piecewise_construct, &v28, &v27);
    v22 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v18 = (_QWORD *)(*v16 + 40 * v17);
    *v18 = *a2;
    v18[4] = 0;
    v19 = *(_QWORD *)(a3 + 24);
    v18[4] = v19;
    if (*(_QWORD *)(a3 + 24) >= 8uLL)
    {
      v20 = (__int128 *)(v18 + 1);
      if ((v19 & 2) != 0 && (v19 & 4) != 0)
      {
        (*(void (**)(__int128 *, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 8))(v20, a3);
      }
      else
      {
        v21 = *(_OWORD *)a3;
        v18[3] = *(_QWORD *)(a3 + 16);
        *v20 = v21;
      }
      *(_QWORD *)(a3 + 24) = 0;
    }
    v22 = *(_DWORD *)(a1 + 48) + 1;
    *(_DWORD *)(a1 + 48) = v22;
  }
  return *v16 + 40 * v22 - 40;
}

uint64_t *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,unsigned long long,unsigned int,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>::InsertIntoBucket<unsigned long long,unsigned int>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v10 = 2;
  else
    v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>::grow((unsigned int *)a1, v10);
  v13 = a1 + 8;
  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v14 = 2;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v13 = *(_QWORD *)(a1 + 8);
  }
  v11 = *(_DWORD *)a1 & 1;
  v15 = v14 - 1;
  v16 = (37 * *a3) & (v14 - 1);
  a2 = (uint64_t *)(v13 + 16 * v16);
  v17 = *a2;
  if (*a3 != *a2)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -1)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -2;
      if (v20)
        v18 = a2;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      a2 = (uint64_t *)(v13 + 16 * (v21 & v15));
      v17 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v18)
      a2 = v18;
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -1)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  *((_DWORD *)a2 + 2) = *a4;
  return a2;
}

unint64_t llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>::grow(unsigned int *a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  llvm *v7;
  uint64_t v8;
  llvm *v9;
  unint64_t result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *buffer;
  unsigned int v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  llvm *v29;
  int *v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t *v43;
  int *v44;
  int v45;
  int v46;
  unsigned int v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD v56[3];

  v56[2] = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *a1;
  if ((*a1 & 1) == 0)
  {
    v7 = (llvm *)*((_QWORD *)a1 + 1);
    v8 = a1[4];
    if (a2 > 2)
    {
      v20 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *((_QWORD *)a1 + 1) = buffer;
      *((_QWORD *)a1 + 2) = v20;
      v22 = *a1;
      v9 = (llvm *)((char *)v7 + 16 * v8);
      *(_QWORD *)a1 = *a1 & 1;
      if ((v22 & 1) == 0)
      {
        v23 = &buffer[2 * v20];
        v24 = 16 * v20 - 16;
        if (v24 < 0x10)
        {
          v26 = buffer;
          goto LABEL_26;
        }
LABEL_20:
        v25 = (v24 >> 4) + 1;
        v26 = &buffer[2 * (v25 & 0x1FFFFFFFFFFFFFFELL)];
        v27 = buffer + 2;
        v28 = v25 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v27 - 2) = -1;
          *v27 = -1;
          v27 += 4;
          v28 -= 2;
        }
        while (v28);
        if (v25 == (v25 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_27:
          if ((_DWORD)v8)
          {
            v29 = v7;
            do
            {
              v36 = *(_QWORD *)v29;
              if (*(_QWORD *)v29 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                if ((*(_BYTE *)a1 & 1) != 0)
                {
                  v31 = 2;
                  v30 = (int *)(a1 + 2);
                }
                else
                {
                  v30 = (int *)*((_QWORD *)a1 + 1);
                  v31 = a1[4];
                }
                v32 = v31 - 1;
                v33 = (v31 - 1) & (37 * v36);
                v34 = (uint64_t *)&v30[4 * v33];
                v35 = *v34;
                if (v36 != *v34)
                {
                  v37 = 0;
                  v38 = 1;
                  while (v35 != -1)
                  {
                    if (v37)
                      v39 = 0;
                    else
                      v39 = v35 == -2;
                    if (v39)
                      v37 = v34;
                    v40 = v33 + v38++;
                    v33 = v40 & v32;
                    v34 = (uint64_t *)&v30[4 * (v40 & v32)];
                    v35 = *v34;
                    if (v36 == *v34)
                      goto LABEL_31;
                  }
                  if (v37)
                    v34 = v37;
                }
LABEL_31:
                *v34 = v36;
                *((_DWORD *)v34 + 2) = *((_DWORD *)v29 + 2);
                *a1 += 2;
              }
              v29 = (llvm *)((char *)v29 + 16);
            }
            while (v29 != v9);
          }
          llvm::deallocate_buffer(v7, (void *)(16 * v8));
        }
        do
        {
LABEL_26:
          *v26 = -1;
          v26 += 2;
        }
        while (v26 != v23);
        goto LABEL_27;
      }
    }
    else
    {
      v9 = (llvm *)((char *)v7 + 16 * v8);
      *(_QWORD *)a1 = 1;
    }
    v23 = a1 + 10;
    buffer = a1 + 2;
    v24 = 16;
    goto LABEL_20;
  }
  result = *((_QWORD *)a1 + 1);
  v11 = (unint64_t *)&v54;
  if (result <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v54 = *((_QWORD *)a1 + 1);
    v55 = a1[4];
    v11 = v56;
    v12 = *((_QWORD *)a1 + 3);
    if (v12 > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_10:
      if (a2 < 3)
        goto LABEL_11;
      goto LABEL_51;
    }
  }
  else
  {
    v12 = *((_QWORD *)a1 + 3);
    if (v12 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_10;
  }
  *v11 = v12;
  *((_DWORD *)v11 + 2) = a1[8];
  v11 += 2;
  if (a2 < 3)
  {
LABEL_11:
    *(_QWORD *)a1 = v6 & 1;
    if ((v6 & 1) == 0)
      goto LABEL_12;
LABEL_52:
    v14 = a1 + 10;
    result = (unint64_t)(a1 + 2);
    v15 = 16;
    goto LABEL_14;
  }
LABEL_51:
  *a1 = v6 & 0xFFFFFFFE;
  v41 = a2;
  result = (unint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *((_QWORD *)a1 + 1) = result;
  *((_QWORD *)a1 + 2) = v41;
  v42 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  if ((v42 & 1) != 0)
    goto LABEL_52;
LABEL_12:
  v13 = a1[4];
  if (!(_DWORD)v13)
    goto LABEL_55;
  v14 = (_QWORD *)(result + 16 * v13);
  v15 = (unint64_t)v14 - result - 16;
  if (v15 < 0x10)
  {
    v17 = (_QWORD *)result;
    do
    {
LABEL_54:
      *v17 = -1;
      v17 += 2;
    }
    while (v17 != v14);
    goto LABEL_55;
  }
LABEL_14:
  v16 = (v15 >> 4) + 1;
  v17 = (_QWORD *)(result + 16 * (v16 & 0x1FFFFFFFFFFFFFFELL));
  v18 = (_QWORD *)(result + 16);
  v19 = v16 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v18 - 2) = -1;
    *v18 = -1;
    v18 += 4;
    v19 -= 2;
  }
  while (v19);
  if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_54;
LABEL_55:
  if (&v54 != (uint64_t *)v11)
  {
    v43 = (unint64_t *)&v54;
    do
    {
      v50 = *v43;
      if (*v43 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if ((*(_BYTE *)a1 & 1) != 0)
        {
          v45 = 2;
          v44 = (int *)(a1 + 2);
        }
        else
        {
          v44 = (int *)*((_QWORD *)a1 + 1);
          v45 = a1[4];
        }
        v46 = v45 - 1;
        v47 = (v45 - 1) & (37 * v50);
        v48 = (unint64_t *)&v44[4 * v47];
        v49 = *v48;
        if (v50 != *v48)
        {
          v51 = 0;
          result = 1;
          while (v49 != -1)
          {
            if (v51)
              v52 = 0;
            else
              v52 = v49 == -2;
            if (v52)
              v51 = v48;
            v53 = v47 + result;
            result = (result + 1);
            v47 = v53 & v46;
            v48 = (unint64_t *)&v44[4 * (v53 & v46)];
            v49 = *v48;
            if (v50 == *v48)
              goto LABEL_59;
          }
          if (v51)
            v48 = v51;
        }
LABEL_59:
        *v48 = v50;
        *((_DWORD *)v48 + 2) = *((_DWORD *)v43 + 2);
        *a1 += 2;
      }
      v43 += 2;
    }
    while (v43 != v11);
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>&&>>(uint64_t a1, uint64_t a2, _QWORD **a3, __int128 **a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  int v14;
  unsigned int v15;
  unint64_t v17;

  v17 = 0;
  v7 = a1 + 16;
  v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 40, &v17);
  v9 = &v8[40 * *(unsigned int *)(a1 + 8)];
  v10 = *a4;
  *(_QWORD *)v9 = **a3;
  *((_QWORD *)v9 + 4) = 0;
  v11 = *((_QWORD *)v10 + 3);
  *((_QWORD *)v9 + 4) = v11;
  if (*((_QWORD *)v10 + 3) >= 8uLL)
  {
    v12 = v9 + 8;
    if ((v11 & 2) != 0 && (v11 & 4) != 0)
    {
      (*(void (**)(_OWORD *, __int128 *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(v12, v10);
    }
    else
    {
      v13 = *v10;
      *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 2);
      *v12 = v13;
    }
    *((_QWORD *)v10 + 3) = 0;
  }
  llvm::SmallVectorTemplateBase<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,false>::moveElementsForGrow(a1, (uint64_t)v8);
  v14 = v17;
  if (*(_QWORD *)a1 != v7)
    free(*(void **)a1);
  *(_QWORD *)a1 = v8;
  v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  return (uint64_t)&v8[40 * v15 - 40];
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,false>::moveElementsForGrow(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  llvm **v14;
  llvm *v15;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = a2 + 8;
    v5 = 40 * v2;
    v6 = (uint64_t *)(*(_QWORD *)result + 32);
    do
    {
      *(_QWORD *)(v4 - 8) = *(v6 - 4);
      *(_QWORD *)(v4 + 24) = 0;
      v8 = *v6;
      *(_QWORD *)(v4 + 24) = *v6;
      if ((unint64_t)*v6 >= 8)
      {
        v9 = (__int128 *)(v6 - 3);
        if ((v8 & 2) != 0 && (v8 & 4) != 0)
        {
          result = (*(uint64_t (**)(uint64_t, __int128 *))((v8 & 0xFFFFFFFFFFFFFFF8) + 8))(v4, v9);
        }
        else
        {
          v7 = *v9;
          *(_QWORD *)(v4 + 16) = *(v6 - 1);
          *(_OWORD *)v4 = v7;
        }
        *v6 = 0;
      }
      v4 += 40;
      v6 += 5;
      v5 -= 40;
    }
    while (v5);
    v10 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)v3;
      v12 = 40 * v10;
      do
      {
        v13 = *(_QWORD *)(v11 + v12 - 8);
        if (v13 >= 8)
        {
          v14 = (llvm **)(v11 + v12 - 32);
          if ((v13 & 4) != 0)
          {
            v15 = (llvm *)(v11 + v12 - 32);
            if ((v13 & 2) == 0)
              v15 = *v14;
            result = (*(uint64_t (**)(llvm *))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))(v15);
          }
          if ((v13 & 2) == 0)
            llvm::deallocate_buffer(*v14, *(void **)(v11 + v12 - 24));
        }
        v12 -= 40;
      }
      while (v12);
    }
  }
  return result;
}

_QWORD *llvm::MapVector<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>,llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,llvm::SmallVector<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,2u>>::erase(int *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  llvm **v17;
  llvm *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  int v29;

  v4 = (uint64_t)(a1 + 2);
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 2;
    v6 = a1 + 2;
  }
  else
  {
    v5 = a1[4];
    if (!v5)
      goto LABEL_7;
    v6 = (int *)*((_QWORD *)a1 + 1);
  }
  v7 = v5 - 1;
  LODWORD(v8) = (37 * *a2) & (v5 - 1);
  v9 = (uint64_t *)&v6[4 * v8];
  v10 = *v9;
  if (*a2 == *v9)
  {
LABEL_6:
    *v9 = -2;
    v11 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v11;
  }
  else
  {
    v28 = 1;
    while (v10 != -1)
    {
      v29 = v8 + v28++;
      v8 = v29 & v7;
      v10 = *(_QWORD *)&v6[4 * v8];
      if (*a2 == v10)
      {
        v9 = (uint64_t *)&v6[4 * v8];
        goto LABEL_6;
      }
    }
  }
LABEL_7:
  v12 = (uint64_t *)(a1 + 10);
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,0>((uint64_t)(a2 + 5), *((_QWORD *)a1 + 5) + 40 * a1[12], (uint64_t)a2);
  v13 = a1[12] - 1;
  a1[12] = v13;
  v14 = *v12;
  v15 = *v12 + 40 * v13;
  v16 = *(_QWORD *)(v15 + 32);
  if (v16 >= 8)
  {
    v17 = (llvm **)(v15 + 8);
    if ((v16 & 4) != 0)
    {
      v18 = (llvm *)(v15 + 8);
      if ((v16 & 2) == 0)
        v18 = *v17;
      (*(void (**)(llvm *))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v18);
    }
    if ((v16 & 2) == 0)
      llvm::deallocate_buffer(*v17, *(void **)(v14 + 40 * v13 + 16));
  }
  v19 = *((_QWORD *)a1 + 5);
  if ((_QWORD *)(v19 + 40 * a1[12]) == a2)
    return a2;
  v20 = *a1;
  if (*a1 > 1)
  {
    v22 = (uint64_t)(a1 + 10);
    if ((v20 & 1) != 0
      || (v4 = *((_QWORD *)a1 + 1), v23 = a1[4], v22 = v4 + 16 * v23, v21 = v4, (_DWORD)v23))
    {
      v21 = v4;
      while (*(_QWORD *)v21 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v21 += 16;
        if (v21 == v22)
        {
          v21 = v22;
          break;
        }
      }
      if ((*a1 & 1) != 0)
        goto LABEL_26;
    }
  }
  else
  {
    if (v20)
    {
      v21 = (uint64_t)(a1 + 10);
      v22 = v4 + 32;
      goto LABEL_26;
    }
    v21 = *((_QWORD *)a1 + 1) + 16 * a1[4];
    v22 = v21;
  }
  v12 = (uint64_t *)(*((_QWORD *)a1 + 1) + 16 * a1[4]);
LABEL_26:
  if ((uint64_t *)v21 != v12)
  {
    v24 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - v19) >> 3);
    do
    {
      v25 = *(unsigned int *)(v21 + 8);
      if (v24 < v25)
        *(_DWORD *)(v21 + 8) = v25 - 1;
      v26 = v21 + 16;
      v21 = v22;
      if (v26 != v22)
      {
        v21 = v26;
        while (*(_QWORD *)v21 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v21 += 16;
          if (v21 == v22)
          {
            v21 = v22;
            break;
          }
        }
      }
    }
    while ((uint64_t *)v21 != v12);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  llvm **v9;
  unint64_t v10;
  llvm *v11;
  uint64_t v12;

  if (a1 == a2)
    return a1;
  v5 = a2;
  v6 = 0;
  do
  {
    v8 = a3 + v6;
    *(_QWORD *)(a3 + v6) = *(_QWORD *)(a1 + v6);
    v9 = (llvm **)(a3 + v6 + 8);
    if (a1 != a3)
    {
      v10 = *(_QWORD *)(v8 + 32);
      if (v10 >= 8)
      {
        if ((v10 & 4) != 0)
        {
          v11 = (llvm *)(a3 + v6 + 8);
          if ((v10 & 2) == 0)
            v11 = *v9;
          (*(void (**)(llvm *))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))(v11);
        }
        if ((v10 & 2) == 0)
          llvm::deallocate_buffer(*v9, *(void **)(a3 + v6 + 16));
      }
      *(_QWORD *)(v8 + 32) = 0;
      v12 = *(_QWORD *)(a1 + v6 + 32);
      *(_QWORD *)(v8 + 32) = v12;
      if (*(_QWORD *)(a1 + v6 + 32) >= 8uLL)
      {
        if ((v12 & 2) != 0 && (v12 & 4) != 0)
        {
          (*(void (**)(uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(a3 + v6 + 8, a1 + v6 + 8);
        }
        else
        {
          v7 = *(_OWORD *)(a1 + v6 + 8);
          *(_QWORD *)(a3 + v6 + 24) = *(_QWORD *)(a1 + v6 + 24);
          *(_OWORD *)v9 = v7;
        }
        *(_QWORD *)(a1 + v6 + 32) = 0;
      }
    }
    v6 += 40;
  }
  while (a1 + v6 != v5);
  return v5;
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIN4mlir13LogicalResultEJRNS2_10DiagnosticEEE8CallImplIZNS2_16DiagnosticEngine15registerHandlerIZNS2_26SourceMgrDiagnosticHandlerC1ERNS_9SourceMgrEPNS2_11MLIRContextERNS_11raw_ostreamEONS_15unique_functionIFbNS2_8LocationEEEEE3__0vEENSt3__19enable_ifIXsr3std7is_sameIT0_vEE5valueEyE4typeEOT_EUlS5_E_EES3_PvS5_(mlir::SourceMgrDiagnosticHandler **a1, mlir::Diagnostic *a2)
{
  mlir::SourceMgrDiagnosticHandler::emitDiagnostic(*a1, a2);
  return 1;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Location)>::callback_fn<mlir::FileLineColLoc mlir::LocationAttr::findInstanceOf<mlir::FileLineColLoc>(void)::{lambda(mlir::FileLineColLoc)#1}>(_QWORD **a1, uint64_t a2)
{
  uint64_t result;

  result = 1;
  if (a2)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
    {
      result = 0;
      **a1 = a2;
    }
  }
  return result;
}

uint64_t mlir::Dialect::Dialect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)result = off_1E0E4EC00;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = a4;
  *(_WORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void mlir::Dialect::~Dialect(llvm **this)
{
  *this = (llvm *)off_1E0E4EC00;
  llvm::deallocate_buffer(this[9], (void *)(16 * *((unsigned int *)this + 22)));
}

{
  *this = (llvm *)off_1E0E4EC00;
  llvm::deallocate_buffer(this[9], (void *)(16 * *((unsigned int *)this + 22)));
}

{
  *this = (llvm *)off_1E0E4EC00;
  llvm::deallocate_buffer(this[9], (void *)(16 * *((unsigned int *)this + 22)));
}

uint64_t sub_180418A88()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_180418B3C()
{
  uint64_t v0;

  return v0;
}

void sub_180418BF0()
{
  void *v0;

  operator delete(v0);
}

uint64_t mlir::Dialect::verifyRegionArgAttribute()
{
  return 1;
}

uint64_t mlir::Dialect::verifyRegionResultAttribute()
{
  return 1;
}

uint64_t mlir::Dialect::parseAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void ***v5;
  char *v6;
  char *v7;
  __int128 v8;
  const void **v9;
  const char *v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  char v28[32];
  __int16 v29;
  const void **v30;
  const char *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  unsigned int v38;
  _BYTE v39[96];
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD **v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v29 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 24))(&v34, a2, v4, v28);
  if (v34)
  {
    LODWORD(v30) = 3;
    v31 = "dialect '";
    v32 = 9;
    v5 = &v30;
    v6 = (char *)v36;
    if (v37 >= v38)
    {
      v24 = v37 + 1;
      if (v36 <= &v30 && (char *)v36 + 24 * v37 > (char *)&v30)
      {
        v26 = (char *)&v30 - (_BYTE *)v36;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v24, 24);
        v6 = (char *)v36;
        v5 = (const void ***)((char *)v36 + v26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v24, 24);
        v5 = &v30;
        v6 = (char *)v36;
      }
    }
    v7 = &v6[24 * v37];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = v5[2];
    *(_OWORD *)v7 = v8;
    ++v37;
    if (v34)
    {
      v9 = *(const void ***)(a1 + 8);
      v10 = *(const char **)(a1 + 16);
      v33 = 261;
      v30 = v9;
      v31 = v10;
      mlir::Diagnostic::operator<<((uint64_t)&v35, &v30);
      if (v34)
      {
        LODWORD(v30) = 3;
        v31 = "' provides no attribute parsing hook";
        v32 = 36;
        v11 = &v30;
        v12 = (char *)v36;
        if (v37 >= v38)
        {
          v25 = v37 + 1;
          if (v36 <= &v30 && (char *)v36 + 24 * v37 > (char *)&v30)
          {
            v27 = (char *)&v30 - (_BYTE *)v36;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v25, 24);
            v12 = (char *)v36;
            v11 = (const void ***)((char *)v36 + v27);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v25, 24);
            v11 = &v30;
            v12 = (char *)v36;
          }
        }
        v13 = &v12[24 * v37];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        ++v37;
        if (v34)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
      }
    }
  }
  if (v44)
  {
    v15 = (_QWORD **)__p;
    if (__p)
    {
      v16 = v43;
      v17 = __p;
      if (v43 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v43 = v15;
      operator delete(v17);
    }
    v18 = v40;
    if (v40)
    {
      v19 = v41;
      v20 = v40;
      if (v41 != v40)
      {
        do
        {
          v22 = (void *)*--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            operator delete[](v21);
        }
        while (v19 != v18);
        v20 = v40;
      }
      v41 = v18;
      operator delete(v20);
    }
    if (v36 != v39)
      free(v36);
  }
  return 0;
}

uint64_t mlir::Dialect::parseType(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const void ***v12;
  char *v13;
  char *v14;
  __int128 v15;
  const void **v16;
  const char *v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  char v34[32];
  __int16 v35;
  const void **v36;
  const char *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE v45[96];
  void *v46;
  _QWORD *v47;
  void *__p;
  _QWORD **v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 41))
  {
    v4 = *(mlir::StringAttr **)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    LOWORD(v43) = 261;
    v40 = v5;
    v41 = v6;
    v7 = mlir::StringAttr::get(v4, (mlir::MLIRContext *)&v40);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 624))(a2);
    return mlir::OpaqueType::get(v7, v8, v9);
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v35 = 257;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 24))(&v40, a2, v11, v34);
    if (v40)
    {
      LODWORD(v36) = 3;
      v37 = "dialect '";
      v38 = 9;
      v12 = &v36;
      v13 = (char *)v42;
      if (v43 >= v44)
      {
        v30 = v43 + 1;
        if (v42 <= &v36 && (char *)v42 + 24 * v43 > (char *)&v36)
        {
          v32 = (char *)&v36 - (_BYTE *)v42;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v30, 24);
          v13 = (char *)v42;
          v12 = (const void ***)((char *)v42 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v30, 24);
          v12 = &v36;
          v13 = (char *)v42;
        }
      }
      v14 = &v13[24 * v43];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = v12[2];
      *(_OWORD *)v14 = v15;
      ++v43;
      if (v40)
      {
        v16 = *(const void ***)(a1 + 8);
        v17 = *(const char **)(a1 + 16);
        v39 = 261;
        v36 = v16;
        v37 = v17;
        mlir::Diagnostic::operator<<((uint64_t)&v41, &v36);
        if (v40)
        {
          LODWORD(v36) = 3;
          v37 = "' provides no type parsing hook";
          v38 = 31;
          v18 = &v36;
          v19 = (char *)v42;
          if (v43 >= v44)
          {
            v31 = v43 + 1;
            if (v42 <= &v36 && (char *)v42 + 24 * v43 > (char *)&v36)
            {
              v33 = (char *)&v36 - (_BYTE *)v42;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v31, 24);
              v19 = (char *)v42;
              v18 = (const void ***)((char *)v42 + v33);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v31, 24);
              v18 = &v36;
              v19 = (char *)v42;
            }
          }
          v20 = &v19[24 * v43];
          v21 = *(_OWORD *)v18;
          *((_QWORD *)v20 + 2) = v18[2];
          *(_OWORD *)v20 = v21;
          ++v43;
          if (v40)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
        }
      }
    }
    if (v50)
    {
      v22 = (_QWORD **)__p;
      if (__p)
      {
        v23 = v49;
        v24 = __p;
        if (v49 != __p)
        {
          do
            v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          v24 = __p;
        }
        v49 = v22;
        operator delete(v24);
      }
      v25 = v46;
      if (v46)
      {
        v26 = v47;
        v27 = v46;
        if (v47 != v46)
        {
          do
          {
            v29 = (void *)*--v26;
            v28 = v29;
            *v26 = 0;
            if (v29)
              operator delete[](v28);
          }
          while (v26 != v25);
          v27 = v46;
        }
        v47 = v25;
        operator delete(v27);
      }
      if (v42 != v45)
        free(v42);
    }
    return 0;
  }
}

void mlir::Dialect::getParseOperationHook(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::Dialect::getOperationPrinter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t mlir::Dialect::isValidNamespace(char *a1, uint64_t a2)
{
  uint64_t v4;
  void *v6[2];

  llvm::Regex::Regex((uint64_t)v6, "^[a-zA-Z_][a-zA-Z_0-9\\$]*$", 26, 0);
  v4 = llvm::Regex::match((uint64_t)v6, a1, a2, 0, 0);
  llvm::Regex::~Regex(v6);
  return v4;
}

uint64_t *mlir::Dialect::addInterface(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20[2];
  int64x2_t *v21;

  v4 = *(_QWORD *)(*a2 + 16);
  v20[0] = *(_QWORD *)(a1 + 24);
  v20[1] = v4;
  v21 = 0;
  result = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::LookupBucketFor<std::pair<mlir::TypeID,mlir::TypeID>>((uint64_t *)(a1 + 72), v20, &v21);
  if ((_DWORD)result)
  {
    *v21 = vdupq_n_s64(0xFFFFFFFFFFFFE000);
    *(int32x2_t *)(a1 + 80) = vadd_s32(*(int32x2_t *)(a1 + 80), (int32x2_t)0x1FFFFFFFFLL);
  }
  v8 = *(_QWORD *)(a1 + 48);
  v7 = a1 + 48;
  v6 = v8;
  v9 = *(_QWORD *)(*a2 + 16);
  v20[0] = v9;
  v10 = *(_DWORD *)(v7 + 16);
  if (!v10)
  {
    v15 = 0;
    return llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>,mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::InsertIntoBucket<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>(v7, v15, v20, a2);
  }
  v11 = v10 - 1;
  v12 = ((v9 >> 4) ^ (v9 >> 9)) & v11;
  v13 = (uint64_t *)(v6 + 16 * v12);
  v14 = *v13;
  if (v9 != *v13)
  {
    v16 = 0;
    v17 = 1;
    while (v14 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v14 == -8192;
      if (v18)
        v16 = v13;
      v19 = v12 + v17++;
      v12 = v19 & v11;
      v13 = (uint64_t *)(v6 + 16 * v12);
      v14 = *v13;
      if (v9 == *v13)
        return result;
    }
    if (v16)
      v15 = v16;
    else
      v15 = v13;
    return llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>,mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::InsertIntoBucket<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>(v7, v15, v20, a2);
  }
  return result;
}

uint64_t mlir::DialectInterface::getContext(mlir::DialectInterface *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32);
}

uint64_t mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase(uint64_t a1, mlir::MLIRContext *this, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unsigned int v42;
  char **v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;

  *(_QWORD *)a1 = off_1E0E4EAE0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v43 = (char **)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  mlir::MLIRContext::getLoadedDialects(this, (uint64_t)&v46);
  v6 = v46;
  v7 = v47;
  if (v46 != v47)
  {
    v8 = (a3 >> 4) ^ (a3 >> 9);
    v42 = v8;
    while (1)
    {
      v10 = *v6;
      v45 = 0;
      v11 = *(_QWORD *)(v10 + 48);
      v12 = *(unsigned int *)(v10 + 64);
      if (!(_DWORD)v12)
        goto LABEL_12;
      LODWORD(v13) = (v12 - 1) & v8;
      v14 = (uint64_t *)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 != a3)
        break;
LABEL_13:
      if (v14 == (uint64_t *)(v11 + 16 * v12))
        goto LABEL_5;
      v45 = v14[1];
      if (!v45)
        goto LABEL_5;
      v48 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::DialectInterface const*>(v5, (uint64_t)&v45, &v48) & 1) == 0)
      {
        v18 = llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::InsertIntoBucketImpl<mlir::DialectInterface const*>((uint64_t)v5, (uint64_t)&v45, (uint64_t)&v45, v48);
        *v18 = v45;
      }
      v20 = *(char **)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v20 < v19)
      {
        *(_QWORD *)v20 = v45;
        v9 = (uint64_t)(v20 + 8);
        goto LABEL_4;
      }
      v21 = v7;
      v22 = v5;
      v23 = a3;
      v24 = *v43;
      v25 = v20 - *v43;
      v26 = v25 >> 3;
      v27 = (v25 >> 3) + 1;
      if (v27 >> 61)
        abort();
      v28 = v19 - (_QWORD)v24;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      v44 = v27;
      if (v27)
      {
        if (v27 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v29 = operator new(8 * v27);
        v30 = &v29[8 * v26];
        *v30 = v45;
        v9 = (uint64_t)(v30 + 1);
        if (v20 == v24)
        {
LABEL_29:
          a3 = v23;
          v5 = v22;
          v7 = v21;
          v8 = v42;
          *(_QWORD *)(a1 + 32) = v30;
          *(_QWORD *)(a1 + 40) = v9;
          *(_QWORD *)(a1 + 48) = &v29[8 * v44];
          if (!v20)
            goto LABEL_4;
LABEL_37:
          operator delete(v20);
          goto LABEL_4;
        }
      }
      else
      {
        v29 = 0;
        v30 = (_QWORD *)(8 * v26);
        *(_QWORD *)(8 * v26) = v45;
        v9 = 8 * v26 + 8;
        if (v20 == v24)
          goto LABEL_29;
      }
      v31 = v20 - 8 - v24;
      if (v31 < 0x58)
      {
        a3 = v23;
        v5 = v22;
        v7 = v21;
        v8 = v42;
        do
        {
LABEL_35:
          v40 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v30 = v40;
        }
        while (v20 != v24);
        goto LABEL_36;
      }
      v32 = v20 - &v29[v25];
      a3 = v23;
      v5 = v22;
      v7 = v21;
      v8 = v42;
      if (v32 < 0x20)
        goto LABEL_35;
      v33 = (v31 >> 3) + 1;
      v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
      v35 = &v20[-v34];
      v30 = (_QWORD *)((char *)v30 - v34);
      v36 = &v29[8 * v26 - 16];
      v37 = (__int128 *)(v20 - 16);
      v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *v36 = v39;
        v36 -= 2;
        v37 -= 2;
        v38 -= 4;
      }
      while (v38);
      v20 = v35;
      if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_35;
LABEL_36:
      v20 = *v43;
      *(_QWORD *)(a1 + 32) = v30;
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = &v29[8 * v44];
      if (v20)
        goto LABEL_37;
LABEL_4:
      *(_QWORD *)(a1 + 40) = v9;
LABEL_5:
      if (++v6 == v7)
      {
        v6 = v46;
        goto LABEL_39;
      }
    }
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v15 = *(_QWORD *)(v11 + 16 * v13);
      if (v15 == a3)
      {
        v14 = (uint64_t *)(v11 + 16 * v13);
        goto LABEL_13;
      }
    }
LABEL_12:
    v14 = (uint64_t *)(v11 + 16 * v12);
    goto LABEL_13;
  }
LABEL_39:
  if (v6)
  {
    v47 = v6;
    operator delete(v6);
  }
  return a1;
}

void mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase(mlir::detail::DialectInterfaceCollectionBase *this)
{
  void *v2;

  *(_QWORD *)this = off_1E0E4EAE0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 1), (void *)(8 * *((unsigned int *)this + 6)));
}

{
  void *v2;

  *(_QWORD *)this = off_1E0E4EAE0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 1), (void *)(8 * *((unsigned int *)this + 6)));
}

{
  void *v2;

  *(_QWORD *)this = off_1E0E4EAE0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 1), (void *)(8 * *((unsigned int *)this + 6)));
}

uint64_t sub_180419768()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1804197B8()
{
  uint64_t v0;

  return v0;
}

void sub_180419808()
{
  void *v0;

  operator delete(v0);
}

uint64_t mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(mlir::detail::DialectInterfaceCollectionBase *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t Values;
  uint64_t v6;

  v3 = *((_QWORD *)a2 + 6);
  if (*(_UNKNOWN **)(v3 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v6 = *(_QWORD *)(v3 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v6);
    v6 = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::Dialect *>((uint64_t *)this + 1, (unint64_t *)&Values, &v6))return 0;
  }
  else
  {
    Values = *(_QWORD *)(v3 + 24);
    v6 = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::Dialect *>((uint64_t *)this + 1, (unint64_t *)&Values, &v6))return 0;
  }
  if (v6 != *((_QWORD *)this + 1) + 8 * *((unsigned int *)this + 6))
    return *(_QWORD *)v6;
  return 0;
}

void mlir::DialectExtensionBase::~DialectExtensionBase(mlir::DialectExtensionBase *this)
{
  char *v2;

  *(_QWORD *)this = off_1E0E2BD48;
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 24)
    free(v2);
}

uint64_t mlir::Dialect::handleUseOfUndefinedPromisedInterface(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;
  uint64_t v13[4];
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  uint64_t v19[5];
  uint64_t v20[5];
  uint64_t v21[5];

  v21[0] = a2;
  v21[1] = a3;
  v20[0] = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::LookupBucketFor<std::pair<mlir::TypeID,mlir::TypeID>>(a1 + 9, v21, v20);
  if ((_DWORD)result)
  {
    v18 = 1283;
    v17[2] = a4;
    v17[3] = a5;
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    v9 = a1[1];
    v10 = a1[2];
    v14 = 261;
    v13[0] = v9;
    v13[1] = v10;
    llvm::operator+(v19, v13, (uint64_t)v20);
    v11 = "' but never implemented. This is generally an indication that the dialect extension implementing the interface"
          " was never registered.";
    v12 = 259;
    llvm::operator+(v20, (uint64_t *)&v11, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  return result;
}

int32x2_t mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t result;
  uint64_t v5[2];
  int64x2_t *v6;

  v5[0] = a2;
  v5[1] = a3;
  v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::LookupBucketFor<std::pair<mlir::TypeID,mlir::TypeID>>((uint64_t *)(a1 + 72), v5, &v6))
  {
    *v6 = vdupq_n_s64(0xFFFFFFFFFFFFE000);
    result = vadd_s32(*(int32x2_t *)(a1 + 80), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 80) = result;
  }
  return result;
}

mlir::DialectRegistry *mlir::DialectRegistry::DialectRegistry(mlir::DialectRegistry *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v5[0] = off_1E0E50818;
  v6 = v5;
  mlir::DialectRegistry::insert((uint64_t **)this, &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id, "builtin", 7uLL, v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return this;
}

uint64_t **(*mlir::DialectRegistry::getDialectAllocator(uint64_t a1, void *__src, size_t __len))(uint64_t a1, uint64_t a2)
{
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  uint64_t v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t *v23;
  int v24;
  size_t v25;
  const void *v26;
  size_t v27;
  int v28;
  _BOOL4 v29;
  void **__dst;
  size_t v32;
  unint64_t v33;

  if (__src)
  {
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v10 = __len | 7;
      v11 = v10 + 1;
      p_dst = (void **)operator new(v10 + 1);
      v32 = __len;
      v33 = v11 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = __len;
      p_dst = (void **)&__dst;
      if (!__len)
      {
LABEL_12:
        *((_BYTE *)p_dst + __len) = 0;
        v12 = *(_QWORD *)(a1 + 8);
        v7 = a1 + 8;
        v8 = v12;
        v9 = HIBYTE(v33);
        if (v12)
          goto LABEL_13;
LABEL_51:
        v15 = v7;
        goto LABEL_52;
      }
    }
    memmove(p_dst, __src, __len);
    goto LABEL_12;
  }
  __dst = 0;
  v32 = 0;
  v33 = 0;
  v7 = a1 + 8;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = 0;
  if (!v8)
    goto LABEL_51;
LABEL_13:
  if ((v9 & 0x80u) == 0)
    v13 = v9;
  else
    v13 = v32;
  if ((v9 & 0x80u) == 0)
    v14 = (void **)&__dst;
  else
    v14 = __dst;
  v15 = v7;
  do
  {
    v16 = *(char *)(v8 + 55);
    if (v16 >= 0)
      v17 = *(unsigned __int8 *)(v8 + 55);
    else
      v17 = *(_QWORD *)(v8 + 40);
    if (v16 >= 0)
      v18 = (const void *)(v8 + 32);
    else
      v18 = *(const void **)(v8 + 32);
    if (v13 >= v17)
      v19 = v17;
    else
      v19 = v13;
    v20 = memcmp(v18, v14, v19);
    v21 = v17 < v13;
    if (v20)
      v21 = v20 < 0;
    v22 = !v21;
    if (v21)
      v23 = (uint64_t *)(v8 + 8);
    else
      v23 = (uint64_t *)v8;
    if (v22)
      v15 = v8;
    v8 = *v23;
  }
  while (*v23);
  if (v15 == v7)
    goto LABEL_51;
  v24 = *(char *)(v15 + 55);
  if (v24 >= 0)
    v25 = *(unsigned __int8 *)(v15 + 55);
  else
    v25 = *(_QWORD *)(v15 + 40);
  if (v24 >= 0)
    v26 = (const void *)(v15 + 32);
  else
    v26 = *(const void **)(v15 + 32);
  if (v25 >= v13)
    v27 = v13;
  else
    v27 = v25;
  v28 = memcmp(v14, v26, v27);
  v29 = v13 < v25;
  if (v28)
    v29 = v28 < 0;
  if (v29)
    goto LABEL_51;
LABEL_52:
  if ((v9 & 0x80) != 0)
    operator delete(__dst);
  if (v15 == v7)
    return 0;
  else
    return llvm::function_ref<mlir::Dialect * ()(mlir::MLIRContext *)>::callback_fn<std::function<mlir::Dialect * ()(mlir::MLIRContext *)> const>;
}

void mlir::DialectRegistry::insert(uint64_t **a1, uint64_t *a2, void *__src, size_t __len, _QWORD *a5)
{
  __int128 *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  uint64_t **v20;
  char v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD v29[3];
  _QWORD *v30;
  void *__p[2];
  void *v32;
  size_t v33;
  _WORD v34[12];
  _WORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v15 = __len | 7;
    v16 = v15 + 1;
    v10 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&v26 + 1) = __len;
    v27 = v16 | 0x8000000000000000;
    *(_QWORD *)&v26 = v10;
LABEL_10:
    memmove(v10, __src, __len);
    *((_BYTE *)v10 + __len) = 0;
    v28 = a2;
    v11 = v29;
    v12 = (_QWORD *)a5[3];
    if (v12)
      goto LABEL_5;
LABEL_11:
    v30 = 0;
    *(_OWORD *)__p = v26;
    v17 = (void *)v27;
    v26 = 0uLL;
    v27 = 0;
    v32 = v17;
    v33 = (size_t)a2;
    v18 = v34;
    v35 = 0;
    goto LABEL_18;
  }
  HIBYTE(v27) = __len;
  v10 = &v26;
  if (__len)
    goto LABEL_10;
  LOBYTE(v26) = 0;
  v28 = a2;
  v11 = v29;
  v12 = (_QWORD *)a5[3];
  if (!v12)
    goto LABEL_11;
LABEL_5:
  if (v12 == a5)
  {
    v30 = v29;
    (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v29);
    v14 = (size_t)v28;
    v13 = v30;
  }
  else
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    v30 = v13;
    v14 = (size_t)a2;
  }
  *(_OWORD *)__p = v26;
  v19 = (void *)v27;
  v27 = 0;
  v26 = 0uLL;
  v32 = v19;
  v33 = v14;
  v18 = v34;
  if (v13)
  {
    if (v13 == v29)
    {
      v35 = v34;
      (*(void (**)(_QWORD *, _WORD *))(v29[0] + 24))(v29, v34);
    }
    else
    {
      v35 = v13;
      v30 = 0;
    }
  }
  else
  {
    v35 = 0;
  }
LABEL_18:
  v20 = std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>(a1, (const void **)__p, (uint64_t)__p);
  v22 = v21;
  if (v35 == v34)
  {
    v23 = 4;
  }
  else
  {
    if (!v35)
      goto LABEL_23;
    v23 = 5;
    v18 = v35;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v23))(v18);
LABEL_23:
  if (SHIBYTE(v32) < 0)
  {
    operator delete(__p[0]);
    v24 = v30;
    if (v30 != v29)
      goto LABEL_25;
LABEL_28:
    v25 = 4;
    goto LABEL_29;
  }
  v24 = v30;
  if (v30 == v29)
    goto LABEL_28;
LABEL_25:
  if (!v24)
    goto LABEL_30;
  v25 = 5;
  v11 = v24;
LABEL_29:
  (*(void (**)(_QWORD *))(*v11 + 8 * v25))(v11);
LABEL_30:
  if (!v22 && v20[7] != a2)
  {
    v34[0] = 1283;
    __p[0] = "Trying to register different dialects for the same namespace: ";
    v32 = __src;
    v33 = __len;
    llvm::report_fatal_error((llvm::Twine *)__p, 1);
  }
}

void mlir::DialectRegistry::applyExtensions(mlir::DialectRegistry *this, mlir::Dialect *a2)
{
  uint64_t v2;
  mlir::DialectRegistry *v3;
  uint64_t v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  mlir::DialectRegistry *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t LoadedDialect;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  mlir::Dialect *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[7];

  v26[6] = *MEMORY[0x1E0C80C00];
  v23 = a2;
  v2 = *((_QWORD *)this + 3);
  if ((int)((unint64_t)(*((_QWORD *)this + 4) - v2) >> 3) >= 1)
  {
    v3 = this;
    v4 = 0;
    v6 = (const void *)*((_QWORD *)a2 + 1);
    v5 = *((_QWORD *)a2 + 2);
    v22 = (uint64_t *)*((_QWORD *)a2 + 4);
    do
    {
      v7 = *(_QWORD *)(v2 + 8 * v4);
      v8 = *(_QWORD *)(v7 + 8);
      v9 = *(unsigned int *)(v7 + 16);
      if ((_DWORD)v9 == 1)
      {
        if (*(_QWORD *)(v8 + 8) != v5 || v5 && memcmp(*(const void **)v8, v6, v5))
          goto LABEL_4;
LABEL_3:
        (*(void (**)(uint64_t, uint64_t *, mlir::Dialect **, uint64_t))(*(_QWORD *)v7 + 16))(v7, v22, &v23, 1);
        goto LABEL_4;
      }
      if (!(_DWORD)v9)
        goto LABEL_3;
      v10 = 16 * v9;
      if (v5)
      {
        v11 = v3;
        v12 = 16 * v9;
        v13 = *(_QWORD *)(v7 + 8);
        while (*(_QWORD *)(v13 + 8) != v5 || memcmp(*(const void **)v13, v6, v5))
        {
          v13 += 16;
          v12 -= 16;
          if (!v12)
          {
            v13 = v8 + 16 * v9;
            break;
          }
        }
        v3 = v11;
      }
      else
      {
        v14 = 16 * v9;
        v13 = *(_QWORD *)(v7 + 8);
        while (*(_QWORD *)(v13 + 8))
        {
          v13 += 16;
          v14 -= 16;
          if (!v14)
          {
            v13 = v8 + 16 * v9;
            break;
          }
        }
      }
      v15 = (v13 - v8) >> 4;
      if (v15 == v9)
        goto LABEL_4;
      v24 = v26;
      v25 = 0x600000000;
      if (v9 >= 7)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v26, v9, 8);
      v16 = (uint64_t *)(v8 + 8);
      v17 = 16 * v15;
      do
      {
        if (!v17)
        {
          v19 = (uint64_t)v23;
          v20 = v25;
          if (v25 < (unint64_t)HIDWORD(v25))
            goto LABEL_30;
LABEL_33:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v26, v20 + 1, 8);
          v20 = v25;
          goto LABEL_30;
        }
        LoadedDialect = mlir::MLIRContext::getLoadedDialect(v22, *(v16 - 1), *v16);
        if (!LoadedDialect)
          goto LABEL_34;
        v19 = LoadedDialect;
        v20 = v25;
        if (v25 >= (unint64_t)HIDWORD(v25))
          goto LABEL_33;
LABEL_30:
        *((_QWORD *)v24 + v20) = v19;
        v21 = v25 + 1;
        LODWORD(v25) = v25 + 1;
        v16 += 2;
        v17 -= 16;
        v10 -= 16;
      }
      while (v10);
      (*(void (**)(uint64_t, uint64_t *, void *, _QWORD))(*(_QWORD *)v7 + 16))(v7, v22, v24, v21);
LABEL_34:
      if (v24 != v26)
        free(v24);
LABEL_4:
      ++v4;
      v2 = *((_QWORD *)v3 + 3);
    }
    while (v4 < (int)((unint64_t)(*((_QWORD *)v3 + 4) - v2) >> 3));
  }
}

void mlir::DialectRegistry::applyExtensions(mlir::DialectRegistry *this, mlir::MLIRContext *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t LoadedDialect;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3);
  if ((int)((unint64_t)(*((_QWORD *)this + 4) - v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v2 + 8 * v5);
      v7 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)(v6 + 8);
        __p = v15;
        v14 = 0x600000000;
        if (v7 >= 7)
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v15, v7, 8);
        v9 = &v8[2 * v7];
        while (1)
        {
          LoadedDialect = mlir::MLIRContext::getLoadedDialect((uint64_t *)a2, *v8, v8[1]);
          if (!LoadedDialect)
            break;
          v11 = LoadedDialect;
          v12 = v14;
          if (v14 >= (unint64_t)HIDWORD(v14))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v15, v14 + 1, 8);
            v12 = v14;
          }
          *((_QWORD *)__p + v12) = v11;
          LODWORD(v14) = v14 + 1;
          v8 += 2;
          if (v8 == v9)
          {
            (*(void (**)(uint64_t, mlir::MLIRContext *, void *))(*(_QWORD *)v6 + 16))(v6, a2, __p);
            break;
          }
        }
        if (__p != v15)
          free(__p);
      }
      else
      {
        mlir::MLIRContext::getLoadedDialects(a2, (uint64_t)&__p);
        (*(void (**)(uint64_t, mlir::MLIRContext *))(*(_QWORD *)v6 + 16))(v6, a2);
        if (__p)
        {
          v14 = (uint64_t)__p;
          operator delete(__p);
        }
      }
      ++v5;
      v2 = *((_QWORD *)this + 3);
    }
    while (v5 < (int)((unint64_t)(*((_QWORD *)this + 4) - v2) >> 3));
  }
}

uint64_t mlir::DialectRegistry::isSubsetOf(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v5;
  int v6;
  size_t v7;
  const void *v8;
  uint64_t **v9;
  int v10;
  size_t v11;
  uint64_t *v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;

  if (a1[3] != a1[4])
    return 0;
  v3 = a1 + 1;
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    return 1;
  v5 = *(uint64_t ***)(a2 + 8);
  if (!v5)
    return 0;
  do
  {
    v6 = *((char *)v4 + 55);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)v4 + 55);
    else
      v7 = v4[5];
    if (v6 >= 0)
      v8 = v4 + 4;
    else
      v8 = (const void *)v4[4];
    v9 = v5;
    while (1)
    {
      v10 = *((char *)v9 + 55);
      if (v10 >= 0)
        v11 = *((unsigned __int8 *)v9 + 55);
      else
        v11 = (size_t)v9[5];
      if (v10 >= 0)
        v12 = (uint64_t *)(v9 + 4);
      else
        v12 = v9[4];
      if (v11 >= v7)
        v13 = v7;
      else
        v13 = v11;
      v14 = memcmp(v8, v12, v13);
      v15 = v7 < v11;
      if (v14)
        v15 = v14 < 0;
      if (v15)
        goto LABEL_12;
      v16 = memcmp(v12, v8, v13);
      v17 = v11 < v7;
      if (v16)
        v17 = v16 < 0;
      if (!v17)
        break;
      ++v9;
LABEL_12:
      v9 = (uint64_t **)*v9;
      if (!v9)
        return 0;
    }
    v18 = (_QWORD *)v4[1];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v4[2];
        v20 = *v19 == (_QWORD)v4;
        v4 = v19;
      }
      while (!v20);
    }
    result = 1;
    v4 = v19;
  }
  while (v19 != v3);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::Dialect *>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  uint64_t result;
  int v19;
  unint64_t v20;
  unint64_t *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v6 & 1) == 0)
    {
      v23 = a3;
      v21 = a2;
      v24 = *a1;
      v22 = *((_DWORD *)a1 + 4);
      v25 = *a2;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v24;
      v5 = v25;
      v3 = v22;
      a2 = v21;
      a3 = v23;
      if (v19)
      {
        v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v20 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v24;
        v5 = v25;
        v3 = v22;
        a2 = v21;
        a3 = v23;
      }
    }
    v8 = 0;
    v9 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
    v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v9) >> 47) ^ (0x9DDFEA08EB382D69 * v9));
    v11 = v3 - 1;
    v12 = 1;
    v13 = (-348639895 * ((v10 >> 47) ^ v10)) & v11;
    v14 = (_QWORD *)(v4 + 8 * v13);
    v15 = *v14;
    if (*v14 == -8192)
      goto LABEL_6;
    while (v15 != -4096)
    {
      if (*(_QWORD *)(v15 + 8) == *a2)
      {
        result = 1;
        *a3 = v14;
        return result;
      }
      do
      {
LABEL_6:
        if (v8)
          v16 = 0;
        else
          v16 = v15 == -8192;
        if (v16)
          v8 = v14;
        v17 = v13 + v12++;
        v13 = v17 & v11;
        v14 = (_QWORD *)(v4 + 8 * (v17 & v11));
        v15 = *v14;
      }
      while (*v14 == -8192);
    }
    result = 0;
    if (v8)
      v14 = v8;
    *a3 = v14;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>,mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::InsertIntoBucket<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    v10 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::grow(a1, v9);
  v10 = *a3;
  v13 = *(_DWORD *)(a1 + 16) - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v19 & v13));
      v15 = *a2;
      if (v10 == *a2)
        goto LABEL_4;
    }
    if (v16)
      a2 = v16;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  v11 = *a4;
  *a4 = 0;
  a2[1] = v11;
  return a2;
}

_QWORD *llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v17 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = *(_DWORD *)(a1 + 16) - 1;
          v19 = v18 & ((v17 >> 4) ^ (v17 >> 9));
          v20 = (_QWORD *)(*(_QWORD *)a1 + 16 * v19);
          v21 = *v20;
          if (v17 != *v20)
          {
            v24 = 0;
            v25 = 1;
            while (v21 != -4096)
            {
              if (v24)
                v26 = 0;
              else
                v26 = v21 == -8192;
              if (v26)
                v24 = v20;
              v27 = v19 + v25++;
              v19 = v27 & v18;
              v20 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v27 & v18));
              v21 = *v20;
              if (v17 == *v20)
                goto LABEL_17;
            }
            if (v24)
              v20 = v24;
          }
LABEL_17:
          *v20 = v17;
          v22 = *((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          v20[1] = v22;
          ++*(_DWORD *)(a1 + 8);
          v23 = *((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v28 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v28)
  {
    if (((v28 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_37;
    v29 = ((v28 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v29 & 0x1FFFFFFFFFFFFFFELL)];
    v30 = result + 2;
    v31 = v29 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 2) = -4096;
      *v30 = -4096;
      v30 += 4;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_37:
      v32 = &result[2 * v28];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v32);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::DialectInterface const*>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 8 * v12);
    v14 = *v13;
    if (*(_QWORD *)a2 == *v13)
    {
      result = 1;
LABEL_5:
      *a3 = v13;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 8 * (v19 & v11));
        v14 = *v13;
        if (*(_QWORD *)a2 == *v13)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v13 = v16;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::InsertIntoBucketImpl<mlir::DialectInterface const*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::DialectInterface const*>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  llvm *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = v4;
      do
      {
        if ((*(_QWORD *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::DialectInterface const*>((uint64_t *)a1, (uint64_t)v20, &v28);
          *v28 = *(_QWORD *)v20;
          ++*(_DWORD *)(a1 + 8);
        }
        v20 = (llvm *)((char *)v20 + 8);
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

_QWORD *std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E50818;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E50818;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"builtin", 7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::BuiltinDialect * mlir::MLIRContext::getOrLoadDialect<mlir::BuiltinDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

uint64_t std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir15DialectRegistry6insertINS_14BuiltinDialectEEEvvEUlPNS_11MLIRContextEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir15DialectRegistry6insertINS_14BuiltinDialectEEEvvEUlPNS_11MLIRContextEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir15DialectRegistry6insertINS_14BuiltinDialectEEEvvEUlPNS_11MLIRContextEE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir15DialectRegistry6insertINS_14BuiltinDialectEEEvvEUlPNS_11MLIRContextEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::target_type()
{
}

uint64_t **llvm::function_ref<mlir::Dialect * ()(mlir::MLIRContext *)>::callback_fn<std::function<mlir::Dialect * ()(mlir::MLIRContext *)> const>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  const void **v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v7);
  v4 = (uint64_t **)std::__throw_bad_function_call[abi:nn180100]();
  return std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>(v4, v5, v6);
}

uint64_t **std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_27;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        return v10;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_27:
    v22 = operator new(0x60uLL);
    v22[2] = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v23 = *(_QWORD *)(a3 + 16);
    v24 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v22 + 6) = v23;
    *((_QWORD *)v22 + 7) = v24;
    v25 = *(_QWORD *)(a3 + 56);
    if (v25)
    {
      if (v25 == a3 + 32)
      {
        *((_QWORD *)v22 + 11) = v22 + 4;
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
      }
      else
      {
        *((_QWORD *)v22 + 11) = v25;
        *(_QWORD *)(a3 + 56) = 0;
      }
    }
    else
    {
      *((_QWORD *)v22 + 11) = 0;
    }
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v10;
    *v6 = (uint64_t *)v22;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v22;
    if (v26)
    {
      *a1 = v26;
      v27 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v22;
}

uint64_t *mlir::DialectResourceBlobManager::update(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  int Key;
  uint64_t v9;
  uint64_t *result;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;

  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)a1);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 16), a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 24))
  {
    v9 = 0;
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)a1);
    result = (uint64_t *)16;
    if (MEMORY[0x50])
      return mlir::AsmResourceBlob::operator=(result, a4);
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * Key) + 8;
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)a1);
    result = (uint64_t *)(v9 + 16);
    if (*(_BYTE *)(v9 + 80))
      return mlir::AsmResourceBlob::operator=(result, a4);
  }
  v11 = *(_OWORD *)a4;
  result[2] = *(_QWORD *)(a4 + 16);
  *(_OWORD *)result = v11;
  *(_QWORD *)(v9 + 64) = 0;
  v12 = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(v9 + 64) = v12;
  if (*(_QWORD *)(a4 + 48) >= 8uLL)
  {
    result = (uint64_t *)(v9 + 40);
    v13 = (__int128 *)(a4 + 24);
    if ((v12 & 2) != 0 && (v12 & 4) != 0)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, __int128 *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(result, v13);
    }
    else
    {
      v14 = *v13;
      *(_QWORD *)(v9 + 56) = *(_QWORD *)(a4 + 40);
      *(_OWORD *)result = v14;
    }
    *(_QWORD *)(a4 + 48) = 0;
  }
  *(_BYTE *)(v9 + 72) = *(_BYTE *)(a4 + 56);
  *(_BYTE *)(v9 + 80) = 1;
  return result;
}

uint64_t mlir::DialectResourceBlobManager::insert(pthread_rwlock_t **a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  __int16 v18;
  _QWORD v19[2];
  void *v20;
  __int128 v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  llvm::sys::RWMutexImpl::lock(a1);
  v19[0] = a1;
  v19[1] = a4;
  v8 = mlir::DialectResourceBlobManager::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(v19, a2, a3);
  if (v8)
    goto LABEL_20;
  v20 = v22;
  v21 = xmmword_181233280;
  if ((unint64_t)a3 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v20, v22, (unint64_t)a3, 1);
    v9 = v21;
LABEL_5:
    memcpy((char *)v20 + v9, a2, (size_t)a3);
    v9 = v21;
    goto LABEL_6;
  }
  v9 = 0;
  if (a3)
    goto LABEL_5;
LABEL_6:
  v10 = &a3[v9];
  *(_QWORD *)&v21 = v10;
  if ((unint64_t)(v10 + 1) > *((_QWORD *)&v21 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v20, v22, (unint64_t)(v10 + 1), 1);
    v10 = (const unsigned __int8 *)v21;
  }
  v10[(_QWORD)v20] = 95;
  *(_QWORD *)&v21 = v21 + 1;
  v11 = (unint64_t)(a3 + 1);
  v12 = 1;
  while (1)
  {
    v16 = v12;
    v17 = &v16;
    v18 = 267;
    llvm::Twine::toVector((uint64_t)&v17, (uint64_t)&v20);
    v13 = mlir::DialectResourceBlobManager::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(v19, (int8x16_t *)v20, (const unsigned __int8 *)v21);
    if (v13)
      break;
    v14 = v21;
    if ((_QWORD)v21 == v11)
    {
      ++v12;
    }
    else
    {
      if ((unint64_t)v21 <= v11)
      {
        if (*((_QWORD *)&v21 + 1) < v11)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v20, v22, v11, 1);
          v14 = v21;
        }
        if (v11 != v14)
          bzero((char *)v20 + v14, v11 - v14);
      }
      *(_QWORD *)&v21 = v11;
      ++v12;
    }
  }
  v8 = v13;
  if (v20 != v22)
    free(v20);
LABEL_20:
  llvm::sys::RWMutexImpl::unlock_shared(a1);
  return v8;
}

uint64_t mlir::DialectResourceBlobManager::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(_QWORD *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t *v5;
  char v6;
  char v7;
  __int128 *v8;
  char v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 *v20;
  char v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33[2];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *a1 + 16;
  v35 = 0;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = llvm::StringMap<mlir::DialectResourceBlobManager::BlobEntry,llvm::MallocAllocator>::try_emplace<mlir::DialectResourceBlobManager::BlobEntry>(v4, a2, a3, (uint64_t)&v30);
  v7 = v6;
  if ((_BYTE)v35 && (unint64_t)v34 >= 8)
  {
    v8 = (v34 & 2) != 0 ? (__int128 *)((char *)&v32 + 8) : (__int128 *)*((_QWORD *)&v32 + 1);
    (*(void (**)(__int128 *, _QWORD, _QWORD, _QWORD))(v34 & 0xFFFFFFFFFFFFFFF8))(v8, v31, *((_QWORD *)&v31 + 1), v32);
    v9 = v34;
    if ((unint64_t)v34 >= 8)
    {
      if ((v34 & 4) != 0)
      {
        if ((v34 & 2) != 0)
          v10 = (char *)&v32 + 8;
        else
          v10 = (char *)*((_QWORD *)&v32 + 1);
        (*(void (**)(char *))((v34 & 0xFFFFFFFFFFFFFFF8) + 16))(v10);
      }
      if ((v9 & 2) == 0)
        llvm::deallocate_buffer(*((llvm **)&v32 + 1), (void *)v33[0]);
    }
  }
  if (!v7)
    return 0;
  v11 = (_QWORD *)*v5;
  v12 = *v5 + 96;
  v13 = *(_QWORD *)*v5;
  v14 = (__int128 *)a1[1];
  LOBYTE(v23) = 0;
  v29 = 0;
  if (*((_BYTE *)v14 + 64))
  {
    v15 = *((_QWORD *)v14 + 2);
    v23 = *v14;
    v16 = *((_QWORD *)v14 + 6);
    v24 = v15;
    v27 = v16;
    if (v16 >= 8)
    {
      v17 = (__int128 *)((char *)v14 + 24);
      if ((v16 & 2) != 0 && (v16 & 4) != 0)
      {
        (*(void (**)(__int128 *, __int128 *))((v16 & 0xFFFFFFFFFFFFFFF8) + 8))(&v25, v17);
      }
      else
      {
        v18 = *v17;
        v26 = *((_QWORD *)v14 + 5);
        v25 = v18;
      }
      *((_QWORD *)v14 + 6) = 0;
    }
    v28 = *((_BYTE *)v14 + 56);
    v29 = 1;
  }
  v11[1] = v12;
  v11[2] = v13;
  std::__optional_storage_base<mlir::AsmResourceBlob,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<mlir::AsmResourceBlob,false>>(v11 + 3, (uint64_t)&v23);
  if (v29 && v27 >= 8)
  {
    v20 = (v27 & 2) != 0 ? &v25 : (__int128 *)v25;
    (*(void (**)(__int128 *, _QWORD, _QWORD, uint64_t))(v27 & 0xFFFFFFFFFFFFFFF8))(v20, v23, *((_QWORD *)&v23 + 1), v24);
    v21 = v27;
    if (v27 >= 8)
    {
      if ((v27 & 4) != 0)
      {
        if ((v27 & 2) != 0)
          v22 = &v25;
        else
          v22 = (__int128 *)v25;
        (*(void (**)(__int128 *))((v27 & 0xFFFFFFFFFFFFFFF8) + 16))(v22);
      }
      if ((v21 & 2) == 0)
        llvm::deallocate_buffer((llvm *)v25, *((void **)&v25 + 1));
    }
  }
  return *v5 + 8;
}

uint64_t *mlir::AsmResourceBlob::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;

  v4 = (uint64_t **)(a1 + 3);
  v5 = a1[6];
  if (v5 >= 8)
  {
    v6 = *a1;
    v7 = a1[1];
    v8 = a1[2];
    v9 = a1 + 3;
    if ((v5 & 2) == 0)
      v9 = *v4;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFF8))(v9, v6, v7, v8);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  if (a1 != (uint64_t *)a2)
  {
    v10 = a1[6];
    if (v10 >= 8)
    {
      if ((v10 & 4) != 0)
      {
        v11 = (uint64_t *)v4;
        if ((v10 & 2) == 0)
          v11 = *v4;
        (*(void (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))(v11);
      }
      if ((v10 & 2) == 0)
        llvm::deallocate_buffer((llvm *)a1[3], (void *)a1[4]);
    }
    a1[6] = 0;
    v12 = *(_QWORD *)(a2 + 48);
    a1[6] = v12;
    if (*(_QWORD *)(a2 + 48) >= 8uLL)
    {
      v13 = (__int128 *)(a2 + 24);
      if ((v12 & 2) != 0 && (v12 & 4) != 0)
      {
        (*(void (**)(uint64_t **, __int128 *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(v4, v13);
      }
      else
      {
        v14 = *v13;
        v4[2] = *(uint64_t **)(a2 + 40);
        *(_OWORD *)v4 = v14;
      }
      *(_QWORD *)(a2 + 48) = 0;
    }
  }
  *((_BYTE *)a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t *llvm::StringMap<mlir::DialectResourceBlobManager::BlobEntry,llvm::MallocAllocator>::try_emplace<mlir::DialectResourceBlobManager::BlobEntry>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *buffer;
  void *v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 97), (std::align_val_t)8uLL);
    v12 = buffer + 96;
    if (!a3)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v10)
  {
    while (!v10 || v10 == -8)
    {
      v16 = v9[1];
      ++v9;
      v10 = v16;
    }
    return v9;
  }
  buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 97), (std::align_val_t)8uLL);
  v12 = buffer + 96;
  if (a3)
LABEL_4:
    memcpy(v12, a2, (size_t)a3);
LABEL_5:
  a3[(_QWORD)v12] = 0;
  *(_QWORD *)buffer = a3;
  *(_OWORD *)(buffer + 8) = *(_OWORD *)a4;
  buffer[24] = 0;
  buffer[88] = 0;
  if (*(_BYTE *)(a4 + 80))
  {
    *(_OWORD *)(buffer + 24) = *(_OWORD *)(a4 + 16);
    *((_QWORD *)buffer + 5) = *(_QWORD *)(a4 + 32);
    v13 = *(_QWORD *)(a4 + 64);
    *((_QWORD *)buffer + 9) = v13;
    if (v13 >= 8)
    {
      v14 = buffer + 48;
      v15 = (_OWORD *)(a4 + 40);
      if ((v13 & 2) != 0 && (v13 & 4) != 0)
      {
        (*(void (**)(_OWORD *, _OWORD *))((v13 & 0xFFFFFFFFFFFFFFF8) + 8))(v14, v15);
      }
      else
      {
        *v14 = *v15;
        *((_QWORD *)buffer + 8) = *(_QWORD *)(a4 + 56);
      }
      *(_QWORD *)(a4 + 64) = 0;
    }
    buffer[80] = *(_BYTE *)(a4 + 72);
    buffer[88] = 1;
  }
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v17 = *v9 == -8;
  else
    v17 = 1;
  if (v17)
  {
    do
    {
      v19 = v9[1];
      ++v9;
      v18 = v19;
      if (v19)
        v20 = v18 == -8;
      else
        v20 = 1;
    }
    while (v20);
  }
  return v9;
}

uint64_t *std::__optional_storage_base<mlir::AsmResourceBlob,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<mlir::AsmResourceBlob,false>>(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;

  v3 = result;
  if (*((unsigned __int8 *)result + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*((_BYTE *)result + 64))
      return mlir::AsmResourceBlob::operator=(result, a2);
  }
  else if (*((_BYTE *)result + 64))
  {
    v4 = result[6];
    if (v4 >= 8)
    {
      v5 = result + 3;
      v6 = *result;
      v7 = result[1];
      v8 = result[2];
      v9 = result + 3;
      if ((v4 & 2) == 0)
        v9 = (uint64_t *)*v5;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFF8))(v9, v6, v7, v8);
      v10 = v3[6];
      if (v10 >= 8)
      {
        if ((v10 & 4) != 0)
        {
          if ((v10 & 2) == 0)
            v5 = (uint64_t *)*v5;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))(v5);
        }
        if ((v10 & 2) == 0)
          llvm::deallocate_buffer((llvm *)v3[3], (void *)v3[4]);
      }
    }
    *((_BYTE *)v3 + 64) = 0;
  }
  else
  {
    v11 = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)result = v11;
    result[6] = 0;
    v12 = *(_QWORD *)(a2 + 48);
    result[6] = v12;
    if (*(_QWORD *)(a2 + 48) >= 8uLL)
    {
      result += 3;
      v13 = (__int128 *)(a2 + 24);
      if ((v12 & 2) != 0 && (v12 & 4) != 0)
      {
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, __int128 *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(result, v13);
      }
      else
      {
        v14 = *v13;
        v3[5] = *(_QWORD *)(a2 + 40);
        *(_OWORD *)result = v14;
      }
      *(_QWORD *)(a2 + 48) = 0;
    }
    *((_BYTE *)v3 + 56) = *(_BYTE *)(a2 + 56);
    *((_BYTE *)v3 + 64) = 1;
  }
  return result;
}

BOOL llvm::DominatorTreeBase<mlir::Block,false>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;

  if (a2 == a3)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_10;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    v12 = 0;
    if (!(_DWORD)v4)
      return 1;
  }
  else
  {
    v12 = v6[1];
    if (!(_DWORD)v4)
      return 1;
  }
  v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (uint64_t *)(v3 + 16 * v4);
  v15 = *v14;
  if (*v14 != a3)
  {
    v21 = 1;
    while (v15 != -4096)
    {
      v22 = v4 + v21++;
      v4 = v22 & v13;
      v15 = *(_QWORD *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        v14 = (uint64_t *)(v3 + 16 * v4);
        if (v14 != v11)
          goto LABEL_16;
        return 1;
      }
    }
    return 1;
  }
  if (v14 == v11)
    return 1;
LABEL_16:
  v16 = v14[1];
  if (v16 == v12 || v16 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v16 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v16)
    return 0;
  v18 = *(_DWORD *)(v12 + 16);
  if (v18 >= *(_DWORD *)(v16 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_DWORD *)(v16 + 72) < *(_DWORD *)(v12 + 72))
      return 0;
    return *(_DWORD *)(v16 + 76) <= *(_DWORD *)(v12 + 76);
  }
  v19 = *(_DWORD *)(a1 + 68) + 1;
  *(_DWORD *)(a1 + 68) = v19;
  if (v19 > 0x20)
  {
    llvm::DominatorTreeBase<mlir::Block,false>::updateDFSNumbers(a1);
    if (*(_DWORD *)(v16 + 72) < *(_DWORD *)(v12 + 72))
      return 0;
    return *(_DWORD *)(v16 + 76) <= *(_DWORD *)(v12 + 76);
  }
  do
  {
    v20 = v16;
    v16 = *(_QWORD *)(v16 + 8);
  }
  while (v16 && *(_DWORD *)(v16 + 16) >= v18);
  return v20 == v12;
}

void llvm::DominatorTreeBase<mlir::Block,false>::updateDFSNumbers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[65];

  v18[64] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    v15 = v18;
    v17 = 32;
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      v18[0] = *(_QWORD *)(a1 + 48);
      v18[1] = v3;
      v4 = 1;
      v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      v5 = 1;
      do
      {
        while (1)
        {
          v6 = (char *)v15;
          v7 = v5;
          v8 = (char *)v15 + 16 * v5;
          v10 = *((_QWORD *)v8 - 2);
          v9 = (uint64_t *)*((_QWORD *)v8 - 1);
          if (v9 != (uint64_t *)(*(_QWORD *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32)))
            break;
          *(_DWORD *)(v10 + 76) = v4;
          v5 = v7 - 1;
          v16 = v7 - 1;
          ++v4;
          if ((_DWORD)v7 == 1)
            goto LABEL_11;
        }
        v11 = *v9;
        *((_QWORD *)v8 - 1) = v9 + 1;
        v12 = *(_QWORD *)(v11 + 24);
        if (v7 >= v17)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v18, v7 + 1, 16);
          v7 = v16;
          v6 = (char *)v15;
        }
        v13 = &v6[16 * v7];
        *(_QWORD *)v13 = v11;
        *((_QWORD *)v13 + 1) = v12;
        v5 = ++v16;
        *(_DWORD *)(v11 + 72) = v4++;
      }
      while (v5);
LABEL_11:
      v14 = v15;
      *(_DWORD *)(a1 + 68) = 0;
      *(_BYTE *)(a1 + 64) = 1;
      if (v14 != v18)
        free(v14);
    }
  }
}

uint64_t llvm::DominatorTreeBase<mlir::Block,false>::createChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v26;

  v26 = a2;
  v6 = operator new(0x50uLL);
  v7 = v6;
  *v6 = a2;
  v6[1] = a3;
  if (a3)
    v8 = *(_DWORD *)(a3 + 16) + 1;
  else
    v8 = 0;
  *((_DWORD *)v6 + 4) = v8;
  v6[3] = v6 + 5;
  v6[4] = 0x400000000;
  v6[9] = -1;
  v9 = *(unsigned int *)(a3 + 32);
  if (v9 >= *(_DWORD *)(a3 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, (void *)(a3 + 40), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v9) = v7;
  ++*(_DWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a1 + 24);
  v11 = a1 + 24;
  v10 = v12;
  v13 = *(_DWORD *)(v11 + 16);
  if (v13)
  {
    v14 = v13 - 1;
    v15 = ((a2 >> 4) ^ (a2 >> 9)) & v14;
    v16 = (uint64_t *)(v10 + 16 * v15);
    v17 = *v16;
    if (*v16 == a2)
      goto LABEL_19;
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = v16;
      v21 = v15 + v19++;
      v15 = v21 & v14;
      v16 = (uint64_t *)(v10 + 16 * v15);
      v17 = *v16;
      if (*v16 == a2)
        goto LABEL_19;
    }
    if (v18)
      v22 = v18;
    else
      v22 = v16;
  }
  else
  {
    v22 = 0;
  }
  v16 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::InsertIntoBucket<mlir::Block * const&>(v11, v22, &v26);
LABEL_19:
  v23 = (_QWORD *)v16[1];
  v16[1] = (uint64_t)v7;
  if (v23)
  {
    v24 = (_QWORD *)v23[3];
    if (v24 != v23 + 5)
      free(v24);
    operator delete(v23);
    return v16[1];
  }
  return (uint64_t)v7;
}

_QWORD *llvm::DominatorTreeBase<mlir::Block,false>::createNode(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;

  v21 = a2;
  v4 = operator new(0x50uLL);
  *v4 = a2;
  v4[1] = 0;
  *((_DWORD *)v4 + 4) = 0;
  v4[3] = v4 + 5;
  v4[4] = 0x400000000;
  v4[9] = -1;
  v7 = *(_QWORD *)(a1 + 24);
  v6 = a1 + 24;
  v5 = v7;
  v8 = *(_DWORD *)(v6 + 16);
  if (v8)
  {
    v9 = v8 - 1;
    v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
    v11 = (uint64_t *)(v5 + 16 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_14;
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (uint64_t *)(v5 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_14;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v11;
  }
  else
  {
    v17 = 0;
  }
  v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::InsertIntoBucket<mlir::Block * const&>(v6, v17, &v21);
LABEL_14:
  v18 = (_QWORD *)v11[1];
  v11[1] = (uint64_t)v4;
  if (v18)
  {
    v19 = (_QWORD *)v18[3];
    if (v19 != v18 + 5)
      free(v19);
    operator delete(v18);
    return (_QWORD *)v11[1];
  }
  return v4;
}

void llvm::DominatorTreeBase<mlir::Block,false>::reset(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 || *(_DWORD *)(a1 + 36))
  {
    v3 = (_DWORD *)(a1 + 24);
    v4 = *(unsigned int *)(a1 + 40);
    if (v4 > 4 * v2 && v4 >= 0x41)
    {
      llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::shrink_and_clear(v3);
      goto LABEL_17;
    }
    if (!(_DWORD)v4)
    {
LABEL_16:
      *(_QWORD *)(a1 + 32) = 0;
      goto LABEL_17;
    }
    v5 = (_QWORD **)(*(_QWORD *)v3 + 8);
    v6 = 16 * v4;
    while (1)
    {
      v7 = (uint64_t)*(v5 - 1);
      if (v7 != -8192)
      {
        if (v7 == -4096)
          goto LABEL_10;
        v8 = *v5;
        *v5 = 0;
        if (v8)
        {
          v9 = (_QWORD *)v8[3];
          if (v9 != v8 + 5)
            free(v9);
          operator delete(v8);
        }
      }
      *(v5 - 1) = (_QWORD *)-4096;
LABEL_10:
      v5 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_16;
    }
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
}

void mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase(uint64_t a1)
{
  int v2;
  llvm *v3;
  uint64_t v4;
  llvm *v5;
  uint64_t v6;
  llvm *v7;
  unint64_t v8;
  uint64_t v9;
  llvm *v10;
  _QWORD **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(llvm **)a1;
  v4 = *(unsigned int *)(a1 + 16);
  if (v2)
  {
    v5 = v3;
    if ((_DWORD)v4)
    {
      v6 = 0;
      while ((*(_QWORD *)((char *)v3 + v6) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 16;
        if (16 * v4 == v6)
          goto LABEL_25;
      }
      v5 = (llvm *)((char *)v3 + v6);
    }
    v7 = (llvm *)((char *)v3 + 16 * v4);
    if (v5 != v7)
    {
      do
      {
        v8 = *((_QWORD *)v5 + 1) & 0xFFFFFFFFFFFFFFF8;
        if (v8)
        {
          v9 = *(unsigned int *)(v8 + 40);
          v10 = *(llvm **)(v8 + 24);
          if ((_DWORD)v9)
          {
            v11 = (_QWORD **)((char *)v10 + 8);
            v12 = 16 * v9;
            while (1)
            {
              if (((unint64_t)*(v11 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                v13 = *v11;
                *v11 = 0;
                if (v13)
                {
                  v14 = (_QWORD *)v13[3];
                  if (v14 != v13 + 5)
                    free(v14);
                  operator delete(v13);
                }
              }
              v11 += 2;
              v12 -= 16;
              if (!v12)
                llvm::deallocate_buffer(*(llvm **)(v8 + 24), (void *)(16 * *(unsigned int *)(v8 + 40)));
            }
          }
          llvm::deallocate_buffer(v10, 0);
        }
        do
        {
          v5 = (llvm *)((char *)v5 + 16);
          if (v5 == v7)
            goto LABEL_24;
        }
        while ((*(_QWORD *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000);
      }
      while (v5 != v7);
LABEL_24:
      v3 = *(llvm **)a1;
      v4 = *(unsigned int *)(a1 + 16);
    }
  }
LABEL_25:
  llvm::deallocate_buffer(v3, (void *)(16 * v4));
}

uint64_t sub_18041C274()
{
  uint64_t v0;

  return v0;
}

unint64_t mlir::detail::DominanceInfoBase<false>::getDominanceInfo(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t InterfaceFor;
  uint64_t RegionNumber;
  int hasSSADominance;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  int v23;
  _QWORD *v24;
  int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _QWORD v33[2];

  v5 = *(_DWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_38;
  v6 = *(_QWORD *)a1;
  v7 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v9 = (_QWORD *)*v8;
  if ((_QWORD *)*v8 == a2)
  {
LABEL_3:
    v10 = v6 + 16 * v7 + 8;
    if (!a3 || *(_QWORD *)v10 > 7uLL || (_QWORD *)*a2 != a2 && *(_QWORD **)(a2[1] + 8) == a2)
      return *(_QWORD *)v10;
LABEL_14:
    v13 = operator new(0x48uLL);
    v13[2] = 0u;
    v13[3] = 0u;
    *((_QWORD *)v13 + 7) = a2;
    *((_QWORD *)v13 + 8) = 0;
    v13[1] = 0u;
    *(_QWORD *)v13 = v13 + 1;
    *((_QWORD *)v13 + 1) = 0x100000000;
    *((_QWORD *)v13 + 3) = 0;
    *((_QWORD *)v13 + 4) = 0;
    *((_DWORD *)v13 + 10) = 0;
    *((_BYTE *)v13 + 64) = 0;
    *((_QWORD *)v13 + 6) = 0;
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::CalculateFromScratch((uint64_t)v13, 0);
  }
  v20 = 0;
  v21 = 1;
  while (v9 != (_QWORD *)-4096)
  {
    if (v20)
      v22 = 0;
    else
      v22 = v9 == (_QWORD *)-8192;
    if (v22)
      v20 = v8;
    v23 = v7 + v21++;
    v7 = v23 & (v5 - 1);
    v8 = (_QWORD *)(v6 + 16 * v7);
    v9 = (_QWORD *)*v8;
    if ((_QWORD *)*v8 == a2)
      goto LABEL_3;
  }
  v24 = v20 ? v20 : v8;
  v25 = *(_DWORD *)(a1 + 8);
  if (4 * v25 + 4 < 3 * v5)
  {
    if (v5 + ~v25 - *(_DWORD *)(a1 + 12) > v5 >> 3)
      goto LABEL_10;
  }
  else
  {
LABEL_38:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow(a1, v5);
  v26 = *(_DWORD *)(a1 + 16) - 1;
  v27 = v26 & ((a2 >> 4) ^ (a2 >> 9));
  v24 = (_QWORD *)(*(_QWORD *)a1 + 16 * v27);
  v28 = (_QWORD *)*v24;
  if ((_QWORD *)*v24 == a2)
  {
LABEL_40:
    ++*(_DWORD *)(a1 + 8);
    if (a2 == (_QWORD *)-4096)
      goto LABEL_12;
    goto LABEL_11;
  }
  v29 = 0;
  v30 = 1;
  while (v28 != (_QWORD *)-4096)
  {
    if (v29)
      v31 = 0;
    else
      v31 = v28 == (_QWORD *)-8192;
    if (v31)
      v29 = v24;
    v32 = v27 + v30++;
    v27 = v32 & v26;
    v24 = (_QWORD *)(*(_QWORD *)a1 + 16 * v27);
    v28 = (_QWORD *)*v24;
    if ((_QWORD *)*v24 == a2)
      goto LABEL_40;
  }
  if (v29)
    v24 = v29;
LABEL_10:
  v12 = *v24;
  ++*(_DWORD *)(a1 + 8);
  if (v12 != -4096)
LABEL_11:
    --*(_DWORD *)(a1 + 12);
LABEL_12:
  *v24 = a2;
  v24[1] = 4;
  v10 = (uint64_t)(v24 + 1);
  if ((_QWORD *)*a2 == a2 || *(_QWORD **)(a2[1] + 8) != a2)
    goto LABEL_14;
  v14 = a2[2];
  if (!v14)
    return *(_QWORD *)v10;
  if (*(_UNKNOWN **)(*(_QWORD *)(v14 + 48) + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    *(_QWORD *)v10 = 0;
    return 0;
  }
  else
  {
    InterfaceFor = mlir::OpInterface<mlir::RegionKindInterface,mlir::detail::RegionKindInterfaceInterfaceTraits>::getInterfaceFor(a2[2]);
    if (InterfaceFor)
      InterfaceFor = mlir::OpInterface<mlir::RegionKindInterface,mlir::detail::RegionKindInterfaceInterfaceTraits>::getInterfaceFor(v14);
    else
      v14 = 0;
    v33[0] = v14;
    v33[1] = InterfaceFor;
    if (!v14)
      return *(_QWORD *)v10;
    RegionNumber = mlir::Region::getRegionNumber((unint64_t)a2);
    hasSSADominance = mlir::RegionKindInterface::hasSSADominance((mlir::RegionKindInterface *)v33, RegionNumber);
    v18 = 4;
    if (!hasSSADominance)
      v18 = 0;
    v19 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFBLL | v18;
    *(_QWORD *)v10 = v19;
    return v19;
  }
}

BOOL mlir::detail::DominanceInfoBase<false>::isReachableFromEntry(uint64_t a1, mlir::Block *this)
{
  _QWORD *Parent;
  uint64_t v5;
  mlir::Block *v6;
  unint64_t DominanceInfo;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  mlir::Block *v12;
  int v13;
  int v14;

  Parent = (_QWORD *)mlir::Block::getParent(this);
  v5 = Parent[1];
  if (v5)
    v6 = (mlir::Block *)(v5 - 8);
  else
    v6 = 0;
  if (v6 == this)
    return 1;
  DominanceInfo = mlir::detail::DominanceInfoBase<false>::getDominanceInfo(a1, Parent, 1);
  v8 = *(_QWORD *)((DominanceInfo & 0xFFFFFFFFFFFFFFF8) + 24);
  v9 = *(unsigned int *)((DominanceInfo & 0xFFFFFFFFFFFFFFF8) + 40);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((this >> 4) ^ (this >> 9));
    v11 = v8 + 16 * v10;
    v12 = *(mlir::Block **)v11;
    if (*(mlir::Block **)v11 == this)
      return v11 != v8 + 16 * v9 && *(_QWORD *)(v11 + 8) != 0;
    v13 = 1;
    while (v12 != (mlir::Block *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(mlir::Block **)(v8 + 16 * v10);
      if (v12 == this)
      {
        v11 = v8 + 16 * v10;
        return v11 != v8 + 16 * v9 && *(_QWORD *)(v11 + 8) != 0;
      }
    }
  }
  v11 = v8 + 16 * v9;
  return v11 != v8 + 16 * v9 && *(_QWORD *)(v11 + 8) != 0;
}

uint64_t mlir::DominanceInfo::properlyDominatesImpl(mlir::DominanceInfo *this, mlir::Block **a2, mlir::Block **a3, char a4)
{
  mlir::Block *v5;
  mlir::Operation *v7;
  mlir::Block *v9;
  mlir::Region *v10;
  uint64_t result;
  _QWORD *Parent;
  unint64_t DominanceInfo;
  _QWORD *v14;

  v5 = a2[2];
  if (a2 == a3)
  {
    Parent = (_QWORD *)mlir::Block::getParent(a2[2]);
    return (mlir::detail::DominanceInfoBase<false>::getDominanceInfo((uint64_t)this, Parent, 0) & 4) == 0;
  }
  v7 = (mlir::Operation *)a3;
  v9 = a3[2];
  v10 = (mlir::Region *)mlir::Block::getParent(a2[2]);
  if (v10 == (mlir::Region *)mlir::Block::getParent(v9))
  {
LABEL_10:
    if (v5 == v9)
    {
      v14 = (_QWORD *)mlir::Block::getParent(v5);
      return (mlir::detail::DominanceInfoBase<false>::getDominanceInfo((uint64_t)this, v14, 0) & 4) == 0
          || mlir::Operation::isBeforeInBlock(a2, v7);
    }
    else
    {
      DominanceInfo = mlir::detail::DominanceInfoBase<false>::getDominanceInfo((uint64_t)this, v10, 1);
      return llvm::DominatorTreeBase<mlir::Block,false>::properlyDominates(DominanceInfo & 0xFFFFFFFFFFFFFFF8, (uint64_t)v5, (uint64_t)v9);
    }
  }
  if (!v10)
    return 0;
  result = (uint64_t)mlir::Region::findAncestorOpInRegion(v10, v7);
  if (result)
  {
    v7 = (mlir::Operation *)result;
    v9 = *(mlir::Block **)(result + 16);
    if ((mlir::Block **)result == a2 && (a4 & 1) != 0)
      return 1;
    goto LABEL_10;
  }
  return result;
}

uint64_t mlir::DominanceInfo::properlyDominates(mlir::DominanceInfo *a1, uint64_t a2, mlir::Block **a3)
{
  uint64_t v5;
  mlir::Block *v6;
  mlir::Region *Parent;
  uint64_t result;
  unint64_t DominanceInfo;
  mlir::Block **DefiningOp;
  uint64_t v11;

  v11 = a2;
  if (a2 && (*(_QWORD *)(a2 + 8) & 7) == 7)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = a3[2];
    if ((mlir::Block *)v5 == v6)
      return 1;
    Parent = (mlir::Region *)mlir::Block::getParent(*(mlir::Block **)(a2 + 16));
    if (Parent == (mlir::Region *)mlir::Block::getParent(v6))
    {
LABEL_8:
      DominanceInfo = mlir::detail::DominanceInfoBase<false>::getDominanceInfo((uint64_t)a1, Parent, 1);
      return llvm::DominatorTreeBase<mlir::Block,false>::properlyDominates(DominanceInfo & 0xFFFFFFFFFFFFFFF8, v5, (uint64_t)v6);
    }
    if (Parent)
    {
      result = (uint64_t)mlir::Region::findAncestorBlockInRegion(Parent, v6);
      if (result)
      {
        v6 = (mlir::Block *)result;
        if (result != v5)
          goto LABEL_8;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v11);
    return mlir::DominanceInfo::properlyDominatesImpl(a1, DefiningOp, a3, 0);
  }
  return result;
}

uint64_t mlir::OpInterface<mlir::RegionKindInterface,mlir::detail::RegionKindInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface]";
          v31 = 75;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::RegionKindInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface]";
          v31 = 75;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::RegionKindInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface]";
      v23 = 75;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[150];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::CalculateFromScratch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *Node;
  char *v21;
  uint64_t v22;
  char *v23;
  void *__p;
  _QWORD *v25;
  _QWORD *v26;
  llvm *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *__src;
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  llvm::DominatorTreeBase<mlir::Block,false>::reset(a1);
  *(_QWORD *)(a1 + 56) = v4;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (!v5)
    {
      v7 = 0;
      goto LABEL_23;
    }
    v6 = *(_QWORD *)(a2 + 8);
    v7 = a2;
    if (v5 == v6)
      goto LABEL_23;
    llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom(*(_QWORD *)(a2 + 8), *(_DWORD **)(a2 + 16));
    llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom(v6 + 296, (_DWORD *)(v5 + 296));
    *(_BYTE *)(v6 + 592) = *(_BYTE *)(v5 + 592);
    v8 = (void **)(v6 + 600);
    v9 = *(unsigned int *)(v5 + 608);
    v10 = *(unsigned int *)(v6 + 608);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*v8, *(const void **)(v5 + 600), 16 * v9);
      goto LABEL_22;
    }
    if (*(_DWORD *)(v6 + 612) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*v8, *(const void **)(v5 + 600), 16 * v10);
        v11 = *(unsigned int *)(v5 + 608);
        if (v10 == v11)
        {
LABEL_22:
          *(_DWORD *)(v6 + 608) = v9;
          v4 = *(_QWORD *)(a1 + 56);
          v7 = a2;
LABEL_23:
          v16 = operator new(8uLL);
          __p = v16;
          *v16 = 0;
          v25 = v16 + 1;
          v26 = v16 + 1;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = v7;
          __src = v33;
          v17 = *(_QWORD *)(v4 + 8);
          if (v17)
            v18 = v17 - 8;
          else
            v18 = 0;
          v33[0] = v18;
          v32 = 0x100000001;
          if (&__src == (void **)a1)
            goto LABEL_35;
          if (*(_DWORD *)(a1 + 8))
          {
            **(_QWORD **)a1 = v18;
            goto LABEL_33;
          }
          if (*(_DWORD *)(a1 + 12))
          {
            v19 = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), 1uLL, 8);
            v19 = v32;
            if (!(_DWORD)v32)
              goto LABEL_33;
          }
          memcpy(*(void **)a1, __src, 8 * v19);
LABEL_33:
          *(_DWORD *)(a1 + 8) = 1;
          LODWORD(v32) = 0;
          if (__src != v33)
            free(__src);
LABEL_35:
          llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>((uint64_t)&__p, **(_QWORD **)a1, 0, (unsigned int (*)(mlir::Block *))llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::AlwaysDescend, 0, 0);
          llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runSemiNCA((uint64_t)&__p, a1, 0);
          *(_BYTE *)a2 = 1;
          if (!*(_DWORD *)(a1 + 8))
            goto LABEL_37;
          goto LABEL_36;
        }
      }
      else
      {
        v10 = 0;
        v11 = *(unsigned int *)(v5 + 608);
        if (!*(_DWORD *)(v5 + 608))
          goto LABEL_22;
      }
    }
    else
    {
      *(_DWORD *)(v6 + 608) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 600, (void *)(v6 + 616), v9, 16);
      v10 = 0;
      v11 = *(unsigned int *)(v5 + 608);
      if (!*(_DWORD *)(v5 + 608))
        goto LABEL_22;
    }
    memcpy((char *)*v8 + 16 * v10, (const void *)(*(_QWORD *)(v5 + 600) + 16 * v10), 16 * v11 - 16 * v10);
    goto LABEL_22;
  }
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = 0;
  v25 = v12 + 1;
  v26 = v12 + 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  __src = v33;
  v13 = *(_QWORD *)(v4 + 8);
  if (v13)
    v14 = v13 - 8;
  else
    v14 = 0;
  v33[0] = v14;
  v32 = 0x100000001;
  if (&__src == (void **)a1)
  {
LABEL_49:
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>((uint64_t)&__p, **(_QWORD **)a1, 0, (unsigned int (*)(mlir::Block *))llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::AlwaysDescend, 0, 0);
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runSemiNCA((uint64_t)&__p, a1, 0);
    if (!*(_DWORD *)(a1 + 8))
    {
LABEL_37:
      if (v29)
      {
        v21 = (char *)v27 + 56;
        v22 = 72 * v29;
        while (1)
        {
          if ((*((_QWORD *)v21 - 7) | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v23 = (char *)*((_QWORD *)v21 - 2);
            if (v21 != v23)
              free(v23);
          }
          v21 += 72;
          v22 -= 72;
          if (!v22)
            llvm::deallocate_buffer(v27, (void *)(72 * v29));
        }
      }
      llvm::deallocate_buffer(v27, 0);
    }
LABEL_36:
    Node = llvm::DominatorTreeBase<mlir::Block,false>::createNode(a1, **(_QWORD **)a1);
    *(_QWORD *)(a1 + 48) = Node;
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::attachNewSubtree((uint64_t)&__p, a1, Node);
    goto LABEL_37;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    **(_QWORD **)a1 = v14;
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 12))
  {
    v15 = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), 1uLL, 8);
    v15 = v32;
    if (!(_DWORD)v32)
      goto LABEL_47;
  }
  memcpy(*(void **)a1, __src, 8 * v15);
LABEL_47:
  *(_DWORD *)(a1 + 8) = 1;
  LODWORD(v32) = 0;
  if (__src != v33)
    free(__src);
  goto LABEL_49;
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runSemiNCA(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  void *v13;
  int v14;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  unsigned int v65;
  _QWORD *buffer;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  BOOL v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t i;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  int v95;
  unsigned int v96;
  char *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t *j;
  int v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  int v115;
  BOOL v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t *v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  int v132;
  unsigned int v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  unsigned int v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t *v160;
  int v161;
  BOOL v162;
  unsigned int v163;
  uint64_t *v164;
  int v165;
  BOOL v166;
  unsigned int v167;
  char *v168;
  char *v169;
  int v170;
  BOOL v171;
  unsigned int v172;
  char *v173;
  int v174;
  BOOL v175;
  unsigned int v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184[2];
  _QWORD v185[34];

  v185[32] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v177 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v178 = v177 >> 3;
  if ((v177 >> 3) >= 2)
  {
    v7 = 1;
    while (1)
    {
      v184[0] = 0;
      v13 = *(void **)(v6 + 8 * v7);
      v184[0] = v13;
      v14 = *(_DWORD *)(a1 + 40);
      if (!v14)
        break;
      v8 = *(_QWORD *)(a1 + 24);
      v9 = v14 - 1;
      v10 = ((v13 >> 4) ^ (v13 >> 9)) & v9;
      v11 = (char *)(v8 + 72 * v10);
      v12 = *(_QWORD *)v11;
      if (v13 != *(void **)v11)
      {
        v16 = 0;
        v17 = 1;
        while (v12 != -4096)
        {
          if (v16)
            v18 = 0;
          else
            v18 = v12 == -8192;
          if (v18)
            v16 = v11;
          v19 = v10 + v17++;
          v10 = v19 & v9;
          v11 = (char *)(v8 + 72 * v10);
          v12 = *(_QWORD *)v11;
          if (v13 == *(void **)v11)
            goto LABEL_4;
        }
        if (v16)
          v15 = v16;
        else
          v15 = v11;
        goto LABEL_7;
      }
LABEL_4:
      *((_QWORD *)v11 + 4) = *(_QWORD *)(v6 + 8 * *((unsigned int *)v11 + 3));
      if (++v7 == (v177 >> 3))
        goto LABEL_20;
    }
    v15 = 0;
LABEL_7:
    v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(a1 + 24, v15, (uint64_t *)v184);
    v6 = *(_QWORD *)a1;
    goto LABEL_4;
  }
LABEL_20:
  v184[0] = v185;
  v184[1] = (void *)0x2000000000;
  v20 = (v178 - 1);
  if (v20 < 2)
    goto LABEL_233;
  v179 = a1 + 24;
  v21 = v177 >> 3;
  do
  {
    v180 = v20;
    v183 = 0;
    v22 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    v183 = v22;
    v23 = *(_DWORD *)(a1 + 40);
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + 24);
      v25 = v23 - 1;
      v26 = ((v22 >> 4) ^ (v22 >> 9)) & v25;
      v27 = (char *)(v24 + 72 * v26);
      v28 = *(_QWORD *)v27;
      if (v22 == *(_QWORD *)v27)
        goto LABEL_36;
      v29 = 0;
      v30 = 1;
      while (v28 != -4096)
      {
        if (v29)
          v31 = 0;
        else
          v31 = v28 == -8192;
        if (v31)
          v29 = v27;
        v32 = v26 + v30++;
        v26 = v32 & v25;
        v27 = (char *)(v24 + 72 * v26);
        v28 = *(_QWORD *)v27;
        if (v22 == *(_QWORD *)v27)
          goto LABEL_36;
      }
      if (v29)
        v33 = v29;
      else
        v33 = v27;
    }
    else
    {
      v33 = 0;
    }
    v27 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v179, v33, &v183);
LABEL_36:
    *((_DWORD *)v27 + 4) = *((_DWORD *)v27 + 3);
    v34 = *((unsigned int *)v27 + 12);
    if ((_DWORD)v34)
    {
      v35 = (uint64_t *)*((_QWORD *)v27 + 5);
      v36 = &v35[v34];
      while (1)
      {
        v37 = *v35;
        v38 = *(_QWORD *)(a2 + 24);
        v39 = *(unsigned int *)(a2 + 40);
        if (!(_DWORD)v39)
          goto LABEL_45;
        LODWORD(v40) = ((v37 >> 4) ^ (v37 >> 9)) & (v39 - 1);
        v41 = (uint64_t *)(v38 + 16 * v40);
        v42 = *v41;
        if (*v41 != v37)
          break;
LABEL_46:
        if (v41 == (uint64_t *)(v38 + 16 * v39) || (v45 = v41[1]) == 0 || *(_DWORD *)(v45 + 16) >= a3)
        {
          v46 = llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::eval(a1, v37, v21, (uint64_t)v184);
          v47 = v46;
          v48 = *(uint64_t **)(a1 + 24);
          v49 = *(unsigned int *)(a1 + 40);
          if (!(_DWORD)v49)
            goto LABEL_70;
          v50 = v49 - 1;
          v51 = ((v46 >> 4) ^ (v46 >> 9)) & (v49 - 1);
          v52 = &v48[9 * v51];
          v53 = *v52;
          if (v46 != *v52)
          {
            v54 = 0;
            v55 = 1;
            while (v53 != -4096)
            {
              if (v54)
                v56 = 0;
              else
                v56 = v53 == -8192;
              if (v56)
                v54 = v52;
              v57 = v51 + v55++;
              v51 = v57 & v50;
              v52 = &v48[9 * (v57 & v50)];
              v53 = *v52;
              if (v46 == *v52)
                goto LABEL_65;
            }
            if (v54)
              v52 = v54;
            v60 = *(_DWORD *)(a1 + 32);
            if (4 * v60 + 4 >= (3 * v49))
            {
LABEL_70:
              v61 = 2 * v49;
              goto LABEL_72;
            }
            if ((int)v49 + ~v60 - *(_DWORD *)(a1 + 36) <= v49 >> 3)
            {
              v61 = *(_DWORD *)(a1 + 40);
LABEL_72:
              v62 = (v61 - 1) | ((unint64_t)(v61 - 1) >> 1);
              v63 = v62 | (v62 >> 2) | ((v62 | (v62 >> 2)) >> 4);
              v64 = ((v63 | (v63 >> 8)) >> 16) | v63 | (v63 >> 8);
              if ((v64 + 1) > 0x40)
                v65 = v64 + 1;
              else
                v65 = 64;
              *(_DWORD *)(a1 + 40) = v65;
              buffer = llvm::allocate_buffer(72 * v65, (std::align_val_t)8uLL);
              *(_QWORD *)(a1 + 24) = buffer;
              if (v48)
              {
                v67 = 9 * v49;
                llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(v179, v48, &v48[v67]);
                llvm::deallocate_buffer((llvm *)v48, (void *)(v67 * 8));
              }
              *(_QWORD *)(a1 + 32) = 0;
              v68 = *(unsigned int *)(a1 + 40);
              v69 = 72 * v68 - 72;
              v70 = buffer;
              if (v69 < 0x48)
                goto LABEL_237;
              v71 = v69 / 0x48 + 1;
              v70 = &buffer[9 * (v71 & 0x7FFFFFFFFFFFFFELL)];
              v72 = v71 & 0x7FFFFFFFFFFFFFELL;
              v73 = buffer;
              do
              {
                *v73 = -4096;
                v73[9] = -4096;
                v73 += 18;
                v72 -= 2;
              }
              while (v72);
              if (v71 != (v71 & 0x7FFFFFFFFFFFFFELL))
              {
LABEL_237:
                do
                {
                  *v70 = -4096;
                  v70 += 9;
                }
                while (v70 != &buffer[9 * v68]);
              }
              v74 = v68 - 1;
              v75 = (v68 - 1) & ((v47 >> 4) ^ (v47 >> 9));
              v52 = &buffer[9 * v75];
              v76 = *v52;
              if (v47 == *v52)
              {
LABEL_83:
                ++*(_DWORD *)(a1 + 32);
                if (v47 == -4096)
                  goto LABEL_64;
              }
              else
              {
                v77 = 0;
                v78 = 1;
                while (v76 != -4096)
                {
                  if (v77)
                    v79 = 0;
                  else
                    v79 = v76 == -8192;
                  if (v79)
                    v77 = v52;
                  v80 = v75 + v78++;
                  v75 = v80 & v74;
                  v52 = &buffer[9 * (v80 & v74)];
                  v76 = *v52;
                  if (v47 == *v52)
                    goto LABEL_83;
                }
                if (v77)
                  v52 = v77;
                v81 = *v52;
                ++*(_DWORD *)(a1 + 32);
                if (v81 == -4096)
                  goto LABEL_64;
              }
LABEL_63:
              --*(_DWORD *)(a1 + 36);
              goto LABEL_64;
            }
            v58 = *v52;
            ++*(_DWORD *)(a1 + 32);
            if (v58 != -4096)
              goto LABEL_63;
LABEL_64:
            *v52 = v47;
            *(_OWORD *)(v52 + 5) = 0u;
            *(_OWORD *)(v52 + 1) = 0u;
            *(_OWORD *)(v52 + 3) = 0u;
            *(_OWORD *)(v52 + 7) = 0u;
            v52[5] = (uint64_t)(v52 + 7);
            *((_DWORD *)v52 + 13) = 2;
          }
LABEL_65:
          v59 = *((_DWORD *)v52 + 4);
          if (v59 < *((_DWORD *)v27 + 4))
            *((_DWORD *)v27 + 4) = v59;
        }
        if (++v35 == v36)
          goto LABEL_22;
      }
      v43 = 1;
      while (v42 != -4096)
      {
        v44 = v40 + v43++;
        v40 = v44 & (v39 - 1);
        v42 = *(_QWORD *)(v38 + 16 * v40);
        if (v42 == v37)
        {
          v41 = (uint64_t *)(v38 + 16 * v40);
          goto LABEL_46;
        }
      }
LABEL_45:
      v41 = (uint64_t *)(v38 + 16 * v39);
      goto LABEL_46;
    }
LABEL_22:
    v21 = v180;
    v20 = v180 - 1;
  }
  while (((v180 - 1) & 0xFFFFFFFELL) != 0);
  if (v178 >= 3)
  {
    v82 = (v177 >> 3);
    v83 = 0uLL;
    for (i = 2; i != v82; ++i)
    {
      v183 = 0;
      v85 = *(_QWORD *)a1;
      v86 = *(_QWORD *)(*(_QWORD *)a1 + 8 * i);
      v183 = v86;
      v87 = *(_DWORD *)(a1 + 40);
      if (v87)
      {
        v88 = *(_QWORD *)(a1 + 24);
        v89 = ((v86 >> 4) ^ (v86 >> 9)) & (v87 - 1);
        v90 = (char *)(v88 + 72 * v89);
        v91 = *(_QWORD *)v90;
        if (v86 == *(_QWORD *)v90)
        {
          v92 = (uint64_t *)(v85 + 8 * *((unsigned int *)v90 + 4));
          goto LABEL_111;
        }
        v93 = v82;
        v173 = 0;
        v174 = 1;
        while (v91 != -4096)
        {
          if (v173)
            v175 = 0;
          else
            v175 = v91 == -8192;
          if (v175)
            v173 = v90;
          v176 = v89 + v174++;
          v89 = v176 & (v87 - 1);
          v90 = (char *)(v88 + 72 * v89);
          v91 = *(_QWORD *)v90;
          if (v86 == *(_QWORD *)v90)
            goto LABEL_109;
        }
        if (v173)
          v94 = v173;
        else
          v94 = v90;
      }
      else
      {
        v93 = v82;
        v94 = 0;
      }
      v90 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v179, v94, &v183);
      v85 = *(_QWORD *)a1;
      v88 = *(_QWORD *)(a1 + 24);
      v87 = *(_DWORD *)(a1 + 40);
LABEL_109:
      v92 = (uint64_t *)(v85 + 8 * *((unsigned int *)v90 + 4));
      if (!v87)
      {
        v168 = 0;
LABEL_208:
        v97 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v179, v168, v92);
        v82 = v93;
        v83 = 0uLL;
        goto LABEL_112;
      }
      v82 = v93;
      v83 = 0uLL;
LABEL_111:
      v95 = v87 - 1;
      v96 = ((*v92 >> 4) ^ (*v92 >> 9)) & v95;
      v97 = (char *)(v88 + 72 * v96);
      v98 = *(_QWORD *)v97;
      if (*v92 != *(_QWORD *)v97)
      {
        v93 = v82;
        v169 = 0;
        v170 = 1;
        while (v98 != -4096)
        {
          if (v169)
            v171 = 0;
          else
            v171 = v98 == -8192;
          if (v171)
            v169 = v97;
          v172 = v96 + v170++;
          v96 = v172 & v95;
          v97 = (char *)(v88 + 72 * v96);
          v98 = *(_QWORD *)v97;
          v83 = 0uLL;
          if (*v92 == *(_QWORD *)v97)
          {
            v82 = v93;
            goto LABEL_112;
          }
        }
        if (v169)
          v168 = v169;
        else
          v168 = v97;
        goto LABEL_208;
      }
LABEL_112:
      v99 = *((_DWORD *)v97 + 2);
      v100 = (uint64_t *)(v90 + 32);
      for (j = (uint64_t *)(v90 + 32); ; j = v104 + 4)
      {
        v106 = *j;
        v107 = *(uint64_t **)(a1 + 24);
        v108 = *(unsigned int *)(a1 + 40);
        v109 = *j >> 4;
        if (!(_DWORD)v108)
          goto LABEL_143;
        v110 = v108 - 1;
        v111 = (v109 ^ (v106 >> 9)) & (v108 - 1);
        v112 = &v107[9 * v111];
        v113 = *v112;
        if (v106 == *v112)
          goto LABEL_132;
        v114 = 0;
        v115 = 1;
        while (v113 != -4096)
        {
          if (v114)
            v116 = 0;
          else
            v116 = v113 == -8192;
          if (v116)
            v114 = v112;
          v117 = v111 + v115++;
          v111 = v117 & v110;
          v112 = &v107[9 * (v117 & v110)];
          v113 = *v112;
          if (v106 == *v112)
            goto LABEL_132;
        }
        if (v114)
          v112 = v114;
        v122 = *(_DWORD *)(a1 + 32);
        if (4 * v122 + 4 < (3 * v108))
        {
          if ((int)v108 + ~v122 - *(_DWORD *)(a1 + 36) > v108 >> 3)
            goto LABEL_128;
          v181 = v82;
          v123 = *(_DWORD *)(a1 + 40);
        }
        else
        {
LABEL_143:
          v181 = v82;
          v123 = 2 * v108;
        }
        v130 = (v123 - 1) | ((unint64_t)(v123 - 1) >> 1);
        v131 = v130 | (v130 >> 2) | ((v130 | (v130 >> 2)) >> 4);
        v132 = ((v131 | (v131 >> 8)) >> 16) | v131 | (v131 >> 8);
        if ((v132 + 1) > 0x40)
          v133 = v132 + 1;
        else
          v133 = 64;
        *(_DWORD *)(a1 + 40) = v133;
        v134 = llvm::allocate_buffer(72 * v133, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 24) = v134;
        if (v107)
        {
          v135 = 9 * v108;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(v179, v107, &v107[v135]);
          llvm::deallocate_buffer((llvm *)v107, (void *)(v135 * 8));
        }
        *(_QWORD *)(a1 + 32) = 0;
        v142 = *(unsigned int *)(a1 + 40);
        v143 = 72 * v142 - 72;
        v144 = v134;
        v83 = 0uLL;
        if (v143 < 0x48)
          goto LABEL_238;
        v145 = v143 / 0x48 + 1;
        v144 = &v134[9 * (v145 & 0x7FFFFFFFFFFFFFELL)];
        v146 = v145 & 0x7FFFFFFFFFFFFFELL;
        v147 = v134;
        do
        {
          *v147 = -4096;
          v147[9] = -4096;
          v147 += 18;
          v146 -= 2;
        }
        while (v146);
        if (v145 != (v145 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_238:
          do
          {
            *v144 = -4096;
            v144 += 9;
          }
          while (v144 != &v134[9 * v142]);
        }
        v82 = v181;
        v148 = v142 - 1;
        v149 = (v142 - 1) & (v109 ^ (v106 >> 9));
        v112 = &v134[9 * v149];
        v150 = *v112;
        if (v106 == *v112)
        {
          v118 = v106;
          goto LABEL_129;
        }
        v160 = 0;
        v161 = 1;
        while (v150 != -4096)
        {
          if (v160)
            v162 = 0;
          else
            v162 = v150 == -8192;
          if (v162)
            v160 = v112;
          v163 = v149 + v161++;
          v149 = v163 & v148;
          v112 = &v134[9 * (v163 & v148)];
          v150 = *v112;
          if (v106 == *v112)
          {
            v118 = v106;
            v83 = 0uLL;
            goto LABEL_129;
          }
        }
        if (v160)
          v112 = v160;
        v83 = 0uLL;
LABEL_128:
        v118 = *v112;
LABEL_129:
        ++*(_DWORD *)(a1 + 32);
        if (v118 != -4096)
          --*(_DWORD *)(a1 + 36);
        *v112 = v106;
        *(_OWORD *)(v112 + 5) = v83;
        *(_OWORD *)(v112 + 1) = v83;
        *(_OWORD *)(v112 + 3) = v83;
        *(_OWORD *)(v112 + 7) = v83;
        v112[5] = (uint64_t)(v112 + 7);
        *((_DWORD *)v112 + 13) = 2;
LABEL_132:
        if (*((_DWORD *)v112 + 2) <= v99)
          break;
        v119 = *(uint64_t **)(a1 + 24);
        v120 = *(unsigned int *)(a1 + 40);
        if (!(_DWORD)v120)
          goto LABEL_156;
        v102 = v120 - 1;
        v103 = (v120 - 1) & (v109 ^ (v106 >> 9));
        v104 = &v119[9 * v103];
        v105 = *v104;
        if (v106 == *v104)
          continue;
        v124 = 0;
        v125 = 1;
        while (v105 != -4096)
        {
          if (v124)
            v126 = 0;
          else
            v126 = v105 == -8192;
          if (v126)
            v124 = v104;
          v127 = v103 + v125++;
          v103 = v127 & v102;
          v104 = &v119[9 * (v127 & v102)];
          v105 = *v104;
          if (v106 == *v104)
            goto LABEL_114;
        }
        if (v124)
          v104 = v124;
        v128 = *(_DWORD *)(a1 + 32);
        if (4 * v128 + 4 < (3 * v120))
        {
          if ((int)v120 + ~v128 - *(_DWORD *)(a1 + 36) > v120 >> 3)
            goto LABEL_136;
          v182 = v82;
          v129 = *(_DWORD *)(a1 + 40);
        }
        else
        {
LABEL_156:
          v182 = v82;
          v129 = 2 * v120;
        }
        v136 = (v129 - 1) | ((unint64_t)(v129 - 1) >> 1);
        v137 = v136 | (v136 >> 2) | ((v136 | (v136 >> 2)) >> 4);
        v138 = ((v137 | (v137 >> 8)) >> 16) | v137 | (v137 >> 8);
        if ((v138 + 1) > 0x40)
          v139 = v138 + 1;
        else
          v139 = 64;
        *(_DWORD *)(a1 + 40) = v139;
        v140 = llvm::allocate_buffer(72 * v139, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 24) = v140;
        if (v119)
        {
          v141 = 9 * v120;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(v179, v119, &v119[v141]);
          llvm::deallocate_buffer((llvm *)v119, (void *)(v141 * 8));
        }
        *(_QWORD *)(a1 + 32) = 0;
        v151 = *(unsigned int *)(a1 + 40);
        v152 = 72 * v151 - 72;
        v153 = v140;
        v83 = 0uLL;
        if (v152 < 0x48)
          goto LABEL_239;
        v154 = v152 / 0x48 + 1;
        v153 = &v140[9 * (v154 & 0x7FFFFFFFFFFFFFELL)];
        v155 = v154 & 0x7FFFFFFFFFFFFFELL;
        v156 = v140;
        do
        {
          *v156 = -4096;
          v156[9] = -4096;
          v156 += 18;
          v155 -= 2;
        }
        while (v155);
        if (v154 != (v154 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_239:
          do
          {
            *v153 = -4096;
            v153 += 9;
          }
          while (v153 != &v140[9 * v151]);
        }
        v82 = v182;
        v157 = v151 - 1;
        v158 = (v151 - 1) & (v109 ^ (v106 >> 9));
        v104 = &v140[9 * v158];
        v159 = *v104;
        if (v106 == *v104)
        {
          v121 = v106;
          goto LABEL_137;
        }
        v164 = 0;
        v165 = 1;
        while (v159 != -4096)
        {
          if (v164)
            v166 = 0;
          else
            v166 = v159 == -8192;
          if (v166)
            v164 = v104;
          v167 = v158 + v165++;
          v158 = v167 & v157;
          v104 = &v140[9 * (v167 & v157)];
          v159 = *v104;
          if (v106 == *v104)
          {
            v121 = v106;
            v83 = 0uLL;
            goto LABEL_137;
          }
        }
        if (v164)
          v104 = v164;
        v83 = 0uLL;
LABEL_136:
        v121 = *v104;
LABEL_137:
        ++*(_DWORD *)(a1 + 32);
        if (v121 != -4096)
          --*(_DWORD *)(a1 + 36);
        *v104 = v106;
        *(_OWORD *)(v104 + 5) = v83;
        *(_OWORD *)(v104 + 1) = v83;
        *(_OWORD *)(v104 + 3) = v83;
        *(_OWORD *)(v104 + 7) = v83;
        v104[5] = (uint64_t)(v104 + 7);
        *((_DWORD *)v104 + 13) = 2;
LABEL_114:
        ;
      }
      *v100 = v106;
    }
  }
LABEL_233:
  if (v184[0] != v185)
    free(v184[0]);
}

char *llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::attachNewSubtree(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t NodeForBlock;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;

  v5 = *a3;
  v8 = *(_QWORD *)(a1 + 24);
  result = (char *)(a1 + 24);
  v7 = v8;
  v9 = *(_QWORD *)a1;
  v10 = (uint64_t *)(*(_QWORD *)a1 + 8);
  v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    v12 = v11 - 1;
    v13 = ((*v10 >> 4) ^ (*v10 >> 9)) & (v11 - 1);
    v14 = (char *)(v7 + 72 * v13);
    v15 = *(_QWORD *)v14;
    if (*v10 == *(_QWORD *)v14)
      goto LABEL_14;
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (char *)(v7 + 72 * (v19 & v12));
      v15 = *(_QWORD *)v14;
      if (*v10 == *(_QWORD *)v14)
        goto LABEL_14;
    }
    if (v16)
      v20 = v16;
    else
      v20 = v14;
  }
  else
  {
    v20 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>((uint64_t)result, v20, v10);
  v14 = result;
  v9 = *(_QWORD *)a1;
LABEL_14:
  *((_QWORD *)v14 + 4) = v5;
  v21 = *(_QWORD *)(a1 + 8) - v9;
  if (v21 != 8)
  {
    v22 = v21 >> 3;
    for (i = 1; i != v22; ++i)
    {
      v44 = 0;
      v26 = *(_QWORD *)(*(_QWORD *)a1 + 8 * i);
      v44 = v26;
      v27 = *(_DWORD *)(a2 + 40);
      if (v27)
      {
        v28 = *(_QWORD *)(a2 + 24);
        v29 = v27 - 1;
        v30 = ((v26 >> 4) ^ (v26 >> 9)) & v29;
        result = (char *)(v28 + 16 * v30);
        v31 = *(_QWORD *)result;
        if (v26 == *(_QWORD *)result)
          goto LABEL_33;
        v32 = 0;
        v33 = 1;
        while (v31 != -4096)
        {
          if (v32)
            v34 = 0;
          else
            v34 = v31 == -8192;
          if (v34)
            v32 = (uint64_t *)result;
          v35 = v30 + v33++;
          v30 = v35 & v29;
          result = (char *)(v28 + 16 * v30);
          v31 = *(_QWORD *)result;
          if (v26 == *(_QWORD *)result)
            goto LABEL_33;
        }
        if (v32)
          v36 = v32;
        else
          v36 = (uint64_t *)result;
      }
      else
      {
        v36 = 0;
      }
      result = (char *)llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::InsertIntoBucket<mlir::Block * const&>(a2 + 24, v36, &v44);
LABEL_33:
      if (!*((_QWORD *)result + 1))
      {
        v37 = *(_QWORD *)(a1 + 24);
        v38 = *(_DWORD *)(a1 + 40);
        if (!v38)
          goto LABEL_40;
        v39 = ((v44 >> 4) ^ (v44 >> 9)) & (v38 - 1);
        v40 = (uint64_t *)(v37 + 72 * v39);
        v41 = *v40;
        if (*v40 != v44)
        {
          v42 = 1;
          while (v41 != -4096)
          {
            v43 = v39 + v42++;
            v39 = v43 & (v38 - 1);
            v40 = (uint64_t *)(v37 + 72 * v39);
            v41 = *v40;
            if (*v40 == v44)
              goto LABEL_41;
          }
LABEL_40:
          v40 = (uint64_t *)(v37 + 72 * v38);
        }
LABEL_41:
        if (v40 == (uint64_t *)(v37 + 72 * v38))
          v24 = 0;
        else
          v24 = v40[4];
        NodeForBlock = llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getNodeForBlock(a1, v24, a2);
        result = (char *)llvm::DominatorTreeBase<mlir::Block,false>::createChild(a2, v44, NodeForBlock);
      }
    }
  }
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(uint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(72 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 9 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 72 * v17 - 72;
  v19 = buffer;
  if (v18 < 0x48)
    goto LABEL_34;
  v20 = v18 / 0x48 + 1;
  v19 = &buffer[9 * (v20 & 0x7FFFFFFFFFFFFFELL)];
  v21 = v20 & 0x7FFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[9] = -4096;
    v22 += 18;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0x7FFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 9;
    }
    while (v19 != &buffer[9 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = (char *)&buffer[9 * v24];
  v25 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = (char *)&buffer[9 * v24];
      v25 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *((_QWORD *)a2 + 5) = a2 + 56;
  *((_DWORD *)a2 + 13) = 2;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 72 * v6 - 72;
    if (v8 < 0x48)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[9 * v6];
      do
      {
        *v9 = -4096;
        v9 += 9;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x48 + 1;
    v9 = &v7[9 * (v10 & 0x7FFFFFFFFFFFFFELL)];
    v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[9] = -4096;
      v12 += 18;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16) - 1;
        v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        v17 = (_QWORD *)(*(_QWORD *)a1 + 72 * v16);
        v18 = *v17;
        if (v14 != *v17)
        {
          v23 = 0;
          v24 = 1;
          while (v18 != -4096)
          {
            if (v23)
              v25 = 0;
            else
              v25 = v18 == -8192;
            if (v25)
              v23 = v17;
            v26 = v16 + v24++;
            v16 = v26 & v15;
            v17 = (_QWORD *)(*(_QWORD *)a1 + 72 * v16);
            v18 = *v17;
            if (v14 == *v17)
              goto LABEL_14;
          }
          if (v23)
            v17 = v23;
        }
LABEL_14:
        *v17 = v14;
        v19 = *(_OWORD *)(v4 + 1);
        v20 = *(_OWORD *)(v4 + 3);
        v17[5] = v17 + 7;
        v21 = (uint64_t)(v17 + 5);
        *(_OWORD *)(v21 - 32) = v19;
        *(_OWORD *)(v21 - 16) = v20;
        *(_QWORD *)(v21 + 8) = 0x200000000;
        if (*((_DWORD *)v4 + 12))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v21, (uint64_t)(v4 + 5));
        ++*(_DWORD *)(a1 + 8);
        v22 = (uint64_t *)v4[5];
        if (v22 != v4 + 7)
          free(v22);
      }
      v4 += 9;
    }
    while (v4 != a3);
  }
}

void llvm::GraphDiff<mlir::Block *,false>::getChildren<false>(int *a1@<X0>, mlir::Block *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *i;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  int v28;
  int v29;
  unsigned int v30;
  int *v31;
  int v32;
  unsigned int v33;
  mlir::Block *v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD v50[2];

  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v50, a2);
  v6 = v50[0];
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v50, a2);
  v8 = v50[0];
  v7 = v50[1];
  v9 = a3 + 2;
  *a3 = a3 + 2;
  a3[1] = 0x800000000;
  if (v7 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, v9, v7, 8);
    v10 = *((unsigned int *)a3 + 2);
    v9 = (_QWORD *)(*a3 + 8 * v10);
    if (v8 == v6)
      goto LABEL_11;
LABEL_8:
    for (i = (uint64_t *)(v8 + 32 * v7 - 8); ; i -= 4)
    {
      v16 = *i;
      *v9++ = v16;
    }
  }
  if (!v7 && v8 == v6)
  {
    v11 = a3 + 2;
    v12 = 0;
    v13 = (uint64_t)(a3 + 2);
    v14 = 0;
    goto LABEL_18;
  }
  if (v8 != v6)
    goto LABEL_8;
  LODWORD(v10) = 0;
LABEL_11:
  v17 = (uint64_t *)(v8 + 32 * v7 - 8);
  v18 = v7;
  do
  {
    v19 = *v17;
    v17 -= 4;
    *v9++ = v19;
    --v18;
  }
  while (v18);
  v9 = (_QWORD *)*a3;
  v11 = (_QWORD *)*a3;
  v12 = (v10 + v7);
  v23 = (_DWORD)v10 + (_DWORD)v7 == 0;
  v13 = *a3 + 8 * v12;
  v14 = 8 * v12;
  if (!v23)
  {
    v20 = 8 * v12;
    v11 = (_QWORD *)*a3;
    while (*v11)
    {
      ++v11;
      v20 -= 8;
      if (!v20)
      {
        v11 = (_QWORD *)(*a3 + 8 * v12);
        break;
      }
    }
  }
LABEL_18:
  v21 = v11 - v9;
  v22 = v11 + 1;
  v23 = v21 == v12 || v22 == (_QWORD *)v13;
  if (!v23)
  {
    v24 = v14 - 8 * v21 - 8;
    do
    {
      if (*v22)
        *v11++ = *v22;
      ++v22;
      v24 -= 8;
    }
    while (v24);
    v9 = (_QWORD *)*a3;
  }
  v25 = (char *)v11 - (char *)v9;
  v26 = (unint64_t)((char *)v11 - (char *)v9) >> 3;
  *((_DWORD *)a3 + 2) = v26;
  v27 = a1 + 2;
  v28 = *a1;
  if ((*a1 & 1) != 0)
  {
    v29 = 4;
  }
  else
  {
    v27 = (int *)*((_QWORD *)a1 + 1);
    v29 = a1[4];
    if (!v29)
    {
      v30 = 0;
LABEL_30:
      v31 = &v27[18 * v30];
      goto LABEL_34;
    }
  }
  v32 = v29 - 1;
  v33 = (v29 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v31 = &v27[18 * v33];
  v34 = *(mlir::Block **)v31;
  if (*(mlir::Block **)v31 != a2)
  {
    v35 = 1;
    while (v34 != (mlir::Block *)-4096)
    {
      v36 = v33 + v35++;
      v33 = v36 & v32;
      v31 = &v27[18 * (v36 & v32)];
      v34 = *(mlir::Block **)v31;
      if (*(mlir::Block **)v31 == a2)
        goto LABEL_33;
    }
    if ((v28 & 1) == 0)
    {
      v27 = (int *)*((_QWORD *)a1 + 1);
      v30 = a1[4];
      goto LABEL_30;
    }
    v31 = a1 + 74;
LABEL_43:
    if (v31 == a1 + 74)
      return;
    goto LABEL_44;
  }
LABEL_33:
  if ((v28 & 1) != 0)
    goto LABEL_43;
LABEL_34:
  if (v31 == (int *)(*((_QWORD *)a1 + 1) + 72 * a1[4]))
    return;
LABEL_44:
  v37 = v31[4];
  if ((_DWORD)v37)
  {
    v38 = (v25 >> 3);
    v39 = (uint64_t *)*((_QWORD *)v31 + 1);
    v40 = &v39[v37];
    do
    {
      v42 = *v39;
      v43 = 8 * v38;
      v44 = v9;
      v45 = &v9[v38];
      if (v38)
      {
        v46 = 8 * v38;
        v44 = v9;
        while (*v44 != v42)
        {
          ++v44;
          v46 -= 8;
          if (!v46)
          {
            v44 = &v9[v38];
            break;
          }
        }
      }
      v47 = v44 - v9;
      if (v47 != v38)
      {
        v48 = v44 + 1;
        if (v44 + 1 != v45)
        {
          v49 = v43 - 8 * v47 - 8;
          do
          {
            if (*v48 != v42)
              *v44++ = *v48;
            ++v48;
            v49 -= 8;
          }
          while (v49);
          v9 = (_QWORD *)*a3;
        }
      }
      v41 = (char *)v44 - (char *)v9;
      v38 = (v41 >> 3);
      ++v39;
    }
    while (v39 != v40);
    v26 = v41 >> 3;
    *((_DWORD *)a3 + 2) = v38;
  }
  llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)a3, (uint64_t)&v9[v26], *((char **)v31 + 5), (char *)(*((_QWORD *)v31 + 5) + 8 * v31[12]));
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getChildren<false>(mlir::Block *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v23, a1);
  v4 = v23[0];
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v23, a1);
  v6 = v23[0];
  v5 = v23[1];
  v7 = a2 + 2;
  *a2 = a2 + 2;
  a2[1] = 0x800000000;
  if (v5 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, v7, v5, 8);
    v8 = *((unsigned int *)a2 + 2);
    v7 = (_QWORD *)(*a2 + 8 * v8);
    if (v6 == v4)
      goto LABEL_11;
LABEL_8:
    for (i = (uint64_t *)(v6 + 32 * v5 - 8); ; i -= 4)
    {
      v14 = *i;
      *v7++ = v14;
    }
  }
  if (!v5 && v6 == v4)
  {
    v9 = a2 + 2;
    v10 = 0;
    v11 = (uint64_t)(a2 + 2);
    v12 = 0;
    goto LABEL_18;
  }
  if (v6 != v4)
    goto LABEL_8;
  LODWORD(v8) = 0;
LABEL_11:
  v15 = (uint64_t *)(v6 + 32 * v5 - 8);
  v16 = v5;
  do
  {
    v17 = *v15;
    v15 -= 4;
    *v7++ = v17;
    --v16;
  }
  while (v16);
  v7 = (_QWORD *)*a2;
  v9 = (_QWORD *)*a2;
  v10 = (v8 + v5);
  v21 = (_DWORD)v8 + (_DWORD)v5 == 0;
  v11 = *a2 + 8 * v10;
  v12 = 8 * v10;
  if (!v21)
  {
    v18 = 8 * v10;
    v9 = (_QWORD *)*a2;
    while (*v9)
    {
      ++v9;
      v18 -= 8;
      if (!v18)
      {
        v9 = (_QWORD *)(*a2 + 8 * v10);
        break;
      }
    }
  }
LABEL_18:
  v19 = v9 - v7;
  v20 = v9 + 1;
  v21 = v19 == v10 || v20 == (_QWORD *)v11;
  if (!v21)
  {
    v22 = v12 - 8 * v19 - 8;
    do
    {
      if (*v20)
        *v9++ = *v20;
      ++v20;
      v22 -= 8;
    }
    while (v22);
    v7 = (_QWORD *)*a2;
  }
  *((_DWORD *)a2 + 2) = (unint64_t)((char *)v9 - (char *)v7) >> 3;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::eval(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  char *v18;
  char *v19;
  char *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  char *v30;
  char *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  char *v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  char *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  char *v60;
  uint64_t v61;

  v61 = a2;
  v8 = a1 + 24;
  v7 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
    v12 = (char *)(v7 + 72 * v11);
    v13 = *(_QWORD *)v12;
    if (*(_QWORD *)v12 == a2)
      goto LABEL_14;
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (char *)(v7 + 72 * v11);
      v13 = *(_QWORD *)v12;
      if (*(_QWORD *)v12 == a2)
        goto LABEL_14;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v12;
  }
  else
  {
    v18 = 0;
  }
  v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v8, v18, &v61);
LABEL_14:
  if (*((_DWORD *)v12 + 3) >= a3)
  {
    v21 = v12 + 8;
    while (1)
    {
      v27 = *(unsigned int *)(a4 + 8);
      if (v27 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v27 + 1, 8);
        v27 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v27) = v21;
      ++*(_DWORD *)(a4 + 8);
      v28 = (uint64_t *)(*(_QWORD *)a1 + 8 * *((unsigned int *)v21 + 1));
      v29 = *(_DWORD *)(a1 + 40);
      if (!v29)
        break;
      v22 = *(_QWORD *)(a1 + 24);
      v23 = v29 - 1;
      v24 = ((*v28 >> 4) ^ (*v28 >> 9)) & v23;
      v25 = (char *)(v22 + 72 * v24);
      v26 = *(_QWORD *)v25;
      if (*v28 != *(_QWORD *)v25)
      {
        v31 = 0;
        v32 = 1;
        while (v26 != -4096)
        {
          if (v31)
            v33 = 0;
          else
            v33 = v26 == -8192;
          if (v33)
            v31 = v25;
          v34 = v24 + v32++;
          v24 = v34 & v23;
          v25 = (char *)(v22 + 72 * v24);
          v26 = *(_QWORD *)v25;
          if (*v28 == *(_QWORD *)v25)
            goto LABEL_19;
        }
        if (v31)
          v30 = v31;
        else
          v30 = v25;
        goto LABEL_24;
      }
LABEL_19:
      v21 = v25 + 8;
      if (*((_DWORD *)v25 + 3) < a3)
      {
        v35 = (uint64_t *)(v25 + 24);
        v36 = *(_DWORD *)(a1 + 40);
        if (!v36)
        {
          v46 = 0;
          goto LABEL_49;
        }
        v37 = *(_QWORD *)(a1 + 24);
        v38 = v36 - 1;
        v39 = ((*v35 >> 4) ^ (*v35 >> 9)) & v38;
        v40 = (char *)(v37 + 72 * v39);
        v41 = *(_QWORD *)v40;
        if (*v35 != *(_QWORD *)v40)
        {
          v42 = 0;
          v43 = 1;
          while (v41 != -4096)
          {
            if (v42)
              v44 = 0;
            else
              v44 = v41 == -8192;
            if (v44)
              v42 = v40;
            v45 = v39 + v43++;
            v39 = v45 & v38;
            v40 = (char *)(v37 + 72 * v39);
            v41 = *(_QWORD *)v40;
            if (*v35 == *(_QWORD *)v40)
              goto LABEL_50;
          }
          if (v42)
            v46 = v42;
          else
            v46 = v40;
LABEL_49:
          v40 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v8, v46, v35);
        }
LABEL_50:
        v47 = v40 + 8;
        v48 = *(_DWORD *)(a4 + 8);
        while (2)
        {
          v49 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v48 - 8);
          *(_DWORD *)(a4 + 8) = v48 - 1;
          *(_DWORD *)(v49 + 4) = *((_DWORD *)v21 + 1);
          v19 = (char *)(v49 + 16);
          v50 = *(_DWORD *)(a1 + 40);
          if (v50)
          {
            v51 = *(_QWORD *)(a1 + 24);
            v52 = v50 - 1;
            v53 = ((*(_QWORD *)v19 >> 4) ^ (*(_QWORD *)v19 >> 9)) & v52;
            v54 = (char *)(v51 + 72 * v53);
            v55 = *(_QWORD *)v54;
            if (*(_QWORD *)v19 != *(_QWORD *)v54)
            {
              v56 = 0;
              v57 = 1;
              while (v55 != -4096)
              {
                if (v56)
                  v58 = 0;
                else
                  v58 = v55 == -8192;
                if (v58)
                  v56 = v54;
                v59 = v53 + v57++;
                v53 = v59 & v52;
                v54 = (char *)(v51 + 72 * v53);
                v55 = *(_QWORD *)v54;
                if (*(_QWORD *)v19 == *(_QWORD *)v54)
                  goto LABEL_65;
              }
              if (v56)
                v60 = v56;
              else
                v60 = v54;
LABEL_64:
              v54 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v8, v60, (uint64_t *)(v49 + 16));
            }
LABEL_65:
            if (*((_DWORD *)v47 + 2) < *((_DWORD *)v54 + 4))
            {
              *(_QWORD *)v19 = *((_QWORD *)v21 + 2);
              v48 = *(_DWORD *)(a4 + 8);
              v21 = (char *)v49;
              if (!v48)
                return *(_QWORD *)v19;
            }
            else
            {
              v47 = v54 + 8;
              v48 = *(_DWORD *)(a4 + 8);
              v21 = (char *)v49;
              if (!v48)
                return *(_QWORD *)v19;
            }
            continue;
          }
          break;
        }
        v60 = 0;
        goto LABEL_64;
      }
    }
    v30 = 0;
LABEL_24:
    v25 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v8, v30, v28);
    goto LABEL_19;
  }
  v19 = v12 + 24;
  return *(_QWORD *)v19;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getNodeForBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t NodeForBlock;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(unsigned int *)(a3 + 40);
  v7 = a2 >> 4;
  if (!(_DWORD)v6)
  {
LABEL_7:
    v9 = (uint64_t *)(v5 + 16 * v6);
    goto LABEL_8;
  }
  LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
  v9 = (uint64_t *)(v5 + 16 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v6 - 1);
      v10 = *(_QWORD *)(v5 + 16 * v8);
      if (v10 == a2)
      {
        v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v9 != (uint64_t *)(v5 + 16 * v6) && v9[1])
    return v9[1];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(a1 + 40);
  if (v15)
  {
    v16 = (v15 - 1) & (v7 ^ (a2 >> 9));
    v17 = *(_QWORD *)(v14 + 72 * v16);
    if (v17 != a2)
    {
      v18 = 1;
      do
      {
        if (v17 == -4096)
          break;
        v19 = v16 + v18++;
        v16 = v19 & (v15 - 1);
        v17 = *(_QWORD *)(v14 + 72 * v16);
      }
      while (v17 != a2);
    }
  }
  NodeForBlock = llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getNodeForBlock();
  return llvm::DominatorTreeBase<mlir::Block,false>::createChild(a3, a2, NodeForBlock);
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::AlwaysDescend()
{
  return 1;
}

unsigned int *llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = a1 + 8;
    v5 = 4;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v5)
      goto LABEL_13;
    v6 = *(_QWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(v6 + 56);
  v8 = 72 * v5;
  do
  {
    if ((*(v7 - 7) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = (_QWORD *)*(v7 - 2);
      if (v7 != v9)
        free(v9);
      v10 = (char *)*(v7 - 6);
      if (v7 - 4 != (_QWORD *)v10)
        free(v10);
    }
    v7 += 9;
    v8 -= 72;
  }
  while (v8);
  v4 = *(_DWORD *)a1;
LABEL_13:
  if ((v4 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(72 * *(unsigned int *)(a1 + 16)));
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 5u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v11 = 4;
    else
      v11 = a2[4];
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(8 * (v11 + 8 * v11), (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>,mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom<llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>>((unsigned int *)a1, a2);
}

unsigned int *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>,mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom<llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>>(unsigned int *result, _DWORD *a2)
{
  unint64_t v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unsigned int *v20;
  _DWORD *v21;

  v2 = 0;
  v3 = *a2 & 0xFFFFFFFE | *result & 1;
  *result = v3;
  result[1] = a2[1];
  v4 = result + 2;
  v5 = a2 + 2;
  v6 = 5;
  v20 = result;
  v21 = a2;
  while ((v3 & 1) == 0)
  {
    if (v2 >= result[4])
      return result;
    v8 = (_QWORD *)*v4;
LABEL_10:
    v9 = v5;
    if ((*(_BYTE *)a2 & 1) == 0)
      v9 = (_QWORD *)*v5;
    v8[v6 - 5] = v9[v6 - 5];
    if ((*(_BYTE *)result & 1) != 0)
    {
      v10 = v4;
      if ((v4[v6 - 5] | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_5;
    }
    else
    {
      v10 = (_QWORD *)*v4;
      if ((*(_QWORD *)(*v4 + v6 * 8 - 40) | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_5;
    }
    v11 = v5;
    if ((*(_BYTE *)a2 & 1) == 0)
      v11 = (_QWORD *)*v5;
    v12 = (void **)&v10[v6 - 4];
    v13 = &v11[v6];
    v14 = &v10[v6 - 2];
    *v12 = v14;
    v10[v6 - 3] = 0x200000000;
    if (v10 != v11)
    {
      v15 = *((unsigned int *)v13 - 6);
      if (*((_DWORD *)v13 - 6))
      {
        if (v15 < 3)
        {
          v16 = *((unsigned int *)v13 - 6);
LABEL_24:
          memcpy(v14, (const void *)*(v13 - 4), 8 * v16);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10[v6 - 4], &v10[v6 - 2], *((unsigned int *)v13 - 6), 8);
          v16 = *((unsigned int *)v13 - 6);
          if ((_DWORD)v16)
          {
            v14 = *v12;
            goto LABEL_24;
          }
        }
        LODWORD(v10[v6 - 3]) = v15;
        result = v20;
        a2 = v21;
      }
    }
    v17 = &v10[v6];
    v18 = &v10[v6 + 2];
    *v17 = v18;
    v17[1] = 0x200000000;
    if (v10 != v11)
    {
      v19 = *((unsigned int *)v13 + 2);
      if (*((_DWORD *)v13 + 2))
      {
        if (v19 >= 3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10[v6], &v10[v6 + 2], *((unsigned int *)v13 + 2), 8);
          v7 = *((unsigned int *)v13 + 2);
          if ((_DWORD)v7)
          {
            v18 = (_QWORD *)*v17;
LABEL_3:
            memcpy(v18, (const void *)*v13, 8 * v7);
          }
          *((_DWORD *)v17 + 2) = v19;
          result = v20;
          a2 = v21;
          goto LABEL_5;
        }
        v7 = *((unsigned int *)v13 + 2);
        goto LABEL_3;
      }
    }
LABEL_5:
    ++v2;
    v3 = *((_DWORD *)v4 - 2);
    v6 += 9;
  }
  v8 = v4;
  if (v2 < 4)
    goto LABEL_10;
  return result;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(mlir::Block *), int a5, uint64_t *a6)
{
  uint64_t *v6;
  uint64_t v9;
  int v10;
  int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  mlir::Block *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  char *v28;
  mlir::Block *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  mlir::Block **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  mlir::Block *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t **v54;
  uint64_t **v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char *v61;
  uint64_t *v62;
  int v63;
  unsigned int v64;
  mlir::Block *v65;
  _DWORD *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  unsigned int v72;
  uint64_t *v73;
  char *v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  char *v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  char *v88;
  char *v89;
  uint64_t v92;
  mlir::Block *v94;
  uint64_t v95;
  uint64_t *v96;
  void *v97;
  unsigned int v98;
  _BYTE v99[64];
  void *v100;
  uint64_t v101;
  _QWORD v102[66];

  v6 = a6;
  v102[64] = *MEMORY[0x1E0C80C00];
  v95 = a2;
  v100 = v102;
  v102[0] = a2;
  v101 = 0x4000000001;
  v9 = *(_QWORD *)(a1 + 24);
  v92 = a1 + 24;
  v10 = *(_DWORD *)(a1 + 40);
  if (!v10)
    goto LABEL_4;
  v12 = v10 - 1;
  v13 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v14 = (char *)(v9 + 72 * v13);
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14 == a2)
  {
LABEL_3:
    *(_DWORD *)(v9 + 72 * v13 + 12) = a5;
LABEL_4:
    v16 = 1;
    goto LABEL_7;
  }
  v80 = 1;
  v81 = *(_QWORD *)v14;
  v82 = v12 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v81 == -4096)
      goto LABEL_4;
    v83 = v82 + v80++;
    v82 = v83 & v12;
    v81 = *(_QWORD *)(v9 + 72 * v82);
  }
  while (v81 != a2);
  v84 = 0;
  v85 = 1;
  v6 = a6;
  while (v15 != -4096)
  {
    if (v84)
      v86 = 0;
    else
      v86 = v15 == -8192;
    if (v86)
      v84 = v14;
    v87 = v13 + v85++;
    v13 = v87 & v12;
    v14 = (char *)(v9 + 72 * v13);
    v15 = *(_QWORD *)v14;
    if (*(_QWORD *)v14 == a2)
      goto LABEL_3;
  }
  if (v84)
    v88 = v84;
  else
    v88 = v14;
  v89 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v92, v88, &v95);
  v16 = v101;
  *((_DWORD *)v89 + 3) = a5;
  v6 = a6;
  if (v16)
  {
LABEL_7:
    v94 = 0;
    v17 = (mlir::Block *)*((_QWORD *)v100 + v16 - 1);
    LODWORD(v101) = v16 - 1;
    v94 = v17;
    v18 = *(_DWORD *)(a1 + 40);
    if (v18)
    {
      v19 = *(_QWORD *)(a1 + 24);
      v20 = v18 - 1;
      v21 = v20 & ((v17 >> 4) ^ (v17 >> 9));
      v22 = (char *)(v19 + 72 * v21);
      v23 = *(_QWORD *)v22;
      if (v17 == *(mlir::Block **)v22)
        goto LABEL_20;
      v24 = 0;
      v25 = 1;
      while (v23 != -4096)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v23 == -8192;
        if (v26)
          v24 = v22;
        v27 = v21 + v25++;
        v21 = v27 & v20;
        v22 = (char *)(v19 + 72 * v21);
        v23 = *(_QWORD *)v22;
        if (v17 == *(mlir::Block **)v22)
          goto LABEL_20;
      }
      if (v24)
        v28 = v24;
      else
        v28 = v22;
    }
    else
    {
      v28 = 0;
    }
    v22 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v92, v28, (uint64_t *)&v94);
LABEL_20:
    if (*((_DWORD *)v22 + 2))
      goto LABEL_6;
    a3 = (a3 + 1);
    *((_DWORD *)v22 + 4) = a3;
    *((_DWORD *)v22 + 2) = a3;
    v29 = v94;
    *((_QWORD *)v22 + 3) = v94;
    v31 = *(char **)(a1 + 8);
    v30 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v31 < v30)
    {
      *(_QWORD *)v31 = v29;
      v32 = (uint64_t)(v31 + 8);
      goto LABEL_44;
    }
    v33 = a3;
    v34 = *(char **)a1;
    v35 = (uint64_t)&v31[-*(_QWORD *)a1];
    v36 = v35 >> 3;
    v37 = (v35 >> 3) + 1;
    if (v37 >> 61)
      abort();
    v38 = v30 - (_QWORD)v34;
    if (v38 >> 2 > v37)
      v37 = v38 >> 2;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v39 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v40 = operator new(8 * v39);
      v41 = (mlir::Block **)&v40[8 * v36];
      *v41 = v29;
      v32 = (uint64_t)(v41 + 1);
      if (v31 != v34)
      {
LABEL_32:
        v42 = v31 - 8 - v34;
        if (v42 >= 0x58)
        {
          v43 = v31 - &v40[v35];
          a3 = v33;
          v6 = a6;
          if (v43 >= 0x20)
          {
            v44 = (v42 >> 3) + 1;
            v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
            v46 = &v31[-v45];
            v41 = (mlir::Block **)((char *)v41 - v45);
            v47 = &v40[8 * v36 - 16];
            v48 = v31 - 16;
            v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *v47 = v50;
              v47 -= 2;
              v48 -= 32;
              v49 -= 4;
            }
            while (v49);
            v31 = v46;
            if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_42:
              v31 = *(char **)a1;
              *(_QWORD *)a1 = v41;
              *(_QWORD *)(a1 + 8) = v32;
              *(_QWORD *)(a1 + 16) = &v40[8 * v39];
              if (!v31)
                goto LABEL_44;
              goto LABEL_43;
            }
          }
        }
        else
        {
          a3 = v33;
          v6 = a6;
        }
        do
        {
          v51 = (mlir::Block *)*((_QWORD *)v31 - 1);
          v31 -= 8;
          *--v41 = v51;
        }
        while (v31 != v34);
        goto LABEL_42;
      }
    }
    else
    {
      v40 = 0;
      v41 = (mlir::Block **)(8 * v36);
      *(_QWORD *)(8 * v36) = v29;
      v32 = 8 * v36 + 8;
      if (v31 != v34)
        goto LABEL_32;
    }
    a3 = v33;
    v6 = a6;
    *(_QWORD *)a1 = v41;
    *(_QWORD *)(a1 + 8) = v32;
    *(_QWORD *)(a1 + 16) = &v40[8 * v39];
    if (!v31)
    {
LABEL_44:
      *(_QWORD *)(a1 + 8) = v32;
      v52 = *(_QWORD *)(a1 + 48);
      if (v52)
      {
        llvm::GraphDiff<mlir::Block *,false>::getChildren<false>(*(int **)(v52 + 8), v94, &v97);
        v53 = v98;
        if (!v6)
          goto LABEL_50;
      }
      else
      {
        llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getChildren<false>(v94, &v97);
        v53 = v98;
        if (!v6)
          goto LABEL_50;
      }
      if (v53 >= 2)
      {
        v96 = v6;
        std::__introsort<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**,false>((uint64_t)v97, (uint64_t *)v97 + v53, &v96, 126 - 2 * __clz(v53), 1);
        v53 = v98;
      }
LABEL_50:
      v54 = (uint64_t **)v97;
      v55 = (uint64_t **)((char *)v97 + 8 * v53);
      if (!v53)
      {
        if (v97 != v99)
          goto LABEL_91;
        goto LABEL_6;
      }
      while (1)
      {
        v96 = 0;
        v57 = *v54;
        v96 = *v54;
        v58 = *(_QWORD *)(a1 + 24);
        v59 = *(_DWORD *)(a1 + 40);
        if (v59)
        {
          v60 = (v59 - 1) & ((v57 >> 4) ^ (v57 >> 9));
          v61 = (char *)(v58 + 72 * v60);
          v62 = *(uint64_t **)v61;
          if (*(uint64_t **)v61 == v57)
            goto LABEL_63;
          v63 = 1;
          while (v62 != (uint64_t *)-4096)
          {
            v64 = v60 + v63++;
            v60 = v64 & (v59 - 1);
            v61 = (char *)(v58 + 72 * v60);
            v62 = *(uint64_t **)v61;
            if (*(uint64_t **)v61 == v57)
              goto LABEL_63;
          }
        }
        v61 = (char *)(v58 + 72 * v59);
LABEL_63:
        if (v61 == (char *)(v58 + 72 * v59))
        {
          v65 = v94;
LABEL_69:
          if (!a4(v65))
            goto LABEL_55;
          v68 = *(_DWORD *)(a1 + 40);
          if (v68)
          {
            v69 = *(_QWORD *)(a1 + 24);
            v70 = v96;
            v71 = v68 - 1;
            v72 = ((v96 >> 4) ^ (v96 >> 9)) & v71;
            v61 = (char *)(v69 + 72 * v72);
            v73 = *(uint64_t **)v61;
            if (v96 != *(uint64_t **)v61)
            {
              v74 = 0;
              v75 = 1;
              while (v73 != (uint64_t *)-4096)
              {
                if (v74)
                  v76 = 0;
                else
                  v76 = v73 == (uint64_t *)-8192;
                if (v76)
                  v74 = v61;
                v77 = v72 + v75++;
                v72 = v77 & v71;
                v61 = (char *)(v69 + 72 * v72);
                v73 = *(uint64_t **)v61;
                if (v96 == *(uint64_t **)v61)
                  goto LABEL_83;
              }
              if (v74)
                v78 = v74;
              else
                v78 = v61;
LABEL_82:
              v61 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v92, v78, (uint64_t *)&v96);
              v70 = v96;
            }
LABEL_83:
            v79 = v101;
            if (v101 >= (unint64_t)HIDWORD(v101))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v101 + 1, 8);
              v79 = v101;
            }
            *((_QWORD *)v100 + v79) = v70;
            v66 = v61 + 48;
            v56 = *((unsigned int *)v61 + 12);
            LODWORD(v101) = v101 + 1;
            *((_DWORD *)v61 + 3) = a3;
            v67 = v61 + 40;
            v65 = v94;
            if (v56 < *((unsigned int *)v61 + 13))
              goto LABEL_54;
LABEL_53:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v67, v61 + 56, v56 + 1, 8);
            v56 = *((unsigned int *)v61 + 12);
            goto LABEL_54;
          }
          v78 = 0;
          goto LABEL_82;
        }
        v65 = v94;
        if (!*((_DWORD *)v61 + 2))
          goto LABEL_69;
        if (v57 == (uint64_t *)v94)
          goto LABEL_55;
        v66 = v61 + 48;
        v56 = *((unsigned int *)v61 + 12);
        v67 = v61 + 40;
        if (v56 >= *((unsigned int *)v61 + 13))
          goto LABEL_53;
LABEL_54:
        *(_QWORD *)(*v67 + 8 * v56) = v65;
        ++*v66;
LABEL_55:
        if (++v54 == v55)
        {
          v54 = (uint64_t **)v97;
          if (v97 != v99)
LABEL_91:
            free(v54);
LABEL_6:
          v16 = v101;
          if (!(_DWORD)v101)
            goto LABEL_113;
          goto LABEL_7;
        }
      }
    }
LABEL_43:
    operator delete(v31);
    goto LABEL_44;
  }
LABEL_113:
  if (v100 != v102)
    free(v100);
  return a3;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**,false>(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v63 = a2 - 3;
  v64 = a2 - 2;
  v11 = v9;
  v65 = a2 - 1;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v41 = *(a2 - 1);
        v42 = *v11;
        v43 = **a3;
        v44 = *((unsigned int *)*a3 + 4);
        if (!(_DWORD)v44)
          goto LABEL_58;
        v45 = v44 - 1;
        LODWORD(v46) = (v44 - 1) & ((v41 >> 4) ^ (v41 >> 9));
        v47 = v43 + 16 * v46;
        v48 = *(_QWORD *)v47;
        if (*(_QWORD *)v47 == v41)
        {
          v49 = *(_DWORD *)(v47 + 8);
          goto LABEL_61;
        }
        v56 = 1;
        while (v48 != -4096)
        {
          v57 = v46 + v56++;
          v46 = v57 & v45;
          v48 = *(_QWORD *)(v43 + 16 * v46);
          if (v48 == v41)
            goto LABEL_59;
        }
LABEL_58:
        v46 = *((unsigned int *)*a3 + 4);
LABEL_59:
        v49 = *(_DWORD *)(v43 + 16 * v46 + 8);
        if (!(_DWORD)v44)
          goto LABEL_68;
        v45 = v44 - 1;
LABEL_61:
        LODWORD(v58) = v45 & ((v42 >> 4) ^ (v42 >> 9));
        v59 = v43 + 16 * v58;
        v60 = *(_QWORD *)v59;
        if (*(_QWORD *)v59 == v42)
          goto LABEL_62;
        v61 = 1;
        while (v60 != -4096)
        {
          v62 = v58 + v61++;
          v58 = v62 & v45;
          v60 = *(_QWORD *)(v43 + 16 * v58);
          if (v60 == v42)
          {
            v59 = v43 + 16 * v58;
            goto LABEL_62;
          }
        }
LABEL_68:
        v59 = v43 + 16 * v44;
LABEL_62:
        if (v49 < *(_DWORD *)(v59 + 8))
        {
          *v11 = v41;
          *(a2 - 1) = v42;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, v11 + 1, v10, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, v11 + 1, v11 + 2, v10, a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, v11 + 1, v11 + 2, v11 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, a2, a3);
        }
        if (a4)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v15, v9, v10, a3);
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v9, v15, v10, a3);
            v16 = a4;
            v17 = a2;
            v18 = a5;
            v19 = &v9[v14];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v9 + 1, v19 - 1, v64, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v9 + 2, &v9[v14 + 1], v63, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v19 - 1, v15, &v9[v14 + 1], a3);
            v20 = *v9;
            *v9 = *v19;
            *v19 = v20;
            a5 = v18;
            a2 = v17;
            v21 = v16;
            v10 = v65;
            a4 = v21 - 1;
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          v22 = *v9;
          v23 = **a3;
          v24 = *((unsigned int *)*a3 + 4);
          if ((_DWORD)v24)
          {
            v25 = *(v9 - 1);
            v26 = v24 - 1;
            LODWORD(v27) = (v24 - 1) & ((v25 >> 4) ^ (v25 >> 9));
            v28 = v23 + 16 * v27;
            v29 = *(_QWORD *)v28;
            if (*(_QWORD *)v28 == v25)
            {
              v30 = *(_DWORD *)(v28 + 8);
              goto LABEL_20;
            }
            v31 = 1;
            while (v29 != -4096)
            {
              v32 = v27 + v31++;
              v27 = v32 & v26;
              v29 = *(_QWORD *)(v23 + 16 * v27);
              if (v29 == v25)
                goto LABEL_18;
            }
          }
          v27 = *((unsigned int *)*a3 + 4);
LABEL_18:
          v30 = *(_DWORD *)(v23 + 16 * v27 + 8);
          if (!(_DWORD)v24)
            goto LABEL_31;
          v26 = v24 - 1;
LABEL_20:
          LODWORD(v33) = v26 & ((v22 >> 4) ^ (v22 >> 9));
          v34 = v23 + 16 * v33;
          v35 = *(_QWORD *)v34;
          if (*(_QWORD *)v34 == v22)
            goto LABEL_21;
          v39 = 1;
          while (v35 != -4096)
          {
            v40 = v33 + v39++;
            v33 = v40 & v26;
            v35 = *(_QWORD *)(v23 + 16 * v33);
            if (v35 == v22)
            {
              v34 = v23 + 16 * v33;
              goto LABEL_21;
            }
          }
LABEL_31:
          v34 = v23 + 16 * v24;
LABEL_21:
          if (v30 >= *(_DWORD *)(v34 + 8))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(v9, a2, a3);
            v11 = (uint64_t *)result;
            a5 = 0;
            continue;
          }
LABEL_22:
          v36 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(v9, a2, a3);
          if ((v37 & 1) == 0)
            goto LABEL_25;
          v38 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v9, v36, a3);
          v11 = v36 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v36 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v38)
              continue;
LABEL_25:
            result = std::__introsort<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**,false>(v9, v36, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v36 + 1;
            continue;
          }
          a2 = v36;
          if (v38)
            return result;
          goto LABEL_2;
        }
        if (v11 != a2)
        {
          v50 = (v13 - 2) >> 1;
          v51 = v50 + 1;
          v52 = &v11[v50];
          do
          {
            std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>((uint64_t)v11, (unint64_t *)a3, v13, v52--);
            --v51;
          }
          while (v51);
          v53 = (unint64_t)v12 >> 3;
          do
          {
            while (1)
            {
              v55 = *v11;
              result = (uint64_t)std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, a3, v53);
              if (v10 == (uint64_t *)result)
                break;
              *(_QWORD *)result = *v10;
              *v10-- = v55;
              result = std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>((uint64_t)v11, result + 8, a3, (result + 8 - (uint64_t)v11) >> 3);
              v54 = v53-- <= 2;
              if (v54)
                return result;
            }
            *(_QWORD *)result = v55;
            --v10;
            v54 = v53-- <= 2;
          }
          while (!v54);
        }
        return result;
    }
  }
}

_QWORD *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(_QWORD *result, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = result;
      do
      {
        v6 = v3;
        v8 = *v4;
        v7 = v4[1];
        v9 = **a3;
        v10 = *((unsigned int *)*a3 + 4);
        v11 = v7 >> 4;
        if ((_DWORD)v10)
        {
          v12 = v10 - 1;
          LODWORD(v13) = (v10 - 1) & (v11 ^ (v7 >> 9));
          v14 = (uint64_t *)(v9 + 16 * v13);
          v15 = *v14;
          if (*v14 == v7)
          {
            v16 = *((_DWORD *)v14 + 2);
            goto LABEL_17;
          }
          v17 = 1;
          while (v15 != -4096)
          {
            v18 = v13 + v17++;
            v13 = v18 & v12;
            v15 = *(_QWORD *)(v9 + 16 * v13);
            if (v15 == v7)
              goto LABEL_15;
          }
        }
        v13 = *((unsigned int *)*a3 + 4);
LABEL_15:
        v16 = *(_DWORD *)(v9 + 16 * v13 + 8);
        if (!(_DWORD)v10)
          goto LABEL_43;
        v12 = v10 - 1;
LABEL_17:
        LODWORD(v19) = v12 & ((v8 >> 4) ^ (v8 >> 9));
        v20 = (uint64_t *)(v9 + 16 * v19);
        v21 = *v20;
        if (*v20 != v8)
        {
          v38 = 1;
          while (v21 != -4096)
          {
            v39 = v19 + v38++;
            v19 = v39 & v12;
            v21 = *(_QWORD *)(v9 + 16 * v19);
            if (v21 == v8)
            {
              if (v16 >= *(_DWORD *)(v9 + 16 * v19 + 8))
                goto LABEL_6;
              goto LABEL_19;
            }
          }
LABEL_43:
          if (v16 >= *(_DWORD *)(v9 + 16 * v10 + 8))
            goto LABEL_6;
          goto LABEL_19;
        }
        if (v16 >= *((_DWORD *)v20 + 2))
          goto LABEL_6;
LABEL_19:
        v22 = v11 ^ (v7 >> 9);
        v5 = v6;
        while (1)
        {
          *v5 = v8;
          if (v4 == result)
            break;
          v5 = v4;
          v27 = *--v4;
          v8 = v27;
          v28 = **a3;
          v29 = *((unsigned int *)*a3 + 4);
          if ((_DWORD)v29)
          {
            v23 = v29 - 1;
            LODWORD(v30) = (v29 - 1) & v22;
            v31 = (uint64_t *)(v28 + 16 * v30);
            v32 = *v31;
            if (*v31 == v7)
            {
              v33 = *((_DWORD *)v31 + 2);
              goto LABEL_21;
            }
            v36 = 1;
            while (v32 != -4096)
            {
              v37 = v30 + v36++;
              v30 = v37 & v23;
              v32 = *(_QWORD *)(v28 + 16 * v30);
              if (v32 == v7)
                goto LABEL_36;
            }
          }
          v30 = *((unsigned int *)*a3 + 4);
LABEL_36:
          v33 = *(_DWORD *)(v28 + 16 * v30 + 8);
          if (!(_DWORD)v29)
            goto LABEL_37;
          v23 = v29 - 1;
LABEL_21:
          LODWORD(v24) = v23 & ((v8 >> 4) ^ (v8 >> 9));
          v25 = (uint64_t *)(v28 + 16 * v24);
          v26 = *v25;
          if (*v25 != v8)
          {
            v34 = 1;
            while (v26 != -4096)
            {
              v35 = v24 + v34++;
              v24 = v35 & v23;
              v26 = *(_QWORD *)(v28 + 16 * v24);
              if (v26 == v8)
              {
                v25 = (uint64_t *)(v28 + 16 * v24);
                goto LABEL_22;
              }
            }
LABEL_37:
            v25 = (uint64_t *)(v28 + 16 * v29);
          }
LABEL_22:
          if (v33 >= *((_DWORD *)v25 + 2))
            goto LABEL_5;
        }
        v5 = result;
LABEL_5:
        *v5 = v7;
LABEL_6:
        v3 = v6 + 1;
        v4 = v6;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(_QWORD *result, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;

  if (result != a2)
  {
    v3 = result + 1;
    while (1)
    {
      if (v3 == a2)
        return result;
      v4 = v3;
      v6 = *result;
      v5 = result[1];
      v7 = **a3;
      v8 = *((unsigned int *)*a3 + 4);
      v9 = v5 >> 4;
      if ((_DWORD)v8)
      {
        v10 = v8 - 1;
        LODWORD(v11) = (v8 - 1) & (v9 ^ (v5 >> 9));
        v12 = (uint64_t *)(v7 + 16 * v11);
        v13 = *v12;
        if (*v12 == v5)
        {
          v14 = *((_DWORD *)v12 + 2);
          goto LABEL_16;
        }
        v15 = 1;
        while (v13 != -4096)
        {
          v16 = v11 + v15++;
          v11 = v16 & v10;
          v13 = *(_QWORD *)(v7 + 16 * v11);
          if (v13 == v5)
            goto LABEL_14;
        }
      }
      v11 = *((unsigned int *)*a3 + 4);
LABEL_14:
      v14 = *(_DWORD *)(v7 + 16 * v11 + 8);
      if (!(_DWORD)v8)
        goto LABEL_40;
      v10 = v8 - 1;
LABEL_16:
      LODWORD(v17) = v10 & ((v6 >> 4) ^ (v6 >> 9));
      v18 = (uint64_t *)(v7 + 16 * v17);
      v19 = *v18;
      if (*v18 == v6)
        goto LABEL_17;
      v37 = 1;
      while (v19 != -4096)
      {
        v38 = v17 + v37++;
        v17 = v38 & v10;
        v19 = *(_QWORD *)(v7 + 16 * v17);
        if (v19 == v6)
        {
          v18 = (uint64_t *)(v7 + 16 * v17);
          goto LABEL_17;
        }
      }
LABEL_40:
      v18 = (uint64_t *)(v7 + 16 * v8);
LABEL_17:
      if (v14 < *((_DWORD *)v18 + 2))
      {
        v20 = v9 ^ (v5 >> 9);
        v21 = v4;
        while (1)
        {
          *v21 = v6;
          v21 = result;
          v26 = *--result;
          v6 = v26;
          v27 = **a3;
          v28 = *((unsigned int *)*a3 + 4);
          if ((_DWORD)v28)
          {
            v22 = v28 - 1;
            LODWORD(v29) = (v28 - 1) & v20;
            v30 = (uint64_t *)(v27 + 16 * v29);
            v31 = *v30;
            if (*v30 == v5)
            {
              v32 = *((_DWORD *)v30 + 2);
              goto LABEL_20;
            }
            v35 = 1;
            while (v31 != -4096)
            {
              v36 = v29 + v35++;
              v29 = v36 & v22;
              v31 = *(_QWORD *)(v27 + 16 * v29);
              if (v31 == v5)
                goto LABEL_34;
            }
          }
          v29 = *((unsigned int *)*a3 + 4);
LABEL_34:
          v32 = *(_DWORD *)(v27 + 16 * v29 + 8);
          if (!(_DWORD)v28)
            goto LABEL_35;
          v22 = v28 - 1;
LABEL_20:
          LODWORD(v23) = v22 & ((v6 >> 4) ^ (v6 >> 9));
          v24 = (uint64_t *)(v27 + 16 * v23);
          v25 = *v24;
          if (*v24 != v6)
          {
            v33 = 1;
            while (v25 != -4096)
            {
              v34 = v23 + v33++;
              v23 = v34 & v22;
              v25 = *(_QWORD *)(v27 + 16 * v23);
              if (v25 == v6)
              {
                v24 = (uint64_t *)(v27 + 16 * v23);
                goto LABEL_21;
              }
            }
LABEL_35:
            v24 = (uint64_t *)(v27 + 16 * v28);
          }
LABEL_21:
          if (v32 >= *((_DWORD *)v24 + 2))
          {
            *v21 = v5;
            break;
          }
        }
      }
      v3 = v4 + 1;
      result = v4;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;

  v4 = *a2;
  v5 = *a1;
  v6 = **a4;
  v7 = *((unsigned int *)*a4 + 4);
  v8 = *a2 >> 4;
  v9 = *a1 >> 4;
  if ((_DWORD)v7)
  {
    v10 = v7 - 1;
    LODWORD(v11) = (v7 - 1) & (v8 ^ (v4 >> 9));
    v12 = (uint64_t *)(v6 + 16 * v11);
    v13 = *v12;
    if (*v12 == v4)
    {
      v14 = *((_DWORD *)v12 + 2);
      LODWORD(v15) = v10 & (v9 ^ (v5 >> 9));
      v16 = (uint64_t *)(v6 + 16 * v15);
      v17 = *v16;
      if (*v16 == v5)
        goto LABEL_4;
      goto LABEL_20;
    }
    v38 = 1;
    while (v13 != -4096)
    {
      v39 = v11 + v38++;
      v11 = v39 & v10;
      v13 = *(_QWORD *)(v6 + 16 * v11);
      if (v13 == v4)
        goto LABEL_18;
    }
  }
  v11 = *((unsigned int *)*a4 + 4);
LABEL_18:
  v14 = *(_DWORD *)(v6 + 16 * v11 + 8);
  if (!(_DWORD)v7)
    goto LABEL_24;
  v10 = v7 - 1;
  LODWORD(v15) = (v7 - 1) & (v9 ^ (v5 >> 9));
  v16 = (uint64_t *)(v6 + 16 * v15);
  v17 = *v16;
  if (*v16 == v5)
  {
LABEL_4:
    v18 = *a3;
    if (v14 < *((_DWORD *)v16 + 2))
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_20:
  v40 = 1;
  while (v17 != -4096)
  {
    v41 = v15 + v40++;
    v15 = v41 & v10;
    v17 = *(_QWORD *)(v6 + 16 * v15);
    if (v17 == v5)
      goto LABEL_25;
  }
LABEL_24:
  v15 = *((unsigned int *)*a4 + 4);
LABEL_25:
  v42 = *(_DWORD *)(v6 + 16 * v15 + 8);
  v18 = *a3;
  if (v14 < v42)
  {
    if (!(_DWORD)v7)
      goto LABEL_41;
    v10 = v7 - 1;
LABEL_5:
    LODWORD(v19) = ((v18 >> 4) ^ (v18 >> 9)) & v10;
    v20 = (uint64_t *)(v6 + 16 * v19);
    v21 = *v20;
    if (*v20 == v18)
    {
      v22 = *((_DWORD *)v20 + 2);
      LODWORD(v23) = v10 & (v8 ^ (v4 >> 9));
      v24 = (uint64_t *)(v6 + 16 * v23);
      v25 = *v24;
      if (*v24 == v4)
        goto LABEL_7;
      goto LABEL_44;
    }
    v59 = 1;
    while (v21 != -4096)
    {
      v60 = v19 + v59++;
      v19 = v60 & v10;
      v21 = *(_QWORD *)(v6 + 16 * v19);
      if (v21 == v18)
        goto LABEL_42;
    }
LABEL_41:
    v19 = *((unsigned int *)*a4 + 4);
LABEL_42:
    v22 = *(_DWORD *)(v6 + 16 * v19 + 8);
    if (!(_DWORD)v7)
      goto LABEL_48;
    v10 = v7 - 1;
    LODWORD(v23) = (v7 - 1) & (v8 ^ (v4 >> 9));
    v24 = (uint64_t *)(v6 + 16 * v23);
    v25 = *v24;
    if (*v24 == v4)
      goto LABEL_7;
LABEL_44:
    v61 = 1;
    while (v25 != -4096)
    {
      v62 = v23 + v61++;
      v23 = v62 & v10;
      v25 = *(_QWORD *)(v6 + 16 * v23);
      if (v25 == v4)
      {
        v24 = (uint64_t *)(v6 + 16 * v23);
        goto LABEL_7;
      }
    }
LABEL_48:
    v24 = (uint64_t *)(v6 + 16 * v7);
LABEL_7:
    if (v22 < *((_DWORD *)v24 + 2))
    {
      *a1 = v18;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v27 = *a3;
    v28 = **a4;
    v29 = *((unsigned int *)*a4 + 4);
    if ((_DWORD)v29)
    {
      v30 = v29 - 1;
      LODWORD(v31) = (v29 - 1) & ((v27 >> 4) ^ (v27 >> 9));
      v32 = (uint64_t *)(v28 + 16 * v31);
      v33 = *v32;
      if (*v32 == v27)
      {
        v34 = *((_DWORD *)v32 + 2);
        LODWORD(v35) = v30 & (v9 ^ (v5 >> 9));
        v36 = (uint64_t *)(v28 + 16 * v35);
        v37 = *v36;
        if (*v36 == v5)
          goto LABEL_73;
        goto LABEL_68;
      }
      v67 = 1;
      while (v33 != -4096)
      {
        v68 = v31 + v67++;
        v31 = v68 & v30;
        v33 = *(_QWORD *)(v28 + 16 * v31);
        if (v33 == v27)
          goto LABEL_66;
      }
    }
    v31 = *((unsigned int *)*a4 + 4);
LABEL_66:
    v34 = *(_DWORD *)(v28 + 16 * v31 + 8);
    if (!(_DWORD)v29)
      goto LABEL_72;
    v30 = v29 - 1;
    LODWORD(v35) = (v29 - 1) & (v9 ^ (v5 >> 9));
    v36 = (uint64_t *)(v28 + 16 * v35);
    v37 = *v36;
    if (*v36 == v5)
      goto LABEL_73;
LABEL_68:
    v69 = 1;
    while (v37 != -4096)
    {
      v70 = v35 + v69++;
      v35 = v70 & v30;
      v37 = *(_QWORD *)(v28 + 16 * v35);
      if (v37 == v5)
      {
        v36 = (uint64_t *)(v28 + 16 * v35);
        goto LABEL_73;
      }
    }
LABEL_72:
    v36 = (uint64_t *)(v28 + 16 * v29);
LABEL_73:
    if (v34 < *((_DWORD *)v36 + 2))
    {
      *a2 = v27;
      *a3 = v5;
      return 2;
    }
    return 1;
  }
  if (!(_DWORD)v7)
    goto LABEL_53;
  v10 = v7 - 1;
LABEL_30:
  LODWORD(v43) = ((v18 >> 4) ^ (v18 >> 9)) & v10;
  v44 = (uint64_t *)(v6 + 16 * v43);
  v45 = *v44;
  if (*v44 == v18)
  {
    v46 = *((_DWORD *)v44 + 2);
    LODWORD(v47) = v10 & (v8 ^ (v4 >> 9));
    v48 = (uint64_t *)(v6 + 16 * v47);
    v49 = *v48;
    if (*v48 == v4)
      goto LABEL_32;
    goto LABEL_56;
  }
  v63 = 1;
  while (v45 != -4096)
  {
    v64 = v43 + v63++;
    v43 = v64 & v10;
    v45 = *(_QWORD *)(v6 + 16 * v43);
    if (v45 == v18)
      goto LABEL_54;
  }
LABEL_53:
  v43 = *((unsigned int *)*a4 + 4);
LABEL_54:
  v46 = *(_DWORD *)(v6 + 16 * v43 + 8);
  if (!(_DWORD)v7)
    goto LABEL_60;
  v10 = v7 - 1;
  LODWORD(v47) = (v7 - 1) & (v8 ^ (v4 >> 9));
  v48 = (uint64_t *)(v6 + 16 * v47);
  v49 = *v48;
  if (*v48 == v4)
    goto LABEL_32;
LABEL_56:
  v65 = 1;
  while (v49 != -4096)
  {
    v66 = v47 + v65++;
    v47 = v66 & v10;
    v49 = *(_QWORD *)(v6 + 16 * v47);
    if (v49 == v4)
    {
      v48 = (uint64_t *)(v6 + 16 * v47);
      goto LABEL_32;
    }
  }
LABEL_60:
  v48 = (uint64_t *)(v6 + 16 * v7);
LABEL_32:
  if (v46 >= *((_DWORD *)v48 + 2))
    return 0;
  *a2 = v18;
  *a3 = v4;
  v50 = *a2;
  v51 = *a1;
  v52 = **a4;
  v53 = *((unsigned int *)*a4 + 4);
  if ((_DWORD)v53)
  {
    v54 = v53 - 1;
    LODWORD(v55) = (v53 - 1) & ((v50 >> 4) ^ (v50 >> 9));
    v56 = (uint64_t *)(v52 + 16 * v55);
    v57 = *v56;
    if (*v56 == v50)
    {
      v58 = *((_DWORD *)v56 + 2);
      goto LABEL_82;
    }
    v71 = 1;
    while (v57 != -4096)
    {
      v72 = v55 + v71++;
      v55 = v72 & v54;
      v57 = *(_QWORD *)(v52 + 16 * v55);
      if (v57 == v50)
        goto LABEL_80;
    }
  }
  v55 = *((unsigned int *)*a4 + 4);
LABEL_80:
  v58 = *(_DWORD *)(v52 + 16 * v55 + 8);
  if (!(_DWORD)v53)
    goto LABEL_90;
  v54 = v53 - 1;
LABEL_82:
  LODWORD(v73) = v54 & ((v51 >> 4) ^ (v51 >> 9));
  v74 = (uint64_t *)(v52 + 16 * v73);
  v75 = *v74;
  if (*v74 == v51)
    goto LABEL_83;
  v76 = 1;
  while (v75 != -4096)
  {
    v77 = v73 + v76++;
    v73 = v77 & v54;
    v75 = *(_QWORD *)(v52 + 16 * v73);
    if (v75 == v51)
    {
      v74 = (uint64_t *)(v52 + 16 * v73);
      goto LABEL_83;
    }
  }
LABEL_90:
  v74 = (uint64_t *)(v52 + 16 * v53);
LABEL_83:
  if (v58 < *((_DWORD *)v74 + 2))
  {
    *a1 = v50;
    *a2 = v51;
    return 2;
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int *v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v92;
  int v93;

  v3 = *a1;
  v4 = *(a2 - 1);
  v5 = **a3;
  v6 = *((unsigned int *)*a3 + 4);
  v7 = *a1 >> 4;
  if ((_DWORD)v6)
  {
    v8 = v6 - 1;
    LODWORD(v9) = (v6 - 1) & (v7 ^ (v3 >> 9));
    v10 = (uint64_t *)(v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == v3)
    {
      v12 = *((_DWORD *)v10 + 2);
      goto LABEL_11;
    }
    v13 = 1;
    while (v11 != -4096)
    {
      v14 = v9 + v13++;
      v9 = v14 & v8;
      v11 = *(_QWORD *)(v5 + 16 * v9);
      if (v11 == v3)
        goto LABEL_9;
    }
  }
  v9 = *((unsigned int *)*a3 + 4);
LABEL_9:
  v12 = *(_DWORD *)(v5 + 16 * v9 + 8);
  if (!(_DWORD)v6)
    goto LABEL_107;
  v8 = v6 - 1;
LABEL_11:
  LODWORD(v15) = v8 & ((v4 >> 4) ^ (v4 >> 9));
  v16 = (uint64_t *)(v5 + 16 * v15);
  v17 = *v16;
  if (*v16 == v4)
    goto LABEL_12;
  v92 = 1;
  while (v17 != -4096)
  {
    v93 = v15 + v92++;
    v15 = v93 & v8;
    v17 = *(_QWORD *)(v5 + 16 * v15);
    if (v17 == v4)
    {
      v16 = (uint64_t *)(v5 + 16 * v15);
      goto LABEL_12;
    }
  }
LABEL_107:
  v16 = (uint64_t *)(v5 + 16 * v6);
LABEL_12:
  v18 = v7 ^ (v3 >> 9);
  v19 = v6 - 1;
  v20 = (_QWORD *)(v5 + 16 * (((_DWORD)v6 - 1) & v18));
  v21 = (unsigned int *)(v5 + 16 * v6 + 8);
  v22 = a1;
  if (v12 >= *((_DWORD *)v16 + 2))
  {
    while (1)
    {
      if (++v22 >= a2)
        goto LABEL_47;
      if ((_DWORD)v6)
      {
        v38 = *v20;
        v39 = (unsigned int *)(v20 + 1);
        if (*v20 != v3)
        {
          v44 = 1;
          LODWORD(v45) = v19 & v18;
          while (v38 != -4096)
          {
            v46 = v45 + v44++;
            v45 = v46 & v19;
            v38 = *(_QWORD *)(v5 + 16 * v45);
            if (v38 == v3)
              goto LABEL_46;
          }
          v45 = *((unsigned int *)*a3 + 4);
LABEL_46:
          v39 = (unsigned int *)(v5 + 16 * v45 + 8);
        }
        v36 = *v39;
        LODWORD(v40) = ((*v22 >> 4) ^ (*v22 >> 9)) & v19;
        v37 = (uint64_t *)(v5 + 16 * v40);
        v41 = *v37;
        if (*v37 == *v22)
          goto LABEL_32;
        v42 = 1;
        while (v41 != -4096)
        {
          v43 = v40 + v42++;
          v40 = v43 & v19;
          v41 = *(_QWORD *)(v5 + 16 * v40);
          if (v41 == *v22)
          {
            v37 = (uint64_t *)(v5 + 16 * v40);
            goto LABEL_32;
          }
        }
      }
      else
      {
        v36 = *v21;
      }
      v37 = (uint64_t *)(v5 + 16 * v6);
LABEL_32:
      if (v36 < *((_DWORD *)v37 + 2))
        goto LABEL_47;
    }
  }
  do
  {
    v26 = v22[1];
    ++v22;
    v25 = v26;
    if (!(_DWORD)v6)
    {
      v23 = *v21;
LABEL_15:
      v24 = (uint64_t *)(v5 + 16 * v6);
      continue;
    }
    v27 = *v20;
    v28 = (unsigned int *)(v20 + 1);
    if (*v20 != v3)
    {
      v33 = 1;
      LODWORD(v34) = v19 & v18;
      while (v27 != -4096)
      {
        v35 = v34 + v33++;
        v34 = v35 & v19;
        v27 = *(_QWORD *)(v5 + 16 * v34);
        if (v27 == v3)
          goto LABEL_29;
      }
      v34 = *((unsigned int *)*a3 + 4);
LABEL_29:
      v28 = (unsigned int *)(v5 + 16 * v34 + 8);
    }
    v23 = *v28;
    LODWORD(v29) = ((v25 >> 4) ^ (v25 >> 9)) & v19;
    v24 = (uint64_t *)(v5 + 16 * v29);
    v30 = *v24;
    if (*v24 != v25)
    {
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v29 + v31++;
        v29 = v32 & v19;
        v30 = *(_QWORD *)(v5 + 16 * v29);
        if (v30 == v25)
        {
          v24 = (uint64_t *)(v5 + 16 * v29);
          goto LABEL_16;
        }
      }
      goto LABEL_15;
    }
LABEL_16:
    ;
  }
  while (v23 >= *((_DWORD *)v24 + 2));
LABEL_47:
  if (v22 < a2)
  {
    do
    {
      v81 = *--a2;
      v80 = v81;
      if ((_DWORD)v6)
      {
        v82 = *v20;
        v83 = (unsigned int *)(v20 + 1);
        if (*v20 != v3)
        {
          v88 = 1;
          LODWORD(v89) = v19 & v18;
          while (v82 != -4096)
          {
            v90 = v89 + v88++;
            v89 = v90 & v19;
            v82 = *(_QWORD *)(v5 + 16 * v89);
            if (v82 == v3)
              goto LABEL_99;
          }
          v89 = *((unsigned int *)*a3 + 4);
LABEL_99:
          v83 = (unsigned int *)(v5 + 16 * v89 + 8);
        }
        v78 = *v83;
        LODWORD(v84) = ((v80 >> 4) ^ (v80 >> 9)) & v19;
        v79 = (uint64_t *)(v5 + 16 * v84);
        v85 = *v79;
        if (*v79 == v80)
          continue;
        v86 = 1;
        while (v85 != -4096)
        {
          v87 = v84 + v86++;
          v84 = v87 & v19;
          v85 = *(_QWORD *)(v5 + 16 * v84);
          if (v85 == v80)
          {
            v79 = (uint64_t *)(v5 + 16 * v84);
            goto LABEL_86;
          }
        }
      }
      else
      {
        v78 = *v21;
      }
      v79 = (uint64_t *)(v5 + 16 * v6);
LABEL_86:
      ;
    }
    while (v78 < *((_DWORD *)v79 + 2));
  }
  if (v22 < a2)
  {
    v47 = *v22;
    v48 = *a2;
    do
    {
      *v22 = v48;
      *a2 = v47;
      v49 = **a3;
      v50 = *((unsigned int *)*a3 + 4);
      v51 = v50 - 1;
      v52 = (_QWORD *)(v49 + 16 * (((_DWORD)v50 - 1) & v18));
      v53 = (unsigned int *)(v49 + 16 * v50 + 8);
      do
      {
        v56 = v22[1];
        ++v22;
        v47 = v56;
        if (!(_DWORD)v50)
        {
          v54 = *v53;
LABEL_53:
          v55 = (uint64_t *)(v49 + 16 * v50);
          continue;
        }
        v57 = *v52;
        v58 = (unsigned int *)(v52 + 1);
        if (*v52 != v3)
        {
          v63 = 1;
          LODWORD(v64) = v51 & v18;
          while (v57 != -4096)
          {
            v65 = v64 + v63++;
            v64 = v65 & v51;
            v57 = *(_QWORD *)(v49 + 16 * v64);
            if (v57 == v3)
              goto LABEL_67;
          }
          v64 = *((unsigned int *)*a3 + 4);
LABEL_67:
          v58 = (unsigned int *)(v49 + 16 * v64 + 8);
        }
        v54 = *v58;
        LODWORD(v59) = v51 & ((v47 >> 4) ^ (v47 >> 9));
        v55 = (uint64_t *)(v49 + 16 * v59);
        v60 = *v55;
        if (*v55 != v47)
        {
          v61 = 1;
          while (v60 != -4096)
          {
            v62 = v59 + v61++;
            v59 = v62 & v51;
            v60 = *(_QWORD *)(v49 + 16 * v59);
            if (v60 == v47)
            {
              v55 = (uint64_t *)(v49 + 16 * v59);
              goto LABEL_54;
            }
          }
          goto LABEL_53;
        }
LABEL_54:
        ;
      }
      while (v54 >= *((_DWORD *)v55 + 2));
      do
      {
        v68 = *--a2;
        v48 = v68;
        if (!(_DWORD)v50)
        {
          v66 = *v53;
LABEL_69:
          v67 = (uint64_t *)(v49 + 16 * v50);
          continue;
        }
        v69 = *v52;
        v70 = (unsigned int *)(v52 + 1);
        if (*v52 != v3)
        {
          v75 = 1;
          LODWORD(v76) = v51 & v18;
          while (v69 != -4096)
          {
            v77 = v76 + v75++;
            v76 = v77 & v51;
            v69 = *(_QWORD *)(v49 + 16 * v76);
            if (v69 == v3)
              goto LABEL_83;
          }
          v76 = *((unsigned int *)*a3 + 4);
LABEL_83:
          v70 = (unsigned int *)(v49 + 16 * v76 + 8);
        }
        v66 = *v70;
        LODWORD(v71) = ((v48 >> 4) ^ (v48 >> 9)) & v51;
        v67 = (uint64_t *)(v49 + 16 * v71);
        v72 = *v67;
        if (*v67 != v48)
        {
          v73 = 1;
          while (v72 != -4096)
          {
            v74 = v71 + v73++;
            v71 = v74 & v51;
            v72 = *(_QWORD *)(v49 + 16 * v71);
            if (v72 == v48)
            {
              v67 = (uint64_t *)(v49 + 16 * v71);
              goto LABEL_70;
            }
          }
          goto LABEL_69;
        }
LABEL_70:
        ;
      }
      while (v66 < *((_DWORD *)v67 + 2));
    }
    while (v22 < a2);
  }
  if (v22 - 1 != a1)
    *a1 = *(v22 - 1);
  *(v22 - 1) = v3;
  return v22;
}

_QWORD *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(_QWORD *a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;

  v3 = *a1;
  v4 = **a3;
  v5 = *((unsigned int *)*a3 + 4);
  v6 = v5 - 1;
  v7 = (*a1 >> 4) ^ (*a1 >> 9);
  v8 = (v5 - 1) & v7;
  v9 = (uint64_t *)(v4 + 16 * v8);
  v10 = (unsigned int *)(v4 + 16 * v5 + 8);
  v11 = a1;
  do
  {
    v13 = v11;
    v15 = v11[1];
    ++v11;
    v14 = v15;
    if ((_DWORD)v5)
    {
      LODWORD(v16) = v6 & ((v14 >> 4) ^ (v14 >> 9));
      v17 = (uint64_t *)(v4 + 16 * v16);
      v18 = *v17;
      if (*v17 == v14)
      {
        v19 = *((_DWORD *)v17 + 2);
        v20 = *v9;
        if (*v9 == v3)
          goto LABEL_2;
      }
      else
      {
        v24 = 1;
        while (v18 != -4096)
        {
          v25 = v16 + v24++;
          v16 = v25 & v6;
          v18 = *(_QWORD *)(v4 + 16 * v16);
          if (v18 == v14)
            goto LABEL_18;
        }
        v16 = *((unsigned int *)*a3 + 4);
LABEL_18:
        v19 = *(_DWORD *)(v4 + 16 * v16 + 8);
        v20 = *v9;
        if (*v9 == v3)
        {
LABEL_2:
          v12 = v4 + 16 * v8;
          continue;
        }
      }
      v21 = 1;
      LODWORD(v22) = v6 & v7;
      while (v20 != -4096)
      {
        v23 = v22 + v21++;
        v22 = v23 & v6;
        v20 = *(_QWORD *)(v4 + 16 * v22);
        if (v20 == v3)
        {
          v12 = v4 + 16 * v22;
          goto LABEL_3;
        }
      }
    }
    else
    {
      v19 = *v10;
    }
    v12 = v4 + 16 * v5;
LABEL_3:
    ;
  }
  while (v19 < *(_DWORD *)(v12 + 8));
  if (v13 == a1)
  {
    while (1)
    {
      if (v11 >= a2)
        goto LABEL_59;
      v41 = *--a2;
      v40 = v41;
      if (!(_DWORD)v5)
        break;
      LODWORD(v42) = ((v40 >> 4) ^ (v40 >> 9)) & v6;
      v43 = (uint64_t *)(v4 + 16 * v42);
      v44 = *v43;
      if (*v43 == v40)
      {
        v45 = *((_DWORD *)v43 + 2);
        v46 = *v9;
        if (*v9 != v3)
          goto LABEL_46;
      }
      else
      {
        v50 = 1;
        while (v44 != -4096)
        {
          v51 = v42 + v50++;
          v42 = v51 & v6;
          v44 = *(_QWORD *)(v4 + 16 * v42);
          if (v44 == v40)
            goto LABEL_57;
        }
        v42 = *((unsigned int *)*a3 + 4);
LABEL_57:
        v45 = *(_DWORD *)(v4 + 16 * v42 + 8);
        v46 = *v9;
        if (*v9 != v3)
        {
LABEL_46:
          v47 = 1;
          LODWORD(v48) = v6 & v7;
          while (v46 != -4096)
          {
            v49 = v48 + v47++;
            v48 = v49 & v6;
            v46 = *(_QWORD *)(v4 + 16 * v48);
            if (v46 == v3)
            {
              v39 = v4 + 16 * v48;
              goto LABEL_41;
            }
          }
          goto LABEL_51;
        }
      }
      v39 = v4 + 16 * v8;
LABEL_41:
      if (v45 < *(_DWORD *)(v39 + 8))
        goto LABEL_59;
    }
    v45 = *v10;
LABEL_51:
    v39 = v4 + 16 * v5;
    goto LABEL_41;
  }
  while (2)
  {
    v28 = *--a2;
    v27 = v28;
    if (!(_DWORD)v5)
    {
      v32 = *v10;
LABEL_32:
      v26 = v4 + 16 * v5;
      goto LABEL_23;
    }
    LODWORD(v29) = ((v27 >> 4) ^ (v27 >> 9)) & v6;
    v30 = (uint64_t *)(v4 + 16 * v29);
    v31 = *v30;
    if (*v30 != v27)
    {
      v37 = 1;
      while (v31 != -4096)
      {
        v38 = v29 + v37++;
        v29 = v38 & v6;
        v31 = *(_QWORD *)(v4 + 16 * v29);
        if (v31 == v27)
          goto LABEL_38;
      }
      v29 = *((unsigned int *)*a3 + 4);
LABEL_38:
      v32 = *(_DWORD *)(v4 + 16 * v29 + 8);
      v33 = *v9;
      if (*v9 == v3)
        goto LABEL_22;
LABEL_27:
      v34 = 1;
      LODWORD(v35) = v6 & v7;
      while (v33 != -4096)
      {
        v36 = v35 + v34++;
        v35 = v36 & v6;
        v33 = *(_QWORD *)(v4 + 16 * v35);
        if (v33 == v3)
        {
          v26 = v4 + 16 * v35;
          goto LABEL_23;
        }
      }
      goto LABEL_32;
    }
    v32 = *((_DWORD *)v30 + 2);
    v33 = *v9;
    if (*v9 != v3)
      goto LABEL_27;
LABEL_22:
    v26 = v4 + 16 * v8;
LABEL_23:
    if (v32 >= *(_DWORD *)(v26 + 8))
      continue;
    break;
  }
LABEL_59:
  if (v11 < a2)
  {
    v52 = *a2;
    v53 = v11;
    v54 = a2;
    do
    {
      *v53 = v52;
      *v54 = v14;
      v55 = **a3;
      v56 = *((unsigned int *)*a3 + 4);
      v57 = v56 - 1;
      v58 = (v56 - 1) & v7;
      v59 = (uint64_t *)(v55 + 16 * v58);
      v60 = (unsigned int *)(v55 + 16 * v56 + 8);
      do
      {
        v13 = v53;
        v62 = v53[1];
        ++v53;
        v14 = v62;
        if ((_DWORD)v56)
        {
          LODWORD(v63) = v57 & ((v14 >> 4) ^ (v14 >> 9));
          v64 = (uint64_t *)(v55 + 16 * v63);
          v65 = *v64;
          if (*v64 == v14)
          {
            v66 = *((_DWORD *)v64 + 2);
            v67 = *v59;
            if (*v59 == v3)
              goto LABEL_63;
          }
          else
          {
            v71 = 1;
            while (v65 != -4096)
            {
              v72 = v63 + v71++;
              v63 = v72 & v57;
              v65 = *(_QWORD *)(v55 + 16 * v63);
              if (v65 == v14)
                goto LABEL_79;
            }
            v63 = *((unsigned int *)*a3 + 4);
LABEL_79:
            v66 = *(_DWORD *)(v55 + 16 * v63 + 8);
            v67 = *v59;
            if (*v59 == v3)
            {
LABEL_63:
              v61 = v55 + 16 * v58;
              continue;
            }
          }
          v68 = 1;
          LODWORD(v69) = v57 & v7;
          while (v67 != -4096)
          {
            v70 = v69 + v68++;
            v69 = v70 & v57;
            v67 = *(_QWORD *)(v55 + 16 * v69);
            if (v67 == v3)
            {
              v61 = v55 + 16 * v69;
              goto LABEL_64;
            }
          }
        }
        else
        {
          v66 = *v60;
        }
        v61 = v55 + 16 * v56;
LABEL_64:
        ;
      }
      while (v66 < *(_DWORD *)(v61 + 8));
      do
      {
        v74 = *--v54;
        v52 = v74;
        if ((_DWORD)v56)
        {
          LODWORD(v75) = ((v52 >> 4) ^ (v52 >> 9)) & v57;
          v76 = (uint64_t *)(v55 + 16 * v75);
          v77 = *v76;
          if (*v76 == v52)
          {
            v78 = *((_DWORD *)v76 + 2);
            v79 = *v59;
            if (*v59 == v3)
              goto LABEL_81;
          }
          else
          {
            v83 = 1;
            while (v77 != -4096)
            {
              v84 = v75 + v83++;
              v75 = v84 & v57;
              v77 = *(_QWORD *)(v55 + 16 * v75);
              if (v77 == v52)
                goto LABEL_97;
            }
            v75 = *((unsigned int *)*a3 + 4);
LABEL_97:
            v78 = *(_DWORD *)(v55 + 16 * v75 + 8);
            v79 = *v59;
            if (*v59 == v3)
            {
LABEL_81:
              v73 = v55 + 16 * v58;
              continue;
            }
          }
          v80 = 1;
          LODWORD(v81) = v57 & v7;
          while (v79 != -4096)
          {
            v82 = v81 + v80++;
            v81 = v82 & v57;
            v79 = *(_QWORD *)(v55 + 16 * v81);
            if (v79 == v3)
            {
              v73 = v55 + 16 * v81;
              goto LABEL_82;
            }
          }
        }
        else
        {
          v78 = *v60;
        }
        v73 = v55 + 16 * v56;
LABEL_82:
        ;
      }
      while (v78 >= *(_DWORD *)(v73 + 8));
    }
    while (v53 < v54);
  }
  if (v13 != a1)
    *a1 = *v13;
  *v13 = v3;
  return v13;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v45 = *(a2 - 1);
      v46 = *a1;
      v47 = **a3;
      v48 = *((unsigned int *)*a3 + 4);
      if (!(_DWORD)v48)
        goto LABEL_55;
      v49 = v48 - 1;
      LODWORD(v50) = (v48 - 1) & ((v45 >> 4) ^ (v45 >> 9));
      v51 = v47 + 16 * v50;
      v52 = *(_QWORD *)v51;
      if (*(_QWORD *)v51 == v45)
      {
        v53 = *(_DWORD *)(v51 + 8);
        goto LABEL_58;
      }
      v54 = 1;
      while (v52 != -4096)
      {
        v55 = v50 + v54++;
        v50 = v55 & v49;
        v52 = *(_QWORD *)(v47 + 16 * v50);
        if (v52 == v45)
          goto LABEL_56;
      }
LABEL_55:
      v50 = *((unsigned int *)*a3 + 4);
LABEL_56:
      v53 = *(_DWORD *)(v47 + 16 * v50 + 8);
      if (!(_DWORD)v48)
        goto LABEL_65;
      v49 = v48 - 1;
LABEL_58:
      LODWORD(v56) = v49 & ((v46 >> 4) ^ (v46 >> 9));
      v57 = v47 + 16 * v56;
      v58 = *(_QWORD *)v57;
      if (*(_QWORD *)v57 == v46)
        goto LABEL_59;
      v59 = 1;
      while (v58 != -4096)
      {
        v60 = v56 + v59++;
        v56 = v60 & v49;
        v58 = *(_QWORD *)(v47 + 16 * v56);
        if (v58 == v46)
        {
          v57 = v47 + 16 * v56;
          goto LABEL_59;
        }
      }
LABEL_65:
      v57 = v47 + 16 * v48;
LABEL_59:
      if (v53 >= *(_DWORD *)(v57 + 8))
        return 1;
      *a1 = v45;
      *(a2 - 1) = v46;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (2)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = **a3;
    v15 = *((unsigned int *)*a3 + 4);
    v16 = *v9 >> 4;
    if ((_DWORD)v15)
    {
      v17 = v15 - 1;
      LODWORD(v18) = (v15 - 1) & (v16 ^ (v12 >> 9));
      v19 = v14 + 16 * v18;
      v20 = *(_QWORD *)v19;
      if (*(_QWORD *)v19 == v12)
      {
        v21 = *(_DWORD *)(v19 + 8);
        goto LABEL_17;
      }
      v22 = 1;
      while (v20 != -4096)
      {
        v23 = v18 + v22++;
        v18 = v23 & v17;
        v20 = *(_QWORD *)(v14 + 16 * v18);
        if (v20 == v12)
          goto LABEL_15;
      }
    }
    v18 = *((unsigned int *)*a3 + 4);
LABEL_15:
    v21 = *(_DWORD *)(v14 + 16 * v18 + 8);
    if (!(_DWORD)v15)
      goto LABEL_42;
    v17 = v15 - 1;
LABEL_17:
    LODWORD(v24) = v17 & ((v13 >> 4) ^ (v13 >> 9));
    v25 = v14 + 16 * v24;
    v26 = *(_QWORD *)v25;
    if (*(_QWORD *)v25 != v13)
    {
      v43 = 1;
      while (v26 != -4096)
      {
        v44 = v24 + v43++;
        v24 = v44 & v17;
        v26 = *(_QWORD *)(v14 + 16 * v24);
        if (v26 == v13)
        {
          v25 = v14 + 16 * v24;
          goto LABEL_18;
        }
      }
LABEL_42:
      v25 = v14 + 16 * v15;
    }
LABEL_18:
    if (v21 >= *(_DWORD *)(v25 + 8))
      goto LABEL_6;
    v27 = v16 ^ (v12 >> 9);
    v11 = v9;
    while (1)
    {
      *v11 = v13;
      if (v8 == a1)
        break;
      v11 = v8;
      v32 = *--v8;
      v13 = v32;
      v33 = **a3;
      v34 = *((unsigned int *)*a3 + 4);
      if ((_DWORD)v34)
      {
        v28 = v34 - 1;
        LODWORD(v35) = (v34 - 1) & v27;
        v36 = v33 + 16 * v35;
        v37 = *(_QWORD *)v36;
        if (*(_QWORD *)v36 == v12)
        {
          v38 = *(_DWORD *)(v36 + 8);
          goto LABEL_21;
        }
        v41 = 1;
        while (v37 != -4096)
        {
          v42 = v35 + v41++;
          v35 = v42 & v28;
          v37 = *(_QWORD *)(v33 + 16 * v35);
          if (v37 == v12)
            goto LABEL_36;
        }
      }
      v35 = *((unsigned int *)*a3 + 4);
LABEL_36:
      v38 = *(_DWORD *)(v33 + 16 * v35 + 8);
      if (!(_DWORD)v34)
        goto LABEL_37;
      v28 = v34 - 1;
LABEL_21:
      LODWORD(v29) = v28 & ((v13 >> 4) ^ (v13 >> 9));
      v30 = v33 + 16 * v29;
      v31 = *(_QWORD *)v30;
      if (*(_QWORD *)v30 != v13)
      {
        v39 = 1;
        while (v31 != -4096)
        {
          v40 = v29 + v39++;
          v29 = v40 & v28;
          v31 = *(_QWORD *)(v33 + 16 * v29);
          if (v31 == v13)
          {
            v30 = v33 + 16 * v29;
            goto LABEL_22;
          }
        }
LABEL_37:
        v30 = v33 + 16 * v34;
      }
LABEL_22:
      if (v38 >= *(_DWORD *)(v30 + 8))
        goto LABEL_5;
    }
    v11 = a1;
LABEL_5:
    *v11 = v12;
    if (++v10 == 8)
      return v9 + 1 == a2;
LABEL_6:
    v8 = v9++;
    if (v9 != a2)
      continue;
    return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = **a5;
  v14 = *((unsigned int *)*a5 + 4);
  if ((_DWORD)v14)
  {
    v15 = v14 - 1;
    LODWORD(v16) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    v17 = v13 + 16 * v16;
    v18 = *(_QWORD *)v17;
    if (*(_QWORD *)v17 == v11)
    {
      v19 = *(_DWORD *)(v17 + 8);
      goto LABEL_11;
    }
    v20 = 1;
    while (v18 != -4096)
    {
      v21 = v16 + v20++;
      v16 = v21 & v15;
      v18 = *(_QWORD *)(v13 + 16 * v16);
      if (v18 == v11)
        goto LABEL_9;
    }
  }
  v16 = *((unsigned int *)*a5 + 4);
LABEL_9:
  v19 = *(_DWORD *)(v13 + 16 * v16 + 8);
  if (!(_DWORD)v14)
    goto LABEL_20;
  v15 = v14 - 1;
LABEL_11:
  LODWORD(v22) = v15 & ((v12 >> 4) ^ (v12 >> 9));
  v23 = v13 + 16 * v22;
  v24 = *(_QWORD *)v23;
  if (*(_QWORD *)v23 == v12)
    goto LABEL_12;
  v34 = 1;
  while (v24 != -4096)
  {
    v35 = v22 + v34++;
    v22 = v35 & v15;
    v24 = *(_QWORD *)(v13 + 16 * v22);
    if (v24 == v12)
    {
      v23 = v13 + 16 * v22;
      goto LABEL_12;
    }
  }
LABEL_20:
  v23 = v13 + 16 * v14;
LABEL_12:
  if (v19 >= *(_DWORD *)(v23 + 8))
    return result;
  *a3 = v11;
  *a4 = v12;
  v25 = *a3;
  v26 = *a2;
  v27 = **a5;
  v28 = *((unsigned int *)*a5 + 4);
  if ((_DWORD)v28)
  {
    v29 = v28 - 1;
    LODWORD(v30) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
    v31 = v27 + 16 * v30;
    v32 = *(_QWORD *)v31;
    if (*(_QWORD *)v31 == v25)
    {
      v33 = *(_DWORD *)(v31 + 8);
      goto LABEL_28;
    }
    v36 = 1;
    while (v32 != -4096)
    {
      v37 = v30 + v36++;
      v30 = v37 & v29;
      v32 = *(_QWORD *)(v27 + 16 * v30);
      if (v32 == v25)
        goto LABEL_26;
    }
  }
  v30 = *((unsigned int *)*a5 + 4);
LABEL_26:
  v33 = *(_DWORD *)(v27 + 16 * v30 + 8);
  if (!(_DWORD)v28)
    goto LABEL_37;
  v29 = v28 - 1;
LABEL_28:
  LODWORD(v38) = v29 & ((v26 >> 4) ^ (v26 >> 9));
  v39 = v27 + 16 * v38;
  v40 = *(_QWORD *)v39;
  if (*(_QWORD *)v39 == v26)
    goto LABEL_29;
  v50 = 1;
  while (v40 != -4096)
  {
    v51 = v38 + v50++;
    v38 = v51 & v29;
    v40 = *(_QWORD *)(v27 + 16 * v38);
    if (v40 == v26)
    {
      v39 = v27 + 16 * v38;
      goto LABEL_29;
    }
  }
LABEL_37:
  v39 = v27 + 16 * v28;
LABEL_29:
  if (v33 >= *(_DWORD *)(v39 + 8))
    return result;
  *a2 = v25;
  *a3 = v26;
  v41 = *a2;
  v42 = *a1;
  v43 = **a5;
  v44 = *((unsigned int *)*a5 + 4);
  if ((_DWORD)v44)
  {
    v45 = v44 - 1;
    LODWORD(v46) = (v44 - 1) & ((v41 >> 4) ^ (v41 >> 9));
    v47 = v43 + 16 * v46;
    v48 = *(_QWORD *)v47;
    if (*(_QWORD *)v47 == v41)
    {
      v49 = *(_DWORD *)(v47 + 8);
      goto LABEL_45;
    }
    v52 = 1;
    while (v48 != -4096)
    {
      v53 = v46 + v52++;
      v46 = v53 & v45;
      v48 = *(_QWORD *)(v43 + 16 * v46);
      if (v48 == v41)
        goto LABEL_43;
    }
  }
  v46 = *((unsigned int *)*a5 + 4);
LABEL_43:
  v49 = *(_DWORD *)(v43 + 16 * v46 + 8);
  if (!(_DWORD)v44)
    goto LABEL_53;
  v45 = v44 - 1;
LABEL_45:
  LODWORD(v54) = v45 & ((v42 >> 4) ^ (v42 >> 9));
  v55 = v43 + 16 * v54;
  v56 = *(_QWORD *)v55;
  if (*(_QWORD *)v55 == v42)
    goto LABEL_46;
  v57 = 1;
  while (v56 != -4096)
  {
    v58 = v54 + v57++;
    v54 = v58 & v45;
    v56 = *(_QWORD *)(v43 + 16 * v54);
    if (v56 == v42)
    {
      v55 = v43 + 16 * v54;
      goto LABEL_46;
    }
  }
LABEL_53:
  v55 = v43 + 16 * v44;
LABEL_46:
  if (v49 < *(_DWORD *)(v55 + 8))
  {
    *a1 = v41;
    *a2 = v42;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = **a6;
  v16 = *((unsigned int *)*a6 + 4);
  if ((_DWORD)v16)
  {
    v17 = v16 - 1;
    LODWORD(v18) = (v16 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    v19 = v15 + 16 * v18;
    v20 = *(_QWORD *)v19;
    if (*(_QWORD *)v19 == v13)
    {
      v21 = *(_DWORD *)(v19 + 8);
      goto LABEL_11;
    }
    v22 = 1;
    while (v20 != -4096)
    {
      v23 = v18 + v22++;
      v18 = v23 & v17;
      v20 = *(_QWORD *)(v15 + 16 * v18);
      if (v20 == v13)
        goto LABEL_9;
    }
  }
  v18 = *((unsigned int *)*a6 + 4);
LABEL_9:
  v21 = *(_DWORD *)(v15 + 16 * v18 + 8);
  if (!(_DWORD)v16)
    goto LABEL_20;
  v17 = v16 - 1;
LABEL_11:
  LODWORD(v24) = v17 & ((v14 >> 4) ^ (v14 >> 9));
  v25 = v15 + 16 * v24;
  v26 = *(_QWORD *)v25;
  if (*(_QWORD *)v25 == v14)
    goto LABEL_12;
  v36 = 1;
  while (v26 != -4096)
  {
    v37 = v24 + v36++;
    v24 = v37 & v17;
    v26 = *(_QWORD *)(v15 + 16 * v24);
    if (v26 == v14)
    {
      v25 = v15 + 16 * v24;
      goto LABEL_12;
    }
  }
LABEL_20:
  v25 = v15 + 16 * v16;
LABEL_12:
  if (v21 >= *(_DWORD *)(v25 + 8))
    return result;
  *a4 = v13;
  *a5 = v14;
  v27 = *a4;
  v28 = *a3;
  v29 = **a6;
  v30 = *((unsigned int *)*a6 + 4);
  if ((_DWORD)v30)
  {
    v31 = v30 - 1;
    LODWORD(v32) = (v30 - 1) & ((v27 >> 4) ^ (v27 >> 9));
    v33 = v29 + 16 * v32;
    v34 = *(_QWORD *)v33;
    if (*(_QWORD *)v33 == v27)
    {
      v35 = *(_DWORD *)(v33 + 8);
      goto LABEL_28;
    }
    v38 = 1;
    while (v34 != -4096)
    {
      v39 = v32 + v38++;
      v32 = v39 & v31;
      v34 = *(_QWORD *)(v29 + 16 * v32);
      if (v34 == v27)
        goto LABEL_26;
    }
  }
  v32 = *((unsigned int *)*a6 + 4);
LABEL_26:
  v35 = *(_DWORD *)(v29 + 16 * v32 + 8);
  if (!(_DWORD)v30)
    goto LABEL_37;
  v31 = v30 - 1;
LABEL_28:
  LODWORD(v40) = v31 & ((v28 >> 4) ^ (v28 >> 9));
  v41 = v29 + 16 * v40;
  v42 = *(_QWORD *)v41;
  if (*(_QWORD *)v41 == v28)
    goto LABEL_29;
  v52 = 1;
  while (v42 != -4096)
  {
    v53 = v40 + v52++;
    v40 = v53 & v31;
    v42 = *(_QWORD *)(v29 + 16 * v40);
    if (v42 == v28)
    {
      v41 = v29 + 16 * v40;
      goto LABEL_29;
    }
  }
LABEL_37:
  v41 = v29 + 16 * v30;
LABEL_29:
  if (v35 >= *(_DWORD *)(v41 + 8))
    return result;
  *a3 = v27;
  *a4 = v28;
  v43 = *a3;
  v44 = *a2;
  v45 = **a6;
  v46 = *((unsigned int *)*a6 + 4);
  if ((_DWORD)v46)
  {
    v47 = v46 - 1;
    LODWORD(v48) = (v46 - 1) & ((v43 >> 4) ^ (v43 >> 9));
    v49 = v45 + 16 * v48;
    v50 = *(_QWORD *)v49;
    if (*(_QWORD *)v49 == v43)
    {
      v51 = *(_DWORD *)(v49 + 8);
      goto LABEL_45;
    }
    v54 = 1;
    while (v50 != -4096)
    {
      v55 = v48 + v54++;
      v48 = v55 & v47;
      v50 = *(_QWORD *)(v45 + 16 * v48);
      if (v50 == v43)
        goto LABEL_43;
    }
  }
  v48 = *((unsigned int *)*a6 + 4);
LABEL_43:
  v51 = *(_DWORD *)(v45 + 16 * v48 + 8);
  if (!(_DWORD)v46)
    goto LABEL_54;
  v47 = v46 - 1;
LABEL_45:
  LODWORD(v56) = v47 & ((v44 >> 4) ^ (v44 >> 9));
  v57 = v45 + 16 * v56;
  v58 = *(_QWORD *)v57;
  if (*(_QWORD *)v57 == v44)
    goto LABEL_46;
  v68 = 1;
  while (v58 != -4096)
  {
    v69 = v56 + v68++;
    v56 = v69 & v47;
    v58 = *(_QWORD *)(v45 + 16 * v56);
    if (v58 == v44)
    {
      v57 = v45 + 16 * v56;
      goto LABEL_46;
    }
  }
LABEL_54:
  v57 = v45 + 16 * v46;
LABEL_46:
  if (v51 >= *(_DWORD *)(v57 + 8))
    return result;
  *a2 = v43;
  *a3 = v44;
  v59 = *a2;
  v60 = *a1;
  v61 = **a6;
  v62 = *((unsigned int *)*a6 + 4);
  if ((_DWORD)v62)
  {
    v63 = v62 - 1;
    LODWORD(v64) = (v62 - 1) & ((v59 >> 4) ^ (v59 >> 9));
    v65 = v61 + 16 * v64;
    v66 = *(_QWORD *)v65;
    if (*(_QWORD *)v65 == v59)
    {
      v67 = *(_DWORD *)(v65 + 8);
      goto LABEL_62;
    }
    v70 = 1;
    while (v66 != -4096)
    {
      v71 = v64 + v70++;
      v64 = v71 & v63;
      v66 = *(_QWORD *)(v61 + 16 * v64);
      if (v66 == v59)
        goto LABEL_60;
    }
  }
  v64 = *((unsigned int *)*a6 + 4);
LABEL_60:
  v67 = *(_DWORD *)(v61 + 16 * v64 + 8);
  if (!(_DWORD)v62)
    goto LABEL_70;
  v63 = v62 - 1;
LABEL_62:
  LODWORD(v72) = v63 & ((v60 >> 4) ^ (v60 >> 9));
  v73 = v61 + 16 * v72;
  v74 = *(_QWORD *)v73;
  if (*(_QWORD *)v73 == v60)
    goto LABEL_63;
  v75 = 1;
  while (v74 != -4096)
  {
    v76 = v72 + v75++;
    v72 = v76 & v63;
    v74 = *(_QWORD *)(v61 + 16 * v72);
    if (v74 == v60)
    {
      v73 = v61 + 16 * v72;
      goto LABEL_63;
    }
  }
LABEL_70:
  v73 = v61 + 16 * v62;
LABEL_63:
  if (v67 < *(_DWORD *)(v73 + 8))
  {
    *a1 = v59;
    *a2 = v60;
  }
  return result;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (uint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      v10 = *a2;
      v11 = *(_QWORD *)*a2;
      if (v9 >= a3)
      {
        LODWORD(v10) = *(_DWORD *)(v10 + 16);
        v18 = *v8;
        v19 = *a4;
        v20 = *a4 >> 4;
        if (!(_DWORD)v10)
          goto LABEL_27;
        goto LABEL_20;
      }
      v12 = v8[1];
      v10 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v10)
      {
        v13 = v10 - 1;
        LODWORD(v14) = (v10 - 1) & ((*v8 >> 4) ^ (*v8 >> 9));
        v15 = (uint64_t *)(v11 + 16 * v14);
        v16 = *v15;
        if (*v15 == *v8)
        {
          v17 = *((_DWORD *)v15 + 2);
          goto LABEL_16;
        }
        v21 = 1;
        while (v16 != -4096)
        {
          v22 = v14 + v21++;
          v14 = v22 & v13;
          v16 = *(_QWORD *)(v11 + 16 * v14);
          if (v16 == *v8)
            goto LABEL_14;
        }
      }
      v14 = v10;
LABEL_14:
      v17 = *(_DWORD *)(v11 + 16 * v14 + 8);
      if (!(_DWORD)v10)
      {
LABEL_84:
        v24 = (uint64_t *)(v11 + 16 * v10);
        goto LABEL_17;
      }
      v13 = v10 - 1;
LABEL_16:
      LODWORD(v23) = v13 & ((v12 >> 4) ^ (v12 >> 9));
      v24 = (uint64_t *)(v11 + 16 * v23);
      v25 = *v24;
      if (*v24 != v12)
      {
        v68 = 1;
        do
        {
          if (v25 == -4096)
            goto LABEL_84;
          v69 = v23 + v68++;
          v23 = v69 & v13;
          v25 = *(_QWORD *)(v11 + 16 * v23);
        }
        while (v25 != v12);
        v24 = (uint64_t *)(v11 + 16 * v23);
      }
LABEL_17:
      if (v17 < *((_DWORD *)v24 + 2))
      {
        ++v8;
        v7 = v9;
      }
      v18 = *v8;
      v19 = *a4;
      v20 = *a4 >> 4;
      if (!(_DWORD)v10)
        goto LABEL_27;
LABEL_20:
      v26 = v10 - 1;
      LODWORD(v27) = (v10 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v28 = (uint64_t *)(v11 + 16 * v27);
      v29 = *v28;
      if (*v28 == v18)
      {
        v30 = *((_DWORD *)v28 + 2);
        LODWORD(v31) = v26 & (v20 ^ (v19 >> 9));
        v32 = (uint64_t *)(v11 + 16 * v31);
        v33 = *v32;
        if (*v32 != v19)
        {
LABEL_30:
          v36 = 1;
          do
          {
            if (v33 == -4096)
              goto LABEL_34;
            v37 = v31 + v36++;
            v31 = v37 & v26;
            v33 = *(_QWORD *)(v11 + 16 * v31);
          }
          while (v33 != v19);
          v32 = (uint64_t *)(v11 + 16 * v31);
        }
LABEL_35:
        if (v30 < *((_DWORD *)v32 + 2))
          return result;
        v38 = v20 ^ (v19 >> 9);
        while (1)
        {
          v43 = v8;
          *a4 = v18;
          if (v5 < v7)
          {
LABEL_78:
            *v43 = v19;
            return result;
          }
          v44 = (2 * v7) | 1;
          v8 = (uint64_t *)(result + 8 * v44);
          v7 = 2 * v7 + 2;
          v45 = *a2;
          v46 = *(_QWORD *)*a2;
          if (v7 >= a3)
          {
            LODWORD(v45) = *(_DWORD *)(v45 + 16);
            v7 = v44;
            v18 = *v8;
            if (!(_DWORD)v45)
              goto LABEL_70;
            goto LABEL_58;
          }
          v47 = v8[1];
          v45 = *(unsigned int *)(v45 + 16);
          if ((_DWORD)v45)
          {
            v48 = v45 - 1;
            LODWORD(v49) = (v45 - 1) & ((*v8 >> 4) ^ (*v8 >> 9));
            v50 = (uint64_t *)(v46 + 16 * v49);
            v51 = *v50;
            if (*v50 == *v8)
            {
              v52 = *((_DWORD *)v50 + 2);
              goto LABEL_53;
            }
            v53 = 1;
            while (v51 != -4096)
            {
              v54 = v49 + v53++;
              v49 = v54 & v48;
              v51 = *(_QWORD *)(v46 + 16 * v49);
              if (v51 == *v8)
                goto LABEL_51;
            }
          }
          v49 = v45;
LABEL_51:
          v52 = *(_DWORD *)(v46 + 16 * v49 + 8);
          if (!(_DWORD)v45)
            goto LABEL_77;
          v48 = v45 - 1;
LABEL_53:
          LODWORD(v55) = v48 & ((v47 >> 4) ^ (v47 >> 9));
          v56 = (uint64_t *)(v46 + 16 * v55);
          v57 = *v56;
          if (*v56 == v47)
            goto LABEL_54;
          v66 = 1;
          while (v57 != -4096)
          {
            v67 = v55 + v66++;
            v55 = v67 & v48;
            v57 = *(_QWORD *)(v46 + 16 * v55);
            if (v57 == v47)
            {
              v56 = (uint64_t *)(v46 + 16 * v55);
              goto LABEL_54;
            }
          }
LABEL_77:
          v56 = (uint64_t *)(v46 + 16 * v45);
LABEL_54:
          if (v52 >= *((_DWORD *)v56 + 2))
            v7 = v44;
          else
            ++v8;
          v18 = *v8;
          if (!(_DWORD)v45)
            goto LABEL_70;
LABEL_58:
          v39 = v45 - 1;
          LODWORD(v58) = (v45 - 1) & ((v18 >> 4) ^ (v18 >> 9));
          v59 = (uint64_t *)(v46 + 16 * v58);
          v60 = *v59;
          if (*v59 != v18)
          {
            v64 = 1;
            while (v60 != -4096)
            {
              v65 = v58 + v64++;
              v58 = v65 & v39;
              v60 = *(_QWORD *)(v46 + 16 * v58);
              if (v60 == v18)
                goto LABEL_71;
            }
LABEL_70:
            v58 = v45;
LABEL_71:
            v61 = *(_DWORD *)(v46 + 16 * v58 + 8);
            if (!(_DWORD)v45)
              goto LABEL_72;
            v39 = v45 - 1;
            LODWORD(v40) = (v45 - 1) & v38;
            v41 = (uint64_t *)(v46 + 16 * v40);
            v42 = *v41;
            if (*v41 != v19)
              goto LABEL_62;
            goto LABEL_60;
          }
          v61 = *((_DWORD *)v59 + 2);
          LODWORD(v40) = v39 & v38;
          v41 = (uint64_t *)(v46 + 16 * (v39 & v38));
          v42 = *v41;
          if (*v41 != v19)
          {
LABEL_62:
            v62 = 1;
            while (v42 != -4096)
            {
              v63 = v40 + v62++;
              v40 = v63 & v39;
              v42 = *(_QWORD *)(v46 + 16 * v40);
              if (v42 == v19)
              {
                v41 = (uint64_t *)(v46 + 16 * v40);
                goto LABEL_60;
              }
            }
LABEL_72:
            v41 = (uint64_t *)(v46 + 16 * v45);
          }
LABEL_60:
          a4 = v43;
          if (v61 < *((_DWORD *)v41 + 2))
            goto LABEL_78;
        }
      }
      v34 = 1;
      while (v29 != -4096)
      {
        v35 = v27 + v34++;
        v27 = v35 & v26;
        v29 = *(_QWORD *)(v11 + 16 * v27);
        if (v29 == v18)
          goto LABEL_28;
      }
LABEL_27:
      v27 = v10;
LABEL_28:
      v30 = *(_DWORD *)(v11 + 16 * v27 + 8);
      if ((_DWORD)v10)
      {
        v26 = v10 - 1;
        LODWORD(v31) = (v10 - 1) & (v20 ^ (v19 >> 9));
        v32 = (uint64_t *)(v11 + 16 * v31);
        v33 = *v32;
        if (*v32 != v19)
          goto LABEL_30;
      }
      else
      {
LABEL_34:
        v32 = (uint64_t *)(v11 + 16 * v10);
      }
      goto LABEL_35;
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v10 = &a1[v3 + 1];
    v11 = (2 * v3) | 1;
    v12 = 2 * v3 + 2;
    if (v12 >= a3)
      goto LABEL_8;
    v13 = v10[1];
    v14 = **a2;
    v15 = *((unsigned int *)*a2 + 4);
    if ((_DWORD)v15)
    {
      v6 = v15 - 1;
      LODWORD(v16) = (v15 - 1) & ((*v10 >> 4) ^ (*v10 >> 9));
      v17 = (uint64_t *)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 == *v10)
      {
        v19 = *((_DWORD *)v17 + 2);
        goto LABEL_5;
      }
      v22 = 1;
      while (v18 != -4096)
      {
        v23 = v16 + v22++;
        v16 = v23 & v6;
        v18 = *(_QWORD *)(v14 + 16 * v16);
        if (v18 == *v10)
          goto LABEL_22;
      }
    }
    v16 = *((unsigned int *)*a2 + 4);
LABEL_22:
    v19 = *(_DWORD *)(v14 + 16 * v16 + 8);
    if (!(_DWORD)v15)
      goto LABEL_23;
    v6 = v15 - 1;
LABEL_5:
    LODWORD(v7) = v6 & ((v13 >> 4) ^ (v13 >> 9));
    v8 = (uint64_t *)(v14 + 16 * v7);
    v9 = *v8;
    if (*v8 == v13)
      goto LABEL_6;
    v20 = 1;
    while (v9 != -4096)
    {
      v21 = v7 + v20++;
      v7 = v21 & v6;
      v9 = *(_QWORD *)(v14 + 16 * v7);
      if (v9 == v13)
      {
        v8 = (uint64_t *)(v14 + 16 * v7);
        goto LABEL_6;
      }
    }
LABEL_23:
    v8 = (uint64_t *)(v14 + 16 * v15);
LABEL_6:
    if (v19 < *((_DWORD *)v8 + 2))
    {
      ++v10;
      v11 = v12;
    }
LABEL_8:
    *a1 = *v10;
    a1 = v10;
    v3 = v11;
  }
  while (v11 <= v5);
  return v10;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = *v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = **a3;
    v11 = *((unsigned int *)*a3 + 4);
    v12 = v9 >> 4;
    if ((_DWORD)v11)
    {
      v13 = v11 - 1;
      LODWORD(v14) = (v11 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v15 = (uint64_t *)(v10 + 16 * v14);
      v16 = *v15;
      if (*v15 == v6)
      {
        v17 = *((_DWORD *)v15 + 2);
        LODWORD(v18) = v13 & (v12 ^ (v8 >> 9));
        v19 = (uint64_t *)(v10 + 16 * v18);
        v20 = *v19;
        if (*v19 != v8)
        {
LABEL_13:
          v23 = 1;
          do
          {
            if (v20 == -4096)
              goto LABEL_17;
            v24 = v18 + v23++;
            v18 = v24 & v13;
            v20 = *(_QWORD *)(v10 + 16 * v18);
          }
          while (v20 != v8);
          v19 = (uint64_t *)(v10 + 16 * v18);
        }
LABEL_18:
        if (v17 >= *((_DWORD *)v19 + 2))
          return result;
        v25 = v12 ^ (v8 >> 9);
        while (1)
        {
          v30 = v5;
          *v7 = v6;
          if (!v4)
          {
LABEL_39:
            *v30 = v8;
            return result;
          }
          v4 = (v4 - 1) >> 1;
          v5 = (_QWORD *)(result + 8 * v4);
          v6 = *v5;
          v31 = **a3;
          v32 = *((unsigned int *)*a3 + 4);
          if (!(_DWORD)v32)
            goto LABEL_36;
          v26 = v32 - 1;
          LODWORD(v33) = (v32 - 1) & ((v6 >> 4) ^ (v6 >> 9));
          v34 = (uint64_t *)(v31 + 16 * v33);
          v35 = *v34;
          if (*v34 != v6)
            break;
          v36 = *((_DWORD *)v34 + 2);
          LODWORD(v27) = v26 & v25;
          v28 = (uint64_t *)(v31 + 16 * (v26 & v25));
          v29 = *v28;
          if (*v28 != v8)
          {
LABEL_28:
            v37 = 1;
            while (v29 != -4096)
            {
              v38 = v27 + v37++;
              v27 = v38 & v26;
              v29 = *(_QWORD *)(v31 + 16 * v27);
              if (v29 == v8)
              {
                v28 = (uint64_t *)(v31 + 16 * v27);
                goto LABEL_26;
              }
            }
LABEL_38:
            v28 = (uint64_t *)(v31 + 16 * v32);
          }
LABEL_26:
          v7 = v30;
          if (v36 >= *((_DWORD *)v28 + 2))
            goto LABEL_39;
        }
        v39 = 1;
        while (v35 != -4096)
        {
          v40 = v33 + v39++;
          v33 = v40 & v26;
          v35 = *(_QWORD *)(v31 + 16 * v33);
          if (v35 == v6)
            goto LABEL_37;
        }
LABEL_36:
        v33 = *((unsigned int *)*a3 + 4);
LABEL_37:
        v36 = *(_DWORD *)(v31 + 16 * v33 + 8);
        if (!(_DWORD)v32)
          goto LABEL_38;
        v26 = v32 - 1;
        LODWORD(v27) = (v32 - 1) & v25;
        v28 = (uint64_t *)(v31 + 16 * v27);
        v29 = *v28;
        if (*v28 != v8)
          goto LABEL_28;
        goto LABEL_26;
      }
      v21 = 1;
      while (v16 != -4096)
      {
        v22 = v14 + v21++;
        v14 = v22 & v13;
        v16 = *(_QWORD *)(v10 + 16 * v14);
        if (v16 == v6)
          goto LABEL_11;
      }
    }
    v14 = *((unsigned int *)*a3 + 4);
LABEL_11:
    v17 = *(_DWORD *)(v10 + 16 * v14 + 8);
    if ((_DWORD)v11)
    {
      v13 = v11 - 1;
      LODWORD(v18) = (v11 - 1) & (v12 ^ (v8 >> 9));
      v19 = (uint64_t *)(v10 + 16 * v18);
      v20 = *v19;
      if (*v19 != v8)
        goto LABEL_13;
    }
    else
    {
LABEL_17:
      v19 = (uint64_t *)(v10 + 16 * v11);
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::InsertIntoBucket<mlir::Block * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = buffer;
  if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v19 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v18 = &buffer[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
  v20 = buffer + 2;
  v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 2) = -4096;
    *v20 = -4096;
    v20 += 4;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 2;
    }
    while (v18 != &buffer[2 * v17]);
  }
  v7 = *a3;
  v22 = v17 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[2 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[2 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v11 = &v7[2 * v10];
      v12 = v7 + 2;
      v13 = v10;
      do
      {
        *(v12 - 2) = -4096;
        *v12 = -4096;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)a1;
    }
    v14 = &v7[2 * v6];
    do
    {
      *v11 = -4096;
      v11 += 2;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(a1 + 16) - 1;
        v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        v18 = (_QWORD *)(*(_QWORD *)a1 + 16 * v17);
        v19 = *v18;
        if (v15 != *v18)
        {
          v23 = 0;
          v24 = 1;
          while (v19 != -4096)
          {
            if (v23)
              v25 = 0;
            else
              v25 = v19 == -8192;
            if (v25)
              v23 = v18;
            v26 = v17 + v24++;
            v17 = v26 & v16;
            v18 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v26 & v16));
            v19 = *v18;
            if (v15 == *v18)
              goto LABEL_16;
          }
          if (v23)
            v18 = v23;
        }
LABEL_16:
        *v18 = v15;
        v20 = v4[1];
        v4[1] = 0;
        v18[1] = v20;
        ++*(_DWORD *)(a1 + 8);
        v21 = (_QWORD *)v4[1];
        v4[1] = 0;
        if (v21)
        {
          v22 = (_QWORD *)v21[3];
          if (v22 != v21 + 5)
            free(v22);
          operator delete(v21);
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

void llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::shrink_and_clear(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  _QWORD **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  llvm *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  _QWORD *v16;
  uint64_t v17;
  llvm *v18;

  v2 = a1[4];
  v3 = a1[2];
  v4 = (void *)(16 * v2);
  if ((_DWORD)v2)
  {
    v5 = (_QWORD **)(*(_QWORD *)a1 + 8);
    v6 = 16 * v2;
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          v8 = (_QWORD *)v7[3];
          if (v8 != v7 + 5)
            free(v8);
          operator delete(v7);
        }
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  if (!v3)
  {
    if (!a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
LABEL_20:
    llvm::deallocate_buffer(*(llvm **)a1, v4);
  }
  v9 = 1 << (33 - __clz(v3 - 1));
  if (v9 <= 64)
    v10 = 64;
  else
    v10 = v9;
  if ((_DWORD)v10 != a1[4])
    goto LABEL_20;
  *((_QWORD *)a1 + 1) = 0;
  v11 = *(llvm **)a1;
  v12 = (v10 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (!v12)
  {
    v15 = *(llvm **)a1;
LABEL_23:
    v18 = (llvm *)((char *)v11 + 16 * v10);
    do
    {
      *(_QWORD *)v15 = -4096;
      v15 = (llvm *)((char *)v15 + 16);
    }
    while (v15 != v18);
    return;
  }
  v13 = v12 + 1;
  v14 = (v12 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v15 = (llvm *)((char *)v11 + 16 * v14);
  v16 = (_QWORD *)((char *)v11 + 16);
  v17 = v14;
  do
  {
    *(v16 - 2) = -4096;
    *v16 = -4096;
    v16 += 4;
    v17 -= 2;
  }
  while (v17);
  if (v13 != v14)
    goto LABEL_23;
}

uint64_t mlir::IntegerSet::getNumEqualities(mlir::IntegerSet *this)
{
  unint64_t v1;
  uint8x8_t *v2;
  uint64_t v3;
  uint64_t result;
  int32x4_t v5;
  int32x4_t v6;
  uint8x8_t *v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  uint8x16_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint8x8_t *v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;
  uint8x8_t v25;
  uint16x8_t v26;
  uint8x8_t *v27;
  uint64_t v28;
  int v29;

  v1 = *(unsigned int *)(*(_QWORD *)this + 16);
  if (!*(_DWORD *)(*(_QWORD *)this + 16))
    return 0;
  v2 = *(uint8x8_t **)(*(_QWORD *)this + 24);
  if (v1 < 8)
  {
    v3 = 0;
    LODWORD(result) = 0;
    goto LABEL_14;
  }
  if (v1 >= 0x20)
  {
    v5 = 0uLL;
    v6 = 0uLL;
    v3 = v1 & 0xFFFFFFE0;
    v7 = v2 + 2;
    v8 = v3;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    do
    {
      v15 = *(uint8x16_t *)v7[-2].i8;
      v16 = vmovl_u8(*(uint8x8_t *)v15.i8);
      v17 = vmovl_high_u8(v15);
      v18 = vmovl_u8(*v7);
      v19 = vmovl_high_u8(*(uint8x16_t *)v7->i8);
      v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v17);
      v9 = (int32x4_t)vaddw_u16((uint32x4_t)v9, *(uint16x4_t *)v17.i8);
      v6 = (int32x4_t)vaddw_high_u16((uint32x4_t)v6, v16);
      v5 = (int32x4_t)vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v16.i8);
      v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v19);
      v13 = (int32x4_t)vaddw_u16((uint32x4_t)v13, *(uint16x4_t *)v19.i8);
      v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, v18);
      v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v18.i8);
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
    result = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v11, v5), vaddq_s32(v13, v9)), vaddq_s32(vaddq_s32(v12, v6), vaddq_s32(v14, v10))));
    if ((v1 & 0x1F) == 0)
      return result;
    if ((v1 & 0x1F) < 8)
    {
LABEL_14:
      v27 = (uint8x8_t *)((char *)v2 + v3);
      v28 = v1 - v3;
      do
      {
        v29 = v27->u8[0];
        v27 = (uint8x8_t *)((char *)v27 + 1);
        result = (result + v29);
        --v28;
      }
      while (v28);
      return result;
    }
  }
  else
  {
    LODWORD(result) = 0;
    v3 = 0;
  }
  v20 = (uint8x8_t *)((char *)v2 + v3);
  v21 = v3 + (v1 & 7);
  v3 = v1 & 0xFFFFFFF8;
  v22 = 0uLL;
  v23 = (int32x4_t)result;
  v24 = v21 - v1;
  do
  {
    v25 = *v20++;
    v26 = vmovl_u8(v25);
    v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v26);
    v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v26.i8);
    v24 += 8;
  }
  while (v24);
  result = vaddvq_s32(vaddq_s32(v23, v22));
  if ((v1 & 7) != 0)
    goto LABEL_14;
  return result;
}

uint64_t mlir::IntegerSet::isEq(mlir::IntegerSet *this, unsigned int a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 24) + a2);
}

uint64_t mlir::IntegerSet::getNumInequalities(mlir::IntegerSet *this)
{
  unint64_t v1;
  uint8x8_t *v2;
  uint64_t v3;
  unsigned int v4;
  int32x4_t v6;
  int32x4_t v7;
  uint8x8_t *v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint8x16_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint8x8_t *v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint64_t v25;
  uint8x8_t v26;
  uint16x8_t v27;
  uint64_t v28;
  uint8x8_t *v29;
  int v30;

  v1 = *(unsigned int *)(*(_QWORD *)this + 16);
  if (!*(_DWORD *)(*(_QWORD *)this + 16))
    return v1;
  v2 = *(uint8x8_t **)(*(_QWORD *)this + 24);
  if (v1 >= 8)
  {
    if (v1 >= 0x20)
    {
      v6 = 0uLL;
      v7 = 0uLL;
      v3 = v1 & 0xFFFFFFE0;
      v8 = v2 + 2;
      v9 = v3;
      v10 = 0uLL;
      v11 = 0uLL;
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      do
      {
        v16 = *(uint8x16_t *)v8[-2].i8;
        v17 = vmovl_u8(*(uint8x8_t *)v16.i8);
        v18 = vmovl_high_u8(v16);
        v19 = vmovl_u8(*v8);
        v20 = vmovl_high_u8(*(uint8x16_t *)v8->i8);
        v11 = (int32x4_t)vaddw_high_u16((uint32x4_t)v11, v18);
        v10 = (int32x4_t)vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v18.i8);
        v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v17);
        v6 = (int32x4_t)vaddw_u16((uint32x4_t)v6, *(uint16x4_t *)v17.i8);
        v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v20);
        v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v20.i8);
        v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v19);
        v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v19.i8);
        v8 += 4;
        v9 -= 32;
      }
      while (v9);
      v4 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v12, v6), vaddq_s32(v14, v10)), vaddq_s32(vaddq_s32(v13, v7), vaddq_s32(v15, v11))));
      if ((v1 & 0x1F) == 0)
        return v1 - v4;
      if ((v1 & 0x1F) < 8)
        goto LABEL_14;
    }
    else
    {
      v4 = 0;
      v3 = 0;
    }
    v21 = (uint8x8_t *)((char *)v2 + v3);
    v22 = v3 + (v1 & 7);
    v3 = v1 & 0xFFFFFFF8;
    v23 = 0uLL;
    v24 = (int32x4_t)v4;
    v25 = v22 - v1;
    do
    {
      v26 = *v21++;
      v27 = vmovl_u8(v26);
      v23 = (int32x4_t)vaddw_high_u16((uint32x4_t)v23, v27);
      v24 = (int32x4_t)vaddw_u16((uint32x4_t)v24, *(uint16x4_t *)v27.i8);
      v25 += 8;
    }
    while (v25);
    v4 = vaddvq_s32(vaddq_s32(v24, v23));
    if ((v1 & 7) == 0)
      return v1 - v4;
    goto LABEL_14;
  }
  v3 = 0;
  v4 = 0;
LABEL_14:
  v28 = v1 - v3;
  v29 = (uint8x8_t *)((char *)v2 + v3);
  do
  {
    v30 = v29->u8[0];
    v29 = (uint8x8_t *)((char *)v29 + 1);
    v4 += v30;
    --v28;
  }
  while (v28);
  return v1 - v4;
}

BOOL mlir::IntegerSet::isEmptyIntegerSet(int **this)
{
  int v2;
  int v3;
  mlir::MLIRContext *DesiredBytecodeVersion;
  mlir::MLIRContext *v5;
  char v7;
  uint64_t AffineConstantExpr;

  v2 = **this;
  v3 = (*this)[1];
  AffineConstantExpr = **((_QWORD **)*this + 1);
  DesiredBytecodeVersion = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&AffineConstantExpr);
  AffineConstantExpr = mlir::getAffineConstantExpr((mlir *)1, DesiredBytecodeVersion, v5);
  v7 = 1;
  return *this == (int *)mlir::IntegerSet::get(v2, v3, (mlir::BytecodeWriterConfig *)&AffineConstantExpr, 1, (uint64_t)&v7, 1);
}

uint64_t mlir::IntegerSet::getContext(mlir::IntegerSet *this)
{
  uint64_t v2;

  v2 = **(_QWORD **)(*(_QWORD *)this + 8);
  return mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&v2);
}

uint64_t mlir::IntegerSet::getConstraint(mlir::IntegerSet *this, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 8 * a2);
}

_QWORD *mlir::IntegerSet::walkExprs(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*result + 16);
  if (v3)
  {
    v6 = *(uint64_t **)(*result + 8);
    for (i = 8 * v3; i; i -= 8)
    {
      v9 = *v6;
      v10[0] = &unk_1E0E4F6B0;
      v10[1] = a2;
      v10[2] = a3;
      v11 = v10;
      mlir::AffineExpr::walk(&v9, v10);
      result = v11;
      if (v11 == v10)
      {
        result = v10;
        v8 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_5;
        v8 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
LABEL_5:
      ++v6;
    }
  }
  return result;
}

uint64_t mlir::IntegerSet::replaceDimsAndSymbols(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  mlir::BytecodeWriterConfig *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x1E0C80C00];
  v23 = (mlir::BytecodeWriterConfig *)v25;
  v24 = 0x800000000;
  v10 = *(_QWORD **)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v11 >= 9uLL)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v11, 8);
    v10 = *(_QWORD **)a1;
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  }
  if (v11)
  {
    v21 = a6;
    v12 = a7;
    v13 = (uint64_t *)v10[1];
    v14 = 8 * v11;
    do
    {
      v22 = *v13;
      mlir::AffineExpr::replaceDimsAndSymbols((uint64_t)&v22);
      v16 = v15;
      v17 = v24;
      if (v24 >= (unint64_t)HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
        v17 = v24;
      }
      *((_QWORD *)v23 + v17) = v16;
      v18 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v10 = *(_QWORD **)a1;
    a7 = v12;
    a6 = v21;
  }
  else
  {
    v18 = v24;
  }
  v19 = mlir::IntegerSet::get(a6, a7, v23, v18, v10[3], v10[4]);
  if (v23 != (mlir::BytecodeWriterConfig *)v25)
    free(v23);
  return v19;
}

uint64_t mlir::CallSiteLoc::get(uint64_t a1, uint64_t a2)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v5;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v7 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id;
  v8[1] = Context;
  v13[0] = _ZN4llvm12function_refIFvPN4mlir6detail22CallSiteLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11CallSiteLocEJRNS1_8LocationESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v13[1] = v8;
  v11 = v7;
  v12 = a2;
  v5 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v11, &v12);
  v9[0] = &v11;
  v9[1] = v13;
  v10 = &v11;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v10, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v9);
}

uint64_t mlir::FileLineColLoc::get(uint64_t a1, unsigned int a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v7;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[2];

  v9 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJRNS1_10StringAttrERjSD_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v15[1] = v10;
  v13 = v9;
  v14 = a2 | (unint64_t)(a3 << 32);
  v7 = llvm::hash_combine<mlir::StringAttr,unsigned int,unsigned int>(&v13, (int *)&v14, (int *)&v14 + 1);
  v11[0] = &v13;
  v11[1] = v15;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::FileLineColLoc::get(mlir::StringAttr *a1, const char *a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unsigned __int8 **AttributeUniquer;
  unsigned int v12;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[2];

  if (a3 <= 1)
    v8 = 1;
  else
    v8 = a3;
  v9 = "-";
  v15 = 261;
  if (a3)
    v9 = a2;
  v14[0] = v9;
  v14[1] = v8;
  v10 = mlir::StringAttr::get(a1, (mlir::MLIRContext *)v14);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v16[0] = &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id;
  v16[1] = a1;
  v21[0] = _ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJNS1_10StringAttrERjSC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v21[1] = v16;
  v19 = v10;
  v20 = a4 | (unint64_t)(a5 << 32);
  v12 = llvm::hash_combine<mlir::StringAttr,unsigned int,unsigned int>(&v19, (int *)&v20, (int *)&v20 + 1);
  v17[0] = &v19;
  v17[1] = v21;
  v18 = &v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, v12, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v17);
}

uint64_t mlir::FileLineColLoc::getColumn(mlir::FileLineColLoc *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 20);
}

uint64_t mlir::FusedLoc::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD *v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[2];

  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
  v11[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEENS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v16[1] = v11;
  v14[0] = a2;
  v14[1] = a3;
  v15 = a4;
  v9 = llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>((uint64_t)v14, &v15);
  v12[0] = v14;
  v12[1] = v16;
  v13 = v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::NameLoc::get(uint64_t a1, uint64_t a2)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v5;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v7 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id;
  v8[1] = Context;
  v13[0] = _ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v13[1] = v8;
  v11 = v7;
  v12 = a2;
  v5 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v11, &v12);
  v9[0] = &v11;
  v9[1] = v13;
  v10 = &v11;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v10, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v9);
}

uint64_t mlir::NameLoc::get(uint64_t a1)
{
  mlir::MLIRContext *Context;
  mlir::UnknownLoc *v2;
  mlir::MLIRContext *v3;
  uint64_t v4;
  unsigned __int8 **AttributeUniquer;
  unsigned int v6;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v8 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v8);
  v2 = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)&v8);
  v4 = mlir::UnknownLoc::get(v2, v3);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v9[0] = &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id;
  v9[1] = Context;
  v14[0] = _ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrENS1_10UnknownLocEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v14[1] = v9;
  v12 = v8;
  v13 = v4;
  v6 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v12, &v13);
  v10[0] = &v12;
  v10[1] = v14;
  v11 = &v12;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::UnknownLoc>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::UnknownLoc &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::UnknownLoc>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::UnknownLoc &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v10);
}

uint64_t mlir::OpaqueLoc::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v7;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v9 = a3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id;
  v10[1] = Context;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail20OpaqueLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9OpaqueLocEJRmRNS1_6TypeIDERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextESC_DpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  v13 = a1;
  v14 = a2;
  v15 = v9;
  v7 = llvm::hash_combine<unsigned long,mlir::TypeID,mlir::Location>(&v13, &v14, &v15);
  v11[0] = &v13;
  v11[1] = v16;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

_QWORD *mlir::BuiltinDialect::registerLocationAttributes(mlir::BuiltinDialect *this)
{
  mlir::Dialect::addAttribute<mlir::CallSiteLoc>((uint64_t)this);
  mlir::Dialect::addAttribute<mlir::FileLineColLoc>((uint64_t)this);
  mlir::Dialect::addAttribute<mlir::FusedLoc>((uint64_t)this);
  mlir::Dialect::addAttribute<mlir::NameLoc>((uint64_t)this);
  mlir::Dialect::addAttribute<mlir::OpaqueLoc>((uint64_t)this);
  return mlir::Dialect::addAttribute<mlir::UnknownLoc>((uint64_t)this);
}

uint64_t mlir::LocationAttr::walk(_QWORD *a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = a2(a3, *a1);
  if (!(_DWORD)result)
    return result;
  v7 = (_QWORD *)*a1;
  v8 = *(void **)(*v7 + 136);
  if (v7)
    v9 = v8 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id;
  else
    v9 = 0;
  if (v9)
  {
    v14 = v7[1];
    result = mlir::LocationAttr::walk(&v14, a2, a3);
    if (!(_DWORD)result)
      return result;
    goto LABEL_18;
  }
  if (!v7 || v8 != &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id)
  {
    if (!v7 || v8 != &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
    {
      result = 1;
      if (!v7 || v8 != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id)
        return result;
      v13 = v7[3];
LABEL_19:
      v14 = v13;
      return mlir::LocationAttr::walk(&v14, a2, a3);
    }
LABEL_18:
    v13 = v7[2];
    goto LABEL_19;
  }
  v10 = v7[2];
  if (!v10)
    return 1;
  v11 = (uint64_t *)v7[1];
  v12 = 8 * v10;
  while (1)
  {
    v14 = *v11;
    result = mlir::LocationAttr::walk(&v14, a2, a3);
    if (!(_DWORD)result)
      break;
    ++v11;
    v12 -= 8;
    if (!v12)
      return 1;
  }
  return result;
}

BOOL mlir::LocationAttr::classof(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(*(_QWORD *)a1 + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
  {
    return 1;
  }
  return v1 == &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id;
}

void mlir::FusedLoc::get(uint64_t **a1, mlir::MLIRContext *a2, uint64_t a3, mlir::UnknownLoc *this)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  void *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t AttributeUniquer;
  unsigned int v17;
  uint64_t (*v18)(uint64_t);
  uint64_t (*v19)(uint64_t, uint64_t);
  unsigned __int8 **v20;
  uint64_t v21;
  void *v22;
  void *v23;
  mlir::UnknownLoc *v24;
  uint64_t **v25;
  _QWORD *(**v26)(uint64_t *, _QWORD *);
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *(*v31)(uint64_t *, _QWORD *);
  void **v32;
  uint64_t v33;
  llvm *v34[2];
  unsigned int v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[5];

  v38[4] = *MEMORY[0x1E0C80C00];
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v36 = v38;
  v37 = 0x400000000;
  if (!a2)
    goto LABEL_20;
  v6 = a1;
  v7 = &a1[(_QWORD)a2];
  while (1)
  {
    v8 = *v6;
    v28 = v8;
    v9 = *(void **)(*v8 + 136);
    if (v8 && v9 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id)
      break;
    if (v9 != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
      goto LABEL_4;
LABEL_5:
    if (++v6 == v7)
    {
      v14 = v37;
      if ((_DWORD)v37)
      {
        v15 = (uint64_t *)v36;
        if ((_DWORD)v37 != 1 || a3)
        {
          AttributeUniquer = mlir::MLIRContext::getAttributeUniquer(this);
          v23 = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
          v24 = this;
          v31 = _ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJRNS_8ArrayRefINS1_8LocationEEERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
          v32 = &v23;
          v28 = v15;
          v29 = v14;
          v30 = a3;
          v17 = llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>((uint64_t)&v28, &v30);
          v25 = &v28;
          v26 = &v31;
          v27 = &v28;
          v18 = (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>;
          v19 = (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>;
          v20 = (unsigned __int8 **)AttributeUniquer;
          goto LABEL_22;
        }
        v22 = v36;
        if (v36 == v38)
LABEL_26:
          llvm::deallocate_buffer(v34[0], (void *)(8 * v35));
        goto LABEL_25;
      }
LABEL_20:
      if (a3)
      {
        v33 = mlir::UnknownLoc::get(this, a2);
        v21 = mlir::MLIRContext::getAttributeUniquer(this);
        v23 = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
        v24 = this;
        v31 = _ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
        v32 = &v23;
        v28 = &v33;
        v29 = 1;
        v30 = a3;
        v17 = llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>((uint64_t)&v28, &v30);
        v25 = &v28;
        v26 = &v31;
        v27 = &v28;
        v18 = (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>;
        v19 = (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>;
        v20 = (unsigned __int8 **)v21;
LABEL_22:
        mlir::StorageUniquer::getParametricStorageTypeImpl(v20, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, v17, v18, (uint64_t)&v27, v19, (uint64_t)&v25);
        v22 = v36;
        if (v36 == v38)
          goto LABEL_26;
      }
      else
      {
        mlir::UnknownLoc::get(this, a2);
        v22 = v36;
        if (v36 == v38)
          goto LABEL_26;
      }
LABEL_25:
      free(v22);
      goto LABEL_26;
    }
  }
  if (v8[3] == a3)
  {
    v11 = v8[2];
    if (v11)
    {
      v12 = (uint64_t *)v8[1];
      v13 = 8 * v11;
      do
      {
        llvm::SetVector<mlir::Location,llvm::SmallVector<mlir::Location,4u>,llvm::DenseSet<mlir::Location,llvm::DenseMapInfo<mlir::Location,void>>,4u>::insert((uint64_t)v34, v12++);
        v13 -= 8;
      }
      while (v13);
    }
    goto LABEL_5;
  }
LABEL_4:
  llvm::SetVector<mlir::Location,llvm::SmallVector<mlir::Location,4u>,llvm::DenseSet<mlir::Location,llvm::DenseMapInfo<mlir::Location,void>>,4u>::insert((uint64_t)v34, (uint64_t *)&v28);
  goto LABEL_5;
}

uint64_t llvm::SetVector<mlir::Location,llvm::SmallVector<mlir::Location,4u>,llvm::DenseSet<mlir::Location,llvm::DenseMapInfo<mlir::Location,void>>,4u>::insert(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  if (*(_DWORD *)(a1 + 8))
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v33 = 0;
LABEL_41:
      llvm::DenseMapBase<llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>,mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::InsertIntoBucket<mlir::Location const&,llvm::detail::DenseSetEmpty&>(a1, v33, a2);
      v34 = *a2;
      v35 = *(unsigned int *)(a1 + 32);
      if (v35 >= *(_DWORD *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v35 + 1, 8);
        LODWORD(v35) = *(_DWORD *)(a1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v35) = v34;
      ++*(_DWORD *)(a1 + 32);
      return 1;
    }
    v5 = v4 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & v5;
    v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * v6);
    v8 = *v7;
    if (*a2 != *v7)
    {
      v9 = 0;
      v10 = 1;
      while (v8 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v8 == -8192;
        if (v11)
          v9 = v7;
        v12 = v6 + v10++;
        v6 = v12 & v5;
        v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          return 0;
      }
      if (v9)
        v33 = v9;
      else
        v33 = v7;
      goto LABEL_41;
    }
    return 0;
  }
  v13 = a1 + 24;
  v14 = *(_QWORD **)(a1 + 24);
  v15 = *(unsigned int *)(a1 + 32);
  v16 = v14;
  if ((_DWORD)v15)
  {
    v17 = 8 * v15;
    v16 = *(_QWORD **)(a1 + 24);
    while (*v16 != *a2)
    {
      ++v16;
      v17 -= 8;
      if (!v17)
      {
        v16 = &v14[v15];
        break;
      }
    }
  }
  if (v15 != v16 - v14)
    return 0;
  v18 = *a2;
  if (v15 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 40), v15 + 1, 8);
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32)) = v18;
    v19 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v19;
    if (v19 >= 5)
      goto LABEL_21;
  }
  else
  {
    v14[v15] = v18;
    v19 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v19;
    if (v19 >= 5)
    {
LABEL_21:
      v20 = *(_QWORD **)(a1 + 24);
      v21 = &v20[v19];
      while (1)
      {
        v26 = *(_DWORD *)(a1 + 16);
        if (!v26)
          break;
        v22 = v26 - 1;
        v23 = ((*v20 >> 4) ^ (*v20 >> 9)) & v22;
        v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
        v25 = *v24;
        if (*v20 != *v24)
        {
          v28 = 0;
          v29 = 1;
          while (v25 != -4096)
          {
            if (v28)
              v30 = 0;
            else
              v30 = v25 == -8192;
            if (v30)
              v28 = v24;
            v31 = v23 + v29++;
            v23 = v31 & v22;
            v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
            v25 = *v24;
            if (*v20 == *v24)
              goto LABEL_23;
          }
          if (v28)
            v27 = v28;
          else
            v27 = v24;
          goto LABEL_26;
        }
LABEL_23:
        if (++v20 == v21)
          return 1;
      }
      v27 = 0;
LABEL_26:
      llvm::DenseMapBase<llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>,mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::InsertIntoBucket<mlir::Location const&,llvm::detail::DenseSetEmpty&>(a1, v27, v20);
      goto LABEL_23;
    }
  }
  return 1;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **(_QWORD **)a1 && *(_QWORD *)(a2 + 16) == *(_QWORD *)(*(_QWORD *)a1 + 8);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__int128 **a1, uint64_t a2)
{
  __int128 v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v13;

  v4 = **a1;
  *(_QWORD *)(a2 + 80) += 24;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 24 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v13 = v4;
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    v4 = v13;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 24;
  *(_QWORD *)v10 = 0;
  *(_OWORD *)(v10 + 8) = v4;
  v11 = a1[1];
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*((_QWORD *)v11 + 1), v10);
  return v10;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail22CallSiteLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11CallSiteLocEJRNS1_8LocationESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::StringAttr,unsigned int,unsigned int>(_DWORD *a1, int *a2, int *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v9;
  unint64_t v10;
  int *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v4 & 1) == 0)
  {
    v11 = a2;
    v12 = a1;
    a2 = v11;
    a1 = v12;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a2 = v11;
      a1 = v12;
    }
  }
  v5 = (*a1 >> 4) ^ (*a1 >> 9);
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = v5;
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v15, (uint64_t *)&v13, (_DWORD *)v15 + 2, (unint64_t)v16, *a2);
  v14 = v13;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v15, (uint64_t *)&v14, v6, (unint64_t)v16, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v7, (char *)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*a1;
  return *(_QWORD *)(a2 + 8) == *(_QWORD *)*a1
      && *(_DWORD *)(a2 + 16) == *((_DWORD *)v2 + 2)
      && *(_DWORD *)(a2 + 20) == *((_DWORD *)v2 + 3);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FileLineColLocAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::FileLineColLocAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  _QWORD *result;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 80) += 24;
  if (*(_QWORD *)a1)
    v5 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 24 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a1 + 24);
    if (v9 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v7];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a1 = result + 3;
  *result = 0;
  result[1] = v3;
  result[2] = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJRNS1_10StringAttrERjSD_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*a1;
  return *(_QWORD *)(a2 + 8) == *(_QWORD *)*a1
      && *(_DWORD *)(a2 + 16) == *((_DWORD *)v2 + 2)
      && *(_DWORD *)(a2 + 20) == *((_DWORD *)v2 + 3);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FileLineColLocAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJNS1_10StringAttrERjSC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>(uint64_t a1, _DWORD *a2)
{
  unsigned __int8 v3;
  unint64_t v4;
  char *v5;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    a1 = v9;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v8;
      a1 = v9;
    }
  }
  v14 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v4 = llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>(*(_DWORD **)a1, (_DWORD *)(*(_QWORD *)a1 + 8 * *(_QWORD *)(a1 + 8)));
  v10 = 0;
  *(_QWORD *)&v11[0] = v4;
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v11, (uint64_t *)&v10, (_QWORD *)v11 + 1, (unint64_t)v12, (*a2 >> 4) ^ (*a2 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v11, v10, v5, (char *)v12);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a2[2];
  if (v3 == *(_QWORD *)(*a1 + 8))
  {
    if (!v3)
      return a2[3] == *(_QWORD *)(v2 + 16);
    v4 = (_QWORD *)a2[1];
    v5 = *(_QWORD **)v2;
    v6 = 8 * v3;
    while (*v4 == *v5)
    {
      ++v4;
      ++v5;
      v6 -= 8;
      if (!v6)
        return a2[3] == *(_QWORD *)(v2 + 16);
    }
  }
  return 0;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FusedLocAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::detail::FusedLocAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  char *buffer;
  uint64_t v22;
  _QWORD *result;

  v3 = a2[1];
  v4 = a2[2];
  if (v3)
  {
    v5 = *a2;
    v6 = 8 * v3;
    v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
    v8 = v7;
    if ((unint64_t)(8 * v3 - 8) < 0x18)
    {
      v9 = (_QWORD *)v7;
      v10 = (uint64_t *)v5;
    }
    else
    {
      v9 = (_QWORD *)v7;
      v10 = (uint64_t *)v5;
      if ((unint64_t)(v7 - v5) >= 0x20)
      {
        v11 = ((unint64_t)(v6 - 8) >> 3) + 1;
        v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
        v9 = (_QWORD *)(v7 + v12);
        v10 = (uint64_t *)(v5 + v12);
        v13 = (__int128 *)(v5 + 16);
        v14 = (_OWORD *)(v7 + 16);
        v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 4;
        }
        while (v15);
        if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    do
    {
      v17 = *v10++;
      *v9++ = v17;
    }
    while (v10 != (uint64_t *)(v5 + v6));
  }
  else
  {
    v8 = 0;
  }
LABEL_11:
  *(_QWORD *)(__sz + 80) += 32;
  if (*(_QWORD *)__sz)
    v18 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 32 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v18 = 1;
  if (v18)
  {
    v19 = *(_DWORD *)(__sz + 24) >> 7;
    if (v19 >= 0x1E)
      LOBYTE(v19) = 30;
    v20 = 4096 << v19;
    buffer = (char *)llvm::allocate_buffer(4096 << v19, (std::align_val_t)8uLL);
    v22 = *(unsigned int *)(__sz + 24);
    if (v22 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v22) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v20];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)__sz = result + 4;
  *result = 0;
  result[1] = v8;
  result[2] = v3;
  result[3] = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEENS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **(_QWORD **)a1 && *(_QWORD *)(a2 + 16) == *(_QWORD *)(*(_QWORD *)a1 + 8);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__int128 **a1, uint64_t a2)
{
  __int128 v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v13;

  v4 = **a1;
  *(_QWORD *)(a2 + 80) += 24;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 24 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v13 = v4;
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    v4 = v13;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 24;
  *(_QWORD *)v10 = 0;
  *(_OWORD *)(v10 + 8) = v4;
  v11 = a1[1];
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*((_QWORD *)v11 + 1), v10);
  return v10;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::UnknownLoc>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::UnknownLoc &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **(_QWORD **)a1 && *(_QWORD *)(a2 + 16) == *(_QWORD *)(*(_QWORD *)a1 + 8);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::UnknownLoc>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::UnknownLoc &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__int128 **a1, uint64_t a2)
{
  __int128 v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v13;

  v4 = **a1;
  *(_QWORD *)(a2 + 80) += 24;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 24 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v13 = v4;
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    v4 = v13;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 24;
  *(_QWORD *)v10 = 0;
  *(_OWORD *)(v10 + 8) = v4;
  v11 = a1[1];
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*((_QWORD *)v11 + 1), v10);
  return v10;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrENS1_10UnknownLocEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<unsigned long,mlir::TypeID,mlir::Location>(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v4 & 1) == 0)
  {
    v11 = a2;
    v12 = a1;
    a2 = v11;
    a1 = v12;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a2 = v11;
      a1 = v12;
    }
  }
  v5 = *a1;
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = v5;
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v13, (_QWORD *)v15 + 1, (unint64_t)v16, (*a2 >> 4) ^ (*a2 >> 9));
  v14 = v13;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v14, v6, (unint64_t)v16, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v7, (char *)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*a1;
  return a2[1] == *(_QWORD *)*a1 && a2[2] == v2[1] && a2[3] == v2[2];
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::OpaqueLocAttrStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::detail::OpaqueLocAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t result;
  __int128 v11;

  v3 = *a2;
  v4 = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(a1 + 80) += 32;
  if (*(_QWORD *)a1)
    v5 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 32 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v5 = 1;
  if (v5)
  {
    v11 = v4;
    v6 = *(_DWORD *)(a1 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a1 + 24);
    if (v9 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v7];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    v4 = v11;
  }
  else
  {
    result = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = result + 32;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v3;
  *(_OWORD *)(result + 16) = v4;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail20OpaqueLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9OpaqueLocEJRmRNS1_6TypeIDERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextESC_DpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t *mlir::Dialect::addAttribute<mlir::CallSiteLoc>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t *);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::CallSiteLoc,mlir::LocationAttr,mlir::detail::CallSiteLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11CallSiteLocENS1_12LocationAttrENSB_22CallSiteLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11CallSiteLocENS1_12LocationAttrENSA_22CallSiteLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::FileLineColLoc>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t *, uint64_t *);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::FileLineColLoc,mlir::LocationAttr,mlir::detail::FileLineColLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14FileLineColLocENS1_12LocationAttrENSB_25FileLineColLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14FileLineColLocENS1_12LocationAttrENSA_25FileLineColLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::FusedLoc>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::FusedLoc,mlir::LocationAttr,mlir::detail::FusedLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8FusedLocENS1_12LocationAttrENSB_19FusedLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8FusedLocENS1_12LocationAttrENSA_19FusedLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::NameLoc>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t *, uint64_t *);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::NameLoc,mlir::LocationAttr,mlir::detail::NameLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_7NameLocENS1_12LocationAttrENSB_18NameLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_7NameLocENS1_12LocationAttrENSA_18NameLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::OpaqueLoc>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t *);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::OpaqueLoc,mlir::LocationAttr,mlir::detail::OpaqueLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9OpaqueLocENS1_12LocationAttrENSB_20OpaqueLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9OpaqueLocENS1_12LocationAttrENSA_20OpaqueLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id, 0, v10);
}

_QWORD *mlir::Dialect::addAttribute<mlir::UnknownLoc>(uint64_t a1)
{
  void *v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  mlir::MLIRContext *v9;
  uint64_t *AttributeUniquer;
  char v12;
  _QWORD *(**v13)(uint64_t *, _QWORD *);
  _QWORD *(*v14)(uint64_t *, _QWORD *);
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  mlir::MLIRContext *v25;
  void *v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, sizeof(v27));
  v25 = (mlir::MLIRContext *)v27;
  LODWORD(v26) = 0;
  v14 = (_QWORD *(*)(uint64_t *, _QWORD *))a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::UnknownLoc,mlir::LocationAttr,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10UnknownLocENS1_12LocationAttrENS1_16AttributeStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10UnknownLocENS1_12LocationAttrENS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, void *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  v9 = *(mlir::MLIRContext **)(a1 + 32);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(v9);
  v25 = v9;
  v26 = &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id;
  v14 = _ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_10UnknownLocEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  v15 = &v25;
  v13 = &v14;
  return mlir::StorageUniquer::registerSingletonImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::AttributeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::AttributeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v13);
}

uint64_t mlir::detail::StorageUserBase<mlir::CallSiteLoc,mlir::LocationAttr,mlir::detail::CallSiteLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11CallSiteLocENS1_12LocationAttrENSB_22CallSiteLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11CallSiteLocENS1_12LocationAttrENSA_22CallSiteLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v9 = a2;
  v3 = *a3;
  v4 = a3[1];
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  v10 = v3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id;
  v11[1] = Context;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail22CallSiteLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11CallSiteLocEJRNS1_8LocationESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v16[1] = v11;
  v14 = v10;
  v15 = v4;
  v7 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v14, &v15);
  v12[0] = &v14;
  v12[1] = v16;
  v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::detail::StorageUserBase<mlir::FileLineColLoc,mlir::LocationAttr,mlir::detail::FileLineColLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14FileLineColLocENS1_12LocationAttrENSB_25FileLineColLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14FileLineColLocENS1_12LocationAttrENSA_25FileLineColLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5[2];

  v5[0] = a3;
  v5[1] = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::FileLineColLoc>(a2, v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::FileLineColLoc>(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v8 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 8))
    v3 = **a2;
  else
    v3 = 0;
  mlir::Attribute::getContext((mlir::Attribute *)&v8);
  v9 = v3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJRNS1_10StringAttrERjSD_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v15[1] = v10;
  v13 = v9;
  v14 = v2;
  v6 = llvm::hash_combine<mlir::StringAttr,unsigned int,unsigned int>(&v13, (int *)&v14, (int *)&v14 + 1);
  v11[0] = &v13;
  v11[1] = v15;
  v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::detail::StorageUserBase<mlir::FusedLoc,mlir::LocationAttr,mlir::detail::FusedLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8FusedLocENS1_12LocationAttrENSB_19FusedLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v7 = (uint64_t *)a2[1];
  v6 = a2[2];
  v8 = a2[3];
  v12[0] = a3;
  v12[1] = a4;
  v12[2] = a5;
  v12[3] = a6;
  if (v6)
  {
    v9 = 8 * v6;
    do
    {
      v10 = *v7++;
      mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v10);
      v9 -= 8;
    }
    while (v9);
  }
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v8);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8FusedLocENS1_12LocationAttrENSA_19FusedLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;

  *(_QWORD *)&v5 = a3;
  *((_QWORD *)&v5 + 1) = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::FusedLoc>(a2, &v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::FusedLoc>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  mlir::MLIRContext *Context;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 **AttributeUniquer;
  unsigned int v10;
  uint64_t ParametricStorageTypeImpl;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD *v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[2];
  void *v23;
  uint64_t v24;
  _QWORD v25[7];
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  v2 = *(_OWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 24);
  v13 = *a2;
  v14 = v2;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::Location>,mlir::Attribute>,void>::replace((uint64_t)&v14, (uint64_t **)&v13, (uint64_t)&v26);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v23 = v25;
  v24 = 0x600000000;
  v4 = v27;
  if (!v27)
  {
    v4 = 0;
    v7 = v25;
    goto LABEL_9;
  }
  if (v27 < 7)
  {
    v6 = v25;
    v5 = v27;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v27, 8);
  v5 = v27;
  if (v27)
  {
    v6 = v23;
LABEL_7:
    memcpy(v6, v26, 8 * v5);
  }
  LODWORD(v24) = v4;
  v7 = v23;
LABEL_9:
  v8 = v29;
  v25[6] = v29;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v17[0] = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
  v17[1] = Context;
  v22[0] = _ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEENS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v22[1] = v17;
  v20[0] = v7;
  v20[1] = v4;
  v21 = v8;
  v10 = llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>((uint64_t)v20, &v21);
  v18[0] = v20;
  v18[1] = v22;
  v19 = v20;
  ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v19, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v18);
  if (v23 != v25)
    free(v23);
  if (v26 != &v28)
    free(v26);
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::Location>,mlir::Attribute>,void>::replace(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  unsigned int v13;
  void *__src;
  unsigned int v15;
  int v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::Location>,void>::replace(*(_QWORD *)(a1 + 8), (uint64_t)a2, (uint64_t)&__src);
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *a2;
    v7 = (uint64_t)a2[1] - 1;
    ++*a2;
    a2[1] = (uint64_t *)v7;
    v8 = *v6;
  }
  else
  {
    v8 = 0;
  }
  v9 = (void *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x600000000;
  v10 = v15;
  v11 = __src;
  if (!v15 || &__src == (void **)a3)
    goto LABEL_15;
  if (__src == v17)
  {
    if (v15 < 7)
    {
      v13 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v15, 8);
      v13 = v15;
      v11 = __src;
      if (!v15)
      {
LABEL_13:
        *(_DWORD *)(a3 + 8) = v10;
        goto LABEL_14;
      }
      v9 = *(void **)a3;
    }
    memcpy(v9, v11, 8 * v13);
    v11 = __src;
    goto LABEL_13;
  }
  *(_QWORD *)a3 = __src;
  v12 = v16;
  *(_DWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 12) = v12;
  __src = v17;
  v16 = 0;
  v11 = v17;
LABEL_14:
  v15 = 0;
LABEL_15:
  *(_QWORD *)(a3 + 64) = v8;
  if (v11 != v17)
    free(v11);
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::Location>,void>::replace(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x600000000;
  if (a1)
  {
    LODWORD(v5) = 0;
    v6 = v17;
    v7 = 8 * a1;
    do
    {
      v8 = *(uint64_t **)a2;
      v9 = *(_QWORD *)(a2 + 8) - 1;
      *(_QWORD *)a2 += 8;
      *(_QWORD *)(a2 + 8) = v9;
      v10 = *v8;
      v11 = v5;
      if (v5 >= HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v5 + 1, 8);
        v11 = v16;
      }
      v15[v11] = v10;
      v5 = (v16 + 1);
      LODWORD(v16) = v16 + 1;
      v7 -= 8;
    }
    while (v7);
    v12 = v15;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x600000000;
    if ((_DWORD)v5 && &v15 != (_QWORD **)a3)
    {
      if (v12 == v17)
      {
        v14 = v5;
        if (v5 < 7
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5, 8),
              v14 = v16,
              v6 = v15,
              (_DWORD)v16))
        {
          memcpy(*(void **)a3, v6, 8 * v14);
          v6 = v15;
        }
        *(_DWORD *)(a3 + 8) = v5;
      }
      else
      {
        *(_QWORD *)a3 = v12;
        v13 = HIDWORD(v16);
        *(_DWORD *)(a3 + 8) = v5;
        *(_DWORD *)(a3 + 12) = v13;
        v15 = v17;
        HIDWORD(v16) = 0;
      }
      LODWORD(v16) = 0;
      v12 = v6;
    }
    if (v12 != v17)
      free(v12);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x600000000;
  }
}

uint64_t mlir::detail::StorageUserBase<mlir::NameLoc,mlir::LocationAttr,mlir::detail::NameLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_7NameLocENS1_12LocationAttrENSB_18NameLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_7NameLocENS1_12LocationAttrENSA_18NameLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5[2];

  v5[0] = a3;
  v5[1] = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::NameLoc>(a2, v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::NameLoc>(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v10 = a1;
  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *v2++;
    v3 = v4;
  }
  else
  {
    v3 = 0;
  }
  v5 = *v2;
  mlir::Attribute::getContext((mlir::Attribute *)&v10);
  v11 = v3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v12[0] = &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id;
  v12[1] = Context;
  v17[0] = _ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v17[1] = v12;
  v15 = v11;
  v16 = v5;
  v8 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v15, &v16);
  v13[0] = &v15;
  v13[1] = v17;
  v14 = &v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

uint64_t mlir::detail::StorageUserBase<mlir::OpaqueLoc,mlir::LocationAttr,mlir::detail::OpaqueLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9OpaqueLocENS1_12LocationAttrENSB_20OpaqueLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v8[4];

  v6 = *(_QWORD *)(a2 + 24);
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9OpaqueLocENS1_12LocationAttrENSA_20OpaqueLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v10 = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *a3;
  mlir::Attribute::getContext((mlir::Attribute *)&v10);
  v11 = v5;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v12[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id;
  v12[1] = Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail20OpaqueLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9OpaqueLocEJRmRNS1_6TypeIDERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextESC_DpOT0_EUlPSK_E_EEvlS4_;
  v18[1] = v12;
  v15 = v3;
  v16 = v4;
  v17 = v11;
  v8 = llvm::hash_combine<unsigned long,mlir::TypeID,mlir::Location>(&v15, &v16, &v17);
  v13[0] = &v15;
  v13[1] = v18;
  v14 = &v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

uint64_t mlir::detail::StorageUserBase<mlir::UnknownLoc,mlir::LocationAttr,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10UnknownLocENS1_12LocationAttrENS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_10UnknownLocEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, *a1, a1[1]);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>,mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::InsertIntoBucket<mlir::Location const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::grow(a1, v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v9 - 1);
    a2 = (_QWORD *)(*(_QWORD *)a1 + 8 * v11);
    v12 = *a2;
    if (*a3 != *a2)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = a2;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a2 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v16 & v10));
        v12 = *a2;
        if (*a3 == *a2)
          goto LABEL_3;
      }
      if (v13)
        a2 = v13;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

int64x2_t *llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  llvm *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = v4;
      do
      {
        v27 = *(_QWORD *)v18;
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = *(_DWORD *)(a1 + 16) - 1;
          v29 = v28 & ((v27 >> 4) ^ (v27 >> 9));
          v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
          v30 = *v26;
          if (v27 != *v26)
          {
            v31 = 0;
            v32 = 1;
            while (v30 != -4096)
            {
              if (v31)
                v33 = 0;
              else
                v33 = v30 == -8192;
              if (v33)
                v31 = v26;
              v34 = v29 + v32++;
              v29 = v34 & v28;
              v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v34 & v28));
              v30 = *v26;
              if (v27 == *v26)
                goto LABEL_24;
            }
            if (v31)
              v26 = v31;
          }
LABEL_24:
          *v26 = v27;
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 8);
      }
      while (v18 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a2[2];
  if (v3 == *(_QWORD *)(*a1 + 8))
  {
    if (!v3)
      return a2[3] == *(_QWORD *)(v2 + 16);
    v4 = (_QWORD *)a2[1];
    v5 = *(_QWORD **)v2;
    v6 = 8 * v3;
    while (*v4 == *v5)
    {
      ++v4;
      ++v5;
      v6 -= 8;
      if (!v6)
        return a2[3] == *(_QWORD *)(v2 + 16);
    }
  }
  return 0;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FusedLocAttrStorage::construct(__sz, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a2[2];
  if (v3 == *(_QWORD *)(*a1 + 8))
  {
    if (!v3)
      return a2[3] == *(_QWORD *)(v2 + 16);
    v4 = (_QWORD *)a2[1];
    v5 = *(_QWORD **)v2;
    v6 = 8 * v3;
    while (*v4 == *v5)
    {
      ++v4;
      ++v5;
      v6 -= 8;
      if (!v6)
        return a2[3] == *(_QWORD *)(v2 + 16);
    }
  }
  return 0;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::detail::FusedLocAttrStorage::construct(__sz, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJRNS_8ArrayRefINS1_8LocationEEERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

mlir::MLIRContextImpl **mlir::MLIRContext::MLIRContext(mlir::MLIRContextImpl **a1, mlir::DialectRegistry **a2, int a3)
{
  mlir::MLIRContextImpl *v6;
  mlir::MLIRContextImpl *v7;
  mlir::MLIRContextImpl *v14;
  unsigned __int8 **v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  unsigned __int8 **v22;
  mlir::MLIRContext *v23;
  mlir::MLIRContext *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;
  unsigned int v42;
  mlir::MLIRContextImpl **v43;
  mlir::MLIRContextImpl ***v44;
  mlir::MLIRContextImpl **v45;

  v6 = (mlir::MLIRContextImpl *)operator new(0x2C0uLL);
  v7 = v6;
  if (a3 != 1)
  {
    mlir::MLIRContextImpl::MLIRContextImpl(v6, 0);
    *a1 = v7;
    if (atomic_load(clOptions))
      goto LABEL_8;
    goto LABEL_14;
  }
  if (!atomic_load(clOptions))
  {
    mlir::MLIRContextImpl::MLIRContextImpl(v6, 1);
    *a1 = v7;
    if (atomic_load(clOptions))
      goto LABEL_8;
LABEL_14:
    v14 = *a1;
    goto LABEL_15;
  }
  if (!atomic_load(clOptions))
  mlir::MLIRContextImpl::MLIRContextImpl(v7, *(_BYTE *)(clOptions[0] + 128) == 0);
  *a1 = v7;
  if (!atomic_load(clOptions))
    goto LABEL_14;
LABEL_8:
  if (!atomic_load(clOptions))
  {
    *((_BYTE *)*a1 + 42) = *(_BYTE *)(clOptions[0] + 320);
    if (atomic_load(clOptions))
      goto LABEL_10;
LABEL_12:
    goto LABEL_10;
  }
  *((_BYTE *)*a1 + 42) = *(_BYTE *)(clOptions[0] + 320);
  if (!atomic_load(clOptions))
    goto LABEL_12;
LABEL_10:
  v14 = *a1;
  *((_BYTE *)*a1 + 43) = *(_BYTE *)(clOptions[0] + 512);
LABEL_15:
  mlir::DialectRegistry::appendTo(a2, (uint64_t **)v14 + 31);
  v43 = a1;
  mlir::MLIRContext::getOrLoadDialect(a1, (uint64_t)"builtin", 7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::BuiltinDialect * mlir::MLIRContext::getOrLoadDialect<mlir::BuiltinDialect>(void)::{lambda(void)#1}>, (uint64_t)&v43);
  *((_QWORD *)*a1 + 44) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id);
  *((_QWORD *)*a1 + 45) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id);
  *((_QWORD *)*a1 + 46) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id);
  *((_QWORD *)*a1 + 47) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id);
  *((_QWORD *)*a1 + 48) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id);
  *((_QWORD *)*a1 + 49) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id);
  *((_QWORD *)*a1 + 50) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id);
  *((_QWORD *)*a1 + 51) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id);
  *((_QWORD *)*a1 + 52) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id);
  *((_QWORD *)*a1 + 53) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id);
  *((_QWORD *)*a1 + 54) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id);
  *((_QWORD *)*a1 + 55) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id);
  *((_QWORD *)*a1 + 56) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IndexType,void>::id);
  v41 = 0;
  v42 = 1;
  v45 = a1;
  v17 = (unsigned __int8 **)((char *)*a1 + 344);
  v43 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  v44 = &v45;
  *((_QWORD *)*a1 + 57) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v17, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v42, &v41);
  v41 = 0;
  v42 = 8;
  v44 = &v45;
  v45 = a1;
  v18 = (unsigned __int8 **)((char *)*a1 + 344);
  v43 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((_QWORD *)*a1 + 58) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v18, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v42, &v41);
  v41 = 0;
  v42 = 16;
  v44 = &v45;
  v45 = a1;
  v19 = (unsigned __int8 **)((char *)*a1 + 344);
  v43 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((_QWORD *)*a1 + 59) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v19, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v42, &v41);
  v41 = 0;
  v42 = 32;
  v44 = &v45;
  v45 = a1;
  v20 = (unsigned __int8 **)((char *)*a1 + 344);
  v43 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((_QWORD *)*a1 + 60) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v20, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v42, &v41);
  v41 = 0;
  v42 = 64;
  v44 = &v45;
  v45 = a1;
  v21 = (unsigned __int8 **)((char *)*a1 + 344);
  v43 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((_QWORD *)*a1 + 61) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v21, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v42, &v41);
  v41 = 0;
  v42 = 128;
  v44 = &v45;
  v45 = a1;
  v22 = (unsigned __int8 **)((char *)*a1 + 344);
  v43 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((_QWORD *)*a1 + 62) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v22, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v42, &v41);
  *((_QWORD *)*a1 + 63) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NoneType,void>::id);
  *((_QWORD *)*a1 + 71) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id);
  *((_QWORD *)*a1 + 68) = mlir::IntegerAttr::getBoolAttrUnchecked(*((_QWORD *)*a1 + 57), 0);
  *((_QWORD *)*a1 + 69) = mlir::IntegerAttr::getBoolAttrUnchecked(*((_QWORD *)*a1 + 57), 1u);
  *((_QWORD *)*a1 + 70) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id);
  *((_QWORD *)*a1 + 72) = mlir::DictionaryAttr::getEmptyUnchecked((mlir::DictionaryAttr *)a1, v23);
  *((_QWORD *)*a1 + 73) = mlir::StringAttr::getEmptyStringAttrUnchecked((mlir::StringAttr *)a1, v24);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineBinaryOpExprStorage>((uint64_t *)*a1 + 39, v25, v26, v27);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineConstantExprStorage>((uint64_t *)*a1 + 39, v28, v29, v30);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineDimExprStorage>((uint64_t *)*a1 + 39, v31, v32, v33);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineMapStorage>((uint64_t *)*a1 + 39, v34, v35, v36);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerSetStorage>((uint64_t *)*a1 + 39, v37, v38, v39);
  return a1;
}

mlir::MLIRContextImpl **mlir::MLIRContext::MLIRContext(mlir::MLIRContextImpl **a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::DialectRegistry *v10[3];
  void *__p;
  _QWORD *v12;

  mlir::DialectRegistry::DialectRegistry((mlir::DialectRegistry *)v10);
  mlir::MLIRContext::MLIRContext(a1, v10, a2);
  v4 = __p;
  if (__p)
  {
    v5 = v12;
    v6 = __p;
    if (v12 != __p)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = __p;
    }
    v12 = v4;
    operator delete(v6);
  }
  std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy((uint64_t)v10, (char *)v10[1]);
  return a1;
}

uint64_t mlir::MLIRContext::printOpOnDiagnostic(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 42) = a2;
  return this;
}

void mlir::DialectRegistry::appendTo(mlir::DialectRegistry **this, uint64_t **a2)
{
  mlir::DialectRegistry **v4;
  mlir::DialectRegistry *v5;
  mlir::DialectRegistry *v6;
  mlir::DialectRegistry *v7;
  int v8;
  void *v9;
  size_t v10;
  mlir::DialectRegistry *v11;
  mlir::DialectRegistry **v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = this + 1;
  v5 = *this;
  if (*this != (mlir::DialectRegistry *)(this + 1))
  {
    do
    {
      v8 = *((char *)v5 + 55);
      if (v8 >= 0)
        v9 = (char *)v5 + 32;
      else
        v9 = (void *)*((_QWORD *)v5 + 4);
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v5 + 55);
      else
        v10 = *((_QWORD *)v5 + 5);
      mlir::DialectRegistry::insert(a2, *((uint64_t **)v5 + 7), v9, v10, (_QWORD *)v5 + 8);
      v11 = (mlir::DialectRegistry *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = (mlir::DialectRegistry **)v11;
          v11 = *(mlir::DialectRegistry **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (mlir::DialectRegistry **)*((_QWORD *)v5 + 2);
          v13 = *v12 == v5;
          v5 = (mlir::DialectRegistry *)v12;
        }
        while (!v13);
      }
      v5 = (mlir::DialectRegistry *)v12;
    }
    while (v12 != v4);
  }
  v6 = this[3];
  v7 = this[4];
  if (v6 != v7)
  {
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v6 + 24))(&v17);
      v14 = a2[4];
      if (v14 < a2[5])
        break;
      a2[4] = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a2 + 3, &v17);
      v16 = v17;
      v17 = 0;
      if (v16)
        goto LABEL_22;
LABEL_17:
      v6 = (mlir::DialectRegistry *)((char *)v6 + 8);
      if (v6 == v7)
        return;
    }
    v15 = v17;
    v17 = 0;
    *v14 = v15;
    a2[4] = v14 + 1;
    v16 = v17;
    v17 = 0;
    if (!v16)
      goto LABEL_17;
LABEL_22:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    goto LABEL_17;
  }
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineBinaryOpExprStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineBinaryOpExprStorage]";
      v18 = 89;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::detail::AffineBinaryOpExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[131], 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineConstantExprStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineConstantExprStorage]";
      v18 = 89;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::detail::AffineConstantExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[132], 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineDimExprStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineDimExprStorage]";
      v18 = 84;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::detail::AffineDimExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[130], 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineMapStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineMapStorage]";
      v18 = 80;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::detail::AffineMapStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[126], 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerSetStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::IntegerSetStorage]";
      v18 = 81;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::detail::IntegerSetStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[127], 0, a4);
}

void mlir::MLIRContext::~MLIRContext(mlir::MLIRContextImpl **this)
{
  mlir::MLIRContextImpl *v2;

  v2 = *this;
  *this = 0;
  if (v2)
    mlir::MLIRContextImpl::~MLIRContextImpl(v2);
}

uint64_t mlir::MLIRContext::executeActionInternal(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  mlir::MLIRContext *v7;
  _QWORD v8[2];

  v4 = *a1;
  v8[0] = a2;
  v8[1] = a3;
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 48))(v5, v8, a4);
  v7 = (mlir::MLIRContext *)std::__throw_bad_function_call[abi:nn180100]();
  return mlir::MLIRContext::hasActionHandler(v7);
}

BOOL mlir::MLIRContext::hasActionHandler(mlir::MLIRContext *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 24) != 0;
}

uint64_t mlir::MLIRContext::getDiagEngine(mlir::MLIRContext *this)
{
  return *(_QWORD *)this + 32;
}

void mlir::MLIRContext::appendDialectRegistry(mlir::MLIRContext *this, mlir::DialectRegistry **a2)
{
  if ((mlir::DialectRegistry::isSubsetOf(a2, *(_QWORD *)this + 248) & 1) == 0)
  {
    mlir::DialectRegistry::appendTo(a2, (uint64_t **)(*(_QWORD *)this + 248));
    mlir::DialectRegistry::applyExtensions((mlir::DialectRegistry *)a2, this);
  }
}

void mlir::MLIRContext::getLoadedDialects(mlir::MLIRContext *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)this;
  v4 = *(unsigned int *)(*(_QWORD *)this + 232);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (char *)operator new(8 * v4);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = &v6[v5];
    v7 = *(unsigned int *)(v3 + 240);
    if ((_DWORD)v7)
    {
      v8 = 24 * v7;
      for (i = *(_QWORD **)(v3 + 224); *i >= 0xFFFFFFFFFFFFFFFELL; i += 3)
      {
        v8 -= 24;
        if (!v8)
          return;
      }
    }
    else
    {
      i = *(_QWORD **)(v3 + 224);
    }
    v10 = *(_QWORD *)(v3 + 224) + 24 * v7;
    if (i != (_QWORD *)v10)
    {
LABEL_9:
      v11 = i[2];
      v12 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v6 < v12)
      {
        *(_QWORD *)v6 = v11;
        v13 = (uint64_t)(v6 + 8);
        *(_QWORD *)(a2 + 8) = v6 + 8;
        goto LABEL_37;
      }
      v14 = *(char **)a2;
      v15 = (uint64_t)&v6[-*(_QWORD *)a2];
      v16 = v15 >> 3;
      v17 = (v15 >> 3) + 1;
      if (v17 >> 61)
        abort();
      v18 = v12 - (_QWORD)v14;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
        v21 = &v20[8 * v16];
        v22 = &v20[8 * v19];
        *v21 = v11;
        v13 = (uint64_t)(v21 + 1);
        if (v6 != v14)
        {
LABEL_20:
          v23 = v6 - 8 - v14;
          if (v23 >= 0x168)
          {
            if (&v20[v15 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v20[v15 - 8])
            {
              v24 = v6;
            }
            else if (&v6[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
            {
              v24 = v6;
            }
            else if ((unint64_t)(v6 - &v20[v15]) >= 0x20)
            {
              v25 = (v23 >> 3) + 1;
              v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
              v24 = &v6[-v26];
              v21 = (_QWORD *)((char *)v21 - v26);
              v27 = &v20[8 * v16 - 16];
              v28 = v6 - 16;
              v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v30 = *(_OWORD *)v28;
                *(v27 - 1) = *((_OWORD *)v28 - 1);
                *v27 = v30;
                v27 -= 2;
                v28 -= 32;
                v29 -= 4;
              }
              while (v29);
              if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_34:
                v6 = *(char **)a2;
                *(_QWORD *)a2 = v21;
                *(_QWORD *)(a2 + 8) = v13;
                *(_QWORD *)(a2 + 16) = v22;
                if (!v6)
                  goto LABEL_36;
                goto LABEL_35;
              }
            }
            else
            {
              v24 = v6;
            }
          }
          else
          {
            v24 = v6;
          }
          do
          {
            v31 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v21 = v31;
          }
          while (v24 != v14);
          goto LABEL_34;
        }
      }
      else
      {
        v20 = 0;
        v21 = (_QWORD *)(8 * v16);
        v22 = 0;
        *(_QWORD *)(8 * v16) = v11;
        v13 = 8 * v16 + 8;
        if (v6 != v14)
          goto LABEL_20;
      }
      *(_QWORD *)a2 = v21;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = v22;
LABEL_35:
      operator delete(v6);
LABEL_36:
      *(_QWORD *)(a2 + 8) = v13;
LABEL_37:
      while (1)
      {
        i += 3;
        if (i == (_QWORD *)v10)
          break;
        if (*i < 0xFFFFFFFFFFFFFFFELL)
        {
          v6 = (char *)v13;
          if (i != (_QWORD *)v10)
            goto LABEL_9;
          break;
        }
      }
      v32 = v13 - *(_QWORD *)a2;
      if (v32 >= 16)
        qsort(*(void **)a2, (unint64_t)v32 >> 3, 8uLL, (int (__cdecl *)(const void *, const void *))mlir::MLIRContext::getLoadedDialects(void)::$_0::__invoke);
    }
  }
}

void mlir::MLIRContext::getAvailableDialects(mlir::MLIRContext *this@<X0>, char **a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD **)(*(_QWORD *)this + 248);
  v4 = *(_QWORD *)this + 256;
  if (v3 != (_QWORD *)v4)
  {
    v5 = 0;
    do
    {
      v6 = *((char *)v3 + 55);
      if (v6 >= 0)
        v7 = v3 + 4;
      else
        v7 = (_QWORD *)v3[4];
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)v3 + 55);
      else
        v8 = v3[5];
      v9 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v9)
      {
        v10 = *a2;
        v11 = (v5 - *a2) >> 4;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60)
          abort();
        v13 = v9 - (_QWORD)v10;
        if (v13 >> 3 > v12)
          v12 = v13 >> 3;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v15 = (char *)operator new(16 * v14);
          v16 = &v15[16 * v11];
          *(_QWORD *)v16 = v7;
          *((_QWORD *)v16 + 1) = v8;
          if (v5 == v10)
          {
LABEL_32:
            v18 = v5;
            v5 = v16 + 16;
            *a2 = v16;
            a2[1] = v16 + 16;
            a2[2] = &v15[16 * v14];
            if (!v18)
              goto LABEL_25;
LABEL_24:
            operator delete(v18);
            goto LABEL_25;
          }
        }
        else
        {
          v15 = 0;
          v16 = (char *)(16 * v11);
          *(_QWORD *)v16 = v7;
          *((_QWORD *)v16 + 1) = v8;
          if (v5 == v10)
            goto LABEL_32;
        }
        v17 = v16;
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v5 - 1);
          v17 -= 16;
          v5 -= 16;
        }
        while (v5 != v10);
        v18 = *a2;
        v5 = v16 + 16;
        *a2 = v17;
        a2[1] = v16 + 16;
        a2[2] = &v15[16 * v14];
        if (v18)
          goto LABEL_24;
      }
      else
      {
        *(_QWORD *)v5 = v7;
        *((_QWORD *)v5 + 1) = v8;
        v5 += 16;
      }
LABEL_25:
      a2[1] = v5;
      v19 = (_QWORD *)v3[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v3[2];
          v21 = *v20 == (_QWORD)v3;
          v3 = v20;
        }
        while (!v21);
      }
      v3 = v20;
    }
    while (v20 != (_QWORD *)v4);
  }
}

uint64_t mlir::MLIRContext::getLoadedDialect(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;

  v9[0] = a2;
  v9[1] = a3;
  v4 = *a1;
  v5 = (uint64_t *)(*a1 + 224);
  v10 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v5, (uint64_t)v9, &v10);
  v7 = v10;
  if (!v6)
    v7 = *(_QWORD *)(v4 + 224) + 24 * *(unsigned int *)(v4 + 240);
  if (v7 == *(_QWORD *)(*a1 + 224) + 24 * *(unsigned int *)(*a1 + 240))
    return 0;
  else
    return *(_QWORD *)(v7 + 16);
}

uint64_t **(*mlir::MLIRContext::getOrLoadDialect(uint64_t a1, void *a2, size_t a3))(uint64_t a1, uint64_t a2)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t **(*result)(uint64_t, uint64_t);
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;

  v12[0] = a2;
  v12[1] = a3;
  v6 = *(_QWORD *)a1;
  v7 = (uint64_t *)(*(_QWORD *)a1 + 224);
  v13 = 0;
  v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v7, (uint64_t)v12, &v13);
  v9 = *(_QWORD *)(v6 + 224) + 24 * *(unsigned int *)(v6 + 240);
  if (v8)
    v9 = v13;
  if (v9 == *(_QWORD *)(*(_QWORD *)a1 + 224) + 24 * *(unsigned int *)(*(_QWORD *)a1 + 240)
    || (result = *(uint64_t **(**)(uint64_t, uint64_t))(v9 + 16)) == 0)
  {
    result = mlir::DialectRegistry::getDialectAllocator(*(_QWORD *)a1 + 248, a2, a3);
    if (result)
      return (uint64_t **(*)(uint64_t, uint64_t))result(v11, a1);
  }
  return result;
}

mlir::Dialect *mlir::MLIRContext::getOrLoadDialect(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v9;
  uint64_t *v10;
  mlir::Dialect *v11;
  _QWORD *v12;
  uint64_t v13;
  mlir::Dialect **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  const char *v25;
  __int16 v26;
  uint64_t v27[2];
  __int128 v28;
  __int16 v29;
  _QWORD *v30[5];
  __int128 v31;

  *(_QWORD *)&v31 = a2;
  *((_QWORD *)&v31 + 1) = a3;
  v9 = *a1;
  v10 = (uint64_t *)(*a1 + 224);
  v30[0] = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v10, (uint64_t)&v31, v30) & 1) != 0)
  {
    v11 = (mlir::Dialect *)v30[0][2];
    if (*((_QWORD *)v11 + 3) != a4)
    {
      v29 = 1283;
      v27[0] = (uint64_t)"a dialect with namespace '";
      v28 = v31;
      v25 = "' has already been registered";
      v26 = 259;
      llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v30);
      llvm::report_fatal_error((llvm::Twine *)v30, 1);
    }
  }
  else
  {
    v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>,llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)v10, (uint64_t)&v31, (uint64_t)&v31, v30[0]);
    *(_OWORD *)v12 = v31;
    v12[2] = 0;
    a5(v27, a6);
    v30[0] = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v10, (uint64_t)&v31, v30) & 1) != 0)
    {
      v14 = (mlir::Dialect **)(v30[0] + 2);
      v13 = v30[0][2];
      v15 = v27[0];
      v27[0] = 0;
      v30[0][2] = v15;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v16 = v27[0];
        v27[0] = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
    }
    else
    {
      v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>,llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)v10, (uint64_t)&v31, (uint64_t)&v31, v30[0]);
      *(_OWORD *)v17 = v31;
      v17[2] = v27[0];
      v14 = (mlir::Dialect **)(v17 + 2);
    }
    v11 = *v14;
    v30[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v9 + 664), (uint64_t)&v31, v30))
    {
      v18 = v30[0];
      if (v30[0] != (_QWORD *)(*(_QWORD *)(v9 + 664) + 80 * *(unsigned int *)(v9 + 680)))
      {
        v19 = (_OWORD *)v30[0][2];
        v20 = *((unsigned int *)v30[0] + 6);
        if ((_DWORD)v20)
        {
          v21 = 8 * v20;
          v22 = (uint64_t *)v30[0][2];
          do
          {
            v23 = *v22++;
            *(_QWORD *)(v23 + 32) = v11;
            v21 -= 8;
          }
          while (v21);
        }
        if (v19 != v18 + 2)
          free(v19);
        *v18 = xmmword_181236BE0;
        *(int32x2_t *)(v9 + 672) = vadd_s32(*(int32x2_t *)(v9 + 672), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    mlir::DialectRegistry::applyExtensions((mlir::DialectRegistry *)(v9 + 248), v11);
  }
  return v11;
}

BOOL mlir::MLIRContext::isDialectLoading(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;

  v9[0] = a2;
  v9[1] = a3;
  v4 = *a1;
  v5 = (uint64_t *)(*a1 + 224);
  v10 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v5, (uint64_t)v9, &v10);
  v7 = v10;
  if (!v6)
    v7 = *(_QWORD *)(v4 + 224) + 24 * *(unsigned int *)(v4 + 240);
  return v7 != *(_QWORD *)(*a1 + 224) + 24 * *(unsigned int *)(*a1 + 240) && *(_QWORD *)(v7 + 16) == 0;
}

unint64_t mlir::MLIRContext::getRegistryHash(mlir::MLIRContext *this)
{
  int v2;
  unsigned __int8 v3;
  unint64_t v4;
  int v5;
  unsigned __int8 v6;
  unint64_t v7;
  int v8;
  unsigned __int8 v9;
  unint64_t v10;
  int v11;
  unsigned __int8 v12;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(*(_QWORD *)this + 232);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  if ((v3 & 1) == 0)
  {
    v14 = v2;
    v2 = v14;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      v2 = v14;
    }
  }
  v36 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v28 = 0;
  DWORD2(v28) = v2;
  v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v28, 0, (char *)((unint64_t)&v28 | 0xC), (char *)&v32);
  v5 = *(_DWORD *)(*(_QWORD *)this + 520);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  if ((v6 & 1) == 0)
  {
    v27 = v4;
    v26 = v5;
    v5 = v26;
    v18 = v17;
    v4 = v27;
    if (v18)
    {
      v19 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v19 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v19;
      v5 = v26;
      v4 = v27;
    }
  }
  v36 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v28 = v4;
  DWORD2(v28) = v5;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v28, 0, (char *)((unint64_t)&v28 | 0xC), (char *)&v32);
  v8 = *(_DWORD *)(*(_QWORD *)this + 196);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  if ((v9 & 1) == 0)
  {
    v20 = v8;
    v8 = v20;
    if (v21)
    {
      v22 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v22 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v22;
      v8 = v20;
    }
  }
  v36 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v28 = v7;
  DWORD2(v28) = v8;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v28, 0, (char *)((unint64_t)&v28 | 0xC), (char *)&v32);
  v11 = *(_DWORD *)(*(_QWORD *)this + 328);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  if ((v12 & 1) == 0)
  {
    v23 = v10;
    v10 = v23;
    if (v24)
    {
      v25 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v25 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v25;
      v10 = v23;
    }
  }
  v36 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v28 = v10;
  DWORD2(v28) = v11;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v28, 0, (char *)((unint64_t)&v28 | 0xC), (char *)&v32);
}

uint64_t mlir::MLIRContext::allowsUnregisteredDialects(mlir::MLIRContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 40);
}

uint64_t mlir::MLIRContext::allowUnregisteredDialects(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 40) = a2;
  return this;
}

uint64_t mlir::MLIRContext::isMultithreadingEnabled(mlir::MLIRContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 41);
}

uint64_t mlir::MLIRContext::getNumThreads(mlir::MLIRContext *this)
{
  if (*(_BYTE *)(*(_QWORD *)this + 41))
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 48) + 308);
  else
    return 1;
}

uint64_t mlir::MLIRContext::shouldPrintOpOnDiagnostic(mlir::MLIRContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 42);
}

uint64_t mlir::MLIRContext::shouldPrintStackTraceOnDiagnostic(mlir::MLIRContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 43);
}

uint64_t mlir::MLIRContext::getRegisteredOperations(mlir::MLIRContext *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 208);
}

uint64_t mlir::RegisteredOperationName::lookup(int8x16_t *a1, const unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3;
  int Key;

  v3 = *a3;
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(*a3 + 184), a1, a2);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v3 + 192))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 184) + 8 * Key) + 8);
}

_OWORD *mlir::Dialect::addType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  unint64_t v12;
  _OWORD *result;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;

  v5 = **(_QWORD **)(a1 + 32);
  *(_QWORD *)(v5 + 144) += 144;
  v6 = *(_QWORD *)(v5 + 64);
  if (v6)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 144 > *(_QWORD *)(v5 + 72) - v6;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *(_DWORD *)(v5 + 88) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *(unsigned int *)(v5 + 88);
    if (v11 >= *(_DWORD *)(v5 + 92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 80, (void *)(v5 + 96), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(v5 + 88);
    }
    *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v11) = buffer;
    ++*(_DWORD *)(v5 + 88);
    *(_QWORD *)(v5 + 72) = &buffer[v9];
    v12 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v12 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v5 + 64) = v12 + 144;
  *(_QWORD *)v12 = *(_QWORD *)a3;
  *(_QWORD *)(v12 + 8) = v12 + 24;
  result = (_OWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 16) = 0x300000000;
  if (*(_DWORD *)(a3 + 16))
    result = (_OWORD *)llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)result, a3 + 8);
  *(_QWORD *)(v12 + 96) = 0;
  v14 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(v12 + 96) = v14;
  if (*(_QWORD *)(a3 + 96) >= 8uLL)
  {
    result = (_OWORD *)(v12 + 72);
    v15 = (__int128 *)(a3 + 72);
    if ((v14 & 2) != 0 && (v14 & 4) != 0)
    {
      result = (_OWORD *)(*(uint64_t (**)(_OWORD *, __int128 *))((v14 & 0xFFFFFFFFFFFFFFF8) + 8))(result, v15);
    }
    else
    {
      v16 = *v15;
      *(_QWORD *)(v12 + 88) = *(_QWORD *)(a3 + 88);
      *result = v16;
    }
    *(_QWORD *)(a3 + 96) = 0;
  }
  v17 = *(_OWORD *)(a3 + 104);
  v18 = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(v12 + 136) = *(_QWORD *)(a3 + 136);
  *(_OWORD *)(v12 + 120) = v18;
  *(_OWORD *)(v12 + 104) = v17;
  v19 = *(_DWORD *)(v5 + 336);
  if (!v19)
    goto LABEL_41;
  v20 = *(_QWORD *)(v5 + 320);
  v21 = (v19 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v22 = (_QWORD *)(v20 + 16 * v21);
  v23 = *v22;
  if (*v22 == a2)
LABEL_21:
    llvm::report_fatal_error((llvm *)"Dialect Type already registered.", (const char *)1);
  v25 = 0;
  v26 = 1;
  while (v23 != -4096)
  {
    if (v25)
      v27 = 0;
    else
      v27 = v23 == -8192;
    if (v27)
      v25 = v22;
    v28 = v21 + v26++;
    v21 = v28 & (v19 - 1);
    v22 = (_QWORD *)(v20 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_21;
  }
  v29 = v25 ? v25 : v22;
  v30 = *(_DWORD *)(v5 + 328);
  if (4 * v30 + 4 < 3 * v19)
  {
    if (v19 + ~v30 - *(_DWORD *)(v5 + 332) > v19 >> 3)
    {
LABEL_24:
      v24 = *v29;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_41:
    v19 *= 2;
  }
  result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v5 + 320, v19);
  v31 = *(_QWORD *)(v5 + 320);
  v32 = *(_DWORD *)(v5 + 336) - 1;
  v33 = v32 & ((a2 >> 4) ^ (a2 >> 9));
  v29 = (_QWORD *)(v31 + 16 * v33);
  v34 = *v29;
  if (*v29 != a2)
  {
    v35 = 0;
    v36 = 1;
    while (v34 != -4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v34 == -8192;
      if (v37)
        v35 = v29;
      v38 = v33 + v36++;
      v33 = v38 & v32;
      v29 = (_QWORD *)(v31 + 16 * (v38 & v32));
      v34 = *v29;
      v24 = a2;
      if (*v29 == a2)
        goto LABEL_25;
    }
    if (v35)
      v29 = v35;
    goto LABEL_24;
  }
  v24 = a2;
LABEL_25:
  ++*(_DWORD *)(v5 + 328);
  if (v24 != -4096)
    --*(_DWORD *)(v5 + 332);
  *v29 = a2;
  v29[1] = v12;
  return result;
}

_OWORD *mlir::Dialect::addAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *buffer;
  uint64_t v11;
  unint64_t v12;
  _OWORD *result;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;

  v5 = **(_QWORD **)(a1 + 32);
  *(_QWORD *)(v5 + 144) += 144;
  v6 = *(_QWORD *)(v5 + 64);
  if (v6)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 144 > *(_QWORD *)(v5 + 72) - v6;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *(_DWORD *)(v5 + 88) >> 7;
    if (v8 >= 0x1E)
      LOBYTE(v8) = 30;
    v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    v11 = *(unsigned int *)(v5 + 88);
    if (v11 >= *(_DWORD *)(v5 + 92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 80, (void *)(v5 + 96), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(v5 + 88);
    }
    *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v11) = buffer;
    ++*(_DWORD *)(v5 + 88);
    *(_QWORD *)(v5 + 72) = &buffer[v9];
    v12 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v12 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v5 + 64) = v12 + 144;
  *(_QWORD *)v12 = *(_QWORD *)a3;
  *(_QWORD *)(v12 + 8) = v12 + 24;
  result = (_OWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 16) = 0x300000000;
  if (*(_DWORD *)(a3 + 16))
    result = (_OWORD *)llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)result, a3 + 8);
  *(_QWORD *)(v12 + 96) = 0;
  v14 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(v12 + 96) = v14;
  if (*(_QWORD *)(a3 + 96) >= 8uLL)
  {
    result = (_OWORD *)(v12 + 72);
    v15 = (__int128 *)(a3 + 72);
    if ((v14 & 2) != 0 && (v14 & 4) != 0)
    {
      result = (_OWORD *)(*(uint64_t (**)(_OWORD *, __int128 *))((v14 & 0xFFFFFFFFFFFFFFF8) + 8))(result, v15);
    }
    else
    {
      v16 = *v15;
      *(_QWORD *)(v12 + 88) = *(_QWORD *)(a3 + 88);
      *result = v16;
    }
    *(_QWORD *)(a3 + 96) = 0;
  }
  v17 = *(_OWORD *)(a3 + 104);
  v18 = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(v12 + 136) = *(_QWORD *)(a3 + 136);
  *(_OWORD *)(v12 + 120) = v18;
  *(_OWORD *)(v12 + 104) = v17;
  v19 = *(_DWORD *)(v5 + 528);
  if (!v19)
    goto LABEL_41;
  v20 = *(_QWORD *)(v5 + 512);
  v21 = (v19 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v22 = (_QWORD *)(v20 + 16 * v21);
  v23 = *v22;
  if (*v22 == a2)
LABEL_21:
    llvm::report_fatal_error((llvm *)"Dialect Attribute already registered.", (const char *)1);
  v25 = 0;
  v26 = 1;
  while (v23 != -4096)
  {
    if (v25)
      v27 = 0;
    else
      v27 = v23 == -8192;
    if (v27)
      v25 = v22;
    v28 = v21 + v26++;
    v21 = v28 & (v19 - 1);
    v22 = (_QWORD *)(v20 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_21;
  }
  v29 = v25 ? v25 : v22;
  v30 = *(_DWORD *)(v5 + 520);
  if (4 * v30 + 4 < 3 * v19)
  {
    if (v19 + ~v30 - *(_DWORD *)(v5 + 524) > v19 >> 3)
    {
LABEL_24:
      v24 = *v29;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_41:
    v19 *= 2;
  }
  result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v5 + 512, v19);
  v31 = *(_QWORD *)(v5 + 512);
  v32 = *(_DWORD *)(v5 + 528) - 1;
  v33 = v32 & ((a2 >> 4) ^ (a2 >> 9));
  v29 = (_QWORD *)(v31 + 16 * v33);
  v34 = *v29;
  if (*v29 != a2)
  {
    v35 = 0;
    v36 = 1;
    while (v34 != -4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v34 == -8192;
      if (v37)
        v35 = v29;
      v38 = v33 + v36++;
      v33 = v38 & v32;
      v29 = (_QWORD *)(v31 + 16 * (v38 & v32));
      v34 = *v29;
      v24 = a2;
      if (*v29 == a2)
        goto LABEL_25;
    }
    if (v35)
      v29 = v35;
    goto LABEL_24;
  }
  v24 = a2;
LABEL_25:
  ++*(_DWORD *)(v5 + 520);
  if (v24 != -4096)
    --*(_DWORD *)(v5 + 524);
  *v29 = a2;
  v29[1] = v12;
  return result;
}

uint64_t mlir::AbstractAttribute::lookup(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;

  v2 = *(_DWORD *)(*(_QWORD *)a2 + 528);
  if (!v2)
    goto LABEL_9;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 512);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v6 = *(_QWORD *)(v3 + 16 * v5);
  if (v6 != a1)
  {
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a1)
        goto LABEL_3;
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create an Attribute that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  result = *(_QWORD *)(v3 + 16 * v5 + 8);
  if (!result)
    goto LABEL_9;
  return result;
}

_QWORD *mlir::OperationName::Impl::Impl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::StringAttr *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  _QWORD v19[4];
  __int16 v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[7];

  v23[6] = *MEMORY[0x1E0C80C00];
  v10 = *(mlir::StringAttr **)(a4 + 32);
  v20 = 261;
  v19[0] = a2;
  v19[1] = a3;
  v11 = mlir::StringAttr::get(v10, (mlir::MLIRContext *)v19);
  v21 = v23;
  v22 = 0x300000000;
  if (*(_DWORD *)(a6 + 8))
  {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)&v21, a6);
    v12 = v22 == 0;
  }
  else
  {
    v12 = 1;
  }
  *a1 = off_1E0E2B520;
  a1[1] = v11;
  a1[2] = a5;
  a1[3] = a4;
  a1[4] = a1 + 6;
  a1[5] = 0x300000000;
  if (v12)
  {
    a1[12] = 0;
    a1[13] = 0;
  }
  else
  {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)(a1 + 4), (uint64_t)&v21);
    v13 = v22;
    a1[12] = 0;
    a1[13] = 0;
    v14 = v21;
    if (!(_DWORD)v13)
      goto LABEL_10;
    v15 = 16 * v13;
    v16 = (void **)((char *)v21 + 8);
    do
    {
      v17 = *v16;
      v16 += 2;
      free(v17);
      v15 -= 16;
    }
    while (v15);
  }
  v14 = v21;
LABEL_10:
  if (v14 != v23)
    free(v14);
  return a1;
}

_QWORD *mlir::OperationName::OperationName(_QWORD *a1, int8x16_t *a2, const unsigned __int8 *a3, mlir::StringAttr *a4)
{
  uint64_t v8;
  int Key;
  pthread_rwlock_t **v10;
  int v11;
  uint64_t *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t Values;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  _QWORD v25[3];
  uint64_t v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  v8 = *(_QWORD *)a4;
  if (*(_BYTE *)(*(_QWORD *)a4 + 41))
  {
    Key = llvm::StringMapImpl::FindKey((uint64_t *)(v8 + 184), a2, a3);
    if (Key != -1 && Key != (unint64_t)*(unsigned int *)(v8 + 192))
    {
      *a1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 184) + 8 * Key) + 8);
      return a1;
    }
    v10 = (pthread_rwlock_t **)(v8 + 296);
    llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(v8 + 296));
    v11 = llvm::StringMapImpl::FindKey((uint64_t *)(v8 + 160), a2, a3);
    if (v11 != -1 && v11 != (unint64_t)*(unsigned int *)(v8 + 168))
    {
      *a1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 160) + 8 * v11) + 8);
      llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)(v8 + 296));
      return a1;
    }
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)(v8 + 296));
    llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)(v8 + 296));
  }
  else
  {
    v10 = 0;
  }
  v25[1] = a2;
  v25[2] = a3;
  v26 = 0;
  v12 = llvm::StringMap<std::unique_ptr<mlir::OperationName::Impl>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<mlir::OperationName::Impl>>(v8 + 160, a2, a3, &v26);
  v14 = v13;
  v15 = v26;
  v26 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v14)
  {
    LOWORD(v30) = 261;
    v27 = a2;
    v28 = (uint64_t)a3;
    v25[0] = mlir::StringAttr::get(a4, (mlir::MLIRContext *)&v27);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v25);
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v27 = &v29;
    v28 = 0x300000000;
    v17 = operator new(0x70uLL);
    v18 = v25[0];
    v17[2] = &mlir::detail::TypeIDResolver<void,void>::id;
    v17[3] = Values;
    v17[4] = v17 + 6;
    v17[5] = 0x300000000;
    v17[12] = 0;
    v17[13] = 0;
    *v17 = off_1E0E2B458;
    v17[1] = v18;
    v19 = *(_QWORD *)(*v12 + 8);
    *(_QWORD *)(*v12 + 8) = v17;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      v20 = (__int128 *)v27;
      if ((_DWORD)v28)
      {
        v21 = 16 * v28;
        v22 = (void **)((char *)v27 + 8);
        do
        {
          v23 = *v22;
          v22 += 2;
          free(v23);
          v21 -= 16;
        }
        while (v21);
        v20 = (__int128 *)v27;
      }
      if (v20 != &v29)
        free(v20);
    }
  }
  *a1 = *(_QWORD *)(*v12 + 8);
  if (v10)
    llvm::sys::RWMutexImpl::unlock_shared(v10);
  return a1;
}

uint64_t mlir::OperationName::getDialectNamespace(mlir::OperationName *this)
{
  uint64_t v2;
  uint64_t Values;
  uint64_t v5;
  uint64_t v6[2];
  char v7;

  v2 = *(_QWORD *)this;
  if (*(_UNKNOWN **)(*(_QWORD *)this + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v6[0] = *(_QWORD *)(v2 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v6);
    if (Values)
      return *(_QWORD *)(Values + 8);
  }
  else
  {
    Values = *(_QWORD *)(v2 + 24);
    if (Values)
      return *(_QWORD *)(Values + 8);
  }
  v6[0] = *(_QWORD *)(*(_QWORD *)this + 8);
  v6[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v6);
  v6[1] = v5;
  v7 = 46;
  llvm::StringRef::find(v6, &v7, 1uLL, 0);
  return v6[0];
}

uint64_t mlir::OperationName::UnregisteredOpModel::foldHook()
{
  return 0;
}

uint64_t mlir::OperationName::UnregisteredOpModel::hasTrait()
{
  return 0;
}

void mlir::OperationName::UnregisteredOpModel::getParseAssemblyFn(mlir::OperationName::UnregisteredOpModel *this)
{
  llvm::report_fatal_error((llvm *)"getParseAssemblyFn hook called on unregistered op", (const char *)1);
}

uint64_t mlir::OperationName::UnregisteredOpModel::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 216))(a3, a2, 1);
}

uint64_t mlir::OperationName::UnregisteredOpModel::verifyInvariants(mlir::OperationName::UnregisteredOpModel *this, Operation *a2)
{
  return 1;
}

uint64_t mlir::OperationName::UnregisteredOpModel::verifyRegionInvariants(mlir::OperationName::UnregisteredOpModel *this, Operation *a2)
{
  return 1;
}

unint64_t mlir::OperationName::UnregisteredOpModel::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!v4)
    return v4;
  if (*(_UNKNOWN **)(*(_QWORD *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v4 = 0;
  v9 = v4;
  if (!v4)
    return v4;
  v5 = mlir::DictionaryAttr::get((uint64_t)&v9, a3, a4);
  v6 = v5 & 0xFFFFFFFFFFFFFF00;
  v7 = v5;
  if (!v5)
  {
    v7 = 0;
    v6 = 0;
  }
  return v6 | v7;
}

uint64_t mlir::OperationName::UnregisteredOpModel::getPropertiesAsAttr(mlir::OperationName::UnregisteredOpModel *this, Operation *a2)
{
  return *((_QWORD *)a2 + 2 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1) + 8);
}

void mlir::OperationName::UnregisteredOpModel::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  unint64_t *v12;
  void *v13[2];
  _QWORD v14[10];

  v14[9] = *MEMORY[0x1E0C80C00];
  v7 = a2 + 64;
  v8 = *(_QWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  if (v8)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
      v9 = *(_QWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  mlir::NamedAttrList::NamedAttrList(v13, v9);
  mlir::NamedAttrList::set((uint64_t)v13, a3, a4);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v13, Context);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v12 = (unint64_t *)(v7 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  else
    v12 = 0;
  *v12 = Dictionary;
  if (v13[0] != v14)
    free(v13[0]);
}

uint64_t mlir::OperationName::UnregisteredOpModel::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::OperationName::UnregisteredOpModel::getOpPropertyByteSize(mlir::OperationName::UnregisteredOpModel *this)
{
  return 8;
}

void mlir::OperationName::UnregisteredOpModel::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
}

uint64_t mlir::OperationName::UnregisteredOpModel::setPropertiesFromAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  *a3 = a4;
  return 1;
}

void mlir::OperationName::UnregisteredOpModel::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::OperationName::UnregisteredOpModel::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

unint64_t mlir::OperationName::UnregisteredOpModel::hashProperties(uint64_t a1, _DWORD *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  _DWORD *v9;

  v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v2 & 1) == 0)
  {
    v9 = a2;
    v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    a2 = v9;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v8;
      v3 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a2 = v9;
    }
  }
  v4 = v3[19];
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (8 * ((*a2 >> 4) ^ (*a2 >> 9)) + 8));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
}

void mlir::RegisteredOperationName::insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  mlir::StringAttr *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int8x16_t *AttrData;
  const unsigned __int8 *v16;
  const unsigned __int8 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  const void *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[4];
  __int16 v45;
  uint64_t v46;

  v4 = (_QWORD *)*a1;
  v5 = *(mlir::StringAttr **)(*(_QWORD *)(*a1 + 24) + 32);
  v6 = *(_QWORD *)v5;
  if (a3)
  {
    v9 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(v6 + 64), 8 * a3, 3);
    v10 = v9;
    v11 = a3;
    if ((_DWORD)a3)
    {
      v12 = (uint64_t *)(a2 + 8);
      v13 = (uint64_t *)v9;
      do
      {
        v45 = 261;
        v44[0] = *(v12 - 1);
        v14 = *v12;
        v12 += 2;
        v44[1] = v14;
        *v13++ = mlir::StringAttr::get(v5, (mlir::MLIRContext *)v44);
        --v11;
      }
      while (v11);
    }
    v4[12] = v10;
    v4[13] = a3;
  }
  v44[0] = v4[1];
  AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v44);
  v17 = v16;
  v43 = 0;
  v18 = llvm::StringMap<std::unique_ptr<mlir::OperationName::Impl>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<mlir::OperationName::Impl>>(v6 + 160, AttrData, v16, &v43);
  v19 = v43;
  v43 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *v18;
  v21 = *a1;
  *a1 = 0;
  v22 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v21;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v44[0] = (uint64_t)v4;
  v23 = *llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(v6 + 184, AttrData, v17, v44);
  v24 = *(_QWORD *)(v6 + 208);
  v25 = *(unsigned int *)(v6 + 216);
  if ((_DWORD)v25)
  {
    v26 = *(_QWORD *)(v6 + 208);
    do
    {
      v27 = v25 >> 1;
      v28 = v26 + 8 * (v25 >> 1);
      v29 = *(_QWORD *)(*(_QWORD *)v28 + 8);
      v46 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8);
      v44[0] = v29;
      if (v46 == v29
        || ((v30 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v46),
             v32 = v31,
             v33 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v44),
             v35 = v34,
             v34 >= v32)
          ? (v36 = v32)
          : (v36 = v34),
            (!v36 || !memcmp(v30, v33, v36)) && v32 == v35))
      {
        v26 = v28 + 8;
        v27 = v25 + ~v27;
      }
      v25 = v27;
    }
    while (v27);
    v24 = *(_QWORD *)(v6 + 208);
    v37 = *(_QWORD *)(v23 + 8);
    v38 = *(unsigned int *)(v6 + 216);
    if (v24 + 8 * v38 != v26)
      goto LABEL_23;
  }
  else
  {
    v26 = v24 + 8 * v25;
    v37 = *(_QWORD *)(v23 + 8);
    v38 = 0;
    if (v24 != v26)
    {
LABEL_23:
      v39 = (v26 - v24) >> 3;
      if (v38 >= *(_DWORD *)(v6 + 220))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 208, (void *)(v6 + 224), v38 + 1, 8);
        v24 = *(_QWORD *)(v6 + 208);
        v38 = *(unsigned int *)(v6 + 216);
      }
      v40 = (_QWORD *)(v24 + 8 * v39);
      *(_QWORD *)(v24 + 8 * v38) = *(_QWORD *)(v24 + 8 * v38 - 8);
      v41 = *(unsigned int *)(v6 + 216);
      v42 = *(_QWORD *)(v6 + 208) + 8 * v41 - 8;
      if ((_QWORD *)v42 != v40)
      {
        memmove(v40 + 1, v40, v42 - (_QWORD)v40);
        LODWORD(v41) = *(_DWORD *)(v6 + 216);
      }
      *(_DWORD *)(v6 + 216) = v41 + 1;
      *v40 = v37;
      return;
    }
  }
  if (v38 >= *(_DWORD *)(v6 + 220))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 208, (void *)(v6 + 224), v38 + 1, 8);
    v38 = *(unsigned int *)(v6 + 216);
    v24 = *(_QWORD *)(v6 + 208);
  }
  *(_QWORD *)(v24 + 8 * v38) = v37;
  ++*(_DWORD *)(v6 + 216);
}

uint64_t mlir::AbstractType::lookup(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;

  v2 = *(_DWORD *)(*(_QWORD *)a2 + 336);
  if (!v2)
    goto LABEL_9;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 320);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v6 = *(_QWORD *)(v3 + 16 * v5);
  if (v6 != a1)
  {
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a1)
        goto LABEL_3;
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create a Type that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  result = *(_QWORD *)(v3 + 16 * v5 + 8);
  if (!result)
    goto LABEL_9;
  return result;
}

uint64_t mlir::MLIRContext::getTypeUniquer(mlir::MLIRContext *this)
{
  return *(_QWORD *)this + 344;
}

uint64_t mlir::Float8E5M2Type::get(mlir::Float8E5M2Type *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 352);
}

uint64_t mlir::Float8E4M3FNType::get(mlir::Float8E4M3FNType *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 360);
}

uint64_t mlir::Float8E5M2FNUZType::get(mlir::Float8E5M2FNUZType *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 368);
}

uint64_t mlir::Float8E4M3FNUZType::get(mlir::Float8E4M3FNUZType *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 376);
}

uint64_t mlir::Float8E4M3B11FNUZType::get(mlir::Float8E4M3B11FNUZType *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 384);
}

uint64_t mlir::BFloat16Type::get(mlir::BFloat16Type *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 392);
}

uint64_t mlir::Float16Type::get(mlir::Float16Type *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 400);
}

uint64_t mlir::FloatTF32Type::get(mlir::FloatTF32Type *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 408);
}

uint64_t mlir::Float32Type::get(mlir::Float32Type *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 416);
}

uint64_t mlir::Float64Type::get(mlir::Float64Type *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 424);
}

uint64_t mlir::Float80Type::get(mlir::Float80Type *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 432);
}

uint64_t mlir::Float128Type::get(mlir::Float128Type *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 440);
}

uint64_t mlir::IndexType::get(mlir::IndexType *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 448);
}

uint64_t mlir::IntegerType::get(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  _QWORD v8[2];
  uint64_t v9;

  v6 = a3;
  v7 = a2;
  if (!a3)
  {
    switch(a2)
    {
      case 1u:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 456);
        if (!v4)
          break;
        return v4;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
        break;
      case 8u:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 464);
        if (!v4)
          break;
        return v4;
      case 0x10u:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 472);
        if (!v4)
          break;
        return v4;
      case 0x20u:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 480);
        if (!v4)
          break;
        return v4;
      default:
        if (a2 == 64)
        {
          v4 = *(_QWORD *)(*(_QWORD *)a1 + 488);
          if (v4)
            return v4;
        }
        else if (a2 == 128)
        {
          v4 = *(_QWORD *)(*(_QWORD *)a1 + 496);
          if (v4)
            return v4;
        }
        break;
    }
  }
  v9 = a1;
  v3 = (unsigned __int8 **)(*(_QWORD *)a1 + 344);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  v8[1] = &v9;
  return mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(v3, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJRjRNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v7, &v6);
}

uint64_t mlir::NoneType::get(mlir::NoneType *this, mlir::MLIRContext *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)this;
  result = *(_QWORD *)(*(_QWORD *)this + 504);
  if (!result)
    return mlir::StorageUniquer::getSingletonImpl((uint64_t *)(v2 + 344), (uint64_t)&mlir::detail::TypeIDResolver<mlir::NoneType,void>::id);
  return result;
}

uint64_t mlir::MLIRContext::getAttributeUniquer(mlir::MLIRContext *this)
{
  return *(_QWORD *)this + 536;
}

_QWORD *mlir::detail::AttributeUniquer::initializeAttributeStorage(_QWORD *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v3 = *(_DWORD *)(*(_QWORD *)a2 + 528);
  if (!v3)
    goto LABEL_9;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 512);
  v5 = v3 - 1;
  v6 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v7 = *(_QWORD *)(v4 + 16 * v6);
  if (v7 != a3)
  {
    v9 = 1;
    while (v7 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & v5;
      v7 = *(_QWORD *)(v4 + 16 * v6);
      if (v7 == a3)
        goto LABEL_3;
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create an Attribute that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  v8 = *(_QWORD *)(v4 + 16 * v6 + 8);
  if (!v8)
    goto LABEL_9;
  *result = v8;
  return result;
}

uint64_t mlir::BoolAttr::get(mlir::BoolAttr *this, mlir::MLIRContext *a2)
{
  uint64_t v2;

  v2 = 544;
  if ((_DWORD)a2)
    v2 = 552;
  return *(_QWORD *)(*(_QWORD *)this + v2);
}

uint64_t mlir::UnitAttr::get(mlir::UnitAttr *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 560);
}

uint64_t mlir::UnknownLoc::get(mlir::UnknownLoc *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 568);
}

_QWORD *mlir::detail::DistinctAttributeUniquer::allocateStorage(uint64_t a1, uint64_t a2)
{
  return mlir::detail::DistinctAttributeAllocator::allocate((uint64_t *)(*(_QWORD *)a1 + 688), a2);
}

_QWORD *mlir::detail::DistinctAttributeAllocator::allocate(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  _QWORD *result;

  v3 = mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::get(a1);
  v4 = v3;
  *(_QWORD *)(v3 + 80) += 16;
  if (*(_QWORD *)v3)
    v5 = ((*(_QWORD *)v3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)v3 + 16 > *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(v3 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(v4 + 24);
    if (v9 >= *(_DWORD *)(v4 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 16, (void *)(v4 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(v4 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 8) = &buffer[v7];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)v4 = result + 2;
  *result = 0;
  result[1] = a2;
  return result;
}

uint64_t mlir::DictionaryAttr::getEmpty(mlir::DictionaryAttr *this, mlir::MLIRContext *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 576);
}

void mlir::detail::StringAttrStorage::initialize(mlir::detail::StringAttrStorage *this, mlir::MLIRContext *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::recursive_mutex *v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27[2];
  uint64_t v28;

  LOBYTE(v27[0]) = 46;
  v4 = llvm::StringRef::find((uint64_t *)this + 2, (char *)v27, 1uLL, 0);
  if (v4 != -1)
  {
    v6 = *((_QWORD *)this + 2);
    v5 = *((_QWORD *)this + 3);
    v7 = (_QWORD *)(v4 >= v5 ? *((_QWORD *)this + 3) : v4);
    v8 = v5 >= v4 + 1 ? v4 + 1 : *((_QWORD *)this + 3);
    *(_QWORD *)&v24 = *((_QWORD *)this + 2);
    *((_QWORD *)&v24 + 1) = v7;
    v25 = v6 + v8;
    v26 = v5 - v8;
    if (v7 && v5 > v4 + 1)
    {
      v27[0] = (_QWORD *)v24;
      v27[1] = v7;
      v10 = *(_QWORD *)a2;
      v11 = (uint64_t *)(*(_QWORD *)a2 + 224);
      v28 = 0;
      v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v11, (uint64_t)v27, &v28);
      v13 = v28;
      if (!v12)
        v13 = *(_QWORD *)(v10 + 224) + 24 * *(unsigned int *)(v10 + 240);
      if (v13 == *(_QWORD *)(*(_QWORD *)a2 + 224) + 24 * *(unsigned int *)(*(_QWORD *)a2 + 240))
      {
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        v14 = *(_QWORD *)(v13 + 16);
        *((_QWORD *)this + 4) = v14;
        if (v14)
          return;
      }
      v15 = *(_QWORD *)a2;
      v16 = (std::recursive_mutex *)(*(_QWORD *)a2 + 592);
      std::recursive_mutex::lock(v16);
      v17 = (uint64_t *)(v15 + 664);
      v27[0] = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>(v17, (uint64_t)&v24, v27) & 1) != 0)
      {
        v18 = v27[0] + 3;
        v19 = *((unsigned int *)v27[0] + 6);
        v20 = v27[0] + 2;
        if (v19 >= *((_DWORD *)v27[0] + 7))
        {
          v23 = v27[0] + 3;
          v21 = v27[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v27[0] + 2), v27[0] + 4, v19 + 1, 8);
          v18 = v23;
          LODWORD(v19) = *((_DWORD *)v21 + 6);
        }
      }
      else
      {
        v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)v17, (uint64_t)&v24, (uint64_t)&v24, v27[0]);
        LODWORD(v19) = 0;
        *(_OWORD *)v22 = v24;
        v22[2] = v22 + 4;
        v20 = v22 + 2;
        v22[3] = 0x600000000;
        v18 = v22 + 3;
      }
      *(_QWORD *)(*v20 + 8 * v19) = this;
      ++*v18;
      std::recursive_mutex::unlock(v16);
    }
  }
}

uint64_t mlir::MLIRContext::getAffineUniquer(mlir::MLIRContext *this)
{
  return *(_QWORD *)this + 312;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, _DWORD *a4, int *a5, __int128 *a6)
{
  _DWORD *v8;
  unsigned __int8 v9;
  uint64_t *v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v24;
  __int128 *v25;
  unsigned __int8 **v26;
  const char *v27;
  unint64_t v28;

  v8 = a4;
  v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) != 0)
    return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(a1, a2, a3, v10[126], v8, a5, a6);
  v25 = a6;
  v26 = a1;
  v24 = a5;
  v21 = a2;
  v22 = a3;
  v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  a2 = v21;
  a3 = v22;
  v8 = a4;
  a5 = v24;
  v13 = v12;
  a6 = v25;
  a1 = v26;
  if (!v13)
    return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(a1, a2, a3, v10[126], v8, a5, a6);
  v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineMapStorage]";
  v28 = 80;
  v14 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
  if (v28 >= v14)
    v15 = v14;
  else
    v15 = v28;
  v16 = &v27[v15];
  v17 = v28 - v15;
  if (v28 - v15 >= 0x12)
    v18 = 18;
  else
    v18 = v28 - v15;
  v19 = v17 - v18;
  if (v19 >= v19 - 1)
    v20 = v19 - 1;
  else
    v20 = v19;
  mlir::detail::TypeIDResolver<mlir::detail::AffineMapStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
  return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(v26, v21, v22, mlir::detail::TypeIDResolver<mlir::detail::AffineMapStorage,void>::resolveTypeID(void)::id, a4, v24, v25);
}

uint64_t mlir::AffineMap::get(mlir::AffineMap *this, mlir::MLIRContext *a2)
{
  unsigned __int8 **v2;
  mlir::AffineMap **v4;
  mlir::AffineMap *v5;
  int v6;
  int v7;
  __int128 v8;

  v8 = 0uLL;
  v7 = 0;
  v6 = 0;
  v5 = this;
  v2 = (unsigned __int8 **)(*(_QWORD *)this + 312);
  v4 = &v5;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(v2, (uint64_t)llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>::callback_fn<mlir::AffineMap::getImpl(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,mlir::MLIRContext *)::$_0>, (uint64_t)&v4, &v7, &v6, &v8);
}

uint64_t mlir::AffineMap::get(int a1, int a2, uint64_t a3)
{
  _QWORD *DesiredBytecodeVersion;
  unsigned __int8 **v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  int v12;
  __int128 v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v14[0] = a3;
  DesiredBytecodeVersion = (_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&v8);
  *(_QWORD *)&v13 = v14;
  *((_QWORD *)&v13 + 1) = 1;
  v11 = a2;
  v12 = a1;
  v10 = DesiredBytecodeVersion;
  v6 = (unsigned __int8 **)(*DesiredBytecodeVersion + 312);
  v9 = &v10;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(v6, (uint64_t)llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>::callback_fn<mlir::AffineMap::getImpl(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,mlir::MLIRContext *)::$_0>, (uint64_t)&v9, &v12, &v11, &v13);
}

uint64_t mlir::AffineMap::get(int a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int8 **v5;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  int v10;
  __int128 v11;

  *(_QWORD *)&v11 = a3;
  *((_QWORD *)&v11 + 1) = a4;
  v10 = a1;
  v9 = a2;
  v5 = (unsigned __int8 **)(*a5 + 312);
  v7 = &v8;
  v8 = a5;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(v5, (uint64_t)llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>::callback_fn<mlir::AffineMap::getImpl(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,mlir::MLIRContext *)::$_0>, (uint64_t)&v7, &v10, &v9, &v11);
}

uint64_t mlir::IntegerSet::get(int a1, int a2, mlir::BytecodeWriterConfig *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DesiredBytecodeVersion;
  char v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)&v12 = this;
  *((_QWORD *)&v12 + 1) = a4;
  *(_QWORD *)&v11 = a5;
  *((_QWORD *)&v11 + 1) = a6;
  v9 = a2;
  v10 = a1;
  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  return mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>((unsigned __int8 **)(*(_QWORD *)DesiredBytecodeVersion + 312), (uint64_t)llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>::callback_fn<mlir::IntegerSet::get(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,llvm::ArrayRef<BOOL>)::$_0>, (uint64_t)&v8, &v10, &v9, &v12, &v11);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _OWORD *a6, _OWORD *a7)
{
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  unsigned int HashValue;
  int v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _QWORD v28[2];
  const char **v29;
  const char *v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[2];

  if ((v8 & 1) == 0)
  {
    v26 = a6;
    v27 = a7;
    v24 = a4;
    v25 = a5;
    v22 = a2;
    v23 = a3;
    a2 = v22;
    a3 = v23;
    a4 = v24;
    a5 = v25;
    a6 = v26;
    a7 = v27;
    if (v14)
    {
      v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::IntegerSetStorage]";
      *(_QWORD *)&v31 = 81;
      v15 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
      if ((unint64_t)v31 >= v15)
        v16 = v15;
      else
        v16 = v31;
      v17 = &v30[v16];
      v18 = v31 - v16;
      if ((unint64_t)v31 - v16 >= 0x12)
        v19 = 18;
      else
        v19 = v31 - v16;
      v20 = v18 - v19;
      if (v20 >= v20 - 1)
        v21 = v20 - 1;
      else
        v21 = v20;
      mlir::detail::TypeIDResolver<mlir::detail::IntegerSetStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
      a2 = v22;
      a3 = v23;
      a4 = v24;
      a5 = v25;
      a6 = v26;
      a7 = v27;
    }
  }
  v9 = mlir::detail::TypeIDResolver<mlir::detail::IntegerSetStorage,void>::resolveTypeID(void)::id;
  v33[0] = a2;
  v33[1] = a3;
  v10 = *a5;
  LODWORD(v30) = *a4;
  HIDWORD(v30) = v10;
  v11 = *a7;
  v31 = *a6;
  v32 = v11;
  HashValue = llvm::DenseMapInfo<std::tuple<unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,llvm::ArrayRef<BOOL>>,void>::getHashValueImpl<0u>((uint64_t)&v30);
  v28[0] = &v30;
  v28[1] = v33;
  v29 = &v30;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v9, HashValue, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v29, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v28);
}

uint64_t mlir::detail::getDefaultDiagnosticEmitFn@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = this;
  a2[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::InFlightDiagnostic>::CallbacksHolder<mlir::detail::getDefaultDiagnosticEmitFn(mlir::MLIRContext *)::$_0,mlir::detail::getDefaultDiagnosticEmitFn(mlir::MLIRContext *)::$_0,void>::Callbacks
        + 2;
  return this;
}

void mlir::OperationName::UnregisteredOpModel::~UnregisteredOpModel(mlir::OperationName::UnregisteredOpModel *this)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)this = off_1E0E2B520;
  v2 = (void **)*((_QWORD *)this + 4);
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)*((_QWORD *)this + 4);
  }
  if (v2 != (void **)((char *)this + 48))
    free(v2);
}

{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)this = off_1E0E2B520;
  v2 = (void **)*((_QWORD *)this + 4);
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)*((_QWORD *)this + 4);
  }
  if (v2 != (void **)((char *)this + 48))
    free(v2);
  operator delete(this);
}

void std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy(uint64_t a1, char *a2)
{
  char *v4;
  uint64_t v5;

  if (!a2)
    return;
  std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy(a1, *(_QWORD *)a2);
  std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
  v4 = (char *)*((_QWORD *)a2 + 11);
  if (v4 == a2 + 64)
  {
    v5 = 4;
    v4 = a2 + 64;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  if (a2[55] < 0)
    operator delete(*((void **)a2 + 4));
  operator delete(a2);
}

mlir::MLIRContextImpl *mlir::MLIRContextImpl::MLIRContextImpl(mlir::MLIRContextImpl *this, int a2)
{
  char *v4;
  void *v5;
  uint64_t v6;
  llvm::ThreadPool *v7;

  *((_QWORD *)this + 3) = 0;
  mlir::DiagnosticEngine::DiagnosticEngine((mlir::MLIRContextImpl *)((char *)this + 32));
  *((_OWORD *)this + 3) = 0u;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 41) = a2;
  *((_WORD *)this + 21) = 1;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = (char *)this + 96;
  *((_QWORD *)this + 11) = 0x400000000;
  *((_QWORD *)this + 16) = (char *)this + 144;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 1;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0x1000000000;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0x1000000000;
  *((_QWORD *)this + 26) = (char *)this + 224;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  mlir::DialectRegistry::DialectRegistry((mlir::MLIRContextImpl *)((char *)this + 248));
  llvm::sys::RWMutexImpl::RWMutexImpl((mlir::MLIRContextImpl *)((char *)this + 296));
  *((_QWORD *)this + 38) = 0;
  mlir::StorageUniquer::StorageUniquer((mlir::MLIRContextImpl *)((char *)this + 312));
  *((_DWORD *)this + 84) = 0;
  *((_OWORD *)this + 20) = 0u;
  mlir::StorageUniquer::StorageUniquer((mlir::MLIRContextImpl *)((char *)this + 344));
  *((_DWORD *)this + 132) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 22) = 0u;
  mlir::StorageUniquer::StorageUniquer((mlir::MLIRContextImpl *)((char *)this + 536));
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 34) = 0u;
  MEMORY[0x186DA1428]((char *)this + 592);
  *((_DWORD *)this + 164) = 0;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_DWORD *)this + 170) = 0;
  v4 = (char *)operator new(0x78uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E0E51E10;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_QWORD *)v4 + 3) = v4 + 40;
  *((_QWORD *)v4 + 4) = 0x100000000;
  MEMORY[0x186DA1428](v4 + 48);
  *((_DWORD *)v4 + 28) = 0;
  *((_QWORD *)this + 86) = v4 + 24;
  *((_QWORD *)this + 87) = v4;
  if (a2)
  {
    v5 = operator new(0x138uLL);
    v6 = llvm::ThreadPool::ThreadPool((uint64_t)v5, 0x100000000);
    v7 = (llvm::ThreadPool *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v6;
    if (v7)
      llvm::ThreadPool::~ThreadPool(v7);
    *((_QWORD *)this + 6) = v6;
  }
  return this;
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState>>::__on_zero_shared(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 48));
  v2 = *(char **)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
      {
        v7 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v6);
        operator delete(v7);
      }
      v4 -= 8;
    }
    while (v4);
    v2 = *(char **)(a1 + 24);
  }
  if (v2 != (char *)(a1 + 40))
    free(v2);
}

BOOL mlir::MLIRContext::getLoadedDialects(void)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  unsigned int v5;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (v3 >= v2)
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  else
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (v4)
  {
    v5 = memcmp(*(const void **)(*(_QWORD *)a1 + 8), *(const void **)(*(_QWORD *)a2 + 8), v4);
    if (v5)
      return v5 >> 31;
  }
  if (v2 == v3)
    return 0;
  return v2 < v3;
}

uint64_t mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::get(uint64_t *a1)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  std::recursive_mutex *v19;
  uint64_t v20;
  _OWORD *v21;
  char *Address;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;

  {
    v38 = (_QWORD *)mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::getStaticCache(void)::cache(&mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::getStaticCache(void)::cache);
    *v38 = 1;
    v38[1] = -4096;
    v38[4] = -4096;
    v38[7] = -4096;
    v38[10] = -4096;
    _tlv_atexit((void (__cdecl *)(void *))mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::CacheType::~CacheType, v38);
  }
  v3 = mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::getStaticCache(void)::cache(&mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::getStaticCache(void)::cache);
  v4 = (int *)v3;
  v5 = *a1;
  v43 = *a1;
  v6 = v3 + 8;
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v7 = 4;
  }
  else
  {
    v7 = *(_DWORD *)(v3 + 16);
    if (!v7)
    {
      v18 = 0;
LABEL_16:
      v10 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::InsertIntoBucket<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *>(v3, v18, &v43);
      goto LABEL_8;
    }
    v6 = *(_QWORD *)(v3 + 8);
  }
  v8 = v7 - 1;
  v9 = v8 & ((v5 >> 4) ^ (v5 >> 9));
  v10 = (_QWORD *)(v6 + 24 * v9);
  v11 = *v10;
  if (v5 != *v10)
  {
    v39 = 0;
    v40 = 1;
    while (v11 != -4096)
    {
      if (v39)
        v41 = 0;
      else
        v41 = v11 == -8192;
      if (v41)
        v39 = v10;
      v42 = v9 + v40++;
      v9 = v42 & v8;
      v10 = (_QWORD *)(v6 + 24 * v9);
      v11 = *v10;
      if (v5 == *v10)
        goto LABEL_8;
    }
    if (v39)
      v18 = v39;
    else
      v18 = v10;
    goto LABEL_16;
  }
LABEL_8:
  v12 = (std::__shared_weak_count *)v10[2];
  if (v12)
  {
    v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      v14 = v13;
      v15 = v10[1];
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (v17)
      {
        if (v15)
          return v15;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
        if (v15)
          return v15;
      }
    }
  }
  v19 = (std::recursive_mutex *)(*a1 + 24);
  std::recursive_mutex::lock(v19);
  v20 = *a1;
  v21 = operator new(0x60uLL);
  *v21 = 0u;
  v21[1] = 0u;
  v21[2] = 0u;
  *((_QWORD *)v21 + 2) = v21 + 2;
  *((_DWORD *)v21 + 7) = 4;
  *((_QWORD *)v21 + 10) = 0;
  v21[3] = 0u;
  *((_QWORD *)v21 + 8) = v21 + 5;
  *((_QWORD *)v21 + 9) = 0;
  *((_QWORD *)v21 + 11) = 1;
  v43 = (uint64_t)v21;
  Address = llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,false>::reserveForParamAndGetAddress(v20, (unint64_t)&v43, 1);
  v23 = *(_QWORD *)v20;
  v24 = *(unsigned int *)(v20 + 8);
  v25 = *(_QWORD *)Address;
  *(_QWORD *)Address = 0;
  *(_QWORD *)(v23 + 8 * v24) = v25;
  *(_DWORD *)(v20 + 8) = v24 + 1;
  v26 = v43;
  v43 = 0;
  if (v26)
  {
    v27 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v26);
    operator delete(v27);
  }
  v28 = *a1;
  v29 = (std::__shared_weak_count *)a1[1];
  v15 = *(_QWORD *)(*(_QWORD *)v28 + 8 * *(unsigned int *)(v28 + 8) - 8);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v33 = __ldxr(p_shared_weak_owners);
    while (__stxr(v33 + 1, p_shared_weak_owners));
  }
  v34 = (std::__shared_weak_count *)v10[2];
  v10[1] = v15;
  v10[2] = v29;
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  if (v29)
  {
    v35 = (unint64_t *)&v29->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::CacheType::clearExpiredEntries(v4);
  std::recursive_mutex::unlock(v19);
  return v15;
}

void mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::CacheType::clearExpiredEntries(int *a1)
{
  int v2;
  int *v3;
  int *v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  int v9;
  int *v10;
  std::__shared_weak_count *v11;

  v2 = *a1;
  if (*a1 <= 1)
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = a1 + 26;
      v5 = 4;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v5 = a1[4];
      v4 = &v3[6 * v5];
    }
    v7 = &v3[6 * v5];
    if (!v2)
      goto LABEL_16;
LABEL_12:
    v8 = (uint64_t)(a1 + 26);
    if (v4 != a1 + 26)
      goto LABEL_20;
    return;
  }
  if ((v2 & 1) != 0)
  {
    v4 = a1 + 2;
    v7 = a1 + 26;
LABEL_8:
    while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 6;
      if (v4 == v7)
      {
        v4 = v7;
        break;
      }
    }
    if ((*a1 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v4 = (int *)*((_QWORD *)a1 + 1);
    v6 = a1[4];
    v7 = &v4[6 * v6];
    if (v6)
      goto LABEL_8;
  }
LABEL_16:
  v8 = *((_QWORD *)a1 + 1) + 24 * a1[4];
  if (v4 != (int *)v8)
  {
    do
    {
LABEL_20:
      v10 = v7;
      if (v4 + 6 != v7)
      {
        v10 = v4 + 6;
        while ((*(_QWORD *)v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 6;
          if (v10 == v7)
          {
            v10 = v7;
            break;
          }
        }
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)v4 + 2);
      if (v11)
      {
        if (v11->__shared_owners_ != -1)
          goto LABEL_19;
        std::__shared_weak_count::__release_weak(v11);
      }
      *(_QWORD *)v4 = -8192;
      v9 = a1[1] + 1;
      *a1 -= 2;
      a1[1] = v9;
LABEL_19:
      v4 = v10;
    }
    while (v10 != (int *)v8);
  }
}

int *mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::CacheType::~CacheType(int *a1)
{
  int v2;
  int *v3;
  uint64_t *v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count **v18;
  uint64_t v19;

  v2 = *a1;
  if (*a1 <= 1)
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = (uint64_t *)(a1 + 26);
      v5 = 4;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v5 = a1[4];
      v4 = (uint64_t *)&v3[6 * v5];
    }
    v8 = (uint64_t *)&v3[6 * v5];
    v6 = a1 + 2;
    if (!v2)
      goto LABEL_18;
LABEL_12:
    v9 = (uint64_t)(a1 + 26);
    if (v4 != (uint64_t *)(a1 + 26))
      goto LABEL_21;
LABEL_13:
    if ((v2 & 1) != 0)
      goto LABEL_36;
    goto LABEL_14;
  }
  v6 = a1 + 2;
  if ((v2 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 26);
    v4 = (uint64_t *)(a1 + 2);
LABEL_8:
    while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 3;
      if (v4 == v8)
      {
        v4 = v8;
        break;
      }
    }
    v6 = a1 + 2;
    if ((v2 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v4 = (uint64_t *)*((_QWORD *)a1 + 1);
    v7 = a1[4];
    v8 = &v4[3 * v7];
    if (v7)
      goto LABEL_8;
  }
LABEL_18:
  v9 = *((_QWORD *)a1 + 1) + 24 * a1[4];
  if (v4 == (uint64_t *)v9)
    goto LABEL_13;
  do
  {
LABEL_21:
    v11 = (std::__shared_weak_count *)v4[2];
    if (!v11)
      goto LABEL_28;
    v12 = std::__shared_weak_count::lock(v11);
    if (!v12)
      goto LABEL_28;
    v13 = v12;
    v14 = v4[1];
    if (v14)
      mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState::remove(*v4, v14);
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v17 = v4 + 3;
      v4 = v8;
      if (v17 == v8)
        continue;
    }
    else
    {
LABEL_28:
      v17 = v4 + 3;
      v4 = v8;
      if (v17 == v8)
        continue;
    }
    v4 = v17;
    while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 3;
      if (v4 == v8)
      {
        v4 = v8;
        break;
      }
    }
  }
  while (v4 != (uint64_t *)v9);
  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
LABEL_36:
    v10 = 4;
    goto LABEL_37;
  }
LABEL_14:
  v10 = a1[4];
  if ((_DWORD)v10)
  {
    v6 = (_QWORD *)*v6;
LABEL_37:
    v18 = (std::__shared_weak_count **)(v6 + 2);
    v19 = 24 * v10;
    do
    {
      if (((unint64_t)*(v18 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v18)
        std::__shared_weak_count::__release_weak(*v18);
      v18 += 3;
      v19 -= 24;
    }
    while (v19);
    v2 = *a1;
  }
  if ((v2 & 1) == 0)
    llvm::deallocate_buffer(*((llvm **)a1 + 1), (void *)(24 * a1[4]));
  return a1;
}

void mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState::remove(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;

  v4 = (std::recursive_mutex *)(a1 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  v5 = *(_QWORD **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a1 + 8 * v6;
  v8 = *(_QWORD **)a1;
  if ((_DWORD)v6)
  {
    v9 = 8 * v6;
    v8 = *(_QWORD **)a1;
    while (*v8 != a2)
    {
      ++v8;
      v9 -= 8;
      if (!v9)
      {
        v8 = (_QWORD *)(*(_QWORD *)a1 + 8 * v6);
        break;
      }
    }
  }
  v10 = v8 + 1;
  if (v8 + 1 == (_QWORD *)v7)
  {
    v11 = v6 - 1;
    *(_DWORD *)(a1 + 8) = v11;
    v12 = v11;
    v13 = v5[v12];
    v5[v12] = 0;
    if (v13)
    {
LABEL_8:
      v14 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v13);
      operator delete(v14);
    }
  }
  else
  {
    do
    {
      v15 = *(v10 - 1);
      *(v10 - 1) = *v10;
      *v10 = 0;
      if (v15)
      {
        v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v15);
        operator delete(v16);
      }
      ++v10;
    }
    while (v10 != (_QWORD *)v7);
    v17 = *(_QWORD **)a1;
    v18 = *(_DWORD *)(a1 + 8) - 1;
    *(_DWORD *)(a1 + 8) = v18;
    v19 = v18;
    v13 = v17[v19];
    v17[v19] = 0;
    if (v13)
      goto LABEL_8;
  }
  std::recursive_mutex::unlock(v4);
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::InsertIntoBucket<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::grow(a1, v8);
  v12 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v13 = 4;
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 16);
    if (!v13)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v12 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v14 = v13 - 1;
  v15 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v13 - 1);
  a2 = (_QWORD *)(v12 + 24 * v15);
  v16 = *a2;
  if (*a3 != *a2)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = a2;
      v20 = v15 + v18++;
      v15 = v20 & v14;
      a2 = (_QWORD *)(v12 + 24 * (v20 & v14));
      v16 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v17)
      a2 = v17;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  v10 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v10;
  return a2;
}

void llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[10];

  v16[9] = *MEMORY[0x1E0C80C00];
  v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
  v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
  if ((v5 + 1) > 0x40)
    v6 = v5 + 1;
  else
    v6 = 64;
  if (a2 >= 5)
    v7 = v6;
  else
    v7 = a2;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v8 = *(uint64_t **)(a1 + 8);
    v9 = *(unsigned int *)(a1 + 16);
    if (v7 > 4)
    {
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(8 * (v7 + 2 * v7), (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::moveFromOldBuckets((int *)a1, v8, &v8[3 * v9]);
    llvm::deallocate_buffer((llvm *)v8, (void *)(24 * v9));
  }
  v10 = &v14;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v10 = v16;
    v11 = *(_QWORD *)(a1 + 32);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_12:
      v12 = *(_QWORD *)(a1 + 56);
      if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  *v10 = v11;
  *(_OWORD *)(v10 + 1) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v10 += 3;
  v12 = *(_QWORD *)(a1 + 56);
  if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_13:
    v13 = *(_QWORD *)(a1 + 80);
    if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_14;
LABEL_22:
    *v10 = v13;
    *(_OWORD *)(v10 + 1) = *(_OWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    v10 += 3;
    if (v7 < 5)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_21:
  *v10 = v12;
  *(_OWORD *)(v10 + 1) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v10 += 3;
  v13 = *(_QWORD *)(a1 + 80);
  if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
    goto LABEL_22;
LABEL_14:
  if (v7 >= 5)
  {
LABEL_15:
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(8 * (v7 + 2 * v7), (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v7;
  }
LABEL_16:
  llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::moveFromOldBuckets((int *)a1, &v14, v10);
}

void llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::moveFromOldBuckets(int *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  int *v7;
  int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = a2;
  v6 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  v7 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v10 = (char *)(a1 + 26);
    v9 = (char *)(a1 + 2);
    v11 = 72;
  }
  else
  {
    v8 = a1[4];
    if (!v8)
      goto LABEL_11;
    v9 = (char *)*((_QWORD *)a1 + 1);
    v10 = &v9[24 * v8];
    v11 = v10 - v9 - 24;
    if (v11 < 0x18)
    {
      v13 = (char *)*((_QWORD *)a1 + 1);
      do
      {
LABEL_10:
        *(_QWORD *)v13 = -4096;
        v13 += 24;
      }
      while (v13 != v10);
      goto LABEL_11;
    }
  }
  v12 = v11 / 0x18 + 1;
  v13 = &v9[24 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
  v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)v9 = -4096;
    *((_QWORD *)v9 + 3) = -4096;
    v9 += 48;
    v14 -= 2;
  }
  while (v14);
  if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((*(_BYTE *)a1 & 1) != 0)
        {
          v17 = 4;
          v16 = v7;
        }
        else
        {
          v16 = (int *)*((_QWORD *)a1 + 1);
          v17 = a1[4];
        }
        v18 = v17 - 1;
        v19 = (v17 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        v20 = (uint64_t *)&v16[6 * v19];
        v21 = *v20;
        if (v15 != *v20)
        {
          v23 = 0;
          v24 = 1;
          while (v21 != -4096)
          {
            if (v23)
              v25 = 0;
            else
              v25 = v21 == -8192;
            if (v25)
              v23 = v20;
            v26 = v19 + v24++;
            v19 = v26 & v18;
            v20 = (uint64_t *)&v16[6 * (v26 & v18)];
            v21 = *v20;
            if (v15 == *v20)
              goto LABEL_19;
          }
          if (v23)
            v20 = v23;
        }
LABEL_19:
        *v20 = v15;
        *(_OWORD *)(v20 + 1) = *(_OWORD *)(v4 + 1);
        v4[1] = 0;
        v4[2] = 0;
        *a1 += 2;
        v22 = (std::__shared_weak_count *)v4[2];
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
}

char *llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 <= *(unsigned int *)(a1 + 12))
    return (char *)v3;
  v8 = *(_QWORD *)a1 + 8 * v4;
  if (*(_QWORD *)a1 > a2 || v8 <= a2)
  {
    v54 = 0;
    v10 = (char *)(a1 + 16);
    v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v54);
    v12 = *(char **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v13)
    {
LABEL_22:
      v30 = v54;
      if (v12 != v10)
        free(v12);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v30;
      return (char *)v3;
    }
    v14 = (v13 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v15 = 8 * v13;
    if (v14 >= 0xB)
    {
      if (v12 >= &v11[v15] || (v16 = v11, v17 = *(char **)a1, v11 >= &v12[v15]))
      {
        v18 = v14 + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v16 = &v11[v19];
        v17 = &v12[v19];
        v20 = (__int128 *)(v12 + 16);
        v21 = v11 + 16;
        v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *(v20 - 1);
          v24 = *v20;
          *(v20 - 1) = 0uLL;
          *v20 = 0uLL;
          *(v21 - 1) = v23;
          *v21 = v24;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          v27 = *(_QWORD *)a1 - 8;
          do
          {
            v28 = *(_QWORD *)(v27 + v15);
            *(_QWORD *)(v27 + v15) = 0;
            if (v28)
            {
              v29 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v28);
              operator delete(v29);
            }
            v15 -= 8;
          }
          while (v15);
          v12 = *(char **)a1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      v16 = v11;
      v17 = *(char **)a1;
    }
    v25 = &v12[8 * v13];
    do
    {
      v26 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      v17 += 8;
      *(_QWORD *)v16 = v26;
      v16 += 8;
    }
    while (v17 != v25);
    goto LABEL_17;
  }
  v31 = a2 - *(_QWORD *)a1;
  v54 = 0;
  v32 = (char *)(a1 + 16);
  v33 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v54);
  v34 = *(char **)a1;
  v35 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v35)
  {
    v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v37 = 8 * v35;
    if (v36 >= 0xB)
    {
      if (v34 >= &v33[v37] || (v38 = v33, v39 = *(char **)a1, v33 >= &v34[v37]))
      {
        v40 = v36 + 1;
        v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        v38 = &v33[v41];
        v39 = &v34[v41];
        v42 = (__int128 *)(v34 + 16);
        v43 = v33 + 16;
        v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = *(v42 - 1);
          v46 = *v42;
          *(v42 - 1) = 0uLL;
          *v42 = 0uLL;
          *(v43 - 1) = v45;
          *v43 = v46;
          v42 += 2;
          v43 += 2;
          v44 -= 4;
        }
        while (v44);
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          v49 = *(_QWORD *)a1 - 8;
          do
          {
            v50 = *(_QWORD *)(v49 + v37);
            *(_QWORD *)(v49 + v37) = 0;
            if (v50)
            {
              v51 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v50);
              operator delete(v51);
            }
            v37 -= 8;
          }
          while (v37);
          v34 = *(char **)a1;
          goto LABEL_40;
        }
      }
    }
    else
    {
      v38 = v33;
      v39 = *(char **)a1;
    }
    v47 = &v34[8 * v35];
    do
    {
      v48 = *(_QWORD *)v39;
      *(_QWORD *)v39 = 0;
      v39 += 8;
      *(_QWORD *)v38 = v48;
      v38 += 8;
    }
    while (v39 != v47);
    goto LABEL_35;
  }
LABEL_40:
  v52 = v31 >> 3;
  v53 = v54;
  if (v34 != v32)
    free(v34);
  *(_QWORD *)a1 = v33;
  *(_DWORD *)(a1 + 12) = v53;
  return &v33[8 * v52];
}

void *llvm::object_creator<`anonymous namespace'::MLIRContextOptions>::call()
{
  void *v0;
  char v2;
  char *v3;
  __int128 v4;

  v0 = operator new(0x240uLL);
  bzero(v0, 0x240uLL);
  *(_QWORD *)&v4 = "Disable multi-threading within MLIR, overrides any further call to MLIRContext::enableMultiThreading()";
  *((_QWORD *)&v4 + 1) = 102;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [23],llvm::cl::desc>((uint64_t)v0, (int8x16_t *)"mlir-disable-threading", &v4);
  *(_QWORD *)&v4 = "When a diagnostic is emitted on an operation, also print the operation as an attached note";
  *((_QWORD *)&v4 + 1) = 90;
  v2 = 1;
  v3 = &v2;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::desc,llvm::cl::initializer<BOOL>>((uint64_t)v0 + 192, (int8x16_t *)"mlir-print-op-on-diagnostic", &v4, &v3);
  *(_QWORD *)&v4 = "When a diagnostic is emitted, also print the stack trace as an attached note";
  *((_QWORD *)&v4 + 1) = 76;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [23],llvm::cl::desc>((uint64_t)v0 + 384, (int8x16_t *)"mlir-print-stacktrace-on-diagnostic", &v4);
  return v0;
}

void llvm::object_deleter<`anonymous namespace'::MLIRContextOptions>::call(_QWORD *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;

  if (!__p)
    return;
  __p[48] = &unk_1E0E23520;
  v2 = (char *)(__p + 68);
  v3 = (char *)__p[71];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  __p[48] = &unk_1E0E23930;
  v5 = (void *)__p[60];
  if (v5 != (void *)__p[59])
    free(v5);
  v6 = (_QWORD *)__p[56];
  if (v6 != __p + 58)
    free(v6);
  __p[24] = &unk_1E0E23520;
  v7 = (_QWORD *)__p[47];
  if (v7 == __p + 44)
  {
    v8 = 4;
    v7 = __p + 44;
  }
  else
  {
    if (!v7)
      goto LABEL_17;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_17:
  __p[24] = &unk_1E0E23930;
  v9 = (void *)__p[36];
  if (v9 != (void *)__p[35])
    free(v9);
  v10 = (_QWORD *)__p[32];
  if (v10 != __p + 34)
    free(v10);
  *__p = &unk_1E0E23520;
  v11 = (_QWORD *)__p[23];
  if (v11 == __p + 20)
  {
    v12 = 4;
    v11 = __p + 20;
    goto LABEL_25;
  }
  if (v11)
  {
    v12 = 5;
LABEL_25:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  *__p = &unk_1E0E23930;
  v13 = (void *)__p[12];
  if (v13 != (void *)__p[11])
    free(v13);
  v14 = (_QWORD *)__p[8];
  if (v14 != __p + 10)
    free(v14);
  operator delete(__p);
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [23],llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _OWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *GeneralCategory;
  uint64_t v9;
  const unsigned __int8 *v10;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v6 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v7 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v9 = *(unsigned int *)(a1 + 72);
  if (v9 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v6, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v9) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v10 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v10);
  *(_OWORD *)(a1 + 32) = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::desc,llvm::cl::initializer<BOOL>>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _BYTE **a4)
{
  void *v8;
  uint64_t v9;
  uint64_t *GeneralCategory;
  uint64_t v11;
  const unsigned __int8 *v12;
  _BYTE *v13;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v8 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v9 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v11 = *(unsigned int *)(a1 + 72);
  if (v11 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v8, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v12 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v12);
  *(_OWORD *)(a1 + 32) = *a3;
  v13 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v13;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void mlir::MLIRContextImpl::~MLIRContextImpl(mlir::MLIRContextImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34;

  if (*((_DWORD *)this + 82))
  {
    v2 = *((unsigned int *)this + 84);
    if ((_DWORD)v2)
    {
      v3 = 16 * v2;
      v4 = (_QWORD *)*((_QWORD *)this + 40);
      while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 2;
        v3 -= 16;
        if (!v3)
          goto LABEL_6;
      }
    }
    else
    {
      v4 = (_QWORD *)*((_QWORD *)this + 40);
    }
    v17 = *((_QWORD *)this + 40) + 16 * v2;
LABEL_24:
    if (v4 != (_QWORD *)v17)
    {
      v18 = v4[1];
      v19 = *(_QWORD *)(v18 + 96);
      if (v19 >= 8)
      {
        if ((v19 & 4) != 0)
        {
          v20 = (_QWORD *)(v18 + 72);
          if ((v19 & 2) == 0)
            v20 = (_QWORD *)*v20;
          (*(void (**)(_QWORD *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))(v20);
        }
        if ((v19 & 2) == 0)
          llvm::deallocate_buffer(*(llvm **)(v18 + 72), *(void **)(v18 + 80));
      }
      v21 = *(void ***)(v18 + 8);
      v22 = *(unsigned int *)(v18 + 16);
      if ((_DWORD)v22)
      {
        v23 = 16 * v22;
        v24 = v21 + 1;
        do
        {
          v25 = *v24;
          v24 += 2;
          free(v25);
          v23 -= 16;
        }
        while (v23);
        v21 = *(void ***)(v18 + 8);
      }
      if (v21 != (void **)(v18 + 24))
        free(v21);
      while (1)
      {
        v4 += 2;
        if (v4 == (_QWORD *)v17)
          break;
        if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_24;
      }
    }
  }
LABEL_6:
  if (*((_DWORD *)this + 130))
  {
    v5 = *((unsigned int *)this + 132);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = (_QWORD *)*((_QWORD *)this + 64);
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_11;
      }
    }
    else
    {
      v7 = (_QWORD *)*((_QWORD *)this + 64);
    }
    v26 = *((_QWORD *)this + 64) + 16 * v5;
LABEL_43:
    if (v7 != (_QWORD *)v26)
    {
      v27 = v7[1];
      v28 = *(_QWORD *)(v27 + 96);
      if (v28 >= 8)
      {
        if ((v28 & 4) != 0)
        {
          v29 = (_QWORD *)(v27 + 72);
          if ((v28 & 2) == 0)
            v29 = (_QWORD *)*v29;
          (*(void (**)(_QWORD *))((v28 & 0xFFFFFFFFFFFFFFF8) + 16))(v29);
        }
        if ((v28 & 2) == 0)
          llvm::deallocate_buffer(*(llvm **)(v27 + 72), *(void **)(v27 + 80));
      }
      v30 = *(void ***)(v27 + 8);
      v31 = *(unsigned int *)(v27 + 16);
      if ((_DWORD)v31)
      {
        v32 = 16 * v31;
        v33 = v30 + 1;
        do
        {
          v34 = *v33;
          v33 += 2;
          free(v34);
          v32 -= 16;
        }
        while (v32);
        v30 = *(void ***)(v27 + 8);
      }
      if (v30 != (void **)(v27 + 24))
        free(v30);
      while (1)
      {
        v7 += 2;
        if (v7 == (_QWORD *)v26)
          break;
        if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_43;
      }
    }
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 87);
  if (!v8)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *((unsigned int *)this + 170);
    v12 = (llvm *)*((_QWORD *)this + 83);
    if ((_DWORD)v11)
    {
LABEL_16:
      v13 = 80 * v11;
      v14 = (char *)v12 + 32;
      do
      {
        if (*((_QWORD *)v14 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v15 = (char *)*((_QWORD *)v14 - 2);
          if (v14 != v15)
            free(v15);
        }
        v14 += 80;
        v13 -= 80;
      }
      while (v13);
      v12 = (llvm *)*((_QWORD *)this + 83);
      v16 = 80 * *((unsigned int *)this + 170);
LABEL_62:
      llvm::deallocate_buffer(v12, (void *)v16);
    }
  }
  else
  {
LABEL_15:
    v11 = *((unsigned int *)this + 170);
    v12 = (llvm *)*((_QWORD *)this + 83);
    if ((_DWORD)v11)
      goto LABEL_16;
  }
  v16 = 0;
  goto LABEL_62;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unsigned __int8 **v16;
  _QWORD v17[2];
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];

  v6 = a4;
  v20[0] = a2;
  v20[1] = a3;
  v19 = *a5 | ((unint64_t)*a6 << 32);
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v16 = a1;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    v6 = a4;
    a1 = v16;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = a4;
      a1 = v16;
    }
  }
  v9 = v8[19] ^ HIDWORD(v19);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (8 * v19 + 8));
  v17[0] = &v19;
  v17[1] = v20;
  v18 = &v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, -348639895* ((((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 32) >> 15) ^ (-348639895* (v9 ^ (v10 >> 47) ^ v10))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,int,mlir::IntegerType::SignednessSemantics &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,int,mlir::IntegerType::SignednessSemantics &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v17);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,int,mlir::IntegerType::SignednessSemantics &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = v2 & 0x3FFFFFFF;
  v4 = v2 >> 30;
  return v3 == **(_DWORD **)a1 && *(_DWORD *)(*(_QWORD *)a1 + 4) == v4;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,int,mlir::IntegerType::SignednessSemantics &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(unint64_t **a1, uint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  v4 = **a1;
  *(_QWORD *)(a2 + 80) += 16;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 16 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 16;
  *(_QWORD *)v10 = 0;
  *(_DWORD *)(v10 + 8) = (v4 >> 2) & 0xC0000000 | v4 & 0x3FFFFFFF;
  v11 = (uint64_t *)a1[1];
  if (*v11)
    ((void (*)(uint64_t, unint64_t))*v11)(v11[1], v10);
  return v10;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = ***(_QWORD ***)(result + 8);
  v3 = *(_DWORD *)(v2 + 336);
  if (!v3)
    goto LABEL_9;
  v4 = *(_QWORD *)(v2 + 320);
  v5 = v3 - 1;
  v6 = (v3 - 1) & ((*(_QWORD *)result >> 4) ^ (*(_QWORD *)result >> 9));
  v7 = *(_QWORD *)(v4 + 16 * (v5 & ((*(_QWORD *)result >> 4) ^ (*(_QWORD *)result >> 9))));
  if (v7 != *(_QWORD *)result)
  {
    v9 = 1;
    while (v7 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & v5;
      v7 = *(_QWORD *)(v4 + 16 * v6);
      if (v7 == *(_QWORD *)result)
        goto LABEL_3;
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create a Type that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  v8 = *(_QWORD *)(v4 + 16 * v6 + 8);
  if (!v8)
    goto LABEL_9;
  *a2 = v8;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>,llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181234BE0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181234BE0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            if (*(_QWORD *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v29 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v21, &v29);
              v22 = v29;
              *v29 = *(_OWORD *)v21;
              v23 = *(_QWORD *)(v21 + 16);
              *(_QWORD *)(v21 + 16) = 0;
              *((_QWORD *)v22 + 2) = v23;
              ++*(_DWORD *)(a1 + 8);
              v24 = *(_QWORD *)(v21 + 16);
              *(_QWORD *)(v21 + 16) = 0;
              if (v24)
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_181234BE0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_26:
      v28 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181234BE0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v28);
      return result;
    }
    v25 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v25 & 0x1FFFFFFFFFFFFFFELL));
    v26 = v25 & 0x1FFFFFFFFFFFFFFELL;
    v27 = result;
    do
    {
      *v27 = xmmword_181234BE0;
      *(_OWORD *)((char *)v27 + 24) = xmmword_181234BE0;
      v27 += 3;
      v26 -= 2;
    }
    while (v26);
    if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_26;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  unsigned int v8;
  void *v9;
  size_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  const void *v15;
  BOOL v16;
  int v17;
  uint64_t result;
  int v19;
  int v20;
  const void *v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  const void *v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  const void *v38;
  BOOL v39;
  int v40;
  void *__s1;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v14 = 0;
    result = 0;
    goto LABEL_70;
  }
  v6 = *a1;
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
  v8 = v4 - 1;
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    if (v9 == (void *)-2)
    {
      v11 = 0;
      v19 = 1;
      v20 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 80 * (HashValue & v8));
      v21 = (const void *)*v14;
      if (*v14 == -1)
        goto LABEL_21;
LABEL_19:
      if (v21 != (const void *)-2 && v14[1])
      {
LABEL_21:
        while (v21 != (const void *)-1)
        {
          if (v11)
            v22 = 0;
          else
            v22 = v21 == (const void *)-2;
          if (v22)
            v11 = v14;
          v23 = v19 + v20;
          ++v19;
          v20 = v23 & v8;
          v14 = (_QWORD *)(v6 + 80 * (v23 & v8));
          v21 = (const void *)*v14;
          if (*v14 != -1)
            goto LABEL_19;
        }
        goto LABEL_66;
      }
    }
    else
    {
      v11 = 0;
      v31 = 1;
      v32 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 80 * (HashValue & v8));
      v33 = *v14;
      if (*v14 == -2)
        goto LABEL_47;
LABEL_43:
      if (v33 == -1)
      {
        if (v9 != (void *)-1)
        {
LABEL_47:
          while (v33 != -1)
          {
            if (v11)
              v34 = 0;
            else
              v34 = v33 == -2;
            if (v34)
              v11 = v14;
            v35 = v31 + v32;
            ++v31;
            v32 = v35 & v8;
            v14 = (_QWORD *)(v6 + 80 * (v35 & v8));
            v33 = *v14;
            if (*v14 != -2)
              goto LABEL_43;
          }
          goto LABEL_66;
        }
      }
      else if (v14[1])
      {
        goto LABEL_47;
      }
    }
    goto LABEL_69;
  }
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      v11 = 0;
      v36 = 1;
      v37 = HashValue & v8;
      v14 = (_QWORD *)(v6 + 80 * (HashValue & v8));
      v38 = (const void *)*v14;
      if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_63;
      while (v38 != (const void *)-1)
      {
        if (v11)
          v39 = 0;
        else
          v39 = v38 == (const void *)-2;
        if (v39)
          v11 = v14;
        v40 = v36 + v37;
        ++v36;
        v37 = v40 & v8;
        v14 = (_QWORD *)(v6 + 80 * (v40 & v8));
        v38 = (const void *)*v14;
        if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_63:
          if (v10 == v14[1] && !memcmp(__s1, v38, v10))
            goto LABEL_69;
        }
      }
      goto LABEL_66;
    }
    v11 = 0;
    v24 = 1;
    v25 = HashValue & v8;
    v14 = (_QWORD *)(v6 + 80 * (HashValue & v8));
    v26 = (const void *)*v14;
    if (*v14 == -2)
      goto LABEL_34;
LABEL_31:
    if (v26 != (const void *)-1)
    {
      if (v10 != v14[1] || (v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), v24 = v27, v28))
      {
LABEL_34:
        while (v26 != (const void *)-1)
        {
          if (v11)
            v29 = 0;
          else
            v29 = v26 == (const void *)-2;
          if (v29)
            v11 = v14;
          v30 = v24 + v25;
          ++v24;
          v25 = v30 & v8;
          v14 = (_QWORD *)(v6 + 80 * (v30 & v8));
          v26 = (const void *)*v14;
          if (*v14 != -2)
            goto LABEL_31;
        }
        goto LABEL_66;
      }
    }
LABEL_69:
    result = 1;
    goto LABEL_70;
  }
  v11 = 0;
  v12 = 1;
  v13 = HashValue & v8;
  v14 = (_QWORD *)(v6 + 80 * (HashValue & v8));
  v15 = (const void *)*v14;
  if (*v14 == -1)
    goto LABEL_8;
LABEL_5:
  if (v15 == (const void *)-2 || v10 == v14[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v15, v10))
    goto LABEL_69;
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11)
      v16 = 0;
    else
      v16 = v15 == (const void *)-2;
    if (v16)
      v11 = v14;
    v17 = v12 + v13;
    ++v12;
    v13 = v17 & v8;
    v14 = (_QWORD *)(v6 + 80 * (v17 & v8));
    v15 = (const void *)*v14;
    if (*v14 != -1)
      goto LABEL_5;
  }
LABEL_66:
  result = 0;
  if (v11)
    v14 = v11;
LABEL_70:
  *a3 = v14;
  return result;
}

uint64_t *llvm::StringMap<std::unique_ptr<mlir::OperationName::Impl>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<mlir::OperationName::Impl>>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *buffer;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v18 = v9[1];
        ++v9;
        v10 = v18;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 2;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  v13 = *a4;
  *a4 = 0;
  *buffer = a3;
  buffer[1] = v13;
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v14 = *v9 == -8;
  else
    v14 = 1;
  if (v14)
  {
    do
    {
      v16 = v9[1];
      ++v9;
      v15 = v16;
      if (v16)
        v17 = v15 == -8;
      else
        v17 = 1;
    }
    while (v17);
  }
  return v9;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unsigned __int8 **v16;
  _QWORD v17[2];
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];

  v6 = a4;
  v20[0] = a2;
  v20[1] = a3;
  v19 = *a5 | ((unint64_t)*a6 << 32);
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v16 = a1;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    v6 = a4;
    a1 = v16;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = a4;
      a1 = v16;
    }
  }
  v9 = v8[19] ^ HIDWORD(v19);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (8 * v19 + 8));
  v17[0] = &v19;
  v17[1] = v20;
  v18 = &v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, -348639895* ((((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 32) >> 15) ^ (-348639895* (v9 ^ (v10 >> 47) ^ v10))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,unsigned int &,mlir::IntegerType::SignednessSemantics &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,unsigned int &,mlir::IntegerType::SignednessSemantics &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v17);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,unsigned int &,mlir::IntegerType::SignednessSemantics &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = v2 & 0x3FFFFFFF;
  v4 = v2 >> 30;
  return v3 == **(_DWORD **)a1 && *(_DWORD *)(*(_QWORD *)a1 + 4) == v4;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,unsigned int &,mlir::IntegerType::SignednessSemantics &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(unint64_t **a1, uint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  v4 = **a1;
  *(_QWORD *)(a2 + 80) += 16;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 16 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 16;
  *(_QWORD *)v10 = 0;
  *(_DWORD *)(v10 + 8) = (v4 >> 2) & 0xC0000000 | v4 & 0x3FFFFFFF;
  v11 = (uint64_t *)a1[1];
  if (*v11)
    ((void (*)(uint64_t, unint64_t))*v11)(v11[1], v10);
  return v10;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJRjRNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = ***(_QWORD ***)(result + 8);
  v3 = *(_DWORD *)(v2 + 336);
  if (!v3)
    goto LABEL_9;
  v4 = *(_QWORD *)(v2 + 320);
  v5 = v3 - 1;
  v6 = (v3 - 1) & ((*(_QWORD *)result >> 4) ^ (*(_QWORD *)result >> 9));
  v7 = *(_QWORD *)(v4 + 16 * (v5 & ((*(_QWORD *)result >> 4) ^ (*(_QWORD *)result >> 9))));
  if (v7 != *(_QWORD *)result)
  {
    v9 = 1;
    while (v7 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & v5;
      v7 = *(_QWORD *)(v4 + 16 * v6);
      if (v7 == *(_QWORD *)result)
        goto LABEL_3;
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create a Type that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  v8 = *(_QWORD *)(v4 + 16 * v6 + 8);
  if (!v8)
    goto LABEL_9;
  *a2 = v8;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(80 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 80 * v10 - 80;
    if (v11 >= 0x50)
    {
      v16 = v11 / 0x50 + 1;
      v12 = &result[5 * (v16 & 0x7FFFFFFFFFFFFFELL)];
      v17 = v16 & 0x7FFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181234BE0;
        v18[5] = xmmword_181234BE0;
        v18 += 10;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 80 * v3;
          v21 = (uint64_t)v4;
          do
          {
            if (*(_QWORD *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v29 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v21, &v29);
              v22 = v29;
              *v29 = *(_OWORD *)v21;
              *((_QWORD *)v22 + 3) = 0x600000000;
              *((_QWORD *)v22 + 2) = v22 + 2;
              v23 = (uint64_t)(v22 + 1);
              if (*(_DWORD *)(v21 + 24))
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v23, v21 + 16);
              ++*(_DWORD *)(a1 + 8);
              v24 = *(void **)(v21 + 16);
              if ((void *)(v21 + 32) != v24)
                free(v24);
            }
            v21 += 80;
            v20 -= 80;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(80 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = &result[5 * v10];
    do
    {
      *v12 = xmmword_181234BE0;
      v12 += 5;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 80 * v13 - 80;
    if (v14 < 0x50)
    {
      v15 = result;
LABEL_28:
      v28 = &result[5 * v13];
      do
      {
        *v15 = xmmword_181234BE0;
        v15 += 5;
      }
      while (v15 != v28);
      return result;
    }
    v25 = v14 / 0x50 + 1;
    v15 = &result[5 * (v25 & 0x7FFFFFFFFFFFFFELL)];
    v26 = v25 & 0x7FFFFFFFFFFFFFELL;
    v27 = result;
    do
    {
      *v27 = xmmword_181234BE0;
      v27[5] = xmmword_181234BE0;
      v27 += 10;
      v26 -= 2;
    }
    while (v26);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_28;
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int *a6, __int128 *a7)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  _DWORD *v24;
  _DWORD v25[2];
  __int128 v26;
  _QWORD v27[2];

  v27[0] = a2;
  v27[1] = a3;
  v9 = *a6;
  v25[0] = *a5;
  v25[1] = v9;
  v26 = *a7;
  v10 = (37 * v9);
  v11 = llvm::hashing::detail::hash_combine_range_impl<mlir::AffineExpr const*>((unint64_t *)v26, (unint64_t *)(v26 + 8 * *((_QWORD *)&v26 + 1)));
  v12 = ((v11 << 32) - 1) ^ (((v11 << 32) - 1) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = ((v14 >> 31) ^ v14 | (unint64_t)(v10 << 32))
      + ~((unint64_t)((v14 >> 31) ^ v14) << 32);
  v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
  v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
  v18 = ((v17 + ~(v17 << 27)) >> 31) ^ ((_DWORD)v17 + ~((_DWORD)v17 << 27));
  v19 = (v18 | ((unint64_t)(37 * v25[0]) << 32)) + ~(v18 << 32);
  v20 = 9
      * (((v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13)) ^ (((v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v23[0] = v25;
  v23[1] = v27;
  v24 = v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, (v21 >> 31) ^ v21, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<mlir::AffineExpr const*>(unint64_t *a1, unint64_t *a2)
{
  unsigned __int8 v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  char v83;
  char v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  char *v88;
  BOOL v89;
  char v90;
  uint64_t v91;
  char *v92;
  char v93;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  if ((v3 & 1) == 0)
  {
    v99 = a1;
    a1 = v99;
    if (v100)
    {
      v101 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v101 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v101;
      a1 = v99;
    }
  }
  v4 = llvm::hashing::detail::get_execution_seed(void)::seed;
  if (a1 == a2)
  {
    v9 = 0;
    return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v113, v9, v4);
  }
  else
  {
    v5 = 0;
    v6 = &llvm::hashing::detail::fixed_seed_override;
    while (1)
    {
      v7 = a1[v5];
      if ((v8 & 1) == 0)
      {
        v109 = v4;
        v111 = a1;
        v13 = v6;
        v6 = v13;
        v15 = v14;
        v4 = v109;
        a1 = v111;
        if (v15)
        {
          v16 = *v13;
          if (!*v13)
            v16 = 0xFF51AFD7ED558CCDLL;
          llvm::hashing::detail::get_execution_seed(void)::seed = v16;
          v6 = v13;
          v4 = v109;
          a1 = v111;
        }
      }
      if (v5 > 7)
        break;
      v9 = v5 * 8 + 8;
      v10 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v7) ^ HIDWORD(v7));
      v11 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v10 >> 47) ^ v10);
      *(uint64_t *)((char *)&v113 + v5 * 8) = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      v12 = &a1[++v5];
      if (v12 == a2)
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v113, v9, v4);
    }
    v18 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v19 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    v20 = v4 ^ (v4 >> 47);
    v21 = v4 ^ (((0x9DDFEA08EB382D69 * (v20 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v20 ^ (0xB492B66FBE98F273 * v4)));
    v22 = v19 + v4;
    v23 = v118 + v19 - 0x4B6D499041670D8DLL * __ROR8__(v119 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    v24 = v20 - 0x622015F714C7D297 * (v18 ^ (v18 >> 47));
    v25 = v113 - 0x6D8ED9027DD26057 * v4;
    v26 = v20 + v25;
    v27 = v25 + v114 + v115;
    v28 = __ROR8__(v27, 44) + v25;
    v29 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v21) ^ ((0x9DDFEA08EB382D69 * v21) >> 47));
    v30 = (0xB492B66FBE98F273 * __ROR8__(v22 + v114, 37)) ^ v29;
    v31 = v28 + __ROR8__(v30 + v26 + v116, 21);
    v32 = __ROR8__(v24, 33);
    v33 = 0xB492B66FBE98F273 * v32;
    v34 = v29 + v117 - 0x4B6D499041670D8DLL * v32;
    v35 = v27 + v116;
    v36 = __ROR8__(v118 + v119 + v34, 44) + v34 + __ROR8__(v23 + v115 + v120 + v34, 21);
    v37 = v118 + v119 + v34 + v120;
    v38 = &a1[v5];
    if (v38 == a2)
    {
      v40 = 64;
      v42 = v33;
    }
    else
    {
      v39 = (char *)&v113 + 1;
      v40 = 64;
      v41 = v30;
      v42 = v33;
      do
      {
        v112 = v41;
        v48 = 0;
        v43 = 0;
        do
        {
          v49 = v43;
          v50 = v48;
          v51 = *v38;
          if ((v52 & 1) == 0)
          {
            v108 = v40;
            v110 = v31;
            v106 = v23;
            v107 = v36;
            v104 = v37;
            v105 = v35;
            v102 = v42;
            v103 = v39;
            v42 = v102;
            v39 = v103;
            v37 = v104;
            v35 = v105;
            v23 = v106;
            v36 = v107;
            v40 = v108;
            v31 = v110;
            if (v55)
            {
              v56 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v56 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v56;
              v42 = v102;
              v39 = v103;
              v37 = v104;
              v35 = v105;
              v23 = v106;
              v36 = v107;
              v40 = v108;
              v31 = v110;
            }
          }
          if (v49 > 0x38)
          {
            v43 = 64;
LABEL_18:
            v44 = v112;
            goto LABEL_19;
          }
          v43 = v49 + 8;
          v53 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v51) ^ HIDWORD(v51));
          v54 = 0x9DDFEA08EB382D69 * (HIDWORD(v51) ^ (v53 >> 47) ^ v53);
          *(uint64_t *)((char *)&v113 + v49) = 0x9DDFEA08EB382D69 * (v54 ^ (v54 >> 47));
          ++v38;
          v48 = v50 + 1;
        }
        while (v38 != a2);
        if ((v43 & 0x7FFFFFFFFFFFFFB8) == 0)
          goto LABEL_42;
        v57 = 56 - v49;
        v58 = v49 + 8;
        if (v43 == 56 - v49)
        {
          v59 = (char *)&v113 + v43;
          if (55 - 8 * v50 >= (v49 | 7))
            v60 = v49 | 7;
          else
            v60 = 55 - 8 * v50;
          v61 = (char *)&v113;
          v62 = v49 + 8;
          if (v60 >= 0xF)
          {
            if (&v113 >= (uint64_t *)((char *)&v113 + v49 + v60 + 9) || (v62 = v49 + 8, v59 >= &v39[v60]))
            {
              v63 = v60 + 1;
              v64 = (v60 + 1) & 0x7FFFFFFFFFFFFFF0;
              v65 = (uint64_t *)((char *)&v113 + v43);
              v66 = v113;
              v67 = v114;
              v68 = *(uint64_t *)((char *)&v113 + v43 + 8);
              v113 = *(uint64_t *)((char *)&v113 + v43);
              v114 = v68;
              *v65 = v66;
              v65[1] = v67;
              if (v64 != 16)
              {
                v69 = (uint64_t *)((char *)&v116 + v49);
                v70 = v115;
                v71 = v116;
                v72 = *(uint64_t *)((char *)&v116 + v49 + 8);
                v115 = *(uint64_t *)((char *)&v116 + v49);
                v116 = v72;
                *v69 = v70;
                v69[1] = v71;
                if (v64 != 32)
                {
                  v73 = (uint64_t *)((char *)&v118 + v49);
                  v74 = v117;
                  v75 = v118;
                  v76 = *(uint64_t *)((char *)&v118 + v49 + 8);
                  v117 = *(uint64_t *)((char *)&v118 + v49);
                  v118 = v76;
                  *v73 = v74;
                  v73[1] = v75;
                  if (v64 != 48)
                  {
                    v77 = (uint64_t *)((char *)&v120 + v49);
                    v78 = v119;
                    v79 = v120;
                    v80 = *(uint64_t *)((char *)&v120 + v49 + 8);
                    v119 = *(uint64_t *)((char *)&v120 + v49);
                    v120 = v80;
                    *v77 = v78;
                    v77[1] = v79;
                  }
                }
              }
              if (v63 == v64)
              {
LABEL_42:
                v38 = a2;
                goto LABEL_18;
              }
              v62 = v43 + v64;
              v61 = (char *)&v113 + v64;
            }
          }
          v92 = v61 + 1;
          v44 = v112;
          do
          {
            v93 = *(v92 - 1);
            *(v92 - 1) = *((_BYTE *)&v113 + v62);
            *((_BYTE *)&v113 + v62) = v93;
            if (v92 == v59)
              break;
            ++v92;
          }
          while (v62++ != 63);
        }
        else
        {
          do
          {
            v81 = v58;
            v58 = v57;
            v57 = v81 % v57;
          }
          while (v57);
          v44 = v112;
          if (v58)
          {
            v82 = (uint64_t *)((char *)&v113 + v58);
            do
            {
              v84 = *((_BYTE *)v82 - 1);
              v82 = (uint64_t *)((char *)v82 - 1);
              v83 = v84;
              v85 = (uint64_t *)((char *)v82 + v43);
              v86 = v82;
              do
              {
                v87 = v86;
                v86 = v85;
                *(_BYTE *)v87 = *(_BYTE *)v85;
                v88 = (char *)((char *)&v121 - (char *)v85);
                v89 = __OFSUB__(v43, v88);
                v91 = v43 - (_QWORD)v88;
                v90 = (v91 < 0) ^ v89;
                v85 = (uint64_t *)((char *)&v113 + v91);
                if (v90)
                  v85 = (uint64_t *)((char *)v86 + v43);
              }
              while (v85 != v82);
              *(_BYTE *)v86 = v83;
            }
            while (v82 != &v113);
          }
        }
        v38 = a2;
LABEL_19:
        v45 = v23 + v35 + v42 + v114;
        v23 = v118 + v35 - 0x4B6D499041670D8DLL * __ROR8__(v23 + v31 + v119, 42);
        v46 = v113 - 0x4B6D499041670D8DLL * v31;
        v30 = (0xB492B66FBE98F273 * __ROR8__(v45, 37)) ^ v36;
        v31 = __ROR8__(v46 + v114 + v115, 44) + v46 + __ROR8__(v30 + v37 + v46 + v116, 21);
        v35 = v46 + v114 + v115 + v116;
        v42 = 0xB492B66FBE98F273 * __ROR8__(v44 + v37, 33);
        v47 = v42 + v36 + v117;
        v36 = __ROR8__(v23 + v115 + v47 + v120, 21) + v47 + __ROR8__(v118 + v119 + v47, 44);
        v37 = v118 + v119 + v47 + v120;
        v40 += v43;
        v41 = v30;
      }
      while (v38 != a2);
    }
    v95 = 0x9DDFEA08EB382D69
        * (v37 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v37)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v37)));
    v96 = v30 - 0x4B6D499041670D8DLL * (v23 ^ (v23 >> 47)) - 0x622015F714C7D297 * (v95 ^ (v95 >> 47));
    v97 = 0x9DDFEA08EB382D69
        * (v36 ^ ((0x9DDFEA08EB382D69 * (v31 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ v36)));
    v98 = 0x9DDFEA08EB382D69
        * ((v42 - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47)) - 0x622015F714C7D297 * (v97 ^ (v97 >> 47))) ^ ((0x9DDFEA08EB382D69 * ((v42 - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47)) - 0x622015F714C7D297 * (v97 ^ (v97 >> 47))) ^ v96)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v42 - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47)) - 0x622015F714C7D297 * (v97 ^ (v97 >> 47))) ^ v96)));
    return 0x9DDFEA08EB382D69 * (v98 ^ (v98 >> 47));
  }
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  BOOL v11;

  v2 = (_DWORD *)*a1;
  if (*(_DWORD *)*a1 != *a2)
    return 0;
  if (v2[1] != a2[1])
    return 0;
  v3 = *((_QWORD *)v2 + 2);
  if (v3 != a2[2])
    return 0;
  if (!v3)
    return 1;
  v4 = (uint64_t *)*((_QWORD *)v2 + 1);
  v5 = (uint64_t *)(a2 + 6);
  v6 = 8 * v3 - 8;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v9 = *v4++;
    result = v9 == v7;
    v11 = v9 != v7 || v6 == 0;
    v6 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(_QWORD *a1, uint64_t *__sz)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = (_DWORD *)*a1;
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 8 * v5 + 24, 3);
  v7 = v6;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *(_DWORD *)v6 = *v3;
  *(_DWORD *)(v6 + 4) = v3[1];
  *(_DWORD *)(v6 + 8) = v5;
  if (v5)
  {
    v8 = (_QWORD *)(v6 + 24);
    v9 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v9 < 5)
    {
      v10 = (uint64_t *)v4;
      do
      {
LABEL_8:
        v17 = *v10++;
        *v8++ = v17;
      }
      while (v10 != (uint64_t *)(v4 + 8 * v5));
      goto LABEL_9;
    }
    v10 = (uint64_t *)v4;
    if ((unint64_t)(v6 - v4 + 24) < 0x20)
      goto LABEL_8;
    v11 = v9 + 1;
    v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = (_QWORD *)((char *)v8 + v12);
    v10 = (uint64_t *)(v4 + v12);
    v13 = (__int128 *)(v4 + 16);
    v14 = (_OWORD *)(v6 + 40);
    v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_8;
  }
LABEL_9:
  v18 = a1[1];
  if (*(_QWORD *)v18)
    (*(void (**)(_QWORD, uint64_t))v18)(*(_QWORD *)(v18 + 8), v6);
  return v7;
}

_QWORD **llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>::callback_fn<mlir::AffineMap::getImpl(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,mlir::MLIRContext *)::$_0>(_QWORD **result, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = **result;
  return result;
}

uint64_t llvm::DenseMapInfo<std::tuple<unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,llvm::ArrayRef<BOOL>>,void>::getHashValueImpl<0u>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = (37 * *(_DWORD *)a1);
  v3 = (37 * *(_DWORD *)(a1 + 4));
  v4 = llvm::hashing::detail::hash_combine_range_impl<mlir::AffineExpr const*>(*(unint64_t **)(a1 + 8), (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 16)));
  v5 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32));
  v6 = ((v5 << 32) - 1) ^ (((v5 << 32) - 1) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = ((v8 >> 31) ^ v8 | (v4 << 32))
     + ~((unint64_t)((v8 >> 31) ^ v8) << 32);
  v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
  v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
  v12 = ((v11 + ~(v11 << 27)) >> 31) ^ ((_DWORD)v11 + ~((_DWORD)v11 << 27));
  v13 = (v12 | (v3 << 32)) + ~(v12 << 32);
  v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
  v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
  v16 = ((v15 + ~(v15 << 27)) >> 31) ^ ((_DWORD)v15 + ~((_DWORD)v15 << 27));
  v17 = (v16 | (v2 << 32)) + ~(v16 << 32);
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  return (v19 >> 31) ^ v19;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  size_t v7;

  v2 = (_DWORD *)*a1;
  if (*(_DWORD *)*a1 == *(_DWORD *)a2 && v2[1] == *(_DWORD *)(a2 + 4))
  {
    v3 = *((_QWORD *)v2 + 2);
    if (v3 == *(_QWORD *)(a2 + 16))
    {
      if (v3)
      {
        v4 = (_QWORD *)*((_QWORD *)v2 + 1);
        v5 = *(_QWORD **)(a2 + 8);
        v6 = 8 * v3;
        while (*v4 == *v5)
        {
          ++v4;
          ++v5;
          v6 -= 8;
          if (!v6)
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        v7 = *((_QWORD *)v2 + 4);
        if (v7 == *(_QWORD *)(a2 + 32))
          return memcmp(*((const void **)v2 + 3), *(const void **)(a2 + 24), v7) == 0;
      }
    }
  }
  return 0;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::detail::IntegerSetStorage::construct(a2, *a1);
  v4 = a1[1];
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::detail::IntegerSetStorage::construct(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  unint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  char v37;

  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 40;
  *(_QWORD *)(v9 + 32) = 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_DWORD *)v9 = *(_DWORD *)a2;
  *(_DWORD *)(v9 + 4) = *(_DWORD *)(a2 + 4);
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_21;
  }
  v11 = *(_QWORD *)(a2 + 8);
  v12 = 8 * v10;
  v13 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)a1, 8 * v10, 3);
  if ((unint64_t)(8 * v10 - 8) < 0x18)
  {
    v14 = (_QWORD *)v13;
    v15 = (uint64_t *)v11;
    do
    {
LABEL_20:
      v22 = *v15++;
      *v14++ = v22;
    }
    while (v15 != (uint64_t *)(v11 + v12));
    goto LABEL_21;
  }
  v14 = (_QWORD *)v13;
  v15 = (uint64_t *)v11;
  if ((unint64_t)(v13 - v11) < 0x20)
    goto LABEL_20;
  v16 = ((unint64_t)(v12 - 8) >> 3) + 1;
  v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v14 = (_QWORD *)(v13 + v17);
  v15 = (uint64_t *)(v11 + v17);
  v18 = (__int128 *)(v11 + 16);
  v19 = (_OWORD *)(v13 + 16);
  v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21 = *v18;
    *(v19 - 1) = *(v18 - 1);
    *v19 = v21;
    v18 += 2;
    v19 += 2;
    v20 -= 4;
  }
  while (v20);
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_20;
LABEL_21:
  *(_QWORD *)(v9 + 8) = v13;
  *(_QWORD *)(v9 + 16) = v10;
  v23 = *(_QWORD *)(a2 + 32);
  if (!v23)
  {
    v25 = 0;
    goto LABEL_38;
  }
  v24 = *(_QWORD *)(a2 + 24);
  v25 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)a1, v23, 0);
  if (v23 < 8)
  {
    v26 = (_BYTE *)v25;
    v27 = (char *)v24;
    goto LABEL_37;
  }
  v26 = (_BYTE *)v25;
  v27 = (char *)v24;
  if ((unint64_t)(v25 - v24) < 0x20)
    goto LABEL_37;
  if (v23 < 0x20)
  {
    v28 = 0;
    goto LABEL_32;
  }
  v28 = v23 & 0xFFFFFFFFFFFFFFE0;
  v29 = (__int128 *)(v24 + 16);
  v30 = (_OWORD *)(v25 + 16);
  v31 = v23 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v32 = *v29;
    *(v30 - 1) = *(v29 - 1);
    *v30 = v32;
    v29 += 2;
    v30 += 2;
    v31 -= 32;
  }
  while (v31);
  if (v23 != v28)
  {
    if ((v23 & 0x18) == 0)
    {
      v27 = (char *)(v24 + v28);
      v26 = (_BYTE *)(v25 + v28);
      goto LABEL_37;
    }
LABEL_32:
    v26 = (_BYTE *)(v25 + (v23 & 0xFFFFFFFFFFFFFFF8));
    v27 = (char *)(v24 + (v23 & 0xFFFFFFFFFFFFFFF8));
    v33 = (uint64_t *)(v24 + v28);
    v34 = (_QWORD *)(v25 + v28);
    v35 = v28 - (v23 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v36 = *v33++;
      *v34++ = v36;
      v35 += 8;
    }
    while (v35);
    if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_38;
    do
    {
LABEL_37:
      v37 = *v27++;
      *v26++ = v37;
    }
    while (v27 != (char *)(v24 + v23));
  }
LABEL_38:
  *(_QWORD *)(v9 + 24) = v25;
  *(_QWORD *)(v9 + 32) = v23;
  return v9;
}

void llvm::detail::UniqueFunctionBase<mlir::InFlightDiagnostic>::CallImpl<mlir::detail::getDefaultDiagnosticEmitFn(mlir::MLIRContext *)::$_0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  mlir::emitError(*(_QWORD *)(**(_QWORD **)a1 + 568), a2);
}

uint64_t mlir::convertFromAttribute(void *a1, const char *a2, _QWORD *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return convertDenseArrayFromAttr<mlir::detail::DenseArrayAttrImpl<int>,int>(a1, a2, a3, a4, a5, (const void **)"DenseI32ArrayAttr", (const char *)0x11);
}

uint64_t convertDenseArrayFromAttr<mlir::detail::DenseArrayAttrImpl<int>,int>(void *a1, const char *a2, _QWORD *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5, const void **a6, const char *a7)
{
  _QWORD *v14;
  const void *v15;
  uint64_t v16;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  const void ***v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  const void ***v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t LHS;
  const void ***v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  const void ***v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  const void ***v49;
  char *v50;
  char *v51;
  __int128 v52;
  _QWORD **v53;
  _QWORD **v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  _QWORD *v73;
  const void **v74;
  const char *v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unsigned int v81;
  unsigned int v82;
  _BYTE v83[96];
  void *v84;
  _QWORD *v85;
  void *__p;
  _QWORD **v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (mlir::detail::DenseArrayAttrImpl<int>::classof(a3))
    v14 = a3;
  else
    v14 = 0;
  v73 = v14;
  if (!v14)
  {
    a4(&v78, a5);
    if (v78)
    {
      LODWORD(v74) = 3;
      v75 = "expected ";
      v76 = 9;
      v18 = &v74;
      v19 = (char *)v80;
      if (v81 >= v82)
      {
        v59 = v81 + 1;
        if (v80 <= &v74 && (char *)v80 + 24 * v81 > (char *)&v74)
        {
          v67 = (char *)&v74 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
          v19 = (char *)v80;
          v18 = (const void ***)((char *)v80 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
          v18 = &v74;
          v19 = (char *)v80;
        }
      }
      v20 = &v19[24 * v81];
      v21 = *(_OWORD *)v18;
      *((_QWORD *)v20 + 2) = v18[2];
      *(_OWORD *)v20 = v21;
      ++v81;
      if (v78)
      {
        v77 = 261;
        v74 = a6;
        v75 = a7;
        mlir::Diagnostic::operator<<((uint64_t)&v79, &v74);
        if (v78)
        {
          LODWORD(v74) = 3;
          v76 = 16;
          v22 = &v74;
          v23 = (char *)v80;
          if (v81 >= v82)
          {
            v64 = v81 + 1;
            if (v80 <= &v74 && (char *)v80 + 24 * v81 > (char *)&v74)
            {
              v71 = (char *)&v74 - (_BYTE *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
              v23 = (char *)v80;
              v22 = (const void ***)((char *)v80 + v71);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
              v22 = &v74;
              v23 = (char *)v80;
            }
          }
          v24 = &v23[24 * v81];
          v25 = *(_OWORD *)v22;
          *((_QWORD *)v24 + 2) = v22[2];
          *(_OWORD *)v24 = v25;
          ++v81;
          if (v78)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
        }
      }
    }
    if (!v88)
      return 0;
    v26 = (_QWORD **)__p;
    if (__p)
    {
      v27 = v87;
      v28 = __p;
      if (v87 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v87 = v26;
      operator delete(v28);
    }
    v29 = v84;
    if (!v84)
      goto LABEL_53;
    v30 = v85;
    v31 = v84;
    if (v85 == v84)
      goto LABEL_52;
    do
    {
      v33 = (void *)*--v30;
      v32 = v33;
      *v30 = 0;
      if (v33)
        operator delete[](v32);
    }
    while (v30 != v29);
    goto LABEL_51;
  }
  if ((const char *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v73) != a2)
  {
    a4(&v78, a5);
    if (v78)
    {
      LODWORD(v74) = 3;
      v75 = "size mismatch in attribute conversion: ";
      v76 = 39;
      v34 = &v74;
      v35 = (char *)v80;
      if (v81 >= v82)
      {
        v60 = v81 + 1;
        if (v80 <= &v74 && (char *)v80 + 24 * v81 > (char *)&v74)
        {
          v68 = (char *)&v74 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          v35 = (char *)v80;
          v34 = (const void ***)((char *)v80 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          v34 = &v74;
          v35 = (char *)v80;
        }
      }
      v36 = &v35[24 * v81];
      v37 = *(_OWORD *)v34;
      *((_QWORD *)v36 + 2) = v34[2];
      *(_OWORD *)v36 = v37;
      ++v81;
    }
    LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v73);
    if (v78)
    {
      LODWORD(v74) = 2;
      v75 = (const char *)LHS;
      v39 = &v74;
      v40 = (char *)v80;
      if (v81 >= v82)
      {
        v61 = v81 + 1;
        if (v80 <= &v74 && (char *)v80 + 24 * v81 > (char *)&v74)
        {
          v69 = (char *)&v74 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
          v40 = (char *)v80;
          v39 = (const void ***)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
          v39 = &v74;
          v40 = (char *)v80;
        }
      }
      v41 = &v40[24 * v81];
      v42 = *(_OWORD *)v39;
      *((_QWORD *)v41 + 2) = v39[2];
      *(_OWORD *)v41 = v42;
      v43 = ++v81;
      if (v78)
      {
        LODWORD(v74) = 3;
        v75 = " vs ";
        v76 = 4;
        v44 = &v74;
        v45 = (char *)v80;
        if (v43 >= v82)
        {
          v62 = v43 + 1;
          v63 = (char *)v80 + 24 * v43 > (char *)&v74;
          if (v80 <= &v74 && v63)
          {
            v70 = (char *)&v74 - (_BYTE *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
            v45 = (char *)v80;
            v44 = (const void ***)((char *)v80 + v70);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
            v44 = &v74;
            v45 = (char *)v80;
          }
        }
        v46 = &v45[24 * v81];
        v47 = *(_OWORD *)v44;
        *((_QWORD *)v46 + 2) = v44[2];
        *(_OWORD *)v46 = v47;
        v48 = ++v81;
        if (v78)
        {
          LODWORD(v74) = 5;
          v75 = a2;
          v49 = &v74;
          v50 = (char *)v80;
          if (v48 >= v82)
          {
            v65 = v48 + 1;
            v66 = (char *)v80 + 24 * v48 > (char *)&v74;
            if (v80 <= &v74 && v66)
            {
              v72 = (char *)&v74 - (_BYTE *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
              v50 = (char *)v80;
              v49 = (const void ***)((char *)v80 + v72);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
              v49 = &v74;
              v50 = (char *)v80;
            }
          }
          v51 = &v50[24 * v81];
          v52 = *(_OWORD *)v49;
          *((_QWORD *)v51 + 2) = v49[2];
          *(_OWORD *)v51 = v52;
          ++v81;
          if (v78)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
        }
      }
    }
    if (!v88)
      return 0;
    v53 = (_QWORD **)__p;
    if (__p)
    {
      v54 = v87;
      v55 = __p;
      if (v87 != __p)
      {
        do
          v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
        while (v54 != v53);
        v55 = __p;
      }
      v87 = v53;
      operator delete(v55);
    }
    v29 = v84;
    if (!v84)
    {
LABEL_53:
      if (v80 != v83)
        free(v80);
      return 0;
    }
    v56 = v85;
    v31 = v84;
    if (v85 == v84)
    {
LABEL_52:
      v85 = v29;
      operator delete(v31);
      goto LABEL_53;
    }
    do
    {
      v58 = (void *)*--v56;
      v57 = v58;
      *v56 = 0;
      if (v58)
        operator delete[](v57);
    }
    while (v56 != v29);
LABEL_51:
    v31 = v84;
    goto LABEL_52;
  }
  v15 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v73);
  if (v16)
    memmove(a1, v15, 4 * v16);
  return 1;
}

uint64_t mlir::Operation::create(mlir::Operation *this, const mlir::OperationState *a2)
{
  uint64_t v3;
  uint64_t v4;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12[2];
  uint64_t v13[2];
  void *v14[2];
  uint64_t v15;
  unint64_t v16[2];
  unint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  mlir::ValueRange::ValueRange(v17, *((_QWORD *)this + 8), *((unsigned int *)this + 18));
  mlir::ValueRange::ValueRange(v16, *((_QWORD *)this + 2), *((unsigned int *)this + 6));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext(this);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::Operation *)((char *)this + 112), Context);
  mlir::NamedAttrList::NamedAttrList(v14, Dictionary);
  v7 = *((_QWORD *)this + 32);
  mlir::BlockRange::BlockRange(v13, *((_QWORD *)this + 25), *((unsigned int *)this + 52));
  mlir::ValueRange::ValueRange(v12, *((_QWORD *)this + 28), *((unsigned int *)this + 58));
  v9 = mlir::Operation::create(v3, v4, v17[0], (mlir::OpResult *)v17[1], v16[0], v16[1], (mlir::NamedAttrList *)v14, v7, v13[0], v13[1], v12[0], v12[1]);
  if (v14[0] != &v15)
    free(v14[0]);
  v10 = *((_QWORD *)this + 31);
  if (v10)
    mlir::Operation::setPropertiesFromAttribute(v9, v10, 0, v8);
  return v9;
}

uint64_t mlir::Operation::create(uint64_t a1, uint64_t a2, uint64_t a3, mlir::OpResult *a4, int a5, uint64_t a6, mlir::NamedAttrList *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  mlir::Region *v24;
  mlir::Region *v25;
  unint64_t v26;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v31[0] = a11;
  v31[1] = a12;
  v29 = a2;
  v30 = a1;
  (*(void (**)(uint64_t, uint64_t *, mlir::NamedAttrList *))(*(_QWORD *)a2 + 48))(a2, &v29, a7);
  v18 = v29;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v30);
  Dictionary = mlir::NamedAttrList::getDictionary(a7, Context);
  v21 = mlir::Operation::create(a1, v18, a3, a4, a5, a6, Dictionary, a8, a9, a10, a12);
  if ((_DWORD)a12)
  {
    v22 = 0;
    do
    {
      if (mlir::RegionRange::dereference_iterator(v31, v22))
      {
        v26 = *(unsigned int *)(v21 + 44);
        if ((v26 & 0x7FFFFF) != 0)
          v23 = ((v21 + 64 + 16 * ((v26 >> 23) & 1) + ((v26 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *(unsigned int *)(v21 + 40);
        else
          v23 = 0;
        v24 = (mlir::Region *)(v23 + 24 * v22);
        v25 = (mlir::Region *)mlir::RegionRange::dereference_iterator(v31, v22);
        mlir::Region::takeBody(v24, v25);
      }
      ++v22;
    }
    while (v22 != a12);
  }
  return v21;
}

uint64_t mlir::Operation::setPropertiesFromAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v9;

  v5 = *(void ***)(a1 + 48);
  v6 = *(unsigned int *)(a1 + 44);
  v7 = (_QWORD *)(a1 + 16 * ((v6 >> 23) & 1) + 64);
  if (v5[2] == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    if (!BYTE3(v6))
      v7 = 0;
    *v7 = a2;
    return 1;
  }
  else
  {
    if (BYTE3(v6))
      v9 = v7;
    else
      v9 = 0;
    return (*((uint64_t (**)(void **, void **, _QWORD *, uint64_t, uint64_t, uint64_t))*v5 + 18))(v5, v5, v9, a2, a3, a4);
  }
}

uint64_t mlir::Operation::create(uint64_t a1, uint64_t a2, uint64_t a3, mlir::OpResult *a4, int a5, uint64_t a6, mlir::NamedAttrList *a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  uint64_t v17;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v23 = a1;
  (*(void (**)(uint64_t, uint64_t *, mlir::NamedAttrList *))(*(_QWORD *)a2 + 48))(a2, &v22, a7);
  v17 = v22;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  Dictionary = mlir::NamedAttrList::getDictionary(a7, Context);
  return mlir::Operation::create(a1, v17, a3, a4, a5, a6, Dictionary, a8, a9, a10, a11);
}

void mlir::Region::takeBody(mlir::Region *this, mlir::Region *a2)
{
  mlir::Region *v4;
  mlir::Region *v5;
  mlir::Block *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  mlir::Region *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  mlir::Region::dropAllReferences((uint64_t)this);
  v4 = (mlir::Region *)*((_QWORD *)this + 1);
  if (v4 != this)
  {
    do
    {
      v5 = (mlir::Region *)*((_QWORD *)v4 + 1);
      if (v4)
        v6 = (mlir::Region *)((char *)v4 - 8);
      else
        v6 = 0;
      llvm::ilist_traits<mlir::Block>::removeNodeFromList((uint64_t)this, (uint64_t)v6);
      v7 = *((_QWORD *)v6 + 1);
      v8 = (_QWORD *)*((_QWORD *)v6 + 2);
      *v8 = v7;
      *(_QWORD *)(v7 + 8) = v8;
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      mlir::Block::~Block(v6);
      operator delete(v9);
      v4 = v5;
    }
    while (v5 != this);
  }
  if (*(mlir::Region **)a2 != a2 && this != a2)
  {
    v10 = (mlir::Region *)*((_QWORD *)a2 + 1);
    llvm::ilist_traits<mlir::Block>::transferNodesFromList((uint64_t)this, (uint64_t)a2, (uint64_t)v10, (uint64_t)a2);
    if (v10 != a2)
    {
      v11 = *(_QWORD *)a2;
      v12 = *(_QWORD *)v10;
      *(_QWORD *)(v12 + 8) = a2;
      *(_QWORD *)a2 = v12;
      v13 = *(_QWORD *)this;
      *(_QWORD *)(v11 + 8) = this;
      *(_QWORD *)v10 = v13;
      *(_QWORD *)(v13 + 8) = v10;
      *(_QWORD *)this = v11;
    }
  }
}

uint64_t mlir::Operation::create(uint64_t a1, uint64_t a2, uint64_t a3, mlir::OpResult *this, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  uint64_t v17;
  unsigned int NumTrailing;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  mlir::GenericProgramPoint *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int NumInline;
  const char *v65;
  unint64_t v66;

  v17 = a11;
  NumTrailing = mlir::OpResult::getNumTrailing(this);
  NumInline = mlir::OpResult::getNumInline((uint64_t)this);
  v19 = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) + 7) & 0xFFFFFFF8;
  v61 = a7;
  v58 = a8;
  if (a6)
  {
    v20 = v19;
    v21 = a10;
    v22 = a6;
  }
  else
  {
    if ((v23 & 1) == 0
    {
      v65 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v66 = 84;
      v51 = llvm::StringRef::find((uint64_t *)&v65, "DesiredTypeName = ", 0x12uLL, 0);
      if (v66 >= v51)
        v52 = v51;
      else
        v52 = v66;
      v53 = &v65[v52];
      v54 = v66 - v52;
      if (v66 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v66 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
    }
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id);
    v22 = 0;
    v20 = v19;
    v21 = a10;
    if ((v24 & 1) != 0)
    {
      v25 = 0;
      v26 = 0;
      goto LABEL_7;
    }
  }
  v25 = 1;
  v26 = 16;
LABEL_7:
  v62 = 16 * NumInline;
  v63 = 24 * NumTrailing;
  v27 = (char *)malloc(32 * (v21 + v22) + 24 * a11 + v26 + v62 + v63 + v20 + 64);
  v28 = (uint64_t)&v27[v62 + v63];
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = a1;
  *(_DWORD *)(v28 + 32) = 0;
  *(_DWORD *)(v28 + 36) = (_DWORD)this;
  v60 = v25;
  if (v25)
    v29 = 0x800000;
  else
    v29 = 0;
  v30 = v19 | 7;
  if (v19 < 0)
    v30 = (v19 | 7) + 7;
  v31 = v29 | a11 & 0x7FFFFF | ((v30 >> 3) << 24);
  *(_DWORD *)(v28 + 40) = a10;
  *(_DWORD *)(v28 + 44) = v31;
  *(_QWORD *)(v28 + 48) = a2;
  *(_QWORD *)(v28 + 56) = 0;
  if (v19)
  {
    v32 = v28 + 16 * (v29 >> 23) + 64;
    if (HIBYTE(v31))
      v33 = v32;
    else
      v33 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a2, v33, v58);
  }
  if (NumInline)
  {
    v34 = 0;
    v35 = 0;
    v36 = (unint64_t *)&v27[v63 - 8 + v62];
    do
    {
      v37 = v35 + 1;
      v38 = mlir::TypeRange::dereference_iterator(a3, v35);
      *(v36 - 1) = 0;
      *v36 = v38 & 0xFFFFFFFFFFFFFFF8 | (v34 >> 32);
      v34 += 0x100000000;
      v36 -= 2;
      v35 = v37;
    }
    while (NumInline != v37);
  }
  if (NumTrailing)
  {
    v39 = 0;
    v40 = &v27[v63 - 120 + v62];
    do
    {
      v41 = mlir::TypeRange::dereference_iterator(a3, NumInline + v39);
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 1) = v41 & 0xFFFFFFFFFFFFFFF8 | 6;
      *((_QWORD *)v40 + 2) = v39;
      v40 -= 24;
      ++v39;
    }
    while (NumTrailing != v39);
  }
  if (a11)
  {
    v42 = 0;
    do
    {
      while (1)
      {
        v43 = *(unsigned int *)(v28 + 44);
        if ((v43 & 0x7FFFFF) == 0)
          break;
        mlir::Region::Region((_QWORD *)((char *)&v42[4 * *(unsigned int *)(v28 + 40)]+ ((v28 + 64 + 16 * ((v43 >> 23) & 1) + ((v43 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)), (mlir::Operation *)v28);
        v42 += 3;
        if (!--v17)
          goto LABEL_28;
      }
      mlir::Region::Region(v42, (mlir::Operation *)v28);
      v42 += 3;
      --v17;
    }
    while (v17);
  }
LABEL_28:
  v44 = *(_DWORD *)(v28 + 44);
  if ((v60 & 1) != 0)
  {
    mlir::detail::OperandStorage::OperandStorage();
    v44 = *(_DWORD *)(v28 + 44);
  }
  if ((_DWORD)a10)
  {
    v45 = 0;
    v46 = (_QWORD *)((v28 + 16 * ((v44 >> 23) & 1) + ((v44 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v47 = (mlir::GenericProgramPoint *)mlir::BlockRange::dereference_iterator(a9, v45);
      *v46 = 0;
      v46[1] = 0;
      v46[2] = v28;
      v46[3] = v47;
      mlir::GenericProgramPoint::~GenericProgramPoint(v47);
      v46[1] = v48;
      v49 = *v48;
      *v46 = *v48;
      if (v49)
        *(_QWORD *)(v49 + 8) = v46;
      *v48 = (uint64_t)v46;
      ++v45;
      v46 += 4;
    }
    while (a10 != v45);
  }
  mlir::Operation::setAttrs(v28, v61);
  return v28;
}

void mlir::Operation::setAttrs(uint64_t a1, uint64_t a2)
{
  unint64_t LHS;
  __int128 *Value;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t AttrData;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  mlir::DictionaryAttr *Context;
  __int128 v15;
  uint64_t CallableRegion;
  __int128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  if (*(_BYTE *)(a1 + 47))
  {
    v19 = v21;
    v20 = 0x300000000;
    LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v18);
    if (LHS > HIDWORD(v20))
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, LHS, 16);
    Value = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18);
    v5 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v18);
    if (Value != (__int128 *)v5)
    {
      v6 = (__int128 *)v5;
      do
      {
        while (1)
        {
          v17 = *Value;
          CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v17);
          AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48), a1, AttrData, v9);
          if (!v10)
            break;
          v7 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v17);
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a1, v7, *((_QWORD *)&v17 + 1));
          if (++Value == v6)
            goto LABEL_11;
        }
        v11 = v17;
        v12 = v20;
        if (v20 >= (unint64_t)HIDWORD(v20))
        {
          v15 = v17;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
          v11 = v15;
          v12 = v20;
        }
        *((_OWORD *)v19 + v12) = v11;
        LODWORD(v20) = v20 + 1;
        ++Value;
      }
      while (Value != v6);
    }
LABEL_11:
    v13 = v20;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v18) != v13)
    {
      Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
      v18 = mlir::DictionaryAttr::get(Context, (mlir::MLIRContext *)v19, v20);
    }
    if (v19 != v21)
      free(v19);
    a2 = v18;
  }
  *(_QWORD *)(a1 + 56) = a2;
}

void mlir::Operation::~Operation(mlir::Operation *this)
{
  unsigned int v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  mlir::Region *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 11);
  if ((v2 & 0x800000) != 0)
  {
    mlir::detail::OperandStorage::~OperandStorage((mlir::Operation *)((char *)this + 64));
    v2 = *((_DWORD *)this + 11);
  }
  v3 = (char *)this + 64;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4)
  {
    v5 = (unint64_t)&v3[16 * ((v2 >> 23) & 1) + 7 + ((v2 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8;
    v6 = 32 * v4;
    v7 = (_QWORD **)(v5 + 8);
    do
    {
      if (*v7)
      {
        **v7 = *(v7 - 1);
        v8 = (uint64_t)*(v7 - 1);
        if (v8)
          *(_QWORD *)(v8 + 8) = *v7;
      }
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
    v2 = *((_DWORD *)this + 11);
  }
  if ((v2 & 0x7FFFFF) != 0)
  {
    v9 = (mlir::Region *)(((unint64_t)&v3[16 * ((v2 >> 23) & 1) + 7 + ((v2 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
                        + 32 * v4);
    v10 = 24 * (v2 & 0x7FFFFF);
    do
    {
      mlir::Region::~Region(v9);
      v9 = (mlir::Region *)(v11 + 24);
      v10 -= 24;
    }
    while (v10);
    v2 = *((_DWORD *)this + 11);
  }
  if (HIBYTE(v2))
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 6) + 128))(*((_QWORD *)this + 6), &v3[16 * ((v2 >> 23) & 1)]);
}

void mlir::Operation::destroy(mlir::Operation *this)
{
  uint64_t v2;
  unsigned int NumTrailing;
  char *v4;

  v2 = *((unsigned int *)this + 9);
  NumTrailing = mlir::OpResult::getNumTrailing((mlir::OpResult *)v2);
  v4 = (char *)this - 24 * NumTrailing - 16 * mlir::OpResult::getNumInline(v2);
  mlir::Operation::~Operation(this);
  free(v4);
}

mlir::Block *mlir::Operation::isProperAncestor(mlir::Operation *this, Operation *ParentOp)
{
  mlir::Block *result;

  do
  {
    result = (mlir::Block *)*((_QWORD *)ParentOp + 2);
    if (!result)
      break;
    ParentOp = (Operation *)mlir::Block::getParentOp(result);
    result = (mlir::Block *)(ParentOp != 0);
  }
  while (ParentOp != this && ParentOp != 0);
  return result;
}

uint64_t mlir::Operation::replaceUsesOfWith(uint64_t this, Value a2, Value a3)
{
  uint64_t v3;
  Value *v4;
  uint64_t v5;
  _QWORD *impl;
  uint64_t v7;

  if (a2.impl != a3.impl && (*(_BYTE *)(this + 46) & 0x80) != 0)
  {
    v3 = *(unsigned int *)(this + 68);
    if ((_DWORD)v3)
    {
      v4 = *(Value **)(this + 72);
      v5 = 32 * v3;
      do
      {
        if (v4[3].impl == a2.impl)
        {
          impl = v4[1].impl;
          if (impl)
          {
            *impl = v4->impl;
            if (v4->impl)
              *((Value *)v4->impl + 1) = v4[1];
          }
          v4[3].impl = a3.impl;
          v7 = *(_QWORD *)a3.impl;
          v4->impl = *(ValueImpl **)a3.impl;
          v4[1].impl = a3.impl;
          if (v7)
            *(_QWORD *)(v7 + 8) = v4;
          *(_QWORD *)a3.impl = v4;
        }
        v4 += 4;
        v5 -= 32;
      }
      while (v5);
    }
  }
  return this;
}

uint64_t *mlir::Operation::setOperands(uint64_t *result, uint64_t a2, unsigned int a3)
{
  if ((*((_BYTE *)result + 46) & 0x80) != 0)
    return mlir::detail::OperandStorage::setOperands((mlir::detail::OperandStorage *)(result + 8), (mlir::Operation *)result, a2, a3);
  return result;
}

mlir::Operation *mlir::Operation::setOperands(mlir::Operation *result, int a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  if ((*((_BYTE *)result + 46) & 0x80) != 0)
    return (mlir::Operation *)mlir::detail::OperandStorage::setOperands((uint64_t)result + 64, result, a2, a3, a4, a5);
  return result;
}

mlir::Operation *mlir::Operation::insertOperands(mlir::Operation *result, int a2, uint64_t a3, unsigned int a4)
{
  if ((*((_BYTE *)result + 46) & 0x80) != 0)
    return (mlir::Operation *)mlir::detail::OperandStorage::setOperands((uint64_t)result + 64, result, a2, 0, a3, a4);
  return result;
}

mlir::Diagnostic *mlir::Operation::emitError@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mlir::Attribute *v5;
  mlir::MLIRContext *Context;
  mlir::Diagnostic *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int128 v14;
  const mlir::OpPrintingFlags *v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  int v19;
  const char *v20;
  uint64_t v21;

  v5 = (mlir::Attribute *)(a1 + 3);
  mlir::emitError(a1[3], a2, a3);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext(v5);
  result = (mlir::Diagnostic *)mlir::MLIRContext::shouldPrintOpOnDiagnostic(Context);
  if ((_DWORD)result)
  {
    v8 = mlir::Diagnostic::attachNote((uint64_t *)(a3 + 8), *(_QWORD *)v5, 1);
    v9 = v8 + 16;
    v10 = *(_QWORD *)(v8 + 16);
    v19 = 3;
    v20 = "see current operation: ";
    v21 = 23;
    v11 = *(unsigned int *)(v8 + 24);
    v12 = &v19;
    if (v11 >= *(_DWORD *)(v8 + 28))
    {
      v16 = v11 + 1;
      v17 = v10 + 24 * v11 > (unint64_t)&v19;
      if (v10 <= (unint64_t)&v19 && v17)
      {
        v18 = (char *)&v19 - v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v8 + 32), v16, 24);
        v10 = *(_QWORD *)(v8 + 16);
        v12 = (int *)&v18[v10];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v8 + 32), v16, 24);
        v10 = *(_QWORD *)(v8 + 16);
        v12 = &v19;
      }
    }
    v13 = v10 + 24 * *(unsigned int *)(v8 + 24);
    v14 = *(_OWORD *)v12;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v13 = v14;
    ++*(_DWORD *)(v8 + 24);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v19);
    v15 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::printGenericOpForm((uint64_t)&v19, 1);
    return mlir::Diagnostic::appendOp((mlir::Diagnostic *)v8, (mlir::Operation *)a1, v15);
  }
  return result;
}

unint64_t mlir::Operation::getAttrDictionary(mlir::Operation *this)
{
  unint64_t Dictionary;
  mlir::MLIRContext *Context;
  void *v5[2];
  _QWORD v6[10];

  v6[9] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 47))
    return *((_QWORD *)this + 7);
  mlir::NamedAttrList::NamedAttrList(v5, *((_QWORD *)this + 7));
  (*(void (**)(_QWORD, mlir::Operation *, void **))(**((_QWORD **)this + 6) + 96))(*((_QWORD *)this + 6), this, v5);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)this + 24));
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v5, Context);
  if (v5[0] != v6)
    free(v5[0]);
  return Dictionary;
}

uint64_t mlir::Operation::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48), a1, a2, a3);
}

uint64_t mlir::Operation::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a1, a2, a3);
}

void mlir::Operation::setAttrs(uint64_t a1, mlir::MLIRContext *a2, unint64_t a3)
{
  mlir::DictionaryAttr *Context;
  uint64_t v7;
  uint64_t v8;
  uint64_t AttrData;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  mlir::DictionaryAttr *v14;
  __int128 v15;
  uint64_t CallableRegion;
  __int128 v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[7];

  v20[6] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 47))
  {
    Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
    *(_QWORD *)(a1 + 56) = mlir::DictionaryAttr::get(Context, a2, a3);
    return;
  }
  v18 = v20;
  v19 = 0x300000000;
  if (a3 >= 4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, a3, 16);
    goto LABEL_6;
  }
  if (a3)
  {
LABEL_6:
    v7 = 16 * a3;
    do
    {
      while (1)
      {
        v17 = *(_OWORD *)a2;
        CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v17);
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48), a1, AttrData, v10);
        if (!v11)
          break;
        v8 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v17);
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a1, v8, *((_QWORD *)&v17 + 1));
        a2 = (mlir::MLIRContext *)((char *)a2 + 16);
        v7 -= 16;
        if (!v7)
          goto LABEL_12;
      }
      v12 = v17;
      v13 = v19;
      if (v19 >= (unint64_t)HIDWORD(v19))
      {
        v15 = v17;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v19 + 1, 16);
        v12 = v15;
        v13 = v19;
      }
      *((_OWORD *)v18 + v13) = v12;
      LODWORD(v19) = v19 + 1;
      a2 = (mlir::MLIRContext *)((char *)a2 + 16);
      v7 -= 16;
    }
    while (v7);
  }
LABEL_12:
  v14 = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  *(_QWORD *)(a1 + 56) = mlir::DictionaryAttr::get(v14, (mlir::MLIRContext *)v18, v19);
  if (v18 != v20)
    free(v18);
}

uint64_t mlir::Operation::getPropertiesAsAttribute(mlir::Operation *this)
{
  void **v2;

  v2 = (void **)*((_QWORD *)this + 6);
  if (v2[2] == &mlir::detail::TypeIDResolver<void,void>::id)
    return *((_QWORD *)this + 2 * (((unint64_t)*((unsigned int *)this + 11) >> 23) & 1) + 8);
  else
    return (*((uint64_t (**)(void **, mlir::Operation *))*v2 + 19))(v2, this);
}

uint64_t mlir::Operation::hashProperties(mlir::Operation *this)
{
  char *v1;

  if (HIBYTE(*((_DWORD *)this + 11)))
    v1 = (char *)this + 16 * (((unint64_t)*((unsigned int *)this + 11) >> 23) & 1) + 64;
  else
    v1 = 0;
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 6) + 176))(*((_QWORD *)this + 6), v1);
}

BOOL mlir::Operation::isBeforeInBlock(mlir::Block **this, mlir::Operation *a2)
{
  if ((mlir::Block::isOpOrderValid(this[2]) & 1) != 0)
  {
    mlir::Operation::updateOrderIfNecessary((mlir::Operation *)this);
    mlir::Operation::updateOrderIfNecessary(a2);
  }
  else
  {
    mlir::Block::recomputeOpOrder(this[2]);
  }
  return *((_DWORD *)this + 8) < *((_DWORD *)a2 + 8);
}

void mlir::Operation::updateOrderIfNecessary(mlir::Operation *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;

  if (*((_DWORD *)this + 8) == -1)
  {
    v1 = *((_QWORD *)this + 2);
    v2 = v1 + 32;
    if (*(mlir::Operation **)(v1 + 32) == this)
    {
      if (*(mlir::Operation **)(v1 + 40) == this)
        v6 = 0;
      else
        v6 = *(_QWORD *)this;
      v7 = *(_DWORD *)(v6 + 32);
      if (v7 != -1)
      {
        *((_DWORD *)this + 8) = v7 + 5;
        return;
      }
      goto LABEL_21;
    }
    if (*(mlir::Operation **)(v1 + 40) != this)
    {
      v3 = *(_DWORD *)(*(_QWORD *)this + 32);
      if (v3 != -1)
      {
        v4 = *((_QWORD *)this + 1) == v2 ? 0 : *((_QWORD *)this + 1);
        v5 = *(_DWORD *)(v4 + 32);
        if (v5 != -1 && v3 + 1 != v5)
        {
          *((_DWORD *)this + 8) = v3 + ((v5 - v3) >> 1);
          return;
        }
      }
      goto LABEL_21;
    }
    if (*((_QWORD *)this + 1) == v2)
      v8 = 0;
    else
      v8 = *((_QWORD *)this + 1);
    v9 = *(_DWORD *)(v8 + 32);
    if (!v9 || v9 == -1)
    {
LABEL_21:
      mlir::Block::recomputeOpOrder(*((mlir::Block **)this + 2));
      return;
    }
    if (v9 > 5)
      *((_DWORD *)this + 8) = 5;
    else
      *((_DWORD *)this + 8) = v9 >> 1;
  }
}

uint64_t llvm::ilist_traits<mlir::Operation>::addNodeToList(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = result - 32;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void llvm::ilist_traits<mlir::Operation>::removeNodeFromList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = 0;
}

uint64_t llvm::ilist_traits<mlir::Operation>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = a1 - 32;
  result = mlir::Block::invalidateOpOrder(a1 - 32);
  if (a1 != a2 && a3 != a4)
  {
    do
    {
      *(_QWORD *)(a3 + 16) = v8;
      a3 = *(_QWORD *)(a3 + 8);
    }
    while (a3 != a4);
  }
  return result;
}

void mlir::Operation::erase(mlir::Operation *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int NumTrailing;
  char *v6;

  if (*((_QWORD *)this + 2))
  {
    *((_QWORD *)this + 2) = 0;
    v3 = *(_QWORD *)this;
    v2 = (_QWORD *)*((_QWORD *)this + 1);
    *v2 = *(_QWORD *)this;
    *(_QWORD *)(v3 + 8) = v2;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  v4 = *((unsigned int *)this + 9);
  NumTrailing = mlir::OpResult::getNumTrailing((mlir::OpResult *)v4);
  v6 = (char *)this - 24 * NumTrailing - 16 * mlir::OpResult::getNumInline(v4);
  mlir::Operation::~Operation(this);
  free(v6);
}

uint64_t *mlir::Operation::remove(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;

  if (this[2])
  {
    this[2] = 0;
    v2 = *this;
    v1 = (uint64_t *)this[1];
    *v1 = *this;
    *(_QWORD *)(v2 + 8) = v1;
    *this = 0;
    this[1] = 0;
  }
  return this;
}

mlir::Operation *mlir::Operation::moveBefore(mlir::Operation *this, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  uint64_t v5;
  uint64_t v6;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 != this)
  {
    v3 = this;
    v4 = (mlir::Operation *)*((_QWORD *)this + 1);
    if (v4 != a2)
    {
      v5 = *((_QWORD *)a2 + 2);
      v6 = *((_QWORD *)this + 2);
      this = (mlir::Operation *)mlir::Block::invalidateOpOrder(v5);
      if (v6 != v5 && v4 != v3)
      {
        v8 = v3;
        do
        {
          *((_QWORD *)v8 + 2) = v5;
          v8 = (mlir::Operation *)*((_QWORD *)v8 + 1);
        }
        while (v8 != v4);
      }
      if (v4 != v3)
      {
        v9 = *(_QWORD *)v4;
        v10 = *(_QWORD *)v3;
        *(_QWORD *)(v10 + 8) = v4;
        *(_QWORD *)v4 = v10;
        v11 = *(_QWORD *)a2;
        *(_QWORD *)(v9 + 8) = a2;
        *(_QWORD *)v3 = v11;
        *(_QWORD *)(v11 + 8) = v3;
        *(_QWORD *)a2 = v9;
      }
    }
  }
  return this;
}

uint64_t mlir::Operation::moveBefore(uint64_t result, mlir::Block *this, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  mlir::Block *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 != (uint64_t *)result)
  {
    v4 = (uint64_t *)result;
    v5 = *(uint64_t **)(result + 8);
    if (v5 != a3)
    {
      v7 = *(mlir::Block **)(result + 16);
      result = mlir::Block::invalidateOpOrder((uint64_t)this);
      if (v7 != this && v5 != v4)
      {
        v9 = v4;
        do
        {
          v9[2] = (uint64_t)this;
          v9 = (uint64_t *)v9[1];
        }
        while (v9 != v5);
      }
      if (v5 != v4)
      {
        v10 = *v5;
        v11 = *v4;
        *(_QWORD *)(v11 + 8) = v5;
        *v5 = v11;
        v12 = *a3;
        *(_QWORD *)(v10 + 8) = a3;
        *v4 = v12;
        *(_QWORD *)(v12 + 8) = v4;
        *a3 = v10;
      }
    }
  }
  return result;
}

uint64_t *mlir::Operation::moveAfter(uint64_t *this, mlir::Operation *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (uint64_t *)*((_QWORD *)a2 + 1);
  v3 = (uint64_t *)this[1];
  if (v2 != this && v3 != v2)
  {
    v5 = this;
    v6 = *((_QWORD *)a2 + 2);
    v7 = this[2];
    this = (uint64_t *)mlir::Block::invalidateOpOrder(v6);
    if (v7 != v6 && v3 != v5)
    {
      v9 = v5;
      do
      {
        v9[2] = v6;
        v9 = (uint64_t *)v9[1];
      }
      while (v9 != v3);
    }
    if (v3 != v5)
    {
      v10 = *v3;
      v11 = *v5;
      *(_QWORD *)(v11 + 8) = v3;
      *v3 = v11;
      v12 = *v2;
      *(_QWORD *)(v10 + 8) = v2;
      *v5 = v12;
      *(_QWORD *)(v12 + 8) = v5;
      *v2 = v10;
    }
  }
  return this;
}

uint64_t mlir::Operation::dropAllReferences(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  mlir::Region *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = this;
  v2 = *(_DWORD *)(this + 44);
  if ((v2 & 0x800000) != 0)
  {
    v3 = *(unsigned int *)(this + 68);
    if ((_DWORD)v3)
    {
      v4 = *(_QWORD **)(this + 72);
      v5 = 32 * v3;
      do
      {
        v6 = (_QWORD *)v4[1];
        if (v6)
        {
          *v6 = *v4;
          if (*v4)
            *(_QWORD *)(*v4 + 8) = v4[1];
        }
        *v4 = 0;
        v4[1] = 0;
        v4[3] = 0;
        v4 += 4;
        v5 -= 32;
      }
      while (v5);
      v2 = *(_DWORD *)(this + 44);
    }
  }
  if ((v2 & 0x7FFFFF) != 0)
  {
    v7 = (mlir::Region *)(((this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(this + 40));
    v8 = 24 * (v2 & 0x7FFFFF);
    do
    {
      this = mlir::Region::dropAllReferences(v7);
      v7 = (mlir::Region *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
    v2 = *(_DWORD *)(v1 + 44);
  }
  v9 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v9)
  {
    v10 = (_QWORD *)((v1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8);
    v11 = 32 * v9;
    do
    {
      v12 = (_QWORD *)v10[1];
      if (v12)
      {
        *v12 = *v10;
        if (*v10)
          *(_QWORD *)(*v10 + 8) = v10[1];
      }
      *v10 = 0;
      v10[1] = 0;
      v10[3] = 0;
      v10 += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return this;
}

uint64_t mlir::Operation::dropAllDefinedValueUses(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t j;
  mlir::Block *v11;

  v1 = this;
  v2 = *(unsigned int *)(this + 36);
  if ((_DWORD)v2)
    v3 = this - 16;
  else
    v3 = 0;
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
    {
      this = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, i);
      while (1)
      {
        v5 = *(_QWORD **)this;
        if (!*(_QWORD *)this)
          break;
        v6 = (_QWORD *)v5[1];
        if (v6)
        {
          *v6 = *v5;
          if (*v5)
            *(_QWORD *)(*v5 + 8) = v5[1];
        }
        *v5 = 0;
        v5[1] = 0;
        v5[3] = 0;
      }
    }
  }
  v7 = *(unsigned int *)(v1 + 44);
  if ((v7 & 0x7FFFFF) != 0)
  {
    v8 = ((v1 + 16 * ((v7 >> 23) & 1) + ((v7 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(v1 + 40);
    v9 = v8 + 24 * (v7 & 0x7FFFFF);
    j = *(_QWORD *)(v8 + 8);
    if (j != v8)
      goto LABEL_17;
    while (1)
    {
      v8 += 24;
      if (v8 == v9)
        break;
      for (j = *(_QWORD *)(v8 + 8); j != v8; j = *(_QWORD *)(j + 8))
      {
LABEL_17:
        if (j)
          v11 = (mlir::Block *)(j - 8);
        else
          v11 = 0;
        this = mlir::Block::dropAllDefinedValueUses(v11);
      }
    }
  }
  return this;
}

void mlir::Operation::setSuccessor(mlir::Operation *this, mlir::Block *a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = (uint64_t *)((((unint64_t)this
                   + 16 * (((unint64_t)*((unsigned int *)this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * a3);
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    *v4 = *v3;
    if (*v3)
      *(_QWORD *)(*v3 + 8) = v3[1];
  }
  v3[3] = (uint64_t)a2;
  mlir::GenericProgramPoint::~GenericProgramPoint(a2);
  v6 = *v5;
  *v3 = *v5;
  v3[1] = (uint64_t)v5;
  if (v6)
    *(_QWORD *)(v6 + 8) = v3;
  *v5 = (uint64_t)v3;
}

uint64_t mlir::Operation::fold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t Values;
  uint64_t v11;

  if ((*(unsigned __int8 (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a1, a2, a3, a4))
  {
    return 1;
  }
  v9 = *(_QWORD *)(a1 + 48);
  if (*(_UNKNOWN **)(v9 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    Values = *(_QWORD *)(v9 + 24);
    if (Values)
      goto LABEL_6;
    return 0;
  }
  v11 = *(_QWORD *)(v9 + 8);
  Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v11);
  if (!Values)
    return 0;
LABEL_6:
  result = mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values);
  if (result)
  {
    result = mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a1, a2, a3, a4);
  }
  return result;
}

uint64_t mlir::Operation::fold(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DefiningOp;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Values;
  uint64_t v16;
  unint64_t *v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  int v22;
  _QWORD v23[7];

  v23[6] = *MEMORY[0x1E0C80C00];
  v20 = v23;
  v22 = 6;
  if ((*(_BYTE *)(a1 + 46) & 0x80) == 0)
  {
    v4 = 0;
    v21 = 0;
    goto LABEL_14;
  }
  v4 = *(unsigned int *)(a1 + 68);
  if (v4 > 6)
  {
    v21 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v23, v4, 8);
    bzero(v20, 8 * v4);
    v5 = *(_DWORD *)(a1 + 44);
    v21 = v4;
    if ((v5 & 0x800000) == 0)
      goto LABEL_14;
    v6 = *(unsigned int *)(a1 + 68);
    if (!(_DWORD)v6)
      goto LABEL_14;
    goto LABEL_9;
  }
  if ((_DWORD)v4)
    bzero(v23, 8 * v4);
  v21 = v4;
  v6 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v6)
  {
LABEL_9:
    v7 = 0;
    v8 = 8 * v6;
    v9 = 24;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + v9);
      v18 = (unint64_t *)((char *)v20 + v7);
      v19 = v10;
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v19);
      if (DefiningOp)
        mlir::detail::constant_op_binder<mlir::Attribute>::match(&v18, DefiningOp);
      v9 += 32;
      v7 += 8;
    }
    while (v8 != v7);
    v4 = v21;
  }
LABEL_14:
  v12 = v20;
  if ((*(unsigned __int8 (**)(_QWORD, uint64_t, void *, unint64_t, uint64_t))(**(_QWORD **)(a1 + 48)
                                                                                             + 16))(*(_QWORD *)(a1 + 48), a1, v20, v4, a2))
  {
    v13 = 1;
    goto LABEL_24;
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (*(_UNKNOWN **)(v14 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v19 = *(_QWORD *)(v14 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v19);
    if (!Values)
      goto LABEL_23;
  }
  else
  {
    Values = *(_QWORD *)(v14 + 24);
    if (!Values)
      goto LABEL_23;
  }
  if (mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values))
  {
    v16 = mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values);
    if (v16)
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a1, v12, v4, a2);
      goto LABEL_24;
    }
  }
LABEL_23:
  v13 = 0;
LABEL_24:
  if (v20 != v23)
    free(v20);
  return v13;
}

void mlir::Operation::emitOpError(uint64_t *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  char v39[32];
  __int16 v40;
  int v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *__src;
  unsigned int v48;
  unsigned int v49;
  _BYTE v50[96];
  void *v51[2];
  uint64_t v52;
  void *__p[2];
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v40 = 257;
  mlir::Operation::emitError(a1, (uint64_t)v39, (uint64_t)&v44);
  v6 = v44;
  if (v44)
  {
    v41 = 3;
    v42 = "'";
    v43 = 1;
    v7 = &v41;
    v8 = (char *)__src;
    if (v48 >= v49)
    {
      v35 = v48 + 1;
      if (__src <= &v41 && (char *)__src + 24 * v48 > (char *)&v41)
      {
        v37 = (char *)&v41 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v35, 24);
        v8 = (char *)__src;
        v7 = (int *)((char *)__src + v37);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v35, 24);
        v7 = &v41;
        v8 = (char *)__src;
      }
    }
    v9 = &v8[24 * v48];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    ++v48;
    v6 = v44;
    if (v44)
    {
      mlir::Diagnostic::operator<<((uint64_t)&v45, a1[6]);
      v6 = v44;
      if (v44)
      {
        v41 = 3;
        v42 = "' op ";
        v43 = 5;
        v11 = &v41;
        v12 = (char *)__src;
        if (v48 >= v49)
        {
          v36 = v48 + 1;
          if (__src <= &v41 && (char *)__src + 24 * v48 > (char *)&v41)
          {
            v38 = (char *)&v41 - (_BYTE *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v36, 24);
            v12 = (char *)__src;
            v11 = (int *)((char *)__src + v38);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v36, 24);
            v11 = &v41;
            v12 = (char *)__src;
          }
        }
        v13 = &v12[24 * v48];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
        *(_OWORD *)v13 = v14;
        ++v48;
        v6 = v44;
        if (v44)
        {
          mlir::Diagnostic::operator<<((uint64_t)&v45, a2);
          v6 = v44;
        }
      }
    }
  }
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 184) = 0;
  if (v55)
  {
    *(_QWORD *)(a3 + 8) = v45;
    v15 = v48;
    *(_DWORD *)(a3 + 16) = v46;
    *(_QWORD *)(a3 + 24) = a3 + 40;
    *(_QWORD *)(a3 + 32) = 0x400000000;
    if (!(_DWORD)v15 || &v44 == (uint64_t *)a3)
    {
      v17 = 1;
      goto LABEL_21;
    }
    if (__src != v50)
    {
      *(_QWORD *)(a3 + 24) = __src;
      v16 = v49;
      *(_DWORD *)(a3 + 32) = v15;
      *(_DWORD *)(a3 + 36) = v16;
      __src = v50;
      v49 = 0;
      v17 = 1;
LABEL_20:
      v48 = 0;
LABEL_21:
      *(_OWORD *)(a3 + 136) = *(_OWORD *)v51;
      *(_QWORD *)(a3 + 152) = v52;
      v51[0] = 0;
      v51[1] = 0;
      *(_OWORD *)(a3 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 176) = v54;
      v52 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v54 = 0;
      *(_BYTE *)(a3 + 184) = 1;
      if (v17)
      {
        v19 = (_QWORD **)__p[0];
        if (__p[0])
        {
          v20 = (_QWORD **)__p[1];
          v21 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
            while (v20 != v19);
            v21 = __p[0];
          }
          __p[1] = v19;
          operator delete(v21);
        }
        v22 = v51[0];
        if (v51[0])
        {
          v23 = v51[1];
          v24 = v51[0];
          if (v51[1] != v51[0])
          {
            do
            {
              v26 = (void *)*--v23;
              v25 = v26;
              *v23 = 0;
              if (v26)
                operator delete[](v25);
            }
            while (v23 != v22);
            v24 = v51[0];
          }
          v51[1] = v22;
          operator delete(v24);
        }
        if (__src != v50)
          free(__src);
        v55 = 0;
      }
      goto LABEL_38;
    }
    if (v15 < 5)
    {
      v18 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, (void *)(a3 + 40), v15, 24);
      v18 = v48;
      if (!v48)
        goto LABEL_19;
    }
    memcpy(*(void **)(a3 + 24), __src, 24 * v18);
LABEL_19:
    *(_DWORD *)(a3 + 32) = v15;
    v17 = v55;
    goto LABEL_20;
  }
LABEL_38:
  mlir::InFlightDiagnostic::abandon(&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v55)
  {
    v27 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v28 = (_QWORD **)__p[1];
      v29 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = __p[0];
      }
      __p[1] = v27;
      operator delete(v29);
    }
    v30 = v51[0];
    if (v51[0])
    {
      v31 = v51[1];
      v32 = v51[0];
      if (v51[1] != v51[0])
      {
        do
        {
          v34 = (void *)*--v31;
          v33 = v34;
          *v31 = 0;
          if (v34)
            operator delete[](v33);
        }
        while (v31 != v30);
        v32 = v51[0];
      }
      v51[1] = v30;
      operator delete(v32);
    }
    if (__src != v50)
      free(__src);
  }
}

uint64_t mlir::Operation::CloneOptions::all(mlir::Operation::CloneOptions *this)
{
  return 3;
}

_BYTE *mlir::Operation::CloneOptions::cloneRegions(_BYTE *this, char a2)
{
  *this = *this & 0xFE | a2;
  return this;
}

_BYTE *mlir::Operation::CloneOptions::cloneOperands(_BYTE *this, int a2)
{
  char v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *this = *this & 0xFD | v2;
  return this;
}

unsigned int *mlir::Operation::clone(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t NextResultAtOffset;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  char v42;
  _QWORD *v43;
  char v44;
  _QWORD *v45;
  char v46;
  _QWORD *v47;
  char v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  unint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  char v56;
  _QWORD *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63[2];
  unint64_t v64[2];
  unint64_t v65[2];
  void *v66;
  uint64_t v67;
  _BYTE v68[16];
  void *v69;
  uint64_t v70;
  _BYTE v71[64];
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v69 = v71;
  v70 = 0x800000000;
  v66 = v68;
  v67 = 0x200000000;
  if ((a3 & 2) != 0 && (*(_BYTE *)(a1 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a1 + 68);
    if (v5 < 9
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v5, 8), (*(_BYTE *)(a1 + 46) & 0x80) != 0))
    {
      v6 = *(unsigned int *)(a1 + 68);
      if ((_DWORD)v6)
      {
        v7 = (unint64_t *)(*(_QWORD *)(a1 + 72) + 24);
        do
        {
          v8 = *v7;
          v62 = *v7;
          v72 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72)&& v72 != (_QWORD *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16)))
          {
            v8 = v72[1];
          }
          v9 = v70;
          if (v70 >= (unint64_t)HIDWORD(v70))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
            v9 = v70;
          }
          *((_QWORD *)v69 + v9) = v8;
          LODWORD(v70) = v70 + 1;
          v7 += 4;
          --v6;
        }
        while (v6);
      }
    }
  }
  v10 = *(unsigned int *)(a1 + 40);
  if (HIDWORD(v67) < v10)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v10, 8);
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&v72, (Operation *)a1);
  v11 = v73;
  if (v73)
  {
    v12 = 0;
    v13 = v72;
    while (1)
    {
      v14 = v13[4 * v12 + 3];
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *(unsigned int *)(a2 + 40);
      if (!(_DWORD)v16)
        goto LABEL_23;
      LODWORD(v17) = ((v14 >> 4) ^ (v14 >> 9)) & (v16 - 1);
      v18 = (uint64_t *)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 != v14)
        break;
LABEL_24:
      if (v18 != (uint64_t *)(v15 + 16 * v16))
        v14 = v18[1];
      v22 = v67;
      if (v67 >= (unint64_t)HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
        v22 = v67;
      }
      *((_QWORD *)v66 + v22) = v14;
      LODWORD(v67) = v67 + 1;
      if (++v12 == v11)
        goto LABEL_29;
    }
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(_QWORD *)(v15 + 16 * v17);
      if (v19 == v14)
      {
        v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_24;
      }
    }
LABEL_23:
    v18 = (uint64_t *)(v15 + 16 * v16);
    goto LABEL_24;
  }
LABEL_29:
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 48);
  v25 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v25)
    v26 = (_QWORD *)(a1 - 16);
  else
    v26 = 0;
  v72 = v26;
  v73 = v25;
  mlir::OperandRange::getTypes((uint64_t *)&v72, &v59);
  NextResultAtOffset = v59;
  v28 = v60;
  v29 = v61;
  if (v60)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v59, v60);
  mlir::ValueRange::ValueRange((unint64_t *)&v72, NextResultAtOffset, v29 - v28);
  mlir::TypeRange::TypeRange(v65, (uint64_t)v72, v73);
  mlir::ValueRange::ValueRange(v64, (uint64_t)v69, v70);
  v30 = *(_QWORD *)(a1 + 56);
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v31 = a1 + 64 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1);
  else
    v31 = 0;
  mlir::BlockRange::BlockRange(v63, (uint64_t)v66, v67);
  v32 = (unsigned int *)mlir::Operation::create(v23, v24, v65[0], (mlir::OpResult *)v65[1], v64[0], v64[1], v30, v31, v63[0], v63[1], *(_DWORD *)(a1 + 44) & 0x7FFFFF);
  mlir::IRMapping::map((mlir::IRMapping *)a2, (mlir::Operation *)a1, (mlir::Operation *)v32);
  if ((v58 & 1) != 0)
  {
    v33 = *(_DWORD *)(a1 + 44);
    if ((v33 & 0x7FFFFF) != 0)
    {
      v34 = 0;
      v35 = 1;
      do
      {
        if (v35)
        {
          v37 = ((a1 + 64 + 16 * ((v33 >> 23) & 1) + ((v33 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *(unsigned int *)(a1 + 40);
          v38 = v32[11];
          if ((v38 & 0x7FFFFF) == 0)
            goto LABEL_46;
        }
        else
        {
          v37 = 0;
          v38 = v32[11];
          if ((v38 & 0x7FFFFF) == 0)
          {
LABEL_46:
            v36 = 0;
            goto LABEL_41;
          }
        }
        v36 = (((unint64_t)&v32[4 * ((v38 >> 23) & 1) + 17] + ((v38 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
            + 32 * v32[10];
LABEL_41:
        mlir::Region::cloneInto((mlir::Region *)(v37 + 24 * v34), (mlir::Region *)(v36 + 24 * v34), (mlir::IRMapping *)a2);
        ++v34;
        v33 = *(_DWORD *)(a1 + 44);
        v35 = v33 & 0x7FFFFF;
      }
      while (v34 != (v33 & 0x7FFFFF));
    }
  }
  v39 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v39)
  {
    v62 = a1 - 16;
    v72 = 0;
    v40 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
    v41 = v72;
    if ((v40 & 1) == 0)
    {
      v41 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
      *v41 = v62;
      v41[1] = 0;
    }
    v41[1] = v32 - 4;
    if ((_DWORD)v39 != 1)
    {
      v62 = a1 - 32;
      v72 = 0;
      v42 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
      v43 = v72;
      if ((v42 & 1) == 0)
      {
        v43 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
        *v43 = v62;
        v43[1] = 0;
      }
      v43[1] = v32 - 8;
      if ((_DWORD)v39 != 2)
      {
        v62 = a1 - 48;
        v72 = 0;
        v44 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
        v45 = v72;
        if ((v44 & 1) == 0)
        {
          v45 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
          *v45 = v62;
          v45[1] = 0;
        }
        v45[1] = v32 - 12;
        if ((_DWORD)v39 != 3)
        {
          v62 = a1 - 64;
          v72 = 0;
          v46 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
          v47 = v72;
          if ((v46 & 1) == 0)
          {
            v47 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
            *v47 = v62;
            v47[1] = 0;
          }
          v47[1] = v32 - 16;
          if ((_DWORD)v39 != 4)
          {
            v62 = a1 - 80;
            v72 = 0;
            v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
            v49 = v72;
            if ((v48 & 1) == 0)
            {
              v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
              *v49 = v62;
              v49[1] = 0;
            }
            v49[1] = v32 - 20;
            if ((_DWORD)v39 != 5)
            {
              v62 = a1 - 96;
              v72 = 0;
              v50 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
              v51 = v72;
              if ((v50 & 1) == 0)
              {
                v51 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
                *v51 = v62;
                v51[1] = 0;
              }
              v51[1] = v32 - 24;
              if ((_DWORD)v39 != 6)
              {
                v53 = a1 - 120;
                v54 = v32 - 30;
                v55 = v39 - 6;
                do
                {
                  v62 = v53;
                  v72 = 0;
                  v56 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
                  v57 = v72;
                  if ((v56 & 1) == 0)
                  {
                    v57 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
                    *v57 = v62;
                    v57[1] = 0;
                  }
                  v57[1] = v54;
                  v53 -= 24;
                  v54 -= 6;
                  --v55;
                }
                while (v55);
              }
            }
          }
        }
      }
    }
  }
  if (v66 != v68)
    free(v66);
  if (v69 != v71)
    free(v69);
  return v32;
}

void mlir::Operation::cloneWithoutRegions(mlir::Operation *this)
{
  _QWORD v1[2];
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  unsigned int v8;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  mlir::Operation::clone((uint64_t)this, (uint64_t)v1, 2);
  llvm::deallocate_buffer(v6, (void *)(16 * v8));
}

void sub_18042FE04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm *a13, uint64_t a14, unsigned int a15)
{
  llvm::deallocate_buffer(a13, (void *)(16 * a15));
}

void sub_18042FE18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
  llvm::deallocate_buffer(a10, (void *)(16 * a12));
}

uint64_t sub_18042FE2C()
{
  uint64_t v0;

  return v0;
}

_QWORD *mlir::IRMapping::map(mlir::IRMapping *this, mlir::Operation *a2, mlir::Operation *a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  mlir::Operation **v12;
  mlir::Operation *v13;
  mlir::Operation *v14;
  mlir::Operation **v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  mlir::Operation *v23;
  mlir::Operation **v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v8 = *((_QWORD *)this + 6);
  result = (_QWORD *)((char *)this + 48);
  v7 = v8;
  v9 = *((_DWORD *)result + 4);
  if (!v9)
    goto LABEL_21;
  v10 = v9 - 1;
  v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (mlir::Operation **)(v7 + 16 * v11);
  v13 = *v12;
  if (*v12 == a2)
  {
LABEL_3:
    v12[1] = a3;
    return result;
  }
  v15 = 0;
  v16 = 1;
  while (v13 != (mlir::Operation *)-4096)
  {
    if (v15)
      v17 = 0;
    else
      v17 = v13 == (mlir::Operation *)-8192;
    if (v17)
      v15 = v12;
    v18 = v11 + v16++;
    v11 = v18 & v10;
    v12 = (mlir::Operation **)(v7 + 16 * (v18 & v10));
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_3;
  }
  if (v15)
    v12 = v15;
  v19 = *((_DWORD *)this + 14);
  if (4 * v19 + 4 < 3 * v9)
  {
    if (v9 + ~v19 - *((_DWORD *)this + 15) > v9 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v9 *= 2;
  }
  result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)result, v9);
  v20 = *((_QWORD *)this + 6);
  v21 = *((_DWORD *)this + 16) - 1;
  v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (mlir::Operation **)(v20 + 16 * v22);
  v23 = *v12;
  if (*v12 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 14);
    if (a2 == (mlir::Operation *)-4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v24 = 0;
  v25 = 1;
  while (v23 != (mlir::Operation *)-4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == (mlir::Operation *)-8192;
    if (v26)
      v24 = v12;
    v27 = v22 + v25++;
    v22 = v27 & v21;
    v12 = (mlir::Operation **)(v20 + 16 * (v27 & v21));
    v23 = *v12;
    if (*v12 == a2)
      goto LABEL_23;
  }
  if (v24)
    v12 = v24;
LABEL_6:
  v14 = *v12;
  ++*((_DWORD *)this + 14);
  if (v14 != (mlir::Operation *)-4096)
LABEL_7:
    --*((_DWORD *)this + 15);
LABEL_8:
  *v12 = a2;
  v12[1] = 0;
  v12[1] = a3;
  return result;
}

void mlir::Operation::clone(uint64_t a1, char a2)
{
  _QWORD v2[2];
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm *v7;
  uint64_t v8;
  unsigned int v9;

  v2[0] = 0;
  v2[1] = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  mlir::Operation::clone(a1, (uint64_t)v2, a2);
  llvm::deallocate_buffer(v7, (void *)(16 * v9));
}

void sub_180430050(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm *a13, uint64_t a14, unsigned int a15)
{
  llvm::deallocate_buffer(a13, (void *)(16 * a15));
}

void sub_180430064(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
  llvm::deallocate_buffer(a10, (void *)(16 * a12));
}

uint64_t sub_180430078()
{
  uint64_t v0;

  return v0;
}

uint64_t mlir::OpState::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Values;
  uint64_t AttrData;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[2];
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_UNKNOWN **)(v4 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v19[0] = *(_QWORD *)(v4 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v19);
    v4 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    Values = *(_QWORD *)(v4 + 24);
  }
  v19[0] = *(_QWORD *)(v4 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v19);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)Values + 64))(v21, Values, AttrData, v7);
  if (v22)
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v21[0])(v21[1], a1, a2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v19[0] = "has no custom assembly form";
  v20 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v21, a1, v10, v19);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  if (v29)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v28;
      v13 = __p;
      if (v28 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v28 = v11;
      operator delete(v13);
    }
    v14 = v25;
    if (v25)
    {
      v15 = v26;
      v16 = v25;
      if (v26 != v25)
      {
        do
        {
          v18 = (void *)*--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            operator delete[](v17);
        }
        while (v15 != v14);
        v16 = v25;
      }
      v26 = v14;
      operator delete(v16);
    }
    if (v23 != &v24)
      free(v23);
  }
  return v8;
}

uint64_t mlir::OpState::print(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t Values;
  llvm **v10;
  uint64_t result;
  unint64_t v12;
  llvm **v13;
  llvm *v14[2];
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 48);
  if (*(_UNKNOWN **)(v8 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v14[0] = *(llvm **)(v8 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v14);
  }
  else
  {
    Values = *(_QWORD *)(v8 + 24);
  }
  (*(void (**)(llvm **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)Values + 72))(v14, Values, a1);
  if (v15 < 8)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, a1, 1);
    v12 = v15;
    if (v15 < 8)
      return result;
  }
  else
  {
    mlir::OpState::printOpName(a1, a2, a3, a4);
    if ((v15 & 2) != 0)
      v10 = v14;
    else
      v10 = (llvm **)v14[0];
    result = (*(uint64_t (**)(llvm **, uint64_t, uint64_t))(v15 & 0xFFFFFFFFFFFFFFF8))(v10, a1, a2);
    v12 = v15;
    if (v15 < 8)
      return result;
  }
  if ((v12 & 4) != 0)
  {
    if ((v12 & 2) != 0)
      v13 = v14;
    else
      v13 = (llvm **)v14[0];
    result = (*(uint64_t (**)(llvm **))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))(v13);
  }
  if ((v12 & 2) == 0)
    llvm::deallocate_buffer(v14[0], v14[1]);
  return result;
}

llvm::raw_ostream *mlir::OpState::printOpName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x16_t *AttrData;
  size_t v8;
  size_t v9;
  int v10;
  void *v11;
  std::string *v12;
  size_t size;
  unint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int64x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int64x2_t v20;
  int8x16_t *v21;
  int64x2_t v22;
  unint64_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  uint8x16_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint32x4_t v40;
  int8x16_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  int8x16_t v44;
  uint32x4_t v45;
  int64x2_t v46;
  int64x2_t v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  unint64_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int8x8_t *v58;
  unint64_t v59;
  int8x16_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int8x8_t v63;
  uint16x8_t v64;
  uint32x4_t v65;
  int8x16_t v66;
  int64x2_t v67;
  int64x2_t v68;
  uint32x4_t v69;
  int64x2_t v70;
  size_t v71;
  unsigned __int8 *v72;
  int v73;
  size_t v74;
  int8x16_t *v75;
  size_t v76;
  llvm::raw_ostream *v77;
  llvm::raw_ostream *result;
  _QWORD v79[4];
  __int16 v80;
  std::string v81;

  v79[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v79);
  v9 = v8;
  v80 = 773;
  v79[0] = a3;
  v79[1] = a4;
  v79[2] = ".";
  llvm::Twine::str((llvm::Twine *)v79, &v81);
  v10 = SHIBYTE(v81.__r_.__value_.__r.__words[2]);
  v11 = (void *)v81.__r_.__value_.__r.__words[0];
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v81;
  else
    v12 = (std::string *)v81.__r_.__value_.__r.__words[0];
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  else
    size = v81.__r_.__value_.__l.__size_;
  if (v9 < size || size && memcmp(AttrData, v12, size))
  {
    if (v10 < 0)
      operator delete(v11);
    goto LABEL_37;
  }
  if (v9)
  {
    if (v9 < 8)
    {
      v14 = 0;
      v15 = 0;
      goto LABEL_26;
    }
    if (v9 >= 0x20)
    {
      v17 = 0uLL;
      v18.i64[0] = 0x2E2E2E2E2E2E2E2ELL;
      v18.i64[1] = 0x2E2E2E2E2E2E2E2ELL;
      v19 = (int8x16_t)vdupq_n_s64(1uLL);
      v14 = v9 & 0xFFFFFFFFFFFFFFE0;
      v20 = 0uLL;
      v21 = AttrData + 1;
      v22 = 0uLL;
      v23 = v9 & 0xFFFFFFFFFFFFFFE0;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      v31 = 0uLL;
      v32 = 0uLL;
      v33 = 0uLL;
      v34 = 0uLL;
      v35 = 0uLL;
      v36 = 0uLL;
      do
      {
        v37 = (uint8x16_t)vceqq_s8(v21[-1], v18);
        v38 = vmovl_u8(*(uint8x8_t *)v37.i8);
        v39 = vmovl_high_u8(v37);
        v40 = vmovl_high_u16(v39);
        v41.i64[0] = v40.u32[2];
        v41.i64[1] = v40.u32[3];
        v28 = vaddq_s64(v28, (int64x2_t)vandq_s8(v41, v19));
        v42 = vmovl_high_u16(v38);
        v43 = vmovl_u16(*(uint16x4_t *)v39.i8);
        v41.i64[0] = v40.u32[0];
        v41.i64[1] = v40.u32[1];
        v27 = vaddq_s64(v27, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v43.u32[2];
        v41.i64[1] = v43.u32[3];
        v26 = vaddq_s64(v26, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v42.u32[2];
        v41.i64[1] = v42.u32[3];
        v24 = vaddq_s64(v24, (int64x2_t)vandq_s8(v41, v19));
        v44 = *v21;
        v21 += 2;
        v45 = vmovl_u16(*(uint16x4_t *)v38.i8);
        v41.i64[0] = v43.u32[0];
        v41.i64[1] = v43.u32[1];
        v25 = vaddq_s64(v25, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v45.u32[0];
        v41.i64[1] = v45.u32[1];
        v46 = (int64x2_t)vandq_s8(v41, v19);
        v41.i64[0] = v45.u32[2];
        v41.i64[1] = v45.u32[3];
        v47 = (int64x2_t)vandq_s8(v41, v19);
        v41.i64[0] = v42.u32[0];
        v41.i64[1] = v42.u32[1];
        v48 = (uint8x16_t)vceqq_s8(v44, v18);
        v22 = vaddq_s64(v22, (int64x2_t)vandq_s8(v41, v19));
        v49 = vmovl_u8(*(uint8x8_t *)v48.i8);
        v50 = vmovl_high_u8(v48);
        v20 = vaddq_s64(v20, v47);
        v51 = vmovl_high_u16(v50);
        v17 = vaddq_s64(v17, v46);
        v41.i64[0] = v51.u32[2];
        v41.i64[1] = v51.u32[3];
        v36 = vaddq_s64(v36, (int64x2_t)vandq_s8(v41, v19));
        v52 = vmovl_high_u16(v49);
        v53 = vmovl_u16(*(uint16x4_t *)v50.i8);
        v41.i64[0] = v51.u32[0];
        v41.i64[1] = v51.u32[1];
        v35 = vaddq_s64(v35, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v53.u32[2];
        v41.i64[1] = v53.u32[3];
        v34 = vaddq_s64(v34, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v52.u32[2];
        v41.i64[1] = v52.u32[3];
        v32 = vaddq_s64(v32, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v53.u32[0];
        v41.i64[1] = v53.u32[1];
        v33 = vaddq_s64(v33, (int64x2_t)vandq_s8(v41, v19));
        v54 = vmovl_u16(*(uint16x4_t *)v49.i8);
        v41.i64[0] = v52.u32[0];
        v41.i64[1] = v52.u32[1];
        v31 = vaddq_s64(v31, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v54.u32[2];
        v41.i64[1] = v54.u32[3];
        v30 = vaddq_s64(v30, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v54.u32[0];
        v41.i64[1] = v54.u32[1];
        v29 = vaddq_s64(v29, (int64x2_t)vandq_s8(v41, v19));
        v23 -= 32;
      }
      while (v23);
      v15 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v29, v17), vaddq_s64(v33, v25)), vaddq_s64(vaddq_s64(v31, v22), vaddq_s64(v35, v27))), vaddq_s64(vaddq_s64(vaddq_s64(v30, v20), vaddq_s64(v34, v26)), vaddq_s64(vaddq_s64(v32, v24), vaddq_s64(v36, v28)))));
      if (v9 == v14)
        goto LABEL_30;
      if ((v9 & 0x18) == 0)
      {
LABEL_26:
        v71 = v9 - v14;
        v72 = &AttrData->u8[v14];
        do
        {
          v73 = *v72++;
          if (v73 == 46)
            ++v15;
          --v71;
        }
        while (v71);
LABEL_30:
        v16 = v15 == 1;
        if ((v10 & 0x80000000) == 0)
          goto LABEL_32;
        goto LABEL_31;
      }
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v55 = v14;
    v14 = v9 & 0xFFFFFFFFFFFFFFF8;
    v56 = 0uLL;
    v57 = (int64x2_t)(unint64_t)v15;
    v58 = (int8x8_t *)&AttrData->i8[v55];
    v59 = v55 - (v9 & 0xFFFFFFFFFFFFFFF8);
    v60 = (int8x16_t)vdupq_n_s64(1uLL);
    v61 = 0uLL;
    v62 = 0uLL;
    do
    {
      v63 = *v58++;
      v64 = vmovl_u8((uint8x8_t)vceq_s8(v63, (int8x8_t)0x2E2E2E2E2E2E2E2ELL));
      v65 = vmovl_u16(*(uint16x4_t *)v64.i8);
      v66.i64[0] = v65.u32[0];
      v66.i64[1] = v65.u32[1];
      v67 = (int64x2_t)vandq_s8(v66, v60);
      v66.i64[0] = v65.u32[2];
      v66.i64[1] = v65.u32[3];
      v68 = (int64x2_t)vandq_s8(v66, v60);
      v69 = vmovl_high_u16(v64);
      v66.i64[0] = v69.u32[0];
      v66.i64[1] = v69.u32[1];
      v70 = (int64x2_t)vandq_s8(v66, v60);
      v66.i64[0] = v69.u32[2];
      v66.i64[1] = v69.u32[3];
      v62 = vaddq_s64(v62, (int64x2_t)vandq_s8(v66, v60));
      v61 = vaddq_s64(v61, v70);
      v56 = vaddq_s64(v56, v68);
      v57 = vaddq_s64(v57, v67);
      v59 += 8;
    }
    while (v59);
    v15 = vaddvq_s64(vaddq_s64(vaddq_s64(v57, v61), vaddq_s64(v56, v62)));
    if (v9 == v14)
      goto LABEL_30;
    goto LABEL_26;
  }
  v16 = 0;
  if ((v10 & 0x80000000) == 0)
    goto LABEL_32;
LABEL_31:
  operator delete(v11);
LABEL_32:
  if (v9 >= a4 + 1)
    v74 = a4 + 1;
  else
    v74 = v9;
  v75 = (int8x16_t *)((char *)AttrData + v74);
  v76 = v9 - v74;
  if (v16)
  {
    AttrData = v75;
    v9 = v76;
  }
LABEL_37:
  v77 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  result = (llvm::raw_ostream *)*((_QWORD *)v77 + 4);
  if (v9 > *((_QWORD *)v77 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(v77, AttrData->i8, v9);
  if (v9)
  {
    result = (llvm::raw_ostream *)memcpy(result, AttrData, v9);
    *((_QWORD *)v77 + 4) += v9;
  }
  return result;
}

mlir::Diagnostic *mlir::OpState::emitError@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return mlir::Operation::emitError(*a1, a2, a3);
}

void mlir::OpState::emitOpError(uint64_t **a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  mlir::Operation::emitOpError(*a1, a2, a3);
}

BOOL mlir::OpTrait::impl::foldCommutative(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  const std::nothrow_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t *v23[2];

  v22[0] = a2;
  v22[1] = a3;
  if ((*(_BYTE *)(a1 + 46) & 0x80) == 0)
    return 0;
  v3 = *(unsigned int *)(a1 + 68);
  if (v3 < 2)
    return 0;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 72);
  v21 = v6;
  v7 = 32 * v3;
  v8 = (uint64_t *)(v6 + v7);
  v9 = v7;
  while (!*(_QWORD *)(a2 + (v5 >> 2)))
  {
    v5 += 32;
    v9 -= 32;
    if (!v9)
    {
      v10 = (uint64_t *)(v6 + v7);
      return v10 != v8;
    }
  }
  v23[0] = v22;
  v23[1] = &v21;
  v10 = (uint64_t *)(v6 + v5);
  if (v9)
  {
    v11 = 0;
    for (i = v5; !*(_QWORD *)(a2 + (i >> 2)); i += 32)
    {
      v11 += 32;
      if (v9 == v11)
        return v10 != v8;
    }
    v13 = v9 - v11;
    v8 = (uint64_t *)(v6 + v5 + v11);
    while (1)
    {
      v13 -= 32;
      if (!v13)
        break;
      v7 -= 32;
      if (!*(_QWORD *)(a2 + (v7 >> 2)))
      {
        v14 = (v13 >> 5) + 1;
        v15 = (uint64_t *)(v6 + v7);
        if (v13 < 65)
        {
LABEL_23:
          v20 = 0;
          v16 = 0;
        }
        else
        {
          if (v14 >= 0x3FFFFFFFFFFFFFFLL)
            v16 = 0x3FFFFFFFFFFFFFFLL;
          else
            v16 = (v13 >> 5) + 1;
          v17 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v18 = (uint64_t *)operator new(32 * v16, v17);
            if (v18)
              break;
            v19 = v16 > 1;
            v16 >>= 1;
            if (!v19)
              goto LABEL_23;
          }
          v20 = v18;
        }
        v8 = std::__stable_partition_impl<std::_ClassicAlgPolicy,mlir::OpTrait::impl::foldCommutative(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_0 &,mlir::OpOperand *,long,std::pair<mlir::OpOperand *,long>>(v8, v15, v23, v14, v20, v16);
        if (v20)
          operator delete(v20);
        return v10 != v8;
      }
    }
  }
  return v10 != v8;
}

uint64_t mlir::OpTrait::impl::foldIdempotent(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 46) & 0x80) == 0 || *((_DWORD *)this + 17) != 1)
  {
    v4 = *((_QWORD *)this + 9);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 != *(_QWORD *)(v4 + 56))
      return 0;
    return v5 | 4;
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v6);
  if (!result)
    return result;
  if (*((_QWORD *)this + 6) == *(_QWORD *)(result + 48))
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
    return v5 | 4;
  }
  return 0;
}

uint64_t mlir::OpTrait::impl::verifyZeroOperands(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  int *v2;
  char *v3;
  char *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v16;
  int64_t v17;
  const void **v18;
  __int16 v19;
  int v20;
  const char *v21;
  uint64_t v22;
  _QWORD v23[3];
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[96];
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 46) & 0x80) == 0 || !*((_DWORD *)this + 17))
    return 1;
  v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    v20 = 3;
    v21 = "requires zero operands";
    v22 = 22;
    v2 = &v20;
    v3 = (char *)v24;
    if (v25 >= v26)
    {
      v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        v17 = (char *)&v20 - (_BYTE *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v3 = (char *)v24;
        v2 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v2 = &v20;
        v3 = (char *)v24;
      }
    }
    v4 = &v3[24 * v25];
    v5 = *(_OWORD *)v2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v4 = v5;
    ++v25;
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v32)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v31;
      v9 = __p;
      if (v31 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v31 = v7;
      operator delete(v9);
    }
    v10 = v28;
    if (v28)
    {
      v11 = v29;
      v12 = v28;
      if (v29 != v28)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v28;
      }
      v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27)
      free(v24);
  }
  return v6;
}

uint64_t mlir::OpTrait::impl::verifyOneOperand(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v2;
  int *v3;
  char *v4;
  char *v5;
  __int128 v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v16;
  int64_t v17;
  const void **v18;
  __int16 v19;
  int v20;
  const char *v21;
  uint64_t v22;
  _QWORD v23[3];
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[96];
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 46) & 0x80) != 0 && *((_DWORD *)this + 17) == 1)
    return 1;
  v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    v20 = 3;
    v21 = "requires a single operand";
    v22 = 25;
    v3 = &v20;
    v4 = (char *)v24;
    if (v25 >= v26)
    {
      v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        v17 = (char *)&v20 - (_BYTE *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v4 = (char *)v24;
        v3 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v3 = &v20;
        v4 = (char *)v24;
      }
    }
    v5 = &v4[24 * v25];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    ++v25;
  }
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v32)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v31;
      v9 = __p;
      if (v31 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v31 = v7;
      operator delete(v9);
    }
    v10 = v28;
    if (v28)
    {
      v11 = v29;
      v12 = v28;
      if (v29 != v28)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v28;
      }
      v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27)
      free(v24);
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyNOperands(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unsigned int v2;
  uint64_t v4;
  int *v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  const char *v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  const void **v43;
  __int16 v44;
  int v45;
  const char *v46;
  uint64_t v47;
  _QWORD v48[3];
  void *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[96];
  void *v53;
  _QWORD *v54;
  void *__p;
  _QWORD **v56;
  char v57;
  uint64_t v58;

  v2 = a2;
  v58 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    if (*((_DWORD *)this + 17) == (_DWORD)a2)
      return 1;
  }
  else if (!(_DWORD)a2)
  {
    return 1;
  }
  v44 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v43, (uint64_t)v48);
  if (v48[0])
  {
    v45 = 3;
    v46 = "expected ";
    v47 = 9;
    v5 = &v45;
    v6 = (char *)v49;
    if (v50 >= v51)
    {
      v33 = v50 + 1;
      if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
      {
        v39 = (char *)&v45 - (_BYTE *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v33, 24);
        v6 = (char *)v49;
        v5 = (int *)((char *)v49 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v33, 24);
        v5 = &v45;
        v6 = (char *)v49;
      }
    }
    v7 = &v6[24 * v50];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v7 = v8;
    v9 = ++v50;
    if (v48[0])
    {
      v45 = 5;
      v46 = (const char *)v2;
      v10 = &v45;
      v11 = (char *)v49;
      if (v9 >= v51)
      {
        v35 = v9 + 1;
        v36 = (char *)v49 + 24 * v9 > (char *)&v45;
        if (v49 <= &v45 && v36)
        {
          v41 = (char *)&v45 - (_BYTE *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          v11 = (char *)v49;
          v10 = (int *)((char *)v49 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          v10 = &v45;
          v11 = (char *)v49;
        }
      }
      v12 = &v11[24 * v50];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      v14 = ++v50;
      if (v48[0])
      {
        v45 = 3;
        v46 = " operands, but found ";
        v47 = 21;
        v15 = &v45;
        v16 = (char *)v49;
        if (v14 >= v51)
        {
          v37 = v14 + 1;
          v38 = (char *)v49 + 24 * v14 > (char *)&v45;
          if (v49 <= &v45 && v38)
          {
            v42 = (char *)&v45 - (_BYTE *)v49;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v37, 24);
            v16 = (char *)v49;
            v15 = (int *)((char *)v49 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v37, 24);
            v15 = &v45;
            v16 = (char *)v49;
          }
        }
        v17 = &v16[24 * v50];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v17 = v18;
        ++v50;
      }
    }
  }
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v19 = (const char *)*((unsigned int *)this + 17);
    if (v48[0])
    {
LABEL_14:
      v45 = 5;
      v46 = v19;
      v20 = &v45;
      v21 = (char *)v49;
      if (v50 >= v51)
      {
        v34 = v50 + 1;
        if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
        {
          v40 = (char *)&v45 - (_BYTE *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
          v21 = (char *)v49;
          v20 = (int *)((char *)v49 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
          v20 = &v45;
          v21 = (char *)v49;
        }
      }
      v22 = &v21[24 * v50];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v22 = v23;
      ++v50;
    }
  }
  else
  {
    v19 = 0;
    if (v48[0])
      goto LABEL_14;
  }
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
  if (v48[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
  if (v57)
  {
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v56;
      v26 = __p;
      if (v56 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v56 = v24;
      operator delete(v26);
    }
    v27 = v53;
    if (v53)
    {
      v28 = v54;
      v29 = v53;
      if (v54 != v53)
      {
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        v29 = v53;
      }
      v54 = v27;
      operator delete(v29);
    }
    if (v49 != v52)
      free(v49);
  }
  return v4;
}

uint64_t mlir::OpTrait::impl::verifyAtLeastNOperands(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unsigned int v2;
  int *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  const char *v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  const void **v43;
  __int16 v44;
  int v45;
  const char *v46;
  uint64_t v47;
  _QWORD v48[3];
  void *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[96];
  void *v53;
  _QWORD *v54;
  void *__p;
  _QWORD **v56;
  char v57;
  uint64_t v58;

  v2 = a2;
  v58 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    if (*((_DWORD *)this + 17) < a2)
      goto LABEL_3;
    return 1;
  }
  if (!(_DWORD)a2)
    return 1;
LABEL_3:
  v44 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v43, (uint64_t)v48);
  if (v48[0])
  {
    v45 = 3;
    v46 = "expected ";
    v47 = 9;
    v4 = &v45;
    v5 = (char *)v49;
    if (v50 >= v51)
    {
      v33 = v50 + 1;
      if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
      {
        v39 = (char *)&v45 - (_BYTE *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v33, 24);
        v5 = (char *)v49;
        v4 = (int *)((char *)v49 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v33, 24);
        v4 = &v45;
        v5 = (char *)v49;
      }
    }
    v6 = &v5[24 * v50];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    v8 = ++v50;
    if (v48[0])
    {
      v45 = 5;
      v46 = (const char *)v2;
      v9 = &v45;
      v10 = (char *)v49;
      if (v8 >= v51)
      {
        v35 = v8 + 1;
        v36 = (char *)v49 + 24 * v8 > (char *)&v45;
        if (v49 <= &v45 && v36)
        {
          v41 = (char *)&v45 - (_BYTE *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          v10 = (char *)v49;
          v9 = (int *)((char *)v49 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          v9 = &v45;
          v10 = (char *)v49;
        }
      }
      v11 = &v10[24 * v50];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v50;
      if (v48[0])
      {
        v45 = 3;
        v46 = " or more operands, but found ";
        v47 = 29;
        v14 = &v45;
        v15 = (char *)v49;
        if (v13 >= v51)
        {
          v37 = v13 + 1;
          v38 = (char *)v49 + 24 * v13 > (char *)&v45;
          if (v49 <= &v45 && v38)
          {
            v42 = (char *)&v45 - (_BYTE *)v49;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v37, 24);
            v15 = (char *)v49;
            v14 = (int *)((char *)v49 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v37, 24);
            v14 = &v45;
            v15 = (char *)v49;
          }
        }
        v16 = &v15[24 * v50];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v50;
      }
    }
  }
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v18 = (const char *)*((unsigned int *)this + 17);
    if (v48[0])
    {
LABEL_12:
      v45 = 5;
      v46 = v18;
      v19 = &v45;
      v20 = (char *)v49;
      if (v50 >= v51)
      {
        v34 = v50 + 1;
        if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
        {
          v40 = (char *)&v45 - (_BYTE *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
          v20 = (char *)v49;
          v19 = (int *)((char *)v49 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
          v19 = &v45;
          v20 = (char *)v49;
        }
      }
      v21 = &v20[24 * v50];
      v22 = *(_OWORD *)v19;
      *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v21 = v22;
      ++v50;
    }
  }
  else
  {
    v18 = 0;
    if (v48[0])
      goto LABEL_12;
  }
  v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
  if (v48[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
  if (v57)
  {
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v56;
      v26 = __p;
      if (v56 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v56 = v24;
      operator delete(v26);
    }
    v27 = v53;
    if (v53)
    {
      v28 = v54;
      v29 = v53;
      if (v54 != v53)
      {
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        v29 = v53;
      }
      v54 = v27;
      operator delete(v29);
    }
    if (v49 != v52)
      free(v49);
  }
  return v23;
}

uint64_t mlir::OpTrait::impl::verifyIsIdempotent(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  return 1;
}

uint64_t mlir::OpTrait::impl::verifySameTypeOperands(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  BOOL v8;
  uint64_t v9;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  char *v24;
  const void **v25[4];
  __int16 v26;
  int v27;
  const char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  _BYTE v35[96];
  void *v36;
  _QWORD *v37;
  void *__p;
  _QWORD **v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 46) & 0x80) == 0)
    return 1;
  v3 = (const void **)*((unsigned int *)this + 17);
  if (v3 < 2)
    return 1;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 24) + 8);
  v25[0] = *((const void ***)this + 9);
  v25[1] = v3;
  mlir::OperandRange::getTypes((uint64_t *)v25, (uint64_t *)&v30);
  if (__PAIR128__(v31 + 1, v30) == v32)
    return 1;
  v5 = *((_QWORD *)&v32 + 1) - v31 - 2;
  for (i = v30 + 32 * v31 + 56;
        (*(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8) == (v4 & 0xFFFFFFFFFFFFFFF8);
        i += 32)
  {
    v8 = v5-- != 0;
    if (v30 == (_QWORD)v32 && !v8)
      return 1;
  }
  v26 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, v25, (uint64_t)&v30);
  if (v30)
  {
    v27 = 3;
    v28 = "requires all operands to have the same type";
    v29 = 43;
    v11 = &v27;
    v12 = *((_QWORD *)&v32 + 1);
    if (v33 >= v34)
    {
      v23 = v33 + 1;
      if (*((_QWORD *)&v32 + 1) <= (unint64_t)&v27
        && *((_QWORD *)&v32 + 1) + 24 * (unint64_t)v33 > (unint64_t)&v27)
      {
        v24 = (char *)&v27 - *((_QWORD *)&v32 + 1);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32 + 8, v35, v23, 24);
        v12 = *((_QWORD *)&v32 + 1);
        v11 = (int *)&v24[*((_QWORD *)&v32 + 1)];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32 + 8, v35, v23, 24);
        v11 = &v27;
        v12 = *((_QWORD *)&v32 + 1);
      }
    }
    v13 = v12 + 24 * v33;
    v14 = *(_OWORD *)v11;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v11 + 2);
    *(_OWORD *)v13 = v14;
    ++v33;
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
  if (v30)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
  if (v40)
  {
    v15 = (_QWORD **)__p;
    if (__p)
    {
      v16 = v39;
      v17 = __p;
      if (v39 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v39 = v15;
      operator delete(v17);
    }
    v18 = v36;
    if (v36)
    {
      v19 = v37;
      v20 = v36;
      if (v37 != v36)
      {
        do
        {
          v22 = (void *)*--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            operator delete[](v21);
        }
        while (v19 != v18);
        v20 = v36;
      }
      v37 = v18;
      operator delete(v20);
    }
    if (*((_BYTE **)&v32 + 1) != v35)
      free(*((void **)&v32 + 1));
  }
  return v9;
}

uint64_t mlir::OpTrait::impl::verifyZeroRegions(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  int *v2;
  char *v3;
  char *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v16;
  int64_t v17;
  const void **v18;
  __int16 v19;
  int v20;
  const char *v21;
  uint64_t v22;
  _QWORD v23[3];
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[96];
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 11) & 0x7FFFFF) == 0)
    return 1;
  v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    v20 = 3;
    v21 = "requires zero regions";
    v22 = 21;
    v2 = &v20;
    v3 = (char *)v24;
    if (v25 >= v26)
    {
      v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        v17 = (char *)&v20 - (_BYTE *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v3 = (char *)v24;
        v2 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v2 = &v20;
        v3 = (char *)v24;
      }
    }
    v4 = &v3[24 * v25];
    v5 = *(_OWORD *)v2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v4 = v5;
    ++v25;
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v32)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v31;
      v9 = __p;
      if (v31 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v31 = v7;
      operator delete(v9);
    }
    v10 = v28;
    if (v28)
    {
      v11 = v29;
      v12 = v28;
      if (v29 != v28)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v28;
      }
      v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27)
      free(v24);
  }
  return v6;
}

uint64_t mlir::OpTrait::impl::verifyOneRegion(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v2;
  int *v3;
  char *v4;
  char *v5;
  __int128 v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v16;
  int64_t v17;
  const void **v18;
  __int16 v19;
  int v20;
  const char *v21;
  uint64_t v22;
  _QWORD v23[3];
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[96];
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 11) & 0x7FFFFF) == 1)
    return 1;
  v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    v20 = 3;
    v21 = "requires one region";
    v22 = 19;
    v3 = &v20;
    v4 = (char *)v24;
    if (v25 >= v26)
    {
      v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        v17 = (char *)&v20 - (_BYTE *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v4 = (char *)v24;
        v3 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v3 = &v20;
        v4 = (char *)v24;
      }
    }
    v5 = &v4[24 * v25];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    ++v25;
  }
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v32)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v31;
      v9 = __p;
      if (v31 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v31 = v7;
      operator delete(v9);
    }
    v10 = v28;
    if (v28)
    {
      v11 = v29;
      v12 = v28;
      if (v29 != v28)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v28;
      }
      v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27)
      free(v24);
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyNRegions(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v2;
  unsigned int v3;
  int *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  const void **v35;
  __int16 v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 11) & 0x7FFFFF) == (_DWORD)a2)
    return 1;
  v3 = a2;
  v36 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v35, (uint64_t)v40);
  if (v40[0])
  {
    v37 = 3;
    v38 = "expected ";
    v39 = 9;
    v4 = &v37;
    v5 = (char *)v41;
    if (v42 >= v43)
    {
      v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v32 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v5 = (char *)v41;
        v4 = (int *)((char *)v41 + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v4 = &v37;
        v5 = (char *)v41;
      }
    }
    v6 = &v5[24 * v42];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    v8 = ++v42;
    if (v40[0])
    {
      v37 = 5;
      v38 = (const char *)v3;
      v9 = &v37;
      v10 = (char *)v41;
      if (v8 >= v43)
      {
        v28 = v8 + 1;
        v29 = (char *)v41 + 24 * v8 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          v33 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v10 = (char *)v41;
          v9 = (int *)((char *)v41 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v9 = &v37;
          v10 = (char *)v41;
        }
      }
      v11 = &v10[24 * v42];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v42;
      if (v40[0])
      {
        v37 = 3;
        v38 = " regions";
        v39 = 8;
        v14 = &v37;
        v15 = (char *)v41;
        if (v13 >= v43)
        {
          v30 = v13 + 1;
          v31 = (char *)v41 + 24 * v13 > (char *)&v37;
          if (v41 <= &v37 && v31)
          {
            v34 = (char *)&v37 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v15 = (char *)v41;
            v14 = (int *)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v14 = &v37;
            v15 = (char *)v41;
          }
        }
        v16 = &v15[24 * v42];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v42;
      }
    }
  }
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyAtLeastNRegions(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unsigned int v2;
  int *v3;
  char *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  int *v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  const void **v35;
  __int16 v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 11) & 0x7FFFFFu) >= a2)
    return 1;
  v2 = a2;
  v36 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v35, (uint64_t)v40);
  if (v40[0])
  {
    v37 = 3;
    v38 = "expected ";
    v39 = 9;
    v3 = &v37;
    v4 = (char *)v41;
    if (v42 >= v43)
    {
      v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v32 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v4 = (char *)v41;
        v3 = (int *)((char *)v41 + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v3 = &v37;
        v4 = (char *)v41;
      }
    }
    v5 = &v4[24 * v42];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    v7 = ++v42;
    if (v40[0])
    {
      v37 = 5;
      v38 = (const char *)v2;
      v8 = &v37;
      v9 = (char *)v41;
      if (v7 >= v43)
      {
        v28 = v7 + 1;
        v29 = (char *)v41 + 24 * v7 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          v33 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v9 = (char *)v41;
          v8 = (int *)((char *)v41 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v8 = &v37;
          v9 = (char *)v41;
        }
      }
      v10 = &v9[24 * v42];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      v12 = ++v42;
      if (v40[0])
      {
        v37 = 3;
        v38 = " or more regions";
        v39 = 16;
        v13 = &v37;
        v14 = (char *)v41;
        if (v12 >= v43)
        {
          v30 = v12 + 1;
          v31 = (char *)v41 + 24 * v12 > (char *)&v37;
          if (v41 <= &v37 && v31)
          {
            v34 = (char *)&v37 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v14 = (char *)v41;
            v13 = (int *)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v13 = &v37;
            v14 = (char *)v41;
          }
        }
        v15 = &v14[24 * v42];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v15 = v16;
        ++v42;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v17;
}

uint64_t mlir::OpTrait::impl::verifyZeroResults(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  int *v2;
  char *v3;
  char *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v16;
  int64_t v17;
  const void **v18;
  __int16 v19;
  int v20;
  const char *v21;
  uint64_t v22;
  _QWORD v23[3];
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[96];
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 9))
    return 1;
  v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    v20 = 3;
    v21 = "requires zero results";
    v22 = 21;
    v2 = &v20;
    v3 = (char *)v24;
    if (v25 >= v26)
    {
      v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        v17 = (char *)&v20 - (_BYTE *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v3 = (char *)v24;
        v2 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v2 = &v20;
        v3 = (char *)v24;
      }
    }
    v4 = &v3[24 * v25];
    v5 = *(_OWORD *)v2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v4 = v5;
    ++v25;
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v32)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v31;
      v9 = __p;
      if (v31 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v31 = v7;
      operator delete(v9);
    }
    v10 = v28;
    if (v28)
    {
      v11 = v29;
      v12 = v28;
      if (v29 != v28)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v28;
      }
      v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27)
      free(v24);
  }
  return v6;
}

uint64_t mlir::OpTrait::impl::verifyOneResult(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v2;
  int *v3;
  char *v4;
  char *v5;
  __int128 v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v16;
  int64_t v17;
  const void **v18;
  __int16 v19;
  int v20;
  const char *v21;
  uint64_t v22;
  _QWORD v23[3];
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[96];
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 9) == 1)
    return 1;
  v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    v20 = 3;
    v21 = "requires one result";
    v22 = 19;
    v3 = &v20;
    v4 = (char *)v24;
    if (v25 >= v26)
    {
      v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        v17 = (char *)&v20 - (_BYTE *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v4 = (char *)v24;
        v3 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        v3 = &v20;
        v4 = (char *)v24;
      }
    }
    v5 = &v4[24 * v25];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    ++v25;
  }
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v32)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v31;
      v9 = __p;
      if (v31 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v31 = v7;
      operator delete(v9);
    }
    v10 = v28;
    if (v28)
    {
      v11 = v29;
      v12 = v28;
      if (v29 != v28)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v28;
      }
      v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27)
      free(v24);
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyNResults(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v2;
  unsigned int v3;
  int *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  const void **v35;
  __int16 v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 9) == (_DWORD)a2)
    return 1;
  v3 = a2;
  v36 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v35, (uint64_t)v40);
  if (v40[0])
  {
    v37 = 3;
    v38 = "expected ";
    v39 = 9;
    v4 = &v37;
    v5 = (char *)v41;
    if (v42 >= v43)
    {
      v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v32 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v5 = (char *)v41;
        v4 = (int *)((char *)v41 + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v4 = &v37;
        v5 = (char *)v41;
      }
    }
    v6 = &v5[24 * v42];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    v8 = ++v42;
    if (v40[0])
    {
      v37 = 5;
      v38 = (const char *)v3;
      v9 = &v37;
      v10 = (char *)v41;
      if (v8 >= v43)
      {
        v28 = v8 + 1;
        v29 = (char *)v41 + 24 * v8 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          v33 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v10 = (char *)v41;
          v9 = (int *)((char *)v41 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v9 = &v37;
          v10 = (char *)v41;
        }
      }
      v11 = &v10[24 * v42];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v42;
      if (v40[0])
      {
        v37 = 3;
        v38 = " results";
        v39 = 8;
        v14 = &v37;
        v15 = (char *)v41;
        if (v13 >= v43)
        {
          v30 = v13 + 1;
          v31 = (char *)v41 + 24 * v13 > (char *)&v37;
          if (v41 <= &v37 && v31)
          {
            v34 = (char *)&v37 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v15 = (char *)v41;
            v14 = (int *)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v14 = &v37;
            v15 = (char *)v41;
          }
        }
        v16 = &v15[24 * v42];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v42;
      }
    }
  }
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyAtLeastNResults(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unsigned int v2;
  int *v3;
  char *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  int *v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  const void **v35;
  __int16 v36;
  int v37;
  const char *v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 9) >= a2)
    return 1;
  v2 = a2;
  v36 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v35, (uint64_t)v40);
  if (v40[0])
  {
    v37 = 3;
    v38 = "expected ";
    v39 = 9;
    v3 = &v37;
    v4 = (char *)v41;
    if (v42 >= v43)
    {
      v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v32 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v4 = (char *)v41;
        v3 = (int *)((char *)v41 + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        v3 = &v37;
        v4 = (char *)v41;
      }
    }
    v5 = &v4[24 * v42];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    v7 = ++v42;
    if (v40[0])
    {
      v37 = 5;
      v38 = (const char *)v2;
      v8 = &v37;
      v9 = (char *)v41;
      if (v7 >= v43)
      {
        v28 = v7 + 1;
        v29 = (char *)v41 + 24 * v7 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          v33 = (char *)&v37 - (_BYTE *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v9 = (char *)v41;
          v8 = (int *)((char *)v41 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          v8 = &v37;
          v9 = (char *)v41;
        }
      }
      v10 = &v9[24 * v42];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      v12 = ++v42;
      if (v40[0])
      {
        v37 = 3;
        v38 = " or more results";
        v39 = 16;
        v13 = &v37;
        v14 = (char *)v41;
        if (v12 >= v43)
        {
          v30 = v12 + 1;
          v31 = (char *)v41 + 24 * v12 > (char *)&v37;
          if (v41 <= &v37 && v31)
          {
            v34 = (char *)&v37 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v14 = (char *)v41;
            v13 = (int *)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            v13 = &v37;
            v14 = (char *)v41;
          }
        }
        v15 = &v14[24 * v42];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v15 = v16;
        ++v42;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v17;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsShape(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  const void **v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  unsigned int v32;
  unsigned int v33;
  _BYTE v34[96];
  void *v35;
  _QWORD *v36;
  void *__p;
  _QWORD **v38;
  char v39;
  unint64_t v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1))
    return 0;
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v3 = *((_QWORD *)this + 9);
    v4 = *((unsigned int *)this + 17);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v29 = v3;
  v30 = v4;
  mlir::OperandRange::getTypes(&v29, &v23);
  mlir::ValueRange::ValueRange((unint64_t *)&v29, v23 + 32 * v24, v25 - v24);
  mlir::TypeRange::TypeRange(v40, v29, v30);
  if (mlir::verifyCompatibleShapes(v40[0], v40[1]))
    return 1;
  v22 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v21, (uint64_t)&v29);
  if (v29)
  {
    v26 = 3;
    v27 = "requires the same shape for all operands";
    v28 = 40;
    v7 = &v26;
    v8 = (char *)v31;
    if (v32 >= v33)
    {
      v19 = v32 + 1;
      if (v31 <= &v26 && (char *)v31 + 24 * v32 > (char *)&v26)
      {
        v20 = (char *)&v26 - (_BYTE *)v31;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v19, 24);
        v8 = (char *)v31;
        v7 = (int *)((char *)v31 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v19, 24);
        v7 = &v26;
        v8 = (char *)v31;
      }
    }
    v9 = &v8[24 * v32];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    ++v32;
  }
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v29);
  if (v29)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v29);
  if (v39)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v38;
      v13 = __p;
      if (v38 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v38 = v11;
      operator delete(v13);
    }
    v14 = v35;
    if (v35)
    {
      v15 = v36;
      v16 = v35;
      if (v36 != v35)
      {
        do
        {
          v18 = (void *)*--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            operator delete[](v17);
        }
        while (v15 != v14);
        v16 = v35;
      }
      v36 = v14;
      operator delete(v16);
    }
    if (v31 != v34)
      free(v31);
  }
  return v5;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsAndResultShape(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  unint64_t *v15;
  char *i;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  const void **v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  int v26;
  int v27;
  void **v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  int *v35;
  char *v36;
  char *v37;
  __int128 v38;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  int64_t v48;
  const void **v49;
  uint64_t v50;
  const void **v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  const char *v55;
  uint64_t v56;
  void *__src;
  uint64_t v58;
  char *v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  unint64_t v69[2];
  char *v70;
  uint64_t v71;
  _QWORD v72[9];

  v72[8] = *MEMORY[0x1E0C80C00];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1)
    || !mlir::OpTrait::impl::verifyAtLeastNResults(this, (mlir::Operation *)1))
  {
    return 0;
  }
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v3 = (char *)*((_QWORD *)this + 9);
    v4 = *((unsigned int *)this + 17);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v70 = v3;
  v71 = v4;
  mlir::OperandRange::getTypes((uint64_t *)&v70, (uint64_t *)&__src);
  v70 = (char *)v72;
  v71 = 0x800000000;
  v5 = (char *)__src;
  v6 = v58;
  v8 = v59;
  v7 = (char *)v60;
  v9 = (_DWORD)v60 - v58;
  if ((char *)v60 - v58 >= (char *)9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, (unint64_t)v60 - v58, 8);
    v10 = v71;
    v11 = v5 != v8;
    v12 = &v7[-v6];
    if (v7 != (char *)v6)
      goto LABEL_12;
LABEL_11:
    if (!v11)
      goto LABEL_18;
    goto LABEL_12;
  }
  v10 = 0;
  v11 = __src != v59;
  v12 = (char *)v60 - v58;
  if (v60 == (void *)v58)
    goto LABEL_11;
LABEL_12:
  v15 = (unint64_t *)&v70[8 * v10];
  if (v11)
  {
    for (i = &v5[32 * v6 + 24]; ; i += 32)
    {
      v17 = *(_QWORD *)i;
      *v15++ = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  v18 = &v5[32 * v6 + 24];
  do
  {
    v19 = *(_QWORD *)v18;
    v18 += 32;
    *v15++ = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
    --v12;
  }
  while (v12);
  v10 = v71;
LABEL_18:
  LODWORD(v71) = v10 + v9;
  v20 = *((unsigned int *)this + 9);
  v21 = (char *)this - 16;
  if (!(_DWORD)v20)
    v21 = 0;
  __src = v21;
  v58 = v20;
  mlir::OperandRange::getTypes((uint64_t *)&__src, (uint64_t *)&v49);
  v22 = v49;
  v23 = v50;
  v25 = v51;
  v24 = v52;
  __src = &v59;
  v58 = 0x400000000;
  v26 = v52 - v50;
  if ((unint64_t)(v52 - v50) < 5)
  {
    v27 = 0;
    v28 = (void **)&v59;
    v29 = v49 != v51;
    if (v52 != v50)
      goto LABEL_35;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v59, v52 - v50, 8);
    v27 = v58;
    v28 = (void **)__src;
    v29 = v22 != v25;
    if (v24 != v23)
    {
LABEL_35:
      v34 = (unint64_t *)&v28[v27];
      if (v29)
      {
        while (1)
          *v34++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v22, v23++) + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      do
        *v34++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v22, v23++) + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v24 != v23);
      v28 = (void **)__src;
      LODWORD(v58) = v58 + v26;
      LODWORD(v30) = v58;
      v31 = v71;
      v32 = v71 + (unint64_t)v58;
      if (v32 <= HIDWORD(v71))
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  if (v29)
    goto LABEL_35;
  v30 = (v27 + v26);
  LODWORD(v58) = v27 + v26;
  v31 = v71;
  v32 = v71 + v30;
  if (v32 > HIDWORD(v71))
  {
LABEL_26:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v32, 8);
    v31 = v71;
  }
LABEL_27:
  if ((_DWORD)v30)
  {
    memcpy(&v70[8 * v31], v28, 8 * v30);
    v31 = v71;
  }
  v33 = v31 + v30;
  LODWORD(v71) = v33;
  if (__src != &v59)
  {
    free(__src);
    v33 = v71;
  }
  mlir::ValueRange::ValueRange(v69, (uint64_t)v70, v33);
  if (mlir::verifyCompatibleShapes(v69[0], v69[1]))
  {
    v13 = 1;
  }
  else
  {
    v53 = 257;
    mlir::Operation::emitOpError((uint64_t *)this, &v49, (uint64_t)&__src);
    if (__src)
    {
      v54 = 3;
      v55 = "requires the same shape for all operands and results";
      v56 = 52;
      v35 = &v54;
      v36 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
        {
          v48 = (char *)&v54 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v36 = (char *)v60;
          v35 = (int *)((char *)v60 + v48);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v35 = &v54;
          v36 = (char *)v60;
        }
      }
      v37 = &v36[24 * v61];
      v38 = *(_OWORD *)v35;
      *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
      *(_OWORD *)v37 = v38;
      ++v61;
    }
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
    if (__src)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
    if (v68)
    {
      v39 = (_QWORD **)__p;
      if (__p)
      {
        v40 = v67;
        v41 = __p;
        if (v67 != __p)
        {
          do
            v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
          while (v40 != v39);
          v41 = __p;
        }
        v67 = v39;
        operator delete(v41);
      }
      v42 = v64;
      if (v64)
      {
        v43 = v65;
        v44 = v64;
        if (v65 != v64)
        {
          do
          {
            v46 = (void *)*--v43;
            v45 = v46;
            *v43 = 0;
            if (v46)
              operator delete[](v45);
          }
          while (v43 != v42);
          v44 = v64;
        }
        v65 = v42;
        operator delete(v44);
      }
      if (v60 != v63)
        free(v60);
    }
  }
  if (v70 != (char *)v72)
    free(v70);
  return v13;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsElementType(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  const void **v18;
  __int16 v19;
  _QWORD v20[3];
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *__p;
  _QWORD **v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1))
    return 0;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(*(_QWORD *)(*((_QWORD *)this + 9) + 24));
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v4 = *((unsigned int *)this + 17);
    if ((_DWORD)v4 == 1)
      return 1;
    v5 = *((_QWORD *)this + 9);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = (uint64_t *)(v5 + 56);
  v7 = v4 - 1;
  while (mlir::getElementTypeOrSelf(*v6) == ElementTypeOrSelf)
  {
    v6 += 4;
    if (!--v7)
      return 1;
  }
  v18 = (const void **)"requires the same element type for all operands";
  v19 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v20);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  if (v27)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v26;
      v12 = __p;
      if (v26 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v26 = v10;
      operator delete(v12);
    }
    v13 = v23;
    if (v23)
    {
      v14 = v24;
      v15 = v23;
      if (v24 != v23)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v23;
      }
      v24 = v13;
      operator delete(v15);
    }
    if (v21 != &v22)
      free(v21);
  }
  return v8;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsAndResultElementType(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  char *v3;
  uint64_t ElementTypeOrSelf;
  uint64_t v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  const void **v29[4];
  __int16 v30;
  _QWORD v31[3];
  void *v32;
  _BYTE v33[96];
  void *v34;
  _QWORD *v35;
  void *__p;
  _QWORD **v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1)
    || !mlir::OpTrait::impl::verifyAtLeastNResults(this, (mlir::Operation *)1))
  {
    return 0;
  }
  v3 = (char *)this - 16;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((uint64_t)this - 16);
  v5 = *((unsigned int *)this + 9);
  if (!(_DWORD)v5)
    v3 = 0;
  if ((_DWORD)v5 != 1)
  {
    v6 = 1;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v3, v6);
      if (mlir::getElementTypeOrSelf(NextResultAtOffset) != ElementTypeOrSelf)
        break;
      if (v5 == ++v6)
        goto LABEL_9;
    }
    v29[0] = (const void **)"requires the same element type for all operands and results";
    v30 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, v29, (uint64_t)v31);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
    if (v31[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v31);
    if (!v38)
      return v10;
    v12 = (_QWORD **)__p;
    if (__p)
    {
      v13 = v37;
      v14 = __p;
      if (v37 != __p)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p;
      }
      v37 = v12;
      operator delete(v14);
    }
    v15 = v34;
    if (v34)
    {
      v16 = v35;
      v17 = v34;
      if (v35 != v34)
      {
        do
        {
          v19 = (void *)*--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            operator delete[](v18);
        }
        while (v16 != v15);
        v17 = v34;
      }
      v35 = v15;
      operator delete(v17);
    }
    v28 = v32;
    if (v32 == v33)
      return v10;
LABEL_52:
    free(v28);
    return v10;
  }
LABEL_9:
  if ((*((_BYTE *)this + 46) & 0x80) == 0)
    return 1;
  v8 = *((unsigned int *)this + 17);
  if (!(_DWORD)v8)
    return 1;
  for (i = (uint64_t *)(*((_QWORD *)this + 9) + 24); mlir::getElementTypeOrSelf(*i) == ElementTypeOrSelf; i += 4)
  {
    if (!--v8)
      return 1;
  }
  v29[0] = (const void **)"requires the same element type for all operands and results";
  v30 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, v29, (uint64_t)v31);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
  if (v31[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v31);
  if (v38)
  {
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v37;
      v22 = __p;
      if (v37 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v37 = v20;
      operator delete(v22);
    }
    v23 = v34;
    if (v34)
    {
      v24 = v35;
      v25 = v34;
      if (v35 != v34)
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v34;
      }
      v35 = v23;
      operator delete(v25);
    }
    v28 = v32;
    if (v32 != v33)
      goto LABEL_52;
  }
  return v10;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsAndResultType(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  _QWORD *v3;
  uint64_t ElementTypeOrSelf;
  uint64_t v5;
  uint64_t Values;
  uint64_t v7;
  const void **v8;
  const void **v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  _QWORD **v43;
  _QWORD **v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  __int128 v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  _QWORD **v66;
  _QWORD **v67;
  void *v68;
  _QWORD *v69;
  void *v70;
  void *v71;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  _QWORD *v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  const char *v85;
  const void **v86[4];
  __int16 v87;
  _QWORD *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unsigned int v95;
  unsigned int v96;
  _BYTE v97[96];
  void *v98;
  _QWORD *v99;
  void *__p;
  _QWORD **v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1)
    || !mlir::OpTrait::impl::verifyAtLeastNResults(this, (mlir::Operation *)1))
  {
    return 0;
  }
  v3 = (_QWORD *)(*((_QWORD *)this - 1) & 0xFFFFFFFFFFFFFFF8);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v3);
  if (*(_UNKNOWN **)(*v3 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v5 = (uint64_t)v3;
  else
    v5 = 0;
  v91 = v5;
  if (v5)
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v91);
  else
    Values = 0;
  v8 = (const void **)*((unsigned int *)this + 9);
  if ((_DWORD)v8)
    v9 = (const void **)((char *)this - 16);
  else
    v9 = 0;
  v86[0] = v9;
  v86[1] = v8;
  mlir::OperandRange::getTypes((uint64_t *)v86, &v91);
  v10 = v91;
  v12 = v93;
  v11 = (char *)v94;
  if (v91 != v93 || (void *)(v92 + 1) != v94)
  {
    v13 = (char *)(v92 + 2);
    while (1)
    {
      v14 = v13;
      v15 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, (uint64_t)(v13 - 1)) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::getElementTypeOrSelf(v15) != ElementTypeOrSelf || !mlir::verifyCompatibleShape(v15, v3))
      {
        v87 = 257;
        mlir::Operation::emitOpError((uint64_t *)this, v86, (uint64_t)&v91);
        if (v91)
        {
          LODWORD(v82) = 3;
          v83 = "requires the same type for all operands and results";
          v84 = 51;
          v27 = &v82;
          v28 = (char *)v94;
          if (v95 >= v96)
          {
            v73 = v95 + 1;
            if (v94 <= &v82 && (char *)v94 + 24 * v95 > (char *)&v82)
            {
              v77 = (char *)&v82 - (_BYTE *)v94;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v73, 24);
              v28 = (char *)v94;
              v27 = (uint64_t *)((char *)v94 + v77);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v73, 24);
              v27 = &v82;
              v28 = (char *)v94;
            }
          }
          v29 = &v28[24 * v95];
          v30 = *(_OWORD *)v27;
          *((_QWORD *)v29 + 2) = v27[2];
          *(_OWORD *)v29 = v30;
          ++v95;
        }
        v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v91);
        if (v91)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v91);
        if (!v102)
          return v7;
        v31 = (_QWORD **)__p;
        if (__p)
        {
          v32 = v101;
          v33 = __p;
          if (v101 != __p)
          {
            do
              v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            v33 = __p;
          }
          v101 = v31;
          operator delete(v33);
        }
        v34 = v98;
        if (!v98)
          goto LABEL_79;
        v35 = v99;
        v36 = v98;
        if (v99 == v98)
          goto LABEL_78;
        do
        {
          v38 = (void *)*--v35;
          v37 = v38;
          *v35 = 0;
          if (v38)
            operator delete[](v37);
        }
        while (v35 != v34);
        goto LABEL_77;
      }
      if (Values)
      {
        v16 = *(_UNKNOWN **)(*v15 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id ? v15 : 0;
        v88 = v16;
        if (Values != mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v88))
          break;
      }
      v13 = v14 + 1;
      if (v10 == v12 && v11 == v14)
        goto LABEL_25;
    }
    v87 = 257;
    mlir::Operation::emitOpError((uint64_t *)this, v86, (uint64_t)&v91);
    if (v91)
    {
      LODWORD(v82) = 3;
      v83 = "requires the same encoding for all operands and results";
      v84 = 55;
      v50 = &v82;
      v51 = (char *)v94;
      if (v95 >= v96)
      {
        v75 = v95 + 1;
        if (v94 <= &v82 && (char *)v94 + 24 * v95 > (char *)&v82)
        {
          v79 = (char *)&v82 - (_BYTE *)v94;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v75, 24);
          v51 = (char *)v94;
          v50 = (uint64_t *)((char *)v94 + v79);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v75, 24);
          v50 = &v82;
          v51 = (char *)v94;
        }
      }
      v52 = &v51[24 * v95];
      v53 = *(_OWORD *)v50;
      *((_QWORD *)v52 + 2) = v50[2];
      *(_OWORD *)v52 = v53;
      ++v95;
    }
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v91);
    if (v91)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v91);
    if (!v102)
      return v7;
    v54 = (_QWORD **)__p;
    if (__p)
    {
      v55 = v101;
      v56 = __p;
      if (v101 != __p)
      {
        do
          v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
        while (v55 != v54);
        v56 = __p;
      }
      v101 = v54;
      operator delete(v56);
    }
    v57 = v98;
    if (v98)
    {
      v58 = v99;
      v59 = v98;
      if (v99 != v98)
      {
        do
        {
          v61 = (void *)*--v58;
          v60 = v61;
          *v58 = 0;
          if (v61)
            operator delete[](v60);
        }
        while (v58 != v57);
LABEL_115:
        v59 = v98;
      }
LABEL_116:
      v99 = v57;
      operator delete(v59);
    }
LABEL_117:
    v49 = v94;
    if (v94 == v97)
      return v7;
    goto LABEL_118;
  }
LABEL_25:
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v17 = *((_QWORD *)this + 9);
    v18 = *((unsigned int *)this + 17);
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v91 = v17;
  v92 = v18;
  mlir::OperandRange::getTypes(&v91, &v82);
  v19 = v82;
  v20 = v84;
  if (v82 == v84 && v83 == v85)
    return 1;
  v21 = v82 + 32 * (_QWORD)v83 + 24;
  v22 = &v85[~(unint64_t)v83];
  while (1)
  {
    v23 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::getElementTypeOrSelf(v23) != ElementTypeOrSelf || !mlir::verifyCompatibleShape(v23, v3))
      break;
    if (Values)
    {
      v24 = *(_UNKNOWN **)(*v23 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id ? v23 : 0;
      v81 = v24;
      if (Values != mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v81))
      {
        v87 = 257;
        mlir::Operation::emitOpError((uint64_t *)this, v86, (uint64_t)&v91);
        if (v91)
        {
          LODWORD(v88) = 3;
          v89 = "requires the same encoding for all operands and results";
          v90 = 55;
          v62 = (char *)&v88;
          v63 = (char *)v94;
          if (v95 >= v96)
          {
            v76 = v95 + 1;
            if (v94 <= &v88 && (char *)v94 + 24 * v95 > (char *)&v88)
            {
              v80 = (char *)&v88 - (_BYTE *)v94;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v76, 24);
              v63 = (char *)v94;
              v62 = (char *)v94 + v80;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v76, 24);
              v62 = (char *)&v88;
              v63 = (char *)v94;
            }
          }
          v64 = &v63[24 * v95];
          v65 = *(_OWORD *)v62;
          *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
          *(_OWORD *)v64 = v65;
          ++v95;
        }
        v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v91);
        if (v91)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v91);
        if (!v102)
          return v7;
        v66 = (_QWORD **)__p;
        if (__p)
        {
          v67 = v101;
          v68 = __p;
          if (v101 != __p)
          {
            do
              v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
            while (v67 != v66);
            v68 = __p;
          }
          v101 = v66;
          operator delete(v68);
        }
        v57 = v98;
        if (!v98)
          goto LABEL_117;
        v69 = v99;
        v59 = v98;
        if (v99 == v98)
          goto LABEL_116;
        do
        {
          v71 = (void *)*--v69;
          v70 = v71;
          *v69 = 0;
          if (v71)
            operator delete[](v70);
        }
        while (v69 != v57);
        goto LABEL_115;
      }
    }
    v26 = v22-- != 0;
    v21 += 32;
    if (v19 == v20 && !v26)
      return 1;
  }
  v87 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, v86, (uint64_t)&v91);
  if (v91)
  {
    LODWORD(v88) = 3;
    v89 = "requires the same type for all operands and results";
    v90 = 51;
    v39 = (char *)&v88;
    v40 = (char *)v94;
    if (v95 >= v96)
    {
      v74 = v95 + 1;
      if (v94 <= &v88 && (char *)v94 + 24 * v95 > (char *)&v88)
      {
        v78 = (char *)&v88 - (_BYTE *)v94;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v74, 24);
        v40 = (char *)v94;
        v39 = (char *)v94 + v78;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v74, 24);
        v39 = (char *)&v88;
        v40 = (char *)v94;
      }
    }
    v41 = &v40[24 * v95];
    v42 = *(_OWORD *)v39;
    *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
    *(_OWORD *)v41 = v42;
    ++v95;
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v91);
  if (v91)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v91);
  if (!v102)
    return v7;
  v43 = (_QWORD **)__p;
  if (__p)
  {
    v44 = v101;
    v45 = __p;
    if (v101 != __p)
    {
      do
        v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
      while (v44 != v43);
      v45 = __p;
    }
    v101 = v43;
    operator delete(v45);
  }
  v34 = v98;
  if (!v98)
    goto LABEL_79;
  v46 = v99;
  v36 = v98;
  if (v99 == v98)
    goto LABEL_78;
  do
  {
    v48 = (void *)*--v46;
    v47 = v48;
    *v46 = 0;
    if (v48)
      operator delete[](v47);
  }
  while (v46 != v34);
LABEL_77:
  v36 = v98;
LABEL_78:
  v99 = v34;
  operator delete(v36);
LABEL_79:
  v49 = v94;
  if (v94 != v97)
LABEL_118:
    free(v49);
  return v7;
}

uint64_t mlir::OpTrait::impl::verifyIsTerminator(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void **v13;
  __int16 v14;
  _QWORD v15[3];
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *__p;
  _QWORD **v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 2);
  if (v2 && *(mlir::OpTrait::impl **)(v2 + 32) == this)
    return 1;
  v13 = (const void **)"must be the last operation in the parent block";
  v14 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v13, (uint64_t)v15);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
  if (v15[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
  if (v22)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v21;
      v6 = __p;
      if (v21 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v21 = v4;
      operator delete(v6);
    }
    v7 = v18;
    if (v18)
    {
      v8 = v19;
      v9 = v18;
      if (v19 != v18)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v18;
      }
      v19 = v7;
      operator delete(v9);
    }
    if (v16 != &v17)
      free(v16);
  }
  return v3;
}

uint64_t mlir::OpTrait::impl::verifyZeroSuccessors(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v3;
  int *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v18;
  int64_t v19;
  const void **v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 10))
    return 1;
  v20 = (const void **)"requires 0 successors but found ";
  v21 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v20, (uint64_t)v24);
  if (v24[0])
  {
    v3 = *((unsigned int *)this + 10);
    v22 = 5;
    v23 = v3;
    v4 = &v22;
    v5 = (char *)v25;
    if (v26 >= v27)
    {
      v18 = v26 + 1;
      if (v25 <= &v22 && (char *)v25 + 24 * v26 > (char *)&v22)
      {
        v19 = (char *)&v22 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v18, 24);
        v5 = (char *)v25;
        v4 = (int *)((char *)v25 + v19);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v18, 24);
        v4 = &v22;
        v5 = (char *)v25;
      }
    }
    v6 = &v5[24 * v26];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    ++v26;
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  if (v33)
  {
    v9 = (_QWORD **)__p;
    if (__p)
    {
      v10 = v32;
      v11 = __p;
      if (v32 != __p)
      {
        do
          v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        v11 = __p;
      }
      v32 = v9;
      operator delete(v11);
    }
    v12 = v29;
    if (v29)
    {
      v13 = v30;
      v14 = v29;
      if (v30 != v29)
      {
        do
        {
          v16 = (void *)*--v13;
          v15 = v16;
          *v13 = 0;
          if (v16)
            operator delete[](v15);
        }
        while (v13 != v12);
        v14 = v29;
      }
      v30 = v12;
      operator delete(v14);
    }
    if (v25 != v28)
      free(v25);
  }
  return v8;
}

uint64_t mlir::OpTrait::impl::verifyOneSuccessor(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v4;
  int *v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  int64_t v19;
  const void **v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 10) == 1)
    return verifyTerminatorSuccessors(this);
  v20 = (const void **)"requires 1 successor but found ";
  v21 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v20, (uint64_t)v24);
  if (v24[0])
  {
    v4 = *((unsigned int *)this + 10);
    v22 = 5;
    v23 = v4;
    v5 = &v22;
    v6 = (char *)v25;
    if (v26 >= v27)
    {
      v18 = v26 + 1;
      if (v25 <= &v22 && (char *)v25 + 24 * v26 > (char *)&v22)
      {
        v19 = (char *)&v22 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v18, 24);
        v6 = (char *)v25;
        v5 = (int *)((char *)v25 + v19);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v18, 24);
        v5 = &v22;
        v6 = (char *)v25;
      }
    }
    v7 = &v6[24 * v26];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v7 = v8;
    ++v26;
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return v9;
}

uint64_t verifyTerminatorSuccessors(mlir::Operation *a1)
{
  mlir::Block *v2;
  unint64_t Parent;
  uint64_t v4;
  mlir::Block **i;
  uint64_t v6;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)*((_QWORD *)a1 + 2);
  if (v2)
  {
    Parent = mlir::Block::getParent(v2);
    mlir::SuccessorRange::SuccessorRange(&v18, a1);
    v4 = v19;
    if (!v19)
      return 1;
  }
  else
  {
    Parent = 0;
    mlir::SuccessorRange::SuccessorRange(&v18, a1);
    v4 = v19;
    if (!v19)
      return 1;
  }
  for (i = (mlir::Block **)(v18 + 24); mlir::Block::getParent(*i) == Parent; i += 4)
  {
    if (!--v4)
      return 1;
  }
  v16 = "reference to block defined in another region";
  v17 = 259;
  mlir::Operation::emitError((uint64_t *)a1, (uint64_t)&v16, (uint64_t)&v18);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v18);
  if (v18)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v18);
  if (v26)
  {
    v8 = (_QWORD **)__p;
    if (__p)
    {
      v9 = v25;
      v10 = __p;
      if (v25 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v25 = v8;
      operator delete(v10);
    }
    v11 = v22;
    if (v22)
    {
      v12 = v23;
      v13 = v22;
      if (v23 != v22)
      {
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
        v13 = v22;
      }
      v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21)
      free(v20);
  }
  return v6;
}

uint64_t mlir::OpTrait::impl::verifyNSuccessors(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unsigned int v4;
  int *v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  const char *v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  BOOL v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  const void **v37;
  __int16 v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  void *v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE v46[96];
  void *v47;
  _QWORD *v48;
  void *__p;
  _QWORD **v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 10) == (_DWORD)a2)
    return verifyTerminatorSuccessors(this);
  v4 = a2;
  v37 = (const void **)"requires ";
  v38 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v37, (uint64_t)v42);
  if (v42[0])
  {
    v39 = 5;
    v40 = v4;
    v5 = &v39;
    v6 = (char *)v43;
    if (v44 >= v45)
    {
      v29 = v44 + 1;
      if (v43 <= &v39 && (char *)v43 + 24 * v44 > (char *)&v39)
      {
        v34 = (char *)&v39 - (_BYTE *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
        v6 = (char *)v43;
        v5 = (int *)((char *)v43 + v34);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
        v5 = &v39;
        v6 = (char *)v43;
      }
    }
    v7 = &v6[24 * v44];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v7 = v8;
    v9 = ++v44;
    if (v42[0])
    {
      v39 = 3;
      v40 = (unint64_t)" successors but found ";
      v41 = 22;
      v10 = &v39;
      v11 = (char *)v43;
      if (v9 >= v45)
      {
        v30 = v9 + 1;
        v31 = (char *)v43 + 24 * v9 > (char *)&v39;
        if (v43 <= &v39 && v31)
        {
          v35 = (char *)&v39 - (_BYTE *)v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v30, 24);
          v11 = (char *)v43;
          v10 = (int *)((char *)v43 + v35);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v30, 24);
          v10 = &v39;
          v11 = (char *)v43;
        }
      }
      v12 = &v11[24 * v44];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      v14 = ++v44;
      if (v42[0])
      {
        v15 = (const char *)*((unsigned int *)this + 10);
        v39 = 5;
        v40 = (unint64_t)v15;
        v16 = &v39;
        v17 = (char *)v43;
        if (v14 >= v45)
        {
          v32 = v14 + 1;
          v33 = (char *)v43 + 24 * v14 > (char *)&v39;
          if (v43 <= &v39 && v33)
          {
            v36 = (char *)&v39 - (_BYTE *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            v17 = (char *)v43;
            v16 = (int *)((char *)v43 + v36);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            v16 = &v39;
            v17 = (char *)v43;
          }
        }
        v18 = &v17[24 * v44];
        v19 = *(_OWORD *)v16;
        *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
        *(_OWORD *)v18 = v19;
        ++v44;
      }
    }
  }
  v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
  if (v42[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
  if (v51)
  {
    v21 = (_QWORD **)__p;
    if (__p)
    {
      v22 = v50;
      v23 = __p;
      if (v50 != __p)
      {
        do
          v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        v23 = __p;
      }
      v50 = v21;
      operator delete(v23);
    }
    v24 = v47;
    if (v47)
    {
      v25 = v48;
      v26 = v47;
      if (v48 != v47)
      {
        do
        {
          v28 = (void *)*--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            operator delete[](v27);
        }
        while (v25 != v24);
        v26 = v47;
      }
      v48 = v24;
      operator delete(v26);
    }
    if (v43 != v46)
      free(v43);
  }
  return v20;
}

uint64_t mlir::OpTrait::impl::verifyAtLeastNSuccessors(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unsigned int v3;
  int *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  const char *v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  BOOL v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  const void **v37;
  __int16 v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  void *v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE v46[96];
  void *v47;
  _QWORD *v48;
  void *__p;
  _QWORD **v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 10) >= a2)
    return verifyTerminatorSuccessors(this);
  v3 = a2;
  v37 = (const void **)"requires at least ";
  v38 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v37, (uint64_t)v42);
  if (v42[0])
  {
    v39 = 5;
    v40 = v3;
    v4 = &v39;
    v5 = (char *)v43;
    if (v44 >= v45)
    {
      v29 = v44 + 1;
      if (v43 <= &v39 && (char *)v43 + 24 * v44 > (char *)&v39)
      {
        v34 = (char *)&v39 - (_BYTE *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
        v5 = (char *)v43;
        v4 = (int *)((char *)v43 + v34);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
        v4 = &v39;
        v5 = (char *)v43;
      }
    }
    v6 = &v5[24 * v44];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    v8 = ++v44;
    if (v42[0])
    {
      v39 = 3;
      v40 = (unint64_t)" successors but found ";
      v41 = 22;
      v9 = &v39;
      v10 = (char *)v43;
      if (v8 >= v45)
      {
        v30 = v8 + 1;
        v31 = (char *)v43 + 24 * v8 > (char *)&v39;
        if (v43 <= &v39 && v31)
        {
          v35 = (char *)&v39 - (_BYTE *)v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v30, 24);
          v10 = (char *)v43;
          v9 = (int *)((char *)v43 + v35);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v30, 24);
          v9 = &v39;
          v10 = (char *)v43;
        }
      }
      v11 = &v10[24 * v44];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v44;
      if (v42[0])
      {
        v14 = (const char *)*((unsigned int *)this + 10);
        v39 = 5;
        v40 = (unint64_t)v14;
        v15 = &v39;
        v16 = (char *)v43;
        if (v13 >= v45)
        {
          v32 = v13 + 1;
          v33 = (char *)v43 + 24 * v13 > (char *)&v39;
          if (v43 <= &v39 && v33)
          {
            v36 = (char *)&v39 - (_BYTE *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            v16 = (char *)v43;
            v15 = (int *)((char *)v43 + v36);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            v15 = &v39;
            v16 = (char *)v43;
          }
        }
        v17 = &v16[24 * v44];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v17 = v18;
        ++v44;
      }
    }
  }
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
  if (v42[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
  if (v51)
  {
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v50;
      v22 = __p;
      if (v50 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v50 = v20;
      operator delete(v22);
    }
    v23 = v47;
    if (v47)
    {
      v24 = v48;
      v25 = v47;
      if (v48 != v47)
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v47;
      }
      v48 = v23;
      operator delete(v25);
    }
    if (v43 != v46)
      free(v43);
  }
  return v19;
}

uint64_t mlir::OpTrait::impl::verifyValueSizeAttr(uint64_t a1, const void *a2, size_t a3, const void **a4, const char *a5, const char *a6)
{
  uint64_t v12;
  char v13;
  _QWORD *v14;
  _BOOL4 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int *v22;
  const void ***v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  const void ***v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  int32x4_t *v48;
  int32x4_t v49;
  uint64_t v50;
  int32x4_t v51;
  int v52;
  const char *v53;
  const void ***v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  const void ***v59;
  char *v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  const void ***v64;
  char *v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  const void ***v69;
  char *v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  const void ***v74;
  char *v75;
  char *v76;
  __int128 v77;
  const void ***v78;
  char *v79;
  char *v80;
  __int128 v81;
  _QWORD **v82;
  _QWORD **v83;
  void *v84;
  _QWORD *v85;
  void *v86;
  void *v87;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  BOOL v93;
  unint64_t v94;
  BOOL v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  BOOL v99;
  unint64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  int64_t v108;
  const void **v109[4];
  __int16 v110;
  _QWORD *v111;
  const void **v112;
  const char *v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  _BYTE v117[16];
  void *v118;
  unsigned int v119;
  unsigned int v120;
  _BYTE v121[96];
  void *v122;
  _QWORD *v123;
  void *__p;
  _QWORD **v125;
  char v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 47))
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, const void *, size_t))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48), a1, a2, a3);
    if (v13)
    {
      v14 = (_QWORD *)v12;
      if (v12)
        goto LABEL_4;
LABEL_15:
      v111 = 0;
      goto LABEL_16;
    }
  }
  v14 = (_QWORD *)mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  if (!v14)
    goto LABEL_15;
LABEL_4:
  v15 = mlir::detail::DenseArrayAttrImpl<int>::classof(v14);
  if (v15)
    v16 = v14;
  else
    v16 = 0;
  v111 = v16;
  if (!v15)
  {
LABEL_16:
    v109[0] = (const void **)"requires dense i32 array attribute '";
    v110 = 259;
    mlir::Operation::emitOpError((uint64_t *)a1, v109, (uint64_t)&v116);
    if (v116)
    {
      v115 = 261;
      v112 = (const void **)a2;
      v113 = (const char *)a3;
      mlir::Diagnostic::operator<<((uint64_t)v117, &v112);
      if (v116)
      {
        LODWORD(v112) = 3;
        v113 = "'";
        v114 = 1;
        v23 = &v112;
        v24 = (char *)v118;
        if (v119 >= v120)
        {
          v89 = v119 + 1;
          if (v118 <= &v112 && (char *)v118 + 24 * v119 > (char *)&v112)
          {
            v101 = (char *)&v112 - (_BYTE *)v118;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v89, 24);
            v24 = (char *)v118;
            v23 = (const void ***)((char *)v118 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v89, 24);
            v23 = &v112;
            v24 = (char *)v118;
          }
        }
        v25 = &v24[24 * v119];
        v26 = *(_OWORD *)v23;
        *((_QWORD *)v25 + 2) = v23[2];
        *(_OWORD *)v25 = v26;
        ++v119;
      }
    }
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if (v116)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    if (v126)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v125;
        v30 = __p;
        if (v125 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v125 = v28;
        operator delete(v30);
      }
      v31 = v122;
      if (!v122)
        goto LABEL_90;
      v32 = v123;
      v33 = v122;
      if (v123 == v122)
        goto LABEL_89;
      do
      {
        v35 = (void *)*--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v32 != v31);
      goto LABEL_88;
    }
    return v27;
  }
  v17 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v111);
  if (v18)
  {
    v19 = 0;
    while ((*(_DWORD *)(v17 + v19) & 0x80000000) == 0)
    {
      v19 += 4;
      if (4 * v18 == v19)
      {
        v20 = (v18 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v20 < 7)
        {
          v21 = 0;
          v22 = (int *)v17;
          do
          {
LABEL_56:
            v52 = *v22++;
            v21 += v52;
          }
          while (v22 != (int *)(v17 + 4 * v18));
          goto LABEL_57;
        }
        v46 = v20 + 1;
        v47 = (v20 + 1) & 0x7FFFFFFFFFFFFFF8;
        v22 = (int *)(v17 + 4 * v47);
        v48 = (int32x4_t *)(v17 + 16);
        v49 = 0uLL;
        v50 = v47;
        v51 = 0uLL;
        do
        {
          v49 = vaddq_s32(v48[-1], v49);
          v51 = vaddq_s32(*v48, v51);
          v48 += 2;
          v50 -= 8;
        }
        while (v50);
        v21 = vaddvq_s32(vaddq_s32(v51, v49));
        if (v46 != v47)
          goto LABEL_56;
        goto LABEL_57;
      }
    }
    v109[0] = (const void **)"'";
    v110 = 259;
    mlir::Operation::emitOpError((uint64_t *)a1, v109, (uint64_t)&v116);
    if (v116)
    {
      v115 = 261;
      v112 = (const void **)a2;
      v113 = (const char *)a3;
      mlir::Diagnostic::operator<<((uint64_t)v117, &v112);
      if (v116)
      {
        LODWORD(v112) = 3;
        v113 = "' attribute cannot have negative elements";
        v114 = 41;
        v36 = &v112;
        v37 = (char *)v118;
        if (v119 >= v120)
        {
          v91 = v119 + 1;
          if (v118 <= &v112 && (char *)v118 + 24 * v119 > (char *)&v112)
          {
            v103 = (char *)&v112 - (_BYTE *)v118;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v91, 24);
            v37 = (char *)v118;
            v36 = (const void ***)((char *)v118 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v91, 24);
            v36 = &v112;
            v37 = (char *)v118;
          }
        }
        v38 = &v37[24 * v119];
        v39 = *(_OWORD *)v36;
        *((_QWORD *)v38 + 2) = v36[2];
        *(_OWORD *)v38 = v39;
        ++v119;
      }
    }
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if (v116)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    if (!v126)
      return v27;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v125;
      v42 = __p;
      if (v125 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v125 = v40;
      operator delete(v42);
    }
    v31 = v122;
    if (!v122)
      goto LABEL_90;
    v43 = v123;
    v33 = v122;
    if (v123 == v122)
      goto LABEL_89;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v31);
    goto LABEL_88;
  }
  v21 = 0;
LABEL_57:
  v53 = (const char *)v21;
  if ((const char *)v21 == a6)
    return 1;
  v110 = 257;
  mlir::Operation::emitOpError((uint64_t *)a1, v109, (uint64_t)&v116);
  if (v116)
  {
    v115 = 261;
    v112 = a4;
    v113 = a5;
    mlir::Diagnostic::operator<<((uint64_t)v117, &v112);
    if (v116)
    {
      LODWORD(v112) = 3;
      v113 = " count (";
      v114 = 8;
      v54 = &v112;
      v55 = (char *)v118;
      if (v119 >= v120)
      {
        v90 = v119 + 1;
        if (v118 <= &v112 && (char *)v118 + 24 * v119 > (char *)&v112)
        {
          v102 = (char *)&v112 - (_BYTE *)v118;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v90, 24);
          v55 = (char *)v118;
          v54 = (const void ***)((char *)v118 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v90, 24);
          v54 = &v112;
          v55 = (char *)v118;
        }
      }
      v56 = &v55[24 * v119];
      v57 = *(_OWORD *)v54;
      *((_QWORD *)v56 + 2) = v54[2];
      *(_OWORD *)v56 = v57;
      v58 = ++v119;
      if (v116)
      {
        LODWORD(v112) = 5;
        v113 = a6;
        v59 = &v112;
        v60 = (char *)v118;
        if (v58 >= v120)
        {
          v92 = v58 + 1;
          v93 = (char *)v118 + 24 * v58 > (char *)&v112;
          if (v118 <= &v112 && v93)
          {
            v104 = (char *)&v112 - (_BYTE *)v118;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v92, 24);
            v60 = (char *)v118;
            v59 = (const void ***)((char *)v118 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v92, 24);
            v59 = &v112;
            v60 = (char *)v118;
          }
        }
        v61 = &v60[24 * v119];
        v62 = *(_OWORD *)v59;
        *((_QWORD *)v61 + 2) = v59[2];
        *(_OWORD *)v61 = v62;
        v63 = ++v119;
        if (v116)
        {
          LODWORD(v112) = 3;
          v113 = ") does not match with the total size (";
          v114 = 38;
          v64 = &v112;
          v65 = (char *)v118;
          if (v63 >= v120)
          {
            v94 = v63 + 1;
            v95 = (char *)v118 + 24 * v63 > (char *)&v112;
            if (v118 <= &v112 && v95)
            {
              v105 = (char *)&v112 - (_BYTE *)v118;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v94, 24);
              v65 = (char *)v118;
              v64 = (const void ***)((char *)v118 + v105);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v94, 24);
              v64 = &v112;
              v65 = (char *)v118;
            }
          }
          v66 = &v65[24 * v119];
          v67 = *(_OWORD *)v64;
          *((_QWORD *)v66 + 2) = v64[2];
          *(_OWORD *)v66 = v67;
          v68 = ++v119;
          if (v116)
          {
            LODWORD(v112) = 5;
            v113 = v53;
            v69 = &v112;
            v70 = (char *)v118;
            if (v68 >= v120)
            {
              v96 = v68 + 1;
              v97 = (char *)v118 + 24 * v68 > (char *)&v112;
              if (v118 <= &v112 && v97)
              {
                v106 = (char *)&v112 - (_BYTE *)v118;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v96, 24);
                v70 = (char *)v118;
                v69 = (const void ***)((char *)v118 + v106);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v96, 24);
                v69 = &v112;
                v70 = (char *)v118;
              }
            }
            v71 = &v70[24 * v119];
            v72 = *(_OWORD *)v69;
            *((_QWORD *)v71 + 2) = v69[2];
            *(_OWORD *)v71 = v72;
            v73 = ++v119;
            if (v116)
            {
              LODWORD(v112) = 3;
              v113 = ") specified in attribute '";
              v114 = 26;
              v74 = &v112;
              v75 = (char *)v118;
              if (v73 >= v120)
              {
                v98 = v73 + 1;
                v99 = (char *)v118 + 24 * v73 > (char *)&v112;
                if (v118 <= &v112 && v99)
                {
                  v107 = (char *)&v112 - (_BYTE *)v118;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
                  v75 = (char *)v118;
                  v74 = (const void ***)((char *)v118 + v107);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
                  v74 = &v112;
                  v75 = (char *)v118;
                }
              }
              v76 = &v75[24 * v119];
              v77 = *(_OWORD *)v74;
              *((_QWORD *)v76 + 2) = v74[2];
              *(_OWORD *)v76 = v77;
              ++v119;
              if (v116)
              {
                v115 = 261;
                v112 = (const void **)a2;
                v113 = (const char *)a3;
                mlir::Diagnostic::operator<<((uint64_t)v117, &v112);
                if (v116)
                {
                  LODWORD(v112) = 3;
                  v113 = "'";
                  v114 = 1;
                  v78 = &v112;
                  v79 = (char *)v118;
                  if (v119 >= v120)
                  {
                    v100 = v119 + 1;
                    if (v118 <= &v112 && (char *)v118 + 24 * v119 > (char *)&v112)
                    {
                      v108 = (char *)&v112 - (_BYTE *)v118;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v100, 24);
                      v79 = (char *)v118;
                      v78 = (const void ***)((char *)v118 + v108);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v100, 24);
                      v78 = &v112;
                      v79 = (char *)v118;
                    }
                  }
                  v80 = &v79[24 * v119];
                  v81 = *(_OWORD *)v78;
                  *((_QWORD *)v80 + 2) = v78[2];
                  *(_OWORD *)v80 = v81;
                  ++v119;
                }
              }
            }
          }
        }
      }
    }
  }
  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
  if (v116)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
  if (v126)
  {
    v82 = (_QWORD **)__p;
    if (__p)
    {
      v83 = v125;
      v84 = __p;
      if (v125 != __p)
      {
        do
          v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        v84 = __p;
      }
      v125 = v82;
      operator delete(v84);
    }
    v31 = v122;
    if (!v122)
      goto LABEL_90;
    v85 = v123;
    v33 = v122;
    if (v123 == v122)
    {
LABEL_89:
      v123 = v31;
      operator delete(v33);
LABEL_90:
      if (v118 != v121)
        free(v118);
      return v27;
    }
    do
    {
      v87 = (void *)*--v85;
      v86 = v87;
      *v85 = 0;
      if (v87)
        operator delete[](v86);
    }
    while (v85 != v31);
LABEL_88:
    v33 = v122;
    goto LABEL_89;
  }
  return v27;
}

uint64_t mlir::OpTrait::impl::verifyOperandSizeAttr(uint64_t a1, const void *a2, size_t a3)
{
  const char *v3;

  if ((*(_BYTE *)(a1 + 46) & 0x80) != 0)
    v3 = (const char *)*(unsigned int *)(a1 + 68);
  else
    v3 = 0;
  return mlir::OpTrait::impl::verifyValueSizeAttr(a1, a2, a3, (const void **)"operand", (const char *)7, v3);
}

uint64_t mlir::OpTrait::impl::verifyNoRegionArguments(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int RegionNumber;
  int *v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  int64_t v36;
  int64_t v37;
  const void **v38[4];
  __int16 v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48;
  _QWORD *v49;
  void *__p;
  _QWORD **v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) == 0)
    return 1;
  v3 = (_QWORD *)((((unint64_t)this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *((unsigned int *)this + 10));
  v4 = 24 * (v2 & 0x7FFFFF);
  while (1)
  {
    if (v3 != (_QWORD *)*v3)
    {
      v5 = v3[1];
      v6 = v5 ? v5 - 8 : 0;
      if (((*(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48)) & 0x7FFFFFFF8) != 0)
        break;
    }
    v3 += 3;
    v4 -= 24;
    if (!v4)
      return 1;
  }
  if ((v2 & 0x7FFFFE) != 0)
  {
    v38[0] = (const void **)"region #";
    v39 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, v38, (uint64_t)v43);
    RegionNumber = mlir::Region::getRegionNumber((unint64_t)v3);
    if (v43[0])
    {
      v40 = 5;
      v41 = RegionNumber;
      v8 = &v40;
      v9 = (char *)v44;
      if (v45 >= v46)
      {
        v33 = v45 + 1;
        if (v44 <= &v40 && (char *)v44 + 24 * v45 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
          v9 = (char *)v44;
          v8 = (int *)((char *)v44 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
          v8 = &v40;
          v9 = (char *)v44;
        }
      }
      v10 = &v9[24 * v45];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      v12 = ++v45;
      if (v43[0])
      {
        v40 = 3;
        v41 = (unint64_t)" should have no arguments";
        v42 = 25;
        v13 = &v40;
        v14 = (char *)v44;
        if (v12 >= v46)
        {
          v34 = v12 + 1;
          v35 = (char *)v44 + 24 * v12 > (char *)&v40;
          if (v44 <= &v40 && v35)
          {
            v37 = (char *)&v40 - (_BYTE *)v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v34, 24);
            v14 = (char *)v44;
            v13 = (int *)((char *)v44 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v34, 24);
            v13 = &v40;
            v14 = (char *)v44;
          }
        }
        v15 = &v14[24 * v45];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v15 = v16;
        ++v45;
      }
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (v52)
    {
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v51;
        v20 = __p;
        if (v51 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v51 = v18;
        operator delete(v20);
      }
      v21 = v48;
      if (!v48)
        goto LABEL_47;
      v22 = v49;
      v23 = v48;
      if (v49 == v48)
      {
LABEL_46:
        v49 = v21;
        operator delete(v23);
LABEL_47:
        if (v44 != v47)
          free(v44);
        return v17;
      }
      do
      {
        v25 = (void *)*--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v22 != v21);
LABEL_45:
      v23 = v48;
      goto LABEL_46;
    }
  }
  else
  {
    v38[0] = (const void **)"region should have no arguments";
    v39 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, v38, (uint64_t)v43);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (v52)
    {
      v27 = (_QWORD **)__p;
      if (__p)
      {
        v28 = v51;
        v29 = __p;
        if (v51 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v51 = v27;
        operator delete(v29);
      }
      v21 = v48;
      if (!v48)
        goto LABEL_47;
      v30 = v49;
      v23 = v48;
      if (v49 == v48)
        goto LABEL_46;
      do
      {
        v32 = (void *)*--v30;
        v31 = v32;
        *v30 = 0;
        if (v32)
          operator delete[](v31);
      }
      while (v30 != v21);
      goto LABEL_45;
    }
  }
  return v17;
}

uint64_t mlir::OpTrait::impl::verifyElementwise(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  BOOL v8;
  char *v9;
  BOOL v10;
  void *i;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  void *v16;
  char *v18;
  void *v19;
  void *v22;
  BOOL v23;
  char *v25;
  void *v26;
  char *v29;
  void *v30;
  uint64_t v32;
  char *v33;
  void *v34;
  BOOL v35;
  void *v37;
  char *v39;
  void *v40;
  BOOL v41;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  uint64_t *v52;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  _WORD *v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  BOOL v62;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  void *v67;
  BOOL v68;
  uint64_t v70;
  _QWORD **v71;
  _QWORD **v72;
  void *v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  void *v77;
  void *v78;
  _QWORD **v79;
  _QWORD **v80;
  void *v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  BOOL v89;
  _QWORD **v91;
  _QWORD **v92;
  void *v93;
  _QWORD *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  char *v100;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  char *v105;
  int *v106;
  char *v107;
  char *v108;
  __int128 v109;
  _QWORD **v110;
  _QWORD **v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  void *v116;
  void *v117;
  unint64_t v119;
  int64_t v120;
  BOOL v121;
  BOOL v122;
  mlir::OpTrait::impl *v123;
  int v124;
  const char *v125;
  uint64_t v126;
  void *__src;
  uint64_t v128;
  _WORD v129[12];
  unint64_t v130[2];
  void *__dst;
  uint64_t v132;
  _QWORD v133[2];
  __int16 v134;
  char *v135;
  char *v136;
  char *v137;
  void *v138;
  unsigned int v139;
  unsigned int v140;
  _BYTE v141[96];
  void *v142;
  _QWORD *v143;
  void *__p;
  _QWORD **v145;
  char v146;
  char *v147;
  uint64_t v148;
  _BYTE v149[16];
  char *v150;
  uint64_t v151;
  _QWORD v152[3];

  v152[1] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 9);
  v4 = (char *)this - 16;
  if (!(_DWORD)v3)
    v4 = 0;
  __dst = v4;
  v132 = v3;
  mlir::OperandRange::getTypes((uint64_t *)&__dst, (uint64_t *)&v135);
  v5 = v135;
  v6 = v136;
  v7 = (char *)v138;
  v8 = v135 != v137;
  if (v135 != v137 || v136 != v138)
  {
    if (v135 == v137)
    {
      while (1)
      {
        v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
        v23 = v22 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
           || v22 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
        if (v23 || v22 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          break;
        if (v7 == ++v6)
        {
          v6 = v7;
          break;
        }
      }
    }
    else
    {
      for (i = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v135, (uint64_t)v136)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
            i != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
            i = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136))
      {
        if (i == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || i == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          break;
        }
        ++v6;
      }
    }
  }
  v9 = (char *)v138;
  v150 = (char *)v152;
  v151 = 0x100000000;
  v10 = v5 != v137 || v6 != v138;
  if (v10)
  {
    if (v8)
    {
      if (v5 != v137)
      {
        while (1)
          mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)++v6);
      }
      v121 = 0;
      v122 = v8;
      v123 = this;
      v13 = 0;
      v29 = v6;
      do
      {
        do
        {
          v30 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)++v29)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
          if (v30 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
            break;
        }
        while (v30 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
             && v30 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id);
        ++v13;
      }
      while (v29 != v9);
    }
    else
    {
      if (v5 != v137)
      {
        while (1)
        {
          do
          {
LABEL_34:
            v18 = v6 + 1;
            v6 = v7;
          }
          while (v18 == v7);
          v6 = v18;
          do
          {
            v19 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
            if (v19 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
              || v19 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
              || v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
            {
              goto LABEL_34;
            }
            ++v6;
          }
          while (v7 != v6);
          v6 = v7;
        }
      }
      v121 = 0;
      v122 = v8;
      v123 = this;
      v13 = 0;
      v32 = (uint64_t)v6;
      do
      {
        v33 = (char *)(v32 + 1);
        v32 = (uint64_t)v7;
        if (v33 != v7)
        {
          v32 = (uint64_t)v33;
          while (1)
          {
            v34 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, v32)
                                                   + 8) & 0xFFFFFFFFFFFFFFF8)
                           + 136);
            v35 = v34 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
               || v34 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
            if (v35 || v34 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              break;
            if (v7 == (char *)++v32)
            {
              v32 = (uint64_t)v7;
              break;
            }
          }
        }
        ++v13;
      }
      while ((char *)v32 != v9);
    }
  }
  else
  {
    v121 = v5 != v137;
    v122 = v8;
    v123 = this;
    v13 = 0;
  }
  v14 = v151;
  if (v13 + (unint64_t)v151 > HIDWORD(v151))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v152, v13 + v151, 8);
    v14 = v151;
  }
  if (v10)
  {
    v15 = (unint64_t *)&v150[8 * v14];
    if (v122)
    {
      if (v121)
      {
        while (1)
        {
          *v15 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6) + 8) & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)++v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
            if (v16 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
              break;
          }
          while (v16 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
               && v16 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id);
          ++v15;
        }
      }
      do
      {
        *v15 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6) + 8) & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v37 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)++v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
          if (v37 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
            break;
        }
        while (v37 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
             && v37 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id);
        ++v15;
      }
      while (v6 != v9);
    }
    else
    {
      if (v121)
      {
        while (1)
        {
          *v15 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6) + 8) & 0xFFFFFFFFFFFFFFF8;
          v25 = v6 + 1;
          v6 = v7;
          if (v25 != v7)
          {
            v6 = v25;
            do
            {
              v26 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
              if (v26 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
                || v26 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
                || v26 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              {
                goto LABEL_56;
              }
              ++v6;
            }
            while (v7 != v6);
            v6 = v7;
          }
LABEL_56:
          ++v15;
        }
      }
      do
      {
        *v15 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6) + 8) & 0xFFFFFFFFFFFFFFF8;
        v39 = v6 + 1;
        v6 = v7;
        if (v39 != v7)
        {
          v6 = v39;
          while (1)
          {
            v40 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
            v41 = v40 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
               || v40 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
            if (v41 || v40 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              break;
            if (v7 == ++v6)
            {
              v6 = v7;
              break;
            }
          }
        }
        ++v15;
      }
      while (v6 != v9);
    }
  }
  LODWORD(v151) = v151 + v13;
  if ((*((_BYTE *)v123 + 46) & 0x80) != 0)
  {
    v43 = (void *)*((_QWORD *)v123 + 9);
    v44 = *((unsigned int *)v123 + 17);
  }
  else
  {
    v43 = 0;
    v44 = 0;
  }
  __dst = v43;
  v132 = v44;
  mlir::OperandRange::getTypes((uint64_t *)&__dst, (uint64_t *)&v135);
  v46 = v135;
  v45 = (uint64_t)v136;
  v47 = v138;
  if (v135 != v137 || v136 != v138)
  {
    if (v135 == v137)
    {
      v66 = (uint64_t)&v135[32 * (_QWORD)v136 + 24];
      while (1)
      {
        v67 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v66 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        v68 = v67 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
           || v67 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
        if (v68 || v67 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          break;
        ++v45;
        v66 += 32;
        if (v138 == (void *)v45)
        {
          v45 = (uint64_t)v138;
          break;
        }
      }
    }
    else
    {
      v50 = &v135[32 * (_QWORD)v136];
      v51 = *(void **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v50 + 3) + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      if (v51 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      {
        v147 = v149;
        v148 = 0x200000000;
        goto LABEL_221;
      }
      v52 = (uint64_t *)(v50 + 56);
      do
      {
        if (v51 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v51 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          break;
        }
        v54 = *v52;
        v52 += 4;
        ++v45;
        v51 = *(void **)(*(_QWORD *)(*(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      }
      while (v51 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id);
    }
  }
  v147 = v149;
  v148 = 0x200000000;
  if (v135 == v137 && v45 == (_QWORD)v138)
  {
    v55 = v148;
    v56 = v151;
    if (!(_DWORD)v151)
      goto LABEL_200;
    goto LABEL_130;
  }
  if (v135 != v137)
  {
    while (1)
    {
      do
      {
LABEL_221:
        v98 = v45++;
        v99 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v135[32 * v45 + 24] + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      }
      while (v99 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id);
      v100 = &v135[32 * v98 + 88];
      do
      {
        if (v99 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v99 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          break;
        }
        v102 = *(_QWORD *)v100;
        v100 += 32;
        ++v45;
        v99 = *(void **)(*(_QWORD *)(*(_QWORD *)(v102 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      }
      while (v99 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id);
    }
  }
  v48 = 0;
  v49 = v45;
  do
  {
    v59 = v48++;
    if ((void *)(v49 + 1) == v138)
      break;
    v60 = (uint64_t)&v135[32 * v49++ + 56];
    while (1)
    {
      v61 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v60 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      v62 = v61 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v61 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (v62 || v61 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        break;
      ++v49;
      v60 += 32;
      if (v138 == (void *)v49)
        goto LABEL_146;
    }
  }
  while (v138 != (void *)v49);
LABEL_146:
  if (v59 < 2)
  {
    v64 = 0;
    v65 = v149;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, v149, v48, 8);
    v64 = v148;
    v65 = v147;
  }
  v85 = (unint64_t *)&v65[8 * v64];
  v86 = *(_QWORD *)(v46[4 * v45 + 3] + 8);
  do
  {
    *v85 = v86 & 0xFFFFFFFFFFFFFFF8;
    if ((void *)(v45 + 1) == v47)
      break;
    v87 = (uint64_t)&v46[4 * v45++ + 7];
    while (1)
    {
      v86 = *(_QWORD *)(*(_QWORD *)v87 + 8);
      v88 = *(void **)(*(_QWORD *)(v86 & 0xFFFFFFFFFFFFFFF8) + 136);
      v89 = v88 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v88 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (v89 || v88 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        break;
      ++v45;
      v87 += 32;
      if (v47 == (void *)v45)
        goto LABEL_199;
    }
    ++v85;
  }
  while (v47 != (void *)v45);
LABEL_199:
  v55 = v148 + v48;
  LODWORD(v148) = v148 + v48;
  v56 = v151;
  if (!(_DWORD)v151)
  {
LABEL_200:
    if (!v55)
    {
      v70 = 1;
      goto LABEL_265;
    }
    __dst = "if an operand is non-scalar, then there must be at least one non-scalar result";
    v134 = 259;
    mlir::Operation::emitOpError((uint64_t *)v123, (const void ***)&__dst, (uint64_t)&v135);
    v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v135);
    if (v135)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v135);
    if (v146)
    {
      v91 = (_QWORD **)__p;
      if (__p)
      {
        v92 = v145;
        v93 = __p;
        if (v145 != __p)
        {
          do
            v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
          while (v92 != v91);
          v93 = __p;
        }
        v145 = v91;
        operator delete(v93);
      }
      v74 = v142;
      if (v142)
      {
        v94 = v143;
        v76 = v142;
        if (v143 == v142)
          goto LABEL_216;
        do
        {
          v96 = (void *)*--v94;
          v95 = v96;
          *v94 = 0;
          if (v96)
            operator delete[](v95);
        }
        while (v94 != v74);
        goto LABEL_215;
      }
      goto LABEL_217;
    }
    goto LABEL_265;
  }
LABEL_130:
  if (v55)
  {
    if ((_DWORD)v56 != *((_DWORD *)v123 + 9))
    {
      __dst = "if an operand is non-scalar, then all results must be non-scalar";
      v134 = 259;
      mlir::Operation::emitOpError((uint64_t *)v123, (const void ***)&__dst, (uint64_t)&v135);
      v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v135);
      if (v135)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v135);
      if (v146)
      {
        v79 = (_QWORD **)__p;
        if (__p)
        {
          v80 = v145;
          v81 = __p;
          if (v145 != __p)
          {
            do
              v80 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v80 - 1);
            while (v80 != v79);
            v81 = __p;
          }
          v145 = v79;
          operator delete(v81);
        }
        v74 = v142;
        if (v142)
        {
          v82 = v143;
          v76 = v142;
          if (v143 == v142)
            goto LABEL_216;
          do
          {
            v84 = (void *)*--v82;
            v83 = v84;
            *v82 = 0;
            if (v84)
              operator delete[](v83);
          }
          while (v82 != v74);
          goto LABEL_215;
        }
        goto LABEL_217;
      }
      goto LABEL_265;
    }
    __src = v129;
    v128 = 0x200000000;
    v135 = v147;
    v136 = v150;
    v137 = &v147[8 * v55];
    v138 = &v150[8 * v56];
    __dst = v137;
    v132 = (uint64_t)v138;
    v133[0] = v137;
    v133[1] = v138;
    llvm::SmallVectorImpl<mlir::Type>::append<llvm::concat_iterator<mlir::Type,mlir::Type*,mlir::Type*>,void>((uint64_t)&__src, &v135, &__dst);
    __dst = v133;
    v132 = 0x400000000;
    v57 = v128;
    v58 = __src;
    if ((_DWORD)v128)
    {
      if (__src == v129)
      {
        v103 = v128;
        v58 = v129;
        if (v128 < 5
          || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v133, v128, 8),
              v103 = v128,
              v58 = __src,
              (_DWORD)v128))
        {
          memcpy(__dst, v58, 8 * v103);
          v58 = __src;
        }
        LODWORD(v132) = v57;
      }
      else
      {
        __dst = __src;
        v132 = v128;
        __src = v129;
        HIDWORD(v128) = 0;
        v58 = v129;
      }
      LODWORD(v128) = 0;
    }
    if (v58 != v129)
    {
      free(v58);
      v57 = v132;
    }
    if (v57)
    {
      v104 = 8 * v57;
      v105 = (char *)__dst;
      while (*(_QWORD *)(**(_QWORD **)v105 + 136) == *(_QWORD *)(**(_QWORD **)__dst + 136))
      {
        v105 += 8;
        v104 -= 8;
        if (!v104)
          goto LABEL_240;
      }
    }
    else
    {
LABEL_240:
      mlir::ValueRange::ValueRange(v130, (uint64_t)__dst, v57);
      if (mlir::verifyCompatibleShapes(v130[0], v130[1]))
      {
        v70 = 1;
        goto LABEL_263;
      }
    }
    v129[8] = 257;
    mlir::Operation::emitOpError((uint64_t *)v123, (const void ***)&__src, (uint64_t)&v135);
    if (v135)
    {
      v124 = 3;
      v125 = "all non-scalar operands/results must have the same shape and base type";
      v126 = 70;
      v106 = &v124;
      v107 = (char *)v138;
      if (v139 >= v140)
      {
        v119 = v139 + 1;
        if (v138 <= &v124 && (char *)v138 + 24 * v139 > (char *)&v124)
        {
          v120 = (char *)&v124 - (_BYTE *)v138;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, v141, v119, 24);
          v107 = (char *)v138;
          v106 = (int *)((char *)v138 + v120);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, v141, v119, 24);
          v106 = &v124;
          v107 = (char *)v138;
        }
      }
      v108 = &v107[24 * v139];
      v109 = *(_OWORD *)v106;
      *((_QWORD *)v108 + 2) = *((_QWORD *)v106 + 2);
      *(_OWORD *)v108 = v109;
      ++v139;
    }
    v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v135);
    if (v135)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v135);
    if (v146)
    {
      v110 = (_QWORD **)__p;
      if (__p)
      {
        v111 = v145;
        v112 = __p;
        if (v145 != __p)
        {
          do
            v111 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v111 - 1);
          while (v111 != v110);
          v112 = __p;
        }
        v145 = v110;
        operator delete(v112);
      }
      v113 = v142;
      if (v142)
      {
        v114 = v143;
        v115 = v142;
        if (v143 != v142)
        {
          do
          {
            v117 = (void *)*--v114;
            v116 = v117;
            *v114 = 0;
            if (v117)
              operator delete[](v116);
          }
          while (v114 != v113);
          v115 = v142;
        }
        v143 = v113;
        operator delete(v115);
      }
      if (v138 != v141)
        free(v138);
    }
LABEL_263:
    v97 = __dst;
    if (__dst == v133)
      goto LABEL_265;
    goto LABEL_264;
  }
  __dst = "if a result is non-scalar, then at least one operand must be non-scalar";
  v134 = 259;
  mlir::Operation::emitOpError((uint64_t *)v123, (const void ***)&__dst, (uint64_t)&v135);
  v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v135);
  if (v135)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v135);
  if (v146)
  {
    v71 = (_QWORD **)__p;
    if (__p)
    {
      v72 = v145;
      v73 = __p;
      if (v145 != __p)
      {
        do
          v72 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v72 - 1);
        while (v72 != v71);
        v73 = __p;
      }
      v145 = v71;
      operator delete(v73);
    }
    v74 = v142;
    if (v142)
    {
      v75 = v143;
      v76 = v142;
      if (v143 == v142)
        goto LABEL_216;
      do
      {
        v78 = (void *)*--v75;
        v77 = v78;
        *v75 = 0;
        if (v78)
          operator delete[](v77);
      }
      while (v75 != v74);
LABEL_215:
      v76 = v142;
LABEL_216:
      v143 = v74;
      operator delete(v76);
    }
LABEL_217:
    v97 = v138;
    if (v138 == v141)
      goto LABEL_265;
LABEL_264:
    free(v97);
  }
LABEL_265:
  if (v147 != v149)
    free(v147);
  if (v150 != (char *)v152)
    free(v150);
  return v70;
}

uint64_t mlir::OpTrait::impl::verifyIsIsolatedFromAbove(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unint64_t v2;
  mlir::Region *v4;
  mlir::Region *v5;
  BOOL v6;
  unsigned int v7;
  mlir::Region *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  mlir::Block *ParentRegion;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  mlir::MLIRContext *Context;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const void ***v35;
  uint64_t v36;
  __int128 v37;
  const mlir::OpPrintingFlags *v38;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  BOOL v66;
  char *v67;
  char *v68;
  _QWORD v69[4];
  __int16 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const void **v78[4];
  __int16 v79;
  __int128 v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  void *__p;
  _QWORD **v87;
  char v88;
  mlir::Region **v89;
  uint64_t v90;
  _QWORD v91[10];

  v91[8] = *MEMORY[0x1E0C80C00];
  v89 = (mlir::Region **)v91;
  v90 = 0x800000000;
  v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) == 0)
  {
LABEL_40:
    v29 = 1;
    goto LABEL_77;
  }
  v4 = (mlir::Region *)((((unint64_t)this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)this + 10));
  v5 = (mlir::Region *)((char *)v4 + 24 * (v2 & 0x7FFFFF));
  while (1)
  {
    if (HIDWORD(v90))
    {
      *v89 = v4;
      v6 = __CFADD__((_DWORD)v90, 1);
      v7 = v90 + 1;
      LODWORD(v90) = v90 + 1;
      if (!v6)
        break;
      goto LABEL_35;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, v91, 1uLL, 8);
    v89[v90] = v4;
    v6 = __CFADD__((_DWORD)v90, 1);
    v7 = v90 + 1;
    LODWORD(v90) = v90 + 1;
    if (!v6)
      break;
LABEL_35:
    v4 = (mlir::Region *)((char *)v4 + 24);
    if (v4 == v5)
      goto LABEL_40;
  }
  while (1)
  {
    v8 = v89[v7 - 1];
    LODWORD(v90) = v7 - 1;
    mlir::Region::OpIterator::OpIterator(&v80, v8, 0);
    mlir::Region::OpIterator::OpIterator(&v76, v8, 1);
    v9 = v81;
    v75 = v81;
    v74 = v80;
    v72 = v80;
    v73 = v81;
    v10 = v77;
    if (v81 != v77)
      break;
LABEL_34:
    v7 = v90;
    if (!(_DWORD)v90)
      goto LABEL_35;
  }
  while (1)
  {
    if ((*(_BYTE *)(v9 + 46) & 0x80) != 0)
    {
      v11 = *(unsigned int *)(v9 + 68);
      if ((_DWORD)v11)
        break;
    }
LABEL_14:
    if ((*(_DWORD *)(v9 + 44) & 0x7FFFFF) != 0)
    {
      if ((v14 & 1) == 0
      {
        *(_QWORD *)&v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
        *((_QWORD *)&v80 + 1) = 91;
        v22 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
        if (*((_QWORD *)&v80 + 1) >= v22)
          v23 = v22;
        else
          v23 = *((_QWORD *)&v80 + 1);
        v24 = v80 + v23;
        v25 = *((_QWORD *)&v80 + 1) - v23;
        v26 = 18;
        if (v25 < 0x12)
          v26 = v25;
        v27 = v25 - v26;
        if (v27 >= v27 - 1)
          v28 = v27 - 1;
        else
          v28 = v27;
        mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v24 + v26, v28);
      }
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 48) + 32))(*(_QWORD *)(v9 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) == 0)
      {
        v15 = *(unsigned int *)(v9 + 44);
        v16 = v15 & 0x7FFFFF;
        if ((v15 & 0x7FFFFF) != 0)
        {
          v17 = (v9 + 16 * ((v15 >> 23) & 1) + ((v15 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
          v18 = *(unsigned int *)(v9 + 40);
          v19 = v90;
          v20 = 24 * v16;
          v21 = v17 + 32 * v18;
          do
          {
            if (v19 >= HIDWORD(v90))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, v91, v19 + 1, 8);
              v19 = v90;
            }
            v89[v19] = (mlir::Region *)v21;
            v19 = v90 + 1;
            LODWORD(v90) = v90 + 1;
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
      }
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v72);
    v9 = v73;
    if (v73 == v10)
      goto LABEL_34;
  }
  v12 = (uint64_t *)(*(_QWORD *)(v9 + 72) + 24);
  while (1)
  {
    v71 = *v12;
    ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v71);
    if (!ParentRegion)
      break;
    if (v4 != ParentRegion && (mlir::Region::isProperAncestor(v4, ParentRegion) & 1) == 0)
    {
      v78[0] = (const void **)"using value defined outside the region";
      v79 = 259;
      mlir::Operation::emitOpError((uint64_t *)v9, v78, (uint64_t)&v80);
      v47 = mlir::Diagnostic::attachNote((uint64_t *)&v80 + 1, *((_QWORD *)this + 3), 1);
      v48 = v47;
      v51 = *(_QWORD *)(v47 + 16);
      v49 = v47 + 16;
      v50 = v51;
      LODWORD(v69[0]) = 3;
      v69[1] = "required by region isolation constraints";
      v69[2] = 40;
      v52 = *(unsigned int *)(v48 + 24);
      v53 = (char *)v69;
      if (v52 >= *(_DWORD *)(v48 + 28))
      {
        v63 = v52 + 1;
        v64 = v50 + 24 * v52 > (unint64_t)v69;
        if (v50 <= (unint64_t)v69 && v64)
        {
          v67 = (char *)v69 - v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v49, (void *)(v48 + 32), v63, 24);
          v50 = *(_QWORD *)(v48 + 16);
          v53 = &v67[v50];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v49, (void *)(v48 + 32), v63, 24);
          v50 = *(_QWORD *)(v48 + 16);
          v53 = (char *)v69;
        }
      }
      v54 = v50 + 24 * *(unsigned int *)(v48 + 24);
      v55 = *(_OWORD *)v53;
      *(_QWORD *)(v54 + 16) = *((_QWORD *)v53 + 2);
      *(_OWORD *)v54 = v55;
      ++*(_DWORD *)(v48 + 24);
      v29 = mlir::Diagnostic::operator mlir::LogicalResult();
      if ((_QWORD)v80)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
      if (v88)
      {
        v56 = (_QWORD **)__p;
        if (__p)
        {
          v57 = v87;
          v58 = __p;
          if (v87 != __p)
          {
            do
              v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
            while (v57 != v56);
            v58 = __p;
          }
          v87 = v56;
          operator delete(v58);
        }
        v42 = v84;
        if (!v84)
          goto LABEL_75;
        v59 = v85;
        v44 = v84;
        if (v85 == v84)
        {
LABEL_74:
          v85 = v42;
          operator delete(v44);
LABEL_75:
          if (v82 != &v83)
            free(v82);
          goto LABEL_77;
        }
        do
        {
          v61 = (void *)*--v59;
          v60 = v61;
          *v59 = 0;
          if (v61)
            operator delete[](v60);
        }
        while (v59 != v42);
LABEL_73:
        v44 = v84;
        goto LABEL_74;
      }
      goto LABEL_77;
    }
    v12 += 4;
    if (!--v11)
      goto LABEL_14;
  }
  v69[0] = "operation's operand is unlinked";
  v70 = 259;
  mlir::emitError(*(_QWORD *)(v9 + 24), (uint64_t)v69, (uint64_t)&v80);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v9 + 24));
  if (mlir::MLIRContext::shouldPrintOpOnDiagnostic(Context))
  {
    v31 = mlir::Diagnostic::attachNote((uint64_t *)&v80 + 1, *(_QWORD *)(v9 + 24), 1);
    v32 = v31 + 16;
    v33 = *(_QWORD *)(v31 + 16);
    LODWORD(v78[0]) = 3;
    v78[1] = (const void **)"see current operation: ";
    v78[2] = (const void **)23;
    v34 = *(unsigned int *)(v31 + 24);
    v35 = v78;
    if (v34 >= *(_DWORD *)(v31 + 28))
    {
      v65 = v34 + 1;
      v66 = v33 + 24 * v34 > (unint64_t)v78;
      if (v33 <= (unint64_t)v78 && v66)
      {
        v68 = (char *)v78 - v33;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v32, (void *)(v31 + 32), v65, 24);
        v33 = *(_QWORD *)(v31 + 16);
        v35 = (const void ***)&v68[v33];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v32, (void *)(v31 + 32), v65, 24);
        v33 = *(_QWORD *)(v31 + 16);
        v35 = v78;
      }
    }
    v36 = v33 + 24 * *(unsigned int *)(v31 + 24);
    v37 = *(_OWORD *)v35;
    *(_QWORD *)(v36 + 16) = v35[2];
    *(_OWORD *)v36 = v37;
    ++*(_DWORD *)(v31 + 24);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v78);
    v38 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::printGenericOpForm((uint64_t)v78, 1);
    mlir::Diagnostic::appendOp((mlir::Diagnostic *)v31, (mlir::Operation *)v9, v38);
  }
  v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v80);
  if ((_QWORD)v80)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
  if (v88)
  {
    v39 = (_QWORD **)__p;
    if (__p)
    {
      v40 = v87;
      v41 = __p;
      if (v87 != __p)
      {
        do
          v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
        while (v40 != v39);
        v41 = __p;
      }
      v87 = v39;
      operator delete(v41);
    }
    v42 = v84;
    if (!v84)
      goto LABEL_75;
    v43 = v85;
    v44 = v84;
    if (v85 == v84)
      goto LABEL_74;
    do
    {
      v46 = (void *)*--v43;
      v45 = v46;
      *v43 = 0;
      if (v46)
        operator delete[](v45);
    }
    while (v43 != v42);
    goto LABEL_73;
  }
LABEL_77:
  if (v89 != v91)
    free(v89);
  return v29;
}

uint64_t mlir::impl::ensureRegionTerminator(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t result;
  mlir::Operation *v15;
  __int128 v16;
  unint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v9 = a2 + 16;
  v16 = *(_OWORD *)(a2 + 16);
  v10 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1)
  {
    mlir::ValueRange::ValueRange(v17, 0, 0);
    mlir::OpBuilder::createBlock((_QWORD *)a2, (uint64_t)a1, 0, v17[0], v17[1], 0, 0);
    v10 = (_QWORD *)*a1;
  }
  if (v10)
    v12 = v10 - 1;
  else
    v12 = 0;
  v13 = (_QWORD *)v12[4];
  if (v13 == v12 + 4
    || (result = mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>(v13 + 6), (result & 1) == 0))
  {
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v12 + 4;
    v15 = (mlir::Operation *)a4(a5, a2, a3);
    result = (uint64_t)mlir::OpBuilder::insert((mlir::OpBuilder *)a2, v15);
  }
  if ((_QWORD)v16)
  {
    *(_OWORD *)v9 = v16;
  }
  else
  {
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
  }
  return result;
}

uint64_t mlir::impl::ensureRegionTerminator(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  _QWORD v6[4];

  v6[0] = *a2;
  memset(&v6[1], 0, 24);
  return mlir::impl::ensureRegionTerminator(a1, (uint64_t)v6, a3, a4, a5);
}

uint64_t mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
      v23 = 76;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    v5 = v2[151];
    LODWORD(v6) = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
    v7 = (uint64_t *)(v3 + 16 * v6);
    v8 = *v7;
    if (*v7 == v5)
      goto LABEL_9;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v4 - 1);
      v8 = *(_QWORD *)(v3 + 16 * v6);
      if (v8 == v5)
      {
        v7 = (uint64_t *)(v3 + 16 * v6);
        goto LABEL_9;
      }
    }
  }
  v7 = (uint64_t *)(v3 + 16 * v4);
LABEL_9:
  if (v7 == (uint64_t *)(v3 + 16 * v4))
    return 0;
  else
    return v7[1];
}

BOOL mlir::detail::constant_op_binder<mlir::Attribute>::match(unint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  _BOOL8 v7;
  uint64_t v9;
  uint64_t Values;
  uint64_t v11;
  uint64_t v12;
  void *v13[2];
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a2 + 48);
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(a2 + 48)))
    return 0;
  v13[0] = v14;
  v13[1] = (void *)0x100000000;
  if (!(*(unsigned __int8 (**)(_QWORD, uint64_t, _QWORD, _QWORD, void **))(**(_QWORD **)(a2 + 48) + 16))(*(_QWORD *)(a2 + 48), a2, 0, 0, v13))
  {
    v9 = *v4;
    if (*(_UNKNOWN **)(*v4 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v12 = *(_QWORD *)(v9 + 8);
      Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v12);
      if (!Values)
        goto LABEL_3;
    }
    else
    {
      Values = *(_QWORD *)(v9 + 24);
      if (!Values)
        goto LABEL_3;
    }
    if (mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values))
    {
      v11 = mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values);
      if (v11)
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v11 + 16))(v11, a2, 0, 0, v13);
    }
  }
LABEL_3:
  v5 = v13[0];
  v6 = *(_QWORD *)v13[0] & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 != 0;
  if (v6 && *a1)
  {
    **a1 = v6;
    v5 = v13[0];
  }
  if (v5 != v14)
    free(v5);
  return v7;
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,mlir::OpTrait::impl::foldCommutative(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_0 &,mlir::OpOperand *,long,std::pair<mlir::OpOperand *,long>>(uint64_t *a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *i;
  uint64_t *v59;
  uint64_t *v60;
  _BOOL4 v61;

  v7 = a2;
  v8 = a1;
  if (a4 != 3)
  {
    if (a4 == 2)
      goto LABEL_53;
    if (a6 < a4)
    {
      if (a4 >= 0)
        v12 = a4;
      else
        v12 = a4 + 1;
      v13 = v12 >> 1;
      v14 = &a1[4 * (v12 >> 1)];
      v15 = **a3;
      v16 = *a3[1];
      v17 = (uint64_t)(v14 - 4);
      if (*(_QWORD *)(v15 + (((uint64_t)v14 - v16 - 32) >> 2)))
      {
        v18 = 4 * v13;
        v19 = v13;
        while (1)
        {
          v20 = v18 * 8 - 32;
          if (v18 == 4)
            break;
          --v19;
          v21 = *(_QWORD *)(v15 + (((uint64_t)&a1[v18 - 8] - v16) >> 2));
          v18 -= 4;
          if (!v21)
          {
            v17 = (uint64_t)a1 + v20 - 32;
            goto LABEL_56;
          }
        }
        v41 = a1;
        v42 = a4 - v13;
        if (!*(_QWORD *)(v15 + (((uint64_t)v14 - v16) >> 2)))
        {
LABEL_89:
          v55 = (uint64_t)(v7 + 4);
          v56 = (uint64_t)&v8[4 * v13 + 4] - v16;
          v43 = v14;
          while (1)
          {
            v43 += 4;
            if (v43 == v7)
              goto LABEL_93;
            --v42;
            v57 = *(_QWORD *)(v15 + (v56 >> 2));
            v56 += 32;
            if (v57)
              goto LABEL_92;
          }
        }
      }
      else
      {
        v19 = v13;
LABEL_56:
        v41 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,mlir::OpTrait::impl::foldCommutative(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_0 &,mlir::OpOperand *,long,std::pair<mlir::OpOperand *,long>>(a1, v17, a3, v19, a5, a6);
        v15 = **a3;
        v16 = *a3[1];
        v42 = a4 - v13;
        if (!*(_QWORD *)(v15 + (((uint64_t)v14 - v16) >> 2)))
          goto LABEL_89;
      }
      v43 = v14;
LABEL_92:
      v55 = std::__stable_partition_impl<std::_ClassicAlgPolicy,mlir::OpTrait::impl::foldCommutative(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_0 &,mlir::OpOperand *,long,std::pair<mlir::OpOperand *,long>>(v43, v7, a3, v42, a5, a6);
LABEL_93:
      if (v41 == v14)
        return (uint64_t *)v55;
      if (v14 == (uint64_t *)v55)
        return v41;
      std::swap[abi:nn180100]<mlir::OpOperand>(v41, v14);
      v7 = v41 + 4;
      for (i = v14 + 4; i != (uint64_t *)v55; i += 4)
      {
        if (v7 == v14)
          v14 = i;
        std::swap[abi:nn180100]<mlir::OpOperand>(v7, i);
        v7 += 4;
      }
      if (v7 != v14)
      {
        v59 = v7;
        v60 = v14;
        while (1)
        {
          std::swap[abi:nn180100]<mlir::OpOperand>(v59, v14);
          v14 += 4;
          v61 = v59 + 4 == v60;
          if (v14 == (uint64_t *)v55)
          {
            if (v59 + 4 == v60)
              return v7;
            v14 = v60 + 4;
            for (v59 += 8; ; v59 += 4)
            {
              std::swap[abi:nn180100]<mlir::OpOperand>(v59 - 4, v60);
              v61 = v59 == v60;
              if (v14 != (uint64_t *)v55)
                break;
              if (v59 == v60)
                return v7;
            }
          }
          else
          {
            v59 += 4;
          }
          if (v61)
            v60 = v14;
        }
      }
      return v14;
    }
    *a5 = 0;
    a5[1] = 0;
    v22 = (uint64_t *)a1[1];
    a5[2] = a1[2];
    if (v22)
    {
      *v22 = *a1;
      if (*a1)
        *(_QWORD *)(*a1 + 8) = a1[1];
    }
    a1[1] = 0;
    *a5 = 0;
    a5[1] = 0;
    a5[3] = 0;
    v23 = (uint64_t *)a1[1];
    if (v23)
    {
      *v23 = *a1;
      if (*a1)
        *(_QWORD *)(*a1 + 8) = a1[1];
    }
    a1[1] = 0;
    *a5 = 0;
    a5[1] = 0;
    a5[3] = a1[3];
    a1[3] = 0;
    v24 = (uint64_t *)a5[3];
    if (v24)
    {
      v25 = *v24;
      *a5 = *v24;
      a5[1] = (uint64_t)v24;
      if (v25)
        *(_QWORD *)(v25 + 8) = a5;
      *v24 = (uint64_t)a5;
    }
    v26 = a5 + 4;
    v27 = a1 + 4;
    v28 = 1;
    if (a1 + 4 == a2)
    {
      v38 = a1;
      v39 = (uint64_t *)a1[1];
      if (!v39)
      {
LABEL_61:
        v44 = (uint64_t *)v38[5];
        if (v44)
        {
          *v44 = *a2;
          if (*a2)
            *(_QWORD *)(*a2 + 8) = v38[5];
        }
        v38[5] = 0;
        *v8 = 0;
        v8[1] = 0;
        v8[3] = v38[7];
        v38[7] = 0;
        v45 = (uint64_t *)v8[3];
        if (v45)
        {
          v46 = *v45;
          *v8 = *v45;
          v8[1] = (uint64_t)v45;
          if (v46)
            *(_QWORD *)(v46 + 8) = v8;
          *v45 = (uint64_t)v8;
        }
        v7 = v8 + 4;
        if (v26 > a5)
        {
          v47 = a5;
          v48 = v8 + 4;
          do
          {
            v49 = (uint64_t *)v48[1];
            if (v49)
            {
              *v49 = *v48;
              if (*v48)
                *(_QWORD *)(*v48 + 8) = v48[1];
            }
            v50 = (uint64_t *)v47[1];
            if (v50)
            {
              *v50 = *v47;
              if (*v47)
                *(_QWORD *)(*v47 + 8) = v47[1];
            }
            v47[1] = 0;
            *v48 = 0;
            v48[1] = 0;
            v48[3] = v47[3];
            v47[3] = 0;
            v51 = (uint64_t *)v48[3];
            if (v51)
            {
              v52 = *v51;
              *v48 = *v51;
              v48[1] = (uint64_t)v51;
              if (v52)
                *(_QWORD *)(v52 + 8) = v48;
              *v51 = (uint64_t)v48;
            }
            v47 += 4;
            v48 += 4;
          }
          while (v47 < v26);
        }
        if (a5 && v28)
        {
          v53 = (_QWORD **)(a5 + 1);
          do
          {
            if (*v53)
            {
              **v53 = *(v53 - 1);
              v54 = (uint64_t)*(v53 - 1);
              if (v54)
                *(_QWORD *)(v54 + 8) = *v53;
            }
            v53 += 4;
            --v28;
          }
          while (v28);
        }
        return v7;
      }
    }
    else
    {
      v29 = a1 + 4;
      do
      {
        while (*(_QWORD *)(**a3 + (((uint64_t)v27 - *a3[1]) >> 2)))
        {
          *v26 = 0;
          v26[1] = 0;
          v30 = (uint64_t *)v29[1];
          v26[2] = v29[2];
          if (v30)
          {
            *v30 = *v29;
            if (*v29)
              *(_QWORD *)(*v29 + 8) = v29[1];
          }
          v29[1] = 0;
          *v26 = 0;
          v26[1] = 0;
          v26[3] = 0;
          v31 = (uint64_t *)v29[1];
          if (v31)
          {
            *v31 = *v29;
            if (*v29)
              *(_QWORD *)(*v29 + 8) = v29[1];
          }
          v29[1] = 0;
          *v26 = 0;
          v26[1] = 0;
          v26[3] = v29[3];
          v29[3] = 0;
          v32 = (uint64_t *)v26[3];
          if (v32)
          {
            v33 = *v32;
            *v26 = *v32;
            v26[1] = (uint64_t)v32;
            if (v33)
              *(_QWORD *)(v33 + 8) = v26;
            *v32 = (uint64_t)v26;
          }
          ++v28;
          v26 += 4;
          v29 += 4;
          v27 += 4;
          if (v29 == a2)
            goto LABEL_50;
        }
        v34 = (uint64_t *)v8[1];
        if (v34)
        {
          *v34 = *v8;
          if (*v8)
            *(_QWORD *)(*v8 + 8) = v8[1];
        }
        v35 = (uint64_t *)v29[1];
        if (v35)
        {
          *v35 = *v29;
          if (*v29)
            *(_QWORD *)(*v29 + 8) = v29[1];
        }
        v29[1] = 0;
        *v8 = 0;
        v8[1] = 0;
        v8[3] = v29[3];
        v29[3] = 0;
        v36 = (uint64_t *)v8[3];
        if (v36)
        {
          v37 = *v36;
          *v8 = *v36;
          v8[1] = (uint64_t)v36;
          if (v37)
            *(_QWORD *)(v37 + 8) = v8;
          *v36 = (uint64_t)v8;
        }
        v8 += 4;
        v29 += 4;
        v27 += 4;
      }
      while (v29 != a2);
LABEL_50:
      v38 = v29 - 4;
      v39 = (uint64_t *)v8[1];
      if (!v39)
        goto LABEL_61;
    }
    *v39 = *v8;
    if (*v8)
      *(_QWORD *)(*v8 + 8) = v8[1];
    goto LABEL_61;
  }
  if (!*(_QWORD *)(**a3 + (((uint64_t)a1 - *a3[1] + 32) >> 2)))
  {
    std::swap[abi:nn180100]<mlir::OpOperand>(a1, a1 + 4);
    a1 = v8 + 4;
LABEL_53:
    std::swap[abi:nn180100]<mlir::OpOperand>(a1, v7);
    return v7;
  }
  std::swap[abi:nn180100]<mlir::OpOperand>(a1 + 4, a2);
  std::swap[abi:nn180100]<mlir::OpOperand>(v8, v8 + 4);
  return v8 + 4;
}

uint64_t *std::swap[abi:nn180100]<mlir::OpOperand>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v2 = (uint64_t *)result[1];
  if (v2)
  {
    *v2 = *result;
    if (*result)
      *(_QWORD *)(*result + 8) = result[1];
  }
  result[1] = 0;
  v13 = 0;
  v14 = 0;
  v15 = (_QWORD *)result[3];
  v3 = v15;
  result[3] = 0;
  if (v3)
  {
    v14 = v3;
    v4 = *v3;
    v13 = v4;
    if (v4)
    {
      *(_QWORD *)(v4 + 8) = &v13;
      v5 = (uint64_t *)result[1];
      *v3 = &v13;
      if (v5)
      {
        *v5 = *result;
        if (*result)
          *(_QWORD *)(*result + 8) = result[1];
      }
    }
    else
    {
      *v3 = &v13;
    }
  }
  v6 = (uint64_t *)a2[1];
  if (v6)
  {
    *v6 = *a2;
    if (*a2)
      *(_QWORD *)(*a2 + 8) = a2[1];
  }
  a2[1] = 0;
  *result = 0;
  result[1] = 0;
  result[3] = a2[3];
  a2[3] = 0;
  v7 = (uint64_t *)result[3];
  if (v7)
  {
    result[1] = (uint64_t)v7;
    v8 = *v7;
    *result = *v7;
    if (v8)
      *(_QWORD *)(v8 + 8) = result;
    *v7 = (uint64_t)result;
  }
  v9 = (uint64_t *)a2[1];
  if (v9)
  {
    *v9 = *a2;
    if (*a2)
      *(_QWORD *)(*a2 + 8) = a2[1];
  }
  if (v14)
  {
    *v14 = v13;
    if (v13)
      *(_QWORD *)(v13 + 8) = v14;
  }
  *a2 = 0;
  a2[1] = 0;
  v10 = v15;
  a2[3] = (uint64_t)v15;
  v14 = 0;
  v15 = 0;
  if (v10)
  {
    a2[1] = (uint64_t)v10;
    v11 = *v10;
    *a2 = *v10;
    if (v11)
    {
      *(_QWORD *)(v11 + 8) = a2;
      v12 = v14;
      *v10 = (uint64_t)a2;
      if (v12)
      {
        *v12 = v13;
        if (v13)
          *(_QWORD *)(v13 + 8) = v14;
      }
    }
    else
    {
      *v10 = (uint64_t)a2;
    }
  }
  return result;
}

void llvm::SmallVectorImpl<mlir::Type>::append<llvm::concat_iterator<mlir::Type,mlir::Type*,mlir::Type*>,void>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;

  v3 = (_QWORD *)*a2;
  v4 = (_QWORD *)a2[1];
  v5 = (_QWORD *)a2[2];
  v6 = (_QWORD *)a2[3];
  v7 = (_QWORD *)*a3;
  v8 = (_QWORD *)a3[1];
  v9 = (_QWORD *)a3[2];
  v10 = (_QWORD *)a3[3];
  v37 = v4;
  v38 = v3;
  if (v6 != v10 || v5 != v9)
  {
    while (v3 == v5)
    {
      v3 = v5;
      if (v37 != v6)
      {
        v26 = &v37;
        v3 = v37;
LABEL_26:
        *v26 = v3 + 1;
        v3 = v38;
      }
    }
    v26 = &v38;
    goto LABEL_26;
  }
  v15 = 0;
  if (v3 != v7 || v4 != v8)
  {
    v17 = v4;
    v18 = v3;
    while (1)
    {
      if (v18 == v5)
      {
        v20 = v6;
        v18 = v5;
        if (v17 == v6)
          goto LABEL_16;
        v19 = &v37;
        v18 = v17;
      }
      else
      {
        v19 = &v38;
      }
      *v19 = v18 + 1;
      v20 = v37;
      v18 = v38;
LABEL_16:
      ++v15;
      v17 = v20;
      if (v18 == v7)
      {
        v17 = v20;
        if (v20 == v8)
          break;
      }
    }
  }
  v21 = *(unsigned int *)(a1 + 8);
  if (v15 + v21 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v15 + v21, 8);
    v3 = (_QWORD *)*a2;
    v4 = (_QWORD *)a2[1];
    v5 = (_QWORD *)a2[2];
    v6 = (_QWORD *)a2[3];
    v7 = (_QWORD *)*a3;
    v8 = (_QWORD *)a3[1];
    v9 = (_QWORD *)a3[2];
    v10 = (_QWORD *)a3[3];
    v21 = *(unsigned int *)(a1 + 8);
  }
  v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
  if (v6 != v10 || v5 != v9)
  {
    v24 = v4;
    v25 = v3;
    while (1)
    {
      if (v24 == v6)
        v29 = 0;
      else
        v29 = v24;
      if (v25 != v5 && v25 != 0)
        v29 = v25;
      *v22 = *v29;
      if (v25 == v5 && v24 == v6)
      {
        v24 = v6;
        v25 = v5;
        ++v22;
      }
      else
      {
        v27 = v25 == v5;
        if (v25 != v5)
          v24 = v25;
        v28 = v24 + 1;
        if (v25 == v5)
          ++v24;
        else
          v24 = v4;
        if (v25 == v5)
        {
          v4 = v28;
          v25 = v3;
        }
        else
        {
          v25 = v28;
        }
        if (!v27)
          v3 = v28;
        ++v22;
      }
    }
  }
  if (v3 != v7 || v4 != v8)
  {
    v31 = v4;
    v32 = v3;
    while (1)
    {
      while (1)
      {
        if (v31 == v6)
          v33 = 0;
        else
          v33 = v31;
        if (v32 != v5 && v32 != 0)
          v33 = v32;
        *v22 = *v33;
        if (v32 == v5 && v31 == v6)
          break;
        v35 = v32 == v5;
        if (v32 != v5)
          v31 = v32;
        v36 = v31 + 1;
        if (v32 == v5)
          ++v31;
        else
          v31 = v4;
        if (v32 == v5)
        {
          v4 = v36;
          v32 = v3;
        }
        else
        {
          v32 = v36;
        }
        if (!v35)
          v3 = v36;
        ++v22;
        if (v32 == v7)
          goto LABEL_78;
      }
      v31 = v6;
      v32 = v5;
      ++v22;
      if (v5 == v7)
      {
LABEL_78:
        if (v31 == v8)
          break;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v21 + v15;
}

_QWORD *mlir::NamedAttrList::NamedAttrList(_QWORD *a1, uint64_t a2)
{
  uint64_t Value;
  uint64_t v5;

  v5 = a2;
  if (a2)
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  else
    Value = 0;
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  a1[10] = 0;
  mlir::DictionaryAttr::sort(Value, (16 * a2) >> 4, a1);
  a1[10] = v5 | 4;
  return a1;
}

void mlir::NamedAttrList::findDuplicate(uint64_t **this@<X0>, _BYTE *a2@<X8>)
{
  mlir::DictionaryAttr::findDuplicate(this, ((unint64_t)this[10] & 4) != 0, a2);
  if (((_BYTE)this[10] & 4) == 0)
    this[10] = (uint64_t *)4;
}

unint64_t mlir::NamedAttrList::getDictionary(mlir::NamedAttrList *this, mlir::MLIRContext *a2)
{
  unint64_t v4;

  v4 = *((_QWORD *)this + 10);
  if ((v4 & 4) == 0)
  {
    mlir::DictionaryAttr::sortInPlace((uint64_t **)this);
    *((_QWORD *)this + 10) = 4;
LABEL_4:
    v4 = *((_QWORD *)this + 10) & 7 | mlir::DictionaryAttr::getWithSorted(a2, *(mlir::MLIRContext **)this, *((unsigned int *)this + 2));
    *((_QWORD *)this + 10) = v4;
    return v4 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v4 <= 7)
    goto LABEL_4;
  return v4 & 0xFFFFFFFFFFFFFFF8;
}

void mlir::NamedAttrList::append(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::StringAttr *Context;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;

  v11 = a4;
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  v10 = 261;
  v9[0] = a2;
  v9[1] = a3;
  v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v9);
  mlir::NamedAttrList::append(a1, v8, v11);
}

void mlir::NamedAttrList::append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  mlir::NamedAttribute::NamedAttribute(&v11, a2, a3);
  v4 = v11;
  v12 = v11;
  v5 = *(_QWORD *)(a1 + 80);
  if ((v5 & 4) != 0)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v6)
    {
      v7 = mlir::NamedAttribute::operator<((uint64_t *)(*(_QWORD *)a1 + 16 * v6 - 16), (uint64_t *)&v12);
      v5 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFFBLL;
      if (!v7)
      {
        v8 = 0;
LABEL_7:
        LOBYTE(v5) = v8 | v5;
        v4 = v12;
        goto LABEL_8;
      }
    }
    else
    {
      LOBYTE(v5) = v5 & 0xFB;
    }
    v8 = 4;
    goto LABEL_7;
  }
LABEL_8:
  *(_QWORD *)(a1 + 80) = v5 & 7;
  v9 = *(unsigned int *)(a1 + 8);
  if (v9 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v9 + 1, 16);
    v4 = v10;
    LODWORD(v9) = *(_DWORD *)(a1 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v9) = v4;
  ++*(_DWORD *)(a1 + 8);
}

void mlir::NamedAttrList::push_back(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a2;
  v13 = a3;
  v4 = *(_QWORD *)(a1 + 80);
  if ((v4 & 4) == 0)
  {
    v5 = a3;
    v6 = a2;
    goto LABEL_9;
  }
  v7 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v7)
  {
    LOBYTE(v4) = v4 & 0xFB;
    goto LABEL_7;
  }
  v8 = mlir::NamedAttribute::operator<((uint64_t *)(*(_QWORD *)a1 + 16 * v7 - 16), &v12);
  v4 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFFBLL;
  if (v8)
  {
LABEL_7:
    v9 = 4;
    goto LABEL_8;
  }
  v9 = 0;
LABEL_8:
  LOBYTE(v4) = v9 | v4;
  v6 = v12;
  v5 = v13;
LABEL_9:
  *(_QWORD *)(a1 + 80) = v4 & 7;
  v10 = *(unsigned int *)(a1 + 8);
  if (v10 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a1 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
  *v11 = v6;
  v11[1] = v5;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t mlir::NamedAttrList::get(uint64_t a1, const void *a2, size_t a3)
{
  mlir::CallGraphNode *v3;
  char v4;

  v3 = mlir::NamedAttrList::findAttr<mlir::NamedAttrList const,llvm::StringRef>(a1, a2, a3);
  if ((v4 & 1) != 0)
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

mlir::CallGraphNode *mlir::NamedAttrList::findAttr<mlir::NamedAttrList const,llvm::StringRef>(uint64_t a1, const void *a2, size_t a3)
{
  mlir::CallGraphNode *v5;
  unint64_t v6;
  mlir::CallGraphNode *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *AttrData;
  size_t v13;
  size_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t CallableRegion;

  v5 = *(mlir::CallGraphNode **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
  {
    if (!(_DWORD)v6)
      return v5;
    while (1)
    {
      v11 = v6 >> 1;
      v7 = (mlir::CallGraphNode *)((char *)v5 + 16 * (v6 >> 1));
      CallableRegion = mlir::CallGraphNode::getCallableRegion(v7);
      AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
      v14 = v13;
      v15 = a3 >= v13 ? v13 : a3;
      if (v15)
      {
        v16 = memcmp(AttrData, a2, v15);
        if (v16)
          break;
      }
      if (v14 == a3)
        return v7;
      if (v14 < a3)
        goto LABEL_11;
LABEL_12:
      v6 = v11;
      if (v11 <= 0)
        return v5;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_11:
    v5 = (mlir::CallGraphNode *)((char *)v7 + 16);
    v11 = v6 + ~v11;
    goto LABEL_12;
  }
  if ((_DWORD)v6)
  {
    v7 = (mlir::CallGraphNode *)((char *)v5 + 16 * v6);
    if (a3)
    {
      v8 = 16 * v6;
      while (1)
      {
        CallableRegion = mlir::CallGraphNode::getCallableRegion(v5);
        v9 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        if (v10 == a3 && !memcmp(v9, a2, a3))
          break;
        v5 = (mlir::CallGraphNode *)((char *)v5 + 16);
        v8 -= 16;
        if (!v8)
          return v7;
      }
    }
    else
    {
      v17 = 16 * v6;
      while (1)
      {
        CallableRegion = mlir::CallGraphNode::getCallableRegion(v5);
        mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        if (!v18)
          break;
        v5 = (mlir::CallGraphNode *)((char *)v5 + 16);
        v17 -= 16;
        if (!v17)
          return v7;
      }
    }
  }
  return v5;
}

uint64_t mlir::NamedAttrList::get(uint64_t a1, uint64_t a2)
{
  mlir::CallGraphNode *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(mlir::CallGraphNode **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
  {
    v3 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(*(mlir::CallGraphNode **)a1, (mlir::CallGraphNode *)(*(_QWORD *)a1 + 16 * v4), a2);
    v6 = v7;
  }
  else
  {
    if (!(_DWORD)v4)
      return 0;
    v5 = 16 * v4;
    v6 = 1;
    while (mlir::CallGraphNode::getCallableRegion(v3) != a2)
    {
      v3 = (mlir::CallGraphNode *)((char *)v3 + 16);
      v5 -= 16;
      if (!v5)
        return 0;
    }
  }
  if ((v6 & 1) == 0)
    return 0;
  return *((_QWORD *)v3 + 1);
}

uint64_t mlir::NamedAttrList::set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  mlir::CallGraphNode *v6;
  uint64_t v7;
  mlir::CallGraphNode *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;
  const void *AttrData;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  mlir::CallGraphNode *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v24[2];
  uint64_t v25;

  v4 = a2;
  v25 = a2;
  v6 = *(mlir::CallGraphNode **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = (mlir::CallGraphNode *)(*(_QWORD *)a1 + 16 * v7);
  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
  {
    v6 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(*(mlir::CallGraphNode **)a1, v8, a2);
    v10 = v11;
  }
  else
  {
    if (!(_DWORD)v7)
    {
LABEL_11:
      if ((*(_BYTE *)(a1 + 80) & 4) != 0)
      {
        AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v25);
        v6 = mlir::NamedAttrList::findAttr<mlir::NamedAttrList const,llvm::StringRef>(a1, AttrData, v14);
        v4 = v25;
      }
      mlir::NamedAttribute::NamedAttribute(v24, v4, a3);
      v16 = v24[0];
      v15 = v24[1];
      v17 = *(mlir::CallGraphNode **)a1;
      v18 = *(unsigned int *)(a1 + 8);
      if ((mlir::CallGraphNode *)(*(_QWORD *)a1 + 16 * v18) == v6)
      {
        if (v18 >= *(_DWORD *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18 + 1, 16);
          v18 = *(unsigned int *)(a1 + 8);
          v17 = *(mlir::CallGraphNode **)a1;
        }
        v23 = (_QWORD *)((char *)v17 + 16 * v18);
        *v23 = v16;
        v23[1] = v15;
        ++*(_DWORD *)(a1 + 8);
      }
      else
      {
        v19 = (v6 - v17) >> 4;
        if (v18 >= *(_DWORD *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18 + 1, 16);
          v17 = *(mlir::CallGraphNode **)a1;
          v18 = *(unsigned int *)(a1 + 8);
        }
        v20 = (_QWORD *)((char *)v17 + 16 * v19);
        *((_OWORD *)v17 + v18) = *((_OWORD *)v17 + v18 - 1);
        v21 = *(unsigned int *)(a1 + 8);
        v22 = *(_QWORD *)a1 + 16 * v21 - 16;
        if ((_QWORD *)v22 != v20)
        {
          memmove(v20 + 2, v20, v22 - (_QWORD)v20);
          LODWORD(v21) = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 8) = v21 + 1;
        *v20 = v16;
        v20[1] = v15;
      }
      result = 0;
      goto LABEL_23;
    }
    v9 = 16 * v7;
    v10 = 1;
    while (mlir::CallGraphNode::getCallableRegion(v6) != v4)
    {
      v6 = (mlir::CallGraphNode *)((char *)v6 + 16);
      v9 -= 16;
      if (!v9)
      {
        v6 = v8;
        goto LABEL_11;
      }
    }
  }
  if (!v10)
    goto LABEL_11;
  result = *((_QWORD *)v6 + 1);
  if (result == a3)
    return result;
  *((_QWORD *)v6 + 1) = a3;
LABEL_23:
  *(_QWORD *)(a1 + 80) &= 7uLL;
  return result;
}

uint64_t mlir::NamedAttrList::set(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::StringAttr *Context;
  uint64_t v8;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;

  v12 = a4;
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v10);
  return mlir::NamedAttrList::set(a1, v8, v12);
}

uint64_t mlir::NamedAttrList::erase(uint64_t a1, uint64_t a2)
{
  mlir::CallGraphNode *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(mlir::CallGraphNode **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
  {
    v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(*(mlir::CallGraphNode **)a1, (mlir::CallGraphNode *)(*(_QWORD *)a1 + 16 * v5), a2);
    v7 = v8;
  }
  else
  {
    if (!(_DWORD)v5)
      return 0;
    v6 = 16 * v5;
    v7 = 1;
    while (mlir::CallGraphNode::getCallableRegion(v4) != a2)
    {
      v4 = (mlir::CallGraphNode *)((char *)v4 + 16);
      v6 -= 16;
      if (!v6)
        return 0;
    }
  }
  if ((v7 & 1) == 0)
    return 0;
  v10 = *((_QWORD *)v4 + 1);
  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(_QWORD *)a1 + 16 * v11;
  if ((mlir::CallGraphNode *)v12 != (mlir::CallGraphNode *)((char *)v4 + 16))
  {
    memmove(v4, (char *)v4 + 16, v12 - ((_QWORD)v4 + 16));
    LODWORD(v11) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v11 - 1;
  *(_QWORD *)(a1 + 80) &= 7uLL;
  return v10;
}

uint64_t mlir::NamedAttrList::erase(uint64_t a1, const void *a2, size_t a3)
{
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = mlir::NamedAttrList::findAttr<mlir::NamedAttrList const,llvm::StringRef>(a1, a2, a3);
  if ((v5 & 1) == 0)
    return 0;
  v7 = *((_QWORD *)v4 + 1);
  v8 = *(unsigned int *)(a1 + 8);
  v9 = *(_QWORD *)a1 + 16 * v8;
  if ((mlir::CallGraphNode *)v9 != (mlir::CallGraphNode *)((char *)v4 + 16))
  {
    memmove(v4, (char *)v4 + 16, v9 - ((_QWORD)v4 + 16));
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v8 - 1;
  *(_QWORD *)(a1 + 80) &= 7uLL;
  return v7;
}

uint64_t mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *mlir::OperationState::OperationState(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t Context;
  uint64_t v10;

  v10 = a2;
  *a1 = a2;
  v7 = a1 + 1;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v10);
  mlir::OperationName::OperationName(v7, a3, a4, Context);
  a1[2] = a1 + 4;
  a1[3] = 0x400000000;
  a1[8] = a1 + 10;
  a1[9] = 0x400000000;
  a1[14] = a1 + 16;
  a1[15] = 0x400000000;
  a1[24] = 4;
  a1[25] = a1 + 27;
  a1[26] = 0x100000000;
  a1[28] = a1 + 30;
  a1[29] = 0x100000000;
  a1[31] = 0;
  a1[32] = 0;
  a1[33] = &mlir::detail::TypeIDResolver<void,void>::id;
  a1[34] = 0;
  a1[36] = 0;
  return a1;
}

double mlir::OperationState::OperationState(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a1 + 4;
  a1[3] = 0x400000000;
  a1[8] = a1 + 10;
  a1[9] = 0x400000000;
  a1[14] = a1 + 16;
  a1[15] = 0x400000000;
  a1[24] = 4;
  a1[25] = a1 + 27;
  *(_QWORD *)&result = 0x100000000;
  a1[26] = 0x100000000;
  a1[28] = a1 + 30;
  a1[29] = 0x100000000;
  a1[31] = 0;
  a1[32] = 0;
  a1[33] = &mlir::detail::TypeIDResolver<void,void>::id;
  a1[34] = 0;
  a1[36] = 0;
  return result;
}

_QWORD *mlir::OperationState::OperationState(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  char *Address;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a1 + 4;
  a1[3] = 0x400000000;
  llvm::SmallVectorImpl<mlir::Value>::append<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)(a1 + 2), a4, 0, a4, a5);
  a1[8] = a1 + 10;
  a1[9] = 0x400000000;
  if (a7 < 5)
  {
    if (!a7)
    {
      v20 = 0;
      goto LABEL_9;
    }
    v17 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 8), a1 + 10, a7, 8);
    v17 = *((unsigned int *)a1 + 18);
  }
  v18 = 0;
  v19 = a1[8] + 8 * v17;
  do
  {
    *(_QWORD *)(v19 + 8 * v18) = mlir::TypeRange::dereference_iterator(a6, v18);
    ++v18;
  }
  while (a7 != v18);
  v20 = *((_DWORD *)a1 + 18);
LABEL_9:
  *((_DWORD *)a1 + 18) = v20 + a7;
  a1[14] = a1 + 16;
  a1[15] = 0x400000000;
  a1[24] = 0;
  mlir::DictionaryAttr::sort(a9, (16 * a10) >> 4, a1 + 14);
  a1[24] = 4;
  a1[25] = a1 + 27;
  a1[26] = 0x100000000;
  if (a12 < 2)
  {
    if (!a12)
    {
      v24 = 0;
      goto LABEL_17;
    }
    v21 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 25), a1 + 27, a12, 8);
    v21 = *((unsigned int *)a1 + 52);
  }
  v22 = 0;
  v23 = a1[25] + 8 * v21;
  do
  {
    *(_QWORD *)(v23 + 8 * v22) = mlir::BlockRange::dereference_iterator(a11, v22);
    ++v22;
  }
  while (a12 != v22);
  v24 = *((_DWORD *)a1 + 52);
LABEL_17:
  a1[28] = a1 + 30;
  *((_DWORD *)a1 + 52) = v24 + a12;
  a1[29] = 0x100000000;
  a1[31] = 0;
  a1[32] = 0;
  a1[33] = &mlir::detail::TypeIDResolver<void,void>::id;
  a1[34] = 0;
  a1[36] = 0;
  if (a14)
  {
    v26 = 8 * a14;
    do
    {
      Address = llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress((uint64_t)(a1 + 28), a13, 1);
      v28 = a1[28];
      v29 = *((unsigned int *)a1 + 58);
      v30 = *(_QWORD *)Address;
      *(_QWORD *)Address = 0;
      *(_QWORD *)(v28 + 8 * v29) = v30;
      *((_DWORD *)a1 + 58) = v29 + 1;
      a13 += 8;
      v26 -= 8;
    }
    while (v26);
  }
  return a1;
}

{
  return mlir::OperationState::OperationState(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

_QWORD *mlir::OperationState::OperationState(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, uint64_t a14)
{
  uint64_t Context;
  uint64_t v21;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
  mlir::OperationName::OperationName(&v25, a3, a4, Context);
  return mlir::OperationState::OperationState(a1, a2, v25, a5, a6, a7, a8, v21, a9, a10, a11, a12, a13, a14);
}

void mlir::OperationState::~OperationState(mlir::OperationState *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  mlir::Region *v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;

  if (*((_QWORD *)this + 32))
    (*((void (**)(_QWORD))this + 34))(*((_QWORD *)this + 35));
  v2 = (char *)*((_QWORD *)this + 28);
  v3 = *((unsigned int *)this + 58);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(mlir::Region **)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
      {
        mlir::Region::~Region(v6);
        operator delete(v7);
      }
      v4 -= 8;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 28);
  }
  if (v2 != (char *)this + 240)
    free(v2);
  v8 = (char *)*((_QWORD *)this + 25);
  if (v8 != (char *)this + 216)
    free(v8);
  v9 = (char *)*((_QWORD *)this + 14);
  if (v9 != (char *)this + 128)
    free(v9);
  v10 = (char *)*((_QWORD *)this + 8);
  if (v10 != (char *)this + 80)
    free(v10);
  v11 = (char *)*((_QWORD *)this + 2);
  if (v11 != (char *)this + 32)
    free(v11);
}

void mlir::OperationState::addOperands(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::SmallVectorImpl<mlir::Value>::append<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,void>(a1 + 16, a2, 0, a2, a3);
}

void llvm::SmallVectorImpl<mlir::Value>::append<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *j;
  uint64_t v18;
  uint64_t *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int128 *v33;
  uint64_t v34;
  const double *v35;
  const double *v36;
  unsigned __int128 v37;
  unsigned __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v7 = a3;
  v10 = a5 - a3;
  v11 = *(unsigned int *)(a1 + 8);
  v12 = a5 - a3 + v11;
  if (v12 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v12, 8);
    v11 = *(unsigned int *)(a1 + 8);
  }
  v13 = *(_QWORD *)a1;
  v14 = a2 != a4;
  if (a5 != v7 || a2 != a4)
  {
    v15 = (uint64_t *)(v13 + 8 * v11);
    v16 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((a2 & 6) != 0 || !v16)
    {
      if ((a2 & 6) == 2 && v16)
      {
        if (v14)
        {
          for (i = (uint64_t *)(v16 + 32 * v7 + 24); ; i += 4)
          {
            v20 = *i;
            *v15++ = v20;
          }
        }
        if (v10 > 0x12)
        {
          v30 = v16 + 32 * v7;
          if ((unint64_t)v15 >= v16 + 32 * a5 || v30 + 24 >= v13 + 8 * (a5 + v11 - v7))
          {
            v31 = 4;
            if ((v10 & 3) != 0)
              v31 = v10 & 3;
            v15 += v10 - v31;
            v32 = v7 + v10 - v31;
            v33 = (unsigned __int128 *)(v13 + 8 * v11 + 16);
            v34 = v7 + v31 - a5;
            v35 = (const double *)(v30 + 88);
            do
            {
              v36 = v35 - 8;
              v37 = (unsigned __int128)vld4q_f64(v36);
              v38 = (unsigned __int128)vld4q_f64(v35);
              *(v33 - 1) = v37;
              *v33 = v38;
              v33 += 2;
              v35 += 16;
              v34 += 4;
            }
            while (v34);
            v7 = v32;
          }
        }
        v39 = a5 - v7;
        v40 = (uint64_t *)(v16 + 32 * v7 + 24);
        do
        {
          v41 = *v40;
          v40 += 4;
          *v15++ = v41;
          --v39;
        }
        while (v39);
      }
      else
      {
        if (v14)
        {
          while (1)
            *v15++ = mlir::detail::OpResultImpl::getNextResultAtOffset(a2 & 0xFFFFFFFFFFFFFFF8, v7++);
        }
        do
          *v15++ = mlir::detail::OpResultImpl::getNextResultAtOffset(a2 & 0xFFFFFFFFFFFFFFF8, v7++);
        while (a5 != v7);
      }
    }
    else
    {
      if (v14)
      {
        for (j = (uint64_t *)(v16 + 8 * v7); ; ++j)
        {
          v18 = *j;
          *v15++ = v18;
        }
      }
      if (v10 < 0xA)
        goto LABEL_25;
      v21 = 8 * v11 + v13;
      v22 = 8 * v7;
      if (v21 - (v16 + 8 * v7) < 0x20)
        goto LABEL_25;
      v15 += v10 & 0xFFFFFFFFFFFFFFFCLL;
      v7 += v10 & 0xFFFFFFFFFFFFFFFCLL;
      v23 = (_OWORD *)(v21 + 16);
      v24 = (__int128 *)(v22 + v16 + 16);
      v25 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 += 2;
        v24 += 2;
        v25 -= 4;
      }
      while (v25);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        v27 = a5 - v7;
        v28 = (uint64_t *)(v16 + 8 * v7);
        do
        {
          v29 = *v28++;
          *v15++ = v29;
          --v27;
        }
        while (v27);
      }
    }
  }
  *(_DWORD *)(a1 + 8) += v10;
}

void mlir::OperationState::addSuccessors(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = a1 + 50;
  v7 = a1[52];
  v8 = a3 + v7;
  if (v8 > a1[53])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 50), a1 + 54, v8, 8);
    LODWORD(v7) = a1[52];
  }
  if (a3)
  {
    v9 = 0;
    v10 = *v6 + 8 * v7;
    do
    {
      *(_QWORD *)(v10 + 8 * v9) = mlir::BlockRange::dereference_iterator(a2, v9);
      ++v9;
    }
    while (a3 != v9);
    LODWORD(v7) = a1[52];
  }
  a1[52] = v7 + a3;
}

uint64_t mlir::OperationState::addRegion(mlir::OperationState *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v7;

  v2 = operator new(0x18uLL);
  *v2 = v2;
  v2[1] = v2;
  v2[2] = 0;
  v7 = v2;
  v3 = *((unsigned int *)this + 58);
  if (v3 >= *((_DWORD *)this + 59))
  {
    llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<mlir::Region*>((uint64_t)this + 224, &v7);
    return *(_QWORD *)(*((_QWORD *)this + 28) + 8 * *((unsigned int *)this + 58) - 8);
  }
  else
  {
    v4 = *((_QWORD *)this + 28);
    *(_QWORD *)(v4 + 8 * v3) = v2;
    v5 = v3 + 1;
    *((_DWORD *)this + 58) = v5;
    return *(_QWORD *)(v4 + 8 * v5 - 8);
  }
}

char *mlir::OperationState::addRegion(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress(a1 + 224, a2, 1);
  v4 = *(_QWORD *)(a1 + 224);
  v5 = *(unsigned int *)(a1 + 232);
  v6 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(v4 + 8 * v5) = v6;
  *(_DWORD *)(a1 + 232) = v5 + 1;
  return result;
}

char *mlir::OperationState::addRegions(char *result, unint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    v4 = result;
    v5 = (uint64_t)(result + 224);
    v6 = 8 * a3;
    do
    {
      result = llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress(v5, a2, 1);
      v7 = *((_QWORD *)v4 + 28);
      v8 = *((unsigned int *)v4 + 58);
      v9 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)(v7 + 8 * v8) = v9;
      *((_DWORD *)v4 + 58) = v8 + 1;
      a2 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t mlir::detail::OperandStorage::OperandStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *NextResultAtOffset;
  uint64_t v22;

  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)a1 = a5 & 0x7FFFFFFF;
  *(_DWORD *)(a1 + 4) = a5 & 0x7FFFFFFF;
  if ((a5 & 0x7FFFFFFF) != 0)
  {
    v7 = a4 & 0xFFFFFFFFFFFFFFF8;
    if ((a4 & 6) != 0 || !v7)
    {
      if ((a4 & 6) == 2 && v7)
      {
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = (uint64_t *)(*(_QWORD *)(a1 + 8) + v13);
          v16 = *(uint64_t **)(v7 + 24 + v13);
          v15[2] = a2;
          v15[3] = (uint64_t)v16;
          *v15 = 0;
          v15[1] = (uint64_t)v16;
          v17 = *v16;
          *v15 = *v16;
          if (v17)
            *(_QWORD *)(v17 + 8) = v15;
          *v16 = (uint64_t)v15;
          ++v14;
          v13 += 32;
        }
        while (v14 < *(unsigned int *)(a1 + 4));
      }
      else
      {
        v18 = 0;
        v19 = 0;
        do
        {
          v20 = (uint64_t *)(*(_QWORD *)(a1 + 8) + v18);
          NextResultAtOffset = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v19);
          v20[2] = a2;
          v20[3] = (uint64_t)NextResultAtOffset;
          *v20 = 0;
          v20[1] = (uint64_t)NextResultAtOffset;
          v22 = *NextResultAtOffset;
          *v20 = *NextResultAtOffset;
          if (v22)
            *(_QWORD *)(v22 + 8) = v20;
          *NextResultAtOffset = (uint64_t)v20;
          ++v19;
          v18 += 32;
        }
        while (v19 < *(unsigned int *)(a1 + 4));
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a1 + 8) + v8);
        v11 = *(uint64_t **)(v7 + 8 * v9);
        v10[2] = a2;
        v10[3] = (uint64_t)v11;
        *v10 = 0;
        v10[1] = (uint64_t)v11;
        v12 = *v11;
        *v10 = *v11;
        if (v12)
          *(_QWORD *)(v12 + 8) = v10;
        *v11 = (uint64_t)v10;
        ++v9;
        v8 += 32;
      }
      while (v9 < *(unsigned int *)(a1 + 4));
    }
  }
  return a1;
}

void mlir::detail::OperandStorage::~OperandStorage(mlir::detail::OperandStorage *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 1);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD **)(*((_QWORD *)this + 1) + 8);
    do
    {
      if (*v3)
      {
        **v3 = *(v3 - 1);
        v4 = (uint64_t)*(v3 - 1);
        if (v4)
          *(_QWORD *)(v4 + 8) = *v3;
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  if ((*(_DWORD *)this & 0x80000000) != 0)
    free(*((void **)this + 1));
}

uint64_t *mlir::detail::OperandStorage::setOperands(mlir::detail::OperandStorage *a1, mlir::Operation *a2, uint64_t a3, unsigned int a4)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t i;
  uint64_t *v21;
  uint64_t v22;

  result = mlir::detail::OperandStorage::resize(a1, a2, a4);
  if (a4)
  {
    v7 = result;
    v8 = (uint64_t **)(a3 & 0xFFFFFFFFFFFFFFF8);
    v9 = a3 & 6;
    if ((a3 & 6) != 0 || !v8)
    {
      v15 = a4;
      if (v9 == 2 && v8)
      {
        v16 = v8 + 3;
        do
        {
          v17 = *v16;
          v18 = (uint64_t *)v7[1];
          if (v18)
          {
            *v18 = *v7;
            if (*v7)
              *(_QWORD *)(*v7 + 8) = v7[1];
          }
          v7[3] = (uint64_t)v17;
          v19 = *v17;
          *v7 = *v17;
          v7[1] = (uint64_t)v17;
          if (v19)
            *(_QWORD *)(v19 + 8) = v7;
          *v17 = (uint64_t)v7;
          v7 += 4;
          v16 += 4;
          --v15;
        }
        while (v15);
      }
      else
      {
        for (i = 0; i != v15; ++i)
        {
          result = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v8, i);
          v21 = (uint64_t *)v7[1];
          if (v21)
          {
            *v21 = *v7;
            if (*v7)
              *(_QWORD *)(*v7 + 8) = v7[1];
          }
          v7[3] = (uint64_t)result;
          v22 = *result;
          *v7 = *result;
          v7[1] = (uint64_t)result;
          if (v22)
            *(_QWORD *)(v22 + 8) = v7;
          *result = (uint64_t)v7;
          v7 += 4;
        }
      }
    }
    else
    {
      v10 = a4;
      do
      {
        v12 = *v8++;
        v11 = v12;
        v13 = (uint64_t *)v7[1];
        if (v13)
        {
          *v13 = *v7;
          if (*v7)
            *(_QWORD *)(*v7 + 8) = v7[1];
        }
        v7[3] = (uint64_t)v11;
        v14 = *v11;
        *v7 = *v11;
        v7[1] = (uint64_t)v11;
        if (v14)
          *(_QWORD *)(v14 + 8) = v7;
        *v11 = (uint64_t)v7;
        v7 += 4;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

_QWORD *mlir::detail::OperandStorage::resize(mlir::detail::OperandStorage *this, mlir::Operation *a2, unsigned int a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD **v27;
  uint64_t v28;
  _QWORD *v29;

  v5 = *((_QWORD *)this + 1);
  v6 = (_QWORD *)v5;
  v7 = *((unsigned int *)this + 1);
  if (v7 >= a3)
  {
    if ((_DWORD)v7 != a3)
    {
      v24 = a3;
      do
      {
        v25 = (_QWORD *)(v5 + 32 * v24);
        v26 = (_QWORD *)v25[1];
        if (v26)
        {
          *v26 = *v25;
          if (*v25)
            *(_QWORD *)(*v25 + 8) = v25[1];
        }
        ++v24;
      }
      while ((_DWORD)v7 != v24);
    }
    *((_DWORD *)this + 1) = a3;
  }
  else
  {
    v9 = *(_DWORD *)this & 0x7FFFFFFF;
    if (v9 >= a3)
    {
      do
      {
        v19 = (_QWORD *)(v5 + 32 * v7);
        *v19 = 0;
        v19[1] = 0;
        v19[2] = a2;
        v19[3] = 0;
        LODWORD(v7) = *((_DWORD *)this + 1) + 1;
        *((_DWORD *)this + 1) = v7;
      }
      while ((_DWORD)v7 != a3);
    }
    else
    {
      v10 = (v9 + 2) | ((unint64_t)(v9 + 2) >> 1) | (((v9 + 2) | ((unint64_t)(v9 + 2) >> 1)) >> 2);
      v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
      v12 = (v11 >> 16) | v11;
      if (v12 + 1 > a3)
        v13 = v12 + 1;
      else
        v13 = a3;
      v14 = malloc(32 * v13);
      v6 = v14;
      if ((_DWORD)v7)
      {
        v15 = (uint64_t **)(v5 + 24);
        v16 = 32 * v7;
        v17 = 32 * v7;
        v18 = v14;
        do
        {
          v20 = *(v15 - 2);
          v18[2] = (uint64_t)*(v15 - 1);
          if (v20)
          {
            *v20 = *(v15 - 3);
            v21 = (uint64_t)*(v15 - 3);
            if (v21)
              *(_QWORD *)(v21 + 8) = *(v15 - 2);
          }
          *(v15 - 2) = 0;
          *v18 = 0;
          v18[1] = 0;
          v22 = *v15;
          v18[3] = (uint64_t)*v15;
          *v15 = 0;
          if (v22)
          {
            v23 = *v22;
            *v18 = *v22;
            v18[1] = (uint64_t)v22;
            if (v23)
              *(_QWORD *)(v23 + 8) = v18;
            *v22 = (uint64_t)v18;
          }
          v18 += 4;
          v15 += 4;
          v17 -= 32;
        }
        while (v17);
        v27 = (_QWORD **)(v5 + 8);
        do
        {
          if (*v27)
          {
            **v27 = *(v27 - 1);
            v28 = (uint64_t)*(v27 - 1);
            if (v28)
              *(_QWORD *)(v28 + 8) = *v27;
          }
          v27 += 4;
          v16 -= 32;
        }
        while (v16);
      }
      if ((_DWORD)v7 != a3)
      {
        do
        {
          v29 = &v14[4 * v7];
          *v29 = 0;
          v29[1] = 0;
          v29[2] = a2;
          v29[3] = 0;
          LODWORD(v7) = v7 + 1;
        }
        while (a3 != (_DWORD)v7);
        *((_DWORD *)this + 1) = a3;
      }
      if ((*(_DWORD *)this & 0x80000000) != 0)
        free(*((void **)this + 1));
      *((_QWORD *)this + 1) = v6;
      *(_DWORD *)this = v13 | 0x80000000;
    }
  }
  return v6;
}

uint64_t mlir::detail::OperandStorage::setOperands(uint64_t result, mlir::Operation *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t i;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _BOOL4 v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;

  v6 = a6;
  v10 = result;
  v11 = a6 - a4;
  if (a6 == a4)
  {
    v6 = a4;
    if (!a4)
      return result;
    goto LABEL_6;
  }
  if (a6 < a4)
  {
    result = (uint64_t)mlir::detail::OperandStorage::eraseOperands((uint64_t *)result, a6 + a3, a4 - a6);
    if (!v6)
      return result;
LABEL_6:
    v12 = 0;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = (a5 & 6) != 0;
    v15 = (a5 & 6) != 2;
    v16 = a5 & 0xFFFFFFFFFFFFFFF8;
    if (v16)
      v17 = v14;
    else
      v17 = 1;
    if (v16)
      v18 = v15;
    else
      v18 = 1;
    for (i = 24; ; i += 32)
    {
      if ((v17 & 1) != 0)
      {
        if ((v18 & 1) != 0)
        {
          result = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v12);
          v20 = (_QWORD *)(v13 + 32 * (a3 + v12));
          v21 = (_QWORD *)v20[1];
          if (v21)
            goto LABEL_21;
        }
        else
        {
          result = *(_QWORD *)(v16 + i);
          v20 = (_QWORD *)(v13 + 32 * (a3 + v12));
          v21 = (_QWORD *)v20[1];
          if (v21)
          {
LABEL_21:
            *v21 = *v20;
            if (*v20)
              *(_QWORD *)(*v20 + 8) = v20[1];
          }
        }
      }
      else
      {
        result = *(_QWORD *)(v16 + 8 * v12);
        v20 = (_QWORD *)(v13 + 32 * (a3 + v12));
        v21 = (_QWORD *)v20[1];
        if (v21)
          goto LABEL_21;
      }
      v20[3] = result;
      v22 = *(_QWORD *)result;
      *v20 = *(_QWORD *)result;
      v20[1] = result;
      if (v22)
        *(_QWORD *)(v22 + 8) = v20;
      *(_QWORD *)result = v20;
      if (v6 == ++v12)
        return result;
    }
  }
  result = (uint64_t)mlir::detail::OperandStorage::resize((mlir::detail::OperandStorage *)result, a2, *(_DWORD *)(result + 4) + (int)v11);
  v24 = result;
  v46 = a3;
  v25 = v23 - (a4 + a3);
  if ((_DWORD)v25 != (_DWORD)v11)
  {
    v26 = result + 32 * v23;
    v27 = (uint64_t *)(v26 - 32 * v25);
    v28 = (uint64_t *)(v26 - 32 * v11);
    v29 = (uint64_t *)(v26 - 32);
    result = (uint64_t)std::swap[abi:nn180100]<mlir::OpOperand>((uint64_t *)(v26 - 32), v28 - 4);
    if (v28 - 4 != v27)
    {
      v30 = 0;
      v31 = 32 * v11 - 32 * v25 + 32;
      v32 = (uint64_t)v28;
      do
      {
        if (v26 + v30 - 32 == v32)
          v32 = (uint64_t)&v28[v30 / 8 - 4];
        result = (uint64_t)std::swap[abi:nn180100]<mlir::OpOperand>((uint64_t *)(v26 + v30 - 64), &v28[v30 / 8 - 8]);
        v30 -= 32;
      }
      while (v31 != v30);
      v29 = (uint64_t *)(v26 + v30 - 32);
      v28 = (uint64_t *)v32;
    }
    if (v29 != v28)
    {
      v33 = v28;
      while (1)
      {
        v33 -= 4;
        result = (uint64_t)std::swap[abi:nn180100]<mlir::OpOperand>(v29 - 4, v33);
        v34 = v29 - 4 == v28;
        if (v33 == v27)
        {
          if (v29 - 4 == v28)
            break;
          v33 = v28 - 4;
          v29 -= 8;
          while (1)
          {
            result = (uint64_t)std::swap[abi:nn180100]<mlir::OpOperand>(v29, v28 - 4);
            v34 = v29 == v28;
            if (v33 != v27)
              break;
            v35 = v29 == v28;
            v29 -= 4;
            if (v35)
              goto LABEL_44;
          }
        }
        else
        {
          v29 -= 4;
        }
        if (v34)
          v28 = v33;
      }
    }
  }
LABEL_44:
  if (v6)
  {
    v36 = 0;
    v37 = (a5 & 6) != 0;
    v38 = (a5 & 6) != 2;
    v39 = a5 & 0xFFFFFFFFFFFFFFF8;
    if (v39)
      v40 = v37;
    else
      v40 = 1;
    if (v39)
      v41 = v38;
    else
      v41 = 1;
    v42 = 24;
    do
    {
      if ((v40 & 1) != 0)
      {
        if ((v41 & 1) != 0)
        {
          result = mlir::detail::OpResultImpl::getNextResultAtOffset(v39, v36);
          v43 = (_QWORD *)(v24 + 32 * (v46 + v36));
          v44 = (_QWORD *)v43[1];
          if (v44)
            goto LABEL_60;
        }
        else
        {
          result = *(_QWORD *)(v39 + v42);
          v43 = (_QWORD *)(v24 + 32 * (v46 + v36));
          v44 = (_QWORD *)v43[1];
          if (v44)
          {
LABEL_60:
            *v44 = *v43;
            if (*v43)
              *(_QWORD *)(*v43 + 8) = v43[1];
          }
        }
      }
      else
      {
        result = *(_QWORD *)(v39 + 8 * v36);
        v43 = (_QWORD *)(v24 + 32 * (v46 + v36));
        v44 = (_QWORD *)v43[1];
        if (v44)
          goto LABEL_60;
      }
      v43[3] = result;
      v45 = *(_QWORD *)result;
      *v43 = *(_QWORD *)result;
      v43[1] = result;
      if (v45)
        *(_QWORD *)(v45 + 8) = v43;
      *(_QWORD *)result = v43;
      ++v36;
      v42 += 32;
    }
    while (v6 != v36);
  }
  return result;
}

uint64_t *mlir::detail::OperandStorage::eraseOperands(uint64_t *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _BOOL4 v21;

  v4 = (uint64_t)this;
  v5 = this[1];
  v6 = *((unsigned int *)this + 1);
  *((_DWORD *)this + 1) = v6 - a3;
  v7 = a2;
  v8 = v5 + 32 * a2;
  v9 = a3;
  v10 = (uint64_t *)(v8 + 32 * a3);
  v11 = (uint64_t *)(v5 + 32 * v6);
  v12 = (_DWORD)v6 - a3 == a2 || a3 == 0;
  if (!v12 && v10 != v11)
  {
    this = std::swap[abi:nn180100]<mlir::OpOperand>((uint64_t *)(v5 + 32 * a2), (uint64_t *)(v8 + 32 * a3));
    v17 = (uint64_t *)(v8 + 32);
    if (v10 + 4 != v11)
    {
      v18 = 32 * v9;
      v19 = 32 * v6 - 32 * v7 - 32;
      do
      {
        if (v17 == v10)
          v10 = &v17[(unint64_t)v18 / 8];
        this = std::swap[abi:nn180100]<mlir::OpOperand>(v17, &v17[(unint64_t)v18 / 8]);
        v17 += 4;
        v19 -= 32;
      }
      while (v18 != v19);
    }
    if (v17 != v10)
    {
      v20 = v10;
      while (1)
      {
        this = std::swap[abi:nn180100]<mlir::OpOperand>(v17, v10);
        v10 += 4;
        v21 = v17 + 4 == v20;
        if (v10 == v11)
        {
          if (v17 + 4 == v20)
            break;
          v10 = v20 + 4;
          v17 += 8;
          while (1)
          {
            this = std::swap[abi:nn180100]<mlir::OpOperand>(v17 - 4, v20);
            v21 = v17 == v20;
            if (v10 != v11)
              break;
            v12 = v17 == v20;
            v17 += 4;
            if (v12)
              goto LABEL_9;
          }
        }
        else
        {
          v17 += 4;
        }
        if (v21)
          v20 = v10;
      }
    }
  }
LABEL_9:
  if (a3)
  {
    v14 = *(_DWORD *)(v4 + 4);
    do
    {
      v15 = (_QWORD *)(v5 + 32 * v14);
      v16 = (_QWORD *)v15[1];
      if (v16)
      {
        *v16 = *v15;
        if (*v15)
          *(_QWORD *)(*v15 + 8) = v15[1];
      }
      ++v14;
      --v9;
    }
    while (v9);
  }
  return this;
}

unint64_t mlir::OperandRange::getBeginOperandIndex(mlir::OperandRange *this)
{
  return mlir::OpOperand::getOperandNumber(*(_QWORD *)this);
}

uint64_t mlir::OperandRange::split@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = *a1;
  v7 = a2;
  result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v7);
  *a3 = v5;
  a3[1] = a2;
  a3[2] = 0;
  a3[3] = result;
  return result;
}

uint64_t mlir::OperandRangeRange::dereference(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int32x4_t *v11;
  int32x4_t v12;
  uint64_t v13;
  int32x4_t v14;
  int v15;
  uint64_t v17;

  v17 = a1[1];
  v4 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
  if (a2)
  {
    v5 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v5 >= 7)
    {
      v9 = v5 + 1;
      v10 = (v5 + 1) & 0x7FFFFFFFFFFFFFF8;
      v7 = (int *)(v4 + 4 * v10);
      v11 = (int32x4_t *)(v4 + 16);
      v12 = 0uLL;
      v13 = v10;
      v14 = 0uLL;
      do
      {
        v12 = vaddq_s32(v11[-1], v12);
        v14 = vaddq_s32(*v11, v14);
        v11 += 2;
        v13 -= 8;
      }
      while (v13);
      v6 = vaddvq_s32(vaddq_s32(v14, v12));
      if (v9 == v10)
        goto LABEL_9;
    }
    else
    {
      v6 = 0;
      v7 = (int *)v4;
    }
    do
    {
      v15 = *v7++;
      v6 += v15;
    }
    while (v7 != (int *)(v4 + 4 * a2));
LABEL_9:
    v8 = v6;
    return *a1 + 32 * v8;
  }
  v8 = 0;
  return *a1 + 32 * v8;
}

uint64_t mlir::MutableOperandRange::MutableOperandRange(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5, uint64_t a6)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  v9 = (void *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = a1 + 32;
  v10 = a1 + 16;
  v11 = 3 * a6;
  *(_QWORD *)(a1 + 24) = 0x100000000;
  v12 = (24 * a6) >> 3;
  v13 = -1431655765 * v12;
  if (0xAAAAAAAAAAAAAAABLL * v12 >= 2)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v9, 0xAAAAAAAAAAAAAAABLL * v12, 24);
    v14 = *(_DWORD *)(a1 + 24);
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  if (a6)
  {
LABEL_5:
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 24 * v14), a5, 8 * v11);
    v14 = *(_DWORD *)(a1 + 24);
  }
LABEL_6:
  *(_DWORD *)(a1 + 24) = v14 + v13;
  return a1;
}

double mlir::MutableOperandRange::MutableOperandRange(mlir::MutableOperandRange *this, mlir::Operation *a2)
{
  int v2;
  double result;

  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
    v2 = *((_DWORD *)a2 + 17);
  else
    v2 = 0;
  *(_QWORD *)this = a2;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = v2;
  *((_QWORD *)this + 2) = (char *)this + 32;
  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 3) = 0x100000000;
  return result;
}

mlir::MutableOperandRange *mlir::MutableOperandRange::MutableOperandRange(mlir::MutableOperandRange *this, mlir::OpOperand *a2)
{
  uint64_t v3;
  int OperandNumber;

  v3 = *((_QWORD *)a2 + 2);
  OperandNumber = mlir::OpOperand::getOperandNumber((unint64_t)a2);
  *(_QWORD *)this = v3;
  *((_DWORD *)this + 2) = OperandNumber;
  *((_DWORD *)this + 3) = 1;
  *((_QWORD *)this + 2) = (char *)this + 32;
  *((_QWORD *)this + 3) = 0x100000000;
  return this;
}

void mlir::MutableOperandRange::slice(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 *v5;
  int v7;
  const void *v8;
  unint64_t v9;
  void *v10;
  unint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;

  v5 = a4;
  v7 = *(_DWORD *)(a1 + 8) + a2;
  v8 = *(const void **)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 24);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_DWORD *)(a5 + 8) = v7;
  *(_DWORD *)(a5 + 12) = a3;
  v10 = (void *)(a5 + 32);
  *(_QWORD *)(a5 + 16) = a5 + 32;
  v11 = (unint64_t *)(a5 + 16);
  *(_QWORD *)(a5 + 24) = 0x100000000;
  if (v9 < 2)
  {
    if (!(_DWORD)v9)
    {
      v13 = 0;
      *(_DWORD *)(a5 + 24) = 0;
      if (!*((_BYTE *)a4 + 24))
        return;
      goto LABEL_6;
    }
    v12 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, v10, v9, 24);
    v12 = *(_DWORD *)(a5 + 24);
  }
  memcpy((void *)(*(_QWORD *)(a5 + 16) + 24 * v12), v8, 24 * v9);
  v13 = (*(_DWORD *)(a5 + 24) + v9);
  *(_DWORD *)(a5 + 24) = v13;
  if (!*((_BYTE *)v5 + 24))
    return;
LABEL_6:
  v14 = *(_QWORD *)(a5 + 16);
  if (v13 >= *(_DWORD *)(a5 + 28))
  {
    v17 = v13 + 1;
    if (v14 <= (unint64_t)v5 && v14 + 24 * v13 > (unint64_t)v5)
    {
      v18 = (uint64_t)v5 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, v10, v17, 24);
      v14 = *v11;
      v5 = (__int128 *)(*v11 + v18);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, v10, v17, 24);
      v14 = *v11;
    }
  }
  v15 = v14 + 24 * *(unsigned int *)(a5 + 24);
  v16 = *v5;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a5 + 24);
}

void mlir::MutableOperandRange::append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = a3;
  if (a3)
  {
    mlir::Operation::insertOperands(*(mlir::Operation **)a1, *(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 8), a2, a3);
    mlir::MutableOperandRange::updateLength((mlir::MutableOperandRange *)a1, *(_DWORD *)(a1 + 12) + v3);
  }
}

void mlir::MutableOperandRange::updateLength(mlir::MutableOperandRange *this, int a2)
{
  int v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  _QWORD *v13;
  mlir::MLIRContext *Context;
  uint64_t v15;
  uint64_t CallableRegion;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = a2;
  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3)
  {
    v5 = a2 - v2;
    v6 = 24 * v3;
    for (i = (uint64_t *)(*((_QWORD *)this + 2) + 8); ; i += 3)
    {
      v17 = i[1];
      v9 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
      v10 = v8;
      v18 = v20;
      v19 = 0x800000000;
      v11 = 4 * v8;
      if ((unint64_t)(4 * v8) >= 0x21)
        break;
      v12 = 0;
      v13 = v20;
      if (v8)
        goto LABEL_8;
LABEL_9:
      LODWORD(v19) = v12 + (v11 >> 2);
      *((_DWORD *)v13 + *((unsigned int *)i - 2)) += v5;
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
      i[1] = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)v18, v19);
      v15 = *(_QWORD *)this;
      CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i);
      mlir::Operation::setAttr(v15, CallableRegion, i[1]);
      if (v18 != v20)
        free(v18);
      v6 -= 24;
      if (!v6)
        return;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, (4 * v8) >> 2, 4);
    v12 = v19;
    v13 = v18;
    if (!v10)
      goto LABEL_9;
LABEL_8:
    memcpy((char *)v13 + 4 * v12, v9, v11);
    v12 = v19;
    v13 = v18;
    goto LABEL_9;
  }
}

void mlir::MutableOperandRange::assign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setOperands(*(mlir::Operation **)a1, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), a2, a3);
  if (a3 != *(_DWORD *)(a1 + 12))
    mlir::MutableOperandRange::updateLength((mlir::MutableOperandRange *)a1, a3);
}

void mlir::MutableOperandRange::erase(mlir::MutableOperandRange *this, int a2, unsigned int a3)
{
  if (*((_DWORD *)this + 3))
  {
    mlir::detail::OperandStorage::eraseOperands((uint64_t *)(*(_QWORD *)this + 64), *((_DWORD *)this + 2) + a2, a3);
    mlir::MutableOperandRange::updateLength(this, *((_DWORD *)this + 3) - a3);
  }
}

void mlir::MutableOperandRange::clear(mlir::MutableOperandRange *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 3);
  if (v1)
  {
    mlir::detail::OperandStorage::eraseOperands((uint64_t *)(*(_QWORD *)this + 64), *((_DWORD *)this + 2), v1);
    mlir::MutableOperandRange::updateLength(this, 0);
  }
}

uint64_t mlir::MutableOperandRange::operator mlir::OperandRange(unsigned int *a1)
{
  if ((*(_BYTE *)(*(_QWORD *)a1 + 46) & 0x80) != 0)
    return *(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * a1[2];
  else
    return 32 * a1[2];
}

uint64_t mlir::MutableOperandRange::split@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return mlir::MutableOperandRangeRange::MutableOperandRangeRange(a4, a1, a2, a3);
}

uint64_t mlir::MutableOperandRangeRange::MutableOperandRangeRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t LHS;
  uint64_t v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[6];

  v18[5] = *MEMORY[0x1E0C80C00];
  v15 = *(_OWORD *)a2;
  v16 = v18;
  v17 = 0x100000000;
  if (&v15 != (__int128 *)a2)
  {
    v8 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v8)
    {
      if (v8 < 2)
      {
        v11 = 24;
        v10 = v18;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, v8, 24);
        v9 = *(unsigned int *)(a2 + 24);
        if (!(_DWORD)v9)
        {
LABEL_8:
          LODWORD(v17) = v8;
          goto LABEL_9;
        }
        v10 = v16;
        v11 = 24 * v9;
      }
      memcpy(v10, *(const void **)(a2 + 16), v11);
      goto LABEL_8;
    }
  }
LABEL_9:
  v18[3] = a3;
  v18[4] = a4;
  v14 = a4;
  LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v14);
  llvm::indexed_accessor_range<mlir::MutableOperandRangeRange,std::pair<mlir::MutableOperandRange,mlir::NamedAttribute>,mlir::MutableOperandRange,mlir::MutableOperandRange,mlir::MutableOperandRange>::indexed_accessor_range(a1, &v15, 0, LHS);
  if (v16 != v18)
    free(v16);
  return a1;
}

uint64_t mlir::MutableOperandRange::operator[](_DWORD *a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * (a1[2] + a2);
}

uint64_t mlir::MutableOperandRange::begin(mlir::MutableOperandRange *this)
{
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * *((unsigned int *)this + 2);
  else
    return 32 * *((unsigned int *)this + 2);
}

uint64_t mlir::MutableOperandRange::end(mlir::MutableOperandRange *this)
{
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * *((unsigned int *)this + 2) + 32 * *((unsigned int *)this + 3);
  else
    return 32 * *((unsigned int *)this + 2) + 32 * *((unsigned int *)this + 3);
}

void mlir::MutableOperandRangeRange::dereference(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int *v7;
  unint64_t v8;
  int v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  int32x4_t *v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  char v22;
  _BYTE v23[20];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v23 = *(_QWORD *)(a1 + 64);
  v6 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)v23);
  v7 = (int *)(v6 + 4 * a2);
  if (!a2)
  {
    v9 = 0;
    goto LABEL_9;
  }
  v8 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v8 < 7)
  {
    v9 = 0;
    v10 = (int *)v6;
    do
    {
LABEL_8:
      v17 = *v10++;
      v9 += v17;
    }
    while (v10 != v7);
    goto LABEL_9;
  }
  v11 = v8 + 1;
  v12 = (v8 + 1) & 0x7FFFFFFFFFFFFFF8;
  v10 = (int *)(v6 + 4 * v12);
  v13 = (int32x4_t *)(v6 + 16);
  v14 = 0uLL;
  v15 = v12;
  v16 = 0uLL;
  do
  {
    v14 = vaddq_s32(v13[-1], v14);
    v16 = vaddq_s32(*v13, v16);
    v13 += 2;
    v15 -= 8;
  }
  while (v15);
  v9 = vaddvq_s32(vaddq_s32(v16, v14));
  if (v11 != v12)
    goto LABEL_8;
LABEL_9:
  v18 = *v7;
  *(_OWORD *)&v23[4] = *(_OWORD *)(a1 + 56);
  v19 = a2;
  v20 = *(_OWORD *)v23;
  v21 = *(_DWORD *)&v23[16];
  v22 = 1;
  mlir::MutableOperandRange::slice(a1, v9, v18, (__int128 *)&v19, a3);
}

_QWORD *mlir::ResultRange::ResultRange(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 1;
  return result;
}

uint64_t *mlir::ResultRange::getUses@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = this;
  v4 = *this;
  v5 = this[1];
  if (v5)
  {
    this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(*this, 0);
    v6 = 0;
    if (!*this)
    {
      if (v5 == 1)
      {
        v7 = 0;
        v6 = 1;
        goto LABEL_9;
      }
      v6 = 1;
      while (1)
      {
        this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v6);
        if (*this)
          break;
        if (v5 == ++v6)
          goto LABEL_4;
      }
    }
    if (v6 == v5)
    {
LABEL_4:
      v7 = 0;
      v6 = v5;
    }
    else
    {
      this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v6);
      v7 = *this;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
LABEL_9:
  v8 = *v2;
  v9 = v2[1];
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v9;
  a2[7] = v8;
  a2[8] = v9;
  a2[9] = 0;
  return this;
}

uint64_t *mlir::ResultRange::use_begin@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *this;
  v3 = this[1];
  *a2 = *this;
  a2[1] = 0;
  a2[2] = v2;
  a2[3] = v3;
  a2[4] = 0;
  if (v3)
  {
    this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
    v5 = 0;
    if (!*this)
    {
      a2[1] = 1;
      if (v3 == 1)
        goto LABEL_10;
      v5 = 1;
      while (1)
      {
        this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v2, v5);
        if (*this)
          break;
        a2[1] = ++v5;
        if (v3 == v5)
          goto LABEL_10;
      }
    }
    if (v5 != v3)
    {
      this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v2, v5);
      a2[4] = *this;
      return this;
    }
LABEL_10:
    a2[4] = 0;
  }
  return this;
}

uint64_t *mlir::ResultRange::use_end@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *this;
  v3 = this[1];
  *a2 = *this;
  a2[1] = v3;
  a2[2] = v2;
  a2[3] = v3;
  a2[4] = 0;
  return this;
}

uint64_t *mlir::ResultRange::UseIterator::operator++(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  mlir::detail::OpResultImpl::getNextResultAtOffset(*a1, a1[1]);
  v2 = (uint64_t *)a1[4];
  if (v2)
    a1[4] = *v2;
  mlir::detail::OpResultImpl::getNextResultAtOffset(*a1, a1[1]);
  if (a1[4])
    return a1;
  do
  {
    v4 = *a1;
    v5 = a1[1] + 1;
    a1[1] = v5;
    if (v4 == a1[2] && v5 == a1[3])
      goto LABEL_11;
  }
  while (!*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v5));
  v6 = a1[1];
  if (*a1 == a1[2] && v6 == a1[3])
  {
LABEL_11:
    a1[4] = 0;
    return a1;
  }
  a1[4] = *(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(*a1, v6);
  return a1;
}

uint64_t *mlir::ResultRange::replaceAllUsesWith(uint64_t *this, mlir::Operation *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **NextResultAtOffset;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  v2 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v2)
    v3 = (char *)a2 - 16;
  else
    v3 = 0;
  v4 = this[1];
  if (v4)
    v5 = (_DWORD)v2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = 0;
    v7 = *this;
    do
    {
      NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v6);
      for (this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v3, v6); ; *this = (uint64_t)v9)
      {
        v9 = *NextResultAtOffset;
        if (!*NextResultAtOffset)
          break;
        v10 = (uint64_t *)v9[1];
        if (v10)
        {
          *v10 = *v9;
          if (*v9)
            *(_QWORD *)(*v9 + 8) = v9[1];
        }
        v9[3] = (uint64_t)this;
        v11 = *this;
        *v9 = *this;
        v9[1] = (uint64_t)this;
        if (v11)
          *(_QWORD *)(v11 + 8) = v9;
      }
      ++v6;
    }
    while (v6 != v4 && v6 != v2);
  }
  return this;
}

unint64_t *mlir::ValueRange::ValueRange(unint64_t *result, uint64_t a2, unint64_t a3)
{
  *result = a2 & 0xFFFFFFFFFFFFFFF9;
  result[1] = a3;
  return result;
}

{
  *result = a2 & 0xFFFFFFFFFFFFFFF9 | 2;
  result[1] = a3;
  return result;
}

{
  *result = a2 & 0xFFFFFFFFFFFFFFF9 | 4;
  result[1] = a3;
  return result;
}

unint64_t mlir::ValueRange::offset_base(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *a1 & 6;
  v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v2)
    v4 = 1;
  else
    v4 = v3 == 0;
  if (!v4)
    return v3 + 8 * a2;
  if (v2 != 2 || v3 == 0)
    return mlir::detail::OpResultImpl::getNextResultAtOffset(v3, a2) & 0xFFFFFFFFFFFFFFF9 | 4;
  else
    return (v3 + 32 * a2) | 2;
}

uint64_t mlir::ValueRange::dereference_iterator(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *a1 & 6;
  v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v2)
    v4 = 1;
  else
    v4 = v3 == 0;
  if (!v4)
    return *(_QWORD *)(v3 + 8 * a2);
  if (v2 != 2 || v3 == 0)
    return mlir::detail::OpResultImpl::getNextResultAtOffset(v3, a2);
  else
    return *(_QWORD *)(v3 + 32 * a2 + 24);
}

unint64_t mlir::OperationEquivalence::computeHash(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, char a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t NextResultAtOffset;
  uint64_t v28;
  unsigned __int8 v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v38;
  uint64_t v39[4];
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 48);
  v40 = *(_QWORD *)(a1 + 56);
  v41 = v10;
  v11 = *(unsigned int *)(a1 + 36);
  v12 = a1 - 16;
  if ((_DWORD)v11)
    v13 = a1 - 16;
  else
    v13 = 0;
  *(_QWORD *)&v42 = v13;
  *((_QWORD *)&v42 + 1) = v11;
  mlir::OperandRange::getTypes((uint64_t *)&v42, v39);
  v38 = mlir::Operation::hashProperties((mlir::Operation *)a1);
  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  {
    v32 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v32 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v32;
  }
  v50 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::OperationName,mlir::DictionaryAttr,mlir::ValueTypeRange<mlir::ResultRange>,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v42, 0, &v42, (char *)&v46, &v41, &v40, v39, &v38);
  if ((a6 & 1) == 0)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v42 = 0u;
    if ((v17 & 1) == 0
    {
      v33 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v33 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v33;
    }
    v50 = llvm::hashing::detail::get_execution_seed(void)::seed;
    *(_QWORD *)&v42 = v15;
    *((_QWORD *)&v42 + 1) = (v16 >> 4) ^ (v16 >> 9);
    v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v42, 0, (char *)&v43, (char *)&v46);
  }
  v35 = a1;
  if ((*(_BYTE *)(a1 + 46) & 0x80) != 0)
  {
    v18 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v18)
    {
      v19 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
      do
      {
        v20 = a2(a3, *v19);
        v49 = 0;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v42 = 0u;
        if ((v21 & 1) == 0)
        {
          v34 = v20;
          v20 = v34;
          if (v22)
          {
            v23 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v23 = 0xFF51AFD7ED558CCDLL;
            llvm::hashing::detail::get_execution_seed(void)::seed = v23;
            v20 = v34;
          }
        }
        v50 = llvm::hashing::detail::get_execution_seed(void)::seed;
        *(_QWORD *)&v42 = v15;
        *((_QWORD *)&v42 + 1) = v20;
        v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v42, 0, (char *)&v43, (char *)&v46);
        v19 += 4;
        --v18;
      }
      while (v18);
    }
  }
  v24 = *(unsigned int *)(v35 + 36);
  if ((_DWORD)v24)
    v25 = v12;
  else
    v25 = 0;
  if ((_DWORD)v24)
  {
    for (i = 0; i != v24; ++i)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, i);
      v28 = a4(a5, NextResultAtOffset);
      v49 = 0;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v42 = 0u;
      if ((v29 & 1) == 0
      {
        v30 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v30 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v30;
      }
      v50 = llvm::hashing::detail::get_execution_seed(void)::seed;
      *(_QWORD *)&v42 = v15;
      *((_QWORD *)&v42 + 1) = v28;
      v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v42, 0, (char *)&v43, (char *)&v46);
    }
  }
  return v15;
}

void mlir::OperationEquivalence::isRegionEquivalentTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Loc;
  uint64_t v34;
  mlir::GenericProgramPoint *v35;
  mlir::GenericProgramPoint *v36;
  mlir::GenericProgramPoint *v37;
  mlir::GenericProgramPoint *v38;
  Operation *v39;
  Operation *v40;
  uint64_t v41;
  Operation *v42;
  Operation *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  char *v57;
  int v58;
  BOOL v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  char *v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  mlir::GenericProgramPoint *v82;
  uint64_t v83;
  unsigned int v84;
  mlir::GenericProgramPoint *v85;
  llvm *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;

  v88 = 0;
  v89 = 0;
  v90 = 0;
  v10 = a1;
  v11 = a2;
  v78 = a1;
  v79 = a2;
  while (1)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_QWORD *)(v10 + 8);
    if (v13 == a1 || v12 == a2)
      goto LABEL_110;
    v80 = v13;
    v81 = v12;
    v15 = v13 ? (_QWORD *)(v13 - 8) : 0;
    v16 = v12 ? (_QWORD *)(v12 - 8) : 0;
    if (((v15[7] - v15[6]) >> 3) != ((v16[7] - v16[6]) >> 3))
      goto LABEL_110;
    v17 = v90;
    if (!v90)
      break;
    v18 = v90 - 1;
    v19 = (v90 - 1) & ((v15 >> 4) ^ (v15 >> 9));
    v20 = (char *)v88 + 16 * v19;
    v21 = *(_QWORD *)v20;
    if (v15 == *(_QWORD **)v20)
      goto LABEL_29;
    v22 = 0;
    v23 = 1;
    while (v21 != -4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v21 == -8192;
      if (v24)
        v22 = v20;
      v25 = v19 + v23++;
      v19 = v25 & v18;
      v20 = (char *)v88 + 16 * (v25 & v18);
      v21 = *(_QWORD *)v20;
      if (v15 == *(_QWORD **)v20)
        goto LABEL_29;
    }
    if (v22)
      v20 = v22;
    if (4 * (int)v89 + 4 >= 3 * v90)
      break;
    if (v90 + ~(_DWORD)v89 - HIDWORD(v89) <= v90 >> 3)
      goto LABEL_94;
    v26 = *(_QWORD *)v20;
    LODWORD(v89) = v89 + 1;
    if (v26 != -4096)
      goto LABEL_27;
LABEL_28:
    *(_QWORD *)v20 = v15;
    *((_QWORD *)v20 + 1) = v16;
LABEL_29:
    if (*((_QWORD **)v20 + 1) != v16)
      goto LABEL_110;
    v27 = (unint64_t *)v15[6];
    v28 = v15[7] - (_QWORD)v27;
    if (v28)
    {
      v30 = (uint64_t *)v16[6];
      v29 = (_QWORD *)v16[7];
      if (v29 != v30)
      {
        v31 = 8 * (v29 - v30) - 8;
        v32 = 8 * (v28 >> 3) - 8;
        while (1)
        {
          v92 = *v27;
          v91 = *v30;
          if ((*(_QWORD *)(v92 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v91 + 8) & 0xFFFFFFFFFFFFFFF8))
            break;
          if ((a7 & 1) == 0)
          {
            Loc = mlir::Value::getLoc((mlir::Value *)&v92);
            if (Loc != mlir::Value::getLoc((mlir::Value *)&v91))
              break;
          }
          if (a5)
            a5(a6, v92, v91);
          if (v32)
          {
            ++v27;
            ++v30;
            v34 = v31;
            v31 -= 8;
            v32 -= 8;
            if (v34)
              continue;
          }
          goto LABEL_40;
        }
LABEL_110:
        llvm::deallocate_buffer(v88, (void *)(16 * v90));
      }
    }
LABEL_40:
    v35 = (mlir::GenericProgramPoint *)(v15 + 4);
    v36 = (mlir::GenericProgramPoint *)(v16 + 4);
    v37 = (mlir::GenericProgramPoint *)v16[5];
    v38 = (mlir::GenericProgramPoint *)v15[5];
    v85 = v35;
    if (v38 != v35)
    {
      v84 = a7;
      v82 = v36;
      v83 = a6;
      while (1)
      {
        if (v37 == v36)
          goto LABEL_110;
        mlir::GenericProgramPoint::~GenericProgramPoint(v38);
        v40 = v39;
        mlir::GenericProgramPoint::~GenericProgramPoint(v37);
        v41 = a6;
        v43 = v42;
        if (!mlir::OperationEquivalence::isEquivalentTo(v40, v42, a3, a4, a5, v41, a7))
          goto LABEL_110;
        v44 = mlir::SuccessorRange::SuccessorRange(&v92, v40);
        v45 = v92;
        v46 = v93;
        mlir::SuccessorRange::SuccessorRange(v44, v43);
        if (v46)
        {
          v47 = v93;
          if (v93)
            break;
        }
LABEL_42:
        v37 = (mlir::GenericProgramPoint *)*((_QWORD *)v37 + 1);
        v38 = (mlir::GenericProgramPoint *)*((_QWORD *)v38 + 1);
        a7 = v84;
        v36 = v82;
        a6 = v83;
        if (v38 == v85)
          goto LABEL_88;
      }
      v48 = 0;
      v49 = v92;
      while (2)
      {
        v50 = *(_QWORD *)(v45 + 32 * v48 + 24);
        v51 = *(_QWORD *)(v49 + 32 * v48 + 24);
        v52 = v90;
        if (v90)
        {
          v53 = v90 - 1;
          v54 = ((v50 >> 4) ^ (v50 >> 9)) & (v90 - 1);
          v55 = (char *)v88 + 16 * v54;
          v56 = *(_QWORD *)v55;
          if (v50 == *(_QWORD *)v55)
            goto LABEL_64;
          v57 = 0;
          v58 = 1;
          while (v56 != -4096)
          {
            if (v57)
              v59 = 0;
            else
              v59 = v56 == -8192;
            if (v59)
              v57 = v55;
            v60 = v54 + v58++;
            v54 = v60 & v53;
            v55 = (char *)v88 + 16 * (v60 & v53);
            v56 = *(_QWORD *)v55;
            if (v50 == *(_QWORD *)v55)
              goto LABEL_64;
          }
          if (v57)
            v55 = v57;
          if (4 * (int)v89 + 4 >= 3 * v90)
            goto LABEL_71;
          if (v90 + ~(_DWORD)v89 - HIDWORD(v89) > v90 >> 3)
          {
            v61 = *(_QWORD *)v55;
            LODWORD(v89) = v89 + 1;
            if (v61 != -4096)
              goto LABEL_62;
LABEL_63:
            *(_QWORD *)v55 = v50;
            *((_QWORD *)v55 + 1) = v51;
LABEL_64:
            if (*((_QWORD *)v55 + 1) != v51)
              goto LABEL_110;
            if (++v48 == v46 || v48 == v47)
              goto LABEL_42;
            continue;
          }
        }
        else
        {
LABEL_71:
          v52 = 2 * v90;
        }
        break;
      }
      llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v88, v52);
      v62 = v90 - 1;
      v63 = (v90 - 1) & ((v50 >> 4) ^ (v50 >> 9));
      v55 = (char *)v88 + 16 * v63;
      v64 = *(_QWORD *)v55;
      if (v50 == *(_QWORD *)v55)
      {
LABEL_73:
        LODWORD(v89) = v89 + 1;
        if (v50 == -4096)
          goto LABEL_63;
      }
      else
      {
        v65 = 0;
        v66 = 1;
        while (v64 != -4096)
        {
          if (v65)
            v67 = 0;
          else
            v67 = v64 == -8192;
          if (v67)
            v65 = v55;
          v68 = v63 + v66++;
          v63 = v68 & v62;
          v55 = (char *)v88 + 16 * (v68 & v62);
          v64 = *(_QWORD *)v55;
          if (v50 == *(_QWORD *)v55)
            goto LABEL_73;
        }
        if (v65)
          v55 = v65;
        v69 = *(_QWORD *)v55;
        LODWORD(v89) = v89 + 1;
        if (v69 == -4096)
          goto LABEL_63;
      }
LABEL_62:
      --HIDWORD(v89);
      goto LABEL_63;
    }
LABEL_88:
    a1 = v78;
    a2 = v79;
    v10 = v80;
    v11 = v81;
    if (v37 != v36)
      goto LABEL_110;
  }
  v17 = 2 * v90;
LABEL_94:
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v88, v17);
  v70 = v90 - 1;
  v71 = (v90 - 1) & ((v15 >> 4) ^ (v15 >> 9));
  v20 = (char *)v88 + 16 * v71;
  v72 = *(_QWORD *)v20;
  if (v15 == *(_QWORD **)v20)
  {
LABEL_95:
    LODWORD(v89) = v89 + 1;
    if (v15 == (_QWORD *)-4096)
      goto LABEL_28;
  }
  else
  {
    v73 = 0;
    v74 = 1;
    while (v72 != -4096)
    {
      if (v73)
        v75 = 0;
      else
        v75 = v72 == -8192;
      if (v75)
        v73 = v20;
      v76 = v71 + v74++;
      v71 = v76 & v70;
      v20 = (char *)v88 + 16 * (v76 & v70);
      v72 = *(_QWORD *)v20;
      if (v15 == *(_QWORD **)v20)
        goto LABEL_95;
    }
    if (v73)
      v20 = v73;
    v77 = *(_QWORD *)v20;
    LODWORD(v89) = v89 + 1;
    if (v77 == -4096)
      goto LABEL_28;
  }
LABEL_27:
  --HIDWORD(v89);
  goto LABEL_28;
}

uint64_t mlir::OperationEquivalence::isEquivalentTo(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::detail::OpResultImpl *v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  mlir::detail::OpResultImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t NextResultAtOffset;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  mlir::detail::OpResultImpl *v49;
  mlir::detail::OpResultImpl *v50;

  if (a1 == a2)
    return 1;
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 != *(_QWORD *)(a2 + 48))
    return 0;
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
    return 0;
  v10 = *(unsigned int *)(a1 + 44);
  v11 = *(unsigned int *)(a2 + 44);
  if (((v11 ^ v10) & 0x7FFFFF) != 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
    return 0;
  if ((v10 & 0x800000) != 0)
  {
    v17 = *(_DWORD *)(a1 + 68);
    if ((v11 & 0x800000) != 0)
      goto LABEL_8;
LABEL_63:
    if (v17)
      return 0;
    goto LABEL_9;
  }
  v17 = 0;
  if ((v11 & 0x800000) == 0)
    goto LABEL_63;
LABEL_8:
  if (v17 != *(_DWORD *)(a2 + 68))
    return 0;
LABEL_9:
  if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
    return 0;
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v18 = a1 + 64 + 16 * ((v10 >> 23) & 1);
  else
    v18 = 0;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v19 = a2 + 64 + 16 * ((v11 >> 23) & 1);
  else
    v19 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 168))(v9, v18, v19);
  if (!(_DWORD)result)
    return result;
  if ((a7 & 1) == 0 && *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    return 0;
  if ((*(_BYTE *)(a1 + 46) & 0x80) != 0)
  {
    v21 = *(_QWORD *)(a1 + 72);
    v22 = *(unsigned int *)(a1 + 68);
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
LABEL_24:
      if (v22)
      {
        v23 = *(unsigned int *)(a2 + 68);
        if ((_DWORD)v23)
        {
          v24 = v21 + 24;
          v25 = *(_QWORD *)(a2 + 72) + 24;
          v26 = (mlir::detail::OpResultImpl *)(v22 - 1);
          v27 = v23 - 1;
          while (1)
          {
            if (*(_QWORD *)v24 != *(_QWORD *)v25)
            {
              if ((*(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)v25 + 8) & 0xFFFFFFFFFFFFFFF8))
                return 0;
              v49 = v26;
              v28 = a3(a4);
              v26 = v49;
              if (!v28)
                return 0;
            }
            v29 = v27-- != 0;
            v30 = v29;
            v29 = v26 != 0;
            v26 = (mlir::detail::OpResultImpl *)((char *)v26 - 1);
            if (v29)
            {
              v24 += 32;
              v25 += 32;
              if ((v30 & 1) != 0)
                continue;
            }
            break;
          }
        }
      }
    }
  }
  else
  {
    v21 = 0;
    v22 = 0;
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      goto LABEL_24;
  }
  v31 = *(unsigned int *)(a1 + 36);
  v32 = (mlir::detail::OpResultImpl *)(a1 - 16);
  v33 = *(unsigned int *)(a2 + 36);
  if (!(_DWORD)v31)
    v32 = 0;
  v50 = v32;
  if ((_DWORD)v33)
    v34 = a2 - 16;
  else
    v34 = 0;
  if ((_DWORD)v31 && (_DWORD)v33)
  {
    v35 = 0;
    v36 = v31 - 1;
    if (a5)
    {
      v47 = v36;
      v45 = v33 - 1;
      while (1)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v50, v35);
        v38 = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v35);
        if ((*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF8))
          break;
        a5(a6, NextResultAtOffset, v38);
        if (v47 != v35)
        {
          v39 = v45 == v35++;
          if (!v39)
            continue;
        }
        goto LABEL_55;
      }
    }
    else
    {
      v48 = v36;
      v46 = v33 - 1;
      while (1)
      {
        v40 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v50, v35);
        if ((*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v35)+ 8) & 0xFFFFFFFFFFFFFFF8))break;
        if (v48 != v35)
        {
          v39 = v46 == v35++;
          if (!v39)
            continue;
        }
        goto LABEL_55;
      }
    }
    return 0;
  }
LABEL_55:
  v41 = *(unsigned int *)(a1 + 44);
  v42 = v41 & 0x7FFFFF;
  if ((v41 & 0x7FFFFF) != 0)
  {
    v43 = ((a1 + 64 + 16 * ((v41 >> 23) & 1) + ((v41 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v43 = 0;
    v42 = 0;
  }
  v44 = *(unsigned int *)(a2 + 44);
  if ((v44 & 0x7FFFFF) != 0)
  {
    if (v42)
      mlir::OperationEquivalence::isRegionEquivalentTo(v43, ((a2 + 64 + 16 * ((v44 >> 23) & 1) + ((v44 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a2 + 40), (uint64_t)a3, a4, a5, a6, a7);
  }
  return 1;
}

void mlir::OperationEquivalence::isEquivalentTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm **v3;
  llvm **v4;
  llvm *v5[2];
  unsigned int v6;

  v5[0] = 0;
  v5[1] = 0;
  v6 = 0;
  v3 = v5;
  v4 = v5;
  mlir::OperationEquivalence::isEquivalentTo(a1, a2, (uint64_t (*)(uint64_t))llvm::function_ref<mlir::LogicalResult ()(mlir::Value,mlir::Value)>::callback_fn<mlir::OperationEquivalence::isEquivalentTo(mlir::Operation *,mlir::Operation *,mlir::OperationEquivalence::Flags)::$_0>, (uint64_t)&v4, (void (*)(uint64_t, unint64_t, uint64_t))llvm::function_ref<void ()(mlir::Value,mlir::Value)>::callback_fn<mlir::OperationEquivalence::isEquivalentTo(mlir::Operation *,mlir::Operation *,mlir::OperationEquivalence::Flags)::$_1>, (uint64_t)&v3, a3);
  llvm::deallocate_buffer(v5[0], (void *)(16 * v6));
}

uint64_t sub_18043BBDC()
{
  uint64_t v0;

  return v0;
}

mlir::OperationFingerPrint *mlir::OperationFingerPrint::OperationFingerPrint(mlir::OperationFingerPrint *this, mlir::Operation *a2)
{
  _BYTE v5[92];
  mlir::Operation *v6;
  int8x16_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  llvm::SHA1::init((llvm::SHA1 *)v5);
  v7.i64[0] = (uint64_t)v5;
  v7.i64[1] = (uint64_t)&v6;
  mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OperationFingerPrint::OperationFingerPrint(mlir::Operation *)::$_0>, (uint64_t)&v7, 1);
  llvm::SHA1::result((llvm::SHA1 *)v5, &v7);
  *(int8x16_t *)this = v7;
  *((_DWORD *)this + 4) = v8;
  return this;
}

uint64_t llvm::indexed_accessor_range<mlir::MutableOperandRangeRange,std::pair<mlir::MutableOperandRange,mlir::NamedAttribute>,mlir::MutableOperandRange,mlir::MutableOperandRange,mlir::MutableOperandRange>::indexed_accessor_range(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  size_t v12;
  void *v13;
  size_t v14;
  __int128 v16;
  void *__src;
  uint64_t v18;
  _BYTE v19[24];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v8 = 0;
  v22 = *MEMORY[0x1E0C80C00];
  v16 = *a2;
  __src = v19;
  v18 = 0x100000000;
  if (&v16 != a2)
  {
    v9 = *((_DWORD *)a2 + 6);
    if (v9)
    {
      if (v9 < 2)
      {
        v12 = 24;
        v11 = v19;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v19, *((unsigned int *)a2 + 6), 24);
        v10 = *((unsigned int *)a2 + 6);
        if (!(_DWORD)v10)
        {
LABEL_8:
          LODWORD(v18) = v9;
          v8 = v9;
          goto LABEL_9;
        }
        v11 = __src;
        v12 = 24 * v10;
      }
      memcpy(v11, *((const void **)a2 + 2), v12);
      goto LABEL_8;
    }
  }
LABEL_9:
  v20 = *(__int128 *)((char *)a2 + 56);
  v21 = a3;
  *(_OWORD *)a1 = v16;
  v13 = (void *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x100000000;
  if (&v16 != (__int128 *)a1 && v8)
  {
    if (v8 < 2)
    {
      v14 = 24;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8, 24);
      if (!(_DWORD)v18)
      {
LABEL_16:
        *(_DWORD *)(a1 + 24) = v8;
        a3 = v21;
        goto LABEL_17;
      }
      v13 = *(void **)(a1 + 16);
      v14 = 24 * v18;
    }
    memcpy(v13, __src, v14);
    goto LABEL_16;
  }
LABEL_17:
  *(_OWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 80) = a4;
  if (__src != v19)
    free(__src);
  return a1;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::OperationName,mlir::DictionaryAttr,mlir::ValueTypeRange<mlir::ResultRange>,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, unint64_t *a5, _DWORD *a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v13;
  unsigned __int8 v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;

  v24 = a2;
  v13 = *a5;
  v15 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v14 & 1) == 0)
  {
    v22 = *a5;
    v23 = a3;
    v15 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v22;
    a3 = v23;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v15 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v13 = v22;
      a3 = v23;
    }
  }
  v16 = (v15[19] + 8 * v13) ^ HIDWORD(v13);
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v24, a3, (unint64_t)a4, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (HIDWORD(v13) ^ ((0x9DDFEA08EB382D69 * v16) >> 47) ^ (0x9DDFEA08EB382D69 * v16))) ^ ((0x9DDFEA08EB382D69 * (HIDWORD(v13) ^ ((0x9DDFEA08EB382D69 * v16) >> 47) ^ (0x9DDFEA08EB382D69 * v16))) >> 47)));
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, (*a6 >> 4) ^ (*a6 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::ValueTypeRange<mlir::ResultRange>,llvm::hash_code>(a1, v25, v18, a4, a7, a8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::ValueTypeRange<mlir::ResultRange>,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t NextResultAtOffset;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v17;
  unint64_t v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  NextResultAtOffset = *a5;
  v11 = a5[1];
  v12 = a5[3];
  if (v11)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, a5[1]);
  mlir::TypeRange::TypeRange(v18, NextResultAtOffset & 0xFFFFFFFFFFFFFFF9 | 4, v12 - v11);
  v13 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v18[0], 0, v18[0], v18[1]);
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v17, a3, (unint64_t)a4, v13);
  v18[0] = v17;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)v18, v14, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v18[0], v15, a4);
}

BOOL llvm::function_ref<mlir::LogicalResult ()(mlir::Value,mlir::Value)>::callback_fn<mlir::OperationEquivalence::isEquivalentTo(mlir::Operation *,mlir::Operation *,mlir::OperationEquivalence::Flags)::$_0>(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v8 = a2;
  if (a2 == a3)
    return 1;
  v9 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v3, &v8, &v9);
  v6 = 0;
  if (v5)
    v6 = *(_QWORD *)(v9 + 8);
  return v6 == a3;
}

uint64_t llvm::function_ref<void ()(mlir::Value,mlir::Value)>::callback_fn<mlir::OperationEquivalence::isEquivalentTo(mlir::Operation *,mlir::Operation *,mlir::OperationEquivalence::Flags)::$_1>(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = *a1;
  v5 = a2;
  v6 = a3;
  v7 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v3, &v5, &v7);
  if ((result & 1) == 0)
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v3, (uint64_t)&v5, &v5, v7);
    *(_QWORD *)result = v5;
    *(_QWORD *)(result + 8) = v6;
  }
  return result;
}

void *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OperationFingerPrint::OperationFingerPrint(mlir::Operation *)::$_0>(_DWORD **a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  _DWORD *v4;
  mlir::Block *ParentOp;
  _DWORD *v6;
  _DWORD *v7;
  mlir::Operation *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t i;
  uint64_t v13;
  _DWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  mlir::Operation *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  mlir::Operation *v38;
  uint64_t v39[2];

  v38 = a2;
  llvm::SHA1::update(*a1, (unsigned int *)&v38, 8uLL);
  v3 = v38;
  if (v38 != *(mlir::Operation **)a1[1])
  {
    v4 = *a1;
    ParentOp = (mlir::Block *)*((_QWORD *)v38 + 2);
    if (ParentOp)
      ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    v34 = (uint64_t)ParentOp;
    llvm::SHA1::update(v4, (unsigned int *)&v34, 8uLL);
    v3 = v38;
  }
  v6 = *a1;
  v34 = *((_QWORD *)v3 + 7);
  llvm::SHA1::update(v6, (unsigned int *)&v34, 8uLL);
  v7 = *a1;
  v34 = mlir::Operation::hashProperties(v38);
  llvm::SHA1::update(v7, (unsigned int *)&v34, 8uLL);
  v8 = v38;
  v9 = *((unsigned int *)v38 + 11);
  if ((v9 & 0x7FFFFF) != 0)
  {
    v10 = (((unint64_t)v38 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v38 + 10);
    v11 = v10 + 24 * (v9 & 0x7FFFFF);
    do
    {
      for (i = *(_QWORD *)(v10 + 8); i != v10; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v13 = i - 8;
        else
          v13 = 0;
        v14 = *a1;
        v34 = v13;
        llvm::SHA1::update(v14, (unsigned int *)&v34, 8uLL);
        v15 = *(uint64_t **)(v13 + 48);
        v16 = *(_QWORD *)(v13 + 56) - (_QWORD)v15;
        if (v16)
        {
          v17 = 8 * (v16 >> 3);
          do
          {
            v18 = *v15++;
            v34 = v18;
            llvm::SHA1::update(*a1, (unsigned int *)&v34, 8uLL);
            v17 -= 8;
          }
          while (v17);
        }
      }
      v10 += 24;
    }
    while (v10 != v11);
    v8 = v38;
  }
  v19 = *a1;
  v34 = *((_QWORD *)v8 + 3);
  llvm::SHA1::update(v19, (unsigned int *)&v34, 8uLL);
  v20 = v38;
  if ((*((_BYTE *)v38 + 46) & 0x80) != 0)
  {
    v21 = *((unsigned int *)v38 + 17);
    if ((_DWORD)v21)
    {
      v22 = (uint64_t *)(*((_QWORD *)v38 + 9) + 24);
      do
      {
        v23 = *v22;
        v22 += 4;
        v34 = v23;
        llvm::SHA1::update(*a1, (unsigned int *)&v34, 8uLL);
        --v21;
      }
      while (v21);
      v20 = v38;
    }
  }
  v24 = *((unsigned int *)v20 + 10);
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = 32 * v24;
    do
    {
      v27 = *a1;
      v34 = *(_QWORD *)((((unint64_t)v38
                        + 16 * (((unint64_t)*((unsigned int *)v38 + 11) >> 23) & 1)
                        + (((unint64_t)*((unsigned int *)v38 + 11) >> 21) & 0x7F8)
                        + 71) & 0xFFFFFFFFFFFFFFF8)
                      + v25
                      + 24);
      llvm::SHA1::update(v27, (unsigned int *)&v34, 8uLL);
      v25 += 32;
    }
    while (v26 != v25);
    v20 = v38;
  }
  v28 = *((unsigned int *)v20 + 9);
  v29 = (uint64_t)v20 - 16;
  if (!(_DWORD)v28)
    v29 = 0;
  v39[0] = v29;
  v39[1] = v28;
  result = mlir::OperandRange::getTypes(v39, &v34);
  v31 = v34;
  v32 = v35;
  v33 = v37;
  if (v34 != v36 || v35 != v37)
  {
    if (v34 != v36)
    {
      while (1)
      {
        v39[0] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v31, v32) + 8) & 0xFFFFFFFFFFFFFFF8;
        llvm::SHA1::update(*a1, (unsigned int *)v39, 8uLL);
        ++v32;
      }
    }
    do
    {
      v39[0] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v31, v32) + 8) & 0xFFFFFFFFFFFFFFF8;
      result = llvm::SHA1::update(*a1, (unsigned int *)v39, 8uLL);
      ++v32;
    }
    while (v33 != v32);
  }
  return result;
}

_WORD *mlir::PatternBenefit::PatternBenefit(_WORD *this, __int16 a2)
{
  *this = a2;
  return this;
}

uint64_t mlir::Pattern::Pattern(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, _QWORD *a6, unint64_t a7)
{
  uint64_t v13;

  mlir::OperationName::OperationName(&v13, a2, a3, a5);
  return mlir::Pattern::Pattern(a1, v13, 1, a6, a7, a4, a5);
}

uint64_t mlir::Pattern::Pattern(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, unint64_t a5, __int16 a6, uint64_t a7)
{
  void *v8;
  uint64_t v9;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 12) = a6;
  *(_QWORD *)(a1 + 16) = a7 & 0xFFFFFFFFFFFFFFFBLL;
  v8 = (void *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = a1 + 40;
  v9 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0x200000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0;
  if (a5)
  {
    if (a5 >= 3)
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, v8, a5, 8);
    v13 = &a4[2 * a5];
    do
    {
      mlir::OperationName::OperationName(&v17, *a4, a4[1], a7);
      v14 = v17;
      v15 = *(unsigned int *)(a1 + 32);
      if (v15 >= *(unsigned int *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v8, v15 + 1, 8);
        v15 = *(unsigned int *)(a1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v15) = v14;
      ++*(_DWORD *)(a1 + 32);
      a4 += 2;
    }
    while (a4 != v13);
  }
  return a1;
}

uint64_t mlir::Pattern::Pattern(uint64_t a1, __int16 a2, uint64_t a3, _QWORD *a4, unint64_t a5)
{
  return mlir::Pattern::Pattern(a1, 0, 0, a4, a5, a2, a3);
}

uint64_t mlir::Pattern::Pattern(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, _QWORD *a5, unint64_t a6)
{
  return mlir::Pattern::Pattern(a1, a2, 2, a5, a6, a3, a4);
}

BOOL mlir::RewriterBase::Listener::classof(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 1;
}

_DWORD *mlir::RewriterBase::replaceOpWithIf(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _QWORD *a6)
{
  _DWORD *result;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t **NextResultAtOffset;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  result = (_DWORD *)a1[2];
  if (result && result[2] == 1)
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a2, a3, a4);
  v11 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v11)
    v12 = (_DWORD *)(a2 - 16);
  else
    v12 = 0;
  v30 = 0;
  v31 = a3;
  v32 = 0;
  v28 = v11;
  if ((_DWORD)v11)
  {
    v13 = 0;
    v14 = 0;
    v15 = 1;
    result = v12;
    while (1)
    {
      if (v31 == a3 && v14 == a4)
        goto LABEL_30;
      NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)result, v13);
      v19 = mlir::ValueRange::dereference_iterator(&v31, v32);
      v20 = *NextResultAtOffset;
      if (*NextResultAtOffset)
        break;
      v16 = 0;
LABEL_10:
      v15 &= v16 == 0;
      result = v12;
      v14 = v32 + 1;
      v13 = ++v30;
      ++v32;
      if (v30 == v28)
        goto LABEL_30;
    }
    v21 = (uint64_t *)v19;
    while (1)
    {
      v22 = a6[3];
      if ((v22 & 2) != 0)
      {
        v23 = (uint64_t *)*v20;
        if ((*(unsigned int (**)(_QWORD *, uint64_t *))(v22 & 0xFFFFFFFFFFFFFFF8))(a6, v20))
          goto LABEL_23;
      }
      else
      {
        v23 = (uint64_t *)*v20;
        if ((*(unsigned int (**)(_QWORD, uint64_t *))(v22 & 0xFFFFFFFFFFFFFFF8))(*a6, v20))
        {
LABEL_23:
          v24 = v20[2];
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 72))(a1, v24);
          v25 = (uint64_t *)v20[1];
          if (v25)
          {
            *v25 = *v20;
            if (*v20)
              *(_QWORD *)(*v20 + 8) = v20[1];
          }
          v20[3] = (uint64_t)v21;
          v20[1] = (uint64_t)v21;
          v26 = *v21;
          *v20 = *v21;
          if (v26)
            *(_QWORD *)(v26 + 8) = v20;
          *v21 = (uint64_t)v20;
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, v24);
        }
      }
      v20 = v23;
      if (!v23)
      {
        v16 = *NextResultAtOffset;
        goto LABEL_10;
      }
    }
  }
  v15 = 1;
LABEL_30:
  if (a5)
    *a5 = v15 & 1;
  return result;
}

uint64_t mlir::RewriterBase::replaceUsesWithIf(uint64_t result, uint64_t **a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t *), uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = *a2;
  if (*a2)
  {
    v9 = result;
    do
    {
      v10 = (uint64_t *)*v5;
      result = a4(a5, v5);
      if ((_DWORD)result)
      {
        v11 = v5[2];
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 72))(v9, v11);
        v12 = (uint64_t *)v5[1];
        if (v12)
        {
          *v12 = *v5;
          if (*v5)
            *(_QWORD *)(*v5 + 8) = v5[1];
        }
        v5[3] = (uint64_t)a3;
        v13 = *a3;
        *v5 = *a3;
        v5[1] = (uint64_t)a3;
        if (v13)
          *(_QWORD *)(v13 + 8) = v5;
        *a3 = (uint64_t)v5;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, v11);
      }
      v5 = v10;
    }
    while (v10);
  }
  return result;
}

uint64_t mlir::RewriterBase::replaceOp(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **NextResultAtOffset;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = (_DWORD *)a1[2];
  if (v8 && v8[2] == 1)
    (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, a2, a3, a4);
  v9 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v9)
    v10 = a2 - 16;
  else
    v10 = 0;
  v24 = a2;
  v25 = 0;
  v26 = a3;
  v27 = 0;
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = 0;
    v13 = v10;
    do
    {
      if (v26 == a3 && v12 == a4)
        break;
      NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v11);
      v16 = mlir::ValueRange::dereference_iterator(&v26, v27);
      v17 = *NextResultAtOffset;
      if (*NextResultAtOffset)
      {
        v18 = (uint64_t *)v16;
        do
        {
          v19 = (uint64_t *)*v17;
          v20 = v17[2];
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 72))(a1, v20);
          v21 = (uint64_t *)v17[1];
          if (v21)
          {
            *v21 = *v17;
            if (*v17)
              *(_QWORD *)(*v17 + 8) = v17[1];
          }
          v17[3] = (uint64_t)v18;
          v17[1] = (uint64_t)v18;
          v22 = *v18;
          *v17 = *v18;
          if (v22)
            *(_QWORD *)(v22 + 8) = v17;
          *v18 = (uint64_t)v17;
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, v20);
          v17 = v19;
        }
        while (v19);
      }
      v13 = v10;
      v12 = v27 + 1;
      v11 = ++v25;
      ++v27;
    }
    while (v25 != v9);
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v24);
}

uint64_t mlir::RewriterBase::replaceOp(mlir::RewriterBase *this, mlir::Operation *a2, mlir::Operation *a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t **NextResultAtOffset;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  mlir::Operation *v23;

  v6 = (_DWORD *)*((_QWORD *)this + 2);
  if (v6 && v6[2] == 1)
    (*(void (**)(_DWORD *, mlir::Operation *, mlir::Operation *))(*(_QWORD *)v6 + 40))(v6, a2, a3);
  v7 = *((unsigned int *)a2 + 9);
  v23 = a2;
  v8 = *((unsigned int *)a3 + 9);
  v9 = (char *)a3 - 16;
  if ((_DWORD)v7)
    v10 = (char *)a2 - 16;
  else
    v10 = 0;
  if ((_DWORD)v8)
    v11 = (uint64_t)v9;
  else
    v11 = 0;
  if ((_DWORD)v7)
    v12 = (_DWORD)v8 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v13 = 0;
    do
    {
      NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v10, v13);
      v15 = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, v13);
      v16 = *NextResultAtOffset;
      if (*NextResultAtOffset)
      {
        v17 = (uint64_t *)v15;
        do
        {
          v18 = (uint64_t *)*v16;
          v19 = v16[2];
          (*(void (**)(mlir::RewriterBase *, uint64_t))(*(_QWORD *)this + 72))(this, v19);
          v20 = (uint64_t *)v16[1];
          if (v20)
          {
            *v20 = *v16;
            if (*v16)
              *(_QWORD *)(*v16 + 8) = v16[1];
          }
          v16[3] = (uint64_t)v17;
          v21 = *v17;
          *v16 = *v17;
          v16[1] = (uint64_t)v17;
          if (v21)
            *(_QWORD *)(v21 + 8) = v16;
          *v17 = (uint64_t)v16;
          (*(void (**)(mlir::RewriterBase *, uint64_t))(*(_QWORD *)this + 80))(this, v19);
          v16 = v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v7 && v13 != v8);
  }
  return (*(uint64_t (**)(mlir::RewriterBase *, mlir::Operation *))(*(_QWORD *)this + 40))(this, v23);
}

void mlir::RewriterBase::eraseOp(mlir::RewriterBase *this, mlir::Operation *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 2);
  if (v2 && *(_DWORD *)(v2 + 8) == 1)
  {
    v6 = *((_QWORD *)this + 2);
    v7 = (unsigned int *)a2;
    v5 = &v6;
    v8[0] = off_1E0E50670;
    v8[1] = v8;
    v8[2] = &v5;
    v9 = v8;
    std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::operator()((uint64_t)v8, &v7);
    v3 = v9;
    if (v9 == v8)
    {
      v4 = 4;
      v3 = v8;
    }
    else
    {
      if (!v9)
        return;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  else
  {
    mlir::Operation::erase(a2);
  }
}

void mlir::RewriterBase::eraseBlock(mlir::RewriterBase *this, mlir::Block *a2)
{
  mlir::GenericProgramPoint *v4;
  char *v5;
  mlir::GenericProgramPoint *v6;
  uint64_t v7;

  v5 = (char *)a2 + 32;
  v4 = (mlir::GenericProgramPoint *)*((_QWORD *)a2 + 4);
  if (v4 != (mlir::Block *)((char *)a2 + 32))
  {
    do
    {
      v6 = *(mlir::GenericProgramPoint **)v4;
      mlir::GenericProgramPoint::~GenericProgramPoint(v4);
      (*(void (**)(mlir::RewriterBase *, uint64_t))(*(_QWORD *)this + 40))(this, v7);
      v4 = v6;
    }
    while (v6 != (mlir::GenericProgramPoint *)v5);
  }
  mlir::Block::erase(a2);
}

_DWORD *mlir::RewriterBase::finalizeRootUpdate(mlir::RewriterBase *this, mlir::Operation *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 2);
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, mlir::Operation *))(*(_QWORD *)result + 32))(result, a2);
  }
  return result;
}

void mlir::RewriterBase::inlineBlockBefore(uint64_t a1, mlir::Block *this, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ***v7;
  uint64_t ***v8;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ***v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t ***)*((_QWORD *)this + 6);
  v8 = (uint64_t ***)*((_QWORD *)this + 7);
  v28 = v7;
  v29 = a5;
  v30 = 0;
  if (v8 != v7)
  {
    v12 = 0;
    do
    {
      if (v29 == a5 && v12 == a6)
        break;
      v14 = mlir::ValueRange::dereference_iterator(&v29, v12);
      v15 = **v7;
      if (v15)
      {
        v16 = (uint64_t *)v14;
        do
        {
          v17 = (uint64_t *)*v15;
          v18 = v15[2];
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v18);
          v19 = (uint64_t *)v15[1];
          if (v19)
          {
            *v19 = *v15;
            if (*v15)
              *(_QWORD *)(*v15 + 8) = v15[1];
          }
          v15[3] = (uint64_t)v16;
          v15[1] = (uint64_t)v16;
          v20 = *v16;
          *v15 = *v16;
          if (v20)
            *(_QWORD *)(v20 + 8) = v15;
          *v16 = (uint64_t)v15;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v18);
          v15 = v17;
        }
        while (v17);
      }
      v7 = v28 + 1;
      v12 = v30 + 1;
      v28 = v7;
      ++v30;
    }
    while (v7 != v8);
  }
  v21 = (uint64_t *)((char *)this + 32);
  if (*((mlir::Block **)this + 4) != (mlir::Block *)((char *)this + 32) && v21 != a4)
  {
    v22 = (uint64_t *)*((_QWORD *)this + 5);
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList(a3 + 32, (uint64_t)this + 32, (uint64_t)v22, (uint64_t)this + 32);
    if (v22 != v21)
    {
      v23 = *v21;
      v24 = *v22;
      *(_QWORD *)(v24 + 8) = v21;
      *v21 = v24;
      v25 = *a4;
      *(_QWORD *)(v23 + 8) = a4;
      *v22 = v25;
      *(_QWORD *)(v25 + 8) = v22;
      *a4 = v23;
    }
  }
  mlir::Block::erase(this);
}

uint64_t mlir::RewriterBase::inlineBlockBefore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, *(_QWORD *)(a3 + 16), a3, a4, a5);
}

uint64_t mlir::RewriterBase::mergeBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a3, a3 + 32, a4, a5);
}

char *mlir::RewriterBase::splitBlock(uint64_t a1, char *a2, uint64_t *a3)
{
  return mlir::Block::splitBlock(a2, a3);
}

uint64_t mlir::RewriterBase::inlineRegionBefore(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if ((uint64_t *)*a2 != a2 && a4 != a2)
  {
    v6 = (uint64_t *)a2[1];
    result = llvm::ilist_traits<mlir::Block>::transferNodesFromList(a3, (uint64_t)a2, (uint64_t)v6, (uint64_t)a2);
    if (v6 != a2)
    {
      v8 = (_QWORD *)*a2;
      v9 = *v6;
      *(_QWORD *)(v9 + 8) = a2;
      *a2 = v9;
      v10 = *a4;
      v8[1] = a4;
      *v6 = v10;
      *(_QWORD *)(v10 + 8) = v6;
      *a4 = (uint64_t)v8;
    }
  }
  return result;
}

uint64_t mlir::RewriterBase::inlineRegionBefore(uint64_t (***a1)(_QWORD, uint64_t, unint64_t, char *), uint64_t a2, mlir::Block *this)
{
  unint64_t Parent;

  Parent = mlir::Block::getParent(this);
  return (**a1)(a1, a2, Parent, (char *)this + 8);
}

void mlir::RewriterBase::cloneRegionBefore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  mlir::Region::cloneInto(a2, a3, a4, a5);
}

__n128 std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1E0E50670;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E0E50670;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::operator()(uint64_t a1, unsigned int **a2)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  mlir::Block *v29;
  _QWORD ***v30;
  _QWORD ***i;
  _QWORD **v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  void **v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  _QWORD **NextResultAtOffset;
  _QWORD *v48;
  _QWORD *v49;
  unsigned int *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *__src;
  unsigned int v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _BYTE v71[48];
  const void **v72;
  void *v73;
  uint64_t v74;
  const void *v75[9];
  void *v76[42];
  const void **v77;
  void *v78;
  uint64_t v79;
  int v80;
  const void *v81[8];
  void *__dst;
  uint64_t v83;
  _QWORD v84[42];

  v84[40] = *MEMORY[0x1E0C80C00];
  v50 = *a2;
  v3 = (*a2)[11];
  if ((v3 & 0x7FFFFF) != 0)
  {
    v51 = (((unint64_t)&v50[4 * ((v3 >> 23) & 1) + 17] + ((v3 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v50[10];
    v4 = (_QWORD *)(v51 + 24 * (v3 & 0x7FFFFF));
    while (1)
    {
      v53 = v4;
      v5 = (_QWORD *)*(v4 - 3);
      v4 -= 3;
      if (v5 != v4)
        break;
LABEL_3:
      if (v4 == (_QWORD *)v51)
        goto LABEL_91;
    }
    v52 = v4;
LABEL_7:
    v69 = v71;
    v70 = 0x600000000;
    v6 = *(v53 - 2);
    if (v6)
      v7 = (void *)(v6 - 8);
    else
      v7 = 0;
    v77 = v81;
    v78 = v81;
    v80 = 0;
    v83 = 0x800000000;
    v79 = 0x100000008;
    __dst = v84;
    v81[0] = v7;
    mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v54, (mlir::Block *)v7);
    v8 = v54;
    mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v54, (mlir::Block *)v7);
    v10 = v54;
    v9 = v55;
    if (v83 >= HIDWORD(v83))
    {
      v54 = v7;
      v55 = v8;
      v56 = 0;
      v57 = v10;
      v58 = v9;
      v37 = v83 + 1;
      if (__dst <= &v54 && (char *)__dst + 40 * v83 > (char *)&v54)
      {
        v43 = (char *)&v54 - (_BYTE *)__dst;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v84, v37, 40);
        v39 = (char *)__dst;
        v38 = (void **)((char *)__dst + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v84, v37, 40);
        v38 = &v54;
        v39 = (char *)__dst;
      }
      v40 = &v39[40 * v83];
      v41 = *(_OWORD *)v38;
      v42 = *((_OWORD *)v38 + 1);
      *((_QWORD *)v40 + 4) = v38[4];
      *(_OWORD *)v40 = v41;
      *((_OWORD *)v40 + 1) = v42;
    }
    else
    {
      v11 = (char *)__dst + 40 * v83;
      *v11 = v7;
      v11[1] = v8;
      v11[2] = 0;
      v11[3] = v10;
      v11[4] = v9;
    }
    LODWORD(v83) = v83 + 1;
    llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)&v77);
    memset(&v76[1], 0, 328);
    memset(v75, 0, sizeof(v75));
    v72 = &v75[1];
    v73 = &v75[1];
    v74 = 8;
    v76[0] = &v76[2];
    HIDWORD(v76[1]) = 8;
    llvm::make_range<llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v77, (uint64_t)&v72, &v59);
    if (v76[0] != &v76[2])
      free(v76[0]);
    if (v73 != v72)
      free(v73);
    if (__dst != v84)
      free(__dst);
    if (v78 != v77)
      free(v78);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v77, v81, (const llvm::SmallPtrSetImplBase *)&v59);
    __dst = v84;
    v83 = 0x800000000;
    v12 = v62;
    if (!v62)
    {
LABEL_26:
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v72, &v75[1], (const llvm::SmallPtrSetImplBase *)&v64);
      v76[0] = &v76[2];
      v76[1] = (void *)0x800000000;
      v15 = v67;
      if (!v67)
        goto LABEL_33;
      v16 = &v76[2];
      v17 = v67;
      if (v67 >= 9uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v76, &v76[2], v67, 40);
        v17 = v67;
        if (!v67)
        {
LABEL_31:
          LODWORD(v76[1]) = v15;
          while (1)
          {
LABEL_33:
            if (v83 == v15)
            {
              if (!v15)
              {
LABEL_50:
                if (v76[0] != &v76[2])
                  free(v76[0]);
                if (v73 != v72)
                  free(v73);
                if (__dst != v84)
                  free(__dst);
                if (v78 != v77)
                  free(v78);
                if (v66 != &v68)
                  free(v66);
                if (v65 != v64)
                  free(v65);
                if (__src != &v63)
                  free(__src);
                if (v60 != v59)
                  free(v60);
                v27 = (char *)v69;
                v28 = (char *)v69 + 8 * v70;
                if (!(_DWORD)v70)
                {
                  if (v69 == v71)
                    goto LABEL_6;
LABEL_85:
                  free(v27);
                  goto LABEL_6;
                }
                do
                {
                  v29 = *(mlir::Block **)v27;
                  v30 = *(_QWORD ****)(*(_QWORD *)v27 + 48);
                  for (i = *(_QWORD ****)(*(_QWORD *)v27 + 56); v30 != i; ++v30)
                  {
                    v32 = *v30;
                    while (1)
                    {
                      v33 = *v32;
                      if (!*v32)
                        break;
                      v34 = (_QWORD *)v33[1];
                      if (v34)
                      {
                        *v34 = *v33;
                        if (*v33)
                          *(_QWORD *)(*v33 + 8) = v33[1];
                      }
                      *v33 = 0;
                      v33[1] = 0;
                      v33[3] = 0;
                    }
                  }
                  while (1)
                  {
                    v35 = *(_QWORD **)v29;
                    if (!*(_QWORD *)v29)
                      break;
                    v36 = (_QWORD *)v35[1];
                    if (v36)
                    {
                      *v36 = *v35;
                      if (*v35)
                        *(_QWORD *)(*v35 + 8) = v35[1];
                    }
                    *v35 = 0;
                    v35[1] = 0;
                    v35[3] = 0;
                  }
                  mlir::Block::erase(v29);
                  v27 += 8;
                }
                while (v27 != v28);
                v27 = (char *)v69;
                if (v69 != v71)
                  goto LABEL_85;
LABEL_6:
                v4 = v52;
                if ((_QWORD *)*v52 == v52)
                  goto LABEL_3;
                goto LABEL_7;
              }
              v18 = v76[0];
              v19 = __dst;
              while (*v19 == *v18 && v19[1] == v18[1] && v19[2] == v18[2] && v19[3] == v18[3] && v19[4] == v18[4])
              {
                v19 += 5;
                v18 += 5;
                if (v19 == (_QWORD *)((char *)__dst + 40 * v15))
                  goto LABEL_50;
              }
            }
            v20 = *((_QWORD *)__dst + 5 * v83 - 5);
            v21 = *(mlir::GenericProgramPoint **)(v20 + 32);
            if (v21 != (mlir::GenericProgramPoint *)(v20 + 32))
            {
              do
              {
                v22 = *(mlir::GenericProgramPoint **)v21;
                mlir::GenericProgramPoint::~GenericProgramPoint(v21);
                v23 = *(_QWORD *)(a1 + 8);
                v54 = v24;
                v25 = *(_QWORD *)(v23 + 24);
                if (!v25)
                  std::__throw_bad_function_call[abi:nn180100]();
                (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 48))(v25, &v54);
                v21 = v22;
              }
              while (v22 != (mlir::GenericProgramPoint *)(v20 + 32));
            }
            v26 = v70;
            if (v70 >= (unint64_t)HIDWORD(v70))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
              v26 = v70;
            }
            *((_QWORD *)v69 + v26) = v20;
            LODWORD(v70) = v70 + 1;
            LODWORD(v83) = v83 - 1;
            if ((_DWORD)v83)
              llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)&v77);
            v15 = LODWORD(v76[1]);
          }
        }
        v16 = (void **)v76[0];
      }
      memcpy(v16, v66, 40 * v17);
      goto LABEL_31;
    }
    v13 = v84;
    v14 = v62;
    if (v62 >= 9uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v84, v62, 40);
      v14 = v62;
      if (!v62)
      {
LABEL_25:
        LODWORD(v83) = v12;
        goto LABEL_26;
      }
      v13 = __dst;
    }
    memcpy(v13, __src, 40 * v14);
    goto LABEL_25;
  }
LABEL_91:
  (*(void (**)(_QWORD, unsigned int *))(****(_QWORD ****)(a1 + 16) + 56))(***(_QWORD ***)(a1 + 16), v50);
  v44 = v50[9];
  if ((_DWORD)v44)
    v45 = (uint64_t)(v50 - 4);
  else
    v45 = 0;
  if ((_DWORD)v44)
  {
    for (j = 0; j != v44; ++j)
    {
      NextResultAtOffset = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v45, j);
      while (1)
      {
        v48 = *NextResultAtOffset;
        if (!*NextResultAtOffset)
          break;
        v49 = (_QWORD *)v48[1];
        if (v49)
        {
          *v49 = *v48;
          if (*v48)
            *(_QWORD *)(*v48 + 8) = v48[1];
        }
        *v48 = 0;
        v48[1] = 0;
        v48[3] = 0;
      }
    }
  }
  mlir::Operation::erase((mlir::Operation *)v50);
}

uint64_t std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir12RewriterBase7eraseOpEPNS_9OperationEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir12RewriterBase7eraseOpEPNS_9OperationEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir12RewriterBase7eraseOpEPNS_9OperationEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir12RewriterBase7eraseOpEPNS_9OperationEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::target_type()
{
}

void llvm::make_range<llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[320];
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[41];

  v19[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v14, &v16, 8, (uint64_t *)a1);
  v17 = v19;
  v18 = 0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)&v17, (uint64_t *)(a1 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v8, &v10, 8, (uint64_t *)a2);
  v11 = v13;
  v12 = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)&v11, (uint64_t *)(a2 + 96));
  v6 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)a3, a3 + 4, 8, (uint64_t *)&v14);
  *(_QWORD *)(v6 + 96) = a3 + 14;
  v7 = v6 + 96;
  *(_QWORD *)(v7 + 8) = 0x800000000;
  if ((_DWORD)v18)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v7, (uint64_t *)&v17);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(a3 + 54), a3 + 58, 8, (uint64_t *)&v8);
  a3[66] = a3 + 68;
  a3[67] = 0x800000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)(a3 + 66), (uint64_t *)&v11);
  if (v11 != v13)
    free(v11);
  if (v9 != v8)
    free(v9);
  if (v17 != v19)
    free(v17);
  if (v15 != v14)
    free(v15);
}

uint64_t llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(char **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_20;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v11 = *(char **)a1;
        v12 = v4 + 40 * v8;
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v4;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v4 + 8);
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v4 + 24);
          v4 += 40;
          v11 += 40;
        }
        while (v4 != v12);
      }
      goto LABEL_19;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v13 = v4 + 40 * v9;
        v14 = *(char **)a1;
        do
        {
          *(_QWORD *)v14 = *(_QWORD *)v4;
          *(_OWORD *)(v14 + 8) = *(_OWORD *)(v4 + 8);
          *(_OWORD *)(v14 + 24) = *(_OWORD *)(v4 + 24);
          v4 += 40;
          v14 += 40;
        }
        while (v4 != v13);
        v10 = *v7;
        if (v9 == v10)
          goto LABEL_19;
      }
      else
      {
        v9 = 0;
        LODWORD(v10) = *v7;
        if (!*v7)
          goto LABEL_19;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 40);
      v9 = 0;
      LODWORD(v10) = *v7;
      if (!*v7)
        goto LABEL_19;
    }
    memcpy((void *)(*(_QWORD *)a1 + 40 * v9), (const void *)(*a2 + 40 * v9), *a2 + 40 * v10 - (*a2 + 40 * v9));
LABEL_19:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_20:
    *v7 = 0;
  }
  return a1;
}

void llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild(llvm::SmallPtrSetImplBase *this)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  mlir::Block *v7;
  uint64_t v8;
  char v9;
  mlir::Block *v10;
  mlir::Block *v11;
  mlir::Block *v12;
  uint64_t v13;
  mlir::Block **v14;
  uint64_t v15;
  mlir::Block **v16;
  uint64_t v17;
  mlir::Block **v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  mlir::Block *v27;
  mlir::Block *v28;
  uint64_t v29;
  mlir::Block *v30;
  mlir::Block *v31;

  v2 = (uint64_t *)((char *)this + 96);
  v3 = (char *)this + 112;
  while (1)
  {
    v4 = *((_QWORD *)this + 12) + 40 * *((unsigned int *)this + 26);
    v5 = *(_QWORD *)(v4 - 24);
    v6 = *(_QWORD *)(v4 - 32);
    if (v6 == *(_QWORD *)(v4 - 16) && v5 == *(_QWORD *)(v4 - 8))
      break;
    *(_QWORD *)(v4 - 24) = v5 + 1;
    v7 = *(mlir::Block **)(v6 + 32 * v5 + 24);
    v8 = *((_QWORD *)this + 1);
    if (v8 == *(_QWORD *)this)
    {
      v15 = *((unsigned int *)this + 5);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = 8 * v15;
        v18 = (mlir::Block **)*((_QWORD *)this + 1);
        while (*v18 != v7)
        {
          if (*v18 == (mlir::Block *)-2)
            v16 = v18;
          ++v18;
          v17 -= 8;
          if (!v17)
          {
            if (!v16)
              goto LABEL_17;
            *v16 = v7;
            --*((_DWORD *)this + 6);
            goto LABEL_6;
          }
        }
      }
      else
      {
LABEL_17:
        if (v15 >= *((_DWORD *)this + 4))
          goto LABEL_5;
        *((_DWORD *)this + 5) = v15 + 1;
        *(_QWORD *)(v8 + 8 * v15) = v7;
LABEL_6:
        mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v27, v7);
        v10 = v27;
        mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v27, v7);
        v12 = v27;
        v11 = v28;
        v13 = *((unsigned int *)this + 26);
        if (v13 >= *((_DWORD *)this + 27))
        {
          v27 = v7;
          v28 = v10;
          v29 = 0;
          v30 = v12;
          v31 = v11;
          v19 = v13 + 1;
          v20 = *v2 + 40 * (unint64_t)v13 > (unint64_t)&v27;
          if (*v2 <= (unint64_t)&v27 && v20)
          {
            v26 = (char *)&v27 - *v2;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, v3, v19, 40);
            v21 = *v2;
            v22 = &v26[*v2];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, v3, v19, 40);
            v21 = *v2;
            v22 = (char *)&v27;
          }
          v23 = v21 + 40 * *((unsigned int *)this + 26);
          v24 = *(_OWORD *)v22;
          v25 = *((_OWORD *)v22 + 1);
          *(_QWORD *)(v23 + 32) = *((_QWORD *)v22 + 4);
          *(_OWORD *)v23 = v24;
          *(_OWORD *)(v23 + 16) = v25;
        }
        else
        {
          v14 = (mlir::Block **)(*((_QWORD *)this + 12) + 40 * v13);
          *v14 = v7;
          v14[1] = v10;
          v14[2] = 0;
          v14[3] = v12;
          v14[4] = v11;
        }
        ++*((_DWORD *)this + 26);
      }
    }
    else
    {
LABEL_5:
      llvm::SmallPtrSetImplBase::insert_imp_big(this, v7);
      if (v9)
        goto LABEL_6;
    }
  }
}

_QWORD *mlir::Region::Region(_QWORD *this, mlir::Operation *a2)
{
  *this = this;
  this[1] = this;
  this[2] = a2;
  return this;
}

uint64_t mlir::Region::dropAllReferences(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 8);
  if (v1 != this)
  {
    v2 = this;
    do
    {
      if (v1)
        v3 = v1 - 8;
      else
        v3 = 0;
      this = mlir::Block::dropAllReferences(v3);
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1 != v2);
  }
  return this;
}

void mlir::Region::~Region(mlir::Region *this)
{
  mlir::Region *v2;
  uint64_t v3;
  mlir::Region *v4;
  mlir::Region *v5;
  uint64_t v6;
  void *v7;

  v2 = (mlir::Region *)*((_QWORD *)this + 1);
  if (v2 != this)
  {
    do
    {
      if (v2)
        v3 = (uint64_t)v2 - 8;
      else
        v3 = 0;
      mlir::Block::dropAllReferences(v3);
      v2 = (mlir::Region *)*((_QWORD *)v2 + 1);
    }
    while (v2 != this);
    v4 = (mlir::Region *)*((_QWORD *)this + 1);
    if (v4 != this)
    {
      do
      {
        v5 = (mlir::Region *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 2) &= 7uLL;
        v6 = *(_QWORD *)v4;
        *(_QWORD *)v5 = *(_QWORD *)v4;
        *(_QWORD *)(v6 + 8) = v5;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        mlir::Block::~Block((mlir::Region *)((char *)v4 - 8));
        operator delete(v7);
        v4 = v5;
      }
      while (v5 != this);
    }
  }
}

uint64_t mlir::Region::getContext(mlir::Region *this)
{
  return mlir::Attribute::getContext((mlir::Attribute *)(*((_QWORD *)this + 2) + 24));
}

uint64_t mlir::Region::getLoc(mlir::Region *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 24);
}

uint64_t mlir::Region::getArgumentTypes(mlir::Region *this)
{
  uint64_t v1;
  uint64_t v2;

  if (*(mlir::Region **)this == this)
    return 0;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    v2 = v1 - 8;
  else
    v2 = 0;
  return *(_QWORD *)(v2 + 48);
}

mlir::Block *mlir::Region::getParentRegion(mlir::Region *this)
{
  mlir::Block *result;

  result = *(mlir::Block **)(*((_QWORD *)this + 2) + 16);
  if (result)
    return (mlir::Block *)mlir::Block::getParent(result);
  return result;
}

unint64_t mlir::Region::isProperAncestor(mlir::Region *this, mlir::Region *a2)
{
  unint64_t result;

  if (this == a2)
    return 0;
  while (1)
  {
    result = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16);
    if (!result)
      break;
    result = mlir::Block::getParent((mlir::Block *)result);
    if (!result)
      break;
    a2 = (mlir::Region *)result;
    if ((mlir::Region *)result == this)
      return 1;
  }
  return result;
}

uint64_t mlir::Region::getRegionNumber(unint64_t this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(this + 16);
  v2 = *(unsigned int *)(v1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return -1431655765
         * ((this
                         - (((v1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *(unsigned int *)(v1 + 40))) >> 3);
  else
    return -1431655765 * (this >> 3);
}

void mlir::Region::cloneInto(mlir::Region *this, mlir::Region *a2, mlir::IRMapping *a3)
{
  mlir::Region::cloneInto((uint64_t)this, (uint64_t)a2, (uint64_t *)a2, (uint64_t)a3);
}

void mlir::Region::cloneInto(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char *v11;
  mlir::Block *v12;
  uint64_t *v13;
  __guard *v14;
  _OWORD *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v60;
  uint64_t v61;
  mlir::GenericProgramPoint *v62;
  mlir::GenericProgramPoint *v63;
  uint64_t *v64;
  uint64_t *v65;
  mlir::GenericProgramPoint *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v70;
  uint64_t *v71;
  mlir::GenericProgramPoint *v72;
  mlir::GenericProgramPoint *v73;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const double *v103;
  unsigned __int128 *v104;
  uint64_t v105;
  const double *v106;
  unsigned __int128 v107;
  unsigned __int128 v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v126;
  mlir::GenericProgramPoint *v127;
  mlir::GenericProgramPoint *v129;
  uint64_t v130;
  mlir::GenericProgramPoint *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  _QWORD v137[8];

  v137[6] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1 == a1)
    return;
  v5 = a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = a1;
  v124 = a1;
  if (v6 != a1)
  {
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    while (1)
    {
      v130 = v6;
      v12 = v6 ? (mlir::Block *)(v6 - 8) : 0;
      v13 = v8;
      v14 = (__guard *)v9;
      v15 = operator new(0x48uLL);
      *v15 = 0u;
      v15[1] = 0u;
      *((_QWORD *)v15 + 4) = v15 + 2;
      *((_QWORD *)v15 + 5) = v15 + 2;
      *((_QWORD *)v15 + 7) = 0;
      *((_QWORD *)v15 + 8) = 0;
      *((_QWORD *)v15 + 6) = 0;
      a1 = (uint64_t)mlir::IRMapping::map((mlir::IRMapping *)a4, v12, (mlir::Block *)v15);
      v9 = (unsigned __int8 *)v14;
      v8 = v13;
      v17 = (unint64_t *)*((_QWORD *)v12 + 6);
      v16 = (unint64_t *)*((_QWORD *)v12 + 7);
      if (v16 != v17)
        break;
LABEL_4:
      *((_QWORD *)v15 + 3) = *((_QWORD *)v15 + 3) & 7 | a2;
      v5 = v124;
      v10 = *a3;
      *((_QWORD *)v15 + 1) = *a3;
      *((_QWORD *)v15 + 2) = a3;
      v11 = (char *)v15 + 8;
      *(_QWORD *)(v10 + 8) = v11;
      *a3 = (uint64_t)v11;
      v6 = *(_QWORD *)(v130 + 8);
      if (v6 == v124)
      {
        v7 = *(_QWORD *)(v124 + 8);
        goto LABEL_52;
      }
    }
    while (1)
    {
      v18 = *v17;
      v19 = *(_DWORD *)(a4 + 16);
      if (v19)
      {
        v20 = *(_QWORD *)a4;
        v21 = atomic_load(v9);
        if ((v21 & 1) == 0)
        {
          a1 = __cxa_guard_acquire((__guard *)v9);
          v9 = (unsigned __int8 *)v14;
          v8 = v13;
          if ((_DWORD)a1)
          {
            v44 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v44 = 0xFF51AFD7ED558CCDLL;
            v13[19] = v44;
            __cxa_guard_release(v14);
            v9 = (unsigned __int8 *)v14;
            v8 = v13;
          }
        }
        v22 = 0x9DDFEA08EB382D69 * ((v8[19] + 8 * v18) ^ HIDWORD(v18));
        v23 = 0x9DDFEA08EB382D69 * (HIDWORD(v18) ^ (v22 >> 47) ^ v22);
        v24 = (-348639895 * ((v23 >> 47) ^ v23)) & (v19 - 1);
        v25 = *(_QWORD *)(v20 + 16 * v24);
        if (v25 == v18)
          goto LABEL_12;
        v26 = 1;
        while (v25 != -4096)
        {
          v27 = v24 + v26++;
          v24 = v27 & (v19 - 1);
          v25 = *(_QWORD *)(v20 + 16 * v24);
          if (v25 == v18)
            goto LABEL_12;
        }
      }
      a1 = (uint64_t)mlir::Block::addArgument(v15, *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v18 + 32));
      v28 = a1;
      v132 = v18;
      v29 = *(_DWORD *)(a4 + 16);
      if (!v29)
        break;
      v30 = *(_QWORD *)a4;
      v9 = (unsigned __int8 *)v14;
      v31 = atomic_load((unsigned __int8 *)v14);
      if ((v31 & 1) == 0)
      {
        a1 = __cxa_guard_acquire(v14);
        v9 = (unsigned __int8 *)v14;
        if ((_DWORD)a1)
        {
          v45 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v45 = 0xFF51AFD7ED558CCDLL;
          v13[19] = v45;
          __cxa_guard_release(v14);
          v9 = (unsigned __int8 *)v14;
        }
      }
      v32 = 0x9DDFEA08EB382D69 * ((v13[19] + 8 * v18) ^ HIDWORD(v18));
      v33 = 0x9DDFEA08EB382D69 * (HIDWORD(v18) ^ (v32 >> 47) ^ v32);
      v34 = v29 - 1;
      v35 = (-348639895 * ((v33 >> 47) ^ v33)) & (v29 - 1);
      v36 = (_QWORD *)(v30 + 16 * v35);
      v37 = *v36;
      if (v132 == *v36)
      {
        v8 = v13;
        goto LABEL_11;
      }
      v39 = 0;
      v40 = 1;
      while (v37 != -4096)
      {
        if (v39)
          v41 = 0;
        else
          v41 = v37 == -8192;
        if (v41)
          v39 = v36;
        v42 = v35 + v40++;
        v35 = v42 & v34;
        v36 = (_QWORD *)(v30 + 16 * (v42 & v34));
        v37 = *v36;
        v8 = v13;
        v9 = (unsigned __int8 *)v14;
        if (v132 == *v36)
          goto LABEL_11;
      }
      if (v39)
        v36 = v39;
      v38 = *(_DWORD *)(a4 + 16);
      v43 = *(_DWORD *)(a4 + 8);
      if (4 * v43 + 4 >= 3 * v38)
        goto LABEL_40;
      if (v38 + ~v43 - *(_DWORD *)(a4 + 12) <= v38 >> 3)
        goto LABEL_41;
      ++*(_DWORD *)(a4 + 8);
      if (*v36 != -4096)
        goto LABEL_27;
LABEL_10:
      *v36 = v132;
      v36[1] = 0;
      v8 = v13;
      v9 = (unsigned __int8 *)v14;
LABEL_11:
      v36[1] = v28;
LABEL_12:
      if (++v17 == v16)
        goto LABEL_4;
    }
    v38 = 0;
LABEL_40:
    v38 *= 2;
LABEL_41:
    llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow(a4, v38);
    v135 = 0;
    a1 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a4, &v132, &v135);
    v36 = v135;
    ++*(_DWORD *)(a4 + 8);
    if (*v36 == -4096)
      goto LABEL_10;
LABEL_27:
    --*(_DWORD *)(a4 + 12);
    goto LABEL_10;
  }
LABEL_52:
  if (v7)
    v46 = v7 - 8;
  else
    v46 = 0;
  v47 = *(_QWORD *)(a4 + 24);
  v48 = *(unsigned int *)(a4 + 40);
  if ((_DWORD)v48)
  {
    LODWORD(v49) = ((v46 >> 4) ^ (v46 >> 9)) & (v48 - 1);
    v50 = (uint64_t *)(v47 + 16 * v49);
    v51 = *v50;
    if (*v50 == v46)
      goto LABEL_62;
    v52 = 1;
    while (v51 != -4096)
    {
      v53 = v49 + v52++;
      v49 = v53 & (v48 - 1);
      v51 = *(_QWORD *)(v47 + 16 * v49);
      if (v51 == v46)
      {
        v50 = (uint64_t *)(v47 + 16 * v49);
        goto LABEL_62;
      }
    }
  }
  v50 = (uint64_t *)(v47 + 16 * v48);
LABEL_62:
  if (v50 == (uint64_t *)(v47 + 16 * v48))
    v54 = 0;
  else
    v54 = v50[1];
  if (v54)
    v55 = (uint64_t *)(v54 + 8);
  else
    v55 = 0;
  LOBYTE(v135) = mlir::Operation::CloneOptions::all((mlir::Operation::CloneOptions *)a1);
  v56 = mlir::Operation::CloneOptions::cloneRegions(&v135, 0);
  mlir::Operation::CloneOptions::cloneOperands(v56, 0);
  v57 = *(_QWORD *)(v5 + 8);
  if (v57 != v5 && v55 != a3)
  {
    v58 = v55;
    do
    {
      v60 = v57 - 8;
      v61 = v57;
      if (!v57)
        v60 = 0;
      v62 = (mlir::GenericProgramPoint *)(v60 + 32);
      v63 = *(mlir::GenericProgramPoint **)(v60 + 40);
      if (v63 != (mlir::GenericProgramPoint *)(v60 + 32))
      {
        v64 = v58 - 1;
        if (!v58)
          v64 = 0;
        v65 = v64 + 4;
        do
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v63);
          v66 = (mlir::GenericProgramPoint *)mlir::Operation::clone();
          llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)v65, (uint64_t)v66);
          mlir::GenericProgramPoint::~GenericProgramPoint(v66);
          v67 = *v65;
          *v68 = *v65;
          v68[1] = (uint64_t)v65;
          *(_QWORD *)(v67 + 8) = v68;
          *v65 = (uint64_t)v68;
          mlir::GenericProgramPoint::~GenericProgramPoint(v66);
          v63 = (mlir::GenericProgramPoint *)*((_QWORD *)v63 + 1);
        }
        while (v63 != v62);
      }
      v58 = (uint64_t *)v58[1];
      v57 = *(_QWORD *)(v61 + 8);
    }
    while (v57 != v5 && v58 != a3);
    v57 = *(_QWORD *)(v5 + 8);
  }
  v135 = v137;
  v136 = 0x600000000;
  if (v57 != v5 && v55 != a3)
  {
    while (1)
    {
      v70 = v57 - 8;
      v122 = v57;
      v123 = v55;
      if (!v57)
        v70 = 0;
      v71 = v55 - 1;
      if (!v55)
        v71 = 0;
      v72 = (mlir::GenericProgramPoint *)v71[5];
      v73 = *(mlir::GenericProgramPoint **)(v70 + 40);
      v127 = (mlir::GenericProgramPoint *)(v71 + 4);
      v129 = (mlir::GenericProgramPoint *)(v70 + 32);
      if (v73 != (mlir::GenericProgramPoint *)(v70 + 32) && v72 != (mlir::GenericProgramPoint *)(v71 + 4))
        break;
LABEL_87:
      v55 = (uint64_t *)v123[1];
      v57 = *(_QWORD *)(v122 + 8);
      if (v57 == v124 || v55 == a3)
      {
        if (v135 != v137)
          free(v135);
        return;
      }
    }
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v73);
      v77 = v76;
      mlir::GenericProgramPoint::~GenericProgramPoint(v72);
      v79 = v78;
      v80 = *(_DWORD *)(v77 + 44);
      if ((v80 & 0x800000) != 0)
      {
        v81 = *(unsigned int *)(v77 + 68);
        v82 = v136;
        v83 = v136 > v81;
        v84 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        if (v136 != v81)
          goto LABEL_110;
      }
      else
      {
        v81 = 0;
        v82 = v136;
        v83 = v136 != 0;
        v84 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        if ((_DWORD)v136)
        {
LABEL_110:
          if (!v83)
          {
            if (HIDWORD(v136) < v81)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v137, v81, 8);
              v84 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
              v82 = v136;
            }
            if (v81 != v82)
            {
              bzero((char *)v135 + 8 * v82, 8 * (v81 - v82));
              v84 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            }
          }
          LODWORD(v136) = v81;
          if ((*(_DWORD *)(v77 + 44) & 0x800000) == 0)
            goto LABEL_147;
          goto LABEL_116;
        }
      }
      if ((v80 & 0x800000) == 0)
        goto LABEL_147;
LABEL_116:
      v85 = *(unsigned int *)(v77 + 68);
      if ((_DWORD)v85)
      {
        v131 = v72;
        v86 = *(_QWORD *)(v77 + 72);
        v87 = v135;
        v88 = *(_DWORD *)(a4 + 16);
        if (v88)
        {
          v126 = v79;
          v89 = 0;
          v90 = *(_QWORD *)(v86 + 24);
LABEL_120:
          v91 = *(_QWORD *)a4;
          if ((v92 & 1) == 0)
          {
            v84 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            if (v99)
            {
              v100 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v100 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v100;
              v84 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
            }
          }
          v93 = 0x9DDFEA08EB382D69 * ((v84[19] + 8 * v90) ^ HIDWORD(v90));
          v94 = 0x9DDFEA08EB382D69 * (HIDWORD(v90) ^ (v93 >> 47) ^ v93);
          LODWORD(v94) = (-348639895 * ((v94 >> 47) ^ v94)) & (v88 - 1);
          v95 = (uint64_t *)(v91 + 16 * v94);
          v96 = *v95;
          if (v90 == *v95)
          {
            if (v95 == (uint64_t *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16)))
              goto LABEL_133;
LABEL_123:
            v90 = v95[1];
            goto LABEL_133;
          }
          v97 = 1;
          do
          {
            if (v96 == -4096)
              goto LABEL_133;
            v98 = v94 + v97++;
            v94 = v98 & (v88 - 1);
            v96 = *(_QWORD *)(v91 + 16 * v94);
          }
          while (v90 != v96);
          v95 = (uint64_t *)(v91 + 16 * v94);
          if (v95 != (uint64_t *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16)))
            goto LABEL_123;
LABEL_133:
          while (1)
          {
            *v87 = v90;
            if (++v89 == v85)
              break;
            ++v87;
            v88 = *(_DWORD *)(a4 + 16);
            v90 = *(_QWORD *)(v86 + 32 * v89 + 24);
            if (v88)
              goto LABEL_120;
          }
          v81 = v136;
          v72 = v131;
          v79 = v126;
        }
        else
        {
          if (v85 >= 0xB
            && ((unint64_t)v135 >= v86 + 32 * v85 || v86 + 24 >= (unint64_t)v135 + 8 * v85))
          {
            v102 = v85 & 3;
            if ((v85 & 3) == 0)
              v102 = 4;
            v101 = v85 - v102;
            v103 = (const double *)(v86 + 88);
            v104 = (unsigned __int128 *)((char *)v135 + 16);
            v105 = v101;
            do
            {
              v106 = v103 - 8;
              v107 = (unsigned __int128)vld4q_f64(v106);
              v108 = (unsigned __int128)vld4q_f64(v103);
              *(v104 - 1) = v107;
              *v104 = v108;
              v103 += 16;
              v104 += 2;
              v105 -= 4;
            }
            while (v105);
            v87 += v101;
          }
          else
          {
            v101 = 0;
          }
          v109 = v85 - v101;
          v110 = (uint64_t *)(v86 + 32 * v101 + 24);
          do
          {
            v111 = *v110;
            v110 += 4;
            *v87++ = v111;
            --v109;
          }
          while (v109);
          v72 = v131;
        }
      }
LABEL_147:
      mlir::ValueRange::ValueRange((unint64_t *)&v133, (uint64_t)v135, v81);
      mlir::Operation::setOperands((uint64_t *)v79, v133, v134);
      v112 = *(unsigned int *)(v77 + 44);
      v113 = v112 & 0x7FFFFF;
      if ((v112 & 0x7FFFFF) != 0)
      {
        v114 = ((v77 + 16 * ((v112 >> 23) & 1) + ((v112 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
             + 32 * *(unsigned int *)(v77 + 40);
        v115 = *(unsigned int *)(v79 + 44);
        v116 = v115 & 0x7FFFFF;
        if ((v115 & 0x7FFFFF) != 0)
          goto LABEL_151;
      }
      else
      {
        v114 = 0;
        v113 = 0;
        v115 = *(unsigned int *)(v79 + 44);
        v116 = v115 & 0x7FFFFF;
        if ((v115 & 0x7FFFFF) != 0)
        {
LABEL_151:
          if (v113)
          {
            v117 = ((v79 + 16 * ((v115 >> 23) & 1) + ((v115 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(v79 + 40);
            v118 = 24 * v113 - 24;
            v119 = 24 * v116 - 24;
            v120 = v117;
            do
            {
              mlir::Region::cloneInto(v114, v120, v117, a4);
              if (!v118)
                break;
              v114 += 24;
              v120 += 24;
              v118 -= 24;
              v117 += 24;
              v121 = v119;
              v119 -= 24;
            }
            while (v121);
          }
        }
      }
      v72 = (mlir::GenericProgramPoint *)*((_QWORD *)v72 + 1);
      v73 = (mlir::GenericProgramPoint *)*((_QWORD *)v73 + 1);
      if (v73 == v129 || v72 == v127)
        goto LABEL_87;
    }
  }
}

_QWORD *mlir::IRMapping::map(mlir::IRMapping *this, mlir::Block *a2, mlir::Block *a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  mlir::Block **v12;
  mlir::Block *v13;
  mlir::Block *v14;
  mlir::Block **v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  mlir::Block *v23;
  mlir::Block **v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v8 = *((_QWORD *)this + 3);
  result = (_QWORD *)((char *)this + 24);
  v7 = v8;
  v9 = *((_DWORD *)result + 4);
  if (!v9)
    goto LABEL_21;
  v10 = v9 - 1;
  v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (mlir::Block **)(v7 + 16 * v11);
  v13 = *v12;
  if (*v12 == a2)
  {
LABEL_3:
    v12[1] = a3;
    return result;
  }
  v15 = 0;
  v16 = 1;
  while (v13 != (mlir::Block *)-4096)
  {
    if (v15)
      v17 = 0;
    else
      v17 = v13 == (mlir::Block *)-8192;
    if (v17)
      v15 = v12;
    v18 = v11 + v16++;
    v11 = v18 & v10;
    v12 = (mlir::Block **)(v7 + 16 * (v18 & v10));
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_3;
  }
  if (v15)
    v12 = v15;
  v19 = *((_DWORD *)this + 8);
  if (4 * v19 + 4 < 3 * v9)
  {
    if (v9 + ~v19 - *((_DWORD *)this + 9) > v9 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v9 *= 2;
  }
  result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)result, v9);
  v20 = *((_QWORD *)this + 3);
  v21 = *((_DWORD *)this + 10) - 1;
  v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (mlir::Block **)(v20 + 16 * v22);
  v23 = *v12;
  if (*v12 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 8);
    if (a2 == (mlir::Block *)-4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v24 = 0;
  v25 = 1;
  while (v23 != (mlir::Block *)-4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == (mlir::Block *)-8192;
    if (v26)
      v24 = v12;
    v27 = v22 + v25++;
    v22 = v27 & v21;
    v12 = (mlir::Block **)(v20 + 16 * (v27 & v21));
    v23 = *v12;
    if (*v12 == a2)
      goto LABEL_23;
  }
  if (v24)
    v12 = v24;
LABEL_6:
  v14 = *v12;
  ++*((_DWORD *)this + 8);
  if (v14 != (mlir::Block *)-4096)
LABEL_7:
    --*((_DWORD *)this + 9);
LABEL_8:
  *v12 = a2;
  v12[1] = 0;
  v12[1] = a3;
  return result;
}

mlir::Block *mlir::Region::findAncestorBlockInRegion(mlir::Region *this, mlir::Block *a2)
{
  uint64_t ParentOp;

  while (1)
  {
    if ((mlir::Region *)mlir::Block::getParent(a2) == this)
      return a2;
    ParentOp = mlir::Block::getParentOp(a2);
    if (!ParentOp)
      break;
    a2 = *(mlir::Block **)(ParentOp + 16);
    if (!a2)
      return a2;
  }
  return 0;
}

mlir::Operation *mlir::Region::findAncestorOpInRegion(mlir::Region *this, mlir::Operation *a2)
{
  mlir::Block *v4;
  mlir::Region *Parent;

  while (1)
  {
    v4 = (mlir::Block *)*((_QWORD *)a2 + 2);
    if (!v4)
      break;
    Parent = (mlir::Region *)mlir::Block::getParent(v4);
    if (!Parent)
      break;
    if (Parent != this)
    {
      a2 = (mlir::Operation *)*((_QWORD *)Parent + 2);
      if (a2)
        continue;
    }
    return a2;
  }
  return 0;
}

uint64_t llvm::ilist_traits<mlir::Block>::addNodeToList(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a2 + 24) & 7 | result;
  return result;
}

void llvm::ilist_traits<mlir::Block>::removeNodeFromList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 24) &= 7uLL;
}

uint64_t llvm::ilist_traits<mlir::Block>::transferNodesFromList(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result != a2 && a3 != a4)
  {
    do
    {
      v4 = a3 - 8;
      if (!a3)
        v4 = 0;
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 24) & 7 | result;
      a3 = *(_QWORD *)(a3 + 8);
    }
    while (a3 != a4);
  }
  return result;
}

_QWORD *mlir::Region::OpIterator::OpIterator(_QWORD *this, mlir::Region *a2, char a3)
{
  mlir::Region *v3;
  char **v4;
  char *v5;

  *this = a2;
  v3 = a2;
  if ((a3 & 1) == 0)
    v3 = (mlir::Region *)*((_QWORD *)a2 + 1);
  this[1] = v3;
  this[2] = 0;
  if (*(mlir::Region **)a2 != a2)
  {
    if (v3 == a2)
      goto LABEL_12;
    while (1)
    {
      v4 = (char **)((char *)v3 - 8);
      if (!v3)
        v4 = 0;
      if (v4[4] != (char *)(v4 + 4))
        break;
      v3 = (mlir::Region *)*((_QWORD *)v3 + 1);
      this[1] = v3;
      if (v3 == a2)
        goto LABEL_12;
    }
    if (v3 == a2)
LABEL_12:
      v5 = 0;
    else
      v5 = v4[5];
    this[2] = v5;
  }
  return this;
}

uint64_t *mlir::Region::OpIterator::operator++(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = result[1];
  v2 = result[2];
  v3 = v1 - 8;
  if (!v1)
    v3 = 0;
  v4 = v3 + 32;
  if (v2 == v4 || (v5 = *(_QWORD *)(v2 + 8), result[2] = v5, v5 == v4))
  {
    v6 = *(_QWORD *)(v1 + 8);
    result[1] = v6;
    v7 = *result;
    if (v6 == *result)
      goto LABEL_13;
    while (1)
    {
      v8 = v6 - 8;
      if (!v6)
        v8 = 0;
      if (*(_QWORD *)(v8 + 32) != v8 + 32)
        break;
      v6 = *(_QWORD *)(v6 + 8);
      result[1] = v6;
      if (v6 == v7)
        goto LABEL_13;
    }
    if (v6 == v7)
LABEL_13:
      result[2] = 0;
    else
      result[2] = *(_QWORD *)(v8 + 40);
  }
  return result;
}

unint64_t mlir::RegionRange::dereference_iterator(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *a1 & 6;
  v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = v2 != 2 || v3 == 0;
  if (v4 && (v2 == 4 ? (v5 = v3 == 0) : (v5 = 1), v5))
    return v3 + 24 * a2;
  else
    return *(_QWORD *)(v3 + 8 * a2);
}

uint64_t mlir::RegionKindInterface::getRegionKind(uint64_t (***this)(uint64_t), uint64_t a2)
{
  return (*this[1])(a2);
}

uint64_t mlir::RegionKindInterface::hasSSADominance(mlir::RegionKindInterface *this, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*((_QWORD *)this + 1) + 8))(a2);
}

mlir::SymbolTable *mlir::SymbolTable::SymbolTable(mlir::SymbolTable *this, mlir::Operation *a2)
{
  char *v4;
  mlir::StringAttr *Context;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AttrData;
  uint64_t v20;
  uint64_t InherentAttr;
  char v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _QWORD v41[4];
  __int16 v42;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 8) = 0;
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  v42 = 261;
  v41[0] = "sym_name";
  v41[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v41);
  v7 = *(_QWORD *)((((unint64_t)a2
                   + 16 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)a2 + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)a2 + 10)
                 + 8);
  if (v7)
    v8 = v7 - 8;
  else
    v8 = 0;
  v9 = (mlir::GenericProgramPoint *)(v8 + 32);
  v10 = *(mlir::GenericProgramPoint **)(v8 + 40);
  if (v10 != (mlir::GenericProgramPoint *)(v8 + 32))
  {
    v11 = v6;
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v10);
      v17 = v16;
      v41[0] = v11;
      v18 = v11;
      if (*(_BYTE *)(v16 + 47))
      {
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v41);
        InherentAttr = mlir::Operation::getInherentAttr(v17, AttrData, v20);
        if (v22)
          goto LABEL_12;
        v18 = v41[0];
      }
      InherentAttr = mlir::DictionaryAttr::get(v17 + 56, v18);
LABEL_12:
      if (InherentAttr)
      {
        v23 = *(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id
            ? InherentAttr
            : 0;
        if (v23)
        {
          v24 = *((_DWORD *)this + 6);
          if (!v24)
            goto LABEL_37;
          v12 = *((_QWORD *)this + 1);
          v13 = (v24 - 1) & ((v23 >> 4) ^ (v23 >> 9));
          v14 = (uint64_t *)(v12 + 16 * v13);
          v15 = *v14;
          if (*v14 != v23)
          {
            v26 = 0;
            v27 = 1;
            while (v15 != -4096)
            {
              if (v26)
                v28 = 0;
              else
                v28 = v15 == -8192;
              if (v28)
                v26 = v14;
              v29 = v13 + v27++;
              v13 = v29 & (v24 - 1);
              v14 = (uint64_t *)(v12 + 16 * v13);
              v15 = *v14;
              if (*v14 == v23)
                goto LABEL_7;
            }
            if (v26)
              v30 = v26;
            else
              v30 = v14;
            v31 = *((_DWORD *)this + 4);
            if (4 * v31 + 4 < 3 * v24)
            {
              if (v24 + ~v31 - *((_DWORD *)this + 5) <= v24 >> 3)
                goto LABEL_38;
            }
            else
            {
LABEL_37:
              v24 *= 2;
LABEL_38:
              llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v24);
              v32 = *((_QWORD *)this + 1);
              v33 = *((_DWORD *)this + 6) - 1;
              v34 = v33 & ((v23 >> 4) ^ (v23 >> 9));
              v30 = (uint64_t *)(v32 + 16 * v34);
              v35 = *v30;
              if (*v30 == v23)
              {
                v25 = v23;
                goto LABEL_21;
              }
              v36 = 0;
              v37 = 1;
              while (v35 != -4096)
              {
                if (v36)
                  v38 = 0;
                else
                  v38 = v35 == -8192;
                if (v38)
                  v36 = v30;
                v39 = v34 + v37++;
                v34 = v39 & v33;
                v30 = (uint64_t *)(v32 + 16 * (v39 & v33));
                v35 = *v30;
                v25 = v23;
                if (*v30 == v23)
                  goto LABEL_21;
              }
              if (v36)
                v30 = v36;
            }
            v25 = *v30;
LABEL_21:
            ++*((_DWORD *)this + 4);
            if (v25 != -4096)
              --*((_DWORD *)this + 5);
            *v30 = v23;
            v30[1] = v17;
          }
        }
      }
LABEL_7:
      v10 = (mlir::GenericProgramPoint *)*((_QWORD *)v10 + 1);
    }
    while (v10 != v9);
  }
  return this;
}

int32x2_t mlir::SymbolTable::remove(int32x2_t *this, mlir::Operation *a2)
{
  uint64_t InherentAttr;
  int32x2_t result;
  char v6;
  uint64_t v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  if (*((_BYTE *)a2 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"sym_name", 8);
    if (v6)
    {
      if (InherentAttr)
        goto LABEL_4;
LABEL_10:
      v7 = 0;
      v8 = this[1];
      v9 = this[3].u32[0];
      if (!(_DWORD)v9)
        goto LABEL_16;
      goto LABEL_11;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "sym_name", 8uLL);
  if (!InherentAttr)
    goto LABEL_10;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    v7 = InherentAttr;
  else
    v7 = 0;
  v8 = this[1];
  v9 = this[3].u32[0];
  if (!(_DWORD)v9)
    goto LABEL_16;
LABEL_11:
  LODWORD(v10) = ((v7 >> 4) ^ (v7 >> 9)) & (v9 - 1);
  v11 = *(_QWORD *)&v8 + 16 * v10;
  v12 = *(_QWORD *)v11;
  if (*(_QWORD *)v11 == v7)
    goto LABEL_17;
  v13 = 1;
  while (v12 != -4096)
  {
    v14 = v10 + v13++;
    v10 = v14 & (v9 - 1);
    v12 = *(_QWORD *)(*(_QWORD *)&v8 + 16 * v10);
    if (v12 == v7)
    {
      v11 = *(_QWORD *)&v8 + 16 * v10;
      goto LABEL_17;
    }
  }
LABEL_16:
  v11 = *(_QWORD *)&v8 + 16 * v9;
LABEL_17:
  if (v11 != *(_QWORD *)&v8 + 16 * v9 && *(mlir::Operation **)(v11 + 8) == a2)
  {
    *(_QWORD *)v11 = -8192;
    result = vadd_s32(this[2], (int32x2_t)0x1FFFFFFFFLL);
    this[2] = result;
  }
  return result;
}

void mlir::SymbolTable::erase(int32x2_t *this, mlir::Operation *a2)
{
  mlir::SymbolTable::remove(this, a2);
  mlir::Operation::erase(a2);
}

uint64_t mlir::SymbolTable::insert(uint64_t a1, uint64_t a2, mlir::GenericProgramPoint **a3)
{
  mlir::Block *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::GenericProgramPoint **v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint **v13;
  uint64_t InherentAttr;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  mlir::StringAttr *Context;
  unint64_t v25;
  const void *AttrData;
  size_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  unsigned int v36;
  std::string *v37;
  size_t size;
  uint64_t v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  mlir::StringAttr *v55;
  uint64_t v56;
  mlir::StringAttr *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void *v61;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t *v85;
  int v86;
  BOOL v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  mlir::Attribute *v91;
  uint64_t v92;
  _QWORD v93[4];
  __int16 v94;
  std::string v95;
  __int16 v96;
  void *v97;
  __int128 v98;
  _QWORD v99[18];

  v99[16] = *MEMORY[0x1E0C80C00];
  v6 = *(mlir::Block **)(a2 + 16);
  if (v6 && mlir::Block::getParentOp(v6))
  {
    if (!*(_BYTE *)(a2 + 47))
      goto LABEL_28;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(((*(_QWORD *)a1
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)a1 + 40)
                 + 8);
  if (v7)
    v8 = v7 - 8;
  else
    v8 = 0;
  v9 = (mlir::GenericProgramPoint **)(v8 + 32);
  if (a3)
  {
    if (v9 != a3)
      goto LABEL_16;
    v10 = *a3;
    if (*a3 == (mlir::GenericProgramPoint *)a3)
      goto LABEL_15;
  }
  else
  {
    a3 = (mlir::GenericProgramPoint **)(v8 + 32);
    v10 = *v9;
    if (v10 == (mlir::GenericProgramPoint *)(v8 + 32))
      goto LABEL_15;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v10);
  if (mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>((_QWORD *)(v11 + 48)))
  {
    v9 = a3;
    a3 = (mlir::GenericProgramPoint **)*a3;
    goto LABEL_16;
  }
LABEL_15:
  v9 = a3;
LABEL_16:
  llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)v9, a2);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
  v12 = *a3;
  *v13 = *a3;
  v13[1] = (mlir::GenericProgramPoint *)a3;
  *((_QWORD *)v12 + 1) = v13;
  *a3 = (mlir::GenericProgramPoint *)v13;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
  if (!*(_BYTE *)(a2 + 47))
    goto LABEL_28;
LABEL_17:
  InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"sym_name", 8);
  if (v15)
  {
    if (!InherentAttr)
      goto LABEL_29;
    goto LABEL_19;
  }
LABEL_28:
  InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "sym_name", 8uLL);
  if (!InherentAttr)
  {
LABEL_29:
    v16 = 0;
    v92 = 0;
    v17 = a1 + 8;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_DWORD *)(a1 + 24);
    if (!v19)
      goto LABEL_30;
    goto LABEL_23;
  }
LABEL_19:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    v16 = InherentAttr;
  else
    v16 = 0;
  v92 = v16;
  v17 = a1 + 8;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_DWORD *)(a1 + 24);
  if (!v19)
  {
LABEL_30:
    v29 = 0;
    v30 = *(_DWORD *)(a1 + 16);
    if (4 * v30 + 4 < 3 * v19)
      goto LABEL_31;
    goto LABEL_113;
  }
LABEL_23:
  v20 = v19 - 1;
  v21 = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
  v22 = (uint64_t *)(v18 + 16 * v21);
  v23 = *v22;
  if (*v22 == v16)
    goto LABEL_24;
  v69 = 0;
  v70 = 1;
  v71 = *v22;
  v72 = v20 & ((v16 >> 4) ^ (v16 >> 9));
  do
  {
    if (v71 == -4096)
    {
      if (v69)
        v29 = v69;
      else
        v29 = v22;
      v30 = *(_DWORD *)(a1 + 16);
      if (4 * v30 + 4 < 3 * v19)
      {
LABEL_31:
        if (v19 + ~v30 - *(_DWORD *)(a1 + 20) > v19 >> 3)
          goto LABEL_32;
        goto LABEL_114;
      }
LABEL_113:
      v19 *= 2;
LABEL_114:
      llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v17, v19);
      v77 = *(_QWORD *)(a1 + 8);
      v78 = *(_DWORD *)(a1 + 24) - 1;
      v79 = v78 & ((v16 >> 4) ^ (v16 >> 9));
      v29 = (uint64_t *)(v77 + 16 * v79);
      v80 = *v29;
      if (*v29 == v16)
      {
        v31 = v16;
        goto LABEL_33;
      }
      v85 = 0;
      v86 = 1;
      while (v80 != -4096)
      {
        if (v85)
          v87 = 0;
        else
          v87 = v80 == -8192;
        if (v87)
          v85 = v29;
        v88 = v79 + v86++;
        v79 = v88 & v78;
        v29 = (uint64_t *)(v77 + 16 * (v88 & v78));
        v80 = *v29;
        v31 = v16;
        if (*v29 == v16)
          goto LABEL_33;
      }
      if (v85)
        v29 = v85;
LABEL_32:
      v31 = *v29;
LABEL_33:
      ++*(_DWORD *)(a1 + 16);
      if (v31 != -4096)
        --*(_DWORD *)(a1 + 20);
      *v29 = v16;
      v29[1] = a2;
      return v92;
    }
    if (v69)
      v73 = 0;
    else
      v73 = v71 == -8192;
    if (v73)
      v69 = v22;
    v74 = v72 + v70++;
    v72 = v74 & v20;
    v22 = (uint64_t *)(v18 + 16 * (v74 & v20));
    v71 = *v22;
  }
  while (*v22 != v16);
  if (v23 == v16)
  {
LABEL_24:
    if (*(_QWORD *)(v18 + 16 * v21 + 8) == a2)
      return v16;
LABEL_25:
    v89 = v17;
    v91 = (mlir::Attribute *)(a2 + 24);
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v92);
    v27 = v25;
    v97 = v99;
    v98 = xmmword_181236BB0;
    if (v25 < 0x81)
    {
      v28 = 0;
      if (!v25)
      {
LABEL_38:
        v32 = v28 + v27;
        v33 = v32;
        *(_QWORD *)&v98 = v32;
        v90 = v32 + 1;
        v34 = v32 > v32;
        if (v32 == v32)
          goto LABEL_45;
LABEL_39:
        if (!v34)
        {
          if (*((_QWORD *)&v98 + 1) < v33)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v97, v99, v33, 1);
            v32 = v98;
          }
          if (v33 != v32)
            bzero((char *)v97 + v32, v33 - v32);
        }
        *(_QWORD *)&v98 = v33;
        while (1)
        {
LABEL_45:
          v35 = v33;
          if (v33 >= *((_QWORD *)&v98 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v97, v99, v90, 1);
            v35 = v98;
          }
          *((_BYTE *)v97 + v35) = 95;
          *(_QWORD *)&v98 = v98 + 1;
          v36 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v36 + 1;
          std::to_string(&v95, v36);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v95;
          else
            v37 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          else
            size = v95.__r_.__value_.__l.__size_;
          v39 = v98;
          if (*((_QWORD *)&v98 + 1) < (unint64_t)v98 + size)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v97, v99, v98 + size, 1);
            v39 = v98;
          }
          if (size)
          {
            memcpy((char *)v97 + v39, v37, size);
            v39 = v98;
          }
          v40 = v39 + size;
          *(_QWORD *)&v98 = v40;
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v95.__r_.__value_.__l.__data_);
            v40 = v98;
          }
          v96 = 261;
          v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
          v95.__r_.__value_.__l.__size_ = v40;
          v41 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v95);
          v42 = v41;
          v43 = *(_DWORD *)(a1 + 24);
          if (!v43)
            goto LABEL_93;
          v44 = *(_QWORD *)(a1 + 8);
          v45 = (v43 - 1) & ((v41 >> 4) ^ (v41 >> 9));
          v46 = (uint64_t *)(v44 + 16 * v45);
          v47 = *v46;
          if (*v46 != v41)
            break;
LABEL_61:
          v32 = v98;
          v34 = (unint64_t)v98 > v33;
          if ((_QWORD)v98 != v33)
            goto LABEL_39;
        }
        v48 = 0;
        v49 = 1;
        while (v47 != -4096)
        {
          if (v48)
            v50 = 0;
          else
            v50 = v47 == -8192;
          if (v50)
            v48 = v46;
          v51 = v45 + v49++;
          v45 = v51 & (v43 - 1);
          v46 = (uint64_t *)(v44 + 16 * v45);
          v47 = *v46;
          if (*v46 == v41)
            goto LABEL_61;
        }
        if (v48)
          v63 = v48;
        else
          v63 = v46;
        v64 = *(_DWORD *)(a1 + 16);
        if (4 * v64 + 4 < 3 * v43)
        {
          if (v43 + ~v64 - *(_DWORD *)(a1 + 20) > v43 >> 3)
            goto LABEL_74;
        }
        else
        {
LABEL_93:
          v43 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v89, v43);
        v65 = *(_QWORD *)(a1 + 8);
        v66 = *(_DWORD *)(a1 + 24) - 1;
        v67 = v66 & ((v42 >> 4) ^ (v42 >> 9));
        v63 = (uint64_t *)(v65 + 16 * v67);
        v68 = *v63;
        if (*v63 == v42)
        {
          v52 = v42;
LABEL_75:
          ++*(_DWORD *)(a1 + 16);
          if (v52 != -4096)
            --*(_DWORD *)(a1 + 20);
          *v63 = v42;
          v63[1] = a2;
          v53 = v97;
          v54 = v98;
          v55 = (mlir::StringAttr *)mlir::Attribute::getContext(v91);
          v94 = 261;
          v93[0] = v53;
          v93[1] = v54;
          v56 = mlir::StringAttr::get(v55, (mlir::MLIRContext *)v93);
          v57 = (mlir::StringAttr *)mlir::Attribute::getContext(v91);
          v96 = 261;
          v95.__r_.__value_.__r.__words[0] = (std::string::size_type)"sym_name";
          v95.__r_.__value_.__l.__size_ = 8;
          v58 = mlir::StringAttr::get(v57, (mlir::MLIRContext *)&v95);
          mlir::Operation::setAttr(a2, v58, v56);
          if (!*(_BYTE *)(a2 + 47) || (v59 = mlir::Operation::getInherentAttr(a2, (uint64_t)"sym_name", 8), !v60))
            v59 = mlir::DictionaryAttr::get(a2 + 56, "sym_name", 8uLL);
          if (v59)
          {
            if (*(_UNKNOWN **)(*(_QWORD *)v59 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
              v16 = v59;
            else
              v16 = 0;
            v61 = v97;
            if (v97 == v99)
              return v16;
          }
          else
          {
            v16 = 0;
            v61 = v97;
            if (v97 == v99)
              return v16;
          }
          free(v61);
          return v16;
        }
        v81 = 0;
        v82 = 1;
        while (v68 != -4096)
        {
          if (v81)
            v83 = 0;
          else
            v83 = v68 == -8192;
          if (v83)
            v81 = v63;
          v84 = v67 + v82++;
          v67 = v84 & v66;
          v63 = (uint64_t *)(v65 + 16 * (v84 & v66));
          v68 = *v63;
          v52 = v42;
          if (*v63 == v42)
            goto LABEL_75;
        }
        if (v81)
          v63 = v81;
LABEL_74:
        v52 = *v63;
        goto LABEL_75;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v97, v99, v25, 1);
      v28 = v98;
      if (!v27)
        goto LABEL_38;
    }
    memcpy((char *)v97 + v28, AttrData, v27);
    v28 = v98;
    goto LABEL_38;
  }
  v75 = 1;
  while (v23 != -4096)
  {
    v76 = v21 + v75++;
    v21 = v76 & v20;
    v23 = *(_QWORD *)(v18 + 16 * v21);
    if (v23 == v16)
      goto LABEL_24;
  }
  if (a2)
    goto LABEL_25;
  return v16;
}

uint64_t mlir::SymbolTable::getSymbolName(mlir::SymbolTable *this, mlir::Operation *a2)
{
  uint64_t result;
  char v4;

  if (!*((_BYTE *)this + 47)
    || (result = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_name", 8), !v4))
  {
    result = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_name", 8uLL);
  }
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)result + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
      return 0;
  }
  return result;
}

uint64_t mlir::SymbolTable::replaceAllSymbolUses(mlir::Operation *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v21[2];
  void *__p[2];
  __int128 v23;
  llvm *v24[2];
  unsigned int v25;
  uint64_t NewRefAttr;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v28 = mlir::SymbolRefAttr::get(a2);
  collectSymbolScopes((mlir::Operation *)&v30, a1, a3);
  v5 = v30;
  if (v31)
  {
    v27 = *(void **)v30;
    NewRefAttr = generateNewRefAttr(v27, v28);
    v25 = 0;
    v23 = 0u;
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)__p = 0u;
    v6 = operator new(0x28uLL);
    *v6 = off_1E0E50AB0;
    v6[1] = &v27;
    v6[2] = &NewRefAttr;
    v6[3] = &v29;
    v6[4] = &v28;
    v34 = v6;
    mlir::AttrTypeReplacer::addReplacement((uint64_t *)v21, v33);
    v14 = v34;
    if (v34 == v33)
    {
      v14 = v33;
      v15 = 4;
    }
    else
    {
      if (!v34)
      {
LABEL_7:
        v33[0] = v21;
        v16 = v5[1];
        v17 = v16 & 0xFFFFFFFFFFFFFFF8;
        if ((v16 & 4) != 0 && v17)
        {
          v18 = 1;
        }
        else
        {
          mlir::AttrTypeReplacer::replaceElementsIn((mlir::AttrTypeReplacer *)v21, (mlir::Operation *)(v16 & 0xFFFFFFFFFFFFFFF8), 1, 0, 0);
          if ((mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)(v17 + 48)) & 1) != 0)
            goto LABEL_15;
          v19 = *(unsigned int *)(v17 + 44);
          v18 = v19 & 0x7FFFFF;
          if ((v19 & 0x7FFFFF) != 0)
          {
            v17 = ((v17 + 16 * ((v19 >> 23) & 1) + ((v19 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(v17 + 40);
          }
          else
          {
            v17 = 0;
            v18 = 0;
          }
        }
        walkSymbolTable(v17, v18, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult replaceAllSymbolUsesImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::StringAttr,mlir::Operation *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v33);
LABEL_15:
        llvm::deallocate_buffer(v24[0], (void *)(16 * v25));
      }
      v15 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*v14 + 8 * v15))(v14, v7, v8, v9, v10, v11, v12, v13, v21[0]);
    goto LABEL_7;
  }
  if (v30 != &v32)
    free(v30);
  return 1;
}

uint64_t mlir::SymbolTable::getSymbolVisibility(mlir::SymbolTable *this, mlir::Operation *a2)
{
  uint64_t result;
  char v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t AttrData;
  uint64_t v9;
  _BOOL4 v12;
  uint64_t v13;

  if (!*((_BYTE *)this + 47)
    || (result = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_visibility", 14), !v4))
  {
    result = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_visibility", 0xEuLL);
  }
  if (result)
  {
    v5 = *(void **)(*(_QWORD *)result + 136);
    v6 = v5 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
      v7 = result;
    else
      v7 = 0;
    v13 = v7;
    if (!v6)
      return 0;
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v13);
    if (v9 != 6)
      return v9 == 7 && *(_DWORD *)AttrData == 1986622064 && *(_DWORD *)(AttrData + 3) == 1702125942;
    v12 = *(_DWORD *)AttrData == 1953719662 && *(_WORD *)(AttrData + 4) == 25701;
    return (2 * v12);
  }
  return result;
}

void mlir::SymbolTable::setSymbolVisibility(uint64_t a1, int a2)
{
  mlir::Attribute *v4;
  mlir::StringAttr *Context;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::StringAttr *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  const char *v14;
  uint64_t v15;
  __int16 v16;

  v4 = (mlir::Attribute *)(a1 + 24);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  if (a2)
  {
    v6 = "nested";
    if (a2 == 1)
      v6 = "private";
    v7 = 6;
    v13 = 261;
    if (a2 == 1)
      v7 = 7;
    v12[0] = v6;
    v12[1] = v7;
    v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v12);
    v9 = (mlir::StringAttr *)mlir::Attribute::getContext(v4);
    v16 = 261;
    v14 = "sym_visibility";
    v15 = 14;
    v10 = mlir::StringAttr::get(v9, (mlir::MLIRContext *)&v14);
    mlir::Operation::setAttr(a1, v10, v8);
  }
  else
  {
    v16 = 261;
    v14 = "sym_visibility";
    v15 = 14;
    v11 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v14);
    mlir::Operation::removeAttr(a1, v11);
  }
}

mlir::SymbolTable *mlir::SymbolTable::getNearestSymbolTable(mlir::SymbolTable *this, mlir::Operation *a2)
{
  mlir::SymbolTable *v2;
  uint64_t v3;
  mlir::Block *v5;
  uint64_t ParentOp;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  if ((*((_DWORD *)this + 11) & 0x7FFFFF) == 1)
  {
    v3 = *((_QWORD *)this + 6);
    if (*(_UNKNOWN **)(v3 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v8 = *(_QWORD *)(v3 + 8);
      if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v8))
        return 0;
    }
    else if (!*(_QWORD *)(v3 + 24))
    {
      return 0;
    }
  }
  if ((mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)v2 + 6) & 1) != 0)
    return v2;
  while (1)
  {
    v5 = (mlir::Block *)*((_QWORD *)v2 + 2);
    if (!v5)
      break;
    ParentOp = mlir::Block::getParentOp(v5);
    v2 = (mlir::SymbolTable *)ParentOp;
    if (!ParentOp)
      return v2;
    if ((*(_DWORD *)(ParentOp + 44) & 0x7FFFFF) == 1)
    {
      v7 = *(_QWORD *)(ParentOp + 48);
      if (*(_UNKNOWN **)(v7 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v8))
          return 0;
      }
      else if (!*(_QWORD *)(v7 + 24))
      {
        return 0;
      }
    }
    if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)v2 + 6))
      return v2;
  }
  return 0;
}

uint64_t mlir::SymbolTable::walkSymbolTables(uint64_t a1, int a2, uint64_t (*a3)(uint64_t, uint64_t, _BOOL8), uint64_t a4)
{
  uint64_t result;
  char v8;
  uint64_t InherentAttr;
  char v10;
  _BOOL8 v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t InterfaceFor;
  unint64_t v15;
  unint64_t v16;
  uint64_t i;
  uint64_t v18;
  mlir::GenericProgramPoint *v19;
  mlir::GenericProgramPoint *v20;

  result = mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)(a1 + 48));
  v8 = result;
  if (!(_DWORD)result)
  {
    v11 = 1;
    v12 = *(unsigned int *)(a1 + 44);
    v13 = v12 & 0x7FFFFF;
    if ((v12 & 0x7FFFFF) == 0)
      goto LABEL_23;
    goto LABEL_14;
  }
  if (!mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor(a1))
    goto LABEL_13;
  if (*(_BYTE *)(a1 + 47) && (InherentAttr = mlir::Operation::getInherentAttr(a1, (uint64_t)"sym_name", 8), v10))
  {
    if (!InherentAttr)
      goto LABEL_13;
  }
  else if (!mlir::DictionaryAttr::contains(a1 + 56, "sym_name", 8uLL))
  {
    goto LABEL_13;
  }
  InterfaceFor = mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor(a1);
  if (a1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(InterfaceFor + 32))(InterfaceFor, a1);
    v11 = (result | a2) != 0;
    v12 = *(unsigned int *)(a1 + 44);
    v13 = v12 & 0x7FFFFF;
    if ((v12 & 0x7FFFFF) == 0)
      goto LABEL_23;
    goto LABEL_14;
  }
LABEL_13:
  result = 1;
  v11 = 1;
  v12 = *(unsigned int *)(a1 + 44);
  v13 = v12 & 0x7FFFFF;
  if ((v12 & 0x7FFFFF) == 0)
    goto LABEL_23;
LABEL_14:
  v15 = ((a1 + 16 * ((v12 >> 23) & 1) + ((v12 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *(unsigned int *)(a1 + 40);
  v16 = v15 + 24 * v13;
  i = *(_QWORD *)(v15 + 8);
  if (i != v15)
    goto LABEL_17;
  while (1)
  {
    v15 += 24;
    if (v15 == v16)
      break;
    for (i = *(_QWORD *)(v15 + 8); i != v15; i = *(_QWORD *)(i + 8))
    {
LABEL_17:
      v18 = i - 8;
      if (!i)
        v18 = 0;
      v19 = (mlir::GenericProgramPoint *)(v18 + 32);
      v20 = *(mlir::GenericProgramPoint **)(v18 + 40);
      if (v20 != (mlir::GenericProgramPoint *)(v18 + 32))
      {
        do
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v20);
          result = mlir::SymbolTable::walkSymbolTables();
          v20 = (mlir::GenericProgramPoint *)*((_QWORD *)v20 + 1);
        }
        while (v20 != v19);
      }
    }
  }
LABEL_23:
  if ((v8 & 1) != 0)
    return a3(a4, a1, v11);
  return result;
}

uint64_t mlir::SymbolTable::lookupSymbolIn(unsigned int *a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  mlir::StringAttr *Context;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AttrData;
  uint64_t v16;
  uint64_t InherentAttr;
  char v18;
  uint64_t v19;
  _QWORD v21[4];
  __int16 v22;

  v3 = a1[11];
  if ((v3 & 0x7FFFFF) != 0)
  {
    v4 = (_QWORD *)((((unint64_t)&a1[4 * ((v3 >> 23) & 1) + 17] + ((v3 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a1[10]);
    if ((_QWORD *)*v4 == v4)
      return 0;
    goto LABEL_5;
  }
  v4 = 0;
  if (MEMORY[0])
  {
LABEL_5:
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 6));
    v22 = 261;
    v21[0] = "sym_name";
    v21[1] = 8;
    v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v21);
    v7 = v4[1];
    if (v7)
      v8 = v7 - 8;
    else
      v8 = 0;
    v9 = (mlir::GenericProgramPoint *)(v8 + 32);
    v10 = *(mlir::GenericProgramPoint **)(v8 + 40);
    if (v10 == (mlir::GenericProgramPoint *)(v8 + 32))
      return 0;
    v11 = v6;
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v10);
      v13 = v12;
      v21[0] = v11;
      v14 = v11;
      if (*(_BYTE *)(v12 + 47))
      {
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v21);
        InherentAttr = mlir::Operation::getInherentAttr(v13, AttrData, v16);
        if (v18)
        {
          if (!InherentAttr)
            goto LABEL_10;
          goto LABEL_18;
        }
        v14 = v21[0];
      }
      InherentAttr = mlir::DictionaryAttr::get(v13 + 56, v14);
      if (!InherentAttr)
      {
LABEL_10:
        if (!a2)
          return v13;
        goto LABEL_11;
      }
LABEL_18:
      if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
        v19 = InherentAttr;
      else
        v19 = 0;
      if (v19 == a2)
        return v13;
LABEL_11:
      v10 = (mlir::GenericProgramPoint *)*((_QWORD *)v10 + 1);
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t mlir::SymbolTable::lookupSymbolIn(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  v5 = v7;
  v6 = 0x400000000;
  if (!lookupSymbolInImpl(a1, a2, (uint64_t)&v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTable::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v4))
  {
    v2 = 0;
    if (v5 == v7)
      return v2;
    goto LABEL_3;
  }
  v2 = *((_QWORD *)v5 + v6 - 1);
  if (v5 != v7)
LABEL_3:
    free(v5);
  return v2;
}

uint64_t lookupSymbolInImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t Value;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t AttrData;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t LeafReference;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  result = a4(a5, a1, Value);
  if (result)
  {
    v11 = result;
    v12 = *(unsigned int *)(a3 + 8);
    if (v12 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
      LODWORD(v12) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
    ++*(_DWORD *)(a3 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v26);
    if (v14)
    {
      v15 = (uint64_t *)AttrData;
      v16 = v14;
      result = mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)(v11 + 48));
      if ((_DWORD)result)
      {
        if (v16 == 1)
        {
LABEL_15:
          LeafReference = mlir::SymbolRefAttr::getLeafReference((mlir::SymbolRefAttr *)&v26);
          v22 = a4(a5, v11, LeafReference);
          v23 = *(unsigned int *)(a3 + 8);
          if (v23 >= *(_DWORD *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23 + 1, 8);
            LODWORD(v23) = *(_DWORD *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v22;
          v24 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v24;
          return *(_QWORD *)(*(_QWORD *)a3 + 8 * v24 - 8) != 0;
        }
        else
        {
          v17 = 8 * v16 - 8;
          while (1)
          {
            v25 = *v15;
            v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v25);
            v19 = a4(a5, v11, v18);
            if (!v19)
              return 0;
            v11 = v19;
            if (!mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)(v19 + 48)))
              return 0;
            v20 = *(unsigned int *)(a3 + 8);
            if (v20 >= *(unsigned int *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v20 + 1, 8);
              v20 = *(unsigned int *)(a3 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v11;
            ++*(_DWORD *)(a3 + 8);
            ++v15;
            v17 -= 8;
            if (!v17)
              goto LABEL_15;
          }
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::SymbolTable::lookupNearestSymbolFrom(mlir::SymbolTable *a1, mlir::Operation *a2)
{
  mlir::SymbolTable *NearestSymbolTable;
  uint64_t v4;
  char v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  NearestSymbolTable = mlir::SymbolTable::getNearestSymbolTable(a1, a2);
  if (!NearestSymbolTable)
    return 0;
  v7 = v9;
  v8 = 0x400000000;
  if (lookupSymbolInImpl((uint64_t)NearestSymbolTable, (uint64_t)a2, (uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTable::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v6))
  {
    v4 = *((_QWORD *)v7 + v8 - 1);
    if (v7 == v9)
      return v4;
    goto LABEL_7;
  }
  v4 = 0;
  if (v7 != v9)
LABEL_7:
    free(v7);
  return v4;
}

uint64_t mlir::detail::verifySymbolTable(mlir::detail *this, mlir::Operation *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  mlir::GenericProgramPoint *v36;
  mlir::GenericProgramPoint *i;
  uint64_t v38;
  uint64_t *v39;
  uint64_t InherentAttr;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  const char *v46;
  llvm *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  char *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  __int128 v75;
  _QWORD **v76;
  _QWORD **v77;
  void *v78;
  _QWORD *v79;
  _QWORD *v80;
  void *v81;
  void *v82;
  void *v83;
  llvm *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  int64_t v93;
  int64_t v94;
  char *v95;
  _QWORD v96[2];
  uint64_t v97;
  llvm *v98;
  uint64_t v99;
  unsigned int v100;
  const void **v101[4];
  __int16 v102;
  int v103;
  const char *v104;
  uint64_t v105;
  llvm *v106;
  uint64_t v107;
  unsigned int v108;
  void *v109;
  unsigned int v110;
  unsigned int v111;
  _BYTE v112[96];
  void *v113;
  _QWORD *v114;
  void *__p;
  _QWORD **v116;
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 11);
  if ((v3 & 0x7FFFFF) != 1)
  {
    v102 = 257;
    mlir::Operation::emitOpError((uint64_t *)this, v101, (uint64_t)&v106);
    if (v106)
    {
      v103 = 3;
      v104 = "Operations with a 'SymbolTable' must have exactly one region";
      v105 = 60;
      v19 = &v103;
      v20 = (char *)v109;
      if (v110 >= v111)
      {
        v89 = v110 + 1;
        if (v109 <= &v103 && (char *)v109 + 24 * v110 > (char *)&v103)
        {
          v93 = (char *)&v103 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          v20 = (char *)v109;
          v19 = (int *)((char *)v109 + v93);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          v19 = &v103;
          v20 = (char *)v109;
        }
      }
      v21 = &v20[24 * v110];
      v22 = *(_OWORD *)v19;
      *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v21 = v22;
      ++v110;
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v106);
    if (v106)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v106);
    if (v117)
    {
      v23 = (_QWORD **)__p;
      if (__p)
      {
        v24 = v116;
        v25 = __p;
        if (v116 != __p)
        {
          do
            v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          v25 = __p;
        }
        v116 = v23;
        operator delete(v25);
      }
      v26 = v113;
      if (v113)
      {
        v27 = v114;
        v28 = v113;
        if (v114 != v113)
        {
          do
          {
            v30 = (void *)*--v27;
            v29 = v30;
            *v27 = 0;
            if (v30)
              operator delete[](v29);
          }
          while (v27 != v26);
          v28 = v113;
        }
        v114 = v26;
        operator delete(v28);
      }
      v31 = v109;
      if (v109 != v112)
        goto LABEL_99;
    }
    return v10;
  }
  v4 = (((unint64_t)this + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *((unsigned int *)this + 10);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 != v4 && *(_QWORD *)(v5 + 8) == v4)
  {
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v32 = *(_QWORD *)(v4 + 8);
    if (v32 == v4)
      goto LABEL_94;
    v33 = "sym_name";
    v34 = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
LABEL_44:
    v35 = v32 - 8;
    if (!v32)
      v35 = 0;
    v36 = (mlir::GenericProgramPoint *)(v35 + 32);
    for (i = *(mlir::GenericProgramPoint **)(v35 + 40); ; i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
    {
      if (i == v36)
      {
        v32 = *(_QWORD *)(v32 + 8);
        if (v32 == v4)
        {
LABEL_94:
          v106 = 0;
          v107 = 0;
          v108 = 0;
          v101[0] = (const void **)&v106;
          v64 = *((unsigned int *)this + 11);
          v65 = v64 & 0x7FFFFF;
          if ((v64 & 0x7FFFFF) != 0)
          {
            v66 = (((unint64_t)this + 16 * ((v64 >> 23) & 1) + ((v64 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *((unsigned int *)this + 10);
          }
          else
          {
            v66 = 0;
            v65 = 0;
          }
          walkSymbolTable(v66, v65, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<mlir::detail::verifySymbolTable(mlir::Operation *)::$_0>, (uint64_t)v101);
          v84 = v106;
          if (v108)
          {
            v85 = (uint64_t *)((char *)v106 + 8);
            v86 = 16 * v108;
            do
            {
              if ((*(v85 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                v87 = *v85;
                *v85 = 0;
                if (v87)
                  llvm::deallocate_buffer(*(llvm **)(v87 + 8), (void *)(16 * *(unsigned int *)(v87 + 24)));
              }
              v85 += 2;
              v86 -= 16;
            }
            while (v86);
            v84 = v106;
            v88 = (void *)(16 * v108);
          }
          else
          {
            v88 = 0;
          }
          llvm::deallocate_buffer(v84, v88);
        }
        goto LABEL_44;
      }
      mlir::GenericProgramPoint::~GenericProgramPoint(i);
      v39 = (uint64_t *)v38;
      if (!*(_BYTE *)(v38 + 47) || (InherentAttr = mlir::Operation::getInherentAttr(v38, (uint64_t)v33, 8), !v41))
        InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v39 + 7), v33, 8uLL);
      if (InherentAttr)
      {
        v42 = *(void **)(*(_QWORD *)InherentAttr + 136) == v34 ? InherentAttr : 0;
        v97 = v42;
        if (v42)
          break;
      }
LABEL_48:
      ;
    }
    v43 = v39[3];
    v44 = v100;
    if (!v100)
      goto LABEL_77;
    v45 = v34;
    v46 = v33;
    v47 = v98;
    v48 = (v100 - 1) & ((v42 >> 4) ^ (v42 >> 9));
    v49 = (_QWORD *)((char *)v98 + 16 * v48);
    v50 = *v49;
    if (*v49 == v42)
    {
LABEL_101:
      v102 = 257;
      mlir::Operation::emitError(v39, (uint64_t)v101, (uint64_t)&v106);
      v96[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v97);
      v96[1] = v68;
      if (v106)
        mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)&v107, "redefinition of symbol named '", (uint64_t)v96, "'");
      v69 = mlir::Diagnostic::attachNote(&v107, *((_QWORD *)v47 + 2 * v48 + 1), 1);
      v70 = v69 + 16;
      v71 = *(_QWORD *)(v69 + 16);
      v103 = 3;
      v104 = "see existing symbol definition here";
      v105 = 35;
      v72 = *(unsigned int *)(v69 + 24);
      v73 = &v103;
      if (v72 >= *(_DWORD *)(v69 + 28))
      {
        v91 = v72 + 1;
        v92 = v71 + 24 * v72 > (unint64_t)&v103;
        if (v71 <= (unint64_t)&v103 && v92)
        {
          v95 = (char *)&v103 - v71;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v70, (void *)(v69 + 32), v91, 24);
          v71 = *(_QWORD *)(v69 + 16);
          v73 = (int *)&v95[v71];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v70, (void *)(v69 + 32), v91, 24);
          v71 = *(_QWORD *)(v69 + 16);
          v73 = &v103;
        }
      }
      v74 = v71 + 24 * *(unsigned int *)(v69 + 24);
      v75 = *(_OWORD *)v73;
      *(_QWORD *)(v74 + 16) = *((_QWORD *)v73 + 2);
      *(_OWORD *)v74 = v75;
      ++*(_DWORD *)(v69 + 24);
      mlir::Diagnostic::operator mlir::LogicalResult();
      if (v106)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v106);
      if (v117)
      {
        v76 = (_QWORD **)__p;
        if (__p)
        {
          v77 = v116;
          v78 = __p;
          if (v116 != __p)
          {
            do
              v77 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v77 - 1);
            while (v77 != v76);
            v78 = __p;
          }
          v116 = v76;
          operator delete(v78);
        }
        v79 = v113;
        if (v113)
        {
          v80 = v114;
          v81 = v113;
          if (v114 != v113)
          {
            do
            {
              v83 = (void *)*--v80;
              v82 = v83;
              *v80 = 0;
              if (v83)
                operator delete[](v82);
            }
            while (v80 != v79);
            v81 = v113;
          }
          v114 = v79;
          operator delete(v81);
        }
        if (v109 != v112)
          free(v109);
      }
      llvm::deallocate_buffer(v98, (void *)(16 * v100));
    }
    v51 = 0;
    v52 = 1;
    while (v50 != -4096)
    {
      if (v51)
        v53 = 0;
      else
        v53 = v50 == -8192;
      if (v53)
        v51 = v49;
      v54 = v48 + v52++;
      v48 = v54 & (v100 - 1);
      v49 = (_QWORD *)((char *)v98 + 16 * v48);
      v50 = *v49;
      if (*v49 == v42)
        goto LABEL_101;
    }
    v56 = (char *)(v51 ? v51 : v49);
    v33 = v46;
    v34 = v45;
    if (4 * (int)v99 + 4 < 3 * v100)
    {
      if (v100 + ~(_DWORD)v99 - HIDWORD(v99) > v100 >> 3)
        goto LABEL_71;
    }
    else
    {
LABEL_77:
      v44 = 2 * v100;
    }
    llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow((uint64_t)&v98, v44);
    v42 = v97;
    v57 = v100 - 1;
    v58 = ((v97 >> 4) ^ (v97 >> 9)) & (v100 - 1);
    v56 = (char *)v98 + 16 * v58;
    v59 = *(_QWORD *)v56;
    if (v97 == *(_QWORD *)v56)
    {
LABEL_79:
      LODWORD(v99) = v99 + 1;
      if (v97 == -4096)
        goto LABEL_47;
      goto LABEL_72;
    }
    v60 = 0;
    v61 = 1;
    while (v59 != -4096)
    {
      if (v60)
        v62 = 0;
      else
        v62 = v59 == -8192;
      if (v62)
        v60 = v56;
      v63 = v58 + v61++;
      v58 = v63 & v57;
      v56 = (char *)v98 + 16 * (v63 & v57);
      v59 = *(_QWORD *)v56;
      if (v97 == *(_QWORD *)v56)
        goto LABEL_79;
    }
    if (v60)
      v56 = v60;
LABEL_71:
    v55 = *(_QWORD *)v56;
    LODWORD(v99) = v99 + 1;
    if (v55 == -4096)
    {
LABEL_47:
      *(_QWORD *)v56 = v42;
      *((_QWORD *)v56 + 1) = v43;
      goto LABEL_48;
    }
LABEL_72:
    --HIDWORD(v99);
    goto LABEL_47;
  }
  v102 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, v101, (uint64_t)&v106);
  if (v106)
  {
    v103 = 3;
    v104 = "Operations with a 'SymbolTable' must have exactly one block";
    v105 = 59;
    v6 = &v103;
    v7 = (char *)v109;
    if (v110 >= v111)
    {
      v90 = v110 + 1;
      if (v109 <= &v103 && (char *)v109 + 24 * v110 > (char *)&v103)
      {
        v94 = (char *)&v103 - (_BYTE *)v109;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
        v7 = (char *)v109;
        v6 = (int *)((char *)v109 + v94);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
        v6 = &v103;
        v7 = (char *)v109;
      }
    }
    v8 = &v7[24 * v110];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v110;
  }
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v106);
  if (v106)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v106);
  if (v117)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v116;
      v13 = __p;
      if (v116 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v116 = v11;
      operator delete(v13);
    }
    v14 = v113;
    if (v113)
    {
      v15 = v114;
      v16 = v113;
      if (v114 != v113)
      {
        do
        {
          v18 = (void *)*--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            operator delete[](v17);
        }
        while (v15 != v14);
        v16 = v113;
      }
      v114 = v14;
      operator delete(v16);
    }
    v31 = v109;
    if (v109 != v112)
LABEL_99:
      free(v31);
  }
  return v10;
}

uint64_t walkSymbolTable(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int64x2_t *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  int64x2_t v22;
  unsigned int v23;
  uint64_t v24;
  mlir::Region *v25;
  mlir::GenericProgramPoint *v26;
  mlir::GenericProgramPoint *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  const char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v50;
  mlir::GenericProgramPoint *v51;
  __int128 v52;
  mlir::GenericProgramPoint *v53;
  const char *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[2];

  v58[1] = *MEMORY[0x1E0C80C00];
  v9 = 3 * a2;
  v56 = v58;
  v57 = 0x100000000;
  v10 = (24 * a2) >> 3;
  v11 = -1431655765 * v10;
  if (0xAAAAAAAAAAAAAAABLL * v10 < 2)
  {
    v12 = 0;
    v13 = 0;
    if (!a2)
      goto LABEL_11;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, 0xAAAAAAAAAAAAAAABLL * v10, 8);
    v12 = v57;
    v13 = v57;
    if (!a2)
      goto LABEL_11;
  }
  v14 = (int64x2_t *)((char *)v56 + 8 * v12);
  v15 = 24 * a2 - 24;
  if (v15 < 0x48)
  {
    v16 = (char *)v14;
    v17 = a1;
    do
    {
LABEL_10:
      *(_QWORD *)v16 = v17;
      v16 += 8;
      v17 += 24;
    }
    while (v17 != a1 + 8 * v9);
    goto LABEL_11;
  }
  v18 = v15 / 0x18 + 1;
  v16 = &v14->i8[8 * (v18 & 0x1FFFFFFFFFFFFFFCLL)];
  v17 = a1 + 24 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
  v19 = v14 + 1;
  v20 = v18 & 0x1FFFFFFFFFFFFFFCLL;
  v21 = a1;
  do
  {
    v22 = vdupq_n_s64(v21);
    v19[-1] = vaddq_s64(v22, (int64x2_t)xmmword_181236BD0);
    *v19 = vaddq_s64(v22, (int64x2_t)xmmword_18123EC50);
    v21 += 96;
    v19 += 2;
    v20 -= 4;
  }
  while (v20);
  if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
    goto LABEL_10;
LABEL_11:
  v23 = v13 + v11;
  LODWORD(v57) = v23;
  if (v23)
  {
    v24 = 1;
    do
    {
LABEL_13:
      v25 = (mlir::Region *)*((_QWORD *)v56 + v23 - 1);
      LODWORD(v57) = v23 - 1;
      mlir::Region::OpIterator::OpIterator(&v52, v25, 0);
      mlir::Region::OpIterator::OpIterator(&v50, v25, 1);
      v26 = v53;
      v27 = v51;
      if (v53 != v51)
      {
        while (1)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v26);
          v29 = v28;
          v30 = a3(a4, v28);
          v31 = v30;
          v32 = v30 & 0xFF00000000;
          if ((v30 & 0xFF00000000) == 0 || v30 != 1)
            break;
          if ((v34 & 1) == 0
          {
            v54 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SymbolTable<Empty>]";
            v55 = 83;
            v41 = llvm::StringRef::find((uint64_t *)&v54, "DesiredTypeName = ", 0x12uLL, 0);
            if (v55 >= v41)
              v42 = v41;
            else
              v42 = v55;
            v43 = &v54[v42];
            v44 = v55 - v42;
            v45 = 18;
            if (v44 < 0x12)
              v45 = v44;
            v46 = v44 - v45;
            if (v46 >= v46 - 1)
              v47 = v46 - 1;
            else
              v47 = v46;
            mlir::detail::TypeIDResolver<mlir::OpTrait::SymbolTable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SymbolTable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
          }
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v29 + 48) + 32))(*(_QWORD *)(v29 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::SymbolTable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SymbolTable>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) == 0)
          {
            v35 = *(unsigned int *)(v29 + 44);
            v36 = v35 & 0x7FFFFF;
            if ((v35 & 0x7FFFFF) != 0)
            {
              v37 = (v29 + 16 * ((v35 >> 23) & 1) + ((v35 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
              v38 = v57;
              v39 = 24 * v36;
              v40 = v37 + 32 * *(unsigned int *)(v29 + 40);
              do
              {
                if (v38 >= HIDWORD(v57))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, v38 + 1, 8);
                  v38 = v57;
                }
                *((_QWORD *)v56 + v38) = v40;
                v38 = v57 + 1;
                LODWORD(v57) = v57 + 1;
                v40 += 24;
                v39 -= 24;
              }
              while (v39);
            }
          }
          mlir::Region::OpIterator::operator++((uint64_t *)&v52);
          v26 = v53;
          if (v53 == v27)
          {
            v4 = v31 >> 40;
            v23 = v57;
            if ((_DWORD)v57)
              goto LABEL_13;
            goto LABEL_41;
          }
        }
        v4 = v30 >> 40;
        v24 = v30;
        v48 = v56;
        if (v56 == v58)
          return v32 | (v4 << 40) | v24;
        goto LABEL_44;
      }
      v23 = v57;
    }
    while ((_DWORD)v57);
LABEL_41:
    v32 = 0x100000000;
    v48 = v56;
    if (v56 != v58)
      goto LABEL_44;
  }
  else
  {
    v32 = 0x100000000;
    v24 = 1;
    v48 = v56;
    if (v56 != v58)
LABEL_44:
      free(v48);
  }
  return v32 | (v4 << 40) | v24;
}

uint64_t mlir::detail::verifySymbol(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t InherentAttr;
  char v4;
  const void ***v5;
  char *v6;
  char *v7;
  __int128 v8;
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  BOOL v26;
  uint64_t v27;
  const void ***v28;
  char *v29;
  char *v30;
  __int128 v31;
  const void ***v32;
  char *v33;
  char *v34;
  __int128 v35;
  const void ***v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t AttrData;
  uint64_t v47;
  char *v48;
  const void ***v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  const void **v76[4];
  __int16 v77;
  const void **v78;
  const char *v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  _QWORD *v91;
  void *__p;
  _QWORD **v93;
  char v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 47)
    && (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_name", 8), v4))
  {
    if (!InherentAttr)
    {
LABEL_7:
      v77 = 257;
      mlir::Operation::emitOpError((uint64_t *)this, v76, (uint64_t)&v82);
      if (v82)
      {
        LODWORD(v78) = 3;
        v79 = "requires string attribute '";
        v80 = 27;
        v5 = &v78;
        v6 = (char *)v85;
        if (v86 >= v87)
        {
          v63 = v86 + 1;
          if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
          {
            v69 = (char *)&v78 - (_BYTE *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v63, 24);
            v6 = (char *)v85;
            v5 = (const void ***)((char *)v85 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v63, 24);
            v5 = &v78;
            v6 = (char *)v85;
          }
        }
        v7 = &v6[24 * v86];
        v8 = *(_OWORD *)v5;
        *((_QWORD *)v7 + 2) = v5[2];
        *(_OWORD *)v7 = v8;
        ++v86;
        if (v82)
        {
          v81 = 261;
          v78 = (const void **)"sym_name";
          v79 = (const char *)8;
          mlir::Diagnostic::operator<<((uint64_t)&v83, &v78);
          if (v82)
          {
            LODWORD(v78) = 3;
            v79 = "'";
            v80 = 1;
            v9 = &v78;
            v10 = (char *)v85;
            if (v86 >= v87)
            {
              v64 = v86 + 1;
              if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
              {
                v70 = (char *)&v78 - (_BYTE *)v85;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v64, 24);
                v10 = (char *)v85;
                v9 = (const void ***)((char *)v85 + v70);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v64, 24);
                v9 = &v78;
                v10 = (char *)v85;
              }
            }
            v11 = &v10[24 * v86];
            v12 = *(_OWORD *)v9;
            *((_QWORD *)v11 + 2) = v9[2];
            *(_OWORD *)v11 = v12;
            ++v86;
          }
        }
      }
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      if (v94)
      {
        v14 = (_QWORD **)__p;
        if (__p)
        {
          v15 = v93;
          v16 = __p;
          if (v93 != __p)
          {
            do
              v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            v16 = __p;
          }
          v93 = v14;
          operator delete(v16);
        }
        v17 = v90;
        if (!v90)
          goto LABEL_98;
        v18 = v91;
        v19 = v90;
        if (v91 == v90)
        {
LABEL_97:
          v91 = v17;
          operator delete(v19);
LABEL_98:
          if (v85 != &v88)
            free(v85);
          return v13;
        }
        do
        {
          v21 = (void *)*--v18;
          v20 = v21;
          *v18 = 0;
          if (v21)
            operator delete[](v20);
        }
        while (v18 != v17);
LABEL_96:
        v19 = v90;
        goto LABEL_97;
      }
      return v13;
    }
  }
  else
  {
    InherentAttr = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_name", 8uLL);
    if (!InherentAttr)
      goto LABEL_7;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    goto LABEL_7;
  if (!*((_BYTE *)this + 47)
    || (v22 = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_visibility", 14), !v23))
  {
    v22 = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_visibility", 0xEuLL);
  }
  v24 = v22;
  if (!v22)
    return 1;
  v25 = *(void **)(*(_QWORD *)v22 + 136);
  v26 = v25 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  if (v25 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    v27 = v22;
  else
    v27 = 0;
  v75 = v27;
  if (v26)
  {
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v75);
    v48 = (char *)&v89;
    if (v47)
    {
      if (v47 == 7)
      {
        if (*(_DWORD *)AttrData == 1986622064 && *(_DWORD *)(AttrData + 3) == 1702125942)
          v48 = (char *)&v84;
      }
      else if (v47 == 6)
      {
        if (*(_DWORD *)AttrData == 1818391920 && *(_WORD *)(AttrData + 4) == 25449)
        {
          v48 = (char *)&v82;
        }
        else if (*(_DWORD *)AttrData == 1953719662 && *(_WORD *)(AttrData + 4) == 25701)
        {
          v48 = (char *)&v86;
        }
      }
    }
    if (v48 - (char *)&v82 == 48)
    {
      v81 = 257;
      mlir::Operation::emitOpError((uint64_t *)this, &v78, (uint64_t)&v82);
      if (v82)
      {
        LODWORD(v76[0]) = 3;
        v76[1] = (const void **)"visibility expected to be one of [\"public\", \"private\", \"nested\"], but got ";
        v76[2] = (const void **)74;
        v52 = v76;
        v53 = (char *)v85;
        if (v86 >= v87)
        {
          v67 = v86 + 1;
          if (v85 <= v76 && (char *)v85 + 24 * v86 > (char *)v76)
          {
            v73 = (char *)v76 - (_BYTE *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v67, 24);
            v53 = (char *)v85;
            v52 = (const void ***)((char *)v85 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v67, 24);
            v52 = v76;
            v53 = (char *)v85;
          }
        }
        v54 = &v53[24 * v86];
        v55 = *(_OWORD *)v52;
        *((_QWORD *)v54 + 2) = v52[2];
        *(_OWORD *)v54 = v55;
        ++v86;
        if (v82)
          mlir::Diagnostic::operator<<((uint64_t)&v83, v75);
      }
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      if (v94)
      {
        v56 = (_QWORD **)__p;
        if (__p)
        {
          v57 = v93;
          v58 = __p;
          if (v93 != __p)
          {
            do
              v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
            while (v57 != v56);
            v58 = __p;
          }
          v93 = v56;
          operator delete(v58);
        }
        v17 = v90;
        if (!v90)
          goto LABEL_98;
        v59 = v91;
        v19 = v90;
        if (v91 == v90)
          goto LABEL_97;
        do
        {
          v61 = (void *)*--v59;
          v60 = v61;
          *v59 = 0;
          if (v61)
            operator delete[](v60);
        }
        while (v59 != v17);
        goto LABEL_96;
      }
      return v13;
    }
    return 1;
  }
  v77 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, v76, (uint64_t)&v82);
  if (v82)
  {
    LODWORD(v78) = 3;
    v79 = "requires visibility attribute '";
    v80 = 31;
    v28 = &v78;
    v29 = (char *)v85;
    if (v86 >= v87)
    {
      v65 = v86 + 1;
      if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
      {
        v71 = (char *)&v78 - (_BYTE *)v85;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v65, 24);
        v29 = (char *)v85;
        v28 = (const void ***)((char *)v85 + v71);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v65, 24);
        v28 = &v78;
        v29 = (char *)v85;
      }
    }
    v30 = &v29[24 * v86];
    v31 = *(_OWORD *)v28;
    *((_QWORD *)v30 + 2) = v28[2];
    *(_OWORD *)v30 = v31;
    ++v86;
    if (v82)
    {
      v81 = 261;
      v78 = (const void **)"sym_visibility";
      v79 = (const char *)14;
      mlir::Diagnostic::operator<<((uint64_t)&v83, &v78);
      if (v82)
      {
        LODWORD(v78) = 3;
        v79 = "' to be a string attribute, but got ";
        v80 = 36;
        v32 = &v78;
        v33 = (char *)v85;
        if (v86 >= v87)
        {
          v66 = v86 + 1;
          if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
          {
            v72 = (char *)&v78 - (_BYTE *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v66, 24);
            v33 = (char *)v85;
            v32 = (const void ***)((char *)v85 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v66, 24);
            v32 = &v78;
            v33 = (char *)v85;
          }
        }
        v34 = &v33[24 * v86];
        v35 = *(_OWORD *)v32;
        *((_QWORD *)v34 + 2) = v32[2];
        *(_OWORD *)v34 = v35;
        ++v86;
        if (v82)
        {
          v36 = &v78;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v78, v24);
          v37 = (char *)v85;
          if (v86 >= v87)
          {
            v68 = v86 + 1;
            if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
            {
              v74 = (char *)&v78 - (_BYTE *)v85;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v68, 24);
              v37 = (char *)v85;
              v36 = (const void ***)((char *)v85 + v74);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v68, 24);
              v36 = &v78;
              v37 = (char *)v85;
            }
          }
          v38 = &v37[24 * v86];
          v39 = *(_OWORD *)v36;
          *((_QWORD *)v38 + 2) = v36[2];
          *(_OWORD *)v38 = v39;
          ++v86;
        }
      }
    }
  }
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
  if (v82)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
  if (v94)
  {
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v93;
      v42 = __p;
      if (v93 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v93 = v40;
      operator delete(v42);
    }
    v17 = v90;
    if (!v90)
      goto LABEL_98;
    v43 = v91;
    v19 = v90;
    if (v91 == v90)
      goto LABEL_97;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v17);
    goto LABEL_96;
  }
  return v13;
}

void mlir::SymbolTable::getSymbolUses(mlir::SymbolTable *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void **v5;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  v5 = __p;
  if ((walkSymbolUses((uint64_t)this, (uint64_t)llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<mlir::Operation *>(mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>, (uint64_t)&v5) & 0xFF00000000) != 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    v4 = __p[0];
    *(_BYTE *)(a2 + 24) = 0;
    if (v4)
    {
      __p[1] = v4;
      operator delete(v4);
    }
  }
}

{
  void *v4;
  void **v5;
  void *__p[2];
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  __p[0] = 0;
  __p[1] = 0;
  v5 = __p;
  v9[0] = llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<llvm::MutableArrayRef<mlir::Region>>(llvm::MutableArrayRef<mlir::Region>)::{lambda(mlir::SymbolTable::SymbolUse)#1}>;
  v9[1] = &v5;
  v7 = 0;
  v8 = v9;
  if ((walkSymbolTable((unint64_t)this, 1, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<walkSymbolUses(llvm::MutableArrayRef<mlir::Region>,llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>)::$_0>, (uint64_t)&v8) & 0xFF00000000) != 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    v4 = __p[0];
    *(_BYTE *)(a2 + 24) = 0;
    if (v4)
    {
      __p[1] = v4;
      operator delete(v4);
    }
  }
}

void mlir::SymbolTable::getSymbolUses(mlir::SymbolTable *this@<X0>, mlir::Operation *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  _QWORD v13[2];
  _QWORD *v14;
  _QWORD v15[2];
  void *v16;
  unsigned int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  collectSymbolScopes((mlir::Operation *)&v16, this, (unint64_t)a2);
  v5 = (char *)v16;
  if (v17)
  {
    v6 = 16 * v17;
    v7 = (uint64_t *)((char *)v16 + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 2;
      v13[0] = v5;
      v13[1] = __p;
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0 && v9)
      {
        v15[1] = v13;
        v14 = v15;
        if ((walkSymbolTable(v9, 1, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<walkSymbolUses(llvm::MutableArrayRef<mlir::Region>,llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>)::$_0>, (uint64_t)&v14) & 0xFF00000000) == 0)goto LABEL_13;
      }
      {
LABEL_13:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
        if (v16 != v18)
          free(v16);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        return;
      }
      v5 += 16;
      v6 -= 16;
      if (!v6)
      {
        v5 = (char *)v16;
        break;
      }
    }
  }
  if (v5 != (char *)v18)
    free(v5);
  v10 = v12;
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 24) = 1;
}

BOOL mlir::SymbolTable::symbolKnownUseEmpty(mlir::SymbolTable *this, mlir::Operation *a2, mlir::Operation *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  _BOOL8 v7;
  uint64_t v9;
  unint64_t v10;
  char *v12;
  _QWORD *v13;
  _QWORD v14[2];
  void *v15;
  unsigned int v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  collectSymbolScopes((mlir::Operation *)&v15, this, (unint64_t)a2);
  v3 = (char *)v15;
  if (!v16)
  {
    v7 = 1;
    if (v15 == v17)
      return v7;
    goto LABEL_18;
  }
  v4 = (char *)v15 + 16 * v16;
  do
  {
    v12 = v3;
    v9 = *((_QWORD *)v3 + 1);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0 && v10)
    {
      v14[0] = llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<BOOL symbolKnownUseEmptyImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>;
      v14[1] = &v12;
      v13 = v14;
      v5 = walkSymbolTable(v10, 1, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<walkSymbolUses(llvm::MutableArrayRef<mlir::Region>,llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>)::$_0>, (uint64_t)&v13);
    }
    else
    {
      v5 = walkSymbolUses(v10, (uint64_t)llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<BOOL symbolKnownUseEmptyImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>, (uint64_t)&v12);
    }
    v7 = (v5 & 0xFF00000000) != 0 && (_DWORD)v5 == 1;
    v3 += 16;
  }
  while (v7 && v3 != v4);
  v3 = (char *)v15;
  if (v15 != v17)
LABEL_18:
    free(v3);
  return v7;
}

uint64_t mlir::SymbolTableCollection::getSymbolTable(mlir::SymbolTableCollection *this, mlir::Operation *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t *v5;
  mlir::Operation *v6;
  uint64_t *v8;
  mlir::SymbolTable *v9;
  mlir::SymbolTable *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  mlir::Operation *v16;

  v16 = a2;
  v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    v3 = v2 - 1;
    v4 = v3 & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(*(_QWORD *)this + 16 * v4);
    v6 = (mlir::Operation *)*v5;
    if ((mlir::Operation *)*v5 == a2)
      return v5[1];
    v12 = 0;
    v13 = 1;
    while (v6 != (mlir::Operation *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v6 == (mlir::Operation *)-8192;
      if (v14)
        v12 = v5;
      v15 = v4 + v13++;
      v4 = v15 & v3;
      v5 = (uint64_t *)(*(_QWORD *)this + 16 * v4);
      v6 = (mlir::Operation *)*v5;
      if ((mlir::Operation *)*v5 == a2)
        return v5[1];
    }
    if (v12)
      v8 = v12;
    else
      v8 = v5;
  }
  else
  {
    v8 = 0;
  }
  v5 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>,mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>::InsertIntoBucket<mlir::Operation * const&,decltype(nullptr)>((uint64_t)this, v8, (uint64_t *)&v16);
  v9 = (mlir::SymbolTable *)operator new(0x28uLL);
  v10 = mlir::SymbolTable::SymbolTable(v9, v16);
  v11 = v5[1];
  v5[1] = (uint64_t)v10;
  if (v11)
    llvm::deallocate_buffer(*(llvm **)(v11 + 8), (void *)(16 * *(unsigned int *)(v11 + 24)));
  return v5[1];
}

uint64_t mlir::SymbolTableCollection::lookupSymbolIn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v8;
  v7 = 0x400000000;
  if (!lookupSymbolInImpl(a2, a3, (uint64_t)&v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTableCollection::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v5))
  {
    v3 = 0;
    if (v6 == v8)
      return v3;
    goto LABEL_3;
  }
  v3 = *((_QWORD *)v6 + v7 - 1);
  if (v6 != v8)
LABEL_3:
    free(v6);
  return v3;
}

uint64_t mlir::SymbolTableCollection::lookupSymbolIn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a1;
  return lookupSymbolInImpl(a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTableCollection::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v5);
}

uint64_t mlir::SymbolTableCollection::lookupNearestSymbolFrom(uint64_t a1, mlir::SymbolTable *a2, uint64_t a3)
{
  mlir::SymbolTable *NearestSymbolTable;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  NearestSymbolTable = mlir::SymbolTable::getNearestSymbolTable(a2, a2);
  if (!NearestSymbolTable)
    return 0;
  v8 = a1;
  v9 = v11;
  v10 = 0x400000000;
  if (lookupSymbolInImpl((uint64_t)NearestSymbolTable, a3, (uint64_t)&v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTableCollection::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v8))
  {
    v6 = *((_QWORD *)v9 + v10 - 1);
    if (v9 == v11)
      return v6;
    goto LABEL_7;
  }
  v6 = 0;
  if (v9 != v11)
LABEL_7:
    free(v9);
  return v6;
}

uint64_t mlir::impl::parseOptionalVisibilityKeyword(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr **v4;
  uint64_t StringAttr;
  mlir::StringAttr **v6;
  uint64_t NamedAttr;
  uint64_t v8;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = 0uLL;
  v11[0] = xmmword_1E0E54128;
  v11[1] = *(_OWORD *)&off_1E0E54138;
  v12 = xmmword_1E0E54148;
  if (!(*(unsigned __int8 (**)(uint64_t, __int128 *, _OWORD *, uint64_t))(*(_QWORD *)a1 + 392))(a1, &v10, v11, 3))return 0;
  v4 = (mlir::StringAttr **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  LOWORD(v12) = 261;
  v11[0] = v10;
  StringAttr = mlir::Builder::getStringAttr(v4, (mlir::MLIRContext *)v11);
  v6 = (mlir::StringAttr **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  NamedAttr = mlir::Builder::getNamedAttr(v6, (uint64_t)"sym_visibility", 14, StringAttr);
  mlir::NamedAttrList::push_back(a2, NamedAttr, v8);
  return 1;
}

uint64_t mlir::SymbolOpInterface::isPublic(mlir::SymbolOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 40))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::SymbolOpInterface::canDiscardOnUseEmpty(mlir::SymbolOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 112))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTable::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return mlir::SymbolTable::lookupSymbolIn(a2, a3);
}

uint64_t llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<mlir::detail::verifySymbolTable(mlir::Operation *)::$_0>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 (**InterfaceFor)(_QWORD, uint64_t, _QWORD);

  if (!mlir::OpInterface<mlir::SymbolUserOpInterface,mlir::detail::SymbolUserOpInterfaceInterfaceTraits>::getInterfaceFor(a2)
    || !a2)
  {
    return 0x100000001;
  }
  InterfaceFor = (unsigned __int8 (**)(_QWORD, uint64_t, _QWORD))mlir::OpInterface<mlir::SymbolUserOpInterface,mlir::detail::SymbolUserOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  return ((*InterfaceFor)(InterfaceFor, a2, *a1) != 0) | 0x100000000;
}

uint64_t mlir::OpInterface<mlir::SymbolUserOpInterface,mlir::detail::SymbolUserOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
          v31 = 77;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::SymbolUserOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
          v31 = 77;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::SymbolUserOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      v23 = 77;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[155];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t walkSymbolUses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  if ((*(_DWORD *)(a1 + 44) & 0x7FFFFF) != 1)
    goto LABEL_4;
  v6 = *(_QWORD *)(a1 + 48);
  if (*(_UNKNOWN **)(v6 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v8 = *(_QWORD *)(v6 + 8);
    if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v8))
      return 0;
LABEL_4:
    walkSymbolRefs((mlir::Operation *)a1, a2, a3);
  }
  if (*(_QWORD *)(v6 + 24))
    goto LABEL_4;
  return 0;
}

void walkSymbolRefs(mlir::Operation *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *AttrDictionary;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  mlir::Operation *v7;
  _QWORD v8[2];
  void *v9[2];
  void *__p[2];
  __int128 v11;
  llvm *v12[2];
  unsigned int v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8[0] = a2;
  v8[1] = a3;
  v7 = a1;
  AttrDictionary = (uint64_t *)mlir::Operation::getAttrDictionary(a1);
  v13 = 0;
  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)__p = 0u;
  v14[0] = off_1E0E50710;
  v14[1] = v8;
  v14[2] = &v7;
  v15 = v14;
  v4 = std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<mlir::WalkResult ()(mlir::Attribute)>>(v9, v14);
  v5 = v15;
  v9[1] = v4;
  if (v15 == v14)
  {
    v6 = 4;
    v5 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  mlir::AttrTypeWalker::walkImpl(v9, AttrDictionary, 0);
  llvm::deallocate_buffer(v12[0], (void *)(24 * v13));
}

__n128 _ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1E0E50710;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E0E50710;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EEclEOSG_(uint64_t a1, uint64_t a2)
{
  if (*(_UNKNOWN **)(**(_QWORD **)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
    return 2
         * ((**(unsigned int (***)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), **(_QWORD **)(a1 + 16)) != 0);
  else
    return 1;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFNS_10WalkRes"
                     "ultENS_11SymbolTable9SymbolUseEEEEE3$_0NS_13SymbolRefAttrENS_9AttributeES6_EENSt3__19enable_ifIXoon"
                     "tsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFN"
                                "S_10WalkResultENS_11SymbolTable9SymbolUseEEEEE3$_0NS_13SymbolRefAttrENS_9AttributeES6_EE"
                                "NSt3__19enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFNS_10WalkResultENS_11SymbolTable9SymbolUseEEEEE3$_0NS_13SymbolRefAttrENS_9AttributeES6_EENSt3__19enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFNS_10WalkResultENS_11SymbolTable9SymbolUseEEEEE3$_0NS_13SymbolRefAttrENS_9AttributeES6_EENSt3__19enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EE11target_typeEv()
{
  return &_ZTIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFNS_10WalkResultENS_11SymbolTable9SymbolUseEEEEE3__0NS_13SymbolRefAttrENS_9AttributeES6_EENSt3__19enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_;
}

uint64_t llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<walkSymbolUses(llvm::MutableArrayRef<mlir::Region>,llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>)::$_0>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if ((*(_DWORD *)(a2 + 44) & 0x7FFFFF) != 1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 48);
  if (*(_UNKNOWN **)(v4 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v6 = *(_QWORD *)(v4 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v6);
    if (!result)
      return result;
LABEL_4:
    walkSymbolRefs((mlir::Operation *)a2, **a1, (*a1)[1]);
  }
  result = *(_QWORD *)(v4 + 24);
  if (result)
    goto LABEL_4;
  return result;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<mlir::Operation *>(mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>(char ***a1, uint64_t a2, uint64_t a3)
{
  char **v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  v5 = *a1;
  v7 = (*a1)[1];
  v6 = (unint64_t)(*a1)[2];
  if ((unint64_t)v7 < v6)
  {
    *(_QWORD *)v7 = a2;
    *((_QWORD *)v7 + 1) = a3;
    v8 = (uint64_t)(v7 + 16);
    goto LABEL_18;
  }
  v9 = *v5;
  v10 = (v7 - *v5) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    abort();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = (char *)operator new(16 * v13);
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    v8 = (uint64_t)(v15 + 16);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (char *)(16 * v10);
  v16 = 0;
  *(_QWORD *)v15 = a2;
  *((_QWORD *)v15 + 1) = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 16;
      v7 -= 16;
    }
    while (v7 != v9);
    v7 = *v5;
  }
LABEL_16:
  *v5 = v15;
  v5[1] = (char *)v8;
  v5[2] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[1] = (char *)v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<llvm::MutableArrayRef<mlir::Region>>(llvm::MutableArrayRef<mlir::Region>)::{lambda(mlir::SymbolTable::SymbolUse)#1}>(char ***a1, uint64_t a2, uint64_t a3)
{
  char **v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  v5 = *a1;
  v7 = (*a1)[1];
  v6 = (unint64_t)(*a1)[2];
  if ((unint64_t)v7 < v6)
  {
    *(_QWORD *)v7 = a2;
    *((_QWORD *)v7 + 1) = a3;
    v8 = (uint64_t)(v7 + 16);
    goto LABEL_18;
  }
  v9 = *v5;
  v10 = (v7 - *v5) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    abort();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = (char *)operator new(16 * v13);
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    v8 = (uint64_t)(v15 + 16);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (char *)(16 * v10);
  v16 = 0;
  *(_QWORD *)v15 = a2;
  *((_QWORD *)v15 + 1) = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 16;
      v7 -= 16;
    }
    while (v7 != v9);
    v7 = *v5;
  }
LABEL_16:
  *v5 = v15;
  v5[1] = (char *)v8;
  v5[2] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[1] = (char *)v8;
  return 1;
}

uint64_t isReferencePrefixOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Value;
  _BOOL8 v5;
  uint64_t *AttrData;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = a2;
  v18 = a1;
  if (a2 == a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
    v2 = a2;
  else
    v2 = 0;
  v19 = v2;
  if (!v2 || (mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v19), v3))
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v17);
    if (Value != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18))
      return 0;
    AttrData = (uint64_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v17);
    v9 = v8;
    v10 = (uint64_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v18);
    if (v11 < v9)
    {
      if (v11)
      {
        v12 = 8 * v11 - 8;
        do
        {
          v14 = *AttrData++;
          v13 = v14;
          v15 = *v10++;
          v16 = v15 == v13;
          v5 = v15 == v13;
          v16 = !v16 || v12 == 0;
          v12 -= 8;
        }
        while (!v16);
        return v5;
      }
      return 1;
    }
  }
  return 0;
}

void collectSymbolScopes(mlir::Operation *a1, mlir::Operation *a2, unint64_t a3)
{
  uint64_t InherentAttr;
  mlir::Operation *v7;
  uint64_t v8;
  mlir::Operation *ParentOp;
  mlir::Block *v10;
  mlir::Block *v11;
  _QWORD *v12;
  mlir::Block *v13;
  mlir::SymbolTable *NearestSymbolTable;
  mlir::Block *v15;
  void *v16;
  const void **BucketFor;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  mlir::Block *v22;
  mlir::StringAttr *Context;
  uint64_t v24;
  unsigned int v25;
  mlir::Block *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AttrData;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  mlir::Block *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  int v45;
  char *v46;
  mlir::Block *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  mlir::Block *v57;
  _QWORD *v58;
  _QWORD v59[4];
  __int16 v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[16];
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  _BYTE v68[32];
  void *v69;
  uint64_t v70;
  _BYTE v71[32];
  char *v72;
  uint64_t v73;
  _QWORD v74[3];

  v74[1] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 47)
    && (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"sym_name", 8), (_BYTE)v7))
  {
    if (InherentAttr)
      goto LABEL_4;
  }
  else
  {
    InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "sym_name", 8uLL);
    if (InherentAttr)
    {
LABEL_4:
      if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
        v8 = InherentAttr;
      else
        v8 = 0;
      goto LABEL_9;
    }
  }
  v8 = 0;
LABEL_9:
  v64 = v68;
  v65 = v68;
  v66 = 4;
  v67 = 0;
  v69 = v71;
  v70 = 0x400000000;
  v58 = (_QWORD *)a3;
  ParentOp = (mlir::Operation *)a3;
  while (ParentOp != a2)
  {
    llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert((llvm::SmallPtrSetImplBase *)&v64, (const void **)&v58);
    v10 = (mlir::Block *)v58[2];
    if (!v10)
    {
      v58 = 0;
      v11 = (mlir::Block *)*((_QWORD *)a2 + 2);
      if (v11)
        goto LABEL_14;
      goto LABEL_23;
    }
    ParentOp = (mlir::Operation *)mlir::Block::getParentOp(v10);
    v58 = ParentOp;
    if (!ParentOp)
    {
      v11 = (mlir::Block *)*((_QWORD *)a2 + 2);
      if (v11)
      {
LABEL_14:
        v12 = (_QWORD *)mlir::Block::getParentOp(v11);
        goto LABEL_24;
      }
LABEL_23:
      v12 = 0;
      while (1)
      {
LABEL_24:
        if (v65 == v64)
        {
          v20 = &v65[8 * HIDWORD(v66)];
          if (HIDWORD(v66))
          {
            v21 = 0;
            while (*(_QWORD **)&v65[v21] != v12)
            {
              v21 += 8;
              if (8 * HIDWORD(v66) == v21)
                goto LABEL_40;
            }
            v20 = &v65[v21];
          }
LABEL_40:
          if (v20 != &v65[8 * HIDWORD(v66)])
            goto LABEL_45;
        }
        else
        {
          BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)&v64, v12);
          if (*BucketFor != v12)
          {
            v18 = v66;
            if (v65 == v64)
              v18 = HIDWORD(v66);
            BucketFor = (const void **)&v65[8 * v18];
          }
          if (v65 == v64)
            v19 = HIDWORD(v66);
          else
            v19 = v66;
          if (BucketFor != (const void **)&v65[8 * v19])
            goto LABEL_45;
        }
        v22 = (mlir::Block *)v12[2];
        if (!v22)
          break;
        v12 = (_QWORD *)mlir::Block::getParentOp(v22);
        if (!v12)
          goto LABEL_45;
      }
      v12 = 0;
LABEL_45:
      v61 = v63;
      v62 = 0x200000000;
      Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
      v24 = mlir::SymbolRefAttr::get(v8);
      v25 = v62;
      if (v62 >= HIDWORD(v62))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 8);
        v25 = v62;
      }
      *((_QWORD *)v61 + v25) = v24;
      LODWORD(v62) = v62 + 1;
      v26 = (mlir::Block *)*((_QWORD *)a2 + 2);
      if (v26)
      {
        v27 = mlir::Block::getParentOp(v26);
        if ((_QWORD *)v27 != v12)
          goto LABEL_49;
LABEL_81:
        v29 = 1;
        if (v12 == (_QWORD *)a3)
        {
LABEL_82:
          *(_QWORD *)a1 = (char *)a1 + 16;
          *((_QWORD *)a1 + 1) = 0x200000000;
          v47 = (mlir::Block *)*((_QWORD *)a2 + 2);
          if (v47)
          {
            v48 = mlir::Block::getParentOp(v47);
            v49 = v62;
            if (!(_DWORD)v62)
              goto LABEL_86;
          }
          else
          {
            v48 = 0;
            v49 = v62;
            if (!(_DWORD)v62)
              goto LABEL_86;
          }
          v50 = 0;
          v51 = 8 * v49;
          while (2)
          {
            v52 = *(unsigned int *)(v48 + 44);
            if ((v52 & 0x7FFFFF) != 0)
            {
              v53 = ((v48 + 16 * ((v52 >> 23) & 1) + ((v52 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v48 + 40);
              v54 = *(_QWORD *)((char *)v61 + v50);
              v55 = *((unsigned int *)a1 + 2);
              if (v55 < *((unsigned int *)a1 + 3))
                goto LABEL_100;
LABEL_104:
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (char *)a1 + 16, v55 + 1, 16);
              v55 = *((unsigned int *)a1 + 2);
            }
            else
            {
              v53 = 0;
              v54 = *(_QWORD *)((char *)v61 + v50);
              v55 = *((unsigned int *)a1 + 2);
              if (v55 >= *((unsigned int *)a1 + 3))
                goto LABEL_104;
            }
LABEL_100:
            v56 = (_QWORD *)(*(_QWORD *)a1 + 16 * v55);
            *v56 = v54;
            v56[1] = v53 | 4;
            ++*((_DWORD *)a1 + 2);
            v57 = *(mlir::Block **)(v48 + 16);
            if (v57)
            {
              v48 = mlir::Block::getParentOp(v57);
              v50 += 8;
              if (v51 == v50)
                goto LABEL_86;
            }
            else
            {
              v48 = 0;
              v50 += 8;
              if (v51 == v50)
                goto LABEL_86;
            }
            continue;
          }
        }
LABEL_78:
        if (v29)
        {
          *((_QWORD *)a1 + 2) = *((_QWORD *)v61 + v62 - 1);
          *(_QWORD *)a1 = (char *)a1 + 16;
          *((_QWORD *)a1 + 3) = a3 & 0xFFFFFFFFFFFFFFFBLL;
          *((_QWORD *)a1 + 1) = 0x200000001;
        }
        else
        {
          *(_QWORD *)a1 = (char *)a1 + 16;
          *((_QWORD *)a1 + 1) = 0x200000000;
        }
LABEL_86:
        if (v61 != v63)
          free(v61);
        v16 = v69;
        if (v69 != v71)
LABEL_89:
          free(v16);
        goto LABEL_90;
      }
      v27 = 0;
      if (!v12)
        goto LABEL_81;
LABEL_49:
      v72 = (char *)v74;
      v74[0] = v24;
      v73 = 0x100000001;
      v60 = 261;
      v59[0] = "sym_name";
      v59[1] = 8;
      v28 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v59);
      if (!mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)(v27 + 48)))
      {
LABEL_74:
        v29 = 0;
LABEL_75:
        if (v72 != (char *)v74)
          free(v72);
        if (v12 == (_QWORD *)a3)
          goto LABEL_82;
        goto LABEL_78;
      }
      v29 = 1;
      while (2)
      {
        v59[0] = v28;
        v30 = v28;
        if (*(_BYTE *)(v27 + 47))
        {
          AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v59);
          v33 = mlir::Operation::getInherentAttr(v27, AttrData, v32);
          if (!v34)
          {
            v30 = v59[0];
            goto LABEL_55;
          }
        }
        else
        {
LABEL_55:
          v33 = mlir::DictionaryAttr::get(v27 + 56, v30);
        }
        v35 = v33;
        if (!v33 || *(_UNKNOWN **)(*(_QWORD *)v33 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
          goto LABEL_74;
        v36 = mlir::SymbolRefAttr::get(v33, (uint64_t)v72, v73);
        v37 = v62;
        if (v62 >= (unint64_t)HIDWORD(v62))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 8);
          v37 = v62;
        }
        *((_QWORD *)v61 + v37) = v36;
        LODWORD(v62) = v62 + 1;
        v38 = *(mlir::Block **)(v27 + 16);
        if (v38)
        {
          v27 = mlir::Block::getParentOp(v38);
          if ((_QWORD *)v27 == v12)
            goto LABEL_75;
        }
        else
        {
          v27 = 0;
          if (!v12)
            goto LABEL_75;
        }
        v39 = v72;
        v40 = mlir::SymbolRefAttr::get(v35);
        v41 = v72;
        v42 = v73;
        if (&v72[8 * v73] == v39)
        {
          if (v73 >= HIDWORD(v73))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v74, v73 + 1, 8);
            v42 = v73;
            v41 = v72;
          }
          *(_QWORD *)&v41[8 * v42] = v40;
          LODWORD(v73) = v73 + 1;
          if ((mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)(v27 + 48)) & 1) == 0)
            goto LABEL_74;
        }
        else
        {
          if (v73 >= HIDWORD(v73))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v74, v73 + 1, 8);
            v43 = v72;
            v42 = v73;
          }
          else
          {
            v43 = v72;
          }
          v44 = &v43[(v39 - v41) >> 3];
          v43[v42] = v43[v42 - 1];
          v45 = v73;
          v46 = &v72[8 * v73 - 8];
          if (v46 != (char *)v44)
          {
            memmove(v44 + 1, v44, v46 - (char *)v44);
            v45 = v73;
          }
          LODWORD(v73) = v45 + 1;
          *v44 = v40;
          if ((mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((_QWORD *)(v27 + 48)) & 1) == 0)
            goto LABEL_74;
        }
        continue;
      }
    }
  }
  v13 = *(mlir::Block **)(a3 + 16);
  if (v13)
    v13 = (mlir::Block *)mlir::Block::getParentOp(v13);
  NearestSymbolTable = mlir::SymbolTable::getNearestSymbolTable(v13, v7);
  v15 = (mlir::Block *)*((_QWORD *)a2 + 2);
  if (v15)
    v15 = (mlir::Block *)mlir::Block::getParentOp(v15);
  if (NearestSymbolTable == v15)
  {
    *((_QWORD *)a1 + 2) = mlir::SymbolRefAttr::get(v8);
    *(_QWORD *)a1 = (char *)a1 + 16;
    *((_QWORD *)a1 + 3) = a3 & 0xFFFFFFFFFFFFFFFBLL;
    *((_QWORD *)a1 + 1) = 0x200000001;
    v16 = v69;
    if (v69 != v71)
      goto LABEL_89;
  }
  else
  {
    *(_QWORD *)a1 = (char *)a1 + 16;
    *((_QWORD *)a1 + 1) = 0x200000000;
    v16 = v69;
    if (v69 != v71)
      goto LABEL_89;
  }
LABEL_90:
  if (v65 != v64)
    free(v65);
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::WalkResult> `anonymous namespace'::SymbolScope::walk<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1},(void *)0>(mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char **v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  if (isReferencePrefixOf(**(_QWORD **)a1, a3))
  {
    v6 = *(char ***)(a1 + 8);
    v8 = v6[1];
    v7 = (unint64_t)v6[2];
    if ((unint64_t)v8 < v7)
    {
      *(_QWORD *)v8 = a2;
      *((_QWORD *)v8 + 1) = a3;
      v9 = (uint64_t)(v8 + 16);
LABEL_19:
      v6[1] = (char *)v9;
      return 1;
    }
    v10 = *v6;
    v11 = (v8 - *v6) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (char *)operator new(16 * v14);
      v16 = &v15[16 * v11];
      v17 = &v15[16 * v14];
      *(_QWORD *)v16 = a2;
      *((_QWORD *)v16 + 1) = a3;
      v9 = (uint64_t)(v16 + 16);
      if (v8 == v10)
        goto LABEL_17;
    }
    else
    {
      v16 = (char *)(16 * v11);
      v17 = 0;
      *(_QWORD *)v16 = a2;
      *((_QWORD *)v16 + 1) = a3;
      v9 = 16 * v11 + 16;
      if (v8 == v10)
      {
LABEL_17:
        *v6 = v16;
        v6[1] = (char *)v9;
        v6[2] = v17;
        if (v8)
          operator delete(v8);
        goto LABEL_19;
      }
    }
    do
    {
      *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
      v16 -= 16;
      v8 -= 16;
    }
    while (v8 != v10);
    v8 = *v6;
    goto LABEL_17;
  }
  return 1;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<BOOL symbolKnownUseEmptyImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return isReferencePrefixOf(**a1, a3) ^ 1;
}

uint64_t generateNewRefAttr(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  const void *AttrData;
  unint64_t v7;
  size_t v8;
  int v9;
  _QWORD *v10;
  uint64_t Value;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v13 = a1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
    v3 = a1;
  else
    v3 = 0;
  v14 = v3;
  if (v3)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v14);
    if (!v4)
      return a2;
  }
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v13);
  v7 = v5;
  v14 = v16;
  v15 = 0x200000000;
  v8 = 8 * v5;
  if (8 * v5 < 0x11)
  {
    v9 = 0;
    v10 = v16;
    if (!v5)
      goto LABEL_11;
    goto LABEL_10;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v5, 8);
  v9 = v15;
  v10 = v14;
  if (v7)
  {
LABEL_10:
    memcpy(&v10[v9], AttrData, v8);
    v9 = v15;
    v10 = v14;
  }
LABEL_11:
  LODWORD(v15) = v9 + v7;
  v10[(v9 + v7) - 1] = a2;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
  a2 = mlir::SymbolRefAttr::get(Value, (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return a2;
}

__n128 _ZNKSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1E0E50AB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EE7__cloneEPNS0_6__baseISW_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E0E50AB0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EEclEOSF_(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const void *AttrData;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t Value;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*(_UNKNOWN **)(*(_QWORD *)*a2 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
  {
    v16 = *a2;
    v7 = *a1[1];
    if (v7 == v4)
    {
      v4 = *a1[2];
    }
    else if (isReferencePrefixOf(v7, v4))
    {
      mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)a1[1]);
      v9 = v8;
      AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v16);
      v12 = v10;
      if (v9)
      {
        v17 = v19;
        v18 = 0x400000000;
        if (8 * v10 < 0x21)
        {
          v13 = 0;
          v14 = v19;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v10, 8);
          v13 = v18;
          v14 = v17;
        }
        if (v12)
        {
          memcpy(&v14[v13], AttrData, 8 * v12);
          v13 = v18;
          v14 = v17;
        }
        LODWORD(v18) = v13 + v12;
        v14[v9 - 1] = *a1[4];
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v16);
        v4 = mlir::SymbolRefAttr::get(Value, (uint64_t)v17, v18);
        if (v17 != v19)
          free(v17);
      }
      else
      {
        v4 = mlir::SymbolRefAttr::get(*a1[3], (uint64_t)AttrData, v10);
      }
    }
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 2;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3_ENS_13Logi"
                     "calResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3__14pairISC_NS_10WalkR"
                     "esultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16is_convertible_vIT2_NSD_8optional"
                     "INSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3"
                                "_ENS_13LogicalResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3"
                                "__14pairISC_NS_10WalkResultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16"
                                "is_convertible_vIT2_NSD_8optionalINSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3_ENS_13LogicalResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3__14pairISC_NS_10WalkResultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16is_convertible_vIT2_NSD_8optionalINSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3_ENS_13LogicalResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3__14pairISC_NS_10WalkResultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16is_convertible_vIT2_NSD_8optionalINSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EE11target_typeEv()
{
  return &_ZTIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3_ENS_13LogicalResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3__14pairISC_NS_10WalkResultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16is_convertible_vIT2_NSD_8optionalINSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_;
}

uint64_t llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult replaceAllSymbolUsesImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::StringAttr,mlir::Operation *)::{lambda(mlir::Operation *)#1}>(mlir::AttrTypeReplacer **a1, mlir::Operation *a2)
{
  mlir::AttrTypeReplacer::replaceElementsIn(*a1, a2, 1, 0, 0);
  return 0x100000001;
}

uint64_t llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTableCollection::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>(mlir::SymbolTableCollection **a1, mlir::Operation *a2, uint64_t a3)
{
  uint64_t SymbolTable;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;

  SymbolTable = mlir::SymbolTableCollection::getSymbolTable(*a1, a2);
  v5 = *(_DWORD *)(SymbolTable + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(SymbolTable + 8);
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v9 = *(_QWORD *)(v6 + 16 * v8);
    if (v9 == a3)
      return *(_QWORD *)(v6 + 16 * v8 + 8);
    v11 = 1;
    while (v9 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & v7;
      v9 = *(_QWORD *)(v6 + 16 * v8);
      if (v9 == a3)
        return *(_QWORD *)(v6 + 16 * v8 + 8);
    }
  }
  return 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>,mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>::InsertIntoBucket<mlir::Operation * const&,decltype(nullptr)>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>,mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = buffer;
  if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v19 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v18 = &buffer[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
  v20 = buffer + 2;
  v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 2) = -4096;
    *v20 = -4096;
    v20 += 4;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 2;
    }
    while (v18 != &buffer[2 * v17]);
  }
  v7 = *a3;
  v22 = v17 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[2 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[2 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>,mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v3 = a2;
  *(_QWORD *)(result + 8) = 0;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)result;
    v6 = (v4 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = v6 + 1;
      v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v9 = &v5[2 * v8];
      v10 = v5 + 2;
      v11 = v8;
      do
      {
        *(v10 - 2) = -4096;
        *v10 = -4096;
        v10 += 4;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8)
        goto LABEL_10;
    }
    else
    {
      v9 = *(_QWORD **)result;
    }
    v12 = &v5[2 * v4];
    do
    {
      *v9 = -4096;
      v9 += 2;
    }
    while (v9 != v12);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v13 = *v3;
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = *(_DWORD *)(result + 16) - 1;
        v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
        v16 = (_QWORD *)(*(_QWORD *)result + 16 * v15);
        v17 = *v16;
        if (v13 != *v16)
        {
          v20 = 0;
          v21 = 1;
          while (v17 != -4096)
          {
            if (v20)
              v22 = 0;
            else
              v22 = v17 == -8192;
            if (v22)
              v20 = v16;
            v23 = v15 + v21++;
            v15 = v23 & v14;
            v16 = (_QWORD *)(*(_QWORD *)result + 16 * (v23 & v14));
            v17 = *v16;
            if (v13 == *v16)
              goto LABEL_15;
          }
          if (v20)
            v16 = v20;
        }
LABEL_15:
        *v16 = v13;
        v18 = v3[1];
        v3[1] = 0;
        v16[1] = v18;
        ++*(_DWORD *)(result + 8);
        v19 = v3[1];
        v3[1] = 0;
        if (v19)
          llvm::deallocate_buffer(*(llvm **)(v19 + 8), (void *)(16 * *(unsigned int *)(v19 + 24)));
      }
      v3 += 2;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t mlir::VerifiableTensorEncoding::verifyEncoding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, a2, a3, a4, a5, a6);
}

BOOL mlir::Type::isBF16(mlir::Type *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
}

BOOL mlir::Type::isF16(mlir::Type *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
}

BOOL mlir::Type::isF32(mlir::Type *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
}

BOOL mlir::Type::isF64(mlir::Type *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
}

BOOL mlir::Type::isIndex(mlir::Type *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
}

BOOL mlir::Type::isInteger(mlir::Type *this, int a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v5;

  v2 = *(_QWORD *)this;
  v3 = *(void **)(**(_QWORD **)this + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v2 = 0;
  v5 = v2;
  return v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getWidth((mlir::IntegerType *)&v5) == a2;
}

BOOL mlir::Type::isSignlessInteger(mlir::Type *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  v2 = *(void **)(**(_QWORD **)this + 136);
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v1 = 0;
  v4 = v1;
  return v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 0;
}

BOOL mlir::Type::isSignlessInteger(mlir::Type *this, int a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v6;

  v2 = *(_QWORD *)this;
  v3 = *(void **)(**(_QWORD **)this + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v2 = 0;
  v6 = v2;
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return 0;
  if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v6))
    return 0;
  return mlir::IntegerType::getWidth((mlir::IntegerType *)&v6) == a2;
}

BOOL mlir::Type::isSignedInteger(mlir::Type *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  v2 = *(void **)(**(_QWORD **)this + 136);
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v1 = 0;
  v4 = v1;
  return v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 1;
}

BOOL mlir::Type::isSignedInteger(mlir::Type *this, int a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v6;

  v2 = *(_QWORD *)this;
  v3 = *(void **)(**(_QWORD **)this + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v2 = 0;
  v6 = v2;
  return v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v6) == 1
      && mlir::IntegerType::getWidth((mlir::IntegerType *)&v6) == a2;
}

BOOL mlir::Type::isUnsignedInteger(mlir::Type *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  v2 = *(void **)(**(_QWORD **)this + 136);
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v1 = 0;
  v4 = v1;
  return v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 2;
}

BOOL mlir::Type::isUnsignedInteger(mlir::Type *this, int a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v6;

  v2 = *(_QWORD *)this;
  v3 = *(void **)(**(_QWORD **)this + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v2 = 0;
  v6 = v2;
  return v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v6) == 2
      && mlir::IntegerType::getWidth((mlir::IntegerType *)&v6) == a2;
}

BOOL mlir::Type::isSignlessIntOrIndex(mlir::Type *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v5;

  v1 = *(_QWORD *)this;
  v2 = *(void **)(**(_QWORD **)this + 136);
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v1 = 0;
  v5 = v1;
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return v2 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v5))
  {
    v2 = *(void **)(**(_QWORD **)this + 136);
    return v2 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  }
  return 1;
}

BOOL mlir::Type::isIntOrIndex(mlir::Type *this)
{
  void *v1;

  v1 = *(void **)(**(_QWORD **)this + 136);
  return v1 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
}

BOOL mlir::Type::isIntOrFloat(mlir::Type *this)
{
  void *v1;

  v1 = *(void **)(**(_QWORD **)this + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return 1;
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  return v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
}

BOOL mlir::Type::isIntOrIndexOrFloat(mlir::Type *this)
{
  void *v1;

  v1 = *(void **)(**(_QWORD **)this + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return 1;
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  return v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
}

uint64_t mlir::Type::getIntOrFloatBitWidth(mlir::Type *this)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *(_QWORD *)this;
  v2 = *(void **)(**(_QWORD **)this + 136);
  v3 = v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v4 = *(_QWORD *)this;
  else
    v4 = 0;
  v6 = v4;
  if (v3)
    return mlir::IntegerType::getWidth((mlir::IntegerType *)&v6);
  v6 = v1;
  return mlir::FloatType::getWidth((mlir::FloatType *)&v6);
}

unint64_t *mlir::TypeRange::TypeRange(unint64_t *result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;

  *result = 0;
  result[1] = a3;
  if (a3)
  {
    v3 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((a2 & 6) == 4 && v3)
    {
      v3 |= 6uLL;
    }
    else
    {
      if (v3)
        v4 = (a2 & 6) == 2;
      else
        v4 = 0;
      if (v4)
        v3 |= 4uLL;
    }
    *result = v3;
  }
  return result;
}

unint64_t mlir::TypeRange::dereference_iterator(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;

  v2 = a1;
  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = v2 & 6;
  if (!v4 && v3)
    return *(_QWORD *)(*(_QWORD *)(v3 + 8 * a2) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v4 == 4 && v3)
    return *(_QWORD *)(*(_QWORD *)(v3 + 32 * a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v4 == 6 && v3)
    return *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v3, a2) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v4 == 2)
    v6 = v3;
  else
    v6 = 0;
  return *(_QWORD *)(v6 + 8 * a2);
}

uint64_t mlir::getElementTypeOrSelf(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v1 = a1;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8))
  {
    v2 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
    v4 = v1;
    v5 = v2;
    if (v1)
      return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v4);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return (uint64_t)v1;
}

{
  _QWORD *canMapOperands;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  canMapOperands = a1;
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a1 + 8))
  {
    canMapOperands = 0;
    v5 = 0;
    v6 = 0;
    return (uint64_t)canMapOperands;
  }
  v2 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*canMapOperands + 8);
  v5 = canMapOperands;
  v6 = v2;
  if (!canMapOperands)
    return (uint64_t)canMapOperands;
  canMapOperands = (_QWORD *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v5);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*canMapOperands + 8))
  {
    v7 = 0;
    v8 = 0;
    return (uint64_t)canMapOperands;
  }
  v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*canMapOperands + 8);
  v7 = canMapOperands;
  v8 = v4;
  if (!canMapOperands)
    return (uint64_t)canMapOperands;
  return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v7);
}

uint64_t mlir::getElementTypeOrSelf(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v1 = (_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8))
  {
    v2 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
    v4 = v1;
    v5 = v2;
    if (v1)
      return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v4);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return (uint64_t)v1;
}

uint64_t mlir::verifyCompatibleShape(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;

  if (a2 != a4)
    return 0;
  if (a2)
  {
    for (i = 8 * a2 - 8; ; i -= 8)
    {
      v5 = i;
      if (*a1 != 0x8000000000000000 && *a3 != 0x8000000000000000 && *a1 != *a3)
        break;
      ++a1;
      ++a3;
      if (!v5)
        return 1;
    }
    return 0;
  }
  return 1;
}

BOOL mlir::verifyCompatibleShape(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *ArgAttrsAttr;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = a1;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8))
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v19 = v3;
    v20 = v4;
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v3 = 0;
    v19 = 0;
    v20 = 0;
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
    if (v5)
    {
LABEL_3:
      v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
      v17 = a2;
      v18 = v6;
      if (v3)
        goto LABEL_4;
      return a2 == 0;
    }
  }
  a2 = 0;
  v17 = 0;
  v18 = v5;
  if (v3)
  {
LABEL_4:
    if (a2)
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v17))
      {
        return 1;
      }
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v19);
      v9 = v8;
      v10 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v17);
      if (v9 == v11)
      {
        if (v9)
        {
          for (i = 8 * v9 - 8; ; i -= 8)
          {
            v14 = i;
            if (*ArgAttrsAttr != 0x8000000000000000 && *v10 != 0x8000000000000000 && *ArgAttrsAttr != *v10)
              break;
            ++ArgAttrsAttr;
            ++v10;
            v13 = 1;
            if (!v14)
              return v13;
          }
          return 0;
        }
        return 1;
      }
    }
    return 0;
  }
  return a2 == 0;
}

uint64_t mlir::verifyCompatibleShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  if (a2 != a4)
    return 0;
  if (!a2)
    return 1;
  v7 = 0;
  while (1)
  {
    v8 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, v7);
    v9 = (_QWORD *)mlir::TypeRange::dereference_iterator(a3, v7);
    if (!mlir::verifyCompatibleShape(v8, v9))
      break;
    if (a2 == ++v7)
      return 1;
  }
  return 0;
}

uint64_t mlir::verifyCompatibleShapes(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  mlir::CallableOpInterface *v23;
  char *RawStringData;
  size_t v25;
  size_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unsigned int v37;
  unint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  mlir::CallableOpInterface *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  mlir::CallableOpInterface *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  mlir::CallableOpInterface *v52;
  mlir::CallableOpInterface *v53;
  uint64_t v54;
  mlir::CallableOpInterface *v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  mlir::CallableOpInterface *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v77;
  BOOL v78;
  int v79;
  __int128 v80;
  void *v81[2];
  _BYTE v82[64];
  mlir::CallableOpInterface *v83;
  uint64_t v84;
  _BYTE v85[128];
  char *v86;
  uint64_t v87;
  _QWORD v88[18];

  v88[16] = *MEMORY[0x1E0C80C00];
  v86 = (char *)v88;
  v87 = 0x800000000;
  if (a2 < 9)
  {
    if (!a2)
    {
      LODWORD(v87) = 0;
      goto LABEL_13;
    }
    v4 = 0;
    v5 = v88;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v88, a2, 16);
    v4 = v87;
    v5 = v86;
  }
  v6 = 0;
  v7 = &v5[2 * v4];
  do
  {
    while (1)
    {
      v8 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, v6);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8))
        break;
      *v7 = 0;
      v7[1] = 0;
      v7 += 2;
      if (a2 == ++v6)
        goto LABEL_9;
    }
    v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
    *v7 = v8;
    v7[1] = v9;
    v7 += 2;
    ++v6;
  }
  while (a2 != v6);
LABEL_9:
  v10 = v87;
  v11 = v86;
  v12 = (v87 + a2);
  LODWORD(v87) = v87 + a2;
  if (!(v10 + (_DWORD)a2))
  {
LABEL_13:
    v16 = 1;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = 16 * v12;
  v15 = &v86[16 * v12];
  while (!*(_QWORD *)&v86[v13])
  {
    v13 += 16;
    if (v14 == v13)
      goto LABEL_13;
  }
  v18 = 0;
  do
  {
    if (!*(_QWORD *)&v86[v18])
    {
      v16 = 0;
      goto LABEL_14;
    }
    v18 += 16;
  }
  while (v14 != v18);
  if (!a2)
    goto LABEL_38;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = mlir::TypeRange::dereference_iterator(a1, v21);
    if (*(_UNKNOWN **)(*(_QWORD *)v22 + 136) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      v23 = (mlir::CallableOpInterface *)v22;
    else
      v23 = 0;
    v83 = v23;
    if (!v23
      || ((RawStringData = (char *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v83),
           v26 = v25,
           v27 = &RawStringData[v25],
           v28 = 1,
           (v29 = (char *)memchr(RawStringData, 1, v25)) != 0)
        ? (v30 = v29)
        : (v30 = v27),
          v30 - RawStringData == v26))
    {
      v20 = 1;
      v28 = v19;
    }
    if ((v28 & 1) != 0 && (v20 & 1) != 0)
    {
      v16 = 0;
      goto LABEL_14;
    }
    ++v21;
    v19 = v28;
  }
  while (a2 != v21);
  v11 = v86;
  v15 = &v86[16 * v87];
  if ((_DWORD)v87)
  {
LABEL_38:
    while (1)
    {
      *(_OWORD *)v81 = *(_OWORD *)v11;
      if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v81) & 1) != 0)
        break;
      v11 += 16;
      if (v11 == v15)
      {
        v11 = v15;
        break;
      }
    }
    v31 = v11;
    v11 = v86;
    v32 = v87;
  }
  else
  {
    v32 = 0;
    v31 = v86;
  }
  v33 = &v11[16 * v32];
  v83 = (mlir::CallableOpInterface *)v85;
  v84 = 0x800000000;
  if (v31 == v33)
  {
    v37 = 0;
    LODWORD(v34) = 0;
  }
  else
  {
    v34 = 0;
    v35 = v31;
    do
    {
      v36 = v35 + 16;
      v35 = v15;
      if (v36 != v15)
      {
        v35 = v36;
        while (1)
        {
          *(_OWORD *)v81 = *(_OWORD *)v35;
          if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v81) & 1) != 0)
            break;
          v35 += 16;
          if (v35 == v15)
          {
            v35 = v15;
            break;
          }
        }
      }
      ++v34;
    }
    while (v35 != v33);
    v37 = v84;
    v38 = v34 + v84;
    if (v38 > HIDWORD(v84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v38, 16);
      v37 = v84;
    }
  }
  if (v31 != v33)
  {
    v39 = (_OWORD *)((char *)v83 + 16 * v37);
    do
    {
      *v39 = *(_OWORD *)v31;
      v40 = v31 + 16;
      v31 = v15;
      if (v40 != v15)
      {
        v31 = v40;
        while (1)
        {
          *(_OWORD *)v81 = *(_OWORD *)v31;
          if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v81) & 1) != 0)
            break;
          v31 += 16;
          if (v31 == v15)
          {
            v31 = v15;
            break;
          }
        }
      }
      ++v39;
    }
    while (v31 != v33);
    v37 = v84;
  }
  LODWORD(v84) = v37 + v34;
  if (!(v37 + (_DWORD)v34))
    goto LABEL_118;
  mlir::CallableOpInterface::getArgAttrsAttr(v83);
  v42 = v41;
  if (!(_DWORD)v84)
  {
LABEL_66:
    if (v42 >= 1)
    {
      v46 = 0;
      v47 = 0;
      while (1)
      {
        v48 = v83;
        v49 = (char *)v83 + 16 * v84;
        if (!(_DWORD)v84)
          break;
        v50 = 16 * v84;
        while (1)
        {
          v80 = *(_OWORD *)v48;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
          if (v51 >= v46)
            break;
          v48 = (mlir::CallableOpInterface *)((char *)v48 + 16);
          v50 -= 16;
          if (!v50)
          {
            v48 = (mlir::CallableOpInterface *)v49;
            break;
          }
        }
        v52 = v48;
        v53 = (mlir::CallableOpInterface *)((char *)v83 + 16 * v84);
        v81[0] = v82;
        v81[1] = (void *)0x800000000;
        if (v48 == v53)
          goto LABEL_115;
        v54 = 0;
        v55 = v52;
        do
        {
          v56 = (char *)v55 + 16;
          v55 = (mlir::CallableOpInterface *)v49;
          if (v56 != v49)
          {
            v55 = (mlir::CallableOpInterface *)v56;
            while (1)
            {
              v80 = *(_OWORD *)v55;
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
              if (v57 >= v46)
                break;
              v55 = (mlir::CallableOpInterface *)((char *)v55 + 16);
              if (v55 == (mlir::CallableOpInterface *)v49)
              {
                v55 = (mlir::CallableOpInterface *)v49;
                break;
              }
            }
          }
          ++v54;
        }
        while (v55 != v53);
        v58 = v81[1];
        v59 = v54 + LODWORD(v81[1]);
        if (v59 > HIDWORD(v81[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v81, v82, v59, 8);
          v58 = v81[1];
        }
LABEL_83:
        v60 = (uint64_t *)v81[0];
        if (v52 != v53)
        {
          v61 = v42;
          v62 = (char *)v81[0] + 8 * v58;
          do
          {
            v63 = (mlir::CallableOpInterface *)((char *)v52 + 16);
            v80 = *(_OWORD *)v52;
            *v62 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80) + 8 * v46);
            v52 = (mlir::CallableOpInterface *)v49;
            if (v63 != (mlir::CallableOpInterface *)v49)
            {
              v52 = v63;
              while (1)
              {
                v80 = *(_OWORD *)v52;
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
                if (v64 >= v46)
                  break;
                v52 = (mlir::CallableOpInterface *)((char *)v52 + 16);
                if (v52 == (mlir::CallableOpInterface *)v49)
                {
                  v52 = (mlir::CallableOpInterface *)v49;
                  break;
                }
              }
            }
            ++v62;
          }
          while (v52 != v53);
          v58 = v81[1];
          v60 = (uint64_t *)v81[0];
          v42 = v61;
        }
        v65 = v58 + v54;
        LODWORD(v81[1]) = v58 + v54;
        if (v58 + (_DWORD)v54)
        {
          v66 = *v60;
          v67 = 8 * v65;
          v68 = v67;
          v69 = v60;
          do
          {
            v71 = *v69++;
            v70 = v71;
            if (v71 != 0x8000000000000000)
              v66 = v70;
            v68 -= 8;
          }
          while (v68);
          v72 = v67 - 8;
          v73 = v60;
          do
          {
            v75 = *v73++;
            v74 = v75;
            v77 = v75 == 0x8000000000000000 || v66 == v74;
            v78 = !v77 || v72 == 0;
            v72 -= 8;
          }
          while (!v78);
          v79 = !v77;
          if (v60 != (uint64_t *)v82)
LABEL_110:
            free(v60);
        }
        else
        {
          v79 = 0;
          if (v60 != (uint64_t *)v82)
            goto LABEL_110;
        }
        if (v79)
        {
          v16 = 0;
          goto LABEL_123;
        }
        v46 = ++v47;
        if (v42 <= v47)
        {
          v16 = 1;
          goto LABEL_123;
        }
      }
      v52 = v83;
      v53 = v83;
      v81[0] = v82;
      v81[1] = (void *)0x800000000;
LABEL_115:
      v58 = 0;
      LODWORD(v54) = 0;
      goto LABEL_83;
    }
LABEL_118:
    v16 = 1;
    goto LABEL_123;
  }
  v43 = v83;
  v44 = 16 * v84;
  while (1)
  {
    *(_OWORD *)v81 = *(_OWORD *)v43;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v81);
    if (v45 != v42)
      break;
    v43 = (mlir::CallableOpInterface *)((char *)v43 + 16);
    v44 -= 16;
    if (!v44)
      goto LABEL_66;
  }
  v16 = 0;
LABEL_123:
  if (v83 != (mlir::CallableOpInterface *)v85)
    free(v83);
LABEL_14:
  if (v86 != (char *)v88)
    free(v86);
  return v16;
}

uint64_t mlir::Value::getDefiningOp(mlir::Value *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)this;
  if ((~*(_DWORD *)(*(_QWORD *)this + 8) & 7) == 0)
    v1 = 0;
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8) & 7;
  if (v2 == 6)
    return v1 + 24 * *(_QWORD *)(v1 + 16) + 120;
  else
    return v1 + 16 * v2 + 16;
}

uint64_t mlir::Value::getLoc(mlir::Value *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((~*(_DWORD *)(*(_QWORD *)this + 8) & 7) != 0)
    v1 = *(_QWORD *)this;
  else
    v1 = 0;
  if (!v1)
    return *(_QWORD *)(*(_QWORD *)this + 32);
  v2 = *(_QWORD *)(v1 + 8) & 7;
  if (v2 == 6)
    return *(_QWORD *)(v1 + 24 * *(_QWORD *)(v1 + 16) + 144);
  else
    return *(_QWORD *)(v1 + 16 * v2 + 40);
}

mlir::Block *mlir::Value::getParentRegion(mlir::Value *this)
{
  uint64_t v1;
  uint64_t v2;
  mlir::Block *result;

  if ((~*(_DWORD *)(*(_QWORD *)this + 8) & 7) != 0)
    v1 = *(_QWORD *)this;
  else
    v1 = 0;
  if (!v1)
    return (mlir::Block *)mlir::Block::getParent(*(mlir::Block **)(*(_QWORD *)this + 16));
  v2 = *(_QWORD *)(v1 + 8) & 7;
  if (v2 == 6)
  {
    result = *(mlir::Block **)(v1 + 24 * *(_QWORD *)(v1 + 16) + 136);
    if (!result)
      return result;
  }
  else
  {
    result = *(mlir::Block **)(v1 + 16 * v2 + 32);
    if (!result)
      return result;
  }
  return (mlir::Block *)mlir::Block::getParent(result);
}

uint64_t mlir::Value::getParentBlock(mlir::Value *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((~*(_DWORD *)(*(_QWORD *)this + 8) & 7) != 0)
    v1 = *(_QWORD *)this;
  else
    v1 = 0;
  if (!v1)
    return *(_QWORD *)(*(_QWORD *)this + 16);
  v2 = *(_QWORD *)(v1 + 8) & 7;
  if (v2 == 6)
    return *(_QWORD *)(v1 + 24 * *(_QWORD *)(v1 + 16) + 136);
  else
    return *(_QWORD *)(v1 + 16 * v2 + 32);
}

const void **mlir::Value::replaceAllUsesExcept(const void **result, uint64_t *a2, llvm::SmallPtrSetImplBase *this)
{
  uint64_t *v3;
  uint64_t *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = *(uint64_t **)*result;
  if (v3)
  {
    do
    {
      v6 = (uint64_t *)*v3;
      v7 = (const void *)v3[2];
      v8 = *((_QWORD *)this + 1);
      if (v8 == *(_QWORD *)this)
      {
        v13 = *((unsigned int *)this + 5);
        result = (const void **)(v8 + 8 * v13);
        if ((_DWORD)v13)
        {
          v14 = 0;
          while (*(const void **)(v8 + v14) != v7)
          {
            v14 += 8;
            if (8 * v13 == v14)
              goto LABEL_21;
          }
          result = (const void **)(v8 + v14);
        }
LABEL_21:
        if (result != (const void **)(*((_QWORD *)this + 1) + 8 * v13))
          goto LABEL_4;
      }
      else
      {
        result = llvm::SmallPtrSetImplBase::FindBucketFor(this, (const void *)v3[2]);
        v9 = *(_QWORD *)this;
        v10 = *((_QWORD *)this + 1);
        if (*result != v7)
        {
          v11 = *((_DWORD *)this + 4);
          if (v10 == v9)
            v11 = *((_DWORD *)this + 5);
          result = (const void **)(v10 + 8 * v11);
        }
        if (v10 == v9)
          v12 = *((_DWORD *)this + 5);
        else
          v12 = *((_DWORD *)this + 4);
        if (result != (const void **)(v10 + 8 * v12))
          goto LABEL_4;
      }
      v15 = (_QWORD *)v3[1];
      if (v15)
      {
        *v15 = *v3;
        if (*v3)
          *(_QWORD *)(*v3 + 8) = v3[1];
      }
      v3[3] = (uint64_t)a2;
      v16 = *a2;
      *v3 = *a2;
      v3[1] = (uint64_t)a2;
      if (v16)
        *(_QWORD *)(v16 + 8) = v3;
      *a2 = (uint64_t)v3;
LABEL_4:
      v3 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t ***mlir::Value::replaceAllUsesExcept(uint64_t ***result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t v6;

  v3 = **result;
  if (v3)
  {
    do
    {
      v4 = (uint64_t *)*v3;
      if (v3[2] != a3)
      {
        v5 = (uint64_t **)v3[1];
        if (v5)
        {
          *v5 = v4;
          if (*v3)
            *(_QWORD *)(*v3 + 8) = v3[1];
        }
        v3[3] = (uint64_t)a2;
        v6 = *a2;
        *v3 = *a2;
        v3[1] = (uint64_t)a2;
        if (v6)
          *(_QWORD *)(v6 + 8) = v3;
        *a2 = (uint64_t)v3;
      }
      v3 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t ***mlir::Value::replaceUsesWithIf(uint64_t ***result, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = **result;
  if (v4)
  {
    do
    {
      v8 = (uint64_t *)*v4;
      result = (uint64_t ***)a3(a4, v4);
      if ((_DWORD)result)
      {
        v9 = (uint64_t *)v4[1];
        if (v9)
        {
          *v9 = *v4;
          if (*v4)
            *(_QWORD *)(*v4 + 8) = v4[1];
        }
        v4[3] = (uint64_t)a2;
        v10 = *a2;
        *v4 = *a2;
        v4[1] = (uint64_t)a2;
        if (v10)
          *(_QWORD *)(v10 + 8) = v4;
        *a2 = (uint64_t)v4;
      }
      v4 = v8;
    }
    while (v8);
  }
  return result;
}

BOOL mlir::Value::isUsedOutsideOfBlock(mlir::Value *this, mlir::Block *a2)
{
  _QWORD *v2;
  mlir::Block *v3;
  _BOOL8 result;

  v2 = *(_QWORD **)this;
  while (1)
  {
    v2 = (_QWORD *)*v2;
    if (!v2)
      break;
    v3 = *(mlir::Block **)(v2[2] + 16);
    result = v3 != a2;
    if (v3 != a2)
      return result;
  }
  return 0;
}

void mlir::Value::shuffleUseList(_QWORD **a1, unsigned int *a2, unint64_t a3)
{
  mlir::IRObjectWithUseList<mlir::OpOperand>::shuffleUseList(*a1, a2, a3);
}

void mlir::IRObjectWithUseList<mlir::OpOperand>::shuffleUseList(_QWORD *a1, unsigned int *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[7];

  v19[6] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x600000000;
  if (!a3)
  {
    v8 = (char *)v17;
    v9 = *(_QWORD **)v17;
    *a1 = *(_QWORD *)v17;
    *v9 = 0;
    v9[1] = a1;
    v10 = v8;
    goto LABEL_15;
  }
  if (a3 < 7)
  {
    v6 = 0;
    v7 = a3;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, a3, 8);
  v6 = v18;
  v7 = a3 - v18;
  if (a3 != v18)
LABEL_7:
    bzero((char *)v17 + 8 * v6, 8 * v7);
  LODWORD(v18) = a3;
  v11 = a3;
  v12 = a1;
  do
  {
    v12 = (_QWORD *)*v12;
    v13 = *a2++;
    *((_QWORD *)v17 + v13) = v12;
    --v11;
  }
  while (v11);
  v10 = (char *)v17;
  v9 = *(_QWORD **)v17;
  *a1 = *(_QWORD *)v17;
  *v9 = 0;
  v9[1] = a1;
  if ((_DWORD)a3 == 1)
    goto LABEL_11;
  v8 = &v10[8 * a3];
LABEL_15:
  v14 = v10 + 8;
  do
  {
    v16 = *(_QWORD **)v14;
    *v9 = *(_QWORD *)v14;
    if (v16)
      v16[1] = v9;
    v15 = *(_QWORD **)v14;
    v14 += 8;
    v9 = v15;
  }
  while (v14 != v8);
LABEL_11:
  *v9 = 0;
  if (v10 != (char *)v19)
    free(v10);
}

uint64_t mlir::detail::OpResultImpl::getOwner(mlir::detail::OpResultImpl *this)
{
  uint64_t v1;

  if (!this)
    return (uint64_t)this + 24 * *((_QWORD *)this + 2) + 120;
  v1 = *((_QWORD *)this + 1) & 7;
  if (v1 == 6)
    return (uint64_t)this + 24 * *((_QWORD *)this + 2) + 120;
  else
    return (uint64_t)this + 16 * v1 + 16;
}

uint64_t mlir::detail::OpResultImpl::getNextResultAtOffset(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    if (this)
    {
      v2 = *(_QWORD *)(this + 8) & 7;
      if (v2 != 6)
      {
        v3 = (5 - v2);
        if (a2 <= v3)
        {
          this -= 16 * a2;
          return this;
        }
        this -= 16 * v3;
        a2 -= v3;
      }
    }
    this -= 24 * a2;
  }
  return this;
}

uint64_t mlir::OpResult::getNumInline(uint64_t this)
{
  if (this >= 6)
    return 6;
  else
    return this;
}

uint64_t mlir::OpResult::getNumTrailing(mlir::OpResult *this)
{
  if (this >= 6)
    return ((_DWORD)this - 6);
  else
    return 0;
}

unint64_t mlir::BlockOperand::getOperandNumber(mlir::BlockOperand *this)
{
  return ((unint64_t)this
        - ((*((_QWORD *)this + 2)
          + 16 * (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 2) + 44) >> 23) & 1)
          + (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 2) + 44) >> 21) & 0x7F8)
          + 71) & 0x1FFFFFFFF8)) >> 5;
}

unint64_t mlir::OpOperand::getOperandNumber(unint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((*(_BYTE *)(v1 + 46) & 0x80) != 0)
    return (this - *(_QWORD *)(v1 + 72)) >> 5;
  else
    return this >> 5;
}

__n128 mlir::OperandRangeRange::getTypes@<Q0>(mlir::OperandRangeRange *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  __n128 result;
  __int128 v7;

  v4 = *((unsigned int *)this + 6);
  v5 = (char *)operator new(0x28uLL);
  result = *(__n128 *)this;
  v7 = *((_OWORD *)this + 1);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)this;
  *(_QWORD *)v5 = off_1E0E50768;
  *(_OWORD *)(v5 + 24) = v7;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v4;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 1;
  return result;
}

uint64_t *mlir::OperandRange::getTypes@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *this;
  v3 = this[1];
  *a2 = *this;
  a2[1] = 0;
  a2[2] = v2;
  a2[3] = v3;
  return this;
}

__n128 mlir::ValueRange::getTypes@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  a2->n128_u64[1] = 0;
  result = *this;
  a2->n128_u64[0] = this->n128_u64[0];
  a2[1] = result;
  return result;
}

__n128 std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1E0E50768;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E0E50768;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v2 = mlir::OperandRangeRange::dereference((_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24) + *a2);
  mlir::ValueRange::ValueRange(v5, v2, v3);
  return v5[0];
}

uint64_t std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir14TypeRangeRange10getRangeFnINS_17OperandRangeRangeEEENSt3__18functionIFNS_9TypeRangeEjEEERKT_EUljE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir14TypeRangeRange10getRangeFnINS_17OperandRangeRangeEEENSt3__18functionIFNS_9TypeR"
                                "angeEjEEERKT_EUljE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir14TypeRangeRange10getRangeFnINS_17OperandRangeRangeEEENSt3__18functionIFNS_9TypeRangeEjEEERKT_EUljE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir14TypeRangeRange10getRangeFnINS_17OperandRangeRangeEEENSt3__18functionIFNS_9TypeRangeEjEEERKT_EUljE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::target_type()
{
}

void mlir::verify(mlir *this, mlir::Operation *a2)
{
  char v2;

  v2 = (char)a2;
}

void `anonymous namespace'::OperationVerifier::verifyOpAndDominance(_anonymous_namespace_::OperationVerifier *this, mlir::Operation *a2)
{
  const void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 *Value;
  uint64_t v8;
  __int128 *v9;
  uint64_t NameDialect;
  unint64_t v11;
  const void **v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t k;
  uint64_t v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *m;
  uint64_t v20;
  _QWORD **v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  mlir::GenericProgramPoint **v34;
  mlir::GenericProgramPoint **i;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  char v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  mlir::Block **v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void ***v53;
  mlir::Operation *v54;
  uint64_t *v55;
  char v56;
  _QWORD **v57;
  _QWORD **v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  void *v64;
  mlir::MLIRContext *Context;
  const void **v66;
  uint64_t v67;
  mlir::MLIRContext *v68;
  uint64_t (**MemorySpace)(uint64_t);
  unsigned int v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t (**v73)(uint64_t);
  _QWORD *v74;
  void **v75;
  int v76;
  uint64_t v77;
  uint64_t InterfaceFor;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD **v82;
  _QWORD **v83;
  void *v84;
  _QWORD *v85;
  void *v86;
  void *v87;
  _QWORD **v88;
  _QWORD **v89;
  void *v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  unint64_t Parent;
  uint64_t v95;
  mlir::Region *v96;
  uint64_t Loc;
  _QWORD **v98;
  _QWORD **v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  void *v103;
  const void **v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  unsigned int v111;
  unint64_t v112;
  mlir::GenericProgramPoint *v113;
  mlir::GenericProgramPoint *j;
  mlir::GenericProgramPoint *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  _QWORD **v127;
  _QWORD **v128;
  void *v129;
  _QWORD *v130;
  void *v131;
  void *v132;
  const void **v133;
  const void **v134;
  uint64_t v135;
  int RegionKind;
  _QWORD *v137;
  uint64_t v139;
  _QWORD **v140;
  _QWORD **v141;
  void *v142;
  _QWORD *v143;
  _QWORD *v144;
  void *v145;
  void *v146;
  void *v147;
  unsigned __int8 v148;
  uint64_t v149;
  uint64_t Values;
  uint64_t v151;
  char *v152;
  const void ***v153;
  char *v154;
  __int128 v155;
  const void **v156;
  const char *v157;
  char *v158;
  const void ***v159;
  char *v160;
  __int128 v161;
  _QWORD **v162;
  _QWORD **v163;
  void *v164;
  _QWORD *v165;
  _QWORD *v166;
  void *v167;
  void *v168;
  void *v169;
  const void **v170;
  mlir::MLIRContext *v171;
  uint64_t v172;
  uint64_t ParentOp;
  char *v174;
  const char **v175;
  char *v176;
  __int128 v177;
  uint64_t v178;
  char *v179;
  const char **v180;
  char *v181;
  __int128 v182;
  _QWORD **v183;
  _QWORD **v184;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  char *v189;
  const char **v190;
  char *v191;
  __int128 v192;
  _QWORD **v193;
  _QWORD **v194;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  BOOL v203;
  unint64_t v204;
  int64_t v205;
  int64_t v206;
  int64_t v207;
  int64_t v208;
  int64_t v209;
  llvm *v211[2];
  unsigned int v212;
  uint64_t (**v213)(uint64_t);
  uint64_t v214;
  const char *v215;
  const char *v216;
  uint64_t v217;
  __int16 v218;
  _anonymous_namespace_::OperationVerifier *v219;
  const void **v220;
  const char *v221;
  uint64_t v222;
  __int16 v223;
  std::shared_future<void> v224;
  unsigned __int8 v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD v231[6];
  __int128 v232;
  char v233;
  void *v234;
  unsigned int v235;
  unsigned int v236;
  _BYTE v237[96];
  void *v238;
  _QWORD *v239;
  void *__p;
  _QWORD **v241;
  char v242;
  const void **v243;
  uint64_t v244;
  uint64_t v245;
  __int16 v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  v229 = v231;
  v231[0] = a2;
  v2 = (const void **)&v245;
  v3 = 1;
  v230 = 0x600000001;
  v211[0] = 0;
  v211[1] = 0;
  v212 = 0;
  while (1)
  {
    v228 = v229[v3 - 1];
    llvm::DenseMapBase<llvm::DenseMap<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>,llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v211, &v228, (uint64_t)&v232);
    if (v233)
    {
      v4 = v228 & 0xFFFFFFFFFFFFFFF8;
      if ((v228 & 4) != 0)
      {
        v31 = *(_QWORD *)(v4 + 48);
        v32 = *(_QWORD *)(v4 + 56) - v31;
        if (!v32)
        {
LABEL_51:
          v34 = (mlir::GenericProgramPoint **)(v4 + 32);
          if (*(_QWORD *)(v4 + 32) == v4 + 32)
          {
            if (!mlir::Block::getParent((mlir::Block *)(v228 & 0xFFFFFFFFFFFFFFF8)))
              goto LABEL_165;
            Parent = mlir::Block::getParent((mlir::Block *)v4);
            v95 = *(_QWORD *)(Parent + 8);
            if (v95 != Parent && *(_QWORD *)(v95 + 8) == Parent)
            {
              ParentOp = mlir::Block::getParentOp((mlir::Block *)v4);
              if (!ParentOp
                || (mlir::OperationName::mightHaveTrait<mlir::OpTrait::NoTerminator>((void ***)(ParentOp + 48)) & 1) != 0)
              {
                goto LABEL_165;
              }
            }
            v96 = (mlir::Region *)mlir::Block::getParent((mlir::Block *)v4);
            Loc = mlir::Region::getLoc(v96);
            v243 = (const void **)"empty block: expect at least a terminator";
            v246 = 259;
            mlir::emitError(Loc, (uint64_t)&v243, (uint64_t)&v232);
            v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
            if ((_QWORD)v232)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
            if (!v242)
              goto LABEL_164;
            v98 = (_QWORD **)__p;
            if (__p)
            {
              v99 = v241;
              v100 = __p;
              if (v241 != __p)
              {
                do
                  v99 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v99 - 1);
                while (v99 != v98);
                v100 = __p;
              }
              v241 = v98;
              operator delete(v100);
            }
            v43 = v238;
            if (!v238)
              goto LABEL_162;
            v101 = v239;
            v45 = v238;
            if (v239 == v238)
              goto LABEL_161;
            do
            {
              v103 = (void *)*--v101;
              v102 = v103;
              *v101 = 0;
              if (v103)
                operator delete[](v102);
            }
            while (v101 != v43);
          }
          else
          {
            for (i = *(mlir::GenericProgramPoint ***)(v4 + 40); ; i = (mlir::GenericProgramPoint **)i[1])
            {
              if (i == v34)
                goto LABEL_165;
              mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)i);
              if (*(_DWORD *)(v36 + 40))
              {
                v37 = (uint64_t *)v36;
                mlir::GenericProgramPoint::~GenericProgramPoint(*v34);
                if (v37 != v38)
                  break;
              }
            }
            v243 = (const void **)"operation with block successors must terminate its parent block";
            v246 = 259;
            mlir::Operation::emitError(v37, (uint64_t)&v243, (uint64_t)&v232);
            v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
            if ((_QWORD)v232)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
            if (!v242)
              goto LABEL_164;
            v40 = (_QWORD **)__p;
            if (__p)
            {
              v41 = v241;
              v42 = __p;
              if (v241 != __p)
              {
                do
                  v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
                while (v41 != v40);
                v42 = __p;
              }
              v241 = v40;
              operator delete(v42);
            }
            v43 = v238;
            if (!v238)
              goto LABEL_162;
            v44 = v239;
            v45 = v238;
            if (v239 == v238)
              goto LABEL_161;
            do
            {
              v47 = (void *)*--v44;
              v46 = v47;
              *v44 = 0;
              if (v47)
                operator delete[](v46);
            }
            while (v44 != v43);
          }
LABEL_160:
          v45 = v238;
LABEL_161:
          v239 = v43;
          operator delete(v45);
          goto LABEL_162;
        }
        v33 = 8 * (v32 >> 3);
        while (*(_QWORD *)(*(_QWORD *)v31 + 16) == v4)
        {
          v31 += 8;
          v33 -= 8;
          if (!v33)
            goto LABEL_51;
        }
        v81 = *(_QWORD *)(*(_QWORD *)v31 + 32);
        v243 = (const void **)"block argument not owned by block";
        v246 = 259;
        mlir::emitError(v81, (uint64_t)&v243, (uint64_t)&v232);
        v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
        if ((_QWORD)v232)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
        if (!v242)
          goto LABEL_164;
        v82 = (_QWORD **)__p;
        if (__p)
        {
          v83 = v241;
          v84 = __p;
          if (v241 != __p)
          {
            do
              v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
            while (v83 != v82);
            v84 = __p;
          }
          v241 = v82;
          operator delete(v84);
        }
        v43 = v238;
        if (v238)
        {
          v85 = v239;
          v45 = v238;
          if (v239 == v238)
            goto LABEL_161;
          do
          {
            v87 = (void *)*--v85;
            v86 = v87;
            *v85 = 0;
            if (v87)
              operator delete[](v86);
          }
          while (v85 != v43);
          goto LABEL_160;
        }
LABEL_162:
        v104 = (const void **)v234;
        if (v234 == v237)
          goto LABEL_164;
        goto LABEL_163;
      }
      if ((*(_BYTE *)(v4 + 46) & 0x80) != 0)
      {
        v5 = *(unsigned int *)(v4 + 68);
        if ((_DWORD)v5)
        {
          v6 = (_QWORD *)(*(_QWORD *)(v4 + 72) + 24);
          while (*v6)
          {
            v6 += 4;
            if (!--v5)
              goto LABEL_12;
          }
          v243 = (const void **)"null operand found";
          v246 = 259;
          mlir::Operation::emitError((uint64_t *)(v228 & 0xFFFFFFFFFFFFFFF8), (uint64_t)&v243, (uint64_t)&v232);
          v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
          if ((_QWORD)v232)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
          if (!v242)
            goto LABEL_164;
          v88 = (_QWORD **)__p;
          if (__p)
          {
            v89 = v241;
            v90 = __p;
            if (v241 != __p)
            {
              do
                v89 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v89 - 1);
              while (v89 != v88);
              v90 = __p;
            }
            v241 = v88;
            operator delete(v90);
          }
          v43 = v238;
          if (v238)
          {
            v91 = v239;
            v45 = v238;
            if (v239 == v238)
              goto LABEL_161;
            do
            {
              v93 = (void *)*--v91;
              v92 = v93;
              *v91 = 0;
              if (v93)
                operator delete[](v92);
            }
            while (v91 != v43);
            goto LABEL_160;
          }
          goto LABEL_162;
        }
      }
LABEL_12:
      v243 = *(const void ***)(v4 + 56);
      Value = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v243);
      v8 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v243);
      if (Value != (__int128 *)v8)
      {
        v9 = (__int128 *)v8;
        do
        {
          v232 = *Value;
          NameDialect = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v232);
          if (NameDialect
            && !(*(unsigned __int8 (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)NameDialect
                                                                                             + 96))(NameDialect, v4, v232, *((_QWORD *)&v232 + 1)))
          {
            goto LABEL_363;
          }
          ++Value;
        }
        while (Value != v9);
      }
      v75 = *(void ***)(v4 + 48);
      if (v75[2] != &mlir::detail::TypeIDResolver<void,void>::id
        && !(*((unsigned __int8 (**)(void **, unint64_t))*v75 + 8))(v75, v4))
      {
        goto LABEL_363;
      }
      v76 = *(_DWORD *)(v4 + 44);
      v77 = *(_QWORD *)&v76 & 0x7FFFFFLL;
      if ((v76 & 0x7FFFFF) != 0)
      {
        if (mlir::OpInterface<mlir::RegionKindInterface,mlir::detail::RegionKindInterfaceInterfaceTraits>::getInterfaceFor(v4))
        {
          InterfaceFor = mlir::OpInterface<mlir::RegionKindInterface,mlir::detail::RegionKindInterfaceInterfaceTraits>::getInterfaceFor(v4);
          v213 = (uint64_t (**)(uint64_t))v4;
          v214 = InterfaceFor;
          v243 = v2;
          v244 = 0x600000000;
          v79 = *(unsigned int *)(v4 + 44);
          if ((v79 & 0x7FFFFF) != 0)
          {
LABEL_114:
            v80 = (_QWORD *)(v4
                           + 16 * ((v79 >> 23) & 1)
                           + ((v79 >> 21) & 0x7F8)
                           + 32 * *(unsigned int *)(v4 + 40)
                           + 64);
LABEL_220:
            v135 = 0;
            while (1)
            {
              if (v213)
              {
                RegionKind = mlir::RegionKindInterface::getRegionKind(&v213, v135);
                v137 = (_QWORD *)*v80;
                if (*(_UNKNOWN **)(*(_QWORD *)(v4 + 48) + 16) != &mlir::detail::TypeIDResolver<void,void>::id
                  && RegionKind == 1)
                {
                  if (v80 == v137)
                    goto LABEL_221;
                  if (v80 != *(_QWORD **)(v80[1] + 8))
                  {
                    v220 = (const void **)"expects graph region #";
                    v223 = 259;
                    mlir::Operation::emitOpError((uint64_t *)v4, &v220, (uint64_t)&v232);
                    if ((_QWORD)v232)
                    {
                      LODWORD(v215) = 5;
                      v216 = (const char *)v135;
                      v174 = (char *)v234;
                      if (v235 >= v236)
                      {
                        v199 = v235 + 1;
                        if (v234 <= &v215 && (char *)v234 + 24 * v235 > (char *)&v215)
                        {
                          v205 = (char *)&v215 - (_BYTE *)v234;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v199, 24);
                          v174 = (char *)v234;
                          v175 = (const char **)((char *)v234 + v205);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v199, 24);
                          v175 = &v215;
                          v174 = (char *)v234;
                        }
                      }
                      else
                      {
                        v175 = &v215;
                      }
                      v176 = &v174[24 * v235];
                      v177 = *(_OWORD *)v175;
                      *((_QWORD *)v176 + 2) = v175[2];
                      *(_OWORD *)v176 = v177;
                      v178 = ++v235;
                      if ((_QWORD)v232)
                      {
                        LODWORD(v215) = 3;
                        v216 = " to have 0 or 1 blocks";
                        v217 = 22;
                        v179 = (char *)v234;
                        if (v178 >= v236)
                        {
                          v202 = v178 + 1;
                          v203 = (char *)v234 + 24 * v178 > (char *)&v215;
                          if (v234 <= &v215 && v203)
                          {
                            v208 = (char *)&v215 - (_BYTE *)v234;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v202, 24);
                            v179 = (char *)v234;
                            v180 = (const char **)((char *)v234 + v208);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v202, 24);
                            v180 = &v215;
                            v179 = (char *)v234;
                          }
                        }
                        else
                        {
                          v180 = &v215;
                        }
                        v181 = &v179[24 * v235];
                        v182 = *(_OWORD *)v180;
                        *((_QWORD *)v181 + 2) = v180[2];
                        *(_OWORD *)v181 = v182;
                        ++v235;
                      }
                    }
                    v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
                    if ((_QWORD)v232)
                      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
                    if (v242)
                    {
                      v183 = (_QWORD **)__p;
                      if (__p)
                      {
                        v184 = v241;
                        v185 = __p;
                        if (v241 != __p)
                        {
                          do
                            v184 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v184 - 1);
                          while (v184 != v183);
                          v185 = __p;
                        }
                        v241 = v183;
                        operator delete(v185);
                      }
                      v143 = v238;
                      if (v238)
                      {
                        v186 = v239;
                        v145 = v238;
                        if (v239 != v238)
                        {
                          do
                          {
                            v188 = (void *)*--v186;
                            v187 = v188;
                            *v186 = 0;
                            if (v188)
                              operator delete[](v187);
                          }
                          while (v186 != v143);
                          goto LABEL_315;
                        }
LABEL_316:
                        v239 = v143;
                        operator delete(v145);
                      }
LABEL_317:
                      if (v234 != v237)
                        free(v234);
                    }
LABEL_319:
                    v104 = v243;
                    if (v243 == v2)
                    {
LABEL_164:
                      if (v39)
                        goto LABEL_165;
LABEL_363:
                      llvm::deallocate_buffer(v211[0], (void *)(8 * v212));
                    }
LABEL_163:
                    free(v104);
                    goto LABEL_164;
                  }
                }
              }
              else
              {
                v137 = (_QWORD *)*v80;
              }
              if (v80 != v137 && *(_QWORD *)(v80[1] - 8))
              {
                v139 = *(_QWORD *)(v4 + 24);
                v220 = (const void **)"entry block of region may not have predecessors";
                v223 = 259;
                mlir::emitError(v139, (uint64_t)&v220, (uint64_t)&v232);
                v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
                if ((_QWORD)v232)
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
                if (v242)
                {
                  v140 = (_QWORD **)__p;
                  if (__p)
                  {
                    v141 = v241;
                    v142 = __p;
                    if (v241 != __p)
                    {
                      do
                        v141 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v141 - 1);
                      while (v141 != v140);
                      v142 = __p;
                    }
                    v241 = v140;
                    operator delete(v142);
                  }
                  v143 = v238;
                  if (v238)
                  {
                    v144 = v239;
                    v145 = v238;
                    if (v239 == v238)
                      goto LABEL_316;
                    do
                    {
                      v147 = (void *)*--v144;
                      v146 = v147;
                      *v144 = 0;
                      if (v147)
                        operator delete[](v146);
                    }
                    while (v144 != v143);
LABEL_315:
                    v145 = v238;
                    goto LABEL_316;
                  }
                  goto LABEL_317;
                }
                goto LABEL_319;
              }
LABEL_221:
              ++v135;
              v80 += 3;
              if (v77 == v135)
              {
                v39 = 1;
                goto LABEL_319;
              }
            }
          }
        }
        else
        {
          v213 = 0;
          v214 = 0;
          v243 = v2;
          v244 = 0x600000000;
          v79 = *(unsigned int *)(v4 + 44);
          if ((v79 & 0x7FFFFF) != 0)
            goto LABEL_114;
        }
        v80 = 0;
        goto LABEL_220;
      }
LABEL_165:
      v105 = v228 & 0xFFFFFFFFFFFFFFF8;
      if ((v228 & 4) != 0)
      {
        v115 = *(mlir::GenericProgramPoint **)(v105 + 32);
        v113 = (mlir::GenericProgramPoint *)(v105 + 32);
        for (j = v115; j != v113; j = *(mlir::GenericProgramPoint **)j)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(j);
          v117 = v116;
          if ((*(_DWORD *)(v116 + 44) & 0x7FFFFF) == 0)
            goto LABEL_181;
          if ((v118 & 1) == 0
          {
            *(_QWORD *)&v232 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
            *((_QWORD *)&v232 + 1) = 91;
            v119 = llvm::StringRef::find((uint64_t *)&v232, "DesiredTypeName = ", 0x12uLL, 0);
            if (*((_QWORD *)&v232 + 1) >= v119)
              v120 = v119;
            else
              v120 = *((_QWORD *)&v232 + 1);
            v121 = v232 + v120;
            v122 = *((_QWORD *)&v232 + 1) - v120;
            v123 = 18;
            if (v122 < 0x12)
              v123 = v122;
            v124 = v122 - v123;
            if (v124 >= v124 - 1)
              v125 = v124 - 1;
            else
              v125 = v124;
            mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v121 + v123, v125);
          }
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v117 + 48) + 32))(*(_QWORD *)(v117 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) == 0)
          {
LABEL_181:
            if (v230 >= HIDWORD(v230))
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v229, v231, v230 + 1, 8);
            v229[v230] = v117 & 0xFFFFFFFFFFFFFFFBLL;
            LODWORD(v230) = v230 + 1;
          }
        }
      }
      else if (*(_BYTE *)this)
      {
        v106 = *(unsigned int *)(v105 + 44);
        if ((v106 & 0x7FFFFF) != 0)
        {
          v107 = ((v105 + 16 * ((v106 >> 23) & 1) + ((v106 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
               + 32 * *(unsigned int *)(v105 + 40);
          v108 = (_QWORD *)(v107 + 24 * (v106 & 0x7FFFFF));
          do
          {
            v110 = (_QWORD *)*(v108 - 3);
            v108 -= 3;
            v109 = v110;
            if (v110 != v108)
            {
              v111 = v230;
              do
              {
                if (v109)
                  v112 = (unint64_t)(v109 - 1);
                else
                  v112 = 0;
                if (v111 >= HIDWORD(v230))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v229, v231, v111 + 1, 8);
                  v229[v230] = v112 | 4;
                }
                else
                {
                  v229[v111] = v112 | 4;
                }
                v111 = v230 + 1;
                LODWORD(v230) = v230 + 1;
                v109 = (_QWORD *)*v109;
              }
              while (v109 != v108);
            }
          }
          while (v108 != (_QWORD *)v107);
        }
      }
    }
    else
    {
      LODWORD(v230) = v230 - 1;
      v11 = v228 & 0xFFFFFFFFFFFFFFF8;
      if ((v228 & 4) == 0)
      {
        v12 = v2;
        v243 = v2;
        v244 = 0x600000000;
        if (*(_BYTE *)this)
        {
          v13 = *(unsigned int *)(v11 + 44);
          if ((v13 & 0x7FFFFF) != 0)
          {
            v14 = ((v11 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(v11 + 40);
            v15 = v14 + 24 * (v13 & 0x7FFFFF);
            do
            {
              for (k = *(_QWORD *)(v14 + 8); k != v14; k = *(_QWORD *)(k + 8))
              {
                v17 = k - 8;
                if (!k)
                  v17 = 0;
                v18 = (mlir::GenericProgramPoint *)(v17 + 32);
                for (m = *(mlir::GenericProgramPoint **)(v17 + 40);
                      m != v18;
                      m = (mlir::GenericProgramPoint *)*((_QWORD *)m + 1))
                {
                  mlir::GenericProgramPoint::~GenericProgramPoint(m);
                  if ((*(_DWORD *)(v20 + 44) & 0x7FFFFF) != 0)
                  {
                    v21 = (_QWORD **)v20;
                    if ((v22 & 1) == 0
                    {
                      *(_QWORD *)&v232 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
                      *((_QWORD *)&v232 + 1) = 91;
                      v24 = llvm::StringRef::find((uint64_t *)&v232, "DesiredTypeName = ", 0x12uLL, 0);
                      if (*((_QWORD *)&v232 + 1) >= v24)
                        v25 = v24;
                      else
                        v25 = *((_QWORD *)&v232 + 1);
                      v26 = v232 + v25;
                      v27 = *((_QWORD *)&v232 + 1) - v25;
                      v28 = 18;
                      if (v27 < 0x12)
                        v28 = v27;
                      v29 = v27 - v28;
                      if (v29 >= v29 - 1)
                        v30 = v29 - 1;
                      else
                        v30 = v29;
                      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v26 + v28, v30);
                    }
                    if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v21[6] + 32))(v21[6], mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id))
                    {
                      v23 = v244;
                      if (v244 >= (unint64_t)HIDWORD(v244))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v243, v12, v244 + 1, 8);
                        v23 = v244;
                      }
                      v243[v23] = v21;
                      LODWORD(v244) = v244 + 1;
                    }
                  }
                }
              }
              v14 += 24;
            }
            while (v14 != v15);
          }
        }
        Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v11 + 24));
        v66 = v243;
        v67 = v244;
        v219 = this;
        v220 = v243;
        v227 = v244;
        if ((_DWORD)v244)
        {
          v68 = Context;
          if (!mlir::MLIRContext::isMultithreadingEnabled(Context) || v227 <= 1)
          {
            v133 = &v66[v67];
            v134 = v220;
            if (v220 == v133)
              goto LABEL_251;
            {
              v134 = v220 + 1;
              v220 = v134;
              if (v134 == v133)
                goto LABEL_251;
            }
            goto LABEL_278;
          }
          mlir::ParallelDiagnosticHandler::ParallelDiagnosticHandler((mlir::ParallelDiagnosticHandler *)&v215, v68);
          v226 = 0;
          v225 = 0;
          MemorySpace = (uint64_t (**)(uint64_t))mlir::MemRefType::getMemorySpace(v68);
          v213 = MemorySpace;
          if (*((_DWORD *)MemorySpace + 77) >= v227)
            v70 = v227;
          else
            v70 = *((_DWORD *)MemorySpace + 77);
          if (!v70)
          {
LABEL_250:
            llvm::ThreadPool::wait((uint64_t)MemorySpace, (uint64_t)&v213);
            v148 = atomic_load(&v225);
            llvm::ThreadPool::wait((uint64_t)v213, (uint64_t)&v213);
            mlir::ParallelDiagnosticHandler::~ParallelDiagnosticHandler((mlir::ParallelDiagnosticHandler *)&v215);
            if ((v148 & 1) == 0)
              goto LABEL_251;
LABEL_278:
            v56 = 0;
LABEL_285:
            v2 = v12;
LABEL_286:
            v170 = v243;
            if (v243 == v2)
              goto LABEL_3;
            goto LABEL_2;
          }
          while (2)
          {
            v73 = v213;
            v74 = operator new(0x38uLL);
            *v74 = off_1E0E50F18;
            v74[1] = &v225;
            v74[2] = &v226;
            v74[3] = &v227;
            v74[4] = &v215;
            v74[5] = &v219;
            v74[6] = &v220;
            v234 = v74;
            llvm::ThreadPool::asyncImpl<void>((uint64_t)v73, &v232, (uint64_t)&v213, (std::future<void> *)&v224);
            v71 = (__int128 *)v234;
            if (v234 != &v232)
            {
              if (v234)
              {
                v72 = 5;
LABEL_104:
                (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
              }
              std::shared_future<void>::~shared_future(&v224);
              if (!--v70)
              {
                MemorySpace = v213;
                goto LABEL_250;
              }
              continue;
            }
            break;
          }
          v71 = &v232;
          v72 = 4;
          goto LABEL_104;
        }
LABEL_251:
        v149 = *(_QWORD *)(v11 + 48);
        if (*(_UNKNOWN **)(v149 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
        {
          v56 = (*(unsigned __int8 (**)(uint64_t, unint64_t))(*(_QWORD *)v149 + 72))(v149, v11) != 0;
          goto LABEL_285;
        }
        *(_QWORD *)&v232 = *(_QWORD *)(v149 + 8);
        Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v232);
        if (Values)
        {
          v151 = Values;
          if (!*(_BYTE *)(Values + 40))
          {
            v215 = "unregistered operation '";
            v218 = 259;
            mlir::Operation::emitError((uint64_t *)v11, (uint64_t)&v215, (uint64_t)&v232);
            if ((_QWORD)v232)
            {
              mlir::Diagnostic::operator<<((uint64_t)&v232 + 8, *(_QWORD *)(v11 + 48));
              if ((_QWORD)v232)
              {
                LODWORD(v220) = 3;
                v221 = "' found in dialect ('";
                v222 = 21;
                v152 = (char *)v234;
                if (v235 >= v236)
                {
                  v201 = v235 + 1;
                  if (v234 <= &v220 && (char *)v234 + 24 * v235 > (char *)&v220)
                  {
                    v207 = (char *)&v220 - (_BYTE *)v234;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v201, 24);
                    v152 = (char *)v234;
                    v153 = (const void ***)((char *)v234 + v207);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v201, 24);
                    v153 = &v220;
                    v152 = (char *)v234;
                  }
                }
                else
                {
                  v153 = &v220;
                }
                v154 = &v152[24 * v235];
                v155 = *(_OWORD *)v153;
                *((_QWORD *)v154 + 2) = v153[2];
                *(_OWORD *)v154 = v155;
                ++v235;
                if ((_QWORD)v232)
                {
                  v156 = *(const void ***)(v151 + 8);
                  v157 = *(const char **)(v151 + 16);
                  v223 = 261;
                  v220 = v156;
                  v221 = v157;
                  mlir::Diagnostic::operator<<((uint64_t)&v232 + 8, &v220);
                  if ((_QWORD)v232)
                  {
                    LODWORD(v220) = 3;
                    v221 = "') that does not allow unknown operations";
                    v222 = 41;
                    v158 = (char *)v234;
                    if (v235 >= v236)
                    {
                      v204 = v235 + 1;
                      if (v234 <= &v220 && (char *)v234 + 24 * v235 > (char *)&v220)
                      {
                        v209 = (char *)&v220 - (_BYTE *)v234;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v204, 24);
                        v158 = (char *)v234;
                        v159 = (const void ***)((char *)v234 + v209);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v204, 24);
                        v159 = &v220;
                        v158 = (char *)v234;
                      }
                    }
                    else
                    {
                      v159 = &v220;
                    }
                    v160 = &v158[24 * v235];
                    v161 = *(_OWORD *)v159;
                    *((_QWORD *)v160 + 2) = v159[2];
                    *(_OWORD *)v160 = v161;
                    ++v235;
                  }
                }
              }
            }
            v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
            if ((_QWORD)v232)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
            v2 = v12;
            if (!v242)
              goto LABEL_286;
            v162 = (_QWORD **)__p;
            if (__p)
            {
              v163 = v241;
              v164 = __p;
              if (v241 != __p)
              {
                do
                  v163 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v163 - 1);
                while (v163 != v162);
                v164 = __p;
              }
              v241 = v162;
              operator delete(v164);
            }
            v165 = v238;
            if (v238)
            {
              v166 = v239;
              v167 = v238;
              if (v239 == v238)
                goto LABEL_340;
              do
              {
                v169 = (void *)*--v166;
                v168 = v169;
                *v166 = 0;
                if (v169)
                  operator delete[](v168);
              }
              while (v166 != v165);
LABEL_339:
              v167 = v238;
              goto LABEL_340;
            }
            goto LABEL_341;
          }
        }
        else
        {
          v171 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v11 + 24));
          if ((mlir::MLIRContext::allowsUnregisteredDialects(v171) & 1) == 0)
          {
            v223 = 257;
            mlir::Operation::emitOpError((uint64_t *)v11, &v220, (uint64_t)&v232);
            if ((_QWORD)v232)
            {
              LODWORD(v215) = 3;
              v216 = "created with unregistered dialect. If this is intended, please call allowUnregisteredDialects() on "
                     "the MLIRContext, or use -allow-unregistered-dialect with the MLIR opt tool used";
              v217 = 178;
              v189 = (char *)v234;
              if (v235 >= v236)
              {
                v200 = v235 + 1;
                if (v234 <= &v215 && (char *)v234 + 24 * v235 > (char *)&v215)
                {
                  v206 = (char *)&v215 - (_BYTE *)v234;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v200, 24);
                  v189 = (char *)v234;
                  v190 = (const char **)((char *)v234 + v206);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, v237, v200, 24);
                  v190 = &v215;
                  v189 = (char *)v234;
                }
              }
              else
              {
                v190 = &v215;
              }
              v191 = &v189[24 * v235];
              v192 = *(_OWORD *)v190;
              *((_QWORD *)v191 + 2) = v190[2];
              *(_OWORD *)v191 = v192;
              ++v235;
            }
            v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
            if ((_QWORD)v232)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
            v2 = v12;
            if (!v242)
              goto LABEL_286;
            v193 = (_QWORD **)__p;
            if (__p)
            {
              v194 = v241;
              v195 = __p;
              if (v241 != __p)
              {
                do
                  v194 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v194 - 1);
                while (v194 != v193);
                v195 = __p;
              }
              v241 = v193;
              operator delete(v195);
            }
            v165 = v238;
            if (v238)
            {
              v196 = v239;
              v167 = v238;
              if (v239 != v238)
              {
                do
                {
                  v198 = (void *)*--v196;
                  v197 = v198;
                  *v196 = 0;
                  if (v198)
                    operator delete[](v197);
                }
                while (v196 != v165);
                goto LABEL_339;
              }
LABEL_340:
              v239 = v165;
              operator delete(v167);
            }
LABEL_341:
            if (v234 != v237)
              free(v234);
            goto LABEL_286;
          }
        }
        v56 = 1;
        goto LABEL_285;
      }
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v232, (mlir::Block *)(v228 & 0xFFFFFFFFFFFFFFF8));
      v48 = *((_QWORD *)&v232 + 1);
      if (*((_QWORD *)&v232 + 1))
      {
        v49 = (mlir::Block **)(v232 + 24);
        while (1)
        {
          v50 = mlir::Block::getParent(*v49);
          if (v50 != mlir::Block::getParent((mlir::Block *)v11))
            break;
          v49 += 4;
          if (!--v48)
            goto LABEL_75;
        }
        mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v11 + 32));
        v243 = (const void **)"branching to block of a different region";
        v246 = 259;
        mlir::Operation::emitOpError(v126, &v243, (uint64_t)&v232);
        v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
        if ((_QWORD)v232)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
        if (v242)
        {
          v127 = (_QWORD **)__p;
          if (__p)
          {
            v128 = v241;
            v129 = __p;
            if (v241 != __p)
            {
              do
                v128 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v128 - 1);
              while (v128 != v127);
              v129 = __p;
            }
            v241 = v127;
            operator delete(v129);
          }
          v60 = v238;
          if (v238)
          {
            v130 = v239;
            v62 = v238;
            if (v239 != v238)
            {
              do
              {
                v132 = (void *)*--v130;
                v131 = v132;
                *v130 = 0;
                if (v132)
                  operator delete[](v131);
              }
              while (v130 != v60);
              goto LABEL_279;
            }
LABEL_280:
            v239 = v60;
            operator delete(v62);
          }
          goto LABEL_281;
        }
        goto LABEL_3;
      }
LABEL_75:
      if (mlir::Block::getParent((mlir::Block *)v11))
      {
        v51 = mlir::Block::getParent((mlir::Block *)v11);
        v52 = *(_QWORD *)(v51 + 8);
        if (v52 == v51
          || *(_QWORD *)(v52 + 8) != v51
          || (v172 = mlir::Block::getParentOp((mlir::Block *)v11)) != 0
          && (mlir::OperationName::mightHaveTrait<mlir::OpTrait::NoTerminator>((void ***)(v172 + 48)) & 1) == 0)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v11 + 32));
          v54 = (mlir::Operation *)v53;
          if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>(v53 + 6) & 1) == 0)
          {
            mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v11 + 32));
            v243 = (const void **)"block with no terminator, has ";
            v246 = 259;
            mlir::Operation::emitError(v55, (uint64_t)&v243, (uint64_t)&v232);
            if ((_QWORD)v232)
              mlir::Diagnostic::operator<<((mlir::Diagnostic *)((char *)&v232 + 8), v54);
            v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v232);
            if ((_QWORD)v232)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v232);
            if (!v242)
              goto LABEL_3;
            v57 = (_QWORD **)__p;
            if (__p)
            {
              v58 = v241;
              v59 = __p;
              if (v241 != __p)
              {
                do
                  v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
                while (v58 != v57);
                v59 = __p;
              }
              v241 = v57;
              operator delete(v59);
            }
            v60 = v238;
            if (v238)
            {
              v61 = v239;
              v62 = v238;
              if (v239 == v238)
                goto LABEL_280;
              do
              {
                v64 = (void *)*--v61;
                v63 = v64;
                *v61 = 0;
                if (v64)
                  operator delete[](v63);
              }
              while (v61 != v60);
LABEL_279:
              v62 = v238;
              goto LABEL_280;
            }
LABEL_281:
            v170 = (const void **)v234;
            if (v234 == v237)
            {
LABEL_3:
              if (!v56)
                goto LABEL_363;
              goto LABEL_4;
            }
LABEL_2:
            free(v170);
            goto LABEL_3;
          }
        }
      }
    }
LABEL_4:
    v3 = v230;
    if (!(_DWORD)v230)
      goto LABEL_363;
  }
}

uint64_t sub_180447204()
{
  int v0;
  mlir::Operation *v2;
  void *v3;
  _anonymous_namespace_::OperationVerifier *v4;
  void *v5;
  _QWORD v6[2];
  int v7;

  if (v5 != v3)
    free(v5);
  if (!v0)
    return 0;
  if ((*((_DWORD *)v2 + 11) & 0x7FFFFF) != 0)
  {
    v6[0] = 0;
    v6[1] = 0;
    v7 = 0;
    mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase((uint64_t)v6);
  }
  return 1;
}

uint64_t `anonymous namespace'::OperationVerifier::verifyDominanceOfContainedRegions(_anonymous_namespace_::OperationVerifier *this, mlir::Operation *a2, mlir::DominanceInfo *a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  mlir::Block *v7;
  _BOOL4 isReachableFromEntry;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  const char *v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t DefiningOp;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char **v57;
  uint64_t v58;
  __int128 v59;
  mlir::Block *v60;
  mlir::Block *v61;
  mlir::Region *v62;
  mlir::Region *v63;
  mlir::Region *v64;
  const char *v65;
  mlir::Attribute *v66;
  mlir::Block *v67;
  mlir::Block *v68;
  mlir::Region *Parent;
  mlir::Region *v70;
  mlir::UnknownLoc *Context;
  mlir::MLIRContext *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  BOOL v82;
  uint64_t v83;
  unint64_t v84;
  BOOL v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  uint64_t v91;
  const char **v92;
  uint64_t v93;
  __int128 v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  const char **v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  _QWORD **v104;
  _QWORD **v105;
  void *v106;
  _QWORD *v107;
  _QWORD *v108;
  void *v109;
  void *v110;
  void *v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  BOOL v116;
  unint64_t v117;
  BOOL v118;
  unint64_t v119;
  BOOL v120;
  BOOL v121;
  int64_t v122;
  char *v123;
  char *v124;
  void *v125;
  int64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  _QWORD v133[4];
  __int16 v134;
  int v135;
  const char *v136;
  uint64_t v137;
  const char *v138;
  const char *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  _BYTE v143[33];
  __int128 v144;
  uint64_t v145;
  void *__p[2];
  uint64_t v147;
  unsigned __int8 v148;
  const char *v149;
  unint64_t v150;
  int v151;
  void *v152;
  uint64_t v153;
  _BYTE v154[96];
  __int128 v155;
  uint64_t v156;
  void *v157[2];
  uint64_t v158;
  char v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)a2 + 11);
  if ((v3 & 0x7FFFFF) == 0)
    return 1;
  v5 = (char *)a2 + 32 * *((unsigned int *)a2 + 10) + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 64;
  v130 = &v5[24 * (v3 & 0x7FFFFF)];
  while (1)
  {
    v6 = *((_QWORD *)v5 + 1);
    v131 = v5;
    if ((char *)v6 != v5)
      break;
LABEL_33:
    v5 += 24;
    if (v5 == v130)
      return 1;
  }
  while (1)
  {
    v7 = v6 ? (mlir::Block *)(v6 - 8) : 0;
    isReachableFromEntry = mlir::detail::DominanceInfoBase<false>::isReachableFromEntry((uint64_t)a3, v7);
    v9 = (mlir::Block *)((char *)v7 + 32);
    v10 = (mlir::GenericProgramPoint *)*((_QWORD *)v7 + 5);
    if (v10 != (mlir::Block *)((char *)v7 + 32))
      break;
LABEL_32:
    v6 = *(_QWORD *)(v6 + 8);
    v5 = v131;
    if ((char *)v6 == v131)
      goto LABEL_33;
  }
  v11 = isReachableFromEntry;
  while (1)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v10);
    v13 = v12;
    if (v11 && (*(_BYTE *)(v12 + 46) & 0x80) != 0)
    {
      v14 = (const char *)*(unsigned int *)(v12 + 68);
      if ((_DWORD)v14)
        break;
    }
LABEL_16:
    if (*(_BYTE *)this && (*(_DWORD *)(v13 + 44) & 0x7FFFFF) != 0)
    {
      if ((v18 & 1) == 0
      {
        v149 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
        v150 = 91;
        v19 = llvm::StringRef::find((uint64_t *)&v149, "DesiredTypeName = ", 0x12uLL, 0);
        if (v150 >= v19)
          v20 = v19;
        else
          v20 = v150;
        v21 = &v149[v20];
        v22 = v150 - v20;
        v23 = 18;
        if (v22 < 0x12)
          v23 = v22;
        v24 = v22 - v23;
        if (v24 >= v24 - 1)
          v25 = v24 - 1;
        else
          v25 = v24;
        mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
      }
      {
        return 0;
      }
    }
    v10 = (mlir::GenericProgramPoint *)*((_QWORD *)v10 + 1);
    if (v10 == v9)
      goto LABEL_32;
  }
  v15 = 0;
  v16 = *(_QWORD *)(v12 + 72);
  v17 = 24;
  while ((mlir::DominanceInfo::properlyDominates(a3, *(_QWORD *)(v16 + v17), (mlir::Block **)v13) & 1) != 0)
  {
    ++v15;
    v17 += 32;
    if (v14 == v15)
      goto LABEL_16;
  }
  v133[0] = "operand #";
  v134 = 259;
  mlir::Operation::emitError((uint64_t *)v13, (uint64_t)v133, (uint64_t)&v138);
  if (!v138)
  {
    v149 = 0;
    LOBYTE(v150) = 0;
    v159 = 0;
    if (!v148)
      goto LABEL_58;
LABEL_43:
    v150 = (unint64_t)v139;
    v151 = v140;
    v152 = v154;
    v153 = 0x400000000;
    v37 = v142;
    if (!(_DWORD)v142)
    {
      v38 = 1;
      goto LABEL_54;
    }
    if (v141 != v143)
    {
      v152 = v141;
      v153 = v142;
      v141 = v143;
      HIDWORD(v142) = 0;
      v38 = 1;
LABEL_53:
      LODWORD(v142) = 0;
LABEL_54:
      v155 = v144;
      v156 = v145;
      v145 = 0;
      v144 = 0uLL;
      *(_OWORD *)v157 = *(_OWORD *)__p;
      v158 = v147;
      __p[1] = 0;
      v147 = 0;
      __p[0] = 0;
      v159 = 1;
      if (v38)
      {
        if (v141 != v143)
          free(v141);
        v148 = 0;
      }
      goto LABEL_58;
    }
    if (v142 < 5)
    {
      v41 = v154;
      v40 = v143;
      v39 = v142;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, v154, v142, 24);
      v39 = v142;
      if (!(_DWORD)v142)
      {
LABEL_52:
        LODWORD(v153) = v37;
        v38 = v148;
        goto LABEL_53;
      }
      v40 = v141;
      v41 = v152;
    }
    memcpy(v41, v40, 24 * v39);
    goto LABEL_52;
  }
  v135 = 5;
  v136 = v15;
  v27 = &v135;
  v28 = (char *)v141;
  if (v142 >= HIDWORD(v142))
  {
    v112 = v142 + 1;
    if (v141 <= &v135 && (char *)v141 + 24 * v142 > (char *)&v135)
    {
      v122 = (char *)&v135 - (_BYTE *)v141;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v112, 24);
      v28 = (char *)v141;
      v27 = (int *)((char *)v141 + v122);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v112, 24);
      v27 = &v135;
      v28 = (char *)v141;
    }
  }
  v29 = &v28[24 * v142];
  v30 = *(_OWORD *)v27;
  *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
  *(_OWORD *)v29 = v30;
  v31 = (v142 + 1);
  LODWORD(v142) = v142 + 1;
  v32 = v138;
  if (v138)
  {
    v135 = 3;
    v136 = " does not dominate this use";
    v137 = 27;
    v33 = &v135;
    v34 = (char *)v141;
    if (v31 >= HIDWORD(v142))
    {
      v115 = v31 + 1;
      v116 = (char *)v141 + 24 * v31 > (char *)&v135;
      if (v141 <= &v135 && v116)
      {
        v126 = (char *)&v135 - (_BYTE *)v141;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v115, 24);
        v34 = (char *)v141;
        v33 = (int *)((char *)v141 + v126);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v115, 24);
        v33 = &v135;
        v34 = (char *)v141;
      }
    }
    v35 = &v34[24 * v142];
    v36 = *(_OWORD *)v33;
    *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
    *(_OWORD *)v35 = v36;
    LODWORD(v142) = v142 + 1;
    v32 = v138;
  }
  v149 = v32;
  LOBYTE(v150) = 0;
  v159 = 0;
  if (v148)
    goto LABEL_43;
LABEL_58:
  mlir::InFlightDiagnostic::abandon(&v138);
  if (v138)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v138);
  if (v148)
  {
    v42 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v43 = (_QWORD **)__p[1];
      v44 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p[0];
      }
      __p[1] = v42;
      operator delete(v44);
    }
    v45 = (_QWORD *)v144;
    if ((_QWORD)v144)
    {
      v46 = (_QWORD *)*((_QWORD *)&v144 + 1);
      v47 = (void *)v144;
      if (*((_QWORD *)&v144 + 1) != (_QWORD)v144)
      {
        do
        {
          v49 = (void *)*--v46;
          v48 = v49;
          *v46 = 0;
          if (v49)
            operator delete[](v48);
        }
        while (v46 != v45);
        v47 = (void *)v144;
      }
      *((_QWORD *)&v144 + 1) = v45;
      operator delete(v47);
    }
    if (v141 != v143)
      free(v141);
  }
  v133[0] = *(_QWORD *)(*(_QWORD *)(v13 + 72) + v17);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v133);
  if (!DefiningOp)
  {
    v66 = (mlir::Attribute *)(v13 + 24);
    v67 = *(mlir::Block **)(v13 + 16);
    v68 = *(mlir::Block **)(v133[0] + 16);
    Parent = (mlir::Region *)mlir::Block::getParent(v67);
    v70 = (mlir::Region *)mlir::Block::getParent(v68);
    Context = (mlir::UnknownLoc *)mlir::Attribute::getContext(v66);
    v73 = mlir::UnknownLoc::get(Context, v72);
    if (mlir::Block::getParentOp(v68))
      v73 = *(_QWORD *)(mlir::Block::getParentOp(v68) + 24);
    v74 = mlir::Diagnostic::attachNote((uint64_t *)&v150, v73, 1);
    v53 = v74;
    if (v70)
    {
      if (v67 == v68)
        llvm::report_fatal_error((llvm *)"Internal error in dominance verification", (const char *)1);
      v75 = (char *)*((_QWORD *)v70 + 1);
      v76 = (char *)v68 + 8;
      if (v75 == (char *)v68 + 8)
      {
        v77 = 0;
      }
      else
      {
        v77 = 0;
        do
        {
          ++v77;
          v75 = (char *)*((_QWORD *)v75 + 1);
        }
        while (v75 != v76);
      }
      v90 = *(_QWORD *)(v74 + 16);
      LODWORD(v138) = 3;
      v139 = "operand defined as a block argument (block #";
      v140 = 44;
      v91 = *(unsigned int *)(v74 + 24);
      v92 = &v138;
      if (v91 >= *(_DWORD *)(v74 + 28))
      {
        v117 = v91 + 1;
        v118 = v90 + 24 * v91 > (unint64_t)&v138;
        if (v90 <= (unint64_t)&v138 && v118)
        {
          v128 = (char *)&v138 - v90;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v74 + 16, (void *)(v74 + 32), v117, 24);
          v90 = *(_QWORD *)(v53 + 16);
          v92 = (const char **)&v128[v90];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v74 + 16, (void *)(v74 + 32), v117, 24);
          v90 = *(_QWORD *)(v53 + 16);
          v92 = &v138;
        }
      }
      v93 = v90 + 24 * *(unsigned int *)(v53 + 24);
      v94 = *(_OWORD *)v92;
      *(_QWORD *)(v93 + 16) = v92[2];
      *(_OWORD *)v93 = v94;
      v95 = *(_DWORD *)(v53 + 28);
      v96 = (*(_DWORD *)(v53 + 24) + 1);
      *(_DWORD *)(v53 + 24) = v96;
      LODWORD(v138) = 2;
      v139 = (const char *)v77;
      v97 = *(_QWORD *)(v53 + 16);
      v98 = &v138;
      if (v96 >= v95)
      {
        v119 = v96 + 1;
        v120 = v97 + 24 * v96 > (unint64_t)&v138;
        if (v97 <= (unint64_t)&v138 && v120)
        {
          v129 = (char *)&v138 - v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v53 + 16, (void *)(v53 + 32), v119, 24);
          v97 = *(_QWORD *)(v53 + 16);
          v98 = (const char **)&v129[v97];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v53 + 16, (void *)(v53 + 32), v119, 24);
          v97 = *(_QWORD *)(v53 + 16);
          v98 = &v138;
        }
      }
      v99 = v97 + 24 * *(unsigned int *)(v53 + 24);
      v100 = *(_OWORD *)v98;
      *(_QWORD *)(v99 + 16) = v98[2];
      *(_OWORD *)v99 = v100;
      v101 = (*(_DWORD *)(v53 + 24) + 1);
      *(_DWORD *)(v53 + 24) = v101;
      if (Parent == v70)
      {
        LODWORD(v138) = 3;
        v139 = " in the same region)";
        v140 = 20;
        v79 = *(_QWORD *)(v53 + 16);
        v80 = (char *)&v138;
        if (v101 < *(_DWORD *)(v53 + 28))
          goto LABEL_121;
      }
      else if (mlir::Region::isProperAncestor(v70, Parent))
      {
        LODWORD(v138) = 3;
        v139 = " in a parent region)";
        v140 = 20;
        v101 = *(unsigned int *)(v53 + 24);
        v79 = *(_QWORD *)(v53 + 16);
        v80 = (char *)&v138;
        if (v101 < *(_DWORD *)(v53 + 28))
          goto LABEL_121;
      }
      else if (mlir::Region::isProperAncestor(Parent, v70))
      {
        LODWORD(v138) = 3;
        v139 = " in a child region)";
        v140 = 19;
        v101 = *(unsigned int *)(v53 + 24);
        v79 = *(_QWORD *)(v53 + 16);
        v80 = (char *)&v138;
        if (v101 < *(_DWORD *)(v53 + 28))
          goto LABEL_121;
      }
      else
      {
        LODWORD(v138) = 3;
        v139 = " neither in a parent nor in a child region)";
        v140 = 43;
        v101 = *(unsigned int *)(v53 + 24);
        v79 = *(_QWORD *)(v53 + 16);
        v80 = (char *)&v138;
        if (v101 < *(_DWORD *)(v53 + 28))
          goto LABEL_121;
      }
      v84 = v101 + 1;
      v121 = v79 + 24 * v101 > (unint64_t)&v138;
      if (v79 > (unint64_t)&v138 || !v121)
      {
        v86 = (void *)(v53 + 32);
        v87 = v53 + 16;
        goto LABEL_158;
      }
      v124 = (char *)&v138 - v79;
      v125 = (void *)(v53 + 32);
      v87 = v53 + 16;
    }
    else
    {
      v87 = v74 + 16;
      v79 = *(_QWORD *)(v53 + 16);
      LODWORD(v138) = 3;
      v139 = " (block without parent)";
      v140 = 23;
      v88 = *(unsigned int *)(v53 + 24);
      v80 = (char *)&v138;
      if (v88 < *(_DWORD *)(v53 + 28))
        goto LABEL_121;
      v84 = v88 + 1;
      v89 = v79 + 24 * v88 > (unint64_t)&v138;
      if (v79 > (unint64_t)&v138 || !v89)
      {
        v86 = (void *)(v53 + 32);
        goto LABEL_158;
      }
      v124 = (char *)&v138 - v79;
      v125 = (void *)(v53 + 32);
    }
    goto LABEL_169;
  }
  v51 = DefiningOp;
  v52 = mlir::Diagnostic::attachNote((uint64_t *)&v150, *(_QWORD *)(DefiningOp + 24), 1);
  v53 = v52;
  v55 = v52 + 16;
  v54 = *(_QWORD *)(v52 + 16);
  LODWORD(v138) = 3;
  v139 = "operand defined here";
  v140 = 20;
  v56 = *(unsigned int *)(v52 + 24);
  v57 = &v138;
  if (v56 >= *(_DWORD *)(v52 + 28))
  {
    v113 = v56 + 1;
    v114 = v54 + 24 * v56 > (unint64_t)&v138;
    if (v54 <= (unint64_t)&v138 && v114)
    {
      v123 = (char *)&v138 - v54;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v52 + 16, (void *)(v52 + 32), v113, 24);
      v54 = *(_QWORD *)(v53 + 16);
      v57 = (const char **)&v123[v54];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v52 + 16, (void *)(v52 + 32), v113, 24);
      v54 = *(_QWORD *)(v53 + 16);
      v57 = &v138;
    }
  }
  v58 = v54 + 24 * *(unsigned int *)(v53 + 24);
  v59 = *(_OWORD *)v57;
  *(_QWORD *)(v58 + 16) = v57[2];
  *(_OWORD *)v58 = v59;
  ++*(_DWORD *)(v53 + 24);
  v60 = *(mlir::Block **)(v13 + 16);
  v61 = *(mlir::Block **)(v51 + 16);
  v62 = (mlir::Region *)mlir::Block::getParent(v60);
  v63 = (mlir::Region *)mlir::Block::getParent(v61);
  if (v60 != v61)
  {
    v64 = v63;
    if (v62 == v63)
    {
      LODWORD(v138) = 3;
      v65 = " (op in the same region)";
    }
    else
    {
      if (!mlir::Region::isProperAncestor(v63, v62))
      {
        if (mlir::Region::isProperAncestor(v62, v64))
        {
          LODWORD(v138) = 3;
          v139 = " (op in a child region)";
          v140 = 23;
          v83 = *(unsigned int *)(v53 + 24);
          v79 = *(_QWORD *)(v53 + 16);
          v80 = (char *)&v138;
          if (v83 < *(_DWORD *)(v53 + 28))
            goto LABEL_121;
        }
        else
        {
          LODWORD(v138) = 3;
          v139 = " (op is neither in a parent nor in a child region)";
          v140 = 50;
          v83 = *(unsigned int *)(v53 + 24);
          v79 = *(_QWORD *)(v53 + 16);
          v80 = (char *)&v138;
          if (v83 < *(_DWORD *)(v53 + 28))
            goto LABEL_121;
        }
        goto LABEL_96;
      }
      LODWORD(v138) = 3;
      v65 = " (op in a parent region)";
    }
    v139 = v65;
    v140 = 24;
    v83 = *(unsigned int *)(v53 + 24);
    v79 = *(_QWORD *)(v53 + 16);
    v80 = (char *)&v138;
    if (v83 < *(_DWORD *)(v53 + 28))
      goto LABEL_121;
LABEL_96:
    v84 = v83 + 1;
    v85 = v79 + 24 * v83 > (unint64_t)&v138;
    if (v79 > (unint64_t)&v138 || !v85)
    {
      v86 = (void *)(v53 + 32);
      v87 = v55;
LABEL_158:
      llvm::SmallVectorBase<unsigned int>::grow_pod(v87, v86, v84, 24);
      v79 = *(_QWORD *)(v53 + 16);
      v80 = (char *)&v138;
      goto LABEL_121;
    }
    v124 = (char *)&v138 - v79;
    v125 = (void *)(v53 + 32);
    v87 = v55;
LABEL_169:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v87, v125, v84, 24);
    v79 = *(_QWORD *)(v53 + 16);
    v80 = &v124[v79];
    goto LABEL_121;
  }
  LODWORD(v138) = 3;
  v139 = " (op in the same block)";
  v140 = 23;
  v78 = *(unsigned int *)(v53 + 24);
  v79 = *(_QWORD *)(v53 + 16);
  v80 = (char *)&v138;
  if (v78 >= *(_DWORD *)(v53 + 28))
  {
    v81 = v78 + 1;
    v82 = v79 + 24 * v78 > (unint64_t)&v138;
    if (v79 <= (unint64_t)&v138 && v82)
    {
      v127 = (char *)&v138 - v79;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v53 + 32), v81, 24);
      v79 = *(_QWORD *)(v53 + 16);
      v80 = &v127[v79];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v53 + 32), v81, 24);
      v79 = *(_QWORD *)(v53 + 16);
      v80 = (char *)&v138;
    }
  }
LABEL_121:
  v102 = v79 + 24 * *(unsigned int *)(v53 + 24);
  v103 = *(_OWORD *)v80;
  *(_QWORD *)(v102 + 16) = *((_QWORD *)v80 + 2);
  *(_OWORD *)v102 = v103;
  ++*(_DWORD *)(v53 + 24);
  if (v149)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v149);
  if (v159)
  {
    v104 = (_QWORD **)v157[0];
    if (v157[0])
    {
      v105 = (_QWORD **)v157[1];
      v106 = v157[0];
      if (v157[1] != v157[0])
      {
        do
          v105 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v105 - 1);
        while (v105 != v104);
        v106 = v157[0];
      }
      v157[1] = v104;
      operator delete(v106);
    }
    v107 = (_QWORD *)v155;
    if ((_QWORD)v155)
    {
      v108 = (_QWORD *)*((_QWORD *)&v155 + 1);
      v109 = (void *)v155;
      if (*((_QWORD *)&v155 + 1) != (_QWORD)v155)
      {
        do
        {
          v111 = (void *)*--v108;
          v110 = v111;
          *v108 = 0;
          if (v111)
            operator delete[](v110);
        }
        while (v108 != v107);
        v109 = (void *)v155;
      }
      *((_QWORD *)&v155 + 1) = v107;
      operator delete(v109);
    }
    if (v152 != v154)
      free(v152);
  }
  return 0;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>,llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>::try_emplace<llvm::detail::DenseSetEmpty&>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
    goto LABEL_22;
  v7 = *(_QWORD *)a1;
  v8 = v6 - 1;
  v9 = (37 * *a2) & (v6 - 1);
  v10 = (_QWORD *)(*(_QWORD *)a1 + 8 * v9);
  v11 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    v12 = 0;
    goto LABEL_9;
  }
  v13 = 0;
  v14 = 1;
  while (v11 != -4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v11 == -8192;
    if (v15)
      v13 = v10;
    v16 = v9 + v14++;
    v9 = v16 & v8;
    v10 = (_QWORD *)(v7 + 8 * (v16 & v8));
    v11 = *v10;
    if (*a2 == *v10)
      goto LABEL_3;
  }
  if (v13)
    v10 = v13;
  v17 = *(_DWORD *)(a1 + 8);
  if (4 * v17 + 4 >= 3 * v6)
  {
LABEL_22:
    v6 *= 2;
LABEL_23:
    llvm::DenseMap<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>::grow(a1, v6);
    v18 = *(_DWORD *)(a1 + 16);
    if (v18)
    {
      v19 = v18 - 1;
      v20 = (37 * *a2) & (v18 - 1);
      v10 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
      v21 = *v10;
      if (*a2 != *v10)
      {
        v22 = 0;
        v23 = 1;
        while (v21 != -4096)
        {
          if (v22)
            v24 = 0;
          else
            v24 = v21 == -8192;
          if (v24)
            v22 = v10;
          v25 = v20 + v23++;
          v20 = v25 & v19;
          v10 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v25 & v19));
          v21 = *v10;
          if (*a2 == *v10)
            goto LABEL_6;
        }
        if (v22)
          v10 = v22;
      }
    }
    else
    {
      v10 = 0;
    }
    goto LABEL_6;
  }
  if (v6 + ~v17 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_23;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v10 = *a2;
  v7 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 16);
  v12 = 1;
LABEL_9:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v7 + 8 * v6;
  *(_BYTE *)(a3 + 16) = v12;
}

void llvm::DenseMap<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *buffer;
  uint64_t v10;
  llvm *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      memset_pattern16(buffer, &unk_181232E00, 8 * v10);
    if ((_DWORD)v3)
    {
      v11 = v4;
      do
      {
        v14 = *(_QWORD *)v11;
        if ((*(_QWORD *)v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = *(_DWORD *)(a1 + 16) - 1;
          v16 = v15 & (37 * v14);
          v13 = (_QWORD *)(*(_QWORD *)a1 + 8 * v16);
          v17 = *v13;
          if (v14 != *v13)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v13;
              v21 = v16 + v19++;
              v16 = v21 & v15;
              v13 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v21 & v15));
              v17 = *v13;
              if (v14 == *v13)
                goto LABEL_14;
            }
            if (v18)
              v13 = v18;
          }
LABEL_14:
          *v13 = v14;
          ++*(_DWORD *)(a1 + 8);
        }
        v11 = (llvm *)((char *)v11 + 8);
      }
      while (v11 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v12)
    memset_pattern16(buffer, &unk_181232E00, 8 * v12);
}

_QWORD *llvm::ThreadPool::asyncImpl<void>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, std::future<void> *a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *result;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  std::future<void> v22[2];

  v22[1] = *(std::future<void> *)MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)a2[3];
  if (v7)
  {
    if (v7 == a2)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v18);
    }
    else
    {
      v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v19 = 0;
  }
  llvm::ThreadPool::createTaskAndFuture(v18, (uint64_t)v20);
  v8 = v19;
  if (v19 == v18)
  {
    v9 = 4;
    v8 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  std::mutex::lock((std::mutex *)(a1 + 104));
  if (v21)
  {
    if (v21 == v20)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v15);
    }
    else
    {
      v16 = v21;
      v21 = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = a3;
  std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::emplace_back<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>((_QWORD *)(a1 + 56), (uint64_t)v15);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_21:
  v12 = *(_DWORD *)(a1 + 264) + *(_DWORD *)(a1 + 96);
  std::mutex::unlock((std::mutex *)(a1 + 104));
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 168));
  llvm::ThreadPool::grow((pthread_rwlock_t **)a1, v12);
  a4->__state_ = (std::__assoc_sub_state *)v22[0];
  v22[0].__state_ = 0;
  std::future<void>::~future(v22);
  result = v21;
  if (v21 == v20)
  {
    v14 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void llvm::ThreadPool::createTaskAndFuture(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::promise<void> *v4;
  std::promise<void> *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::future<void> v12;
  std::promise<void> *v13;
  std::__shared_weak_count *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (std::promise<void> *)operator new(0x20uLL);
  v4[2].__state_ = 0;
  v4->__state_ = (std::__assoc_sub_state *)&unk_1E0E52120;
  v4[1].__state_ = 0;
  v5 = std::promise<void>::promise(v4 + 3);
  std::promise<void>::get_future(v5);
  v13 = v4 + 3;
  v14 = (std::__shared_weak_count *)v4;
  v6 = v15;
  v7 = (_QWORD *)a1[3];
  if (v7)
  {
    if (v7 == a1)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(*a1 + 24))(a1, v15);
    }
    else
    {
      v16 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v16 = 0;
  }
  std::pair<std::function<void ()(void)>,std::future<void>>::pair[abi:nn180100]<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::future<void>,0>(a2, (uint64_t *)&v13, &v12);
  if (v16 == v15)
  {
    v8 = 4;
    goto LABEL_10;
  }
  if (v16)
  {
    v8 = 5;
    v6 = v16;
LABEL_10:
    (*(void (**)(_QWORD *))(*v6 + 8 * v8))(v6);
  }
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::future<void>::~future(&v12);
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::emplace_back<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 102 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::__add_back_capacity((uint64_t)a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
    {
LABEL_7:
      if (v9 == a2)
      {
        *(_QWORD *)(v8 + 24) = v8;
        (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v8);
        v4 = a1[1];
        v5 = a1[2];
      }
      else
      {
        *(_QWORD *)(v8 + 24) = v9;
        *(_QWORD *)(a2 + 24) = 0;
      }
      goto LABEL_12;
    }
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
      goto LABEL_7;
  }
  *(_QWORD *)(v8 + 24) = 0;
LABEL_12:
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
  v10 = a1[4];
  v11 = a1[5] + 1;
  a1[5] = v11;
  v12 = v10 + v11;
  v13 = (_QWORD *)(v4 + 8 * (v12 / 0x66));
  v14 = *v13 + 40 * (v12 % 0x66);
  if (v5 == v4)
    v15 = 0;
  else
    v15 = v14;
  if (v15 == *v13)
    return *(v13 - 1) + 4040;
  else
    return v15 - 40;
}

void std::__shared_ptr_emplace<std::promise<void>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E52120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::promise<void>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E52120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<std::promise<void>>::__on_zero_shared()
{
  JUMPOUT(0x186DA1590);
}

uint64_t std::pair<std::function<void ()(void)>,std::future<void>>::pair[abi:nn180100]<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::future<void>,0>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[1];
  v14 = *a2;
  *a2 = 0;
  a2[1] = 0;
  v7 = v15;
  v8 = (uint64_t *)a2[5];
  if (v8)
  {
    if (v8 == a2 + 2)
    {
      v16 = v15;
      (*(void (**)(uint64_t *, _QWORD *))(*v8 + 24))(v8, v15);
      v5 = v14;
      v8 = v16;
    }
    else
    {
      v16 = (uint64_t *)a2[5];
      a2[5] = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new(0x38uLL);
  v10 = v9;
  *v9 = &off_1E0E505C0;
  v9[1] = v5;
  v9[2] = v6;
  if (v8)
  {
    if (v8 == v15)
    {
      v9[6] = v9 + 3;
      (*(void (**)(_QWORD *))(v15[0] + 24))(v15);
      v11 = v16;
      *(_QWORD *)(a1 + 24) = v10;
      if (v11 == v15)
      {
        v12 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_15;
        v12 = 5;
        v7 = v11;
      }
      (*(void (**)(uint64_t *))(*v7 + 8 * v12))(v7);
      goto LABEL_15;
    }
    v9[6] = v8;
    v16 = 0;
    *(_QWORD *)(a1 + 24) = v9;
  }
  else
  {
    v9[6] = 0;
    *(_QWORD *)(a1 + 24) = v9;
  }
LABEL_15:
  *(_QWORD *)(a1 + 32) = *a3;
  *a3 = 0;
  return a1;
}

_QWORD *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E0E505C0;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    return a1;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::~__func(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)__p = &off_1E0E505C0;
  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(__p);
  }
  else
  {
LABEL_10:
    operator delete(__p);
  }
}

_QWORD *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;

  v2 = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *v2 = &off_1E0E505C0;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)a1[6];
  if (v7)
  {
    if (v7 == a1 + 3)
    {
      v2[6] = v2 + 3;
      (*(void (**)(_QWORD *))(*v7 + 24))(v7);
    }
    else
    {
      v2[6] = (*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
    return v2;
  }
  else
  {
    v2[6] = 0;
    return v2;
  }
}

_QWORD *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;

  v4 = result[1];
  v3 = result[2];
  *a2 = &off_1E0E505C0;
  a2[1] = v4;
  a2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)result[6];
  if (v7)
  {
    if (v7 == result + 3)
    {
      a2[6] = a2 + 3;
      return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)result[6] + 24))(result[6]);
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v7 + 16))(result[6]);
      a2[6] = result;
    }
  }
  else
  {
    a2[6] = 0;
  }
  return result;
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(__p);
  }
  else
  {
LABEL_10:
    operator delete(__p);
  }
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    std::promise<void>::set_value(*(std::promise<void> **)(a1 + 8));
  }
  else
  {
    v3 = std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::target(v3);
  }
}

uint64_t std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  void *v92;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v76 = &v37[8 * v35];
            v43 = v76;
            if ((unint64_t)(v76 - v7) >= 0x20)
            {
              v77 = (v42 >> 3) + 1;
              v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v78];
              v7 += v78;
              v79 = (__int128 *)(v6 + 3);
              v80 = v76 + 16;
              v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v83 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v83;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_74;
      }
LABEL_84:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v92 = operator new(0xFF0uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v92);
      return;
    }
    v92 = operator new(0xFF0uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v92);
    v44 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v44 + 1);
    v8 = *v44;
    *(_QWORD *)(a1 + 8) = v44 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v45 = (v5 - v9) >> 2;
      if (v5 == v9)
        v45 = 1;
      if (!(v45 >> 61))
      {
        v46 = v45 >> 2;
        v47 = 8 * v45;
        v37 = (char *)operator new(8 * v45);
        v38 = &v37[8 * v46];
        v39 = &v37[v47];
        v48 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v48 & 0xFFFFFFFFFFFFFFF8];
          v49 = v48 - 8;
          if ((unint64_t)(v48 - 8) >= 0x38)
          {
            v84 = &v37[8 * v46];
            v50 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v49 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v50 = &v38[v86];
              v7 += v86;
              v87 = (__int128 *)(v44 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v50 = &v37[8 * v46];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v50 = v91;
            v50 += 8;
          }
          while (v50 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v37;
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v39;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_84;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_84;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v21];
  v27 = &v25[8 * v24];
  v28 = operator new(0xFF0uLL);
  v29 = v28;
  if (v21 != v24)
    goto LABEL_23;
  if (v20 >= 1)
  {
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v26 -= 8 * (v30 >> 1);
LABEL_23:
    *(_QWORD *)v26 = v28;
    v31 = v26 + 8;
    if (v18 != v19)
      goto LABEL_49;
    goto LABEL_24;
  }
  if (v18 == v19)
    v51 = 1;
  else
    v51 = v20 >> 2;
  if (v51 >> 61)
    goto LABEL_84;
  v52 = 8 * v51;
  v53 = (char *)operator new(8 * v51);
  v26 = &v53[8 * (v51 >> 2)];
  v27 = &v53[v52];
  operator delete(v25);
  v54 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  v25 = v53;
  *(_QWORD *)v26 = v29;
  v31 = v26 + 8;
  if (v18 != v54)
  {
    while (1)
    {
LABEL_49:
      if (v26 == v25)
      {
        if (v31 >= v27)
        {
          v61 = (v27 - v26) >> 2;
          if (v27 == v26)
            v61 = 1;
          if (v61 >> 61)
            goto LABEL_84;
          v62 = (v61 + 3) >> 2;
          v63 = 8 * v61;
          v64 = (char *)operator new(8 * v61);
          v25 = v64;
          v55 = &v64[8 * v62];
          v65 = v31 - v26;
          v40 = v31 == v26;
          v31 = v55;
          if (!v40)
          {
            v31 = &v55[v65 & 0xFFFFFFFFFFFFFFF8];
            v66 = v65 - 8;
            v67 = &v64[8 * v62];
            v68 = v26;
            if (v66 < 0x38)
              goto LABEL_87;
            v67 = &v64[8 * v62];
            v68 = v26;
            if ((unint64_t)(v67 - v26) < 0x20)
              goto LABEL_87;
            v69 = (v66 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v67 = &v55[v70];
            v68 = &v26[v70];
            v71 = (__int128 *)(v26 + 16);
            v72 = &v64[8 * v62 + 16];
            v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v74 = *v71;
              *((_OWORD *)v72 - 1) = *(v71 - 1);
              *(_OWORD *)v72 = v74;
              v71 += 2;
              v72 += 32;
              v73 -= 4;
            }
            while (v73);
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_87:
              do
              {
                v75 = *(_QWORD *)v68;
                v68 += 8;
                *(_QWORD *)v67 = v75;
                v67 += 8;
              }
              while (v67 != v31);
            }
          }
          v27 = &v64[v63];
          operator delete(v26);
        }
        else
        {
          v57 = (v27 - v31) >> 3;
          if (v57 >= -1)
            v58 = v57 + 1;
          else
            v58 = v57 + 2;
          v59 = &v31[8 * (v58 >> 1)];
          v55 = &v59[-(v31 - v26)];
          v60 = v31 - v26;
          v40 = v31 == v26;
          v31 = v59;
          if (!v40)
            memmove(v55, v26, v60);
          v25 = v26;
        }
      }
      else
      {
        v55 = v26;
      }
      v56 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v55 - 1) = v56;
      v32 = v55 - 8;
      v26 = v32;
      if (v18 == *(_QWORD *)(a1 + 8))
        goto LABEL_25;
    }
  }
LABEL_24:
  v32 = v26;
LABEL_25:
  v33 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v27;
  if (v33)
    operator delete(v33);
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_1E0E50F18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = off_1E0E50F18;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::operator()(uint64_t result)
{
  unsigned __int8 v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v1 = atomic_load(*(unsigned __int8 **)(result + 8));
  if ((v1 & 1) == 0)
  {
    v2 = result;
    v3 = *(unsigned int **)(result + 16);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    if (v4 < **(_DWORD **)(result + 24))
    {
      mlir::ParallelDiagnosticHandler::setOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(result + 32), v4);
    }
  }
  return result;
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12verifyOnExitE"
                     "RS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12ve"
                                "rifyOnExitERS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12verifyOnExitERS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12verifyOnExitERS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<`anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::target_type()
{
}

uint64_t mlir::OperationName::mightHaveTrait<mlir::OpTrait::NoTerminator>(void ***a1)
{
  unsigned __int8 v1;
  void **v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void ***v12;
  const char *v13;
  unint64_t v14;

  if ((v1 & 1) == 0)
  {
    v12 = a1;
    a1 = v12;
    if (v4)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoTerminator<Empty>]";
      v14 = 84;
      v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5)
        v6 = v5;
      else
        v6 = v14;
      v7 = &v13[v6];
      v8 = v14 - v6;
      if (v14 - v6 >= 0x12)
        v9 = 18;
      else
        v9 = v14 - v6;
      v10 = v8 - v9;
      if (v10 >= v10 - 1)
        v11 = v10 - 1;
      else
        v11 = v10;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      a1 = v12;
    }
  }
  v2 = *a1;
  if (v2[2] == &mlir::detail::TypeIDResolver<void,void>::id)
    return 1;
  else
    return (*((uint64_t (**)(void **, uint64_t))*v2 + 4))(v2, mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id);
}

uint64_t mlir::ForwardIterator::makeIterable(mlir::ForwardIterator *this, mlir::Operation *a2)
{
  unint64_t v2;

  v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) != 0)
    return (uint64_t)this
         + 32 * *((unsigned int *)this + 10)
         + 16 * ((v2 >> 23) & 1)
         + ((v2 >> 21) & 0x7F8)
         + 64;
  else
    return 0;
}

uint64_t mlir::detail::walk(uint64_t a1, void (*a2)(uint64_t, uint64_t, int *), uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  int v14;
  int v15;

  v6 = *(unsigned int *)(a1 + 44);
  v14 = v6 & 0x7FFFFF;
  v15 = 0;
  if ((v6 & 0x7FFFFF) != 0)
  {
    v7 = ((a1 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
    v8 = v7 + 24 * (v6 & 0x7FFFFF);
    do
    {
      a2(a3, a1, &v14);
      ++v15;
      for (i = *(_QWORD *)(v7 + 8); i != v7; i = *(_QWORD *)(i + 8))
      {
        v10 = i - 8;
        if (!i)
          v10 = 0;
        v11 = (mlir::GenericProgramPoint *)(v10 + 32);
        v12 = *(mlir::GenericProgramPoint **)(v10 + 40);
        if (v12 != (mlir::GenericProgramPoint *)(v10 + 32))
        {
          do
          {
            mlir::GenericProgramPoint::~GenericProgramPoint(v12);
            mlir::detail::walk();
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v12 + 1);
          }
          while (v12 != v11);
        }
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, int *))a2)(a3, a1, &v14);
}

uint64_t mlir::ConstantIntRanges::umax(mlir::ConstantIntRanges *this)
{
  return (uint64_t)this + 16;
}

uint64_t mlir::ConstantIntRanges::smin(mlir::ConstantIntRanges *this)
{
  return (uint64_t)this + 32;
}

uint64_t mlir::ConstantIntRanges::smax(mlir::ConstantIntRanges *this)
{
  return (uint64_t)this + 48;
}

uint64_t mlir::ConstantIntRanges::getStorageBitwidth(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = a1;
  if (mlir::Type::isIndex((mlir::Type *)&v5))
    return 64;
  v2 = v5;
  v3 = *(void **)(*(_QWORD *)v5 + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v2 = 0;
  v4 = v2;
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return mlir::IntegerType::getWidth((mlir::IntegerType *)&v4);
  else
    return 0;
}

void mlir::ConstantIntRanges::maxRange(mlir::ConstantIntRanges *this@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v2;
  void *v4;
  void *__p;
  unsigned int v6;
  void *v7;
  unsigned int v8;

  v2 = this;
  v8 = this;
  if (this > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v7, 0, 0);
    v6 = v2;
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, -1, 1);
  }
  else
  {
    v7 = 0;
    v6 = this;
    v4 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)this);
    if (!(_DWORD)this)
      v4 = 0;
    __p = v4;
  }
  mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v7, (const llvm::APInt *)&__p, a2);
  if (v6 >= 0x41 && __p)
    operator delete[](__p);
  if (v8 >= 0x41)
  {
    if (v7)
      operator delete[](v7);
  }
}

void mlir::ConstantIntRanges::fromUnsigned(mlir::ConstantIntRanges *this@<X0>, const llvm::APInt *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v7;
  char v8;
  uint64_t v9;
  mlir::ConstantIntRanges *v10;
  uint64_t v11;
  _BOOL4 v12;
  unsigned int v13;
  char v14;
  const llvm::APInt *v15;
  mlir::ConstantIntRanges *v16;
  unsigned int v17;
  mlir::ConstantIntRanges *v18;
  unsigned int v19;
  unsigned int v20;
  llvm::APInt *v21;
  unsigned int v22;
  llvm::APInt *v23;
  unsigned int v24;
  llvm::APInt *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  void *__p;
  unsigned int v35;
  void *v36;
  unsigned int v37;

  v7 = *((_DWORD *)this + 2);
  v37 = 1;
  v36 = 0;
  v35 = 1;
  __p = 0;
  v8 = v7 - 1;
  v9 = (v7 - 1) >> 6;
  v10 = (mlir::ConstantIntRanges *)(*(_QWORD *)this + 8 * v9);
  if (v7 < 0x41)
    v10 = this;
  v11 = 1 << v8;
  v12 = (*(_QWORD *)v10 & (1 << v8)) == 0;
  v13 = *((_DWORD *)a2 + 2);
  v14 = v13 - 1;
  if (v13 >= 0x41)
    v15 = (const llvm::APInt *)(*(_QWORD *)a2 + 8 * ((v13 - 1) >> 6));
  else
    v15 = a2;
  if (((v12 ^ (((*(_QWORD *)v15 >> v14) & 1) == 0)) & 1) != 0)
  {
    v33 = v7;
    if (v7 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v32, 0, 0);
      if (v33 > 0x40)
      {
        *(_QWORD *)(v32 + 8 * v9) |= v11;
        if (v37 < 0x41)
          goto LABEL_34;
LABEL_32:
        if (v36)
          operator delete[](v36);
LABEL_34:
        v36 = (void *)v32;
        v37 = v33;
        v33 = v7;
        if (v7 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v32, -1, 1);
          if (v33 > 0x40)
          {
            *(_QWORD *)(v32 + 8 * v9) &= ~v11;
            if (v35 < 0x41)
            {
LABEL_44:
              __p = (void *)v32;
              v19 = v33;
              goto LABEL_45;
            }
LABEL_42:
            if (__p)
              operator delete[](__p);
            goto LABEL_44;
          }
        }
        else
        {
          v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
          if (!v7)
            v27 = 0;
          v32 = v27;
        }
        v32 &= ~v11;
        if (v35 < 0x41)
          goto LABEL_44;
        goto LABEL_42;
      }
    }
    else
    {
      v32 = 0;
    }
    v32 |= v11;
    if (v37 < 0x41)
      goto LABEL_34;
    goto LABEL_32;
  }
  if ((int)llvm::APInt::compareSigned(this, a2) >= 0)
    v16 = a2;
  else
    v16 = this;
  v17 = *((_DWORD *)v16 + 2);
  if (v17 > 0x40)
  {
    llvm::APInt::assignSlowCase((const void **)&v36, (const void **)v16);
    if ((int)llvm::APInt::compareSigned(this, a2) <= 0)
      v18 = a2;
    else
      v18 = this;
  }
  else
  {
    v36 = *(void **)v16;
    v37 = v17;
    if ((int)llvm::APInt::compareSigned(this, a2) <= 0)
      v18 = a2;
    else
      v18 = this;
  }
  v19 = *((_DWORD *)v18 + 2);
  if (v19 > 0x40)
  {
    llvm::APInt::assignSlowCase((const void **)&__p, (const void **)v18);
    v20 = *((_DWORD *)this + 2);
    a3[2] = v20;
    if (v20 <= 0x40)
      goto LABEL_46;
LABEL_25:
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)this);
    v21 = (llvm::APInt *)(a3 + 4);
    v22 = *((_DWORD *)a2 + 2);
    a3[6] = v22;
    if (v22 <= 0x40)
      goto LABEL_47;
LABEL_26:
    llvm::APInt::initSlowCase(v21, (const void **)a2);
    v23 = (llvm::APInt *)(a3 + 8);
    v24 = v37;
    a3[10] = v37;
    if (v24 <= 0x40)
      goto LABEL_48;
    goto LABEL_27;
  }
  __p = *(void **)v18;
LABEL_45:
  v35 = v19;
  v28 = *((_DWORD *)this + 2);
  a3[2] = v28;
  if (v28 > 0x40)
    goto LABEL_25;
LABEL_46:
  *(_QWORD *)a3 = *(_QWORD *)this;
  v21 = (llvm::APInt *)(a3 + 4);
  v29 = *((_DWORD *)a2 + 2);
  a3[6] = v29;
  if (v29 > 0x40)
    goto LABEL_26;
LABEL_47:
  *(_QWORD *)v21 = *(_QWORD *)a2;
  v23 = (llvm::APInt *)(a3 + 8);
  v30 = v37;
  a3[10] = v37;
  if (v30 <= 0x40)
  {
LABEL_48:
    *(_QWORD *)v23 = v36;
    v25 = (llvm::APInt *)(a3 + 12);
    v31 = v35;
    a3[14] = v35;
    if (v31 <= 0x40)
      goto LABEL_49;
    goto LABEL_28;
  }
LABEL_27:
  llvm::APInt::initSlowCase(v23, (const void **)&v36);
  v25 = (llvm::APInt *)(a3 + 12);
  v26 = v35;
  a3[14] = v35;
  if (v26 <= 0x40)
  {
LABEL_49:
    *(_QWORD *)v25 = __p;
    goto LABEL_50;
  }
LABEL_28:
  llvm::APInt::initSlowCase(v25, (const void **)&__p);
  if (v35 >= 0x41 && __p)
    operator delete[](__p);
LABEL_50:
  if (v37 >= 0x41)
  {
    if (v36)
      operator delete[](v36);
  }
}

llvm::APInt *mlir::ConstantIntRanges::constant@<X0>(mlir::ConstantIntRanges *this@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v5;
  llvm::APInt *result;
  unsigned int v7;

  v5 = *((_DWORD *)this + 2);
  a2[2] = v5;
  if (v5 <= 0x40)
  {
    *(_QWORD *)a2 = *(_QWORD *)this;
    a2[6] = v5;
LABEL_4:
    *((_QWORD *)a2 + 2) = *(_QWORD *)this;
    a2[10] = v5;
LABEL_5:
    *((_QWORD *)a2 + 4) = *(_QWORD *)this;
    result = (llvm::APInt *)(a2 + 12);
    a2[14] = v5;
LABEL_6:
    *(_QWORD *)result = *(_QWORD *)this;
    return result;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)a2, (const void **)this);
  v5 = *((_DWORD *)this + 2);
  a2[6] = v5;
  if (v5 <= 0x40)
    goto LABEL_4;
  llvm::APInt::initSlowCase((llvm::APInt *)(a2 + 4), (const void **)this);
  v5 = *((_DWORD *)this + 2);
  a2[10] = v5;
  if (v5 <= 0x40)
    goto LABEL_5;
  llvm::APInt::initSlowCase((llvm::APInt *)(a2 + 8), (const void **)this);
  v7 = *((_DWORD *)this + 2);
  result = (llvm::APInt *)(a2 + 12);
  a2[14] = v7;
  if (v7 <= 0x40)
    goto LABEL_6;
  return (llvm::APInt *)llvm::APInt::initSlowCase(result, (const void **)this);
}

void mlir::ConstantIntRanges::range(mlir::ConstantIntRanges *this@<X0>, const llvm::APInt *a2@<X1>, const llvm::APInt *x2_0@<X2>, _DWORD *a3@<X8>)
{
  if ((_DWORD)x2_0)
    mlir::ConstantIntRanges::fromSigned(this, a2, a3);
  else
    mlir::ConstantIntRanges::fromUnsigned(this, a2, a3);
}

void mlir::ConstantIntRanges::fromSigned(mlir::ConstantIntRanges *this@<X0>, const llvm::APInt *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v7;
  mlir::ConstantIntRanges *v8;
  _BOOL4 v9;
  unsigned int v10;
  char v11;
  const llvm::APInt *v12;
  unint64_t v13;
  mlir::ConstantIntRanges *v14;
  unsigned int v15;
  mlir::ConstantIntRanges *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  llvm::APInt *v20;
  unsigned int v21;
  llvm::APInt *v22;
  unsigned int v23;
  llvm::APInt *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  unsigned int v31;
  void *v32;
  unsigned int v33;
  void *__p;
  unsigned int v35;

  v7 = *((_DWORD *)this + 2);
  v35 = 1;
  __p = 0;
  v33 = 1;
  v32 = 0;
  v8 = (mlir::ConstantIntRanges *)(*(_QWORD *)this + 8 * ((v7 - 1) >> 6));
  if (v7 < 0x41)
    v8 = this;
  v9 = ((*(_QWORD *)v8 >> (v7 - 1)) & 1) == 0;
  v10 = *((_DWORD *)a2 + 2);
  v11 = v10 - 1;
  if (v10 >= 0x41)
    v12 = (const llvm::APInt *)(*(_QWORD *)a2 + 8 * ((v10 - 1) >> 6));
  else
    v12 = a2;
  if (((v9 ^ (((*(_QWORD *)v12 >> v11) & 1) == 0)) & 1) == 0)
  {
    if ((int)llvm::APInt::compare(this, a2) >= 0)
      v14 = a2;
    else
      v14 = this;
    v15 = *((_DWORD *)v14 + 2);
    if (v15 > 0x40)
    {
      llvm::APInt::assignSlowCase((const void **)&__p, (const void **)v14);
      if ((int)llvm::APInt::compare(this, a2) <= 0)
        v16 = a2;
      else
        v16 = this;
    }
    else
    {
      __p = *(void **)v14;
      v35 = v15;
      if ((int)llvm::APInt::compare(this, a2) <= 0)
        v16 = a2;
      else
        v16 = this;
    }
    v18 = *((_DWORD *)v16 + 2);
    if (v18 > 0x40)
    {
      llvm::APInt::assignSlowCase((const void **)&v32, (const void **)v16);
      v26 = v35;
      a3[2] = v35;
      if (v26 <= 0x40)
        goto LABEL_37;
    }
    else
    {
      v32 = *(void **)v16;
      v33 = v18;
      v19 = v35;
      a3[2] = v35;
      if (v19 <= 0x40)
        goto LABEL_37;
    }
LABEL_31:
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&__p);
    v20 = (llvm::APInt *)(a3 + 4);
    v21 = v33;
    a3[6] = v33;
    if (v21 <= 0x40)
      goto LABEL_38;
LABEL_32:
    llvm::APInt::initSlowCase(v20, (const void **)&v32);
    v22 = (llvm::APInt *)(a3 + 8);
    v23 = *((_DWORD *)this + 2);
    a3[10] = v23;
    if (v23 <= 0x40)
      goto LABEL_39;
LABEL_33:
    llvm::APInt::initSlowCase(v22, (const void **)this);
    v24 = (llvm::APInt *)(a3 + 12);
    v25 = *((_DWORD *)a2 + 2);
    a3[14] = v25;
    if (v25 <= 0x40)
      goto LABEL_40;
LABEL_34:
    llvm::APInt::initSlowCase(v24, (const void **)a2);
    if (v33 < 0x41)
      goto LABEL_43;
    goto LABEL_41;
  }
  v31 = v7;
  if (v7 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
    if (v35 >= 0x41 && __p)
      operator delete[](__p);
    __p = v30;
    v35 = v31;
    v31 = v7;
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, -1, 1);
    if (v33 >= 0x41 && v32)
      operator delete[](v32);
  }
  else
  {
    __p = 0;
    v35 = v31;
    v31 = v7;
    v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7)
      v13 = 0;
    v30 = (void *)v13;
  }
  v32 = v30;
  v33 = v31;
  v17 = v35;
  a3[2] = v35;
  if (v17 > 0x40)
    goto LABEL_31;
LABEL_37:
  *(_QWORD *)a3 = __p;
  v20 = (llvm::APInt *)(a3 + 4);
  v27 = v33;
  a3[6] = v33;
  if (v27 > 0x40)
    goto LABEL_32;
LABEL_38:
  *(_QWORD *)v20 = v32;
  v22 = (llvm::APInt *)(a3 + 8);
  v28 = *((_DWORD *)this + 2);
  a3[10] = v28;
  if (v28 > 0x40)
    goto LABEL_33;
LABEL_39:
  *(_QWORD *)v22 = *(_QWORD *)this;
  v24 = (llvm::APInt *)(a3 + 12);
  v29 = *((_DWORD *)a2 + 2);
  a3[14] = v29;
  if (v29 > 0x40)
    goto LABEL_34;
LABEL_40:
  *(_QWORD *)v24 = *(_QWORD *)a2;
  if (v33 < 0x41)
    goto LABEL_43;
LABEL_41:
  if (v32)
    operator delete[](v32);
LABEL_43:
  if (v35 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

llvm::APInt *mlir::ConstantIntRanges::rangeUnion@<X0>(mlir::ConstantIntRanges *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  mlir::ConstantIntRanges *v6;
  char *v7;
  char *v8;
  llvm::APInt *v9;
  llvm::APInt *v10;
  unsigned int v11;
  llvm::APInt *v12;
  unsigned int v13;
  llvm::APInt *v14;
  unsigned int v15;
  llvm::APInt *result;
  unsigned int v17;
  const void **v18;
  llvm::APInt *v19;
  const void **v20;
  unsigned int v21;
  llvm::APInt *v22;
  const void **v23;
  unsigned int v24;
  llvm::APInt *v25;
  const void **v26;
  unsigned int v27;
  llvm::APInt *v28;
  const void **v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  const void *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  if (!*((_DWORD *)this + 2))
  {
    a3[2] = 0;
    *(_QWORD *)a3 = *(_QWORD *)this;
    v19 = (llvm::APInt *)(a3 + 4);
    v20 = (const void **)((char *)this + 16);
    v21 = *((_DWORD *)this + 6);
    a3[6] = v21;
    if (v21 > 0x40)
    {
      llvm::APInt::initSlowCase(v19, v20);
      v22 = (llvm::APInt *)(a3 + 8);
      v23 = (const void **)((char *)this + 32);
      v35 = *((_DWORD *)this + 10);
      a3[10] = v35;
      if (v35 > 0x40)
        goto LABEL_20;
    }
    else
    {
      *(_QWORD *)v19 = *v20;
      v22 = (llvm::APInt *)(a3 + 8);
      v23 = (const void **)((char *)this + 32);
      v24 = *((_DWORD *)this + 10);
      a3[10] = v24;
      if (v24 > 0x40)
      {
LABEL_20:
        llvm::APInt::initSlowCase(v22, v23);
        goto LABEL_30;
      }
    }
    *(_QWORD *)v22 = *v23;
LABEL_30:
    result = (llvm::APInt *)(a3 + 12);
    v18 = (const void **)((char *)this + 48);
    v36 = *((_DWORD *)this + 14);
    a3[14] = v36;
    if (v36 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v18);
    goto LABEL_31;
  }
  if (!*((_DWORD *)a2 + 2))
  {
    a3[2] = 0;
    *(_QWORD *)a3 = *(_QWORD *)a2;
    v25 = (llvm::APInt *)(a3 + 4);
    v26 = (const void **)((char *)a2 + 16);
    v27 = *((_DWORD *)a2 + 6);
    a3[6] = v27;
    if (v27 > 0x40)
    {
      llvm::APInt::initSlowCase(v25, v26);
      v28 = (llvm::APInt *)(a3 + 8);
      v29 = (const void **)((char *)a2 + 32);
      v37 = *((_DWORD *)a2 + 10);
      a3[10] = v37;
      if (v37 > 0x40)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)v25 = *v26;
      v28 = (llvm::APInt *)(a3 + 8);
      v29 = (const void **)((char *)a2 + 32);
      v30 = *((_DWORD *)a2 + 10);
      a3[10] = v30;
      if (v30 > 0x40)
      {
LABEL_23:
        llvm::APInt::initSlowCase(v28, v29);
        goto LABEL_35;
      }
    }
    *(_QWORD *)v28 = *v29;
LABEL_35:
    result = (llvm::APInt *)(a3 + 12);
    v18 = (const void **)((char *)a2 + 48);
    v38 = *((_DWORD *)a2 + 14);
    a3[14] = v38;
    if (v38 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v18);
LABEL_31:
    v34 = *v18;
    goto LABEL_32;
  }
  if ((int)llvm::APInt::compare(this, a2) >= 0)
    v6 = a2;
  else
    v6 = this;
  v7 = (char *)a2 + 16;
  if ((int)llvm::APInt::compare((mlir::ConstantIntRanges *)((char *)this + 16), (const mlir::ConstantIntRanges *)((char *)a2 + 16)) > 0)v7 = (char *)this + 16;
  v8 = (char *)this + 32;
  if ((int)llvm::APInt::compareSigned((mlir::ConstantIntRanges *)((char *)this + 32), (const mlir::ConstantIntRanges *)((char *)a2 + 32)) >= 0)v8 = (char *)a2 + 32;
  v9 = (mlir::ConstantIntRanges *)((char *)this + 48);
  v10 = (const mlir::ConstantIntRanges *)((char *)a2 + 48);
  if ((int)llvm::APInt::compareSigned(v9, v10) > 0)
    v10 = v9;
  v11 = *((_DWORD *)v6 + 2);
  a3[2] = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)v6);
    v12 = (llvm::APInt *)(a3 + 4);
    v31 = *((_DWORD *)v7 + 2);
    a3[6] = v31;
    if (v31 > 0x40)
    {
LABEL_14:
      llvm::APInt::initSlowCase(v12, (const void **)v7);
      v14 = (llvm::APInt *)(a3 + 8);
      v15 = *((_DWORD *)v8 + 2);
      a3[10] = v15;
      if (v15 > 0x40)
        goto LABEL_15;
      goto LABEL_26;
    }
  }
  else
  {
    *(_QWORD *)a3 = *(_QWORD *)v6;
    v12 = (llvm::APInt *)(a3 + 4);
    v13 = *((_DWORD *)v7 + 2);
    a3[6] = v13;
    if (v13 > 0x40)
      goto LABEL_14;
  }
  *(_QWORD *)v12 = *(_QWORD *)v7;
  v14 = (llvm::APInt *)(a3 + 8);
  v32 = *((_DWORD *)v8 + 2);
  a3[10] = v32;
  if (v32 > 0x40)
  {
LABEL_15:
    llvm::APInt::initSlowCase(v14, (const void **)v8);
    result = (llvm::APInt *)(a3 + 12);
    v17 = *((_DWORD *)v10 + 2);
    a3[14] = v17;
    if (v17 > 0x40)
    {
LABEL_16:
      v18 = (const void **)v10;
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v18);
    }
    goto LABEL_27;
  }
LABEL_26:
  *(_QWORD *)v14 = *(_QWORD *)v8;
  result = (llvm::APInt *)(a3 + 12);
  v33 = *((_DWORD *)v10 + 2);
  a3[14] = v33;
  if (v33 > 0x40)
    goto LABEL_16;
LABEL_27:
  v34 = *(const void **)v10;
LABEL_32:
  *(_QWORD *)result = v34;
  return result;
}

llvm::APInt *mlir::ConstantIntRanges::intersection@<X0>(mlir::ConstantIntRanges *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  mlir::ConstantIntRanges *v6;
  char *v7;
  char *v8;
  llvm::APInt *v9;
  llvm::APInt *v10;
  unsigned int v11;
  llvm::APInt *v12;
  unsigned int v13;
  llvm::APInt *v14;
  unsigned int v15;
  llvm::APInt *result;
  unsigned int v17;
  const void **v18;
  llvm::APInt *v19;
  const void **v20;
  unsigned int v21;
  llvm::APInt *v22;
  const void **v23;
  unsigned int v24;
  llvm::APInt *v25;
  const void **v26;
  unsigned int v27;
  llvm::APInt *v28;
  const void **v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  const void *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  if (!*((_DWORD *)this + 2))
  {
    a3[2] = 0;
    *(_QWORD *)a3 = *(_QWORD *)this;
    v19 = (llvm::APInt *)(a3 + 4);
    v20 = (const void **)((char *)this + 16);
    v21 = *((_DWORD *)this + 6);
    a3[6] = v21;
    if (v21 > 0x40)
    {
      llvm::APInt::initSlowCase(v19, v20);
      v22 = (llvm::APInt *)(a3 + 8);
      v23 = (const void **)((char *)this + 32);
      v35 = *((_DWORD *)this + 10);
      a3[10] = v35;
      if (v35 > 0x40)
        goto LABEL_20;
    }
    else
    {
      *(_QWORD *)v19 = *v20;
      v22 = (llvm::APInt *)(a3 + 8);
      v23 = (const void **)((char *)this + 32);
      v24 = *((_DWORD *)this + 10);
      a3[10] = v24;
      if (v24 > 0x40)
      {
LABEL_20:
        llvm::APInt::initSlowCase(v22, v23);
        goto LABEL_30;
      }
    }
    *(_QWORD *)v22 = *v23;
LABEL_30:
    result = (llvm::APInt *)(a3 + 12);
    v18 = (const void **)((char *)this + 48);
    v36 = *((_DWORD *)this + 14);
    a3[14] = v36;
    if (v36 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v18);
    goto LABEL_31;
  }
  if (!*((_DWORD *)a2 + 2))
  {
    a3[2] = 0;
    *(_QWORD *)a3 = *(_QWORD *)a2;
    v25 = (llvm::APInt *)(a3 + 4);
    v26 = (const void **)((char *)a2 + 16);
    v27 = *((_DWORD *)a2 + 6);
    a3[6] = v27;
    if (v27 > 0x40)
    {
      llvm::APInt::initSlowCase(v25, v26);
      v28 = (llvm::APInt *)(a3 + 8);
      v29 = (const void **)((char *)a2 + 32);
      v37 = *((_DWORD *)a2 + 10);
      a3[10] = v37;
      if (v37 > 0x40)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)v25 = *v26;
      v28 = (llvm::APInt *)(a3 + 8);
      v29 = (const void **)((char *)a2 + 32);
      v30 = *((_DWORD *)a2 + 10);
      a3[10] = v30;
      if (v30 > 0x40)
      {
LABEL_23:
        llvm::APInt::initSlowCase(v28, v29);
        goto LABEL_35;
      }
    }
    *(_QWORD *)v28 = *v29;
LABEL_35:
    result = (llvm::APInt *)(a3 + 12);
    v18 = (const void **)((char *)a2 + 48);
    v38 = *((_DWORD *)a2 + 14);
    a3[14] = v38;
    if (v38 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v18);
LABEL_31:
    v34 = *v18;
    goto LABEL_32;
  }
  if ((int)llvm::APInt::compare(this, a2) <= 0)
    v6 = a2;
  else
    v6 = this;
  v7 = (char *)a2 + 16;
  if ((int)llvm::APInt::compare((mlir::ConstantIntRanges *)((char *)this + 16), (const mlir::ConstantIntRanges *)((char *)a2 + 16)) < 0)v7 = (char *)this + 16;
  v8 = (char *)this + 32;
  if ((int)llvm::APInt::compareSigned((mlir::ConstantIntRanges *)((char *)this + 32), (const mlir::ConstantIntRanges *)((char *)a2 + 32)) <= 0)v8 = (char *)a2 + 32;
  v9 = (mlir::ConstantIntRanges *)((char *)this + 48);
  v10 = (const mlir::ConstantIntRanges *)((char *)a2 + 48);
  if ((int)llvm::APInt::compareSigned(v9, v10) < 0)
    v10 = v9;
  v11 = *((_DWORD *)v6 + 2);
  a3[2] = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)v6);
    v12 = (llvm::APInt *)(a3 + 4);
    v31 = *((_DWORD *)v7 + 2);
    a3[6] = v31;
    if (v31 > 0x40)
    {
LABEL_14:
      llvm::APInt::initSlowCase(v12, (const void **)v7);
      v14 = (llvm::APInt *)(a3 + 8);
      v15 = *((_DWORD *)v8 + 2);
      a3[10] = v15;
      if (v15 > 0x40)
        goto LABEL_15;
      goto LABEL_26;
    }
  }
  else
  {
    *(_QWORD *)a3 = *(_QWORD *)v6;
    v12 = (llvm::APInt *)(a3 + 4);
    v13 = *((_DWORD *)v7 + 2);
    a3[6] = v13;
    if (v13 > 0x40)
      goto LABEL_14;
  }
  *(_QWORD *)v12 = *(_QWORD *)v7;
  v14 = (llvm::APInt *)(a3 + 8);
  v32 = *((_DWORD *)v8 + 2);
  a3[10] = v32;
  if (v32 > 0x40)
  {
LABEL_15:
    llvm::APInt::initSlowCase(v14, (const void **)v8);
    result = (llvm::APInt *)(a3 + 12);
    v17 = *((_DWORD *)v10 + 2);
    a3[14] = v17;
    if (v17 > 0x40)
    {
LABEL_16:
      v18 = (const void **)v10;
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v18);
    }
    goto LABEL_27;
  }
LABEL_26:
  *(_QWORD *)v14 = *(_QWORD *)v8;
  result = (llvm::APInt *)(a3 + 12);
  v33 = *((_DWORD *)v10 + 2);
  a3[14] = v33;
  if (v33 > 0x40)
    goto LABEL_16;
LABEL_27:
  v34 = *(const void **)v10;
LABEL_32:
  *(_QWORD *)result = v34;
  return result;
}

uint64_t mlir::ConstantIntRanges::getConstantValue@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int v4;
  const void *v5;
  BOOL v6;
  llvm::APInt *v7;
  const void **v8;
  const void **v9;
  const void **v10;
  unsigned int v11;

  v2 = this;
  v4 = *(_DWORD *)(this + 8);
  if (v4 > 0x40)
  {
    this = llvm::APInt::equalSlowCase((const void **)this, (const void **)(this + 16));
    if ((this & 1) != 0)
    {
      *(_DWORD *)(a2 + 8) = v4;
      v7 = (llvm::APInt *)a2;
      v8 = (const void **)v2;
LABEL_17:
      this = (uint64_t)llvm::APInt::initSlowCase(v7, v8);
      *(_BYTE *)(a2 + 16) = 1;
      return this;
    }
  }
  else
  {
    v5 = *(const void **)this;
    if (v4)
      v6 = v5 == *(const void **)(this + 16);
    else
      v6 = 0;
    if (v6)
    {
      *(_DWORD *)(a2 + 8) = v4;
LABEL_14:
      *(_QWORD *)a2 = v5;
      *(_BYTE *)(a2 + 16) = 1;
      return this;
    }
  }
  v9 = (const void **)(v2 + 32);
  v10 = (const void **)(v2 + 48);
  v11 = *(_DWORD *)(v2 + 40);
  if (v11 <= 0x40)
  {
    if (v11)
    {
      v5 = *v9;
      if (*v9 == *v10)
      {
        *(_DWORD *)(a2 + 8) = v11;
        goto LABEL_14;
      }
    }
    goto LABEL_18;
  }
  this = llvm::APInt::equalSlowCase(v9, v10);
  if ((this & 1) != 0)
  {
    *(_DWORD *)(a2 + 8) = v11;
    v7 = (llvm::APInt *)a2;
    v8 = v9;
    goto LABEL_17;
  }
LABEL_18:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return this;
}

uint64_t mlir::InferTypeOpInterface::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6, a7, a8);
}

uint64_t mlir::detail::verifyInferredResultTypes(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t *v12;
  uint64_t InterfaceFor;
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  int64_t v38;
  const void **v39;
  __int16 v40;
  int v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE v50[96];
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  unint64_t v56;
  unint64_t v57[2];
  char *v58;
  uint64_t v59;
  _QWORD v60[5];

  v60[4] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 9);
  v4 = (char *)this - 16;
  if (!(_DWORD)v3)
    v4 = 0;
  v58 = v4;
  v59 = v3;
  mlir::OperandRange::getTypes((uint64_t *)&v58, &v44);
  v58 = (char *)v60;
  v59 = 0x400000000;
  v5 = v44;
  v6 = (uint64_t)v45;
  v8 = v46;
  v7 = v47;
  v9 = (_DWORD)v47 - (_DWORD)v45;
  if ((unint64_t)((_BYTE *)v47 - v45) < 5)
  {
    v10 = 0;
    v11 = v44 != v46;
    if (v47 != v45)
      goto LABEL_9;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, (_BYTE *)v47 - v45, 8);
    v10 = v59;
    v11 = v5 != v8;
    if (v7 != (void *)v6)
      goto LABEL_9;
  }
  if (!v11)
  {
    LODWORD(v59) = v10 + v9;
    goto LABEL_13;
  }
LABEL_9:
  v12 = (unint64_t *)&v58[8 * v10];
  if (v11)
  {
    while (1)
      *v12++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6++) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  do
    *v12++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6++) + 8) & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (void *)v6);
  LODWORD(v59) = v59 + v9;
  if (!this)
  {
    InterfaceFor = 0;
    Context = mlir::Attribute::getContext((mlir::Attribute *)0x18);
    v15 = MEMORY[0x18];
    if ((MEMORY[0x2E] & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_13:
  InterfaceFor = mlir::OpInterface<mlir::InferTypeOpInterface,mlir::detail::InferTypeOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
  Context = mlir::Attribute::getContext((mlir::detail *)((char *)this + 24));
  v15 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
LABEL_14:
    v16 = *((_QWORD *)this + 9);
    v17 = *((unsigned int *)this + 17);
    goto LABEL_15;
  }
LABEL_42:
  v16 = 0;
  v17 = 0;
LABEL_15:
  mlir::ValueRange::ValueRange(v57, v16, v17);
  v18 = *((_QWORD *)this + 7);
  v19 = *((unsigned int *)this + 11);
  if (HIBYTE(*((_DWORD *)this + 11)))
    v20 = (char *)this + 16 * ((v19 >> 23) & 1) + 64;
  else
    v20 = 0;
  v21 = v19 & 0x7FFFFF;
  if ((v19 & 0x7FFFFF) != 0)
  {
    v22 = (((unint64_t)this + 16 * ((v19 >> 23) & 1) + ((v19 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v22 = 0;
    v21 = 0;
  }
  mlir::ValueRange::ValueRange(&v56, v22, v21);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, char *))(InterfaceFor + 8))(Context, v15, 1, v57[0], v57[1], v18, v20);
  if (!(_BYTE)v23)
  {
    v40 = 257;
    mlir::Operation::emitOpError((uint64_t *)this, &v39, (uint64_t)&v44);
    if (v44)
    {
      v41 = 3;
      v42 = "failed to infer returned types";
      v43 = 30;
      v25 = &v41;
      v26 = (char *)v47;
      if (v48 >= v49)
      {
        v37 = v48 + 1;
        if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
        {
          v38 = (char *)&v41 - (_BYTE *)v47;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v37, 24);
          v26 = (char *)v47;
          v25 = (int *)((char *)v47 + v38);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v37, 24);
          v25 = &v41;
          v26 = (char *)v47;
        }
      }
      v27 = &v26[24 * v48];
      v28 = *(_OWORD *)v25;
      *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v27 = v28;
      ++v48;
      if (v44)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
    }
    if (v55)
    {
      v29 = (_QWORD **)__p;
      if (__p)
      {
        v30 = v54;
        v31 = __p;
        if (v54 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v54 = v29;
        operator delete(v31);
      }
      v32 = v51;
      if (v51)
      {
        v33 = v52;
        v34 = v51;
        if (v52 != v51)
        {
          do
          {
            v36 = (void *)*--v33;
            v35 = v36;
            *v33 = 0;
            if (v36)
              operator delete[](v35);
          }
          while (v33 != v32);
          v34 = v51;
        }
        v52 = v32;
        operator delete(v34);
      }
      if (v47 != v50)
        free(v47);
    }
  }
  if (v58 != (char *)v60)
    free(v58);
  return v23;
}

uint64_t mlir::OpInterface<mlir::InferTypeOpInterface,mlir::detail::InferTypeOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
          v31 = 76;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
          v31 = 76;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v23 = 76;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[153];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

const char *mlir::memref::MemRefDialect::initialize(mlir::memref::MemRefDialect *this)
{
  char *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  const char *result;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  unint64_t v18;

  mlir::Dialect::addOperations<mlir::memref::AssumeAlignmentOp,mlir::memref::AtomicRMWOp,mlir::memref::AtomicYieldOp,mlir::memref::CopyOp,mlir::memref::GenericAtomicRMWOp,mlir::memref::LoadOp,mlir::memref::AllocOp,mlir::memref::AllocaOp,mlir::memref::AllocaScopeOp,mlir::memref::AllocaScopeReturnOp,mlir::memref::CastOp,mlir::memref::CollapseShapeOp,mlir::memref::DeallocOp,mlir::memref::DimOp,mlir::memref::DmaStartOp,mlir::memref::DmaWaitOp,mlir::memref::ExpandShapeOp,mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::memref::ExtractStridedMetadataOp,mlir::memref::GetGlobalOp,mlir::memref::GlobalOp,mlir::memref::MemorySpaceCastOp,mlir::memref::PrefetchOp,mlir::memref::RankOp,mlir::memref::ReallocOp,mlir::memref::ReinterpretCastOp,mlir::memref::ReshapeOp,mlir::memref::StoreOp,mlir::memref::TransposeOp,mlir::memref::ViewOp,mlir::memref::SubViewOp>((uint64_t)this);
  v2 = (char *)operator new(0x18uLL);
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v16 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v8 = v7;
    v2 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      v18 = 79;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v16;
    }
  }
  v5 = v4[157];
  *((_QWORD *)v2 + 1) = this;
  *((_QWORD *)v2 + 2) = v5;
  *(_QWORD *)v2 = off_1E0E18EC0;
  v17 = v2;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

mlir::memref::MemRefDialect *mlir::memref::MemRefDialect::MemRefDialect(mlir::memref::MemRefDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v6;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"memref", 6, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id);
  *v3 = off_1E0E4EB00;
  v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"arith", 5))
  {
    v6 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v6);
  }
  mlir::memref::MemRefDialect::initialize(this);
  return this;
}

void mlir::memref::MemRefDialect::~MemRefDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_18044B010(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::memref::AssumeAlignmentOp,mlir::memref::AtomicRMWOp,mlir::memref::AtomicYieldOp,mlir::memref::CopyOp,mlir::memref::GenericAtomicRMWOp,mlir::memref::LoadOp,mlir::memref::AllocOp,mlir::memref::AllocaOp,mlir::memref::AllocaScopeOp,mlir::memref::AllocaScopeReturnOp,mlir::memref::CastOp,mlir::memref::CollapseShapeOp,mlir::memref::DeallocOp,mlir::memref::DimOp,mlir::memref::DmaStartOp,mlir::memref::DmaWaitOp,mlir::memref::ExpandShapeOp,mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::memref::ExtractStridedMetadataOp,mlir::memref::GetGlobalOp,mlir::memref::GlobalOp,mlir::memref::MemorySpaceCastOp,mlir::memref::PrefetchOp,mlir::memref::RankOp,mlir::memref::ReallocOp,mlir::memref::ReinterpretCastOp,mlir::memref::ReshapeOp,mlir::memref::StoreOp,mlir::memref::TransposeOp,mlir::memref::ViewOp,mlir::memref::SubViewOp>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t result;
  _QWORD *v42;

  mlir::RegisteredOperationName::insert<mlir::memref::AssumeAlignmentOp>(a1);
  v2 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::AtomicRMWOp::getAttributeNames(void)::attrNames, 1);
  v3 = (uint64_t)v42;
  v42 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::memref::AtomicYieldOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::memref::CopyOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::memref::GenericAtomicRMWOp>(a1);
  v4 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::LoadOp::getAttributeNames(void)::attrNames, 1);
  v5 = (uint64_t)v42;
  v42 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::AllocOp::getAttributeNames(void)::attrNames, 2);
  v7 = (uint64_t)v42;
  v42 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::AllocaOp::getAttributeNames(void)::attrNames, 2);
  v9 = (uint64_t)v42;
  v42 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  mlir::RegisteredOperationName::insert<mlir::memref::AllocaScopeOp>(a1);
  v10 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v11 = (uint64_t)v42;
  v42 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v13 = (uint64_t)v42;
  v42 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::CollapseShapeOp::getAttributeNames(void)::attrNames, 1);
  v15 = (uint64_t)v42;
  v42 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  mlir::RegisteredOperationName::insert<mlir::memref::DeallocOp>(a1);
  v16 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::Model(v16, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v17 = (uint64_t)v42;
  v42 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  mlir::RegisteredOperationName::insert<mlir::memref::DmaStartOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::memref::DmaWaitOp>(a1);
  v18 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::Model(v18, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::ExpandShapeOp::getAttributeNames(void)::attrNames, 1);
  v19 = (uint64_t)v42;
  v42 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::Model(v20, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v21 = (uint64_t)v42;
  v42 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::Model(v22, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v23 = (uint64_t)v42;
  v42 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::Model(v24, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::GetGlobalOp::getAttributeNames(void)::attrNames, 1);
  v25 = (uint64_t)v42;
  v42 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  mlir::RegisteredOperationName::insert<mlir::memref::GlobalOp>(a1);
  v26 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::Model(v26, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v27 = (uint64_t)v42;
  v42 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  mlir::RegisteredOperationName::insert<mlir::memref::PrefetchOp>(a1);
  v28 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::Model(v28, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v29 = (uint64_t)v42;
  v42 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  mlir::RegisteredOperationName::insert<mlir::memref::ReallocOp>(a1);
  v30 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::Model(v30, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::ReinterpretCastOp::getAttributeNames(void)::attrNames, 4);
  v31 = (uint64_t)v42;
  v42 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::Model(v32, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v33 = (uint64_t)v42;
  v42 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::Model(v34, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::StoreOp::getAttributeNames(void)::attrNames, 1);
  v35 = (uint64_t)v42;
  v42 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::Model(v36, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::TransposeOp::getAttributeNames(void)::attrNames, 1);
  v37 = (uint64_t)v42;
  v42 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::Model(v38, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v39 = (uint64_t)v42;
  v42 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::Model(v40, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::SubViewOp::getAttributeNames(void)::attrNames, 4);
  result = (uint64_t)v42;
  v42 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::AssumeAlignmentOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.assume_alignment", 23, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AssumeAlignmentOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E43BA8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::memref::AssumeAlignmentOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::AtomicYieldOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.atomic_yield", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AtomicYieldOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E43950;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::CopyOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.copy", 11, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::CopyOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E442B0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::GenericAtomicRMWOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.generic_atomic_rmw", 25, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::GenericAtomicRMWOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E43E00;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::AllocaScopeOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.alloca_scope", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E43888;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::DeallocOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.dealloc", 14, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::DeallocOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E448F0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::DmaStartOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.dma_start", 16, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::DmaStartOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E434A0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::DmaWaitOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.dma_wait", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::DmaWaitOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E449B8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::GlobalOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.global", 13, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::GlobalOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E44828;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::memref::GlobalOp::getAttributeNames(void)::attrNames, 6);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::PrefetchOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.prefetch", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::PrefetchOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E43568;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::memref::PrefetchOp::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::ReallocOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.realloc", 14, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ReallocOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E44A80;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::memref::ReallocOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::AssumeAlignmentOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::AssumeAlignmentOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AssumeAlignmentOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::AssumeAlignmentOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AssumeAlignmentOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AssumeAlignmentOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::AssumeAlignmentOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AssumeAlignmentOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::memref::AssumeAlignmentOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::memref::AssumeAlignmentOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.atomic_rmw", 17, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AtomicRMWOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E43630;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::AtomicRMWOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::AtomicRMWOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AtomicRMWOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::AtomicRMWOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AtomicRMWOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AtomicRMWOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::AtomicRMWOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::AtomicRMWOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::AtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.atomic_rmw";
  v16[1] = 17;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::AtomicRMWOp::getEffects((uint64_t)&v3, a3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::AtomicRMWOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::AtomicRMWOp::fold((uint64_t)&v13);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  void **p_vtable;
  void *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __guard v123;
  __guard v124;
  __guard v125;
  __guard v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  const char *v162;
  unint64_t v163;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v153;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v163 = 81;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[211];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v163 = 104;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = p_vtable[501];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[196];
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v163 = 97;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[303];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[192];
  v20 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v163 = 89;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[481];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v163 = 90;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[152];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v26[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AtomicRMWOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::memref::AtomicRMWOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::AtomicRMWOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::AtomicYieldOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __guard v140;
  __guard v141;
  __guard v142;
  __guard v143;
  __guard v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v186 = 83;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[181];
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<Empty>]";
      v186 = 121;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[495];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = p_vtable[486];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[504];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[158];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v186 = 84;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v29[190] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroResults<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OneOperand<mlir::memref::AtomicYieldOp>,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OpInvariants<mlir::memref::AtomicYieldOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::AtomicYieldOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::IsTerminator<mlir::memref::AtomicYieldOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::memref::AtomicYieldOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroResults<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OneOperand<mlir::memref::AtomicYieldOp>,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OpInvariants<mlir::memref::AtomicYieldOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::AtomicYieldOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::IsTerminator<mlir::memref::AtomicYieldOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::OpTrait::impl *v9;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>::verifyTrait((uint64_t *)a1)
    && (v9 = a1, mlir::OpTrait::impl::verifyIsIdempotent((mlir::OpTrait::impl *)&v9, v6)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::GenericAtomicRMWOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "memref.generic_atomic_rmw";
  v37[1] = 25;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

uint64_t mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  mlir::Operation *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::CopyOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::CopyOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getSource;
  v2[1] = mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getTarget;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CopyOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CopyOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[497], v2);
}

uint64_t mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

uint64_t mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::CopyOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  mlir::Operation *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  mlir::memref::detail::CopyOpGenericAdaptorBase::CopyOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::CopyOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  __guard *v23;
  __guard v24;
  unsigned __int8 v25;
  uint64_t *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __guard v117;
  __guard v118;
  __guard v119;
  __guard v120;
  __guard v121;
  __guard v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v153;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v163 = 83;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v163 = 90;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[208];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[192];
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CopyOpInterface::Trait<Empty>]";
      v163 = 85;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::CopyOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CopyOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[499];
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsElementType<Empty>]";
      v163 = 95;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[501];
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsShape<Empty>]";
      v163 = 89;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[503];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v26[158] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::CopyOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CopyOp>,mlir::OpTrait::ZeroResults<mlir::memref::CopyOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CopyOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::CopyOp>,mlir::OpTrait::OpInvariants<mlir::memref::CopyOp>,mlir::CopyOpInterface::Trait<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsElementType<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsShape<mlir::memref::CopyOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CopyOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CopyOp>,mlir::OpTrait::ZeroResults<mlir::memref::CopyOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CopyOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::CopyOp>,mlir::OpTrait::OpInvariants<mlir::memref::CopyOp>,mlir::CopyOpInterface::Trait<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsElementType<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsShape<mlir::memref::CopyOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CopyOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v8 = a1, mlir::memref::CopyOp::verifyInvariantsImpl((uint64_t **)&v8))
    && mlir::OpTrait::impl::verifySameOperandsElementType(a1, v5))
  {
    return mlir::OpTrait::impl::verifySameOperandsShape(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::foldHook()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm **v4;
  llvm *v6[2];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0)
        v4 = v6;
      else
        v4 = (llvm **)v6[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::memref::GenericAtomicRMWOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.generic_atomic_rmw";
  v16[1] = 25;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::GenericAtomicRMWOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  void **p_vtable;
  void *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __guard v133;
  __guard v134;
  __guard v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v186 = 81;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[210];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v186 = 104;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = p_vtable[501];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v186 = 97;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[197];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v186 = 83;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[184];
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref:"
             ":AtomicYieldOp>::Impl<Empty>]";
      v186 = 136;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[505];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[192];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v186 = 90;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[152];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v29[158] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::memref::GenericAtomicRMWOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneResult<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OpInvariants<mlir::memref::GenericAtomicRMWOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::memref::GenericAtomicRMWOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneResult<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OpInvariants<mlir::memref::GenericAtomicRMWOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
  {
    return 0;
  }
  v6 = a1;
  return mlir::memref::GenericAtomicRMWOp::verifyInvariantsImpl((uint64_t **)&v6) != 0;
}

uint64_t mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  const char *v3;
  _QWORD *i;
  uint64_t v5;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  const void **v42[4];
  __int16 v43;
  int v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[3];
  void *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[96];
  void *v52;
  _QWORD *v53;
  void *__p;
  _QWORD **v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 44);
  v2 = v1 & 0x7FFFFF;
  if ((v1 & 0x7FFFFF) == 0)
    return 1;
  v3 = 0;
  for (i = (_QWORD *)(((a1 + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(a1 + 40)); ; i += 3)
  {
    if (i == (_QWORD *)*i)
      goto LABEL_3;
    v5 = i[1];
    if (i == (_QWORD *)v5 || i != *(_QWORD **)(v5 + 8))
      break;
    if (*(_QWORD *)(v5 + 24) == v5 + 24)
    {
      v43 = 257;
      mlir::Operation::emitOpError((uint64_t *)a1, v42, (uint64_t)v47);
      if (v47[0])
      {
        v44 = 3;
        v45 = "expects a non-empty block";
        v46 = 25;
        v6 = &v44;
        v7 = (char *)v48;
        if (v49 >= v50)
        {
          v38 = v49 + 1;
          if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
          {
            v41 = (char *)&v44 - (_BYTE *)v48;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
            v7 = (char *)v48;
            v6 = (int *)((char *)v48 + v41);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
            v6 = &v44;
            v7 = (char *)v48;
          }
        }
        v8 = &v7[24 * v49];
        v9 = *(_OWORD *)v6;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v8 = v9;
        ++v49;
      }
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      if (v56)
      {
        v11 = (_QWORD **)__p;
        if (__p)
        {
          v12 = v55;
          v13 = __p;
          if (v55 != __p)
          {
            do
              v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
            while (v12 != v11);
            v13 = __p;
          }
          v55 = v11;
          operator delete(v13);
        }
        v14 = v52;
        if (!v52)
          goto LABEL_47;
        v15 = v53;
        v16 = v52;
        if (v53 == v52)
          goto LABEL_46;
        do
        {
          v18 = (void *)*--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            operator delete[](v17);
        }
        while (v15 != v14);
        goto LABEL_45;
      }
      return v10;
    }
LABEL_3:
    if ((const char *)v2 == ++v3)
      return 1;
  }
  v42[0] = (const void **)"expects region #";
  v43 = 259;
  mlir::Operation::emitOpError((uint64_t *)a1, v42, (uint64_t)v47);
  if (v47[0])
  {
    v44 = 5;
    v45 = v3;
    v19 = &v44;
    v20 = (char *)v48;
    if (v49 >= v50)
    {
      v35 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        v39 = (char *)&v44 - (_BYTE *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v35, 24);
        v20 = (char *)v48;
        v19 = (int *)((char *)v48 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v35, 24);
        v19 = &v44;
        v20 = (char *)v48;
      }
    }
    v21 = &v20[24 * v49];
    v22 = *(_OWORD *)v19;
    *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
    *(_OWORD *)v21 = v22;
    v23 = ++v49;
    if (v47[0])
    {
      v44 = 3;
      v45 = " to have 0 or 1 blocks";
      v46 = 22;
      v24 = &v44;
      v25 = (char *)v48;
      if (v23 >= v50)
      {
        v36 = v23 + 1;
        v37 = (char *)v48 + 24 * v23 > (char *)&v44;
        if (v48 <= &v44 && v37)
        {
          v40 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v36, 24);
          v25 = (char *)v48;
          v24 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v36, 24);
          v24 = &v44;
          v25 = (char *)v48;
        }
      }
      v26 = &v25[24 * v49];
      v27 = *(_OWORD *)v24;
      *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
      *(_OWORD *)v26 = v27;
      ++v49;
    }
  }
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
  if (v47[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  if (v56)
  {
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v55;
      v30 = __p;
      if (v55 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v55 = v28;
      operator delete(v30);
    }
    v14 = v52;
    if (!v52)
      goto LABEL_47;
    v31 = v53;
    v16 = v52;
    if (v53 == v52)
    {
LABEL_46:
      v53 = v14;
      operator delete(v16);
LABEL_47:
      if (v48 != v51)
        free(v48);
      return v10;
    }
    do
    {
      v33 = (void *)*--v31;
      v32 = v33;
      *v31 = 0;
      if (v33)
        operator delete[](v32);
    }
    while (v31 != v14);
LABEL_45:
    v16 = v52;
    goto LABEL_46;
  }
  return v10;
}

BOOL mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyInferredResultTypes(a1, v2) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AttrData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  BOOL v33;
  char *v34;
  const void **v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  _QWORD v41[4];
  __int16 v42;
  _QWORD v43[4];
  __int16 v44;
  const void **v45[4];
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!(_DWORD)v1)
    return 1;
  v3 = 0;
  v4 = a1 + 64;
  v5 = 24 * v1;
  while (1)
  {
    v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0)
      break;
    v7 = (_QWORD *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (_QWORD *)*v7)
      goto LABEL_8;
LABEL_3:
    v3 += 3;
    if ((_QWORD *)v5 == v3)
      return 1;
  }
  v7 = v3;
  if (v3 == (_QWORD *)*v3)
    goto LABEL_3;
LABEL_8:
  v8 = v7[1];
  if (v8)
    v9 = v8 - 8;
  else
    v9 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v9 + 32));
  v11 = *(_QWORD *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AtomicYieldOp,void>::id)
    goto LABEL_3;
  v40 = 1283;
  v39[0] = "expects regions to end with '";
  v39[2] = "memref.atomic_yield";
  v39[3] = 19;
  v41[0] = v39;
  v41[2] = "', found '";
  v42 = 770;
  v47 = *(_QWORD *)(v11 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v47);
  v43[0] = v41;
  v43[2] = AttrData;
  v43[3] = v13;
  v44 = 1282;
  v45[0] = (const void **)v43;
  v45[2] = (const void **)"'";
  v46 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v45, (uint64_t)&v47);
  v14 = mlir::Diagnostic::attachNote(&v48, 0, 0);
  v15 = v14 + 16;
  v16 = *(_QWORD *)(v14 + 16);
  LODWORD(v35) = 3;
  v36 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  v37 = 61;
  v17 = *(unsigned int *)(v14 + 24);
  v18 = &v35;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    v32 = v17 + 1;
    v33 = v16 + 24 * v17 > (unint64_t)&v35;
    if (v16 <= (unint64_t)&v35 && v33)
    {
      v34 = (char *)&v35 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = (const void ***)&v34[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = &v35;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  v38 = 262;
  v35 = (const void **)"memref.atomic_yield";
  v36 = 19;
  v21 = mlir::Diagnostic::operator<<(v14, &v35);
  mlir::Diagnostic::operator<<(v21, 39);
  v22 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v47)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  if (v55)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v54;
      v25 = __p;
      if (v54 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v54 = v23;
      operator delete(v25);
    }
    v26 = v51;
    if (v51)
    {
      v27 = v52;
      v28 = v51;
      if (v52 != v51)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v51;
      }
      v52 = v26;
      operator delete(v28);
    }
    if (v49 != &v50)
      free(v49);
  }
  return v22;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.load", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::LoadOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E44378;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::LoadOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::LoadOp::getInherentAttr(Context, v8, a3, a4);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::LoadOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::LoadOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::LoadOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::LoadOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::LoadOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::loadsFrom;
  v2[1] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::storesTo;
  v2[2] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getStored;
  v2[3] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canUsesBeRemoved;
  v2[4] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::removeBlockingUses;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface]";
      v15 = 80;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[507], v2);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::loadsFrom(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::memref::LoadOp::loadsFrom((uint64_t)&v4, a3);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::storesTo()
{
  return mlir::Diagnostic::operator mlir::LogicalResult();
}

void mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getStored(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a2;
  mlir::memref::LoadOp::getStored(&v4, a3, a4);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canUsesBeRemoved(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::LoadOp::canUsesBeRemoved((mlir::anec::Broadcast *)&v5, a3, a4);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::removeBlockingUses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;

  v7 = a2;
  return mlir::memref::LoadOp::removeBlockingUses((mlir::anec::Broadcast *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canRewire;
  v2[1] = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::rewire;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[509], v2);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canRewire(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::LoadOp::canRewire((mlir::memref::LoadOp *)&v5, a3, a4);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::rewire(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;

  v6 = a2;
  return mlir::memref::LoadOp::rewire((mlir::memref::LoadOp *)&v6, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::LoadOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::LoadOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.load";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::LoadOp::getEffects((uint64_t)&v3, a3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::memref::detail::LoadOpGenericAdaptorBase::LoadOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::LoadOp::fold(&v13);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  void **p_vtable;
  void *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  __guard *v26;
  __guard v27;
  unsigned __int8 v28;
  __guard *v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  __guard v159;
  __guard v160;
  __guard v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v235 = 81;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[211];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v235 = 104;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = p_vtable[501];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v235 = 97;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[197];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[192];
  v20 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v235 = 89;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[481];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v235 = 91;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[202];
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface::Trait<Empty>]";
      v235 = 94;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::PromotableMemOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[511];
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface::Trait<Empty>]";
      v235 = 103;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestructurableAccessorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = (void *)v29[1];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v235 = 90;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[152];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == a1
      || v33 == (_QWORD)a1
      || v35[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::LoadOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::memref::LoadOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::LoadOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.alloc", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E445D0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::AllocOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::hasTrait(uint64_t a1, uint64_t (*a2)())
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t (*)()))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                                  + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::AllocOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v8 = 0;
  return mlir::memref::AllocOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AllocOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::AllocOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AllocOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AllocOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::AllocOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::AllocOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::memref::AllocOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::AllocOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::AllocOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t (*a2)())
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t (*a1)())
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t (**v8)();
  uint64_t (*v9)();
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  uint64_t (*v24)();
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)();
  uint64_t (*v132)();
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __guard v136;
  __guard v137;
  __guard v138;
  __guard v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)();
  uint64_t (*v152)();
  uint64_t (*v153)();
  uint64_t (*v154)();
  uint64_t (*v155)();
  uint64_t (*v156)();
  uint64_t (*v157)();
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)();
  uint64_t (*v176)();
  uint64_t (*v177)();
  uint64_t (*v178)();
  uint64_t (*v179)();
  uint64_t (*v180)();
  uint64_t (*v181)();
  uint64_t (*v182)();
  uint64_t (*v183)();
  uint64_t (*v184)();
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v186 = 110;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[477];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v186 = 88;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[198];
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v186 = 96;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[423];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = (uint64_t (*)())p_vtable[481];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v186 = 86;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[138];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (uint64_t (*)())v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v29[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AllocOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
    return 0;
  v6 = a1;
  if (!mlir::memref::AllocOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::AllocOp::verify((mlir::memref::AllocOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.alloca", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocaOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E44760;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::foldHook()
{
  mlir::Operation *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm **v4;
  llvm *v6[2];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0)
        v4 = v6;
      else
        v4 = (llvm **)v6[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::AllocaOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::hasTrait(uint64_t a1, uint64_t (*a2)())
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t (*)()))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                                  + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::AllocaOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v8 = 0;
  return mlir::memref::AllocOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AllocOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::AllocOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AllocOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AllocOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::AllocOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::AllocOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::memref::AllocOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::AllocaOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getPromotableSlots;
  v2[1] = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultValue;
  v2[2] = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleBlockArgument;
  v2[3] = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handlePromotionComplete;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableAllocationOpInterface]";
      v15 = 87;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::PromotableAllocationOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[9], v2);
}

double mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getPromotableSlots@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = a1;
  return mlir::memref::AllocaOp::getPromotableSlots((mlir::memref::AllocaOp *)&v3, a2);
}

char *mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::AllocaOp::getDefaultValue((uint64_t)&v5, a3, a4);
}

void mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleBlockArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

uint64_t mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handlePromotionComplete(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;

  v6 = a2;
  return mlir::memref::AllocaOp::handlePromotionComplete(&v6, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDestructurableSlots;
  v2[1] = mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::destructure;
  v2[2] = mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleDestructuringComplete;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAllocationOpInterface]";
      v15 = 91;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::DestructurableAllocationOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[11], v2);
}

double mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDestructurableSlots@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = a1;
  return mlir::memref::AllocaOp::getDestructurableSlots((mlir::memref::AllocaOp *)&v3, a2);
}

uint64_t mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::destructure@<X0>(mlir::GenericProgramPoint *a1@<X1>, _QWORD *a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  mlir::GenericProgramPoint *v5;

  v5 = a1;
  return mlir::memref::AllocaOp::destructure(&v5, a2, a3, a4);
}

uint64_t mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleDestructuringComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::AllocaOp::handleDestructuringComplete(&v5, a3, a4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::AllocaOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t (*a2)())
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t (*a1)())
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t (**v8)();
  uint64_t (*v9)();
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  uint64_t (*v24)();
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  __guard *v32;
  __guard v33;
  unsigned __int8 v34;
  uint64_t *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  __guard v156;
  __guard v157;
  __guard v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)();
  uint64_t (*v163)();
  uint64_t (*v164)();
  uint64_t (*v165)();
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  __guard v175;
  __guard v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)();
  uint64_t (*v193)();
  uint64_t (*v194)();
  uint64_t (*v195)();
  uint64_t (*v196)();
  uint64_t (*v197)();
  uint64_t (*v198)();
  uint64_t (*v199)();
  uint64_t (*v200)();
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t (*v222)();
  uint64_t (*v223)();
  uint64_t (*v224)();
  uint64_t (*v225)();
  uint64_t (*v226)();
  uint64_t (*v227)();
  uint64_t (*v228)();
  uint64_t (*v229)();
  uint64_t (*v230)();
  uint64_t (*v231)();
  uint64_t (*v232)();
  uint64_t (*v233)();
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v235 = 81;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[211];
  v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v235 = 110;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[477];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v235 = 88;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[198];
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v235 = 96;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[423];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v235 = 89;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = (uint64_t (*)())p_vtable[481];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v235 = 86;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[138];
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableAllocationOpInterface::Trait<Empty>]";
      v235 = 101;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::PromotableAllocationOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::PromotableAllocationOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[13];
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAllocationOpInterface::Trait<Empty>]";
      v235 = 105;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::DestructurableAllocationOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestructurableAllocationOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[15];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (uint64_t (*)())v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v35[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AllocOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
    return 0;
  v6 = a1;
  if (!mlir::memref::AllocOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::AllocaOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::AllocaScopeOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::memref::AllocaScopeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  else
    return 0;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v6;

  v6 = a2;
  *(_QWORD *)&result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v6, 0, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v5;

  v5 = a2;
  *(_QWORD *)&result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  void **p_vtable;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  __guard v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __guard v153;
  __guard v154;
  __guard v155;
  __guard v156;
  __guard v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __guard v179;
  __guard v180;
  __guard v181;
  __guard v182;
  __guard v183;
  __guard v184;
  __guard v185;
  __guard v186;
  __guard v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v210 = 81;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[210];
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v210 = 87;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v210 = 84;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[193];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v210 = 83;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[184];
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref:"
             ":AllocaScopeReturnOp>::Impl<Empty>]";
      v210 = 142;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[21];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[199];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[192];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      v210 = 96;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[203];
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v210 = 93;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[23];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v210 = 97;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || p_vtable[502] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::memref::AllocaScopeOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v4)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    || !mlir::OpTrait::impl::verifyNoRegionArguments(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::memref::AllocaScopeOp::verifyInvariantsImpl((mlir::memref::AllocaScopeOp *)&v7);
}

BOOL mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::memref::AllocaScopeOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::memref::AllocaScopeOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AttrData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  BOOL v33;
  char *v34;
  const void **v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  _QWORD v41[4];
  __int16 v42;
  _QWORD v43[4];
  __int16 v44;
  const void **v45[4];
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!(_DWORD)v1)
    return 1;
  v3 = 0;
  v4 = a1 + 64;
  v5 = 24 * v1;
  while (1)
  {
    v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0)
      break;
    v7 = (_QWORD *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (_QWORD *)*v7)
      goto LABEL_8;
LABEL_3:
    v3 += 3;
    if ((_QWORD *)v5 == v3)
      return 1;
  }
  v7 = v3;
  if (v3 == (_QWORD *)*v3)
    goto LABEL_3;
LABEL_8:
  v8 = v7[1];
  if (v8)
    v9 = v8 - 8;
  else
    v9 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v9 + 32));
  v11 = *(_QWORD *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeReturnOp,void>::id)
    goto LABEL_3;
  v40 = 1283;
  v39[0] = "expects regions to end with '";
  v39[2] = "memref.alloca_scope.return";
  v39[3] = 26;
  v41[0] = v39;
  v41[2] = "', found '";
  v42 = 770;
  v47 = *(_QWORD *)(v11 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v47);
  v43[0] = v41;
  v43[2] = AttrData;
  v43[3] = v13;
  v44 = 1282;
  v45[0] = (const void **)v43;
  v45[2] = (const void **)"'";
  v46 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v45, (uint64_t)&v47);
  v14 = mlir::Diagnostic::attachNote(&v48, 0, 0);
  v15 = v14 + 16;
  v16 = *(_QWORD *)(v14 + 16);
  LODWORD(v35) = 3;
  v36 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  v37 = 61;
  v17 = *(unsigned int *)(v14 + 24);
  v18 = &v35;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    v32 = v17 + 1;
    v33 = v16 + 24 * v17 > (unint64_t)&v35;
    if (v16 <= (unint64_t)&v35 && v33)
    {
      v34 = (char *)&v35 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = (const void ***)&v34[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = &v35;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  v38 = 262;
  v35 = (const void **)"memref.alloca_scope.return";
  v36 = 26;
  v21 = mlir::Diagnostic::operator<<(v14, &v35);
  mlir::Diagnostic::operator<<(v21, 39);
  v22 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v47)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  if (v55)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v54;
      v25 = __p;
      if (v54 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v54 = v23;
      operator delete(v25);
    }
    v26 = v51;
    if (v51)
    {
      v27 = v52;
      v28 = v51;
      if (v52 != v51)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v51;
      }
      v52 = v26;
      operator delete(v28);
    }
    if (v49 != &v50)
      free(v49);
  }
  return v22;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.alloca_scope.return", 26, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeReturnOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E43EC8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::AllocaScopeReturnOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSuccessorRegions;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[173], v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  mlir::Operation *v3;

  v3 = a1;
  return mlir::memref::AllocaScopeReturnOp::getMutableSuccessorOperands(&v3, a2);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Block *v6;
  uint64_t ParentOp;
  uint64_t v9;
  mlir::Block *v10;
  unint64_t Parent;
  uint64_t v13;
  uint64_t v14;

  v6 = *(mlir::Block **)(a2 + 16);
  if (v6)
  {
    ParentOp = mlir::Block::getParentOp(v6);
    v9 = ParentOp;
    if (ParentOp)
      ParentOp = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp);
    v10 = *(mlir::Block **)(a2 + 16);
    v13 = v9;
    v14 = ParentOp;
    if (v10)
      Parent = mlir::Block::getParent(v10);
    else
      Parent = 0;
  }
  else
  {
    Parent = 0;
    v13 = 0;
    v14 = 0;
  }
  return mlir::BranchOpInterface::getSuccessorForOperands(&v13, Parent, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __guard v157;
  __guard v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __guard v177;
  __guard v178;
  __guard v179;
  __guard v180;
  __guard v181;
  __guard v182;
  __guard v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v235 = 83;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v235 = 88;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[198];
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<Empty>]";
      v235 = 116;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[25];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = p_vtable[486];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[504];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[158];
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      v235 = 103;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[459];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      v235 = 82;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[182];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v235 = 84;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v35[190] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::func::ReturnOp::print((mlir::func::ReturnOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<mlir::memref::AllocaScopeReturnOp>::verifyTrait((uint64_t *)a1)
    && (v8 = a1, mlir::OpTrait::impl::verifyIsIdempotent((mlir::OpTrait::impl *)&v8, v5)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<mlir::memref::AllocaScopeReturnOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "memref.alloca_scope";
  v37[1] = 19;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

uint64_t mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.cast", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E441E8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::CastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::areCastCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[137], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::CastOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getViewSource;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[285], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::CastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::CastOp>(mlir::Operation *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  mlir::Operation *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  mlir::memref::detail::CastOpGenericAdaptorBase::CastOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::memref::CastOp::fold((uint64_t *)&v12);
  v9 = v8;
  if (v8 < 8
    || (mlir::Operation *)((char *)a1 - 16) == (mlir::Operation *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  void **p_vtable;
  void *v30;
  unsigned __int8 v31;
  void **v32;
  void *v33;
  unsigned __int8 v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned __int8 v37;
  void **v38;
  void *v39;
  unsigned __int8 v40;
  __guard *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __guard v203;
  __guard v204;
  __guard v205;
  __guard v206;
  __guard v207;
  __guard v208;
  __guard v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __guard v237;
  __guard v238;
  __guard v239;
  __guard v240;
  __guard v241;
  __guard v242;
  __guard v243;
  __guard v244;
  __guard v245;
  __guard v246;
  __guard v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  const char *v287;
  unint64_t v288;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v288 = 83;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v273;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v288 = 81;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<Empty>]";
      v288 = 114;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[27];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v288 = 82;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[192];
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      v288 = 85;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[234];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v288 = 86;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = v23[138];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v288 = 91;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[202];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = p_vtable[486];
  v32 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v288 = 99;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[504];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v288 = 93;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[158];
  v38 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v38 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      v288 = 98;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v38 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[503];
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v288 = 89;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == a1
      || v33 == a1
      || v36 == (_QWORD)a1
      || v39 == a1
      || v41[29] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CastOp>,mlir::OpTrait::OneResult<mlir::memref::CastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::CastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CastOp>,mlir::OpTrait::OneOperand<mlir::memref::CastOp>,mlir::OpTrait::OpInvariants<mlir::memref::CastOp>,mlir::CastOpInterface::Trait<mlir::memref::CastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::CastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::CastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::CastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::CastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::CastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CastOp>,mlir::OpTrait::OneResult<mlir::memref::CastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::CastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CastOp>,mlir::OpTrait::OneOperand<mlir::memref::CastOp>,mlir::OpTrait::OpInvariants<mlir::memref::CastOp>,mlir::CastOpInterface::Trait<mlir::memref::CastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::CastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::CastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::CastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::CastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::CastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::OpTrait::impl *v9;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v9 = a1, mlir::memref::CastOp::verifyInvariantsImpl((uint64_t **)&v9))
    && mlir::impl::verifyCastInterfaceOp(a1, v6))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.collapse_shape", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E43AE0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::CollapseShapeOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::hasTrait(uint64_t a1, uint64_t (*a2)())
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t (*)()))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                                  + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::CollapseShapeOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::CollapseShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getViewSource;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[285], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::CollapseShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::CollapseShapeOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t (*a2)())
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(uint64_t (*a1)())
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t (**v8)();
  uint64_t (*v9)();
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  uint64_t (*v21)();
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **v26;
  uint64_t (*v27)();
  unsigned __int8 v28;
  void **v29;
  uint64_t (*v30)();
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)();
  uint64_t (*v158)();
  uint64_t (*v159)();
  uint64_t (*v160)();
  uint64_t (*v161)();
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)();
  uint64_t (*v167)();
  uint64_t (*v168)();
  uint64_t (*v169)();
  uint64_t (*v170)();
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)();
  uint64_t (*v193)();
  uint64_t (*v194)();
  uint64_t (*v195)();
  uint64_t (*v196)();
  uint64_t (*v197)();
  uint64_t (*v198)();
  uint64_t (*v199)();
  uint64_t (*v200)();
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t (*v222)();
  uint64_t (*v223)();
  uint64_t (*v224)();
  uint64_t (*v225)();
  uint64_t (*v226)();
  uint64_t (*v227)();
  uint64_t (*v228)();
  uint64_t (*v229)();
  uint64_t (*v230)();
  uint64_t (*v231)();
  uint64_t (*v232)();
  uint64_t (*v233)();
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v235 = 81;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[211];
  v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v235 = 110;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[477];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v235 = 82;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v235 = 89;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = (uint64_t (*)())p_vtable[481];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v235 = 86;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[138];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = (uint64_t (*)())v26[486];
  v29 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = (uint64_t (*)())v29[504];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[158];
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v235 = 89;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (uint64_t (*)())v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == a1
      || v33 == (_QWORD)a1
      || v35[29] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::memref::CollapseShapeOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::memref::CollapseShapeOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DeallocOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::DeallocOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  mlir::Operation *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  mlir::memref::detail::DeallocOpGenericAdaptorBase::DeallocOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  unint64_t v120;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v112;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v120 = 83;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v120 = 82;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[181];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[192];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v120 = 91;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[202];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v120 = 93;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v18 == a1 || v20[158] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::memref::DeallocOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.dim", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::DimOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E44120;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::DimOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DimOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::DimOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

BOOL mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::DimOp::getSpeculatability((mlir::memref::DimOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getShapedValue;
  v2[1] = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDimension;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[483], v2);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getShapedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDimension(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v3) | 4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::DimOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.dim";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::memref::detail::DimOpGenericAdaptorBase::DimOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::DimOp::fold((uint64_t *)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **p_vtable;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  __guard *v32;
  __guard v33;
  unsigned __int8 v34;
  uint64_t *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  __guard v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  void *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __guard v192;
  __guard v193;
  __guard v194;
  __guard v195;
  __guard v196;
  __guard v197;
  __guard v198;
  __guard v199;
  __guard v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v235 = 81;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      v235 = 109;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[305];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v235 = 90;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[208];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[192];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v235 = 86;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[138];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v235 = 91;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[202];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = p_vtable[486];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[158];
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface::Trait<Empty>]";
      v235 = 90;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedDimOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[33];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v235 = 90;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v35[152] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::DimOp::print((mlir::memref::DimOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::DimOp>,mlir::OpTrait::OneResult<mlir::memref::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::memref::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::DimOp>,mlir::OpTrait::OpInvariants<mlir::memref::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::DimOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::memref::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::DimOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::DimOp>,mlir::OpTrait::OneResult<mlir::memref::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::memref::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::DimOp>,mlir::OpTrait::OpInvariants<mlir::memref::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::DimOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::memref::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::DimOp>>(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::detail *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v7 = a1, mlir::memref::DimOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::detail::verifyShapedDimOpInterface(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DmaStartOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  mlir::memref::detail::DmaStartOpGenericAdaptorBase::DmaStartOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v75 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v20;
    a1 = v75;
    if (v21)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v81 = 83;
      v22 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v22)
        v23 = v22;
      else
        v23 = v81;
      v24 = &v80[v23];
      v25 = v81 - v23;
      if (v81 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v81 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v75;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v71 = v3;
    v76 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v29;
    v3 = v71;
    a1 = v76;
    if (v30)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v81 = 83;
      v31 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v31)
        v32 = v31;
      else
        v32 = v81;
      v33 = &v80[v32];
      v34 = v81 - v32;
      if (v81 - v32 >= 0x12)
        v35 = 18;
      else
        v35 = v81 - v32;
      v36 = v34 - v35;
      if (v36 >= v36 - 1)
        v37 = v36 - 1;
      else
        v37 = v36;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v71;
      a1 = v76;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v72 = v3;
    v77 = a1;
    v68 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v68;
    v3 = v72;
    v39 = v38;
    a1 = v77;
    if (v39)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v81 = 86;
      v40 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v40)
        v41 = v40;
      else
        v41 = v81;
      v42 = &v80[v41];
      v43 = v81 - v41;
      if (v81 - v41 >= 0x12)
        v44 = 18;
      else
        v44 = v81 - v41;
      v45 = v43 - v44;
      if (v45 >= v45 - 1)
        v46 = v45 - 1;
      else
        v46 = v45;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v68;
      v3 = v72;
      a1 = v77;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v73 = v3;
    v78 = a1;
    v66 = v9;
    v69 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v66;
    v6 = v69;
    v48 = v47;
    v3 = v73;
    a1 = v78;
    if (v48)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v81 = 88;
      v49 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v49)
        v50 = v49;
      else
        v50 = v81;
      v51 = &v80[v50];
      v52 = v81 - v50;
      if (v81 - v50 >= 0x12)
        v53 = 18;
      else
        v53 = v81 - v50;
      v54 = v52 - v53;
      if (v54 >= v54 - 1)
        v55 = v54 - 1;
      else
        v55 = v54;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v51[v53], v55);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v66;
      v6 = v69;
      v3 = v73;
      a1 = v78;
    }
  }
  v12 = v11[198];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v74 = v3;
    v79 = a1;
    v67 = v9;
    v70 = v6;
    v65 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v65;
    v9 = v67;
    v6 = v70;
    v3 = v74;
    v57 = v56;
    a1 = v79;
    if (v57)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v81 = 84;
      v58 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v58)
        v59 = v58;
      else
        v59 = v81;
      v60 = &v80[v59];
      v61 = v81 - v59;
      if (v81 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v81 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v65;
      v9 = v67;
      v6 = v70;
      v3 = v74;
      a1 = v79;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v14[192] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::memref::DmaStartOp::print((mlir::memref::DmaStartOp *)&v8, a3);
}

BOOL mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v7 = a1;
  if (!mlir::OpTrait::impl::verifyIsIdempotent((mlir::OpTrait::impl *)&v7, v5))
    return 0;
  v7 = a1;
  return mlir::memref::DmaStartOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DmaWaitOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  mlir::memref::detail::DmaWaitOpGenericAdaptorBase::DmaWaitOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  __guard *v11;
  __guard v12;
  unsigned __int8 v13;
  uint64_t *v14;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __guard v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v75 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v20;
    a1 = v75;
    if (v21)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v81 = 83;
      v22 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v22)
        v23 = v22;
      else
        v23 = v81;
      v24 = &v80[v23];
      v25 = v81 - v23;
      if (v81 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v81 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v75;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v71 = v3;
    v76 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v29;
    v3 = v71;
    a1 = v76;
    if (v30)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v81 = 83;
      v31 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v31)
        v32 = v31;
      else
        v32 = v81;
      v33 = &v80[v32];
      v34 = v81 - v32;
      if (v81 - v32 >= 0x12)
        v35 = 18;
      else
        v35 = v81 - v32;
      v36 = v34 - v35;
      if (v36 >= v36 - 1)
        v37 = v36 - 1;
      else
        v37 = v36;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v71;
      a1 = v76;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v72 = v3;
    v77 = a1;
    v68 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v68;
    v3 = v72;
    v39 = v38;
    a1 = v77;
    if (v39)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v81 = 86;
      v40 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v40)
        v41 = v40;
      else
        v41 = v81;
      v42 = &v80[v41];
      v43 = v81 - v41;
      if (v81 - v41 >= 0x12)
        v44 = 18;
      else
        v44 = v81 - v41;
      v45 = v43 - v44;
      if (v45 >= v45 - 1)
        v46 = v45 - 1;
      else
        v46 = v45;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v68;
      v3 = v72;
      a1 = v77;
    }
  }
  v9 = v8[196];
  if ((v10 & 1) == 0)
  {
    v73 = v3;
    v78 = a1;
    v66 = v9;
    v69 = v6;
    v9 = v66;
    v6 = v69;
    v48 = v47;
    v3 = v73;
    a1 = v78;
    if (v48)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v81 = 97;
      v49 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v49)
        v50 = v49;
      else
        v50 = v81;
      v51 = &v80[v50];
      v52 = v81 - v50;
      if (v81 - v50 >= 0x12)
        v53 = 18;
      else
        v53 = v81 - v50;
      v54 = v52 - v53;
      if (v54 >= v54 - 1)
        v55 = v54 - 1;
      else
        v55 = v54;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v51[v53], v55);
      v9 = v66;
      v6 = v69;
      v3 = v73;
      a1 = v78;
    }
  }
  v12 = v11[303];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v74 = v3;
    v79 = a1;
    v67 = v9;
    v70 = v6;
    v65 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v65;
    v9 = v67;
    v6 = v70;
    v3 = v74;
    v57 = v56;
    a1 = v79;
    if (v57)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v81 = 84;
      v58 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v58)
        v59 = v58;
      else
        v59 = v81;
      v60 = &v80[v59];
      v61 = v81 - v59;
      if (v81 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v81 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v65;
      v9 = v67;
      v6 = v70;
      v3 = v74;
      a1 = v79;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v14[192] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::DmaWaitOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::memref::DmaWaitOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::DmaWaitOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.expand_shape", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E43A18;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::ExpandShapeOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::hasTrait(uint64_t a1, uint64_t (*a2)())
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t (*)()))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                                  + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::ExpandShapeOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ExpandShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getViewSource;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[285], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::ExpandShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::ExpandShapeOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t (*a2)())
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::memref::CollapseShapeOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::memref::ExpandShapeOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.extract_aligned_pointer_as_index", 39, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ExtractAlignedPointerAsIndexOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E44058;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::foldHook()
{
  mlir::Operation *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ExtractAlignedPointerAsIndexOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ExtractAlignedPointerAsIndexOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.extract_aligned_pointer_as_index";
  v16[1] = 39;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  __guard v175;
  __guard v176;
  __guard v177;
  __guard v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      v210 = 109;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[305];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v210 = 82;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[138];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = p_vtable[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[158];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v210 = 90;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v32[152] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::ExtractAlignedPointerAsIndexOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::memref::ExtractAlignedPointerAsIndexOp::verifyInvariantsImpl((uint64_t **)&v7);
}

BOOL mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.extract_strided_metadata", 31, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ExtractStridedMetadataOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E43F90;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ExtractStridedMetadataOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ExtractStridedMetadataOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getViewSource;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[285], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::inferReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.extract_strided_metadata";
  v16[1] = 31;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  mlir::memref::detail::ExtractStridedMetadataOpGenericAdaptorBase::ExtractStridedMetadataOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::ExtractStridedMetadataOp::fold((mlir::memref::ExtractStridedMetadataOp *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __guard v201;
  __guard v202;
  __guard v203;
  __guard v204;
  __guard v205;
  __guard v206;
  __guard v207;
  __guard v208;
  __guard v209;
  __guard v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNResults<2>::Impl<Empty>]";
      v235 = 96;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[301];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v235 = 82;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[181];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[192];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v235 = 86;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[138];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = p_vtable[486];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[504];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[158];
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v235 = 89;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = (void *)v29[29];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v235 = 90;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[152];
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::InferTypeOpAdaptor<Empty>]";
      v235 = 90;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::OpTrait::InferTypeOpAdaptor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::InferTypeOpAdaptor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == a1
      || v33 == (_QWORD)a1
      || v35[37] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::ExtractAlignedPointerAsIndexOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyAtLeastNResults(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v4))
  {
    return 0;
  }
  v6 = a1;
  return mlir::memref::ExtractStridedMetadataOp::verifyInvariantsImpl((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.get_global", 17, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::GetGlobalOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E436F8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::hasTrait(uint64_t a1, uint64_t (*a2)())
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t (*)()))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                                  + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::GetGlobalOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::GetGlobalOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::GetGlobalOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::GetGlobalOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::GetGlobalOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::GetGlobalOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::verifySymbolUses;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      v15 = 77;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[155], v2);
}

uint64_t mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::verifySymbolUses(uint64_t a1, mlir::SymbolTable *a2, mlir::SymbolTableCollection *a3)
{
  mlir::SymbolTable *v4;

  v4 = a2;
  return mlir::memref::GetGlobalOp::verifySymbolUses(&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t (*a2)())
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>(uint64_t (*a1)())
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t (**v8)();
  uint64_t (*v9)();
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  uint64_t (*v21)();
  unsigned __int8 v22;
  void **v23;
  uint64_t (*v24)();
  unsigned __int8 v25;
  void **v26;
  uint64_t (*v27)();
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  __guard *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)();
  uint64_t (*v145)();
  uint64_t (*v146)();
  uint64_t (*v147)();
  uint64_t (*v148)();
  uint64_t (*v149)();
  uint64_t (*v150)();
  uint64_t (*v151)();
  uint64_t (*v152)();
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)();
  uint64_t (*v172)();
  uint64_t (*v173)();
  uint64_t (*v174)();
  uint64_t (*v175)();
  uint64_t (*v176)();
  uint64_t (*v177)();
  uint64_t (*v178)();
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t (*v198)();
  uint64_t (*v199)();
  uint64_t (*v200)();
  uint64_t (*v201)();
  uint64_t (*v202)();
  uint64_t (*v203)();
  uint64_t (*v204)();
  uint64_t (*v205)();
  uint64_t (*v206)();
  uint64_t (*v207)();
  uint64_t (*v208)();
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v210 = 110;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::LocalConvolutionWeightGradientOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[477];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v210 = 84;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[193];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = (uint64_t (*)())p_vtable[481];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = (uint64_t (*)())v23[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = (uint64_t (*)())v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[158];
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface::Trait<Empty>]";
      v210 = 91;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (uint64_t (*)())v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v32[443] == (_QWORD)a1;
}

