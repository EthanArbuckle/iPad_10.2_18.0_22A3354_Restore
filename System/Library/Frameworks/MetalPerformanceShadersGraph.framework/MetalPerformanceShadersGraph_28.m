uint64_t `anonymous namespace'::AsmParser::parseDirectiveLTODiscard(_anonymous_namespace_::AsmParser *this)
{
  _anonymous_namespace_::AsmParser *v3;

  v3 = this;
  *((_DWORD *)this + 186) = 0;
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)this + 784, *((_QWORD **)this + 99));
  *((_QWORD *)this + 98) = (char *)this + 792;
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 99) = 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveMSEmit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  llvm::MCAsmLexer *v8;
  uint64_t Loc;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15[8];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a4;
  v18 = a4;
  v19 = a2;
  v17 = 0;
  v8 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  Loc = llvm::MCAsmLexer::getLoc(v8);
  *(_QWORD *)v15 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a1 + 232))(a1, &v17, v15) & 1) != 0)
    return 1;
  if (*(_BYTE *)v17 != 1)
  {
    v14 = "unexpected expression in _emit";
LABEL_10:
    *(_QWORD *)v15 = v14;
    v16 = 259;
    return llvm::MCAsmParser::Error(a1, Loc, (uint64_t)v15, 0, 0);
  }
  if ((unint64_t)(*(_QWORD *)(v17 + 16) + 128) >= 0x180)
  {
    v14 = "literal value out of range for directive";
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(a3 + 88);
  v15[0] = 2;
  v12 = *(unsigned int *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long &>(v11, v15, &v19, &v18);
  }
  else
  {
    v13 = *(_QWORD *)v11 + (v12 << 7);
    *(_DWORD *)v13 = 2;
    *(_QWORD *)(v13 + 8) = a2;
    *(_DWORD *)(v13 + 16) = v4;
    *(_BYTE *)(v13 + 20) = 0;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_QWORD *)(v13 + 104) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_BYTE *)(v13 + 48) = 0;
    *(_DWORD *)(v13 + 112) = 1;
    *(_BYTE *)(v13 + 120) = 0;
    ++*(_DWORD *)(v11 + 8);
  }
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveMSAlign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MCAsmLexer *v6;
  uint64_t Loc;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  int v17;
  int v18[8];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v20 = 0;
  v6 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  Loc = llvm::MCAsmLexer::getLoc(v6);
  *(_QWORD *)v18 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a1 + 232))(a1, &v20, v18) & 1) != 0)
    return 1;
  if (*(_BYTE *)v20 != 1)
  {
    v15 = "unexpected expression in align";
LABEL_10:
    *(_QWORD *)v18 = v15;
    v19 = 259;
    return llvm::MCAsmParser::Error(a1, Loc, (uint64_t)v18, 0, 0);
  }
  v9 = *(_QWORD *)(v20 + 16);
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] != 1)
  {
    v15 = "literal value not a power of two greater then zero";
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(a3 + 88);
  v17 = 5;
  v18[0] = 0;
  v12 = 63 - __clz(v9);
  v16 = v12;
  v13 = *(unsigned int *)(v11 + 8);
  if (v13 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int,unsigned int>(v11, v18, &v21, &v17, &v16);
  }
  else
  {
    v14 = *(_QWORD *)v11 + (v13 << 7);
    *(_DWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = a2;
    *(_DWORD *)(v14 + 16) = 5;
    *(_BYTE *)(v14 + 20) = 0;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_QWORD *)(v14 + 104) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 24) = v12;
    *(_BYTE *)(v14 + 48) = 0;
    *(_DWORD *)(v14 + 112) = 1;
    *(_BYTE *)(v14 + 120) = 0;
    ++*(_DWORD *)(v11 + 8);
  }
  return 0;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,int>(uint64_t a1, int *a2, uint64_t *a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int>(a1, a2, a3, a4);
  v5 = *(_QWORD *)a1 + (v4 << 7);
  v6 = *a3;
  v7 = *a4;
  *(_DWORD *)v5 = *a2;
  *(_QWORD *)(v5 + 8) = v6;
  *(_DWORD *)(v5 + 16) = v7;
  *(_BYTE *)(v5 + 20) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 112) = 1;
  *(_BYTE *)(v5 + 120) = 0;
  v8 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v8;
  return *(_QWORD *)a1 + (v8 << 7) - 128;
}

uint64_t `anonymous namespace'::AsmParser::parseAndMatchAndEmitTargetInstruction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, char *a6)
{
  void **v10;
  uint64_t v11;
  unint64_t v12;
  const void **v13;
  char v14;
  _OWORD *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *v19;
  llvm *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  char ***v32;
  uint64_t *v33;
  unint64_t LineAndColumn;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v42;
  unsigned int v43;
  __int128 v44;
  uint64_t v45;
  void *__p;
  unsigned int v47;
  uint64_t v48;
  void *v49[2];
  unsigned __int8 v50;
  _QWORD v51[2];
  unint64_t v52[2];
  _QWORD v53[4];
  __int16 v54;
  void (**v55)(llvm::raw_svector_ostream *__hidden);
  int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  int v62;
  void **v63;
  void *v64;
  __int128 v65;
  _QWORD v66[33];

  v66[32] = *MEMORY[0x1E0C80C00];
  v51[0] = a3;
  v51[1] = a4;
  v10 = v49;
  llvm::StringRef::lower(v51, (uint64_t)v49);
  v48 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 8);
  if ((v50 & 0x80u) == 0)
  {
    v12 = v50;
  }
  else
  {
    v10 = (void **)v49[0];
    v12 = (unint64_t)v49[1];
  }
  v44 = *a5;
  v45 = *((_QWORD *)a5 + 2);
  v13 = (const void **)a5 + 3;
  v47 = *((_DWORD *)a5 + 8);
  if (v47 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v13);
  else
    __p = (void *)*v13;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t *, void **, unint64_t, __int128 *, uint64_t))(*(_QWORD *)v11 + 56))(v11, &v48, v10, v12, &v44, a2);
  if (v47 >= 0x41 && __p)
    operator delete[](__p);
  *(_BYTE *)(a2 + 84) = v14;
  if (*(_BYTE *)(a1 + 33))
  {
    v64 = v66;
    v65 = xmmword_181236410;
    v56 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 1;
    v58 = 0;
    v59 = 0;
    v57 = 0;
    v55 = off_1E0E22B88;
    v63 = &v64;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v55, 0, 0, 0);
    v15 = v59;
    if ((unint64_t)(v58 - v59) > 0x14)
    {
      *(_OWORD *)v59 = *(_OWORD *)"parsed instruction: [";
      *(_QWORD *)((char *)v15 + 13) = *(_QWORD *)"ction: [";
      v59 += 21;
      if (!*(_DWORD *)(a2 + 8))
        goto LABEL_21;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v55, "parsed instruction: [", 0x15uLL);
      if (!*(_DWORD *)(a2 + 8))
      {
LABEL_21:
        if (v58 == v59)
          llvm::raw_ostream::write((llvm::raw_ostream *)&v55, "]", 1uLL);
        else
          *v59++ = 93;
        v19 = *v63;
        v18 = v63[1];
        v54 = 261;
        v53[0] = v19;
        v53[1] = v18;
        v20 = *(llvm **)(a1 + 240);
        v52[0] = 0;
        v52[1] = 0;
        llvm::SourceMgr::PrintMessage(v20, a6, 3, (llvm::Twine *)v53, v52, 1, 0, 0, 1);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v55);
        if (v64 != v66)
          free(v64);
        goto LABEL_26;
      }
    }
    v16 = 0;
    v17 = 0;
    do
    {
      if (v17)
      {
        if ((unint64_t)(v58 - v59) > 1)
        {
          *(_WORD *)v59 = 8236;
          v59 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v55, ", ", 2uLL);
        }
      }
      (*(void (**)(_QWORD, void (***)(llvm::raw_svector_ostream *__hidden)))(**(_QWORD **)(*(_QWORD *)a2 + 8 * v16)
                                                                                                 + 120))(*(_QWORD *)(*(_QWORD *)a2 + 8 * v16), &v55);
      v16 = (v17 + 1);
      v17 = v16;
    }
    while ((_DWORD)v16 != *(_DWORD *)(a2 + 8));
    goto LABEL_21;
  }
LABEL_26:
  if (*(_DWORD *)(a1 + 24))
    v21 = 1;
  else
    v21 = v14;
  if ((v21 & 1) != 0)
  {
    v22 = 1;
    if ((char)v50 < 0)
      goto LABEL_43;
    return v22;
  }
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v25 = *(unsigned int *)(v24 + 152);
    if ((_DWORD)v25)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v24 + 144) + 32 * v25 - 32);
      v27 = *(_DWORD *)(v23 + 1616);
      if (!v27)
        goto LABEL_42;
    }
    else
    {
      v26 = 0;
      v27 = *(_DWORD *)(v23 + 1616);
      if (!v27)
        goto LABEL_42;
    }
    v28 = *(_QWORD *)(v23 + 1600);
    v29 = v27 - 1;
    v30 = ((v26 >> 4) ^ (v26 >> 9)) & v29;
    v31 = *(_QWORD *)(v28 + 8 * v30);
    if (v31 == v26)
    {
LABEL_38:
      v32 = *(char ****)(a1 + 360);
      v33 = *(uint64_t **)(a1 + 240);
      if (v32 == *(char ****)(a1 + 368))
      {
        LineAndColumn = llvm::SourceMgr::getLineAndColumn(v33, a6, *(_DWORD *)(a1 + 296));
        if (!*(_QWORD *)(a1 + 448))
          goto LABEL_41;
      }
      else
      {
        LineAndColumn = llvm::SourceMgr::getLineAndColumn(v33, **v32, *((_DWORD *)*v32 + 2));
        if (!*(_QWORD *)(a1 + 448))
        {
LABEL_41:
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
          v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
          (*(void (**)(uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 720))(v39, *(unsigned int *)(v40 + 1596), LineAndColumn, 0, 1, 0, 0);
          goto LABEL_42;
        }
      }
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v36 = *(_QWORD *)(a1 + 440);
      v37 = *(_QWORD *)(a1 + 448);
      LOBYTE(v55) = 0;
      LOBYTE(v57) = 0;
      LOBYTE(v64) = 0;
      BYTE8(v65) = 0;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, void (***)(llvm::raw_svector_ostream *__hidden), void **, _DWORD))(*(_QWORD *)v35 + 688))(v53, v35, 0, 0, 0, v36, v37, &v55, &v64, 0);
      v38 = v53[0];
      *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 1596) = v38;
      LineAndColumn = ~llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a1 + 240), *(char **)(a1 + 464), *(_DWORD *)(a1 + 472))+ *(_DWORD *)(a1 + 456)+ LineAndColumn;
      goto LABEL_41;
    }
    v42 = 1;
    while (v31 != -4096)
    {
      v43 = v30 + v42++;
      v30 = v43 & v29;
      v31 = *(_QWORD *)(v28 + 8 * v30);
      if (v31 == v26)
        goto LABEL_38;
    }
  }
LABEL_42:
  v64 = 0;
  v22 = (*(uint64_t (**)(_QWORD, char *, uint64_t, uint64_t, _QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 8)
                                                                                             + 80))(*(_QWORD *)(a1 + 8), a6, a2 + 80, a2, *(_QWORD *)(a1 + 224), &v64, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 120));
  if ((char)v50 < 0)
LABEL_43:
    operator delete(v49[0]);
  return v22;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4, __int128 *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v20;
  BOOL v21;
  char *v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  char v35;

  v6 = *a3;
  v7 = *a4;
  v23 = *a2;
  v24 = v6;
  v25 = v7;
  v26 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v28 = 0uLL;
  v27 = 0;
  v29 = 0;
  v34 = 1;
  v35 = 0;
  v28 = *a5;
  v8 = *(unsigned int *)(a1 + 8);
  v9 = (char *)&v23;
  v10 = *(_QWORD *)a1;
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    v20 = v8 + 1;
    v21 = v10 + (v8 << 7) > (unint64_t)&v23;
    if (v10 <= (unint64_t)&v23 && v21)
    {
      v22 = (char *)&v23 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v20, 128);
      v10 = *(_QWORD *)a1;
      v9 = &v22[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v20, 128);
      v10 = *(_QWORD *)a1;
      v9 = (char *)&v23;
    }
  }
  v11 = (_OWORD *)(v10 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  v12 = *(_OWORD *)v9;
  v13 = *((_OWORD *)v9 + 1);
  v14 = *((_OWORD *)v9 + 3);
  v11[2] = *((_OWORD *)v9 + 2);
  v11[3] = v14;
  *v11 = v12;
  v11[1] = v13;
  v15 = *((_OWORD *)v9 + 4);
  v16 = *((_OWORD *)v9 + 5);
  v17 = *((_OWORD *)v9 + 7);
  v11[6] = *((_OWORD *)v9 + 6);
  v11[7] = v17;
  v11[4] = v15;
  v11[5] = v16;
  v18 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v18;
  return *(_QWORD *)a1 + (v18 << 7) - 128;
}

uint64_t `anonymous namespace'::AsmParser::parseMacroArguments(_DWORD **a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  void **v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  int v20;
  _QWORD *v21;
  uint64_t Loc;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  llvm::APInt *v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int BufferContainingLoc;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void **v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  void **v58;
  void *v59;
  char *v60;
  char *v61;
  char *v62;
  void *v63;
  void **v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  void **v81;
  char v82;
  void *v83;
  char v85;
  _QWORD *v86;
  int v87;
  uint64_t *v88;
  _BOOL4 v89;
  uint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  unint64_t v94;
  _QWORD v95[2];
  const void *v96;
  size_t v97;
  __int16 v98;
  _QWORD v99[2];
  const char *v100;
  __int16 v101;
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  _BYTE *v106;
  __int128 v107;
  const char *v108;
  void *__p;
  unsigned int v110;
  __int128 v111;
  char *v112[5];
  _QWORD *v113;
  uint64_t v114;
  _QWORD v115[7];

  v3 = a3;
  v115[4] = *MEMORY[0x1E0C80C00];
  if (a2)
    v6 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - a2[4]) >> 4);
  else
    LODWORD(v6) = 0;
  v7 = v115;
  v113 = v115;
  v114 = 0x400000000;
  v8 = (void **)a3[1];
  v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *a3) >> 3);
  v94 = v6;
  if (v6 <= v9)
  {
    if (v6 >= v9)
    {
      v10 = v114;
      v11 = v6;
      v12 = v6 >= (unint64_t)v114;
      if (v6 == (unint64_t)v114)
        goto LABEL_28;
    }
    else
    {
      v13 = v6;
      v6 = *a3 + 24 * v6;
      if (v8 != (void **)v6)
      {
        v14 = (void **)a3[1];
        do
        {
          v17 = (char *)*(v14 - 3);
          v14 -= 3;
          v16 = v17;
          if (v17)
          {
            v18 = (char *)*(v8 - 2);
            v15 = v16;
            if (v18 != v16)
            {
              do
              {
                if (*((_DWORD *)v18 - 2) >= 0x41u)
                {
                  v19 = (void *)*((_QWORD *)v18 - 2);
                  if (v19)
                    operator delete[](v19);
                }
                v18 -= 40;
              }
              while (v18 != v16);
              v15 = *v14;
            }
            *(v8 - 2) = v16;
            operator delete(v15);
          }
          v8 = v14;
        }
        while (v14 != (void **)v6);
      }
      v3[1] = v6;
      LODWORD(v6) = v13;
      v10 = v114;
      v11 = v94;
      v12 = v94 >= v114;
      if (v94 == v114)
        goto LABEL_28;
    }
LABEL_6:
    if (v12)
    {
      if (v11 > HIDWORD(v114))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v115, v11, 8);
        v10 = v114;
      }
      if (v11 != v10)
        bzero(&v113[v10], 8 * (v11 - v10));
    }
    LODWORD(v114) = v6;
    v88 = a2;
    if (!(_DWORD)v6)
      goto LABEL_13;
LABEL_29:
    v89 = *(_BYTE *)(a2[5] - 7) != 0;
    goto LABEL_30;
  }
  std::vector<std::vector<llvm::AsmToken>>::__append((uint64_t)a3, v6 - v9);
  v10 = v114;
  v11 = v6;
  v12 = v6 >= (unint64_t)v114;
  if (v6 != (unint64_t)v114)
    goto LABEL_6;
LABEL_28:
  v88 = a2;
  if ((_DWORD)v6)
    goto LABEL_29;
LABEL_13:
  v89 = 0;
LABEL_30:
  v20 = 0;
  v87 = v6;
  v92 = 0;
  v93 = v6 - 1;
  v90 = 48 * v11;
LABEL_31:
  v21 = v3;
  Loc = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 5));
  v111 = 0u;
  memset(v112, 0, 26);
  if (*a1[6] != 2)
    goto LABEL_38;
  LODWORD(v107) = 0;
  *((_QWORD *)&v107 + 1) = 0;
  v108 = 0;
  v110 = 1;
  __p = 0;
  (*((void (**)(_DWORD **, __int128 *, uint64_t, uint64_t))a1[5] + 4))(a1 + 5, &v107, 1, 1);
  v23 = v107;
  if (v110 >= 0x41 && __p)
    operator delete[](__p);
  if (v23 == 28)
  {
    if ((*((unsigned int (**)(_DWORD **, __int128 *))*a1 + 24))(a1, &v111))
    {
      *(_QWORD *)&v107 = "invalid argument identifier for formal argument";
      LOWORD(v110) = 259;
      goto LABEL_90;
    }
    if (*a1[6] != 28)
    {
      *(_QWORD *)&v107 = "expected '=' after formal parameter identifier";
      LOWORD(v110) = 259;
      v36 = llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v107, 0, 0);
      goto LABEL_92;
    }
    (*((void (**)(_DWORD **))*a1 + 23))(a1);
    v24 = v20 == v93 && v89;
    if (!*((_QWORD *)&v111 + 1))
    {
LABEL_62:
      *(_QWORD *)&v107 = "cannot mix positional and keyword arguments";
      LOWORD(v110) = 259;
      v29 = 1;
      v91 = llvm::MCAsmParser::Error((uint64_t)a1, Loc, (uint64_t)&v107, 0, 0);
      v92 = 1;
      goto LABEL_94;
    }
  }
  else
  {
LABEL_38:
    v24 = v20 == v93 && v89;
    if ((v92 & 1) == 0)
    {
      v92 = 0;
      v25 = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 5));
      v106 = 0;
      if (!*((_BYTE *)a1 + 815))
        goto LABEL_53;
      goto LABEL_46;
    }
    if (!*((_QWORD *)&v111 + 1))
      goto LABEL_62;
  }
  v92 = 1;
  v25 = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 5));
  v106 = 0;
  if (!*((_BYTE *)a1 + 815))
    goto LABEL_53;
LABEL_46:
  v26 = v25;
  v27 = *a1[6];
  if (v27 == 37)
  {
    v102[0] = 0;
    v99[0] = 0;
    (*((void (**)(_DWORD **))*a1 + 23))(a1);
    if (((*((uint64_t (**)(_DWORD **, _QWORD *, _BYTE **))*a1 + 29))(a1, v102, &v106) & 1) == 0)
    {
      v30 = v102[0];
      v31 = (*((uint64_t (**)(_DWORD **))*a1 + 7))(a1);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 72))(v31);
      if ((llvm::MCExpr::evaluateAsAbsolute(v30, v99) & 1) != 0)
      {
        LODWORD(v107) = 4;
        *((_QWORD *)&v107 + 1) = v26;
        v108 = &v106[-v26];
        v110 = 64;
        __p = (void *)v99[0];
        v32 = v112[1];
        if (v112[1] >= v112[2])
          goto LABEL_73;
        goto LABEL_65;
      }
      *(_QWORD *)&v107 = "expected absolute expression";
      LOWORD(v110) = 259;
      v37 = (uint64_t)a1;
      v38 = v26;
      goto LABEL_91;
    }
    v91 = 0;
    goto LABEL_93;
  }
  if (v27 != 39)
  {
LABEL_53:
      goto LABEL_78;
    v29 = 1;
    v91 = 1;
    goto LABEL_94;
  }
  v28 = (_BYTE *)v25;
  while (2)
  {
    switch(*v28)
    {
      case 0:
      case 0xA:
      case 0xD:
        goto LABEL_53;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xB:
      case 0xC:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_50;
      case 0x21:
        ++v28;
        goto LABEL_50;
      default:
        if (*v28 != 62)
        {
LABEL_50:
          ++v28;
          continue;
        }
        v39 = (uint64_t)(v28 + 1);
        v106 = v28 + 1;
        BufferContainingLoc = *((_DWORD *)a1 + 74);
        if (!BufferContainingLoc)
          BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc((uint64_t *)a1[30], (unint64_t)(v28 + 1));
        *((_DWORD *)a1 + 74) = BufferContainingLoc;
        v41 = *(_QWORD *)(*(_QWORD *)a1[30] + 24 * (BufferContainingLoc - 1));
        llvm::AsmLexer::setBuffer((uint64_t)(a1 + 5), *(_QWORD *)(v41 + 8), *(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8), v39, 1);
        (*((void (**)(_DWORD **))*a1 + 23))(a1);
        LODWORD(v107) = 3;
        *((_QWORD *)&v107 + 1) = v26;
        v108 = (const char *)(v39 - v26);
        v110 = 64;
        __p = 0;
        v32 = v112[1];
        if (v112[1] >= v112[2])
        {
LABEL_73:
          v112[1] = std::vector<llvm::AsmToken>::__push_back_slow_path<llvm::AsmToken const&>(v112, (uint64_t)&v107);
          if (v110 >= 0x41)
            goto LABEL_76;
          goto LABEL_78;
        }
LABEL_65:
        v33 = v107;
        *((_QWORD *)v32 + 2) = v108;
        *(_OWORD *)v32 = v33;
        v34 = (llvm::APInt *)(v32 + 24);
        v35 = v110;
        *((_DWORD *)v32 + 8) = v110;
        if (v35 > 0x40)
        {
          llvm::APInt::initSlowCase(v34, (const void **)&__p);
          v112[1] = v32 + 40;
          if (v110 < 0x41)
            goto LABEL_78;
        }
        else
        {
          *(_QWORD *)v34 = __p;
          v112[1] = v32 + 40;
          if (v110 < 0x41)
            goto LABEL_78;
        }
LABEL_76:
        if (__p)
          operator delete[](__p);
LABEL_78:
        v42 = *((_QWORD *)&v111 + 1);
        LODWORD(v43) = v20;
        if (!*((_QWORD *)&v111 + 1))
        {
LABEL_84:
          v3 = v21;
          if (v112[0] != v112[1])
          {
            v48 = (void **)v21[1];
            v49 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *v21) >> 3);
            if (v49 <= v43)
            {
              v50 = (v43 + 1);
              if (v50 <= v49)
              {
                if (v50 < v49)
                {
                  v86 = v7;
                  v57 = *v21 + 24 * v50;
                  if (v48 != (void **)v57)
                  {
                    v58 = (void **)v21[1];
                    do
                    {
                      v61 = (char *)*(v58 - 3);
                      v58 -= 3;
                      v60 = v61;
                      if (v61)
                      {
                        v62 = (char *)*(v48 - 2);
                        v59 = v60;
                        if (v62 != v60)
                        {
                          do
                          {
                            if (*((_DWORD *)v62 - 2) >= 0x41u)
                            {
                              v63 = (void *)*((_QWORD *)v62 - 2);
                              if (v63)
                                operator delete[](v63);
                            }
                            v62 -= 40;
                          }
                          while (v62 != v60);
                          v59 = *v58;
                        }
                        *(v48 - 2) = v60;
                        operator delete(v59);
                      }
                      v48 = v58;
                    }
                    while (v58 != (void **)v57);
                  }
                  v21[1] = v57;
                  v3 = v21;
                  v7 = v86;
                }
              }
              else
              {
                std::vector<std::vector<llvm::AsmToken>>::__append((uint64_t)v21, v50 - v49);
              }
            }
            v64 = (void **)(*v3 + 24 * v43);
            if (v64 != (void **)v112)
              std::vector<llvm::AsmToken>::__assign_with_size[abi:nn180100]<llvm::AsmToken*,llvm::AsmToken*>(v64, (uint64_t)v112[0], (uint64_t)v112[1], 0xCCCCCCCCCCCCCCCDLL * ((v112[1] - v112[0]) >> 3));
            v65 = v114;
            if (v114 <= v43)
            {
              v66 = (v43 + 1);
              if ((_DWORD)v114 != (_DWORD)v66)
              {
                if (v114 <= v66)
                {
                  if (HIDWORD(v114) < v66)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v7, (v43 + 1), 8);
                    v65 = v114;
                  }
                  if (v65 != (_DWORD)v66)
                    bzero(&v113[v65], 8 * (v66 - v65));
                }
                LODWORD(v114) = v43 + 1;
              }
            }
            v67 = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 5));
            v113[v43] = v67;
          }
          v68 = *a1[6];
          if (v68 == 26)
          {
            (*((void (**)(_DWORD **))*a1 + 23))(a1);
          }
          else if (v68 == 9)
          {
            if (v87)
            {
              v69 = 0;
              v70 = 0;
              v71 = 0;
              v91 = 0;
              do
              {
                if (*(_QWORD *)(*v3 + v69) == *(_QWORD *)(*v3 + v69 + 8))
                {
                  v72 = v88[4];
                  if (*(_BYTE *)(v72 + v71 + 40))
                  {
                    v73 = v113[v70];
                    if (!v73)
                    {
                      v73 = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 5));
                      v72 = v88[4];
                    }
                    v74 = (const void **)(v72 + v71);
                    v98 = 1283;
                    v95[0] = "missing value for required parameter '";
                    v96 = *v74;
                    v97 = (size_t)v74[1];
                    v99[0] = v95;
                    v100 = "' in macro '";
                    v101 = 770;
                    v76 = *v88;
                    v75 = v88[1];
                    v102[0] = v99;
                    v103 = v76;
                    v104 = v75;
                    v105 = 1282;
                    *(_QWORD *)&v107 = v102;
                    v108 = "'";
                    LOWORD(v110) = 770;
                    llvm::MCAsmParser::Error((uint64_t)a1, v73, (uint64_t)&v107, 0, 0);
                    v72 = v88[4];
                    v91 = 1;
                  }
                  v77 = v72 + v71;
                  v78 = *(_QWORD *)(v77 + 16);
                  v79 = *(_QWORD *)(v77 + 24);
                  v80 = (void **)(v77 + 16);
                  if (v78 != v79)
                  {
                    v81 = (void **)(*v3 + v69);
                    if (v80 != v81)
                      std::vector<llvm::AsmToken>::__assign_with_size[abi:nn180100]<llvm::AsmToken*,llvm::AsmToken*>(v81, v78, v79, 0xCCCCCCCCCCCCCCCDLL * ((v79 - v78) >> 3));
                  }
                }
                v71 += 48;
                ++v70;
                v69 += 24;
              }
              while (v90 != v71);
              v29 = 1;
            }
            else
            {
              v91 = 0;
              v29 = 1;
            }
            goto LABEL_95;
          }
          v29 = 0;
          goto LABEL_95;
        }
        if (v87)
        {
          v43 = 0;
          v44 = (const void *)v111;
          v45 = v88[4] + 8;
          v46 = (uint64_t *)v45;
          while (1)
          {
            v47 = *v46;
            v46 += 6;
            if (v47 == v42 && !memcmp(*(const void **)(v45 - 8), v44, v42))
              goto LABEL_84;
            ++v43;
            v45 = (uint64_t)v46;
            if (v94 == v43)
              goto LABEL_89;
          }
        }
        v44 = (const void *)v111;
LABEL_89:
        v98 = 1283;
        v95[0] = "parameter named '";
        v96 = v44;
        v97 = v42;
        v99[0] = v95;
        v100 = "' does not exist for macro '";
        v101 = 770;
        v52 = *v88;
        v51 = v88[1];
        v102[0] = v99;
        v103 = v52;
        v104 = v51;
        v105 = 1282;
        *(_QWORD *)&v107 = v102;
        v108 = "'";
        LOWORD(v110) = 770;
LABEL_90:
        v37 = (uint64_t)a1;
        v38 = Loc;
LABEL_91:
        v36 = llvm::MCAsmParser::Error(v37, v38, (uint64_t)&v107, 0, 0);
LABEL_92:
        v91 = v36;
LABEL_93:
        v29 = 1;
LABEL_94:
        v3 = v21;
LABEL_95:
        v53 = v112[0];
        if (v112[0])
        {
          v54 = v112[1];
          v55 = v112[0];
          if (v112[1] != v112[0])
          {
            do
            {
              if (*((_DWORD *)v54 - 2) >= 0x41u)
              {
                v56 = (void *)*((_QWORD *)v54 - 2);
                if (v56)
                  operator delete[](v56);
              }
              v54 -= 40;
            }
            while (v54 != v53);
            v55 = v112[0];
          }
          v112[1] = v53;
          operator delete(v55);
        }
        if (v29)
        {
          v82 = v91;
          v83 = v113;
          if (v113 == v7)
            return v82 & 1;
LABEL_150:
          free(v83);
          return v82 & 1;
        }
        if (v93 >= ++v20)
          goto LABEL_31;
        *(_QWORD *)&v111 = "too many positional arguments";
        LOWORD(v112[2]) = 259;
        v85 = llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v111, 0, 0);
        v82 = v85;
        v83 = v113;
        if (v113 != v7)
          goto LABEL_150;
        return v82 & 1;
    }
  }
}

uint64_t llvm::raw_svector_ostream::raw_svector_ostream(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E0E22B88;
  *(_QWORD *)(a1 + 64) = a2;
  llvm::raw_ostream::SetBufferAndMode(a1, 0, 0, 0);
  return a1;
}

uint64_t `anonymous namespace'::AsmParser::expandMacro(uint64_t a1, llvm::raw_ostream *this, char *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10)
{
  uint64_t v10;
  size_t v11;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  size_t v23;
  void *v24;
  size_t v25;
  size_t v26;
  int v27;
  _BYTE *v28;
  size_t v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t v34;
  _QWORD *v35;
  _BYTE *v36;
  llvm::raw_ostream *v37;
  void *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  unint64_t v44;
  void *v45;
  int v46;
  uint64_t v47;
  int **v48;
  int *v49;
  int *v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unint64_t v59;
  std::string::size_type size;
  std::string::size_type v61;
  size_t v62;
  const void *v63;
  size_t v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  size_t v72;
  int v73;
  _BOOL4 v74;
  _QWORD *v75;
  int v79;
  _BYTE *v80;
  uint64_t v81;
  std::string v82;
  __int16 v83;

  LODWORD(v10) = a6;
  v11 = a4;
  if ((_DWORD)a6)
  {
    v74 = *(_BYTE *)(a5 + 48 * a6 - 7) != 0;
    v80 = (_BYTE *)(a1 + 812);
  }
  else
  {
    v74 = 0;
    v80 = (_BYTE *)(a1 + 812);
    if (*(_BYTE *)(a1 + 812))
      goto LABEL_6;
  }
  if (a8 != a6)
  {
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)"Wrong number of arguments";
    v83 = 259;
    return llvm::MCAsmParser::Error(a1, a10, (uint64_t)&v82, 0, 0);
  }
LABEL_6:
  if (a4)
  {
    v73 = a6 - 1;
    v81 = a6;
    v75 = (_QWORD *)(a5 + 8);
    v79 = a6;
    while (1)
    {
      if (!(_DWORD)v10 && *v80)
      {
        v17 = 0;
        v18 = v11 - 1;
        while (1)
        {
          v19 = a3[v17] != 36 || v18 == v17;
          if (v19)
          {
            if (v18 == v17)
            {
              v22 = 1;
              goto LABEL_92;
            }
          }
          else
          {
            v20 = a3[v17 + 1];
            if ((_DWORD)v20 == 36 || (_DWORD)v20 == 110)
              goto LABEL_38;
            v21 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v20 + 60);
            v22 = (v21 & 0x400) == 0;
            if ((v21 & 0x400) != 0)
            {
              if (v17 >= v11)
                v23 = v11;
              else
                v23 = v17;
              v24 = (void *)*((_QWORD *)this + 4);
              if (v23 > *((_QWORD *)this + 3) - (_QWORD)v24)
                goto LABEL_30;
LABEL_42:
              if (v23)
              {
                memcpy(v24, a3, v23);
                *((_QWORD *)this + 4) += v23;
              }
              goto LABEL_44;
            }
          }
          ++v17;
        }
      }
      v25 = v11 - 1;
      if (v11 == 1 || *a3 != 92)
      {
        v17 = 0;
        do
        {
          v22 = v25 == v17;
          if (v25 == v17)
          {
LABEL_92:
            v17 = v11;
            v23 = v11;
            v24 = (void *)*((_QWORD *)this + 4);
            if (v11 > *((_QWORD *)this + 3) - (_QWORD)v24)
              goto LABEL_30;
            goto LABEL_42;
          }
          v26 = v17++;
        }
        while (v11 - 2 == v26 || a3[v26 + 1] != 92);
      }
      else
      {
        v17 = 0;
      }
LABEL_38:
      v22 = 0;
      if (v17 >= v11)
        v23 = v11;
      else
        v23 = v17;
      v24 = (void *)*((_QWORD *)this + 4);
      if (v23 <= *((_QWORD *)this + 3) - (_QWORD)v24)
        goto LABEL_42;
LABEL_30:
      llvm::raw_ostream::write(this, a3, v23);
LABEL_44:
      if (v22)
        return 0;
      v15 = v17 + 1;
      if (!(_DWORD)v10 && *v80)
      {
        v27 = a3[v15];
        if (v27 == 110)
        {
          llvm::raw_ostream::operator<<(this, a8);
        }
        else if (v27 == 36)
        {
          v28 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v28 >= *((_QWORD *)this + 3))
          {
            llvm::raw_ostream::write(this, 36);
          }
          else
          {
            *((_QWORD *)this + 4) = v28 + 1;
            *v28 = 36;
          }
        }
        else
        {
          v39 = (v27 - 48);
          if (v39 < a8)
          {
            v40 = (uint64_t *)(a7 + 24 * v39);
            v41 = *v40;
            v42 = v40[1];
            if (*v40 != v42)
            {
              do
              {
                while (1)
                {
                  v43 = *(const char **)(v41 + 8);
                  v44 = *(_QWORD *)(v41 + 16);
                  v45 = (void *)*((_QWORD *)this + 4);
                  if (v44 <= *((_QWORD *)this + 3) - (_QWORD)v45)
                    break;
                  llvm::raw_ostream::write(this, v43, *(_QWORD *)(v41 + 16));
                  v41 += 40;
                  if (v41 == v42)
                    goto LABEL_153;
                }
                if (v44)
                {
                  memcpy(v45, v43, *(_QWORD *)(v41 + 16));
                  *((_QWORD *)this + 4) += v44;
                }
                v41 += 40;
              }
              while (v41 != v42);
            }
          }
        }
LABEL_153:
        v15 = v17 + 2;
        goto LABEL_154;
      }
      if (!a9)
        break;
      v29 = (v17 + 2);
      if (v11 == v29 || a3[v15] != 64)
        break;
LABEL_54:
      v30 = &a3[v17 + 1];
      v31 = v29 - v15;
      if (v29 - v15 == 1 && *v30 == 64)
      {
        llvm::raw_ostream::operator<<(this, *(unsigned int *)(a1 + 436));
        v15 = v17 + 2;
        goto LABEL_10;
      }
      if ((_DWORD)v10)
      {
        v10 = 0;
        v35 = v75;
        while (*v35 != v31 || v29 != v15 && memcmp((const void *)*(v35 - 1), &a3[v17 + 1], v29 - v15))
        {
          v35 += 6;
          if (v81 == ++v10)
            goto LABEL_75;
        }
      }
      if ((_DWORD)v10 != v79)
      {
        v46 = (_DWORD)v10 == v73 && v74;
        v47 = a1;
        v48 = (int **)(a7 + 24 * v10);
        v50 = *v48;
        v49 = v48[1];
        if (*v48 == v49)
        {
          v15 = v29;
          goto LABEL_154;
        }
        LODWORD(v10) = v79;
        while (2)
        {
          if (!*(_BYTE *)(v47 + 815))
          {
            v53 = *v50;
            goto LABEL_120;
          }
          v51 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
          v52 = *v51;
          v53 = *v50;
          if (v52 == 37)
          {
            if (v53 == 4)
            {
              v54 = (unint64_t *)(v50 + 6);
              if (v50[8] >= 0x41)
                v54 = (unint64_t *)*v54;
              llvm::raw_ostream::operator<<(this, *v54);
              goto LABEL_100;
            }
LABEL_120:
            if (((v53 == 3) & ~v46) == 0)
              goto LABEL_121;
            v66 = *((_QWORD *)v50 + 2);
            v67 = v66 != 0;
            if (v66)
              v63 = (const void *)(*((_QWORD *)v50 + 1) + 1);
            else
              v63 = (const void *)*((_QWORD *)v50 + 1);
            if (v66 - 1 < v67)
              v68 = 1;
            else
              v68 = v66 - 1;
            if (v68 < v66)
              v66 = v68;
            v64 = v66 - v67;
            v65 = (void *)*((_QWORD *)this + 4);
            if (v66 - v67 <= *((_QWORD *)this + 3) - (_QWORD)v65)
            {
              if (v66 == v67)
                goto LABEL_100;
              goto LABEL_134;
            }
          }
          else
          {
            if (v52 != 60)
              goto LABEL_120;
            if (v53 == 3)
            {
              v55 = *((_QWORD *)v50 + 2);
              v56 = v55 != 0;
              if (v55)
                v57 = v51 + 1;
              else
                v57 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
              if (v55 - 1 < v56)
                v58 = 1;
              else
                v58 = v55 - 1;
              if (v58 < v55)
                v55 = v58;
              memset(&v82, 0, sizeof(v82));
              v59 = v55 - v56;
              if (v55 == v56)
              {
                size = 0;
                v61 = 0;
                v62 = 0;
              }
              else
              {
                v69 = 0;
                do
                {
                  if (v57[v69] == 33)
                    v70 = v69 + 1;
                  else
                    v70 = v69;
                  std::string::push_back(&v82, v57[v70]);
                  v69 = v70 + 1;
                }
                while (v70 + 1 < v59);
                v62 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
                size = v82.__r_.__value_.__l.__size_;
                v61 = v82.__r_.__value_.__r.__words[0];
              }
              v47 = a1;
              LODWORD(v10) = v79;
              if ((v62 & 0x80u) == 0)
                v71 = &v82;
              else
                v71 = (std::string *)v61;
              if ((v62 & 0x80u) == 0)
                v72 = v62;
              else
                v72 = size;
              llvm::raw_ostream::write(this, (const char *)v71, v72);
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v82.__r_.__value_.__l.__data_);
LABEL_100:
              v50 += 10;
              if (v50 == v49)
                goto LABEL_9;
              continue;
            }
LABEL_121:
            v63 = (const void *)*((_QWORD *)v50 + 1);
            v64 = *((_QWORD *)v50 + 2);
            v65 = (void *)*((_QWORD *)this + 4);
            if (v64 <= *((_QWORD *)this + 3) - (_QWORD)v65)
            {
              if (!v64)
                goto LABEL_100;
LABEL_134:
              memcpy(v65, v63, v64);
              *((_QWORD *)this + 4) += v64;
              goto LABEL_100;
            }
          }
          break;
        }
        llvm::raw_ostream::write(this, (const char *)v63, v64);
        goto LABEL_100;
      }
LABEL_75:
      if (a3[v15] == 40 && a3[v17 + 2] == 41)
      {
        v15 = v17 + 3;
LABEL_154:
        LODWORD(v10) = v79;
        goto LABEL_10;
      }
      v36 = (_BYTE *)*((_QWORD *)this + 4);
      LODWORD(v10) = v79;
      if ((unint64_t)v36 >= *((_QWORD *)this + 3))
      {
        v37 = llvm::raw_ostream::write(this, 92);
        v38 = (void *)*((_QWORD *)v37 + 4);
        if (v31 <= *((_QWORD *)v37 + 3) - (_QWORD)v38)
        {
LABEL_150:
          if (v29 == v15)
            goto LABEL_10;
          memcpy(v38, v30, v29 - v15);
          *((_QWORD *)v37 + 4) += v31;
          goto LABEL_9;
        }
      }
      else
      {
        *((_QWORD *)this + 4) = v36 + 1;
        *v36 = 92;
        v37 = this;
        v38 = (void *)*((_QWORD *)this + 4);
        if (v31 <= *((_QWORD *)this + 3) - (_QWORD)v38)
          goto LABEL_150;
      }
      llvm::raw_ostream::write(v37, v30, v29 - v15);
LABEL_9:
      v15 = v29;
LABEL_10:
      if (v11 >= v15)
        v16 = v15;
      else
        v16 = v11;
      a3 += v16;
      v11 -= v16;
      if (!v11)
        return 0;
    }
    v32 = v17 + 2;
    while (1)
    {
      v29 = (v32 - 1);
      v34 = a3[v29];
      if (a3[v29] < 0)
      {
        if (__maskrune(a3[v29], 0x500uLL))
          goto LABEL_62;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v34 + 60) & 0x500) != 0)
      {
        goto LABEL_62;
      }
      if ((v34 - 36) > 0x3B || ((1 << (v34 - 36)) & 0x800000000000401) == 0)
        goto LABEL_54;
LABEL_62:
      v19 = v11 == v32++;
      if (v19)
        goto LABEL_54;
    }
  }
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseMacroArgument(llvm::MCAsmParser *this, uint64_t a2, int a3)
{
  uint64_t result;
  int v6;
  int v7;
  int v10;
  int v11;
  int v12;
  uint64_t Tok;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  llvm::APInt *v17;
  const void **v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  llvm::APInt *v28;
  const void **v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  const char *v36;
  _OWORD v37[2];
  __int16 v38;
  int v39;

  if (a3)
  {
    if (**((_DWORD **)this + 6) == 9)
      return 0;
    v32 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 200))(this);
    *(_QWORD *)&v37[0] = v32;
    *((_QWORD *)&v37[0] + 1) = v33;
    v39 = 3;
    v34 = *(_QWORD *)(a2 + 8);
    if (v34 >= *(_QWORD *)(a2 + 16))
    {
      v35 = std::vector<llvm::AsmToken>::__emplace_back_slow_path<llvm::AsmToken::TokenKind,llvm::StringRef &>((char **)a2, &v39, v37);
    }
    else
    {
      *(_DWORD *)v34 = 3;
      *(_QWORD *)(v34 + 8) = v32;
      *(_QWORD *)(v34 + 16) = v33;
      *(_DWORD *)(v34 + 32) = 64;
      v35 = (char *)(v34 + 40);
      *(_QWORD *)(v34 + 24) = 0;
    }
    result = 0;
    *(_QWORD *)(a2 + 8) = v35;
    return result;
  }
  v6 = 0;
  *((_BYTE *)this + 144) = *((_BYTE *)this + 812);
  while (1)
  {
    v7 = **((_DWORD **)this + 6);
    if (v7 == 28 || v7 == 0)
      break;
    if (v6)
    {
      if (v7 == 9)
      {
        v36 = "unbalanced parentheses in macro argument";
        goto LABEL_51;
      }
      goto LABEL_20;
    }
    if (v7 == 26)
      goto LABEL_50;
    if (v7 == 11)
      llvm::MCAsmLexer::Lex((llvm::MCAsmParser *)((char *)this + 40));
    if (*((_BYTE *)this + 812)
      || ((v20 = **((_DWORD **)this + 6), v21 = v20 > 0x2D, v22 = (1 << v20) & 0x3F9FF300F000, !v21)
        ? (v23 = v22 == 0)
        : (v23 = 1),
          v23))
    {
      if (v7 == 11 || (v7 = **((_DWORD **)this + 6), v7 == 9))
      {
LABEL_50:
        result = 0;
        goto LABEL_52;
      }
LABEL_20:
      v10 = v7 == 18 && v6 != 0;
      v11 = v10 << 31 >> 31;
      if (v7 == 17)
        v11 = 1;
      v12 = v6 + v11;
      Tok = llvm::MCAsmParser::getTok(this);
      v14 = Tok;
      v15 = *(_QWORD *)(a2 + 8);
      if (v15 >= *(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a2 + 8) = std::vector<llvm::AsmToken>::__push_back_slow_path<llvm::AsmToken const&>((char **)a2, Tok);
      }
      else
      {
        v16 = *(_OWORD *)Tok;
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(Tok + 16);
        *(_OWORD *)v15 = v16;
        v17 = (llvm::APInt *)(v15 + 24);
        v18 = (const void **)(v14 + 24);
        v19 = *(_DWORD *)(v14 + 32);
        *(_DWORD *)(v15 + 32) = v19;
        if (v19 > 0x40)
          llvm::APInt::initSlowCase(v17, v18);
        else
          *(_QWORD *)v17 = *v18;
        *(_QWORD *)(a2 + 8) = v15 + 40;
      }
LABEL_6:
      llvm::MCAsmLexer::Lex((llvm::MCAsmParser *)((char *)this + 40));
      v6 = v12;
    }
    else
    {
      v24 = llvm::MCAsmParser::getTok(this);
      v25 = v24;
      v26 = *(_QWORD *)(a2 + 8);
      if (v26 >= *(_QWORD *)(a2 + 16))
      {
        v31 = std::vector<llvm::AsmToken>::__push_back_slow_path<llvm::AsmToken const&>((char **)a2, v24);
      }
      else
      {
        v27 = *(_OWORD *)v24;
        *(_QWORD *)(v26 + 16) = *(_QWORD *)(v24 + 16);
        *(_OWORD *)v26 = v27;
        v28 = (llvm::APInt *)(v26 + 24);
        v29 = (const void **)(v25 + 24);
        v30 = *(_DWORD *)(v25 + 32);
        *(_DWORD *)(v26 + 32) = v30;
        if (v30 > 0x40)
          llvm::APInt::initSlowCase(v28, v29);
        else
          *(_QWORD *)v28 = *v29;
        v31 = (char *)(v26 + 40);
      }
      *(_QWORD *)(a2 + 8) = v31;
      llvm::MCAsmLexer::Lex((llvm::MCAsmParser *)((char *)this + 40));
      v6 = 0;
      v12 = 0;
      if (**((_DWORD **)this + 6) == 11)
        goto LABEL_6;
    }
  }
  v36 = "unexpected token in macro instantiation";
LABEL_51:
  *(_QWORD *)&v37[0] = v36;
  v38 = 259;
  result = llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)v37, 0, 0);
LABEL_52:
  *((_BYTE *)this + 144) = 1;
  return result;
}

void std::vector<std::vector<llvm::AsmToken>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void **v19;
  void **v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void **)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(void ***)a1;
      v19 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v23 = (char *)*(v20 - 3);
          v20 -= 3;
          v22 = v23;
          if (v23)
          {
            v24 = (char *)*(v19 - 2);
            v21 = v22;
            if (v24 != v22)
            {
              do
              {
                if (*((_DWORD *)v24 - 2) >= 0x41u)
                {
                  v25 = (void *)*((_QWORD *)v24 - 2);
                  if (v25)
                    operator delete[](v25);
                }
                v24 -= 40;
              }
              while (v24 != v22);
              v21 = *v20;
            }
            *(v19 - 2) = v22;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

char *std::vector<llvm::AsmToken>::__push_back_slow_path<llvm::AsmToken const&>(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  llvm::APInt *v11;
  const void **v12;
  unsigned int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void *v19;

  v2 = *a1;
  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - v2) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - v2) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v2) >> 3) >= 0x333333333333333)
    v5 = 0x666666666666666;
  if (v5 > 0x666666666666666)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v8 = 40 * v5;
  v9 = (char *)operator new(40 * v5);
  v10 = &v9[40 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  v11 = (llvm::APInt *)(v10 + 24);
  v12 = (const void **)(a2 + 24);
  v13 = *(_DWORD *)(a2 + 32);
  *((_DWORD *)v10 + 8) = v13;
  if (v13 > 0x40)
  {
    llvm::APInt::initSlowCase(v11, v12);
    v2 = *a1;
    v3 = a1[1];
    v14 = &v9[v8];
    v15 = v10 + 40;
    if (v3 != *a1)
      goto LABEL_9;
LABEL_18:
    *a1 = v10;
    a1[1] = v15;
    a1[2] = v14;
    goto LABEL_19;
  }
  *(_QWORD *)v11 = *v12;
  v14 = &v9[v8];
  v15 = v10 + 40;
  if (v3 == v2)
    goto LABEL_18;
LABEL_9:
  v16 = 0;
  do
  {
    v17 = &v10[v16];
    v18 = *(_OWORD *)&v3[v16 - 40];
    *((_QWORD *)v17 - 3) = *(_QWORD *)&v3[v16 - 24];
    *(_OWORD *)(v17 - 40) = v18;
    *((_DWORD *)v17 - 2) = *(_DWORD *)&v3[v16 - 8];
    *((_QWORD *)v17 - 2) = *(_QWORD *)&v3[v16 - 16];
    *(_DWORD *)&v3[v16 - 8] = 0;
    v16 -= 40;
  }
  while (&v3[v16] != v2);
  *a1 = &v10[v16];
  a1[1] = v15;
  a1[2] = v14;
  while (v3 != v2)
  {
    if (*((_DWORD *)v3 - 2) >= 0x41u)
    {
      v19 = (void *)*((_QWORD *)v3 - 2);
      if (v19)
        operator delete[](v19);
    }
    v3 -= 40;
  }
LABEL_19:
  if (v2)
    operator delete(v2);
  return v15;
}

char *std::vector<llvm::AsmToken>::__emplace_back_slow_path<llvm::AsmToken::TokenKind,llvm::StringRef &>(char **a1, _DWORD *a2, _OWORD *a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  void *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  if (v6 > 0x666666666666666)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v10 = 40 * v6;
  v11 = (char *)operator new(40 * v6);
  v12 = &v11[40 * v5];
  v13 = &v11[v10];
  *(_DWORD *)v12 = *a2;
  *(_OWORD *)(v12 + 8) = *a3;
  *((_DWORD *)v12 + 8) = 64;
  *((_QWORD *)v12 + 3) = 0;
  v14 = v12 + 40;
  if (v4 == v3)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v12[v15];
      v17 = *(_OWORD *)&v4[v15 - 40];
      *((_QWORD *)v16 - 3) = *(_QWORD *)&v4[v15 - 24];
      *(_OWORD *)(v16 - 40) = v17;
      *((_DWORD *)v16 - 2) = *(_DWORD *)&v4[v15 - 8];
      *((_QWORD *)v16 - 2) = *(_QWORD *)&v4[v15 - 16];
      *(_DWORD *)&v4[v15 - 8] = 0;
      v15 -= 40;
    }
    while (&v4[v15] != v3);
    *a1 = &v12[v15];
    a1[1] = v14;
    a1[2] = v13;
    while (v4 != v3)
    {
      if (*((_DWORD *)v4 - 2) >= 0x41u)
      {
        v18 = (void *)*((_QWORD *)v4 - 2);
        if (v18)
          operator delete[](v18);
      }
      v4 -= 40;
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

void std::vector<llvm::AsmToken>::__assign_with_size[abi:nn180100]<llvm::AsmToken*,llvm::AsmToken*>(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  const void **v21;
  const void **v22;
  char *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  __int128 v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  const void **v33;
  const void **v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::APInt *v43;
  unsigned int v44;
  uint64_t v45;

  v8 = (uint64_t)a1[2];
  v9 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) >= a4)
  {
    v13 = a1[1];
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v9) >> 3);
    if (v14 >= a4)
    {
      if (a2 != a3)
      {
        v29 = 0;
        do
        {
          while (1)
          {
            v30 = &v9[v29];
            v31 = a2 + v29;
            v32 = *(_OWORD *)(a2 + v29);
            *((_QWORD *)v30 + 2) = *(_QWORD *)(a2 + v29 + 16);
            *(_OWORD *)v30 = v32;
            v33 = (const void **)&v9[v29 + 24];
            v34 = (const void **)(a2 + v29 + 24);
            if (*(_DWORD *)&v9[v29 + 32] <= 0x40u && *(_DWORD *)(v31 + 32) <= 0x40u)
              break;
            llvm::APInt::assignSlowCase(v33, v34);
            v29 += 40;
            if (a2 + v29 == a3)
              goto LABEL_29;
          }
          *v33 = *v34;
          *((_DWORD *)v30 + 8) = *(_DWORD *)(v31 + 32);
          v29 += 40;
        }
        while (a2 + v29 != a3);
LABEL_29:
        v13 = a1[1];
        v9 += v29;
      }
      while (v13 != v9)
      {
        if (*((_DWORD *)v13 - 2) >= 0x41u)
        {
          v35 = (void *)*((_QWORD *)v13 - 2);
          if (v35)
            operator delete[](v35);
        }
        v13 -= 40;
      }
      a1[1] = v9;
    }
    else
    {
      v15 = a2 + 8 * ((v13 - v9) >> 3);
      if (v13 != v9)
      {
        v16 = 0;
        v17 = 40 * v14;
        do
        {
          while (1)
          {
            v18 = &v9[v16];
            v19 = a2 + v16;
            v20 = *(_OWORD *)(a2 + v16);
            *((_QWORD *)v18 + 2) = *(_QWORD *)(a2 + v16 + 16);
            *(_OWORD *)v18 = v20;
            v21 = (const void **)&v9[v16 + 24];
            v22 = (const void **)(a2 + v16 + 24);
            if (*(_DWORD *)&v9[v16 + 32] <= 0x40u && *(_DWORD *)(v19 + 32) <= 0x40u)
              break;
            llvm::APInt::assignSlowCase(v21, v22);
            v16 += 40;
            if (v17 == v16)
              goto LABEL_16;
          }
          *v21 = *v22;
          *((_DWORD *)v18 + 8) = *(_DWORD *)(v19 + 32);
          v16 += 40;
        }
        while (v17 != v16);
LABEL_16:
        v9 = (char *)a1[1];
      }
      v23 = v9;
      if (v15 != a3)
      {
        v24 = a2 + 40 * v14 + 24;
        v25 = v9 + 24;
        v23 = v9;
        do
        {
          v27 = *(_OWORD *)(v24 - 24);
          *((_QWORD *)v25 - 1) = *(_QWORD *)(v24 - 8);
          *(_OWORD *)(v25 - 6) = v27;
          v28 = *(_DWORD *)(v24 + 8);
          v25[2] = v28;
          if (v28 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)v25, (const void **)v24);
          else
            *(_QWORD *)v25 = *(_QWORD *)v24;
          v26 = v24 - 24;
          v24 += 40;
          v23 += 40;
          v25 += 10;
        }
        while (v26 + 40 != a3);
      }
      a1[1] = v23;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (char *)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((_DWORD *)v10 - 2) >= 0x41u)
          {
            v12 = (void *)*((_QWORD *)v10 - 2);
            if (v12)
              operator delete[](v12);
          }
          v10 -= 40;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x666666666666666)
      goto LABEL_52;
    v36 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v37 = 2 * v36;
    if (2 * v36 <= a4)
      v37 = a4;
    v38 = v36 >= 0x333333333333333 ? 0x666666666666666 : v37;
    if (v38 > 0x666666666666666)
LABEL_52:
      abort();
    v39 = 5 * v38;
    v40 = operator new(40 * v38);
    *a1 = v40;
    a1[1] = v40;
    a1[2] = &v40[v39];
    if (a2 != a3)
    {
      v41 = a2 + 24;
      do
      {
        while (1)
        {
          *(_OWORD *)v40 = *(_OWORD *)(v41 - 24);
          v40[2] = *(_QWORD *)(v41 - 8);
          v43 = (llvm::APInt *)(v40 + 3);
          v44 = *(_DWORD *)(v41 + 8);
          *((_DWORD *)v40 + 8) = v44;
          if (v44 <= 0x40)
            break;
          llvm::APInt::initSlowCase(v43, (const void **)v41);
          v42 = v41 - 24;
          v40 += 5;
          v41 += 40;
          if (v42 + 40 == a3)
            goto LABEL_51;
        }
        *(_QWORD *)v43 = *(_QWORD *)v41;
        v45 = v41 - 24;
        v40 += 5;
        v41 += 40;
      }
      while (v45 + 40 != a3);
    }
LABEL_51:
    a1[1] = v40;
  }
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveAscii(llvm::StringRef,BOOL)::$_0>(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  uint64_t v3;
  uint64_t v5;
  void *p_p;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  uint64_t v10;
  uint64_t v11;

  v2 = *(llvm::MCAsmParser **)a1;
  __p = 0;
  v10 = 0;
  v11 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v2 + 264))(v2) & 1) == 0)
  {
    while (((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)v2 + 208))(v2, &__p) & 1) == 0)
    {
      v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v2 + 56))(v2);
      if (v11 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v11 >= 0)
        v7 = HIBYTE(v11);
      else
        v7 = v10;
      (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v5 + 496))(v5, p_p, v7);
      if (**(_BYTE **)(a1 + 8))
        goto LABEL_14;
      if (*(_DWORD *)llvm::MCAsmParser::getTok(v2) != 3)
      {
        if (**(_BYTE **)(a1 + 8))
        {
LABEL_14:
          v8 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v2 + 56))(v2);
          (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v8 + 496))(v8, &unk_181268BE2, 1);
        }
        v3 = 0;
        if ((SHIBYTE(v11) & 0x80000000) == 0)
          return v3;
        goto LABEL_16;
      }
    }
  }
  v3 = 1;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
    return v3;
LABEL_16:
  operator delete(__p);
  return v3;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveValue(llvm::StringRef,unsigned int)::$_0>(uint64_t a1)
{
  uint64_t v2;
  llvm::MCAsmLexer *v3;
  uint64_t Loc;
  int64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  uint64_t v15;

  v2 = *(_QWORD *)a1;
  v15 = 0;
  v3 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  Loc = llvm::MCAsmLexer::getLoc(v3);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2) & 1) != 0)
    return 1;
  v13[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v15, v13) & 1) != 0)
    return 1;
  if (*(_BYTE *)v15 == 1)
  {
    v6 = *(_QWORD *)(v15 + 16);
    v7 = 8 * **(_DWORD **)(a1 + 8);
    v8 = v7 > 0x3F || 0xFFFFFFFFFFFFFFFFLL >> (-8 * **(_BYTE **)(a1 + 8)) >= v6;
    if (v8 || ((v9 = -1 << (v7 - 1), v9 <= v6) ? (v10 = v6 <= ~v9) : (v10 = 0), v10))
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
      (*(void (**)(uint64_t, int64_t, _QWORD))(*(_QWORD *)v12 + 520))(v12, v6, **(unsigned int **)(a1 + 8));
      return 0;
    }
    else
    {
      v13[0] = "out of range literal value";
      v14 = 259;
      return llvm::MCAsmParser::Error(v2, Loc, (uint64_t)v13, 0, 0);
    }
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    llvm::MCStreamer::emitValue(v11);
    return 0;
  }
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveOctaValue(llvm::StringRef)::$_0>(_anonymous_namespace_::AsmParser **a1)
{
  _anonymous_namespace_::AsmParser *v1;
  uint64_t v2;
  int v4;
  void (*v5)(void);
  uint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;

  v1 = *a1;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)*a1 + 264))(*a1) & 1) != 0)
    return 1;
  v8 = 0;
  v9 = 0;
  v2 = parseHexOcta(v1, (void **)&v9, &v8);
  if ((v2 & 1) != 0)
    return v2;
  v4 = *(unsigned __int8 *)(*((_QWORD *)v1 + 29) + 16);
  v5 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)v1 + 56))(v1)
                        + 520);
  v5();
  v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)v1 + 56))(v1);
  if (v4)
    v7 = (void *)v9;
  else
    v7 = v8;
  (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v6 + 520))(v6, v7, 8);
  return v2;
}

uint64_t parseHexOcta(_anonymous_namespace_::AsmParser *a1, void **a2, void **a3)
{
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t v8;
  const void **v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  void *v15;
  void *v16;
  void *__p;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  __int16 v21;

  if (*(_DWORD *)llvm::MCAsmParser::getTok(a1) != 4 && *(_DWORD *)llvm::MCAsmParser::getTok(a1) != 5)
  {
    v19 = "unknown token in expression";
    v21 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v19, 0, 0);
  }
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(a1);
  Loc = mlir::Token::getLoc(Tok);
  v8 = llvm::MCAsmParser::getTok(a1);
  v9 = (const void **)(v8 + 24);
  v18 = *(_DWORD *)(v8 + 32);
  if (v18 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v9);
  else
    __p = (void *)*v9;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)a1 + 184))(a1);
  v10 = v18;
  if (v18 >= 0x41)
  {
    v13 = v10 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
    if (v13 >= 0x81)
    {
      v19 = "out of range literal value";
      v21 = 259;
      v12 = llvm::MCAsmParser::Error((uint64_t)a1, Loc, (uint64_t)&v19, 0, 0);
      goto LABEL_14;
    }
    if (v13 >= 0x41)
    {
      llvm::APInt::getHiBits((const void **)&__p, v10 - 64, (uint64_t)&v19);
      if (v20 > 0x40)
      {
        v15 = v19;
        *a2 = *(void **)v19;
        operator delete[](v15);
      }
      else
      {
        *a2 = v19;
      }
      llvm::APInt::getLoBits((llvm::APInt *)&__p, 0x40u, (uint64_t)&v19);
      if (v20 > 0x40)
      {
        v16 = v19;
        *a3 = *(void **)v19;
        operator delete[](v16);
      }
      else
      {
        *a3 = v19;
      }
      v12 = 0;
      goto LABEL_14;
    }
    *a2 = 0;
    v11 = *(void **)__p;
  }
  else
  {
    v11 = __p;
    *a2 = 0;
  }
  v12 = 0;
  *a3 = v11;
LABEL_14:
  if (v18 >= 0x41 && __p)
    operator delete[](__p);
  return v12;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveRealValue(llvm::StringRef,llvm::fltSemantics const&)::$_0>(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *__p;
  unsigned int v9;

  v2 = *(char **)a1;
  v3 = 1;
  v9 = 1;
  __p = 0;
  if (((*(uint64_t (**)(char *))(*(_QWORD *)v2 + 264))(v2) & 1) == 0
  {
    v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 56))(v2);
    v5 = v9;
    if (v9 >= 0x41)
    {
      if (v5 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
        v6 = *(_QWORD *)__p;
      else
        v6 = -1;
    }
    else
    {
      v6 = (uint64_t)__p;
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 520))(v4, v6, v5 >> 3);
    v3 = 0;
  }
  if (v9 >= 0x41 && __p)
    operator delete[](__p);
  return v3;
}

uint64_t `anonymous namespace'::AsmParser::parseRealValue(char *a1, llvm::APFloatBase *a2, uint64_t a3)
{
  int v6;
  llvm::APFloatBase *v7;
  llvm::APFloatBase *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  __int128 v13;
  char *v14;
  uint64_t v15;
  char v16[8];
  llvm::APFloatBase *v17;
  uint64_t v18;
  const char *v19;
  llvm::APFloatBase *v20;
  _BYTE v21[16];
  __int16 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = **(_DWORD **)((*(uint64_t (**)(char *))(*(_QWORD *)a1 + 40))(a1) + 8);
  if (v6 == 13
    || (v7 = (llvm::APFloatBase *)(*(uint64_t (**)(char *))(*(_QWORD *)a1 + 40))(a1),
        **((_DWORD **)v7 + 1) == 12))
  {
    v7 = (llvm::APFloatBase *)llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
  }
  switch(**((_DWORD **)a1 + 6))
  {
    case 1:
      v22 = 260;
      v19 = a1 + 112;
      return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v19, 0, 0);
    case 2:
    case 4:
    case 6:
      v8 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v7);
      if (v8 == a2)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v17, (uint64_t)a2);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v17, (uint64_t)a2);
      v13 = *(_OWORD *)(llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1) + 8);
      if (**(_DWORD **)((*(uint64_t (**)(char *))(*(_QWORD *)a1 + 40))(a1) + 8) != 2)
      {
        llvm::APFloat::convertFromString((uint64_t)v16, (unsigned __int8 *)v13, *((unint64_t *)&v13 + 1), 1, (uint64_t)&v19);
        if ((v20 & 1) == 0 || (v9 = v19, v19 = 0, !v9))
        {
LABEL_31:
          if (v6 != 13)
            goto LABEL_38;
LABEL_32:
          if (v8 == v17)
            llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v17);
          else
            llvm::detail::IEEEFloat::changeSign(&v17);
LABEL_38:
          (*(void (**)(char *))(*(_QWORD *)a1 + 184))(a1);
          if (v8 == v17)
          {
            llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v17, (llvm::APInt *)&v19);
            if (*(_DWORD *)(a3 + 8) < 0x41u)
              goto LABEL_44;
          }
          else
          {
            llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v17, (uint64_t)&v19);
            if (*(_DWORD *)(a3 + 8) < 0x41u)
              goto LABEL_44;
          }
          if (*(_QWORD *)a3)
            operator delete[](*(void **)a3);
LABEL_44:
          v11 = 0;
          *(_QWORD *)a3 = v19;
          *(_DWORD *)(a3 + 8) = (_DWORD)v20;
          if (v8 != v17)
            goto LABEL_45;
LABEL_22:
          std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v18);
          return v11;
        }
        v14 = (char *)v9;
        llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((_QWORD **)&v14, &v15);
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
        if ((v20 & 1) != 0)
        {
          v10 = v19;
          v19 = 0;
          if (v10)
            (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
        }
        goto LABEL_21;
      }
      if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)&v13, "infinity", 8uLL)
        || !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v13, "inf", 3uLL))
      {
        if (v8 == a2)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v20, (uint64_t)a2);
          if (v8 != v20)
          {
LABEL_29:
            llvm::detail::IEEEFloat::makeInf((llvm::detail::IEEEFloat *)&v20, 0);
            llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v17, (llvm::APFloatBase *)&v20);
            if (v8 != v20)
            {
LABEL_30:
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v20);
              goto LABEL_31;
            }
LABEL_37:
            std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)v21);
            if (v6 != 13)
              goto LABEL_38;
            goto LABEL_32;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v20, (uint64_t)a2);
          if (v8 != v20)
            goto LABEL_29;
        }
        llvm::detail::DoubleAPFloat::makeInf((llvm::detail::DoubleAPFloat *)&v20, 0);
        llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v17, (llvm::APFloatBase *)&v20);
        if (v8 != v20)
          goto LABEL_30;
        goto LABEL_37;
      }
      if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)&v13, "nan", 3uLL))
      {
        llvm::APFloat::getNaN(a2, 0, (void *)0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v19);
        llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v17, (llvm::APFloatBase *)&v20);
        if (v8 == v20)
        {
          std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)v21);
          if (v6 != 13)
            goto LABEL_38;
          goto LABEL_32;
        }
        goto LABEL_30;
      }
LABEL_21:
      v19 = "invalid floating point literal";
      v22 = 259;
      v11 = llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v19, 0, 0);
      if (v8 == v17)
        goto LABEL_22;
LABEL_45:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v17);
      return v11;
    default:
      v19 = "unexpected token in directive";
      v22 = 259;
      return llvm::MCAsmParser::TokError((uint64_t)a1, (uint64_t)&v19, 0, 0);
  }
}

void llvm::APFloat::getNaN(llvm::APFloatBase *a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void **v6;
  llvm::APFloatBase *v7;
  llvm::detail::DoubleAPFloat *v8;
  void **v9;
  llvm::APFloatBase *v10;
  llvm::detail::IEEEFloat *v11;
  void *__p;
  unsigned int v13;

  if (!a3)
  {
    v9 = (void **)(a4 + 8);
    v10 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(a1);
    if (v10 == a1)
    {
      v11 = (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, (uint64_t)a1);
      if (v10 != *v9)
        goto LABEL_8;
    }
    else
    {
      v11 = (llvm::detail::IEEEFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)a1);
      if (v10 != *v9)
      {
LABEL_8:
        llvm::detail::IEEEFloat::makeNaN(v11, 0, a2, 0);
        return;
      }
    }
    llvm::detail::DoubleAPFloat::makeNaN(v11, 0, a2, 0);
    return;
  }
  v13 = 64;
  __p = a3;
  v6 = (void **)(a4 + 8);
  v7 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v7 != a1)
  {
    v8 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v6, (uint64_t)a1);
    if (v7 != *v6)
      goto LABEL_4;
LABEL_10:
    llvm::detail::DoubleAPFloat::makeNaN(v8, 0, a2, (const llvm::APInt *)&__p);
    if (v13 < 0x41)
      return;
    goto LABEL_11;
  }
  v8 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, (uint64_t)a1);
  if (v7 == *v6)
    goto LABEL_10;
LABEL_4:
  llvm::detail::IEEEFloat::makeNaN(v8, 0, a2, (const llvm::APInt *)&__p);
  if (v13 < 0x41)
    return;
LABEL_11:
  if (__p)
    operator delete[](__p);
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveSymbolAttribute(llvm::MCSymbolAttr)::$_0>(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  mlir::Token *Tok;
  uint64_t Loc;
  const char *v5;
  llvm::MCContext *v7;
  uint64_t Symbol;
  uint64_t v9;
  const char *v10[4];
  __int16 v11;
  const char *v12;
  const char *v13;

  v2 = *(llvm::MCAsmParser **)a1;
  v12 = 0;
  v13 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(v2);
  Loc = mlir::Token::getLoc(Tok);
  if ((*(unsigned int (**)(llvm::MCAsmParser *, const char **))(*(_QWORD *)v2 + 192))(v2, &v12))
  {
    v5 = "expected identifier";
LABEL_3:
    v10[0] = v5;
    v11 = 259;
    return llvm::MCAsmParser::Error((uint64_t)v2, Loc, (uint64_t)v10, 0, 0);
  }
  if (((*(uint64_t (**)(llvm::MCAsmParser *, const char *, const char *))(*(_QWORD *)v2 + 104))(v2, v12, v13) & 1) != 0)return 0;
  v7 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v2 + 48))(v2);
  v11 = 261;
  v10[0] = v12;
  v10[1] = v13;
  Symbol = llvm::MCContext::getOrCreateSymbol(v7, v10);
  if ((*(_BYTE *)(Symbol + 8) & 2) != 0 && **(_DWORD **)(a1 + 8) != 29)
  {
    v5 = "non-local symbol required";
    goto LABEL_3;
  }
  v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v2 + 56))(v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 296))(v9, Symbol, **(unsigned int **)(a1 + 8)) & 1) == 0)
  {
    v5 = "unable to emit symbol attribute";
    goto LABEL_3;
  }
  return 0;
}

unint64_t `anonymous namespace'::AsmParser::parseMacroLikeBody(uint64_t a1, uint64_t a2)
{
  uint64_t Tok;
  __int128 v5;
  const void **v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  const void **v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  mlir::Token *v58;
  uint64_t Loc;
  _QWORD v60[4];
  __int16 v61;
  __int128 v62;
  uint64_t v63;
  void *__p;
  unsigned int v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  unsigned int v69;

  LODWORD(v66) = 0;
  v67 = 0;
  v68 = 0;
  *((_QWORD *)&v66 + 1) = 0;
  v69 = 1;
  Tok = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
  v5 = *(_OWORD *)Tok;
  v63 = *(_QWORD *)(Tok + 16);
  v62 = v5;
  v6 = (const void **)(Tok + 24);
  v65 = *(_DWORD *)(Tok + 32);
  if (v65 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v6);
  else
    __p = (void *)*v6;
  if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
  {
LABEL_78:
    v60[0] = "no matching '.endr' in definition";
    v61 = 259;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2, v60, 0, 0);
    goto LABEL_79;
  }
  v7 = 0;
  while (1)
  {
    if (**(_DWORD **)(a1 + 48) != 2)
      goto LABEL_60;
    v8 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    if (*(_DWORD *)v8 == 2)
    {
      v9 = *(_DWORD **)(v8 + 8);
      if (*(_QWORD *)(v8 + 16) != 4)
        goto LABEL_19;
    }
    else
    {
      v9 = *(_DWORD **)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16);
      v11 = v10 - 1;
      v12 = v10 != 0;
      if (v10)
        v9 = (_DWORD *)((char *)v9 + 1);
      if (v11 < v12)
        v11 = 1;
      if (v11 < v10)
        v10 = v11;
      if (v10 - v12 != 4)
        goto LABEL_19;
    }
    if (*v9 == 1885696558)
      goto LABEL_59;
LABEL_19:
    v13 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    if (*(_DWORD *)v13 == 2)
    {
      v14 = *(int **)(v13 + 8);
      if (*(_QWORD *)(v13 + 16) != 5)
        goto LABEL_33;
    }
    else
    {
      v14 = *(int **)(v13 + 8);
      v15 = *(_QWORD *)(v13 + 16);
      v16 = v15 - 1;
      v17 = v15 != 0;
      if (v15)
        v14 = (int *)((char *)v14 + 1);
      if (v16 < v17)
        v16 = 1;
      if (v16 < v15)
        v15 = v16;
      if (v15 - v17 != 5)
        goto LABEL_33;
    }
    v18 = *v14;
    v19 = *((unsigned __int8 *)v14 + 4);
    if (v18 == 1885696558 && v19 == 116)
    {
LABEL_59:
      ++v7;
      goto LABEL_60;
    }
LABEL_33:
    v21 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    if (*(_DWORD *)v21 == 2)
    {
      v22 = *(_DWORD **)(v21 + 8);
      if (*(_QWORD *)(v21 + 16) != 4)
        goto LABEL_44;
    }
    else
    {
      v22 = *(_DWORD **)(v21 + 8);
      v23 = *(_QWORD *)(v21 + 16);
      v24 = v23 - 1;
      v25 = v23 != 0;
      if (v23)
        v22 = (_DWORD *)((char *)v22 + 1);
      if (v24 < v25)
        v24 = 1;
      if (v24 < v23)
        v23 = v24;
      if (v23 - v25 != 4)
        goto LABEL_44;
    }
    if (*v22 == 1886546222)
      goto LABEL_59;
LABEL_44:
    v26 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    if (*(_DWORD *)v26 == 2)
    {
      v27 = *(int **)(v26 + 8);
      if (*(_QWORD *)(v26 + 16) != 5)
        goto LABEL_60;
    }
    else
    {
      v27 = *(int **)(v26 + 8);
      v28 = *(_QWORD *)(v26 + 16);
      v29 = v28 - 1;
      v30 = v28 != 0;
      if (v28)
        v27 = (int *)((char *)v27 + 1);
      if (v29 < v30)
        v29 = 1;
      if (v29 < v28)
        v28 = v29;
      if (v28 - v30 != 5)
        goto LABEL_60;
    }
    v31 = *v27;
    v32 = *((unsigned __int8 *)v27 + 4);
    if (v31 == 1886546222 && v32 == 99)
      goto LABEL_59;
LABEL_60:
    if (**(_DWORD **)(a1 + 48) != 2)
      goto LABEL_6;
    v34 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    if (*(_DWORD *)v34 != 2)
      break;
    v35 = *(int **)(v34 + 8);
    if (*(_QWORD *)(v34 + 16) == 5)
      goto LABEL_71;
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
      goto LABEL_78;
  }
  v35 = *(int **)(v34 + 8);
  v36 = *(_QWORD *)(v34 + 16);
  v37 = v36 - 1;
  v38 = v36 != 0;
  if (v36)
    v35 = (int *)((char *)v35 + 1);
  if (v37 < v38)
    v37 = 1;
  if (v37 < v36)
    v36 = v37;
  if (v36 - v38 != 5)
    goto LABEL_6;
LABEL_71:
  v39 = *v35;
  v40 = *((unsigned __int8 *)v35 + 4);
  if (v39 != 1684956462 || v40 != 114)
    goto LABEL_6;
  if (v7)
  {
    --v7;
    goto LABEL_6;
  }
  v44 = llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
  v45 = *(_QWORD *)(v44 + 16);
  v66 = *(_OWORD *)v44;
  v67 = v45;
  v46 = (const void **)(v44 + 24);
  v47 = *(_DWORD *)(v44 + 32);
  if (v47 > 0x40)
  {
    llvm::APInt::assignSlowCase((const void **)&v68, v46);
  }
  else
  {
    v68 = (void *)*v46;
    v69 = v47;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) != 9)
  {
    v58 = (mlir::Token *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
    Loc = mlir::Token::getLoc(v58);
    v60[0] = "unexpected token in '.endr' directive";
    v61 = 259;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, Loc, v60, 0, 0);
LABEL_79:
    v42 = 0;
    if (v65 < 0x41)
      goto LABEL_82;
    goto LABEL_80;
  }
  v48 = mlir::Token::getLoc((mlir::Token *)&v62);
  v49 = mlir::Token::getLoc((mlir::Token *)&v66);
  v50 = *(_QWORD *)(a1 + 400);
  v51 = *(_QWORD *)(a1 + 392);
  v52 = 46 * ((v50 - v51) >> 3) - 1;
  if (v50 == v51)
    v52 = 0;
  v53 = v49 - v48;
  v54 = *(_QWORD *)(a1 + 424) + *(_QWORD *)(a1 + 416);
  if (v52 == v54)
  {
    std::deque<llvm::MCAsmMacro>::__add_back_capacity(a1 + 384);
    v51 = *(_QWORD *)(a1 + 392);
    v54 = *(_QWORD *)(a1 + 424) + *(_QWORD *)(a1 + 416);
  }
  v55 = *(_QWORD *)(v51 + 8 * (v54 / 0x2E)) + 88 * (v54 % 0x2E);
  *(_QWORD *)v55 = 0;
  *(_QWORD *)(v55 + 8) = 0;
  *(_QWORD *)(v55 + 16) = v48;
  *(_QWORD *)(v55 + 24) = v53;
  *(_OWORD *)(v55 + 32) = 0u;
  *(_OWORD *)(v55 + 48) = 0u;
  *(_OWORD *)(v55 + 64) = 0u;
  *(_BYTE *)(v55 + 80) = 0;
  v57 = *(_QWORD *)(a1 + 416);
  v56 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v56 + 1;
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * ((v56 + v57) / 0x2EuLL)) + 88 * ((v56 + v57) % 0x2EuLL);
  if (v65 >= 0x41)
  {
LABEL_80:
    if (__p)
      operator delete[](__p);
  }
LABEL_82:
  if (v69 >= 0x41 && v68)
    operator delete[](v68);
  return v42;
}

uint64_t `anonymous namespace'::AsmParser::instantiateMacroLikeBody(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  _DWORD *v10;
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 *v37;
  uint64_t v38;
  __n128 *v39;
  int v40;
  uint64_t v41;
  uint64_t result;
  __n128 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;

  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 5)
  {
    *(_WORD *)(v6 + 4) = 2674;
    *(_DWORD *)v6 = 1684956462;
    *((_QWORD *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, ".endr\n", 6uLL);
  }
  v7 = *((_QWORD *)this + 8);
  v8 = *(const void **)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v43.n128_u64[0] = (unint64_t)"<instantiation>";
  v45 = 259;
  llvm::MemoryBuffer::getMemBufferCopy(v8, v9, (uint64_t)&v43, 0, &v46);
  v10 = operator new(0x20uLL);
  *(_QWORD *)v10 = a2;
  v10[2] = *(_DWORD *)(a1 + 296);
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok((llvm::MCAsmParser *)a1);
  Loc = mlir::Token::getLoc(Tok);
  v13 = (uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 3;
  *((_QWORD *)v10 + 2) = Loc;
  *((_QWORD *)v10 + 3) = v13;
  v15 = *(char **)(a1 + 368);
  v14 = *(_QWORD *)(a1 + 376);
  if ((unint64_t)v15 < v14)
  {
    *(_QWORD *)v15 = v10;
    v16 = (uint64_t)(v15 + 8);
    goto LABEL_26;
  }
  v17 = *(char **)(a1 + 360);
  v18 = (v15 - v17) >> 3;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v20 = v14 - (_QWORD)v17;
  if (v20 >> 2 > v19)
    v19 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (v21 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v18];
    v24 = &v22[8 * v21];
    *(_QWORD *)v23 = v10;
    v16 = (uint64_t)(v23 + 8);
    v25 = (char *)(v15 - v17);
    if (v15 == v17)
      goto LABEL_24;
    goto LABEL_17;
  }
  v22 = 0;
  v23 = (char *)(8 * v18);
  v24 = 0;
  *(_QWORD *)(8 * v18) = v10;
  v16 = 8 * v18 + 8;
  v25 = (char *)(v15 - v17);
  if (v15 != v17)
  {
LABEL_17:
    v26 = (unint64_t)(v25 - 8);
    if (v26 < 0x58)
      goto LABEL_36;
    if ((unint64_t)(v17 - v22) < 0x20)
      goto LABEL_36;
    v27 = (v26 >> 3) + 1;
    v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v15[-v28];
    v23 -= v28;
    v30 = &v22[8 * v18 - 16];
    v31 = v15 - 16;
    v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v33 = *(_OWORD *)v31;
      *((_OWORD *)v30 - 1) = *((_OWORD *)v31 - 1);
      *(_OWORD *)v30 = v33;
      v30 -= 32;
      v31 -= 32;
      v32 -= 4;
    }
    while (v32);
    v15 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_36:
      do
      {
        v34 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v23 - 1) = v34;
        v23 -= 8;
      }
      while (v15 != v17);
    }
    v15 = *(char **)(a1 + 360);
  }
LABEL_24:
  *(_QWORD *)(a1 + 360) = v23;
  *(_QWORD *)(a1 + 368) = v16;
  *(_QWORD *)(a1 + 376) = v24;
  if (v15)
    operator delete(v15);
LABEL_26:
  *(_QWORD *)(a1 + 368) = v16;
  v35 = *(_QWORD *)(a1 + 240);
  v36 = v46;
  v46 = 0;
  v44 = 0;
  v43 = (__n128)(unint64_t)v36;
  v37 = *(__n128 **)(v35 + 8);
  if ((unint64_t)v37 >= *(_QWORD *)(v35 + 16))
  {
    v39 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)v35, &v43);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v37, &v43);
    v39 = (__n128 *)(v38 + 24);
  }
  *(_QWORD *)(v35 + 8) = v39;
  v40 = -1431655765 * (((unint64_t)v39->n128_u64 - *(_QWORD *)v35) >> 3);
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v43);
  *(_DWORD *)(a1 + 296) = v40;
  v41 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (v40 - 1));
  llvm::AsmLexer::setBuffer(a1 + 40, *(_QWORD *)(v41 + 8), *(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8), 0, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  result = v46;
  v46 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::deque<llvm::MCAsmMacro>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  void *v92;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2E;
  v4 = v2 - 46;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v76 = &v37[8 * v35];
            v43 = v76;
            if ((unint64_t)(v76 - v7) >= 0x20)
            {
              v77 = (v42 >> 3) + 1;
              v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v78];
              v7 += v78;
              v79 = (__int128 *)(v6 + 3);
              v80 = v76 + 16;
              v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v83 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v83;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_74;
      }
LABEL_84:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v92 = operator new(0xFD0uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v92);
      return;
    }
    v92 = operator new(0xFD0uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v92);
    v44 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v44 + 1);
    v8 = *v44;
    *(_QWORD *)(a1 + 8) = v44 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v45 = (v5 - v9) >> 2;
      if (v5 == v9)
        v45 = 1;
      if (!(v45 >> 61))
      {
        v46 = v45 >> 2;
        v47 = 8 * v45;
        v37 = (char *)operator new(8 * v45);
        v38 = &v37[8 * v46];
        v39 = &v37[v47];
        v48 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v48 & 0xFFFFFFFFFFFFFFF8];
          v49 = v48 - 8;
          if ((unint64_t)(v48 - 8) >= 0x38)
          {
            v84 = &v37[8 * v46];
            v50 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v49 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v50 = &v38[v86];
              v7 += v86;
              v87 = (__int128 *)(v44 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v50 = &v37[8 * v46];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v50 = v91;
            v50 += 8;
          }
          while (v50 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v37;
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v39;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_84;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_84;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v21];
  v27 = &v25[8 * v24];
  v28 = operator new(0xFD0uLL);
  v29 = v28;
  if (v21 != v24)
    goto LABEL_23;
  if (v20 >= 1)
  {
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v26 -= 8 * (v30 >> 1);
LABEL_23:
    *(_QWORD *)v26 = v28;
    v31 = v26 + 8;
    if (v18 != v19)
      goto LABEL_49;
    goto LABEL_24;
  }
  if (v18 == v19)
    v51 = 1;
  else
    v51 = v20 >> 2;
  if (v51 >> 61)
    goto LABEL_84;
  v52 = 8 * v51;
  v53 = (char *)operator new(8 * v51);
  v26 = &v53[8 * (v51 >> 2)];
  v27 = &v53[v52];
  operator delete(v25);
  v54 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  v25 = v53;
  *(_QWORD *)v26 = v29;
  v31 = v26 + 8;
  if (v18 != v54)
  {
    while (1)
    {
LABEL_49:
      if (v26 == v25)
      {
        if (v31 >= v27)
        {
          v61 = (v27 - v26) >> 2;
          if (v27 == v26)
            v61 = 1;
          if (v61 >> 61)
            goto LABEL_84;
          v62 = (v61 + 3) >> 2;
          v63 = 8 * v61;
          v64 = (char *)operator new(8 * v61);
          v25 = v64;
          v55 = &v64[8 * v62];
          v65 = v31 - v26;
          v40 = v31 == v26;
          v31 = v55;
          if (!v40)
          {
            v31 = &v55[v65 & 0xFFFFFFFFFFFFFFF8];
            v66 = v65 - 8;
            v67 = &v64[8 * v62];
            v68 = v26;
            if (v66 < 0x38)
              goto LABEL_87;
            v67 = &v64[8 * v62];
            v68 = v26;
            if ((unint64_t)(v67 - v26) < 0x20)
              goto LABEL_87;
            v69 = (v66 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v67 = &v55[v70];
            v68 = &v26[v70];
            v71 = (__int128 *)(v26 + 16);
            v72 = &v64[8 * v62 + 16];
            v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v74 = *v71;
              *((_OWORD *)v72 - 1) = *(v71 - 1);
              *(_OWORD *)v72 = v74;
              v71 += 2;
              v72 += 32;
              v73 -= 4;
            }
            while (v73);
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_87:
              do
              {
                v75 = *(_QWORD *)v68;
                v68 += 8;
                *(_QWORD *)v67 = v75;
                v67 += 8;
              }
              while (v67 != v31);
            }
          }
          v27 = &v64[v63];
          operator delete(v26);
        }
        else
        {
          v57 = (v27 - v31) >> 3;
          if (v57 >= -1)
            v58 = v57 + 1;
          else
            v58 = v57 + 2;
          v59 = &v31[8 * (v58 >> 1)];
          v55 = &v59[-(v31 - v26)];
          v60 = v31 - v26;
          v40 = v31 == v26;
          v31 = v59;
          if (!v40)
            memmove(v55, v26, v60);
          v25 = v26;
        }
      }
      else
      {
        v55 = v26;
      }
      v56 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v55 - 1) = v56;
      v32 = v55 - 8;
      v26 = v32;
      if (v18 == *(_QWORD *)(a1 + 8))
        goto LABEL_25;
    }
  }
LABEL_24:
  v32 = v26;
LABEL_25:
  v33 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v27;
  if (v33)
    operator delete(v33);
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveLEB128(BOOL)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v8 = 0;
  v9 = 0;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v2 + 232))(v2, &v8, &v9);
  if ((v3 & 1) == 0)
  {
    v4 = *(unsigned __int8 *)a1[1];
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    v6 = 560;
    if (!v4)
      v6 = 552;
    (*(void (**)(_QWORD *, uint64_t))(*v5 + v6))(v5, v8);
  }
  return v3;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveLoc(void)::$_0>(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t result;
  mlir::Token *v7;
  mlir::Token *v9;
  unsigned int *v11;
  unsigned int v12;
  const char *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(llvm::MCAsmParser **)a1;
  v22 = 0;
  v23 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(v2);
  Loc = mlir::Token::getLoc(Tok);
  if ((*(unsigned int (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v22))
  {
    v20[0] = "unexpected token in '.loc' directive";
    v21 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)v2, (uint64_t)v20, 0, 0);
  }
  else
  {
    switch(v23)
    {
      case 3:
        if (*(_WORD *)v22 != 29545 || *(_BYTE *)(v22 + 2) != 97)
          goto LABEL_41;
        v7 = (mlir::Token *)llvm::MCAsmParser::getTok(v2);
        Loc = mlir::Token::getLoc(v7);
        v19 = 0;
        v20[0] = 0;
        if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v19, v20) & 1) != 0)return 1;
        if (*(_BYTE *)v19 != 1)
        {
          v16 = "isa number not a constant value";
          goto LABEL_42;
        }
        v17 = *(_DWORD *)(v19 + 16);
        if (v17 < 0)
        {
          v16 = "isa number less than zero";
          goto LABEL_42;
        }
        **(_DWORD **)(a1 + 16) = v17;
        return 0;
      case 7:
        if (*(_DWORD *)v22 != 1935635305 || *(_DWORD *)(v22 + 3) != 1953330291)
          goto LABEL_41;
        v9 = (mlir::Token *)llvm::MCAsmParser::getTok(v2);
        Loc = mlir::Token::getLoc(v9);
        v19 = 0;
        v20[0] = 0;
        if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v19, v20) & 1) == 0)
        {
          if (*(_BYTE *)v19 != 1)
          {
            v16 = "is_stmt value not the constant value of 0 or 1";
            goto LABEL_42;
          }
          v18 = *(_DWORD *)(v19 + 16);
          if (v18 == 1)
          {
            v11 = *(unsigned int **)(a1 + 8);
            v12 = *v11 | 1;
            goto LABEL_44;
          }
          if (!v18)
          {
            v11 = *(unsigned int **)(a1 + 8);
            v12 = *v11 & 0xFFFFFFFE;
            goto LABEL_44;
          }
          v16 = "is_stmt value not 0 or 1";
          goto LABEL_42;
        }
        return 1;
      case 11:
        if (*(_QWORD *)v22 != 0x6C625F6369736162 || *(_QWORD *)(v22 + 3) != 0x6B636F6C625F6369)
          goto LABEL_41;
        v11 = *(unsigned int **)(a1 + 8);
        v12 = *v11 | 2;
        goto LABEL_44;
      case 12:
        if (*(_QWORD *)v22 != 0x6575676F6C6F7270 || *(_DWORD *)(v22 + 8) != 1684956511)
          goto LABEL_41;
        v11 = *(unsigned int **)(a1 + 8);
        v12 = *v11 | 4;
        goto LABEL_44;
      case 13:
        if (*(_QWORD *)v22 != 0x696D697263736964 || *(_QWORD *)(v22 + 5) != 0x726F74616E696D69)
          goto LABEL_41;
        if (((*(uint64_t (**)(llvm::MCAsmParser *, _QWORD))(*(_QWORD *)v2 + 256))(v2, *(_QWORD *)(a1 + 24)) & 1) == 0)
          goto LABEL_45;
        result = 1;
        break;
      case 14:
        if (*(_QWORD *)v22 != 0x6575676F6C697065 || *(_QWORD *)(v22 + 6) != 0x6E696765625F6575)
          goto LABEL_41;
        v11 = *(unsigned int **)(a1 + 8);
        v12 = *v11 | 8;
LABEL_44:
        *v11 = v12;
LABEL_45:
        result = 0;
        break;
      default:
LABEL_41:
        v16 = "unknown sub-directive in '.loc' directive";
LABEL_42:
        v20[0] = v16;
        v21 = 259;
        result = llvm::MCAsmParser::Error((uint64_t)v2, Loc, (uint64_t)v20, 0, 0);
        break;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseCVFileId(llvm::MCContext **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v8;
  llvm::CodeViewContext *v10;
  _BOOL4 isValidFileNumber;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;
  uint64_t v24;

  v24 = 0;
  if ((llvm::MCAsmParser::parseTokenLoc((uint64_t)a1, &v24) & 1) != 0)
    return 1;
  v21 = 1283;
  v20[0] = "expected integer in '";
  v20[2] = a3;
  v20[3] = a4;
  v22[0] = v20;
  v22[2] = "' directive";
  v23 = 770;
  if (llvm::MCAsmParser::parseIntToken((llvm::MCAsmParser *)a1, a2, (const llvm::Twine *)v22))
    return 1;
  v8 = *a2 < 1;
  v17 = 1283;
  v16[0] = "file number less than one in '";
  v16[2] = a3;
  v16[3] = a4;
  v18[0] = v16;
  v18[2] = "' directive";
  v19 = 770;
  if ((llvm::MCAsmParser::check((uint64_t)a1, v8, v24, (uint64_t)v18) & 1) != 0)
    return 1;
  llvm::MCContext::getCVContext(a1[27]);
  isValidFileNumber = llvm::CodeViewContext::isValidFileNumber(v10, *(_DWORD *)a2);
  v13 = 1283;
  v12[0] = "unassigned file number in '";
  v12[2] = a3;
  v12[3] = a4;
  v14[0] = v12;
  v14[2] = "' directive";
  v15 = 770;
  return llvm::MCAsmParser::check((uint64_t)a1, !isValidFileNumber, v24, (uint64_t)v14);
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveCVLoc(void)::$_0>(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t result;
  const char *v8;
  mlir::Token *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(llvm::MCAsmParser **)a1;
  v15 = 0;
  v16 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(v2);
  Loc = mlir::Token::getLoc(Tok);
  if ((*(unsigned int (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v15))
  {
    v13[0] = "unexpected token in '.cv_loc' directive";
    v14 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)v2, (uint64_t)v13, 0, 0);
  }
  if (v16 != 7)
  {
    if (v16 == 12 && *(_QWORD *)v15 == 0x6575676F6C6F7270 && *(_DWORD *)(v15 + 8) == 1684956511)
    {
      result = 0;
      **(_BYTE **)(a1 + 8) = 1;
      return result;
    }
    goto LABEL_15;
  }
  if (*(_DWORD *)v15 != 1935635305 || *(_DWORD *)(v15 + 3) != 1953330291)
  {
LABEL_15:
    v8 = "unknown sub-directive in '.cv_loc' directive";
LABEL_16:
    v13[0] = v8;
    v14 = 259;
    return llvm::MCAsmParser::Error((uint64_t)v2, Loc, (uint64_t)v13, 0, 0);
  }
  v9 = (mlir::Token *)llvm::MCAsmParser::getTok(v2);
  Loc = mlir::Token::getLoc(v9);
  v12 = 0;
  v13[0] = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v12, v13) & 1) != 0)
    return 1;
  v10 = *(unint64_t **)(a1 + 16);
  *v10 = -1;
  if (*(_BYTE *)v12 != 1 || (v11 = *(_QWORD *)(v12 + 16), *v10 = v11, v11 >= 2))
  {
    v8 = "is_stmt value not 0 or 1";
    goto LABEL_16;
  }
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::checkForBadMacro(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned int a6)
{
  unint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  const char *v30;
  __int16 v31;

  if (!a6)
    return result;
  v6 = a4;
  if (!a4)
    return result;
  v8 = 0;
  v9 = 0;
  v10 = a6;
  v29 = (_QWORD *)(a5 + 8);
  v11 = MEMORY[0x1E0C80978];
  do
  {
LABEL_4:
    v12 = 1;
    while (1)
    {
      v13 = *(unsigned __int8 *)(a3 + v12 - 1);
      if (v6 != v12 && v13 == 92)
        break;
      if (v6 != v12 && v13 == 36)
      {
        v14 = *(unsigned __int8 *)(a3 + v12);
        if ((_DWORD)v14 == 36 || (_DWORD)v14 == 110 || (*(_DWORD *)(v11 + 4 * v14 + 60) & 0x400) != 0)
        {
          if (*(_BYTE *)(a3 + v12) != 36)
            v9 = 1;
          if (v6 >= v12 + 1)
            v15 = v12 + 1;
          else
            v15 = v6;
          a3 += v15;
          v6 -= v15;
          if (!v6)
            goto LABEL_46;
          goto LABEL_4;
        }
      }
      if (++v12 - v6 == 1)
        goto LABEL_46;
    }
    v24 = v8;
    v26 = v9;
    v27 = result;
    v28 = a2;
    LODWORD(v16) = v12;
    while (1)
    {
      v17 = v16;
      v18 = *(char *)(a3 + v16);
      v19 = v18;
      if (v18 < 0)
        break;
      if ((*(_DWORD *)(v11 + 4 * v18 + 60) & 0x500) == 0)
        goto LABEL_26;
LABEL_21:
      v16 = (v17 + 1);
      if (v6 == v16)
        goto LABEL_31;
    }
    if (__maskrune(v18, 0x500uLL))
      goto LABEL_21;
LABEL_26:
    if ((v19 - 36) <= 0x3B && ((1 << (v19 - 36)) & 0x800000000000401) != 0)
      goto LABEL_21;
LABEL_31:
    v25 = v10;
    v21 = v10;
    v22 = v29;
    while (v12 - v17 + *v22 || v12 != v17 && memcmp((const void *)*(v22 - 1), (const void *)(a3 + v12), v17 - v12))
    {
      v22 += 6;
      if (!--v21)
        goto LABEL_38;
    }
    if ((_DWORD)v21)
    {
      v8 = 1;
      result = v27;
      a2 = v28;
      v9 = v26;
      goto LABEL_42;
    }
LABEL_38:
    if (*(_BYTE *)(a3 + v12) == 40 && *(_BYTE *)(a3 + v12 + 1) == 41)
      v17 = v12 + 2;
    result = v27;
    a2 = v28;
    v9 = v26;
    v8 = v24;
LABEL_42:
    v10 = v25;
    if (v6 >= v17)
      v23 = v17;
    else
      v23 = v6;
    a3 += v23;
    v6 -= v23;
  }
  while (v6);
LABEL_46:
  if ((v8 & 1) == 0 && (v9 & 1) != 0)
  {
    v30 = "macro defined with named parameters which are not used in macro body, possible positional parameter found in b"
          "ody which will have no effect";
    v31 = 259;
    return (*(uint64_t (**)(uint64_t, uint64_t, const char **, _QWORD, _QWORD))(*(_QWORD *)result + 168))(result, a2, &v30, 0, 0);
  }
  return result;
}

void llvm::MCContext::defineMacro(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  __int128 v4;
  void **v5;
  void **v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _OWORD v15[2];
  void *v16[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  char v20;

  v4 = *(_OWORD *)(a4 + 16);
  v15[0] = *(_OWORD *)a4;
  v15[1] = v4;
  *(_OWORD *)v16 = *(_OWORD *)(a4 + 32);
  v17 = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a4 + 56);
  v19 = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  v20 = *(_BYTE *)(a4 + 80);
  llvm::StringMap<llvm::MCAsmMacro,llvm::MallocAllocator>::try_emplace<llvm::MCAsmMacro>(a1 + 2064, a2, a3, (uint64_t)v15);
  v5 = (void **)__p[0];
  if (__p[0])
  {
    v6 = (void **)__p[1];
    v7 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p[0];
    }
    __p[1] = v5;
    operator delete(v7);
  }
  v8 = (char *)v16[0];
  if (v16[0])
  {
    v9 = (char *)v16[1];
    v10 = v16[0];
    if (v16[1] != v16[0])
    {
      do
      {
        v12 = *((_QWORD *)v9 - 4);
        if (v12)
        {
          v13 = *((_QWORD *)v9 - 3);
          v11 = (void *)*((_QWORD *)v9 - 4);
          if (v13 != v12)
          {
            do
            {
              if (*(_DWORD *)(v13 - 8) >= 0x41u)
              {
                v14 = *(void **)(v13 - 16);
                if (v14)
                  operator delete[](v14);
              }
              v13 -= 40;
            }
            while (v13 != v12);
            v11 = (void *)*((_QWORD *)v9 - 4);
          }
          *((_QWORD *)v9 - 3) = v12;
          operator delete(v11);
        }
        v9 -= 48;
      }
      while (v9 != v8);
      v10 = v16[0];
    }
    v16[1] = v8;
    operator delete(v10);
  }
}

char *std::vector<llvm::MCAsmMacroParameter>::__push_back_slow_path<llvm::MCAsmMacroParameter>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v5 = 0x555555555555555;
  else
    v5 = v3;
  if (v5 > 0x555555555555555)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v7 = 48 * v5;
  v8 = (char *)operator new(48 * v5);
  v9 = &v8[48 * v2];
  v10 = &v8[v7];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *((_WORD *)v9 + 20) = *(_WORD *)(a2 + 40);
  v12 = v9 + 48;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v9[v15];
      v17 = &v14[v15];
      *((_OWORD *)v16 - 3) = *(_OWORD *)&v14[v15 - 48];
      *((_OWORD *)v16 - 2) = *(_OWORD *)&v14[v15 - 32];
      *((_QWORD *)v16 - 2) = *(_QWORD *)&v14[v15 - 16];
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *((_QWORD *)v17 - 2) = 0;
      *((_WORD *)v16 - 4) = *(_WORD *)&v14[v15 - 8];
      v15 -= 48;
    }
    while (&v14[v15] != v13);
    v14 = (char *)*a1;
    v18 = (char *)a1[1];
    *a1 = &v9[v15];
    a1[1] = v12;
    a1[2] = v10;
    while (v18 != v14)
    {
      v20 = *((_QWORD *)v18 - 4);
      if (v20)
      {
        v21 = *((_QWORD *)v18 - 3);
        v19 = (void *)*((_QWORD *)v18 - 4);
        if (v21 != v20)
        {
          do
          {
            if (*(_DWORD *)(v21 - 8) >= 0x41u)
            {
              v22 = *(void **)(v21 - 16);
              if (v22)
                operator delete[](v22);
            }
            v21 -= 40;
          }
          while (v21 != v20);
          v19 = (void *)*((_QWORD *)v18 - 4);
        }
        *((_QWORD *)v18 - 3) = v20;
        operator delete(v19);
      }
      v18 -= 48;
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t *llvm::StringMap<llvm::MCAsmMacro,llvm::MallocAllocator>::try_emplace<llvm::MCAsmMacro>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *buffer;
  void *v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 97), (std::align_val_t)8uLL);
    v12 = buffer + 96;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v18 = v9[1];
        ++v9;
        v10 = v18;
      }
      return v9;
    }
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 97), (std::align_val_t)8uLL);
    v12 = buffer + 96;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  v13 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(buffer + 8) = *(_OWORD *)a4;
  *(_QWORD *)buffer = a3;
  *(_OWORD *)(buffer + 24) = v13;
  *(_OWORD *)(buffer + 40) = *(_OWORD *)(a4 + 32);
  *((_QWORD *)buffer + 7) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *((_OWORD *)buffer + 4) = *(_OWORD *)(a4 + 56);
  *((_QWORD *)buffer + 10) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  buffer[88] = *(_BYTE *)(a4 + 80);
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v14 = *v9 == -8;
  else
    v14 = 1;
  if (v14)
  {
    do
    {
      v16 = v9[1];
      ++v9;
      v15 = v16;
      if (v16)
        v17 = v15 == -8;
      else
        v17 = 1;
    }
    while (v17);
  }
  return v9;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveLTODiscard(void)::$_0>(llvm::MCAsmParser **a1)
{
  llvm::MCAsmParser *v1;
  mlir::Token *Tok;
  uint64_t Loc;
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[2];

  v1 = *a1;
  v7[0] = 0;
  v7[1] = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(v1);
  Loc = mlir::Token::getLoc(Tok);
  if ((*(unsigned int (**)(llvm::MCAsmParser *, _QWORD *))(*(_QWORD *)v1 + 192))(v1, v7))
  {
    v5[0] = "expected identifier";
    v6 = 259;
    return llvm::MCAsmParser::Error((uint64_t)v1, Loc, (uint64_t)v5, 0, 0);
  }
  else
  {
    llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::insert((uint64_t)v1 + 736, (uint64_t)v7, (uint64_t)v5);
    return 0;
  }
}

void llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::insert(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  int v18;
  uint64_t **v19;

  if (*(_QWORD *)(a1 + 64))
  {
    v6 = std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>((uint64_t **)(a1 + 48), a2, (_OWORD *)a2);
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)a3 = v6;
    *(_BYTE *)(a3 + 16) = v7;
    return;
  }
  v8 = *(_QWORD *)a1;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  if (!(_DWORD)v9)
    goto LABEL_15;
  if (v11)
  {
    v12 = 16 * v9;
    v13 = *(_QWORD *)a1;
    while (*(_QWORD *)(v13 + 8) != v11 || memcmp(*(const void **)v13, v10, v11))
    {
      v13 += 16;
      v12 -= 16;
      if (!v12)
        goto LABEL_14;
    }
  }
  else
  {
    v14 = 16 * v9;
    v13 = *(_QWORD *)a1;
    while (*(_QWORD *)(v13 + 8))
    {
      v13 += 16;
      v14 -= 16;
      if (!v14)
        goto LABEL_14;
    }
  }
  if (v13 != v8 + 16 * v9)
  {
    *(_BYTE *)(a3 + 8) = 1;
    *(_QWORD *)a3 = v13;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
LABEL_14:
  if (v9 > 1)
  {
    do
    {
      v17 = (_OWORD *)(*(_QWORD *)a1 + 16 * v9 - 16);
      std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>((uint64_t **)(a1 + 48), (uint64_t)v17, v17);
      v18 = *(_DWORD *)(a1 + 8);
      LODWORD(v9) = v18 - 1;
      *(_DWORD *)(a1 + 8) = v18 - 1;
    }
    while (v18 != 1);
    v19 = std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>((uint64_t **)(a1 + 48), a2, (_OWORD *)a2);
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)a3 = v19;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
LABEL_15:
    if (v9 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v9 + 1, 16);
      v9 = *(unsigned int *)(a1 + 8);
      v8 = *(_QWORD *)a1;
    }
    v15 = (_QWORD *)(v8 + 16 * v9);
    *v15 = v10;
    v15[1] = v11;
    LODWORD(v15) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = (_DWORD)v15;
    v16 = *(_QWORD *)a1 + 16 * v15 - 16;
    *(_BYTE *)(a3 + 8) = 1;
    *(_QWORD *)a3 = v16;
    *(_BYTE *)(a3 + 16) = 1;
  }
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long &>(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v19;
  BOOL v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  char v35;

  v5 = *a3;
  v6 = *a4;
  v22 = *a2;
  v23 = v5;
  v24 = v6;
  v25 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = 0;
  v34 = 1;
  v35 = 0;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = (char *)&v22;
  v9 = *(_QWORD *)a1;
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    v19 = v7 + 1;
    v20 = v9 + (v7 << 7) > (unint64_t)&v22;
    if (v9 <= (unint64_t)&v22 && v20)
    {
      v21 = (char *)&v22 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v19, 128);
      v9 = *(_QWORD *)a1;
      v8 = &v21[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v19, 128);
      v9 = *(_QWORD *)a1;
      v8 = (char *)&v22;
    }
  }
  v10 = (_OWORD *)(v9 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  v11 = *(_OWORD *)v8;
  v12 = *((_OWORD *)v8 + 1);
  v13 = *((_OWORD *)v8 + 3);
  v10[2] = *((_OWORD *)v8 + 2);
  v10[3] = v13;
  *v10 = v11;
  v10[1] = v12;
  v14 = *((_OWORD *)v8 + 4);
  v15 = *((_OWORD *)v8 + 5);
  v16 = *((_OWORD *)v8 + 7);
  v10[6] = *((_OWORD *)v8 + 6);
  v10[7] = v16;
  v10[4] = v14;
  v10[5] = v15;
  v17 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v17;
  return *(_QWORD *)a1 + (v17 << 7) - 128;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int,unsigned int>(uint64_t a1, int *a2, uint64_t *a3, int *a4, unsigned int *a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v21;
  BOOL v22;
  char *v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  char v37;

  v6 = *a3;
  v7 = *a4;
  v8 = *a5;
  v24 = *a2;
  v25 = v6;
  v26 = v7;
  v27 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v29 = 0;
  v30 = 0;
  v28 = v8;
  v31 = 0;
  v36 = 1;
  v37 = 0;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (char *)&v24;
  v11 = *(_QWORD *)a1;
  if (v9 >= *(_DWORD *)(a1 + 12))
  {
    v21 = v9 + 1;
    v22 = v11 + (v9 << 7) > (unint64_t)&v24;
    if (v11 <= (unint64_t)&v24 && v22)
    {
      v23 = (char *)&v24 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v21, 128);
      v11 = *(_QWORD *)a1;
      v10 = &v23[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v21, 128);
      v11 = *(_QWORD *)a1;
      v10 = (char *)&v24;
    }
  }
  v12 = (_OWORD *)(v11 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  v13 = *(_OWORD *)v10;
  v14 = *((_OWORD *)v10 + 1);
  v15 = *((_OWORD *)v10 + 3);
  v12[2] = *((_OWORD *)v10 + 2);
  v12[3] = v15;
  *v12 = v13;
  v12[1] = v14;
  v16 = *((_OWORD *)v10 + 4);
  v17 = *((_OWORD *)v10 + 5);
  v18 = *((_OWORD *)v10 + 7);
  v12[6] = *((_OWORD *)v10 + 6);
  v12[7] = v18;
  v12[4] = v16;
  v12[5] = v17;
  v19 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v19;
  return *(_QWORD *)a1 + (v19 << 7) - 128;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int>(uint64_t a1, int *a2, uint64_t *a3, int *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v19;
  BOOL v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  char v35;

  v5 = *a3;
  v6 = *a4;
  v22 = *a2;
  v23 = v5;
  v24 = v6;
  v25 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = 0;
  v34 = 1;
  v35 = 0;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = (char *)&v22;
  v9 = *(_QWORD *)a1;
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    v19 = v7 + 1;
    v20 = v9 + (v7 << 7) > (unint64_t)&v22;
    if (v9 <= (unint64_t)&v22 && v20)
    {
      v21 = (char *)&v22 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v19, 128);
      v9 = *(_QWORD *)a1;
      v8 = &v21[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v19, 128);
      v9 = *(_QWORD *)a1;
      v8 = (char *)&v22;
    }
  }
  v10 = (_OWORD *)(v9 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  v11 = *(_OWORD *)v8;
  v12 = *((_OWORD *)v8 + 1);
  v13 = *((_OWORD *)v8 + 3);
  v10[2] = *((_OWORD *)v8 + 2);
  v10[3] = v13;
  *v10 = v11;
  v10[1] = v12;
  v14 = *((_OWORD *)v8 + 4);
  v15 = *((_OWORD *)v8 + 5);
  v16 = *((_OWORD *)v8 + 7);
  v10[6] = *((_OWORD *)v8 + 6);
  v10[7] = v16;
  v10[4] = v14;
  v10[5] = v15;
  v17 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v17;
  return *(_QWORD *)a1 + (v17 << 7) - 128;
}

uint64_t *llvm::StringMap<std::pair<llvm::MCAsmParserExtension *,BOOL (*)(llvm::MCAsmParserExtension *,llvm::StringRef,llvm::SMLoc)>,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 25), (std::align_val_t)8uLL);
    v10 = buffer + 3;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 25), (std::align_val_t)8uLL);
    v10 = buffer + 3;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  buffer[1] = 0;
  buffer[2] = 0;
  *buffer = a3;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

BOOL llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const void *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (*(_QWORD *)(a1 + 64))
  {
    v2 = a1 + 56;
    v3 = *(_QWORD *)(a1 + 56);
    if (!v3)
      goto LABEL_42;
    v4 = *(const void **)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = a1 + 56;
    do
    {
      while (1)
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = v5 >= v10 ? *(_QWORD *)(v3 + 40) : v5;
        if (!v11)
          break;
        v12 = memcmp(*(const void **)(v3 + 32), v4, v11);
        if (!v12)
          break;
        if (v12 >> 31 == -1)
          v13 = (uint64_t *)(v3 + 8);
        else
          v13 = (uint64_t *)v3;
        if (v12 >> 31 != -1)
          v6 = v3;
        v3 = *v13;
        if (!*v13)
          goto LABEL_26;
      }
      if (v10 < v5)
        v7 = -1;
      else
        v7 = 1;
      if (v10 == v5)
        v7 = 0;
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (!v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
LABEL_26:
    if (v6 == v2)
      goto LABEL_42;
    v14 = *(_QWORD *)(v6 + 40);
    if (v14 >= v5)
      v15 = v5;
    else
      v15 = *(_QWORD *)(v6 + 40);
    if (v15 && (v16 = memcmp(v4, *(const void **)(v6 + 32), v15)) != 0)
    {
      if (v16 < 0)
        goto LABEL_42;
    }
    else if (v5 < v14)
    {
LABEL_42:
      v6 = v2;
    }
    v23 = v6 == v2;
    return !v23;
  }
  v17 = *(_QWORD *)a1;
  v18 = *(unsigned int *)(a1 + 8);
  v19 = *(_QWORD *)a1 + 16 * v18;
  if ((_DWORD)v18)
  {
    v20 = *(_QWORD *)(a2 + 8);
    if (v20)
    {
      v21 = *(const void **)a2;
      v22 = 16 * v18;
      while (*(_QWORD *)(v17 + 8) != v20 || memcmp(*(const void **)v17, v21, v20))
      {
        v17 += 16;
        v22 -= 16;
        if (!v22)
          goto LABEL_47;
      }
    }
    else
    {
      v24 = 16 * v18;
      while (*(_QWORD *)(v17 + 8))
      {
        v17 += 16;
        v24 -= 16;
        if (!v24)
          goto LABEL_47;
      }
    }
  }
  else
  {
LABEL_47:
    v17 = v19;
  }
  v23 = v17 == v19;
  return !v23;
}

void llvm::SmallVectorImpl<std::string>::assign(uint64_t a1, unint64_t a2, std::string *__str)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  unint64_t v9;
  std::string *v10;
  BOOL v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;

  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(std::string **)a1;
      do
      {
        std::string::operator=(v8++, __str);
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v13 = 24 * v6;
        v14 = 24 * v6 + *(_QWORD *)a1 - 1;
        v15 = 24 * a2 - v13;
        v16 = (char *)v14;
        do
        {
          v17 = *v16;
          v16 -= 24;
          if (v17 < 0)
            operator delete(*(void **)(v14 - 23));
          v14 = (uint64_t)v16;
          v15 += 24;
        }
        while (v15);
      }
    }
    else
    {
      v10 = (std::string *)(*(_QWORD *)a1 + 24 * v6);
      do
      {
        while (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v10++, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
          v11 = __CFADD__(v9++, 1);
          if (v11)
            goto LABEL_22;
        }
        v12 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
        v10->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
        ++v10;
        v11 = __CFADD__(v9++, 1);
      }
      while (!v11);
    }
LABEL_22:
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    llvm::SmallVectorTemplateBase<std::string,false>::growAndAssign(a1, a2, (__int128 *)__str);
  }
}

uint64_t rewritesSort(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a2 + 1);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v3 < v2)
    return 1;
  if (llvm::AsmRewritePrecedence[*a1] > llvm::AsmRewritePrecedence[*a2])
    return 0xFFFFFFFFLL;
  return 1;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4, int *a5, char *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v23;
  BOOL v24;
  char *v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  char v39;

  v7 = *a3;
  v8 = *a4;
  v9 = *a5;
  v10 = *a6;
  v26 = *a2;
  v27 = v7;
  v28 = v8;
  v29 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v31 = 0;
  v32 = 0;
  v30 = v9;
  v33 = 0;
  v38 = 1;
  v39 = v10;
  v11 = *(unsigned int *)(a1 + 8);
  v12 = (char *)&v26;
  v13 = *(_QWORD *)a1;
  if (v11 >= *(_DWORD *)(a1 + 12))
  {
    v23 = v11 + 1;
    v24 = v13 + (v11 << 7) > (unint64_t)&v26;
    if (v13 <= (unint64_t)&v26 && v24)
    {
      v25 = (char *)&v26 - v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v23, 128);
      v13 = *(_QWORD *)a1;
      v12 = &v25[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v23, 128);
      v13 = *(_QWORD *)a1;
      v12 = (char *)&v26;
    }
  }
  v14 = (_OWORD *)(v13 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  v15 = *(_OWORD *)v12;
  v16 = *((_OWORD *)v12 + 1);
  v17 = *((_OWORD *)v12 + 3);
  v14[2] = *((_OWORD *)v12 + 2);
  v14[3] = v17;
  *v14 = v15;
  v14[1] = v16;
  v18 = *((_OWORD *)v12 + 4);
  v19 = *((_OWORD *)v12 + 5);
  v20 = *((_OWORD *)v12 + 7);
  v14[6] = *((_OWORD *)v12 + 6);
  v14[7] = v20;
  v14[4] = v18;
  v14[5] = v19;
  v21 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v21;
  return *(_QWORD *)a1 + (v21 << 7) - 128;
}

char *llvm::SmallVectorImpl<unsigned int>::insert<unsigned short const*,void>(uint64_t a1, uint64_t a2, uint16x4_t *a3, unsigned __int16 *a4)
{
  uint16x4_t *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint32x4_t *v25;
  __int32 *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _DWORD *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint16x4_t *v38;
  uint32x4_t *v39;
  unint64_t v40;
  uint16x8_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  char *v53;
  unint64_t v54;
  char *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint16x4_t *v58;
  uint32x4_t *v59;
  unint64_t v60;
  uint16x8_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  int v64;
  uint16x4_t *v65;
  uint32x4_t *v66;
  unint64_t v67;
  uint16x8_t v68;
  uint32x4_t v69;
  uint32x4_t v70;
  int v71;
  unint64_t v72;
  unsigned __int16 *v73;
  uint64_t v74;
  uint16x4_t *v75;
  uint32x4_t *v76;
  unint64_t v77;
  uint16x8_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  int v81;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 2;
  v10 = *(unsigned int *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 8);
  v12 = (char *)a4 - (char *)a3;
  v13 = ((char *)a4 - (char *)a3) >> 1;
  v14 = v13 + v10;
  if (*(_QWORD *)a1 + 4 * v10 == a2)
  {
    if (v14 > v9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v14, 4);
      v10 = *(unsigned int *)(a1 + 8);
      v7 = *(_QWORD *)a1;
      v11 = *(_DWORD *)(a1 + 8);
    }
    if (v5 == (uint16x4_t *)a4)
      goto LABEL_23;
    v25 = (uint32x4_t *)(v7 + 4 * v10);
    if (v12 - 2 >= 0x1E)
    {
      v37 = ((v12 - 2) >> 1) + 1;
      v26 = &v25->i32[v37 & 0xFFFFFFFFFFFFFFF0];
      v27 = (unsigned __int16 *)v5 + (v37 & 0xFFFFFFFFFFFFFFF0);
      v38 = v5 + 2;
      v39 = v25 + 2;
      v40 = v37 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v41 = *(uint16x8_t *)v38[-2].i8;
        v42 = vmovl_u16(*v38);
        v43 = vmovl_high_u16(*(uint16x8_t *)v38->i8);
        v39[-2] = vmovl_u16(*(uint16x4_t *)v41.i8);
        v39[-1] = vmovl_high_u16(v41);
        *v39 = v42;
        v39[1] = v43;
        v39 += 4;
        v38 += 4;
        v40 -= 16;
      }
      while (v40);
      if (v37 == (v37 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_22;
    }
    else
    {
      v26 = (__int32 *)(v7 + 4 * v10);
      v27 = (unsigned __int16 *)v5;
    }
    do
    {
      v44 = *v27++;
      *v26++ = v44;
    }
    while (v27 != a4);
LABEL_22:
    v11 = *(_DWORD *)(a1 + 8);
LABEL_23:
    *(_DWORD *)(a1 + 8) = v11 + (v12 >> 1);
    return (char *)(v7 + 4 * v8);
  }
  if (v14 > v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v14, 4);
    v7 = *(_QWORD *)a1;
    v10 = *(unsigned int *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v15 = (char *)(v7 + 4 * v8);
  v16 = v8;
  v17 = (char *)(v7 + 4 * v10);
  v18 = v17 - v15;
  v19 = (v17 - v15) >> 2;
  if (v19 < v13)
  {
    v20 = v11 + (v12 >> 1);
    *(_DWORD *)(a1 + 8) = v20;
    if (v16 != v10)
    {
      v21 = v16;
      v22 = v15;
      memcpy((void *)(v7 + 4 * v20 - 4 * v19), v15, v17 - v15);
      if (v18 >= 0x40)
      {
        v23 = &v22[4 * (v19 & 0xFFFFFFFFFFFFFFF0)];
        v24 = (v18 >> 2) & 0xF;
        v65 = v5 + 2;
        v66 = (uint32x4_t *)(v7 + 4 * v21 + 32);
        v67 = v19 & 0xFFFFFFFFFFFFFFF0;
        v5 = (uint16x4_t *)((char *)v5 + 2 * (v19 & 0xFFFFFFFFFFFFFFF0));
        v15 = v22;
        do
        {
          v68 = *(uint16x8_t *)v65[-2].i8;
          v69 = vmovl_u16(*v65);
          v70 = vmovl_high_u16(*(uint16x8_t *)v65->i8);
          v66[-2] = vmovl_u16(*(uint16x4_t *)v68.i8);
          v66[-1] = vmovl_high_u16(v68);
          *v66 = v69;
          v66[1] = v70;
          v66 += 4;
          v65 += 4;
          v67 -= 16;
        }
        while (v67);
        if (v19 == (v19 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_44;
      }
      else
      {
        v23 = v22;
        v24 = v19;
        v15 = v22;
      }
      do
      {
        v71 = v5->u16[0];
        v5 = (uint16x4_t *)((char *)v5 + 2);
        *(_DWORD *)v23 = v71;
        v23 += 4;
        --v24;
      }
      while (v24);
    }
LABEL_44:
    if (v5 == (uint16x4_t *)a4)
      return v15;
    v72 = (char *)a4 - (char *)v5 - 2;
    if (v72 < 0x1E)
    {
      v73 = (unsigned __int16 *)v5;
      do
      {
LABEL_50:
        v81 = *v73++;
        *(_DWORD *)v17 = v81;
        v17 += 4;
      }
      while (v73 != a4);
      return v15;
    }
    v74 = (v72 >> 1) + 1;
    v17 += 4 * (v74 & 0xFFFFFFFFFFFFFFF0);
    v73 = (unsigned __int16 *)v5 + (v74 & 0xFFFFFFFFFFFFFFF0);
    v75 = v5 + 2;
    v76 = (uint32x4_t *)(v7 + 4 * v10 + 32);
    v77 = v74 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v78 = *(uint16x8_t *)v75[-2].i8;
      v79 = vmovl_u16(*v75);
      v80 = vmovl_high_u16(*(uint16x8_t *)v75->i8);
      v76[-2] = vmovl_u16(*(uint16x4_t *)v78.i8);
      v76[-1] = vmovl_high_u16(v78);
      *v76 = v79;
      v76[1] = v80;
      v76 += 4;
      v75 += 4;
      v77 -= 16;
    }
    while (v77);
    if (v74 != (v74 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_50;
    return v15;
  }
  v28 = v16;
  v29 = 4 * v13;
  v30 = v10 + ((uint64_t)(4 * v13) >> 2);
  v31 = v10;
  if (v30 > *(unsigned int *)(a1 + 12))
  {
    v32 = v15;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v30, 4);
    v15 = v32;
    v31 = *(unsigned int *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v33 = &v17[-v29];
  if (a4 != (unsigned __int16 *)v5)
  {
    v34 = (_DWORD *)(*(_QWORD *)a1 + 4 * v31);
    v35 = (v13 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v35 >= 0xF)
    {
      v45 = 4 * v31 + *(_QWORD *)a1;
      v36 = &v17[-v29];
      if (v29 - v7 - 4 * v10 + v45 >= 0x20)
      {
        v46 = v35 + 1;
        v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
        v34 = (_DWORD *)((char *)v34 + v47);
        v36 = &v33[v47];
        v48 = (__int128 *)(4 * v10 - v29 + v7 + 16);
        v49 = (_OWORD *)(v45 + 16);
        v50 = v46 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v51 = *v48;
          *(v49 - 1) = *(v48 - 1);
          *v49 = v51;
          v48 += 2;
          v49 += 2;
          v50 -= 8;
        }
        while (v50);
        if (v46 == (v46 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_29;
      }
    }
    else
    {
      v36 = &v17[-v29];
    }
    do
    {
      v52 = *(_DWORD *)v36;
      v36 += 4;
      *v34++ = v52;
    }
    while (v36 != v17);
LABEL_29:
    v11 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v11 + (v29 >> 2);
  if (v33 != v15)
  {
    v53 = v15;
    memmove(&v15[v29], v15, &v17[-v29] - v15);
    v15 = v53;
  }
  if (a4 != (unsigned __int16 *)v5)
  {
    v54 = (char *)a4 - (char *)v5 - 2;
    if (v54 >= 0x1E)
    {
      v57 = (v54 >> 1) + 1;
      v55 = &v15[4 * (v57 & 0xFFFFFFFFFFFFFFF0)];
      v56 = (unsigned __int16 *)v5 + (v57 & 0xFFFFFFFFFFFFFFF0);
      v58 = v5 + 2;
      v59 = (uint32x4_t *)(v7 + 4 * v28 + 32);
      v60 = v57 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v61 = *(uint16x8_t *)v58[-2].i8;
        v62 = vmovl_u16(*v58);
        v63 = vmovl_high_u16(*(uint16x8_t *)v58->i8);
        v59[-2] = vmovl_u16(*(uint16x4_t *)v61.i8);
        v59[-1] = vmovl_high_u16(v61);
        *v59 = v62;
        v59[1] = v63;
        v59 += 4;
        v58 += 4;
        v60 -= 16;
      }
      while (v60);
      if (v57 == (v57 & 0xFFFFFFFFFFFFFFF0))
        return v15;
    }
    else
    {
      v55 = v15;
      v56 = (unsigned __int16 *)v5;
    }
    do
    {
      v64 = *v56++;
      *(_DWORD *)v55 = v64;
      v55 += 4;
    }
    while (v56 != a4);
  }
  return v15;
}

uint64_t llvm::array_pod_sort_comparator<unsigned int>(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

void llvm::SmallVectorTemplateBase<std::string,false>::growAndAssign(uint64_t a1, unint64_t a2, __int128 *a3)
{
  char *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  unint64_t v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (std::string *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v16);
  v8 = v7;
  if (a2)
  {
    v9 = v7;
    v10 = a2;
    do
    {
      while (*((char *)a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9++, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
        if (!--v10)
          goto LABEL_6;
      }
      v11 = *a3;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
      ++v9;
      --v10;
    }
    while (v10);
  }
LABEL_6:
  v12 = *(char **)a1;
  v13 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v13)
  {
    v14 = 24 * v13;
    do
    {
      if (v12[v14 - 1] < 0)
        operator delete(*(void **)&v12[v14 - 24]);
      v14 -= 24;
    }
    while (v14);
    v12 = *(char **)a1;
  }
  v15 = v16;
  if (v12 != v6)
    free(v12);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v15;
}

void llvm::SmallVectorImpl<std::string>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = 24 * v2;
      v6 = 24 * v2 + *(_QWORD *)a1 - 1;
      v7 = 24 * a2 - v5;
      v8 = (char *)v6;
      do
      {
        v9 = *v8;
        v8 -= 24;
        if (v9 < 0)
          operator delete(*(void **)(v6 - 23));
        v6 = (uint64_t)v8;
        v7 += 24;
      }
      while (v7);
      goto LABEL_23;
    }
    if (*(unsigned int *)(a1 + 12) >= a2)
    {
      v12 = *(_QWORD **)a1;
      if (v2 == a2)
        goto LABEL_23;
    }
    else
    {
      v21 = 0;
      v10 = (_QWORD *)(a1 + 16);
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v21);
      v12 = v11;
      v13 = *(_QWORD **)a1;
      v14 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v14)
      {
        v15 = 24 * v14;
        v16 = v11;
        do
        {
          v17 = *(_OWORD *)v13;
          v16[2] = v13[2];
          *(_OWORD *)v16 = v17;
          v16 += 3;
          v13[1] = 0;
          v13[2] = 0;
          *v13 = 0;
          v13 += 3;
          v15 -= 24;
        }
        while (v15);
        v13 = *(_QWORD **)a1;
        v18 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v18)
        {
          v19 = 3 * v18;
          do
          {
            if (SHIBYTE(v13[v19 - 1]) < 0)
              operator delete((void *)v13[v19 - 3]);
            v19 -= 3;
          }
          while (v19 * 8);
          v13 = *(_QWORD **)a1;
        }
      }
      v20 = v21;
      if (v13 != v10)
        free(v13);
      *(_QWORD *)a1 = v12;
      *(_DWORD *)(a1 + 12) = v20;
      v2 = *(unsigned int *)(a1 + 8);
      if (v2 == a2)
        goto LABEL_23;
    }
    bzero(&v12[3 * v2], 24 * ((-24 * v2 + 24 * a2 - 24) / 0x18) + 24);
LABEL_23:
    *(_DWORD *)(a1 + 8) = a2;
  }
}

llvm::MCTargetOptions *llvm::MCTargetOptions::MCTargetOptions(llvm::MCTargetOptions *this, const llvm::MCTargetOptions *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const llvm::MCTargetOptions *v25;

  *(_OWORD *)this = *(_OWORD *)a2;
  v4 = (std::string *)((char *)this + 16);
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
    v6 = (std::string *)((char *)this + 40);
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v7 = *(_OWORD *)((char *)a2 + 40);
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 7);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      v8 = (std::string *)((char *)this + 64);
      if ((*((char *)a2 + 87) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
      v10 = (std::string *)((char *)this + 88);
      if ((*((char *)a2 + 111) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 4);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    v6 = (std::string *)((char *)this + 40);
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  v8 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 87) < 0)
    goto LABEL_8;
LABEL_4:
  v9 = *((_OWORD *)a2 + 4);
  v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 10);
  *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  v10 = (std::string *)((char *)this + 88);
  if ((*((char *)a2 + 111) & 0x80000000) == 0)
  {
LABEL_5:
    v11 = *(_OWORD *)((char *)a2 + 88);
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    goto LABEL_10;
  }
LABEL_9:
  std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
LABEL_10:
  v12 = *((_QWORD *)a2 + 16);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_QWORD *)this + 16) = v12;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  v13 = *((_QWORD *)a2 + 17);
  v14 = *((_QWORD *)a2 + 18);
  v15 = v14 - v13;
  if (v14 != v13)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
    if (v16 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v17 = (char *)operator new(v15);
    v18 = 0;
    *((_QWORD *)this + 17) = v17;
    *((_QWORD *)this + 18) = v17;
    *((_QWORD *)this + 19) = &v17[24 * v16];
    do
    {
      while (1)
      {
        v19 = (__int128 *)(v13 + v18);
        v20 = (std::string *)&v17[v18];
        if ((*(char *)(v13 + v18 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
        v18 += 24;
        if (v13 + v18 == v14)
          goto LABEL_16;
      }
      v21 = *v19;
      v20->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
      v18 += 24;
    }
    while (v13 + v18 != v14);
LABEL_16:
    *((_QWORD *)this + 18) = &v17[v18];
  }
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  v22 = *((_QWORD *)a2 + 22);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)this + 22) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 216) = 0;
  if (*((_BYTE *)a2 + 216))
  {
    v25 = (const llvm::MCTargetOptions *)*((_QWORD *)a2 + 26);
    if (v25)
    {
      if (v25 == (const llvm::MCTargetOptions *)((char *)a2 + 184))
      {
        *((_QWORD *)this + 26) = (char *)this + 184;
        (*(void (**)(_QWORD))(**((_QWORD **)a2 + 26) + 24))(*((_QWORD *)a2 + 26));
      }
      else
      {
        *((_QWORD *)this + 26) = (*(uint64_t (**)(const llvm::MCTargetOptions *))(*(_QWORD *)v25 + 16))(v25);
      }
    }
    else
    {
      *((_QWORD *)this + 26) = 0;
    }
    *((_BYTE *)this + 216) = 1;
  }
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  return this;
}

uint64_t `anonymous namespace'::AsmParser::parseBinOpRHS(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t Loc;
  unsigned int BinOpPrecedence;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  Loc = llvm::MCAsmLexer::getLoc((llvm::MCAsmLexer *)(a1 + 40));
  v18 = 0;
  if (BinOpPrecedence < a2)
    return 0;
  v11 = BinOpPrecedence;
  while (1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    v17 = 0;
    {
      break;
    }
    v12 = v18;
    v13 = *a3;
    v14 = v17;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    *a3 = llvm::MCBinaryExpr::create(v12, v13, v14, v15, Loc);
    v18 = 0;
    if (v11 < a2)
      return 0;
  }
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::applyModifierToExpr(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8));
  if (!result)
    __asm { BR              X10 }
  return result;
}

unint64_t sub_180C61B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (!(v2 | v3))
    return 0;
  v4 = v3;
  if (!v2)
    v2 = *(_QWORD *)(v1 + 16);
  if (!v3)
    v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_DWORD *)(v1 + 1) & 0xFFFFFF;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 48))(v0);
  return llvm::MCBinaryExpr::create(v5, v2, v4, v6, 0);
}

uint64_t `anonymous namespace'::AsmParser::getBinOpPrecedence(uint64_t a1, char a2, int a3, int *a4)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  v4 = *(unsigned __int8 *)(a1 + 488);
  if (a2)
  {
    result = 0;
    v6 = 1;
    v7 = 6;
    switch(a3)
    {
      case 12:
        v7 = 0;
        v6 = 5;
        goto LABEL_39;
      case 13:
        v6 = 5;
        v7 = 18;
        goto LABEL_39;
      case 15:
        goto LABEL_7;
      case 24:
        goto LABEL_8;
      case 29:
        goto LABEL_9;
      case 30:
        v6 = 2;
        v7 = 13;
        goto LABEL_39;
      case 31:
        v7 = 7;
        goto LABEL_39;
      case 32:
        v6 = 2;
        v7 = 19;
        goto LABEL_39;
      case 33:
        v6 = 2;
        v7 = 1;
        goto LABEL_39;
      case 34:
        goto LABEL_39;
      case 36:
      case 42:
        goto LABEL_5;
      case 37:
        goto LABEL_10;
      case 39:
        goto LABEL_11;
      case 40:
        goto LABEL_12;
      case 41:
        v6 = 4;
        v7 = 15;
        goto LABEL_39;
      case 43:
        goto LABEL_13;
      case 44:
        goto LABEL_6;
      case 45:
        if (v4)
          v7 = 17;
        else
          v7 = 16;
        v6 = 4;
        goto LABEL_39;
      default:
        return result;
    }
  }
  else
  {
    result = 0;
    v6 = 2;
    v7 = 6;
    switch(a3)
    {
      case 12:
        v7 = 0;
        v6 = 4;
        goto LABEL_39;
      case 13:
        v6 = 4;
        v7 = 18;
        goto LABEL_39;
      case 15:
LABEL_7:
        v6 = 6;
        v7 = 2;
        goto LABEL_39;
      case 24:
LABEL_8:
        v6 = 6;
        v7 = 11;
        goto LABEL_39;
      case 29:
LABEL_9:
        v7 = 3;
        v6 = 3;
        goto LABEL_39;
      case 30:
        v6 = 5;
        v7 = 13;
        goto LABEL_39;
      case 31:
        v6 = 1;
        v7 = 7;
        goto LABEL_39;
      case 32:
        v6 = 5;
        v7 = 19;
        goto LABEL_39;
      case 33:
        v6 = 5;
        v7 = 1;
        goto LABEL_39;
      case 34:
        goto LABEL_39;
      case 35:
        if (*(_QWORD *)(a1 + 56) == 1 && **(_BYTE **)(a1 + 48) == 64)
        {
          result = 0;
        }
        else
        {
          v6 = 5;
          v7 = 14;
LABEL_39:
          *a4 = v7;
          result = v6;
        }
        break;
      case 36:
      case 42:
LABEL_5:
        v6 = 3;
        v7 = 12;
        goto LABEL_39;
      case 37:
LABEL_10:
        v6 = 6;
        v7 = 10;
        goto LABEL_39;
      case 39:
LABEL_11:
        v6 = 3;
        v7 = 8;
        goto LABEL_39;
      case 40:
LABEL_12:
        v6 = 3;
        v7 = 9;
        goto LABEL_39;
      case 41:
        v6 = 6;
        v7 = 15;
        goto LABEL_39;
      case 43:
LABEL_13:
        v6 = 3;
        v7 = 4;
        goto LABEL_39;
      case 44:
LABEL_6:
        v6 = 3;
        v7 = 5;
        goto LABEL_39;
      case 45:
        if (v4)
          v7 = 17;
        else
          v7 = 16;
        v6 = 6;
        goto LABEL_39;
      default:
        return result;
    }
  }
  return result;
}

__n128 llvm::StringRef::split@<Q0>(llvm::StringRef *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  __n128 result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v11 = a2;
  v5 = llvm::StringRef::find((uint64_t *)this, &v11, 1uLL, 0);
  if (v5 == -1)
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    result = *(__n128 *)this;
    *(_OWORD *)a3 = *(_OWORD *)this;
  }
  else
  {
    v8 = *(_QWORD *)this;
    v7 = *((_QWORD *)this + 1);
    if (v5 >= v7)
      v9 = *((_QWORD *)this + 1);
    else
      v9 = v5;
    if (v7 >= v5 + 1)
      v10 = v5 + 1;
    else
      v10 = *((_QWORD *)this + 1);
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = v8 + v10;
    *(_QWORD *)(a3 + 24) = v7 - v10;
  }
  return result;
}

__n128 llvm::SmallVectorTemplateBase<std::tuple<llvm::SMLoc,`anonymous namespace'::AsmParser::CppHashInfoTy,llvm::MCSymbol *>,true>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v4 + 1;
    v11 = v5 + 56 * v4;
    if (v5 <= a2 && v11 > a2)
    {
      v13 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 56);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v13;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 56);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 56 * *(unsigned int *)(a1 + 8);
  result = *(__n128 *)v2;
  v8 = *(_OWORD *)(v2 + 16);
  v9 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v2 + 48);
  *(_OWORD *)(v6 + 16) = v8;
  *(_OWORD *)(v6 + 32) = v9;
  *(__n128 *)v6 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL `anonymous namespace'::AsmParser::parseBracketExpr(llvm::MCAsmParser *a1, uint64_t a2, _QWORD *a3)
{
  mlir::Token *Tok;
  _QWORD v7[4];
  __int16 v8;

  v7[0] = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 232))(a1, a2, v7) & 1) != 0)
    return 1;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(a1);
  *a3 = mlir::Token::getEndLoc(Tok);
  v7[0] = "expected ']' in brackets expression";
  v8 = 259;
  return llvm::MCAsmParser::parseToken(a1, 20, (llvm::Twine *)v7);
}

_QWORD *llvm::createCOFFAsmParser(llvm *this)
{
  void *v1;
  _QWORD *result;

  v1 = operator new(0x18uLL);
  result = (_QWORD *)llvm::MCAsmParserExtension::MCAsmParserExtension((uint64_t)v1);
  *result = off_1E0E15638;
  return result;
}

void `anonymous namespace'::COFFAsmParser::~COFFAsmParser(_anonymous_namespace_::COFFAsmParser *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::COFFAsmParser::Initialize(_anonymous_namespace_::COFFAsmParser *this, llvm::MCAsmParser *a2)
{
  llvm::MCAsmParserExtension::Initialize((uint64_t)this, a2);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSectionDirectiveText>(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  unint64_t COFFSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    COFFSection = llvm::MCContext::getCOFFSection(v3, ".text", 5uLL, 1610612768, 2, (std::string::size_type)"", 0, 0, 0xFFFFFFFF, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, COFFSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSectionDirectiveData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  unint64_t COFFSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    COFFSection = llvm::MCContext::getCOFFSection(v3, ".data", 5uLL, -1073741760, 19, (std::string::size_type)"", 0, 0, 0xFFFFFFFF, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, COFFSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSectionDirectiveBSS>(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  unint64_t COFFSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    COFFSection = llvm::MCContext::getCOFFSection(v3, ".bss", 4uLL, -1073741696, 15, (std::string::size_type)"", 0, 0, 0xFFFFFFFF, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, COFFSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t `anonymous namespace'::COFFAsmParser::parseSectionArguments(uint64_t a1)
{
  uint64_t Tok;
  unsigned __int16 *v3;
  std::string::size_type v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  const char *v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  int v34;
  int v35;
  int v36;
  std::string::size_type v38;
  std::string::size_type v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t **v42;
  unint64_t COFFSection;
  const char *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  unsigned __int8 v47;
  _QWORD v48[4];
  __int16 v49;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2
    && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
LABEL_74:
    v28 = "expected identifier in directive";
    goto LABEL_94;
  }
  Tok = llvm::MCAsmParser::getTok(*(llvm::MCAsmParser **)(a1 + 8));
  if (*(_DWORD *)Tok == 2)
  {
    v3 = *(unsigned __int16 **)(Tok + 8);
    v4 = *(_QWORD *)(Tok + 16);
  }
  else
  {
    v5 = *(_QWORD *)(Tok + 16);
    v6 = v5 != 0;
    if (v5)
      v3 = (unsigned __int16 *)(*(_QWORD *)(Tok + 8) + 1);
    else
      v3 = *(unsigned __int16 **)(Tok + 8);
    if (v5 - 1 < v6)
      v7 = 1;
    else
      v7 = v5 - 1;
    if (v7 < v5)
      v5 = v7;
    v4 = v5 - v6;
  }
  v8 = -1073741760;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
    goto LABEL_67;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
    v28 = "expected string in directive";
    goto LABEL_94;
  }
  v12 = llvm::MCAsmParser::getTok(*(llvm::MCAsmParser **)(a1 + 8));
  v14 = *(_QWORD *)(v12 + 8);
  v13 = *(_QWORD *)(v12 + 16);
  v15 = v13 - 1;
  v16 = v13 != 0;
  if (v13 - 1 < v16)
    v15 = 1;
  if (v15 >= v13)
    v17 = *(_QWORD *)(v12 + 16);
  else
    v17 = v15;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v18 = v17 - v16;
  if (v17 == v16)
  {
LABEL_52:
    v20 = 8;
    goto LABEL_53;
  }
  v19 = 0;
  v20 = 0;
  v21 = (_BYTE *)(v14 + v16);
  v9 = 28;
  v10 = 2;
  v11 = 6;
  while (2)
  {
    switch(*v21)
    {
      case 'D':
        v20 |= 0x100u;
        goto LABEL_24;
      case 'a':
        goto LABEL_24;
      case 'b':
        if ((v20 & 8) != 0)
          goto LABEL_97;
        v20 = v20 & 0xFFFFFFFA | 1;
        goto LABEL_24;
      case 'd':
        if ((v20 & 1) == 0)
        {
          v22 = v20 & 0xFFFFFF77;
          if ((v20 & 0x20) != 0)
            v23 = 8;
          else
            v23 = 12;
          v20 = v23 | v22;
LABEL_24:
          ++v21;
          if (!--v18)
          {
            if (!v20)
              goto LABEL_52;
LABEL_53:
            if ((v20 & 5) == 1)
              v29 = ((int)(v20 << 30) >> 31) & 0x20000020 | (((v20 >> 3) & 1) << 6) | 0x80;
            else
              v29 = ((int)(v20 << 30) >> 31) & 0x20000020 | (((v20 >> 3) & 1) << 6);
            v30 = v29 & 0xFFFFF7FF | (((v20 >> 5) & 1) << 11);
            if ((v20 & 0x100) != 0
              || v4 >= 6 && (*(_DWORD *)v3 == 1650811950 ? (v31 = v3[2] == 26485) : (v31 = 0), v31))
            {
              v30 |= 0x2000000u;
            }
            v31 = (v20 & 0x2D0) == 192;
            v32 = v30 | ((v20 << 24) & 0xD0000000 | v20 & 0x200) ^ 0xC0000000;
            if (v31)
              v8 = v30;
            else
              v8 = v32;
LABEL_67:
            v47 = 0;
            v45 = 0;
            v46 = 0;
            if (**(_DWORD **)((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8)
                                                                                            + 40))(*(_QWORD *)(a1 + 8), v9, v10, v11)+ 8) != 26)goto LABEL_77;
            v47 = 2;
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
            if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                             + 8) == 2)
            {
                return 1;
              if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                               + 8) == 26)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
                if ((*(unsigned int (**)(_QWORD, std::string::size_type *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v45))
                {
                  goto LABEL_74;
                }
                v8 |= 0x1000u;
LABEL_77:
                if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                                 + 8) == 9)
                {
                  if (v8 >> 30 == 1)
                    v34 = 4;
                  else
                    v34 = 19;
                  if ((v8 & 0x20000000) != 0)
                    v35 = 2;
                  else
                    v35 = v34;
                  if ((v35 & 0xFFFFFFFE) == 2)
                  {
                    v36 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                                    + 48);
                    if (v36 == 35 || v36 == 1)
                      v8 |= 0x20000u;
                  }
                  v38 = v45;
                  v39 = v46;
                  v40 = v47;
                  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                                   + 8) == 9)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
                    v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
                    v42 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
                    COFFSection = llvm::MCContext::getCOFFSection(v42, v3, v4, v8, v35, v38, v39, v40, 0xFFFFFFFF, 0);
                    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v41 + 168))(v41, COFFSection, 0);
                  }
                  else
                  {
                    v48[0] = "unexpected token in section switching directive";
                    v49 = 259;
                    llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v48, 0, 0);
                  }
                  return 0;
                }
                v28 = "unexpected token in directive";
              }
              else
              {
                v28 = "expected comma in directive";
              }
            }
            else
            {
              v28 = "expected comdat type such as 'discard' or 'largest' after protection bits";
            }
LABEL_94:
            v48[0] = v28;
            v49 = 259;
            return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v48, 0, 0);
          }
          continue;
        }
LABEL_97:
        v44 = "conflicting section flags 'b' and 'd'.";
LABEL_99:
        v48[0] = v44;
        v49 = 259;
        if ((llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v48, 0, 0) & 1) == 0)
          goto LABEL_67;
        return 1;
      case 'i':
        v20 |= 0x200u;
        goto LABEL_24;
      case 'n':
        v20 = v20 & 0xFFFFFFDB | 0x20;
        goto LABEL_24;
      case 'r':
        v19 = 0;
        if ((v20 & 2) != 0)
          v24 = 128;
        else
          v24 = 136;
        v20 |= (v24 | (v20 >> 3) & 4) ^ 4;
        goto LABEL_24;
      case 's':
        v25 = v20 & 0xFFFFFF67;
        if ((v20 & 0x20) != 0)
          v26 = 24;
        else
          v26 = 28;
        v20 = v26 | v25;
        goto LABEL_24;
      case 'w':
        v20 &= ~0x80u;
        v19 = 1;
        goto LABEL_24;
      case 'x':
        if ((v20 & 0x20) != 0)
          v27 = 2;
        else
          v27 = 6;
        v20 |= v27;
        if ((v19 & 1) == 0)
          v20 |= 0x80u;
        goto LABEL_24;
      case 'y':
        v20 |= 0xC0u;
        goto LABEL_24;
      default:
        v44 = "unknown flag";
        goto LABEL_99;
    }
  }
}

uint64_t `anonymous namespace'::COFFAsmParser::parseCOMDATType(uint64_t a1, char *a2)
{
  uint64_t Tok;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  Tok = llvm::MCAsmParser::getTok(*(llvm::MCAsmParser **)(a1 + 8));
  if (*(_DWORD *)Tok != 2)
  {
    v5 = *(_QWORD *)(Tok + 8);
    v8 = *(_QWORD *)(Tok + 16);
    v9 = v8 - 1;
    v10 = v8 != 0;
    if (v8)
      ++v5;
    if (v9 < v10)
      v9 = 1;
    if (v9 < v8)
      v8 = v9;
    v6 = v8 - v10;
    v7 = v6 - 6;
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(Tok + 8);
  v6 = *(_QWORD *)(Tok + 16);
  v7 = v6 - 6;
  if (v6 - 6 <= 7)
  {
LABEL_11:
    switch(v7)
    {
      case 0uLL:
        if (*(_DWORD *)v5 != 1702323566 || *(_WORD *)(v5 + 4) != 29811)
          break;
        v12 = 7;
        goto LABEL_49;
      case 1uLL:
        if (*(_DWORD *)v5 == 1668508004 && *(_DWORD *)(v5 + 3) == 1685217635)
        {
          v12 = 2;
        }
        else
        {
          if (*(_DWORD *)v5 != 1735549292 || *(_DWORD *)(v5 + 3) != 1953719655)
            break;
          v12 = 6;
        }
LABEL_49:
        *a2 = v12;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        return 0;
      case 2uLL:
        if (*(_QWORD *)v5 != 0x796C6E6F5F656E6FLL)
          break;
        v12 = 1;
        goto LABEL_49;
      case 3uLL:
        if (*(_QWORD *)v5 != 0x7A69735F656D6173 || *(_BYTE *)(v5 + 8) != 101)
          break;
        v12 = 3;
        goto LABEL_49;
      case 5uLL:
        if (*(_QWORD *)v5 != 0x746169636F737361 || *(_QWORD *)(v5 + 3) != 0x657669746169636FLL)
          break;
        v12 = 5;
        goto LABEL_49;
      case 7uLL:
        if (*(_QWORD *)v5 != 0x6E6F635F656D6173 || *(_QWORD *)(v5 + 5) != 0x73746E65746E6F63)
          break;
        v12 = 4;
        goto LABEL_49;
      default:
        break;
    }
  }
  *a2 = 0;
  v20 = 1283;
  v19[0] = "unrecognized COMDAT type '";
  v19[2] = v5;
  v19[3] = v6;
  v21[0] = v19;
  v21[2] = "'";
  v22 = 770;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v21, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectivePushSection>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = v2 + 144;
  v4 = *(_QWORD *)(v2 + 144);
  v5 = *(unsigned int *)(v2 + 152);
  if ((_DWORD)v5)
  {
    v6 = v4 + 32 * v5;
    v7 = *(_OWORD *)(v6 - 16);
    v8 = *(unsigned int *)(v2 + 152);
    v22 = *(_OWORD *)(v6 - 32);
    v23 = v7;
    v9 = (char *)&v22;
    if (v5 < *(_DWORD *)(v2 + 156))
      goto LABEL_5;
  }
  else
  {
    v8 = 0;
    v22 = 0u;
    v23 = 0u;
    v9 = (char *)&v22;
    if (*(_DWORD *)(v2 + 156))
      goto LABEL_5;
  }
  v20 = v8 + 1;
  if (v4 <= (unint64_t)&v22 && v4 + 32 * v8 > (unint64_t)&v22)
  {
    v21 = (char *)&v22 - v4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v2 + 160), v20, 32);
    v4 = *(_QWORD *)(v2 + 144);
    v9 = &v21[v4];
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v2 + 160), v20, 32);
    v4 = *(_QWORD *)(v2 + 144);
    v9 = (char *)&v22;
  }
LABEL_5:
  v10 = (_OWORD *)(v4 + 32 * *(unsigned int *)(v2 + 152));
  v11 = *((_OWORD *)v9 + 1);
  *v10 = *(_OWORD *)v9;
  v10[1] = v11;
  ++*(_DWORD *)(v2 + 152);
  if ((_DWORD)v12)
  {
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v14 = *(unsigned int *)(v13 + 152);
    if (v14 >= 2)
    {
      v15 = v13;
      v16 = *(_QWORD *)(v13 + 144) + 32 * v14;
      v17 = *(_QWORD *)(v16 - 64);
      if (v17)
      {
        if (*(_QWORD *)(v16 - 32) != v17 || *(_QWORD *)(v16 - 24) != *(_QWORD *)(v16 - 56))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 160))(v13);
          LODWORD(v14) = *(_DWORD *)(v15 + 152);
        }
      }
      *(_DWORD *)(v15 + 152) = v14 - 1;
    }
  }
  return v12;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectivePopSection>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  const char *v9;
  __int16 v10;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = *(unsigned int *)(v2 + 152);
  if (v3 < 2)
  {
    v9 = ".popsection without corresponding .pushsection";
    v10 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v9, 0, 0);
  }
  else
  {
    v4 = v2;
    v5 = *(_QWORD *)(v2 + 144) + 32 * v3;
    v6 = *(_QWORD *)(v5 - 64);
    if (v6)
    {
      if (*(_QWORD *)(v5 - 32) != v6 || *(_QWORD *)(v5 - 24) != *(_QWORD *)(v5 - 56))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
        LODWORD(v3) = *(_DWORD *)(v4 + 152);
      }
    }
    result = 0;
    *(_DWORD *)(v4 + 152) = v3 - 1;
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveDef>(uint64_t a1)
{
  llvm::MCContext *v3;
  uint64_t Symbol;
  uint64_t v5;
  const char *v6[4];
  __int16 v7;
  const char *v8;
  const char *v9;

  v8 = 0;
  v9 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v8))
  {
    v6[0] = "expected identifier in directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v6, 0, 0);
  }
  else
  {
    v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v7 = 261;
    v6[0] = v8;
    v6[1] = v9;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, v6);
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 312))(v5, Symbol);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveScl>(uint64_t a1)
{
  uint64_t v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v6 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v6) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 320))(v3, v6);
    return 0;
  }
  else
  {
    v4 = "unexpected token in directive";
    v5 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v4, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveType>(uint64_t a1)
{
  uint64_t v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v6 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v6) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 328))(v3, v6);
    return 0;
  }
  else
  {
    v4 = "unexpected token in directive";
    v5 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v4, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveEndef>(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSecRel32>(uint64_t a1)
{
  const char *v2;
  uint64_t Loc;
  llvm::MCAsmLexer *v4;
  llvm::MCContext *v6;
  uint64_t Symbol;
  uint64_t v8;
  uint64_t v9;
  const char *v10[4];
  __int16 v11;
  const char *v12;
  const char *v13;

  v12 = 0;
  v13 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v12))
  {
    v2 = "expected identifier in directive";
LABEL_10:
    v10[0] = v2;
    v11 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v10, 0, 0);
  }
  v9 = 0;
  Loc = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 12)
  {
    v4 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
    Loc = llvm::MCAsmLexer::getLoc(v4);
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v9) & 1) != 0)
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v2 = "unexpected token in directive";
    goto LABEL_10;
  }
  if (HIDWORD(v9))
  {
    v10[0] = "invalid '.secrel32' directive offset, can't be less than zero or greater than std::numeric_limits<uint32_t>::max()";
    v11 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), Loc, (uint64_t)v10, 0, 0);
  }
  else
  {
    v6 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v11 = 261;
    v10[0] = v12;
    v10[1] = v13;
    Symbol = llvm::MCContext::getOrCreateSymbol(v6, v10);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 368))(v8, Symbol, v9);
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSymIdx>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  uint64_t Symbol;
  uint64_t v5;
  const char *v7[4];
  __int16 v8;
  const char *v9;
  const char *v10;

  v9 = 0;
  v10 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v9))
  {
    v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v8 = 261;
      v7[0] = v9;
      v7[1] = v10;
      Symbol = llvm::MCContext::getOrCreateSymbol(v3, v7);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 352))(v5, Symbol);
      return 0;
    }
    v2 = "unexpected token in directive";
  }
  v7[0] = v2;
  v8 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v7, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSafeSEH>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  uint64_t Symbol;
  uint64_t v5;
  const char *v7[4];
  __int16 v8;
  const char *v9;
  const char *v10;

  v9 = 0;
  v10 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v9))
  {
    v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v8 = 261;
      v7[0] = v9;
      v7[1] = v10;
      Symbol = llvm::MCContext::getOrCreateSymbol(v3, v7);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 344))(v5, Symbol);
      return 0;
    }
    v2 = "unexpected token in directive";
  }
  v7[0] = v2;
  v8 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v7, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSecIdx>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  uint64_t Symbol;
  uint64_t v5;
  const char *v7[4];
  __int16 v8;
  const char *v9;
  const char *v10;

  v9 = 0;
  v10 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v9))
  {
    v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v8 = 261;
      v7[0] = v9;
      v7[1] = v10;
      Symbol = llvm::MCContext::getOrCreateSymbol(v3, v7);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 360))(v5, Symbol);
      return 0;
    }
    v2 = "unexpected token in directive";
  }
  v7[0] = v2;
  v8 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v7, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveLinkOnce>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int128 v13;
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  unsigned __int8 v17;

  v17 = 2;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 2
  {
    return 1;
  }
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v8 = *(unsigned int *)(v7 + 152);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 32 * v8 - 32);
    v10 = v17;
    if (v17 == 5)
    {
LABEL_6:
      v15[0] = "cannot make section associative with .linkonce";
      v11 = 259;
LABEL_12:
      v16 = v11;
      return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), a4, (uint64_t)v15, 0, 0);
    }
  }
  else
  {
    v9 = 0;
    v10 = v17;
    if (v17 == 5)
      goto LABEL_6;
  }
  if ((*(_BYTE *)(v9 + 225) & 0x10) != 0)
  {
    v12 = "section '";
    v13 = *(_OWORD *)(v9 + 200);
    v14 = 1283;
    v15[0] = &v12;
    v15[2] = "' is already linkonce";
    v11 = 770;
    goto LABEL_12;
  }
  llvm::MCSectionCOFF::setSelection(v9, v10);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    return 0;
  v15[0] = "unexpected token in directive";
  v16 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v15, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveRVA>(uint64_t a1)
{
  uint64_t result;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v5 = a1;
  if ((_DWORD)result)
  {
    v3 = " in directive";
    v4 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)&v3);
  }
  return result;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::COFFAsmParser::ParseDirectiveRVA(llvm::StringRef,llvm::SMLoc)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  llvm::MCAsmLexer *v3;
  uint64_t Loc;
  llvm::MCContext *v5;
  uint64_t Symbol;
  uint64_t v7;
  uint64_t v8;
  const char *v9[4];
  __int16 v10;
  const char *v11;
  const char *v12;

  v1 = *a1;
  v11 = 0;
  v12 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(v1 + 8) + 192))(*(_QWORD *)(v1 + 8), &v11))
  {
    v9[0] = "expected identifier in directive";
    v10 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(v1 + 8), (uint64_t)v9, 0, 0);
  }
  v8 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8)) + 8) != 12
    && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8)) + 8) != 13)
  {
    goto LABEL_9;
  }
  v3 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8));
  Loc = llvm::MCAsmLexer::getLoc(v3);
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v1 + 8) + 256))(*(_QWORD *)(v1 + 8), &v8) & 1) != 0)
    return 1;
  if (v8 != (int)v8)
  {
    v9[0] = "invalid '.rva' directive offset, can't be less than -2147483648 or greater than 2147483647";
    v10 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(v1 + 8), Loc, (uint64_t)v9, 0, 0);
  }
  else
  {
LABEL_9:
    v5 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 48))(*(_QWORD *)(v1 + 8));
    v10 = 261;
    v9[0] = v11;
    v9[1] = v12;
    Symbol = llvm::MCContext::getOrCreateSymbol(v5, v9);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 56))(*(_QWORD *)(v1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 376))(v7, Symbol, v8);
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSymbolAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  llvm::MCContext *v8;
  uint64_t Symbol;
  uint64_t v10;
  const char *v11;
  const char *v12[4];
  __int16 v13;
  const char *v14;
  const char *i;

  if (a3 != 14)
  {
    if (a3 == 5 && *(_DWORD *)a2 == 1634039598 && *(_BYTE *)(a2 + 4) == 107)
    {
      v5 = 24;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (*(_QWORD *)a2 != 0x6E615F6B6165772ELL || *(_QWORD *)(a2 + 6) != 0x7065645F69746E61)
  {
LABEL_13:
    v5 = 0;
    goto LABEL_14;
  }
  v5 = 28;
LABEL_14:
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
LABEL_15:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v14 = 0;
  for (i = 0;
        ((*(uint64_t (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v14) & 1) == 0;
        i = 0)
  {
    v8 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v13 = 261;
    v12[0] = v14;
    v12[1] = i;
    Symbol = llvm::MCContext::getOrCreateSymbol(v8, v12);
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 296))(v10, Symbol, v5);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      goto LABEL_15;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
    {
      v11 = "unexpected token in directive";
      goto LABEL_23;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v14 = 0;
  }
  v11 = "expected identifier in directive";
LABEL_23:
  v12[0] = v11;
  v13 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v12, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveStartProc>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::MCContext *v7;
  uint64_t Symbol;
  uint64_t v9;
  const char *v10[4];
  __int16 v11;
  const char *v12;
  const char *v13;

  v12 = 0;
  v13 = 0;
  if (((*(uint64_t (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v12) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    v7 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v11 = 261;
    v10[0] = v12;
    v10[1] = v13;
    Symbol = llvm::MCContext::getOrCreateSymbol(v7, v10);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 1048))(v9, Symbol, a4);
    return 0;
  }
  else
  {
    v10[0] = "unexpected token in directive";
    v11 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v10, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndProc>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1056))(v6, a4);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndFuncletOrFunc>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1064))(v6, a4);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveStartChained>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1072))(v6, a4);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndChained>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1080))(v6, a4);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveHandler>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  llvm::MCContext *v8;
  uint64_t Symbol;
  uint64_t v10;
  BOOL v11[2];
  const char *v12[4];
  __int16 v13;
  const char *v14;
  const char *v15;

  v14 = 0;
  v15 = 0;
  if (((*(uint64_t (**)(uint64_t, const char **))(*(_QWORD *)a1[1] + 192))(a1[1], &v14) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 26)
  {
    v7 = "you must specify one or both of @unwind or @except";
LABEL_7:
    v12[0] = v7;
    v13 = 259;
    return llvm::MCAsmParser::TokError(a1[1], (uint64_t)v12, 0, 0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
  *(_WORD *)v11 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
  }
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 9)
  {
    v7 = "unexpected token in directive";
    goto LABEL_7;
  }
  v8 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 48))(a1[1]);
  v13 = 261;
  v12[0] = v14;
  v12[1] = v15;
  Symbol = llvm::MCContext::getOrCreateSymbol(v8, v12);
  (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 56))(a1[1]);
  (*(void (**)(uint64_t, uint64_t, BOOL, BOOL, uint64_t))(*(_QWORD *)v10 + 1144))(v10, Symbol, v11[1], v11[0], a4);
  return 0;
}

uint64_t `anonymous namespace'::COFFAsmParser::ParseAtUnwindOrAtExcept(_anonymous_namespace_::COFFAsmParser *this, BOOL *a2, BOOL *a3)
{
  llvm::MCAsmLexer *v6;
  uint64_t Loc;
  uint64_t result;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) == 46
    || **(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) == 37)
  {
    v6 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
    Loc = llvm::MCAsmLexer::getLoc(v6);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), &v13)|| v14 != 6)
    {
LABEL_13:
      v11[0] = "expected @unwind or @except";
      v12 = 259;
      return llvm::MCAsmParser::Error(*((_QWORD *)this + 1), Loc, (uint64_t)v11, 0, 0);
    }
    if (*(_DWORD *)v13 == 1769434741 && *(_WORD *)(v13 + 4) == 25710)
    {
      result = 0;
      *a2 = 1;
    }
    else
    {
      if (*(_DWORD *)v13 != 1701017701 || *(_WORD *)(v13 + 4) != 29808)
        goto LABEL_13;
      result = 0;
      *a3 = 1;
    }
  }
  else
  {
    v11[0] = "a handler attribute must begin with '@' or '%'";
    v12 = 259;
    return llvm::MCAsmParser::TokError(*((_QWORD *)this + 1), (uint64_t)v11, 0, 0);
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveHandlerData>(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 1152))(v2, 0);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveAllocStack>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  v10 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v10) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 1104))(v7, v10, a4);
    return 0;
  }
  else
  {
    v8 = "unexpected token in directive";
    v9 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v8, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndProlog>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1136))(v6, a4);
  return 0;
}

_QWORD *llvm::createGOFFAsmParser(llvm *this)
{
  void *v1;
  _QWORD *result;

  v1 = operator new(0x18uLL);
  result = (_QWORD *)llvm::MCAsmParserExtension::MCAsmParserExtension((uint64_t)v1);
  *result = off_1E0E158C0;
  return result;
}

void `anonymous namespace'::GOFFAsmParser::~GOFFAsmParser(_anonymous_namespace_::GOFFAsmParser *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

_QWORD *llvm::createDarwinAsmParser(llvm *this)
{
  void *v1;
  _QWORD *result;

  v1 = operator new(0x20uLL);
  result = (_QWORD *)llvm::MCAsmParserExtension::MCAsmParserExtension((uint64_t)v1);
  *result = off_1E0E15CF0;
  result[3] = 0;
  return result;
}

void `anonymous namespace'::DarwinAsmParser::~DarwinAsmParser(_anonymous_namespace_::DarwinAsmParser *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::DarwinAsmParser::Initialize(_anonymous_namespace_::DarwinAsmParser *this, llvm::MCAsmParser *a2)
{
  uint64_t result;

  llvm::MCAsmParserExtension::Initialize((uint64_t)this, a2);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveAltEntry>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  uint64_t Symbol;
  _QWORD *v6;
  void *AssociatedFragment;
  uint64_t v8;
  const char *v9[4];
  __int16 v10;
  const char *v11;
  const char *v12;

  v11 = 0;
  v12 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11))
  {
    v2 = "expected identifier in directive";
LABEL_5:
    v9[0] = v2;
    v10 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v9, 0, 0);
  }
  v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v10 = 261;
  v9[0] = v11;
  v9[1] = v12;
  Symbol = llvm::MCContext::getOrCreateSymbol(v3, v9);
  if (*(_QWORD *)Symbol
    || (v6 = (_QWORD *)Symbol, (*(_DWORD *)(Symbol + 8) & 0x7080) == 0x2000)
    && (*(_DWORD *)(Symbol + 8) |= 8u,
        AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(Symbol + 24)),
        (*v6 = AssociatedFragment) != 0))
  {
    v2 = ".alt_entry must preceed symbol definition";
    goto LABEL_5;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 296))(v8, v6, 20) & 1) == 0)
  {
    v2 = "unable to emit symbol attribute";
    goto LABEL_5;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveDesc>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  uint64_t Symbol;
  uint64_t v6;
  uint64_t v7;
  const char *v8[4];
  __int16 v9;
  const char *v10;
  const char *v11;

  v10 = 0;
  v11 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v10))
  {
    v2 = "expected identifier in directive";
  }
  else
  {
    v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v9 = 261;
    v8[0] = v10;
    v8[1] = v11;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, v8);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 26)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v7 = 0;
      if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v7) & 1) != 0)
        return 1;
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 304))(v6, Symbol, v7);
        return 0;
      }
    }
    v2 = "unexpected token in '.desc' directive";
  }
  v8[0] = v2;
  v9 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v8, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveIndirectSymbol>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  const char *v11;
  llvm::MCContext *v12;
  uint64_t Symbol;
  uint64_t v14;
  uint64_t v15;
  const char *v17;
  const char *v18;
  const char *v19[4];
  __int16 v20;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 32 * *(unsigned int *)(v6 + 152) - 32) + 240);
  v8 = v7 > 0x14;
  v9 = (1 << v7) & 0x1001C0;
  if (v8 || v9 == 0)
  {
    v19[0] = "indirect symbol not in a symbol pointer or stub section";
    v20 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), a4, (uint64_t)v19, 0, 0);
  }
  v17 = 0;
  v18 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v17))
  {
    v11 = "expected identifier in .indirect_symbol directive";
LABEL_15:
    v19[0] = v11;
    v20 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v19, 0, 0);
  }
  v12 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v20 = 261;
  v19[0] = v17;
  v19[1] = v18;
  Symbol = llvm::MCContext::getOrCreateSymbol(v12, v19);
  if ((*(_BYTE *)(Symbol + 8) & 2) != 0)
  {
    v11 = "non-local symbol required in directive";
    goto LABEL_15;
  }
  v14 = Symbol;
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 296))(v15, v14, 14) & 1) != 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      return 0;
    }
    v11 = "unexpected token in '.indirect_symbol' directive";
    goto LABEL_15;
  }
  v20 = 1283;
  v19[0] = "unable to emit indirect symbol attribute for: ";
  v19[2] = v17;
  v19[3] = v18;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v19, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveLsym>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  const llvm::MCExpr *v5;
  const char *v6[4];
  __int16 v7;
  const char *v8;
  const char *v9;

  v8 = 0;
  v9 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v8))
  {
    v2 = "expected identifier in directive";
  }
  else
  {
    v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v7 = 261;
    v6[0] = v8;
    v6[1] = v9;
    llvm::MCContext::getOrCreateSymbol(v3, v6);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
      goto LABEL_8;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v5 = 0;
    if ((llvm::MCAsmParser::parseExpression(*(llvm::MCAsmParser **)(a1 + 8), &v5) & 1) != 0)
      return 1;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v2 = "directive '.lsym' is unsupported";
    }
    else
    {
LABEL_8:
      v2 = "unexpected token in '.lsym' directive";
    }
  }
  v6[0] = v2;
  v7 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v6, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveSubsectionsViaSymbols>(uint64_t a1)
{
  uint64_t v2;
  const char *v4;
  __int16 v5;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 208))(v2, 1);
    return 0;
  }
  else
  {
    v4 = "unexpected token in '.subsections_via_symbols' directive";
    v5 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v4, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveDumpOrLoad>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v7;
  const char *v8;
  const char *v9;
  _QWORD v11[4];
  __int16 v12;

  v7 = a3 == 5 && *(_DWORD *)a2 == 1836409902 && *(_BYTE *)(a2 + 4) == 112;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
    v9 = "expected string in '.dump' or '.load' directive";
LABEL_15:
    v11[0] = v9;
    v12 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v11, 0, 0);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v9 = "unexpected token in '.dump' or '.load' directive";
    goto LABEL_15;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (v7)
    v8 = "ignoring directive .dump for now";
  else
    v8 = "ignoring directive .load for now";
  v11[0] = v8;
  v12 = 259;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a4, v11, 0, 0);
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseDirectiveSection(uint64_t a1)
{
  llvm::MCAsmLexer *v2;
  char *Loc;
  uint64_t v4;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  std::string::size_type size;
  int64x2_t v15;
  int8x16_t v16;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  size_t v26;
  size_t v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t MachOSection;
  uint64_t v40[4];
  __int16 v41;
  uint64_t v42[2];
  const char *v43;
  size_t v44;
  __int16 v45;
  std::string __p;
  std::string v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  const char *v53;
  size_t v54;
  unsigned __int16 *v55;
  unint64_t v56;
  std::string __dst;
  const void *v58;
  unint64_t v59;

  v2 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  Loc = (char *)llvm::MCAsmLexer::getLoc(v2);
  v58 = 0;
  v59 = 0;
  if ((*(unsigned int (**)(_QWORD, const void **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v58))
  {
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier after '.section' directive";
    WORD4(v48) = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)Loc, (uint64_t)&v47, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
  {
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.section' directive";
    WORD4(v48) = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v47, 0, 0);
  }
  v5 = v59;
  if (v59 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = v58;
  if (v59 >= 0x17)
  {
    v8 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v8 = v59 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v59;
  p_dst = &__dst;
  if (v59)
LABEL_12:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  std::string::append(&__dst, ",");
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v11 = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  std::string::append[abi:nn180100]<char const*,0>(&__dst, v11, (std::string *)((char *)v11 + v12));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.section' directive";
    WORD4(v48) = 259;
    v4 = llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v47, 0, 0);
    goto LABEL_29;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v55 = 0;
  v56 = 0;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v51 = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__dst;
  else
    v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  llvm::MCSectionMachO::ParseSectionSpecifier((char *)v13, (char *)size, (void **)&v55, (void **)&v53, &v52, &v51, (_DWORD *)&v52 + 1, v42);
  if (v42[0])
  {
    v50 = (_QWORD *)v42[0];
    v42[0] = 0;
    llvm::toString(&v50, &__p, v15, v16);
    WORD4(v48) = 260;
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v4 = llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)Loc, (uint64_t)&v47, 0, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v50)
      (*(void (**)(_QWORD *))(*v50 + 8))(v50);
    if (v42[0])
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v42[0] + 8))(v42[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v4;
LABEL_30:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return v4;
    }
LABEL_29:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v4;
    goto LABEL_30;
  }
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v19 = v18;
  if (*(char *)(v18 + 47) < 0)
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v18 + 24), *(_QWORD *)(v18 + 32));
  else
    v47 = *(std::string *)(v18 + 24);
  v48 = *(_OWORD *)(v19 + 48);
  v49 = *(_QWORD *)(v19 + 64);
  if ((v48 & 0xFFFFFFFD) != 0x15)
  {
    v20 = v54;
    if (v54)
    {
      v21 = v53;
      if (v54 == 12)
      {
        if (*(_QWORD *)v53 == 0x5F74736E6F635F5FLL && *((_DWORD *)v53 + 2) == 1818324835)
        {
          v23 = "__const";
          v22 = 7;
          goto LABEL_60;
        }
        v22 = 12;
        v23 = v53;
      }
      else
      {
        v22 = v54;
        v23 = v53;
        if (v54 == 13)
        {
          if (*(_QWORD *)v53 == 0x6F63747865745F5FLL && *(_QWORD *)(v53 + 5) == 0x746E5F6C616F6374)
          {
            v23 = "__text";
            v22 = 6;
            goto LABEL_60;
          }
          v22 = *(_QWORD *)v53 ^ 0x6F63617461645F5FLL | *(_QWORD *)(v53 + 5) ^ 0x746E5F6C616F6361 ? 13 : 6;
          v23 = *(_QWORD *)v53 ^ 0x6F63617461645F5FLL | *(_QWORD *)(v53 + 5) ^ 0x746E5F6C616F6361 ? v53 : "__data";
          if (v54 != v22)
          {
LABEL_60:
            if (Loc && (v26 = strlen(Loc)) != 0)
            {
              v27 = v26;
              v28 = memchr(Loc, 44, v26);
              if (v28)
                v29 = v28 - Loc + 1;
              else
                v29 = 0;
              if (v27 > v29)
              {
                v30 = memchr(&Loc[v29], 44, v27 - v29);
                v31 = v30 - Loc;
                if (!v30)
                  v31 = -1;
                goto LABEL_71;
              }
            }
            else
            {
              v29 = 0;
            }
            v31 = -1;
LABEL_71:
            v32 = &Loc[v29];
            v33 = *(_QWORD *)(a1 + 8);
            v34 = &Loc[v31];
            v45 = 1283;
            v42[0] = (uint64_t)"section \"";
            v43 = v21;
            v44 = v20;
            v40[0] = (uint64_t)"\" is deprecated";
            v41 = 259;
            llvm::operator+(v42, v40, (uint64_t)&__p);
            (*(void (**)(uint64_t, char *, std::string *, char *, char *))(*(_QWORD *)v33 + 168))(v33, Loc, &__p, v32, v34);
            v35 = *(_QWORD *)(a1 + 8);
            v45 = 1283;
            v42[0] = (uint64_t)"change section name to \"";
            v43 = v23;
            v44 = v22;
            v40[0] = (uint64_t)"\"";
            v41 = 259;
            llvm::operator+(v42, v40, (uint64_t)&__p);
            (*(void (**)(uint64_t, char *, std::string *, char *, char *))(*(_QWORD *)v35 + 160))(v35, Loc, &__p, v32, v34);
            goto LABEL_72;
          }
        }
      }
      if (memcmp(v53, v23, v54))
        goto LABEL_60;
    }
  }
LABEL_72:
  if (v56 == 6)
  {
    if (*(_DWORD *)v55 ^ 0x45545F5F | v55[2] ^ 0x5458)
      v36 = 19;
    else
      v36 = 2;
  }
  else
  {
    v36 = 19;
  }
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  MachOSection = llvm::MCContext::getMachOSection(v38, v55, v56, (uint64_t)v53, v54, v52, SHIDWORD(v52), v36, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v37 + 168))(v37, MachOSection, 0);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  v4 = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_30;
  return v4;
}

std::string *std::string::append[abi:nn180100]<char const*,0>(std::string *this, std::string *__src, std::string *a3)
{
  unint64_t v6;
  size_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **p_dst;
  std::string *v13;
  std::string::value_type *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  char *v20;
  std::string::size_type *v21;
  _OWORD *v22;
  unint64_t v23;
  __int128 v24;
  std::string::value_type v25;
  std::string::size_type v26;
  void **__dst;
  size_t v29;
  int64_t v30;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)__src;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == __src)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src)
      goto LABEL_12;
  }
  else
  {
    if (a3 == __src)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        v13 = this;
        if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_14:
          v14 = (char *)v13 + size;
          if (a3 == __src)
            goto LABEL_38;
          goto LABEL_18;
        }
      }
      else
      {
        v13 = this;
        if ((v6 & 0x80) == 0)
          goto LABEL_14;
      }
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      v14 = (std::string::value_type *)(this->__r_.__value_.__r.__words[0] + size);
      if (a3 == __src)
        goto LABEL_38;
LABEL_18:
      if (v7 >= 0x20)
      {
        v20 = (char *)v13 + size;
        if ((unint64_t)((char *)v13 + size - (char *)__src) >= 0x20)
        {
          v14 += v7 & 0xFFFFFFFFFFFFFFE0;
          v15 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
          v21 = &__src->__r_.__value_.__r.__words[2];
          v22 = v20 + 16;
          v23 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v24 = *(_OWORD *)v21;
            *(v22 - 1) = *((_OWORD *)v21 - 1);
            *v22 = v24;
            v21 += 4;
            v22 += 2;
            v23 -= 32;
          }
          while (v23);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_38;
        }
        else
        {
          v15 = __src;
        }
      }
      else
      {
        v15 = __src;
      }
      do
      {
        v25 = v15->__r_.__value_.__s.__data_[0];
        v15 = (std::string *)((char *)v15 + 1);
        *v14++ = v25;
      }
      while (v15 != a3);
LABEL_38:
      *v14 = 0;
      v26 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v26;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v26 & 0x7F;
      return this;
    }
  }
  if ((std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= __src)
    goto LABEL_12;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v7 > 0x16)
  {
    v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v16 = v7 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v29 = v7;
    v30 = v17 | 0x8000000000000000;
    __dst = p_dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  else
  {
    HIBYTE(v30) = v7;
    p_dst = (void **)&__dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  memcpy(p_dst, __src, v7);
  p_dst = (void **)((char *)p_dst + v7);
LABEL_24:
  *(_BYTE *)p_dst = 0;
  if (v30 >= 0)
    v18 = (const std::string::value_type *)&__dst;
  else
    v18 = (const std::string::value_type *)__dst;
  if (v30 >= 0)
    v19 = HIBYTE(v30);
  else
    v19 = v29;
  std::string::append(this, v18, v19);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst);
  return this;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectivePushSection>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = v2 + 144;
  v4 = *(_QWORD *)(v2 + 144);
  v5 = *(unsigned int *)(v2 + 152);
  if ((_DWORD)v5)
  {
    v6 = v4 + 32 * v5;
    v7 = *(_OWORD *)(v6 - 16);
    v8 = *(unsigned int *)(v2 + 152);
    v22 = *(_OWORD *)(v6 - 32);
    v23 = v7;
    v9 = (char *)&v22;
    if (v5 < *(_DWORD *)(v2 + 156))
      goto LABEL_5;
  }
  else
  {
    v8 = 0;
    v22 = 0u;
    v23 = 0u;
    v9 = (char *)&v22;
    if (*(_DWORD *)(v2 + 156))
      goto LABEL_5;
  }
  v20 = v8 + 1;
  if (v4 <= (unint64_t)&v22 && v4 + 32 * v8 > (unint64_t)&v22)
  {
    v21 = (char *)&v22 - v4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v2 + 160), v20, 32);
    v4 = *(_QWORD *)(v2 + 144);
    v9 = &v21[v4];
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v2 + 160), v20, 32);
    v4 = *(_QWORD *)(v2 + 144);
    v9 = (char *)&v22;
  }
LABEL_5:
  v10 = (_OWORD *)(v4 + 32 * *(unsigned int *)(v2 + 152));
  v11 = *((_OWORD *)v9 + 1);
  *v10 = *(_OWORD *)v9;
  v10[1] = v11;
  ++*(_DWORD *)(v2 + 152);
  if ((_DWORD)v12)
  {
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v14 = *(unsigned int *)(v13 + 152);
    if (v14 >= 2)
    {
      v15 = v13;
      v16 = *(_QWORD *)(v13 + 144) + 32 * v14;
      v17 = *(_QWORD *)(v16 - 64);
      if (v17)
      {
        if (*(_QWORD *)(v16 - 32) != v17 || *(_QWORD *)(v16 - 24) != *(_QWORD *)(v16 - 56))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 160))(v13);
          LODWORD(v14) = *(_DWORD *)(v15 + 152);
        }
      }
      *(_DWORD *)(v15 + 152) = v14 - 1;
    }
  }
  return v12;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectivePopSection>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  const char *v9;
  __int16 v10;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = *(unsigned int *)(v2 + 152);
  if (v3 < 2)
  {
    v9 = ".popsection without corresponding .pushsection";
    v10 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v9, 0, 0);
  }
  else
  {
    v4 = v2;
    v5 = *(_QWORD *)(v2 + 144) + 32 * v3;
    v6 = *(_QWORD *)(v5 - 64);
    if (v6)
    {
      if (*(_QWORD *)(v5 - 32) != v6 || *(_QWORD *)(v5 - 24) != *(_QWORD *)(v5 - 56))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
        LODWORD(v3) = *(_DWORD *)(v4 + 152);
      }
    }
    result = 0;
    *(_DWORD *)(v4 + 152) = v3 - 1;
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectivePrevious>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  __int16 v10;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = *(unsigned int *)(v2 + 152);
  if ((_DWORD)v3 && (v4 = *(_QWORD *)(v2 + 144) + 32 * v3, (v5 = *(_QWORD *)(v4 - 16)) != 0))
  {
    v6 = *(_QWORD *)(v4 - 8);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, v5, v6);
    return 0;
  }
  else
  {
    v9 = ".previous without corresponding .section";
    v10 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v9, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveSecureLogUnique>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  uint64_t *v18;
  int BufferContainingLoc;
  uint64_t v20;
  size_t v21;
  const void *v22;
  size_t v23;
  _BYTE *v24;
  uint64_t *v25;
  unsigned int LineAndColumn;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;
  _QWORD v38[4];
  __int16 v39;
  std::error_code v40;
  _QWORD v41[2];
  const char *v42;
  __int16 v43;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8));
  v8 = v7;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v41[0] = "unexpected token in '.secure_log_unique' directive";
    v43 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v41, 0, 0);
  }
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) + 1352))
  {
    v9 = ".secure_log_unique specified multiple times";
LABEL_4:
    v41[0] = v9;
    v43 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)a4, (uint64_t)v41, 0, 0);
  }
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v14 = *(char *)(v13 + 1343);
  if (v14 >= 0)
    v15 = (_BYTE *)(v13 + 1320);
  else
    v15 = *(_BYTE **)(v13 + 1320);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v13 + 1343);
  else
    v16 = *(_QWORD *)(v13 + 1328);
  if (!v16)
  {
    v9 = ".secure_log_unique used but AS_SECURE_LOG_FILE environment variable unset.";
    goto LABEL_4;
  }
  v17 = *(llvm::raw_ostream **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                              + 1344);
  if (v17)
    goto LABEL_16;
  v40.__val_ = 0;
  v40.__cat_ = std::system_category();
  v17 = (llvm::raw_ostream *)operator new(0x60uLL);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v17, v15, v16, (uint64_t)&v40, 7);
  if (!v40.__val_)
  {
    v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v32 = *(_QWORD *)(v31 + 1344);
    *(_QWORD *)(v31 + 1344) = v17;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
LABEL_16:
    v18 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v18, (unint64_t)a4);
    v20 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8))
                    + 24 * (BufferContainingLoc - 1));
    v22 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    v23 = v21;
    v24 = (_BYTE *)*((_QWORD *)v17 + 4);
    if (v21 <= *((_QWORD *)v17 + 3) - (_QWORD)v24)
    {
      if (v21)
      {
        memcpy(v24, v22, v21);
        v24 = (_BYTE *)(*((_QWORD *)v17 + 4) + v23);
        *((_QWORD *)v17 + 4) = v24;
      }
    }
    else
    {
      v17 = llvm::raw_ostream::write(v17, (const char *)v22, v21);
      v24 = (_BYTE *)*((_QWORD *)v17 + 4);
    }
    if (*((_BYTE **)v17 + 3) == v24)
    {
      v17 = llvm::raw_ostream::write(v17, ":", 1uLL);
    }
    else
    {
      *v24 = 58;
      ++*((_QWORD *)v17 + 4);
    }
    v25 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
    LineAndColumn = llvm::SourceMgr::getLineAndColumn(v25, a4, BufferContainingLoc);
    v27 = llvm::raw_ostream::operator<<(v17, LineAndColumn);
    v28 = v27;
    v29 = (_BYTE *)*((_QWORD *)v27 + 4);
    if (*((_BYTE **)v27 + 3) == v29)
    {
      v28 = llvm::raw_ostream::write(v27, ":", 1uLL);
    }
    else
    {
      *v29 = 58;
      ++*((_QWORD *)v27 + 4);
    }
    v43 = 773;
    v41[0] = v6;
    v41[1] = v8;
    v42 = "\n";
    llvm::Twine::print((llvm::Twine *)v41, v28);
    v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v11 = 0;
    *(_BYTE *)(v30 + 1352) = 1;
    return v11;
  }
  v34[0] = "can't open secure log file: ";
  v34[2] = v15;
  v34[3] = v16;
  v35 = 1283;
  v36[0] = v34;
  v36[2] = " (";
  v37 = 770;
  std::error_code::message(&v33, &v40);
  v38[0] = v36;
  v38[2] = &v33;
  v39 = 1026;
  v41[0] = v38;
  v42 = ")";
  v43 = 770;
  v11 = llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)a4, (uint64_t)v41, 0, 0);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v17 + 8))(v17);
  return v11;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveSecureLogReset>(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  const char *v4;
  __int16 v5;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    result = 0;
    *(_BYTE *)(v2 + 1352) = 0;
  }
  else
  {
    v4 = "unexpected token in '.secure_log_reset' directive";
    v5 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v4, 0, 0);
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveTBSS>(uint64_t a1)
{
  llvm::MCAsmLexer *v2;
  uint64_t Loc;
  const char *v4;
  llvm::MCContext *v5;
  uint64_t Symbol;
  llvm::MCAsmLexer *v7;
  uint64_t v8;
  uint64_t v10;
  llvm::MCAsmLexer *v11;
  uint64_t v12;
  uint64_t v13;
  void *AssociatedFragment;
  uint64_t v15;
  uint64_t v16;
  uint64_t MachOSection;
  uint64_t v18;
  uint64_t v19;
  const char *v20[4];
  __int16 v21;
  const char *v22;
  const char *v23;

  v2 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  Loc = llvm::MCAsmLexer::getLoc(v2);
  v22 = 0;
  v23 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v22))
  {
    v4 = "expected identifier in directive";
LABEL_7:
    v20[0] = v4;
    v21 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v20, 0, 0);
  }
  v5 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v21 = 261;
  v20[0] = v22;
  v20[1] = v23;
  Symbol = llvm::MCContext::getOrCreateSymbol(v5, v20);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
  {
    v4 = "unexpected token in directive";
    goto LABEL_7;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v19 = 0;
  v7 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v8 = llvm::MCAsmLexer::getLoc(v7);
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v19) & 1) != 0)
    return 1;
  v18 = 0;
  v10 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 26)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v11 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
    v10 = llvm::MCAsmLexer::getLoc(v11);
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v18) & 1) != 0)
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v4 = "unexpected token in '.tbss' directive";
    goto LABEL_7;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (v19 < 0)
  {
    v20[0] = "invalid '.tbss' directive size, can't be less thanzero";
    v21 = 259;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = v8;
    return llvm::MCAsmParser::Error(v12, v13, (uint64_t)v20, 0, 0);
  }
  if (v18 < 0)
  {
    v20[0] = "invalid '.tbss' alignment, can't be lessthan zero";
    v21 = 259;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = v10;
    return llvm::MCAsmParser::Error(v12, v13, (uint64_t)v20, 0, 0);
  }
  if (*(_QWORD *)Symbol
    || (*(_DWORD *)(Symbol + 8) & 0x7080) == 0x2000
    && (*(_DWORD *)(Symbol + 8) |= 8u,
        AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(Symbol + 24)),
        (*(_QWORD *)Symbol = AssociatedFragment) != 0))
  {
    v20[0] = "invalid symbol redefinition";
    v21 = 259;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = Loc;
    return llvm::MCAsmParser::Error(v12, v13, (uint64_t)v20, 0, 0);
  }
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  MachOSection = llvm::MCContext::getMachOSection(v16, "__DATA", 6uLL, (uint64_t)"__thread_bss", 12, 18, 0, 12, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 488))(v15, MachOSection, Symbol, v19, v18);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveZerofill>(uint64_t a1)
{
  const char *v2;
  llvm::MCAsmLexer *v3;
  uint64_t Loc;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MachOSection;
  llvm::MCAsmLexer *v11;
  uint64_t v12;
  llvm::MCContext *v13;
  uint64_t Symbol;
  llvm::MCAsmLexer *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MCAsmLexer *v18;
  uint64_t v19;
  uint64_t v20;
  void *AssociatedFragment;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31[4];
  __int16 v32;
  _BYTE *v33;
  unint64_t v34;

  v33 = 0;
  v34 = 0;
  if ((*(unsigned int (**)(_QWORD, _BYTE **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v33))
  {
    v2 = "expected segment name after '.zerofill' directive";
LABEL_16:
    v31[0] = v2;
    v32 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v31, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
    goto LABEL_15;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v29 = 0;
  v30 = 0;
  v3 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  Loc = llvm::MCAsmLexer::getLoc(v3);
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v29))
  {
    v2 = "expected section name after comma in '.zerofill' directive";
    goto LABEL_16;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v6 = **(_QWORD **)(a1 + 8);
  if (**(_DWORD **)(v5 + 8) == 9)
  {
    v7 = (*(uint64_t (**)(void))(v6 + 56))();
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v8, v33, v34, v29, v30, 1, 0, 15, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v7 + 480))(v7, MachOSection, 0, 0, 0, Loc);
    return 0;
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(v6 + 40))() + 8) != 26)
    goto LABEL_15;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v11 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v12 = llvm::MCAsmLexer::getLoc(v11);
  v27 = 0;
  v28 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v27))
  {
    v2 = "expected identifier in directive";
    goto LABEL_16;
  }
  v13 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v32 = 261;
  v31[0] = v27;
  v31[1] = v28;
  Symbol = llvm::MCContext::getOrCreateSymbol(v13, v31);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
  {
LABEL_15:
    v2 = "unexpected token in directive";
    goto LABEL_16;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v26 = 0;
  v15 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v16 = llvm::MCAsmLexer::getLoc(v15);
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v26) & 1) != 0)
    return 1;
  v25 = 0;
  v17 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 26)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v18 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
    v17 = llvm::MCAsmLexer::getLoc(v18);
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v25) & 1) != 0)
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v2 = "unexpected token in '.zerofill' directive";
    goto LABEL_16;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (v26 < 0)
  {
    v31[0] = "invalid '.zerofill' directive size, can't be less than zero";
    v32 = 259;
    v19 = *(_QWORD *)(a1 + 8);
    v20 = v16;
  }
  else if (v25 < 0)
  {
    v31[0] = "invalid '.zerofill' directive alignment, can't be less than zero";
    v32 = 259;
    v19 = *(_QWORD *)(a1 + 8);
    v20 = v17;
  }
  else
  {
    if (!*(_QWORD *)Symbol)
    {
      if ((*(_DWORD *)(Symbol + 8) & 0x7080) != 0x2000
        || (*(_DWORD *)(Symbol + 8) |= 8u,
            AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(Symbol + 24)),
            (*(_QWORD *)Symbol = AssociatedFragment) == 0))
      {
        v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
        v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
        v24 = llvm::MCContext::getMachOSection(v23, v33, v34, v29, v30, 1, 0, 15, 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 480))(v22, v24, Symbol, v26, v25, Loc);
        return 0;
      }
    }
    v31[0] = "invalid symbol redefinition";
    v32 = 259;
    v19 = *(_QWORD *)(a1 + 8);
    v20 = v12;
  }
  return llvm::MCAsmParser::Error(v19, v20, (uint64_t)v31, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveDataRegion>(uint64_t a1)
{
  uint64_t v2;
  mlir::Token *Tok;
  uint64_t Loc;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 224))(v2, 0);
    return 0;
  }
  v11 = 0;
  v12 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(*(llvm::MCAsmParser **)(a1 + 8));
  Loc = mlir::Token::getLoc(Tok);
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11))
  {
    v9[0] = "expected region type after '.data_region' directive";
    v10 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v9, 0, 0);
  }
  if (v12 == 4)
  {
    if (*(_DWORD *)v11 == 909210730)
    {
      v7 = 2;
    }
    else
    {
      if (*(_DWORD *)v11 != 842232938)
      {
LABEL_15:
        v9[0] = "unknown region type in '.data_region' directive";
        v10 = 259;
        return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), Loc, (uint64_t)v9, 0, 0);
      }
      v7 = 3;
    }
  }
  else
  {
    if (v12 != 3)
      goto LABEL_15;
    if (*(_WORD *)v11 != 29802 || *(_BYTE *)(v11 + 2) != 56)
      goto LABEL_15;
    v7 = 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 224))(v8, v7);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveDataRegionEnd>(uint64_t a1)
{
  uint64_t v2;
  const char *v4;
  __int16 v5;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 224))(v2, 4);
    return 0;
  }
  else
  {
    v4 = "unexpected token in '.end_data_region' directive";
    v5 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v4, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveBss>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__DATA", 6uLL, (uint64_t)"__bss", 5, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseSectionSwitch(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, int a8)
{
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t MachOSection;
  uint64_t v20;
  const char *v22;
  __int16 v23;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    if (a6 < 0)
      v18 = 2;
    else
      v18 = 19;
    MachOSection = llvm::MCContext::getMachOSection(v17, a2, a3, a4, a5, a6, a8, v18, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 168))(v16, MachOSection, 0);
    if (a7)
    {
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v20 + 640))(v20, __clz(a7) ^ 0x3F, 0, 1, 0);
    }
    return 0;
  }
  else
  {
    v22 = "unexpected token in section switching directive";
    v23 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v22, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveConst>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__const", 7, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveConstData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__DATA", 6uLL, (uint64_t)"__const", 7, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveConstructor>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__constructor", 13, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveCString>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__DATA", 6uLL, (uint64_t)"__data", 6, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveDestructor>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__destructor", 12, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveDyld>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__DATA", 6uLL, (uint64_t)"__dyld", 6, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveFVMLibInit0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__fvmlib_init0", 14, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveFVMLibInit1>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__fvmlib_init1", 14, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLazySymbolPointers>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveLinkerOption>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  int v7;
  char *Address;
  char *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _QWORD v22[2];
  const char *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[14];

  v27[12] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x400000000;
  do
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
    {
      v18[0] = "expected string in '";
      v19 = a2;
      v20 = a3;
      v21 = 1283;
      v22[0] = v18;
      v23 = "' directive";
      v24 = 770;
      v3 = llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v22, 0, 0);
      v12 = v25;
      v13 = v26;
      if ((_DWORD)v26)
        goto LABEL_25;
LABEL_21:
      if (v12 == v27)
        return v3 & 1;
LABEL_22:
      free(v12);
      return v3 & 1;
    }
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    if (((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8), __p) & 1) != 0)
    {
      v3 = 1;
      v7 = 1;
      if ((SHIBYTE(v17) & 0x80000000) == 0)
        continue;
    }
    else
    {
      Address = llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v25, (unint64_t)__p, 1);
      v9 = (char *)v25 + 24 * v26;
      if (Address[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v25 + v26, *(const std::string::value_type **)Address, *((_QWORD *)Address + 1));
      }
      else
      {
        v10 = *(_OWORD *)Address;
        *((_QWORD *)v9 + 2) = *((_QWORD *)Address + 2);
        *(_OWORD *)v9 = v10;
      }
      LODWORD(v26) = v26 + 1;
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      {
        v7 = 3;
        if ((SHIBYTE(v17) & 0x80000000) == 0)
          continue;
      }
      else if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 26)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v7 = 0;
        if ((SHIBYTE(v17) & 0x80000000) == 0)
          continue;
      }
      else
      {
        v18[0] = "unexpected token in '";
        v19 = a2;
        v20 = a3;
        v21 = 1283;
        v22[0] = v18;
        v23 = "' directive";
        v24 = 770;
        v3 = llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v22, 0, 0);
        v7 = 1;
        if ((SHIBYTE(v17) & 0x80000000) == 0)
          continue;
      }
    }
    operator delete(__p[0]);
  }
  while (!v7);
  if (v7 == 3)
  {
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v11 + 216))(v11, v25, v26);
    v3 = 0;
  }
  v12 = v25;
  v13 = v26;
  if (!(_DWORD)v26)
    goto LABEL_21;
LABEL_25:
  v15 = 3 * v13;
  do
  {
    if (SHIBYTE(v12[v15 - 1]) < 0)
      operator delete((void *)v12[v15 - 3]);
    v15 -= 3;
  }
  while (v15 * 8);
  v12 = v25;
  if (v25 != v27)
    goto LABEL_22;
  return v3 & 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLiteral16>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLiteral4>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLiteral8>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveModInitFunc>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveModTermFunc>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveNonLazySymbolPointers>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveThreadLocalVariablePointers>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCCatClsMeth>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__cat_cls_meth", 14, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCCatInstMeth>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__cat_inst_meth", 15, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCCategory>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__category", 10, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClass>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__class", 7, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClassNames>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClassVars>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__class_vars", 12, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClsMeth>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__cls_meth", 10, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClsRefs>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCInstMeth>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__inst_meth", 11, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCInstanceVars>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__instance_vars", 15, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMessageRefs>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMetaClass>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__meta_class", 12, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMethVarNames>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMethVarTypes>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCModuleInfo>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__module_info", 13, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCProtocol>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__protocol", 10, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCSelectorStrs>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__selector_strs", 15, 2, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCStringObject>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__string_object", 15, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCSymbols>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__OBJC", 6uLL, (uint64_t)"__symbols", 9, 0x10000000, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectivePICSymbolStub>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__picsymbol_stub", 16, -2147483640, 26, 2, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveStaticConst>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__static_const", 14, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveStaticData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__DATA", 6uLL, (uint64_t)"__static_data", 13, 0, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveSymbolStub>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__symbol_stub", 13, -2147483640, 16, 2, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveTData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__DATA", 6uLL, (uint64_t)"__thread_data", 13, 17, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveText>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__TEXT", 6uLL, (uint64_t)"__text", 6, 0x80000000, 0, 2, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveThreadInitFunc>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__DATA", 6uLL, (uint64_t)"__thread_init", 13, 21, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveTLV>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MachOSection;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v3, "__DATA", 6uLL, (uint64_t)"__thread_vars", 13, 19, 0, 19, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, MachOSection, 0);
    return 0;
  }
  else
  {
    v6 = "unexpected token in section switching directive";
    v7 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v6, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveIdent>(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8));
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseBridgeOSVersionMin>(_anonymous_namespace_::DarwinAsmParser *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19[2];
  unsigned int v20;
  unsigned int v21;
  unsigned int v22[2];

  v20 = 0;
  *(_QWORD *)v19 = 0;
    return 1;
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD **)a1 + 1)) + 8);
  v10 = *(_DWORD *)v9 == 2 && *(_QWORD *)(v9 + 16) == 11;
  if (v10
    && ((v11 = *(uint64_t **)(v9 + 8), v12 = *v11, v13 = *(uint64_t *)((char *)v11 + 3), v12 == 0x737265765F6B6473)
      ? (v14 = v13 == 0x6E6F69737265765FLL)
      : (v14 = 0),
        v14))
  {
    (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 184))(*((_QWORD **)a1 + 1));
    *(_QWORD *)v22 = 0;
      return 1;
    v18 = v22[1] | ((unint64_t)v22[0] << 32);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD **)a1 + 1)) + 8) != 26)
    {
      v15 = 0;
      v16 = v18 | 0x8000000000000000;
      goto LABEL_13;
    }
    v21 = 0;
      return 1;
    v16 = v18 | 0x8000000000000000;
    v15 = v21 | 0x80000000;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
LABEL_13:
  v17 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 56))(*((_QWORD **)a1 + 1));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v17 + 240))(v17, 5, v20, v19[1], v19[0], v16, v15);
  return 0;
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseVersion(_anonymous_namespace_::DarwinAsmParser *this, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  const char *v14;
  __int16 v15;

    return 1;
  *a4 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  result = 0;
  if (**(_DWORD **)(v7 + 8) != 9)
  {
    v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8);
    v9 = *(_DWORD *)v8 == 2 && *(_QWORD *)(v8 + 16) == 11;
    if (v9
      && ((v10 = *(uint64_t **)(v8 + 8), v11 = *v10, v12 = *(uint64_t *)((char *)v10 + 3), v11 == 0x737265765F6B6473)
        ? (v13 = v12 == 0x6E6F69737265765FLL)
        : (v13 = 0),
          v13))
    {
      return 0;
    }
    else if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1))
                          + 8) == 26)
    {
    }
    else
    {
      v14 = "invalid OS update specifier, comma expected";
      v15 = 259;
      return llvm::MCAsmParser::TokError(*((_QWORD *)this + 1), (uint64_t)&v14, 0, 0);
    }
  }
  return result;
}

uint64_t `anonymous namespace'::DarwinAsmParser::checkVersion(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t result;
  llvm::Triple **v15;
  char v16;
  uint64_t OSName;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  __int16 v25;
  _QWORD v26[4];
  char v27;
  char v28;
  _QWORD v29[4];
  __int16 v30;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (*(_DWORD *)(result + 60) != a7)
  {
    v15 = (llvm::Triple **)(result + 24);
    if (a5)
    {
      v20[0] = 32;
      v20[2] = a4;
      v20[3] = a5;
      v21 = 1288;
      v22 = a2;
      v23 = a3;
      v24 = v20;
      v16 = 2;
      a2 = &v22;
      v25 = 517;
    }
    else
    {
      v21 = 257;
      v22 = a2;
      v23 = a3;
      v25 = 261;
      v16 = 5;
    }
    v26[0] = a2;
    v26[1] = a3;
    v26[2] = " used while targeting ";
    v27 = v16;
    v28 = 3;
    OSName = llvm::Triple::getOSName(v15);
    v29[0] = v26;
    v29[2] = OSName;
    v29[3] = v18;
    v30 = 1282;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a6, v29, 0, 0);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v29[0] = "overriding previous version directive";
    v30 = 259;
    (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a6, v29, 0, 0);
    v19 = *(_QWORD *)(a1 + 24);
    v29[0] = "previous definition is here";
    v30 = 259;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), v19, v29, 0, 0);
  }
  *(_QWORD *)(a1 + 24) = a6;
  return result;
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseMajorMinorVersionComponent(_anonymous_namespace_::DarwinAsmParser *this, unsigned int *a2, unsigned int *a3, const char *a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  char v12;
  int v13;
  const char *v14;
  char v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  __int16 v20;
  BOOL v21;
  const char *v22;
  const char *v23;
  int v25;
  _QWORD v26[2];
  const char *v27;
  __int16 v28;
  const char *v29;
  const char *v30;
  __int16 v31;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) != 4)
  {
    v13 = *(unsigned __int8 *)a4;
    v14 = "invalid ";
    if (*a4)
    {
      v26[0] = "invalid ";
      v27 = a4;
      v28 = 771;
      v15 = 2;
    }
    else
    {
      v26[0] = "invalid ";
      v28 = 259;
      v15 = 3;
    }
    if (v13)
      v14 = (const char *)v26;
    v29 = v14;
    v30 = " major version number, integer expected";
    LOBYTE(v31) = v15;
    goto LABEL_27;
  }
  v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8);
  v9 = (_QWORD *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = (_QWORD *)*v9;
  v10 = (_QWORD *)*v9;
  if ((unint64_t)(v10 - 0x2000) <= 0xFFFFFFFFFFFF0000)
  {
    v11 = *(unsigned __int8 *)a4;
    if (*a4)
    {
      v26[0] = "invalid ";
      v27 = a4;
      v28 = 771;
      v12 = 2;
    }
    else
    {
      v26[0] = "invalid ";
      v28 = 259;
      v12 = 3;
    }
    v21 = v11 == 0;
    v22 = (const char *)v26;
    if (v21)
      v22 = "invalid ";
    v23 = " major version number";
LABEL_26:
    v29 = v22;
    v30 = v23;
    LOBYTE(v31) = v12;
LABEL_27:
    HIBYTE(v31) = 3;
    return llvm::MCAsmParser::TokError(*((_QWORD *)this + 1), (uint64_t)&v29, 0, 0);
  }
  *a2 = v10;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) != 26)
  {
    if (*a4)
    {
      v29 = a4;
      v30 = " minor version number required, comma expected";
      v20 = 771;
    }
    else
    {
      v29 = " minor version number required, comma expected";
      v20 = 259;
    }
    v31 = v20;
    return llvm::MCAsmParser::TokError(*((_QWORD *)this + 1), (uint64_t)&v29, 0, 0);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) != 4)
  {
    v25 = *(unsigned __int8 *)a4;
    if (*a4)
    {
      v26[0] = "invalid ";
      v27 = a4;
      v28 = 771;
      v12 = 2;
    }
    else
    {
      v26[0] = "invalid ";
      v28 = 259;
      v12 = 3;
    }
    v21 = v25 == 0;
    v22 = (const char *)v26;
    if (v21)
      v22 = "invalid ";
    v23 = " minor version number, integer expected";
    goto LABEL_26;
  }
  v16 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8);
  v17 = (unint64_t *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (unint64_t *)*v17;
  v18 = *v17;
  if (v18 >= 0x100)
  {
    v19 = *(unsigned __int8 *)a4;
    if (*a4)
    {
      v26[0] = "invalid ";
      v27 = a4;
      v28 = 771;
      v12 = 2;
    }
    else
    {
      v26[0] = "invalid ";
      v28 = 259;
      v12 = 3;
    }
    v21 = v19 == 0;
    v22 = (const char *)v26;
    if (v21)
      v22 = "invalid ";
    v23 = " minor version number";
    goto LABEL_26;
  }
  *a3 = v18;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  return 0;
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseOptionalTrailingVersionComponent(_anonymous_namespace_::DarwinAsmParser *this, unsigned int *a2, const char *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  char v10;
  int v11;
  const char *v12;
  char v13;
  BOOL v15;
  const char *v16;
  _QWORD v17[2];
  const char *v18;
  __int16 v19;
  const char *v20;
  const char *v21;
  char v22;
  char v23;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) == 4)
  {
    v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8);
    v7 = (unint64_t *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u)
      v7 = (unint64_t *)*v7;
    v8 = *v7;
    if (v8 < 0x100)
    {
      *a2 = v8;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
      return 0;
    }
    v9 = *(unsigned __int8 *)a3;
    if (*a3)
    {
      v17[0] = "invalid ";
      v18 = a3;
      v19 = 771;
      v10 = 2;
    }
    else
    {
      v17[0] = "invalid ";
      v19 = 259;
      v10 = 3;
    }
    v15 = v9 == 0;
    v16 = (const char *)v17;
    if (v15)
      v16 = "invalid ";
    v20 = v16;
    v21 = " version number";
    v22 = v10;
  }
  else
  {
    v11 = *(unsigned __int8 *)a3;
    v12 = "invalid ";
    if (*a3)
    {
      v17[0] = "invalid ";
      v18 = a3;
      v19 = 771;
      v13 = 2;
    }
    else
    {
      v17[0] = "invalid ";
      v19 = 259;
      v13 = 3;
    }
    if (v11)
      v12 = (const char *)v17;
    v20 = v12;
    v21 = " version number, integer expected";
    v22 = v13;
  }
  v23 = 3;
  return llvm::MCAsmParser::TokError(*((_QWORD *)this + 1), (uint64_t)&v20, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseWatchOSVersionMin>(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseVersionMin(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  unsigned int v23[4];
  const char *v24;
  __int16 v25;
  unsigned int v26;
  unsigned int v27[2];
  unsigned int v28;

  *(_QWORD *)v27 = 0;
  v26 = 0;
  v11 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
  v12 = *(_DWORD *)v11 == 2 && *(_QWORD *)(v11 + 16) == 11;
  if (!v12
    || ((v13 = *(uint64_t **)(v11 + 8), v14 = *v13, v15 = *(uint64_t *)((char *)v13 + 3), v14 == 0x737265765F6B6473)
      ? (v16 = v15 == 0x6E6F69737265765FLL)
      : (v16 = 0),
        !v16))
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_13;
  }
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
  v23[0] = 0;
  LODWORD(v21[0]) = 0;
  v20 = v23[0] | ((unint64_t)LODWORD(v21[0]) << 32);
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 26)
  {
    v28 = 0;
    {
      v18 = v20 | 0x8000000000000000;
      v17 = v28 | 0x80000000;
      goto LABEL_13;
    }
    return 1;
  }
  v17 = 0;
  v18 = v20 | 0x8000000000000000;
LABEL_13:
  if (llvm::MCAsmParser::parseEOL(a1[1]))
  {
    v21[0] = " in '";
    v21[2] = a2;
    v21[3] = a3;
    v22 = 1283;
    *(_QWORD *)v23 = v21;
    v24 = "' directive";
    v25 = 770;
    return llvm::MCAsmParser::addErrorSuffix(a1[1], (const llvm::Twine *)v23);
  }
  else
  {
    v19 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v19 + 232))(v19, a5, v27[1], v27[0], v26, v18, v17);
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseTvOSVersionMin>(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseIOSVersionMin>(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseMacOSXVersionMin>(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseBuildVersion>(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  mlir::Token *Tok;
  uint64_t Loc;
  const char *v10;
  uint64_t v13;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43[2];
  unsigned int v44[8];
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;

  v46 = 0;
  v47 = 0;
  Tok = (mlir::Token *)llvm::MCAsmParser::getTok(a1[1]);
  Loc = mlir::Token::getLoc(Tok);
  if ((*(unsigned int (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1[1] + 192))(a1[1], &v46))
  {
    v10 = "platform name expected";
LABEL_3:
    *(_QWORD *)v44 = v10;
    v45 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)a1[1], (uint64_t)v44, 0, 0);
  }
  switch(v47)
  {
    case 3:
      if (*(_WORD *)v46 != 28521 || *(_BYTE *)(v46 + 2) != 115)
        goto LABEL_106;
      v13 = 2;
      goto LABEL_114;
    case 4:
      if (*(_DWORD *)v46 == 1936684660)
      {
        v13 = 3;
      }
      else
      {
        if (*(_DWORD *)v46 != 1936683640)
          goto LABEL_106;
        v13 = 11;
      }
      goto LABEL_114;
    case 5:
      if (*(_DWORD *)v46 == 1868783981 && *(_BYTE *)(v46 + 4) == 115)
      {
        v13 = 1;
        goto LABEL_114;
      }
      if (*(_DWORD *)v46 == 1869636979 && *(_BYTE *)(v46 + 4) == 115)
      {
        v13 = 14;
        goto LABEL_114;
      }
      goto LABEL_106;
    case 7:
      if (*(_DWORD *)v46 == 1852534389 && *(_DWORD *)(v46 + 3) == 1853321070)
        goto LABEL_106;
      if (*(_DWORD *)v46 != 1668571511 || *(_DWORD *)(v46 + 3) != 1936681059)
        goto LABEL_106;
      v13 = 4;
      goto LABEL_114;
    case 8:
      if (*(_QWORD *)v46 != 0x736F656764697262)
        goto LABEL_106;
      v13 = 5;
      goto LABEL_114;
    case 9:
      if (*(_QWORD *)v46 != 0x696B726576697264 || *(_BYTE *)(v46 + 8) != 116)
        goto LABEL_106;
      v13 = 10;
      goto LABEL_114;
    case 11:
      if (*(_QWORD *)v46 == 0x6C6174614363616DLL && *(_QWORD *)(v46 + 3) == 0x7473796C61746143)
      {
        v13 = 6;
        goto LABEL_114;
      }
      if (*(_QWORD *)v46 == 0x616C756D69737278 && *(_QWORD *)(v46 + 3) == 0x726F74616C756D69)
      {
        v13 = 12;
        goto LABEL_114;
      }
      goto LABEL_106;
    case 12:
      if (*(_QWORD *)v46 != 0x6C756D6973736F69 || *(_DWORD *)(v46 + 8) != 1919906913)
        goto LABEL_106;
      v13 = 7;
      goto LABEL_114;
    case 13:
      if (*(_QWORD *)v46 == 0x756D6973736F7674 && *(_QWORD *)(v46 + 5) == 0x726F74616C756D69)
      {
        v13 = 8;
        goto LABEL_114;
      }
      if (*(_QWORD *)v46 == 0x6E72656B5F736F69 && *(_QWORD *)(v46 + 5) == 0x74696B6C656E7265)
      {
        v13 = 26;
        goto LABEL_114;
      }
      goto LABEL_106;
    case 14:
      if (*(_QWORD *)v46 == 0x72656B5F736F7674 && *(_QWORD *)(v46 + 6) == 0x74696B6C656E7265)
      {
        v13 = 27;
      }
      else
      {
        if (*(_QWORD *)v46 != 0x72656B5F736F7278 || *(_QWORD *)(v46 + 6) != 0x74696B6C656E7265)
        {
LABEL_106:
          *(_QWORD *)v44 = "unknown platform name";
          v45 = 259;
          return llvm::MCAsmParser::Error((uint64_t)a1[1], Loc, (uint64_t)v44, 0, 0);
        }
        v13 = 29;
      }
LABEL_114:
      if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 26)
      {
        v10 = "version number required, comma expected";
        goto LABEL_3;
      }
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
      *(_QWORD *)v43 = 0;
      v42 = 0;
      v32 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
      v33 = *(_DWORD *)v32 == 2 && *(_QWORD *)(v32 + 16) == 11;
      if (!v33
        || ((v34 = *(uint64_t **)(v32 + 8), v35 = *v34, v36 = *(uint64_t *)((char *)v34 + 3), v35 == 0x737265765F6B6473)
          ? (v37 = v36 == 0x6E6F69737265765FLL)
          : (v37 = 0),
            !v37))
      {
        v38 = 0;
        v39 = 0;
        goto LABEL_128;
      }
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
      v44[0] = 0;
      v49 = 0;
      v41 = v44[0] | ((unint64_t)v49 << 32);
      if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 26)
      {
        v48 = 0;
        v39 = v41 | 0x8000000000000000;
        v38 = v48 | 0x80000000;
      }
      else
      {
        v38 = 0;
        v39 = v41 | 0x8000000000000000;
      }
LABEL_128:
      if (llvm::MCAsmParser::parseEOL(a1[1]))
      {
        *(_QWORD *)v44 = " in '.build_version' directive";
        v45 = 259;
        return llvm::MCAsmParser::addErrorSuffix(a1[1], (const llvm::Twine *)v44);
      }
      else
      {
        v40 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 56))(a1[1]);
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v40 + 240))(v40, v13, v43[1], v43[0], v42, v39, v38);
        return 0;
      }
    case 15:
      if (*(_QWORD *)v46 != 0x656B5F736F63616DLL || *(_QWORD *)(v46 + 7) != 0x74696B6C656E7265)
        goto LABEL_106;
      v13 = 25;
      goto LABEL_114;
    case 16:
      if (*(_QWORD *)v46 != 0x73736F6863746177 || *(_QWORD *)(v46 + 8) != 0x726F74616C756D69)
        goto LABEL_106;
      v13 = 9;
      goto LABEL_114;
    case 17:
      if (*(_QWORD *)v46 != 0x5F736F6863746177
        || *(_QWORD *)(v46 + 8) != 0x696B6C656E72656BLL
        || *(_BYTE *)(v46 + 16) != 116)
      {
        goto LABEL_106;
      }
      v13 = 28;
      goto LABEL_114;
    case 18:
      if (*(_QWORD *)v46 != 0x736F656764697262
        || *(_QWORD *)(v46 + 8) != 0x6B6C656E72656B5FLL
        || *(_WORD *)(v46 + 16) != 29801)
      {
        goto LABEL_106;
      }
      v13 = 30;
      goto LABEL_114;
    default:
      goto LABEL_106;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parsePtrAuthABIVersion>(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  uint64_t v4;
  _QWORD v5[4];
  __int16 v6;
  uint64_t v7;

  v7 = 0;
  v2 = *(llvm::MCAsmParser **)(a1 + 8);
  v5[0] = "expected integer version in '.ptrauth_abi_version' directive";
  v6 = 259;
  if (llvm::MCAsmParser::parseIntToken(v2, &v7, (const llvm::Twine *)v5))
    return 1;
  if ((unint64_t)v7 < 0x40)
  {
    v5[0] = "unexpected token";
    v6 = 259;
    if (llvm::MCAsmParser::parseToken(*(llvm::MCAsmParser **)(a1 + 8), 9, (llvm::Twine *)v5))
    {
      v5[0] = " in '.ptrauth_abi_version' directive";
      v6 = 259;
      return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v5);
    }
    else
    {
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 256))(v4, v7, 0);
      return 0;
    }
  }
  else
  {
    v5[0] = "invalid ptrauth ABI version number";
    v6 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v5, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parsePtrAuthKernelABIVersion>(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  uint64_t v4;
  _QWORD v5[4];
  __int16 v6;
  uint64_t v7;

  v7 = 0;
  v2 = *(llvm::MCAsmParser **)(a1 + 8);
  v5[0] = "expected integer version in '.ptrauth_kernel_abi_version' directive";
  v6 = 259;
  if (llvm::MCAsmParser::parseIntToken(v2, &v7, (const llvm::Twine *)v5))
    return 1;
  if ((unint64_t)v7 < 0x40)
  {
    v5[0] = "unexpected token";
    v6 = 259;
    if (llvm::MCAsmParser::parseToken(*(llvm::MCAsmParser **)(a1 + 8), 9, (llvm::Twine *)v5))
    {
      v5[0] = " in '.ptrauth_kernel_abi_version' directive";
      v6 = 259;
      return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v5);
    }
    else
    {
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 256))(v4, v7, 1);
      return 0;
    }
  }
  else
  {
    v5[0] = "invalid ptrauth kernel ABI version number";
    v6 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v5, 0, 0);
  }
}

uint64_t llvm::createELFAsmParser(llvm *this)
{
  void *v1;
  uint64_t result;

  v1 = operator new(0x18uLL);
  result = llvm::MCAsmParserExtension::MCAsmParserExtension((uint64_t)v1);
  *(_QWORD *)result = off_1E0E15448;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void `anonymous namespace'::ELFAsmParser::~ELFAsmParser(_anonymous_namespace_::ELFAsmParser *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::ELFAsmParser::Initialize(_anonymous_namespace_::ELFAsmParser *this, llvm::MCAsmParser *a2)
{
  llvm::MCAsmParserExtension::Initialize((uint64_t)this, a2);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveData>(uint64_t a1)
{
}

uint64_t `anonymous namespace'::ELFAsmParser::ParseSectionSwitch(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v11;
  llvm::MCContext *v12;
  unint64_t ELFSection;
  _QWORD v14[4];
  __int16 v15;
  llvm::MCExpr *v16;
  _BYTE v17[32];
  __int16 v18;

  v16 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9
    && (llvm::MCAsmParser::parseExpression(*(llvm::MCAsmParser **)(a1 + 8), &v16) & 1) != 0)
  {
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v12 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  v18 = 257;
  ELFSection = llvm::MCContext::getELFSection(v12, (const llvm::Twine *)v14, a4, a5, 0, (const llvm::Twine *)v17, 0, -1, 0);
  (*(void (**)(uint64_t, unint64_t, llvm::MCExpr *))(*(_QWORD *)v11 + 168))(v11, ELFSection, v16);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveText>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveBSS>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveRoData>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveTData>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveTBSS>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveDataRel>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveDataRelRo>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveEhFrame>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSection>(llvm::MCAsmParser **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t `anonymous namespace'::ELFAsmParser::ParseSectionArguments(llvm::MCAsmParser **a1, int a2, uint64_t a3)
{
  llvm::MCAsmLexer *v6;
  uint64_t *Loc;
  int v8;
  llvm::MCAsmParser *v9;
  uint64_t Tok;
  size_t v11;
  llvm::MCAsmLexer *v12;
  uint64_t v13;
  int v14;
  llvm::MCAsmParser *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  int v31;
  BOOL v32;
  int v33;
  llvm::MCAsmParser *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  unint64_t v46;
  int v48;
  int v49;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v58;
  int v59;
  unint64_t v61;
  uint64_t result;
  const char *v63;
  unsigned int v64;
  uint64_t v65;
  size_t v66;
  void *v67;
  BOOL v69;
  int v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  mlir::Token *v76;
  llvm::MCAsmParser *v77;
  llvm::MCAsmLexer *v78;
  uint64_t v79;
  int v80;
  llvm::MCAsmParser *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  mlir::Token *v93;
  uint64_t v94;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  size_t v110;
  uint64_t *v111;
  size_t v112;
  llvm::MCContext *v113;
  unint64_t ELFSection;
  uint64_t v115;
  int v116;
  BOOL v117;
  _BOOL4 v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  unint64_t v127;
  void **v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t *v132;
  uint64_t v133;
  int64x2_t *v134;
  llvm::MCContext *v135;
  uint64_t TempSymbol;
  uint64_t v137;
  uint64_t v138;
  void *__p[2];
  char v140;
  __int128 v141;
  __int16 v142;
  void *__dst[2];
  unint64_t v144;
  __int16 v145;
  uint64_t v146[2];
  uint64_t *v147;
  size_t v148;
  __int16 v149;
  uint64_t *v150;
  size_t v151;
  const char *v152;
  __int16 v153;
  unsigned int v154[2];
  llvm::MCSymbolELF *v155;
  llvm::MCExpr *v156;
  BOOL v157;
  uint64_t v158;
  size_t v159;
  uint64_t v160;
  __int128 v161;
  unint64_t v162;
  size_t v163;
  __int128 v164;
  __int16 v165;
  int v166;
  __int16 v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  v6 = (llvm::MCAsmLexer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]);
  Loc = (uint64_t *)llvm::MCAsmLexer::getLoc(v6);
  v8 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
  v9 = a1[1];
  if (v8 == 3)
  {
    Tok = llvm::MCAsmParser::getTok(v9);
    if (*(_DWORD *)Tok == 2)
    {
      Loc = *(uint64_t **)(Tok + 8);
      v11 = *(_QWORD *)(Tok + 16);
    }
    else
    {
      v23 = *(_QWORD *)(Tok + 16);
      v24 = v23 != 0;
      if (v23)
        Loc = (uint64_t *)(*(_QWORD *)(Tok + 8) + 1);
      else
        Loc = *(uint64_t **)(Tok + 8);
      if (v23 - 1 < v24)
        v25 = 1;
      else
        v25 = v23 - 1;
      if (v25 < v23)
        v23 = v25;
      v11 = v23 - v24;
    }
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
  }
  else
  {
    if (*((_DWORD *)v9 + 6))
      goto LABEL_235;
    v12 = (llvm::MCAsmLexer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v9 + 40))(v9);
    v13 = llvm::MCAsmLexer::getLoc(v12);
    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 26
      || **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 9)
    {
      goto LABEL_235;
    }
    v14 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
    v15 = a1[1];
    if (v14 == 3)
    {
      v16 = llvm::MCAsmParser::getTok(v15);
      v17 = *(_QWORD *)(v16 + 16);
      v18 = v17 - 1;
      v19 = v17 != 0;
      if (v17 - 1 < v19)
        v18 = 1;
      if (v18 >= v17)
        v18 = *(_QWORD *)(v16 + 16);
      v20 = v18 - v19;
      if (*(_DWORD *)v16 == 2)
        v21 = *(_QWORD *)(v16 + 16);
      else
        LODWORD(v21) = v20;
      LODWORD(v22) = v21 + 2;
    }
    else
    {
      v71 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v15 + 40))(v15) + 8);
      v72 = llvm::MCAsmParser::getTok(a1[1]);
      if (v71 == 2)
      {
        v22 = *(_QWORD *)(v72 + 16);
        if (*(_DWORD *)v72 != 2)
        {
          v73 = v22 - 1;
          v74 = v22 != 0;
          if (v22 - 1 < v74)
            v73 = 1;
          if (v73 >= v22)
            v73 = *(_QWORD *)(v72 + 16);
          LODWORD(v22) = v73 - v74;
        }
      }
      else
      {
        LODWORD(v22) = *(_DWORD *)(v72 + 16);
      }
    }
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
    v11 = v22;
    v76 = (mlir::Token *)llvm::MCAsmParser::getTok(a1[1]);
    if (v13 + v22 == mlir::Token::getLoc(v76))
    {
      do
      {
        v77 = a1[1];
        if (*((_DWORD *)v77 + 6))
          break;
        v78 = (llvm::MCAsmLexer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v77 + 40))(v77);
        v79 = llvm::MCAsmLexer::getLoc(v78);
        if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 26
          || **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 9)
        {
          break;
        }
        v80 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
        v81 = a1[1];
        if (v80 == 3)
        {
          v82 = llvm::MCAsmParser::getTok(v81);
          v83 = *(_QWORD *)(v82 + 16);
          if (*(_DWORD *)v82 != 2)
          {
            v84 = v83 - 1;
            v85 = v83 != 0;
            if (v83 - 1 < v85)
              v84 = 1;
            if (v84 < v83)
              LODWORD(v83) = v84;
            LODWORD(v83) = v83 - v85;
          }
          LODWORD(v86) = v83 + 2;
        }
        else
        {
          v87 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v81 + 40))(v81) + 8);
          v88 = llvm::MCAsmParser::getTok(a1[1]);
          if (v87 == 2)
          {
            v89 = *(_QWORD *)(v88 + 16);
            v90 = v89 - 1;
            v91 = v89 != 0;
            if (v89 - 1 < v91)
              v90 = 1;
            if (v90 >= v89)
              v90 = *(_QWORD *)(v88 + 16);
            v92 = v90 - v91;
            if (*(_DWORD *)v88 == 2)
              v86 = *(_QWORD *)(v88 + 16);
            else
              LODWORD(v86) = v92;
          }
          else
          {
            LODWORD(v86) = *(_DWORD *)(v88 + 16);
          }
        }
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
        v11 = (v22 + v86);
        LODWORD(v22) = v22 + v86;
        v93 = (mlir::Token *)llvm::MCAsmParser::getTok(a1[1]);
      }
      while (v79 + v86 == mlir::Token::getLoc(v93));
    }
    if (!(_DWORD)v22)
    {
LABEL_235:
      v63 = "expected identifier";
      goto LABEL_347;
    }
  }
  v161 = 0uLL;
  v159 = 0;
  v160 = 0;
  v158 = 0;
  v157 = 0;
  v156 = 0;
  *(_QWORD *)v154 = -1;
  v155 = 0;
  if (v11 >= 7)
  {
    v26 = *(_DWORD *)Loc == 1685025326 && *(_DWORD *)((char *)Loc + 3) == 1635017060;
    if (v26 && (v11 < 8 || *((_BYTE *)Loc + 7) == 46))
      goto LABEL_72;
  }
  if (v11 == 5)
  {
    if (memcmp(Loc, ".fini", 5uLL))
    {
      if ((*(_DWORD *)Loc != 1768843566 || *((_BYTE *)Loc + 4) != 116)
        && (*(_DWORD *)Loc != 2019914798 || *((_BYTE *)Loc + 4) != 116))
      {
        goto LABEL_59;
      }
    }
    goto LABEL_58;
  }
  if (v11 != 8)
  {
    if (v11 < 5)
      goto LABEL_59;
    if (*(_DWORD *)Loc != 2019914798 || *((_BYTE *)Loc + 4) != 116)
      goto LABEL_59;
LABEL_57:
    if (*((_BYTE *)Loc + 5) != 46)
      goto LABEL_59;
LABEL_58:
    v31 = 6;
    goto LABEL_73;
  }
  if (*Loc == 0x31617461646F722ELL)
  {
LABEL_72:
    v31 = 2;
    goto LABEL_73;
  }
  if (*(_DWORD *)Loc == 2019914798 && *((_BYTE *)Loc + 4) == 116)
    goto LABEL_57;
LABEL_59:
  if (hasPrefix(Loc, v11, ".data", 5uLL)
    || v11 == 6 && (*(_DWORD *)Loc == 1952539694 ? (v32 = *((unsigned __int16 *)Loc + 2) == 12641) : (v32 = 0), v32)
    || hasPrefix(Loc, v11, ".bss", 4uLL)
    || hasPrefix(Loc, v11, ".init_array", 0xBuLL)
    || hasPrefix(Loc, v11, ".fini_array", 0xBuLL)
    || hasPrefix(Loc, v11, ".preinit_array", 0xEuLL))
  {
    v31 = 3;
  }
  else if (hasPrefix(Loc, v11, ".tdata", 6uLL) || hasPrefix(Loc, v11, ".tbss", 5uLL))
  {
    v31 = 1027;
  }
  else
  {
    v31 = 0;
  }
LABEL_73:
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 26)
    goto LABEL_164;
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
  if (a2 && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 3)
  {
    if ((llvm::MCAsmParser::parseExpression(a1[1], &v156) & 1) != 0)
      return 1;
    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 26)
    {
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
      goto LABEL_76;
    }
LABEL_164:
    LODWORD(v43) = 0;
    v42 = 0;
    goto LABEL_165;
  }
LABEL_76:
  v33 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
  v34 = a1[1];
  if (v33 != 3)
  {
    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v34 + 40))(v34) + 8) == 38)
    {
      v138 = a3;
      if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 38)
        goto LABEL_131;
      v42 = 0;
      while (1)
      {
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
        if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 2)
          goto LABEL_323;
        v44 = llvm::MCAsmParser::getTok(a1[1]);
        if (*(_DWORD *)v44 == 2)
        {
          v45 = *(unsigned __int16 **)(v44 + 8);
          v46 = *(_QWORD *)(v44 + 16);
          if (v46 != 3)
            goto LABEL_95;
        }
        else
        {
          v45 = *(unsigned __int16 **)(v44 + 8);
          v52 = *(_QWORD *)(v44 + 16);
          v53 = v52 - 1;
          v54 = v52 != 0;
          if (v52)
            v45 = (unsigned __int16 *)((char *)v45 + 1);
          if (v53 < v54)
            v53 = 1;
          if (v53 < v52)
            v52 = v53;
          v46 = v52 - v54;
          if (v46 != 3)
          {
LABEL_95:
            if (v46 == 9)
            {
              v58 = *(_QWORD *)v45;
              v59 = *((unsigned __int8 *)v45 + 8);
              if (v58 != 0x74736E6963657865 || v59 != 114)
                goto LABEL_323;
              v51 = 4;
            }
            else
            {
              if (v46 != 5)
                goto LABEL_323;
              if (*(_DWORD *)v45 == 1869376609 && *((_BYTE *)v45 + 4) == 99)
              {
                v51 = 2;
              }
              else
              {
                v48 = *(_DWORD *)v45;
                v49 = *((unsigned __int8 *)v45 + 4);
                if (v48 != 1953067639 || v49 != 101)
                  goto LABEL_323;
                v51 = 1;
              }
            }
            goto LABEL_127;
          }
        }
        v55 = *v45;
        v56 = *((unsigned __int8 *)v45 + 2);
        if (v55 != 27764 || v56 != 115)
          goto LABEL_323;
        v51 = 1024;
LABEL_127:
        v42 |= v51;
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
        if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 26)
        {
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 38)
            continue;
        }
        goto LABEL_88;
      }
    }
    v63 = "expected string";
LABEL_347:
    v162 = (unint64_t)v63;
    v165 = 259;
    return llvm::MCAsmParser::TokError((uint64_t)a1[1], (uint64_t)&v162, 0, 0);
  }
  v138 = a3;
  v35 = llvm::MCAsmParser::getTok(v34);
  v36 = *(_QWORD *)(v35 + 16);
  v37 = v36 != 0;
  if (v36)
    v38 = (unsigned __int8 *)(*(_QWORD *)(v35 + 8) + 1);
  else
    v38 = *(unsigned __int8 **)(v35 + 8);
  if (v36 - 1 < v37)
    v39 = 1;
  else
    v39 = v36 - 1;
  if (v39 >= v36)
    v40 = *(_QWORD *)(v35 + 16);
  else
    v40 = v39;
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
  v41 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 48))(a1[1]);
  v162 = 0;
  if ((llvm::getAsUnsignedInteger(v38, v40 - v37, 0, &v162) & 1) == 0)
  {
    v42 = v162;
    if (!HIDWORD(v162))
    {
LABEL_88:
      LODWORD(v43) = 0;
      goto LABEL_313;
    }
  }
  v61 = v40 - v37;
  if (v40 == v37)
  {
LABEL_131:
    v42 = 0;
    LODWORD(v43) = 0;
    goto LABEL_314;
  }
  v64 = *(_DWORD *)(v41 + 48);
  if (*(_DWORD *)(v41 + 60) != 12)
  {
    if (v64 == 38)
    {
      v75 = 0;
      v42 = 0;
      while (2)
      {
        v43 = 1;
        switch(*v38)
        {
          case '?':
            goto LABEL_208;
          case 'G':
            v42 |= 0x200u;
            goto LABEL_207;
          case 'M':
            v42 |= 0x10u;
            goto LABEL_207;
          case 'R':
            v42 |= 0x200000u;
            goto LABEL_207;
          case 'S':
            v42 |= 0x20u;
            goto LABEL_207;
          case 'T':
            v42 |= 0x400u;
            goto LABEL_207;
          case 'a':
            v42 |= 2u;
            goto LABEL_207;
          case 'e':
            v42 |= 0x80000000;
            goto LABEL_207;
          case 'l':
            v42 |= 0x10000000u;
            goto LABEL_207;
          case 'o':
            v42 |= 0x80u;
            goto LABEL_207;
          case 'w':
            v42 |= 1u;
            goto LABEL_207;
          case 'x':
            v42 |= 4u;
LABEL_207:
            v43 = v75;
LABEL_208:
            ++v38;
            v75 = v43;
            if (!--v61)
              goto LABEL_313;
            continue;
          default:
            goto LABEL_323;
        }
      }
    }
    if (v64 == 12)
    {
      v94 = 0;
      v42 = 0;
      while (2)
      {
        v43 = 1;
        switch(*v38)
        {
          case '?':
            goto LABEL_251;
          case 'G':
            v42 |= 0x200u;
            goto LABEL_250;
          case 'M':
            v42 |= 0x10u;
            goto LABEL_250;
          case 'R':
            v42 |= 0x200000u;
            goto LABEL_250;
          case 'S':
            v42 |= 0x20u;
            goto LABEL_250;
          case 'T':
            v42 |= 0x400u;
            goto LABEL_250;
          case 'a':
            v42 |= 2u;
            goto LABEL_250;
          case 'e':
            v42 |= 0x80000000;
            goto LABEL_250;
          case 'o':
            v42 |= 0x80u;
            goto LABEL_250;
          case 's':
            v42 |= 0x10000000u;
            goto LABEL_250;
          case 'w':
            v42 |= 1u;
            goto LABEL_250;
          case 'x':
            v42 |= 4u;
LABEL_250:
            v43 = v94;
LABEL_251:
            ++v38;
            v94 = v43;
            if (!--v61)
              goto LABEL_313;
            continue;
          default:
            goto LABEL_323;
        }
      }
    }
    v98 = 0;
    v42 = 0;
    while (2)
    {
      v43 = 1;
      switch(*v38)
      {
        case '?':
          goto LABEL_312;
        case 'G':
          v42 |= 0x200u;
          goto LABEL_311;
        case 'M':
          v42 |= 0x10u;
          goto LABEL_311;
        case 'R':
          v42 |= 0x200000u;
          goto LABEL_311;
        case 'S':
          v42 |= 0x20u;
          goto LABEL_311;
        case 'T':
          v42 |= 0x400u;
          goto LABEL_311;
        case 'a':
          v42 |= 2u;
          goto LABEL_311;
        case 'c':
          if (v64 != 39)
            goto LABEL_323;
          goto LABEL_310;
        case 'd':
          if (v64 != 39)
            goto LABEL_323;
          v42 |= 0x10000000u;
          goto LABEL_311;
        case 'e':
          v42 |= 0x80000000;
          goto LABEL_311;
        case 'o':
          v42 |= 0x80u;
          goto LABEL_311;
        case 'w':
          v42 |= 1u;
          goto LABEL_311;
        case 'x':
          v42 |= 4u;
          goto LABEL_311;
        case 'y':
          if (v64 > 0x24 || ((1 << v64) & 0x1800000006) == 0)
            goto LABEL_323;
LABEL_310:
          v42 |= 0x20000000u;
LABEL_311:
          v43 = v98;
LABEL_312:
          ++v38;
          v98 = v43;
          if (!--v61)
            goto LABEL_313;
          continue;
        default:
          goto LABEL_323;
      }
    }
  }
  v65 = 0;
  v42 = 0;
  do
  {
    v43 = 1;
    switch(*v38)
    {
      case '?':
        goto LABEL_160;
      case 'G':
        v42 |= 0x200u;
        break;
      case 'M':
        v42 |= 0x10u;
        break;
      case 'R':
        v42 |= 0x100000u;
        break;
      case 'S':
        v42 |= 0x20u;
        break;
      case 'T':
        v42 |= 0x400u;
        break;
      case 'a':
        v42 |= 2u;
        break;
      case 'c':
        if (v64 != 39)
          goto LABEL_323;
        goto LABEL_158;
      case 'd':
        if (v64 != 39)
          goto LABEL_323;
        goto LABEL_153;
      case 'e':
        v42 |= 0x80000000;
        break;
      case 'l':
        if (v64 != 38)
          goto LABEL_323;
        goto LABEL_153;
      case 'o':
        v42 |= 0x80u;
        break;
      case 's':
        if (v64 != 12)
          goto LABEL_323;
LABEL_153:
        v42 |= 0x10000000u;
        break;
      case 'w':
        v42 |= 1u;
        break;
      case 'x':
        v42 |= 4u;
        break;
      case 'y':
        if (v64 > 0x24 || ((1 << v64) & 0x1800000006) == 0)
          goto LABEL_323;
LABEL_158:
        v42 |= 0x20000000u;
        break;
      default:
        goto LABEL_323;
    }
    v43 = v65;
LABEL_160:
    ++v38;
    v65 = v43;
    --v61;
  }
  while (v61);
LABEL_313:
  if (v42 == -1)
  {
LABEL_323:
    v63 = "unknown flag";
    goto LABEL_347;
  }
LABEL_314:
  if ((v42 & 0x200) != 0 && (_DWORD)v43)
  {
    v63 = "Section cannot specifiy a group name while also acting as a member of the last group";
    goto LABEL_347;
  }
  v99 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]);
  if (**(_DWORD **)(v99 + 8) != 26)
    goto LABEL_333;
  v100 = v99;
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
  v101 = **(_DWORD **)(v100 + 8);
  if (v101 == 3)
    goto LABEL_324;
  if (v101 == 37 || v101 == 46)
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
    if (**(_DWORD **)(v100 + 8) == 4)
    {
      v161 = *(_OWORD *)(llvm::MCAsmParser::getTok(a1[1]) + 8);
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
      goto LABEL_333;
    }
LABEL_324:
    if (!(*(unsigned int (**)(llvm::MCAsmParser *, __int128 *))(*(_QWORD *)a1[1] + 192))(a1[1], &v161))
      goto LABEL_333;
    v102 = "expected identifier";
    goto LABEL_332;
  }
  if (*(_BYTE *)(v100 + 105))
    v102 = "expected '@<type>', '%<type>' or \"<type>\"";
  else
    v102 = "expected '%<type>' or \"<type>\"";
LABEL_332:
  v162 = (unint64_t)v102;
  v165 = 259;
  if ((llvm::MCAsmParser::TokError((uint64_t)a1[1], (uint64_t)&v162, 0, 0) & 1) != 0)
    return 1;
LABEL_333:
  v103 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]);
  if (*((_QWORD *)&v161 + 1))
  {
    a3 = v138;
    if ((v42 & 0x10) != 0
      || (v42 & 0x200) != 0
    {
      return 1;
    }
  }
  else
  {
    a3 = v138;
    if ((v42 & 0x10) != 0)
    {
      v63 = "Mergeable section must specify the type";
      goto LABEL_347;
    }
    if ((v42 & 0x200) != 0)
    {
      v63 = "Group section must specify the type";
      goto LABEL_347;
    }
    if (**(_DWORD **)(v103 + 8) != 9)
      goto LABEL_346;
  }
  if ((v42 & 0x80) != 0
  {
    return 1;
  }
  v31 |= v42;
LABEL_165:
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 9)
  {
LABEL_346:
    v63 = "expected end of directive";
    goto LABEL_347;
  }
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 184))(a1[1]);
  v66 = *((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v67 = (void *)v161;
    switch(*((_QWORD *)&v161 + 1))
    {
      case 4:
        if (!memcmp((const void *)v161, "note", *((size_t *)&v161 + 1)))
          goto LABEL_210;
        goto LABEL_286;
      case 6:
        if (!memcmp((const void *)v161, "nobits", *((size_t *)&v161 + 1)))
          goto LABEL_256;
        if (memcmp(v67, "unwind", v66))
          goto LABEL_286;
        v70 = 1879048193;
        break;
      case 8:
        if (!memcmp((const void *)v161, "progbits", *((size_t *)&v161 + 1)))
        {
          v70 = 1;
        }
        else
        {
          if (!memcmp(v67, "llvm_lto", v66))
          {
            v70 = 1879002124;
            break;
          }
LABEL_286:
          v162 = 0;
          if ((llvm::getAsUnsignedInteger((unsigned __int8 *)v67, v66, 0, &v162) & 1) != 0
            || (v70 = v162, HIDWORD(v162)))
          {
            v63 = "unknown section type";
            goto LABEL_347;
          }
        }
        break;
      case 0xALL:
        if (*(_QWORD *)v161 == 0x7272615F74696E69 && *(_WORD *)(v161 + 8) == 31073)
          goto LABEL_330;
        if (*(_QWORD *)v161 == 0x7272615F696E6966 && *(_WORD *)(v161 + 8) == 31073)
          goto LABEL_269;
        goto LABEL_286;
      case 0xBLL:
        if (memcmp((const void *)v161, "llvm_odrtab", *((size_t *)&v161 + 1)))
          goto LABEL_286;
        v70 = 1879002112;
        break;
      case 0xCLL:
        if (memcmp((const void *)v161, "llvm_sympart", *((size_t *)&v161 + 1)))
          goto LABEL_286;
        v97 = 5;
        goto LABEL_284;
      case 0xDLL:
        if (memcmp((const void *)v161, "preinit_array", *((size_t *)&v161 + 1)))
          goto LABEL_286;
        v70 = 16;
        break;
      case 0xFLL:
        if (memcmp((const void *)v161, "llvm_offloading", *((size_t *)&v161 + 1)))
          goto LABEL_286;
        v97 = 11;
        goto LABEL_284;
      case 0x10:
        if (memcmp((const void *)v161, "llvm_bb_addr_map", *((size_t *)&v161 + 1)))
          goto LABEL_286;
        v97 = 10;
        goto LABEL_284;
      case 0x13:
        if (memcmp((const void *)v161, "llvm_linker_options", *((size_t *)&v161 + 1)))
          goto LABEL_286;
        v70 = 1879002113;
        break;
      case 0x17:
        if (memcmp((const void *)v161, "llvm_call_graph_profile", *((size_t *)&v161 + 1)))
          goto LABEL_286;
        v97 = 9;
LABEL_284:
        v70 = v97 | 0x6FFF4C00;
        break;
      case 0x18:
        if (memcmp((const void *)v161, "llvm_dependent_libraries", *((size_t *)&v161 + 1)))
          goto LABEL_286;
        v70 = 1879002116;
        break;
      default:
        goto LABEL_286;
    }
  }
  else
  {
    if (v11 >= 5)
    {
      if (*(_DWORD *)Loc == 1953459758 && *((_BYTE *)Loc + 4) == 101)
      {
LABEL_210:
        v70 = 7;
        goto LABEL_353;
      }
      if (v11 >= 0xB)
      {
        v69 = *Loc == 0x72615F74696E692ELL && *(uint64_t *)((char *)Loc + 3) == 0x79617272615F7469;
        if (v69 && (v11 < 0xC || *((_BYTE *)Loc + 11) == 46))
        {
LABEL_330:
          v70 = 14;
          goto LABEL_353;
        }
      }
    }
    if (hasPrefix(Loc, v11, ".bss", 4uLL) || hasPrefix(Loc, v11, ".tbss", 5uLL))
    {
LABEL_256:
      v70 = 8;
    }
    else if (hasPrefix(Loc, v11, ".fini_array", 0xBuLL))
    {
LABEL_269:
      v70 = 15;
    }
    else if (hasPrefix(Loc, v11, ".preinit_array", 0xEuLL))
    {
      v70 = 16;
    }
    else
    {
      v70 = 1;
    }
  }
LABEL_353:
  if ((_DWORD)v43)
  {
    v104 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 56))(a1[1]);
    v105 = *(unsigned int *)(v104 + 152);
    if ((_DWORD)v105)
    {
      v106 = *(_QWORD *)(*(_QWORD *)(v104 + 144) + 32 * v105 - 32);
      if (v106)
      {
        v107 = *(_QWORD *)(v106 + 240);
        v108 = v107 & 0xFFFFFFFFFFFFFFF8;
        if ((v107 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if ((*(_BYTE *)(v108 + 8) & 1) != 0)
          {
            v111 = *(uint64_t **)(v108 - 8);
            v112 = *v111;
            v109 = v111 + 2;
            v110 = v112;
          }
          else
          {
            v109 = 0;
            v110 = 0;
          }
          v158 = (uint64_t)v109;
          v159 = v110;
          v157 = (v107 & 4) != 0;
          v31 |= 0x200u;
        }
      }
    }
  }
  v113 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 48))(a1[1]);
  v165 = 261;
  v162 = (unint64_t)Loc;
  v163 = v11;
  v153 = 261;
  v150 = (uint64_t *)v158;
  v151 = v159;
  ELFSection = llvm::MCContext::getELFSection(v113, (const llvm::Twine *)&v162, v70, v31, v160, (const llvm::Twine *)&v150, v157, v154[0], v155);
  v115 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 56))(a1[1]);
  (*(void (**)(uint64_t, unint64_t, llvm::MCExpr *))(*(_QWORD *)v115 + 168))(v115, ELFSection, v156);
  if (*((_QWORD *)&v161 + 1) && *(_DWORD *)(ELFSection + 224) != v70)
  {
    v116 = *(_DWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 48))(a1[1]) + 48);
    if (v116 == 38)
    {
      if (v11 != 9)
        goto LABEL_383;
      v117 = *Loc == 0x6D6172665F68652ELL && *((_BYTE *)Loc + 8) == 101;
      v118 = !v117;
      if (v70 != 1)
        goto LABEL_383;
    }
    else if (v11 < 7
           || (v116 & 0xFFFFFFFC) != 0x10
           || (*(_DWORD *)Loc == 1650811950 ? (v119 = *(_DWORD *)((char *)Loc + 3) == 1600615778) : (v119 = 0),
               v119 ? (v118 = 0) : (v118 = 1),
               v70 != 1))
    {
LABEL_383:
      v149 = 1283;
      v146[0] = (uint64_t)"changed section type for ";
      v147 = Loc;
      v148 = v11;
      __dst[0] = ", expected: 0x";
      v145 = 259;
      llvm::operator+(v146, (uint64_t *)__dst, (uint64_t)&v150);
      llvm::utohexstr(*(unsigned int *)(ELFSection + 224), 0, 0, __p);
      v142 = 260;
      *(_QWORD *)&v141 = __p;
      llvm::operator+((uint64_t *)&v150, (uint64_t *)&v141, (uint64_t)&v162);
      llvm::MCAsmParser::Error((uint64_t)a1[1], a3, (uint64_t)&v162, 0, 0);
      if (v140 < 0)
        operator delete(__p[0]);
      goto LABEL_385;
    }
    if (!v118)
      goto LABEL_385;
    goto LABEL_383;
  }
LABEL_385:
  v120 = v160;
  v121 = *((_QWORD *)&v161 + 1);
  if (v42 || v160 || *((_QWORD *)&v161 + 1))
  {
    v122 = *(unsigned int *)(ELFSection + 228);
    if ((_DWORD)v122 != v31)
    {
      v123 = a3;
      v149 = 1283;
      v146[0] = (uint64_t)"changed section flags for ";
      v147 = Loc;
      v148 = v11;
      v150 = v146;
      v152 = ", expected: 0x";
      v153 = 770;
      if ((_DWORD)v122)
      {
        v124 = 16;
        do
        {
          v125 = v124;
          *((_BYTE *)&v162 + v124--) = llvm::hexdigit(unsigned int,BOOL)::LUT[v122 & 0xF];
          v126 = v122 > 0xF;
          v122 >>= 4;
        }
        while (v126);
      }
      else
      {
        LOBYTE(v164) = 48;
        v125 = 16;
      }
      v127 = 17 - v125;
      if ((unint64_t)(17 - v125) >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v127 > 0x16)
      {
        v129 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v127 | 7) != 0x17)
          v129 = v127 | 7;
        v130 = v129 + 1;
        v128 = (void **)operator new(v129 + 1);
        __dst[1] = (void *)(17 - v125);
        v144 = v130 | 0x8000000000000000;
        __dst[0] = v128;
      }
      else
      {
        HIBYTE(v144) = 17 - v125;
        v128 = __dst;
      }
      if (v125 != 17)
      {
        memcpy(v128, (char *)&v162 + v125, 17 - v125);
        v128 = (void **)((char *)v128 + v127);
      }
      a3 = v123;
      *(_BYTE *)v128 = 0;
      v131 = v153;
      if (v153 == 1)
      {
        v162 = (unint64_t)__dst;
        v164 = v141;
        v165 = 260;
        v166 = (int)__p[0];
        v167 = WORD2(__p[0]);
      }
      else if ((_BYTE)v153)
      {
        if (HIBYTE(v153) != 1)
          v131 = 2;
        v132 = (uint64_t *)&v150;
        if (HIBYTE(v153) == 1)
          v132 = v150;
        v162 = (unint64_t)v132;
        v163 = v151;
        *(_QWORD *)&v164 = __dst;
        LOBYTE(v165) = v131;
        HIBYTE(v165) = 4;
      }
      else
      {
        v165 = 256;
      }
      llvm::MCAsmParser::Error((uint64_t)a1[1], v123, (uint64_t)&v162, 0, 0);
      if (SHIBYTE(v144) < 0)
        operator delete(__dst[0]);
      v120 = v160;
      v121 = *((_QWORD *)&v161 + 1);
    }
  }
  else
  {
    v120 = 0;
  }
  if (v42 || v120 || v121)
  {
    v133 = *(unsigned int *)(ELFSection + 236);
    if (v120 != v133)
    {
      v149 = 1283;
      v146[0] = (uint64_t)"changed section entsize for ";
      v147 = Loc;
      v148 = v11;
      v150 = v146;
      v152 = ", expected: ";
      v153 = 770;
      v162 = (unint64_t)&v150;
      *(_QWORD *)&v164 = v133;
      v165 = 2306;
      llvm::MCAsmParser::Error((uint64_t)a1[1], a3, (uint64_t)&v162, 0, 0);
    }
  }
  if (!*(_BYTE *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 48))(a1[1]) + 1593)
    || (~*(_DWORD *)(ELFSection + 228) & 6) != 0)
  {
    return 0;
  }
  v134 = (int64x2_t *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 48))(a1[1]);
  result = llvm::MCContext::addGenDwarfSection(v134, (llvm::MCSection *)ELFSection);
  if ((_DWORD)result)
  {
    if (*(unsigned __int16 *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 48))(a1[1]) + 1696) <= 2u)
    {
      v162 = (unint64_t)"DWARF2 only supports one section per compilation unit";
      v165 = 259;
      (*(void (**)(llvm::MCAsmParser *, uint64_t, unint64_t *, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 168))(a1[1], a3, &v162, 0, 0);
    }
    if (!*(_QWORD *)(ELFSection + 8))
    {
      v135 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 48))(a1[1]);
      TempSymbol = llvm::MCContext::createTempSymbol(v135);
      v137 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 56))(a1[1]);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v137 + 192))(v137, TempSymbol, 0);
      result = 0;
      *(_QWORD *)(ELFSection + 8) = TempSymbol;
      return result;
    }
    return 0;
  }
  return result;
}

BOOL hasPrefix(const void *a1, size_t a2, const void *a3, size_t a4)
{
  if (a2 < a4)
    return 0;
  if (a4 && memcmp(a1, a3, a4))
    return 0;
  if (a2 <= a4)
    return 1;
  return *((_BYTE *)a1 + a4) == 46;
}

uint64_t `anonymous namespace'::ELFAsmParser::parseMergeSize(_anonymous_namespace_::ELFAsmParser *this, uint64_t *a2)
{
  const char *v5;
  const char *v6;
  __int16 v7;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) != 26)
  {
    v5 = "expected the entry size";
LABEL_5:
    v6 = v5;
    v7 = 259;
    return llvm::MCAsmParser::TokError(*((_QWORD *)this + 1), (uint64_t)&v6, 0, 0);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), a2) & 1) != 0)
    return 1;
  if (*a2 <= 0)
  {
    v5 = "entry size must be positive";
    goto LABEL_5;
  }
  return 0;
}

uint64_t `anonymous namespace'::ELFAsmParser::parseGroup(_anonymous_namespace_::ELFAsmParser *this, llvm::StringRef *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::MCAsmParser *v8;
  const char *v9;
  uint64_t result;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  __int16 v15;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (**(_DWORD **)(v6 + 8) != 26)
  {
    v9 = "expected group name";
LABEL_5:
    v14 = v9;
    v15 = 259;
    return llvm::MCAsmParser::TokError(*((_QWORD *)this + 1), (uint64_t)&v14, 0, 0);
  }
  v7 = v6;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  v8 = (llvm::MCAsmParser *)*((_QWORD *)this + 1);
  if (**(_DWORD **)(v7 + 8) == 4)
  {
    *(_OWORD *)a2 = *(_OWORD *)(llvm::MCAsmParser::getTok(v8) + 8);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    goto LABEL_8;
  }
  if ((*(unsigned int (**)(llvm::MCAsmParser *, llvm::StringRef *))(*(_QWORD *)v8 + 192))(v8, a2))
  {
    v9 = "invalid group name";
    goto LABEL_5;
  }
LABEL_8:
  if (**(_DWORD **)(v7 + 8) == 26)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    v12 = 0;
    v13 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), &v12))
    {
      v9 = "invalid linkage";
      goto LABEL_5;
    }
    if (v13 != 6 || (*(_DWORD *)v12 == 1684893539 ? (v11 = *(unsigned __int16 *)(v12 + 4) == 29793) : (v11 = 0), !v11))
    {
      v9 = "Linkage must be 'comdat'";
      goto LABEL_5;
    }
    result = 0;
    *a3 = 1;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t `anonymous namespace'::ELFAsmParser::parseLinkedToSym(_anonymous_namespace_::ELFAsmParser *this, llvm::MCSymbolELF **a2)
{
  uint64_t v4;
  llvm::MCAsmLexer *v5;
  uint64_t Loc;
  int v7;
  llvm::MCAsmParser *v8;
  uint64_t Tok;
  uint64_t result;
  const char *v11;
  llvm::MCContext *v12;
  llvm::MCSymbolELF *v13;
  llvm::MCSymbolELF *v14;
  void *AssociatedFragment;
  const char *v16;
  const char *v17;
  const char *v18[4];
  __int16 v19;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (**(_DWORD **)(v4 + 8) != 26)
  {
    v11 = "expected linked-to symbol";
LABEL_13:
    v18[0] = v11;
    v19 = 259;
    return llvm::MCAsmParser::TokError(*((_QWORD *)this + 1), (uint64_t)v18, 0, 0);
  }
  v5 = (llvm::MCAsmLexer *)v4;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  v16 = 0;
  v17 = 0;
  Loc = llvm::MCAsmLexer::getLoc(v5);
  v7 = (*(uint64_t (**)(_QWORD, const char **))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), &v16);
  v8 = (llvm::MCAsmParser *)*((_QWORD *)this + 1);
  if (v7)
  {
    Tok = llvm::MCAsmParser::getTok(v8);
    if (*(_QWORD *)(Tok + 16) == 1 && **(_BYTE **)(Tok + 8) == 48)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
      result = 0;
      *a2 = 0;
      return result;
    }
    v11 = "invalid linked-to symbol";
    goto LABEL_13;
  }
  v12 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v8 + 48))(v8);
  v19 = 261;
  v18[0] = v16;
  v18[1] = v17;
  v13 = (llvm::MCSymbolELF *)llvm::MCContext::lookupSymbol(v12, v18);
  if (v13 && (v14 = v13, (*((_DWORD *)v13 + 2) & 0x700) == 0x200))
  {
    *a2 = v13;
    AssociatedFragment = *(void **)v13;
    if (*(_QWORD *)v14
      || (*((_DWORD *)v14 + 2) & 0x7080) == 0x2000
      && (*((_DWORD *)v14 + 2) |= 8u,
          AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v14 + 3)),
          (*(_QWORD *)v14 = AssociatedFragment) != 0))
    {
      if (AssociatedFragment != llvm::MCSymbol::AbsolutePseudoFragment)
        return 0;
    }
  }
  else
  {
    *a2 = 0;
  }
  v19 = 1283;
  v18[0] = "linked-to symbol is not in a section: ";
  v18[2] = v16;
  v18[3] = v17;
  return llvm::MCAsmParser::Error(*((_QWORD *)this + 1), Loc, (uint64_t)v18, 0, 0);
}

uint64_t `anonymous namespace'::ELFAsmParser::maybeParseUniqueID(_anonymous_namespace_::ELFAsmParser *this, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (**(_DWORD **)(v4 + 8) == 26)
  {
    v5 = v4;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    v11 = 0;
    v12 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), &v11))
    {
      v6 = "expected identifier";
LABEL_10:
      v9 = v6;
      v10 = 259;
      return llvm::MCAsmParser::TokError(*((_QWORD *)this + 1), (uint64_t)&v9, 0, 0);
    }
    if (v12 != 6 || (*(_DWORD *)v11 == 1902734965 ? (v7 = *(unsigned __int16 *)(v11 + 4) == 25973) : (v7 = 0), !v7))
    {
      v6 = "expected 'unique'";
      goto LABEL_10;
    }
    if (**(_DWORD **)(v5 + 8) != 26)
    {
      v6 = "expected commma";
      goto LABEL_10;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    if (((*(uint64_t (**)(_QWORD, unint64_t *))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), a2) & 1) != 0)return 1;
    if ((*a2 & 0x8000000000000000) != 0)
    {
      v6 = "unique id must be positive";
      goto LABEL_10;
    }
    if (*a2 >= 0xFFFFFFFF)
    {
      v6 = "unique id is too large";
      goto LABEL_10;
    }
  }
  return 0;
}

BOOL llvm::MCContext::addGenDwarfSection(int64x2_t *this, llvm::MCSection *a2)
{
  int v3;
  llvm::MCSection *v4;
  uint64_t v5;
  llvm::MCSection *v7;
  _BYTE v8[16];
  unsigned __int8 v9;

  v7 = a2;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(this + 100, (uint64_t *)&v7, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v5 = this[102].u32[0];
    if (v5 >= this[102].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&this[101].i64[1], &this[102].u64[1], v5 + 1, 8);
      LODWORD(v5) = this[102].i32[0];
    }
    *(_QWORD *)(this[101].i64[1] + 8 * v5) = v4;
    ++this[102].i32[0];
  }
  return v3 != 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectivePushSection>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v7 = v6 + 144;
  v8 = *(_QWORD *)(v6 + 144);
  v9 = *(unsigned int *)(v6 + 152);
  if ((_DWORD)v9)
  {
    v10 = v8 + 32 * v9;
    v11 = *(_OWORD *)(v10 - 16);
    v12 = *(unsigned int *)(v6 + 152);
    v26 = *(_OWORD *)(v10 - 32);
    v27 = v11;
    v13 = (char *)&v26;
    if (v9 < *(_DWORD *)(v6 + 156))
      goto LABEL_5;
  }
  else
  {
    v12 = 0;
    v26 = 0u;
    v27 = 0u;
    v13 = (char *)&v26;
    if (*(_DWORD *)(v6 + 156))
      goto LABEL_5;
  }
  v24 = v12 + 1;
  if (v8 <= (unint64_t)&v26 && v8 + 32 * v12 > (unint64_t)&v26)
  {
    v25 = (char *)&v26 - v8;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v6 + 160), v24, 32);
    v8 = *(_QWORD *)(v6 + 144);
    v13 = &v25[v8];
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v6 + 160), v24, 32);
    v8 = *(_QWORD *)(v6 + 144);
    v13 = (char *)&v26;
  }
LABEL_5:
  v14 = (_OWORD *)(v8 + 32 * *(unsigned int *)(v6 + 152));
  v15 = *((_OWORD *)v13 + 1);
  *v14 = *(_OWORD *)v13;
  v14[1] = v15;
  ++*(_DWORD *)(v6 + 152);
  if ((_DWORD)v16)
  {
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v18 = *(unsigned int *)(v17 + 152);
    if (v18 >= 2)
    {
      v19 = v17;
      v20 = *(_QWORD *)(v17 + 144) + 32 * v18;
      v21 = *(_QWORD *)(v20 - 64);
      if (v21)
      {
        if (*(_QWORD *)(v20 - 32) != v21 || *(_QWORD *)(v20 - 24) != *(_QWORD *)(v20 - 56))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 160))(v17);
          LODWORD(v18) = *(_DWORD *)(v19 + 152);
        }
      }
      *(_DWORD *)(v19 + 152) = v18 - 1;
    }
  }
  return v16;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectivePopSection>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  const char *v9;
  __int16 v10;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = *(unsigned int *)(v2 + 152);
  if (v3 < 2)
  {
    v9 = ".popsection without corresponding .pushsection";
    v10 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v9, 0, 0);
  }
  else
  {
    v4 = v2;
    v5 = *(_QWORD *)(v2 + 144) + 32 * v3;
    v6 = *(_QWORD *)(v5 - 64);
    if (v6)
    {
      if (*(_QWORD *)(v5 - 32) != v6 || *(_QWORD *)(v5 - 24) != *(_QWORD *)(v5 - 56))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
        LODWORD(v3) = *(_DWORD *)(v4 + 152);
      }
    }
    result = 0;
    *(_DWORD *)(v4 + 152) = v3 - 1;
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSize>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  uint64_t Symbol;
  uint64_t v6;
  const llvm::MCExpr *v7;
  const char *v8[4];
  __int16 v9;
  const char *v10;
  const char *v11;

  v10 = 0;
  v11 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v10))
  {
    v2 = "expected identifier";
  }
  else
  {
    v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v9 = 261;
    v8[0] = v10;
    v8[1] = v11;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, v8);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 26)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v7 = 0;
      if ((llvm::MCAsmParser::parseExpression(*(llvm::MCAsmParser **)(a1 + 8), &v7) & 1) != 0)
        return 1;
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
        (*(void (**)(uint64_t, uint64_t, const llvm::MCExpr *))(*(_QWORD *)v6 + 432))(v6, Symbol, v7);
        return 0;
      }
      v2 = "unexpected token";
    }
    else
    {
      v2 = "expected comma";
    }
  }
  v8[0] = v2;
  v9 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v8, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectivePrevious>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  __int16 v10;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = *(unsigned int *)(v2 + 152);
  if ((_DWORD)v3 && (v4 = *(_QWORD *)(v2 + 144) + 32 * v3, (v5 = *(_QWORD *)(v4 - 16)) != 0))
  {
    v6 = *(_QWORD *)(v4 - 8);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, v5, v6);
    return 0;
  }
  else
  {
    v9 = ".previous without corresponding .section";
    v10 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v9, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveType>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  uint64_t Symbol;
  llvm::MCAsmLexer *v5;
  uint64_t Loc;
  uint64_t v12;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25[4];
  __int16 v26;
  const char *v27;
  const char *v28;

  v27 = 0;
  v28 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v27))
  {
    v2 = "expected identifier";
  }
  else
  {
    v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v26 = 261;
    v25[0] = v27;
    v25[1] = v28;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, v25);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 26)
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 38
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 37
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
    {
      if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105))
      {
        v2 = "expected STT_<TYPE_IN_UPPER_CASE>, '#<type>', '%<type>' or \"<type>\"";
        goto LABEL_16;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 46)
      {
        v2 = "expected STT_<TYPE_IN_UPPER_CASE>, '#<type>', '@<type>', '%<type>' or \"<type>\"";
        goto LABEL_16;
      }
    }
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    }
    v5 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
    Loc = llvm::MCAsmLexer::getLoc(v5);
    v23 = 0;
    v24 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v23))
    {
      v2 = "expected symbol type";
    }
    else
    {
      switch(v24)
      {
        case 6:
          if (*(_DWORD *)v23 == 1701470831 && *(_WORD *)(v23 + 4) == 29795)
            goto LABEL_82;
          if (*(_DWORD *)v23 == 1835888483 && *(_WORD *)(v23 + 4) == 28271)
            goto LABEL_86;
          if (*(_DWORD *)v23 == 2037673838 && *(_WORD *)(v23 + 4) == 25968)
            goto LABEL_58;
          goto LABEL_81;
        case 7:
          if (*(_DWORD *)v23 != 1599362131 || *(_DWORD *)(v23 + 3) != 1397511263)
            goto LABEL_81;
          goto LABEL_84;
        case 8:
          if (*(_QWORD *)v23 != 0x434E55465F545453 && *(_QWORD *)v23 != 0x6E6F6974636E7566)
            goto LABEL_81;
          v12 = 2;
          goto LABEL_87;
        case 10:
          if (*(_QWORD *)v23 == 0x454A424F5F545453 && *(_WORD *)(v23 + 8) == 21571)
          {
LABEL_82:
            v12 = 4;
          }
          else if (*(_QWORD *)v23 == 0x656A626F5F736C74 && *(_WORD *)(v23 + 8) == 29795)
          {
LABEL_84:
            v12 = 5;
          }
          else if (*(_QWORD *)v23 == 0x4D4D4F435F545453 && *(_WORD *)(v23 + 8) == 20047)
          {
LABEL_86:
            v12 = 6;
          }
          else
          {
            if (*(_QWORD *)v23 != 0x59544F4E5F545453 || *(_WORD *)(v23 + 8) != 17744)
            {
LABEL_81:
              v25[0] = "unsupported attribute";
              v26 = 259;
              return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), Loc, (uint64_t)v25, 0, 0);
            }
LABEL_58:
            v12 = 7;
          }
LABEL_87:
          if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
            v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 296))(v22, Symbol, v12);
            return 0;
          }
          v2 = "expected end of directive";
          break;
        case 13:
          if (*(_QWORD *)v23 != 0x5F554E475F545453 || *(_QWORD *)(v23 + 5) != 0x434E5546495F554ELL)
            goto LABEL_81;
          goto LABEL_83;
        case 17:
          if (*(_QWORD *)v23 != 0x71696E755F756E67
            || *(_QWORD *)(v23 + 8) != 0x63656A626F5F6575
            || *(_BYTE *)(v23 + 16) != 116)
          {
            goto LABEL_81;
          }
          v12 = 8;
          goto LABEL_87;
        case 21:
          if (*(_QWORD *)v23 != 0x69646E695F756E67
            || *(_QWORD *)(v23 + 8) != 0x6E75665F74636572
            || *(_QWORD *)(v23 + 13) != 0x6E6F6974636E7566)
          {
            goto LABEL_81;
          }
LABEL_83:
          v12 = 3;
          goto LABEL_87;
        default:
          goto LABEL_81;
      }
    }
  }
LABEL_16:
  v25[0] = v2;
  v26 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v25, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveIdent>(uint64_t a1)
{
  uint64_t Tok;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v11;
  __int16 v12;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 3)
  {
    Tok = llvm::MCAsmParser::getTok(*(llvm::MCAsmParser **)(a1 + 8));
    if (*(_DWORD *)Tok == 2)
    {
      v3 = *(_QWORD *)(Tok + 8);
      v4 = *(_QWORD *)(Tok + 16);
    }
    else
    {
      v6 = *(_QWORD *)(Tok + 16);
      v7 = v6 != 0;
      if (v6)
        v3 = *(_QWORD *)(Tok + 8) + 1;
      else
        v3 = *(_QWORD *)(Tok + 8);
      if (v6 - 1 < v7)
        v8 = 1;
      else
        v8 = v6 - 1;
      if (v8 < v6)
        v6 = v8;
      v4 = v6 - v7;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 680))(v9, v3, v4);
      return 0;
    }
    v5 = "expected end of directive";
  }
  else
  {
    v5 = "expected string";
  }
  v11 = v5;
  v12 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v11, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSymver>(uint64_t a1)
{
  char v2;
  const char *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BOOL8 v6;
  BOOL v7;
  uint64_t v9;
  llvm::MCContext *v10;
  uint64_t Symbol;
  const char *v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  void *__s;
  size_t __n;
  const char *v18;
  const char *v19;

  v18 = 0;
  v19 = 0;
  __s = 0;
  __n = 0;
  v14 = 0;
  v15 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v18))
  {
    goto LABEL_4;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
  {
    v3 = "expected a comma";
    goto LABEL_18;
  }
  v2 = *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105);
  *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105) = 1;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105) = v2;
  if ((*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &__s))
  {
LABEL_4:
    v3 = "expected identifier";
LABEL_18:
    v12[0] = v3;
    v13 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v12, 0, 0);
  }
  if (!__n || (v4 = __s, (v5 = memchr(__s, 64, __n)) == 0) || v5 - v4 == -1)
  {
    v3 = "expected a '@' in the name";
    goto LABEL_18;
  }
  v6 = llvm::StringRef::find((uint64_t *)&__s, "@@@", 3uLL, 0) == -1;
  if (llvm::MCAsmParser::parseOptionalToken(*(llvm::MCAsmParser **)(a1 + 8), 26))
  {
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v14) & 1) != 0
      || v15 != 6
      || (*(_DWORD *)v14 == 1869440370 ? (v7 = *(unsigned __int16 *)(v14 + 4) == 25974) : (v7 = 0), !v7))
    {
      v3 = "expected 'remove'";
      goto LABEL_18;
    }
    v6 = 0;
  }
  llvm::MCAsmParser::parseOptionalToken(*(llvm::MCAsmParser **)(a1 + 8), 9);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v10 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v13 = 261;
  v12[0] = v18;
  v12[1] = v19;
  Symbol = llvm::MCContext::getOrCreateSymbol(v10, v12);
  (*(void (**)(uint64_t, uint64_t, void *, size_t, _BOOL8))(*(_QWORD *)v9 + 440))(v9, Symbol, __s, __n, v6);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveVersion>(uint64_t a1)
{
  uint64_t Tok;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  llvm::MCContext *v9;
  unint64_t ELFSection;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  const char *v34;
  __int16 v35;
  __int128 v36;
  __int128 v37;
  __int16 v38;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
    *(_QWORD *)&v36 = "expected string";
    v38 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v36, 0, 0);
  }
  Tok = llvm::MCAsmParser::getTok(*(llvm::MCAsmParser **)(a1 + 8));
  if (*(_DWORD *)Tok == 2)
  {
    v3 = *(_QWORD *)(Tok + 8);
    v4 = *(_QWORD *)(Tok + 16);
  }
  else
  {
    v6 = *(_QWORD *)(Tok + 16);
    v7 = v6 != 0;
    if (v6)
      v3 = *(_QWORD *)(Tok + 8) + 1;
    else
      v3 = *(_QWORD *)(Tok + 8);
    if (v6 - 1 < v7)
      v8 = 1;
    else
      v8 = v6 - 1;
    if (v8 < v6)
      v6 = v8;
    v4 = v6 - v7;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v9 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v34 = ".note";
  v35 = 259;
  v38 = 257;
  ELFSection = llvm::MCContext::getELFSection(v9, (const llvm::Twine *)&v34, 7, 0, 0, (const llvm::Twine *)&v36, 0, -1, 0);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v12 = v11 + 144;
  v13 = *(_QWORD *)(v11 + 144);
  v14 = *(unsigned int *)(v11 + 152);
  if ((_DWORD)v14)
  {
    v15 = v13 + 32 * v14;
    v16 = *(_OWORD *)(v15 - 16);
    v17 = *(unsigned int *)(v11 + 152);
    v36 = *(_OWORD *)(v15 - 32);
    v37 = v16;
    v18 = (char *)&v36;
    if (v14 < *(_DWORD *)(v11 + 156))
      goto LABEL_19;
  }
  else
  {
    v17 = 0;
    v36 = 0u;
    v37 = 0u;
    v18 = (char *)&v36;
    if (*(_DWORD *)(v11 + 156))
      goto LABEL_19;
  }
  v32 = v17 + 1;
  if (v13 <= (unint64_t)&v36 && v13 + 32 * v17 > (unint64_t)&v36)
  {
    v33 = (char *)&v36 - v13;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v12, (void *)(v11 + 160), v32, 32);
    v13 = *(_QWORD *)(v11 + 144);
    v18 = &v33[v13];
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v12, (void *)(v11 + 160), v32, 32);
    v13 = *(_QWORD *)(v11 + 144);
    v18 = (char *)&v36;
  }
LABEL_19:
  v19 = (_OWORD *)(v13 + 32 * *(unsigned int *)(v11 + 152));
  v20 = *((_OWORD *)v18 + 1);
  *v19 = *(_OWORD *)v18;
  v19[1] = v20;
  ++*(_DWORD *)(v11 + 152);
  v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v21 + 168))(v21, ELFSection, 0);
  v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v22 + 520))(v22, v4 + 1, 4);
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v23 + 520))(v23, 0, 4);
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 520))(v24, 1, 4);
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v25 + 496))(v25, v3, v4);
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 520))(v26, 0, 1);
  v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v27 + 640))(v27, 2, 0, 1, 0);
  v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  result = 0;
  v29 = *(unsigned int *)(v28 + 152);
  if (v29 >= 2)
  {
    v30 = *(_QWORD *)(v28 + 144) + 32 * v29;
    v31 = *(_QWORD *)(v30 - 64);
    if (v31 && (*(_QWORD *)(v30 - 32) != v31 || *(_QWORD *)(v30 - 24) != *(_QWORD *)(v30 - 56)))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 160))(v28);
      LODWORD(v29) = *(_DWORD *)(v28 + 152);
    }
    result = 0;
    *(_DWORD *)(v28 + 152) = v29 - 1;
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveWeakref>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  uint64_t v4;
  llvm::MCContext *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  if (!(*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v14))
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
    {
      v2 = "expected a comma";
      goto LABEL_7;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v9 = 0;
    v10 = 0;
    if (!(*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v9))
    {
      v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v13 = 261;
      v11 = v14;
      v12 = v15;
      v4 = llvm::MCContext::getOrCreateSymbol(v3, &v11);
      v5 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v13 = 261;
      v11 = v9;
      v12 = v10;
      v6 = llvm::MCContext::getOrCreateSymbol(v5, &v11);
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 288))(v7, v4, v6);
      return 0;
    }
  }
  v2 = "expected identifier";
LABEL_7:
  v11 = v2;
  v13 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v11, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSymbolAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const char *v11;
  int v12;
  uint64_t v13;
  llvm::MCContext *v14;
  uint64_t Symbol;
  uint64_t v16;
  const char *v17[4];
  __int16 v18;
  const char *v19;
  const char *v20;

  switch(a3)
  {
    case 5:
      if (*(_DWORD *)a2 != 1634039598 || *(_BYTE *)(a2 + 4) != 107)
        goto LABEL_30;
      v5 = 24;
      break;
    case 6:
      if (*(_DWORD *)a2 != 1668246574 || *(_WORD *)(a2 + 4) != 27745)
        goto LABEL_30;
      v5 = 17;
      break;
    case 7:
      if (*(_DWORD *)a2 != 1684629550 || *(_DWORD *)(a2 + 3) != 1852138596)
        goto LABEL_30;
      v5 = 12;
      break;
    case 9:
      if (*(_QWORD *)a2 != 0x616E7265746E692ELL || *(_BYTE *)(a2 + 8) != 108)
        goto LABEL_30;
      v5 = 15;
      break;
    case 10:
      if (*(_QWORD *)a2 != 0x746365746F72702ELL || *(_WORD *)(a2 + 8) != 25701)
        goto LABEL_30;
      v5 = 22;
      break;
    default:
LABEL_30:
      v5 = 0;
      break;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
LABEL_32:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v19 = 0;
  v20 = 0;
  if (((*(uint64_t (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v19) & 1) != 0)
  {
LABEL_34:
    v11 = "expected identifier";
    goto LABEL_35;
  }
  while (1)
  {
    v12 = (*(uint64_t (**)(_QWORD, const char *, const char *))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), v19, v20);
    v13 = **(_QWORD **)(a1 + 8);
    if (v12)
    {
      if (**(_DWORD **)((*(uint64_t (**)(void))(v13 + 40))() + 8) == 9)
        goto LABEL_32;
      goto LABEL_38;
    }
    v14 = (llvm::MCContext *)(*(uint64_t (**)(void))(v13 + 48))();
    v18 = 261;
    v17[0] = v19;
    v17[1] = v20;
    Symbol = llvm::MCContext::getOrCreateSymbol(v14, v17);
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 296))(v16, Symbol, v5);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      goto LABEL_32;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
      break;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
LABEL_38:
    v19 = 0;
    v20 = 0;
    if (((*(uint64_t (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v19) & 1) != 0)
      goto LABEL_34;
  }
  v11 = "expected comma";
LABEL_35:
  v17[0] = v11;
  v18 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v17, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSubsection>(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  __int16 v6;
  llvm::MCExpr *v7;

  v7 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9
    && (llvm::MCAsmParser::parseExpression(*(llvm::MCAsmParser **)(a1 + 8), &v7) & 1) != 0)
  {
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v4 = *(unsigned int *)(v3 + 152);
    if ((_DWORD)v4)
      (*(void (**)(uint64_t, _QWORD, llvm::MCExpr *))(*(_QWORD *)v3 + 168))(v3, *(_QWORD *)(*(_QWORD *)(v3 + 144) + 32 * v4 - 32), v7);
    return 0;
  }
  else
  {
    v5 = "expected end of directive";
    v6 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v5, 0, 0);
  }
}

double llvm::MCAsmLexer::MCAsmLexer(llvm::MCAsmLexer *this)
{
  double result;

  *((_DWORD *)this + 6) = 11;
  *(_QWORD *)this = &unk_1E0E1F998;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 16777217;
  *((_BYTE *)this + 112) = 0;
  *((_DWORD *)this + 29) = 10;
  *((_WORD *)this + 60) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 14) = 64;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)&result = 0x100000001;
  *((_QWORD *)this + 2) = 0x100000001;
  return result;
}

void llvm::MCAsmLexer::~MCAsmLexer(void **this)
{
  llvm::MCAsmLexer *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *this = &unk_1E0E1F998;
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    v2 = (llvm::MCAsmLexer *)this[1];
    v3 = *((unsigned int *)this + 4);
    if (!(_DWORD)v3)
    {
LABEL_3:
      if (v2 == (llvm::MCAsmLexer *)(this + 3))
        return;
      goto LABEL_4;
    }
  }
  else
  {
    v2 = (llvm::MCAsmLexer *)this[1];
    v3 = *((unsigned int *)this + 4);
    if (!(_DWORD)v3)
      goto LABEL_3;
  }
  v4 = 40 * v3;
  do
  {
    if (*(_DWORD *)((char *)v2 + v4 - 8) >= 0x41u)
    {
      v5 = *(void **)((char *)v2 + v4 - 16);
      if (v5)
        operator delete[](v5);
    }
    v4 -= 40;
  }
  while (v4);
  v2 = (llvm::MCAsmLexer *)this[1];
  if (v2 != (llvm::MCAsmLexer *)(this + 3))
LABEL_4:
    free(v2);
}

uint64_t llvm::MCAsmLexer::getLoc(llvm::MCAsmLexer *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t llvm::MCAsmParser::MCAsmParser(uint64_t this)
{
  *(_QWORD *)this = off_1E0E1FEF8;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = this + 32;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void llvm::MCAsmParser::~MCAsmParser(llvm::MCAsmParser *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_1E0E1FEF8;
  v2 = (char *)*((_QWORD *)this + 2);
  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3)
  {
    v4 = 112 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 104];
      if (&v2[v4 - 80] != v5)
        free(v5);
      v4 -= 112;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 2);
  }
  if (v2 != (char *)this + 32)
    free(v2);
}

uint64_t llvm::MCAsmParser::setTargetParser(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

uint64_t llvm::MCAsmParser::getTok(llvm::MCAsmParser *this)
{
  return *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8);
}

uint64_t llvm::MCAsmParser::parseTokenLoc(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *a2 = mlir::Token::getLoc(*(mlir::Token **)(v3 + 8));
  return 0;
}

BOOL llvm::MCAsmParser::parseEOL(llvm::MCAsmParser *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Loc;
  __n128 v6;
  llvm::MCAsmLexer *v7;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  _BYTE v14[64];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  v3 = *(_QWORD *)this;
  if (v2 == 9)
  {
    (*(void (**)(llvm::MCAsmParser *))(v3 + 184))(this);
  }
  else
  {
    v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(v3 + 40))(this);
    Loc = mlir::Token::getLoc(*(mlir::Token **)(v4 + 8));
    v9 = "expected newline";
    v10 = 259;
    v13 = xmmword_181236C00;
    v15 = 0;
    v16 = 0;
    v11 = Loc;
    v12 = v14;
    llvm::Twine::toVector((uint64_t)&v9, (uint64_t)&v12);
    v15 = 0;
    v16 = 0;
    v6 = llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back((uint64_t)this + 16, (unint64_t)&v11);
    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(_QWORD *)this + 40))(this, v6) + 8) == 1)
    {
      v7 = (llvm::MCAsmLexer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this);
      llvm::MCAsmLexer::Lex(v7);
    }
    if (v12 != v14)
      free(v12);
  }
  return v2 != 9;
}

uint64_t llvm::MCAsmParser::Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v8;
  llvm::MCAsmLexer *v9;
  uint64_t v11;
  void *v12;
  __int128 v13;
  _BYTE v14[64];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = xmmword_181236C00;
  v15 = 0;
  v16 = 0;
  v11 = a2;
  v12 = v14;
  llvm::Twine::toVector(a3, (uint64_t)&v12);
  v15 = a4;
  v16 = a5;
  v8 = llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back(a1 + 16, (unint64_t)&v11);
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v8) + 8) == 1)
  {
    v9 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmLexer::Lex(v9);
  }
  if (v12 != v14)
    free(v12);
  return 1;
}

BOOL llvm::MCAsmParser::parseEOL(llvm::MCAsmParser *this, const llvm::Twine *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Loc;
  __n128 v8;
  llvm::MCAsmLexer *v9;
  uint64_t v11;
  void *v12;
  __int128 v13;
  _BYTE v14[64];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  v5 = *(_QWORD *)this;
  if (v4 == 9)
  {
    (*(void (**)(llvm::MCAsmParser *))(v5 + 184))(this);
  }
  else
  {
    v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(v5 + 40))(this);
    Loc = mlir::Token::getLoc(*(mlir::Token **)(v6 + 8));
    v13 = xmmword_181236C00;
    v15 = 0;
    v16 = 0;
    v11 = Loc;
    v12 = v14;
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v12);
    v15 = 0;
    v16 = 0;
    v8 = llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back((uint64_t)this + 16, (unint64_t)&v11);
    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(_QWORD *)this + 40))(this, v8) + 8) == 1)
    {
      v9 = (llvm::MCAsmLexer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this);
      llvm::MCAsmLexer::Lex(v9);
    }
    if (v12 != v14)
      free(v12);
  }
  return v4 != 9;
}

BOOL llvm::MCAsmParser::parseToken(llvm::MCAsmParser *this, int a2, llvm::Twine *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Loc;
  __n128 v11;
  llvm::MCAsmLexer *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  _BYTE v16[64];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 == 9)
    return llvm::MCAsmParser::parseEOL(this, a3);
  v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this);
  v8 = *(_QWORD *)this;
  if (**(_DWORD **)(v7 + 8) == a2)
  {
    (*(void (**)(llvm::MCAsmParser *))(v8 + 184))(this);
    return 0;
  }
  else
  {
    v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(v8 + 40))(this);
    Loc = mlir::Token::getLoc(*(mlir::Token **)(v9 + 8));
    v15 = xmmword_181236C00;
    v17 = 0;
    v18 = 0;
    v13 = Loc;
    v14 = v16;
    llvm::Twine::toVector((uint64_t)a3, (uint64_t)&v14);
    v17 = 0;
    v18 = 0;
    v11 = llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back((uint64_t)this + 16, (unint64_t)&v13);
    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(_QWORD *)this + 40))(this, v11) + 8) == 1)
    {
      v12 = (llvm::MCAsmLexer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this);
      llvm::MCAsmLexer::Lex(v12);
    }
    if (v14 != v16)
      free(v14);
    return 1;
  }
}

BOOL llvm::MCAsmParser::parseIntToken(llvm::MCAsmParser *this, uint64_t *a2, const llvm::Twine *a3)
{
  int v6;
  uint64_t v8;
  _QWORD *v9;

  v6 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  if (v6 == 4)
  {
    v8 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8);
    v9 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v9 = (_QWORD *)*v9;
    *a2 = *v9;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
    return 0;
  }
  else
  {
    llvm::MCAsmParser::TokError((uint64_t)this, (uint64_t)a3, 0, 0);
    return v6 != 4;
  }
}

uint64_t llvm::MCAsmParser::TokError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::MCAsmLexer *v8;
  __n128 v9;
  llvm::MCAsmLexer *v10;
  uint64_t Loc;
  void *v13;
  __int128 v14;
  _BYTE v15[64];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v8 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v14 = xmmword_181236C00;
  v16 = 0;
  v17 = 0;
  Loc = llvm::MCAsmLexer::getLoc(v8);
  v13 = v15;
  llvm::Twine::toVector(a2, (uint64_t)&v13);
  v16 = a3;
  v17 = a4;
  v9 = llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back(a1 + 16, (unint64_t)&Loc);
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v9) + 8) == 1)
  {
    v10 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmLexer::Lex(v10);
  }
  if (v13 != v15)
    free(v13);
  return 1;
}

BOOL llvm::MCAsmParser::parseOptionalToken(llvm::MCAsmParser *a1, int a2)
{
  int v4;
  const char *v6;
  __int16 v7;

  v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
  if (v4 == a2)
  {
    v6 = "unexpected token";
    v7 = 259;
    llvm::MCAsmParser::parseToken(a1, a2, (llvm::Twine *)&v6);
  }
  return v4 == a2;
}

uint64_t llvm::MCAsmParser::check(llvm::MCAsmParser *this, uint64_t a2, const llvm::Twine *a3)
{
  uint64_t v6;
  uint64_t Loc;
  __n128 v8;
  llvm::MCAsmLexer *v9;
  uint64_t v11;
  void *v12;
  __int128 v13;
  _BYTE v14[64];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this);
  Loc = mlir::Token::getLoc(*(mlir::Token **)(v6 + 8));
  if ((_DWORD)a2)
  {
    v13 = xmmword_181236C00;
    v15 = 0;
    v16 = 0;
    v11 = Loc;
    v12 = v14;
    llvm::Twine::toVector((uint64_t)a3, (uint64_t)&v12);
    v15 = 0;
    v16 = 0;
    v8 = llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back((uint64_t)this + 16, (unint64_t)&v11);
    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(_QWORD *)this + 40))(this, v8) + 8) == 1)
    {
      v9 = (llvm::MCAsmLexer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this);
      llvm::MCAsmLexer::Lex(v9);
    }
    if (v12 != v14)
      free(v12);
  }
  return a2;
}

uint64_t llvm::MCAsmParser::check(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v6;
  llvm::MCAsmLexer *v7;
  uint64_t v9;
  void *v10;
  __int128 v11;
  _BYTE v12[64];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    v11 = xmmword_181236C00;
    v13 = 0;
    v14 = 0;
    v9 = a3;
    v10 = v12;
    llvm::Twine::toVector(a4, (uint64_t)&v10);
    v13 = 0;
    v14 = 0;
    v6 = llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back(a1 + 16, (unint64_t)&v9);
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v6) + 8) == 1)
    {
      v7 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      llvm::MCAsmLexer::Lex(v7);
    }
    if (v10 != v12)
      free(v10);
  }
  return a2;
}

__n128 llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  void **v9;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  size_t v13;
  __n128 result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v15 = v4 + 1;
    v16 = v5 + 112 * v4;
    if (v5 <= a2 && v16 > a2)
    {
      v18 = a2 - v5;
      llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::grow(a1, v15);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v18;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::grow(a1, v15);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = (_QWORD *)(v5 + 112 * v6);
  *v7 = *(_QWORD *)a2;
  v8 = v7 + 4;
  v7[1] = v7 + 4;
  v9 = (void **)(v7 + 1);
  v12 = v7 == (_QWORD *)a2;
  *((_OWORD *)v7 + 1) = xmmword_181236C00;
  v10 = v7 + 2;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v12 || v11 == 0;
  if (!v12)
  {
    if (v11 < 0x41)
    {
      v13 = *(_QWORD *)(a2 + 16);
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v9, v8, *(_QWORD *)(a2 + 16), 1);
      v13 = *(_QWORD *)(a2 + 16);
      if (!v13)
      {
LABEL_11:
        *v10 = v11;
        goto LABEL_12;
      }
      v8 = *v9;
    }
    memcpy(v8, *(const void **)(a2 + 8), v13);
    goto LABEL_11;
  }
LABEL_12:
  result = *(__n128 *)(a2 + 96);
  *(__n128 *)(v5 + 112 * v6 + 96) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::MCAsmParser::addErrorSuffix(llvm::MCAsmParser *this, const llvm::Twine *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 1)
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
  v4 = *((unsigned int *)this + 6);
  if ((_DWORD)v4)
  {
    v5 = 112 * v4;
    v6 = *((_QWORD *)this + 2) + 8;
    do
    {
      llvm::Twine::toVector((uint64_t)a2, v6);
      v6 += 112;
      v5 -= 112;
    }
    while (v5);
  }
  return 1;
}

uint64_t llvm::MCAsmParser::parseMany(llvm::MCAsmParser *a1, uint64_t (*a2)(uint64_t), uint64_t a3, char a4)
{
  _QWORD v9[4];
  __int16 v10;

  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 9)
  {
LABEL_2:
    v9[0] = "unexpected token";
    v10 = 259;
    llvm::MCAsmParser::parseEOL(a1, (const llvm::Twine *)v9);
    return 0;
  }
  if ((a2(a3) & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != 9)
      {
        v9[0] = "unexpected token";
        v10 = 259;
        if (llvm::MCAsmParser::parseToken(a1, 26, (llvm::Twine *)v9) || (a2(a3) & 1) != 0)
          return 1;
      }
    }
    else
    {
      while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != 9)
      {
        if (a2(a3))
          return 1;
      }
    }
    goto LABEL_2;
  }
  return 1;
}

uint64_t llvm::MCAsmParser::parseExpression(llvm::MCAsmParser *this, const llvm::MCExpr **a2)
{
  uint64_t v3;

  v3 = 0;
  return (*(uint64_t (**)(llvm::MCAsmParser *, const llvm::MCExpr **, uint64_t *))(*(_QWORD *)this + 232))(this, a2, &v3);
}

uint64_t llvm::MCAsmParser::getAssemblerDialect(llvm::MCAsmParser *this)
{
  return 0;
}

uint64_t llvm::MCAsmParser::discardLTOSymbol()
{
  return 0;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, int **a3, _WORD *a4, _OWORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  int v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FA8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23658;
  *(_QWORD *)(a1 + 152) = &unk_1E0E23BC8;
  *(_QWORD *)(a1 + 160) = off_1E0E4FBE0;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  v15 = **a3;
  *(_DWORD *)(a1 + 128) = v15;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v15;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v3 = (char *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 112, &v16);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = &v6[112 * v7];
    v9 = (uint64_t)(v6 + 8);
    v10 = v4;
    do
    {
      v11 = v9 - 8;
      *v10 = *(_QWORD *)(v9 - 8);
      v10[1] = v10 + 4;
      *((_OWORD *)v10 + 1) = xmmword_181236C00;
      if (*(_QWORD *)(v9 + 8))
        llvm::SmallVectorImpl<char>::operator=((uint64_t)(v10 + 1), v9);
      *((_OWORD *)v10 + 6) = *(_OWORD *)(v9 + 88);
      v10 += 14;
      v9 += 112;
    }
    while ((char *)(v11 + 112) != v8);
    v6 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 112 * v12;
      do
      {
        v14 = *(char **)&v6[v13 - 104];
        if (&v6[v13 - 80] != v14)
          free(v14);
        v13 -= 112;
      }
      while (v13);
      v6 = *(char **)a1;
    }
  }
  v15 = v16;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v15;
}

uint64_t llvm::MCAsmParserExtension::MCAsmParserExtension(uint64_t this)
{
  *(_QWORD *)this = off_1E0E22C08;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t llvm::MCAsmParserExtension::Initialize(uint64_t this, llvm::MCAsmParser *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t llvm::MCAsmParserExtension::ParseDirectiveCGProfile(uint64_t a1)
{
  llvm::MCAsmLexer *v2;
  uint64_t Loc;
  const char *v4;
  llvm::MCAsmLexer *v5;
  uint64_t v6;
  llvm::MCAsmParser *v7;
  llvm::MCContext *v9;
  uint64_t v10;
  llvm::MCContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v2 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  Loc = llvm::MCAsmLexer::getLoc(v2);
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v24))
  {
    goto LABEL_2;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
    goto LABEL_8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v19 = 0;
  v20 = 0;
  v5 = (llvm::MCAsmLexer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v6 = llvm::MCAsmLexer::getLoc(v5);
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v19))
  {
LABEL_2:
    v4 = "expected identifier in directive";
LABEL_9:
    v21 = v4;
    v23 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v21, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
  {
LABEL_8:
    v4 = "expected a comma";
    goto LABEL_9;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v18 = 0;
  v7 = *(llvm::MCAsmParser **)(a1 + 8);
  v21 = "expected integer count in '.cg_profile' directive";
  v23 = 259;
  if (llvm::MCAsmParser::parseIntToken(v7, &v18, (const llvm::Twine *)&v21))
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v4 = "unexpected token in directive";
    goto LABEL_9;
  }
  v9 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v23 = 261;
  v21 = v24;
  v22 = v25;
  v10 = llvm::MCContext::getOrCreateSymbol(v9, &v21);
  v11 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v23 = 261;
  v21 = v19;
  v22 = v20;
  v12 = llvm::MCContext::getOrCreateSymbol(v11, &v21);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v15 = llvm::MCSymbolRefExpr::create(v10, 0, v14, Loc);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v17 = llvm::MCSymbolRefExpr::create(v12, 0, v16, v6);
  (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v13 + 1160))(v13, v15, v17, v18);
  return 0;
}

uint64_t llvm::MCTargetAsmParser::getSTI(llvm::MCTargetAsmParser *this)
{
  return *((_QWORD *)this + 46);
}

uint64_t llvm::createWasmAsmParser(llvm *this)
{
  void *v1;
  uint64_t result;

  v1 = operator new(0x28uLL);
  result = llvm::MCAsmParserExtension::MCAsmParserExtension((uint64_t)v1);
  *(_QWORD *)result = off_1E0E15A08;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void `anonymous namespace'::WasmAsmParser::~WasmAsmParser(_anonymous_namespace_::WasmAsmParser *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::WasmAsmParser::Initialize(_anonymous_namespace_::WasmAsmParser *this, llvm::MCAsmParser *a2)
{
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a2 + 40))(a2);
  llvm::MCAsmParserExtension::Initialize((uint64_t)this, *((llvm::MCAsmParser **)this + 3));
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseSectionDirectiveText>()
{
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseSectionDirectiveData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                             + 160)
                 + 32);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 168))(v3, v2, 0);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseSectionDirective>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t Loc;
  __int128 v11;
  uint64_t v12;
  int v18;
  uint64_t Tok;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  int v28;
  const char *v29;
  BOOL v32;
  BOOL v35;
  llvm::MCContext *v36;
  unint64_t WasmSection;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  const char *v48;
  int v49;
  int v50;
  BOOL v52;
  uint64_t v53;
  void *__p[2];
  unint64_t v55;
  int v56;
  __int16 v57;
  __int128 v58;
  _QWORD v59[4];
  __int16 v60;
  __int128 v61;
  const char *v62;
  __int16 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  const char *v67;
  uint64_t v68;
  __int128 v69;
  __int16 v70;
  int v71;
  __int16 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v65 = 0;
  v66 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v65))
  {
    v6 = "expected identifier in directive";
    goto LABEL_3;
  }
    return 1;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)v8 != 3)
  {
    v9 = *(_QWORD *)(a1 + 24);
    Loc = mlir::Token::getLoc((mlir::Token *)v8);
    v11 = *(_OWORD *)(v8 + 8);
    v67 = "expected string in directive, instead got: ";
    v68 = 43;
    v69 = v11;
    v70 = 1285;
    v12 = v9;
    return llvm::MCAsmParser::Error(v12, Loc, (uint64_t)&v67, 0, 0);
  }
  if (v66 >= 5)
  {
    if (*(_DWORD *)v65 == 1952539694 && *(_BYTE *)(v65 + 4) == 97)
      goto LABEL_37;
    if (v66 >= 6)
    {
      if (*(_DWORD *)v65 == 1633973294 && *(_WORD *)(v65 + 4) == 24948)
      {
        v18 = 13;
        goto LABEL_38;
      }
      if (*(_DWORD *)v65 != 1935832110 || *(_BYTE *)(v65 + 4) != 115)
      {
        if (v66 >= 7)
        {
          if (*(_DWORD *)v65 == 1685025326 && *(_DWORD *)(v65 + 3) == 1635017060)
          {
            v18 = 4;
            goto LABEL_38;
          }
          if (*(_DWORD *)v65 != 2019914798 || *(_BYTE *)(v65 + 4) != 116)
          {
            if (v66 < 0xF
              || (*(_QWORD *)v65 == 0x5F6D6F747375632ELL
                ? (v32 = *(_QWORD *)(v65 + 7) == 0x6E6F69746365735FLL)
                : (v32 = 0),
                  !v32))
            {
              if (*(_DWORD *)v65 == 1936941614)
                goto LABEL_95;
              if (v66 >= 0xB && *(_QWORD *)v65 == 0x72615F74696E692ELL && *(_QWORD *)(v65 + 3) == 0x79617272615F7469)
                goto LABEL_37;
              if (*(_DWORD *)v65 != 1650811950 || *(_DWORD *)(v65 + 3) != 1600615778)
                goto LABEL_37;
            }
            v18 = 0;
            goto LABEL_38;
          }
          goto LABEL_96;
        }
LABEL_32:
        if (*(_DWORD *)v65 != 2019914798 || *(_BYTE *)(v65 + 4) != 116)
        {
LABEL_36:
          if (*(_DWORD *)v65 != 1936941614)
            goto LABEL_37;
LABEL_95:
          v18 = 15;
          goto LABEL_38;
        }
LABEL_96:
        v18 = 2;
        goto LABEL_38;
      }
    }
    else if (*(_DWORD *)v65 != 1935832110 || *(_BYTE *)(v65 + 4) != 115)
    {
      goto LABEL_32;
    }
    v18 = 12;
    goto LABEL_38;
  }
  if (v66 == 4)
    goto LABEL_36;
LABEL_37:
  v18 = 19;
LABEL_38:
  Tok = llvm::MCAsmParser::getTok(*(llvm::MCAsmParser **)(a1 + 8));
  v20 = *(_QWORD *)(Tok + 16);
  v21 = v20 - 1;
  v22 = v20 != 0;
  if (v20 - 1 < v22)
    v21 = 1;
  if (v21 < v20)
    v20 = v21;
  v23 = v20 - v22;
  if (!v23)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
LABEL_44:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    {
      return 1;
    }
    v64 = 0uLL;
    if (v26)
    {
      if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) != 26)
      {
        v29 = "expected group name";
        goto LABEL_103;
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) == 4)
      {
        v64 = *(_OWORD *)(llvm::MCAsmParser::getTok(*(llvm::MCAsmParser **)(a1 + 8)) + 8);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      }
      else if (((*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v64) & 1) != 0)
      {
        v29 = "invalid group name";
        goto LABEL_103;
      }
      if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) == 26)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v61 = 0uLL;
        if ((*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v61))
        {
          v29 = "invalid linkage";
          goto LABEL_103;
        }
        if (*((_QWORD *)&v61 + 1) != 6
          || (*(_DWORD *)v61 == 1684893539 ? (v35 = *(unsigned __int16 *)(v61 + 4) == 29793) : (v35 = 0), !v35))
        {
          v29 = "Linkage must be 'comdat'";
LABEL_103:
          v67 = v29;
          v70 = 259;
          if ((llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v67, 0, 0) & 1) != 0)
            return 1;
        }
      }
    }
    {
      v36 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v70 = 261;
      v67 = (const char *)v65;
      v68 = v66;
      v63 = 261;
      v61 = v64;
      WasmSection = llvm::MCContext::getWasmSection(v36, (llvm::Twine *)&v67, v18, v24, (llvm::Twine *)&v61, -1);
      v38 = *(unsigned int *)(WasmSection + 256);
      if ((_DWORD)v38 != v24)
      {
        v39 = *(_QWORD *)(a1 + 24);
        v60 = 1283;
        v59[0] = "changed section flags for ";
        v59[2] = v65;
        v59[3] = v66;
        *(_QWORD *)&v61 = v59;
        v62 = ", expected: 0x";
        v63 = 770;
        if ((_DWORD)v38)
        {
          v40 = 16;
          do
          {
            v41 = v40;
            *((_BYTE *)&v67 + v40--) = llvm::hexdigit(unsigned int,BOOL)::LUT[v38 & 0xF];
            v42 = v38 > 0xF;
            v38 >>= 4;
          }
          while (v42);
        }
        else
        {
          LOBYTE(v69) = 48;
          v41 = 16;
        }
        v43 = 17 - v41;
        if ((unint64_t)(17 - v41) >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v43 > 0x16)
        {
          v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v43 | 7) != 0x17)
            v45 = v43 | 7;
          v46 = v45 + 1;
          v44 = operator new(v45 + 1);
          __p[1] = (void *)(17 - v41);
          v55 = v46 | 0x8000000000000000;
          __p[0] = v44;
        }
        else
        {
          HIBYTE(v55) = 17 - v41;
          v44 = __p;
        }
        if (v41 != 17)
        {
          memcpy(v44, (char *)&v67 + v41, 17 - v41);
          v44 += v43;
        }
        *v44 = 0;
        v47 = v63;
        if (v63 == 1)
        {
          v67 = (const char *)__p;
          v69 = v58;
          v70 = 260;
          v71 = v56;
          v72 = v57;
        }
        else if ((_BYTE)v63)
        {
          if (HIBYTE(v63) != 1)
            v47 = 2;
          v48 = (const char *)&v61;
          if (HIBYTE(v63) == 1)
            v48 = (const char *)v61;
          v67 = v48;
          v68 = *((_QWORD *)&v61 + 1);
          *(_QWORD *)&v69 = __p;
          LOBYTE(v70) = v47;
          HIBYTE(v70) = 4;
        }
        else
        {
          v70 = 256;
        }
        llvm::MCAsmParser::Error(v39, a4, (uint64_t)&v67, 0, 0);
        if (SHIBYTE(v55) < 0)
          operator delete(__p[0]);
      }
      if (v25)
      {
        v49 = *(unsigned __int8 *)(WasmSection + 220);
        v50 = v49 & 0xFC;
        v52 = (v49 - 15) < 6 || v50 == 4 || v50 == 8;
        if (!v52 && (v49 - 12) >= 3)
        {
          v12 = *(_QWORD *)(a1 + 24);
          v67 = "Only data sections can be passive";
          v70 = 259;
          Loc = a4;
          return llvm::MCAsmParser::Error(v12, Loc, (uint64_t)&v67, 0, 0);
        }
        *(_BYTE *)(WasmSection + 252) = 1;
      }
      v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v53 + 168))(v53, WasmSection, 0);
      return 0;
    }
    return 1;
  }
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v27 = (char *)(*(_QWORD *)(Tok + 8) + v22);
  while (1)
  {
    v28 = *v27;
    if (v28 > 83)
      break;
    if (v28 == 71)
    {
      v26 = 1;
    }
    else
    {
      if (v28 != 83)
        goto LABEL_61;
      v24 |= 1u;
    }
LABEL_52:
    ++v27;
    if (!--v23)
      goto LABEL_44;
  }
  if (v28 == 84)
  {
    v24 |= 2u;
    goto LABEL_52;
  }
  if (v28 == 112)
  {
    v25 = 1;
    goto LABEL_52;
  }
LABEL_61:
  v6 = "unknown flag";
LABEL_3:
  v67 = v6;
  v70 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v67, 0, 0);
}

uint64_t `anonymous namespace'::WasmAsmParser::expect(uint64_t a1, int a2, std::string::value_type *__s)
{
  uint64_t v4;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Loc;
  __int128 v16;
  std::string v17;
  std::string v18;
  void *__p[2];
  uint64_t v20;
  _QWORD v21[2];
  __int128 v22;
  __int16 v23;

  if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) == a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  *((_BYTE *)&v17.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v17, "Expected ");
  v6 = std::string::append(&v17, __s);
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, ", instead got: ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v20 >= 0)
    v11 = (void *)HIBYTE(v20);
  else
    v11 = __p[1];
  v13 = a1 + 24;
  v12 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8);
  Loc = mlir::Token::getLoc((mlir::Token *)v14);
  v16 = *(_OWORD *)(v14 + 8);
  v21[0] = v10;
  v21[1] = v11;
  v22 = v16;
  v23 = 1285;
  v4 = llvm::MCAsmParser::Error(v12, Loc, (uint64_t)v21, 0, 0);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_15:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v4;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
LABEL_12:
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v4;
LABEL_16:
  operator delete(v17.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseDirectiveSize>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::MCContext *v7;
  uint64_t Symbol;
  BOOL v9;
  uint64_t v10;
  const llvm::MCExpr *v11;
  const char *v12[4];
  __int16 v13;
  const char *v14;
  const char *v15;

  v14 = 0;
  v15 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v14))
  {
    v12[0] = "expected identifier in directive";
    v13 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v12, 0, 0);
  }
  else
  {
    v7 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v13 = 261;
    v12[0] = v14;
    v12[1] = v15;
    Symbol = llvm::MCContext::getOrCreateSymbol(v7, v12);
    {
      return 1;
    }
    else
    {
      v11 = 0;
      if ((llvm::MCAsmParser::parseExpression(*(llvm::MCAsmParser **)(a1 + 24), &v11) & 1) != 0)
      {
        return 1;
      }
      {
        return 1;
      }
      else
      {
        if (*(_BYTE *)(Symbol + 36))
          v9 = *(_DWORD *)(Symbol + 32) == 0;
        else
          v9 = 0;
        if (v9)
        {
          v12[0] = ".size directive ignored for function symbols";
          v13 = 259;
          (*(void (**)(_QWORD, uint64_t, const char **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a4, v12, 0, 0);
        }
        else
        {
          v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
          (*(void (**)(uint64_t, uint64_t, const llvm::MCExpr *))(*(_QWORD *)v10 + 432))(v10, Symbol, v11);
        }
        return 0;
      }
    }
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseDirectiveType>(uint64_t a1)
{
  uint64_t v2;
  llvm::MCContext *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Loc;
  __int128 v14;
  const char *v15;
  uint64_t v16;
  int v19;
  int v20;
  const char *v22;
  uint64_t v23;
  __int128 v24;
  __int16 v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)v2 != 2)
  {
    v12 = *(_QWORD *)(a1 + 24);
    Loc = mlir::Token::getLoc(*(mlir::Token **)(*(_QWORD *)(a1 + 32) + 8));
    v14 = *(_OWORD *)(v2 + 8);
    v15 = "Expected label after .type directive, got: ";
    v16 = 43;
LABEL_12:
    v22 = v15;
    v23 = v16;
    v24 = v14;
    v25 = 1285;
    return llvm::MCAsmParser::Error(v12, Loc, (uint64_t)&v22, 0, 0);
  }
  v3 = *(llvm::MCContext **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8)) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(const char **)(v4 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  v25 = 261;
  v22 = v6;
  v23 = v5;
  v7 = llvm::MCContext::getOrCreateSymbol(v3, &v22);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)v8 != 26
    || ((*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8)),
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8),
        *(_DWORD *)v8 != 46)
    || ((*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8)),
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8),
        *(_DWORD *)v8 != 2))
  {
    v12 = *(_QWORD *)(a1 + 24);
    Loc = mlir::Token::getLoc((mlir::Token *)v8);
    v14 = *(_OWORD *)(v8 + 8);
    v15 = "Expected label,@type declaration, got: ";
    v16 = 39;
    goto LABEL_12;
  }
  v9 = *(int **)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  if (v10 != 6)
  {
    if (v10 == 8 && *(_QWORD *)v9 == 0x6E6F6974636E7566)
    {
      *(_DWORD *)(v7 + 32) = 0;
      *(_BYTE *)(v7 + 36) = 1;
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 144) + 32 * *(unsigned int *)(v11 + 152) - 32) + 232))
        *(_BYTE *)(v7 + 42) = 1;
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  if (*v9 == 1651469415 && *((_WORD *)v9 + 2) == 27745)
  {
    *(_DWORD *)(v7 + 32) = 2;
  }
  else
  {
    v19 = *v9;
    v20 = *((unsigned __int16 *)v9 + 2);
    if (v19 != 1701470831 || v20 != 29795)
    {
LABEL_21:
      v12 = *(_QWORD *)(a1 + 24);
      Loc = mlir::Token::getLoc((mlir::Token *)v8);
      v14 = *(_OWORD *)(v8 + 8);
      v15 = "Unknown WASM symbol type: ";
      v16 = 26;
      goto LABEL_12;
    }
    *(_DWORD *)(v7 + 32) = 1;
  }
  *(_BYTE *)(v7 + 36) = 1;
LABEL_25:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::ParseDirectiveIdent>(uint64_t a1)
{
  uint64_t Tok;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v10;
  __int16 v11;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
    goto LABEL_15;
  Tok = llvm::MCAsmParser::getTok(*(llvm::MCAsmParser **)(a1 + 8));
  if (*(_DWORD *)Tok == 2)
  {
    v3 = *(_QWORD *)(Tok + 8);
    v4 = *(_QWORD *)(Tok + 16);
  }
  else
  {
    v5 = *(_QWORD *)(Tok + 16);
    v6 = v5 != 0;
    v3 = v5 ? *(_QWORD *)(Tok + 8) + 1 : *(_QWORD *)(Tok + 8);
    v7 = v5 - 1 < v6 ? 1 : v5 - 1;
    if (v7 < v5)
      v5 = v7;
    v4 = v5 - v6;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v8 + 680))(v8, v3, v4);
    return 0;
  }
  else
  {
LABEL_15:
    v10 = "unexpected token in '.ident' directive";
    v11 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v10, 0, 0);
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::ParseDirectiveSymbolAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  llvm::MCContext *v11;
  uint64_t Symbol;
  uint64_t v13;
  const char *v14;
  const char *v15[4];
  __int16 v16;
  const char *v17;
  const char *i;

  switch(a3)
  {
    case 5:
      if (*(_DWORD *)a2 != 1634039598 || *(_BYTE *)(a2 + 4) != 107)
        goto LABEL_30;
      v5 = 24;
      break;
    case 6:
      if (*(_DWORD *)a2 != 1668246574 || *(_WORD *)(a2 + 4) != 27745)
        goto LABEL_30;
      v5 = 17;
      break;
    case 7:
      if (*(_DWORD *)a2 != 1684629550 || *(_DWORD *)(a2 + 3) != 1852138596)
        goto LABEL_30;
      v5 = 12;
      break;
    case 9:
      if (*(_QWORD *)a2 != 0x616E7265746E692ELL || *(_BYTE *)(a2 + 8) != 108)
        goto LABEL_30;
      v5 = 15;
      break;
    case 10:
      if (*(_QWORD *)a2 != 0x746365746F72702ELL || *(_WORD *)(a2 + 8) != 25701)
        goto LABEL_30;
      v5 = 22;
      break;
    default:
LABEL_30:
      v5 = 0;
      break;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
LABEL_32:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v17 = 0;
  for (i = 0;
        ((*(uint64_t (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v17) & 1) == 0;
        i = 0)
  {
    v11 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v16 = 261;
    v15[0] = v17;
    v15[1] = i;
    Symbol = llvm::MCContext::getOrCreateSymbol(v11, v15);
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 296))(v13, Symbol, v5);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      goto LABEL_32;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 26)
    {
      v14 = "unexpected token in directive";
      goto LABEL_38;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v17 = 0;
  }
  v14 = "expected identifier in directive";
LABEL_38:
  v15[0] = v14;
  v16 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v15, 0, 0);
}

_QWORD *llvm::createXCOFFAsmParser(llvm *this)
{
  void *v1;
  _QWORD *result;

  v1 = operator new(0x28uLL);
  result = (_QWORD *)llvm::MCAsmParserExtension::MCAsmParserExtension((uint64_t)v1);
  *result = off_1E0E15C88;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void `anonymous namespace'::XCOFFAsmParser::~XCOFFAsmParser(_anonymous_namespace_::XCOFFAsmParser *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::XCOFFAsmParser::Initialize(_anonymous_namespace_::XCOFFAsmParser *this, llvm::MCAsmParser *a2)
{
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a2 + 40))(a2);
  llvm::MCAsmParserExtension::Initialize((uint64_t)this, *((llvm::MCAsmParser **)this + 3));
}

void llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::XCOFFAsmParser,&`anonymous namespace'::XCOFFAsmParser::ParseDirectiveCSect>()
{
  llvm::report_fatal_error((llvm *)"XCOFFAsmParser directive not yet supported!", (const char *)1);
}

llvm::AbstractCallSite *llvm::AbstractCallSite::AbstractCallSite(llvm::AbstractCallSite *this, const llvm::Use *a2)
{
  const llvm::Use *v2;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  char *v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t MetadataImpl;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 3);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 < 0x1C
    || (v5 - 33 <= 0x33 ? (v6 = ((1 << (v5 - 33)) & 0x8000000000041) == 0) : (v6 = 1), v6))
  {
    v7 = (char *)this + 24;
    *((_QWORD *)this + 1) = (char *)this + 24;
    v8 = (_QWORD *)((char *)this + 8);
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 4) = 0;
    v9 = (unsigned int *)((char *)this + 16);
    *((_DWORD *)this + 5) = 0;
    if (v5 != 5)
      return this;
    v16 = *(_QWORD *)(v4 + 8);
    if (!v16 || *(_QWORD *)(v16 + 8))
      return this;
    if (llvm::ConstantExpr::isCast((llvm::ConstantExpr *)v4))
    {
      v2 = *(const llvm::Use **)(v4 + 8);
      v4 = *((_QWORD *)v2 + 3);
      v17 = *(unsigned __int8 *)(v4 + 16);
      if (v17 < 0x1C
        || ((v18 = v17 - 33, v19 = v18 > 0x33, v20 = (1 << v18) & 0x8000000000041, !v19)
          ? (v21 = v20 == 0)
          : (v21 = 1),
            v21))
      {
        v4 = 0;
      }
      *(_QWORD *)this = v4;
      if (!v4)
        return this;
    }
    else
    {
      v4 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        return this;
    }
  }
  else
  {
    *(_QWORD *)this = v4;
    v7 = (char *)this + 24;
    *((_QWORD *)this + 1) = (char *)this + 24;
    v8 = (_QWORD *)((char *)this + 8);
    *((_DWORD *)this + 4) = 0;
    v9 = (unsigned int *)((char *)this + 16);
    *((_DWORD *)this + 5) = 0;
  }
  v10 = (uint64_t *)(v4 - 32);
  if ((const llvm::Use *)(v4 - 32) != v2)
  {
    v11 = *v10;
    if (*v10
      && !*(_BYTE *)(v11 + 16)
      && *(_QWORD *)(v11 + 24) == *(_QWORD *)(v4 + 80)
      && (*(_BYTE *)(v11 + 23) & 0x20) != 0
      && (MetadataImpl = llvm::Value::getMetadataImpl((llvm::Value *)v11, 26)) != 0
      && ((v13 = *(_QWORD *)(MetadataImpl - 16), (v13 & 2) != 0)
        ? (v14 = *(uint64_t **)(MetadataImpl - 32), v15 = *(unsigned int *)(MetadataImpl - 24))
        : (v14 = (uint64_t *)(MetadataImpl - 16 - 8 * ((v13 >> 2) & 0xF)), v15 = (v13 >> 6) & 0xF),
          v15))
    {
      v22 = *(_QWORD *)this;
      v23 = 8 * v15;
      while (1)
      {
        v24 = *v14;
        v25 = (unint64_t *)(*v14 - 16);
        if ((*v25 & 2) != 0)
          v26 = *(unint64_t **)(v24 - 32);
        else
          v26 = &v25[-((*v25 >> 2) & 0xF)];
        v27 = *(_QWORD *)(*v26 + 128);
        v28 = (_QWORD *)(v27 + 24);
        if (*(_DWORD *)(v27 + 32) >= 0x41u)
          v28 = (_QWORD *)*v28;
        if (*v28 == (((unint64_t)v2
                                   + 32 * (*(_DWORD *)(*(_QWORD *)this + 20) & 0x7FFFFFF)
                                   - *(_QWORD *)this) >> 5))
          break;
        ++v14;
        v23 -= 8;
        if (!v23)
          goto LABEL_40;
      }
      v30 = llvm::CallBase::arg_end(*(llvm::CallBase **)this);
      if ((*v25 & 2) != 0)
        v31 = *(_DWORD *)(v24 - 24);
      else
        v31 = (*v25 >> 6) & 0xF;
      v50 = v22;
      v32 = *(_DWORD *)(v22 + 20);
      v33 = v31 - 1;
      if (v33)
      {
        v34 = 0;
        v35 = 8 * v33;
        do
        {
          if ((*v25 & 2) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 - 32) + v34) + 128);
            v37 = *(_DWORD *)(v36 + 32);
            if (v37 <= 0x40)
            {
LABEL_51:
              v38 = (uint64_t)(*(_QWORD *)(v36 + 24) << -(char)v37) >> -(char)v37;
              goto LABEL_52;
            }
          }
          else
          {
            v36 = *(_QWORD *)(v25[v34 / 8 - ((*v25 >> 2) & 0xF)] + 128);
            v37 = *(_DWORD *)(v36 + 32);
            if (v37 <= 0x40)
              goto LABEL_51;
          }
          v38 = **(_QWORD **)(v36 + 24);
LABEL_52:
          v39 = *((unsigned int *)this + 4);
          if (v39 >= *((unsigned int *)this + 5))
          {
            v49 = v30;
            v48 = v32;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, v7, v39 + 1, 4);
            v32 = v48;
            v30 = v49;
            v39 = *v9;
          }
          *(_DWORD *)(*v8 + 4 * v39) = v38;
          ++*v9;
          v34 += 8;
        }
        while (v35 != v34);
      }
      if (*(_DWORD *)(*(_QWORD *)(v11 + 24) + 8) > 0xFFu)
      {
        v40 = *v25;
        v41 = v32;
        v42 = v30;
        if ((*v25 & 2) != 0)
        {
          v43 = *(_DWORD *)(v24 - 24);
          v44 = *(unint64_t **)(v24 - 32);
        }
        else
        {
          v43 = (v40 >> 6) & 0xF;
          v44 = &v25[-((v40 >> 2) & 0xF)];
        }
        if ((llvm::Constant::isNullValue(*(llvm::Constant **)(v44[v43 - 1] + 128)) & 1) == 0)
        {
          v45 = (v42 - (v50 + 32 * (unint64_t)-(v41 & 0x7FFFFFF))) >> 5;
          v46 = *(_DWORD *)(v11 + 96);
          if (v46 < v45)
          {
            v47 = *v9;
            do
            {
              if (v47 >= *((_DWORD *)this + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, v7, v47 + 1, 4);
                v47 = *v9;
              }
              *(_DWORD *)(*v8 + 4 * v47) = v46;
              v47 = *v9 + 1;
              *v9 = v47;
              ++v46;
            }
            while ((_DWORD)v45 != v46);
          }
        }
      }
    }
    else
    {
LABEL_40:
      *(_QWORD *)this = 0;
    }
  }
  return this;
}

uint64_t llvm::CallBase::arg_end(llvm::CallBase *this)
{
  int v2;
  uint64_t NumSubclassExtraOperandsDynamic;
  char *Descriptor;
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 84)
  {
    NumSubclassExtraOperandsDynamic = 0;
    if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if (v2 == 39)
  {
    NumSubclassExtraOperandsDynamic = llvm::CallBase::getNumSubclassExtraOperandsDynamic(this);
    if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else
  {
    NumSubclassExtraOperandsDynamic = 2;
    if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
      goto LABEL_12;
  }
  Descriptor = llvm::User::getDescriptor(this);
  v5 = Descriptor;
  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    v10 = llvm::User::getDescriptor(this);
    if (((&v10[v11] - v5) & 0xFFFFFFFF0) != 0)
      goto LABEL_10;
LABEL_12:
    v9 = 0;
    return (uint64_t)this + -32 * v9 + -32 * NumSubclassExtraOperandsDynamic - 32;
  }
  if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) == 0)
    goto LABEL_12;
LABEL_10:
  v6 = *((_DWORD *)llvm::User::getDescriptor(this) + 2);
  v7 = llvm::User::getDescriptor(this);
  v9 = (*(_DWORD *)&v7[v8 - 4] - v6);
  return (uint64_t)this + -32 * v9 + -32 * NumSubclassExtraOperandsDynamic - 32;
}

llvm::raw_ostream *llvm::printLLVMNameWithoutPrefix(llvm::raw_ostream *result, llvm::raw_ostream *a2, size_t a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  _BYTE *v12;
  _BYTE *v13;

  v5 = result;
  v6 = MEMORY[0x1E0C80978];
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)a2 + 60) & 0x400) != 0)
    goto LABEL_18;
  if (a3)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *((unsigned __int8 *)a2 + v7);
      v10 = *((unsigned __int8 *)a2 + v7);
      if (*((char *)a2 + v7) < 0)
      {
        if (__maskrune(*((unsigned __int8 *)a2 + v7), 0x500uLL))
          goto LABEL_4;
      }
      else if ((*(_DWORD *)(v6 + 4 * v10 + 60) & 0x500) != 0)
      {
        goto LABEL_4;
      }
      if ((v9 - 45) > 0x32 || ((1 << (v9 - 45)) & 0x4000000000003) == 0)
        v8 = 1;
      if ((v10 - 45) > 0x32 || ((1 << (v10 - 45)) & 0x4000000000003) == 0)
      {
LABEL_17:
        if ((v8 & 1) != 0)
        {
LABEL_18:
          v12 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v12 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 34);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v12 + 1;
            *v12 = 34;
          }
          result = llvm::printEscapedString(a2, a3, v5);
          v13 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v13 >= *((_QWORD *)v5 + 3))
          {
            return llvm::raw_ostream::write(v5, 34);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v13 + 1;
            *v13 = 34;
          }
        }
        else
        {
          result = (llvm::raw_ostream *)*((_QWORD *)v5 + 4);
          if (a3 <= *((_QWORD *)v5 + 3) - (_QWORD)result)
          {
            if (a3)
            {
              result = (llvm::raw_ostream *)memcpy(result, a2, a3);
              *((_QWORD *)v5 + 4) += a3;
            }
          }
          else
          {
            return llvm::raw_ostream::write(v5, (const char *)a2, a3);
          }
        }
        return result;
      }
LABEL_4:
      if (a3 == ++v7)
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t llvm::ModuleSlotTracker::ModuleSlotTracker(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)result = off_1E0E22A80;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = a2 != 0;
  *(_BYTE *)(result + 17) = a3;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void llvm::ModuleSlotTracker::~ModuleSlotTracker(llvm::ModuleSlotTracker *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::ModuleSlotTracker *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E0E22A80;
  v2 = (char *)this + 80;
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::ModuleSlotTracker *)*((_QWORD *)this + 9);
  if (v5 == (llvm::ModuleSlotTracker *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (llvm::ModuleSlotTracker *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::ModuleSlotTracker *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E0E22A80;
  v2 = (char *)this + 80;
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::ModuleSlotTracker *)*((_QWORD *)this + 9);
  if (v5 == (llvm::ModuleSlotTracker *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (llvm::ModuleSlotTracker *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  operator delete(this);
}

uint64_t llvm::ModuleSlotTracker::getMachine(llvm::ModuleSlotTracker *this)
{
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char *v6;
  llvm::ModuleSlotTracker *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 16))
  {
    v6 = (char *)this + 40;
    return *(_QWORD *)v6;
  }
  *((_BYTE *)this + 16) = 0;
  v2 = (char *)operator new(0x148uLL);
  v3 = *((_QWORD *)this + 3);
  v4 = *((_BYTE *)this + 17);
  *(_QWORD *)v2 = off_1E0E20020;
  *((_QWORD *)v2 + 1) = v3;
  *((_QWORD *)v2 + 2) = 0;
  v2[24] = 0;
  v2[25] = v4;
  *((_QWORD *)v2 + 7) = 0;
  *((_DWORD *)v2 + 32) = 0;
  *((_QWORD *)v2 + 17) = 0;
  *((_QWORD *)v2 + 18) = 0;
  *((_DWORD *)v2 + 38) = 0;
  *((_DWORD *)v2 + 40) = 0;
  *((_QWORD *)v2 + 21) = 0;
  *((_QWORD *)v2 + 22) = 0;
  *((_DWORD *)v2 + 46) = 0;
  *((_DWORD *)v2 + 48) = 0;
  *((_QWORD *)v2 + 25) = 0;
  *((_QWORD *)v2 + 26) = 0;
  *((_DWORD *)v2 + 54) = 0;
  *((_DWORD *)v2 + 56) = 0;
  *((_QWORD *)v2 + 29) = 0;
  *((_QWORD *)v2 + 30) = 0;
  *((_DWORD *)v2 + 62) = 0;
  *((_DWORD *)v2 + 30) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_QWORD *)(v2 + 252) = 16;
  *((_QWORD *)v2 + 33) = 0;
  *((_QWORD *)v2 + 34) = 0;
  *((_DWORD *)v2 + 70) = 0;
  *((_DWORD *)v2 + 72) = 0;
  *((_QWORD *)v2 + 37) = 0;
  *((_QWORD *)v2 + 38) = 0;
  *((_DWORD *)v2 + 78) = 0;
  *(_QWORD *)(v2 + 316) = 16;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v2 = (char *)*((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 5) = v2;
  v6 = (char *)this + 40;
  v7 = (llvm::ModuleSlotTracker *)*((_QWORD *)this + 9);
  if (!v7)
    goto LABEL_23;
  if (v7 != (llvm::ModuleSlotTracker *)((char *)this + 48))
  {
    v8 = (_QWORD *)(*(uint64_t (**)(llvm::ModuleSlotTracker *))(*(_QWORD *)v7 + 16))(v7);
    v27 = v8;
    v9 = v2 + 32;
    if (v8)
      goto LABEL_7;
LABEL_11:
    v29 = 0;
    goto LABEL_13;
  }
  v27 = v26;
  (*(void (**)(llvm::ModuleSlotTracker *, _QWORD *))(*(_QWORD *)v7 + 24))(v7, v26);
  v8 = v27;
  v9 = v2 + 32;
  if (!v27)
    goto LABEL_11;
LABEL_7:
  if (v8 == v26)
  {
    v29 = v28;
    (*(void (**)(_QWORD *, _QWORD *))(v26[0] + 24))(v26, v28);
  }
  else
  {
    v29 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  }
LABEL_13:
  std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](v28, v9);
  v10 = v29;
  if (v29 == v28)
  {
    v11 = 4;
    v10 = v28;
    goto LABEL_17;
  }
  if (v29)
  {
    v11 = 5;
LABEL_17:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = v27;
  if (v27 == v26)
  {
    v13 = 4;
    v12 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_23;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_23:
  v14 = (char *)*((_QWORD *)this + 13);
  if (!v14)
    return *(_QWORD *)v6;
  v15 = (char *)this + 80;
  v16 = *((_QWORD *)this + 5);
  if (v14 != v15)
  {
    v17 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v14 + 16))(v14);
    v25 = v17;
    v18 = (_QWORD *)(v16 + 64);
    if (v17)
      goto LABEL_26;
LABEL_29:
    v29 = 0;
    goto LABEL_31;
  }
  v25 = v24;
  (*(void (**)(char *, _QWORD *))(*(_QWORD *)v14 + 24))(v14, v24);
  v17 = v25;
  v18 = (_QWORD *)(v16 + 64);
  if (!v25)
    goto LABEL_29;
LABEL_26:
  if (v17 == v24)
  {
    v29 = v28;
    (*(void (**)(_QWORD *, _QWORD *))(v24[0] + 24))(v24, v28);
  }
  else
  {
    v29 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
  }
LABEL_31:
  std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](v28, v18);
  v19 = v29;
  if (v29 == v28)
  {
    v20 = 4;
    v19 = v28;
    goto LABEL_35;
  }
  if (v29)
  {
    v20 = 5;
LABEL_35:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  v21 = v25;
  if (v25 == v24)
  {
    v22 = 4;
    v21 = v24;
    goto LABEL_40;
  }
  if (v25)
  {
    v22 = 5;
LABEL_40:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  return *(_QWORD *)v6;
}

_QWORD *llvm::ModuleSlotTracker::incorporateFunction(const llvm::Function **this, const llvm::Function *a2)
{
  _QWORD *result;
  const llvm::Function *v5;
  const llvm::Function *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const llvm::Function *v17;

  result = (_QWORD *)llvm::ModuleSlotTracker::getMachine((llvm::ModuleSlotTracker *)this);
  if (result)
  {
    v5 = this[4];
    if (v5 != a2)
    {
      if (!v5)
      {
LABEL_20:
        v17 = this[5];
        *((_QWORD *)v17 + 2) = a2;
        *((_BYTE *)v17 + 24) = 0;
        this[4] = a2;
        return result;
      }
      v6 = this[5];
      v7 = *((_DWORD *)v6 + 36);
      if (!v7 && !*((_DWORD *)v6 + 37))
      {
LABEL_19:
        *((_QWORD *)v6 + 2) = 0;
        *((_BYTE *)v6 + 24) = 0;
        goto LABEL_20;
      }
      result = (_QWORD *)((char *)v6 + 136);
      v8 = *((unsigned int *)v6 + 38);
      if (v8 > 4 * v7 && v8 >= 0x41)
      {
        result = (_QWORD *)llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)result);
        goto LABEL_19;
      }
      if ((_DWORD)v8)
      {
        v9 = (_QWORD *)*result;
        v10 = (v8 - 1) & 0xFFFFFFFFFFFFFFFLL;
        if (v10)
        {
          v11 = v10 + 1;
          v12 = (v10 + 1) & 0x1FFFFFFFFFFFFFFELL;
          v13 = &v9[2 * v12];
          v14 = v9 + 2;
          v15 = v12;
          do
          {
            *(v14 - 2) = -4096;
            *v14 = -4096;
            v14 += 4;
            v15 -= 2;
          }
          while (v15);
          if (v11 == v12)
            goto LABEL_18;
        }
        else
        {
          v13 = (_QWORD *)*result;
        }
        v16 = &v9[2 * v8];
        do
        {
          *v13 = -4096;
          v13 += 2;
        }
        while (v13 != v16);
      }
LABEL_18:
      *((_QWORD *)v6 + 18) = 0;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t llvm::ModuleSlotTracker::getLocalSlot(llvm::ModuleSlotTracker *this, const llvm::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::Value *v8;
  int v9;
  int v10;

  v3 = *((_QWORD *)this + 5);
  if (*(_QWORD *)(v3 + 8))
  {
    llvm::SlotTracker::processModule(*((llvm::SlotTracker **)this + 5));
    *(_QWORD *)(v3 + 8) = 0;
  }
  if (*(_QWORD *)(v3 + 16) && !*(_BYTE *)(v3 + 24))
  {
    llvm::SlotTracker::processFunction((llvm::SlotTracker *)v3);
    v4 = *(_QWORD *)(v3 + 136);
    v5 = *(unsigned int *)(v3 + 152);
    if (!(_DWORD)v5)
      goto LABEL_12;
  }
  else
  {
    v4 = *(_QWORD *)(v3 + 136);
    v5 = *(unsigned int *)(v3 + 152);
    if (!(_DWORD)v5)
      goto LABEL_12;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = v4 + 16 * v6;
  v8 = *(const llvm::Value **)v7;
  if (*(const llvm::Value **)v7 == a2)
    goto LABEL_13;
  v9 = 1;
  while (v8 != (const llvm::Value *)-4096)
  {
    v10 = v6 + v9++;
    v6 = v10 & (v5 - 1);
    v8 = *(const llvm::Value **)(v4 + 16 * v6);
    if (v8 == a2)
    {
      v7 = v4 + 16 * v6;
      goto LABEL_13;
    }
  }
LABEL_12:
  v7 = v4 + 16 * v5;
LABEL_13:
  if (v7 == v4 + 16 * v5)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v7 + 8);
}

uint64_t llvm::SlotTracker::getLocalSlot(llvm::SlotTracker *this, const llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::Value *v8;
  int v9;
  int v10;

  if (*((_QWORD *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
  {
    llvm::SlotTracker::processFunction(this);
    v4 = *((_QWORD *)this + 17);
    v5 = *((unsigned int *)this + 38);
    if (!(_DWORD)v5)
      goto LABEL_12;
  }
  else
  {
    v4 = *((_QWORD *)this + 17);
    v5 = *((unsigned int *)this + 38);
    if (!(_DWORD)v5)
      goto LABEL_12;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = v4 + 16 * v6;
  v8 = *(const llvm::Value **)v7;
  if (*(const llvm::Value **)v7 == a2)
    goto LABEL_13;
  v9 = 1;
  while (v8 != (const llvm::Value *)-4096)
  {
    v10 = v6 + v9++;
    v6 = v10 & (v5 - 1);
    v8 = *(const llvm::Value **)(v4 + 16 * v6);
    if (v8 == a2)
    {
      v7 = v4 + 16 * v6;
      goto LABEL_13;
    }
  }
LABEL_12:
  v7 = v4 + 16 * v5;
LABEL_13:
  if (v7 == v4 + 16 * v5)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v7 + 8);
}

double llvm::SlotTracker::SlotTracker(llvm::SlotTracker *this, const Function *a2, char a3)
{
  uint64_t v3;
  double result;

  *(_QWORD *)this = off_1E0E20020;
  if (a2)
    v3 = *((_QWORD *)a2 + 5);
  else
    v3 = 0;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = a2;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 25) = a3;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_QWORD *)&result = 16;
  *(_QWORD *)((char *)this + 252) = 16;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_DWORD *)this + 78) = 0;
  *(_QWORD *)((char *)this + 316) = 16;
  return result;
}

uint64_t llvm::SlotTracker::processModule(llvm::SlotTracker *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  const llvm::GlobalValue *v5;
  _QWORD *v6;
  uint64_t v7;
  const llvm::MDNode **v8;
  const llvm::MDNode *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm::NamedMDNode *v15;
  llvm::NamedMDNode *v16;
  const llvm::GlobalValue *v17;
  const llvm::GlobalValue *v18;
  int NumOperands;
  int v20;
  unsigned int i;
  const llvm::MDNode *Operand;
  _QWORD *v23;
  _QWORD *j;
  const llvm::GlobalValue *v25;
  uint64_t FnAttrs;
  uint64_t result;
  char v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[9];

  v33[8] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = v2 + 1;
  v4 = (_QWORD *)v2[2];
  if (v4 != v2 + 1)
  {
    do
    {
      if (v4)
        v5 = (const llvm::GlobalValue *)(v4 - 7);
      else
        v5 = 0;
      if ((*((_BYTE *)v5 + 23) & 0x10) == 0)
        llvm::SlotTracker::CreateModuleSlot(this, v5);
      v31 = v33;
      v32 = 0x400000000;
      llvm::Value::getAllMetadata(v5, (uint64_t)&v31);
      v6 = v31;
      if ((_DWORD)v32)
      {
        v7 = 16 * v32;
        v8 = (const llvm::MDNode **)((char *)v31 + 8);
        do
        {
          v9 = *v8;
          v8 += 2;
          llvm::SlotTracker::CreateMetadataSlot(this, v9);
          v7 -= 16;
        }
        while (v7);
        v6 = v31;
      }
      if (v6 != v33)
        free(v6);
      v10 = *((_QWORD *)v5 + 9);
      if (v10)
        llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v10);
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v11 = v2 + 5;
  v12 = (_QWORD *)v2[6];
  if (v12 == v2 + 5)
  {
    v13 = v2 + 7;
    v14 = (_QWORD *)v2[8];
    if (v14 == v2 + 7)
      goto LABEL_20;
  }
  else
  {
    do
    {
      if (v12)
        v17 = (const llvm::GlobalValue *)(v12 - 6);
      else
        v17 = 0;
      if ((*((_BYTE *)v17 + 23) & 0x10) == 0)
        llvm::SlotTracker::CreateModuleSlot(this, v17);
      v12 = (_QWORD *)v12[1];
    }
    while (v12 != v11);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
    v13 = v2 + 7;
    v14 = (_QWORD *)v2[8];
    if (v14 == v2 + 7)
    {
LABEL_20:
      v15 = (llvm::NamedMDNode *)(v2 + 9);
      v16 = (llvm::NamedMDNode *)v2[10];
      if (v16 == (llvm::NamedMDNode *)(v2 + 9))
        goto LABEL_44;
      goto LABEL_39;
    }
  }
  do
  {
    if (v14)
      v18 = (const llvm::GlobalValue *)(v14 - 7);
    else
      v18 = 0;
    if ((*((_BYTE *)v18 + 23) & 0x10) == 0)
      llvm::SlotTracker::CreateModuleSlot(this, v18);
    v14 = (_QWORD *)v14[1];
  }
  while (v14 != v13);
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v15 = (llvm::NamedMDNode *)(v2 + 9);
  v16 = (llvm::NamedMDNode *)v2[10];
  if (v16 != (llvm::NamedMDNode *)(v2 + 9))
  {
    do
    {
LABEL_39:
      NumOperands = llvm::NamedMDNode::getNumOperands(v16);
      if (NumOperands)
      {
        v20 = NumOperands;
        for (i = 0; i != v20; ++i)
        {
          Operand = (const llvm::MDNode *)llvm::NamedMDNode::getOperand(v16, i);
          llvm::SlotTracker::CreateMetadataSlot(this, Operand);
        }
      }
      v16 = (llvm::NamedMDNode *)*((_QWORD *)v16 + 1);
    }
    while (v16 != v15);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
LABEL_44:
  v23 = v2 + 3;
  for (j = (_QWORD *)v2[4]; j != v23; j = (_QWORD *)j[1])
  {
    if (j)
      v25 = (const llvm::GlobalValue *)(j - 7);
    else
      v25 = 0;
    if ((*((_BYTE *)v25 + 23) & 0x10) == 0)
      llvm::SlotTracker::CreateModuleSlot(this, v25);
    if (*((_BYTE *)this + 25))
      llvm::SlotTracker::processFunctionMetadata(this, v25);
    v31 = (void *)*((_QWORD *)v25 + 14);
    FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v31);
    if (FnAttrs)
      llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, FnAttrs);
  }
  result = *((_QWORD *)this + 7);
  if (result)
  {
    v28 = *((_BYTE *)this + 25);
    v30 = *((_QWORD *)this + 1);
    v31 = this;
    v29 = v28;
    return (*(uint64_t (**)(uint64_t, void **, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v31, &v30, &v29);
  }
  return result;
}

_QWORD *llvm::SlotTracker::CreateModuleSlot(llvm::SlotTracker *this, const llvm::GlobalValue *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  const llvm::GlobalValue *v12;
  const llvm::GlobalValue *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  const llvm::GlobalValue *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v6 = *((_QWORD *)this + 13);
  result = (_QWORD *)((char *)this + 104);
  v5 = v6;
  v7 = *((_DWORD *)result + 6);
  *((_DWORD *)result + 6) = v7 + 1;
  v8 = *((_DWORD *)result + 4);
  if (!v8)
    goto LABEL_21;
  v9 = v8 - 1;
  v10 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = v5 + 16 * v10;
  v12 = *(const llvm::GlobalValue **)v11;
  if (*(const llvm::GlobalValue **)v11 == a2)
  {
LABEL_3:
    *(_DWORD *)(v11 + 8) = v7;
    return result;
  }
  v14 = 0;
  v15 = 1;
  while (v12 != (const llvm::GlobalValue *)-4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v12 == (const llvm::GlobalValue *)-8192;
    if (v16)
      v14 = v11;
    v17 = v10 + v15++;
    v10 = v17 & v9;
    v11 = v5 + 16 * (v17 & v9);
    v12 = *(const llvm::GlobalValue **)v11;
    if (*(const llvm::GlobalValue **)v11 == a2)
      goto LABEL_3;
  }
  if (v14)
    v11 = v14;
  v18 = *((_DWORD *)this + 28);
  if (4 * v18 + 4 < 3 * v8)
  {
    if (v8 + ~v18 - *((_DWORD *)this + 29) > v8 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v8 *= 2;
  }
  result = llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)result, v8);
  v19 = *((_QWORD *)this + 13);
  v20 = *((_DWORD *)this + 30) - 1;
  v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  v11 = v19 + 16 * v21;
  v22 = *(const llvm::GlobalValue **)v11;
  if (*(const llvm::GlobalValue **)v11 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 28);
    if (a2 == (const llvm::GlobalValue *)-4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != (const llvm::GlobalValue *)-4096)
  {
    if (v23)
      v25 = 0;
    else
      v25 = v22 == (const llvm::GlobalValue *)-8192;
    if (v25)
      v23 = v11;
    v26 = v21 + v24++;
    v21 = v26 & v20;
    v11 = v19 + 16 * (v26 & v20);
    v22 = *(const llvm::GlobalValue **)v11;
    if (*(const llvm::GlobalValue **)v11 == a2)
      goto LABEL_23;
  }
  if (v23)
    v11 = v23;
LABEL_6:
  v13 = *(const llvm::GlobalValue **)v11;
  ++*((_DWORD *)this + 28);
  if (v13 != (const llvm::GlobalValue *)-4096)
LABEL_7:
    --*((_DWORD *)this + 29);
LABEL_8:
  *(_QWORD *)v11 = a2;
  *(_DWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 8) = v7;
  return result;
}

uint64_t llvm::SlotTracker::CreateAttributeSetSlot(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(result + 200);
  v3 = *(unsigned int *)(result + 216);
  v4 = a2 >> 4;
  if ((_DWORD)v3)
  {
    LODWORD(v5) = (v3 - 1) & (v4 ^ (a2 >> 9));
    v6 = *(_QWORD *)(v2 + 16 * v5);
    if (v6 == a2)
    {
      if ((_DWORD)v5 != (_DWORD)v3)
        return result;
      v7 = *(_DWORD *)(result + 224);
      *(_DWORD *)(result + 224) = v7 + 1;
LABEL_12:
      v10 = v3 - 1;
      v11 = (v3 - 1) & (v4 ^ (a2 >> 9));
      v12 = (uint64_t *)(v2 + 16 * v11);
      v13 = *v12;
      if (*v12 == a2)
      {
LABEL_13:
        *((_DWORD *)v12 + 2) = v7;
        return result;
      }
      v15 = 0;
      v16 = 1;
      while (v13 != -4)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v13 == -8;
        if (v17)
          v15 = v12;
        v18 = v11 + v16++;
        v11 = v18 & v10;
        v12 = (uint64_t *)(v2 + 16 * (v18 & v10));
        v13 = *v12;
        if (*v12 == a2)
          goto LABEL_13;
      }
      if (v15)
        v12 = v15;
      v19 = *(_DWORD *)(result + 208);
      if (4 * v19 + 4 < (3 * v3))
      {
        if ((int)v3 + ~v19 - *(_DWORD *)(result + 212) > v3 >> 3)
          goto LABEL_17;
        goto LABEL_34;
      }
LABEL_33:
      LODWORD(v3) = 2 * v3;
LABEL_34:
      v29 = v7;
      v30 = a2;
      v31 = result;
      v20 = a2 >> 4;
      llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::grow(result + 200, v3);
      a2 = v30;
      result = v31;
      v21 = *(_QWORD *)(v31 + 200);
      v22 = *(_DWORD *)(v31 + 216) - 1;
      v23 = v22 & (v20 ^ (v30 >> 9));
      v12 = (uint64_t *)(v21 + 16 * v23);
      v24 = *v12;
      if (*v12 == v30)
      {
        v14 = v30;
        v7 = v29;
        goto LABEL_18;
      }
      v25 = 0;
      v26 = 1;
      a2 = v30;
      result = v31;
      v7 = v29;
      while (v24 != -4)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v24 == -8;
        if (v27)
          v25 = v12;
        v28 = v23 + v26++;
        v23 = v28 & v22;
        v12 = (uint64_t *)(v21 + 16 * v23);
        v24 = *v12;
        v14 = v30;
        if (*v12 == v30)
          goto LABEL_18;
      }
      if (v25)
        v12 = v25;
      a2 = v30;
      result = v31;
      v7 = v29;
LABEL_17:
      v14 = *v12;
LABEL_18:
      ++*(_DWORD *)(result + 208);
      if (v14 != -4)
        --*(_DWORD *)(result + 212);
      *v12 = a2;
      *((_DWORD *)v12 + 2) = 0;
      goto LABEL_13;
    }
    v8 = 1;
    while (v6 != -4)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v5);
      if (v6 == a2)
        goto LABEL_10;
    }
  }
  v5 = *(unsigned int *)(result + 216);
LABEL_10:
  if (v5 == v3)
  {
    v7 = *(_DWORD *)(result + 224);
    *(_DWORD *)(result + 224) = v7 + 1;
    if (!(_DWORD)v3)
      goto LABEL_33;
    goto LABEL_12;
  }
  return result;
}

_QWORD *llvm::SlotTracker::CreateMetadataSlot(_QWORD *this, const llvm::MDNode *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  const llvm::MDNode **v9;
  const llvm::MDNode *v10;
  const llvm::MDNode *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  const llvm::MDNode *v17;
  const llvm::MDNode **v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  const llvm::MDNode **v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  const llvm::MDNode *v27;
  const llvm::MDNode **v28;
  int v29;
  BOOL v30;
  unsigned int v31;

  if (*(_BYTE *)a2 != 7)
  {
    v3 = this;
    v5 = this[21];
    this += 21;
    v4 = v5;
    v6 = *((_DWORD *)this + 6);
    v7 = *((_DWORD *)this + 4);
    if (!v7)
      goto LABEL_34;
    v8 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (const llvm::MDNode **)(v4 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
      return this;
    v18 = 0;
    v19 = 1;
    while (v10 != (const llvm::MDNode *)-4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v10 == (const llvm::MDNode *)-8192;
      if (v20)
        v18 = v9;
      v21 = v8 + v19++;
      v8 = v21 & (v7 - 1);
      v9 = (const llvm::MDNode **)(v4 + 16 * v8);
      v10 = *v9;
      if (*v9 == a2)
        return this;
    }
    v22 = v18 ? v18 : v9;
    v23 = *((_DWORD *)v3 + 44);
    if (4 * v23 + 4 < 3 * v7)
    {
      if (v7 + ~v23 - *((_DWORD *)v3 + 45) > v7 >> 3)
        goto LABEL_7;
    }
    else
    {
LABEL_34:
      v7 *= 2;
    }
    this = llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this, v7);
    v24 = v3[21];
    v25 = *((_DWORD *)v3 + 46) - 1;
    v26 = v25 & ((a2 >> 4) ^ (a2 >> 9));
    v22 = (const llvm::MDNode **)(v24 + 16 * v26);
    v27 = *v22;
    if (*v22 == a2)
    {
LABEL_36:
      ++*((_DWORD *)v3 + 44);
      if (a2 == (const llvm::MDNode *)-4096)
        goto LABEL_9;
      goto LABEL_8;
    }
    v28 = 0;
    v29 = 1;
    while (v27 != (const llvm::MDNode *)-4096)
    {
      if (v28)
        v30 = 0;
      else
        v30 = v27 == (const llvm::MDNode *)-8192;
      if (v30)
        v28 = v22;
      v31 = v26 + v29++;
      v26 = v31 & v25;
      v22 = (const llvm::MDNode **)(v24 + 16 * (v31 & v25));
      v27 = *v22;
      if (*v22 == a2)
        goto LABEL_36;
    }
    if (v28)
      v22 = v28;
LABEL_7:
    v11 = *v22;
    ++*((_DWORD *)v3 + 44);
    if (v11 == (const llvm::MDNode *)-4096)
    {
LABEL_9:
      *v22 = a2;
      *((_DWORD *)v22 + 2) = v6;
      ++*((_DWORD *)v3 + 48);
      v13 = (_QWORD *)((char *)a2 - 16);
      v12 = *((_QWORD *)a2 - 2);
      if ((v12 & 2) != 0)
      {
        v14 = *((_DWORD *)a2 - 6);
        if (!v14)
          return this;
      }
      else
      {
        v14 = (v12 >> 6) & 0xF;
        if (!v14)
          return this;
      }
      v15 = 0;
      v16 = 8 * v14;
      while (1)
      {
        if ((*v13 & 2) != 0)
        {
          v17 = *(const llvm::MDNode **)(*((_QWORD *)a2 - 4) + v15);
          if (v17)
          {
LABEL_19:
            if (*(unsigned __int8 *)v17 - 5 <= 0x1E)
              this = (_QWORD *)llvm::SlotTracker::CreateMetadataSlot((llvm::SlotTracker *)v3, v17);
          }
        }
        else
        {
          v17 = (const llvm::MDNode *)v13[v15 / 8 - ((*v13 >> 2) & 0xFLL)];
          if (v17)
            goto LABEL_19;
        }
        v15 += 8;
        if (v16 == v15)
          return this;
      }
    }
LABEL_8:
    --*((_DWORD *)v3 + 45);
    goto LABEL_9;
  }
  return this;
}

void llvm::SlotTracker::processFunctionMetadata(llvm::SlotTracker *this, const llvm::Function *a2)
{
  _QWORD *v4;
  uint64_t v5;
  const llvm::MDNode **v6;
  const llvm::MDNode *v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *i;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::MDNode *v20;
  _QWORD *v21;
  uint64_t v22;
  const llvm::MDNode **v23;
  const llvm::MDNode *v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[9];

  v27[8] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v25);
  v4 = v25;
  if ((_DWORD)v26)
  {
    v5 = 16 * v26;
    v6 = (const llvm::MDNode **)((char *)v25 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      llvm::SlotTracker::CreateMetadataSlot(this, v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v25;
  }
  if (v4 != v27)
    free(v4);
  v8 = (char *)a2 + 72;
  v9 = (char *)*((_QWORD *)a2 + 10);
  if (v9 == (char *)a2 + 72)
    return;
  while (2)
  {
    v10 = v9 - 24;
    if (!v9)
      v10 = 0;
    v11 = v10 + 48;
    for (i = (_QWORD *)*((_QWORD *)v10 + 7); i != v11; i = (_QWORD *)i[1])
    {
      if (i)
        v13 = i - 3;
      else
        v13 = 0;
      if (*((_BYTE *)v13 + 16) == 84)
      {
        v14 = *(v13 - 4);
        if (v14)
        {
          if (!*(_BYTE *)(v14 + 16) && *(_QWORD *)(v14 + 24) == v13[10] && (*(_BYTE *)(v14 + 33) & 0x20) != 0)
          {
            v15 = *((_DWORD *)v13 + 5);
            if ((v15 & 0x40000000) != 0)
            {
              v17 = (uint64_t *)*(v13 - 1);
              v16 = v15 & 0x7FFFFFF;
              if (!v16)
                goto LABEL_33;
            }
            else
            {
              v16 = v15 & 0x7FFFFFF;
              v17 = &v13[-4 * v16];
              if (!v16)
                goto LABEL_33;
            }
            v18 = 32 * v16;
            do
            {
              v19 = *v17;
              if (*v17)
              {
                if (*(_BYTE *)(v19 + 16) == 23)
                {
                  v20 = *(const llvm::MDNode **)(v19 + 24);
                  if (*(unsigned __int8 *)v20 - 5 <= 0x1E)
                    llvm::SlotTracker::CreateMetadataSlot(this, v20);
                }
              }
              v17 += 4;
              v18 -= 32;
            }
            while (v18);
          }
        }
      }
LABEL_33:
      v25 = v27;
      v26 = 0x400000000;
      if (v13[6] || (*((_BYTE *)v13 + 23) & 0x20) != 0)
      {
        llvm::Instruction::getAllMetadataImpl((mlir::BytecodeWriterConfig *)v13, (uint64_t)&v25);
        v21 = v25;
        if ((_DWORD)v26)
        {
          v22 = 16 * v26;
          v23 = (const llvm::MDNode **)((char *)v25 + 8);
          do
          {
            v24 = *v23;
            v23 += 2;
            llvm::SlotTracker::CreateMetadataSlot(this, v24);
            v22 -= 16;
          }
          while (v22);
          v21 = v25;
        }
        if (v21 != v27)
          free(v21);
      }
    }
    v9 = (char *)*((_QWORD *)v9 + 1);
    if (v9 != v8)
      continue;
    break;
  }
}

uint64_t llvm::SlotTracker::processFunction(llvm::SlotTracker *this)
{
  uint64_t v2;
  const llvm::Value *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t FnAttrs;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t result;
  char v40;
  char v41;
  uint64_t v42;
  llvm::SlotTracker *v43;

  *((_DWORD *)this + 40) = 0;
  if (!*((_BYTE *)this + 25))
  {
    llvm::SlotTracker::processFunctionMetadata(this, *((const llvm::Function **)this + 2));
    v2 = *((_QWORD *)this + 2);
    if ((*(_WORD *)(v2 + 18) & 1) == 0)
      goto LABEL_3;
LABEL_5:
    llvm::Function::BuildLazyArguments((llvm::Function *)v2);
    v4 = *((_QWORD *)this + 2);
    v3 = *(const llvm::Value **)(v2 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 2));
    v2 = v4;
    goto LABEL_8;
  }
  v2 = *((_QWORD *)this + 2);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
    goto LABEL_5;
LABEL_3:
  v3 = *(const llvm::Value **)(v2 + 88);
LABEL_8:
  v5 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  while (v3 != (const llvm::Value *)v5)
  {
    if ((*((_BYTE *)v3 + 23) & 0x10) == 0)
      llvm::SlotTracker::CreateFunctionSlot(this, v3);
    v3 = (const llvm::Value *)((char *)v3 + 40);
  }
  v6 = *((_QWORD *)this + 2);
  v7 = v6 + 72;
  v8 = *(_QWORD *)(v6 + 80);
  if (v8 == v6 + 72)
    goto LABEL_71;
  while (2)
  {
    if (v8)
      v9 = v8 - 24;
    else
      v9 = 0;
    if ((*(_BYTE *)(v9 + 23) & 0x10) == 0)
      llvm::SlotTracker::CreateFunctionSlot(this, (const llvm::Value *)v9);
    v10 = v9 + 48;
    for (i = *(_QWORD *)(v9 + 56); i != v10; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v12 = i - 24;
      else
        v12 = 0;
      if (*(_BYTE *)(*(_QWORD *)v12 + 8) != 7 && (*(_BYTE *)(v12 + 23) & 0x10) == 0)
      {
        v13 = *((_DWORD *)this + 40);
        *((_DWORD *)this + 40) = v13 + 1;
        v14 = *((_DWORD *)this + 38);
        if (!v14)
          goto LABEL_55;
        v15 = *((_QWORD *)this + 17);
        v16 = v14 - 1;
        v17 = (v14 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        v18 = (uint64_t *)(v15 + 16 * v17);
        v19 = *v18;
        if (*v18 == v12)
        {
LABEL_45:
          *((_DWORD *)v18 + 2) = v13;
          goto LABEL_46;
        }
        v20 = 0;
        v21 = 1;
        while (v19 != -4096)
        {
          if (v20)
            v22 = 0;
          else
            v22 = v19 == -8192;
          if (v22)
            v20 = v18;
          v23 = v17 + v21++;
          v17 = v23 & v16;
          v18 = (uint64_t *)(v15 + 16 * (v23 & v16));
          v19 = *v18;
          if (*v18 == v12)
            goto LABEL_45;
        }
        if (v20)
          v18 = v20;
        v30 = *((_DWORD *)this + 36);
        if (4 * v30 + 4 < 3 * v14)
        {
          if (v14 + ~v30 - *((_DWORD *)this + 37) <= v14 >> 3)
            goto LABEL_56;
        }
        else
        {
LABEL_55:
          v14 *= 2;
LABEL_56:
          llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 136, v14);
          v31 = *((_QWORD *)this + 17);
          v32 = *((_DWORD *)this + 38) - 1;
          v33 = v32 & ((v12 >> 4) ^ (v12 >> 9));
          v18 = (uint64_t *)(v31 + 16 * v33);
          v34 = *v18;
          if (*v18 == v12)
          {
LABEL_57:
            ++*((_DWORD *)this + 36);
            if (v12 == -4096)
            {
LABEL_44:
              *v18 = v12;
              *((_DWORD *)v18 + 2) = 0;
              goto LABEL_45;
            }
LABEL_43:
            --*((_DWORD *)this + 37);
            goto LABEL_44;
          }
          v35 = 0;
          v36 = 1;
          while (v34 != -4096)
          {
            if (v35)
              v37 = 0;
            else
              v37 = v34 == -8192;
            if (v37)
              v35 = v18;
            v38 = v33 + v36++;
            v33 = v38 & v32;
            v18 = (uint64_t *)(v31 + 16 * (v38 & v32));
            v34 = *v18;
            if (*v18 == v12)
              goto LABEL_57;
          }
          if (v35)
            v18 = v35;
        }
        v24 = *v18;
        ++*((_DWORD *)this + 36);
        if (v24 == -4096)
          goto LABEL_44;
        goto LABEL_43;
      }
LABEL_46:
      v25 = *(unsigned __int8 *)(v12 + 16) - 33;
      v26 = v25 > 0x33;
      v27 = (1 << v25) & 0x8000000000041;
      if (!v26 && v27 != 0)
      {
        v43 = *(llvm::SlotTracker **)(v12 + 72);
        FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v43);
        if (FnAttrs)
          llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, FnAttrs);
      }
    }
    v8 = *(_QWORD *)(v8 + 8);
    if (v8 != v7)
      continue;
    break;
  }
LABEL_71:
  result = *((_QWORD *)this + 11);
  if (result)
  {
    v40 = *((_BYTE *)this + 25);
    v42 = *((_QWORD *)this + 2);
    v43 = this;
    v41 = v40;
    result = (*(uint64_t (**)(uint64_t, llvm::SlotTracker **, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v43, &v42, &v41);
  }
  *((_BYTE *)this + 24) = 1;
  return result;
}

_QWORD *llvm::SlotTracker::CreateFunctionSlot(llvm::SlotTracker *this, const llvm::Value *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  const llvm::Value *v12;
  const llvm::Value *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  const llvm::Value *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v6 = *((_QWORD *)this + 17);
  result = (_QWORD *)((char *)this + 136);
  v5 = v6;
  v7 = *((_DWORD *)result + 6);
  *((_DWORD *)result + 6) = v7 + 1;
  v8 = *((_DWORD *)result + 4);
  if (!v8)
    goto LABEL_21;
  v9 = v8 - 1;
  v10 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = v5 + 16 * v10;
  v12 = *(const llvm::Value **)v11;
  if (*(const llvm::Value **)v11 == a2)
  {
LABEL_3:
    *(_DWORD *)(v11 + 8) = v7;
    return result;
  }
  v14 = 0;
  v15 = 1;
  while (v12 != (const llvm::Value *)-4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v12 == (const llvm::Value *)-8192;
    if (v16)
      v14 = v11;
    v17 = v10 + v15++;
    v10 = v17 & v9;
    v11 = v5 + 16 * (v17 & v9);
    v12 = *(const llvm::Value **)v11;
    if (*(const llvm::Value **)v11 == a2)
      goto LABEL_3;
  }
  if (v14)
    v11 = v14;
  v18 = *((_DWORD *)this + 36);
  if (4 * v18 + 4 < 3 * v8)
  {
    if (v8 + ~v18 - *((_DWORD *)this + 37) > v8 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v8 *= 2;
  }
  result = llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)result, v8);
  v19 = *((_QWORD *)this + 17);
  v20 = *((_DWORD *)this + 38) - 1;
  v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  v11 = v19 + 16 * v21;
  v22 = *(const llvm::Value **)v11;
  if (*(const llvm::Value **)v11 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 36);
    if (a2 == (const llvm::Value *)-4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != (const llvm::Value *)-4096)
  {
    if (v23)
      v25 = 0;
    else
      v25 = v22 == (const llvm::Value *)-8192;
    if (v25)
      v23 = v11;
    v26 = v21 + v24++;
    v21 = v26 & v20;
    v11 = v19 + 16 * (v26 & v20);
    v22 = *(const llvm::Value **)v11;
    if (*(const llvm::Value **)v11 == a2)
      goto LABEL_23;
  }
  if (v23)
    v11 = v23;
LABEL_6:
  v13 = *(const llvm::Value **)v11;
  ++*((_DWORD *)this + 36);
  if (v13 != (const llvm::Value *)-4096)
LABEL_7:
    --*((_DWORD *)this + 37);
LABEL_8:
  *(_QWORD *)v11 = a2;
  *(_DWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 8) = v7;
  return result;
}

uint64_t llvm::SlotTracker::getMetadataSlot(llvm::SlotTracker *this, const llvm::MDNode *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::MDNode *v8;
  int v9;
  int v10;

  if (*((_QWORD *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
  {
    llvm::SlotTracker::processFunction(this);
    v4 = *((_QWORD *)this + 21);
    v5 = *((unsigned int *)this + 46);
    if (!(_DWORD)v5)
      goto LABEL_12;
  }
  else
  {
    v4 = *((_QWORD *)this + 21);
    v5 = *((unsigned int *)this + 46);
    if (!(_DWORD)v5)
      goto LABEL_12;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = v4 + 16 * v6;
  v8 = *(const llvm::MDNode **)v7;
  if (*(const llvm::MDNode **)v7 == a2)
    goto LABEL_13;
  v9 = 1;
  while (v8 != (const llvm::MDNode *)-4096)
  {
    v10 = v6 + v9++;
    v6 = v10 & (v5 - 1);
    v8 = *(const llvm::MDNode **)(v4 + 16 * v6);
    if (v8 == a2)
    {
      v7 = v4 + 16 * v6;
      goto LABEL_13;
    }
  }
LABEL_12:
  v7 = v4 + 16 * v5;
LABEL_13:
  if (v7 == v4 + 16 * v5)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v7 + 8);
}

uint64_t llvm::SlotTracker::getAttributeGroupSlot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  if (*(_QWORD *)(a1 + 8))
  {
    llvm::SlotTracker::processModule((llvm::SlotTracker *)a1);
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (*(_QWORD *)(a1 + 16) && !*(_BYTE *)(a1 + 24))
  {
    llvm::SlotTracker::processFunction((llvm::SlotTracker *)a1);
    v4 = *(_QWORD *)(a1 + 200);
    v5 = *(unsigned int *)(a1 + 216);
    if (!(_DWORD)v5)
      goto LABEL_12;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 200);
    v5 = *(unsigned int *)(a1 + 216);
    if (!(_DWORD)v5)
      goto LABEL_12;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (uint64_t *)(v4 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
    goto LABEL_13;
  v9 = 1;
  while (v8 != -4)
  {
    v10 = v6 + v9++;
    v6 = v10 & (v5 - 1);
    v8 = *(_QWORD *)(v4 + 16 * v6);
    if (v8 == a2)
    {
      v7 = (uint64_t *)(v4 + 16 * v6);
      goto LABEL_13;
    }
  }
LABEL_12:
  v7 = (uint64_t *)(v4 + 16 * v5);
LABEL_13:
  if (v7 == (uint64_t *)(v4 + 16 * v5))
    return 0xFFFFFFFFLL;
  else
    return *((unsigned int *)v7 + 2);
}

uint64_t `anonymous namespace'::AssemblyWriter::AssemblyWriter(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Module *this, uint64_t a5, char a6, char a7)
{
  int64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[31];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = this;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = this;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  v8 = (int64x2_t *)(a1 + 232);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a5;
  *(_BYTE *)(a1 + 272) = a6;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 272;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 273) = a7;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 304) = a1 + 320;
  *(_QWORD *)(a1 + 312) = 0x800000000;
  *(_QWORD *)(a1 + 448) = a1 + 464;
  *(_QWORD *)(a1 + 456) = 0x800000000;
  *(_DWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  if (this)
  {
    v25 = a1 + 256;
    v26 = (void *)(a1 + 272);
    llvm::Module::global_objects((uint64_t)this, &v31);
    v9 = *((_QWORD *)&v31 + 1);
    v11 = v31;
    v29 = v11 >> 64;
    v10 = v11;
    v30 = v31;
    v12 = v32;
    v13 = v33;
    v14 = v34;
    v15 = v35;
    v27 = v36;
    if (v31 != v34 || v32 != v35 || v33 != v36)
    {
      while (1)
      {
        v16 = v10 - 56;
        v17 = v9 - 56;
        if (v9 == v13 || v9 == 0)
          v17 = 0;
        if (v10 == v12 || v10 == 0)
          v16 = v17;
        v28 = *(_QWORD *)(v16 + 48);
        if (v28)
        {
          llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v8, &v28, (uint64_t)v37);
          if (v37[16])
          {
            v20 = v28;
            v21 = *(unsigned int *)(a1 + 264);
            if (v21 >= *(unsigned int *)(a1 + 268))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v25, v26, v21 + 1, 8);
              v21 = *(unsigned int *)(a1 + 264);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v21) = v20;
            ++*(_DWORD *)(a1 + 264);
          }
        }
        if (v10 == v12)
        {
          v23 = v13;
          v10 = v12;
          if (v9 == v13)
            goto LABEL_27;
          v22 = &v29;
          v10 = v9;
        }
        else
        {
          v22 = &v30;
        }
        *v22 = *(_QWORD *)(v10 + 8);
        v23 = v29;
        v10 = v30;
LABEL_27:
        v9 = v23;
        if (v10 == (_QWORD)v14)
        {
          v9 = v23;
          if (v23 == *((_QWORD *)&v14 + 1))
          {
            v9 = v23;
            if (v12 == v15)
            {
              v9 = v23;
              if (v13 == v27)
                return a1;
            }
          }
        }
      }
    }
  }
  return a1;
}

void `anonymous namespace'::AssemblyWriter::printFunction(_anonymous_namespace_::AssemblyWriter *this, const llvm::Function *a2)
{
  int v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::Attribute *v8;
  uint64_t v9;
  llvm::Attribute *v10;
  std::string::size_type size;
  const std::string::value_type *p_p;
  std::string::size_type v13;
  std::string::size_type v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  std::string *v17;
  size_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  uint64_t v21;
  _BOOL4 isDeclaration;
  llvm::raw_ostream *v23;
  _DWORD *v24;
  unint64_t v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  void *v28;
  llvm::raw_ostream *v29;
  std::string *v30;
  size_t v31;
  int v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  int v35;
  llvm::raw_ostream *v36;
  _DWORD *v37;
  int v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  unsigned int v43;
  uint64_t v44;
  const char *v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  llvm::raw_ostream *v48;
  std::string *v49;
  size_t v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  llvm::raw_ostream *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  llvm::raw_ostream *v62;
  _WORD *v63;
  uint64_t ParamAttrs;
  llvm::raw_ostream *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  llvm::raw_ostream *v75;
  _BYTE *v76;
  llvm::raw_ostream *v77;
  llvm::raw_ostream *Name;
  size_t v79;
  size_t v80;
  char *v81;
  unint64_t v82;
  char v83;
  llvm::raw_ostream *v84;
  char v85;
  unint64_t v86;
  llvm::raw_ostream *v87;
  _WORD *v88;
  llvm::raw_ostream *v89;
  int v90;
  uint64_t v91;
  llvm::raw_ostream *v92;
  _BYTE *v93;
  llvm::raw_ostream *v94;
  _WORD *v95;
  llvm::raw_ostream *v96;
  uint64_t v97;
  llvm::raw_ostream *v98;
  _BYTE *v99;
  int v100;
  const char *v101;
  size_t v102;
  llvm::raw_ostream *v103;
  _BYTE *v104;
  void *v105;
  uint64_t v106;
  llvm::raw_ostream *v107;
  uint64_t v108;
  llvm::raw_ostream *v109;
  _BYTE *v110;
  llvm::raw_ostream *v111;
  _WORD *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  llvm::raw_ostream *v117;
  _DWORD *v118;
  llvm::raw_ostream *v119;
  llvm::raw_ostream *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t *GC;
  int v130;
  const char *v131;
  size_t v132;
  llvm::raw_ostream *v133;
  _BYTE *v134;
  __int16 v135;
  llvm::raw_ostream *v136;
  _QWORD *v137;
  Type **PrefixData;
  BOOL v139;
  llvm::raw_ostream *v140;
  uint64_t v141;
  Type **PrologueData;
  BOOL v143;
  llvm::raw_ostream *v144;
  void *v145;
  Type **PersonalityFn;
  BOOL v147;
  uint64_t v148;
  BOOL v149;
  llvm::raw_ostream *v150;
  _WORD *v151;
  char *v152;
  char *v153;
  const llvm::BasicBlock *v154;
  llvm::raw_ostream *v155;
  _WORD *v156;
  void *v157;
  llvm::raw_ostream *v158;
  uint64_t v159;
  llvm::raw_ostream *SectionImpl;
  uint64_t v161;
  llvm::raw_ostream *v162;
  _BYTE *v163;
  llvm::raw_ostream *v164;
  uint64_t v165;
  llvm::raw_ostream *Partition;
  uint64_t v167;
  llvm::raw_ostream *v168;
  _BYTE *v169;
  llvm::raw_ostream *v170;
  _BYTE *v171;
  uint64_t v172;
  int v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  llvm::raw_ostream *v185;
  _WORD *v186;
  llvm::raw_ostream *v187;
  _BYTE *v188;
  int v189;
  uint64_t v190;
  void *__p;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t FnAttrs;
  uint64_t v196;
  std::string v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)a2 + 120);
  if (*((_BYTE *)a2 + 120))
    llvm::Function::convertFromNewDbgValues(a2);
  v5 = *((_QWORD *)this + 28);
  if (v5)
    (*(void (**)(uint64_t, const llvm::Function *, _QWORD))(*(_QWORD *)v5 + 16))(v5, a2, *(_QWORD *)this);
  if ((*((_BYTE *)a2 + 35) & 1) != 0)
  {
    v6 = *(llvm::raw_ostream **)this;
    v7 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v7) > 0x10)
    {
      *(_BYTE *)(v7 + 16) = 10;
      *(_OWORD *)v7 = *(_OWORD *)"; Materializable\n";
      *((_QWORD *)v6 + 4) += 17;
      v196 = *((_QWORD *)a2 + 14);
      if (!llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v196, -1))
        goto LABEL_43;
      goto LABEL_9;
    }
    llvm::raw_ostream::write(v6, "; Materializable\n", 0x11uLL);
  }
  v196 = *((_QWORD *)a2 + 14);
  if (!llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v196, -1))
    goto LABEL_43;
LABEL_9:
  FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v196);
  memset(&v197, 0, sizeof(v197));
  v8 = (llvm::Attribute *)llvm::AttributeSet::begin((llvm::AttributeSet *)&FnAttrs);
  v9 = llvm::AttributeSet::end((llvm::AttributeSet *)&FnAttrs);
  if (v8 != (llvm::Attribute *)v9)
  {
    v10 = (llvm::Attribute *)v9;
    do
    {
      if (!llvm::Attribute::isStringAttribute(v8))
      {
        size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
        if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v197.__r_.__value_.__l.__size_;
        if (size)
          std::string::push_back(&v197, 32);
        llvm::Attribute::getAsString(v8, 0, (uint64_t)&__p);
        if (v193 >= 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if (v193 >= 0)
          v13 = HIBYTE(v193);
        else
          v13 = (std::string::size_type)v192;
        std::string::append(&v197, p_p, v13);
        if (SHIBYTE(v193) < 0)
          operator delete(__p);
      }
      v8 = (llvm::Attribute *)((char *)v8 + 8);
    }
    while (v8 != v10);
  }
  v14 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = v197.__r_.__value_.__l.__size_;
  if (!v14)
  {
LABEL_41:
    if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  v15 = *(llvm::raw_ostream **)this;
  v16 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v16) > 0x11)
  {
    *(_WORD *)(v16 + 16) = 8250;
    *(_OWORD *)v16 = *(_OWORD *)"; Function Attrs: ";
    *((_QWORD *)v15 + 4) += 18;
  }
  else
  {
    v15 = llvm::raw_ostream::write(v15, "; Function Attrs: ", 0x12uLL);
  }
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v197;
  else
    v17 = (std::string *)v197.__r_.__value_.__r.__words[0];
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
  else
    v18 = v197.__r_.__value_.__l.__size_;
  v19 = llvm::raw_ostream::write(v15, (const char *)v17, v18);
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if ((unint64_t)v20 < *((_QWORD *)v19 + 3))
  {
    *((_QWORD *)v19 + 4) = v20 + 1;
    *v20 = 10;
    goto LABEL_41;
  }
  llvm::raw_ostream::write(v19, 10);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
LABEL_42:
    operator delete(v197.__r_.__value_.__l.__data_);
LABEL_43:
  v21 = *((_QWORD *)this + 4);
  *(_QWORD *)(v21 + 16) = a2;
  *(_BYTE *)(v21 + 24) = 0;
  isDeclaration = llvm::GlobalValue::isDeclaration(a2);
  v23 = *(llvm::raw_ostream **)this;
  v24 = *(_DWORD **)(*(_QWORD *)this + 32);
  v25 = *(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v24;
  if (!isDeclaration)
  {
    if (v25 > 6)
    {
      *(_DWORD *)((char *)v24 + 3) = 543518313;
      *v24 = 1768318308;
      *((_QWORD *)v23 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v23, "define ", 7uLL);
    }
    goto LABEL_55;
  }
  if (v25 > 6)
  {
    *(_DWORD *)((char *)v24 + 3) = 1701994860;
    *v24 = 1818453348;
    *((_QWORD *)v23 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v23, "declare", 7uLL);
  }
  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197.__r_.__value_.__r.__words[2];
  v197.__r_.__value_.__l.__size_ = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v197);
  v26 = *(llvm::raw_ostream **)this;
  v27 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v27 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v26, 32);
    v28 = (void *)v197.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v197.__r_.__value_.__l.__data_ == &v197.__r_.__value_.__r.__words[2])
      goto LABEL_55;
    goto LABEL_54;
  }
  *((_QWORD *)v26 + 4) = v27 + 1;
  *v27 = 32;
  v28 = (void *)v197.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v197.__r_.__value_.__l.__data_ != &v197.__r_.__value_.__r.__words[2])
LABEL_54:
    free(v28);
LABEL_55:
  v29 = *(llvm::raw_ostream **)this;
  getLinkageNameWithSpace(&v197, *((_DWORD *)a2 + 8) & 0xF);
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v197;
  else
    v30 = (std::string *)v197.__r_.__value_.__r.__words[0];
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
  else
    v31 = v197.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v29, (const char *)v30, v31);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v197.__r_.__value_.__l.__data_);
    v32 = *((_DWORD *)a2 + 8);
    if ((v32 & 0x4000) == 0)
      goto LABEL_70;
  }
  else
  {
    v32 = *((_DWORD *)a2 + 8);
    if ((v32 & 0x4000) == 0)
      goto LABEL_70;
  }
  if ((v32 & 0xFu) - 7 < 2
    || (v33 = *(llvm::raw_ostream **)this, (v32 & 0x30) != 0)
    && !llvm::GlobalValue::hasExternalWeakLinkage(a2))
  {
LABEL_70:
    v35 = (*((_DWORD *)a2 + 8) >> 4) & 3;
    v36 = *(llvm::raw_ostream **)this;
    if (v35 != 2)
      goto LABEL_71;
LABEL_80:
    v40 = *((_QWORD *)v36 + 4);
    if ((unint64_t)(*((_QWORD *)v36 + 3) - v40) > 9)
    {
      *(_WORD *)(v40 + 8) = 8292;
      *(_QWORD *)v40 = *(_QWORD *)"protected ";
      *((_QWORD *)v36 + 4) += 10;
      v38 = (*((_DWORD *)a2 + 8) >> 8) & 3;
      v39 = *(llvm::raw_ostream **)this;
      if (v38 != 2)
        goto LABEL_83;
      goto LABEL_87;
    }
    llvm::raw_ostream::write(v36, "protected ", 0xAuLL);
LABEL_82:
    v38 = (*((_DWORD *)a2 + 8) >> 8) & 3;
    v39 = *(llvm::raw_ostream **)this;
    if (v38 != 2)
      goto LABEL_83;
LABEL_87:
    v41 = *((_QWORD *)v39 + 4);
    if ((unint64_t)(*((_QWORD *)v39 + 3) - v41) <= 9)
    {
      v42 = "dllexport ";
      goto LABEL_89;
    }
    v45 = "dllexport ";
    goto LABEL_95;
  }
  v34 = *((_QWORD *)v33 + 4);
  if ((unint64_t)(*((_QWORD *)v33 + 3) - v34) <= 9)
  {
    llvm::raw_ostream::write(v33, "dso_local ", 0xAuLL);
    goto LABEL_70;
  }
  *(_WORD *)(v34 + 8) = 8300;
  *(_QWORD *)v34 = *(_QWORD *)"dso_local ";
  *((_QWORD *)v33 + 4) += 10;
  v35 = (*((_DWORD *)a2 + 8) >> 4) & 3;
  v36 = *(llvm::raw_ostream **)this;
  if (v35 == 2)
    goto LABEL_80;
LABEL_71:
  if (v35 != 1)
    goto LABEL_82;
  v37 = (_DWORD *)*((_QWORD *)v36 + 4);
  if (*((_QWORD *)v36 + 3) - (_QWORD)v37 > 6uLL)
  {
    *(_DWORD *)((char *)v37 + 3) = 544105828;
    *v37 = 1684302184;
    *((_QWORD *)v36 + 4) += 7;
    v38 = (*((_DWORD *)a2 + 8) >> 8) & 3;
    v39 = *(llvm::raw_ostream **)this;
    if (v38 == 2)
      goto LABEL_87;
  }
  else
  {
    llvm::raw_ostream::write(v36, "hidden ", 7uLL);
    v38 = (*((_DWORD *)a2 + 8) >> 8) & 3;
    v39 = *(llvm::raw_ostream **)this;
    if (v38 == 2)
      goto LABEL_87;
  }
LABEL_83:
  if (v38 != 1)
    goto LABEL_90;
  v41 = *((_QWORD *)v39 + 4);
  if ((unint64_t)(*((_QWORD *)v39 + 3) - v41) <= 9)
  {
    v42 = "dllimport ";
LABEL_89:
    llvm::raw_ostream::write(v39, v42, 0xAuLL);
LABEL_90:
    v43 = (*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FF;
    if (!v43)
      goto LABEL_91;
    goto LABEL_96;
  }
  v45 = "dllimport ";
LABEL_95:
  *(_WORD *)(v41 + 8) = 8308;
  *(_QWORD *)v41 = *(_QWORD *)v45;
  *((_QWORD *)v39 + 4) += 10;
  v43 = (*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FF;
  if (!v43)
  {
LABEL_91:
    v44 = *((_QWORD *)a2 + 3);
    if (!llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v196, 0))
      goto LABEL_111;
    goto LABEL_100;
  }
LABEL_96:
  PrintCallingConv(v43, *(llvm::raw_ostream **)this);
  v46 = *(llvm::raw_ostream **)this;
  v47 = *(_BYTE **)(*(_QWORD *)this + 32);
  if (*(_BYTE **)(*(_QWORD *)this + 24) == v47)
  {
    llvm::raw_ostream::write(v46, " ", 1uLL);
    v44 = *((_QWORD *)a2 + 3);
    if (!llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v196, 0))
      goto LABEL_111;
  }
  else
  {
    *v47 = 32;
    ++*((_QWORD *)v46 + 4);
    v44 = *((_QWORD *)a2 + 3);
    if (!llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v196, 0))
      goto LABEL_111;
  }
LABEL_100:
  v48 = *(llvm::raw_ostream **)this;
  llvm::AttributeList::getAsString((llvm::AttributeList *)&v196, 0, 0, (uint64_t)&v197);
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &v197;
  else
    v49 = (std::string *)v197.__r_.__value_.__r.__words[0];
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
  else
    v50 = v197.__r_.__value_.__l.__size_;
  v51 = llvm::raw_ostream::write(v48, (const char *)v49, v50);
  v52 = (_BYTE *)*((_QWORD *)v51 + 4);
  if ((unint64_t)v52 >= *((_QWORD *)v51 + 3))
  {
    llvm::raw_ostream::write(v51, 32);
    if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_111;
  }
  else
  {
    *((_QWORD *)v51 + 4) = v52 + 1;
    *v52 = 32;
    if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_111;
  }
  operator delete(v197.__r_.__value_.__l.__data_);
LABEL_111:
  v54 = *((_QWORD *)this + 4);
  v55 = *((_QWORD *)a2 + 5);
  __p = &off_1E0E15E00;
  v192 = (char *)this + 40;
  v193 = v54;
  v194 = v55;
  v56 = *(llvm::raw_ostream **)this;
  v57 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v57 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v56, 32);
  }
  else
  {
    *((_QWORD *)v56 + 4) = v57 + 1;
    *v57 = 32;
  }
  WriteAsOperandInternal(*(llvm::raw_ostream **)this, a2, (_anonymous_namespace_::TypePrinting **)&__p, v53);
  v58 = *(llvm::raw_ostream **)this;
  v59 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v59 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v58, 40);
    v190 = v44;
    v189 = v4;
    if (!llvm::GlobalValue::isDeclaration(a2))
      goto LABEL_119;
  }
  else
  {
    *((_QWORD *)v58 + 4) = v59 + 1;
    *v59 = 40;
    v190 = v44;
    v189 = v4;
    if (!llvm::GlobalValue::isDeclaration(a2))
      goto LABEL_119;
  }
  if (!*((_BYTE *)this + 272))
  {
    v90 = *(_DWORD *)(v44 + 12);
    v91 = (v90 - 1);
    if (v90 != 1)
    {
      v197.__r_.__value_.__r.__words[0] = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v196, 0);
      if (v197.__r_.__value_.__r.__words[0])
      {
        v92 = *(llvm::raw_ostream **)this;
        v93 = *(_BYTE **)(*(_QWORD *)this + 32);
        if ((unint64_t)v93 >= *(_QWORD *)(*(_QWORD *)this + 24))
        {
          llvm::raw_ostream::write(v92, 32);
        }
        else
        {
          *((_QWORD *)v92 + 4) = v93 + 1;
          *v93 = 32;
        }
      }
      if ((_DWORD)v91 != 1)
      {
        v184 = 0;
        do
        {
          v185 = *(llvm::raw_ostream **)this;
          v186 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v186 > 1uLL)
          {
            *v186 = 8236;
            *((_QWORD *)v185 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v185, ", ", 2uLL);
          }
          v197.__r_.__value_.__r.__words[0] = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v196, (int)v184 + 1);
          if (v197.__r_.__value_.__r.__words[0])
          {
            v187 = *(llvm::raw_ostream **)this;
            v188 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v188 < *(_QWORD *)(*(_QWORD *)this + 24))
            {
              *((_QWORD *)v187 + 4) = v188 + 1;
              *v188 = 32;
            }
            else
            {
              llvm::raw_ostream::write(v187, 32);
            }
          }
          ++v184;
        }
        while (v91 - 1 != v184);
      }
    }
    goto LABEL_177;
  }
LABEL_119:
  if ((*((_WORD *)a2 + 9) & 1) == 0)
  {
    v60 = *((_QWORD *)a2 + 11);
    v61 = v60 + 40 * *((_QWORD *)a2 + 12);
    if (v60 != v61)
      goto LABEL_128;
    goto LABEL_177;
  }
  llvm::Function::BuildLazyArguments(a2);
  v60 = *((_QWORD *)a2 + 11);
  if ((*((_WORD *)a2 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(a2);
    v61 = *((_QWORD *)a2 + 11) + 40 * *((_QWORD *)a2 + 12);
    if (v60 == v61)
      goto LABEL_177;
    while (1)
    {
      while (1)
      {
LABEL_128:
        if (*(_DWORD *)(v60 + 32))
        {
          v62 = *(llvm::raw_ostream **)this;
          v63 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v63 > 1uLL)
          {
            *v63 = 8236;
            *((_QWORD *)v62 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v62, ", ", 2uLL);
          }
        }
        ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v196, *(_DWORD *)(v60 + 32));
        v197.__r_.__value_.__r.__words[0] = ParamAttrs;
        if (ParamAttrs)
        {
          v65 = *(llvm::raw_ostream **)this;
          v66 = *(_BYTE **)(*(_QWORD *)this + 32);
          if ((unint64_t)v66 >= *(_QWORD *)(*(_QWORD *)this + 24))
          {
            llvm::raw_ostream::write(v65, 32);
          }
          else
          {
            *((_QWORD *)v65 + 4) = v66 + 1;
            *v66 = 32;
          }
        }
        if ((*(_BYTE *)(v60 + 23) & 0x10) != 0)
          break;
        v67 = *((_QWORD *)this + 4);
        if (*(_QWORD *)(v67 + 8))
        {
          llvm::SlotTracker::processModule(*((llvm::SlotTracker **)this + 4));
          *(_QWORD *)(v67 + 8) = 0;
        }
        if (*(_QWORD *)(v67 + 16) && !*(_BYTE *)(v67 + 24))
        {
          llvm::SlotTracker::processFunction((llvm::SlotTracker *)v67);
          v68 = *(_QWORD *)(v67 + 136);
          v69 = *(unsigned int *)(v67 + 152);
          if (!(_DWORD)v69)
            goto LABEL_163;
        }
        else
        {
          v68 = *(_QWORD *)(v67 + 136);
          v69 = *(unsigned int *)(v67 + 152);
          if (!(_DWORD)v69)
            goto LABEL_163;
        }
        LODWORD(v70) = (v69 - 1) & ((v60 >> 4) ^ (v60 >> 9));
        v71 = (uint64_t *)(v68 + 16 * v70);
        v72 = *v71;
        if (*v71 != v60)
        {
          v73 = 1;
          while (v72 != -4096)
          {
            v74 = v70 + v73++;
            v70 = v74 & (v69 - 1);
            v72 = *(_QWORD *)(v68 + 16 * v70);
            if (v72 == v60)
            {
              v71 = (uint64_t *)(v68 + 16 * v70);
              goto LABEL_164;
            }
          }
LABEL_163:
          v71 = (uint64_t *)(v68 + 16 * v69);
        }
LABEL_164:
        if (v71 == (uint64_t *)(v68 + 16 * v69))
        {
          v86 = -1;
          v87 = *(llvm::raw_ostream **)this;
          v88 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v88 > 1uLL)
            goto LABEL_127;
LABEL_168:
          v89 = llvm::raw_ostream::write(v87, " %", 2uLL);
          llvm::raw_ostream::operator<<(v89, v86);
          v60 += 40;
          if (v60 == v61)
            goto LABEL_177;
        }
        else
        {
          v86 = *((int *)v71 + 2);
          v87 = *(llvm::raw_ostream **)this;
          v88 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v88 <= 1uLL)
            goto LABEL_168;
LABEL_127:
          *v88 = 9504;
          *((_QWORD *)v87 + 4) += 2;
          llvm::raw_ostream::operator<<(v87, v86);
          v60 += 40;
          if (v60 == v61)
            goto LABEL_177;
        }
      }
      v75 = *(llvm::raw_ostream **)this;
      v76 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v76 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(v75, 32);
      }
      else
      {
        *((_QWORD *)v75 + 4) = v76 + 1;
        *v76 = 32;
      }
      v77 = *(llvm::raw_ostream **)this;
      Name = (llvm::raw_ostream *)llvm::Value::getName((llvm::Value *)v60);
      v80 = v79;
      v82 = *((_QWORD *)v77 + 3);
      v81 = (char *)*((_QWORD *)v77 + 4);
      if (*(unsigned __int8 *)(v60 + 16) > 3u)
      {
        if ((unint64_t)v81 >= v82)
        {
          v84 = v77;
          v85 = 37;
          goto LABEL_159;
        }
        *((_QWORD *)v77 + 4) = v81 + 1;
        v83 = 37;
      }
      else
      {
        if ((unint64_t)v81 >= v82)
        {
          v84 = v77;
          v85 = 64;
LABEL_159:
          llvm::raw_ostream::write(v84, v85);
          goto LABEL_160;
        }
        *((_QWORD *)v77 + 4) = v81 + 1;
        v83 = 64;
      }
      *v81 = v83;
LABEL_160:
      llvm::printLLVMNameWithoutPrefix(v77, Name, v80);
      v60 += 40;
      if (v60 == v61)
        goto LABEL_177;
    }
  }
  v61 = v60 + 40 * *((_QWORD *)a2 + 12);
  if (v60 != v61)
    goto LABEL_128;
LABEL_177:
  if (*(_DWORD *)(v190 + 8) < 0x100u)
    goto LABEL_183;
  if (*(_DWORD *)(v190 + 12) != 1)
  {
    v94 = *(llvm::raw_ostream **)this;
    v95 = *(_WORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v95 > 1uLL)
    {
      *v95 = 8236;
      *((_QWORD *)v94 + 4) += 2;
      v96 = *(llvm::raw_ostream **)this;
      v97 = *(_QWORD *)(*(_QWORD *)this + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v97) <= 2)
        goto LABEL_182;
      goto LABEL_187;
    }
    llvm::raw_ostream::write(v94, ", ", 2uLL);
  }
  v96 = *(llvm::raw_ostream **)this;
  v97 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v97) <= 2)
  {
LABEL_182:
    llvm::raw_ostream::write(v96, "...", 3uLL);
LABEL_183:
    v98 = *(llvm::raw_ostream **)this;
    v99 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v99 < *(_QWORD *)(*(_QWORD *)this + 24))
      goto LABEL_184;
LABEL_188:
    llvm::raw_ostream::write(v98, 41);
    v100 = *((_DWORD *)a2 + 8) >> 6;
    if (!(*((_DWORD *)a2 + 8) >> 6))
      goto LABEL_193;
    goto LABEL_189;
  }
LABEL_187:
  *(_BYTE *)(v97 + 2) = 46;
  *(_WORD *)v97 = 11822;
  *((_QWORD *)v96 + 4) += 3;
  v98 = *(llvm::raw_ostream **)this;
  v99 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v99 >= *(_QWORD *)(*(_QWORD *)this + 24))
    goto LABEL_188;
LABEL_184:
  *((_QWORD *)v98 + 4) = v99 + 1;
  *v99 = 41;
  v100 = *((_DWORD *)a2 + 8) >> 6;
  if (!(*((_DWORD *)a2 + 8) >> 6))
  {
LABEL_193:
    if (*(_DWORD *)(*(_QWORD *)a2 + 8) > 0xFFu)
      goto LABEL_200;
    goto LABEL_198;
  }
LABEL_189:
  if (v100 == 1)
  {
    v101 = "local_unnamed_addr";
    v102 = 18;
    v103 = *(llvm::raw_ostream **)this;
    v104 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v104 >= *(_QWORD *)(*(_QWORD *)this + 24))
      goto LABEL_191;
LABEL_196:
    *((_QWORD *)v103 + 4) = v104 + 1;
    *v104 = 32;
    v105 = (void *)*((_QWORD *)v103 + 4);
    if (v102 <= *((_QWORD *)v103 + 3) - (_QWORD)v105)
      goto LABEL_192;
    goto LABEL_197;
  }
  v101 = "unnamed_addr";
  v102 = 12;
  v103 = *(llvm::raw_ostream **)this;
  v104 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v104 < *(_QWORD *)(*(_QWORD *)this + 24))
    goto LABEL_196;
LABEL_191:
  v103 = llvm::raw_ostream::write(v103, 32);
  v105 = (void *)*((_QWORD *)v103 + 4);
  if (v102 <= *((_QWORD *)v103 + 3) - (_QWORD)v105)
  {
LABEL_192:
    memcpy(v105, v101, v102);
    *((_QWORD *)v103 + 4) += v102;
    goto LABEL_193;
  }
LABEL_197:
  llvm::raw_ostream::write(v103, v101, v102);
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) > 0xFFu)
    goto LABEL_200;
LABEL_198:
  v106 = *((_QWORD *)a2 + 5);
  if (v106 && !*(_DWORD *)(v106 + 268))
  {
LABEL_205:
    if (llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v196, -1))
      goto LABEL_206;
LABEL_210:
    if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
      goto LABEL_270;
    goto LABEL_211;
  }
LABEL_200:
  v107 = *(llvm::raw_ostream **)this;
  v108 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v108) > 0xA)
  {
    *(_DWORD *)(v108 + 7) = 677733217;
    *(_QWORD *)v108 = *(_QWORD *)" addrspace(";
    *((_QWORD *)v107 + 4) += 11;
  }
  else
  {
    v107 = llvm::raw_ostream::write(v107, " addrspace(", 0xBuLL);
  }
  v109 = llvm::raw_ostream::operator<<(v107, (unint64_t)*(unsigned int *)(*(_QWORD *)a2 + 8) >> 8);
  v110 = (_BYTE *)*((_QWORD *)v109 + 4);
  if (*((_BYTE **)v109 + 3) != v110)
  {
    *v110 = 41;
    ++*((_QWORD *)v109 + 4);
    goto LABEL_205;
  }
  llvm::raw_ostream::write(v109, ")", 1uLL);
  if (!llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v196, -1))
    goto LABEL_210;
LABEL_206:
  v111 = *(llvm::raw_ostream **)this;
  v112 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v112 <= 1uLL)
  {
    v111 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " #", 2uLL);
    v113 = *((_QWORD *)this + 4);
    v114 = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v196);
    if (!*(_QWORD *)(v113 + 8))
      goto LABEL_221;
    goto LABEL_220;
  }
  *v112 = 8992;
  *((_QWORD *)v111 + 4) += 2;
  v113 = *((_QWORD *)this + 4);
  v114 = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v196);
  if (*(_QWORD *)(v113 + 8))
  {
LABEL_220:
    llvm::SlotTracker::processModule((llvm::SlotTracker *)v113);
    *(_QWORD *)(v113 + 8) = 0;
  }
LABEL_221:
  if (*(_QWORD *)(v113 + 16) && !*(_BYTE *)(v113 + 24))
  {
    llvm::SlotTracker::processFunction((llvm::SlotTracker *)v113);
    v122 = *(_QWORD *)(v113 + 200);
    v123 = *(unsigned int *)(v113 + 216);
    if (!(_DWORD)v123)
      goto LABEL_267;
  }
  else
  {
    v122 = *(_QWORD *)(v113 + 200);
    v123 = *(unsigned int *)(v113 + 216);
    if (!(_DWORD)v123)
      goto LABEL_267;
  }
  LODWORD(v124) = (v123 - 1) & ((v114 >> 4) ^ (v114 >> 9));
  v125 = (uint64_t *)(v122 + 16 * v124);
  v126 = *v125;
  if (*v125 == v114)
    goto LABEL_268;
  v127 = 1;
  while (v126 != -4)
  {
    v128 = v124 + v127++;
    v124 = v128 & (v123 - 1);
    v126 = *(_QWORD *)(v122 + 16 * v124);
    if (v126 == v114)
    {
      v125 = (uint64_t *)(v122 + 16 * v124);
      goto LABEL_268;
    }
  }
LABEL_267:
  v125 = (uint64_t *)(v122 + 16 * v123);
LABEL_268:
  if (v125 != (uint64_t *)(v122 + 16 * v123))
  {
    llvm::raw_ostream::operator<<(v111, *((int *)v125 + 2));
    if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
      goto LABEL_270;
LABEL_211:
    if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
      goto LABEL_274;
    goto LABEL_212;
  }
  llvm::raw_ostream::operator<<(v111, 0xFFFFFFFFFFFFFFFFLL);
  if ((*((_BYTE *)a2 + 34) & 0x80) == 0)
    goto LABEL_211;
LABEL_270:
  v158 = *(llvm::raw_ostream **)this;
  v159 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v159) > 9)
  {
    *(_WORD *)(v159 + 8) = 8736;
    *(_QWORD *)v159 = *(_QWORD *)" section \"";
    *((_QWORD *)v158 + 4) += 10;
    if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
    {
LABEL_272:
      SectionImpl = llvm::GlobalObject::getSectionImpl(a2);
      llvm::printEscapedString(SectionImpl, v161, *(llvm::raw_ostream **)this);
      v162 = *(llvm::raw_ostream **)this;
      v163 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v163 >= *(_QWORD *)(*(_QWORD *)this + 24))
        goto LABEL_273;
      goto LABEL_278;
    }
  }
  else
  {
    llvm::raw_ostream::write(v158, " section \"", 0xAuLL);
    if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
      goto LABEL_272;
  }
  llvm::printEscapedString(0, 0, *(llvm::raw_ostream **)this);
  v162 = *(llvm::raw_ostream **)this;
  v163 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v163 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
LABEL_273:
    llvm::raw_ostream::write(v162, 34);
    if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
      goto LABEL_274;
LABEL_212:
    maybePrintComdat(*(llvm::raw_ostream **)this, a2);
    v115 = (*((_DWORD *)a2 + 8) >> 17) & 0x3F;
    if (!v115)
      goto LABEL_285;
    goto LABEL_213;
  }
LABEL_278:
  *((_QWORD *)v162 + 4) = v163 + 1;
  *v163 = 34;
  if ((*((_BYTE *)a2 + 33) & 0x80) == 0)
    goto LABEL_212;
LABEL_274:
  v164 = *(llvm::raw_ostream **)this;
  v165 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v165) > 0xB)
  {
    *(_DWORD *)(v165 + 8) = 572550767;
    *(_QWORD *)v165 = *(_QWORD *)" partition \"";
    *((_QWORD *)v164 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v164, " partition \"", 0xCuLL);
  }
  Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition(a2);
  llvm::printEscapedString(Partition, v167, *(llvm::raw_ostream **)this);
  v168 = *(llvm::raw_ostream **)this;
  v169 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v169 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v168, 34);
    maybePrintComdat(*(llvm::raw_ostream **)this, a2);
    v115 = (*((_DWORD *)a2 + 8) >> 17) & 0x3F;
    if (!v115)
      goto LABEL_285;
LABEL_213:
    v116 = v115 - 1;
    v117 = *(llvm::raw_ostream **)this;
    v118 = *(_DWORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v118 > 6uLL)
    {
      *(_DWORD *)((char *)v118 + 3) = 544106345;
      *v118 = 1768710432;
      *((_QWORD *)v117 + 4) += 7;
      llvm::raw_ostream::operator<<(v117, 1 << v116);
      if ((*((_WORD *)a2 + 9) & 0x4000) == 0)
        goto LABEL_286;
    }
    else
    {
      v119 = llvm::raw_ostream::write(v117, " align ", 7uLL);
      llvm::raw_ostream::operator<<(v119, 1 << v116);
      if ((*((_WORD *)a2 + 9) & 0x4000) == 0)
        goto LABEL_286;
    }
LABEL_217:
    v120 = *(llvm::raw_ostream **)this;
    v121 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v121) > 4)
    {
      *(_BYTE *)(v121 + 4) = 34;
      *(_DWORD *)v121 = 543385376;
      *((_QWORD *)v120 + 4) += 5;
    }
    else
    {
      v120 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " gc \"", 5uLL);
    }
    GC = llvm::Function::getGC((llvm::LLVMContext ***)a2);
    v130 = *((char *)GC + 23);
    if (v130 >= 0)
      v131 = (const char *)GC;
    else
      v131 = (const char *)*GC;
    if (v130 >= 0)
      v132 = *((unsigned __int8 *)GC + 23);
    else
      v132 = GC[1];
    v133 = llvm::raw_ostream::write(v120, v131, v132);
    v134 = (_BYTE *)*((_QWORD *)v133 + 4);
    if ((unint64_t)v134 >= *((_QWORD *)v133 + 3))
    {
      llvm::raw_ostream::write(v133, 34);
      v135 = *((_WORD *)a2 + 9);
      if ((v135 & 2) == 0)
        goto LABEL_287;
    }
    else
    {
      *((_QWORD *)v133 + 4) = v134 + 1;
      *v134 = 34;
      v135 = *((_WORD *)a2 + 9);
      if ((v135 & 2) == 0)
        goto LABEL_287;
    }
    goto LABEL_240;
  }
  *((_QWORD *)v168 + 4) = v169 + 1;
  *v169 = 34;
  maybePrintComdat(*(llvm::raw_ostream **)this, a2);
  v115 = (*((_DWORD *)a2 + 8) >> 17) & 0x3F;
  if (v115)
    goto LABEL_213;
LABEL_285:
  if ((*((_WORD *)a2 + 9) & 0x4000) != 0)
    goto LABEL_217;
LABEL_286:
  v135 = *((_WORD *)a2 + 9);
  if ((v135 & 2) == 0)
  {
LABEL_287:
    if ((v135 & 4) == 0)
      goto LABEL_288;
    goto LABEL_244;
  }
LABEL_240:
  v136 = *(llvm::raw_ostream **)this;
  v137 = *(_QWORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v137 > 7uLL)
  {
    *v137 = 0x2078696665727020;
    *((_QWORD *)v136 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v136, " prefix ", 8uLL);
  }
  PrefixData = (Type **)llvm::Function::getPrefixData(a2);
  v135 = *((_WORD *)a2 + 9);
  if ((v135 & 4) == 0)
  {
LABEL_288:
    if ((v135 & 8) == 0)
      goto LABEL_289;
LABEL_248:
    v144 = *(llvm::raw_ostream **)this;
    v145 = *(void **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v145 > 0xCuLL)
    {
      qmemcpy(v145, " personality ", 13);
      *((_QWORD *)v144 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v144, " personality ", 0xDuLL);
    }
    PersonalityFn = (Type **)llvm::Function::getPersonalityFn(a2);
    if (llvm::GlobalValue::isDeclaration(a2))
      goto LABEL_290;
LABEL_252:
    v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197.__r_.__value_.__r.__words[2];
    v197.__r_.__value_.__l.__size_ = 0x400000000;
    llvm::Value::getAllMetadata(a2, (uint64_t)&v197);
    v150 = *(llvm::raw_ostream **)this;
    v151 = *(_WORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v151 > 1uLL)
    {
      *v151 = 31520;
      *((_QWORD *)v150 + 4) += 2;
      v152 = (char *)a2 + 72;
      v153 = (char *)*((_QWORD *)a2 + 10);
      if (v153 == (char *)a2 + 72)
        goto LABEL_258;
    }
    else
    {
      llvm::raw_ostream::write(v150, " {", 2uLL);
      v152 = (char *)a2 + 72;
      v153 = (char *)*((_QWORD *)a2 + 10);
      if (v153 == (char *)a2 + 72)
        goto LABEL_258;
    }
    do
    {
      if (v153)
        v154 = (const llvm::BasicBlock *)(v153 - 24);
      else
        v154 = 0;
      v153 = (char *)*((_QWORD *)v153 + 1);
    }
    while (v153 != v152);
LABEL_258:
    v155 = *(llvm::raw_ostream **)this;
    v156 = *(_WORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v156 > 1uLL)
    {
      *v156 = 2685;
      *((_QWORD *)v155 + 4) += 2;
      v157 = (void *)v197.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v197.__r_.__value_.__l.__data_ == &v197.__r_.__value_.__r.__words[2])
        goto LABEL_292;
    }
    else
    {
      llvm::raw_ostream::write(v155, "}\n", 2uLL);
      v157 = (void *)v197.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v197.__r_.__value_.__l.__data_ == &v197.__r_.__value_.__r.__words[2])
        goto LABEL_292;
    }
    free(v157);
    if (!v189)
      goto LABEL_294;
    goto LABEL_293;
  }
LABEL_244:
  v140 = *(llvm::raw_ostream **)this;
  v141 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v141) > 9)
  {
    *(_WORD *)(v141 + 8) = 8293;
    *(_QWORD *)v141 = *(_QWORD *)" prologue ";
    *((_QWORD *)v140 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v140, " prologue ", 0xAuLL);
  }
  PrologueData = (Type **)llvm::Function::getPrologueData(a2);
  if ((*((_WORD *)a2 + 9) & 8) != 0)
    goto LABEL_248;
LABEL_289:
  if (!llvm::GlobalValue::isDeclaration(a2))
    goto LABEL_252;
LABEL_290:
  v170 = *(llvm::raw_ostream **)this;
  v171 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v171 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v170, 10);
    if (!v189)
      goto LABEL_294;
    goto LABEL_293;
  }
  *((_QWORD *)v170 + 4) = v171 + 1;
  *v171 = 10;
LABEL_292:
  if (v189)
LABEL_293:
    llvm::Function::convertToNewDbgValues(a2);
LABEL_294:
  v172 = *((_QWORD *)this + 4);
  v173 = *(_DWORD *)(v172 + 144);
  if (v173 || *(_DWORD *)(v172 + 148))
  {
    v174 = (_QWORD *)(v172 + 136);
    v175 = *(unsigned int *)(v172 + 152);
    if (v175 > 4 * v173 && v175 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)v174);
      goto LABEL_313;
    }
    if ((_DWORD)v175)
    {
      v176 = (_QWORD *)*v174;
      v177 = (v175 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v177)
      {
        v178 = v177 + 1;
        v179 = (v177 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v180 = &v176[2 * v179];
        v181 = v176 + 2;
        v182 = v179;
        do
        {
          *(v181 - 2) = -4096;
          *v181 = -4096;
          v181 += 4;
          v182 -= 2;
        }
        while (v182);
        if (v178 == v179)
          goto LABEL_312;
      }
      else
      {
        v180 = (_QWORD *)*v174;
      }
      v183 = &v176[2 * v175];
      do
      {
        *v180 = -4096;
        v180 += 2;
      }
      while (v180 != v183);
    }
LABEL_312:
    *(_QWORD *)(v172 + 144) = 0;
  }
LABEL_313:
  *(_QWORD *)(v172 + 16) = 0;
  *(_BYTE *)(v172 + 24) = 0;
}

void `anonymous namespace'::AssemblyWriter::~AssemblyWriter(llvm **this)
{
  llvm::deallocate_buffer(this[74], (void *)(16 * *((unsigned int *)this + 152)));
}

void sub_180C74EC8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;

  v1 = (uint64_t *)v0[56];
  if (v1 != v0 + 58)
    free(v1);
  v2 = (uint64_t *)v0[38];
  if (v2 != v0 + 40)
    free(v2);
  llvm::DenseMap<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::SmallVector<std::pair<llvm::Value const*,std::vector<unsigned int>>,0u>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::SmallVector<std::pair<llvm::Value const*,std::vector<unsigned int>>,0u>>>>::~DenseMap(v0 + 35);
}

void sub_180C74EF8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 256);
  if (v1 != (void *)(v0 + 272))
    free(v1);
  llvm::deallocate_buffer(*(llvm **)(v0 + 232), (void *)(8 * *(unsigned int *)(v0 + 248)));
}

void sub_180C74F20()
{
  uint64_t v0;

}

uint64_t sub_180C74F28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 24) = 0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  return v0;
}

uint64_t `anonymous namespace'::AssemblyWriter::printBasicBlock(_anonymous_namespace_::AssemblyWriter *this, const llvm::BasicBlock *a2)
{
  BOOL isEntryBlock;
  BOOL v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::BasicBlock *v13;
  int v14;
  int v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *Name;
  size_t v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  unint64_t v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  BOOL v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  llvm::raw_ostream *v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  const llvm::Value *v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  uint64_t v45;
  llvm::raw_ostream *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  const llvm::Instruction *v58;
  llvm::raw_ostream *v59;
  _BYTE *v60;
  uint64_t result;
  llvm::raw_ostream *v62;
  _WORD *v63;
  const llvm::Value *v64;
  uint64_t v65;
  llvm::raw_ostream *v66;
  uint64_t v67;
  llvm::raw_ostream *v68;
  void *v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  uint64_t (**v74)(_anonymous_namespace_::AsmWriterContext *__hidden, const llvm::Metadata *);
  char *v75;
  uint64_t v76;
  uint64_t v77;

  if (!*((_QWORD *)a2 + 8))
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      goto LABEL_6;
    v5 = 0;
LABEL_18:
    v16 = *(llvm::raw_ostream **)this;
    v17 = *(_BYTE **)(*(_QWORD *)this + 32);
    if (*(_BYTE **)(*(_QWORD *)this + 24) == v17)
    {
      llvm::raw_ostream::write(v16, "\n", 1uLL);
    }
    else
    {
      *v17 = 10;
      ++*((_QWORD *)v16 + 4);
    }
    v18 = *(llvm::raw_ostream **)this;
    Name = (llvm::raw_ostream *)llvm::Value::getName(a2);
    llvm::printLLVMNameWithoutPrefix(v18, Name, v20);
    v21 = *(llvm::raw_ostream **)this;
    v22 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v22 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v21, 58);
      if (v5)
        goto LABEL_73;
    }
    else
    {
      *((_QWORD *)v21 + 4) = v22 + 1;
      *v22 = 58;
      if (v5)
        goto LABEL_73;
    }
    goto LABEL_40;
  }
  isEntryBlock = llvm::BasicBlock::isEntryBlock(a2);
  v5 = isEntryBlock;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    goto LABEL_18;
  if (isEntryBlock)
    goto LABEL_73;
LABEL_6:
  v6 = *(llvm::raw_ostream **)this;
  v7 = *(_BYTE **)(*(_QWORD *)this + 32);
  if (*(_BYTE **)(*(_QWORD *)this + 24) == v7)
  {
    llvm::raw_ostream::write(v6, "\n", 1uLL);
    v8 = *((_QWORD *)this + 4);
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_9;
    goto LABEL_8;
  }
  *v7 = 10;
  ++*((_QWORD *)v6 + 4);
  v8 = *((_QWORD *)this + 4);
  if (*(_QWORD *)(v8 + 8))
  {
LABEL_8:
    llvm::SlotTracker::processModule((llvm::SlotTracker *)v8);
    *(_QWORD *)(v8 + 8) = 0;
  }
LABEL_9:
  if (*(_QWORD *)(v8 + 16) && !*(_BYTE *)(v8 + 24))
  {
    llvm::SlotTracker::processFunction((llvm::SlotTracker *)v8);
    v9 = *(_QWORD *)(v8 + 136);
    v10 = *(unsigned int *)(v8 + 152);
    if (!(_DWORD)v10)
      goto LABEL_29;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 136);
    v10 = *(unsigned int *)(v8 + 152);
    if (!(_DWORD)v10)
      goto LABEL_29;
  }
  LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = v9 + 16 * v11;
  v13 = *(const llvm::BasicBlock **)v12;
  if (*(const llvm::BasicBlock **)v12 == a2)
    goto LABEL_30;
  v14 = 1;
  while (v13 != (const llvm::BasicBlock *)-4096)
  {
    v15 = v11 + v14++;
    v11 = v15 & (v10 - 1);
    v13 = *(const llvm::BasicBlock **)(v9 + 16 * v11);
    if (v13 == a2)
    {
      v12 = v9 + 16 * v11;
      goto LABEL_30;
    }
  }
LABEL_29:
  v12 = v9 + 16 * v10;
LABEL_30:
  if (v12 == v9 + 16 * v10 || (v23 = *(int *)(v12 + 8), (_DWORD)v23 == -1))
  {
    v24 = *(llvm::raw_ostream **)this;
    v27 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v27) > 8)
    {
      *(_BYTE *)(v27 + 8) = 58;
      *(_QWORD *)v27 = *(_QWORD *)"<badref>:";
      v26 = *((_QWORD *)v24 + 4) + 9;
      goto LABEL_37;
    }
    v28 = "<badref>:";
    v29 = 9;
  }
  else
  {
    v24 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, v23);
    v25 = (_BYTE *)*((_QWORD *)v24 + 4);
    if (*((_BYTE **)v24 + 3) != v25)
    {
      *v25 = 58;
      v26 = *((_QWORD *)v24 + 4) + 1;
LABEL_37:
      *((_QWORD *)v24 + 4) = v26;
      goto LABEL_40;
    }
    v28 = ":";
    v29 = 1;
  }
  llvm::raw_ostream::write(v24, v28, v29);
LABEL_40:
  llvm::formatted_raw_ostream::PadToColumn(*(llvm::formatted_raw_ostream **)this, 50);
  v31 = *(llvm::raw_ostream **)this;
  v32 = *(_BYTE **)(*(_QWORD *)this + 32);
  if (*(_BYTE **)(*(_QWORD *)this + 24) != v32)
  {
    *v32 = 59;
    ++*((_QWORD *)v31 + 4);
    v33 = *((_QWORD *)a2 + 1);
    if (v33)
      goto LABEL_42;
    goto LABEL_51;
  }
  llvm::raw_ostream::write(v31, ";", 1uLL);
  v33 = *((_QWORD *)a2 + 1);
  if (!v33)
  {
LABEL_51:
    v38 = *(llvm::raw_ostream **)this;
    v39 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v39) > 0x10)
    {
      *(_BYTE *)(v39 + 16) = 33;
      *(_OWORD *)v39 = *(_OWORD *)" No predecessors!";
      *((_QWORD *)v38 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v38, " No predecessors!", 0x11uLL);
    }
    goto LABEL_73;
  }
LABEL_42:
  while (1)
  {
    v34 = *(_QWORD *)(v33 + 24);
    v35 = *(unsigned __int8 *)(v34 + 16);
    v36 = v34 && v35 >= 0x1C;
    if (v36 && v35 - 29 < 0xB)
      break;
    v33 = *(_QWORD *)(v33 + 8);
    if (!v33)
      goto LABEL_51;
  }
  v40 = *(llvm::raw_ostream **)this;
  v41 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v41) > 8)
  {
    *(_BYTE *)(v41 + 8) = 32;
    *(_QWORD *)v41 = *(_QWORD *)" preds = ";
    *((_QWORD *)v40 + 4) += 9;
    v42 = *(const llvm::Value **)(*(_QWORD *)(v33 + 24) + 40);
    if (v42)
      goto LABEL_58;
  }
  else
  {
    llvm::raw_ostream::write(v40, " preds = ", 9uLL);
    v42 = *(const llvm::Value **)(*(_QWORD *)(v33 + 24) + 40);
    if (v42)
    {
LABEL_58:
      v43 = *((_QWORD *)this + 4);
      v74 = &off_1E0E15E00;
      v75 = (char *)this + 40;
      v44 = *(llvm::raw_ostream **)this;
      v45 = *((_QWORD *)this + 1);
      v76 = v43;
      v77 = v45;
      WriteAsOperandInternal(v44, v42, (_anonymous_namespace_::TypePrinting **)&v74, v30);
      goto LABEL_63;
    }
  }
  v46 = *(llvm::raw_ostream **)this;
  v47 = *(void **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v47 > 0xEuLL)
  {
    qmemcpy(v47, "<null operand!>", 15);
    *((_QWORD *)v46 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v46, "<null operand!>", 0xFuLL);
  }
LABEL_63:
  v48 = *(_QWORD *)(v33 + 8);
  if (!v48)
    goto LABEL_73;
  while (1)
  {
    v49 = *(_QWORD *)(v48 + 24);
    v50 = *(unsigned __int8 *)(v49 + 16);
    v51 = v49 && v50 >= 0x1C;
    if (v51 && v50 - 29 < 0xB)
      break;
    v48 = *(_QWORD *)(v48 + 8);
    if (!v48)
      goto LABEL_73;
  }
LABEL_89:
  v62 = *(llvm::raw_ostream **)this;
  v63 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v63 > 1uLL)
  {
    *v63 = 8236;
    *((_QWORD *)v62 + 4) += 2;
    v64 = *(const llvm::Value **)(*(_QWORD *)(v48 + 24) + 40);
    if (v64)
      goto LABEL_91;
  }
  else
  {
    llvm::raw_ostream::write(v62, ", ", 2uLL);
    v64 = *(const llvm::Value **)(*(_QWORD *)(v48 + 24) + 40);
    if (v64)
    {
LABEL_91:
      v65 = *((_QWORD *)this + 4);
      v74 = &off_1E0E15E00;
      v75 = (char *)this + 40;
      v66 = *(llvm::raw_ostream **)this;
      v67 = *((_QWORD *)this + 1);
      v76 = v65;
      v77 = v67;
      WriteAsOperandInternal(v66, v64, (_anonymous_namespace_::TypePrinting **)&v74, v30);
      goto LABEL_96;
    }
  }
  v68 = *(llvm::raw_ostream **)this;
  v69 = *(void **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v69 > 0xEuLL)
  {
    qmemcpy(v69, "<null operand!>", 15);
    *((_QWORD *)v68 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v68, "<null operand!>", 0xFuLL);
  }
LABEL_96:
  while (1)
  {
    v48 = *(_QWORD *)(v48 + 8);
    if (!v48)
      break;
    v70 = *(_QWORD *)(v48 + 24);
    v71 = *(unsigned __int8 *)(v70 + 16);
    if (v70)
      v72 = v71 >= 0x1C;
    else
      v72 = 0;
    if (v72 && v71 - 29 < 0xB)
      goto LABEL_89;
  }
LABEL_73:
  v53 = *(llvm::raw_ostream **)this;
  v54 = *(_BYTE **)(*(_QWORD *)this + 32);
  if (*(_BYTE **)(*(_QWORD *)this + 24) != v54)
  {
    *v54 = 10;
    ++*((_QWORD *)v53 + 4);
    v55 = *((_QWORD *)this + 28);
    if (!v55)
      goto LABEL_76;
    goto LABEL_75;
  }
  llvm::raw_ostream::write(v53, "\n", 1uLL);
  v55 = *((_QWORD *)this + 28);
  if (v55)
LABEL_75:
    (*(void (**)(uint64_t, const llvm::BasicBlock *, _QWORD))(*(_QWORD *)v55 + 24))(v55, a2, *(_QWORD *)this);
LABEL_76:
  v56 = (char *)a2 + 48;
  v57 = (char *)*((_QWORD *)a2 + 7);
  if (v57 != (char *)a2 + 48)
  {
    do
    {
      while (1)
      {
        v58 = v57 ? (const llvm::Instruction *)(v57 - 24) : 0;
        v59 = *(llvm::raw_ostream **)this;
        v60 = *(_BYTE **)(*(_QWORD *)this + 32);
        if ((unint64_t)v60 >= *(_QWORD *)(*(_QWORD *)this + 24))
          break;
        *((_QWORD *)v59 + 4) = v60 + 1;
        *v60 = 10;
        v57 = (char *)*((_QWORD *)v57 + 1);
        if (v57 == v56)
          goto LABEL_84;
      }
      llvm::raw_ostream::write(v59, 10);
      v57 = (char *)*((_QWORD *)v57 + 1);
    }
    while (v57 != v56);
  }
LABEL_84:
  result = *((_QWORD *)this + 28);
  if (result)
    return (*(uint64_t (**)(uint64_t, const llvm::BasicBlock *, _QWORD))(*(_QWORD *)result + 32))(result, a2, *(_QWORD *)this);
  return result;
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::printNamedMDNode(llvm::raw_ostream **this, const llvm::NamedMDNode *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  char *Name;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  int NumOperands;
  int v11;
  _anonymous_namespace_::AsmWriterContext *v12;
  uint64_t **Operand;
  llvm::raw_ostream *v14;
  unsigned __int8 v15;
  int v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  _QWORD *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *result;
  _WORD *v22;
  unsigned int i;
  llvm::raw_ostream *v24;
  _WORD *v25;
  uint64_t **v26;
  _anonymous_namespace_::AsmWriterContext *v27;
  llvm::raw_ostream *v28;
  unsigned __int8 v29;
  int v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  _QWORD *v33;
  int v34;
  uint64_t **v35;

  v4 = *this;
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 33);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 33;
  }
  Name = llvm::NamedMDNode::getName(a2);
  printMetadataIdentifier((llvm::raw_ostream *)Name, v7, *this);
  v8 = *this;
  v9 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v9) > 4)
  {
    *(_BYTE *)(v9 + 4) = 123;
    *(_DWORD *)v9 = 555760928;
    *((_QWORD *)v8 + 4) += 5;
    NumOperands = llvm::NamedMDNode::getNumOperands(a2);
    if (!NumOperands)
      goto LABEL_22;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = !{", 5uLL);
    NumOperands = llvm::NamedMDNode::getNumOperands(a2);
    if (!NumOperands)
      goto LABEL_22;
  }
  v11 = NumOperands;
  Operand = (uint64_t **)llvm::NamedMDNode::getOperand(a2, 0);
  if (*(_BYTE *)Operand != 7)
  {
    v16 = (*(uint64_t (**)(llvm::raw_ostream *, uint64_t **))(*(_QWORD *)this[4] + 32))(this[4], Operand);
    v17 = *this;
    if (v16 == -1)
    {
      v19 = (_QWORD *)*((_QWORD *)v17 + 4);
      if (*((_QWORD *)v17 + 3) - (_QWORD)v19 >= 8uLL)
      {
        *v19 = 0x3E6665726461623CLL;
        *((_QWORD *)v17 + 4) += 8;
        if (v11 == 1)
          goto LABEL_22;
      }
      else
      {
        llvm::raw_ostream::write(v17, "<badref>", 8uLL);
        if (v11 == 1)
          goto LABEL_22;
      }
    }
    else
    {
      v18 = (_BYTE *)*((_QWORD *)v17 + 4);
      if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
      {
        v20 = llvm::raw_ostream::write(v17, 33);
        llvm::raw_ostream::operator<<(v20, v16);
        if (v11 == 1)
          goto LABEL_22;
      }
      else
      {
        *((_QWORD *)v17 + 4) = v18 + 1;
        *v18 = 33;
        llvm::raw_ostream::operator<<(v17, v16);
        if (v11 == 1)
          goto LABEL_22;
      }
    }
    goto LABEL_25;
  }
  v14 = *this;
  v15 = atomic_load((unsigned __int8 *)&_MergedGlobals_60);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_60))
  {
    qword_1ECD34210 = (uint64_t)&off_1E0E15E00;
    unk_1ECD34218 = 0;
    qword_1ECD34220 = 0;
    unk_1ECD34228 = 0;
    __cxa_guard_release(&_MergedGlobals_60);
  }
  writeDIExpression(v14, Operand, v12);
  if (v11 != 1)
  {
LABEL_25:
    for (i = 1; i != v11; ++i)
    {
      v24 = *this;
      v25 = (_WORD *)*((_QWORD *)*this + 4);
      if (*((_QWORD *)*this + 3) - (_QWORD)v25 > 1uLL)
      {
        *v25 = 8236;
        *((_QWORD *)v24 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v24, ", ", 2uLL);
      }
      v26 = (uint64_t **)llvm::NamedMDNode::getOperand(a2, i);
      if (*(_BYTE *)v26 == 7)
      {
        v28 = *this;
        v29 = atomic_load((unsigned __int8 *)&_MergedGlobals_60);
        if ((v29 & 1) == 0)
        {
          v35 = v26;
          v34 = __cxa_guard_acquire(&_MergedGlobals_60);
          v26 = v35;
          if (v34)
          {
            qword_1ECD34210 = (uint64_t)&off_1E0E15E00;
            unk_1ECD34218 = 0;
            qword_1ECD34220 = 0;
            unk_1ECD34228 = 0;
            __cxa_guard_release(&_MergedGlobals_60);
            v26 = v35;
          }
        }
        writeDIExpression(v28, v26, v27);
      }
      else
      {
        v30 = (*(uint64_t (**)(llvm::raw_ostream *, uint64_t **))(*(_QWORD *)this[4] + 32))(this[4], v26);
        v31 = *this;
        if (v30 == -1)
        {
          v33 = (_QWORD *)*((_QWORD *)v31 + 4);
          if (*((_QWORD *)v31 + 3) - (_QWORD)v33 > 7uLL)
          {
            *v33 = 0x3E6665726461623CLL;
            *((_QWORD *)v31 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v31, "<badref>", 8uLL);
          }
        }
        else
        {
          v32 = (_BYTE *)*((_QWORD *)v31 + 4);
          if ((unint64_t)v32 < *((_QWORD *)v31 + 3))
          {
            *((_QWORD *)v31 + 4) = v32 + 1;
            *v32 = 33;
          }
          else
          {
            v31 = llvm::raw_ostream::write(v31, 33);
          }
          llvm::raw_ostream::operator<<(v31, v30);
        }
      }
    }
  }
LABEL_22:
  result = *this;
  v22 = (_WORD *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v22 <= 1uLL)
    return llvm::raw_ostream::write(result, "}\n", 2uLL);
  *v22 = 2685;
  *((_QWORD *)result + 4) += 2;
  return result;
}

void llvm::NamedMDNode::print(llvm::NamedMDNode *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, char a4)
{
  _QWORD *Machine;
  uint64_t v8;
  void (**v9)(llvm::formatted_raw_ostream *__hidden);
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  llvm::raw_ostream *v22[77];
  _QWORD v23[3];
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  LOBYTE(v23[0]) = 0;
  v54 = 0;
  Machine = (_QWORD *)llvm::ModuleSlotTracker::getMachine(a3);
  if (!Machine)
  {
    Machine = v23;
    v8 = *((_QWORD *)this + 5);
    v23[0] = off_1E0E20020;
    v23[1] = v8;
    v23[2] = 0;
    v24 = 0;
    v25 = 0;
    v31 = 0;
    v30 = 0;
    v32 = 0;
    v33 = 0;
    v35 = 0;
    v34 = 0;
    v36 = 0;
    v37 = 0;
    v39 = 0;
    v38 = 0;
    v40 = 0;
    v41 = 0;
    v43 = 0;
    v42 = 0;
    v44 = 0;
    v29 = 0;
    v28 = 0;
    v27 = 0u;
    v26 = 0u;
    v45 = 16;
    v47 = 0;
    v46 = 0;
    v48 = 0;
    v49 = 0;
    v51 = 0;
    v50 = 0;
    v52 = 0;
    v53 = 16;
    v54 = 1;
  }
  v10 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 1;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v9 = off_1E0E22CB0;
  v17 = 0;
  v18 = 0;
  v19 = &v21;
  v20 = xmmword_181234800;
  llvm::formatted_raw_ostream::setStream((llvm::raw_ostream **)&v9, a2);
}

void sub_180C75AC8()
{
  void *v0;
  uint64_t v1;
  _QWORD v2[11];
  void *v3;
  _BYTE v4[424];

  v2[0] = v1;
  if (v2[4] != v2[2])
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)v2);
  llvm::formatted_raw_ostream::releaseStream((llvm::formatted_raw_ostream *)v2);
  if (v3 != v0)
    free(v3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v2);
  if (v4[328])
    llvm::SlotTracker::~SlotTracker((llvm::SlotTracker *)v4);
}

llvm::raw_ostream *PrintLLVMName(llvm::raw_ostream *this, llvm::raw_ostream *a2, size_t a3, int a4)
{
  char *v7;
  char v8;
  char v9;

  switch(a4)
  {
    case 3:
      v7 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v7 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v7 + 1;
        v8 = 37;
        goto LABEL_10;
      }
      v9 = 37;
LABEL_14:
      llvm::raw_ostream::write(this, v9);
      return llvm::printLLVMNameWithoutPrefix(this, a2, a3);
    case 1:
      v7 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v7 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v7 + 1;
        v8 = 36;
        goto LABEL_10;
      }
      v9 = 36;
      goto LABEL_14;
    case 0:
      v7 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v7 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v7 + 1;
        v8 = 64;
LABEL_10:
        *v7 = v8;
        return llvm::printLLVMNameWithoutPrefix(this, a2, a3);
      }
      v9 = 64;
      goto LABEL_14;
  }
  return llvm::printLLVMNameWithoutPrefix(this, a2, a3);
}

void llvm::Type::print(Type *this, llvm::raw_ostream *a2, BOOL a3, char a4)
{
  _QWORD *v7;
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  void *__p;
  void *v27;
  uint64_t v28;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  __p = 0;
  v27 = 0;
  v28 = 0;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  if ((a4 & 1) == 0 && this && (*((_DWORD *)this + 2) & 0x4FF) == 0x10)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 7uLL)
    {
      *v7 = 0x2065707974203D20;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, " = type ", 8uLL);
    }
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  llvm::deallocate_buffer(v23, (void *)(16 * v25));
}

void sub_180C75D1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, llvm *a20,uint64_t a21,unsigned int a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  llvm::deallocate_buffer(a20, (void *)(8 * a22));
}

void sub_180C75D40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, llvm *a17, uint64_t a18, unsigned int a19)
{
  llvm::deallocate_buffer(a17, (void *)(8 * a19));
}

void sub_180C75D54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, llvm *a14, uint64_t a15, unsigned int a16)
{
  llvm::deallocate_buffer(a14, (void *)(8 * a16));
}

void sub_180C75D68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, llvm *a11, uint64_t a12, unsigned int a13)
{
  llvm::deallocate_buffer(a11, (void *)(8 * a13));
}

void `anonymous namespace'::TypePrinting::print(_anonymous_namespace_::TypePrinting *this, Type *a2, llvm::raw_ostream *a3)
{
  __asm { BR              X11 }
}

llvm::raw_ostream *sub_180C75DD4@<X0>(unsigned __int8 a1@<W8>)
{
  llvm::raw_ostream *v1;
  uint64_t v2;
  _anonymous_namespace_::TypePrinting *v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *result;
  _BYTE *v11;

  v4 = a1;
  v5 = *(unsigned int *)(v2 + 32);
  v6 = (_BYTE *)*((_QWORD *)v1 + 4);
  if (*((_BYTE **)v1 + 3) == v6)
  {
    llvm::raw_ostream::write(v1, "<", 1uLL);
    if (v4 != 19)
      goto LABEL_8;
LABEL_5:
    v7 = *((_QWORD *)v1 + 4);
    if ((unint64_t)(*((_QWORD *)v1 + 3) - v7) > 8)
    {
      *(_BYTE *)(v7 + 8) = 32;
      *(_QWORD *)v7 = *(_QWORD *)"vscale x ";
      *((_QWORD *)v1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v1, "vscale x ", 9uLL);
    }
    goto LABEL_8;
  }
  *v6 = 60;
  ++*((_QWORD *)v1 + 4);
  if (v4 == 19)
    goto LABEL_5;
LABEL_8:
  v8 = llvm::raw_ostream::operator<<(v1, v5);
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 32;
    *(_WORD *)v9 = 30752;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " x ", 3uLL);
  }
  v11 = (_BYTE *)*((_QWORD *)v1 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v1 + 3))
    return llvm::raw_ostream::write(v1, 62);
  *((_QWORD *)v1 + 4) = v11 + 1;
  *v11 = 62;
  return result;
}

llvm::raw_ostream *`anonymous namespace'::TypePrinting::printStructBody(llvm::raw_ostream *this, llvm::StructType *a2, llvm::raw_ostream *a3)
{
  int v4;
  uint64_t v5;
  _anonymous_namespace_::TypePrinting *v7;
  _BYTE *v8;
  __int16 *v9;
  BOOL v10;
  uint64_t v11;
  Type **v12;
  __int16 v13;
  Type **v14;
  uint64_t v15;
  Type *v16;
  _WORD *v17;
  _BYTE *v18;

  v4 = *((_DWORD *)a2 + 2);
  if ((v4 & 0x100) == 0)
  {
    v5 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v5) <= 5)
      return llvm::raw_ostream::write(a3, "opaque", 6uLL);
    *(_WORD *)(v5 + 4) = 25973;
    *(_DWORD *)v5 = 1902211183;
    *((_QWORD *)a3 + 4) += 6;
    return this;
  }
  v7 = this;
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    v9 = (__int16 *)*((_QWORD *)a3 + 4);
    v10 = *((_QWORD *)a3 + 3) - (_QWORD)v9 > 1uLL;
    if (*((_DWORD *)a2 + 3))
      goto LABEL_8;
LABEL_20:
    if (!v10)
    {
      this = llvm::raw_ostream::write(a3, "{}", 2uLL);
      if ((*((_BYTE *)a2 + 9) & 2) == 0)
        return this;
      goto LABEL_30;
    }
    v13 = 32123;
LABEL_29:
    *v9 = v13;
    *((_QWORD *)a3 + 4) += 2;
    if ((*((_BYTE *)a2 + 9) & 2) == 0)
      return this;
    goto LABEL_30;
  }
  v8 = (_BYTE *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v8 < *((_QWORD *)a3 + 3))
  {
    *((_QWORD *)a3 + 4) = v8 + 1;
    *v8 = 60;
    goto LABEL_7;
  }
  this = llvm::raw_ostream::write(a3, 60);
  v9 = (__int16 *)*((_QWORD *)a3 + 4);
  v10 = *((_QWORD *)a3 + 3) - (_QWORD)v9 > 1uLL;
  if (!*((_DWORD *)a2 + 3))
    goto LABEL_20;
LABEL_8:
  if (v10)
  {
    *v9 = 8315;
    *((_QWORD *)a3 + 4) += 2;
    v11 = *((unsigned int *)a2 + 3);
    if (!(_DWORD)v11)
      goto LABEL_15;
  }
  else
  {
    this = llvm::raw_ostream::write(a3, "{ ", 2uLL);
    v11 = *((unsigned int *)a2 + 3);
    if (!(_DWORD)v11)
      goto LABEL_15;
  }
  v12 = (Type **)*((_QWORD *)a2 + 2);
  if ((_DWORD)v11 != 1)
  {
    v14 = v12 + 1;
    v15 = 8 * v11 - 8;
    do
    {
      v16 = *v14;
      v17 = (_WORD *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v17 > 1uLL)
      {
        *v17 = 8236;
        *((_QWORD *)a3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a3, ", ", 2uLL);
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
LABEL_15:
  v9 = (__int16 *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v9 > 1uLL)
  {
    v13 = 32032;
    goto LABEL_29;
  }
  this = llvm::raw_ostream::write(a3, " }", 2uLL);
  if ((*((_BYTE *)a2 + 9) & 2) == 0)
    return this;
LABEL_30:
  v18 = (_BYTE *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)a3 + 3))
    return llvm::raw_ostream::write(a3, 62);
  *((_QWORD *)a3 + 4) = v18 + 1;
  *v18 = 62;
  return this;
}

void `anonymous namespace'::TypePrinting::~TypePrinting(_anonymous_namespace_::TypePrinting *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 17), (void *)(16 * *((unsigned int *)this + 38)));
}

void sub_180C76D88()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 104);
  if (v1)
  {
    *(_QWORD *)(v0 + 112) = v1;
    operator delete(v1);
  }
  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(8 * *(unsigned int *)(v0 + 96)));
}

void sub_180C76DAC()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 56), (void *)(8 * *(unsigned int *)(v0 + 72)));
}

void sub_180C76DC0()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 32), (void *)(8 * *(unsigned int *)(v0 + 48)));
}

void sub_180C76DD4()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 8), (void *)(8 * *(unsigned int *)(v0 + 24)));
}

uint64_t sub_180C76DE8()
{
  uint64_t v0;

  return v0;
}

void llvm::Value::print(Value *this, llvm::raw_ostream *a2, char a3)
{
  unsigned int impl_low;
  ValueImpl *impl;
  int impl_high;
  uint64_t v9;
  ValueImpl *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  ValueImpl *ModuleFromVal;
  uint64_t v15;
  _QWORD v16[2];
  BOOL v17;
  char v18;
  ValueImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  impl_low = LOBYTE(this[2].impl);
  if (this && impl_low >= 0x1C)
  {
    if (impl_low == 84
      && (impl = this[-4].impl) != 0
      && !*((_BYTE *)impl + 16)
      && (ValueImpl *)*((_QWORD *)impl + 3) == this[10].impl
      && (*((_BYTE *)impl + 33) & 0x20) != 0
      && ((impl_high = HIDWORD(this[2].impl), (impl_high & 0x40000000) != 0)
        ? (ValueImpl *)(v10 = this[-1].impl, v9 = impl_high & 0x7FFFFFF)
        : (v9 = impl_high & 0x7FFFFFF, v10 = (ValueImpl *)&this[-4 * v9]),
          v9))
    {
      v13 = 32 * v9;
      while (1)
      {
        v15 = *(_QWORD *)v10;
        if (*(_QWORD *)v10)
        {
          if (*(_BYTE *)(v15 + 16) == 23 && **(unsigned __int8 **)(v15 + 24) - 5 < 0x1F)
            break;
        }
        v12 = 0;
        v10 = (ValueImpl *)((char *)v10 + 32);
        v13 -= 32;
        if (!v13)
          goto LABEL_20;
      }
      v12 = 1;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    if (LOBYTE(this[2].impl))
      v11 = impl_low == 23;
    else
      v11 = 1;
    v12 = v11;
  }
LABEL_20:
  ModuleFromVal = getModuleFromVal((ValueImpl *)this);
  v16[0] = off_1E0E22A80;
  v16[1] = 0;
  v17 = ModuleFromVal != 0;
  v18 = v12;
  v23 = 0;
  v22 = 0;
  v20 = 0;
  v21 = 0;
  v19 = ModuleFromVal;
  llvm::Value::print((llvm::Value *)this, a2, (llvm::ModuleSlotTracker *)v16, a3);
}

ValueImpl *getModuleFromVal(ValueImpl *a1)
{
  unsigned int v1;
  ValueImpl *v2;
  ValueImpl *result;
  ValueImpl *v4;
  uint64_t v5;

  v1 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v1 == 21)
  {
    a1 = (ValueImpl *)*((_QWORD *)a1 + 3);
    if (!a1)
      return 0;
    return (ValueImpl *)*((_QWORD *)a1 + 5);
  }
  if (a1 && v1 == 22)
  {
    a1 = (ValueImpl *)*((_QWORD *)a1 + 8);
    if (!a1)
      return 0;
    return (ValueImpl *)*((_QWORD *)a1 + 5);
  }
  if (a1 && v1 >= 0x1C)
  {
    v2 = (ValueImpl *)*((_QWORD *)a1 + 5);
    if (!v2)
      return v2;
    a1 = (ValueImpl *)*((_QWORD *)v2 + 8);
    if (!a1)
      return 0;
    return (ValueImpl *)*((_QWORD *)a1 + 5);
  }
  if (a1 && v1 < 4)
    return (ValueImpl *)*((_QWORD *)a1 + 5);
  v2 = 0;
  if (!a1 || v1 != 23)
    return v2;
  v4 = (ValueImpl *)*((_QWORD *)a1 + 1);
  if (!v4)
    return 0;
  while (1)
  {
    v5 = *((_QWORD *)v4 + 3);
    if (*(unsigned __int8 *)(v5 + 16) >= 0x1Cu)
    {
      result = (ValueImpl *)getModuleFromVal((const Value *)v5);
      if (result)
        break;
    }
    v2 = 0;
    v4 = (ValueImpl *)*((_QWORD *)v4 + 1);
    if (!v4)
      return v2;
  }
  return result;
}

void llvm::Value::print(llvm::Value *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, char a4)
{
  _QWORD *Machine;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  const llvm::Metadata *v24;
  ValueImpl *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  ValueImpl *ModuleFromVal;
  _QWORD *v44;
  uint64_t v45;
  ValueImpl *v46;
  _anonymous_namespace_::TypePrinting *v47[4];
  void (**v48)(llvm::formatted_raw_ostream *__hidden);
  int v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  char v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  __int128 v59;
  uint64_t v60;
  _anonymous_namespace_::TypePrinting *v61[3];
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  __int16 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  Machine = v82;
  v49 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 1;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  v48 = off_1E0E22CB0;
  v56 = 0;
  v57 = 0;
  v58 = &v60;
  v59 = xmmword_181234800;
  llvm::formatted_raw_ostream::setStream((llvm::raw_ostream **)&v48, a2);
  v84 = 0;
  v90 = 0;
  v89 = 0;
  v91 = 0;
  v92 = 0;
  v94 = 0;
  v93 = 0;
  v95 = 0;
  v96 = 0;
  v98 = 0;
  v97 = 0;
  v99 = 0;
  v100 = 0;
  v102 = 0;
  v101 = 0;
  v103 = 0;
  v85 = 0u;
  v86 = 0u;
  v88 = 0;
  v87 = 0;
  v82[2] = 0;
  v82[0] = off_1E0E20020;
  v82[1] = 0;
  v83 = 0;
  v104 = 16;
  v107 = 0;
  v105 = 0;
  v106 = 0;
  v108 = 0;
  v111 = 0;
  v109 = 0;
  v110 = 0;
  v112 = 16;
  if (llvm::ModuleSlotTracker::getMachine(a3))
    Machine = (_QWORD *)llvm::ModuleSlotTracker::getMachine(a3);
  v9 = *((unsigned __int8 *)this + 16);
  if (this && v9 >= 0x1C)
  {
    v10 = *((_QWORD *)this + 5);
    if (!v10)
      goto LABEL_63;
    v11 = *(_QWORD *)(v10 + 64);
    if (!v11)
      goto LABEL_63;
    if (!llvm::ModuleSlotTracker::getMachine(a3))
      goto LABEL_63;
    v12 = *((_QWORD *)a3 + 4);
    if (v12 == v11)
      goto LABEL_63;
    if (!v12)
    {
LABEL_62:
      v42 = *((_QWORD *)a3 + 5);
      *(_QWORD *)(v42 + 16) = v11;
      *(_BYTE *)(v42 + 24) = 0;
      *((_QWORD *)a3 + 4) = v11;
LABEL_63:
      ModuleFromVal = getModuleFromVal((ValueImpl *)this);
      goto LABEL_71;
    }
    v13 = *((_QWORD *)a3 + 5);
    v14 = *(_DWORD *)(v13 + 144);
    if (!v14 && !*(_DWORD *)(v13 + 148))
    {
LABEL_61:
      *(_QWORD *)(v13 + 16) = 0;
      *(_BYTE *)(v13 + 24) = 0;
      goto LABEL_62;
    }
    v15 = (_QWORD *)(v13 + 136);
    v16 = *(unsigned int *)(v13 + 152);
    if (v16 > 4 * v14 && v16 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)v15);
      goto LABEL_61;
    }
    if ((_DWORD)v16)
    {
      v27 = (_QWORD *)*v15;
      v28 = (v16 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v28)
      {
        v29 = v28 + 1;
        v30 = (v28 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v31 = &v27[2 * v30];
        v32 = v27 + 2;
        v33 = v30;
        do
        {
          *(v32 - 2) = -4096;
          *v32 = -4096;
          v32 += 4;
          v33 -= 2;
        }
        while (v33);
        if (v29 == v30)
          goto LABEL_60;
      }
      else
      {
        v31 = (_QWORD *)*v15;
      }
      v41 = &v27[2 * v16];
      do
      {
        *v31 = -4096;
        v31 += 2;
      }
      while (v31 != v41);
    }
LABEL_60:
    *(_QWORD *)(v13 + 144) = 0;
    goto LABEL_61;
  }
  if (!this || v9 != 22)
  {
    if (!this || v9 > 3)
    {
      if (this && v9 == 23)
      {
        v24 = (const llvm::Metadata *)*((_QWORD *)this + 3);
        v25 = getModuleFromVal((ValueImpl *)this);
        printMetadataImpl(a2, v24, a3, (const llvm::Module *)v25, 0, 0);
      }
      if (this && v9 <= 0x14)
      {
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v73 = 0;
        v74 = 0;
        v72 = 0;
        v75 = 0;
        v76 = 0;
        v77 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v81 = 0;
        memset(v61, 0, sizeof(v61));
        v62 = 0;
        v26 = v52;
        if ((unint64_t)v52 >= v51)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v48, 32);
        }
        else
        {
          ++v52;
          *v26 = 32;
        }
        v47[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
        v47[1] = (_anonymous_namespace_::TypePrinting *)v61;
        v47[2] = (_anonymous_namespace_::TypePrinting *)llvm::ModuleSlotTracker::getMachine(a3);
        v47[3] = 0;
        WriteConstantInternal((llvm::raw_ostream *)&v48, (llvm::Type **)this, v47);
      }
      printAsOperandImpl((Type **)this, (llvm::raw_ostream *)&v48, 1, a3);
    }
    v23 = *((unsigned __int8 *)this + 16);
    if (*((_BYTE *)this + 16))
    {
      if (v23 == 1)
      {
      }
      else if (v23 == 3)
      {
      }
      else
      {
      }
    }
    else
    {
    }
LABEL_71:
  }
  v17 = *((_QWORD *)this + 8);
  if (!v17 || !llvm::ModuleSlotTracker::getMachine(a3) || (v18 = *((_QWORD *)a3 + 4), v18 == v17))
  {
LABEL_70:
    v46 = getModuleFromVal((ValueImpl *)this);
    goto LABEL_71;
  }
  if (!v18)
  {
LABEL_69:
    v45 = *((_QWORD *)a3 + 5);
    *(_QWORD *)(v45 + 16) = v17;
    *(_BYTE *)(v45 + 24) = 0;
    *((_QWORD *)a3 + 4) = v17;
    goto LABEL_70;
  }
  v19 = *((_QWORD *)a3 + 5);
  v20 = *(_DWORD *)(v19 + 144);
  if (!v20 && !*(_DWORD *)(v19 + 148))
  {
LABEL_68:
    *(_QWORD *)(v19 + 16) = 0;
    *(_BYTE *)(v19 + 24) = 0;
    goto LABEL_69;
  }
  v21 = (_QWORD *)(v19 + 136);
  v22 = *(unsigned int *)(v19 + 152);
  if (v22 > 4 * v20 && v22 >= 0x41)
  {
    llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)v21);
    goto LABEL_68;
  }
  if ((_DWORD)v22)
  {
    v34 = (_QWORD *)*v21;
    v35 = (v22 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v35)
    {
      v36 = v35 + 1;
      v37 = (v35 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v38 = &v34[2 * v37];
      v39 = v34 + 2;
      v40 = v37;
      do
      {
        *(v39 - 2) = -4096;
        *v39 = -4096;
        v39 += 4;
        v40 -= 2;
      }
      while (v40);
      if (v36 == v37)
        goto LABEL_67;
    }
    else
    {
      v38 = (_QWORD *)*v21;
    }
    v44 = &v34[2 * v22];
    do
    {
      *v38 = -4096;
      v38 += 2;
    }
    while (v38 != v44);
  }
LABEL_67:
  *(_QWORD *)(v19 + 144) = 0;
  goto LABEL_68;
}

void sub_180C7760C()
{
  void *v0;
  uint64_t v1;
  _QWORD v2[11];
  void *v3;

  v2[0] = v1 + 16;
  if (v2[4] != v2[2])
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)v2);
  llvm::formatted_raw_ostream::releaseStream((llvm::formatted_raw_ostream *)v2);
  if (v3 != v0)
    free(v3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v2);
}

void `anonymous namespace'::AssemblyWriter::printInstruction(_anonymous_namespace_::AssemblyWriter *this, const llvm::Instruction *a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _WORD *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *Name;
  size_t v9;
  size_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const llvm::Instruction *v19;
  int v20;
  int v21;
  llvm::raw_ostream *v22;
  char v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  int v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  llvm::raw_ostream *v38;
  const char *OpcodeName;
  const char *v40;
  size_t v41;
  void *v42;
  int v43;
  llvm::raw_ostream *v44;
  _DWORD *v45;
  llvm::raw_ostream *v46;
  uint64_t v47;
  llvm::raw_ostream *v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  size_t v56;
  char *OperationName;
  size_t v58;
  void *v59;
  int v60;
  uint64_t v61;
  Type **v62;
  int v63;
  llvm::raw_ostream *v64;
  _BYTE *v65;
  int v66;
  Type ***v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  const llvm::Instruction *v72;
  llvm::raw_ostream *v73;
  _BYTE *v74;
  Type *v75;
  unsigned int v76;
  int v77;
  int v78;
  llvm::raw_ostream *v79;
  _BYTE *v80;
  BOOL v81;
  llvm::raw_ostream *v82;
  _WORD *v83;
  int v84;
  Type ***v85;
  BOOL v86;
  llvm::raw_ostream *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  llvm::raw_ostream *v91;
  _BYTE *v92;
  BOOL v93;
  llvm::raw_ostream *v94;
  _WORD *v95;
  uint64_t v96;
  BOOL v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  llvm::raw_ostream *v103;
  uint64_t v104;
  int v105;
  char *v106;
  BOOL v107;
  llvm::raw_ostream *v108;
  _WORD *v109;
  int v110;
  llvm::raw_ostream *v111;
  _DWORD *v112;
  BOOL v113;
  llvm::raw_ostream *v114;
  _WORD *v115;
  BOOL v116;
  llvm::raw_ostream *v117;
  _WORD *v118;
  Type **v119;
  BOOL v120;
  llvm::raw_ostream *v121;
  _BYTE *v122;
  llvm::raw_ostream *v123;
  _BYTE *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  llvm::raw_ostream *v128;
  _WORD *v129;
  unint64_t v130;
  llvm::raw_ostream *v131;
  _WORD *v132;
  int v133;
  const llvm::Value *v134;
  llvm::raw_ostream *v135;
  void *v136;
  llvm::raw_ostream *v137;
  _WORD *v138;
  int v139;
  uint64_t v140;
  llvm::raw_ostream *v141;
  uint64_t v142;
  int v143;
  const llvm::Value *v144;
  llvm::raw_ostream *v145;
  void *v146;
  llvm::raw_ostream *v147;
  _WORD *v148;
  uint64_t v149;
  llvm::raw_ostream *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  llvm::raw_ostream *v154;
  _WORD *v155;
  int v156;
  uint64_t v157;
  char *v158;
  Type **v159;
  int v160;
  llvm::raw_ostream *v161;
  _BYTE *v162;
  int v163;
  uint64_t v164;
  Type ***v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  llvm::raw_ostream *v170;
  _WORD *v171;
  int v172;
  llvm::raw_ostream *v173;
  _BYTE *v174;
  const llvm::Instruction *v175;
  llvm::raw_ostream *v176;
  _BYTE *v177;
  int v178;
  Type ***v179;
  int v180;
  Type ***v181;
  const llvm::Instruction *v182;
  BOOL v183;
  int v184;
  Type ***v185;
  uint64_t v186;
  unsigned int *v187;
  uint64_t v188;
  unint64_t v189;
  llvm::raw_ostream *v190;
  _WORD *v191;
  llvm::raw_ostream *v192;
  BOOL v193;
  llvm::raw_ostream *v194;
  _WORD *v195;
  int v196;
  Type ***v197;
  uint64_t v198;
  unsigned int *v199;
  uint64_t v200;
  unint64_t v201;
  llvm::raw_ostream *v202;
  _WORD *v203;
  llvm::raw_ostream *v204;
  BOOL v205;
  llvm::raw_ostream *v206;
  _BYTE *v207;
  const llvm::Instruction *v208;
  int v209;
  uint64_t v210;
  char *v211;
  llvm::raw_ostream *v212;
  _BYTE *v213;
  BOOL v214;
  int v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  Type ***v219;
  BOOL v220;
  BOOL v221;
  uint64_t v222;
  uint64_t v223;
  BOOL v224;
  char *v225;
  uint64_t v226;
  llvm::raw_ostream *v227;
  _WORD *v228;
  uint64_t v229;
  Type ***v230;
  int v231;
  Type **v232;
  llvm::raw_ostream *v233;
  _WORD *v234;
  int v235;
  const llvm::Instruction *v236;
  BOOL v237;
  int v238;
  llvm::raw_ostream *v239;
  uint64_t v240;
  const char *v241;
  size_t v242;
  _OWORD *v243;
  uint64_t v244;
  int v245;
  Type ***v246;
  BOOL v247;
  const llvm::LLVMContext *DesiredBytecodeVersion;
  unint64_t v249;
  llvm::raw_ostream *v250;
  _BYTE *v251;
  const char *v252;
  const llvm::LLVMContext *v253;
  __int16 v254;
  uint64_t v255;
  llvm::raw_ostream *v256;
  _BYTE *v257;
  const char *v258;
  const llvm::LLVMContext *v259;
  unsigned int v260;
  int v261;
  llvm::raw_ostream *v262;
  _BYTE *v263;
  const char *v264;
  const llvm::LLVMContext *v265;
  unint64_t v266;
  llvm::raw_ostream *v267;
  _BYTE *v268;
  const char *v269;
  size_t v270;
  void *v271;
  llvm::raw_ostream *v272;
  _BYTE *v273;
  const char *v274;
  size_t v275;
  void *v276;
  llvm::raw_ostream *v277;
  _QWORD *v278;
  unint64_t v279;
  size_t v280;
  void *v281;
  size_t v282;
  void *v283;
  size_t v284;
  void *v285;
  _QWORD *v286;
  unint64_t v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  llvm::raw_ostream *v293;
  _BYTE *v294;
  int v295;
  char *v296;
  int v297;
  llvm::raw_ostream *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  int v302;
  BOOL v303;
  const llvm::Instruction *v304;
  llvm::raw_ostream *v305;
  uint64_t v306;
  Type *v307;
  llvm::raw_ostream *v308;
  _BYTE *v309;
  const llvm::CallBase *v310;
  llvm::raw_ostream *v311;
  uint64_t v312;
  Type *v313;
  llvm::raw_ostream *v314;
  _BYTE *v315;
  unsigned int *v316;
  Type **v317;
  char *v318;
  uint64_t v319;
  Type *v320;
  llvm::raw_ostream *v321;
  _BYTE *v322;
  const char *v323;
  size_t v324;
  llvm::raw_ostream *v325;
  _BYTE *v326;
  Type *v327;
  BOOL v328;
  llvm::raw_ostream *v329;
  _BYTE *v330;
  llvm::raw_ostream *v331;
  _BYTE *v332;
  uint64_t v333;
  Type ***v334;
  uint64_t v335;
  Type **v336;
  uint64_t ParamAttrs;
  char *v338;
  uint64_t i;
  Type **v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  llvm::raw_ostream *v344;
  _BYTE *v345;
  llvm::raw_ostream *v346;
  uint64_t v347;
  uint64_t FnAttrs;
  int AttributeGroupSlot;
  llvm::raw_ostream *v350;
  _BYTE *v351;
  const char *v352;
  size_t v353;
  llvm::raw_ostream *v354;
  _BYTE *v355;
  Type *v356;
  BOOL v357;
  llvm::raw_ostream *v358;
  _BYTE *v359;
  llvm::raw_ostream *v360;
  _BYTE *v361;
  uint64_t v362;
  Type ***v363;
  uint64_t v364;
  Type **v365;
  uint64_t v366;
  char *v367;
  uint64_t j;
  Type **v369;
  uint64_t v370;
  llvm::raw_ostream *v371;
  _BYTE *v372;
  llvm::raw_ostream *v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  BOOL v377;
  llvm::raw_ostream *v378;
  _BYTE *v379;
  const char *v380;
  size_t v381;
  llvm::raw_ostream *v382;
  _BYTE *v383;
  Type *v384;
  BOOL v385;
  llvm::raw_ostream *v386;
  _BYTE *v387;
  llvm::raw_ostream *v388;
  _BYTE *v389;
  uint64_t v390;
  Type ***v391;
  uint64_t v392;
  Type **v393;
  uint64_t v394;
  unsigned int *v395;
  uint64_t k;
  Type **v397;
  uint64_t v398;
  llvm::raw_ostream *v399;
  _BYTE *v400;
  llvm::raw_ostream *v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  BOOL v405;
  BOOL v406;
  uint64_t v407;
  uint64_t v408;
  const llvm::Instruction *v409;
  BOOL v410;
  __int16 v411;
  llvm::raw_ostream *v412;
  _BYTE *v413;
  BOOL v414;
  __int16 v415;
  llvm::raw_ostream *v416;
  unint64_t v417;
  unint64_t v418;
  llvm::raw_ostream *v419;
  llvm::raw_ostream *v420;
  _BYTE *v421;
  llvm::raw_ostream *v422;
  _BYTE *v423;
  llvm::raw_ostream *v424;
  char *v425;
  llvm::raw_ostream *v426;
  _BYTE *v427;
  _anonymous_namespace_::TypePrinting *v428;
  Type *v429;
  llvm::raw_ostream *v430;
  _BYTE *v431;
  uint64_t v432;
  void *__p;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;

  v437 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 28);
  if (v4)
    (*(void (**)(uint64_t, const llvm::Instruction *, _QWORD))(*(_QWORD *)v4 + 40))(v4, a2, *(_QWORD *)this);
  v5 = *(llvm::raw_ostream **)this;
  v6 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8224;
    *((_QWORD *)v5 + 4) += 2;
    if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    {
LABEL_5:
      v7 = *(llvm::raw_ostream **)this;
      Name = (llvm::raw_ostream *)llvm::Value::getName(a2);
      v10 = v9;
      v12 = *((_QWORD *)v7 + 3);
      v11 = (char *)*((_QWORD *)v7 + 4);
      if (*((unsigned __int8 *)a2 + 16) > 3u)
      {
        if ((unint64_t)v11 < v12)
        {
          *((_QWORD *)v7 + 4) = v11 + 1;
          v13 = 37;
          goto LABEL_22;
        }
        v22 = v7;
        v23 = 37;
      }
      else
      {
        if ((unint64_t)v11 < v12)
        {
          *((_QWORD *)v7 + 4) = v11 + 1;
          v13 = 64;
LABEL_22:
          *v11 = v13;
          goto LABEL_26;
        }
        v22 = v7;
        v23 = 64;
      }
      llvm::raw_ostream::write(v22, v23);
LABEL_26:
      llvm::printLLVMNameWithoutPrefix(v7, Name, v10);
      v24 = *(llvm::raw_ostream **)this;
      v25 = *(_QWORD *)(*(_QWORD *)this + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v25) <= 2)
      {
LABEL_27:
        llvm::raw_ostream::write(v24, " = ", 3uLL);
        goto LABEL_41;
      }
      goto LABEL_39;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, "  ", 2uLL);
    if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
      goto LABEL_5;
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
    goto LABEL_41;
  v14 = *((_QWORD *)this + 4);
  if (*(_QWORD *)(v14 + 8))
  {
    llvm::SlotTracker::processModule(*((llvm::SlotTracker **)this + 4));
    *(_QWORD *)(v14 + 8) = 0;
  }
  if (!*(_QWORD *)(v14 + 16) || *(_BYTE *)(v14 + 24))
  {
    v15 = *(_QWORD *)(v14 + 136);
    v16 = *(unsigned int *)(v14 + 152);
    if ((_DWORD)v16)
      goto LABEL_15;
LABEL_29:
    v18 = v15 + 16 * v16;
    goto LABEL_30;
  }
  llvm::SlotTracker::processFunction((llvm::SlotTracker *)v14);
  v15 = *(_QWORD *)(v14 + 136);
  v16 = *(unsigned int *)(v14 + 152);
  if (!(_DWORD)v16)
    goto LABEL_29;
LABEL_15:
  LODWORD(v17) = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v18 = v15 + 16 * v17;
  v19 = *(const llvm::Instruction **)v18;
  if (*(const llvm::Instruction **)v18 != a2)
  {
    v20 = 1;
    while (v19 != (const llvm::Instruction *)-4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(const llvm::Instruction **)(v15 + 16 * v17);
      if (v19 == a2)
      {
        v18 = v15 + 16 * v17;
        goto LABEL_30;
      }
    }
    goto LABEL_29;
  }
LABEL_30:
  if (v18 != v15 + 16 * v16)
  {
    v26 = *(int *)(v18 + 8);
    if ((_DWORD)v26 != -1)
    {
      v27 = *(llvm::raw_ostream **)this;
      v28 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v28 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        v31 = llvm::raw_ostream::write(v27, 37);
        v24 = llvm::raw_ostream::operator<<(v31, v26);
        v25 = *((_QWORD *)v24 + 4);
        if ((unint64_t)(*((_QWORD *)v24 + 3) - v25) <= 2)
          goto LABEL_27;
      }
      else
      {
        *((_QWORD *)v27 + 4) = v28 + 1;
        *v28 = 37;
        v24 = llvm::raw_ostream::operator<<(v27, v26);
        v25 = *((_QWORD *)v24 + 4);
        if ((unint64_t)(*((_QWORD *)v24 + 3) - v25) <= 2)
          goto LABEL_27;
      }
LABEL_39:
      *(_BYTE *)(v25 + 2) = 32;
      *(_WORD *)v25 = 15648;
      v30 = *((_QWORD *)v24 + 4) + 3;
      goto LABEL_40;
    }
  }
  v24 = *(llvm::raw_ostream **)this;
  v29 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v29) <= 0xA)
  {
    llvm::raw_ostream::write(v24, "<badref> = ", 0xBuLL);
    goto LABEL_41;
  }
  *(_DWORD *)(v29 + 7) = 540876862;
  *(_QWORD *)v29 = *(_QWORD *)"<badref> = ";
  v30 = *((_QWORD *)v24 + 4) + 11;
LABEL_40:
  *((_QWORD *)v24 + 4) = v30;
LABEL_41:
  if (*((_BYTE *)a2 + 16) != 84)
    goto LABEL_55;
  v32 = *((_WORD *)a2 + 9) & 3;
  if (v32 == 2)
  {
    v33 = *(llvm::raw_ostream **)this;
    v34 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v34) <= 8)
    {
      llvm::raw_ostream::write(v33, "musttail ", 9uLL);
      goto LABEL_55;
    }
    *(_BYTE *)(v34 + 8) = 32;
    *(_QWORD *)v34 = *(_QWORD *)"musttail ";
    v36 = *((_QWORD *)v33 + 4) + 9;
  }
  else if ((v32 - 1) > 1)
  {
    if (v32 != 3)
      goto LABEL_55;
    v33 = *(llvm::raw_ostream **)this;
    v37 = *(_DWORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v37 <= 6uLL)
    {
      llvm::raw_ostream::write(v33, "notail ", 7uLL);
      goto LABEL_55;
    }
    *(_DWORD *)((char *)v37 + 3) = 543975777;
    *v37 = 1635020654;
    v36 = *((_QWORD *)v33 + 4) + 7;
  }
  else
  {
    v33 = *(llvm::raw_ostream **)this;
    v35 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v35) <= 4)
    {
      llvm::raw_ostream::write(v33, "tail ", 5uLL);
      goto LABEL_55;
    }
    *(_BYTE *)(v35 + 4) = 32;
    *(_DWORD *)v35 = 1818845556;
    v36 = *((_QWORD *)v33 + 4) + 5;
  }
  *((_QWORD *)v33 + 4) = v36;
LABEL_55:
  v38 = *(llvm::raw_ostream **)this;
  OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*((unsigned __int8 *)a2 + 16) - 28));
  if (OpcodeName)
  {
    v40 = OpcodeName;
    v41 = strlen(OpcodeName);
    v42 = (void *)*((_QWORD *)v38 + 4);
    if (v41 <= *((_QWORD *)v38 + 3) - (_QWORD)v42)
    {
      if (v41)
      {
        memcpy(v42, v40, v41);
        *((_QWORD *)v38 + 4) += v41;
      }
    }
    else
    {
      llvm::raw_ostream::write(v38, v40, v41);
    }
  }
  v43 = *((unsigned __int8 *)a2 + 16);
  if (v43 != 61)
  {
    if (v43 != 60)
      goto LABEL_69;
    if (!llvm::Instruction::isAtomic(a2))
    {
LABEL_75:
      if ((*((_WORD *)a2 + 9) & 1) != 0)
      {
        v48 = *(llvm::raw_ostream **)this;
        v49 = *(_QWORD *)(*(_QWORD *)this + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v49) > 8)
        {
          *(_BYTE *)(v49 + 8) = 101;
          *(_QWORD *)v49 = *(_QWORD *)" volatile";
          *((_QWORD *)v48 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v48, " volatile", 9uLL);
        }
      }
      goto LABEL_79;
    }
    goto LABEL_65;
  }
  if (llvm::Instruction::isAtomic(a2))
  {
LABEL_65:
    v44 = *(llvm::raw_ostream **)this;
    v45 = *(_DWORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v45 > 6uLL)
    {
      *(_DWORD *)((char *)v45 + 3) = 1667853679;
      *v45 = 1869898016;
      *((_QWORD *)v44 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v44, " atomic", 7uLL);
    }
  }
  v43 = *((unsigned __int8 *)a2 + 16);
LABEL_69:
  if (v43 == 64 && (*((_WORD *)a2 + 9) & 2) != 0)
  {
    v46 = *(llvm::raw_ostream **)this;
    v47 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v47) > 4)
    {
      *(_BYTE *)(v47 + 4) = 107;
      *(_DWORD *)v47 = 1634039584;
      *((_QWORD *)v46 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v46, " weak", 5uLL);
    }
  }
  switch(*((_BYTE *)a2 + 16))
  {
    case '<':
    case '=':
    case '@':
    case 'A':
      goto LABEL_75;
    default:
      break;
  }
LABEL_79:
  WriteOptimizationInfo(*(llvm::raw_ostream **)this, a2);
  v51 = *((unsigned __int8 *)a2 + 16);
  if ((v51 - 83) >= 0xFFFFFFFE)
  {
    v52 = *(llvm::raw_ostream **)this;
    v53 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v53 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      v52 = llvm::raw_ostream::write(v52, 32);
    }
    else
    {
      *((_QWORD *)v52 + 4) = v53 + 1;
      *v53 = 32;
    }
    llvm::operator<<(v52, *((_WORD *)a2 + 9) & 0x3F);
    v51 = *((unsigned __int8 *)a2 + 16);
  }
  if (v51 == 65)
  {
    v54 = *(llvm::raw_ostream **)this;
    v55 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v55 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      v54 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
    }
    else
    {
      *((_QWORD *)v54 + 4) = v55 + 1;
      *v55 = 32;
    }
    OperationName = llvm::AtomicRMWInst::getOperationName((*((unsigned __int16 *)a2 + 9) >> 4) & 0x1F);
    v58 = v56;
    v59 = (void *)*((_QWORD *)v54 + 4);
    if (v56 <= *((_QWORD *)v54 + 3) - (_QWORD)v59)
    {
      if (v56)
      {
        memcpy(v59, OperationName, v56);
        *((_QWORD *)v54 + 4) += v58;
      }
    }
    else
    {
      llvm::raw_ostream::write(v54, OperationName, v56);
    }
  }
  v60 = *((_DWORD *)a2 + 5);
  v61 = v60 & 0x7FFFFFF;
  if ((v60 & 0x7FFFFFF) != 0)
  {
    if ((v60 & 0x40000000) != 0)
    {
      v62 = (Type **)**((_QWORD **)a2 - 1);
      v63 = *((unsigned __int8 *)a2 + 16);
      if (v63 != 30)
      {
LABEL_95:
        if (v63 != 32)
        {
LABEL_96:
          if (v63 == 31)
          {
            v64 = *(llvm::raw_ostream **)this;
            v65 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v65 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v64, 32);
              v66 = *((_DWORD *)a2 + 5);
              if ((v66 & 0x40000000) != 0)
                goto LABEL_99;
            }
            else
            {
              *((_QWORD *)v64 + 4) = v65 + 1;
              *v65 = 32;
              v66 = *((_DWORD *)a2 + 5);
              if ((v66 & 0x40000000) != 0)
              {
LABEL_99:
                v67 = (Type ***)*((_QWORD *)a2 - 1);
                goto LABEL_122;
              }
            }
            v67 = (Type ***)((char *)a2 - 32 * (v66 & 0x7FFFFFF));
LABEL_122:
            v82 = *(llvm::raw_ostream **)this;
            v83 = *(_WORD **)(*(_QWORD *)this + 32);
            if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v83 > 1uLL)
            {
              *v83 = 8236;
              *((_QWORD *)v82 + 4) += 2;
              v84 = *((_DWORD *)a2 + 5);
              if ((v84 & 0x40000000) != 0)
                goto LABEL_124;
            }
            else
            {
              llvm::raw_ostream::write(v82, ", ", 2uLL);
              v84 = *((_DWORD *)a2 + 5);
              if ((v84 & 0x40000000) != 0)
              {
LABEL_124:
                v85 = (Type ***)*((_QWORD *)a2 - 1);
LABEL_135:
                v94 = *(llvm::raw_ostream **)this;
                v95 = *(_WORD **)(*(_QWORD *)this + 32);
                if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v95 > 1uLL)
                {
                  *v95 = 23328;
                  *((_QWORD *)v94 + 4) += 2;
                  v96 = ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1;
                  if (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF) == 1)
                    goto LABEL_158;
                }
                else
                {
                  llvm::raw_ostream::write(v94, " [", 2uLL);
                  v96 = ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1;
                  if (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF) == 1)
                  {
LABEL_158:
                    v111 = *(llvm::raw_ostream **)this;
                    v112 = *(_DWORD **)(*(_QWORD *)this + 32);
                    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v112 > 3uLL)
                    {
                      *v112 = 1562386442;
                      *((_QWORD *)v111 + 4) += 4;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v111, "\n  ]", 4uLL);
                    }
                    goto LABEL_354;
                  }
                }
                v99 = 0;
                v100 = 2 * v96;
                while (1)
                {
                  v103 = *(llvm::raw_ostream **)this;
                  v104 = *(_QWORD *)(*(_QWORD *)this + 32);
                  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v104) > 4)
                  {
                    *(_BYTE *)(v104 + 4) = 32;
                    *(_DWORD *)v104 = 538976266;
                    *((_QWORD *)v103 + 4) += 5;
                    v105 = *((_DWORD *)a2 + 5);
                    if ((v105 & 0x40000000) != 0)
                    {
LABEL_150:
                      v106 = (char *)*((_QWORD *)a2 - 1);
                      goto LABEL_153;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write(v103, "\n    ", 5uLL);
                    v105 = *((_DWORD *)a2 + 5);
                    if ((v105 & 0x40000000) != 0)
                      goto LABEL_150;
                  }
                  v106 = (char *)a2 - 32 * (v105 & 0x7FFFFFF);
LABEL_153:
                  v108 = *(llvm::raw_ostream **)this;
                  v109 = *(_WORD **)(*(_QWORD *)this + 32);
                  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v109 > 1uLL)
                  {
                    *v109 = 8236;
                    *((_QWORD *)v108 + 4) += 2;
                    v110 = *((_DWORD *)a2 + 5);
                    if ((v110 & 0x40000000) != 0)
                    {
LABEL_157:
                      v101 = (char *)*((_QWORD *)a2 - 1);
                      goto LABEL_145;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write(v108, ", ", 2uLL);
                    v110 = *((_DWORD *)a2 + 5);
                    if ((v110 & 0x40000000) != 0)
                      goto LABEL_157;
                  }
                  v101 = (char *)a2 - 32 * (v110 & 0x7FFFFFF);
LABEL_145:
                  v102 = (v99 + 3);
                  if (v99 == 0x1FFFFFFFCLL)
                    v102 = 1;
                  v99 += 2;
                  if (v100 == v99)
                    goto LABEL_158;
                }
              }
            }
            v85 = (Type ***)((char *)a2 - 32 * (v84 & 0x7FFFFFF));
            goto LABEL_135;
          }
          if (v63 == 83)
            v72 = a2;
          else
            v72 = 0;
          if (v63 == 83)
          {
            v73 = *(llvm::raw_ostream **)this;
            v74 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v74 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v73, 32);
            }
            else
            {
              *((_QWORD *)v73 + 4) = v74 + 1;
              *v74 = 32;
            }
            v121 = *(llvm::raw_ostream **)this;
            v122 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v122 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v121, 32);
            }
            else
            {
              *((_QWORD *)v121 + 4) = v122 + 1;
              *v122 = 32;
            }
            v125 = *((_DWORD *)a2 + 5);
            v126 = v125 & 0x7FFFFFF;
            if ((v125 & 0x7FFFFFF) == 0)
              goto LABEL_354;
            v127 = 0;
            while (1)
            {
              v128 = *(llvm::raw_ostream **)this;
              v129 = *(_WORD **)(*(_QWORD *)this + 32);
              v130 = *(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v129;
              if (v127)
                break;
              if (v130 > 1)
              {
                *v129 = 8283;
                *((_QWORD *)v128 + 4) += 2;
                v139 = *((_DWORD *)a2 + 5);
                if ((v139 & 0x40000000) != 0)
                {
LABEL_191:
                  v134 = (const llvm::Value *)**((_QWORD **)a2 - 1);
                  if (v134)
                    goto LABEL_196;
                  goto LABEL_186;
                }
              }
              else
              {
                llvm::raw_ostream::write(v128, "[ ", 2uLL);
                v139 = *((_DWORD *)a2 + 5);
                if ((v139 & 0x40000000) != 0)
                  goto LABEL_191;
              }
              v134 = (const llvm::Value *)*((_QWORD *)v72 - 4 * (v139 & 0x7FFFFFF));
              if (v134)
              {
LABEL_196:
                v140 = *((_QWORD *)this + 4);
                __p = &off_1E0E15E00;
                v434 = (uint64_t)this + 40;
                v141 = *(llvm::raw_ostream **)this;
                v142 = *((_QWORD *)this + 1);
                v435 = v140;
                v436 = v142;
                WriteAsOperandInternal(v141, v134, (_anonymous_namespace_::TypePrinting **)&__p, v120);
                v137 = *(llvm::raw_ostream **)this;
                v138 = *(_WORD **)(*(_QWORD *)this + 32);
                if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v138 > 1uLL)
                  goto LABEL_203;
                goto LABEL_197;
              }
LABEL_186:
              v135 = *(llvm::raw_ostream **)this;
              v136 = *(void **)(*(_QWORD *)this + 32);
              if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v136 > 0xEuLL)
              {
                qmemcpy(v136, "<null operand!>", 15);
                *((_QWORD *)v135 + 4) += 15;
                v137 = *(llvm::raw_ostream **)this;
                v138 = *(_WORD **)(*(_QWORD *)this + 32);
                if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v138 > 1uLL)
                  goto LABEL_203;
LABEL_197:
                llvm::raw_ostream::write(v137, ", ", 2uLL);
                v143 = *((_DWORD *)a2 + 5);
                if ((v143 & 0x40000000) != 0)
                  goto LABEL_204;
LABEL_198:
                v144 = (const llvm::Value *)*((_QWORD *)v72
                                            + 4 * *((unsigned int *)a2 + 18)
                                            + v127
                                            + -4 * (v143 & 0x7FFFFFF));
                if (v144)
                  goto LABEL_205;
LABEL_199:
                v145 = *(llvm::raw_ostream **)this;
                v146 = *(void **)(*(_QWORD *)this + 32);
                if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v146 > 0xEuLL)
                {
                  qmemcpy(v146, "<null operand!>", 15);
                  *((_QWORD *)v145 + 4) += 15;
                  v147 = *(llvm::raw_ostream **)this;
                  v148 = *(_WORD **)(*(_QWORD *)this + 32);
                  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v148 > 1uLL)
                    goto LABEL_180;
                }
                else
                {
                  llvm::raw_ostream::write(v145, "<null operand!>", 0xFuLL);
                  v147 = *(llvm::raw_ostream **)this;
                  v148 = *(_WORD **)(*(_QWORD *)this + 32);
                  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v148 > 1uLL)
                    goto LABEL_180;
                }
LABEL_211:
                llvm::raw_ostream::write(v147, " ]", 2uLL);
                if (++v127 == v126)
                  goto LABEL_354;
              }
              else
              {
                llvm::raw_ostream::write(v135, "<null operand!>", 0xFuLL);
                v137 = *(llvm::raw_ostream **)this;
                v138 = *(_WORD **)(*(_QWORD *)this + 32);
                if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v138 <= 1uLL)
                  goto LABEL_197;
LABEL_203:
                *v138 = 8236;
                *((_QWORD *)v137 + 4) += 2;
                v143 = *((_DWORD *)a2 + 5);
                if ((v143 & 0x40000000) == 0)
                  goto LABEL_198;
LABEL_204:
                v144 = *(const llvm::Value **)(*((_QWORD *)a2 - 1) + 32 * *((unsigned int *)a2 + 18) + 8 * v127);
                if (!v144)
                  goto LABEL_199;
LABEL_205:
                v149 = *((_QWORD *)this + 4);
                __p = &off_1E0E15E00;
                v434 = (uint64_t)this + 40;
                v150 = *(llvm::raw_ostream **)this;
                v151 = *((_QWORD *)this + 1);
                v435 = v149;
                v436 = v151;
                WriteAsOperandInternal(v150, v144, (_anonymous_namespace_::TypePrinting **)&__p, v120);
                v147 = *(llvm::raw_ostream **)this;
                v148 = *(_WORD **)(*(_QWORD *)this + 32);
                if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v148 <= 1uLL)
                  goto LABEL_211;
LABEL_180:
                *v148 = 23840;
                *((_QWORD *)v147 + 4) += 2;
                if (++v127 == v126)
                  goto LABEL_354;
              }
            }
            if (v130 > 1)
            {
              *v129 = 8236;
              *((_QWORD *)v128 + 4) += 2;
              v131 = *(llvm::raw_ostream **)this;
              v132 = *(_WORD **)(*(_QWORD *)this + 32);
              if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v132 > 1uLL)
              {
LABEL_184:
                *v132 = 8283;
                *((_QWORD *)v131 + 4) += 2;
                v133 = *((_DWORD *)a2 + 5);
                if ((v133 & 0x40000000) != 0)
                  goto LABEL_185;
LABEL_195:
                v134 = (const llvm::Value *)*((_QWORD *)v72 + 4 * v127 + -4 * (v133 & 0x7FFFFFF));
                if (v134)
                  goto LABEL_196;
                goto LABEL_186;
              }
            }
            else
            {
              llvm::raw_ostream::write(v128, ", ", 2uLL);
              v131 = *(llvm::raw_ostream **)this;
              v132 = *(_WORD **)(*(_QWORD *)this + 32);
              if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v132 > 1uLL)
                goto LABEL_184;
            }
            llvm::raw_ostream::write(v131, "[ ", 2uLL);
            v133 = *((_DWORD *)a2 + 5);
            if ((v133 & 0x40000000) != 0)
            {
LABEL_185:
              v134 = *(const llvm::Value **)(*((_QWORD *)a2 - 1) + 32 * v127);
              if (v134)
                goto LABEL_196;
              goto LABEL_186;
            }
            goto LABEL_195;
          }
          if (v63 == 93)
          {
            v173 = *(llvm::raw_ostream **)this;
            v174 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v174 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v173, 32);
            }
            else
            {
              *((_QWORD *)v173 + 4) = v174 + 1;
              *v174 = 32;
            }
            v180 = *((_DWORD *)a2 + 5);
            if ((v180 & 0x40000000) != 0)
              v181 = (Type ***)*((_QWORD *)a2 - 1);
            else
              v181 = (Type ***)((char *)a2 - 32 * (v180 & 0x7FFFFFF));
            v194 = *(llvm::raw_ostream **)this;
            v195 = *(_WORD **)(*(_QWORD *)this + 32);
            if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v195 > 1uLL)
            {
              *v195 = 8236;
              *((_QWORD *)v194 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v194, ", ", 2uLL);
            }
            v196 = *((_DWORD *)a2 + 5);
            if ((v196 & 0x40000000) != 0)
              v197 = (Type ***)*((_QWORD *)a2 - 1);
            else
              v197 = (Type ***)((char *)a2 - 32 * (v196 & 0x7FFFFFF));
            v198 = *((unsigned int *)a2 + 20);
            if ((_DWORD)v198)
            {
              v199 = (unsigned int *)*((_QWORD *)a2 + 9);
              v200 = 4 * v198;
              do
              {
                while (1)
                {
                  v201 = *v199;
                  v202 = *(llvm::raw_ostream **)this;
                  v203 = *(_WORD **)(*(_QWORD *)this + 32);
                  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v203 <= 1uLL)
                    break;
                  *v203 = 8236;
                  *((_QWORD *)v202 + 4) += 2;
                  llvm::raw_ostream::operator<<(v202, v201);
                  ++v199;
                  v200 -= 4;
                  if (!v200)
                    goto LABEL_354;
                }
                v204 = llvm::raw_ostream::write(v202, ", ", 2uLL);
                llvm::raw_ostream::operator<<(v204, v201);
                ++v199;
                v200 -= 4;
              }
              while (v200);
            }
            goto LABEL_354;
          }
          if (v63 == 92)
          {
            v91 = *(llvm::raw_ostream **)this;
            v92 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v92 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v91, 32);
            }
            else
            {
              *((_QWORD *)v91 + 4) = v92 + 1;
              *v92 = 32;
            }
            v178 = *((_DWORD *)a2 + 5);
            if ((v178 & 0x40000000) != 0)
              v179 = (Type ***)*((_QWORD *)a2 - 1);
            else
              v179 = (Type ***)((char *)a2 - 32 * (v178 & 0x7FFFFFF));
            v186 = *((unsigned int *)a2 + 20);
            if ((_DWORD)v186)
            {
              v187 = (unsigned int *)*((_QWORD *)a2 + 9);
              v188 = 4 * v186;
              do
              {
                while (1)
                {
                  v189 = *v187;
                  v190 = *(llvm::raw_ostream **)this;
                  v191 = *(_WORD **)(*(_QWORD *)this + 32);
                  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v191 <= 1uLL)
                    break;
                  *v191 = 8236;
                  *((_QWORD *)v190 + 4) += 2;
                  llvm::raw_ostream::operator<<(v190, v189);
                  ++v187;
                  v188 -= 4;
                  if (!v188)
                    goto LABEL_354;
                }
                v192 = llvm::raw_ostream::write(v190, ", ", 2uLL);
                llvm::raw_ostream::operator<<(v192, v189);
                ++v187;
                v188 -= 4;
              }
              while (v188);
            }
            goto LABEL_354;
          }
          if (v63 == 94)
            v175 = a2;
          else
            v175 = 0;
          if (v63 == 94)
          {
            v176 = *(llvm::raw_ostream **)this;
            v177 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v177 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v176, 32);
            }
            else
            {
              *((_QWORD *)v176 + 4) = v177 + 1;
              *v177 = 32;
            }
            if ((*((_WORD *)a2 + 9) & 1) != 0 || (*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
            {
              v206 = *(llvm::raw_ostream **)this;
              v207 = *(_BYTE **)(*(_QWORD *)this + 32);
              if ((unint64_t)v207 >= *(_QWORD *)(*(_QWORD *)this + 24))
              {
                llvm::raw_ostream::write(v206, 10);
              }
              else
              {
                *((_QWORD *)v206 + 4) = v207 + 1;
                *v207 = 10;
              }
            }
            if ((*((_WORD *)a2 + 9) & 1) != 0)
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "          cleanup");
            v209 = *((_DWORD *)a2 + 5);
            v210 = v209 & 0x7FFFFFF;
            if ((v209 & 0x7FFFFFF) == 0)
              goto LABEL_354;
            if ((*((_WORD *)a2 + 9) & 1) != 0)
            {
              v212 = *(llvm::raw_ostream **)this;
              v213 = *(_BYTE **)(*(_QWORD *)this + 32);
              if (*(_BYTE **)(*(_QWORD *)this + 24) == v213)
              {
                llvm::raw_ostream::write(v212, "\n", 1uLL);
              }
              else
              {
                *v213 = 10;
                ++*((_QWORD *)v212 + 4);
              }
              v238 = *((_DWORD *)a2 + 5);
              if ((v238 & 0x40000000) == 0)
              {
                v211 = (char *)a2 - 32 * (v238 & 0x7FFFFFF);
                goto LABEL_341;
              }
            }
            else if ((v209 & 0x40000000) == 0)
            {
              v211 = (char *)a2 - 32 * v210;
              goto LABEL_341;
            }
            v211 = (char *)*((_QWORD *)a2 - 1);
LABEL_341:
            if (*(_BYTE *)(**(_QWORD **)v211 + 8) == 17)
            {
              v239 = *(llvm::raw_ostream **)this;
              v240 = *(_QWORD *)(*(_QWORD *)this + 32);
              if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v240) < 0x11)
              {
                v241 = "          filter ";
                v242 = 17;
LABEL_346:
                llvm::raw_ostream::write(v239, v241, v242);
LABEL_350:
                v245 = *((_DWORD *)a2 + 5);
                if ((v245 & 0x40000000) != 0)
                  v246 = (Type ***)*((_QWORD *)a2 - 1);
                else
                  v246 = (Type ***)((char *)a2 - 32 * (v245 & 0x7FFFFFF));
                if ((_DWORD)v210 == 1)
                  goto LABEL_354;
                v290 = v210 - 1;
                v291 = 32;
                while (1)
                {
                  v293 = *(llvm::raw_ostream **)this;
                  v294 = *(_BYTE **)(*(_QWORD *)this + 32);
                  if (*(_BYTE **)(*(_QWORD *)this + 24) == v294)
                  {
                    llvm::raw_ostream::write(v293, "\n", 1uLL);
                    v295 = *((_DWORD *)a2 + 5);
                    if ((v295 & 0x40000000) == 0)
                    {
LABEL_425:
                      v296 = (char *)v175 - 32 * (v295 & 0x7FFFFFF);
                      goto LABEL_428;
                    }
                  }
                  else
                  {
                    *v294 = 10;
                    ++*((_QWORD *)v293 + 4);
                    v295 = *((_DWORD *)a2 + 5);
                    if ((v295 & 0x40000000) == 0)
                      goto LABEL_425;
                  }
                  v296 = (char *)*((_QWORD *)a2 - 1);
LABEL_428:
                  v297 = *(unsigned __int8 *)(**(_QWORD **)&v296[v291] + 8);
                  v298 = *(llvm::raw_ostream **)this;
                  v299 = *(_QWORD *)(*(_QWORD *)this + 32);
                  v300 = *(_QWORD *)(*(_QWORD *)this + 24) - v299;
                  if (v297 == 17)
                  {
                    if (v300 > 0x10)
                    {
                      *(_BYTE *)(v299 + 16) = 32;
                      *(_OWORD *)v299 = *(_OWORD *)"          filter ";
                      v301 = *((_QWORD *)v298 + 4) + 17;
LABEL_435:
                      *((_QWORD *)v298 + 4) = v301;
                      goto LABEL_436;
                    }
                    llvm::raw_ostream::write(v298, "          filter ", 0x11uLL);
                  }
                  else
                  {
                    if (v300 > 0xF)
                    {
                      *(_OWORD *)v299 = *(_OWORD *)"          catch ";
                      v301 = *((_QWORD *)v298 + 4) + 16;
                      goto LABEL_435;
                    }
                    llvm::raw_ostream::write(v298, "          catch ", 0x10uLL);
                  }
LABEL_436:
                  v302 = *((_DWORD *)a2 + 5);
                  if ((v302 & 0x40000000) != 0)
                    v292 = (char *)*((_QWORD *)a2 - 1);
                  else
                    v292 = (char *)v175 - 32 * (v302 & 0x7FFFFFF);
                  v291 += 32;
                  if (!--v290)
                    goto LABEL_354;
                }
              }
              *(_BYTE *)(v240 + 16) = 32;
              *(_OWORD *)v240 = *(_OWORD *)"          filter ";
              v244 = *((_QWORD *)v239 + 4) + 17;
            }
            else
            {
              v239 = *(llvm::raw_ostream **)this;
              v243 = *(_OWORD **)(*(_QWORD *)this + 32);
              if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v243 < 0x10uLL)
              {
                v241 = "          catch ";
                v242 = 16;
                goto LABEL_346;
              }
              *v243 = *(_OWORD *)"          catch ";
              v244 = *((_QWORD *)v239 + 4) + 16;
            }
            *((_QWORD *)v239 + 4) = v244;
            goto LABEL_350;
          }
          if (v63 == 38)
            v182 = a2;
          else
            v182 = 0;
          if (v63 == 38)
          {
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " within ");
            v184 = *((_DWORD *)a2 + 5);
            if ((v184 & 0x40000000) != 0)
              v185 = (Type ***)*((_QWORD *)a2 - 1);
            else
              v185 = (Type ***)((char *)a2 - 32 * (v184 & 0x7FFFFFF));
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " [");
            v215 = *((_DWORD *)a2 + 5);
            if ((v215 & 0x40000000) != 0)
            {
              v217 = (char *)*((_QWORD *)a2 - 1);
              v229 = 64;
              if ((*((_WORD *)a2 + 9) & 1) == 0)
                v229 = 32;
              v219 = (Type ***)&v217[v229];
              v216 = v215 & 0x7FFFFFF;
            }
            else
            {
              v216 = v215 & 0x7FFFFFF;
              v217 = (char *)a2 - 32 * v216;
              v218 = 64;
              if ((*((_WORD *)a2 + 9) & 1) == 0)
                v218 = 32;
              v219 = (Type ***)&v217[v218];
            }
            v230 = (Type ***)&v217[32 * v216];
            if (v219 != v230)
            {
              v231 = 0;
              do
              {
                v232 = *v219;
                if (v231)
                {
                  v233 = *(llvm::raw_ostream **)this;
                  v234 = *(_WORD **)(*(_QWORD *)this + 32);
                  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v234 > 1uLL)
                  {
                    *v234 = 8236;
                    *((_QWORD *)v233 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v233, ", ", 2uLL);
                  }
                }
                v219 += 4;
                --v231;
              }
              while (v219 != v230);
            }
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "] unwind ");
            if ((*((_WORD *)v182 + 9) & 1) == 0)
              goto LABEL_336;
            v235 = *((_DWORD *)a2 + 5);
            v236 = (v235 & 0x40000000) != 0
                 ? (const llvm::Instruction *)*((_QWORD *)v182 - 1)
                 : (const llvm::Instruction *)((char *)v182 - 32 * (v235 & 0x7FFFFFF));
            v119 = (Type **)*((_QWORD *)v236 + 4);
            if (!v119)
              goto LABEL_336;
            goto LABEL_169;
          }
          if ((v63 - 81) >= 0xFFFFFFFE)
            v208 = a2;
          else
            v208 = 0;
          if ((v63 - 81) >= 0xFFFFFFFE)
          {
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " within ");
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " [");
            v222 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
            v223 = (v222 - 1);
            if ((_DWORD)v222 != 1)
            {
              if ((_DWORD)v223 != 1)
              {
                v225 = (char *)v208 + 32;
                v226 = v223 - 1;
                do
                {
                  v227 = *(llvm::raw_ostream **)this;
                  v228 = *(_WORD **)(*(_QWORD *)this + 32);
                  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v228 > 1uLL)
                  {
                    *v228 = 8236;
                    *((_QWORD *)v227 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v227, ", ", 2uLL);
                  }
                  v225 += 32;
                  --v226;
                }
                while (v226);
              }
            }
            goto LABEL_174;
          }
          if (v63 == 29 && !v62)
          {
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " void");
            goto LABEL_354;
          }
          if (v63 == 36)
          {
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " from ");
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " unwind ");
            if ((*((_WORD *)a2 + 9) & 1) == 0)
            {
LABEL_336:
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "to caller");
              goto LABEL_354;
            }
            v119 = (Type **)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
            goto LABEL_169;
          }
          if (v63 == 37)
          {
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " from ");
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " to ");
            v119 = (Type **)*((_QWORD *)a2 - 4);
LABEL_169:
            goto LABEL_354;
          }
          if (v63 == 84)
            v304 = a2;
          else
            v304 = 0;
          if (v63 == 84)
          {
            if ((*((_WORD *)a2 + 9) & 0xFFC) != 0)
            {
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " ");
              PrintCallingConv((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF, *(llvm::raw_ostream **)this);
            }
            v305 = (llvm::raw_ostream *)*((_QWORD *)a2 - 4);
            v306 = *((_QWORD *)a2 + 10);
            v307 = **(Type ***)(v306 + 16);
            v432 = *((_QWORD *)a2 + 9);
            if (llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v432, 0))
            {
              v308 = *(llvm::raw_ostream **)this;
              v309 = *(_BYTE **)(*(_QWORD *)this + 32);
              if ((unint64_t)v309 >= *(_QWORD *)(*(_QWORD *)this + 24))
              {
                v308 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
              }
              else
              {
                *((_QWORD *)v308 + 4) = v309 + 1;
                *v309 = 32;
              }
              llvm::AttributeList::getAsString((llvm::AttributeList *)&v432, 0, 0, (uint64_t)&__p);
              v323 = v435 >= 0 ? (const char *)&__p : (const char *)__p;
              v324 = v435 >= 0 ? HIBYTE(v435) : v434;
              llvm::raw_ostream::write(v308, v323, v324);
              if (SHIBYTE(v435) < 0)
                operator delete(__p);
            }
            maybePrintCallAddrSpace(v305, (ValueImpl *)a2, *(llvm::raw_ostream **)this);
            v325 = *(llvm::raw_ostream **)this;
            v326 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v326 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v325, 32);
            }
            else
            {
              *((_QWORD *)v325 + 4) = v326 + 1;
              *v326 = 32;
            }
            if (*(_DWORD *)(v306 + 8) <= 0xFFu)
              v327 = v307;
            else
              v327 = (Type *)v306;
            v329 = *(llvm::raw_ostream **)this;
            v330 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v330 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v329, 32);
            }
            else
            {
              *((_QWORD *)v329 + 4) = v330 + 1;
              *v330 = 32;
            }
            v331 = *(llvm::raw_ostream **)this;
            v332 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v332 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v331, 40);
            }
            else
            {
              *((_QWORD *)v331 + 4) = v332 + 1;
              *v332 = 40;
            }
            v333 = llvm::CallBase::arg_end(a2);
            v334 = (Type ***)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            if (((v333 - (_QWORD)v334) & 0x1FFFFFFFE0) != 0)
            {
              v335 = ((unint64_t)(v333 - (_QWORD)v334) >> 5);
              v336 = *v334;
              ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v432, 0);
              if (v335 != 1)
              {
                v338 = (char *)v304 + 32;
                for (i = 1; i != v335; ++i)
                {
                  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ");
                  v340 = *(Type ***)&v338[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
                  v341 = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v432, i);
                  v338 += 32;
                }
              }
            }
            if ((*((_WORD *)a2 + 9) & 3) == 2)
            {
              v342 = *((_QWORD *)v304 + 5);
              if (v342)
              {
                v343 = *(_QWORD *)(v342 + 64);
                if (v343)
                {
                  if (*(_DWORD *)(*(_QWORD *)(v343 + 24) + 8) >= 0x100u)
                  {
                    if (((llvm::CallBase::arg_end(v304) - ((_QWORD)v304 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0)
                      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ");
                    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "...");
                  }
                }
              }
            }
            v344 = *(llvm::raw_ostream **)this;
            v345 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v345 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v344, 41);
            }
            else
            {
              *((_QWORD *)v344 + 4) = v345 + 1;
              *v345 = 41;
            }
            if (llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v432, -1))
            {
              v346 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " #");
              v347 = *((_QWORD *)this + 4);
              FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v432);
              AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot(v347, FnAttrs);
              llvm::raw_ostream::operator<<(v346, AttributeGroupSlot);
            }
            goto LABEL_354;
          }
          if (v63 == 33)
            v310 = a2;
          else
            v310 = 0;
          if (v63 == 33)
          {
            v311 = (llvm::raw_ostream *)*((_QWORD *)a2 - 4);
            v312 = *((_QWORD *)a2 + 10);
            v313 = **(Type ***)(v312 + 16);
            v432 = *((_QWORD *)a2 + 9);
            if ((*((_WORD *)a2 + 9) & 0xFFC) != 0)
            {
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " ");
              PrintCallingConv((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF, *(llvm::raw_ostream **)this);
            }
            if (llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v432, 0))
            {
              v314 = *(llvm::raw_ostream **)this;
              v315 = *(_BYTE **)(*(_QWORD *)this + 32);
              if ((unint64_t)v315 >= *(_QWORD *)(*(_QWORD *)this + 24))
              {
                v314 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
              }
              else
              {
                *((_QWORD *)v314 + 4) = v315 + 1;
                *v315 = 32;
              }
              llvm::AttributeList::getAsString((llvm::AttributeList *)&v432, 0, 0, (uint64_t)&__p);
              v352 = v435 >= 0 ? (const char *)&__p : (const char *)__p;
              v353 = v435 >= 0 ? HIBYTE(v435) : v434;
              llvm::raw_ostream::write(v314, v352, v353);
              if (SHIBYTE(v435) < 0)
                operator delete(__p);
            }
            maybePrintCallAddrSpace(v311, (ValueImpl *)a2, *(llvm::raw_ostream **)this);
            v354 = *(llvm::raw_ostream **)this;
            v355 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v355 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v354, 32);
            }
            else
            {
              *((_QWORD *)v354 + 4) = v355 + 1;
              *v355 = 32;
            }
            if (*(_DWORD *)(v312 + 8) <= 0xFFu)
              v356 = v313;
            else
              v356 = (Type *)v312;
            v358 = *(llvm::raw_ostream **)this;
            v359 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v359 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v358, 32);
            }
            else
            {
              *((_QWORD *)v358 + 4) = v359 + 1;
              *v359 = 32;
            }
            v360 = *(llvm::raw_ostream **)this;
            v361 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v361 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v360, 40);
            }
            else
            {
              *((_QWORD *)v360 + 4) = v361 + 1;
              *v361 = 40;
            }
            v362 = llvm::CallBase::arg_end(a2);
            v363 = (Type ***)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            if (((v362 - (_QWORD)v363) & 0x1FFFFFFFE0) != 0)
            {
              v364 = ((unint64_t)(v362 - (_QWORD)v363) >> 5);
              v365 = *v363;
              v366 = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v432, 0);
              if (v364 != 1)
              {
                v367 = (char *)v310 + 32;
                for (j = 1; j != v364; ++j)
                {
                  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ");
                  v369 = *(Type ***)&v367[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
                  v370 = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v432, j);
                  v367 += 32;
                }
              }
            }
            v371 = *(llvm::raw_ostream **)this;
            v372 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v372 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v371, 41);
            }
            else
            {
              *((_QWORD *)v371 + 4) = v372 + 1;
              *v372 = 41;
            }
            if (llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v432, -1))
            {
              v373 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " #");
              v374 = *((_QWORD *)this + 4);
              v375 = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v432);
              v376 = llvm::SlotTracker::getAttributeGroupSlot(v374, v375);
              llvm::raw_ostream::operator<<(v373, v376);
            }
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "\n          to ");
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " unwind ");
            v119 = (Type **)*((_QWORD *)v310 - 8);
            goto LABEL_169;
          }
          if (v63 == 39)
            v316 = (unsigned int *)a2;
          else
            v316 = 0;
          if (v63 == 39)
          {
            v318 = (char *)a2 - 32;
            v317 = (Type **)*((_QWORD *)a2 - 4);
            v319 = *((_QWORD *)a2 + 10);
            v320 = **(Type ***)(v319 + 16);
            v432 = *((_QWORD *)a2 + 9);
            if ((*((_WORD *)a2 + 9) & 0xFFC) != 0)
            {
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " ");
              PrintCallingConv((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF, *(llvm::raw_ostream **)this);
            }
            if (llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v432, 0))
            {
              v321 = *(llvm::raw_ostream **)this;
              v322 = *(_BYTE **)(*(_QWORD *)this + 32);
              if ((unint64_t)v322 >= *(_QWORD *)(*(_QWORD *)this + 24))
              {
                v321 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
              }
              else
              {
                *((_QWORD *)v321 + 4) = v322 + 1;
                *v322 = 32;
              }
              llvm::AttributeList::getAsString((llvm::AttributeList *)&v432, 0, 0, (uint64_t)&__p);
              v380 = v435 >= 0 ? (const char *)&__p : (const char *)__p;
              v381 = v435 >= 0 ? HIBYTE(v435) : v434;
              llvm::raw_ostream::write(v321, v380, v381);
              if (SHIBYTE(v435) < 0)
                operator delete(__p);
            }
            v382 = *(llvm::raw_ostream **)this;
            v383 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v383 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v382, 32);
            }
            else
            {
              *((_QWORD *)v382 + 4) = v383 + 1;
              *v383 = 32;
            }
            if (*(_DWORD *)(v319 + 8) <= 0xFFu)
              v384 = v320;
            else
              v384 = (Type *)v319;
            v386 = *(llvm::raw_ostream **)this;
            v387 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v387 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v386, 32);
            }
            else
            {
              *((_QWORD *)v386 + 4) = v387 + 1;
              *v387 = 32;
            }
            v388 = *(llvm::raw_ostream **)this;
            v389 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v389 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v388, 40);
            }
            else
            {
              *((_QWORD *)v388 + 4) = v389 + 1;
              *v389 = 40;
            }
            v390 = llvm::CallBase::arg_end(a2);
            v391 = (Type ***)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            if (((v390 - (_QWORD)v391) & 0x1FFFFFFFE0) != 0)
            {
              v392 = ((unint64_t)(v390 - (_QWORD)v391) >> 5);
              v393 = *v391;
              v394 = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v432, 0);
              if (v392 != 1)
              {
                v395 = v316 + 8;
                for (k = 1; k != v392; ++k)
                {
                  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ");
                  v397 = *(Type ***)&v395[-8 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
                  v398 = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v432, k);
                  v395 += 8;
                }
              }
            }
            v399 = *(llvm::raw_ostream **)this;
            v400 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v400 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v399, 41);
            }
            else
            {
              *((_QWORD *)v399 + 4) = v400 + 1;
              *v400 = 41;
            }
            if (llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)&v432, -1))
            {
              v401 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " #");
              v402 = *((_QWORD *)this + 4);
              v403 = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v432);
              v404 = llvm::SlotTracker::getAttributeGroupSlot(v402, v403);
              llvm::raw_ostream::operator<<(v401, v404);
            }
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "\n          to ");
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " [");
            v407 = v316[22];
            if ((_DWORD)v407)
            {
              if ((_DWORD)v407 != 1)
              {
                v408 = v407 - 1;
                v409 = a2;
                do
                {
                  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ");
                  v409 = (const llvm::Instruction *)((char *)v409 + 32);
                  --v408;
                }
                while (v408);
              }
            }
            goto LABEL_174;
          }
          if (v63 == 59)
          {
            v350 = *(llvm::raw_ostream **)this;
            v351 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v351 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v350, 32);
            }
            else
            {
              *((_QWORD *)v350 + 4) = v351 + 1;
              *v351 = 32;
            }
            v411 = *((_WORD *)a2 + 9);
            if ((v411 & 0x40) != 0)
            {
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "inalloca ");
              if ((*((_WORD *)a2 + 9) & 0x80) == 0)
              {
LABEL_581:
                if (!*((_QWORD *)a2 - 4))
                  goto LABEL_591;
LABEL_589:
                if (!llvm::AllocaInst::isArrayAllocation(a2) && llvm::Type::isIntegerTy(**((llvm::Type ***)a2 - 4), 32))
                {
LABEL_592:
                  v415 = *((_WORD *)a2 + 9);
                  v416 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", align ");
                  llvm::raw_ostream::operator<<(v416, 1 << v415);
                  v417 = *(unsigned int *)(*(_QWORD *)a2 + 8);
                  if (v417 >= 0x100)
                  {
                    v418 = v417 >> 8;
                    v419 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", addrspace(");
                    v420 = llvm::raw_ostream::operator<<(v419, v418);
                    v421 = (_BYTE *)*((_QWORD *)v420 + 4);
                    if ((unint64_t)v421 >= *((_QWORD *)v420 + 3))
                    {
                      llvm::raw_ostream::write(v420, 41);
                    }
                    else
                    {
                      *((_QWORD *)v420 + 4) = v421 + 1;
                      *v421 = 41;
                    }
                  }
                  goto LABEL_354;
                }
LABEL_591:
                llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ");
                goto LABEL_592;
              }
            }
            else if ((v411 & 0x80) == 0)
            {
              goto LABEL_581;
            }
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "swifterror ");
            if (!*((_QWORD *)a2 - 4))
              goto LABEL_591;
            goto LABEL_589;
          }
          if ((v63 - 66) <= 0xC)
          {
            if (v62)
            {
              v378 = *(llvm::raw_ostream **)this;
              v379 = *(_BYTE **)(*(_QWORD *)this + 32);
              if ((unint64_t)v379 >= *(_QWORD *)(*(_QWORD *)this + 24))
              {
                llvm::raw_ostream::write(v378, 32);
              }
              else
              {
                *((_QWORD *)v378 + 4) = v379 + 1;
                *v379 = 32;
              }
            }
            v424 = *(llvm::raw_ostream **)this;
            v425 = " to ";
LABEL_607:
            llvm::raw_ostream::operator<<(v424, v425);
            goto LABEL_354;
          }
          if (v63 == 88)
          {
            if (v62)
            {
              v412 = *(llvm::raw_ostream **)this;
              v413 = *(_BYTE **)(*(_QWORD *)this + 32);
              if ((unint64_t)v413 >= *(_QWORD *)(*(_QWORD *)this + 24))
              {
                llvm::raw_ostream::write(v412, 32);
              }
              else
              {
                *((_QWORD *)v412 + 4) = v413 + 1;
                *v413 = 32;
              }
            }
            v424 = *(llvm::raw_ostream **)this;
            v425 = ", ";
            goto LABEL_607;
          }
          if (!v62)
            goto LABEL_354;
          if (v63 == 60)
          {
            v426 = *(llvm::raw_ostream **)this;
            v427 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v427 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v426, 32);
            }
            else
            {
              *((_QWORD *)v426 + 4) = v427 + 1;
              *v427 = 32;
            }
            v428 = (_anonymous_namespace_::AssemblyWriter *)((char *)this + 40);
            v429 = *(Type **)a2;
          }
          else
          {
            if (v63 != 62)
              goto LABEL_115;
            v422 = *(llvm::raw_ostream **)this;
            v423 = *(_BYTE **)(*(_QWORD *)this + 32);
            if ((unint64_t)v423 >= *(_QWORD *)(*(_QWORD *)this + 24))
            {
              llvm::raw_ostream::write(v422, 32);
            }
            else
            {
              *((_QWORD *)v422 + 4) = v423 + 1;
              *v423 = 32;
            }
            v428 = (_anonymous_namespace_::AssemblyWriter *)((char *)this + 40);
            v429 = (Type *)*((_QWORD *)a2 + 9);
          }
          v430 = *(llvm::raw_ostream **)this;
          v431 = *(_BYTE **)(*(_QWORD *)this + 32);
          if ((unint64_t)v431 >= *(_QWORD *)(*(_QWORD *)this + 24))
          {
            llvm::raw_ostream::write(v430, 44);
          }
          else
          {
            *((_QWORD *)v430 + 4) = v431 + 1;
            *v431 = 44;
          }
LABEL_115:
          v75 = *v62;
          v76 = *((unsigned __int8 *)a2 + 16) - 29;
          if (v76 >= 0x3F || ((0x4100001900000001uLL >> v76) & 1) == 0)
          {
            v77 = *((_DWORD *)a2 + 5);
            v78 = (v77 & 0x7FFFFFF) - 1;
            if ((v77 & 0x7FFFFFF) == 1)
            {
LABEL_118:
              v79 = *(llvm::raw_ostream **)this;
              v80 = *(_BYTE **)(*(_QWORD *)this + 32);
              if ((unint64_t)v80 >= *(_QWORD *)(*(_QWORD *)this + 24))
              {
                llvm::raw_ostream::write(v79, 32);
              }
              else
              {
                *((_QWORD *)v79 + 4) = v80 + 1;
                *v80 = 32;
              }
              v160 = 0;
              v161 = *(llvm::raw_ostream **)this;
              v162 = *(_BYTE **)(*(_QWORD *)this + 32);
              if ((unint64_t)v162 < *(_QWORD *)(*(_QWORD *)this + 24))
                goto LABEL_231;
              goto LABEL_228;
            }
            v157 = 32;
            while (1)
            {
              v158 = (char *)a2 - 32 * (v77 & 0x7FFFFFF);
              if ((v77 & 0x40000000) != 0)
                v158 = (char *)*((_QWORD *)a2 - 1);
              v159 = *(Type ***)&v158[v157];
              if (v159)
              {
                if (*v159 != v75)
                  break;
              }
              v157 += 32;
              if (!--v78)
                goto LABEL_118;
            }
          }
          v160 = 1;
          v161 = *(llvm::raw_ostream **)this;
          v162 = *(_BYTE **)(*(_QWORD *)this + 32);
          if ((unint64_t)v162 < *(_QWORD *)(*(_QWORD *)this + 24))
          {
LABEL_231:
            *((_QWORD *)v161 + 4) = v162 + 1;
            *v162 = 32;
LABEL_232:
            v163 = *((_DWORD *)a2 + 5);
            v164 = v163 & 0x7FFFFFF;
            if ((v163 & 0x7FFFFFF) == 0)
              goto LABEL_354;
            v165 = (v163 & 0x40000000) != 0 ? (Type ***)*((_QWORD *)a2 - 1) : (Type ***)((char *)a2 - 32 * v164);
            if ((_DWORD)v164 == 1)
              goto LABEL_354;
            v167 = v164 - 1;
            v168 = 32;
            while (1)
            {
              v170 = *(llvm::raw_ostream **)this;
              v171 = *(_WORD **)(*(_QWORD *)this + 32);
              if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v171 > 1uLL)
              {
                *v171 = 8236;
                *((_QWORD *)v170 + 4) += 2;
                v172 = *((_DWORD *)a2 + 5);
                if ((v172 & 0x40000000) != 0)
                {
LABEL_244:
                  v169 = (char *)*((_QWORD *)a2 - 1);
                  goto LABEL_239;
                }
              }
              else
              {
                llvm::raw_ostream::write(v170, ", ", 2uLL);
                v172 = *((_DWORD *)a2 + 5);
                if ((v172 & 0x40000000) != 0)
                  goto LABEL_244;
              }
              v169 = (char *)a2 - 32 * (v172 & 0x7FFFFFF);
LABEL_239:
              v168 += 32;
              if (!--v167)
                goto LABEL_354;
            }
          }
LABEL_228:
          llvm::raw_ostream::write(v161, 32);
          goto LABEL_232;
        }
        goto LABEL_102;
      }
    }
    else
    {
      v62 = (Type **)*((_QWORD *)a2 - 4 * v61);
      v63 = *((unsigned __int8 *)a2 + 16);
      if (v63 != 30)
        goto LABEL_95;
    }
    if ((_DWORD)v61 == 3)
    {
      v70 = *(llvm::raw_ostream **)this;
      v71 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v71 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(v70, 32);
      }
      else
      {
        *((_QWORD *)v70 + 4) = v71 + 1;
        *v71 = 32;
      }
      v114 = *(llvm::raw_ostream **)this;
      v115 = *(_WORD **)(*(_QWORD *)this + 32);
      if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v115 > 1uLL)
      {
        *v115 = 8236;
        *((_QWORD *)v114 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v114, ", ", 2uLL);
      }
      v117 = *(llvm::raw_ostream **)this;
      v118 = *(_WORD **)(*(_QWORD *)this + 32);
      if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v118 > 1uLL)
      {
        *v118 = 8236;
        *((_QWORD *)v117 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v117, ", ", 2uLL);
      }
      v119 = (Type **)*((_QWORD *)a2 - 8);
      goto LABEL_169;
    }
    if (!v62)
    {
LABEL_354:
      switch(*((_BYTE *)a2 + 16))
      {
        case '<':
        case '=':
          if (!llvm::Instruction::isAtomic(a2))
            goto LABEL_409;
          DesiredBytecodeVersion = (const llvm::LLVMContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
          v249 = ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 7) & 7;
          if (!(_DWORD)v249)
            goto LABEL_409;
          v250 = *(llvm::raw_ostream **)this;
          v251 = *(_BYTE **)(*(_QWORD *)this + 32);
          if (*(_BYTE **)(*(_QWORD *)this + 24) == v251)
          {
            v250 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " ", 1uLL);
            v252 = llvm::toIRString(llvm::AtomicOrdering)::names[v249];
            if (!v252)
            {
LABEL_409:
              v288 = ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1) & 0x3F;
              v277 = *(llvm::raw_ostream **)this;
              v289 = *(_QWORD **)(*(_QWORD *)this + 32);
              if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v289 > 7uLL)
              {
                *v289 = 0x206E67696C61202CLL;
                *((_QWORD *)v277 + 4) += 8;
              }
              else
              {
                v277 = llvm::raw_ostream::write(v277, ", align ", 8uLL);
              }
              v287 = 1 << v288;
              goto LABEL_413;
            }
          }
          else
          {
            *v251 = 32;
            ++*((_QWORD *)v250 + 4);
            v252 = llvm::toIRString(llvm::AtomicOrdering)::names[v249];
            if (!v252)
              goto LABEL_409;
          }
          v280 = strlen(v252);
          v281 = (void *)*((_QWORD *)v250 + 4);
          if (v280 <= *((_QWORD *)v250 + 3) - (_QWORD)v281)
          {
            if (v280)
            {
              memcpy(v281, v252, v280);
              *((_QWORD *)v250 + 4) += v280;
            }
          }
          else
          {
            llvm::raw_ostream::write(v250, v252, v280);
          }
          goto LABEL_409;
        case '?':
          v253 = (const llvm::LLVMContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
          v254 = *((_WORD *)a2 + 9);
          v255 = v254 & 7;
          if ((v254 & 7) == 0)
            goto LABEL_414;
          v256 = *(llvm::raw_ostream **)this;
          v257 = *(_BYTE **)(*(_QWORD *)this + 32);
          if (*(_BYTE **)(*(_QWORD *)this + 24) == v257)
          {
            v256 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " ", 1uLL);
            v258 = llvm::toIRString(llvm::AtomicOrdering)::names[v255];
            if (!v258)
              goto LABEL_414;
          }
          else
          {
            *v257 = 32;
            ++*((_QWORD *)v256 + 4);
            v258 = llvm::toIRString(llvm::AtomicOrdering)::names[v255];
            if (!v258)
              goto LABEL_414;
          }
          v282 = strlen(v258);
          v283 = (void *)*((_QWORD *)v256 + 4);
          if (v282 <= *((_QWORD *)v256 + 3) - (_QWORD)v283)
          {
            if (v282)
            {
              memcpy(v283, v258, v282);
              *((_QWORD *)v256 + 4) += v282;
            }
          }
          else
          {
            llvm::raw_ostream::write(v256, v258, v282);
          }
          goto LABEL_414;
        case '@':
          v259 = (const llvm::LLVMContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
          v260 = *((unsigned __int16 *)a2 + 9);
          v261 = (v260 >> 2) & 7;
          v262 = *(llvm::raw_ostream **)this;
          v263 = *(_BYTE **)(*(_QWORD *)this + 32);
          if (*(_BYTE **)(*(_QWORD *)this + 24) == v263)
          {
            v262 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " ", 1uLL);
            v264 = llvm::toIRString(llvm::AtomicOrdering)::names[v261];
            if (!v264)
              goto LABEL_377;
          }
          else
          {
            *v263 = 32;
            ++*((_QWORD *)v262 + 4);
            v264 = llvm::toIRString(llvm::AtomicOrdering)::names[v261];
            if (!v264)
              goto LABEL_377;
          }
          v270 = strlen(v264);
          v271 = (void *)*((_QWORD *)v262 + 4);
          if (v270 <= *((_QWORD *)v262 + 3) - (_QWORD)v271)
          {
            if (v270)
            {
              memcpy(v271, v264, v270);
              *((_QWORD *)v262 + 4) += v270;
            }
          }
          else
          {
            llvm::raw_ostream::write(v262, v264, v270);
          }
LABEL_377:
          v272 = *(llvm::raw_ostream **)this;
          v273 = *(_BYTE **)(*(_QWORD *)this + 32);
          if (*(_BYTE **)(*(_QWORD *)this + 24) == v273)
          {
            v272 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " ", 1uLL);
            v274 = llvm::toIRString(llvm::AtomicOrdering)::names[v260 >> 5];
            if (!v274)
              goto LABEL_385;
          }
          else
          {
            *v273 = 32;
            ++*((_QWORD *)v272 + 4);
            v274 = llvm::toIRString(llvm::AtomicOrdering)::names[v260 >> 5];
            if (!v274)
              goto LABEL_385;
          }
          v275 = strlen(v274);
          v276 = (void *)*((_QWORD *)v272 + 4);
          if (v275 <= *((_QWORD *)v272 + 3) - (_QWORD)v276)
          {
            if (v275)
            {
              memcpy(v276, v274, v275);
              *((_QWORD *)v272 + 4) += v275;
            }
          }
          else
          {
            llvm::raw_ostream::write(v272, v274, v275);
          }
LABEL_385:
          v277 = *(llvm::raw_ostream **)this;
          v278 = *(_QWORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v278 > 7uLL)
          {
            *v278 = 0x206E67696C61202CLL;
            *((_QWORD *)v277 + 4) += 8;
          }
          else
          {
            v277 = llvm::raw_ostream::write(v277, ", align ", 8uLL);
          }
          LOBYTE(v279) = *((_BYTE *)a2 + 19);
          goto LABEL_406;
        case 'A':
          v265 = (const llvm::LLVMContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
          v266 = ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1) & 7;
          if (!(_DWORD)v266)
            goto LABEL_402;
          v267 = *(llvm::raw_ostream **)this;
          v268 = *(_BYTE **)(*(_QWORD *)this + 32);
          if (*(_BYTE **)(*(_QWORD *)this + 24) == v268)
          {
            v267 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " ", 1uLL);
            v269 = llvm::toIRString(llvm::AtomicOrdering)::names[v266];
            if (!v269)
              goto LABEL_402;
          }
          else
          {
            *v268 = 32;
            ++*((_QWORD *)v267 + 4);
            v269 = llvm::toIRString(llvm::AtomicOrdering)::names[v266];
            if (!v269)
              goto LABEL_402;
          }
          v284 = strlen(v269);
          v285 = (void *)*((_QWORD *)v267 + 4);
          if (v284 <= *((_QWORD *)v267 + 3) - (_QWORD)v285)
          {
            if (v284)
            {
              memcpy(v285, v269, v284);
              *((_QWORD *)v267 + 4) += v284;
            }
          }
          else
          {
            llvm::raw_ostream::write(v267, v269, v284);
          }
LABEL_402:
          v277 = *(llvm::raw_ostream **)this;
          v286 = *(_QWORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v286 > 7uLL)
          {
            *v286 = 0x206E67696C61202CLL;
            *((_QWORD *)v277 + 4) += 8;
          }
          else
          {
            v277 = llvm::raw_ostream::write(v277, ", align ", 8uLL);
          }
          v279 = (unint64_t)*((unsigned __int16 *)a2 + 9) >> 9;
LABEL_406:
          v287 = 1 << v279;
LABEL_413:
          llvm::raw_ostream::operator<<(v277, v287);
          goto LABEL_414;
        case '[':
          PrintShuffleMask(*(llvm::raw_ostream **)this, *(_QWORD *)a2, *((int **)a2 + 9), *((unsigned int *)a2 + 20));
          goto LABEL_414;
        default:
          goto LABEL_414;
      }
    }
    goto LABEL_115;
  }
  v63 = *((unsigned __int8 *)a2 + 16);
  if (v63 != 30)
  {
    v62 = 0;
    if (v63 != 32)
      goto LABEL_96;
LABEL_102:
    v68 = *(llvm::raw_ostream **)this;
    v69 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v69 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v68, 32);
    }
    else
    {
      *((_QWORD *)v68 + 4) = v69 + 1;
      *v69 = 32;
    }
    v87 = *(llvm::raw_ostream **)this;
    v88 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v88) > 2)
    {
      *(_BYTE *)(v88 + 2) = 91;
      *(_WORD *)v88 = 8236;
      *((_QWORD *)v87 + 4) += 3;
      v89 = *((_DWORD *)a2 + 5);
      v90 = v89 & 0x7FFFFFF;
      if ((v89 & 0x7FFFFFF) == 1)
        goto LABEL_174;
    }
    else
    {
      llvm::raw_ostream::write(v87, ", [", 3uLL);
      v89 = *((_DWORD *)a2 + 5);
      v90 = v89 & 0x7FFFFFF;
      if ((v89 & 0x7FFFFFF) == 1)
      {
LABEL_174:
        v123 = *(llvm::raw_ostream **)this;
        v124 = *(_BYTE **)(*(_QWORD *)this + 32);
        if ((unint64_t)v124 >= *(_QWORD *)(*(_QWORD *)this + 24))
        {
          llvm::raw_ostream::write(v123, 93);
        }
        else
        {
          *((_QWORD *)v123 + 4) = v124 + 1;
          *v124 = 93;
        }
        goto LABEL_354;
      }
    }
    if ((v89 & 0x40000000) != 0)
    {
      v98 = v90 - 2;
      if ((_DWORD)v90 == 2)
        goto LABEL_174;
    }
    else
    {
      v98 = v90 - 2;
      if ((_DWORD)v90 == 2)
        goto LABEL_174;
    }
    v152 = 64;
    while (1)
    {
      v154 = *(llvm::raw_ostream **)this;
      v155 = *(_WORD **)(*(_QWORD *)this + 32);
      if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v155 > 1uLL)
      {
        *v155 = 8236;
        *((_QWORD *)v154 + 4) += 2;
        v156 = *((_DWORD *)a2 + 5);
        if ((v156 & 0x40000000) != 0)
        {
LABEL_220:
          v153 = (char *)*((_QWORD *)a2 - 1);
          goto LABEL_215;
        }
      }
      else
      {
        llvm::raw_ostream::write(v154, ", ", 2uLL);
        v156 = *((_DWORD *)a2 + 5);
        if ((v156 & 0x40000000) != 0)
          goto LABEL_220;
      }
      v153 = (char *)a2 - 32 * (v156 & 0x7FFFFFF);
LABEL_215:
      v152 += 32;
      if (!--v98)
        goto LABEL_174;
    }
  }
LABEL_414:
  __p = &v435;
  v434 = 0x400000000;
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
    llvm::Instruction::getAllMetadataImpl(a2, (uint64_t)&__p);
  if (__p != &v435)
    free(__p);
}

void `anonymous namespace'::AssemblyWriter::printGlobal(_anonymous_namespace_::TypePrinting **this, Type **a2)
{
  BOOL v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  _anonymous_namespace_::TypePrinting *v7;
  _anonymous_namespace_::TypePrinting *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  const char *p_p;
  size_t v15;
  int v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  int v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  int v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  const char *v29;
  size_t v30;
  llvm::raw_ostream *v31;
  void *v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  llvm::raw_ostream *v40;
  _WORD *v41;
  llvm::raw_ostream *v42;
  void *v43;
  _anonymous_namespace_::TypePrinting *v44;
  const char *v45;
  size_t v46;
  void *v47;
  BOOL v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  const llvm::Value *v51;
  _anonymous_namespace_::TypePrinting *v52;
  llvm::raw_ostream *v53;
  _anonymous_namespace_::TypePrinting *v54;
  llvm::raw_ostream *v55;
  void *v56;
  llvm::raw_ostream *v57;
  uint64_t v58;
  llvm::raw_ostream *SectionImpl;
  uint64_t v60;
  llvm::raw_ostream *v61;
  _BYTE *v62;
  llvm::raw_ostream *v63;
  void *v64;
  llvm::raw_ostream *Partition;
  uint64_t v66;
  llvm::raw_ostream *v67;
  _BYTE *v68;
  char v69;
  llvm::raw_ostream *v70;
  void *v71;
  llvm::raw_ostream *v72;
  void *v73;
  llvm::raw_ostream *v74;
  uint64_t v75;
  llvm::raw_ostream *v76;
  void *v77;
  int v78;
  char v79;
  llvm::raw_ostream *v80;
  _QWORD *v81;
  Type *v82;
  llvm::raw_ostream *v83;
  _WORD *v84;
  _anonymous_namespace_::TypePrinting *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Type *v90;
  int v91;
  int v92;
  unint64_t v93;
  _anonymous_namespace_::TypePrinting *v94[4];
  void *__p;
  uint64_t v96;
  _QWORD v97[9];

  v97[8] = *MEMORY[0x1E0C80C00];
  if (llvm::GlobalValue::isMaterializable((llvm::GlobalValue *)a2))
  {
    v5 = *this;
    v6 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v6) > 0x10)
    {
      *(_BYTE *)(v6 + 16) = 10;
      *(_OWORD *)v6 = *(_OWORD *)"; Materializable\n";
      *((_QWORD *)v5 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v5, "; Materializable\n", 0x11uLL);
    }
  }
  v7 = this[4];
  v8 = (_anonymous_namespace_::TypePrinting *)a2[5];
  v94[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
  v94[1] = (_anonymous_namespace_::TypePrinting *)(this + 5);
  v94[2] = v7;
  v94[3] = v8;
  WriteAsOperandInternal(*this, (const llvm::Value *)a2, v94, v4);
  v9 = *this;
  v10 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v10) > 2)
  {
    *(_BYTE *)(v10 + 2) = 32;
    *(_WORD *)v10 = 15648;
    *((_QWORD *)v9 + 4) += 3;
    if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)a2))
      goto LABEL_13;
  }
  else
  {
    llvm::raw_ostream::write(v9, " = ", 3uLL);
    if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)a2))
      goto LABEL_13;
  }
  if (((_BYTE)a2[4] & 0xF) == 0)
  {
    v11 = *this;
    v12 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v12) > 8)
    {
      *(_BYTE *)(v12 + 8) = 32;
      *(_QWORD *)v12 = *(_QWORD *)"external ";
      *((_QWORD *)v11 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v11, "external ", 9uLL);
    }
  }
LABEL_13:
  v13 = *this;
  getLinkageNameWithSpace(&__p, (_DWORD)a2[4] & 0xF);
  if (v97[0] >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  if (v97[0] >= 0)
    v15 = HIBYTE(v97[0]);
  else
    v15 = v96;
  llvm::raw_ostream::write(v13, p_p, v15);
  if (SHIBYTE(v97[0]) < 0)
  {
    operator delete(__p);
    v16 = *((_DWORD *)a2 + 8);
    if ((v16 & 0x4000) == 0)
      goto LABEL_28;
  }
  else
  {
    v16 = *((_DWORD *)a2 + 8);
    if ((v16 & 0x4000) == 0)
      goto LABEL_28;
  }
  if ((v16 & 0xFu) - 7 < 2
    || (v17 = *this, (v16 & 0x30) != 0)
    && !llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2))
  {
LABEL_28:
    v19 = (*((_DWORD *)a2 + 8) >> 4) & 3;
    v20 = *this;
    if (v19 != 2)
      goto LABEL_29;
LABEL_35:
    v25 = *((_QWORD *)v20 + 4);
    if ((unint64_t)(*((_QWORD *)v20 + 3) - v25) > 9)
    {
      *(_WORD *)(v25 + 8) = 8292;
      *(_QWORD *)v25 = *(_QWORD *)"protected ";
      v24 = *((_QWORD *)v20 + 4) + 10;
LABEL_42:
      *((_QWORD *)v20 + 4) = v24;
      v22 = (*((_DWORD *)a2 + 8) >> 8) & 3;
      v23 = *this;
      if (v22 != 2)
        goto LABEL_38;
      goto LABEL_43;
    }
    llvm::raw_ostream::write(v20, "protected ", 0xAuLL);
LABEL_37:
    v22 = (*((_DWORD *)a2 + 8) >> 8) & 3;
    v23 = *this;
    if (v22 != 2)
      goto LABEL_38;
LABEL_43:
    v26 = *((_QWORD *)v23 + 4);
    if ((unint64_t)(*((_QWORD *)v23 + 3) - v26) <= 9)
    {
      v27 = "dllexport ";
      goto LABEL_45;
    }
    v28 = "dllexport ";
    goto LABEL_48;
  }
  v18 = *((_QWORD *)v17 + 4);
  if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) <= 9)
  {
    llvm::raw_ostream::write(v17, "dso_local ", 0xAuLL);
    goto LABEL_28;
  }
  *(_WORD *)(v18 + 8) = 8300;
  *(_QWORD *)v18 = *(_QWORD *)"dso_local ";
  *((_QWORD *)v17 + 4) += 10;
  v19 = (*((_DWORD *)a2 + 8) >> 4) & 3;
  v20 = *this;
  if (v19 == 2)
    goto LABEL_35;
LABEL_29:
  if (v19 != 1)
    goto LABEL_37;
  v21 = (_DWORD *)*((_QWORD *)v20 + 4);
  if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 6uLL)
  {
    *(_DWORD *)((char *)v21 + 3) = 544105828;
    *v21 = 1684302184;
    v24 = *((_QWORD *)v20 + 4) + 7;
    goto LABEL_42;
  }
  llvm::raw_ostream::write(v20, "hidden ", 7uLL);
  v22 = (*((_DWORD *)a2 + 8) >> 8) & 3;
  v23 = *this;
  if (v22 == 2)
    goto LABEL_43;
LABEL_38:
  if (v22 != 1)
    goto LABEL_49;
  v26 = *((_QWORD *)v23 + 4);
  if ((unint64_t)(*((_QWORD *)v23 + 3) - v26) <= 9)
  {
    v27 = "dllimport ";
LABEL_45:
    llvm::raw_ostream::write(v23, v27, 0xAuLL);
    goto LABEL_49;
  }
  v28 = "dllimport ";
LABEL_48:
  *(_WORD *)(v26 + 8) = 8308;
  *(_QWORD *)v26 = *(_QWORD *)v28;
  *((_QWORD *)v23 + 4) += 10;
LABEL_49:
  PrintThreadLocalModel((llvm::raw_ostream *)((*((_DWORD *)a2 + 8) >> 10) & 7), *this);
  if (!(*((_DWORD *)a2 + 8) >> 6))
    goto LABEL_54;
  if (*((_DWORD *)a2 + 8) >> 6 == 1)
  {
    v29 = "local_unnamed_addr";
    v30 = 18;
    v31 = *this;
    v32 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v32 >= 0x12uLL)
      goto LABEL_52;
LABEL_57:
    v31 = llvm::raw_ostream::write(v31, v29, v30);
    v34 = (_BYTE *)*((_QWORD *)v31 + 4);
    if ((unint64_t)v34 >= *((_QWORD *)v31 + 3))
      goto LABEL_53;
LABEL_58:
    *((_QWORD *)v31 + 4) = v34 + 1;
    *v34 = 32;
    v35 = *((unsigned int *)*a2 + 2);
    if (v35 < 0x100)
      goto LABEL_62;
LABEL_59:
    v36 = v35 >> 8;
    v37 = *this;
    v38 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v38) > 9)
    {
      *(_WORD *)(v38 + 8) = 10341;
      *(_QWORD *)v38 = *(_QWORD *)"addrspace(";
      *((_QWORD *)v37 + 4) += 10;
      v40 = llvm::raw_ostream::operator<<(v37, v36);
      v41 = (_WORD *)*((_QWORD *)v40 + 4);
      if (*((_QWORD *)v40 + 3) - (_QWORD)v41 > 1uLL)
        goto LABEL_61;
    }
    else
    {
      v39 = llvm::raw_ostream::write(v37, "addrspace(", 0xAuLL);
      v40 = llvm::raw_ostream::operator<<(v39, v36);
      v41 = (_WORD *)*((_QWORD *)v40 + 4);
      if (*((_QWORD *)v40 + 3) - (_QWORD)v41 > 1uLL)
      {
LABEL_61:
        *v41 = 8233;
        *((_QWORD *)v40 + 4) += 2;
        goto LABEL_62;
      }
    }
    llvm::raw_ostream::write(v40, ") ", 2uLL);
    if (((_BYTE)a2[10] & 2) == 0)
      goto LABEL_69;
LABEL_66:
    v42 = *this;
    v43 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v43 > 0x16uLL)
    {
      qmemcpy(v43, "externally_initialized ", 23);
      *((_QWORD *)v42 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v42, "externally_initialized ", 0x17uLL);
    }
    goto LABEL_69;
  }
  v29 = "unnamed_addr";
  v30 = 12;
  v31 = *this;
  v32 = (void *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v32 < 0xCuLL)
    goto LABEL_57;
LABEL_52:
  memcpy(v32, v29, v30);
  v33 = *((_QWORD *)v31 + 3);
  v34 = (_BYTE *)(*((_QWORD *)v31 + 4) + v30);
  *((_QWORD *)v31 + 4) = v34;
  if ((unint64_t)v34 < v33)
    goto LABEL_58;
LABEL_53:
  llvm::raw_ostream::write(v31, 32);
LABEL_54:
  v35 = *((unsigned int *)*a2 + 2);
  if (v35 >= 0x100)
    goto LABEL_59;
LABEL_62:
  if (((_BYTE)a2[10] & 2) != 0)
    goto LABEL_66;
LABEL_69:
  v44 = *this;
  if (((_BYTE)a2[10] & 1) != 0)
    v45 = "constant ";
  else
    v45 = "global ";
  if (((_BYTE)a2[10] & 1) != 0)
    v46 = 9;
  else
    v46 = 7;
  v47 = (void *)*((_QWORD *)v44 + 4);
  if (v46 <= *((_QWORD *)v44 + 3) - (_QWORD)v47)
  {
    memcpy(v47, v45, v46);
    *((_QWORD *)v44 + 4) += v46;
  }
  else
  {
    llvm::raw_ostream::write(*this, v45, v46);
  }
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)a2))
  {
    if ((*((_BYTE *)a2 + 34) & 0x80) == 0)
      goto LABEL_80;
LABEL_92:
    v57 = *this;
    v58 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v58) > 0xA)
    {
      *(_DWORD *)(v58 + 7) = 572550767;
      *(_QWORD *)v58 = *(_QWORD *)", section \"";
      *((_QWORD *)v57 + 4) += 11;
      if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
      {
LABEL_94:
        SectionImpl = llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)a2);
        llvm::printEscapedString(SectionImpl, v60, *this);
        v61 = *this;
        v62 = (_BYTE *)*((_QWORD *)*this + 4);
        if ((unint64_t)v62 >= *((_QWORD *)*this + 3))
          goto LABEL_95;
        goto LABEL_99;
      }
    }
    else
    {
      llvm::raw_ostream::write(v57, ", section \"", 0xBuLL);
      if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
        goto LABEL_94;
    }
    llvm::printEscapedString(0, 0, *this);
    v61 = *this;
    v62 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v62 >= *((_QWORD *)*this + 3))
    {
LABEL_95:
      llvm::raw_ostream::write(v61, 34);
      if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
        goto LABEL_100;
LABEL_81:
      if ((*((_BYTE *)a2 + 34) & 1) == 0)
        goto LABEL_126;
      goto LABEL_107;
    }
LABEL_99:
    *((_QWORD *)v61 + 4) = v62 + 1;
    *v62 = 34;
    if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
      goto LABEL_100;
    goto LABEL_81;
  }
  v49 = *this;
  v50 = (_BYTE *)*((_QWORD *)*this + 4);
  if ((unint64_t)v50 >= *((_QWORD *)*this + 3))
  {
    llvm::raw_ostream::write(v49, 32);
    v51 = (const llvm::Value *)*(a2 - 4);
    if (v51)
    {
LABEL_85:
      v52 = this[4];
      __p = &off_1E0E15E00;
      v96 = (uint64_t)(this + 5);
      v53 = *this;
      v54 = this[1];
      v97[0] = v52;
      v97[1] = v54;
      WriteAsOperandInternal(v53, v51, (_anonymous_namespace_::TypePrinting **)&__p, v48);
      if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
        goto LABEL_92;
      goto LABEL_80;
    }
  }
  else
  {
    *((_QWORD *)v49 + 4) = v50 + 1;
    *v50 = 32;
    v51 = (const llvm::Value *)*(a2 - 4);
    if (v51)
      goto LABEL_85;
  }
  v55 = *this;
  v56 = (void *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v56 > 0xEuLL)
  {
    qmemcpy(v56, "<null operand!>", 15);
    *((_QWORD *)v55 + 4) += 15;
    if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
      goto LABEL_92;
  }
  else
  {
    llvm::raw_ostream::write(v55, "<null operand!>", 0xFuLL);
    if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
      goto LABEL_92;
  }
LABEL_80:
  if ((*((_BYTE *)a2 + 33) & 0x80) == 0)
    goto LABEL_81;
LABEL_100:
  v63 = *this;
  v64 = (void *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v64 > 0xCuLL)
  {
    qmemcpy(v64, ", partition \"", 13);
    *((_QWORD *)v63 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v63, ", partition \"", 0xDuLL);
  }
  Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
  llvm::printEscapedString(Partition, v66, *this);
  v67 = *this;
  v68 = (_BYTE *)*((_QWORD *)*this + 4);
  if ((unint64_t)v68 >= *((_QWORD *)*this + 3))
  {
    llvm::raw_ostream::write(v67, 34);
    if ((*((_BYTE *)a2 + 34) & 1) == 0)
      goto LABEL_126;
  }
  else
  {
    *((_QWORD *)v67 + 4) = v68 + 1;
    *v68 = 34;
    if ((*((_BYTE *)a2 + 34) & 1) == 0)
      goto LABEL_126;
  }
LABEL_107:
  v69 = *(_BYTE *)llvm::GlobalValue::getSanitizerMetadata((llvm::GlobalValue *)a2);
  if ((v69 & 1) == 0)
  {
    if ((v69 & 2) == 0)
      goto LABEL_109;
LABEL_116:
    v72 = *this;
    v73 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v73 > 0x16uLL)
    {
      qmemcpy(v73, ", no_sanitize_hwaddress", 23);
      *((_QWORD *)v72 + 4) += 23;
      if ((v69 & 4) != 0)
        goto LABEL_120;
    }
    else
    {
      llvm::raw_ostream::write(v72, ", no_sanitize_hwaddress", 0x17uLL);
      if ((v69 & 4) != 0)
        goto LABEL_120;
    }
LABEL_110:
    if ((v69 & 8) == 0)
      goto LABEL_126;
    goto LABEL_124;
  }
  v70 = *this;
  v71 = (void *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v71 > 0x14uLL)
  {
    qmemcpy(v71, ", no_sanitize_address", 21);
    *((_QWORD *)v70 + 4) += 21;
    if ((v69 & 2) != 0)
      goto LABEL_116;
  }
  else
  {
    llvm::raw_ostream::write(v70, ", no_sanitize_address", 0x15uLL);
    if ((v69 & 2) != 0)
      goto LABEL_116;
  }
LABEL_109:
  if ((v69 & 4) == 0)
    goto LABEL_110;
LABEL_120:
  v74 = *this;
  v75 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v75) > 0x10)
  {
    *(_BYTE *)(v75 + 16) = 103;
    *(_OWORD *)v75 = *(_OWORD *)", sanitize_memtag";
    *((_QWORD *)v74 + 4) += 17;
    if ((v69 & 8) == 0)
      goto LABEL_126;
  }
  else
  {
    llvm::raw_ostream::write(v74, ", sanitize_memtag", 0x11uLL);
    if ((v69 & 8) == 0)
      goto LABEL_126;
  }
LABEL_124:
  v76 = *this;
  v77 = (void *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v77 > 0x19uLL)
  {
    qmemcpy(v77, ", sanitize_address_dyninit", 26);
    *((_QWORD *)v76 + 4) += 26;
    maybePrintComdat(*this, (const llvm::GlobalObject *)a2);
    v78 = (*((_DWORD *)a2 + 8) >> 17) & 0x3F;
    if (!v78)
      goto LABEL_131;
    goto LABEL_127;
  }
  llvm::raw_ostream::write(v76, ", sanitize_address_dyninit", 0x1AuLL);
LABEL_126:
  maybePrintComdat(*this, (const llvm::GlobalObject *)a2);
  v78 = (*((_DWORD *)a2 + 8) >> 17) & 0x3F;
  if (!v78)
    goto LABEL_131;
LABEL_127:
  v79 = v78 - 1;
  v80 = *this;
  v81 = (_QWORD *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v81 > 7uLL)
  {
    *v81 = 0x206E67696C61202CLL;
    *((_QWORD *)v80 + 4) += 8;
  }
  else
  {
    v80 = llvm::raw_ostream::write(v80, ", align ", 8uLL);
  }
  llvm::raw_ostream::operator<<(v80, 1 << v79);
LABEL_131:
  __p = v97;
  v96 = 0x400000000;
  llvm::Value::getAllMetadata((mlir::BytecodeWriterConfig *)a2, (uint64_t)&__p);
  v82 = a2[9];
  if (!v82)
    goto LABEL_151;
  v83 = *this;
  v84 = (_WORD *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v84 <= 1uLL)
  {
    v83 = llvm::raw_ostream::write(*this, " #", 2uLL);
    v85 = this[4];
    if (!*((_QWORD *)v85 + 1))
      goto LABEL_137;
    goto LABEL_136;
  }
  *v84 = 8992;
  *((_QWORD *)v83 + 4) += 2;
  v85 = this[4];
  if (*((_QWORD *)v85 + 1))
  {
LABEL_136:
    llvm::SlotTracker::processModule(v85);
    *((_QWORD *)v85 + 1) = 0;
  }
LABEL_137:
  if (!*((_QWORD *)v85 + 2) || *((_BYTE *)v85 + 24))
  {
    v86 = *((_QWORD *)v85 + 25);
    v87 = *((unsigned int *)v85 + 54);
    if ((_DWORD)v87)
      goto LABEL_140;
LABEL_146:
    v89 = v86 + 16 * v87;
    goto LABEL_147;
  }
  llvm::SlotTracker::processFunction(v85);
  v86 = *((_QWORD *)v85 + 25);
  v87 = *((unsigned int *)v85 + 54);
  if (!(_DWORD)v87)
    goto LABEL_146;
LABEL_140:
  LODWORD(v88) = (v87 - 1) & ((v82 >> 4) ^ (v82 >> 9));
  v89 = v86 + 16 * v88;
  v90 = *(Type **)v89;
  if (*(Type **)v89 != v82)
  {
    v91 = 1;
    while (v90 != (Type *)-4)
    {
      v92 = v88 + v91++;
      v88 = v92 & (v87 - 1);
      v90 = *(Type **)(v86 + 16 * v88);
      if (v90 == v82)
      {
        v89 = v86 + 16 * v88;
        goto LABEL_147;
      }
    }
    goto LABEL_146;
  }
LABEL_147:
  if (v89 == v86 + 16 * v87)
    v93 = -1;
  else
    v93 = *(int *)(v89 + 8);
  llvm::raw_ostream::operator<<(v83, v93);
LABEL_151:
  if (__p != v97)
    free(__p);
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::printAlias(_anonymous_namespace_::TypePrinting **this, Type **a2)
{
  BOOL v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  _anonymous_namespace_::TypePrinting *v7;
  _anonymous_namespace_::TypePrinting *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  const char *p_p;
  size_t v13;
  int v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  int v17;
  llvm::raw_ostream *v18;
  _DWORD *v19;
  int v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  const char *v27;
  size_t v28;
  llvm::raw_ostream *v29;
  void *v30;
  unint64_t v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  BOOL v35;
  llvm::raw_ostream *v36;
  _WORD *v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  _anonymous_namespace_::TypePrinting *v43;
  llvm::raw_ostream *v44;
  _anonymous_namespace_::TypePrinting *v45;
  llvm::raw_ostream *v46;
  void *v47;
  llvm::raw_ostream *Partition;
  uint64_t v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  llvm::raw_ostream *result;
  _BYTE *v53;
  _anonymous_namespace_::TypePrinting *v54[4];
  void *__p;
  char *v56;
  _anonymous_namespace_::TypePrinting *v57;
  _anonymous_namespace_::TypePrinting *v58;

  if (llvm::GlobalValue::isMaterializable((llvm::GlobalValue *)a2))
  {
    v5 = *this;
    v6 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v6) > 0x10)
    {
      *(_BYTE *)(v6 + 16) = 10;
      *(_OWORD *)v6 = *(_OWORD *)"; Materializable\n";
      *((_QWORD *)v5 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v5, "; Materializable\n", 0x11uLL);
    }
  }
  v7 = this[4];
  v8 = (_anonymous_namespace_::TypePrinting *)a2[5];
  v54[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
  v54[1] = (_anonymous_namespace_::TypePrinting *)(this + 5);
  v54[2] = v7;
  v54[3] = v8;
  WriteAsOperandInternal(*this, (const llvm::Value *)a2, v54, v4);
  v9 = *this;
  v10 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v10) > 2)
  {
    *(_BYTE *)(v10 + 2) = 32;
    *(_WORD *)v10 = 15648;
    *((_QWORD *)v9 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v9, " = ", 3uLL);
  }
  v11 = *this;
  getLinkageNameWithSpace(&__p, (_DWORD)a2[4] & 0xF);
  if (SHIBYTE(v57) >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  if (SHIBYTE(v57) >= 0)
    v13 = HIBYTE(v57);
  else
    v13 = (size_t)v56;
  llvm::raw_ostream::write(v11, p_p, v13);
  if (SHIBYTE(v57) < 0)
  {
    operator delete(__p);
    v14 = *((_DWORD *)a2 + 8);
    if ((v14 & 0x4000) == 0)
      goto LABEL_23;
  }
  else
  {
    v14 = *((_DWORD *)a2 + 8);
    if ((v14 & 0x4000) == 0)
      goto LABEL_23;
  }
  if ((v14 & 0xFu) - 7 < 2
    || (v15 = *this, (v14 & 0x30) != 0)
    && !llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2))
  {
LABEL_23:
    v17 = (*((_DWORD *)a2 + 8) >> 4) & 3;
    v18 = *this;
    if (v17 != 2)
      goto LABEL_24;
LABEL_30:
    v23 = *((_QWORD *)v18 + 4);
    if ((unint64_t)(*((_QWORD *)v18 + 3) - v23) > 9)
    {
      *(_WORD *)(v23 + 8) = 8292;
      *(_QWORD *)v23 = *(_QWORD *)"protected ";
      v22 = *((_QWORD *)v18 + 4) + 10;
LABEL_37:
      *((_QWORD *)v18 + 4) = v22;
      v20 = (*((_DWORD *)a2 + 8) >> 8) & 3;
      v21 = *this;
      if (v20 != 2)
        goto LABEL_33;
      goto LABEL_38;
    }
    llvm::raw_ostream::write(v18, "protected ", 0xAuLL);
LABEL_32:
    v20 = (*((_DWORD *)a2 + 8) >> 8) & 3;
    v21 = *this;
    if (v20 != 2)
      goto LABEL_33;
LABEL_38:
    v24 = *((_QWORD *)v21 + 4);
    if ((unint64_t)(*((_QWORD *)v21 + 3) - v24) <= 9)
    {
      v25 = "dllexport ";
      goto LABEL_40;
    }
    v26 = "dllexport ";
    goto LABEL_43;
  }
  v16 = *((_QWORD *)v15 + 4);
  if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) <= 9)
  {
    llvm::raw_ostream::write(v15, "dso_local ", 0xAuLL);
    goto LABEL_23;
  }
  *(_WORD *)(v16 + 8) = 8300;
  *(_QWORD *)v16 = *(_QWORD *)"dso_local ";
  *((_QWORD *)v15 + 4) += 10;
  v17 = (*((_DWORD *)a2 + 8) >> 4) & 3;
  v18 = *this;
  if (v17 == 2)
    goto LABEL_30;
LABEL_24:
  if (v17 != 1)
    goto LABEL_32;
  v19 = (_DWORD *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 6uLL)
  {
    *(_DWORD *)((char *)v19 + 3) = 544105828;
    *v19 = 1684302184;
    v22 = *((_QWORD *)v18 + 4) + 7;
    goto LABEL_37;
  }
  llvm::raw_ostream::write(v18, "hidden ", 7uLL);
  v20 = (*((_DWORD *)a2 + 8) >> 8) & 3;
  v21 = *this;
  if (v20 == 2)
    goto LABEL_38;
LABEL_33:
  if (v20 != 1)
    goto LABEL_44;
  v24 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v24) <= 9)
  {
    v25 = "dllimport ";
LABEL_40:
    llvm::raw_ostream::write(v21, v25, 0xAuLL);
    goto LABEL_44;
  }
  v26 = "dllimport ";
LABEL_43:
  *(_WORD *)(v24 + 8) = 8308;
  *(_QWORD *)v24 = *(_QWORD *)v26;
  *((_QWORD *)v21 + 4) += 10;
LABEL_44:
  PrintThreadLocalModel((llvm::raw_ostream *)((*((_DWORD *)a2 + 8) >> 10) & 7), *this);
  if (!(*((_DWORD *)a2 + 8) >> 6))
    goto LABEL_49;
  if (*((_DWORD *)a2 + 8) >> 6 == 1)
  {
    v27 = "local_unnamed_addr";
    v28 = 18;
    v29 = *this;
    v30 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v30 >= 0x12uLL)
      goto LABEL_47;
LABEL_52:
    v29 = llvm::raw_ostream::write(v29, v27, v28);
    v32 = (_BYTE *)*((_QWORD *)v29 + 4);
    if ((unint64_t)v32 >= *((_QWORD *)v29 + 3))
      goto LABEL_48;
LABEL_53:
    *((_QWORD *)v29 + 4) = v32 + 1;
    *v32 = 32;
    v33 = *this;
    v34 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v34) <= 5)
      goto LABEL_50;
    goto LABEL_54;
  }
  v27 = "unnamed_addr";
  v28 = 12;
  v29 = *this;
  v30 = (void *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v30 < 0xCuLL)
    goto LABEL_52;
LABEL_47:
  memcpy(v30, v27, v28);
  v31 = *((_QWORD *)v29 + 3);
  v32 = (_BYTE *)(*((_QWORD *)v29 + 4) + v28);
  *((_QWORD *)v29 + 4) = v32;
  if ((unint64_t)v32 < v31)
    goto LABEL_53;
LABEL_48:
  llvm::raw_ostream::write(v29, 32);
LABEL_49:
  v33 = *this;
  v34 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v34) <= 5)
  {
LABEL_50:
    llvm::raw_ostream::write(v33, "alias ", 6uLL);
    goto LABEL_55;
  }
LABEL_54:
  *(_WORD *)(v34 + 4) = 8307;
  *(_DWORD *)v34 = 1634298977;
  *((_QWORD *)v33 + 4) += 6;
LABEL_55:
  v36 = *this;
  v37 = (_WORD *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v37 > 1uLL)
  {
    *v37 = 8236;
    *((_QWORD *)v36 + 4) += 2;
    v38 = (uint64_t)*(a2 - 4);
    if (v38)
      goto LABEL_57;
LABEL_61:
    v41 = *this;
    v42 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v42) > 0x10)
    {
      *(_BYTE *)(v42 + 16) = 62;
      *(_OWORD *)v42 = *(_OWORD *)" <<NULL ALIASEE>>";
      *((_QWORD *)v41 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v41, " <<NULL ALIASEE>>", 0x11uLL);
    }
    goto LABEL_66;
  }
  llvm::raw_ostream::write(v36, ", ", 2uLL);
  v38 = (uint64_t)*(a2 - 4);
  if (!v38)
    goto LABEL_61;
LABEL_57:
  if (*(_BYTE *)(v38 + 16) != 5)
  {
    v39 = *this;
    v40 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v40 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v39, 32);
    }
    else
    {
      *((_QWORD *)v39 + 4) = v40 + 1;
      *v40 = 32;
    }
  }
  v43 = this[4];
  __p = &off_1E0E15E00;
  v56 = (char *)(this + 5);
  v44 = *this;
  v45 = this[1];
  v57 = v43;
  v58 = v45;
  WriteAsOperandInternal(v44, (const llvm::Value *)v38, (_anonymous_namespace_::TypePrinting **)&__p, v35);
LABEL_66:
  if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
  {
    v46 = *this;
    v47 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v47 > 0xCuLL)
    {
      qmemcpy(v47, ", partition \"", 13);
      *((_QWORD *)v46 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v46, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v49, *this);
    v50 = *this;
    v51 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v51 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v50, 34);
    }
    else
    {
      *((_QWORD *)v50 + 4) = v51 + 1;
      *v51 = 34;
    }
  }
  result = *this;
  v53 = (_BYTE *)*((_QWORD *)*this + 4);
  if ((unint64_t)v53 >= *((_QWORD *)*this + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v53 + 1;
  *v53 = 10;
  return result;
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::printIFunc(_anonymous_namespace_::TypePrinting **this, Type **a2)
{
  BOOL v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  _anonymous_namespace_::TypePrinting *v7;
  _anonymous_namespace_::TypePrinting *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  const char *p_p;
  size_t v13;
  int v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  int v17;
  llvm::raw_ostream *v18;
  _DWORD *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  llvm::raw_ostream *v25;
  _WORD *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  llvm::raw_ostream *v30;
  uint64_t v31;
  _anonymous_namespace_::TypePrinting *v32;
  llvm::raw_ostream *v33;
  _anonymous_namespace_::TypePrinting *v34;
  llvm::raw_ostream *v35;
  void *v36;
  llvm::raw_ostream *Partition;
  uint64_t v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  llvm::raw_ostream *result;
  _BYTE *v42;
  _anonymous_namespace_::TypePrinting *v43[4];
  void *__p;
  char *v45;
  _anonymous_namespace_::TypePrinting *v46;
  _anonymous_namespace_::TypePrinting *v47;

  if (llvm::GlobalValue::isMaterializable((llvm::GlobalValue *)a2))
  {
    v5 = *this;
    v6 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v6) > 0x10)
    {
      *(_BYTE *)(v6 + 16) = 10;
      *(_OWORD *)v6 = *(_OWORD *)"; Materializable\n";
      *((_QWORD *)v5 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v5, "; Materializable\n", 0x11uLL);
    }
  }
  v7 = this[4];
  v8 = (_anonymous_namespace_::TypePrinting *)a2[5];
  v43[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
  v43[1] = (_anonymous_namespace_::TypePrinting *)(this + 5);
  v43[2] = v7;
  v43[3] = v8;
  WriteAsOperandInternal(*this, (const llvm::Value *)a2, v43, v4);
  v9 = *this;
  v10 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v10) > 2)
  {
    *(_BYTE *)(v10 + 2) = 32;
    *(_WORD *)v10 = 15648;
    *((_QWORD *)v9 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v9, " = ", 3uLL);
  }
  v11 = *this;
  getLinkageNameWithSpace(&__p, (_DWORD)a2[4] & 0xF);
  if (SHIBYTE(v46) >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  if (SHIBYTE(v46) >= 0)
    v13 = HIBYTE(v46);
  else
    v13 = (size_t)v45;
  llvm::raw_ostream::write(v11, p_p, v13);
  if (SHIBYTE(v46) < 0)
  {
    operator delete(__p);
    v14 = *((_DWORD *)a2 + 8);
    if ((v14 & 0x4000) == 0)
      goto LABEL_23;
  }
  else
  {
    v14 = *((_DWORD *)a2 + 8);
    if ((v14 & 0x4000) == 0)
      goto LABEL_23;
  }
  if ((v14 & 0xFu) - 7 < 2
    || (v15 = *this, (v14 & 0x30) != 0)
    && !llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2))
  {
LABEL_23:
    v17 = (*((_DWORD *)a2 + 8) >> 4) & 3;
    v18 = *this;
    if (v17 != 2)
      goto LABEL_24;
    goto LABEL_30;
  }
  v16 = *((_QWORD *)v15 + 4);
  if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) <= 9)
  {
    llvm::raw_ostream::write(v15, "dso_local ", 0xAuLL);
    goto LABEL_23;
  }
  *(_WORD *)(v16 + 8) = 8300;
  *(_QWORD *)v16 = *(_QWORD *)"dso_local ";
  *((_QWORD *)v15 + 4) += 10;
  v17 = (*((_DWORD *)a2 + 8) >> 4) & 3;
  v18 = *this;
  if (v17 != 2)
  {
LABEL_24:
    if (v17 == 1)
    {
      v19 = (_DWORD *)*((_QWORD *)v18 + 4);
      if (*((_QWORD *)v18 + 3) - (_QWORD)v19 <= 6uLL)
      {
        llvm::raw_ostream::write(v18, "hidden ", 7uLL);
        v20 = *this;
        v21 = *((_QWORD *)*this + 4);
        if ((unint64_t)(*((_QWORD *)*this + 3) - v21) > 5)
          goto LABEL_36;
LABEL_33:
        llvm::raw_ostream::write(v20, "ifunc ", 6uLL);
        goto LABEL_37;
      }
      *(_DWORD *)((char *)v19 + 3) = 544105828;
      *v19 = 1684302184;
      v22 = *((_QWORD *)v18 + 4) + 7;
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_30:
  v23 = *((_QWORD *)v18 + 4);
  if ((unint64_t)(*((_QWORD *)v18 + 3) - v23) > 9)
  {
    *(_WORD *)(v23 + 8) = 8292;
    *(_QWORD *)v23 = *(_QWORD *)"protected ";
    v22 = *((_QWORD *)v18 + 4) + 10;
LABEL_35:
    *((_QWORD *)v18 + 4) = v22;
    v20 = *this;
    v21 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v21) <= 5)
      goto LABEL_33;
    goto LABEL_36;
  }
  llvm::raw_ostream::write(v18, "protected ", 0xAuLL);
LABEL_32:
  v20 = *this;
  v21 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v21) <= 5)
    goto LABEL_33;
LABEL_36:
  *(_WORD *)(v21 + 4) = 8291;
  *(_DWORD *)v21 = 1853187689;
  *((_QWORD *)v20 + 4) += 6;
LABEL_37:
  v25 = *this;
  v26 = (_WORD *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v26 > 1uLL)
  {
    *v26 = 8236;
    *((_QWORD *)v25 + 4) += 2;
    v27 = (uint64_t)*(a2 - 4);
    if (v27)
      goto LABEL_39;
LABEL_43:
    v30 = *this;
    v31 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v31) > 0x11)
    {
      *(_WORD *)(v31 + 16) = 15934;
      *(_OWORD *)v31 = *(_OWORD *)" <<NULL RESOLVER>>";
      *((_QWORD *)v30 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v30, " <<NULL RESOLVER>>", 0x12uLL);
    }
    goto LABEL_48;
  }
  llvm::raw_ostream::write(v25, ", ", 2uLL);
  v27 = (uint64_t)*(a2 - 4);
  if (!v27)
    goto LABEL_43;
LABEL_39:
  if (*(_BYTE *)(v27 + 16) != 5)
  {
    v28 = *this;
    v29 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v29 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v28, 32);
    }
    else
    {
      *((_QWORD *)v28 + 4) = v29 + 1;
      *v29 = 32;
    }
  }
  v32 = this[4];
  __p = &off_1E0E15E00;
  v45 = (char *)(this + 5);
  v33 = *this;
  v34 = this[1];
  v46 = v32;
  v47 = v34;
  WriteAsOperandInternal(v33, (const llvm::Value *)v27, (_anonymous_namespace_::TypePrinting **)&__p, v24);
LABEL_48:
  if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
  {
    v35 = *this;
    v36 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v36 > 0xCuLL)
    {
      qmemcpy(v36, ", partition \"", 13);
      *((_QWORD *)v35 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v35, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v38, *this);
    v39 = *this;
    v40 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v40 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v39, 34);
    }
    else
    {
      *((_QWORD *)v39 + 4) = v40 + 1;
      *v40 = 34;
    }
  }
  result = *this;
  v42 = (_BYTE *)*((_QWORD *)*this + 4);
  if ((unint64_t)v42 >= *((_QWORD *)*this + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v42 + 1;
  *v42 = 10;
  return result;
}

void llvm::Metadata::print(llvm::Metadata *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, const llvm::Module *a4)
{
  printMetadataImpl(a2, this, a3, a4, 0, 0);
}

void WriteConstantInternal(llvm::raw_ostream *a1, llvm::Type **this, _anonymous_namespace_::TypePrinting **a3)
{
  llvm::raw_ostream *v5;
  int v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  void *v10;
  size_t v11;
  llvm::detail::IEEEFloat *v12;
  llvm::APFloatBase *v13;
  llvm::APFloatBase *v14;
  llvm::APFloatBase *v15;
  llvm::APFloatBase *v16;
  _WORD *v17;
  llvm::raw_ostream *v18;
  void *v19;
  void *v20;
  void *v21;
  llvm::APFloatBase *v22;
  llvm::APFloatBase *v23;
  llvm::APFloatBase *v24;
  char *v25;
  char v26;
  void *v28;
  uint64_t v29;
  llvm::APFloatBase *v30;
  llvm::Type *v31;
  int v32;
  llvm::APFloatBase *v33;
  double v34;
  void *v35;
  void *v36;
  llvm::APFloatBase *v37;
  _BYTE *v38;
  const llvm::detail::DoubleAPFloat *v39;
  void *v40;
  _BYTE *v41;
  double v42;
  char *v43;
  unint64_t *v44;
  _BOOL4 isSignaling;
  char **v46;
  char **v47;
  _WORD *v48;
  _BYTE *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  char v52;
  char **v53;
  unsigned int v54;
  void **v55;
  Type *v56;
  _BYTE *v57;
  llvm::raw_ostream *v58;
  char v59;
  char **p_p;
  char **v61;
  char **v62;
  llvm::raw_ostream *RawDataValues;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  int v68;
  int v69;
  char *v70;
  _WORD *v71;
  _BYTE *v72;
  Type *v73;
  _BYTE *v74;
  llvm::Type *v75;
  Type *v76;
  _BYTE *v77;
  llvm::raw_ostream *v78;
  char v79;
  _BYTE *v80;
  llvm::APFloatBase *ElementAsConstant;
  int NumElements;
  _BYTE *v83;
  int v84;
  int i;
  llvm::APFloatBase *v86;
  _WORD *v87;
  _BYTE *v88;
  _BYTE *v89;
  int v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  char *v94;
  uint64_t v95;
  _WORD *v96;
  _BYTE *v97;
  _BYTE *v98;
  _BYTE *v99;
  char *v100;
  _BYTE *v101;
  llvm::APFloatBase *AggregateElement;
  int v103;
  _BYTE *v104;
  uint64_t v105;
  llvm::APFloatBase *v106;
  _WORD *v107;
  _BYTE *v108;
  char *OpcodeName;
  _BYTE *v110;
  llvm::raw_ostream *v111;
  unsigned int Predicate;
  _anonymous_namespace_::TypePrinting *v113;
  Type *SourceElementType;
  unsigned int v115;
  BOOL v116;
  _BOOL4 v117;
  unsigned __int8 v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  llvm::Type *v124;
  int *ShuffleMask;
  unint64_t v126;
  void *__p;
  unsigned int v128;
  char v129;
  void *v130;
  llvm::APFloatBase *v131;
  int v132;
  __int16 v133;
  char v134;
  char *v135;
  unint64_t v136[2];
  _QWORD v137[17];

  v5 = a1;
  v137[16] = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int8 *)this + 16);
  if (this && v6 == 16)
  {
    v7 = this + 3;
    if (!llvm::Type::isIntegerTy(*this, 1))
    {
      llvm::APInt::print((llvm::APInt *)(this + 3), v5, 1);
      return;
    }
    if (*((_DWORD *)this + 8) >= 0x41u)
      v7 = (_QWORD *)*v7;
    if (*v7)
      v8 = "true";
    else
      v8 = "false";
    if (*v7)
      v9 = 4;
    else
      v9 = 5;
    v10 = (void *)*((_QWORD *)v5 + 4);
    if (v9 > *((_QWORD *)v5 + 3) - (_QWORD)v10)
    {
      a1 = v5;
      v11 = v9;
LABEL_34:
      llvm::raw_ostream::write(a1, v8, v11);
      return;
    }
    memcpy(v10, v8, v9);
    v29 = *((_QWORD *)v5 + 4) + v9;
    goto LABEL_97;
  }
  if (!this || v6 != 17)
  {
    if (v6 == 18 || v6 == 13)
    {
      v28 = (void *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v28 <= 0xEuLL)
      {
        v8 = "zeroinitializer";
        v11 = 15;
        goto LABEL_34;
      }
      qmemcpy(v28, "zeroinitializer", 15);
      v29 = *((_QWORD *)a1 + 4) + 15;
      goto LABEL_97;
    }
    if (this && v6 == 4)
    {
      v35 = (void *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v35 > 0xCuLL)
      {
        qmemcpy(v35, "blockaddress(", 13);
        *((_QWORD *)a1 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(a1, "blockaddress(", 0xDuLL);
      }
      WriteAsOperandInternal(v5, *(this - 8), (_anonymous_namespace_::AsmWriterContext *)a3);
      v48 = (_WORD *)*((_QWORD *)v5 + 4);
      if (*((_QWORD *)v5 + 3) - (_QWORD)v48 > 1uLL)
      {
        *v48 = 8236;
        *((_QWORD *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, ", ", 2uLL);
      }
      WriteAsOperandInternal(v5, *(this - 4), (_anonymous_namespace_::AsmWriterContext *)a3);
      v49 = (_BYTE *)*((_QWORD *)v5 + 4);
      if (*((_BYTE **)v5 + 3) == v49)
      {
        v8 = ")";
        a1 = v5;
        v11 = 1;
        goto LABEL_34;
      }
      *v49 = 41;
      v29 = *((_QWORD *)v5 + 4) + 1;
LABEL_97:
      *((_QWORD *)v5 + 4) = v29;
      return;
    }
    if (this && v6 == 6)
    {
      v40 = (void *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v40 > 0x14uLL)
      {
        qmemcpy(v40, "dso_local_equivalent ", 21);
        *((_QWORD *)a1 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(a1, "dso_local_equivalent ", 0x15uLL);
      }
      goto LABEL_132;
    }
    if (this && v6 == 7)
    {
      llvm::raw_ostream::operator<<(a1, "no_cfi ");
LABEL_132:
      WriteAsOperandInternal(v5, *(this - 4), (_anonymous_namespace_::AsmWriterContext *)a3);
      return;
    }
    if (this && v6 == 8)
    {
      v56 = (Type *)*((_QWORD *)*this + 3);
      v57 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v57 >= *((_QWORD *)a1 + 3))
      {
        llvm::raw_ostream::write(a1, 91);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v57 + 1;
        *v57 = 91;
      }
      v66 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v66 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v66 + 1;
        *v66 = 32;
      }
      WriteAsOperandInternal(v5, this[-4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)], (_anonymous_namespace_::AsmWriterContext *)a3);
      v68 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      v69 = v68 - 1;
      if (v68 != 1)
      {
        v70 = (char *)(this + 4);
        do
        {
          v71 = (_WORD *)*((_QWORD *)v5 + 4);
          if (*((_QWORD *)v5 + 3) - (_QWORD)v71 > 1uLL)
          {
            *v71 = 8236;
            *((_QWORD *)v5 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
          }
          v72 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v72 < *((_QWORD *)v5 + 3))
          {
            *((_QWORD *)v5 + 4) = v72 + 1;
            *v72 = 32;
          }
          else
          {
            llvm::raw_ostream::write(v5, 32);
          }
          WriteAsOperandInternal(v5, *(const llvm::Value **)&v70[-32 * (*((_DWORD *)this + 5) & 0x7FFFFFF)], (_anonymous_namespace_::AsmWriterContext *)a3);
          v70 += 32;
          --v69;
        }
        while (v69);
      }
LABEL_196:
      v83 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v83 < *((_QWORD *)v5 + 3))
      {
        *((_QWORD *)v5 + 4) = v83 + 1;
        *v83 = 93;
        return;
      }
      v78 = v5;
      v79 = 93;
      goto LABEL_199;
    }
    if (this && v6 == 14)
    {
      if (!llvm::ConstantDataSequential::isString((llvm::ConstantDataSequential *)this, 8))
      {
        v73 = (Type *)*((_QWORD *)*this + 3);
        v74 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v74 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 91);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v74 + 1;
          *v74 = 91;
        }
        v80 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v80 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v80 + 1;
          *v80 = 32;
        }
        ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)this);
        WriteAsOperandInternal(v5, ElementAsConstant, (_anonymous_namespace_::AsmWriterContext *)a3);
        NumElements = llvm::ConstantDataSequential::getNumElements((llvm::ConstantDataSequential *)this);
        if (NumElements != 1)
        {
          v84 = NumElements;
          for (i = 1; i != v84; ++i)
          {
            v87 = (_WORD *)*((_QWORD *)v5 + 4);
            if (*((_QWORD *)v5 + 3) - (_QWORD)v87 > 1uLL)
            {
              *v87 = 8236;
              *((_QWORD *)v5 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v5, ", ", 2uLL);
            }
            v88 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v88 < *((_QWORD *)v5 + 3))
            {
              *((_QWORD *)v5 + 4) = v88 + 1;
              *v88 = 32;
            }
            else
            {
              llvm::raw_ostream::write(v5, 32);
            }
            v86 = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)this);
            WriteAsOperandInternal(v5, v86, (_anonymous_namespace_::AsmWriterContext *)a3);
          }
        }
        goto LABEL_196;
      }
      llvm::raw_ostream::operator<<(v5, "c\"");
      RawDataValues = (llvm::raw_ostream *)llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)this);
      llvm::printEscapedString(RawDataValues, v64, v5);
      v65 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v65 < *((_QWORD *)v5 + 3))
      {
        *((_QWORD *)v5 + 4) = v65 + 1;
        *v65 = 34;
        return;
      }
      v78 = v5;
      v79 = 34;
LABEL_199:
      llvm::raw_ostream::write(v78, v79);
      return;
    }
    if (this && v6 == 9)
    {
      if ((*((_BYTE *)*this + 9) & 2) != 0)
      {
        v67 = (_BYTE *)*((_QWORD *)a1 + 4);
        if ((unint64_t)v67 >= *((_QWORD *)a1 + 3))
        {
          llvm::raw_ostream::write(a1, 60);
        }
        else
        {
          *((_QWORD *)a1 + 4) = v67 + 1;
          *v67 = 60;
        }
      }
      v89 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v89 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 123);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v89 + 1;
        *v89 = 123;
      }
      v90 = *((_DWORD *)this + 5);
      v91 = v90 & 0x7FFFFFF;
      if ((v90 & 0x7FFFFFF) != 0)
      {
        v92 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v92 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v92 + 1;
          *v92 = 32;
        }
        v93 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v93 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v93 + 1;
          *v93 = 32;
        }
        WriteAsOperandInternal(v5, this[-4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)], (_anonymous_namespace_::AsmWriterContext *)a3);
        if (v91 >= 2)
        {
          v94 = (char *)(this + 4);
          v95 = v91 - 1;
          do
          {
            v96 = (_WORD *)*((_QWORD *)v5 + 4);
            if (*((_QWORD *)v5 + 3) - (_QWORD)v96 > 1uLL)
            {
              *v96 = 8236;
              *((_QWORD *)v5 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v5, ", ", 2uLL);
            }
            v97 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v97 < *((_QWORD *)v5 + 3))
            {
              *((_QWORD *)v5 + 4) = v97 + 1;
              *v97 = 32;
            }
            else
            {
              llvm::raw_ostream::write(v5, 32);
            }
            WriteAsOperandInternal(v5, *(const llvm::Value **)&v94[-32 * (*((_DWORD *)this + 5) & 0x7FFFFFF)], (_anonymous_namespace_::AsmWriterContext *)a3);
            v94 += 32;
            --v95;
          }
          while (v95);
        }
        v98 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v98 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v98 + 1;
          *v98 = 32;
        }
      }
      v99 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v99 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 125);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v99 + 1;
        *v99 = 125;
      }
      if ((*((_BYTE *)*this + 9) & 2) == 0)
        return;
LABEL_247:
      v104 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v104 < *((_QWORD *)v5 + 3))
      {
        *((_QWORD *)v5 + 4) = v104 + 1;
        *v104 = 62;
        return;
      }
      v78 = v5;
      v79 = 62;
      goto LABEL_199;
    }
    switch(*((_BYTE *)this + 16))
    {
      case 0xA:
      case 0xF:
        v75 = *this;
        v76 = (Type *)*((_QWORD *)*this + 3);
        v77 = (_BYTE *)*((_QWORD *)a1 + 4);
        if ((unint64_t)v77 >= *((_QWORD *)a1 + 3))
        {
          llvm::raw_ostream::write(a1, 60);
        }
        else
        {
          *((_QWORD *)a1 + 4) = v77 + 1;
          *v77 = 60;
        }
        v101 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v101 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v101 + 1;
          *v101 = 32;
        }
        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)this, 0);
        WriteAsOperandInternal(v5, AggregateElement, (_anonymous_namespace_::AsmWriterContext *)a3);
        v103 = *((_DWORD *)v75 + 8);
        if (v103 != 1)
        {
          v105 = 1;
          do
          {
            v107 = (_WORD *)*((_QWORD *)v5 + 4);
            if (*((_QWORD *)v5 + 3) - (_QWORD)v107 > 1uLL)
            {
              *v107 = 8236;
              *((_QWORD *)v5 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v5, ", ", 2uLL);
            }
            v108 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v108 < *((_QWORD *)v5 + 3))
            {
              *((_QWORD *)v5 + 4) = v108 + 1;
              *v108 = 32;
            }
            else
            {
              llvm::raw_ostream::write(v5, 32);
            }
            v106 = llvm::Constant::getAggregateElement((llvm::Constant *)this, (Type *)v105);
            WriteAsOperandInternal(v5, v106, (_anonymous_namespace_::AsmWriterContext *)a3);
            v105 = (v105 + 1);
          }
          while (v103 != (_DWORD)v105);
        }
        goto LABEL_247;
      case 0xC:
        v100 = "poison";
        goto LABEL_241;
      case 0x13:
        v100 = "null";
        goto LABEL_241;
      case 0x14:
        v100 = "none";
        goto LABEL_241;
      default:
        if ((v6 - 11) <= 1)
        {
          v100 = "undef";
LABEL_241:
          llvm::raw_ostream::operator<<(a1, v100);
          return;
        }
        if (!this || v6 != 5)
        {
          v100 = "<placeholder or erroneous Constant>";
          goto LABEL_241;
        }
        OpcodeName = (char *)llvm::ConstantExpr::getOpcodeName((llvm::ConstantExpr *)this);
        llvm::raw_ostream::operator<<(v5, OpcodeName);
        WriteOptimizationInfo(v5, (const llvm::User *)this);
        if (llvm::ConstantExpr::isCompare((llvm::ConstantExpr *)this))
        {
          v110 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v110 >= *((_QWORD *)v5 + 3))
          {
            v111 = llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v110 + 1;
            *v110 = 32;
            v111 = v5;
          }
          Predicate = llvm::ConstantExpr::getPredicate((llvm::ConstantExpr *)this);
          llvm::operator<<(v111, Predicate);
        }
        llvm::raw_ostream::operator<<(v5, " (");
        if (*((_WORD *)this + 9) == 34)
        {
          v113 = a3[1];
          SourceElementType = (Type *)llvm::GEPOperator::getSourceElementType((llvm::GEPOperator *)this);
          llvm::raw_ostream::operator<<(v5, ", ");
          v115 = *((unsigned __int8 *)this + 17);
          v116 = v115 > 3;
          v117 = v115 > 3;
          if (v115 <= 3)
            v118 = 0;
          else
            v118 = (*((_BYTE *)this + 17) >> 2) - 1;
          if (v116)
            v119 = v118 + 1;
          else
            v119 = 0;
        }
        else
        {
          v119 = 0;
          v117 = 0;
        }
        v120 = *((_DWORD *)this + 5) & 0x7FFFFFF;
        if ((_DWORD)v120)
        {
          v121 = -4 * v120;
          if (!v117)
            goto LABEL_280;
LABEL_278:
          if (v119 == ((v121 * 8 + 32 * (unint64_t)(*((_DWORD *)this + 5) & 0x7FFFFFF)) >> 5))
            llvm::raw_ostream::operator<<(v5, "inrange ");
          while (1)
          {
LABEL_280:
            v122 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v122 >= *((_QWORD *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((_QWORD *)v5 + 4) = v122 + 1;
              *v122 = 32;
            }
            WriteAsOperandInternal(v5, this[v121], (_anonymous_namespace_::AsmWriterContext *)a3);
            if (v121 == -4)
              break;
            llvm::raw_ostream::operator<<(v5, ", ");
            v121 += 4;
            if (v117)
              goto LABEL_278;
          }
        }
        if (llvm::ConstantExpr::isCast((llvm::ConstantExpr *)this))
        {
          llvm::raw_ostream::operator<<(v5, " to ");
          if (*((_WORD *)this + 9) != 63)
            goto LABEL_286;
        }
        else if (*((_WORD *)this + 9) != 63)
        {
LABEL_286:
          v123 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v123 < *((_QWORD *)v5 + 3))
          {
LABEL_287:
            *((_QWORD *)v5 + 4) = v123 + 1;
            *v123 = 41;
            return;
          }
LABEL_290:
          v78 = v5;
          v79 = 41;
          goto LABEL_199;
        }
        v124 = *this;
        ShuffleMask = (int *)llvm::ConstantExpr::getShuffleMask((llvm::ConstantExpr *)this);
        PrintShuffleMask(v5, (uint64_t)v124, ShuffleMask, v126);
        v123 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v123 < *((_QWORD *)v5 + 3))
          goto LABEL_287;
        goto LABEL_290;
    }
  }
  v12 = (llvm::detail::IEEEFloat *)(this + 4);
  v13 = this[4];
  v14 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(a1);
  v15 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v14);
  v16 = v15;
  if (v13 != v14 && v13 != v15)
  {
    v17 = (_WORD *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v17 > 1uLL)
    {
      *v17 = 30768;
      *((_QWORD *)v5 + 4) += 2;
      v36 = *(void **)v12;
      v20 = llvm::APFloatBase::PPCDoubleDouble(v15);
      if (v20 != v36)
      {
LABEL_20:
        llvm::detail::IEEEFloat::bitcastToAPInt(v12, (uint64_t)&v130);
        v21 = *(void **)v12;
        v23 = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(v22);
        if (v21 != v23)
          goto LABEL_21;
        goto LABEL_48;
      }
    }
    else
    {
      v18 = llvm::raw_ostream::write(v5, "0x", 2uLL);
      v19 = *(void **)v12;
      v20 = llvm::APFloatBase::PPCDoubleDouble(v18);
      if (v20 != v19)
        goto LABEL_20;
    }
    v37 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v12, (llvm::APInt *)&v130);
    v21 = *(void **)v12;
    v23 = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(v37);
    if (v21 != v23)
    {
LABEL_21:
      v24 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(v23);
      if (v21 == v24)
      {
        v41 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v41 < *((_QWORD *)v5 + 3))
        {
          *((_QWORD *)v5 + 4) = v41 + 1;
          *v41 = 76;
LABEL_140:
          llvm::APInt::getLoBits((llvm::APInt *)&v130, 0x40u, (uint64_t)&__p);
          if (v128 >= 0x41)
            p_p = (char **)__p;
          else
            p_p = (char **)&__p;
          v135 = *p_p;
          v136[0] = 0;
          LODWORD(v136[1]) = 16;
          WORD2(v136[1]) = 257;
          BYTE6(v136[1]) = 0;
          llvm::raw_ostream::operator<<(v5, (uint64_t)&v135);
          if (v128 >= 0x41 && __p)
            operator delete[](__p);
          llvm::APInt::getHiBits((const void **)&v130, 64, (uint64_t)&__p);
          if (v128 >= 0x41)
            v61 = (char **)__p;
          else
            v61 = (char **)&__p;
          v135 = *v61;
          v136[0] = 0;
          LODWORD(v136[1]) = 16;
LABEL_150:
          WORD2(v136[1]) = 257;
          BYTE6(v136[1]) = 0;
          llvm::raw_ostream::operator<<(v5, (uint64_t)&v135);
          if (v128 >= 0x41 && __p)
            operator delete[](__p);
          goto LABEL_158;
        }
        v51 = v5;
        v52 = 76;
      }
      else
      {
        if (v21 != v20)
        {
          if (v21 == llvm::APFloatBase::IEEEhalf(v24))
          {
            v25 = (char *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v25 < *((_QWORD *)v5 + 3))
            {
              *((_QWORD *)v5 + 4) = v25 + 1;
              v26 = 72;
              goto LABEL_130;
            }
            v58 = v5;
            v59 = 72;
          }
          else
          {
            v25 = (char *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v25 < *((_QWORD *)v5 + 3))
            {
              *((_QWORD *)v5 + 4) = v25 + 1;
              v26 = 82;
LABEL_130:
              *v25 = v26;
LABEL_155:
              v62 = (char **)&v130;
              if (v131 >= 0x41)
                v62 = (char **)v130;
              v135 = *v62;
              v136[0] = 0;
              LODWORD(v136[1]) = 4;
              WORD2(v136[1]) = 257;
              BYTE6(v136[1]) = 0;
              llvm::raw_ostream::operator<<(v5, (uint64_t)&v135);
LABEL_158:
              if (v131 >= 0x41 && v130)
                operator delete[](v130);
              return;
            }
            v58 = v5;
            v59 = 82;
          }
          llvm::raw_ostream::write(v58, v59);
          goto LABEL_155;
        }
        v50 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v50 < *((_QWORD *)v5 + 3))
        {
          *((_QWORD *)v5 + 4) = v50 + 1;
          *v50 = 77;
          goto LABEL_140;
        }
        v51 = v5;
        v52 = 77;
      }
      llvm::raw_ostream::write(v51, v52);
      goto LABEL_140;
    }
LABEL_48:
    v38 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v38 >= *((_QWORD *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 75);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v38 + 1;
      *v38 = 75;
    }
    llvm::APInt::getHiBits((const void **)&v130, 16, (uint64_t)&__p);
    if (v128 >= 0x41)
      v46 = (char **)__p;
    else
      v46 = (char **)&__p;
    v135 = *v46;
    v136[0] = 0;
    LODWORD(v136[1]) = 4;
    WORD2(v136[1]) = 257;
    BYTE6(v136[1]) = 0;
    llvm::raw_ostream::operator<<(v5, (uint64_t)&v135);
    if (v128 >= 0x41 && __p)
      operator delete[](__p);
    llvm::APInt::getLoBits((llvm::APInt *)&v130, 0x40u, (uint64_t)&__p);
    if (v128 >= 0x41)
      v47 = (char **)__p;
    else
      v47 = (char **)&__p;
    v135 = *v47;
    v136[0] = 0;
    LODWORD(v136[1]) = 16;
    goto LABEL_150;
  }
  v129 = 0;
  v30 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v15);
  if (v30 != v13)
  {
    v31 = (llvm::detail::IEEEFloat *)((char *)v12 - 8);
    if ((*((_BYTE *)this + 52) & 7) != 0)
      goto LABEL_38;
LABEL_51:
    v33 = v13;
LABEL_52:
    v39 = v12;
    if (v30 == v33)
      goto LABEL_67;
    goto LABEL_53;
  }
  v31 = this[5];
  if ((*((_BYTE *)v31 + 28) & 7) == 0)
    goto LABEL_51;
LABEL_38:
  v32 = *((_BYTE *)v31 + 28) & 7;
  v33 = v13;
  if (v32 == 1)
    goto LABEL_52;
  v34 = llvm::APFloat::convertToDouble((void **)v12 - 1);
  v135 = (char *)v137;
  *(_OWORD *)v136 = xmmword_181236BB0;
  if (v30 == *(llvm::APFloatBase **)v12)
    llvm::detail::DoubleAPFloat::toString(v12, (uint64_t *)&v135, 6, 0, 0);
  else
    llvm::detail::IEEEFloat::toString((uint64_t)v12, (uint64_t *)&v135, 6u, 0, 0);
  llvm::APFloat::APFloat((llvm::APFloatBase *)&v130, v16, (unsigned __int8 *)v135, v136[0]);
  v42 = llvm::APFloat::convertToDouble(&v130);
  if (v30 == v131)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v131);
    v43 = v135;
    if (v42 != v34)
    {
LABEL_64:
      if (v43 != (char *)v137)
        free(v43);
      v39 = v12;
      if (v30 == *(llvm::APFloatBase **)v12)
      {
LABEL_67:
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v136, v39);
        if (v13 != v16)
        {
LABEL_68:
          if (v30 == (llvm::APFloatBase *)v136[0])
            v44 = (unint64_t *)(v136[1] + 8);
          else
            v44 = v136;
          isSignaling = llvm::detail::IEEEFloat::isSignaling((llvm::detail::IEEEFloat *)v44);
          llvm::APFloat::convert((uint64_t)&v135, v16, 1, &v129);
          if (isSignaling)
          {
            if (v30 == (llvm::APFloatBase *)v136[0])
              llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v136, (llvm::APInt *)&__p);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v136, (uint64_t)&__p);
            v53 = &v135;
            if (v30 == (llvm::APFloatBase *)v136[0])
              v53 = (char **)v136[1];
            v54 = *((unsigned __int8 *)v53 + 28);
            if (v30 == v16)
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v131, (uint64_t)v16);
            else
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v131, (uint64_t)v16);
            if (v30 == v131)
              llvm::detail::DoubleAPFloat::makeNaN((llvm::detail::DoubleAPFloat *)&v131, 1, (v54 & 8) != 0, (const llvm::APInt *)&__p);
            else
              llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)&v131, 1, (v54 >> 3) & 1, (const llvm::APInt *)&__p);
            llvm::APFloat::Storage::operator=((llvm::APFloatBase *)v136, (llvm::APFloatBase *)&v131);
            if (v30 == v131)
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v131);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v131);
            if (v128 >= 0x41 && __p)
              operator delete[](__p);
          }
        }
LABEL_117:
        if (v30 == (llvm::APFloatBase *)v136[0])
          llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v136, (llvm::APInt *)&__p);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v136, (uint64_t)&__p);
        v55 = &__p;
        if (v128 >= 0x41)
          v55 = (void **)__p;
        v130 = *v55;
        v131 = 0;
        v132 = 0;
        v133 = 257;
        v134 = 1;
        llvm::raw_ostream::operator<<(v5, (uint64_t)&v130);
        if (v128 >= 0x41 && __p)
          operator delete[](__p);
        if (v30 == (llvm::APFloatBase *)v136[0])
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v136);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v136);
        return;
      }
LABEL_53:
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v136, v39);
      if (v13 != v16)
        goto LABEL_68;
      goto LABEL_117;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v131);
    v43 = v135;
    if (v42 != v34)
      goto LABEL_64;
  }
  llvm::raw_ostream::write(v5, v43, v136[0]);
  if (v135 != (char *)v137)
    free(v135);
}

void llvm::Value::printAsOperand(Type **this, llvm::raw_ostream *a2, int a3, _anonymous_namespace_::TypePrinting **a4)
{
  _anonymous_namespace_::TypePrinting *Machine;
  BOOL v9;
  _anonymous_namespace_::TypePrinting *v10;
  unsigned int v11;
  _anonymous_namespace_::TypePrinting *v12[4];

  if ((a3 & 1) != 0
    || (Machine = (_anonymous_namespace_::TypePrinting *)llvm::ModuleSlotTracker::getMachine((llvm::ModuleSlotTracker *)a4),
        v10 = a4[3],
        (*((_BYTE *)this + 23) & 0x10) == 0)
    && (v11 = *((unsigned __int8 *)this + 16), v11 >= 4)
    && (v11 < 0x15 || v11 == 23))
  {
    printAsOperandImpl(this, a2, a3, (llvm::ModuleSlotTracker *)a4);
  }
  v12[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
  v12[1] = 0;
  v12[2] = Machine;
  v12[3] = v10;
  WriteAsOperandInternal(a2, (const llvm::Value *)this, v12, v9);
}

void llvm::Value::printAsOperand(Value *this, llvm::raw_ostream *a2, int a3, ValueImpl *ModuleFromVal)
{
  unsigned int impl_low;
  _QWORD v8[2];
  __int16 v9;
  ValueImpl *v10;
  uint64_t v11;
  void (***v12)(llvm::SlotTracker *__hidden);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(llvm::SlotTracker *__hidden);
  ValueImpl *v16;
  uint64_t v17;
  ValueImpl *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (ModuleFromVal)
  {
    if (a3)
    {
LABEL_3:
      impl_low = LOBYTE(this[2].impl);
      goto LABEL_4;
    }
  }
  else
  {
    ModuleFromVal = getModuleFromVal((ValueImpl *)this);
    if (a3)
      goto LABEL_3;
  }
  if ((HIBYTE(this[2].impl) & 0x10) == 0)
  {
    impl_low = LOBYTE(this[2].impl);
    if (impl_low >= 4 && (impl_low < 0x15 || impl_low == 23))
    {
LABEL_4:
      v15 = off_1E0E20020;
      v16 = ModuleFromVal;
      v17 = 0;
      LOBYTE(v18) = 0;
      BYTE1(v18) = impl_low == 23;
      v19 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v23 = 0;
      v22 = 0;
      v21 = 0u;
      v20 = 0u;
      v39 = 16;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 16;
      v8[0] = off_1E0E22A80;
      v8[1] = 0;
      v9 = 0;
      v10 = ModuleFromVal;
      v11 = 0;
      v12 = &v15;
      v13 = 0;
      v14 = 0;
      printAsOperandImpl((Type **)this, a2, a3, (llvm::ModuleSlotTracker *)v8);
    }
  }
  v15 = (void (**)(llvm::SlotTracker *__hidden))&off_1E0E15E00;
  v16 = 0;
  v17 = 0;
  v18 = ModuleFromVal;
  WriteAsOperandInternal(a2, (const llvm::Value *)this, (_anonymous_namespace_::TypePrinting **)&v15, (BOOL)ModuleFromVal);
}

void printAsOperandImpl(Type **a1, llvm::raw_ostream *a2, int a3, llvm::ModuleSlotTracker *this)
{
  uint64_t v7;
  _BYTE *v8;
  _anonymous_namespace_::TypePrinting *Machine;
  _anonymous_namespace_::TypePrinting *v10;
  BOOL v11;
  _anonymous_namespace_::TypePrinting *v12[4];
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  void *__p;
  void *v32;
  uint64_t v33;

  v7 = *((_QWORD *)this + 3);
  v13[1] = 0;
  v13[2] = 0;
  v13[0] = v7;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v32 = 0;
  v33 = 0;
  if (a3)
  {
    v8 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v8 + 1;
      *v8 = 32;
    }
  }
  Machine = (_anonymous_namespace_::TypePrinting *)llvm::ModuleSlotTracker::getMachine(this);
  v10 = (_anonymous_namespace_::TypePrinting *)*((_QWORD *)this + 3);
  v12[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
  v12[1] = (_anonymous_namespace_::TypePrinting *)v13;
  v12[2] = Machine;
  v12[3] = v10;
  WriteAsOperandInternal(a2, (const llvm::Value *)a1, v12, v11);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  llvm::deallocate_buffer(v28, (void *)(16 * v30));
}

void sub_180C7D1B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm *a24,uint64_t a25,unsigned int a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  llvm::deallocate_buffer(a24, (void *)(8 * a26));
}

void sub_180C7D1D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,llvm *a21,uint64_t a22,unsigned int a23)
{
  llvm::deallocate_buffer(a21, (void *)(8 * a23));
}

void sub_180C7D1EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, llvm *a18, uint64_t a19, unsigned int a20)
{
  llvm::deallocate_buffer(a18, (void *)(8 * a20));
}

void sub_180C7D200(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, llvm *a15, uint64_t a16, unsigned int a17)
{
  llvm::deallocate_buffer(a15, (void *)(8 * a17));
}

void printMetadataImpl(llvm::raw_ostream *a1, const llvm::Metadata *a2, llvm::ModuleSlotTracker *a3, const llvm::Module *a4, char a5, int a6)
{
  uint64_t Machine;
  BOOL v12;
  _QWORD *v13;
  int v14;
  _WORD *v15;
  _QWORD v16[3];
  int v17;
  llvm *v18;
  uint64_t v19;
  int v20;
  llvm *v21;
  uint64_t v22;
  int v23;
  llvm *v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  llvm *v31;
  uint64_t v32;
  unsigned int v33;
  void *__p;
  void *v35;
  uint64_t v36;
  void (**v37)(llvm::formatted_raw_ostream *__hidden);
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;

  v38 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 1;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v37 = off_1E0E22CB0;
  v45 = 0;
  v46 = 0;
  v47 = &v49;
  v48 = xmmword_181234800;
  llvm::formatted_raw_ostream::setStream((llvm::raw_ostream **)&v37, a1);
  v16[1] = 0;
  v16[2] = 0;
  v16[0] = a4;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  __p = 0;
  v35 = 0;
  v36 = 0;
  Machine = llvm::ModuleSlotTracker::getMachine(a3);
  if (!a6 || (a5 & 1) != 0)
  {
    v13 = operator new(0x20uLL);
    *v13 = &off_1E0E15E00;
    v13[1] = v16;
    v13[2] = Machine;
    v13[3] = a4;
  }
  else
  {
    v13 = operator new(0x100uLL);
    v13[2] = Machine;
    v13[3] = a4;
    *v13 = &off_1E0E18E98;
    v13[1] = v16;
    *((_DWORD *)v13 + 8) = 0;
    v13[5] = v13 + 7;
    v13[6] = 0x400000000;
    v13[27] = a2;
    v13[23] = v13 + 27;
    v13[24] = v13 + 27;
    *((_DWORD *)v13 + 52) = 0;
    v13[25] = 0x100000004;
    v13[31] = &v37;
  }
  WriteAsOperandInternal((llvm::raw_ostream *)&v37, a2, (_anonymous_namespace_::TypePrinting **)v13, v12);
  v14 = *(unsigned __int8 *)a2;
  if (((v14 - 8) < 0x1C || (v14 - 5) <= 1) && v14 != 7 && (a5 & 1) == 0)
  {
    v15 = (_WORD *)v41;
    if ((unint64_t)(v40 - v41) > 2)
    {
      *(_BYTE *)(v41 + 2) = 32;
      *v15 = 15648;
      v41 += 3;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v37, " = ", 3uLL);
    }
    WriteMDNodeBodyInternal((llvm::raw_ostream *)&v37, a2, (_anonymous_namespace_::AsmWriterContext *)v13);
  }
  (*(void (**)(_QWORD *))(*v13 + 16))(v13);
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
  llvm::deallocate_buffer(v31, (void *)(16 * v33));
}

void llvm::SlotTracker::~SlotTracker(llvm::SlotTracker *this)
{
  llvm::SlotTracker::~SlotTracker(this);
}

{
  uint64_t v2;
  uint64_t v3;
  llvm *v4;

  *(_QWORD *)this = off_1E0E20020;
  if (*((_DWORD *)this + 77))
  {
    v2 = *((unsigned int *)this + 76);
    if ((_DWORD)v2)
    {
      v3 = 0;
      do
      {
        v4 = *(llvm **)(*((_QWORD *)this + 37) + v3);
        if (v4 != (llvm *)-8 && v4 != 0)
          llvm::deallocate_buffer(v4, (void *)(*(_QWORD *)v4 + 17));
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*((void **)this + 37));
  llvm::deallocate_buffer(*((llvm **)this + 33), (void *)(16 * *((unsigned int *)this + 70)));
}

void sub_180C7D510(void *__p)
{
  operator delete(__p);
}

uint64_t llvm::SlotTracker::getNextMetadataSlot(llvm::SlotTracker *this)
{
  return *((unsigned int *)this + 48);
}

void `anonymous namespace'::AssemblyWriter::printMetadataAttachments(uint64_t *a1, _DWORD *a2, char *a3, size_t a4)
{
  unsigned int v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _anonymous_namespace_::TypePrinting *v12;
  _anonymous_namespace_::TypePrinting *v13;
  const llvm::Metadata **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  BOOL v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  _anonymous_namespace_::TypePrinting *v28[4];

  v4 = a2[2];
  if (v4)
  {
    if (!*((_DWORD *)a1 + 78))
    {
      v9 = (uint64_t)(a1 + 38);
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
      v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 4) != 0)
        v11 = (uint64_t *)*v11;
      llvm::LLVMContext::getMDKindNames(v11, v9);
      v4 = a2[2];
    }
    v12 = (_anonymous_namespace_::TypePrinting *)a1[4];
    v13 = (_anonymous_namespace_::TypePrinting *)a1[1];
    v28[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
    v28[1] = (_anonymous_namespace_::TypePrinting *)(a1 + 5);
    v28[2] = v12;
    v28[3] = v13;
    if (v4)
    {
      v14 = *(const llvm::Metadata ***)a2;
      v15 = *(_QWORD *)a2 + 16 * v4;
      do
      {
        v16 = *(unsigned int *)v14;
        v17 = *a1;
        v18 = *(void **)(*a1 + 32);
        if (a4 <= *(_QWORD *)(*a1 + 24) - (_QWORD)v18)
        {
          if (a4)
          {
            memcpy(v18, a3, a4);
            *(_QWORD *)(v17 + 32) += a4;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)*a1, a3, a4);
        }
        v19 = (llvm::raw_ostream *)*a1;
        v21 = *(_BYTE **)(*a1 + 24);
        v20 = *(_BYTE **)(*a1 + 32);
        if (*((_DWORD *)a1 + 78) > v16)
        {
          if (v21 == v20)
          {
            llvm::raw_ostream::write(v19, "!", 1uLL);
          }
          else
          {
            *v20 = 33;
            ++*((_QWORD *)v19 + 4);
          }
          printMetadataIdentifier(*(llvm::raw_ostream **)(a1[38] + 16 * v16), *(_QWORD *)(a1[38] + 16 * v16 + 8), (llvm::raw_ostream *)*a1);
          goto LABEL_24;
        }
        if ((unint64_t)(v21 - v20) > 0xF)
        {
          *(_OWORD *)v20 = *(_OWORD *)"!<unknown kind #";
          *((_QWORD *)v19 + 4) += 16;
          v23 = llvm::raw_ostream::operator<<(v19, v16);
          v25 = (_BYTE *)*((_QWORD *)v23 + 4);
          if (*((_BYTE **)v23 + 3) == v25)
          {
LABEL_21:
            llvm::raw_ostream::write(v23, ">", 1uLL);
            goto LABEL_24;
          }
        }
        else
        {
          v22 = llvm::raw_ostream::write(v19, "!<unknown kind #", 0x10uLL);
          v23 = llvm::raw_ostream::operator<<(v22, v16);
          v25 = (_BYTE *)*((_QWORD *)v23 + 4);
          if (*((_BYTE **)v23 + 3) == v25)
            goto LABEL_21;
        }
        *v25 = 62;
        ++*((_QWORD *)v23 + 4);
LABEL_24:
        v26 = (llvm::raw_ostream *)*a1;
        v27 = *(_BYTE **)(*a1 + 32);
        if ((unint64_t)v27 < *(_QWORD *)(*a1 + 24))
        {
          *((_QWORD *)v26 + 4) = v27 + 1;
          *v27 = 32;
        }
        else
        {
          llvm::raw_ostream::write(v26, 32);
        }
        WriteAsOperandInternal((llvm::raw_ostream *)*a1, v14[1], v28, v24);
        v14 += 2;
      }
      while (v14 != (const llvm::Metadata **)v15);
    }
  }
}

_BYTE *getLinkageNameWithSpace(_BYTE *result, int a2)
{
  if (a2)
    __asm { BR              X10 }
  result[23] = 0;
  *result = 0;
  return result;
}

void sub_180C7D7B8()
{
  std::string *v0;
  std::string *v1;
  std::string v2;

  v1 = std::string::append(&v2, " ");
  *v0 = *v1;
  v1->__r_.__value_.__r.__words[0] = 0;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    JUMPOUT(0x180C7D7A8);
  operator delete(v2.__r_.__value_.__l.__data_);
}

void sub_180C7D880()
{
  std::string *v0;
  std::string *v1;
  std::string v2;

  v1 = std::string::append(&v2, " ");
  *v0 = *v1;
  v1->__r_.__value_.__r.__words[0] = 0;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    JUMPOUT(0x180C7D7A8);
  operator delete(v2.__r_.__value_.__l.__data_);
}

void sub_180C7D8A8()
{
  std::string *v0;
  std::string *v1;
  std::string v2;

  v1 = std::string::append(&v2, " ");
  *v0 = *v1;
  v1->__r_.__value_.__r.__words[0] = 0;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    JUMPOUT(0x180C7D7A8);
  operator delete(v2.__r_.__value_.__l.__data_);
}

void sub_180C7D8D4()
{
  JUMPOUT(0x180C7D8F4);
}

__n128 PrintCallingConv(unsigned int a1, llvm::raw_ostream *this)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  _WORD *v6;
  llvm::raw_ostream *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 *v16;
  uint64_t v17;
  void *v18;
  _OWORD *v19;
  void *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  int v25;
  int v26;
  const char *v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  char v31;
  const char *v32;
  __n128 *v33;
  const char *v34;
  __int128 v35;

  switch(a1)
  {
    case 8u:
      v3 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v3) > 5)
      {
        *(_WORD *)(v3 + 4) = 25443;
        v21 = 1953718630;
        goto LABEL_134;
      }
      llvm::raw_ostream::write(this, "fastcc", 6uLL);
      break;
    case 9u:
      v3 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v3) > 5)
      {
        *(_WORD *)(v3 + 4) = 25443;
        v21 = 1684828003;
        goto LABEL_134;
      }
      llvm::raw_ostream::write(this, "coldcc", 6uLL);
      break;
    case 0xAu:
      v5 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v5) > 4)
      {
        *(_BYTE *)(v5 + 4) = 99;
        *(_DWORD *)v5 = 1667459175;
        *((_QWORD *)this + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(this, "ghccc", 5uLL);
      }
      break;
    case 0xDu:
      v8 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v8 > 7uLL)
      {
        v22 = 0x676572796E61;
        goto LABEL_136;
      }
      llvm::raw_ostream::write(this, "anyregcc", 8uLL);
      break;
    case 0xEu:
      v9 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 0xEuLL)
      {
        v23 = "preserve_mostcc";
        goto LABEL_159;
      }
      llvm::raw_ostream::write(this, "preserve_mostcc", 0xFuLL);
      break;
    case 0xFu:
      v10 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v10 > 0xDuLL)
      {
        v24 = "preserve_allcc";
        goto LABEL_129;
      }
      llvm::raw_ostream::write(this, "preserve_allcc", 0xEuLL);
      break;
    case 0x10u:
      v11 = (int *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v11 > 6uLL)
      {
        *(int *)((char *)v11 + 3) = 1667462246;
        v25 = 1718187891;
        goto LABEL_164;
      }
      llvm::raw_ostream::write(this, "swiftcc", 7uLL);
      break;
    case 0x11u:
      v10 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v10 > 0xDuLL)
      {
        v24 = "cxx_fast_tlscc";
        goto LABEL_129;
      }
      llvm::raw_ostream::write(this, "cxx_fast_tlscc", 0xEuLL);
      break;
    case 0x12u:
      v3 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v3) > 5)
      {
        *(_WORD *)(v3 + 4) = 25443;
        v21 = 1818845556;
        goto LABEL_134;
      }
      llvm::raw_ostream::write(this, "tailcc", 6uLL);
      break;
    case 0x13u:
      v9 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 0xEuLL)
      {
        v23 = "cfguard_checkcc";
        goto LABEL_159;
      }
      llvm::raw_ostream::write(this, "cfguard_checkcc", 0xFuLL);
      break;
    case 0x14u:
      v12 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v12) > 0xA)
      {
        v26 = 1667460201;
        v27 = "swifttailcc";
        goto LABEL_139;
      }
      llvm::raw_ostream::write(this, "swifttailcc", 0xBuLL);
      break;
    case 0x40u:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 > 0xCuLL)
      {
        v28 = "x86_stdcallcc";
        goto LABEL_147;
      }
      llvm::raw_ostream::write(this, "x86_stdcallcc", 0xDuLL);
      break;
    case 0x41u:
      v10 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v10 > 0xDuLL)
      {
        v24 = "x86_fastcallcc";
        goto LABEL_129;
      }
      llvm::raw_ostream::write(this, "x86_fastcallcc", 0xEuLL);
      break;
    case 0x42u:
      v14 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 9)
      {
        v29 = 25443;
        v30 = "arm_apcscc";
        goto LABEL_162;
      }
      llvm::raw_ostream::write(this, "arm_apcscc", 0xAuLL);
      break;
    case 0x43u:
      v12 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v12) > 0xA)
      {
        v26 = 1667461987;
        v27 = "arm_aapcscc";
        goto LABEL_139;
      }
      llvm::raw_ostream::write(this, "arm_aapcscc", 0xBuLL);
      break;
    case 0x44u:
      v9 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 0xEuLL)
      {
        v23 = "arm_aapcs_vfpcc";
        goto LABEL_159;
      }
      llvm::raw_ostream::write(this, "arm_aapcs_vfpcc", 0xFuLL);
      break;
    case 0x45u:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 > 0xCuLL)
      {
        v28 = "msp430_intrcc";
        goto LABEL_147;
      }
      llvm::raw_ostream::write(this, "msp430_intrcc", 0xDuLL);
      break;
    case 0x46u:
      v10 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v10 > 0xDuLL)
      {
        v24 = "x86_thiscallcc";
        goto LABEL_129;
      }
      llvm::raw_ostream::write(this, "x86_thiscallcc", 0xEuLL);
      break;
    case 0x47u:
      v14 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 9)
      {
        v29 = 27749;
        v30 = "ptx_kernel";
        goto LABEL_162;
      }
      llvm::raw_ostream::write(this, "ptx_kernel", 0xAuLL);
      break;
    case 0x48u:
      v14 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 9)
      {
        v29 = 25955;
        v30 = "ptx_device";
        goto LABEL_162;
      }
      llvm::raw_ostream::write(this, "ptx_device", 0xAuLL);
      break;
    case 0x4Bu:
      v15 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 8)
      {
        v31 = 99;
        v32 = "spir_func";
        goto LABEL_151;
      }
      llvm::raw_ostream::write(this, "spir_func", 9uLL);
      break;
    case 0x4Cu:
      v12 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v12) > 0xA)
      {
        v26 = 1818586738;
        v27 = "spir_kernel";
        goto LABEL_139;
      }
      llvm::raw_ostream::write(this, "spir_kernel", 0xBuLL);
      break;
    case 0x4Du:
      v10 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v10 > 0xDuLL)
      {
        v24 = "intel_ocl_bicc";
LABEL_129:
        *v10 = *(_QWORD *)v24;
        *(_QWORD *)((char *)v10 + 6) = *(_QWORD *)(v24 + 6);
        *((_QWORD *)this + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(this, "intel_ocl_bicc", 0xEuLL);
      }
      break;
    case 0x4Eu:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 > 0xCuLL)
      {
        v28 = "x86_64_sysvcc";
        goto LABEL_147;
      }
      llvm::raw_ostream::write(this, "x86_64_sysvcc", 0xDuLL);
      break;
    case 0x4Fu:
      v11 = (int *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v11 > 6uLL)
      {
        *(int *)((char *)v11 + 3) = 1667445814;
        v25 = 913205623;
        goto LABEL_164;
      }
      llvm::raw_ostream::write(this, "win64cc", 7uLL);
      break;
    case 0x50u:
      v16 = (__n128 *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 > 0xFuLL)
      {
        v33 = (__n128 *)"x86_vectorcallcc";
        goto LABEL_166;
      }
      llvm::raw_ostream::write(this, "x86_vectorcallcc", 0x10uLL);
      break;
    case 0x51u:
      v3 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v3) > 5)
      {
        *(_WORD *)(v3 + 4) = 25443;
        v21 = 1836476520;
LABEL_134:
        *(_DWORD *)v3 = v21;
        *((_QWORD *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "hhvmcc", 6uLL);
      }
      break;
    case 0x52u:
      v8 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v8 > 7uLL)
      {
        v22 = 0x635F6D766868;
LABEL_136:
        *v8 = v22 & 0xFFFFFFFFFFFFLL | 0x6363000000000000;
        *((_QWORD *)this + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, "hhvm_ccc", 8uLL);
      }
      break;
    case 0x53u:
      v14 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 9)
      {
        v29 = 25443;
        v30 = "x86_intrcc";
        goto LABEL_162;
      }
      llvm::raw_ostream::write(this, "x86_intrcc", 0xAuLL);
      break;
    case 0x54u:
      v12 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v12) > 0xA)
      {
        v26 = 543384434;
        v27 = "avr_intrcc ";
LABEL_139:
        *(_DWORD *)(v12 + 7) = v26;
        *(_QWORD *)v12 = *(_QWORD *)v27;
        *((_QWORD *)this + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(this, "avr_intrcc ", 0xBuLL);
      }
      break;
    case 0x55u:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 > 0xCuLL)
      {
        v28 = "avr_signalcc ";
        goto LABEL_147;
      }
      llvm::raw_ostream::write(this, "avr_signalcc ", 0xDuLL);
      break;
    case 0x57u:
      v15 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 8)
      {
        v31 = 115;
        v32 = "amdgpu_vs";
        goto LABEL_151;
      }
      llvm::raw_ostream::write(this, "amdgpu_vs", 9uLL);
      break;
    case 0x58u:
      v15 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 8)
      {
        v31 = 115;
        v32 = "amdgpu_gs";
        goto LABEL_151;
      }
      llvm::raw_ostream::write(this, "amdgpu_gs", 9uLL);
      break;
    case 0x59u:
      v15 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 8)
      {
        v31 = 115;
        v32 = "amdgpu_ps";
        goto LABEL_151;
      }
      llvm::raw_ostream::write(this, "amdgpu_ps", 9uLL);
      break;
    case 0x5Au:
      v15 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 8)
      {
        v31 = 115;
        v32 = "amdgpu_cs";
        goto LABEL_151;
      }
      llvm::raw_ostream::write(this, "amdgpu_cs", 9uLL);
      break;
    case 0x5Bu:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 > 0xCuLL)
      {
        v28 = "amdgpu_kernel";
        goto LABEL_147;
      }
      llvm::raw_ostream::write(this, "amdgpu_kernel", 0xDuLL);
      break;
    case 0x5Cu:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 > 0xCuLL)
      {
        v28 = "x86_regcallcc";
LABEL_147:
        *v13 = *(_QWORD *)v28;
        *(_QWORD *)((char *)v13 + 5) = *(_QWORD *)(v28 + 5);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, "x86_regcallcc", 0xDuLL);
      }
      break;
    case 0x5Du:
      v15 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 8)
      {
        v31 = 115;
        v32 = "amdgpu_hs";
        goto LABEL_151;
      }
      llvm::raw_ostream::write(this, "amdgpu_hs", 9uLL);
      break;
    case 0x5Fu:
      v15 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 8)
      {
        v31 = 115;
        v32 = "amdgpu_ls";
        goto LABEL_151;
      }
      llvm::raw_ostream::write(this, "amdgpu_ls", 9uLL);
      break;
    case 0x60u:
      v15 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 8)
      {
        v31 = 115;
        v32 = "amdgpu_es";
LABEL_151:
        *(_BYTE *)(v15 + 8) = v31;
        *(_QWORD *)v15 = *(_QWORD *)v32;
        *((_QWORD *)this + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(this, "amdgpu_es", 9uLL);
      }
      break;
    case 0x61u:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) > 0x11)
      {
        *(_WORD *)(v17 + 16) = 29539;
        result.n128_u64[0] = *(_QWORD *)"aarch64_vector_pcs";
        *(_OWORD *)v17 = *(_OWORD *)"aarch64_vector_pcs";
        *((_QWORD *)this + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(this, "aarch64_vector_pcs", 0x12uLL);
      }
      break;
    case 0x62u:
      v18 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v18 > 0x15uLL)
      {
        result.n128_u64[0] = *(_QWORD *)"aarch64_sve_vector_pcs";
        qmemcpy(v18, "aarch64_sve_vector_pcs", 22);
        *((_QWORD *)this + 4) += 22;
      }
      else
      {
        llvm::raw_ostream::write(this, "aarch64_sve_vector_pcs", 0x16uLL);
      }
      break;
    case 0x64u:
      v14 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 9)
      {
        v29 = 30822;
        v30 = "amdgpu_gfx";
        goto LABEL_162;
      }
      llvm::raw_ostream::write(this, "amdgpu_gfx", 0xAuLL);
      break;
    case 0x66u:
      v19 = (_OWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v19 > 0x1FuLL)
      {
        v34 = "aarch64_sme_preservemost_from_x0";
        goto LABEL_157;
      }
      llvm::raw_ostream::write(this, "aarch64_sme_preservemost_from_x0", 0x20uLL);
      break;
    case 0x67u:
      v19 = (_OWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v19 > 0x1FuLL)
      {
        v34 = "aarch64_sme_preservemost_from_x2";
LABEL_157:
        result = *(__n128 *)v34;
        v35 = *((_OWORD *)v34 + 1);
        *v19 = *(_OWORD *)v34;
        v19[1] = v35;
        *((_QWORD *)this + 4) += 32;
      }
      else
      {
        llvm::raw_ostream::write(this, "aarch64_sme_preservemost_from_x2", 0x20uLL);
      }
      break;
    case 0x68u:
      v9 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 0xEuLL)
      {
        v23 = "amdgpu_cs_chain";
LABEL_159:
        *v9 = *(_QWORD *)v23;
        *(_QWORD *)((char *)v9 + 7) = *(_QWORD *)(v23 + 7);
        *((_QWORD *)this + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(this, "amdgpu_cs_chain", 0xFuLL);
      }
      break;
    case 0x69u:
      v20 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v20 > 0x17uLL)
      {
        result.n128_u64[0] = *(_QWORD *)"amdgpu_cs_chain_preserve";
        qmemcpy(v20, "amdgpu_cs_chain_preserve", 24);
        *((_QWORD *)this + 4) += 24;
      }
      else
      {
        llvm::raw_ostream::write(this, "amdgpu_cs_chain_preserve", 0x18uLL);
      }
      break;
    case 0x6Au:
      v14 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 9)
      {
        v29 = 25443;
        v30 = "m68k_rtdcc";
LABEL_162:
        *(_WORD *)(v14 + 8) = v29;
        *(_QWORD *)v14 = *(_QWORD *)v30;
        *((_QWORD *)this + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(this, "m68k_rtdcc", 0xAuLL);
      }
      break;
    case 0x6Bu:
      v11 = (int *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v11 > 6uLL)
      {
        *(int *)((char *)v11 + 3) = 1667460193;
        v25 = 1633776231;
LABEL_164:
        *v11 = v25;
        *((_QWORD *)this + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(this, "graalcc", 7uLL);
      }
      break;
    case 0xFFu:
      v16 = (__n128 *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 > 0xFuLL)
      {
        v33 = (__n128 *)"air_intersection";
LABEL_166:
        result = *v33;
        *v16 = *v33;
        *((_QWORD *)this + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(this, "air_intersection", 0x10uLL);
      }
      break;
    default:
      v6 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v6 > 1uLL)
      {
        *v6 = 25443;
        *((_QWORD *)this + 4) += 2;
        v7 = this;
      }
      else
      {
        v7 = llvm::raw_ostream::write(this, "cc", 2uLL);
      }
      llvm::raw_ostream::operator<<(v7, a1);
      break;
  }
  return result;
}

void WriteAsOperandInternal(llvm::raw_ostream *a1, const llvm::Value *this, _anonymous_namespace_::TypePrinting **a3, BOOL a4)
{
  unsigned int v6;
  _DWORD *v7;
  unint64_t v8;
  llvm::raw_ostream *Name;
  size_t v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  _anonymous_namespace_::TypePrinting *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const llvm::Value *v21;
  int v22;
  int v23;
  llvm::raw_ostream *v24;
  char v25;
  llvm::SlotTracker *v26;
  __n128 v27;
  llvm::SlotTracker *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const llvm::Value *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::Value *v41;
  int v42;
  int v43;
  int LocalSlot;
  char v45;
  llvm::SlotTracker *v46;
  llvm::SlotTracker *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const llvm::Value *v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  llvm::raw_ostream *v57;
  uint64_t v58;
  _DWORD *v59;
  llvm::raw_ostream *v60;
  uint64_t *v61;
  llvm::raw_ostream *v62;
  int v63;
  llvm::raw_ostream *v64;
  uint64_t v65;
  _BYTE *v66;
  char *v67;
  unint64_t v68;
  llvm::raw_ostream *v69;

  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    Name = (llvm::raw_ostream *)llvm::Value::getName(this);
    v11 = v10;
    v13 = *((_QWORD *)a1 + 3);
    v12 = (char *)*((_QWORD *)a1 + 4);
    if (*((unsigned __int8 *)this + 16) > 3u)
    {
      if ((unint64_t)v12 < v13)
      {
        *((_QWORD *)a1 + 4) = v12 + 1;
        v14 = 37;
        goto LABEL_26;
      }
      v24 = a1;
      v25 = 37;
    }
    else
    {
      if ((unint64_t)v12 < v13)
      {
        *((_QWORD *)a1 + 4) = v12 + 1;
        v14 = 64;
LABEL_26:
        *v12 = v14;
LABEL_31:
        llvm::printLLVMNameWithoutPrefix(a1, Name, v11);
        return;
      }
      v24 = a1;
      v25 = 64;
    }
    llvm::raw_ostream::write(v24, v25);
    goto LABEL_31;
  }
  v6 = *((unsigned __int8 *)this + 16);
  if (v6 <= 0x14)
  {
    if (v6 >= 4)
    {
      WriteConstantInternal(a1, (llvm::Type **)this, a3);
      return;
    }
  }
  else
  {
    if (v6 == 23)
    {
      WriteAsOperandInternal(a1, *((const llvm::Metadata **)this + 3), (_anonymous_namespace_::AsmWriterContext *)a3, a4);
      return;
    }
    if (v6 == 24)
    {
      v7 = (_DWORD *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v7 > 3uLL)
      {
        *v7 = 544043873;
        v8 = *((_QWORD *)a1 + 4) + 4;
        *((_QWORD *)a1 + 4) = v8;
      }
      else
      {
        llvm::raw_ostream::write(a1, "asm ", 4uLL);
        v8 = *((_QWORD *)a1 + 4);
      }
      if (*((_BYTE *)this + 80))
      {
        if (*((_QWORD *)a1 + 3) - v8 > 0xA)
        {
          *(_DWORD *)(v8 + 7) = 544498533;
          *(_QWORD *)v8 = *(_QWORD *)"sideeffect ";
          v8 = *((_QWORD *)a1 + 4) + 11;
          *((_QWORD *)a1 + 4) = v8;
        }
        else
        {
          llvm::raw_ostream::write(a1, "sideeffect ", 0xBuLL);
          v8 = *((_QWORD *)a1 + 4);
        }
      }
      if (*((_BYTE *)this + 81))
      {
        if (*((_QWORD *)a1 + 3) - v8 > 0xA)
        {
          *(_DWORD *)(v8 + 7) = 543908705;
          *(_QWORD *)v8 = *(_QWORD *)"alignstack ";
          v8 = *((_QWORD *)a1 + 4) + 11;
          *((_QWORD *)a1 + 4) = v8;
        }
        else
        {
          llvm::raw_ostream::write(a1, "alignstack ", 0xBuLL);
          v8 = *((_QWORD *)a1 + 4);
        }
      }
      if (*((_DWORD *)this + 21) == 1)
      {
        if (*((_QWORD *)a1 + 3) - v8 > 0xC)
        {
          qmemcpy((void *)v8, "inteldialect ", 13);
          v8 = *((_QWORD *)a1 + 4) + 13;
          *((_QWORD *)a1 + 4) = v8;
        }
        else
        {
          llvm::raw_ostream::write(a1, "inteldialect ", 0xDuLL);
          v8 = *((_QWORD *)a1 + 4);
        }
      }
      if (*((_BYTE *)this + 88))
      {
        if (*((_QWORD *)a1 + 3) - v8 > 6)
        {
          *(_DWORD *)(v8 + 3) = 543452777;
          *(_DWORD *)v8 = 1769434741;
          v55 = *((_QWORD *)a1 + 3);
          v8 = *((_QWORD *)a1 + 4) + 7;
          *((_QWORD *)a1 + 4) = v8;
          if (v8 < v55)
            goto LABEL_98;
          goto LABEL_100;
        }
        llvm::raw_ostream::write(a1, "unwind ", 7uLL);
        v8 = *((_QWORD *)a1 + 4);
      }
      if (v8 < *((_QWORD *)a1 + 3))
      {
LABEL_98:
        *((_QWORD *)a1 + 4) = v8 + 1;
        *(_BYTE *)v8 = 34;
LABEL_101:
        v56 = *((char *)this + 47);
        if (v56 >= 0)
          v57 = (const llvm::Value *)((char *)this + 24);
        else
          v57 = (llvm::raw_ostream *)*((_QWORD *)this + 3);
        if (v56 >= 0)
          v58 = *((unsigned __int8 *)this + 47);
        else
          v58 = *((_QWORD *)this + 4);
        llvm::printEscapedString(v57, v58, a1);
        v59 = (_DWORD *)*((_QWORD *)a1 + 4);
        if (*((_QWORD *)a1 + 3) - (_QWORD)v59 > 3uLL)
        {
          *v59 = 572533794;
          *((_QWORD *)a1 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(a1, "\", \"", 4uLL);
        }
        v62 = (llvm::raw_ostream *)*((_QWORD *)this + 6);
        v61 = (uint64_t *)((char *)this + 48);
        v60 = v62;
        v63 = *((char *)v61 + 23);
        if (v63 >= 0)
          v64 = (llvm::raw_ostream *)v61;
        else
          v64 = v60;
        if (v63 >= 0)
          v65 = *((unsigned __int8 *)v61 + 23);
        else
          v65 = v61[1];
        llvm::printEscapedString(v64, v65, a1);
        v66 = (_BYTE *)*((_QWORD *)a1 + 4);
        if ((unint64_t)v66 >= *((_QWORD *)a1 + 3))
        {
          llvm::raw_ostream::write(a1, 34);
        }
        else
        {
          *((_QWORD *)a1 + 4) = v66 + 1;
          *v66 = 34;
        }
        return;
      }
LABEL_100:
      llvm::raw_ostream::write(a1, 34);
      goto LABEL_101;
    }
  }
  v15 = a3[2];
  if (!v15)
  {
    v27.n128_f64[0] = createSlotTracker((ValueImpl *)this);
    if (!v26)
      goto LABEL_79;
    v28 = v26;
    v29 = *((_QWORD *)v26 + 1);
    if (*((unsigned __int8 *)this + 16) > 3u)
    {
      if (v29)
      {
        llvm::SlotTracker::processModule(v26);
        *((_QWORD *)v28 + 1) = 0;
      }
      if (*((_QWORD *)v28 + 2) && !*((_BYTE *)v28 + 24))
        llvm::SlotTracker::processFunction(v28);
      v30 = *((_QWORD *)v28 + 17);
      v31 = *((unsigned int *)v28 + 38);
      if ((_DWORD)v31)
      {
        LODWORD(v32) = (v31 - 1) & ((this >> 4) ^ (this >> 9));
        v33 = v30 + 16 * v32;
        v34 = *(const llvm::Value **)v33;
        if (*(const llvm::Value **)v33 == this)
          goto LABEL_120;
        v35 = 1;
        while (v34 != (const llvm::Value *)-4096)
        {
          v36 = v32 + v35++;
          v32 = v36 & (v31 - 1);
          v34 = *(const llvm::Value **)(v30 + 16 * v32);
          if (v34 == this)
          {
            v33 = v30 + 16 * v32;
            goto LABEL_120;
          }
        }
      }
      v33 = v30 + 16 * v31;
LABEL_120:
      v45 = 37;
      if (v33 != v30 + 16 * v31)
      {
LABEL_121:
        LocalSlot = *(_DWORD *)(v33 + 8);
        goto LABEL_125;
      }
LABEL_124:
      LocalSlot = -1;
LABEL_125:
      (*(void (**)(llvm::SlotTracker *, __n128))(*(_QWORD *)v28 + 8))(v28, v27);
      if (LocalSlot != -1)
        goto LABEL_126;
      goto LABEL_79;
    }
    if (v29)
    {
      llvm::SlotTracker::processModule(v26);
      *((_QWORD *)v28 + 1) = 0;
    }
    if (*((_QWORD *)v28 + 2) && !*((_BYTE *)v28 + 24))
      llvm::SlotTracker::processFunction(v28);
    v49 = *((_QWORD *)v28 + 13);
    v50 = *((unsigned int *)v28 + 30);
    if ((_DWORD)v50)
    {
      LODWORD(v51) = (v50 - 1) & ((this >> 4) ^ (this >> 9));
      v33 = v49 + 16 * v51;
      v52 = *(const llvm::Value **)v33;
      if (*(const llvm::Value **)v33 == this)
        goto LABEL_123;
      v53 = 1;
      while (v52 != (const llvm::Value *)-4096)
      {
        v54 = v51 + v53++;
        v51 = v54 & (v50 - 1);
        v52 = *(const llvm::Value **)(v49 + 16 * v51);
        if (v52 == this)
        {
          v33 = v49 + 16 * v51;
          goto LABEL_123;
        }
      }
    }
    v33 = v49 + 16 * v50;
LABEL_123:
    v45 = 64;
    if (v33 != v49 + 16 * v50)
      goto LABEL_121;
    goto LABEL_124;
  }
  v16 = *((_QWORD *)v15 + 1);
  if (v6 <= 3)
  {
    if (v16)
    {
      llvm::SlotTracker::processModule(a3[2]);
      *((_QWORD *)v15 + 1) = 0;
    }
    if (*((_QWORD *)v15 + 2) && !*((_BYTE *)v15 + 24))
      llvm::SlotTracker::processFunction(v15);
    v37 = *((_QWORD *)v15 + 13);
    v38 = *((unsigned int *)v15 + 30);
    if ((_DWORD)v38)
    {
      LODWORD(v39) = (v38 - 1) & ((this >> 4) ^ (this >> 9));
      v40 = v37 + 16 * v39;
      v41 = *(const llvm::Value **)v40;
      if (*(const llvm::Value **)v40 == this)
      {
LABEL_77:
        if (v40 == v37 + 16 * v38)
          goto LABEL_79;
        LocalSlot = *(_DWORD *)(v40 + 8);
        v45 = 64;
        if (LocalSlot == -1)
          goto LABEL_79;
        goto LABEL_126;
      }
      v42 = 1;
      while (v41 != (const llvm::Value *)-4096)
      {
        v43 = v39 + v42++;
        v39 = v43 & (v38 - 1);
        v41 = *(const llvm::Value **)(v37 + 16 * v39);
        if (v41 == this)
        {
          v40 = v37 + 16 * v39;
          goto LABEL_77;
        }
      }
    }
    v40 = v37 + 16 * v38;
    goto LABEL_77;
  }
  if (v16)
  {
    llvm::SlotTracker::processModule(a3[2]);
    *((_QWORD *)v15 + 1) = 0;
  }
  if (*((_QWORD *)v15 + 2) && !*((_BYTE *)v15 + 24))
    llvm::SlotTracker::processFunction(v15);
  v17 = *((_QWORD *)v15 + 17);
  v18 = *((unsigned int *)v15 + 38);
  if (!(_DWORD)v18)
  {
LABEL_69:
    v20 = v17 + 16 * v18;
    goto LABEL_70;
  }
  LODWORD(v19) = (v18 - 1) & ((this >> 4) ^ (this >> 9));
  v20 = v17 + 16 * v19;
  v21 = *(const llvm::Value **)v20;
  if (*(const llvm::Value **)v20 != this)
  {
    v22 = 1;
    while (v21 != (const llvm::Value *)-4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v18 - 1);
      v21 = *(const llvm::Value **)(v17 + 16 * v19);
      if (v21 == this)
      {
        v20 = v17 + 16 * v19;
        goto LABEL_70;
      }
    }
    goto LABEL_69;
  }
LABEL_70:
  if (v20 != v17 + 16 * v18)
  {
    LocalSlot = *(_DWORD *)(v20 + 8);
    if (LocalSlot != -1)
    {
      v45 = 37;
      goto LABEL_126;
    }
  }
  createSlotTracker((ValueImpl *)this);
  if (!v46
    || (v47 = v46,
        LocalSlot = llvm::SlotTracker::getLocalSlot(v46, this),
        (*(void (**)(llvm::SlotTracker *))(*(_QWORD *)v47 + 8))(v47),
        v45 = 37,
        LocalSlot == -1))
  {
LABEL_79:
    v48 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v48 > 7uLL)
    {
      *v48 = 0x3E6665726461623CLL;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "<badref>", 8uLL);
    }
    return;
  }
LABEL_126:
  v67 = (char *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v67 >= *((_QWORD *)a1 + 3))
  {
    v69 = llvm::raw_ostream::write(a1, v45);
    v68 = LocalSlot;
  }
  else
  {
    *((_QWORD *)a1 + 4) = v67 + 1;
    *v67 = v45;
    v68 = LocalSlot;
    v69 = a1;
  }
  llvm::raw_ostream::operator<<(v69, v68);
}

void `anonymous namespace'::AssemblyWriter::writeAttributeSet(llvm::raw_ostream **this, const llvm::AttributeSet *a2)
{
  llvm::Attribute *v4;
  uint64_t v5;
  llvm::Attribute *v6;
  BOOL isTypeAttribute;
  llvm::raw_ostream *v8;
  int KindAsEnum;
  size_t v10;
  char *NameFromAttrKind;
  size_t v12;
  void *v13;
  const char *v14;
  size_t v15;
  llvm::Attribute *v16;
  uint64_t ValueAsInt;
  Type *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  BOOL v25;
  llvm::raw_ostream *v26;
  const char *p_p;
  size_t v28;
  BOOL v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  Type *v36;
  llvm::raw_ostream *v37;
  _BYTE *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  void *__p;
  size_t v42;
  unsigned __int8 v43;

  v4 = (llvm::Attribute *)llvm::AttributeSet::begin(a2);
  v5 = llvm::AttributeSet::end(a2);
  if (v4 == (llvm::Attribute *)v5)
    return;
  v6 = (llvm::Attribute *)v5;
  isTypeAttribute = llvm::Attribute::isTypeAttribute(v4);
  v8 = *this;
  if (isTypeAttribute)
  {
    KindAsEnum = llvm::Attribute::getKindAsEnum(v4);
    NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(KindAsEnum);
    v12 = v10;
    v13 = (void *)*((_QWORD *)v8 + 4);
    if (v10 <= *((_QWORD *)v8 + 3) - (_QWORD)v13)
    {
      if (v10)
      {
        memcpy(v13, NameFromAttrKind, v10);
        *((_QWORD *)v8 + 4) += v12;
      }
    }
    else
    {
      llvm::raw_ostream::write(v8, NameFromAttrKind, v10);
    }
    ValueAsInt = llvm::Attribute::getValueAsInt(v4);
    if (ValueAsInt)
    {
      v18 = (Type *)ValueAsInt;
      v19 = *this;
      v20 = (_BYTE *)*((_QWORD *)*this + 4);
      if ((unint64_t)v20 >= *((_QWORD *)*this + 3))
      {
        llvm::raw_ostream::write(v19, 40);
      }
      else
      {
        *((_QWORD *)v19 + 4) = v20 + 1;
        *v20 = 40;
      }
      v21 = *this;
      v22 = (_BYTE *)*((_QWORD *)*this + 4);
      if ((unint64_t)v22 < *((_QWORD *)*this + 3))
      {
        *((_QWORD *)v21 + 4) = v22 + 1;
        *v22 = 41;
        goto LABEL_22;
      }
      llvm::raw_ostream::write(v21, 41);
      v16 = (llvm::Attribute *)((char *)v4 + 8);
      if (v16 == v6)
        return;
      while (1)
      {
LABEL_26:
        v23 = *this;
        v24 = (_BYTE *)*((_QWORD *)*this + 4);
        if ((unint64_t)v24 >= *((_QWORD *)*this + 3))
        {
          llvm::raw_ostream::write(v23, 32);
          v29 = llvm::Attribute::isTypeAttribute(v16);
          v26 = *this;
          if (v29)
          {
LABEL_37:
            v30 = llvm::Attribute::getKindAsEnum(v16);
            v32 = llvm::Attribute::getNameFromAttrKind(v30);
            v33 = v31;
            v34 = (void *)*((_QWORD *)v26 + 4);
            if (v31 <= *((_QWORD *)v26 + 3) - (_QWORD)v34)
            {
              if (v31)
              {
                memcpy(v34, v32, v31);
                *((_QWORD *)v26 + 4) += v33;
              }
            }
            else
            {
              llvm::raw_ostream::write(v26, v32, v31);
            }
            v35 = llvm::Attribute::getValueAsInt(v16);
            if (v35)
            {
              v36 = (Type *)v35;
              v37 = *this;
              v38 = (_BYTE *)*((_QWORD *)*this + 4);
              if ((unint64_t)v38 >= *((_QWORD *)*this + 3))
              {
                llvm::raw_ostream::write(v37, 40);
              }
              else
              {
                *((_QWORD *)v37 + 4) = v38 + 1;
                *v38 = 40;
              }
              v39 = *this;
              v40 = (_BYTE *)*((_QWORD *)*this + 4);
              if ((unint64_t)v40 < *((_QWORD *)*this + 3))
              {
                *((_QWORD *)v39 + 4) = v40 + 1;
                *v40 = 41;
              }
              else
              {
                llvm::raw_ostream::write(v39, 41);
              }
            }
            goto LABEL_25;
          }
        }
        else
        {
          *((_QWORD *)v23 + 4) = v24 + 1;
          *v24 = 32;
          v25 = llvm::Attribute::isTypeAttribute(v16);
          v26 = *this;
          if (v25)
            goto LABEL_37;
        }
        llvm::Attribute::getAsString(v16, 0, (uint64_t)&__p);
        if ((v43 & 0x80u) == 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        if ((v43 & 0x80u) == 0)
          v28 = v43;
        else
          v28 = v42;
        llvm::raw_ostream::write(v26, p_p, v28);
        if ((char)v43 < 0)
          operator delete(__p);
LABEL_25:
        v16 = (llvm::Attribute *)((char *)v16 + 8);
        if (v16 == v6)
          return;
      }
    }
  }
  else
  {
    llvm::Attribute::getAsString(v4, 0, (uint64_t)&__p);
    if ((v43 & 0x80u) == 0)
      v14 = (const char *)&__p;
    else
      v14 = (const char *)__p;
    if ((v43 & 0x80u) == 0)
      v15 = v43;
    else
      v15 = v42;
    llvm::raw_ostream::write(v8, v14, v15);
    if ((char)v43 < 0)
    {
      operator delete(__p);
      v16 = (llvm::Attribute *)((char *)v4 + 8);
      if (v16 != v6)
        goto LABEL_26;
      return;
    }
  }
LABEL_22:
  v16 = (llvm::Attribute *)((char *)v4 + 8);
  if (v16 != v6)
    goto LABEL_26;
}

llvm::raw_ostream *maybePrintComdat(llvm::raw_ostream *this, const llvm::GlobalObject *a2)
{
  llvm::Comdat *v2;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  _DWORD *v6;
  const char *Name;
  size_t v8;
  size_t v9;
  uint64_t v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  _BYTE *v16;

  v2 = (llvm::Comdat *)*((_QWORD *)a2 + 6);
  if (!v2)
    return this;
  v4 = this;
  if (*((_BYTE *)a2 + 16) == 3)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v5 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 44);
      v6 = (_DWORD *)*((_QWORD *)v4 + 4);
      if (*((_QWORD *)v4 + 3) - (_QWORD)v6 <= 6uLL)
        goto LABEL_6;
LABEL_8:
      *(_DWORD *)((char *)v6 + 3) = 1952539757;
      *v6 = 1836016416;
      *((_QWORD *)v4 + 4) += 7;
      goto LABEL_9;
    }
    *((_QWORD *)this + 4) = v5 + 1;
    *v5 = 44;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v6 > 6uLL)
    goto LABEL_8;
LABEL_6:
  llvm::raw_ostream::write(v4, " comdat", 7uLL);
LABEL_9:
  Name = llvm::Value::getName(a2);
  v9 = v8;
  this = (llvm::raw_ostream *)llvm::Comdat::getName(v2);
  if (v9 != v10 || v9 && (this = (llvm::raw_ostream *)memcmp(Name, this, v9), (_DWORD)this))
  {
    v11 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 40);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11 + 1;
      *v11 = 40;
    }
    v12 = (llvm::raw_ostream *)llvm::Comdat::getName(v2);
    v14 = v13;
    v15 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 36);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v15 + 1;
      *v15 = 36;
    }
    this = llvm::printLLVMNameWithoutPrefix(v4, v12, v14);
    v16 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v4 + 3))
    {
      return llvm::raw_ostream::write(v4, 41);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v16 + 1;
      *v16 = 41;
    }
  }
  return this;
}

void `anonymous namespace'::AssemblyWriter::writeOperand(llvm::raw_ostream **this, Type **a2, int a3, BOOL a4)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  void *v9;
  _anonymous_namespace_::TypePrinting *v10;
  llvm::raw_ostream *v11;
  _anonymous_namespace_::TypePrinting *v12;
  _anonymous_namespace_::TypePrinting *v13[4];

  if (a2)
  {
    if (a3)
    {
      v6 = *this;
      v7 = (_BYTE *)*((_QWORD *)*this + 4);
      if ((unint64_t)v7 >= *((_QWORD *)*this + 3))
      {
        llvm::raw_ostream::write(v6, 32);
      }
      else
      {
        *((_QWORD *)v6 + 4) = v7 + 1;
        *v7 = 32;
      }
    }
    v10 = this[4];
    v13[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
    v13[1] = (_anonymous_namespace_::TypePrinting *)(this + 5);
    v11 = *this;
    v12 = this[1];
    v13[2] = v10;
    v13[3] = v12;
    WriteAsOperandInternal(v11, (const llvm::Value *)a2, v13, a4);
  }
  else
  {
    v8 = *this;
    v9 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v9 > 0xEuLL)
    {
      qmemcpy(v9, "<null operand!>", 15);
      *((_QWORD *)v8 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v8, "<null operand!>", 0xFuLL);
    }
  }
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::printUseLists(llvm::raw_ostream *this, const llvm::Function *a2, uint64_t a3, BOOL a4)
{
  llvm::raw_ostream **v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  const llvm::Function *v9;
  int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  unint64_t v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _DWORD *v25;
  llvm::raw_ostream *v26;
  _DWORD *v27;
  const llvm::Value *v28;
  llvm::raw_ostream *v29;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  llvm::raw_ostream *v34;
  void *v35;
  llvm::raw_ostream *v36;
  llvm::raw_ostream *v37;
  llvm::raw_ostream *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::raw_ostream *v42;
  _WORD *v43;
  uint64_t (**v44)(_anonymous_namespace_::AsmWriterContext *__hidden, const llvm::Metadata *);
  _QWORD *v45;
  llvm::raw_ostream *v46;
  llvm::raw_ostream *v47;

  v4 = (llvm::raw_ostream **)this;
  v5 = *((_QWORD *)this + 35);
  v6 = *((_DWORD *)this + 74);
  if (v6)
  {
    v7 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = v5 + 48 * v7;
    v9 = *(const llvm::Function **)v8;
    if (*(const llvm::Function **)v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != (const llvm::Function *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v8 = v5 + 48 * v7;
      v9 = *(const llvm::Function **)v8;
      if (*(const llvm::Function **)v8 == a2)
        goto LABEL_8;
    }
  }
  v8 = v5 + 48 * v6;
LABEL_8:
  if (v8 == v5 + 48 * v6)
    return this;
  this = *(llvm::raw_ostream **)this;
  v12 = (void *)*((_QWORD *)*v4 + 4);
  if (*((_QWORD *)*v4 + 3) - (_QWORD)v12 > 0x1AuLL)
  {
    qmemcpy(v12, "\n; uselistorder directives\n", 27);
    *((_QWORD *)this + 4) += 27;
    v13 = *(unsigned int *)(v8 + 40);
    if (!(_DWORD)v13)
      return this;
    goto LABEL_13;
  }
  this = llvm::raw_ostream::write(this, "\n; uselistorder directives\n", 0x1BuLL);
  v13 = *(unsigned int *)(v8 + 40);
  if ((_DWORD)v13)
  {
LABEL_13:
    v14 = *(uint64_t **)(v8 + 32);
    v15 = &v14[4 * v13];
    while (1)
    {
      v16 = *v14;
      v17 = *v4;
      v18 = *((_QWORD *)*v4 + 4);
      v19 = *((_QWORD *)*v4 + 3) - v18;
      if (*((_QWORD *)v4[4] + 2))
      {
        if (v19 > 1)
        {
          *(_WORD *)v18 = 8224;
          *((_QWORD *)v17 + 4) += 2;
          v20 = *v4;
          v21 = *((_QWORD *)*v4 + 4);
          if ((unint64_t)(*((_QWORD *)*v4 + 3) - v21) > 0xB)
          {
LABEL_18:
            *(_DWORD *)(v21 + 8) = 1919247474;
            *(_QWORD *)v21 = *(_QWORD *)"uselistorder";
            *((_QWORD *)v20 + 4) += 12;
            v22 = *v4;
            v23 = (_BYTE *)*((_QWORD *)*v4 + 4);
            if (*((_BYTE **)*v4 + 3) != v23)
              goto LABEL_23;
            goto LABEL_26;
          }
        }
        else
        {
          llvm::raw_ostream::write(v17, "  ", 2uLL);
          v20 = *v4;
          v21 = *((_QWORD *)*v4 + 4);
          if ((unint64_t)(*((_QWORD *)*v4 + 3) - v21) > 0xB)
            goto LABEL_18;
        }
        llvm::raw_ostream::write(v20, "uselistorder", 0xCuLL);
        v22 = *v4;
        v23 = (_BYTE *)*((_QWORD *)*v4 + 4);
        if (*((_BYTE **)*v4 + 3) == v23)
          goto LABEL_26;
LABEL_23:
        *v23 = 32;
        ++*((_QWORD *)v22 + 4);
        goto LABEL_27;
      }
      if (v19 > 0xB)
      {
        *(_DWORD *)(v18 + 8) = 1919247474;
        *(_QWORD *)v18 = *(_QWORD *)"uselistorder";
        *((_QWORD *)v17 + 4) += 12;
        if (*(_BYTE *)(v16 + 16) != 22)
        {
LABEL_22:
          v22 = *v4;
          v23 = (_BYTE *)*((_QWORD *)*v4 + 4);
          if (*((_BYTE **)*v4 + 3) != v23)
            goto LABEL_23;
LABEL_26:
          llvm::raw_ostream::write(v22, " ", 1uLL);
LABEL_27:
          v24 = *v4;
          v25 = (_DWORD *)*((_QWORD *)*v4 + 4);
          if (*((_QWORD *)*v4 + 3) - (_QWORD)v25 > 3uLL)
            goto LABEL_41;
          goto LABEL_28;
        }
      }
      else
      {
        llvm::raw_ostream::write(v17, "uselistorder", 0xCuLL);
        if (*(_BYTE *)(v16 + 16) != 22)
          goto LABEL_22;
      }
      v26 = *v4;
      v27 = (_DWORD *)*((_QWORD *)*v4 + 4);
      if (*((_QWORD *)*v4 + 3) - (_QWORD)v27 > 3uLL)
      {
        *v27 = 543318623;
        *((_QWORD *)v26 + 4) += 4;
        v28 = *(const llvm::Value **)(v16 + 64);
        if (v28)
        {
LABEL_32:
          v29 = v4[4];
          v44 = &off_1E0E15E00;
          v45 = v4 + 5;
          v30 = *v4;
          v31 = v4[1];
          v46 = v29;
          v47 = v31;
          WriteAsOperandInternal(v30, v28, (_anonymous_namespace_::TypePrinting **)&v44, a4);
          v32 = *v4;
          v33 = (_WORD *)*((_QWORD *)*v4 + 4);
          if (*((_QWORD *)*v4 + 3) - (_QWORD)v33 > 1uLL)
            goto LABEL_37;
          goto LABEL_39;
        }
      }
      else
      {
        llvm::raw_ostream::write(v26, "_bb ", 4uLL);
        v28 = *(const llvm::Value **)(v16 + 64);
        if (v28)
          goto LABEL_32;
      }
      v34 = *v4;
      v35 = (void *)*((_QWORD *)*v4 + 4);
      if (*((_QWORD *)*v4 + 3) - (_QWORD)v35 > 0xEuLL)
      {
        qmemcpy(v35, "<null operand!>", 15);
        *((_QWORD *)v34 + 4) += 15;
        v32 = *v4;
        v33 = (_WORD *)*((_QWORD *)*v4 + 4);
        if (*((_QWORD *)*v4 + 3) - (_QWORD)v33 > 1uLL)
        {
LABEL_37:
          *v33 = 8236;
          *((_QWORD *)v32 + 4) += 2;
          goto LABEL_40;
        }
      }
      else
      {
        llvm::raw_ostream::write(v34, "<null operand!>", 0xFuLL);
        v32 = *v4;
        v33 = (_WORD *)*((_QWORD *)*v4 + 4);
        if (*((_QWORD *)*v4 + 3) - (_QWORD)v33 > 1uLL)
          goto LABEL_37;
      }
LABEL_39:
      llvm::raw_ostream::write(v32, ", ", 2uLL);
LABEL_40:
      v36 = v4[4];
      v44 = &off_1E0E15E00;
      v45 = v4 + 5;
      v37 = *v4;
      v38 = v4[1];
      v46 = v36;
      v47 = v38;
      WriteAsOperandInternal(v37, (const llvm::Value *)v16, (_anonymous_namespace_::TypePrinting **)&v44, a4);
      v24 = *v4;
      v25 = (_DWORD *)*((_QWORD *)*v4 + 4);
      if (*((_QWORD *)*v4 + 3) - (_QWORD)v25 > 3uLL)
      {
LABEL_41:
        *v25 = 544940076;
        *((_QWORD *)v24 + 4) += 4;
        goto LABEL_42;
      }
LABEL_28:
      llvm::raw_ostream::write(v24, ", { ", 4uLL);
LABEL_42:
      llvm::raw_ostream::operator<<(*v4, *(unsigned int *)v14[1]);
      v39 = (unint64_t)(v14[2] - v14[1]) >> 2;
      if ((_DWORD)v39 != 1)
      {
        v41 = 1;
        do
        {
          v42 = *v4;
          v43 = (_WORD *)*((_QWORD *)*v4 + 4);
          if (*((_QWORD *)*v4 + 3) - (_QWORD)v43 > 1uLL)
          {
            *v43 = 8236;
            *((_QWORD *)v42 + 4) += 2;
          }
          else
          {
            v42 = llvm::raw_ostream::write(v42, ", ", 2uLL);
          }
          llvm::raw_ostream::operator<<(v42, *(unsigned int *)(v14[1] + 4 * v41++));
        }
        while ((_DWORD)v39 != (_DWORD)v41);
      }
      this = *v4;
      v40 = *((_QWORD *)*v4 + 4);
      if ((unint64_t)(*((_QWORD *)*v4 + 3) - v40) > 2)
      {
        *(_BYTE *)(v40 + 2) = 10;
        *(_WORD *)v40 = 32032;
        *((_QWORD *)this + 4) += 3;
        v14 += 4;
        if (v14 == v15)
          return this;
      }
      else
      {
        this = llvm::raw_ostream::write(this, " }\n", 3uLL);
        v14 += 4;
        if (v14 == v15)
          return this;
      }
    }
  }
  return this;
}

llvm::raw_ostream *printMetadataIdentifier(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  int v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  void *v8;
  _BYTE *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  int v15;
  __darwin_ct_rune_t v16;
  unint64_t v17;
  char *v19;
  char v20;
  _BYTE *v21;
  char v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  char v26;
  char *v27;
  char *v28;

  if (!a2)
  {
    v8 = (void *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v8 <= 0xCuLL)
      return llvm::raw_ostream::write(a3, "<empty name> ", 0xDuLL);
    qmemcpy(v8, "<empty name> ", 13);
    *((_QWORD *)a3 + 4) += 13;
    return result;
  }
  v4 = a2;
  v5 = result;
  v6 = *(char *)result;
  v7 = MEMORY[0x1E0C80978];
  if (v6 < 0)
  {
    result = (llvm::raw_ostream *)__maskrune(*(unsigned __int8 *)result, 0x100uLL);
    LOBYTE(v6) = *v5;
    if ((_DWORD)result)
      goto LABEL_12;
  }
  else
  {
    result = (llvm::raw_ostream *)(*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)result + 60) & 0x100);
    if ((_DWORD)result)
      goto LABEL_12;
  }
  if (v6 - 36 > 0x3B || ((1 << (v6 - 36)) & 0x800000000000601) == 0)
  {
    v25 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v25 >= *((_QWORD *)a3 + 3))
    {
      result = llvm::raw_ostream::write(a3, 92);
    }
    else
    {
      *((_QWORD *)a3 + 4) = v25 + 1;
      *v25 = 92;
      result = a3;
    }
    v26 = llvm::hexdigit(unsigned int,BOOL)::LUT[(char)*v5 >> 4];
    v27 = (char *)*((_QWORD *)result + 4);
    if ((unint64_t)v27 >= *((_QWORD *)result + 3))
    {
      result = llvm::raw_ostream::write(result, v26);
      v12 = llvm::hexdigit(unsigned int,BOOL)::LUT[*v5 & 0xF];
      v28 = (char *)*((_QWORD *)result + 4);
      if ((unint64_t)v28 >= *((_QWORD *)result + 3))
        goto LABEL_16;
    }
    else
    {
      *((_QWORD *)result + 4) = v27 + 1;
      *v27 = v26;
      v12 = llvm::hexdigit(unsigned int,BOOL)::LUT[*v5 & 0xF];
      v28 = (char *)*((_QWORD *)result + 4);
      if ((unint64_t)v28 >= *((_QWORD *)result + 3))
        goto LABEL_16;
    }
    *((_QWORD *)result + 4) = v28 + 1;
    *v28 = v12;
    v11 = v4 - 1;
    if (v11)
      goto LABEL_17;
    return result;
  }
LABEL_12:
  v10 = (_BYTE *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v10 < *((_QWORD *)a3 + 3))
  {
    *((_QWORD *)a3 + 4) = v10 + 1;
    *v10 = v6;
    v11 = v4 - 1;
    if (v11)
      goto LABEL_17;
    return result;
  }
  v12 = v6;
  result = a3;
LABEL_16:
  result = llvm::raw_ostream::write(result, v12);
  v11 = v4 - 1;
  if (v11)
  {
LABEL_17:
    v13 = v5 + 1;
    do
    {
      v15 = *v13++;
      v14 = v15;
      v16 = v15;
      v17 = v15;
      if (v15 < 0)
      {
        result = (llvm::raw_ostream *)__maskrune(v16, 0x500uLL);
        if ((_DWORD)result)
          goto LABEL_28;
      }
      else
      {
        result = (llvm::raw_ostream *)(*(_DWORD *)(v7 + 4 * v17 + 60) & 0x500);
        if ((_DWORD)result)
          goto LABEL_28;
      }
      if ((v16 - 36) > 0x3B || ((1 << (v16 - 36)) & 0x800000000000601) == 0)
      {
        v21 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v21 >= *((_QWORD *)a3 + 3))
        {
          result = llvm::raw_ostream::write(a3, 92);
        }
        else
        {
          *((_QWORD *)a3 + 4) = v21 + 1;
          *v21 = 92;
          result = a3;
        }
        v22 = llvm::hexdigit(unsigned int,BOOL)::LUT[v17 >> 4];
        v23 = (char *)*((_QWORD *)result + 4);
        if ((unint64_t)v23 >= *((_QWORD *)result + 3))
        {
          result = llvm::raw_ostream::write(result, v22);
        }
        else
        {
          *((_QWORD *)result + 4) = v23 + 1;
          *v23 = v22;
        }
        v20 = llvm::hexdigit(unsigned int,BOOL)::LUT[v17 & 0xF];
        v24 = (char *)*((_QWORD *)result + 4);
        if ((unint64_t)v24 < *((_QWORD *)result + 3))
        {
          *((_QWORD *)result + 4) = v24 + 1;
          *v24 = v20;
          goto LABEL_19;
        }
        goto LABEL_30;
      }
LABEL_28:
      v19 = (char *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v19 >= *((_QWORD *)a3 + 3))
      {
        v20 = v14;
        result = a3;
LABEL_30:
        result = llvm::raw_ostream::write(result, v20);
        goto LABEL_19;
      }
      *((_QWORD *)a3 + 4) = v19 + 1;
      *v19 = v14;
LABEL_19:
      --v11;
    }
    while (v11);
  }
  return result;
}

void WriteAsOperandInternal(llvm::raw_ostream *a1, const llvm::Metadata *a2, _anonymous_namespace_::TypePrinting **a3, BOOL a4)
{
  llvm::raw_ostream *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_::TypePrinting *v10;
  char *v11;
  int MetadataSlot;
  int v13;
  _BYTE *v14;
  const llvm::Metadata **v15;
  BOOL v16;
  _BYTE *v17;
  BOOL v18;
  _BYTE *v19;
  const llvm::Metadata **v20;
  uint64_t v21;
  const llvm::Metadata *v22;
  _WORD *v23;
  char *v24;
  _anonymous_namespace_::TypePrinting *v25;
  _WORD *v26;
  _BYTE *v27;
  llvm::raw_ostream *String;
  uint64_t v29;
  _BYTE *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;

  v6 = a1;
  v7 = *(unsigned __int8 *)a2;
  if (v7 == 4)
  {
    v8 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v8) > 0xA)
    {
      *(_DWORD *)(v8 + 7) = 678720361;
      *(_QWORD *)v8 = *(_QWORD *)"!DIArgList(";
      *((_QWORD *)a1 + 4) += 11;
      v9 = *((unsigned int *)a2 + 34);
      if (!(_DWORD)v9)
        goto LABEL_14;
    }
    else
    {
      llvm::raw_ostream::write(a1, "!DIArgList(", 0xBuLL);
      v9 = *((unsigned int *)a2 + 34);
      if (!(_DWORD)v9)
      {
LABEL_14:
        v17 = (_BYTE *)*((_QWORD *)v6 + 4);
        if (*((_BYTE **)v6 + 3) == v17)
        {
          llvm::raw_ostream::write(v6, ")", 1uLL);
        }
        else
        {
          *v17 = 41;
          ++*((_QWORD *)v6 + 4);
        }
        return;
      }
    }
    v15 = (const llvm::Metadata **)*((_QWORD *)a2 + 16);
    WriteAsOperandInternal(v6, *v15, (_anonymous_namespace_::AsmWriterContext *)a3, a4);
    if ((_DWORD)v9 != 1)
    {
      v20 = v15 + 1;
      v21 = 8 * v9 - 8;
      do
      {
        v22 = *v20;
        v23 = (_WORD *)*((_QWORD *)v6 + 4);
        if (*((_QWORD *)v6 + 3) - (_QWORD)v23 > 1uLL)
        {
          *v23 = 8236;
          *((_QWORD *)v6 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v6, ", ", 2uLL);
        }
        WriteAsOperandInternal(v6, v22, (_anonymous_namespace_::AsmWriterContext *)a3, v16);
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    goto LABEL_14;
  }
  if (v7 == 7)
  {
    writeDIExpression(a1, (uint64_t **)a2, (_anonymous_namespace_::AsmWriterContext *)a3);
    return;
  }
  if ((v7 - 5) <= 0x1E)
  {
    v10 = a3[2];
    if (v10)
    {
      v11 = 0;
      MetadataSlot = (*(uint64_t (**)(_anonymous_namespace_::TypePrinting *, const llvm::Metadata *))(*(_QWORD *)v10 + 32))(a3[2], a2);
      if (MetadataSlot != -1)
      {
LABEL_10:
        v13 = MetadataSlot;
        v14 = (_BYTE *)*((_QWORD *)v6 + 4);
        if ((unint64_t)v14 >= *((_QWORD *)v6 + 3))
        {
          v6 = llvm::raw_ostream::write(v6, 33);
        }
        else
        {
          *((_QWORD *)v6 + 4) = v14 + 1;
          *v14 = 33;
        }
        llvm::raw_ostream::operator<<(v6, v13);
LABEL_33:
        a3[2] = v10;
        if (v11)
          (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
        return;
      }
    }
    else
    {
      v24 = (char *)operator new(0x148uLL);
      v25 = a3[3];
      *(_QWORD *)v24 = off_1E0E20020;
      *((_QWORD *)v24 + 1) = v25;
      *((_QWORD *)v24 + 2) = 0;
      *((_WORD *)v24 + 12) = 0;
      *((_QWORD *)v24 + 7) = 0;
      *((_DWORD *)v24 + 32) = 0;
      *((_QWORD *)v24 + 17) = 0;
      *((_QWORD *)v24 + 18) = 0;
      *((_DWORD *)v24 + 38) = 0;
      *((_DWORD *)v24 + 40) = 0;
      *((_QWORD *)v24 + 21) = 0;
      *((_QWORD *)v24 + 22) = 0;
      *((_DWORD *)v24 + 46) = 0;
      *((_DWORD *)v24 + 48) = 0;
      *((_QWORD *)v24 + 25) = 0;
      *((_QWORD *)v24 + 26) = 0;
      *((_DWORD *)v24 + 54) = 0;
      *((_DWORD *)v24 + 56) = 0;
      *((_QWORD *)v24 + 29) = 0;
      *((_QWORD *)v24 + 30) = 0;
      *((_DWORD *)v24 + 62) = 0;
      *((_DWORD *)v24 + 30) = 0;
      *(_OWORD *)(v24 + 104) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      *(_QWORD *)(v24 + 252) = 16;
      *((_QWORD *)v24 + 33) = 0;
      *((_QWORD *)v24 + 34) = 0;
      *((_DWORD *)v24 + 70) = 0;
      *((_DWORD *)v24 + 72) = 0;
      *((_QWORD *)v24 + 37) = 0;
      *((_QWORD *)v24 + 38) = 0;
      *((_DWORD *)v24 + 78) = 0;
      *(_QWORD *)(v24 + 316) = 16;
      v11 = v24;
      a3[2] = (_anonymous_namespace_::TypePrinting *)v24;
      MetadataSlot = llvm::SlotTracker::getMetadataSlot((llvm::SlotTracker *)v24, a2);
      if (MetadataSlot != -1)
        goto LABEL_10;
    }
    if (*(_BYTE *)a2 == 6)
    {
      writeDILocation(v6, (uint64_t)a2, (_anonymous_namespace_::AsmWriterContext *)a3);
    }
    else
    {
      v27 = (_BYTE *)*((_QWORD *)v6 + 4);
      if (*((_BYTE **)v6 + 3) == v27)
      {
        v6 = llvm::raw_ostream::write(v6, "<", 1uLL);
      }
      else
      {
        *v27 = 60;
        ++*((_QWORD *)v6 + 4);
      }
      v31 = llvm::raw_ostream::operator<<(v6, (unint64_t)a2);
      v32 = (_BYTE *)*((_QWORD *)v31 + 4);
      if (*((_BYTE **)v31 + 3) == v32)
      {
        llvm::raw_ostream::write(v31, ">", 1uLL);
      }
      else
      {
        *v32 = 62;
        ++*((_QWORD *)v31 + 4);
      }
    }
    goto LABEL_33;
  }
  if (*(_BYTE *)a2)
  {
    v19 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v19 >= *((_QWORD *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v19 + 1;
      *v19 = 32;
    }
    WriteAsOperandInternal(v6, *((const llvm::Value **)a2 + 16), a3, v18);
  }
  else
  {
    v26 = (_WORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v26 > 1uLL)
    {
      *v26 = 8737;
      *((_QWORD *)a1 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a1, "!\"", 2uLL);
    }
    String = (llvm::raw_ostream *)llvm::MDString::getString(a2);
    llvm::printEscapedString(String, v29, v6);
    v30 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v30 >= *((_QWORD *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 34);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v30 + 1;
      *v30 = 34;
    }
  }
}

uint64_t writeDIExpression(llvm::raw_ostream *this, uint64_t **a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  void *v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _WORD *v13;
  llvm::raw_ostream *v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  size_t v19;
  const char *v20;
  size_t v21;
  llvm::raw_ostream *v22;
  _WORD *v23;
  void *v24;
  _WORD *v25;
  llvm::raw_ostream *v26;
  int Size;
  unint64_t v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  _WORD *v31;
  _WORD *v32;
  llvm::raw_ostream *v33;
  size_t v34;
  const char *v35;
  size_t v36;
  void *v37;
  _BYTE *v38;
  uint64_t *v39;

  v5 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0xDuLL)
  {
    qmemcpy(v5, "!DIExpression(", 14);
    *((_QWORD *)this + 4) += 14;
    result = llvm::DIExpression::isValid((llvm::DIExpression *)a2);
    v8 = a2[2];
    v7 = a2[3];
    v9 = (char *)v7 - (char *)v8;
    if (!(_DWORD)result)
      goto LABEL_3;
    goto LABEL_11;
  }
  llvm::raw_ostream::write(this, "!DIExpression(", 0xEuLL);
  result = llvm::DIExpression::isValid((llvm::DIExpression *)a2);
  v8 = a2[2];
  v7 = a2[3];
  v9 = (char *)v7 - (char *)v8;
  if ((_DWORD)result)
  {
LABEL_11:
    v39 = v8;
    if (v7 == v8)
      goto LABEL_39;
    v16 = 0;
    v17 = (uint64_t *)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFF8));
    while (1)
    {
      v20 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)*(unsigned int *)v8);
      v21 = v19;
      v22 = this;
      if ((v16 & 1) == 0)
        goto LABEL_18;
      v23 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v23 <= 1uLL)
        break;
      *v23 = 8236;
      *((_QWORD *)this + 4) += 2;
      v22 = this;
      v24 = (void *)*((_QWORD *)this + 4);
      if (v19 <= *((_QWORD *)this + 3) - (_QWORD)v24)
      {
LABEL_21:
        if (v21)
        {
          memcpy(v24, v20, v21);
          *((_QWORD *)v22 + 4) += v21;
        }
        goto LABEL_23;
      }
LABEL_19:
      llvm::raw_ostream::write(v22, v20, v21);
LABEL_23:
      if (*v39 == 4097)
      {
        v25 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v25 > 1uLL)
        {
          *v25 = 8236;
          *((_QWORD *)this + 4) += 2;
          v26 = this;
        }
        else
        {
          v26 = llvm::raw_ostream::write(this, ", ", 2uLL);
        }
        llvm::raw_ostream::operator<<(v26, v39[1]);
        v32 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v32 > 1uLL)
        {
          *v32 = 8236;
          *((_QWORD *)this + 4) += 2;
          v33 = this;
        }
        else
        {
          v33 = llvm::raw_ostream::write(this, ", ", 2uLL);
        }
        v35 = llvm::dwarf::AttributeEncodingString((llvm::dwarf *)*((unsigned int *)v39 + 4));
        v36 = v34;
        v37 = (void *)*((_QWORD *)v33 + 4);
        if (v34 > *((_QWORD *)v33 + 3) - (_QWORD)v37)
        {
          llvm::raw_ostream::write(v33, v35, v34);
        }
        else if (v34)
        {
          memcpy(v37, v35, v34);
          *((_QWORD *)v33 + 4) += v36;
        }
      }
      else
      {
        Size = llvm::DIExpression::ExprOperand::getSize(&v39);
        if (Size != 1)
        {
          v28 = 0;
          v29 = 8 * (Size - 1);
          do
          {
            v31 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v31 > 1uLL)
            {
              *v31 = 8236;
              *((_QWORD *)this + 4) += 2;
              v30 = this;
            }
            else
            {
              v30 = llvm::raw_ostream::write(this, ", ", 2uLL);
            }
            llvm::raw_ostream::operator<<(v30, v39[v28 / 8 + 1]);
            v28 += 8;
          }
          while (v29 != v28);
        }
      }
      v18 = v39;
      result = llvm::DIExpression::ExprOperand::getSize(&v39);
      v8 = &v18[result];
      v39 = v8;
      v16 = 1;
      if (v8 == v17)
        goto LABEL_39;
    }
    v22 = llvm::raw_ostream::write(this, ", ", 2uLL);
LABEL_18:
    v24 = (void *)*((_QWORD *)v22 + 4);
    if (v21 <= *((_QWORD *)v22 + 3) - (_QWORD)v24)
      goto LABEL_21;
    goto LABEL_19;
  }
LABEL_3:
  if (v7 != v8)
  {
    result = (uint64_t)llvm::raw_ostream::operator<<(this, *v8);
    if (v9 != 8)
    {
      v10 = (unint64_t *)(v8 + 1);
      v11 = 8 * (v9 >> 3) - 8;
      do
      {
        while (1)
        {
          v13 = (_WORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 1uLL)
            break;
          *v13 = 8236;
          *((_QWORD *)this + 4) += 2;
          v12 = *v10++;
          result = (uint64_t)llvm::raw_ostream::operator<<(this, v12);
          v11 -= 8;
          if (!v11)
            goto LABEL_39;
        }
        v14 = llvm::raw_ostream::write(this, ", ", 2uLL);
        v15 = *v10++;
        result = (uint64_t)llvm::raw_ostream::operator<<(v14, v15);
        v11 -= 8;
      }
      while (v11);
    }
  }
LABEL_39:
  v38 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v38)
    return (uint64_t)llvm::raw_ostream::write(this, ")", 1uLL);
  *v38 = 41;
  ++*((_QWORD *)this + 4);
  return result;
}

llvm::raw_ostream *writeDILocation(llvm::raw_ostream *this, uint64_t a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t *v9;
  const llvm::Metadata *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  _WORD *v14;
  _anonymous_namespace_::AsmWriterContext *v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _DWORD *v19;
  const llvm::Metadata *v20;
  llvm::raw_ostream *v21;
  size_t v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  _anonymous_namespace_::AsmWriterContext *v26;
  llvm::raw_ostream *result;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  char v30;
  char *__s;
  _anonymous_namespace_::AsmWriterContext *v32;

  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 0xB)
  {
    *(_DWORD *)(v6 + 8) = 678326121;
    *(_QWORD *)v6 = *(_QWORD *)"!DILocation(";
    *((_QWORD *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "!DILocation(", 0xCuLL);
  }
  v29 = this;
  v30 = 1;
  __s = ", ";
  v32 = a3;
  v9 = (unint64_t *)(a2 - 16);
  v8 = *(_QWORD *)(a2 - 16);
  if ((v8 & 2) != 0)
  {
    v10 = **(const llvm::Metadata ***)(a2 - 32);
    v11 = v29;
    if (v30)
      goto LABEL_6;
  }
  else
  {
    v10 = (const llvm::Metadata *)v9[-((v8 >> 2) & 0xF)];
    v11 = v29;
    if (v30)
    {
LABEL_6:
      v30 = 0;
LABEL_7:
      v12 = v11;
      goto LABEL_8;
    }
  }
  v12 = v11;
  if (__s)
  {
    v17 = strlen(__s);
    if (v17 <= *((_QWORD *)v11 + 3) - *((_QWORD *)v11 + 4))
    {
      v12 = v11;
      if (v17)
      {
        memcpy(*((void **)v11 + 4), __s, v17);
        *((_QWORD *)v11 + 4) += v17;
        goto LABEL_7;
      }
    }
    else
    {
      v12 = llvm::raw_ostream::write(v11, __s, v17);
    }
  }
LABEL_8:
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 4)
  {
    *(_BYTE *)(v13 + 4) = 101;
    *(_DWORD *)v13 = 1886348147;
    v18 = *((_QWORD *)v12 + 3);
    v14 = (_WORD *)(*((_QWORD *)v12 + 4) + 5);
    *((_QWORD *)v12 + 4) = v14;
    if ((unint64_t)(v18 - (_QWORD)v14) > 1)
    {
LABEL_10:
      *v14 = 8250;
      *((_QWORD *)v12 + 4) += 2;
      if (v10)
        goto LABEL_11;
      goto LABEL_19;
    }
  }
  else
  {
    v12 = llvm::raw_ostream::write(v12, "scope", 5uLL);
    v14 = (_WORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 1uLL)
      goto LABEL_10;
  }
  llvm::raw_ostream::write(v12, ": ", 2uLL);
  if (v10)
  {
LABEL_11:
    v15 = v32;
    WriteAsOperandInternal(v11, v10, v32, v7);
    (**(void (***)(_anonymous_namespace_::AsmWriterContext *, const llvm::Metadata *))v15)(v15, v10);
    v16 = *v9;
    if ((*v9 & 2) == 0)
      goto LABEL_25;
LABEL_21:
    if (*(_DWORD *)(a2 - 24) != 2)
      goto LABEL_40;
    v20 = *(const llvm::Metadata **)(*(_QWORD *)(a2 - 32) + 8);
    if (!v20)
      goto LABEL_40;
    goto LABEL_27;
  }
LABEL_19:
  v19 = (_DWORD *)*((_QWORD *)v11 + 4);
  if (*((_QWORD *)v11 + 3) - (_QWORD)v19 > 3uLL)
  {
    *v19 = 1819047278;
    *((_QWORD *)v11 + 4) += 4;
    v16 = *v9;
    if ((*v9 & 2) != 0)
      goto LABEL_21;
  }
  else
  {
    llvm::raw_ostream::write(v11, "null", 4uLL);
    v16 = *v9;
    if ((*v9 & 2) != 0)
      goto LABEL_21;
  }
LABEL_25:
  if ((v16 & 0x3C0) != 0x80)
    goto LABEL_40;
  v20 = (const llvm::Metadata *)v9[-((v16 >> 2) & 0xF) + 1];
  if (!v20)
    goto LABEL_40;
LABEL_27:
  v21 = v11;
  if (__s)
  {
    v22 = strlen(__s);
    if (v22 <= *((_QWORD *)v11 + 3) - *((_QWORD *)v11 + 4))
    {
      v21 = v11;
      if (v22)
      {
        memcpy(*((void **)v11 + 4), __s, v22);
        *((_QWORD *)v11 + 4) += v22;
        v21 = v11;
      }
    }
    else
    {
      v21 = llvm::raw_ostream::write(v11, __s, v22);
    }
  }
  v23 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v23) > 8)
  {
    *(_BYTE *)(v23 + 8) = 116;
    *(_QWORD *)v23 = *(_QWORD *)"inlinedAt";
    v25 = *((_QWORD *)v21 + 3);
    v24 = (_WORD *)(*((_QWORD *)v21 + 4) + 9);
    *((_QWORD *)v21 + 4) = v24;
    if ((unint64_t)(v25 - (_QWORD)v24) > 1)
      goto LABEL_36;
LABEL_38:
    llvm::raw_ostream::write(v21, ": ", 2uLL);
    goto LABEL_39;
  }
  v21 = llvm::raw_ostream::write(v21, "inlinedAt", 9uLL);
  v24 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v24 <= 1uLL)
    goto LABEL_38;
LABEL_36:
  *v24 = 8250;
  *((_QWORD *)v21 + 4) += 2;
LABEL_39:
  v26 = v32;
  WriteAsOperandInternal(v11, v20, v32, v7);
  (**(void (***)(_anonymous_namespace_::AsmWriterContext *, const llvm::Metadata *))v26)(v26, v20);
LABEL_40:
  v28 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v28)
    return llvm::raw_ostream::write(this, ")", 1uLL);
  *v28 = 41;
  ++*((_QWORD *)this + 4);
  return result;
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printInt<unsigned int>(llvm::raw_ostream *result, char *a2, size_t a3, unsigned int a4, char a5)
{
  llvm::raw_ostream *v8;
  _WORD *v9;
  const void *v10;
  size_t v11;
  void *v12;

  if (a4 || (a5 & 1) == 0)
  {
    v8 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v10 = (const void *)*((_QWORD *)result + 2);
      if (v10)
      {
        v11 = strlen(*((const char **)result + 2));
        v12 = (void *)*((_QWORD *)v8 + 4);
        if (v11 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
        {
          if (v11)
          {
            memcpy(v12, v10, v11);
            *((_QWORD *)v8 + 4) += v11;
          }
        }
        else
        {
          v8 = llvm::raw_ostream::write(v8, (const char *)v10, v11);
        }
      }
    }
    v9 = (_WORD *)*((_QWORD *)v8 + 4);
    if (a3 <= *((_QWORD *)v8 + 3) - (_QWORD)v9)
    {
      if (a3)
      {
        memcpy(v9, a2, a3);
        v9 = (_WORD *)(*((_QWORD *)v8 + 4) + a3);
        *((_QWORD *)v8 + 4) = v9;
      }
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, a2, a3);
      v9 = (_WORD *)*((_QWORD *)v8 + 4);
    }
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 8250;
      *((_QWORD *)v8 + 4) += 2;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, ": ", 2uLL);
    }
    return llvm::raw_ostream::operator<<(v8, a4);
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printMetadata(llvm::raw_ostream *result, const void *a2, size_t a3, const llvm::Metadata *a4, char a5)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  _WORD *v10;
  _anonymous_namespace_::TypePrinting **v11;
  _DWORD *v12;
  const void *v13;
  size_t v14;
  void *v15;

  v8 = result;
  if (a4 || (a5 & 1) == 0)
  {
    v9 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v13 = (const void *)*((_QWORD *)result + 2);
      if (v13)
      {
        v14 = strlen(*((const char **)result + 2));
        v15 = (void *)*((_QWORD *)v9 + 4);
        if (v14 <= *((_QWORD *)v9 + 3) - (_QWORD)v15)
        {
          if (v14)
          {
            memcpy(v15, v13, v14);
            *((_QWORD *)v9 + 4) += v14;
          }
        }
        else
        {
          v9 = llvm::raw_ostream::write(v9, (const char *)v13, v14);
        }
      }
    }
    v10 = (_WORD *)*((_QWORD *)v9 + 4);
    if (a3 <= *((_QWORD *)v9 + 3) - (_QWORD)v10)
    {
      if (a3)
      {
        memcpy(v10, a2, a3);
        v10 = (_WORD *)(*((_QWORD *)v9 + 4) + a3);
        *((_QWORD *)v9 + 4) = v10;
      }
    }
    else
    {
      v9 = llvm::raw_ostream::write(v9, (const char *)a2, a3);
      v10 = (_WORD *)*((_QWORD *)v9 + 4);
    }
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
    {
      *v10 = 8250;
      *((_QWORD *)v9 + 4) += 2;
      result = *(llvm::raw_ostream **)v8;
      if (a4)
        goto LABEL_11;
    }
    else
    {
      llvm::raw_ostream::write(v9, ": ", 2uLL);
      result = *(llvm::raw_ostream **)v8;
      if (a4)
      {
LABEL_11:
        v11 = (_anonymous_namespace_::TypePrinting **)*((_QWORD *)v8 + 3);
        WriteAsOperandInternal(result, a4, v11, (BOOL)a4);
        return (llvm::raw_ostream *)(*(uint64_t (**)(_anonymous_namespace_::TypePrinting **, const llvm::Metadata *))*v11)(v11, a4);
      }
    }
    v12 = (_DWORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v12 > 3uLL)
    {
      *v12 = 1819047278;
      *((_QWORD *)result + 4) += 4;
    }
    else
    {
      return llvm::raw_ostream::write(result, "null", 4uLL);
    }
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printBool(llvm::raw_ostream *result, char *a2, size_t a3, int a4, __int16 a5)
{
  llvm::raw_ostream *v8;
  _WORD *v9;
  void *v10;
  const char *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  void *v15;

  if ((a5 & 0xFF00) == 0 || a4 != a5)
  {
    v8 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v13 = (const void *)*((_QWORD *)result + 2);
      if (v13)
      {
        v14 = strlen(*((const char **)result + 2));
        v15 = (void *)*((_QWORD *)v8 + 4);
        if (v14 <= *((_QWORD *)v8 + 3) - (_QWORD)v15)
        {
          if (v14)
          {
            memcpy(v15, v13, v14);
            *((_QWORD *)v8 + 4) += v14;
          }
        }
        else
        {
          v8 = llvm::raw_ostream::write(v8, (const char *)v13, v14);
        }
      }
    }
    v9 = (_WORD *)*((_QWORD *)v8 + 4);
    if (a3 <= *((_QWORD *)v8 + 3) - (_QWORD)v9)
    {
      if (a3)
      {
        memcpy(v9, a2, a3);
        v9 = (_WORD *)(*((_QWORD *)v8 + 4) + a3);
        *((_QWORD *)v8 + 4) = v9;
      }
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, a2, a3);
      v9 = (_WORD *)*((_QWORD *)v8 + 4);
    }
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 8250;
      v10 = (void *)(*((_QWORD *)v8 + 4) + 2);
      *((_QWORD *)v8 + 4) = v10;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, ": ", 2uLL);
      v10 = (void *)*((_QWORD *)v8 + 4);
    }
    if (a4)
      v11 = "true";
    else
      v11 = "false";
    if (a4)
      v12 = 4;
    else
      v12 = 5;
    if (v12 <= *((_QWORD *)v8 + 3) - (_QWORD)v10)
    {
      result = (llvm::raw_ostream *)memcpy(v10, v11, v12);
      *((_QWORD *)v8 + 4) += v12;
    }
    else
    {
      return llvm::raw_ostream::write(v8, v11, v12);
    }
  }
  return result;
}

double createSlotTracker(ValueImpl *a1)
{
  ValueImpl *v1;
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  llvm::SlotTracker *v8;

  v1 = a1;
  v2 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v2 == 21)
  {
    v3 = (char *)operator new(0x148uLL);
    v4 = *((_QWORD *)v1 + 3);
    *(_QWORD *)v3 = off_1E0E20020;
    if (v4)
    {
LABEL_4:
      v5 = *(_QWORD *)(v4 + 40);
LABEL_13:
      *((_QWORD *)v3 + 1) = v5;
      *((_QWORD *)v3 + 2) = v4;
LABEL_14:
      *((_WORD *)v3 + 12) = 0;
      *((_QWORD *)v3 + 7) = 0;
      *((_DWORD *)v3 + 32) = 0;
      *((_QWORD *)v3 + 17) = 0;
      *((_QWORD *)v3 + 18) = 0;
      *((_DWORD *)v3 + 38) = 0;
      *((_DWORD *)v3 + 40) = 0;
      *((_QWORD *)v3 + 21) = 0;
      *((_QWORD *)v3 + 22) = 0;
      *((_DWORD *)v3 + 46) = 0;
      *((_DWORD *)v3 + 48) = 0;
      *((_QWORD *)v3 + 25) = 0;
      *((_QWORD *)v3 + 26) = 0;
      *((_DWORD *)v3 + 54) = 0;
      *((_DWORD *)v3 + 56) = 0;
      *((_QWORD *)v3 + 29) = 0;
      *((_QWORD *)v3 + 30) = 0;
      *((_DWORD *)v3 + 62) = 0;
      *((_DWORD *)v3 + 30) = 0;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_QWORD *)&result = 16;
      *(_QWORD *)(v3 + 252) = 16;
      *((_QWORD *)v3 + 33) = 0;
      *((_QWORD *)v3 + 34) = 0;
      *((_DWORD *)v3 + 70) = 0;
      *((_DWORD *)v3 + 72) = 0;
      *((_QWORD *)v3 + 37) = 0;
      *((_QWORD *)v3 + 38) = 0;
      *((_DWORD *)v3 + 78) = 0;
      *(_QWORD *)(v3 + 316) = 16;
      return result;
    }
LABEL_12:
    v5 = 0;
    goto LABEL_13;
  }
  if (a1 && v2 >= 0x1C)
  {
    v1 = (ValueImpl *)*((_QWORD *)a1 + 5);
    if (!v1)
      return result;
LABEL_11:
    v3 = (char *)operator new(0x148uLL);
    v4 = *((_QWORD *)v1 + 8);
    *(_QWORD *)v3 = off_1E0E20020;
    if (v4)
      goto LABEL_4;
    goto LABEL_12;
  }
  if (a1 && v2 == 22)
    goto LABEL_11;
  if (a1 && v2 == 3 || a1 && v2 == 1 || a1 && v2 == 2)
  {
    v3 = (char *)operator new(0x148uLL);
    v7 = *((_QWORD *)v1 + 5);
    *(_QWORD *)v3 = off_1E0E20020;
    *((_QWORD *)v3 + 1) = v7;
    *((_QWORD *)v3 + 2) = 0;
    goto LABEL_14;
  }
  if (a1)
  {
    if (!*((_BYTE *)a1 + 16))
    {
      v8 = (llvm::SlotTracker *)operator new(0x148uLL);
      return llvm::SlotTracker::SlotTracker(v8, (const Function *)v1, 0);
    }
  }
  return result;
}

void llvm::DenseMap<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::SmallVector<std::pair<llvm::Value const*,std::vector<unsigned int>>,0u>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::SmallVector<std::pair<llvm::Value const*,std::vector<unsigned int>>,0u>>>>::~DenseMap(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = *((_DWORD *)a1 + 4);
  v2 = *a1;
  if (v1)
  {
    v3 = v2 + 48 * v1;
    do
    {
      if ((*(_QWORD *)v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(char **)(v2 + 32);
        v5 = *(unsigned int *)(v2 + 40);
        if ((_DWORD)v5)
        {
          v6 = 32 * v5;
          do
          {
            v7 = *(void **)&v4[v6 - 24];
            if (v7)
            {
              *(_QWORD *)&v4[v6 - 16] = v7;
              operator delete(v7);
            }
            v6 -= 32;
          }
          while (v6);
          v4 = *(char **)(v2 + 32);
        }
        if (v4 != (char *)(v2 + 48))
          free(v4);
        llvm::deallocate_buffer(*(llvm **)(v2 + 8), (void *)(16 * *(unsigned int *)(v2 + 24)));
      }
      v2 += 48;
    }
    while (v2 != v3);
    v2 = *a1;
    v8 = 48 * *((unsigned int *)a1 + 4);
  }
  else
  {
    v8 = 0;
  }
  llvm::deallocate_buffer((llvm *)v2, (void *)v8);
}

uint64_t sub_180C81118()
{
  uint64_t v0;

  return v0;
}

void sub_180C81228()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 168), (void *)(16 * *(unsigned int *)(v0 + 184)));
}

void sub_180C8123C()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 136), (void *)(16 * *(unsigned int *)(v0 + 152)));
}

void sub_180C81250()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 104), (void *)(16 * *(unsigned int *)(v0 + 120)));
}

_QWORD *sub_180C81264()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = (_QWORD *)v0[11];
  if (v1 == v0 + 8)
  {
    v2 = 4;
    v1 = v0 + 8;
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  v3 = (_QWORD *)v0[7];
  if (v3 == v0 + 4)
  {
    v4 = 4;
    v3 = v0 + 4;
    goto LABEL_10;
  }
  if (v3)
  {
    v4 = 5;
LABEL_10:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v0;
}

void `anonymous namespace'::TypePrinting::incorporateTypes(_anonymous_namespace_::TypePrinting *this)
{
  llvm::StructType **v2;
  llvm::StructType **v3;
  int v4;
  llvm::StructType **v5;
  llvm::StructType *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  llvm::StructType *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  llvm::StructType *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  llvm::StructType *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  if (*(_QWORD *)this)
  {
    llvm::TypeFinder::run((int64x2_t *)((char *)this + 8), *(const llvm::Module **)this, 0);
    *(_QWORD *)this = 0;
    v2 = (llvm::StructType **)*((_QWORD *)this + 13);
    v3 = (llvm::StructType **)*((_QWORD *)this + 14);
    if (v2 != v3)
    {
      v4 = 0;
      v5 = (llvm::StructType **)*((_QWORD *)this + 13);
      while (1)
      {
        v6 = *v5;
        if ((*((_BYTE *)*v5 + 9) & 4) == 0)
        {
          llvm::StructType::getName(*v5);
          if (!v7)
          {
            v8 = *((_DWORD *)this + 38);
            if (!v8)
              goto LABEL_28;
            v9 = *((_QWORD *)this + 17);
            v10 = v8 - 1;
            v11 = (v8 - 1) & ((v6 >> 4) ^ (v6 >> 9));
            v12 = v9 + 16 * v11;
            v13 = *(llvm::StructType **)v12;
            if (v6 == *(llvm::StructType **)v12)
            {
LABEL_24:
              *(_DWORD *)(v12 + 8) = v4++;
              goto LABEL_5;
            }
            v14 = 0;
            v15 = 1;
            while (v13 != (llvm::StructType *)-4096)
            {
              if (v14)
                v16 = 0;
              else
                v16 = v13 == (llvm::StructType *)-8192;
              if (v16)
                v14 = v12;
              v17 = v11 + v15++;
              v11 = v17 & v10;
              v12 = v9 + 16 * (v17 & v10);
              v13 = *(llvm::StructType **)v12;
              if (v6 == *(llvm::StructType **)v12)
                goto LABEL_24;
            }
            if (v14)
              v12 = v14;
            v19 = *((_DWORD *)this + 36);
            if (4 * v19 + 4 < 3 * v8)
            {
              if (v8 + ~v19 - *((_DWORD *)this + 37) <= v8 >> 3)
                goto LABEL_29;
            }
            else
            {
LABEL_28:
              v8 *= 2;
LABEL_29:
              llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 136, v8);
              v20 = *((_QWORD *)this + 17);
              v21 = *((_DWORD *)this + 38) - 1;
              v22 = v21 & ((v6 >> 4) ^ (v6 >> 9));
              v12 = v20 + 16 * v22;
              v23 = *(llvm::StructType **)v12;
              if (v6 == *(llvm::StructType **)v12)
              {
LABEL_30:
                ++*((_DWORD *)this + 36);
                if (v6 == (llvm::StructType *)-4096)
                {
LABEL_23:
                  *(_QWORD *)v12 = v6;
                  *(_DWORD *)(v12 + 8) = 0;
                  goto LABEL_24;
                }
LABEL_22:
                --*((_DWORD *)this + 37);
                goto LABEL_23;
              }
              v24 = 0;
              v25 = 1;
              while (v23 != (llvm::StructType *)-4096)
              {
                if (v24)
                  v26 = 0;
                else
                  v26 = v23 == (llvm::StructType *)-8192;
                if (v26)
                  v24 = v12;
                v27 = v22 + v25++;
                v22 = v27 & v21;
                v12 = v20 + 16 * (v27 & v21);
                v23 = *(llvm::StructType **)v12;
                if (v6 == *(llvm::StructType **)v12)
                  goto LABEL_30;
              }
              if (v24)
                v12 = v24;
            }
            v18 = *(llvm::StructType **)v12;
            ++*((_DWORD *)this + 36);
            if (v18 == (llvm::StructType *)-4096)
              goto LABEL_23;
            goto LABEL_22;
          }
          *v2++ = v6;
        }
LABEL_5:
        if (++v5 == v3)
        {
          if (v2 != *((llvm::StructType ***)this + 14))
            *((_QWORD *)this + 14) = v2;
          return;
        }
      }
    }
  }
}

void WriteMDNodeBodyInternal(llvm::raw_ostream *this, const llvm::MDNode *a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v4 = *((_BYTE *)a2 + 1) & 0x7F;
  if (v4 == 2)
  {
    v6 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v6 <= 0xCuLL)
    {
      llvm::raw_ostream::write(this, "<temporary!> ", 0xDuLL);
      goto LABEL_10;
    }
    qmemcpy(v6, "<temporary!> ", 13);
    v7 = *((_QWORD *)this + 4) + 13;
  }
  else
  {
    if (v4 != 1)
      goto LABEL_10;
    v5 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v5) <= 8)
    {
      llvm::raw_ostream::write(this, "distinct ", 9uLL);
      goto LABEL_10;
    }
    *(_BYTE *)(v5 + 8) = 32;
    *(_QWORD *)v5 = *(_QWORD *)"distinct ";
    v7 = *((_QWORD *)this + 4) + 9;
  }
  *((_QWORD *)this + 4) = v7;
LABEL_10:
  __asm { BR              X10 }
}

void sub_180C81634(uint64_t a1, uint64_t a2, uint64_t a3, BOOL a4)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _anonymous_namespace_::TypePrinting **v6;
  _WORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  const llvm::Metadata *v13;
  _DWORD *v14;
  Type **v15;
  BOOL v16;
  _BYTE *v17;
  _WORD *v18;
  _BYTE *v19;

  v7 = (_WORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v7 > 1uLL)
  {
    *v7 = 31521;
    *((_QWORD *)v4 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v4, "!{", 2uLL);
  }
  v9 = (unint64_t *)(v5 - 16);
  v8 = *(_QWORD *)(v5 - 16);
  if ((v8 & 2) != 0)
    v10 = *(_DWORD *)(v5 - 24);
  else
    v10 = (v8 >> 6) & 0xF;
  if (v10)
  {
    v11 = 0;
    v12 = 8 * v10 - 8;
    while (1)
    {
      if ((v8 & 2) != 0)
      {
        v13 = *(const llvm::Metadata **)(*(_QWORD *)(v5 - 32) + v11);
        if (!v13)
        {
LABEL_16:
          v14 = (_DWORD *)*((_QWORD *)v4 + 4);
          if (*((_QWORD *)v4 + 3) - (_QWORD)v14 > 3uLL)
          {
            *v14 = 1819047278;
            *((_QWORD *)v4 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(v4, "null", 4uLL);
          }
          goto LABEL_23;
        }
      }
      else
      {
        v13 = (const llvm::Metadata *)v9[v11 / 8 - ((v8 >> 2) & 0xF)];
        if (!v13)
          goto LABEL_16;
      }
      if (*(unsigned __int8 *)v13 - 3 >= 0xFFFFFFFE)
      {
        v15 = (Type **)*((_QWORD *)v13 + 16);
        v17 = (_BYTE *)*((_QWORD *)v4 + 4);
        if ((unint64_t)v17 >= *((_QWORD *)v4 + 3))
        {
          llvm::raw_ostream::write(v4, 32);
        }
        else
        {
          *((_QWORD *)v4 + 4) = v17 + 1;
          *v17 = 32;
        }
        WriteAsOperandInternal(v4, (const llvm::Value *)v15, v6, v16);
      }
      else
      {
        WriteAsOperandInternal(v4, v13, v6, a4);
        (*(void (**)(_anonymous_namespace_::TypePrinting **, const llvm::Metadata *))*v6)(v6, v13);
      }
LABEL_23:
      if (v12 == v11)
        break;
      v18 = (_WORD *)*((_QWORD *)v4 + 4);
      if (*((_QWORD *)v4 + 3) - (_QWORD)v18 > 1uLL)
      {
        *v18 = 8236;
        *((_QWORD *)v4 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v4, ", ", 2uLL);
      }
      v8 = *v9;
      v11 += 8;
    }
  }
  v19 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v19)
  {
    llvm::raw_ostream::write(v4, "}", 1uLL);
  }
  else
  {
    *v19 = 125;
    ++*((_QWORD *)v4 + 4);
  }
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printTag(_anonymous_namespace_::MDFieldPrinter *this, const llvm::DINode *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::dwarf *Tag;
  const char *v7;
  size_t v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *v11;
  void *v12;
  llvm::raw_ostream *result;
  llvm::dwarf *v14;
  llvm::raw_ostream *v15;
  unint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;

  v4 = *(llvm::raw_ostream **)this;
  if (*((_BYTE *)this + 8))
  {
    *((_BYTE *)this + 8) = 0;
  }
  else
  {
    v17 = (const void *)*((_QWORD *)this + 2);
    if (v17)
    {
      v18 = strlen(*((const char **)this + 2));
      v19 = (void *)*((_QWORD *)v4 + 4);
      if (v18 <= *((_QWORD *)v4 + 3) - (_QWORD)v19)
      {
        if (v18)
        {
          memcpy(v19, v17, v18);
          *((_QWORD *)v4 + 4) += v18;
        }
      }
      else
      {
        v4 = llvm::raw_ostream::write(v4, (const char *)v17, v18);
      }
    }
  }
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) <= 4)
  {
    llvm::raw_ostream::write(v4, "tag: ", 5uLL);
    Tag = (llvm::dwarf *)llvm::DINode::getTag(a2);
    v7 = llvm::dwarf::TagString(Tag);
    if (v8)
      goto LABEL_5;
LABEL_8:
    v15 = *(llvm::raw_ostream **)this;
    v16 = llvm::DINode::getTag(a2);
    return llvm::raw_ostream::operator<<(v15, v16);
  }
  *(_BYTE *)(v5 + 4) = 32;
  *(_DWORD *)v5 = 979853684;
  *((_QWORD *)v4 + 4) += 5;
  v14 = (llvm::dwarf *)llvm::DINode::getTag(a2);
  v7 = llvm::dwarf::TagString(v14);
  if (!v8)
    goto LABEL_8;
LABEL_5:
  v9 = v7;
  v10 = v8;
  v11 = *(llvm::raw_ostream **)this;
  v12 = (void *)*((_QWORD *)v11 + 4);
  if (v8 > *((_QWORD *)v11 + 3) - (_QWORD)v12)
    return llvm::raw_ostream::write(v11, v9, v8);
  result = (llvm::raw_ostream *)memcpy(v12, v9, v8);
  *((_QWORD *)v11 + 4) += v10;
  return result;
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printString(llvm::raw_ostream *result, const void *a2, size_t a3, llvm::raw_ostream *a4, uint64_t a5, int a6)
{
  llvm::raw_ostream **v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  _BYTE *v13;
  const void *v14;
  size_t v15;
  void *v16;

  v10 = (llvm::raw_ostream **)result;
  if (!a6 || a5)
  {
    v11 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v14 = (const void *)*((_QWORD *)result + 2);
      if (v14)
      {
        v15 = strlen(*((const char **)result + 2));
        v16 = (void *)*((_QWORD *)v11 + 4);
        if (v15 <= *((_QWORD *)v11 + 3) - (_QWORD)v16)
        {
          if (v15)
          {
            memcpy(v16, v14, v15);
            *((_QWORD *)v11 + 4) += v15;
          }
        }
        else
        {
          v11 = llvm::raw_ostream::write(v11, (const char *)v14, v15);
        }
      }
    }
    v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    if (a3 <= *((_QWORD *)v11 + 3) - (_QWORD)v12)
    {
      if (a3)
      {
        memcpy(v12, a2, a3);
        v12 = (_BYTE *)(*((_QWORD *)v11 + 4) + a3);
        *((_QWORD *)v11 + 4) = v12;
      }
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, (const char *)a2, a3);
      v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 2uLL)
    {
      v12[2] = 34;
      *(_WORD *)v12 = 8250;
      *((_QWORD *)v11 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v11, ": \"", 3uLL);
    }
    llvm::printEscapedString(a4, a5, *v10);
    result = *v10;
    v13 = (_BYTE *)*((_QWORD *)*v10 + 4);
    if (*((_BYTE **)*v10 + 3) == v13)
    {
      return llvm::raw_ostream::write(result, "\"", 1uLL);
    }
    else
    {
      *v13 = 34;
      ++*((_QWORD *)result + 4);
    }
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printInt<long long>(uint64_t a1, char *a2, size_t a3, unint64_t a4)
{
  llvm::raw_ostream *v7;
  _WORD *v8;
  const void *v10;
  size_t v11;
  void *v12;

  v7 = *(llvm::raw_ostream **)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v10 = *(const void **)(a1 + 16);
    if (v10)
    {
      v11 = strlen(*(const char **)(a1 + 16));
      v12 = (void *)*((_QWORD *)v7 + 4);
      if (v11 <= *((_QWORD *)v7 + 3) - (_QWORD)v12)
      {
        if (v11)
        {
          memcpy(v12, v10, v11);
          *((_QWORD *)v7 + 4) += v11;
        }
      }
      else
      {
        v7 = llvm::raw_ostream::write(v7, (const char *)v10, v11);
      }
    }
  }
  v8 = (_WORD *)*((_QWORD *)v7 + 4);
  if (a3 <= *((_QWORD *)v7 + 3) - (_QWORD)v8)
  {
    if (a3)
    {
      memcpy(v8, a2, a3);
      v8 = (_WORD *)(*((_QWORD *)v7 + 4) + a3);
      *((_QWORD *)v7 + 4) = v8;
    }
  }
  else
  {
    v7 = llvm::raw_ostream::write(v7, a2, a3);
    v8 = (_WORD *)*((_QWORD *)v7 + 4);
  }
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8250;
    *((_QWORD *)v7 + 4) += 2;
  }
  else
  {
    v7 = llvm::raw_ostream::write(v7, ": ", 2uLL);
  }
  return llvm::raw_ostream::operator<<(v7, a4);
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printInt<unsigned long long>(llvm::raw_ostream *result, char *a2, size_t a3, unint64_t a4)
{
  llvm::raw_ostream *v7;
  _WORD *v8;
  const void *v9;
  size_t v10;
  void *v11;

  if (a4)
  {
    v7 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v9 = (const void *)*((_QWORD *)result + 2);
      if (v9)
      {
        v10 = strlen(*((const char **)result + 2));
        v11 = (void *)*((_QWORD *)v7 + 4);
        if (v10 <= *((_QWORD *)v7 + 3) - (_QWORD)v11)
        {
          if (v10)
          {
            memcpy(v11, v9, v10);
            *((_QWORD *)v7 + 4) += v10;
          }
        }
        else
        {
          v7 = llvm::raw_ostream::write(v7, (const char *)v9, v10);
        }
      }
    }
    v8 = (_WORD *)*((_QWORD *)v7 + 4);
    if (a3 <= *((_QWORD *)v7 + 3) - (_QWORD)v8)
    {
      if (a3)
      {
        memcpy(v8, a2, a3);
        v8 = (_WORD *)(*((_QWORD *)v7 + 4) + a3);
        *((_QWORD *)v7 + 4) = v8;
      }
    }
    else
    {
      v7 = llvm::raw_ostream::write(v7, a2, a3);
      v8 = (_WORD *)*((_QWORD *)v7 + 4);
    }
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 8250;
      *((_QWORD *)v7 + 4) += 2;
    }
    else
    {
      v7 = llvm::raw_ostream::write(v7, ": ", 2uLL);
    }
    return llvm::raw_ostream::operator<<(v7, a4);
  }
  return result;
}

void `anonymous namespace'::MDFieldPrinter::printDIFlags(llvm::raw_ostream **a1, char *a2, size_t a3, uint64_t a4)
{
  llvm::raw_ostream *v8;
  _WORD *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  const char *FlagString;
  size_t v15;
  llvm::raw_ostream *v16;
  void *v17;
  llvm::raw_ostream *v18;
  size_t v19;
  void *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  size_t v25;
  const char *v26;
  size_t v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[5];

  v35[4] = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a4)
    return;
  v8 = *a1;
  if (*((_BYTE *)a1 + 8))
  {
    *((_BYTE *)a1 + 8) = 0;
  }
  else
  {
    v18 = a1[2];
    if (v18)
    {
      v19 = strlen((const char *)a1[2]);
      v20 = (void *)*((_QWORD *)v8 + 4);
      if (v19 <= *((_QWORD *)v8 + 3) - (_QWORD)v20)
      {
        if (v19)
        {
          memcpy(v20, v18, v19);
          *((_QWORD *)v8 + 4) += v19;
        }
      }
      else
      {
        v8 = llvm::raw_ostream::write(v8, (const char *)v18, v19);
      }
    }
  }
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (a3 <= *((_QWORD *)v8 + 3) - (_QWORD)v9)
  {
    if (a3)
    {
      memcpy(v9, a2, a3);
      v9 = (_WORD *)(*((_QWORD *)v8 + 4) + a3);
      *((_QWORD *)v8 + 4) = v9;
    }
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, a2, a3);
    v9 = (_WORD *)*((_QWORD *)v8 + 4);
  }
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8250;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ": ", 2uLL);
  }
  v33 = v35;
  v34 = 0x800000000;
  v10 = llvm::DINode::splitFlags(a4, (uint64_t)&v33);
  v11 = v34;
  if (!(_DWORD)v34)
  {
    v21 = *a1;
    if (v10)
      goto LABEL_39;
    goto LABEL_43;
  }
  v12 = (char *)v33;
  FlagString = llvm::DINode::getFlagString(*(_DWORD *)v33);
  v15 = v13;
  v16 = *a1;
  v17 = (void *)*((_QWORD *)*a1 + 4);
  if (v13 <= *((_QWORD *)*a1 + 3) - (_QWORD)v17)
  {
    if (v13)
    {
      memcpy(v17, FlagString, v13);
      *((_QWORD *)v16 + 4) += v15;
    }
  }
  else
  {
    llvm::raw_ostream::write(*a1, FlagString, v13);
  }
  if ((_DWORD)v11 == 1)
  {
    if (v10)
      goto LABEL_36;
    goto LABEL_23;
  }
  v23 = (int *)(v12 + 4);
  v24 = 4 * v11 - 4;
  do
  {
    v26 = llvm::DINode::getFlagString(*v23);
    v27 = v25;
    v28 = *a1;
    v29 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v29) > 2)
    {
      *(_BYTE *)(v29 + 2) = 32;
      *(_WORD *)v29 = 31776;
      *((_QWORD *)v28 + 4) += 3;
      v30 = (void *)*((_QWORD *)v28 + 4);
      if (v25 > *((_QWORD *)v28 + 3) - (_QWORD)v30)
      {
LABEL_27:
        llvm::raw_ostream::write(v28, v26, v27);
        goto LABEL_28;
      }
    }
    else
    {
      v28 = llvm::raw_ostream::write(*a1, " | ", 3uLL);
      v30 = (void *)*((_QWORD *)v28 + 4);
      if (v27 > *((_QWORD *)v28 + 3) - (_QWORD)v30)
        goto LABEL_27;
    }
    if (v27)
    {
      memcpy(v30, v26, v27);
      *((_QWORD *)v28 + 4) += v27;
    }
LABEL_28:
    ++v23;
    v24 -= 4;
  }
  while (v24);
  if (!v10)
  {
LABEL_23:
    if ((_DWORD)v34)
      goto LABEL_45;
    v21 = *a1;
    v22 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v22) > 2)
    {
      *(_BYTE *)(v22 + 2) = 32;
      *(_WORD *)v22 = 31776;
      *((_QWORD *)v21 + 4) += 3;
    }
    else
    {
      v21 = llvm::raw_ostream::write(v21, " | ", 3uLL);
    }
LABEL_43:
    v32 = 0;
    goto LABEL_44;
  }
LABEL_36:
  v21 = *a1;
  v31 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v31) <= 2)
  {
    v21 = llvm::raw_ostream::write(v21, " | ", 3uLL);
    v32 = v10;
    goto LABEL_44;
  }
  *(_BYTE *)(v31 + 2) = 32;
  *(_WORD *)v31 = 31776;
  *((_QWORD *)v21 + 4) += 3;
LABEL_39:
  v32 = v10;
LABEL_44:
  llvm::raw_ostream::operator<<(v21, v32);
LABEL_45:
  if (v33 != v35)
    free(v33);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>,llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>::find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    result = (uint64_t *)(v2 + 16 * v4);
    v6 = *result;
    if (*result == a2)
      return result;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
        return (uint64_t *)(v2 + 16 * v4);
    }
  }
  return (uint64_t *)(v2 + 16 * v3);
}

llvm::raw_ostream *WriteOptimizationInfo(llvm::raw_ostream *result, const llvm::User *this)
{
  llvm::raw_ostream *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  _DWORD *v18;
  _DWORD *v19;
  const llvm::User *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v25;
  int v26;

  v3 = result;
  v4 = *((unsigned __int8 *)this + 16);
  v5 = v4 - 28;
  if (v4 < 0x1C)
  {
    if (v4 != 5)
      goto LABEL_22;
    v5 = *((unsigned __int16 *)this + 9);
  }
  if (v5 <= 0x39)
  {
    if (((1 << v5) & 0x40000001255000) == 0)
    {
      if (((1 << v5) & 0x380000000000000) == 0)
        goto LABEL_9;
      v20 = this;
      do
      {
        v21 = *(_QWORD *)v20;
        v22 = *(unsigned __int8 *)(*(_QWORD *)v20 + 8);
        v20 = (const llvm::User *)(*(_QWORD *)v20 + 24);
        if (v21)
          v23 = v22 == 17;
        else
          v23 = 0;
      }
      while (v23);
      if ((v22 & 0xFE) == 0x12)
        v22 = *(_DWORD *)(**(_QWORD **)(v21 + 16) + 8);
      if (v22 < 4u || v22 == 5)
      {
        if (!this)
          goto LABEL_9;
      }
      else if (!this || (v22 & 0xFD) != 4)
      {
        goto LABEL_9;
      }
    }
    v6 = *((unsigned __int8 *)this + 17) >> 1;
    if (v6 == 127)
      v6 = -1;
    v26 = v6;
    result = llvm::FastMathFlags::print((llvm::raw_ostream *)&v26, result);
    v4 = *((unsigned __int8 *)this + 16);
  }
LABEL_9:
  if (v4 < 0x1C)
  {
LABEL_22:
    if (v4 != 5)
      return result;
    v13 = *((unsigned __int16 *)this + 9);
    HIDWORD(v15) = v13 - 13;
    LODWORD(v15) = v13 - 13;
    v14 = v15 >> 1;
    v9 = v14 > 6;
    v16 = (1 << v14) & 0x47;
    if (!v9 && v16 != 0)
    {
LABEL_27:
      if ((*((_BYTE *)this + 17) & 2) != 0)
      {
        v18 = (_DWORD *)*((_QWORD *)v3 + 4);
        if (*((_QWORD *)v3 + 3) - (_QWORD)v18 > 3uLL)
        {
          *v18 = 2004184608;
          *((_QWORD *)v3 + 4) += 4;
          if ((*((_BYTE *)this + 17) & 4) == 0)
            return result;
          goto LABEL_31;
        }
        result = llvm::raw_ostream::write(v3, " nuw", 4uLL);
      }
      if ((*((_BYTE *)this + 17) & 4) == 0)
        return result;
LABEL_31:
      v19 = (_DWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v19 <= 3uLL)
        return llvm::raw_ostream::write(v3, " nsw", 4uLL);
      *v19 = 2004053536;
      *((_QWORD *)v3 + 4) += 4;
      return result;
    }
    if (v13 > 0x22)
      return result;
    if (((1 << v13) & 0xC180000) == 0)
    {
      if (v13 != 34)
        return result;
LABEL_64:
      if ((*((_BYTE *)this + 17) & 2) != 0)
        return llvm::raw_ostream::operator<<(v3, " inbounds");
      return result;
    }
    goto LABEL_54;
  }
  HIDWORD(v8) = v4 - 41;
  LODWORD(v8) = v4 - 41;
  v7 = v8 >> 1;
  v9 = v7 > 6;
  v10 = (1 << v7) & 0x47;
  if (!v9 && v10 != 0)
    goto LABEL_27;
  if (v4 <= 0x37 && ((1 << v4) & 0xC1800000000000) != 0)
  {
LABEL_54:
    if ((*((_BYTE *)this + 17) & 2) != 0)
    {
      v25 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v25) > 5)
      {
        *(_WORD *)(v25 + 4) = 29795;
        *(_DWORD *)v25 = 1635280160;
        *((_QWORD *)v3 + 4) += 6;
      }
      else
      {
        return llvm::raw_ostream::write(v3, " exact", 6uLL);
      }
    }
    return result;
  }
  if (this && v4 == 57)
  {
    if ((*((_BYTE *)this + 17) & 2) != 0)
    {
      v12 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v12) > 8)
      {
        *(_BYTE *)(v12 + 8) = 116;
        *(_QWORD *)v12 = *(_QWORD *)" disjoint";
        *((_QWORD *)v3 + 4) += 9;
      }
      else
      {
        return llvm::raw_ostream::write(v3, " disjoint", 9uLL);
      }
    }
    return result;
  }
  if (v4 == 62)
    goto LABEL_64;
  if (this)
  {
    if (v4 == 67)
    {
      result = (llvm::raw_ostream *)llvm::Instruction::hasNonNeg(this);
      if ((_DWORD)result)
        return llvm::raw_ostream::operator<<(v3, " nneg");
    }
  }
  return result;
}

llvm::raw_ostream *maybePrintCallAddrSpace(llvm::raw_ostream *result, ValueImpl *a2, llvm::raw_ostream *this)
{
  unsigned int v4;
  void *v5;
  const char *v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;

  if (!result)
  {
    v5 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x17uLL)
    {
      qmemcpy(v5, " <cannot get addrspace!>", 24);
      *((_QWORD *)this + 4) += 24;
      return result;
    }
    v6 = " <cannot get addrspace!>";
    result = this;
    v7 = 24;
    return llvm::raw_ostream::write(result, v6, v7);
  }
  v4 = *(_DWORD *)(*(_QWORD *)result + 8);
  if ((v4 & 0xFE) == 0x12)
  {
    v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)result + 16) + 8);
    if (v4 > 0xFF)
    {
LABEL_11:
      v8 = v4 >> 8;
      v9 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v9) > 0xA)
      {
        *(_DWORD *)(v9 + 7) = 677733217;
        *(_QWORD *)v9 = *(_QWORD *)" addrspace(";
        *((_QWORD *)this + 4) += 11;
        result = llvm::raw_ostream::operator<<(this, v8);
        v11 = (_BYTE *)*((_QWORD *)result + 4);
        if (*((_BYTE **)result + 3) != v11)
          goto LABEL_13;
      }
      else
      {
        v10 = llvm::raw_ostream::write(this, " addrspace(", 0xBuLL);
        result = llvm::raw_ostream::operator<<(v10, v8);
        v11 = (_BYTE *)*((_QWORD *)result + 4);
        if (*((_BYTE **)result + 3) != v11)
        {
LABEL_13:
          *v11 = 41;
          ++*((_QWORD *)result + 4);
          return result;
        }
      }
      v6 = ")";
      v7 = 1;
      return llvm::raw_ostream::write(result, v6, v7);
    }
  }
  else if (v4 > 0xFF)
  {
    goto LABEL_11;
  }
  result = (llvm::raw_ostream *)getModuleFromVal(a2);
  if (!result || *((_DWORD *)result + 67))
    goto LABEL_11;
  return result;
}

void `anonymous namespace'::AssemblyWriter::writeParamOperand(llvm::raw_ostream **a1, Type **a2, uint64_t a3)
{
  BOOL v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  void *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  _anonymous_namespace_::TypePrinting *v13;
  llvm::raw_ostream *v14;
  _anonymous_namespace_::TypePrinting *v15;
  _anonymous_namespace_::TypePrinting *v16[4];
  uint64_t v17;

  v17 = a3;
  if (a2)
  {
    if (a3)
    {
      v7 = *a1;
      v8 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v8 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v7, 32);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v8 + 1;
        *v8 = 32;
      }
    }
    v11 = *a1;
    v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v11, 32);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 32;
    }
    v13 = a1[4];
    v16[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
    v16[1] = (_anonymous_namespace_::TypePrinting *)(a1 + 5);
    v14 = *a1;
    v15 = a1[1];
    v16[2] = v13;
    v16[3] = v15;
    WriteAsOperandInternal(v14, (const llvm::Value *)a2, v16, v6);
  }
  else
  {
    v9 = *a1;
    v10 = (void *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v10 > 0xEuLL)
    {
      qmemcpy(v10, "<null operand!>", 15);
      *((_QWORD *)v9 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v9, "<null operand!>", 0xFuLL);
    }
  }
}

char *`anonymous namespace'::AssemblyWriter::writeOperandBundles(char *this, const llvm::CallBase *a2)
{
  const llvm::CallBase *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  char *Descriptor;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;
  const llvm::CallBase *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  _anonymous_namespace_::TypePrinting *v29;
  _anonymous_namespace_::TypePrinting *v30;
  char *v31;
  Type ***v32;
  BOOL v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  llvm::raw_ostream *v36;
  void *v37;
  Type ***v38;
  const llvm::Value **v39;
  Type ***v40;
  Type ***v41;
  uint64_t i;
  llvm::raw_ostream *v43;
  _WORD *v44;
  const llvm::Value *v45;
  BOOL v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  void *v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  _WORD *v53;
  uint64_t v54;
  _anonymous_namespace_::TypePrinting *v55[4];

  v2 = a2;
  v3 = (uint64_t)this;
  if ((*((_DWORD *)a2 + 5) & 0x80000000) != 0)
  {
    this = llvm::User::getDescriptor(a2);
    v4 = this;
    if ((*((_DWORD *)v2 + 5) & 0x80000000) != 0)
    {
      this = llvm::User::getDescriptor(v2);
      if (((&this[v5] - v4) & 0xFFFFFFFF0) == 0)
        return this;
    }
    else if ((-(uint64_t)this & 0xFFFFFFFF0) == 0)
    {
      return this;
    }
    v6 = *(llvm::raw_ostream **)v3;
    v7 = *(_QWORD *)(*(_QWORD *)v3 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 24) - v7) > 2)
    {
      *(_BYTE *)(v7 + 2) = 32;
      *(_WORD *)v7 = 23328;
      *((_QWORD *)v6 + 4) += 3;
      if ((*((_DWORD *)v2 + 5) & 0x80000000) == 0)
        goto LABEL_54;
    }
    else
    {
      llvm::raw_ostream::write(v6, " [ ", 3uLL);
      if ((*((_DWORD *)v2 + 5) & 0x80000000) == 0)
        goto LABEL_54;
    }
    Descriptor = llvm::User::getDescriptor(v2);
    v9 = Descriptor;
    if ((*((_DWORD *)v2 + 5) & 0x80000000) != 0)
    {
      v11 = llvm::User::getDescriptor(v2);
      v10 = &v11[v12] - v9;
      if ((v10 & 0xFFFFFFFF0) == 0)
        goto LABEL_54;
    }
    else
    {
      v10 = -(uint64_t)Descriptor;
      if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) == 0)
      {
LABEL_54:
        this = *(char **)v3;
        v53 = *(_WORD **)(*(_QWORD *)v3 + 32);
        if (*(_QWORD *)(*(_QWORD *)v3 + 24) - (_QWORD)v53 <= 1uLL)
          return (char *)llvm::raw_ostream::write((llvm::raw_ostream *)this, " ]", 2uLL);
        *v53 = 23840;
        *((_QWORD *)this + 4) += 2;
        return this;
      }
    }
    v13 = 0;
    v54 = (v10 >> 4);
    v14 = 1;
    while (1)
    {
      v15 = &llvm::User::getDescriptor(v2)[16 * v13];
      v16 = v2;
      v17 = *((_DWORD *)v2 + 5);
      v18 = *((unsigned int *)v15 + 2);
      v19 = *((unsigned int *)v15 + 3);
      v20 = *(uint64_t **)v15;
      if ((v14 & 1) != 0)
        goto LABEL_20;
      v21 = *(llvm::raw_ostream **)v3;
      v22 = *(_WORD **)(*(_QWORD *)v3 + 32);
      if (*(_QWORD *)(*(_QWORD *)v3 + 24) - (_QWORD)v22 <= 1uLL)
        break;
      *v22 = 8236;
      *((_QWORD *)v21 + 4) += 2;
      v23 = *(llvm::raw_ostream **)v3;
      v24 = *(_BYTE **)(*(_QWORD *)v3 + 32);
      if ((unint64_t)v24 < *(_QWORD *)(*(_QWORD *)v3 + 24))
      {
LABEL_21:
        *((_QWORD *)v23 + 4) = v24 + 1;
        *v24 = 34;
        goto LABEL_24;
      }
LABEL_23:
      llvm::raw_ostream::write(v23, 34);
LABEL_24:
      llvm::printEscapedString((llvm::raw_ostream *)(v20 + 2), *v20, *(llvm::raw_ostream **)v3);
      v25 = *(llvm::raw_ostream **)v3;
      v26 = *(_BYTE **)(*(_QWORD *)v3 + 32);
      if ((unint64_t)v26 >= *(_QWORD *)(*(_QWORD *)v3 + 24))
      {
        llvm::raw_ostream::write(v25, 34);
        v27 = *(llvm::raw_ostream **)v3;
        v28 = *(_BYTE **)(*(_QWORD *)v3 + 32);
        if ((unint64_t)v28 < *(_QWORD *)(*(_QWORD *)v3 + 24))
        {
LABEL_28:
          *((_QWORD *)v27 + 4) = v28 + 1;
          *v28 = 40;
          goto LABEL_29;
        }
      }
      else
      {
        *((_QWORD *)v25 + 4) = v26 + 1;
        *v26 = 34;
        v27 = *(llvm::raw_ostream **)v3;
        v28 = *(_BYTE **)(*(_QWORD *)v3 + 32);
        if ((unint64_t)v28 < *(_QWORD *)(*(_QWORD *)v3 + 24))
          goto LABEL_28;
      }
      llvm::raw_ostream::write(v27, 40);
LABEL_29:
      v29 = *(_anonymous_namespace_::TypePrinting **)(v3 + 32);
      v30 = *(_anonymous_namespace_::TypePrinting **)(v3 + 8);
      v55[0] = (_anonymous_namespace_::TypePrinting *)&off_1E0E15E00;
      v55[1] = (_anonymous_namespace_::TypePrinting *)(v3 + 40);
      v55[2] = v29;
      v55[3] = v30;
      if ((_DWORD)v18 != (_DWORD)v19)
      {
        v31 = (char *)v16 - 32 * (v17 & 0x7FFFFFF);
        v32 = (Type ***)&v31[32 * v18];
        if (!*v32)
        {
          v36 = *(llvm::raw_ostream **)v3;
          v37 = *(void **)(*(_QWORD *)v3 + 32);
          if (*(_QWORD *)(*(_QWORD *)v3 + 24) - (_QWORD)v37 >= 0x16uLL)
          {
            qmemcpy(v37, "<null operand bundle!>", 22);
            *((_QWORD *)v36 + 4) += 22;
            v41 = (Type ***)&v31[32 * v19];
            v39 = (const llvm::Value **)(v32 + 4);
            if (v32 + 4 != v41)
              goto LABEL_40;
          }
          else
          {
            llvm::raw_ostream::write(v36, "<null operand bundle!>", 0x16uLL);
            v38 = (Type ***)&v31[32 * v19];
            v39 = (const llvm::Value **)(v32 + 4);
            if (v32 + 4 != v38)
              goto LABEL_40;
          }
          goto LABEL_52;
        }
        v34 = *(llvm::raw_ostream **)v3;
        v35 = *(_BYTE **)(*(_QWORD *)v3 + 32);
        if (*(_BYTE **)(*(_QWORD *)v3 + 24) == v35)
        {
          llvm::raw_ostream::write(v34, " ", 1uLL);
        }
        else
        {
          *v35 = 32;
          ++*((_QWORD *)v34 + 4);
        }
        WriteAsOperandInternal(*(llvm::raw_ostream **)v3, (const llvm::Value *)*v32, v55, v33);
        v40 = (Type ***)&v31[32 * v19];
        v39 = (const llvm::Value **)(v32 + 4);
        if (v32 + 4 != v40)
        {
LABEL_40:
          for (i = 32 * v19 - 32 * v18 - 32; i; i -= 32)
          {
            v43 = *(llvm::raw_ostream **)v3;
            v44 = *(_WORD **)(*(_QWORD *)v3 + 32);
            if (*(_QWORD *)(*(_QWORD *)v3 + 24) - (_QWORD)v44 > 1uLL)
            {
              *v44 = 8236;
              *((_QWORD *)v43 + 4) += 2;
              v45 = *v39;
              if (*v39)
              {
LABEL_46:
                v47 = *(llvm::raw_ostream **)v3;
                v48 = *(_BYTE **)(*(_QWORD *)v3 + 32);
                if (*(_BYTE **)(*(_QWORD *)v3 + 24) == v48)
                {
                  llvm::raw_ostream::write(v47, " ", 1uLL);
                }
                else
                {
                  *v48 = 32;
                  ++*((_QWORD *)v47 + 4);
                }
                WriteAsOperandInternal(*(llvm::raw_ostream **)v3, *v39, v55, v46);
                goto LABEL_43;
              }
            }
            else
            {
              llvm::raw_ostream::write(v43, ", ", 2uLL);
              v45 = *v39;
              if (*v39)
                goto LABEL_46;
            }
            v49 = *(llvm::raw_ostream **)v3;
            v50 = *(void **)(*(_QWORD *)v3 + 32);
            if (*(_QWORD *)(*(_QWORD *)v3 + 24) - (_QWORD)v50 > 0x15uLL)
            {
              qmemcpy(v50, "<null operand bundle!>", 22);
              *((_QWORD *)v49 + 4) += 22;
            }
            else
            {
              llvm::raw_ostream::write(v49, "<null operand bundle!>", 0x16uLL);
            }
LABEL_43:
            v39 += 4;
          }
        }
      }
LABEL_52:
      v51 = *(llvm::raw_ostream **)v3;
      v52 = *(_BYTE **)(*(_QWORD *)v3 + 32);
      if ((unint64_t)v52 < *(_QWORD *)(*(_QWORD *)v3 + 24))
      {
        *((_QWORD *)v51 + 4) = v52 + 1;
        *v52 = 41;
      }
      else
      {
        llvm::raw_ostream::write(v51, 41);
      }
      v2 = v16;
      v14 = 0;
      if (++v13 == v54)
        goto LABEL_54;
    }
    llvm::raw_ostream::write(v21, ", ", 2uLL);
LABEL_20:
    v23 = *(llvm::raw_ostream **)v3;
    v24 = *(_BYTE **)(*(_QWORD *)v3 + 32);
    if ((unint64_t)v24 < *(_QWORD *)(*(_QWORD *)v3 + 24))
      goto LABEL_21;
    goto LABEL_23;
  }
  return this;
}

llvm::raw_ostream *PrintShuffleMask(llvm::raw_ostream *this, uint64_t a2, int *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *result;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  llvm::raw_ostream *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  _DWORD *v30;
  uint64_t v31;

  v8 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v8) <= 2)
  {
    llvm::raw_ostream::write(this, ", <", 3uLL);
    if (*(_BYTE *)(a2 + 8) != 19)
      goto LABEL_8;
LABEL_5:
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v9) > 8)
    {
      *(_BYTE *)(v9 + 8) = 32;
      *(_QWORD *)v9 = *(_QWORD *)"vscale x ";
      *((_QWORD *)this + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(this, "vscale x ", 9uLL);
    }
    goto LABEL_8;
  }
  *(_BYTE *)(v8 + 2) = 60;
  *(_WORD *)v8 = 8236;
  *((_QWORD *)this + 4) += 3;
  if (*(_BYTE *)(a2 + 8) == 19)
    goto LABEL_5;
LABEL_8:
  result = llvm::raw_ostream::operator<<(this, a4);
  v11 = (_QWORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v11 > 7uLL)
  {
    *v11 = 0x203E323369207820;
    *((_QWORD *)result + 4) += 8;
    if (!a4)
    {
LABEL_15:
      v14 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 0xEuLL)
      {
        v15 = "zeroinitializer";
        v16 = this;
        v17 = 15;
        return llvm::raw_ostream::write(v16, v15, v17);
      }
      qmemcpy(v14, "zeroinitializer", 15);
      v18 = *((_QWORD *)this + 4) + 15;
      goto LABEL_38;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(result, " x i32> ", 8uLL);
    if (!a4)
      goto LABEL_15;
  }
  v12 = 0;
  v13 = 4 * a4;
  while (!a3[v12 / 4])
  {
    v12 += 4;
    if (v13 == v12)
      goto LABEL_15;
  }
  v19 = 0;
  do
  {
    if (a3[v19 / 4] != -1)
    {
      v21 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v21)
      {
        result = llvm::raw_ostream::write(this, "<", 1uLL);
      }
      else
      {
        *v21 = 60;
        ++*((_QWORD *)this + 4);
      }
      v22 = *a3;
      v23 = (_DWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v23 >= 4uLL)
      {
        *v23 = 540160873;
        *((_QWORD *)this + 4) += 4;
        if ((_DWORD)v22 != -1)
          goto LABEL_30;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "i32 ", 4uLL);
        if ((_DWORD)v22 != -1)
        {
LABEL_30:
          result = llvm::raw_ostream::operator<<(this, v22);
LABEL_35:
          if (a4 == 1)
          {
LABEL_36:
            v25 = (_BYTE *)*((_QWORD *)this + 4);
            if (*((_BYTE **)this + 3) != v25)
            {
              *v25 = 62;
              v18 = *((_QWORD *)this + 4) + 1;
              goto LABEL_38;
            }
            v15 = ">";
            v16 = this;
            v17 = 1;
            return llvm::raw_ostream::write(v16, v15, v17);
          }
          v26 = a3 + 1;
          v27 = v13 - 4;
          while (1)
          {
            v28 = *v26;
            v29 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v29 > 1uLL)
            {
              *v29 = 8236;
              *((_QWORD *)this + 4) += 2;
              v30 = (_DWORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v30 > 3uLL)
              {
LABEL_44:
                *v30 = 540160873;
                *((_QWORD *)this + 4) += 4;
                if ((_DWORD)v28 == -1)
                  goto LABEL_48;
                goto LABEL_40;
              }
            }
            else
            {
              result = llvm::raw_ostream::write(this, ", ", 2uLL);
              v30 = (_DWORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v30 > 3uLL)
                goto LABEL_44;
            }
            result = llvm::raw_ostream::write(this, "i32 ", 4uLL);
            if ((_DWORD)v28 == -1)
            {
LABEL_48:
              v31 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v31) > 5)
              {
                *(_WORD *)(v31 + 4) = 28271;
                *(_DWORD *)v31 = 1936289648;
                *((_QWORD *)this + 4) += 6;
              }
              else
              {
                result = llvm::raw_ostream::write(this, "poison", 6uLL);
              }
              goto LABEL_41;
            }
LABEL_40:
            result = llvm::raw_ostream::operator<<(this, v28);
LABEL_41:
            ++v26;
            v27 -= 4;
            if (!v27)
              goto LABEL_36;
          }
        }
      }
      v24 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v24) >= 6)
      {
        *(_WORD *)(v24 + 4) = 28271;
        *(_DWORD *)v24 = 1936289648;
        *((_QWORD *)this + 4) += 6;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "poison", 6uLL);
      }
      goto LABEL_35;
    }
    v19 += 4;
  }
  while (v13 != v19);
  v20 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v20) <= 5)
  {
    v15 = "poison";
    v16 = this;
    v17 = 6;
    return llvm::raw_ostream::write(v16, v15, v17);
  }
  *(_WORD *)(v20 + 4) = 28271;
  *(_DWORD *)v20 = 1936289648;
  v18 = *((_QWORD *)this + 4) + 6;
LABEL_38:
  *((_QWORD *)this + 4) = v18;
  return result;
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::printInfoComment(_anonymous_namespace_::AssemblyWriter *this, const llvm::Value *a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _DWORD *v6;
  uint64_t BasePtr;
  llvm::Type *v8;
  BOOL v9;
  const llvm::Value *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *v16;
  _WORD *v17;
  uint64_t DerivedPtr;
  BOOL v19;
  const llvm::Value *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  void *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v29;
  void *v30;
  uint64_t (**v31)(_anonymous_namespace_::AsmWriterContext *__hidden, const llvm::Metadata *);
  char *v32;
  uint64_t v33;
  uint64_t v34;

  if (*((_BYTE *)a2 + 16) == 84)
  {
    v4 = *((_QWORD *)a2 - 4);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 16)
        && *(_QWORD *)(v4 + 24) == *((_QWORD *)a2 + 10)
        && (*(_BYTE *)(v4 + 33) & 0x20) != 0
        && *(_DWORD *)(v4 + 36) == 134)
      {
        v5 = *(llvm::raw_ostream **)this;
        v6 = *(_DWORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v6 > 3uLL)
        {
          *v6 = 673200928;
          *((_QWORD *)v5 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v5, " ; (", 4uLL);
        }
        BasePtr = llvm::GCRelocateInst::getBasePtr(a2, a2);
        if (BasePtr)
        {
          v10 = (const llvm::Value *)BasePtr;
          v11 = *((_QWORD *)this + 4);
          v31 = &off_1E0E15E00;
          v32 = (char *)this + 40;
          v12 = *(llvm::raw_ostream **)this;
          v13 = *((_QWORD *)this + 1);
          v33 = v11;
          v34 = v13;
          WriteAsOperandInternal(v12, v10, (_anonymous_namespace_::TypePrinting **)&v31, v9);
        }
        else
        {
          v14 = *(llvm::raw_ostream **)this;
          v15 = *(void **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v15 > 0xEuLL)
          {
            qmemcpy(v15, "<null operand!>", 15);
            *((_QWORD *)v14 + 4) += 15;
          }
          else
          {
            llvm::raw_ostream::write(v14, "<null operand!>", 0xFuLL);
          }
        }
        v16 = *(llvm::raw_ostream **)this;
        v17 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v17 > 1uLL)
        {
          *v17 = 8236;
          *((_QWORD *)v16 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v16, ", ", 2uLL);
        }
        DerivedPtr = llvm::GCRelocateInst::getDerivedPtr(a2, v8);
        if (DerivedPtr)
        {
          v20 = (const llvm::Value *)DerivedPtr;
          v21 = *((_QWORD *)this + 4);
          v31 = &off_1E0E15E00;
          v32 = (char *)this + 40;
          v22 = *(llvm::raw_ostream **)this;
          v23 = *((_QWORD *)this + 1);
          v33 = v21;
          v34 = v23;
          WriteAsOperandInternal(v22, v20, (_anonymous_namespace_::TypePrinting **)&v31, v19);
        }
        else
        {
          v24 = *(llvm::raw_ostream **)this;
          v25 = *(void **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v25 > 0xEuLL)
          {
            qmemcpy(v25, "<null operand!>", 15);
            *((_QWORD *)v24 + 4) += 15;
          }
          else
          {
            llvm::raw_ostream::write(v24, "<null operand!>", 0xFuLL);
          }
        }
        v26 = *(llvm::raw_ostream **)this;
        v27 = *(_BYTE **)(*(_QWORD *)this + 32);
        if (*(_BYTE **)(*(_QWORD *)this + 24) == v27)
        {
          llvm::raw_ostream::write(v26, ")", 1uLL);
        }
        else
        {
          *v27 = 41;
          ++*((_QWORD *)v26 + 4);
        }
      }
    }
  }
  result = (llvm::raw_ostream *)*((_QWORD *)this + 28);
  if (result)
    return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *, const llvm::Value *, _QWORD))(*(_QWORD *)result + 48))(result, a2, *(_QWORD *)this);
  if (*((unsigned __int8 *)a2 + 16) >= 0x1Cu && *((_QWORD *)a2 + 8))
  {
    v29 = *(llvm::raw_ostream **)this;
    v30 = *(void **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v30 > 0xDuLL)
    {
      qmemcpy(v30, "; dbgmarker @ ", 14);
      *((_QWORD *)v29 + 4) += 14;
    }
    else
    {
      v29 = llvm::raw_ostream::write(v29, "; dbgmarker @ ", 0xEuLL);
    }
    return llvm::raw_ostream::operator<<(v29, *((_QWORD *)a2 + 8));
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::writeSyncScope(llvm::raw_ostream *this, const llvm::LLVMContext *a2, unsigned int a3)
{
  llvm::raw_ostream **v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;

  if (a3 != 1)
  {
    v4 = (llvm::raw_ostream **)this;
    if (*((_DWORD *)this + 114))
    {
      v5 = *(llvm::raw_ostream **)this;
      v6 = *((_QWORD *)*v4 + 4);
      if ((unint64_t)(*((_QWORD *)*v4 + 3) - v6) <= 0xB)
      {
LABEL_4:
        llvm::raw_ostream::write(v5, " syncscope(\"", 0xCuLL);
        goto LABEL_7;
      }
    }
    else
    {
      llvm::LLVMContext::getSyncScopeNames((uint64_t *)a2, (uint64_t)this + 448);
      v5 = *v4;
      v6 = *((_QWORD *)*v4 + 4);
      if ((unint64_t)(*((_QWORD *)*v4 + 3) - v6) <= 0xB)
        goto LABEL_4;
    }
    *(_DWORD *)(v6 + 8) = 573072752;
    *(_QWORD *)v6 = *(_QWORD *)" syncscope(\"";
    *((_QWORD *)v5 + 4) += 12;
LABEL_7:
    v7 = (uint64_t)v4[56] + 16 * a3;
    llvm::printEscapedString(*(llvm::raw_ostream **)v7, *(_QWORD *)(v7 + 8), *v4);
    this = *v4;
    v8 = (_WORD *)*((_QWORD *)*v4 + 4);
    if (*((_QWORD *)*v4 + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 10530;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(this, "\")", 2uLL);
    }
  }
  return this;
}

llvm::raw_ostream *PrintThreadLocalModel(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  switch((int)result)
  {
    case 1:
      v2 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v2 > 0xCuLL)
      {
        qmemcpy(v2, "thread_local ", 13);
        v6 = *((_QWORD *)this + 4) + 13;
        goto LABEL_15;
      }
      result = llvm::raw_ostream::write(this, "thread_local ", 0xDuLL);
      break;
    case 2:
      v5 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x1AuLL)
      {
        qmemcpy(v5, "thread_local(localdynamic) ", 27);
        v6 = *((_QWORD *)this + 4) + 27;
        goto LABEL_15;
      }
      result = llvm::raw_ostream::write(this, "thread_local(localdynamic) ", 0x1BuLL);
      break;
    case 3:
      v3 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v3 > 0x19uLL)
      {
        qmemcpy(v3, "thread_local(initialexec) ", 26);
        v6 = *((_QWORD *)this + 4) + 26;
        goto LABEL_15;
      }
      result = llvm::raw_ostream::write(this, "thread_local(initialexec) ", 0x1AuLL);
      break;
    case 4:
      v4 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x17uLL)
      {
        qmemcpy(v4, "thread_local(localexec) ", 24);
        v6 = *((_QWORD *)this + 4) + 24;
LABEL_15:
        *((_QWORD *)this + 4) = v6;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "thread_local(localexec) ", 0x18uLL);
      }
      break;
    default:
      return result;
  }
  return result;
}

void `anonymous namespace'::MDTreeAsmWriterContext::onWriteMetadataAsOperand(_anonymous_namespace_::MDTreeAsmWriterContext *this, const llvm::Metadata *a2)
{
  llvm::SmallPtrSetImplBase *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  void (**v8)(llvm::formatted_raw_ostream *__hidden);
  int v9;
  BOOL v10;
  int v11;
  _WORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  void **v29;
  void *__p[2];
  uint64_t v31;
  void (**v32)(llvm::formatted_raw_ostream *__hidden);
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;

  v6 = (_QWORD *)*((_QWORD *)this + 23);
  v5 = (_QWORD *)*((_QWORD *)this + 24);
  v4 = (_anonymous_namespace_::MDTreeAsmWriterContext *)((char *)this + 184);
  if (v5 != v6)
    goto LABEL_2;
  v13 = *((unsigned int *)this + 51);
  if (!(_DWORD)v13)
  {
LABEL_25:
    if (v13 < *((_DWORD *)this + 50))
    {
      *((_DWORD *)this + 51) = v13 + 1;
      v5[v13] = a2;
LABEL_3:
      __p[0] = 0;
      __p[1] = 0;
      v31 = 0;
      v22 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 1;
      v24 = 0;
      v25 = 0;
      v23 = 0;
      v21 = &unk_1E0E22B10;
      v29 = __p;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v21, 0, 0, 0);
      v8 = (void (**)(llvm::formatted_raw_ostream *__hidden))(*((_DWORD *)this + 8) + 1);
      *((_DWORD *)this + 8) = (_DWORD)v8;
      v32 = v8;
      v33 = "";
      llvm::SmallVectorImpl<std::pair<unsigned int,std::string>>::emplace_back<std::pair<unsigned int,char const*>>((uint64_t)this + 40, (uint64_t)&v32);
      v9 = *((_DWORD *)this + 12);
      LODWORD(v33) = 0;
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v35 = 0;
      v36 = 0;
      v34 = 0;
      v32 = off_1E0E22CB0;
      v40 = 0;
      v41 = 0;
      v42 = &v44;
      v43 = xmmword_181234800;
      llvm::formatted_raw_ostream::setStream((llvm::raw_ostream **)&v32, (llvm::raw_ostream *)&v21);
      WriteAsOperandInternal((llvm::raw_ostream *)&v32, a2, (_anonymous_namespace_::TypePrinting **)this, v10);
      v11 = *(unsigned __int8 *)a2;
      if ((v11 - 8) < 0x1C || (v11 - 5) <= 1)
      {
        v12 = (_WORD *)v36;
        if ((unint64_t)(v35 - v36) > 2)
        {
          *(_BYTE *)(v36 + 2) = 32;
          *v12 = 15648;
          v36 += 3;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v32, " = ", 3uLL);
        }
        WriteMDNodeBodyInternal((llvm::raw_ostream *)&v32, a2, this);
      }
      v32 = off_1E0E22CB0;
      if (v36 != v34)
        llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v32);
      llvm::formatted_raw_ostream::releaseStream((llvm::formatted_raw_ostream *)&v32);
      if (v42 != &v44)
        free(v42);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
      v17 = v29;
      v18 = *((_QWORD *)this + 5) + 32 * (v9 - 1);
      v19 = v18 + 8;
      if (*(char *)(v18 + 31) < 0)
        operator delete(*(void **)v19);
      v20 = *(_OWORD *)v17;
      *(_QWORD *)(v19 + 16) = v17[2];
      *(_OWORD *)v19 = v20;
      *((_BYTE *)v17 + 23) = 0;
      *(_BYTE *)v17 = 0;
      --*((_DWORD *)this + 8);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
      if (SHIBYTE(v31) < 0)
        operator delete(__p[0]);
      return;
    }
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big(v4, a2);
    if (!v7)
      return;
    goto LABEL_3;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = v5;
  while ((const llvm::Metadata *)*v16 != a2)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_25;
      *v14 = a2;
      --*((_DWORD *)this + 52);
      goto LABEL_3;
    }
  }
}

void `anonymous namespace'::MDTreeAsmWriterContext::~MDTreeAsmWriterContext(_anonymous_namespace_::MDTreeAsmWriterContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  const char *v10;
  size_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E0E18E98;
  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = v3 + 32 * v2;
    do
    {
      v12 = (llvm::raw_ostream *)*((_QWORD *)this + 31);
      v13 = (_BYTE *)*((_QWORD *)v12 + 4);
      if (*((_BYTE **)v12 + 3) == v13)
      {
        llvm::raw_ostream::write(v12, "\n", 1uLL);
      }
      else
      {
        *v13 = 10;
        ++*((_QWORD *)v12 + 4);
      }
      v5 = llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 31), 2 * *(_DWORD *)v3);
      v8 = *(const char **)(v3 + 8);
      v7 = v3 + 8;
      v6 = v8;
      v9 = *(char *)(v7 + 23);
      if (v9 >= 0)
        v10 = (const char *)v7;
      else
        v10 = v6;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(v7 + 23);
      else
        v11 = *(_QWORD *)(v7 + 8);
      llvm::raw_ostream::write(v5, v10, v11);
      v3 = v7 + 24;
    }
    while (v3 != v4);
  }
  v14 = (void *)*((_QWORD *)this + 24);
  if (v14 != *((void **)this + 23))
    free(v14);
  v15 = (char *)*((_QWORD *)this + 5);
  v16 = *((unsigned int *)this + 12);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      if (v15[v17 - 1] < 0)
        operator delete(*(void **)&v15[v17 - 24]);
      v17 -= 32;
    }
    while (v17);
    v15 = (char *)*((_QWORD *)this + 5);
  }
  if (v15 != (char *)this + 56)
    free(v15);
}

{
  void *v1;

  operator delete(v1);
}

uint64_t llvm::SmallVectorImpl<std::pair<unsigned int,std::string>>::emplace_back<std::pair<unsigned int,char const*>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 < *(_DWORD *)(a1 + 12))
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)a1 + 32 * v3;
    *(_DWORD *)v5 = *(_DWORD *)a2;
    v6 = (_QWORD *)(v5 + 8);
    v7 = *(const char **)(a2 + 8);
    v8 = strlen(v7);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v10 = v8 | 7;
      v11 = v10 + 1;
      v12 = operator new(v10 + 1);
      *v6 = v12;
      v13 = v4 + 32 * v3;
      *(_QWORD *)(v13 + 16) = v9;
      *(_QWORD *)(v13 + 24) = v11 | 0x8000000000000000;
      v6 = v12;
    }
    else
    {
      *(_BYTE *)(v5 + 31) = v8;
      if (!v8)
        goto LABEL_10;
    }
    memmove(v6, v7, v9);
LABEL_10:
    *((_BYTE *)v6 + v9) = 0;
    v14 = (*(_DWORD *)(a1 + 8) + 1);
    *(_DWORD *)(a1 + 8) = v14;
    return *(_QWORD *)a1 + 32 * v14 - 32;
  }
  return llvm::SmallVectorTemplateBase<std::pair<unsigned int,std::string>,false>::growAndEmplaceBack<std::pair<unsigned int,char const*>>(a1, a2);
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned int,std::string>,false>::growAndEmplaceBack<std::pair<unsigned int,char const*>>(uint64_t a1, uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v26;

  v26 = 0;
  v4 = (char *)(a1 + 16);
  v5 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 32, &v26);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = &v5[32 * v6];
  *v7 = *(_DWORD *)a2;
  v8 = v7 + 2;
  v9 = *(const char **)(a2 + 8);
  v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    *v8 = v16;
    v17 = &v5[32 * v6];
    *((_QWORD *)v17 + 2) = v11;
    *((_QWORD *)v17 + 3) = v15 | 0x8000000000000000;
    v8 = v16;
  }
  else
  {
    v5[32 * v6 + 31] = v10;
    if (!v10)
    {
      *(_BYTE *)v8 = 0;
      v12 = *(char **)a1;
      v13 = *(unsigned int *)(a1 + 8);
      if (!(_DWORD)v13)
        goto LABEL_18;
      goto LABEL_10;
    }
  }
  memmove(v8, v9, v11);
  *((_BYTE *)v8 + v11) = 0;
  v12 = *(char **)a1;
  v13 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v13)
    goto LABEL_18;
LABEL_10:
  v18 = &v12[32 * v13];
  v19 = v5;
  do
  {
    *(_DWORD *)v19 = *(_DWORD *)v12;
    v20 = *(_OWORD *)(v12 + 8);
    *((_QWORD *)v19 + 3) = *((_QWORD *)v12 + 3);
    *(_OWORD *)(v19 + 8) = v20;
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 3) = 0;
    *((_QWORD *)v12 + 1) = 0;
    v12 += 32;
    v19 += 32;
  }
  while (v12 != v18);
  v12 = *(char **)a1;
  v21 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v21)
  {
    v22 = 32 * v21;
    do
    {
      if (v12[v22 - 1] < 0)
        operator delete(*(void **)&v12[v22 - 24]);
      v22 -= 32;
    }
    while (v22);
    v12 = *(char **)a1;
  }
LABEL_18:
  v23 = v26;
  if (v12 != v4)
    free(v12);
  *(_QWORD *)a1 = v5;
  v24 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v24;
  *(_DWORD *)(a1 + 12) = v23;
  return (uint64_t)&v5[32 * v24 - 32];
}

_QWORD *llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4;
        *v13 = -4;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v23 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 4) != 0xFFFFFFFFFFFFFFFCLL)
        {
          v24 = *(_DWORD *)(a1 + 16) - 1;
          v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          v22 = *(_QWORD *)a1 + 16 * v25;
          v26 = *(_QWORD *)v22;
          if (v23 != *(_QWORD *)v22)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8;
              if (v29)
                v27 = v22;
              v30 = v25 + v28++;
              v25 = v30 & v24;
              v22 = *(_QWORD *)a1 + 16 * (v30 & v24);
              v26 = *(_QWORD *)v22;
              if (v23 == *(_QWORD *)v22)
                goto LABEL_24;
            }
            if (v27)
              v22 = v27;
          }
LABEL_24:
          *(_QWORD *)v22 = v23;
          *(_DWORD *)(v22 + 8) = *((_DWORD *)v16 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = result + 2;
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4;
      *v19 = -4;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[2 * v17];
      do
      {
        *v10 = -4;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

unint64_t llvm::Attribute::get(uint64_t *a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t NodeOrInsertPos;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  char *buffer;
  uint64_t v20;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2 - 78;
  v6 = *a1;
  v24 = &v26;
  v26 = a2;
  v25 = 0x2000000001;
  if ((a2 - 78) <= 9)
  {
    v27 = a3;
    LODWORD(v25) = 3;
  }
  v23 = 0;
  NodeOrInsertPos = (unint64_t)llvm::FoldingSetBase::FindNodeOrInsertPos(v6 + 264, (uint64_t)&v24, &v23, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    v8 = *(_QWORD *)(v6 + 2152);
    if (v5 >= 0xA)
    {
      *(_QWORD *)(v6 + 2152) = v8 + 16;
      v15 = *(_QWORD *)(v6 + 2072);
      if (v15)
        v16 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 16 > *(_QWORD *)(v6 + 2080) - v15;
      else
        v16 = 1;
      if (v16)
      {
        v17 = *(_DWORD *)(v6 + 2096) >> 7;
        if (v17 >= 0x1E)
          LOBYTE(v17) = 30;
        v18 = 4096 << v17;
        buffer = (char *)llvm::allocate_buffer(4096 << v17, (std::align_val_t)8uLL);
        v20 = *(unsigned int *)(v6 + 2096);
        if (v20 >= *(_DWORD *)(v6 + 2100))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 2088, (void *)(v6 + 2104), v20 + 1, 8);
          LODWORD(v20) = *(_DWORD *)(v6 + 2096);
        }
        *(_QWORD *)(*(_QWORD *)(v6 + 2088) + 8 * v20) = buffer;
        ++*(_DWORD *)(v6 + 2096);
        *(_QWORD *)(v6 + 2080) = &buffer[v18];
        NodeOrInsertPos = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        NodeOrInsertPos = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(_QWORD *)(v6 + 2072) = NodeOrInsertPos + 16;
      *(_QWORD *)NodeOrInsertPos = 0;
      *(_BYTE *)(NodeOrInsertPos + 8) = 0;
      *(_DWORD *)(NodeOrInsertPos + 12) = a2;
    }
    else
    {
      *(_QWORD *)(v6 + 2152) = v8 + 24;
      v9 = *(_QWORD *)(v6 + 2072);
      if (v9)
        v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v9 + 24 > *(_QWORD *)(v6 + 2080) - v9;
      else
        v10 = 1;
      if (v10)
      {
        v11 = *(_DWORD *)(v6 + 2096) >> 7;
        if (v11 >= 0x1E)
          LOBYTE(v11) = 30;
        v12 = 4096 << v11;
        v13 = (char *)llvm::allocate_buffer(4096 << v11, (std::align_val_t)8uLL);
        v14 = *(unsigned int *)(v6 + 2096);
        if (v14 >= *(_DWORD *)(v6 + 2100))
        {
          v22 = v13;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 2088, (void *)(v6 + 2104), v14 + 1, 8);
          v13 = v22;
          LODWORD(v14) = *(_DWORD *)(v6 + 2096);
        }
        *(_QWORD *)(*(_QWORD *)(v6 + 2088) + 8 * v14) = v13;
        ++*(_DWORD *)(v6 + 2096);
        *(_QWORD *)(v6 + 2080) = &v13[v12];
        NodeOrInsertPos = (unint64_t)(v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        NodeOrInsertPos = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(_QWORD *)(v6 + 2072) = NodeOrInsertPos + 24;
      *(_QWORD *)NodeOrInsertPos = 0;
      *(_BYTE *)(NodeOrInsertPos + 8) = 1;
      *(_DWORD *)(NodeOrInsertPos + 12) = a2;
      *(_QWORD *)(NodeOrInsertPos + 16) = a3;
    }
    llvm::FoldingSetBase::InsertNode(v6 + 264, (uint64_t *)NodeOrInsertPos, v23, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v24 != &v26)
    free(v24);
  return NodeOrInsertPos;
}

{
  uint64_t v5;
  unint64_t NodeOrInsertPos;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  char *buffer;
  uint64_t v12;
  char *v14;
  uint64_t v15;
  void *v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v15 = 0;
  v16[0] = &v17;
  v17 = a2;
  v18 = a3;
  v16[1] = (void *)0x2000000003;
  NodeOrInsertPos = (unint64_t)llvm::FoldingSetBase::FindNodeOrInsertPos(v5 + 264, (uint64_t)v16, &v15, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    *(_QWORD *)(v5 + 2152) += 24;
    v7 = *(_QWORD *)(v5 + 2072);
    if (v7)
      v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 24 > *(_QWORD *)(v5 + 2080) - v7;
    else
      v8 = 1;
    if (v8)
    {
      v9 = *(_DWORD *)(v5 + 2096) >> 7;
      if (v9 >= 0x1E)
        LOBYTE(v9) = 30;
      v10 = 4096 << v9;
      buffer = (char *)llvm::allocate_buffer(4096 << v9, (std::align_val_t)8uLL);
      v12 = *(unsigned int *)(v5 + 2096);
      if (v12 >= *(_DWORD *)(v5 + 2100))
      {
        v14 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 2088, (void *)(v5 + 2104), v12 + 1, 8);
        buffer = v14;
        LODWORD(v12) = *(_DWORD *)(v5 + 2096);
      }
      *(_QWORD *)(*(_QWORD *)(v5 + 2088) + 8 * v12) = buffer;
      ++*(_DWORD *)(v5 + 2096);
      *(_QWORD *)(v5 + 2080) = &buffer[v10];
      NodeOrInsertPos = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      NodeOrInsertPos = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)(v5 + 2072) = NodeOrInsertPos + 24;
    *(_QWORD *)NodeOrInsertPos = 0;
    *(_BYTE *)(NodeOrInsertPos + 8) = 3;
    *(_DWORD *)(NodeOrInsertPos + 12) = a2;
    *(_QWORD *)(NodeOrInsertPos + 16) = a3;
    llvm::FoldingSetBase::InsertNode(v5 + 264, (uint64_t *)NodeOrInsertPos, v15, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v16[0] != &v17)
    free(v16[0]);
  return NodeOrInsertPos;
}

_QWORD *llvm::Attribute::get(uint64_t *a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t a5)
{
  size_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *NodeOrInsertPos;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  void *v17[2];
  _QWORD v18[17];

  v7 = a3;
  v18[16] = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  llvm::FoldingSetNodeID::AddString((uint64_t)v17, a2, a3);
  if (a5)
    llvm::FoldingSetNodeID::AddString((uint64_t)v17, a4, a5);
  v16 = 0;
  v10 = v9 + 264;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(v9 + 264, (uint64_t)v17, &v16, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(v9 + 2072), v7 + a5 + 26, 3);
    NodeOrInsertPos = (_QWORD *)v12;
    *(_QWORD *)v12 = 0;
    *(_BYTE *)(v12 + 8) = 2;
    *(_DWORD *)(v12 + 12) = v7;
    *(_DWORD *)(v12 + 16) = a5;
    v13 = v12 + 24;
    if (v7)
      memmove((void *)(v12 + 24), a2, v7);
    *(_BYTE *)(v13 + v7) = 0;
    if (a5)
    {
      memmove((void *)(v13 + (v7 + 1)), a4, a5);
      LODWORD(v7) = *((_DWORD *)NodeOrInsertPos + 3);
      v14 = *((_DWORD *)NodeOrInsertPos + 4) + 1;
    }
    else
    {
      v14 = 1;
    }
    *(_BYTE *)(v13 + (v7 + v14)) = 0;
    llvm::FoldingSetBase::InsertNode(v10, NodeOrInsertPos, v16, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v17[0] != v18)
    free(v17[0]);
  return NodeOrInsertPos;
}

unint64_t llvm::Attribute::getWithAlignment(uint64_t *a1, char a2)
{
  return llvm::Attribute::get(a1, 78, 1 << a2);
}

unint64_t llvm::Attribute::getWithByValType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 73, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithStructRetType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 77, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithInAllocaType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 75, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithMemoryEffects(uint64_t *a1, unsigned int a2)
{
  return llvm::Attribute::get(a1, 83, a2);
}

uint64_t llvm::Attribute::getAttrKindFromName(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 == 28520 && *(_BYTE *)(a1 + 2) == 116)
      {
        result = 10;
      }
      else
      {
        if (*(_WORD *)a1 != 29555 || *(_BYTE *)(a1 + 2) != 112)
          goto LABEL_388;
        result = 61;
      }
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x646C6F63:
          result = 5;
          break;
        case 0x7473656E:
          result = 18;
          break;
        case 0x74657273:
          result = 77;
          break;
        default:
          goto LABEL_388;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 == 1701998185 && *(_BYTE *)(a1 + 4) == 103)
      {
        result = 12;
      }
      else if (*(_DWORD *)a1 == 1701536110 && *(_BYTE *)(a1 + 4) == 100)
      {
        result = 17;
      }
      else if (*(_DWORD *)a1 == 1702000994 && *(_BYTE *)(a1 + 4) == 102)
      {
        result = 72;
      }
      else if (*(_DWORD *)a1 == 1635154274 && *(_BYTE *)(a1 + 4) == 108)
      {
        result = 73;
      }
      else
      {
        if (*(_DWORD *)a1 != 1734962273 || *(_BYTE *)(a1 + 4) != 110)
          goto LABEL_388;
        result = 78;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 == 1634561385 && *(_WORD *)(a1 + 4) == 26482)
      {
        result = 11;
      }
      else if (*(_DWORD *)a1 == 1919315822 && *(_WORD *)(a1 + 4) == 25957)
      {
        result = 25;
      }
      else if (*(_DWORD *)a1 == 2037608302 && *(_WORD *)(a1 + 4) == 25454)
      {
        result = 35;
      }
      else if (*(_DWORD *)a1 == 1919972211 && *(_WORD *)(a1 + 4) == 29029)
      {
        result = 62;
      }
      else
      {
        if (*(_DWORD *)a1 != 1869440365 || *(_WORD *)(a1 + 4) != 31090)
          goto LABEL_388;
        result = 83;
      }
      break;
    case 7:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)(a1 + 3) == 1852404844)
      {
        result = 4;
      }
      else if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)(a1 + 3) == 1702521203)
      {
        result = 15;
      }
      else if (*(_DWORD *)a1 == 1818324846 && *(_DWORD *)(a1 + 3) == 1935763820)
      {
        result = 19;
      }
      else if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)(a1 + 3) == 1701278309)
      {
        result = 28;
      }
      else if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)(a1 + 3) == 1717920878)
      {
        result = 36;
      }
      else if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)(a1 + 3) == 1819047278)
      {
        result = 39;
      }
      else if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)(a1 + 3) == 1702521203)
      {
        result = 43;
      }
      else if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)(a1 + 3) == 1701736302)
      {
        result = 44;
      }
      else if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)(a1 + 3) == 1954047342)
      {
        result = 50;
      }
      else if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)(a1 + 3) == 1954047343)
      {
        result = 71;
      }
      else
      {
        if (*(_DWORD *)a1 != 1635022709 || *(_DWORD *)(a1 + 3) != 1701601889)
          goto LABEL_388;
        result = 86;
      }
      break;
    case 8:
      switch(*(_QWORD *)a1)
      {
        case 0x727470636F6C6C61:
          result = 2;
          break;
        case 0x656E696C6E696F6ELL:
          result = 27;
          break;
        case 0x6E72757465726F6ELL:
          result = 32;
          break;
        case 0x646E69776E756F6ELL:
          result = 37;
          break;
        case 0x677562656474706FLL:
          result = 42;
          break;
        case 0x656E6F6E64616572:
          result = 46;
          break;
        case 0x796C6E6F64616572:
          result = 47;
          break;
        case 0x64656E7275746572:
          result = 48;
          break;
        case 0x7066746369727473:
          result = 64;
          break;
        case 0x656C626174697277:
          result = 69;
          break;
        case 0x61636F6C6C616E69:
          result = 75;
          break;
        default:
          goto LABEL_388;
      }
      break;
    case 9:
      if (*(_QWORD *)a1 == 0x6C626174706D756ALL && *(_BYTE *)(a1 + 8) == 101)
      {
        result = 14;
      }
      else if (*(_QWORD *)a1 == 0x69746C6975626F6ELL && *(_BYTE *)(a1 + 8) == 110)
      {
        result = 20;
      }
      else if (*(_QWORD *)a1 == 0x7275747061636F6ELL && *(_BYTE *)(a1 + 8) == 101)
      {
        result = 22;
      }
      else if (*(_QWORD *)a1 == 0x6C69666F72706F6ELL && *(_BYTE *)(a1 + 8) == 101)
      {
        result = 29;
      }
      else if (*(_QWORD *)a1 == 0x7372756365726F6ELL && *(_BYTE *)(a1 + 8) == 101)
      {
        result = 30;
      }
      else if (*(_QWORD *)a1 == 0x6E6F7A6465726F6ELL && *(_BYTE *)(a1 + 8) == 101)
      {
        result = 31;
      }
      else if (*(_QWORD *)a1 == 0x6361747365666173 && *(_BYTE *)(a1 + 8) == 107)
      {
        result = 51;
      }
      else if (*(_QWORD *)a1 == 0x6E6F727473707373 && *(_BYTE *)(a1 + 8) == 103)
      {
        result = 63;
      }
      else if (*(_QWORD *)a1 == 0x6C65737466697773 && *(_BYTE *)(a1 + 8) == 102)
      {
        result = 67;
      }
      else if (*(_QWORD *)a1 == 0x6C6E6F6574697277 && *(_BYTE *)(a1 + 8) == 121)
      {
        result = 70;
      }
      else if (*(_QWORD *)a1 == 0x6E696B636F6C6C61 && *(_BYTE *)(a1 + 8) == 100)
      {
        result = 79;
      }
      else if (*(_QWORD *)a1 == 0x7A6973636F6C6C61 && *(_BYTE *)(a1 + 8) == 101)
      {
        result = 80;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x73616C6370666F6ELL || *(_BYTE *)(a1 + 8) != 115)
          goto LABEL_388;
        result = 84;
      }
      break;
    case 10:
      if (*(_QWORD *)a1 == 0x696C61636F6C6C61 && *(_WORD *)(a1 + 8) == 28263)
      {
        result = 1;
      }
      else if (*(_QWORD *)a1 == 0x65677265766E6F63 && *(_WORD *)(a1 + 8) == 29806)
      {
        result = 6;
      }
      else if (*(_QWORD *)a1 == 0x6968656E696C6E69 && *(_WORD *)(a1 + 8) == 29806)
      {
        result = 13;
      }
      else if (*(_QWORD *)a1 == 0x61626C6C61636F6ELL && *(_WORD *)(a1 + 8) == 27491)
      {
        result = 21;
      }
      else if (*(_QWORD *)a1 == 0x6568635F66636F6ELL && *(_WORD *)(a1 + 8) == 27491)
      {
        result = 23;
      }
      else if (*(_QWORD *)a1 == 0x7973617466697773 && *(_WORD *)(a1 + 8) == 25454)
      {
        result = 65;
      }
      else if (*(_QWORD *)a1 == 0x7272657466697773 && *(_WORD *)(a1 + 8) == 29295)
      {
        result = 66;
      }
      else if (*(_QWORD *)a1 == 0x757465726C6C6977 && *(_WORD *)(a1 + 8) == 28274)
      {
        result = 68;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6174736E67696C61 || *(_WORD *)(a1 + 8) != 27491)
          goto LABEL_388;
        result = 85;
      }
      break;
    case 11:
      if (*(_QWORD *)a1 == 0x63696C7075646F6ELL && *(_QWORD *)(a1 + 3) == 0x65746163696C7075)
      {
        result = 24;
      }
      else if (*(_QWORD *)a1 == 0x62797A616C6E6F6ELL && *(_QWORD *)(a1 + 3) == 0x646E6962797A616CLL)
      {
        result = 38;
      }
      else if (*(_QWORD *)a1 == 0x666F727070696B73 && *(_QWORD *)(a1 + 3) == 0x656C69666F727070)
      {
        result = 58;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x74746E656D656C65 || *(_QWORD *)(a1 + 3) != 0x65707974746E656DLL)
          goto LABEL_388;
        result = 74;
      }
      break;
    case 12:
      if (*(_QWORD *)a1 == 0x6E69737961776C61 && *(_DWORD *)(a1 + 8) == 1701734764)
      {
        result = 3;
      }
      else if (*(_QWORD *)a1 == 0x676F72707473756DLL && *(_DWORD *)(a1 + 8) == 1936942450)
      {
        result = 16;
      }
      else if (*(_QWORD *)a1 == 0x74616C7563657073 && *(_DWORD *)(a1 + 8) == 1701601889)
      {
        result = 59;
      }
      else if (*(_QWORD *)a1 == 0x636F6C6C61657270 && *(_DWORD *)(a1 + 8) == 1684370529)
      {
        result = 76;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x725F656C61637376 || *(_DWORD *)(a1 + 8) != 1701277281)
          goto LABEL_388;
        result = 87;
      }
      break;
    case 13:
      if (*(_QWORD *)a1 == 0x7566726F6674706FLL && *(_QWORD *)(a1 + 5) == 0x676E697A7A756672)
      {
        result = 41;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x5F736E7275746572 || *(_QWORD *)(a1 + 5) != 0x65636977745F736ELL)
          goto LABEL_388;
        result = 49;
      }
      break;
    case 15:
      if (*(_QWORD *)a1 == 0x63696C706D696F6ELL && *(_QWORD *)(a1 + 7) == 0x74616F6C66746963)
      {
        result = 26;
      }
      else if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x6761746D656D5F65)
      {
        result = 54;
      }
      else if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x79726F6D656D5F65)
      {
        result = 55;
      }
      else if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x6461657268745F65)
      {
        result = 56;
      }
      else if (*(_QWORD *)a1 == 0x6163776F64616873 && *(_QWORD *)(a1 + 7) == 0x6B636174736C6C61)
      {
        result = 57;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6572656665726564 || *(_QWORD *)(a1 + 7) != 0x656C626165636E65)
          goto LABEL_388;
        result = 81;
      }
      break;
    case 16:
      if (*(_QWORD *)a1 != 0x657A6974696E6173 || *(_QWORD *)(a1 + 8) != 0x737365726464615FLL)
        goto LABEL_388;
      result = 52;
      break;
    case 17:
      if (*(_QWORD *)a1 == 0x6974696E61736F6ELL
        && *(_QWORD *)(a1 + 8) == 0x646E756F625F657ALL
        && *(_BYTE *)(a1 + 16) == 115)
      {
        result = 33;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x74696C7073657270
          || *(_QWORD *)(a1 + 8) != 0x6E6974756F726F63
          || *(_BYTE *)(a1 + 16) != 101)
        {
          goto LABEL_388;
        }
        result = 45;
      }
      break;
    case 18:
      if (*(_QWORD *)a1 != 0x657A6974696E6173
        || *(_QWORD *)(a1 + 8) != 0x657264646177685FLL
        || *(_WORD *)(a1 + 16) != 29555)
      {
        goto LABEL_388;
      }
      result = 53;
      break;
    case 19:
      if (*(_QWORD *)a1 == 0x745F7465725F6E66
        && *(_QWORD *)(a1 + 8) == 0x7478655F6B6E7568
        && *(_QWORD *)(a1 + 11) == 0x6E72657478655F6BLL)
      {
        result = 9;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6974696E61736F6ELL
          || *(_QWORD *)(a1 + 8) != 0x7265766F635F657ALL
          || *(_QWORD *)(a1 + 11) != 0x6567617265766F63)
        {
          goto LABEL_388;
        }
        result = 34;
      }
      break;
    case 21:
      if (*(_QWORD *)a1 != 0x696F705F6C6C756ELL
        || *(_QWORD *)(a1 + 8) != 0x5F73695F7265746ELL
        || *(_QWORD *)(a1 + 13) != 0x64696C61765F7369)
      {
        goto LABEL_388;
      }
      result = 40;
      break;
    case 23:
      if (*(_QWORD *)a1 != 0x6572656665726564
        || *(_QWORD *)(a1 + 8) != 0x5F656C626165636ELL
        || *(_QWORD *)(a1 + 15) != 0x6C6C756E5F726F5FLL)
      {
        goto LABEL_388;
      }
      result = 82;
      break;
    case 26:
      if (*(_QWORD *)a1 != 0x74616C7563657073
        || *(_QWORD *)(a1 + 8) != 0x64616F6C5F657669
        || *(_QWORD *)(a1 + 16) != 0x696E65647261685FLL
        || *(_WORD *)(a1 + 24) != 26478)
      {
        goto LABEL_388;
      }
      result = 60;
      break;
    case 31:
      if (*(_QWORD *)a1 != 0x6C6E6F5F6F726F63
        || *(_QWORD *)(a1 + 8) != 0x6F72747365645F79
        || *(_QWORD *)(a1 + 16) != 0x635F6E6568775F79
        || *(_QWORD *)(a1 + 23) != 0x6574656C706D6F63)
      {
        goto LABEL_388;
      }
      result = 7;
      break;
    case 33:
      if (*(_QWORD *)a1 != 0x5F656C6261736964
        || *(_QWORD *)(a1 + 8) != 0x657A6974696E6173
        || *(_QWORD *)(a1 + 16) != 0x757274736E695F72
        || *(_QWORD *)(a1 + 24) != 0x6F697461746E656DLL
        || *(_BYTE *)(a1 + 32) != 110)
      {
        goto LABEL_388;
      }
      result = 8;
      break;
    default:
LABEL_388:
      result = 0;
      break;
  }
  return result;
}

char *llvm::Attribute::getNameFromAttrKind(int a1)
{
  return off_1E0E5B568[a1];
}

uint64_t llvm::Attribute::isExistingAttribute(uint64_t a1, size_t a2)
{
  uint64_t result;
  BOOL v73;
  BOOL v77;
  BOOL v79;
  BOOL v83;
  BOOL v85;
  BOOL v89;
  BOOL v93;
  BOOL v95;

  switch(a2)
  {
    case 3uLL:
      if (*(_WORD *)a1 == 28520 && *(_BYTE *)(a1 + 2) == 116)
        goto LABEL_436;
      if (*(_WORD *)a1 == 29555 && *(_BYTE *)(a1 + 2) == 112)
        goto LABEL_436;
      return 0;
    case 4uLL:
      if (*(_DWORD *)a1 == 1684828003 || *(_DWORD *)a1 == 1953719662 || *(_DWORD *)a1 == 1952805491)
        goto LABEL_436;
      return 0;
    case 5uLL:
      if (*(_DWORD *)a1 == 1701998185 && *(_BYTE *)(a1 + 4) == 103)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1701536110 && *(_BYTE *)(a1 + 4) == 100)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1702000994 && *(_BYTE *)(a1 + 4) == 102)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1635154274 && *(_BYTE *)(a1 + 4) == 108)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1734962273 && *(_BYTE *)(a1 + 4) == 110)
        goto LABEL_436;
      return 0;
    case 6uLL:
      if (*(_DWORD *)a1 == 1634561385 && *(_WORD *)(a1 + 4) == 26482)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1919315822 && *(_WORD *)(a1 + 4) == 25957)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 2037608302 && *(_WORD *)(a1 + 4) == 25454)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1919972211 && *(_WORD *)(a1 + 4) == 29029)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1869440365 && *(_WORD *)(a1 + 4) == 31090)
        goto LABEL_436;
      return 0;
    case 7uLL:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)(a1 + 3) == 1852404844)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)(a1 + 3) == 1702521203)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1818324846 && *(_DWORD *)(a1 + 3) == 1935763820)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)(a1 + 3) == 1701278309)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)(a1 + 3) == 1717920878)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)(a1 + 3) == 1819047278)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)(a1 + 3) == 1702521203)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)(a1 + 3) == 1701736302)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)(a1 + 3) == 1954047342)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)(a1 + 3) == 1954047343)
        goto LABEL_436;
      if (*(_DWORD *)a1 == 1635022709 && *(_DWORD *)(a1 + 3) == 1701601889)
        goto LABEL_436;
      return 0;
    case 8uLL:
      if (*(_QWORD *)a1 == 0x727470636F6C6C61
        || *(_QWORD *)a1 == 0x656E696C6E696F6ELL
        || *(_QWORD *)a1 == 0x6E72757465726F6ELL
        || *(_QWORD *)a1 == 0x646E69776E756F6ELL
        || *(_QWORD *)a1 == 0x677562656474706FLL
        || *(_QWORD *)a1 == 0x656E6F6E64616572
        || *(_QWORD *)a1 == 0x796C6E6F64616572
        || *(_QWORD *)a1 == 0x64656E7275746572
        || *(_QWORD *)a1 == 0x7066746369727473
        || *(_QWORD *)a1 == 0x656C626174697277
        || *(_QWORD *)a1 == 0x61636F6C6C616E69)
      {
        goto LABEL_436;
      }
      return 0;
    case 9uLL:
      if (*(_QWORD *)a1 == 0x6C626174706D756ALL && *(_BYTE *)(a1 + 8) == 101)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x69746C6975626F6ELL && *(_BYTE *)(a1 + 8) == 110)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x7275747061636F6ELL && *(_BYTE *)(a1 + 8) == 101)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6C69666F72706F6ELL && *(_BYTE *)(a1 + 8) == 101)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x7372756365726F6ELL && *(_BYTE *)(a1 + 8) == 101)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6E6F7A6465726F6ELL && *(_BYTE *)(a1 + 8) == 101)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6361747365666173 && *(_BYTE *)(a1 + 8) == 107)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6E6F727473707373 && *(_BYTE *)(a1 + 8) == 103)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6C65737466697773 && *(_BYTE *)(a1 + 8) == 102)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6C6E6F6574697277 && *(_BYTE *)(a1 + 8) == 121)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6E696B636F6C6C61 && *(_BYTE *)(a1 + 8) == 100)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x7A6973636F6C6C61 && *(_BYTE *)(a1 + 8) == 101)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x73616C6370666F6ELL && *(_BYTE *)(a1 + 8) == 115)
        goto LABEL_436;
      return 0;
    case 0xAuLL:
      if (*(_QWORD *)a1 == 0x696C61636F6C6C61 && *(_WORD *)(a1 + 8) == 28263)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x65677265766E6F63 && *(_WORD *)(a1 + 8) == 29806)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6968656E696C6E69 && *(_WORD *)(a1 + 8) == 29806)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x61626C6C61636F6ELL && *(_WORD *)(a1 + 8) == 27491)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6568635F66636F6ELL && *(_WORD *)(a1 + 8) == 27491)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x7973617466697773 && *(_WORD *)(a1 + 8) == 25454)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x7272657466697773 && *(_WORD *)(a1 + 8) == 29295)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x757465726C6C6977 && *(_WORD *)(a1 + 8) == 28274)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6174736E67696C61 && *(_WORD *)(a1 + 8) == 27491)
        goto LABEL_436;
      return 0;
    case 0xBuLL:
      if (*(_QWORD *)a1 == 0x63696C7075646F6ELL && *(_QWORD *)(a1 + 3) == 0x65746163696C7075)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x62797A616C6E6F6ELL && *(_QWORD *)(a1 + 3) == 0x646E6962797A616CLL)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x666F727070696B73 && *(_QWORD *)(a1 + 3) == 0x656C69666F727070)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x74746E656D656C65 && *(_QWORD *)(a1 + 3) == 0x65707974746E656DLL)
        goto LABEL_436;
      return 0;
    case 0xCuLL:
      if (*(_QWORD *)a1 == 0x6E69737961776C61 && *(_DWORD *)(a1 + 8) == 1701734764)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x676F72707473756DLL && *(_DWORD *)(a1 + 8) == 1936942450)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x74616C7563657073 && *(_DWORD *)(a1 + 8) == 1701601889)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x636F6C6C61657270 && *(_DWORD *)(a1 + 8) == 1684370529)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x725F656C61637376 && *(_DWORD *)(a1 + 8) == 1701277281)
        goto LABEL_436;
      return 0;
    case 0xDuLL:
      if (*(_QWORD *)a1 == 0x7566726F6674706FLL && *(_QWORD *)(a1 + 5) == 0x676E697A7A756672)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x5F736E7275746572 && *(_QWORD *)(a1 + 5) == 0x65636977745F736ELL)
        goto LABEL_436;
      return 0;
    case 0xEuLL:
      if (*(_QWORD *)a1 == 0x2D706D756A2D6F6ELL && *(_QWORD *)(a1 + 6) == 0x73656C6261742D70)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x662D656661736E75 && *(_QWORD *)(a1 + 6) == 0x6874616D2D70662DLL)
        goto LABEL_436;
      return 0;
    case 0xFuLL:
      if (*(_QWORD *)a1 == 0x63696C706D696F6ELL && *(_QWORD *)(a1 + 7) == 0x74616F6C66746963)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x6761746D656D5F65)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x79726F6D656D5F65)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x6461657268745F65)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6163776F64616873 && *(_QWORD *)(a1 + 7) == 0x6B636174736C6C61)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6572656665726564 && *(_QWORD *)(a1 + 7) == 0x656C626165636E65)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x2D73666E692D6F6ELL && *(_QWORD *)(a1 + 7) == 0x6874616D2D70662DLL)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x2D736E616E2D6F6ELL && *(_QWORD *)(a1 + 7) == 0x6874616D2D70662DLL)
        goto LABEL_436;
      return 0;
    case 0x10uLL:
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 8) == 0x737365726464615FLL)
        goto LABEL_436;
      if (*(_QWORD *)a1 == 0x6C616D726F6E6564 && *(_QWORD *)(a1 + 8) == 0x6874616D2D70662DLL)
        goto LABEL_436;
      return 0;
    case 0x11uLL:
      if (*(_QWORD *)a1 == 0x6974696E61736F6ELL
        && *(_QWORD *)(a1 + 8) == 0x646E756F625F657ALL
        && *(_BYTE *)(a1 + 16) == 115)
      {
        goto LABEL_436;
      }
      v73 = *(_QWORD *)a1 == 0x74696C7073657270 && *(_QWORD *)(a1 + 8) == 0x6E6974756F726F63;
      if (v73 && *(_BYTE *)(a1 + 16) == 101)
        goto LABEL_436;
      return 0;
    case 0x12uLL:
      if (*(_QWORD *)a1 == 0x657A6974696E6173
        && *(_QWORD *)(a1 + 8) == 0x657264646177685FLL
        && *(_WORD *)(a1 + 16) == 29555)
      {
        goto LABEL_436;
      }
      v77 = *(_QWORD *)a1 == 0x6572702D7373656CLL && *(_QWORD *)(a1 + 8) == 0x6D70662D65736963;
      if (v77 && *(_WORD *)(a1 + 16) == 25697)
        goto LABEL_436;
      v79 = *(_QWORD *)a1 == 0x706D61732D657375 && *(_QWORD *)(a1 + 8) == 0x69666F72702D656CLL;
      if (v79 && *(_WORD *)(a1 + 16) == 25964)
        goto LABEL_436;
      return 0;
    case 0x13uLL:
      if (*(_QWORD *)a1 == 0x745F7465725F6E66
        && *(_QWORD *)(a1 + 8) == 0x7478655F6B6E7568
        && *(_QWORD *)(a1 + 11) == 0x6E72657478655F6BLL)
      {
        goto LABEL_436;
      }
      v83 = *(_QWORD *)a1 == 0x6974696E61736F6ELL && *(_QWORD *)(a1 + 8) == 0x7265766F635F657ALL;
      if (v83 && *(_QWORD *)(a1 + 11) == 0x6567617265766F63)
        goto LABEL_436;
      v85 = *(_QWORD *)a1 == 0x662D786F72707061 && *(_QWORD *)(a1 + 8) == 0x6D2D70662D636E75;
      if (v85 && *(_QWORD *)(a1 + 11) == 0x6874616D2D70662DLL)
        goto LABEL_436;
      return 0;
    case 0x14uLL:
      if (!memcmp((const void *)a1, "denormal-fp-math-f32", a2))
        goto LABEL_436;
      goto LABEL_362;
    case 0x15uLL:
      if (*(_QWORD *)a1 == 0x696F705F6C6C756ELL
        && *(_QWORD *)(a1 + 8) == 0x5F73695F7265746ELL
        && *(_QWORD *)(a1 + 13) == 0x64696C61765F7369)
      {
        goto LABEL_436;
      }
      v89 = *(_QWORD *)a1 == 0x6E696C6E692D6F6ELL && *(_QWORD *)(a1 + 8) == 0x742D656E696C2D65;
      if (v89 && *(_QWORD *)(a1 + 13) == 0x73656C6261742D65)
        goto LABEL_436;
      result = 0;
      break;
    case 0x17uLL:
      if (*(_QWORD *)a1 == 0x6572656665726564
        && *(_QWORD *)(a1 + 8) == 0x5F656C626165636ELL
        && *(_QWORD *)(a1 + 15) == 0x6C6C756E5F726F5FLL)
      {
        goto LABEL_436;
      }
      v93 = *(_QWORD *)a1 == 0x656E6769732D6F6ELL && *(_QWORD *)(a1 + 8) == 0x2D736F72657A2D64;
      if (v93 && *(_QWORD *)(a1 + 15) == 0x6874616D2D70662DLL)
        goto LABEL_436;
      v95 = *(_QWORD *)a1 == 0x2D656C69666F7270 && *(_QWORD *)(a1 + 8) == 0x612D656C706D6173;
      if (v95 && *(_QWORD *)(a1 + 15) == 0x6574617275636361)
        goto LABEL_436;
      result = 0;
      break;
    case 0x1AuLL:
      if (*(_QWORD *)a1 == 0x74616C7563657073
        && *(_QWORD *)(a1 + 8) == 0x64616F6C5F657669
        && *(_QWORD *)(a1 + 16) == 0x696E65647261685FLL
        && *(_WORD *)(a1 + 24) == 26478)
      {
        goto LABEL_436;
      }
      result = 0;
      break;
    case 0x1FuLL:
      if (*(_QWORD *)a1 == 0x6C6E6F5F6F726F63
        && *(_QWORD *)(a1 + 8) == 0x6F72747365645F79
        && *(_QWORD *)(a1 + 16) == 0x635F6E6568775F79
        && *(_QWORD *)(a1 + 23) == 0x6574656C706D6F63)
      {
        goto LABEL_436;
      }
      result = 0;
      break;
    case 0x21uLL:
      if (*(_QWORD *)a1 == 0x5F656C6261736964
        && *(_QWORD *)(a1 + 8) == 0x657A6974696E6173
        && *(_QWORD *)(a1 + 16) == 0x757274736E695F72
        && *(_QWORD *)(a1 + 24) == 0x6F697461746E656DLL
        && *(_BYTE *)(a1 + 32) == 110)
      {
LABEL_436:
        result = 1;
      }
      else
      {
        result = 0;
      }
      break;
    default:
LABEL_362:
      result = 0;
      break;
  }
  return result;
}

BOOL llvm::Attribute::isIntAttribute(llvm::Attribute *this)
{
  return *(_QWORD *)this && *(_BYTE *)(*(_QWORD *)this + 8) == 1;
}

BOOL llvm::Attribute::isStringAttribute(llvm::Attribute *this)
{
  return *(_QWORD *)this && *(_BYTE *)(*(_QWORD *)this + 8) == 2;
}

BOOL llvm::Attribute::isTypeAttribute(llvm::Attribute *this)
{
  return *(_QWORD *)this && *(_BYTE *)(*(_QWORD *)this + 8) == 3;
}

uint64_t llvm::Attribute::getKindAsEnum(llvm::Attribute *this)
{
  if (*(_QWORD *)this)
    return *(unsigned int *)(*(_QWORD *)this + 12);
  else
    return 0;
}

uint64_t llvm::Attribute::getValueAsInt(llvm::Attribute *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)(*(_QWORD *)this + 16);
  else
    return 0;
}

uint64_t llvm::Attribute::getKindAsString(llvm::Attribute *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 24;
  else
    return 0;
}

uint64_t llvm::Attribute::getValueAsString(llvm::Attribute *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + *(unsigned int *)(*(_QWORD *)this + 12) + 25;
  else
    return 0;
}

uint64_t llvm::Attribute::getAllocSizeArgs(llvm::Attribute *this)
{
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  _BYTE v6[12];

  v1 = *(_QWORD *)(*(_QWORD *)this + 16);
  v2 = v1 == 0xFFFFFFFFLL;
  v3 = v1 != 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (v2)
    v4 = 0;
  *(_QWORD *)&v6[4] = v4 & 0xFFFFFFFEFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)this + 16) & 0xFFFFFF00 | ((unint64_t)v3 << 32);
  return *(_QWORD *)v6;
}

uint64_t llvm::Attribute::getVScaleRangeMax(llvm::Attribute *this)
{
  uint64_t v1;
  __int128 v3;
  _BYTE v4[12];

  v1 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (!*(_QWORD *)(*(_QWORD *)this + 16))
    v1 = 0;
  *(_QWORD *)&v4[4] = v1 | *(_QWORD *)(*(_QWORD *)this + 16) & 0xFFFFFF00 | ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) != 0) << 32);
  *((_QWORD *)&v3 + 1) = *(_QWORD *)(*(_QWORD *)this + 16) != 0;
  *(_QWORD *)&v3 = *(_QWORD *)v4;
  return v3 >> 32;
}

void llvm::Attribute::getAsString(llvm::Attribute *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *NameFromAttrKind;
  unint64_t v12;
  size_t v13;
  char *v14;
  void *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  Type *v29;
  llvm::raw_ostream *v30;
  unint64_t AllocSizeArgs;
  char v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t *v38;
  uint64_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t VScaleRangeMax;
  int v49;
  uint64_t *v50;
  llvm::raw_ostream *v51;
  llvm::raw_ostream *v52;
  const char *v53;
  char v54;
  const char *v55;
  __int16 v56;
  uint64_t v57[4];
  __int16 v58;
  std::string __p;
  __int16 v60;
  uint64_t v61[4];
  __int16 v62;
  uint64_t v63[4];
  __int16 v64;
  uint64_t v65[4];
  __int16 v66;
  uint64_t v67[4];
  __int16 v68;
  uint64_t v69[2];
  uint64_t *v70;
  __int16 v71;
  __int128 v72;
  uint64_t *v73;
  unint64_t v74;
  _BYTE *v75;
  char v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_9;
  v6 = *(unsigned __int8 *)(v4 + 8);
  if (v6 == 3)
  {
    NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (!NameFromAttrKind)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      goto LABEL_35;
    }
    v13 = v12;
    if (v12 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_98;
    v14 = NameFromAttrKind;
    if (v12 >= 0x17)
    {
      v27 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v27 = v12 | 7;
      v28 = v27 + 1;
      v15 = operator new(v27 + 1);
      *(_QWORD *)(a3 + 8) = v13;
      *(_QWORD *)(a3 + 16) = v28 | 0x8000000000000000;
      *(_QWORD *)a3 = v15;
    }
    else
    {
      *(_BYTE *)(a3 + 23) = v12;
      v15 = (void *)a3;
      if (!v12)
        goto LABEL_34;
    }
    memmove(v15, v14, v13);
LABEL_34:
    *((_BYTE *)v15 + v13) = 0;
LABEL_35:
    std::string::push_back((std::string *)a3, 40);
    DWORD2(v72) = 0;
    v76 = 0;
    v77 = 0;
    v78 = 1;
    v74 = 0;
    v75 = 0;
    v73 = 0;
    *(_QWORD *)&v72 = &unk_1E0E22B10;
    v79 = a3;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v72, 0, 0, 0);
    if (*(_QWORD *)this)
      v29 = *(Type **)(*(_QWORD *)this + 16);
    else
      v29 = 0;
    llvm::Type::print(v29, (llvm::raw_ostream *)&v72, 0, 1);
  }
  if (!*(_BYTE *)(v4 + 8))
  {
    v7 = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (v7)
    {
      v9 = v8;
      if (v8 <= 0x7FFFFFFFFFFFFFF7)
      {
        v10 = v7;
        if (v8 >= 0x17)
        {
          v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v8 | 7) != 0x17)
            v24 = v8 | 7;
          v25 = v24 + 1;
          v26 = operator new(v24 + 1);
          *(_QWORD *)(a3 + 8) = v9;
          *(_QWORD *)(a3 + 16) = v25 | 0x8000000000000000;
          *(_QWORD *)a3 = v26;
          a3 = (uint64_t)v26;
        }
        else
        {
          *(_BYTE *)(a3 + 23) = v8;
          if (!v8)
            goto LABEL_29;
        }
        memmove((void *)a3, v10, v9);
LABEL_29:
        *(_BYTE *)(a3 + v9) = 0;
        return;
      }
LABEL_98:
      abort();
    }
LABEL_9:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  if (v6 == 2)
  {
LABEL_16:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v16 = (llvm::raw_ostream *)llvm::raw_string_ostream::raw_string_ostream((uint64_t)&v72, a3);
    v17 = v75;
    if ((unint64_t)v75 >= v74)
    {
      v16 = llvm::raw_ostream::write(v16, 34);
      v18 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
LABEL_18:
        v19 = llvm::raw_ostream::operator<<(v16, (const char *)(v18 + 24), *(unsigned int *)(v18 + 12));
        v20 = (_BYTE *)*((_QWORD *)v19 + 4);
        if ((unint64_t)v20 < *((_QWORD *)v19 + 3))
          goto LABEL_19;
        goto LABEL_41;
      }
    }
    else
    {
      ++v75;
      *v17 = 34;
      v18 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        goto LABEL_18;
    }
    v19 = llvm::raw_ostream::operator<<(v16, 0, 0);
    v20 = (_BYTE *)*((_QWORD *)v19 + 4);
    if ((unint64_t)v20 < *((_QWORD *)v19 + 3))
    {
LABEL_19:
      *((_QWORD *)v19 + 4) = v20 + 1;
      *v20 = 34;
      v21 = *(_QWORD *)this;
      v22 = *(unsigned int *)(*(_QWORD *)this + 16);
      if (!(_DWORD)v22)
        goto LABEL_43;
      goto LABEL_42;
    }
LABEL_41:
    llvm::raw_ostream::write(v19, 34);
    v21 = *(_QWORD *)this;
    v22 = *(unsigned int *)(*(_QWORD *)this + 16);
    if (!(_DWORD)v22)
    {
LABEL_43:
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v72);
      return;
    }
LABEL_42:
    v30 = (llvm::raw_ostream *)(v21 + *(unsigned int *)(v21 + 12) + 25);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v72, "=\"");
    llvm::printEscapedString(v30, v22, (llvm::raw_ostream *)&v72);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v72, "\"");
    goto LABEL_43;
  }
  switch(*(_DWORD *)(v4 + 12))
  {
    case 'N':
      v69[0] = *(_QWORD *)(v4 + 16);
      if (a2)
        v23 = "align=";
      else
        v23 = "align ";
      *(_QWORD *)&v72 = v23;
      v73 = v69;
      LOWORD(v75) = 3331;
      goto LABEL_91;
    case 'P':
      AllocSizeArgs = llvm::Attribute::getAllocSizeArgs(this);
      if (!v32)
      {
        v67[0] = (uint64_t)"allocsize(";
        v68 = 259;
        v66 = 265;
        LODWORD(v65[0]) = AllocSizeArgs;
        goto LABEL_89;
      }
      v33 = HIDWORD(AllocSizeArgs);
      v63[0] = (uint64_t)"allocsize(";
      v64 = 259;
      v62 = 265;
      LODWORD(v61[0]) = AllocSizeArgs;
      llvm::operator+(v63, v61, (uint64_t)v65);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)",";
      v60 = 259;
      llvm::operator+(v65, (uint64_t *)&__p, (uint64_t)v67);
      v58 = 265;
      LODWORD(v57[0]) = v33;
      llvm::operator+(v67, v57, (uint64_t)v69);
      v55 = ")";
      v56 = 259;
LABEL_75:
      v50 = (uint64_t *)&v55;
      goto LABEL_90;
    case 'Q':
      v34 = "dereferenceable";
      goto LABEL_49;
    case 'R':
      v34 = "dereferenceable_or_null";
LABEL_49:
      llvm::Attribute::getAsString(BOOL)const::$_0::operator()((std::string *)a3, a2, (uint64_t *)this, v34);
      return;
    case 'U':
      v35 = *(_QWORD *)(v4 + 16);
      if (a2)
      {
        v67[0] = v35;
        v69[0] = (uint64_t)"=";
        v70 = v67;
        v71 = 3331;
        v36 = 2;
        v37 = 3;
        v38 = (uint64_t *)"alignstack";
        v39 = v69;
      }
      else
      {
        v65[0] = v35;
        v67[0] = (uint64_t)"(";
        v67[2] = (uint64_t)v65;
        v68 = 3331;
        v69[0] = (uint64_t)"alignstack";
        v70 = v67;
        v36 = 3;
        v37 = 2;
        v39 = (uint64_t *)")";
        v71 = 515;
        v38 = v69;
      }
      *(_QWORD *)&v72 = v38;
      v73 = v39;
      LOBYTE(v75) = v37;
      BYTE1(v75) = v36;
      goto LABEL_91;
    case 'V':
      v40 = *(_DWORD *)(v4 + 16);
      if (!v40)
        goto LABEL_55;
      if (v40 == 2)
      {
        std::string::basic_string[abi:nn180100]<0>((_QWORD *)a3, "uwtable");
      }
      else
      {
        v67[0] = (uint64_t)"uwtable(";
        v68 = 259;
        if (v40 == 1)
          v53 = "sync";
        else
          v53 = "async";
        v54 = 1;
        HIBYTE(v66) = 1;
        if (*v53)
        {
          v65[0] = (uint64_t)v53;
          v54 = 3;
        }
        LOBYTE(v66) = v54;
LABEL_89:
        llvm::operator+(v67, v65, (uint64_t)v69);
        v63[0] = (uint64_t)")";
        v64 = 259;
        v50 = v63;
LABEL_90:
        llvm::operator+(v69, v50, (uint64_t)&v72);
LABEL_91:
        llvm::Twine::str((llvm::Twine *)&v72, (std::string *)a3);
      }
      return;
    case 'W':
      v47 = *(_QWORD *)(v4 + 16);
      v43 = HIDWORD(v47);
      v44 = v47 == 0;
      v45 = v47 != 0;
      v46 = v47 & 0xFFFFFF00;
      v47 = v47;
      LODWORD(v72) = v43;
      if (v44)
        v47 = 0;
      *(_QWORD *)((char *)&v72 + 4) = v47 | v46 | (v45 << 32);
      VScaleRangeMax = llvm::Attribute::getVScaleRangeMax(this);
      v63[0] = (uint64_t)"vscale_range(";
      v64 = 259;
      v62 = 265;
      LODWORD(v61[0]) = v72;
      llvm::operator+(v63, v61, (uint64_t)v65);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)",";
      v60 = 259;
      llvm::operator+(v65, (uint64_t *)&__p, (uint64_t)v67);
      if ((VScaleRangeMax & 0xFF00000000) != 0)
        v49 = VScaleRangeMax;
      else
        v49 = 0;
      v58 = 265;
      LODWORD(v57[0]) = v49;
      llvm::operator+(v67, v57, (uint64_t)v69);
      v55 = ")";
      v56 = 259;
      goto LABEL_75;
    default:
LABEL_55:
      v41 = *(_DWORD *)(v4 + 12);
      if (v41 == 84)
      {
        std::string::basic_string[abi:nn180100]<0>((_QWORD *)a3, "nofpclass");
        v51 = (llvm::raw_ostream *)llvm::raw_string_ostream::raw_string_ostream((uint64_t)&v72, a3);
        llvm::operator<<(v51, *(_DWORD *)(*(_QWORD *)this + 16));
        goto LABEL_43;
      }
      if (v41 == 83)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        v52 = (llvm::raw_ostream *)llvm::raw_string_ostream::raw_string_ostream((uint64_t)&v72, a3);
        llvm::raw_ostream::operator<<(v52, "memory(");
        __asm { BR              X10 }
      }
      if (v41 != 79)
        goto LABEL_16;
      v42 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)&v72 = &v73;
      *((_QWORD *)&v72 + 1) = 0x300000000;
      if ((v42 & 1) != 0)
      {
        llvm::SmallVectorTemplateBase<llvm::StringRef,true>::push_back((uint64_t)&v72, (uint64_t)"alloc", 5);
        if ((v42 & 2) == 0)
        {
LABEL_60:
          if ((v42 & 4) == 0)
            goto LABEL_61;
          goto LABEL_94;
        }
      }
      else if ((v42 & 2) == 0)
      {
        goto LABEL_60;
      }
      llvm::SmallVectorTemplateBase<llvm::StringRef,true>::push_back((uint64_t)&v72, (uint64_t)"realloc", 7);
      if ((v42 & 4) == 0)
      {
LABEL_61:
        if ((v42 & 8) == 0)
          goto LABEL_62;
        goto LABEL_95;
      }
LABEL_94:
      llvm::SmallVectorTemplateBase<llvm::StringRef,true>::push_back((uint64_t)&v72, (uint64_t)"free", 4);
      if ((v42 & 8) == 0)
      {
LABEL_62:
        if ((v42 & 0x10) == 0)
          goto LABEL_63;
        goto LABEL_96;
      }
LABEL_95:
      llvm::SmallVectorTemplateBase<llvm::StringRef,true>::push_back((uint64_t)&v72, (uint64_t)"uninitialized", 13);
      if ((v42 & 0x10) == 0)
      {
LABEL_63:
        if ((v42 & 0x20) == 0)
          goto LABEL_65;
        goto LABEL_64;
      }
LABEL_96:
      llvm::SmallVectorTemplateBase<llvm::StringRef,true>::push_back((uint64_t)&v72, (uint64_t)"zeroed", 6);
      if ((v42 & 0x20) != 0)
LABEL_64:
        llvm::SmallVectorTemplateBase<llvm::StringRef,true>::push_back((uint64_t)&v72, (uint64_t)"aligned", 7);
LABEL_65:
      v65[0] = (uint64_t)"allockind(\"";
      v66 = 259;
      llvm::join<llvm::StringRef *>((std::string *)v72, (std::string *)(v72 + 16 * DWORD2(v72)), ",", 1uLL, &__p);
      v64 = 260;
      v63[0] = (uint64_t)&__p;
      llvm::operator+(v65, v63, (uint64_t)v67);
      v61[0] = (uint64_t)"\")";
      v62 = 259;
      llvm::operator+(v67, v61, (uint64_t)v69);
      llvm::Twine::str((llvm::Twine *)v69, (std::string *)a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((uint64_t **)v72 != &v73)
        free((void *)v72);
      return;
  }
}

void llvm::Attribute::getAsString(BOOL)const::$_0::operator()(std::string *a1, char a2, uint64_t *a3, _BYTE *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v4 = *a4;
  if (*a4)
    v5 = 3;
  else
    v5 = 1;
  v6 = *a3;
  if (a2)
  {
    if (v6)
      v6 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)&v9 = v6;
    *(_QWORD *)&v12 = "=";
    *(_QWORD *)&v13 = &v9;
    LOWORD(v14) = 3331;
    if (v4)
    {
      *(_QWORD *)&v15 = a4;
      *(_QWORD *)&v16 = &v12;
      LOBYTE(v17) = v5;
      BYTE1(v17) = 2;
    }
    else
    {
      v15 = v12;
      v16 = v13;
      v17 = v14;
    }
    llvm::Twine::str((llvm::Twine *)&v15, a1);
    return;
  }
  if (v6)
    v6 = *(_QWORD *)(v6 + 16);
  v8 = v6;
  *(_QWORD *)&v9 = "(";
  *(_QWORD *)&v10 = &v8;
  LOWORD(v11) = 3331;
  if (!v4)
  {
    v12 = v9;
    v13 = v10;
    v14 = v11;
    LOBYTE(v5) = v11;
    if (v11 != 1)
      goto LABEL_18;
LABEL_17:
    *(_QWORD *)&v15 = ")";
    LOWORD(v17) = 259;
    llvm::Twine::str((llvm::Twine *)&v15, a1);
    return;
  }
  *(_QWORD *)&v12 = a4;
  *(_QWORD *)&v13 = &v9;
  LOBYTE(v14) = v5;
  BYTE1(v14) = 2;
  if (v5 == 1)
    goto LABEL_17;
LABEL_18:
  if (BYTE1(v14) != 1)
    LOBYTE(v5) = 2;
  v7 = &v12;
  if (BYTE1(v14) == 1)
    v7 = (__int128 *)v12;
  *(_QWORD *)&v15 = v7;
  *((_QWORD *)&v15 + 1) = *((_QWORD *)&v12 + 1);
  *(_QWORD *)&v16 = ")";
  LOBYTE(v17) = v5;
  BYTE1(v17) = 3;
  llvm::Twine::str((llvm::Twine *)&v15, a1);
}

std::string *llvm::join<llvm::StringRef *>@<X0>(std::string *result@<X0>, std::string *a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  std::string *v8;
  int64_t v10;
  std::string::size_type v11;
  unint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  const double *v19;
  const double *v20;
  unsigned __int128 v21;
  unsigned __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type size;
  std::string *v25;
  const std::string::value_type *v26;
  std::string::size_type v27;

  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (result != a2)
  {
    v8 = result;
    v10 = (char *)a2 - (char *)result;
    v11 = ((((char *)a2 - (char *)result) >> 4) - 1) * a4;
    v12 = v10 - 16;
    v13 = result;
    if (v12 >= 0x40)
    {
      v14 = (v12 >> 4) + 1;
      v15 = v14 & 3;
      if ((v14 & 3) == 0)
        v15 = 4;
      v16 = v14 - v15;
      v13 = (std::string *)((char *)result + 16 * v16);
      v17 = 0uLL;
      v18 = (int64x2_t)v11;
      v19 = (const double *)&result[1].__r_.__value_.__r.__words[2];
      do
      {
        v20 = v19 - 4;
        v21 = (unsigned __int128)vld2q_f64(v20);
        v22 = (unsigned __int128)vld2q_f64(v19);
        v18 = vaddq_s64((int64x2_t)v21, v18);
        v17 = vaddq_s64((int64x2_t)v22, v17);
        v19 += 8;
        v16 -= 4;
      }
      while (v16);
      v11 = vaddvq_s64(vaddq_s64(v17, v18));
    }
    do
    {
      v11 += v13->__r_.__value_.__l.__size_;
      v13 = (std::string *)((char *)v13 + 16);
    }
    while (v13 != a2);
    std::string::reserve(a5, v11);
    v23 = (const std::string::value_type *)v8->__r_.__value_.__r.__words[0];
    size = v8->__r_.__value_.__l.__size_;
    v25 = (std::string *)&v8->__r_.__value_.__r.__words[2];
    for (result = std::string::append(a5, v23, size); v25 != a2; result = std::string::append(a5, v26, v27))
    {
      std::string::append(a5, a3, a4);
      v26 = (const std::string::value_type *)v25->__r_.__value_.__r.__words[0];
      v27 = v25->__r_.__value_.__l.__size_;
      v25 = (std::string *)((char *)v25 + 16);
    }
  }
  return result;
}

BOOL llvm::Attribute::hasParentContext(llvm::Attribute *this, llvm::LLVMContext *a2)
{
  _QWORD *NodeOrInsertPos;
  uint64_t v5;
  uint64_t v7;
  void *v8[2];
  _QWORD v9[17];

  v9[16] = *MEMORY[0x1E0C80C00];
  v8[0] = v9;
  v8[1] = (void *)0x2000000000;
  llvm::AttributeImpl::Profile(*(_QWORD *)this, (uint64_t)v8);
  v7 = 0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(*(_QWORD *)a2 + 264, (uint64_t)v8, &v7, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  v5 = *(_QWORD *)this;
  if (v8[0] != v9)
    free(v8[0]);
  return NodeOrInsertPos == (_QWORD *)v5;
}

void llvm::AttributeImpl::Profile(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 8) == 2)
  {
    v5 = a1 + 24;
    v7 = *(unsigned int *)(a1 + 12);
    v6 = *(_DWORD *)(a1 + 16);
    llvm::FoldingSetNodeID::AddString(a2, (unsigned __int8 *)(a1 + 24), v7);
    if (v6)
      llvm::FoldingSetNodeID::AddString(a2, (unsigned __int8 *)(v5 + v7 + 1), v6);
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    llvm::AttributeImpl::Profile(a2, *(_DWORD *)(a1 + 12), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 12);
    v4 = *(unsigned int *)(a2 + 8);
    if (v4 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v4 + 1, 4);
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v4) = v3;
    ++*(_DWORD *)(a2 + 8);
  }
}

uint64_t llvm::AttributeImpl::operator<(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  int v18;
  unsigned int v19;

  if (a1 == a2)
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 2)
  {
    if (v4 != 2)
      return 0;
    v5 = a1 + 24;
    v6 = *(unsigned int *)(a1 + 12);
    v7 = a2 + 24;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6 != (_DWORD)v8)
    {
      if (v8 >= v6)
        v9 = *(unsigned int *)(a1 + 12);
      else
        v9 = *(unsigned int *)(a2 + 12);
      if (!v9)
      {
LABEL_26:
        if (v6 < v8)
          v14 = -1;
        else
          v14 = 1;
        return v14 >> 31;
      }
LABEL_22:
      v13 = memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), v9);
      v14 = (v13 >> 31) | 1;
      if (!v13)
        v14 = 0;
      if ((_DWORD)v6 == (_DWORD)v8 || v13)
        return v14 >> 31;
      goto LABEL_26;
    }
    if ((_DWORD)v6 && memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), *(unsigned int *)(a1 + 12)))
    {
      if (v8 >= v6)
        v9 = v6;
      else
        v9 = v8;
      if (!v9)
        return 0;
      goto LABEL_22;
    }
    v15 = *(_DWORD *)(a1 + 16);
    v16 = *(_DWORD *)(a2 + 16);
    if (v16 >= v15)
      v17 = v15;
    else
      v17 = v16;
    if ((_DWORD)v17 && (v18 = memcmp((const void *)(v5 + v6 + 1), (const void *)(v7 + v8 + 1), v17)) != 0)
    {
      return ((v18 >> 31) | 1u) >> 31;
    }
    else
    {
      if (v15 < v16)
        v19 = -1;
      else
        v19 = 1;
      if (v15 == v16)
        v19 = 0;
      return v19 >> 31;
    }
  }
  else if (v4 == 2)
  {
    return 1;
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 12);
    v12 = *(_DWORD *)(a2 + 12);
    if (v11 == v12)
      return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
    else
      return v11 < v12;
  }
}

uint64_t llvm::Attribute::canUseAsFnAttr(int a1)
{
  return AttrPropTable[a1 - 1] & 1;
}

uint64_t llvm::Attribute::canUseAsParamAttr(int a1)
{
  return (AttrPropTable[a1 - 1] >> 1) & 1;
}

uint64_t llvm::Attribute::canUseAsRetAttr(int a1)
{
  return (AttrPropTable[a1 - 1] >> 2) & 1;
}

char *llvm::AttributeSetNode::get(uint64_t *a1, const void *a2, uint64_t a3)
{
  size_t v6;
  int v7;
  _QWORD *v8;
  size_t v9;
  char *Sorted;
  void *__base;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v6 = 8 * a3;
  __base = v14;
  v13 = 0x800000000;
  if ((unint64_t)(8 * a3) < 0x41)
  {
    v7 = 0;
    v8 = v14;
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, v14, (8 * a3) >> 3, 8);
  v7 = v13;
  v8 = __base;
  if (a3)
  {
LABEL_5:
    memcpy(&v8[v7], a2, v6);
    v7 = v13;
    v8 = __base;
  }
LABEL_6:
  v9 = v7 + (v6 >> 3);
  LODWORD(v13) = v9;
  if (v9 >= 2)
  {
    qsort(v8, v9, 8uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<llvm::Attribute>);
    v8 = __base;
    LODWORD(v9) = v13;
  }
  Sorted = llvm::AttributeSetNode::getSorted(a1, (char *)v8, v9);
  if (__base != v14)
    free(__base);
  return Sorted;
}

uint64_t llvm::AttributeSet::hasAttribute(_QWORD *a1, int a2)
{
  if (*a1)
    return (*(unsigned __int8 *)(*a1 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  else
    return 0;
}

uint64_t **llvm::AttrBuilder::addAttribute(uint64_t **a1, int a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = (uint64_t)(a1 + 1);
  v5 = llvm::Attribute::get(*a1, a2, 0);
  addAttributeImpl<llvm::Attribute::AttrKind>(v4, a2, v5);
  return a1;
}

uint64_t **llvm::AttrBuilder::addAttribute(uint64_t **a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t a5)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = (uint64_t)(a1 + 1);
  v9 = llvm::Attribute::get(*a1, a2, a3, a4, a5);
  addAttributeImpl<llvm::StringRef>(v8, a2, a3, (uint64_t)v9);
  return a1;
}

char *llvm::AttributeSet::removeAttribute(char **a1, uint64_t *a2, int a3)
{
  char *Sorted;
  char *v6;
  unsigned int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  Sorted = *a1;
  if (!*a1 || ((Sorted[a3 / 8 + 12] >> (a3 & 7)) & 1) == 0)
    return Sorted;
  v18 = v20;
  v19 = 0x800000000;
  llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&v18, (uint64_t)v20, Sorted + 48, &Sorted[8 * *((unsigned int *)Sorted + 2) + 48]);
  v6 = (char *)v18;
  v7 = v19;
  if (!(_DWORD)v19)
    goto LABEL_20;
  v8 = (char *)v18 + 8 * v19;
  v9 = (char *)v18;
  v10 = v19;
  do
  {
    v13 = v10 >> 1;
    v14 = &v9[8 * (v10 >> 1)];
    v15 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
    {
      if (*(_BYTE *)(v15 + 8) == 2)
        goto LABEL_7;
      LODWORD(v15) = *(_DWORD *)(v15 + 12);
    }
    v11 = v14 + 8;
    v12 = v10 + ~v13;
    if ((int)v15 < a3)
    {
      v13 = v12;
      v9 = v11;
    }
LABEL_7:
    v10 = v13;
  }
  while (v13);
  if (v9 != v8)
  {
    v16 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      if (*(_BYTE *)(v16 + 8) == 2 || *(_DWORD *)(v16 + 12) != a3)
        goto LABEL_20;
LABEL_17:
      if (v8 != v9 + 8)
      {
        memmove(v9, v9 + 8, v8 - (v9 + 8));
        v7 = v19;
        v6 = (char *)v18;
      }
      LODWORD(v19) = --v7;
    }
    else if (!a3)
    {
      goto LABEL_17;
    }
  }
LABEL_20:
  Sorted = llvm::AttributeSetNode::getSorted(a2, v6, v7);
  if (v18 != v20)
    free(v18);
  return Sorted;
}

uint64_t llvm::AttrBuilder::removeAttribute(uint64_t a1, const void *a2, size_t a3)
{
  int v4;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_DWORD *)(a1 + 16);
  if (!v4)
    return a1;
  v7 = *(char **)(a1 + 8);
  v8 = &v7[8 * v4];
  v9 = *(unsigned int *)(a1 + 16);
  do
  {
    v10 = v9 >> 1;
    v11 = &v7[8 * (v9 >> 1)];
    v12 = *(_QWORD *)v11;
    if (!*(_QWORD *)v11 || *(_BYTE *)(v12 + 8) != 2)
    {
LABEL_3:
      v7 = v11 + 8;
      v10 = v9 + ~v10;
      goto LABEL_4;
    }
    v13 = *(unsigned int *)(v12 + 12);
    if (a3 >= v13)
      v14 = *(unsigned int *)(v12 + 12);
    else
      v14 = a3;
    if (v14 && (v15 = memcmp((const void *)(v12 + 24), a2, v14)) != 0)
    {
      if (v15 < 0)
        goto LABEL_3;
    }
    else if (a3 > v13)
    {
      goto LABEL_3;
    }
LABEL_4:
    v9 = v10;
  }
  while (v10);
  if (v7 != v8)
  {
    v16 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
    {
      if (*(_BYTE *)(v16 + 8) == 2)
      {
        v17 = *(unsigned int *)(v16 + 12);
        if (a3 == v17 && (!(_DWORD)v17 || !memcmp((const void *)(v16 + 24), a2, a3)))
        {
          if (v8 != v7 + 8)
          {
            memmove(v7, v7 + 8, v8 - (v7 + 8));
            v4 = *(_DWORD *)(a1 + 16);
          }
          *(_DWORD *)(a1 + 16) = v4 - 1;
        }
      }
    }
  }
  return a1;
}

char *llvm::AttributeSet::removeAttributes(char **a1, uint64_t *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *Sorted;
  void *v14;
  _QWORD v16[2];
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v17 = a2;
  v18 = v20;
  v19 = 0x800000000;
  if (v6)
  {
    llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&v18, (uint64_t)v20, v6 + 48, &v6[8 * *((unsigned int *)v6 + 2) + 48]);
    v7 = v19;
    if (!(_DWORD)v19)
    {
LABEL_14:
      Sorted = *a1;
      v14 = v18;
      if (v18 != v20)
        goto LABEL_15;
      return Sorted;
    }
  }
  else
  {
    llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&v18, (uint64_t)v20, 0, 0);
    v7 = v19;
    if (!(_DWORD)v19)
      goto LABEL_14;
  }
  v8 = (unint64_t *)v18;
  v9 = 8 * v7;
  while (1)
  {
    v10 = *v8;
    if (*v8)
      break;
LABEL_7:
    if (((1 << v10) & *(_QWORD *)(a3 + ((v10 >> 3) & 0x1FFFFFF8))) != 0)
      goto LABEL_12;
LABEL_8:
    ++v8;
    v9 -= 8;
    if (!v9)
      goto LABEL_14;
  }
  if (*(_BYTE *)(v10 + 8) != 2)
  {
    v10 = *(unsigned int *)(v10 + 12);
    goto LABEL_7;
  }
  v11 = v10 + 24;
  v12 = *(unsigned int *)(v10 + 12);
  v16[0] = v11;
  v16[1] = v12;
  if (!std::__tree<llvm::SmallString<32u>>::__count_multi<llvm::StringRef>(a3 + 16, (uint64_t)v16))
    goto LABEL_8;
LABEL_12:
  llvm::AttrBuilder::remove((uint64_t)&v17, a3);
  Sorted = llvm::AttributeSetNode::getSorted(a2, (char *)v18, v19);
  v14 = v18;
  if (v18 == v20)
    return Sorted;
LABEL_15:
  free(v14);
  return Sorted;
}

uint64_t llvm::AttrBuilder::remove(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;

  v4 = *(unint64_t **)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 16);
  v6 = &v4[v5];
  v7 = v6;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    while (1)
    {
      v9 = *v4;
      if (!*v4)
        goto LABEL_8;
      if (*(_BYTE *)(v9 + 8) != 2)
        break;
      v10 = v9 + 24;
      v11 = *(unsigned int *)(v9 + 12);
      v17 = v10;
      v18 = v11;
      if (std::__tree<llvm::SmallString<32u>>::__count_multi<llvm::StringRef>(a2 + 16, (uint64_t)&v17))
        goto LABEL_11;
LABEL_9:
      ++v4;
      v8 -= 8;
      if (!v8)
        goto LABEL_23;
    }
    v9 = *(unsigned int *)(v9 + 12);
LABEL_8:
    if (((1 << v9) & *(_QWORD *)(a2 + ((v9 >> 3) & 0x1FFFFFF8))) != 0)
      goto LABEL_11;
    goto LABEL_9;
  }
LABEL_11:
  if (v4 != v6)
  {
    v12 = v4 + 1;
    if (v4 + 1 != v6)
    {
      v7 = v4;
      while (1)
      {
        v13 = *v12;
        if (*v12)
        {
          if (*(_BYTE *)(v13 + 8) == 2)
          {
            v14 = v13 + 24;
            v15 = *(unsigned int *)(v13 + 12);
            v17 = v14;
            v18 = v15;
            if (!std::__tree<llvm::SmallString<32u>>::__count_multi<llvm::StringRef>(a2 + 16, (uint64_t)&v17))
              goto LABEL_21;
            goto LABEL_14;
          }
          v13 = *(unsigned int *)(v13 + 12);
        }
        if (((1 << v13) & *(_QWORD *)(a2 + ((v13 >> 3) & 0x1FFFFFF8))) == 0)
LABEL_21:
          *v7++ = *v12;
LABEL_14:
        if (++v12 == v6)
          goto LABEL_23;
      }
    }
    v7 = v4;
  }
LABEL_23:
  *(_DWORD *)(a1 + 16) = ((unint64_t)v7 - *(_QWORD *)(a1 + 8)) >> 3;
  return a1;
}

uint64_t llvm::AttributeSet::getNumAttributes(llvm::AttributeSet *this)
{
  if (*(_QWORD *)this)
    return *(unsigned int *)(*(_QWORD *)this + 8);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getAttribute(uint64_t *a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *a1;
  if (!*a1 || ((*(unsigned __int8 *)(v2 + a2 / 8 + 12) >> (a2 & 7)) & 1) == 0)
    return 0;
  v3 = (_QWORD *)(v2 + 48);
  v4 = 8 * *(unsigned int *)(v2 + 8) - 8 * *(unsigned int *)(v2 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v7 = v5 >> 1;
      v8 = &v3[v5 >> 1];
      v9 = *v8;
      if (*v8)
        LODWORD(v9) = *(_DWORD *)(v9 + 12);
      v6 = v8 + 1;
      v5 += ~v7;
      if ((int)v9 < a2)
        v3 = v6;
      else
        v5 = v7;
    }
    while (v5);
  }
  return *v3;
}

uint64_t llvm::AttributeSet::getAlignment(llvm::AttributeSet *this)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  if ((*(_BYTE *)(v1 + 21) & 0x40) == 0)
    return 0;
  v3 = (_QWORD *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v7 = v5 >> 1;
      v8 = &v3[v5 >> 1];
      v9 = *v8;
      if (*v8)
        LODWORD(v9) = *(_DWORD *)(v9 + 12);
      v6 = v8 + 1;
      v5 += ~v7;
      if ((int)v9 < 78)
        v3 = v6;
      else
        v5 = v7;
    }
    while (v5);
  }
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = __clz(v10) ^ 0x3F | 0x100;
  if (!v10)
    v11 = 0;
  return v11 | (v11 >> 8 << 8);
}

uint64_t llvm::AttributeSet::getByRefType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 1) == 0)
    return 0;
  v2 = (uint64_t *)(v1 + 48);
  v3 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v6 = v4 >> 1;
      v7 = &v2[v4 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v5 = v7 + 1;
      v4 += ~v6;
      if ((int)v8 < 72)
        v2 = v5;
      else
        v4 = v6;
    }
    while (v4);
  }
  v9 = *v2;
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getByValType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 2) == 0)
    return 0;
  v2 = (uint64_t *)(v1 + 48);
  v3 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v6 = v4 >> 1;
      v7 = &v2[v4 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v5 = v7 + 1;
      v4 += ~v6;
      if ((int)v8 < 73)
        v2 = v5;
      else
        v4 = v6;
    }
    while (v4);
  }
  v9 = *v2;
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getStructRetType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 0x20) == 0)
    return 0;
  v2 = (uint64_t *)(v1 + 48);
  v3 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v6 = v4 >> 1;
      v7 = &v2[v4 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v5 = v7 + 1;
      v4 += ~v6;
      if ((int)v8 < 77)
        v2 = v5;
      else
        v4 = v6;
    }
    while (v4);
  }
  v9 = *v2;
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getPreallocatedType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 0x10) == 0)
    return 0;
  v2 = (uint64_t *)(v1 + 48);
  v3 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v6 = v4 >> 1;
      v7 = &v2[v4 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v5 = v7 + 1;
      v4 += ~v6;
      if ((int)v8 < 76)
        v2 = v5;
      else
        v4 = v6;
    }
    while (v4);
  }
  v9 = *v2;
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getInAllocaType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 8) == 0)
    return 0;
  v2 = (uint64_t *)(v1 + 48);
  v3 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v6 = v4 >> 1;
      v7 = &v2[v4 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v5 = v7 + 1;
      v4 += ~v6;
      if ((int)v8 < 75)
        v2 = v5;
      else
        v4 = v6;
    }
    while (v4);
  }
  v9 = *v2;
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getElementType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 4) == 0)
    return 0;
  v2 = (uint64_t *)(v1 + 48);
  v3 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v6 = v4 >> 1;
      v7 = &v2[v4 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v5 = v7 + 1;
      v4 += ~v6;
      if ((int)v8 < 74)
        v2 = v5;
      else
        v4 = v6;
    }
    while (v4);
  }
  v9 = *v2;
  if (v9)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getAllocSizeArgs(llvm::AttributeSet *this)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 22) & 1) == 0)
    return 0;
  v3 = (_QWORD *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v7 = v5 >> 1;
      v8 = &v3[v5 >> 1];
      v9 = *v8;
      if (*v8)
        LODWORD(v9) = *(_DWORD *)(v9 + 12);
      v6 = v8 + 1;
      v5 += ~v7;
      if ((int)v9 < 80)
        v3 = v6;
      else
        v5 = v7;
    }
    while (v5);
  }
  v13 = *(_QWORD *)(*v3 + 16);
  v10 = HIDWORD(v13);
  v11 = v13 == 0xFFFFFFFFLL;
  v12 = v13 & 0xFFFFFF00;
  LODWORD(v13) = v13;
  LODWORD(v14) = v10;
  if (v11)
    LODWORD(v13) = 0;
  HIDWORD(v14) = v13 | v12;
  return v14;
}

uint64_t llvm::AttributeSet::getVScaleRangeMin(llvm::AttributeSet *this)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(char *)(v1 + 22) & 0x80000000) == 0)
    return 1;
  v3 = (_QWORD *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v7 = v5 >> 1;
      v8 = &v3[v5 >> 1];
      v9 = *v8;
      if (*v8)
        LODWORD(v9) = *(_DWORD *)(v9 + 12);
      v6 = v8 + 1;
      v5 += ~v7;
      if ((int)v9 < 87)
        v3 = v6;
      else
        v5 = v7;
    }
    while (v5);
  }
  return *(unsigned int *)(*v3 + 20);
}

uint64_t llvm::AttributeSet::getVScaleRangeMax(llvm::AttributeSet *this)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _BOOL8 v12;
  int v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(char *)(v1 + 22) & 0x80000000) == 0)
    return 0;
  v3 = (_QWORD *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v7 = v5 >> 1;
      v8 = &v3[v5 >> 1];
      v9 = *v8;
      if (*v8)
        LODWORD(v9) = *(_DWORD *)(v9 + 12);
      v6 = v8 + 1;
      v5 += ~v7;
      if ((int)v9 < 87)
        v3 = v6;
      else
        v5 = v7;
    }
    while (v5);
  }
  v14 = *(_QWORD *)(*v3 + 16);
  v10 = HIDWORD(v14);
  v11 = v14 == 0;
  v12 = v14 != 0;
  v13 = v14 & 0xFFFFFF00;
  LODWORD(v14) = v14;
  LODWORD(v16) = v10;
  if (v11)
    LODWORD(v14) = 0;
  HIDWORD(v16) = v14 | v13;
  *((_QWORD *)&v15 + 1) = v12;
  *(_QWORD *)&v15 = v16;
  return v15 >> 32;
}

void llvm::AttributeSet::getAsString(llvm::AttributeSetNode **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  llvm::AttributeSetNode *v3;

  v3 = *this;
  if (v3)
  {
    llvm::AttributeSetNode::getAsString(v3, a2, (std::string *)a3);
  }
  else
  {
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

void llvm::AttributeSetNode::getAsString(llvm::AttributeSetNode *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v3;
  llvm::Attribute *v7;
  char *v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  void *__p;
  std::string::size_type v17;
  unsigned __int8 v18;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v3 = *((unsigned int *)this + 2);
  if ((_DWORD)v3)
  {
    v7 = (llvm::AttributeSetNode *)((char *)this + 48);
    v8 = (char *)v7 + 8 * v3;
    llvm::Attribute::getAsString(v7, a2, (uint64_t)&__p);
    if ((v18 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v18 & 0x80u) == 0)
      v10 = v18;
    else
      v10 = v17;
    std::string::append(a3, p_p, v10);
    if ((char)v18 < 0)
    {
      operator delete(__p);
      v11 = (char *)this + 56;
      if (v11 == v8)
        return;
    }
    else
    {
      v11 = (char *)this + 56;
      if (v11 == v8)
        return;
    }
    v12 = 0;
    v13 = 8 * v3 - 8;
    do
    {
      if (v12 != -8)
        std::string::push_back(a3, 32);
      llvm::Attribute::getAsString((llvm::Attribute *)&v11[v12], a2, (uint64_t)&__p);
      if ((v18 & 0x80u) == 0)
        v14 = (const std::string::value_type *)&__p;
      else
        v14 = (const std::string::value_type *)__p;
      if ((v18 & 0x80u) == 0)
        v15 = v18;
      else
        v15 = v17;
      std::string::append(a3, v14, v15);
      if ((char)v18 < 0)
        operator delete(__p);
      v12 += 8;
    }
    while (v13 != v12);
  }
}

BOOL llvm::AttributeSet::hasParentContext(llvm::AttributeSet *this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *NodeOrInsertPos;
  _QWORD *v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x2000000000;
  v4 = *(unsigned int *)(*(_QWORD *)this + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (uint64_t *)(*(_QWORD *)this + 48);
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (v5 >= HIDWORD(v15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v5 + 1, 4);
        v5 = v15;
      }
      *((_DWORD *)v14 + v5) = v8;
      v9 = (v15 + 1);
      LODWORD(v15) = v9;
      if (v9 >= HIDWORD(v15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v9 + 1, 4);
        LODWORD(v9) = v15;
      }
      *((_DWORD *)v14 + v9) = HIDWORD(v8);
      v5 = v15 + 1;
      LODWORD(v15) = v15 + 1;
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v13 = 0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(*(_QWORD *)a2 + 296, (uint64_t)&v14, &v13, (uint64_t)llvm::FoldingSet<llvm::AttributeSetNode>::getFoldingSetInfo(void)::Info);
  v11 = *(_QWORD **)this;
  if (v14 != v16)
    free(v14);
  return NodeOrInsertPos == v11;
}

uint64_t llvm::AttributeSet::begin(llvm::AttributeSet *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 48;
  else
    return 0;
}

uint64_t llvm::AttributeSet::end(llvm::AttributeSet *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 8 * *(unsigned int *)(*(_QWORD *)this + 8) + 48;
  else
    return 0;
}

char *llvm::AttributeSetNode::getSorted(uint64_t *a1, char *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *NodeOrInsertPos;
  uint64_t *v13;
  uint64_t i;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v3 = a3;
  v5 = 0;
  v6 = 0;
  v7 = *a1;
  v25 = v27;
  v26 = 0x2000000000;
  v8 = 8 * a3;
  do
  {
    v9 = *(_QWORD *)&a2[v5];
    if (v6 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v6 + 1, 4);
      v6 = v26;
    }
    *((_DWORD *)v25 + v6) = v9;
    v10 = (v26 + 1);
    LODWORD(v26) = v10;
    if (v10 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v10 + 1, 4);
      LODWORD(v10) = v26;
    }
    *((_DWORD *)v25 + v10) = HIDWORD(v9);
    v6 = v26 + 1;
    LODWORD(v26) = v26 + 1;
    v5 += 8;
  }
  while (v8 != v5);
  v21 = 0;
  v11 = v7 + 296;
  NodeOrInsertPos = (char *)llvm::FoldingSetBase::FindNodeOrInsertPos(v7 + 296, (uint64_t)&v25, &v21, (uint64_t)llvm::FoldingSet<llvm::AttributeSetNode>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    NodeOrInsertPos = (char *)operator new(v8 + 48);
    *(_QWORD *)NodeOrInsertPos = 0;
    *((_DWORD *)NodeOrInsertPos + 2) = v3;
    *(_OWORD *)(NodeOrInsertPos + 12) = 0u;
    v13 = (uint64_t *)(NodeOrInsertPos + 48);
    *(_OWORD *)(NodeOrInsertPos + 28) = 0u;
    memmove(NodeOrInsertPos + 48, a2, v8);
    if (v3)
    {
      for (i = 8 * v3; i; i -= 8)
      {
        v15 = *v13;
        if (*v13)
        {
          if (*(_BYTE *)(v15 + 8) == 2)
          {
            v18 = *(unsigned int *)(v15 + 12);
            *(_QWORD *)&v22 = v15 + 24;
            *((_QWORD *)&v22 + 1) = v18;
            v23 = v15;
            v24 = 0;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)NodeOrInsertPos + 3, (uint64_t)&v22, &v24) & 1) == 0)
            {
              v19 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)(NodeOrInsertPos + 24), (uint64_t)&v22, (uint64_t)&v22, v24);
              *(_OWORD *)v19 = v22;
              v19[2] = v23;
            }
            goto LABEL_13;
          }
          LODWORD(v15) = *(_DWORD *)(v15 + 12);
        }
        v16 = 1 << (v15 & 7);
        v17 = v15 + ((int)v15 < 0 ? 7 : 0);
        NodeOrInsertPos[((uint64_t)v17 >> 3) + 12] |= v16;
LABEL_13:
        ++v13;
      }
    }
    llvm::FoldingSetBase::InsertNode(v11, (uint64_t *)NodeOrInsertPos, v21, (uint64_t)llvm::FoldingSet<llvm::AttributeSetNode>::getFoldingSetInfo(void)::Info);
  }
  if (v25 != v27)
    free(v25);
  return NodeOrInsertPos;
}

uint64_t *llvm::AttributeList::getImpl(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *NodeOrInsertPos;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[17];

  v4 = a2;
  v33[16] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v31 = v33;
  v32 = 0x2000000000;
  v6 = 8 * a3;
  if (a3)
  {
    v7 = 0;
    v8 = 8 * a3;
    v9 = a2;
    do
    {
      v10 = *v9;
      if (v7 >= HIDWORD(v32))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v7 + 1, 4);
        v7 = v32;
      }
      *((_DWORD *)v31 + v7) = v10;
      v11 = (v32 + 1);
      LODWORD(v32) = v11;
      if (v11 >= HIDWORD(v32))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v11 + 1, 4);
        LODWORD(v11) = v32;
      }
      *((_DWORD *)v31 + v11) = HIDWORD(v10);
      v7 = v32 + 1;
      LODWORD(v32) = v32 + 1;
      ++v9;
      v8 -= 8;
    }
    while (v8);
  }
  v30 = 0;
  v12 = v5 + 280;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(v5 + 280, (uint64_t)&v31, &v30, (uint64_t)llvm::FoldingSet<llvm::AttributeListImpl>::getFoldingSetInfo(void)::Info);
  if (NodeOrInsertPos)
    goto LABEL_40;
  v14 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(v5 + 2072), v6 + 40, 3);
  NodeOrInsertPos = (uint64_t *)v14;
  *(_QWORD *)v14 = 0;
  *(_DWORD *)(v14 + 8) = a3;
  *(_QWORD *)(v14 + 12) = 0;
  v15 = v14 + 12;
  *(_QWORD *)(v14 + 28) = 0;
  *(_QWORD *)(v14 + 20) = 0;
  if (a3)
    memmove((void *)(v14 + 40), v4, v6);
  v16 = *v4;
  if (*v4)
    v17 = (uint64_t *)(*v4 + 48);
  else
    v17 = 0;
  if (v16)
  {
    v18 = *v4 + 48 + 8 * *(unsigned int *)(v16 + 8);
    if (v17 != (uint64_t *)v18)
      goto LABEL_21;
    goto LABEL_24;
  }
  v18 = 0;
  if (v17)
  {
    do
    {
LABEL_21:
      v21 = *v17;
      if (*v17)
      {
        if (*(_BYTE *)(v21 + 8) == 2)
          goto LABEL_20;
        LODWORD(v21) = *(_DWORD *)(v21 + 12);
      }
      v19 = 1 << (v21 & 7);
      v20 = v21 + ((int)v21 < 0 ? 7 : 0);
      *(_BYTE *)(v15 + ((uint64_t)v20 >> 3)) |= v19;
LABEL_20:
      ++v17;
    }
    while (v17 != (uint64_t *)v18);
  }
LABEL_24:
  if (a3)
  {
    v22 = &v4[a3];
    do
    {
      v23 = *v4;
      if (*v4)
        v24 = (uint64_t *)(*v4 + 48);
      else
        v24 = 0;
      if (v23)
        v25 = *v4 + 48 + 8 * *(unsigned int *)(v23 + 8);
      else
        v25 = 0;
      while (v24 != (uint64_t *)v25)
      {
        v28 = *v24;
        if (!*v24)
          goto LABEL_33;
        if (*(_BYTE *)(v28 + 8) != 2)
        {
          LODWORD(v28) = *(_DWORD *)(v28 + 12);
LABEL_33:
          v26 = 1 << (v28 & 7);
          v27 = v28 + ((int)v28 < 0 ? 7 : 0);
          *((_BYTE *)NodeOrInsertPos + ((uint64_t)v27 >> 3) + 24) |= v26;
        }
        ++v24;
      }
      ++v4;
    }
    while (v4 != v22);
  }
  llvm::FoldingSetBase::InsertNode(v12, NodeOrInsertPos, v30, (uint64_t)llvm::FoldingSet<llvm::AttributeListImpl>::getFoldingSetInfo(void)::Info);
LABEL_40:
  if (v31 != v33)
    free(v31);
  return NodeOrInsertPos;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *Impl;
  _QWORD *v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v4 = a2;
  v6 = *(_DWORD *)(a2 + 16 * a3 - 16);
  if (v6 == -1)
  {
    if (a3 <= 1)
    {
      v8 = 0;
      v10 = v15;
      v13 = v15;
      v14 = 0x400000000;
      v7 = 1;
      goto LABEL_13;
    }
    v6 = *(_DWORD *)(a2 + 16 * a3 - 32);
  }
  v13 = v15;
  v14 = 0x400000000;
  v7 = (v6 + 2);
  if (v6 != -2)
  {
    if (v7 < 5)
    {
      v8 = 0;
      if (!v7)
      {
LABEL_14:
        LODWORD(v14) = v7;
        goto LABEL_15;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, (v6 + 2), 8);
      v8 = v14;
      if (v14 == v7)
        goto LABEL_14;
    }
    v10 = v13;
LABEL_13:
    bzero(&v10[v8], 8 * (v7 - v8));
    goto LABEL_14;
  }
LABEL_15:
  v11 = v4 + 16 * a3;
  do
  {
    *((_QWORD *)v13 + (*(_DWORD *)v4 + 1)) = *(_QWORD *)(v4 + 8);
    v4 += 16;
  }
  while (v4 != v11);
  Impl = llvm::AttributeList::getImpl(a1, v13, v7);
  if (v13 != v15)
    free(v13);
  return Impl;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *Impl;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  LODWORD(v10) = a5 + 3;
  v11 = a5;
  do
  {
    if (!v11)
      goto LABEL_9;
    v12 = *(_QWORD *)&a4[8 * v11-- - 8];
    v10 = (v10 - 1);
  }
  while (!v12);
  if (!(_DWORD)v10)
  {
LABEL_9:
    if (a3)
    {
      LODWORD(v10) = 2;
    }
    else
    {
      if (!a2)
        return 0;
      LODWORD(v10) = 1;
    }
    v18 = v20;
    v19 = 0x800000000;
    goto LABEL_14;
  }
  v18 = v20;
  v19 = 0x800000000;
  if (v10 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v10, 8);
    v13 = v19;
    if (v19 >= HIDWORD(v19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v19 + 1, 8);
      v13 = v19;
    }
    *((_QWORD *)v18 + v13) = a2;
    v14 = v19 + 1;
    LODWORD(v19) = v19 + 1;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)v18 = a2;
  v14 = v19 + 1;
  LODWORD(v19) = v19 + 1;
  if ((_DWORD)v10 == 1)
    goto LABEL_21;
LABEL_15:
  if (v14 >= HIDWORD(v19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v14 + 1, 8);
    v14 = v19;
  }
  *((_QWORD *)v18 + v14) = a3;
  v14 = v19 + 1;
  LODWORD(v19) = v19 + 1;
  if (v10 >= 3)
  {
    v15 = (v10 - 2);
    if (a5 < v15)
      v15 = a5;
    llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&v18, (uint64_t)v18 + 8 * v14, a4, &a4[8 * v15]);
    v14 = v19;
  }
LABEL_21:
  Impl = llvm::AttributeList::getImpl(a1, v18, v14);
  if (v18 != v20)
    free(v18);
  return Impl;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, int a2, uint64_t a3)
{
  char *Sorted;
  char *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *Impl;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  Sorted = llvm::AttributeSetNode::getSorted(a1, *(char **)(a3 + 8), *(unsigned int *)(a3 + 16));
  if (!Sorted)
    return 0;
  v6 = Sorted;
  v7 = a2 + 1;
  v14 = v16;
  v15 = 0x800000000;
  v8 = (a2 + 2);
  if (!(_DWORD)v8)
  {
    v10 = v16;
    goto LABEL_11;
  }
  if (v8 < 9)
  {
    v9 = 0;
    v10 = v16;
    v11 = v8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v8, 8);
    v9 = v15;
    v10 = v14;
    v11 = v8 - v15;
    if (v8 == v15)
      goto LABEL_10;
  }
  bzero(&v10[v9], 8 * v11);
LABEL_10:
  LODWORD(v15) = v8;
LABEL_11:
  v10[v7] = v6;
  Impl = llvm::AttributeList::getImpl(a1, v14, v8);
  if (v14 != v16)
    free(v14);
  return Impl;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *Impl;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  size_t v32;
  int v33;
  int v34;
  char *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  int v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *Sorted;
  unint64_t v54;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v59;
  uint64_t *v60;
  char *v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[9];
  void *v66;
  uint64_t v67;
  _BYTE v68[64];
  _QWORD *v69;
  uint64_t v70;
  _QWORD v71[10];

  Impl = a3;
  v71[8] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return Impl;
  if (a3 == (uint64_t *)1)
    return (uint64_t *)*a2;
  LODWORD(v4) = 0;
  v5 = 8 * (_QWORD)a3;
  v6 = a2;
  v56 = &a2[(_QWORD)a3];
  do
  {
    v7 = *v6;
    if (*v6)
      LODWORD(v7) = *(_DWORD *)(v7 + 8);
    if (v4 <= v7)
      v4 = v7;
    else
      v4 = v4;
    ++v6;
    v5 -= 8;
  }
  while (v5);
  if (!(_DWORD)v4)
    return 0;
  v69 = v71;
  v70 = 0x800000000;
  v54 = v4;
  if (v4 < 9)
  {
    v9 = 0;
    v10 = v4;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v4, 8);
    v8 = v54;
    v9 = v70;
    v10 = v54 - v70;
    if (v54 == v70)
      goto LABEL_18;
  }
  bzero(&v69[v9], 8 * v10);
  v8 = v54;
LABEL_18:
  v57 = 0;
  LODWORD(v70) = v8;
  do
  {
    v11 = a2;
    v65[8] = a1;
    v66 = v68;
    v67 = 0x800000000;
    do
    {
      v12 = *v11;
      if (!*v11 || v57 >= *(unsigned int *)(v12 + 8))
      {
        v14 = 0;
        v16 = 0;
        v63 = v65;
        v64 = 0x800000000;
        v17 = 0;
        goto LABEL_31;
      }
      v13 = *(_QWORD *)(v12 + 8 * v57 + 40);
      v63 = v65;
      v64 = 0x800000000;
      if (!v13)
      {
        v14 = 0;
        v16 = 0;
        v17 = 0;
LABEL_31:
        v18 = 0;
        v19 = v65;
        if (v14 == v16)
          goto LABEL_33;
LABEL_32:
        memcpy(&v19[v18], v14, v17);
        v18 = v64;
        v19 = (uint64_t *)v63;
        goto LABEL_33;
      }
      v14 = (char *)(v13 + 48);
      v15 = *(unsigned int *)(v13 + 8);
      v16 = &v14[8 * v15];
      v17 = 8 * v15;
      if ((unint64_t)(8 * v15) < 0x41)
        goto LABEL_31;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v65, v17 >> 3, 8);
      v18 = v64;
      v19 = (uint64_t *)v63;
      if (v14 != v16)
        goto LABEL_32;
LABEL_33:
      v20 = v18 + ((unint64_t)v17 >> 3);
      LODWORD(v64) = v20;
      if (!v20)
        goto LABEL_97;
      v21 = &v19[v20];
      v59 = v11;
      v60 = v21;
      while (2)
      {
        v22 = *v19;
        if (!*v19)
        {
          v34 = 0;
          v51 = (char *)v66;
          v50 = v67;
          if (!(_DWORD)v67)
            goto LABEL_35;
LABEL_60:
          v35 = v51;
          v36 = v50;
          while (2)
          {
            v39 = v36 >> 1;
            v40 = &v35[8 * (v36 >> 1)];
            v41 = *(_QWORD *)v40;
            if (*(_QWORD *)v40)
            {
              if (*(_BYTE *)(v41 + 8) != 2)
              {
                LODWORD(v41) = *(_DWORD *)(v41 + 12);
                goto LABEL_61;
              }
            }
            else
            {
LABEL_61:
              v37 = v40 + 8;
              v38 = v36 + ~v39;
              if ((int)v41 < v34)
              {
                v39 = v38;
                v35 = v37;
              }
            }
            v36 = v39;
            if (!v39)
            {
              if (v35 != &v51[8 * v50])
              {
                v42 = *(_QWORD *)v35;
                if (*(_QWORD *)v35)
                {
                  if (*(_BYTE *)(v42 + 8) != 2 && *(_DWORD *)(v42 + 12) == v34)
                    goto LABEL_71;
                }
                else if (!v34)
                {
LABEL_71:
                  *(_QWORD *)v35 = v22;
                  goto LABEL_39;
                }
                if (v50 >= HIDWORD(v67))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v50 + 1, 8);
                  v48 = v66;
                  v50 = v67;
                }
                else
                {
                  v48 = v51;
                }
                v45 = (char *)&v48[(v35 - v51) >> 3];
                v48[v50] = v48[v50 - 1];
                v49 = (char *)v66 + 8 * v50 - 8;
                if (v49 != v45)
                {
                  memmove(v45 + 8, v45, v49 - v45);
                  LODWORD(v50) = v67;
                }
                v47 = v50 + 1;
LABEL_92:
                LODWORD(v67) = v47;
                *(_QWORD *)v45 = v22;
                goto LABEL_39;
              }
LABEL_35:
              if (v50 >= HIDWORD(v67))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v50 + 1, 8);
                v50 = v67;
                v51 = (char *)v66;
              }
              *(_QWORD *)&v51[8 * v50] = v22;
LABEL_38:
              LODWORD(v67) = v67 + 1;
              goto LABEL_39;
            }
            continue;
          }
        }
        if (*(_BYTE *)(v22 + 8) != 2)
        {
          v34 = *(_DWORD *)(v22 + 12);
          v51 = (char *)v66;
          v50 = v67;
          if (!(_DWORD)v67)
            goto LABEL_35;
          goto LABEL_60;
        }
        v23 = v66;
        v24 = v67;
        if (!(_DWORD)v67)
          goto LABEL_83;
        v25 = *(unsigned int *)(v22 + 12);
        v26 = (char *)v66;
        v27 = v67;
        v61 = (char *)v66 + 8 * v67;
        v62 = v66;
        do
        {
          v28 = v27 >> 1;
          v29 = &v26[8 * (v27 >> 1)];
          v30 = *(_QWORD *)v29;
          if (!*(_QWORD *)v29 || *(_BYTE *)(v30 + 8) != 2)
          {
LABEL_44:
            v26 = v29 + 8;
            v28 = v27 + ~v28;
            goto LABEL_45;
          }
          v31 = *(_DWORD *)(v30 + 12);
          if (v25 >= v31)
            v32 = v31;
          else
            v32 = v25;
          if ((_DWORD)v32 && (v33 = memcmp((const void *)(v30 + 24), (const void *)(v22 + 24), v32)) != 0)
          {
            if (v33 < 0)
              goto LABEL_44;
          }
          else if (v25 > v31)
          {
            goto LABEL_44;
          }
LABEL_45:
          v27 = v28;
        }
        while (v28);
        v21 = v60;
        v23 = v62;
        if (v26 == v61)
        {
LABEL_83:
          if (v24 >= HIDWORD(v67))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v24 + 1, 8);
            v24 = v67;
            v23 = v66;
          }
          v23[v24] = v22;
          goto LABEL_38;
        }
        v43 = *(_QWORD *)v26;
        if (!*(_QWORD *)v26
          || *(_BYTE *)(v43 + 8) != 2
          || (_DWORD)v25 != *(_DWORD *)(v43 + 12)
          || (_DWORD)v25 && memcmp((const void *)(v43 + 24), (const void *)(v22 + 24), v25))
        {
          if (v24 >= HIDWORD(v67))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v24 + 1, 8);
            v44 = v66;
            v24 = v67;
          }
          else
          {
            v44 = v62;
          }
          v45 = (char *)&v44[(v26 - (char *)v62) >> 3];
          v44[v24] = v44[v24 - 1];
          v46 = (char *)v66 + 8 * v24 - 8;
          if (v46 != v45)
          {
            memmove(v45 + 8, v45, v46 - v45);
            LODWORD(v24) = v67;
          }
          v47 = v24 + 1;
          goto LABEL_92;
        }
        *(_QWORD *)v26 = v22;
LABEL_39:
        if (++v19 != v21)
          continue;
        break;
      }
      v19 = (uint64_t *)v63;
      v11 = v59;
LABEL_97:
      if (v19 != v65)
        free(v19);
      ++v11;
    }
    while (v11 != v56);
    Sorted = llvm::AttributeSetNode::getSorted(a1, (char *)v66, v67);
    v69[v57] = Sorted;
    if (v66 != v68)
      free(v66);
    ++v57;
  }
  while (v57 != v54);
  Impl = llvm::AttributeList::getImpl(a1, v69, v70);
  if (v69 != v71)
    free(v69);
  return Impl;
}

uint64_t *llvm::AttributeList::addAttributeAtIndex(uint64_t **a1, uint64_t *a2, int a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  char *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (*a1 && (a3 + 1) < *((_DWORD *)v8 + 2) && (v9 = v8[(a3 + 1) + 5]) != 0)
  {
    if (((*(unsigned __int8 *)(v9 + a4 / 8 + 12) >> (a4 & 7)) & 1) != 0)
      return v8;
    v10 = (const void *)(v9 + 48);
    v11 = v9 + 48 + 8 * *(unsigned int *)(v9 + 8);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v18 = v20;
  v19 = 0x800000000;
  v12 = v11 - (_QWORD)v10;
  if ((unint64_t)(v11 - (_QWORD)v10) >= 0x41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v12 >> 3, 8);
    v13 = v19;
    if (v10 == (const void *)v11)
      goto LABEL_12;
    goto LABEL_11;
  }
  v13 = 0;
  if (v10 != (const void *)v11)
  {
LABEL_11:
    memcpy((char *)v18 + 8 * v13, v10, v11 - (_QWORD)v10);
    v13 = v19;
  }
LABEL_12:
  LODWORD(v19) = v13 + ((unint64_t)v12 >> 3);
  v14 = llvm::Attribute::get(a2, a4, 0);
  v15 = v19;
  if (v19 >= HIDWORD(v19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v19 + 1, 8);
    v15 = v19;
  }
  *((_QWORD *)v18 + v15) = v14;
  LODWORD(v19) = v19 + 1;
  v16 = llvm::AttributeSetNode::get(a2, v18, v19);
  v8 = llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, (uint64_t)v16);
  if (v18 != v20)
    free(v18);
  return v8;
}

uint64_t *llvm::AttributeList::setAttributesAtIndex(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *Impl;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  if (*a1)
    v8 = (const void *)(*a1 + 40);
  else
    v8 = 0;
  if (v7)
    v9 = *a1 + 40 + 8 * *(unsigned int *)(v7 + 8);
  else
    v9 = 0;
  v19 = v21;
  v20 = 0x400000000;
  v10 = v9 - (_QWORD)v8;
  if ((unint64_t)(v9 - (_QWORD)v8) < 0x21)
  {
    v11 = 0;
    v12 = (a3 + 1);
    if (v8 == (const void *)v9)
      goto LABEL_12;
    goto LABEL_11;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v10 >> 3, 8);
  v11 = v20;
  v12 = (a3 + 1);
  if (v8 != (const void *)v9)
  {
LABEL_11:
    memcpy((char *)v19 + 8 * v11, v8, v9 - (_QWORD)v8);
    v11 = v20;
  }
LABEL_12:
  v13 = v11 + ((unint64_t)v10 >> 3);
  LODWORD(v20) = v13;
  if (v13 > v12)
  {
    *((_QWORD *)v19 + v12) = a4;
    v14 = v19;
    goto LABEL_24;
  }
  v15 = (a3 + 2);
  if (v13 == (_DWORD)v15)
  {
    LODWORD(v15) = v13;
    *((_QWORD *)v19 + v12) = a4;
    v14 = v19;
    if (!v13)
      goto LABEL_26;
LABEL_23:
    v13 = v15;
LABEL_24:
    while (1)
    {
      v16 = v13;
      if (v14[v13 - 1])
        break;
      --v13;
      LODWORD(v20) = v16 - 1;
      if (v16 == 1)
        goto LABEL_26;
    }
    Impl = llvm::AttributeList::getImpl(a2, v14, v13);
    v14 = v19;
    if (v19 != v21)
      goto LABEL_27;
    return Impl;
  }
  if (v13 <= v15)
  {
    if (HIDWORD(v20) < v15)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v15, 8);
      v13 = v20;
    }
    if (v13 != (_DWORD)v15)
      bzero((char *)v19 + 8 * v13, 8 * (v15 - v13));
  }
  LODWORD(v20) = v15;
  *((_QWORD *)v19 + v12) = a4;
  v14 = v19;
  if ((_DWORD)v15)
    goto LABEL_23;
LABEL_26:
  Impl = 0;
  if (v14 != v21)
LABEL_27:
    free(v14);
  return Impl;
}

uint64_t llvm::AttrBuilder::addAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  if (a2)
  {
    if (*(_BYTE *)(a2 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>(a1 + 8, (void *)(a2 + 24), *(unsigned int *)(a2 + 12), a2);
      return a1;
    }
    LODWORD(a2) = *(_DWORD *)(a2 + 12);
  }
  addAttributeImpl<llvm::Attribute::AttrKind>(a1 + 8, a2, v2);
  return a1;
}

uint64_t llvm::AttributeList::begin(llvm::AttributeList *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 40;
  else
    return 0;
}

uint64_t llvm::AttributeList::end(llvm::AttributeList *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 8 * *(unsigned int *)(*(_QWORD *)this + 8) + 40;
  else
    return 0;
}

uint64_t *llvm::AttributeList::addParamAttribute(_QWORD *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *Sorted;
  uint64_t *Impl;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[64];
  void *v35;
  uint64_t v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  if (*a1)
    v10 = (const void *)(*a1 + 40);
  else
    v10 = 0;
  if (v9)
    v11 = *a1 + 40 + 8 * *(unsigned int *)(v9 + 8);
  else
    v11 = 0;
  v35 = v37;
  v36 = 0x400000000;
  v12 = v11 - (_QWORD)v10;
  if ((unint64_t)(v11 - (_QWORD)v10) < 0x21)
  {
    v13 = 0;
    if (v10 == (const void *)v11)
      goto LABEL_12;
    goto LABEL_11;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v12 >> 3, 8);
  v13 = v36;
  if (v10 != (const void *)v11)
  {
LABEL_11:
    memcpy((char *)v35 + 8 * v13, v10, v11 - (_QWORD)v10);
    v13 = v36;
  }
LABEL_12:
  v14 = v13 + ((unint64_t)v12 >> 3);
  LODWORD(v36) = v14;
  v15 = a3[a4 - 1];
  v16 = (v15 + 3);
  if (v14 > v15 + 2 || v14 == (_DWORD)v16)
  {
    if (!a4)
      goto LABEL_35;
    goto LABEL_18;
  }
  if (v14 <= v16)
  {
    if (HIDWORD(v36) < v16)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v16, 8);
      v14 = v36;
    }
    if (v14 != (_DWORD)v16)
      bzero((char *)v35 + 8 * v14, 8 * (v16 - v14));
  }
  LODWORD(v36) = v16;
  if (a4)
  {
LABEL_18:
    if (a5)
    {
      v18 = 4 * a4;
      do
      {
        v19 = (*a3 + 2);
        v20 = *((_QWORD *)v35 + v19);
        v32 = v34;
        v33 = 0x800000000;
        if (v20)
        {
          v21 = (char *)(v20 + 48);
          v22 = (char *)(v20 + 48 + 8 * *(unsigned int *)(v20 + 8));
        }
        else
        {
          v21 = 0;
          v22 = 0;
        }
        llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&v32, (uint64_t)v34, v21, v22);
        if (*(_BYTE *)(a5 + 8) == 2)
          addAttributeImpl<llvm::StringRef>((uint64_t)&v32, (void *)(a5 + 24), *(unsigned int *)(a5 + 12), a5);
        else
          addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)&v32, *(_DWORD *)(a5 + 12), a5);
        Sorted = llvm::AttributeSetNode::getSorted(a2, (char *)v32, v33);
        *((_QWORD *)v35 + v19) = Sorted;
        if (v32 != v34)
          free(v32);
        ++a3;
        v18 -= 4;
      }
      while (v18);
    }
    else
    {
      v26 = 4 * a4;
      do
      {
        v27 = (*a3 + 2);
        v28 = *((_QWORD *)v35 + v27);
        v32 = v34;
        v33 = 0x800000000;
        if (v28)
        {
          v29 = (char *)(v28 + 48);
          v30 = (char *)(v28 + 48 + 8 * *(unsigned int *)(v28 + 8));
        }
        else
        {
          v29 = 0;
          v30 = 0;
        }
        llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&v32, (uint64_t)v34, v29, v30);
        addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)&v32, 0, 0);
        v31 = llvm::AttributeSetNode::getSorted(a2, (char *)v32, v33);
        *((_QWORD *)v35 + v27) = v31;
        if (v32 != v34)
          free(v32);
        ++a3;
        v26 -= 4;
      }
      while (v26);
    }
  }
LABEL_35:
  Impl = llvm::AttributeList::getImpl(a2, v35, v36);
  if (v35 != v37)
    free(v35);
  return Impl;
}

uint64_t *llvm::AttributeList::removeAttributeAtIndex(_QWORD *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  char *v11;

  v7 = *a1;
  if (*a1 && (a3 + 1) < *(_DWORD *)(v7 + 8))
    v8 = *(char **)(v7 + 8 * (a3 + 1) + 40);
  else
    v8 = 0;
  v11 = v8;
  v9 = llvm::AttributeSet::removeAttribute(&v11, a2, a4);
  if (v8 == v9)
    return (uint64_t *)*a1;
  else
    return llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, (uint64_t)v9);
}

uint64_t *llvm::AttributeList::removeAttributesAtIndex(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  char *v11;

  v7 = *a1;
  if (*a1 && (a3 + 1) < *(_DWORD *)(v7 + 8))
    v8 = *(char **)(v7 + 8 * (a3 + 1) + 40);
  else
    v8 = 0;
  v11 = v8;
  v9 = llvm::AttributeSet::removeAttributes(&v11, a2, a4);
  if (v8 == v9)
    return (uint64_t *)*a1;
  else
    return llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, (uint64_t)v9);
}

uint64_t **llvm::AttrBuilder::addDereferenceableAttr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;
  int v5;

  if (!a2)
    return this;
  v3 = llvm::Attribute::get(*this, 81, a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(this + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(this + 1), v5, v3);
  return this;
}

uint64_t **llvm::AttrBuilder::addDereferenceableOrNullAttr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;
  int v5;

  if (!a2)
    return this;
  v3 = llvm::Attribute::get(*this, 82, a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(this + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(this + 1), v5, v3);
  return this;
}

uint64_t llvm::AttributeList::getParamAttrs(llvm::AttributeList *this, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this && (a2 + 2) < *(_DWORD *)(v2 + 8))
    return *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  else
    return 0;
}

uint64_t llvm::AttributeList::getRetAttrs(llvm::AttributeList *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_DWORD *)(v1 + 8) >= 2u)
    return *(_QWORD *)(v1 + 48);
  else
    return 0;
}

uint64_t llvm::AttributeList::getFnAttrs(llvm::AttributeList *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_DWORD *)(v1 + 8))
    return *(_QWORD *)(v1 + 40);
  else
    return 0;
}

uint64_t llvm::AttributeList::hasAttributeAtIndex(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  if (*a1
    && (a2 + 1) < *(_DWORD *)(v3 + 8)
    && (v4 = *(_QWORD *)(v3 + 8 * (a2 + 1) + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + a3 / 8 + 12) >> (a3 & 7)) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL llvm::AttributeList::hasAttributesAtIndex(llvm::AttributeList *this, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  return *(_QWORD *)this
      && (a2 + 1) < *(_DWORD *)(v2 + 8)
      && *(_QWORD *)(v2 + 8 * (a2 + 1) + 40) != 0;
}

uint64_t llvm::AttributeList::hasFnAttr(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;

  v3 = *a1;
  if (!*a1)
    return 0;
  if (!*(_DWORD *)(v3 + 8))
    return 0;
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
    return 0;
  v6[0] = a2;
  v6[1] = a3;
  v7 = 0;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v4 + 24), (uint64_t)v6, &v7);
}

BOOL llvm::AttributeList::hasAttrSomewhere(uint64_t *a1, int a2, int *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  int v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = a2 + 7;
  if (a2 >= 0)
    v4 = a2;
  v5 = (uint64_t)v4 >> 3;
  v6 = 1 << (a2 & 7);
  result = (v6 & *(_BYTE *)(v3 + v5 + 24)) != 0;
  if (a3 && (v6 & *(_BYTE *)(v3 + v5 + 24)) != 0)
  {
    v8 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v8)
    {
      v9 = (_QWORD *)(v3 + 40);
      v10 = -1;
      while (!*v9 || (v6 & *(_BYTE *)(*v9 + v5 + 12)) == 0)
      {
        ++v10;
        ++v9;
        if (!--v8)
          return 1;
      }
      *a3 = v10;
    }
    return 1;
  }
  return result;
}

uint64_t llvm::AttributeList::getAttributeAtIndex(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = *a1;
  if (!*a1)
    return 0;
  if ((a2 + 1) >= *(_DWORD *)(v3 + 8))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * (a2 + 1) + 40);
  if (!v4 || ((*(unsigned __int8 *)(v4 + a3 / 8 + 12) >> (a3 & 7)) & 1) == 0)
    return 0;
  v5 = (_QWORD *)(v4 + 48);
  v6 = 8 * *(unsigned int *)(v4 + 8) - 8 * *(unsigned int *)(v4 + 32);
  if (v6)
  {
    v7 = v6 >> 3;
    do
    {
      v9 = v7 >> 1;
      v10 = &v5[v7 >> 1];
      v11 = *v10;
      if (*v10)
        LODWORD(v11) = *(_DWORD *)(v11 + 12);
      v8 = v10 + 1;
      v7 += ~v9;
      if ((int)v11 < a3)
        v5 = v8;
      else
        v7 = v9;
    }
    while (v7);
  }
  return *v5;
}

uint64_t llvm::AttributeList::getAttributeAtIndex(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;

  v4 = *a1;
  if (!*a1)
    return 0;
  if ((a2 + 1) >= *(_DWORD *)(v4 + 8))
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * (a2 + 1) + 40);
  if (!v5)
    return 0;
  v8[0] = a3;
  v8[1] = a4;
  v9 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v5 + 24), (uint64_t)v8, &v9);
  result = 0;
  if (v6)
    return *(_QWORD *)(v9 + 16);
  return result;
}

uint64_t llvm::AttributeList::getRetAlignment(llvm::AttributeList *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return ((_DWORD)v1 << 8);
  if (*(_DWORD *)(v1 + 8) < 2u)
  {
LABEL_5:
    LODWORD(v1) = 0;
    return ((_DWORD)v1 << 8);
  }
  v2 = *(_QWORD *)(v1 + 48);
  if (!v2)
    return 0;
  if ((*(_BYTE *)(v2 + 21) & 0x40) == 0)
    goto LABEL_5;
  v4 = (_QWORD *)(v2 + 48);
  v5 = 8 * *(unsigned int *)(v2 + 8) - 8 * *(unsigned int *)(v2 + 32);
  if (v5)
  {
    v6 = v5 >> 3;
    do
    {
      v8 = v6 >> 1;
      v9 = &v4[v6 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v7 = v9 + 1;
      v6 += ~v8;
      if ((int)v10 < 78)
        v4 = v7;
      else
        v6 = v8;
    }
    while (v6);
  }
  v11 = *(_QWORD *)(*v4 + 16);
  v12 = __clz(v11) ^ 0x3F | 0x100;
  if (!v11)
    v12 = 0;
  return v12 | (v12 >> 8 << 8);
}

uint64_t llvm::AttributeList::getParamAlignment(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return ((_DWORD)v2 << 8);
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
  {
LABEL_5:
    LODWORD(v2) = 0;
    return ((_DWORD)v2 << 8);
  }
  v3 = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 21) & 0x40) == 0)
    goto LABEL_5;
  v5 = (_QWORD *)(v3 + 48);
  v6 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v6)
  {
    v7 = v6 >> 3;
    do
    {
      v9 = v7 >> 1;
      v10 = &v5[v7 >> 1];
      v11 = *v10;
      if (*v10)
        LODWORD(v11) = *(_DWORD *)(v11 + 12);
      v8 = v10 + 1;
      v7 += ~v9;
      if ((int)v11 < 78)
        v5 = v8;
      else
        v7 = v9;
    }
    while (v7);
  }
  v12 = *(_QWORD *)(*v5 + 16);
  v13 = __clz(v12) ^ 0x3F | 0x100;
  if (!v12)
    v13 = 0;
  return v13 | (v13 >> 8 << 8);
}

uint64_t llvm::AttributeList::getParamStructRetType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!v3 || (*(_BYTE *)(v3 + 21) & 0x20) == 0)
    return 0;
  v4 = (uint64_t *)(v3 + 48);
  v5 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v5)
  {
    v6 = v5 >> 3;
    do
    {
      v8 = v6 >> 1;
      v9 = &v4[v6 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v7 = v9 + 1;
      v6 += ~v8;
      if ((int)v10 < 77)
        v4 = v7;
      else
        v6 = v8;
    }
    while (v6);
  }
  v11 = *v4;
  if (v11)
    return *(_QWORD *)(v11 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeList::getParamElementType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!v3 || (*(_BYTE *)(v3 + 21) & 4) == 0)
    return 0;
  v4 = (uint64_t *)(v3 + 48);
  v5 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v5)
  {
    v6 = v5 >> 3;
    do
    {
      v8 = v6 >> 1;
      v9 = &v4[v6 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v7 = v9 + 1;
      v6 += ~v8;
      if ((int)v10 < 74)
        v4 = v7;
      else
        v6 = v8;
    }
    while (v6);
  }
  v11 = *v4;
  if (v11)
    return *(_QWORD *)(v11 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeList::getAllocKind(llvm::AttributeList *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  if (!*(_DWORD *)(v1 + 8))
    return 0;
  v2 = *(_QWORD *)(v1 + 40);
  if (!v2 || (*(char *)(v2 + 21) & 0x80000000) == 0)
    return 0;
  v4 = (_QWORD *)(v2 + 48);
  v5 = 8 * *(unsigned int *)(v2 + 8) - 8 * *(unsigned int *)(v2 + 32);
  if (v5)
  {
    v6 = v5 >> 3;
    do
    {
      v8 = v6 >> 1;
      v9 = &v4[v6 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v7 = v9 + 1;
      v6 += ~v8;
      if ((int)v10 < 79)
        v4 = v7;
      else
        v6 = v8;
    }
    while (v6);
  }
  return *(_QWORD *)(*v4 + 16);
}

uint64_t llvm::AttributeList::getMemoryEffects(llvm::AttributeList *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 63;
  if (!*(_DWORD *)(v1 + 8))
    return 63;
  v2 = *(_QWORD *)(v1 + 40);
  if (!v2 || (*(_BYTE *)(v2 + 22) & 8) == 0)
    return 63;
  v4 = (_QWORD *)(v2 + 48);
  v5 = 8 * *(unsigned int *)(v2 + 8) - 8 * *(unsigned int *)(v2 + 32);
  if (v5)
  {
    v6 = v5 >> 3;
    do
    {
      v8 = v6 >> 1;
      v9 = &v4[v6 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v7 = v9 + 1;
      v6 += ~v8;
      if ((int)v10 < 83)
        v4 = v7;
      else
        v6 = v8;
    }
    while (v6);
  }
  return *(unsigned int *)(*v4 + 16);
}

void llvm::AttributeList::getAsString(llvm::AttributeList *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  llvm::AttributeSetNode *v5;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this
    && (a2 + 1) < *(_DWORD *)(v4 + 8)
    && (v5 = *(llvm::AttributeSetNode **)(v4 + 8 * (a2 + 1) + 40)) != 0)
  {
    llvm::AttributeSetNode::getAsString(v5, a3, (std::string *)a4);
  }
  else
  {
    *(_BYTE *)(a4 + 23) = 0;
    *(_BYTE *)a4 = 0;
  }
}

BOOL llvm::AttributeList::hasParentContext(llvm::AttributeList *this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *NodeOrInsertPos;
  _QWORD *v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x2000000000;
  v4 = *(unsigned int *)(*(_QWORD *)this + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (uint64_t *)(*(_QWORD *)this + 40);
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (v5 >= HIDWORD(v15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v5 + 1, 4);
        v5 = v15;
      }
      *((_DWORD *)v14 + v5) = v8;
      v9 = (v15 + 1);
      LODWORD(v15) = v9;
      if (v9 >= HIDWORD(v15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v9 + 1, 4);
        LODWORD(v9) = v15;
      }
      *((_DWORD *)v14 + v9) = HIDWORD(v8);
      v5 = v15 + 1;
      LODWORD(v15) = v15 + 1;
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v13 = 0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(*(_QWORD *)a2 + 280, (uint64_t)&v14, &v13, (uint64_t)llvm::FoldingSet<llvm::AttributeListImpl>::getFoldingSetInfo(void)::Info);
  v11 = *(_QWORD **)this;
  if (v14 != v16)
    free(v14);
  return NodeOrInsertPos == v11;
}

void llvm::AttributeList::print(llvm::AttributeList *this, llvm::raw_ostream *a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  _DWORD *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::AttributeSetNode *v21;
  size_t v22;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v25;
  uint64_t v26;
  _WORD *v27;
  std::string __p;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0xEuLL)
  {
    qmemcpy(v4, "AttributeList[\n", 15);
    *((_QWORD *)a2 + 4) += 15;
    v5 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      goto LABEL_48;
    goto LABEL_5;
  }
  llvm::raw_ostream::write(a2, "AttributeList[\n", 0xFuLL);
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
LABEL_5:
    v6 = *(_DWORD *)(v5 + 8);
    if (!v6)
      goto LABEL_48;
    v7 = 0;
    v8 = 40;
    do
    {
      v9 = *(_QWORD *)this;
      if (!*(_QWORD *)this || v7 >= *(_DWORD *)(v9 + 8) || !*(_QWORD *)(v9 + v8))
        goto LABEL_7;
      v10 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 3uLL)
      {
        *v10 = 544940064;
        *((_QWORD *)a2 + 4) += 4;
        v11 = v7 - 1;
        if (!v7)
        {
LABEL_18:
          v14 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v14 > 7uLL)
          {
            *v14 = 0x6E6F6974636E7566;
            *((_QWORD *)a2 + 4) += 8;
            v13 = (_DWORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 3uLL)
              goto LABEL_32;
          }
          else
          {
            llvm::raw_ostream::write(a2, "function", 8uLL);
            v13 = (_DWORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 3uLL)
              goto LABEL_32;
          }
          goto LABEL_28;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, "  { ", 4uLL);
        v11 = v7 - 1;
        if (!v7)
          goto LABEL_18;
      }
      if (v11)
      {
        v15 = (_DWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 3uLL)
        {
          *v15 = 677868129;
          *((_QWORD *)a2 + 4) += 4;
          v17 = llvm::raw_ostream::operator<<(a2, v7 - 2);
          v18 = (_BYTE *)*((_QWORD *)v17 + 4);
          if (*((_BYTE **)v17 + 3) != v18)
          {
LABEL_23:
            *v18 = 41;
            ++*((_QWORD *)v17 + 4);
            v13 = (_DWORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 3uLL)
              goto LABEL_32;
            goto LABEL_28;
          }
        }
        else
        {
          v16 = llvm::raw_ostream::write(a2, "arg(", 4uLL);
          v17 = llvm::raw_ostream::operator<<(v16, v7 - 2);
          v18 = (_BYTE *)*((_QWORD *)v17 + 4);
          if (*((_BYTE **)v17 + 3) != v18)
            goto LABEL_23;
        }
        llvm::raw_ostream::write(v17, ")", 1uLL);
        v13 = (_DWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 3uLL)
        {
LABEL_32:
          *v13 = 540949792;
          *((_QWORD *)a2 + 4) += 4;
          v19 = a2;
          v20 = *(_QWORD *)this;
          if (!*(_QWORD *)this)
            goto LABEL_36;
          goto LABEL_33;
        }
      }
      else
      {
        v12 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) > 5)
        {
          *(_WORD *)(v12 + 4) = 28274;
          *(_DWORD *)v12 = 1970562418;
          *((_QWORD *)a2 + 4) += 6;
          v13 = (_DWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 3uLL)
            goto LABEL_32;
        }
        else
        {
          llvm::raw_ostream::write(a2, "return", 6uLL);
          v13 = (_DWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 3uLL)
            goto LABEL_32;
        }
      }
LABEL_28:
      v19 = llvm::raw_ostream::write(a2, " => ", 4uLL);
      v20 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        goto LABEL_36;
LABEL_33:
      if (v7 < *(_DWORD *)(v20 + 8))
      {
        v21 = *(llvm::AttributeSetNode **)(v20 + v8);
        if (v21)
        {
          llvm::AttributeSetNode::getAsString(v21, 0, &__p);
          v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          goto LABEL_37;
        }
      }
LABEL_36:
      v22 = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
LABEL_37:
      if ((v22 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v22 & 0x80u) == 0)
        size = v22;
      else
        size = __p.__r_.__value_.__l.__size_;
      v25 = llvm::raw_ostream::write(v19, (const char *)p_p, size);
      v26 = *((_QWORD *)v25 + 4);
      if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) > 2)
      {
        *(_BYTE *)(v26 + 2) = 10;
        *(_WORD *)v26 = 32032;
        *((_QWORD *)v25 + 4) += 3;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_47:
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        llvm::raw_ostream::write(v25, " }\n", 3uLL);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_47;
      }
LABEL_7:
      ++v7;
      v8 += 8;
    }
    while (v6 != v7);
  }
LABEL_48:
  v27 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v27 > 1uLL)
  {
    *v27 = 2653;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "]\n", 2uLL);
  }
}

void addAttributeImpl<llvm::StringRef>(uint64_t a1, void *__s2, size_t __n, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v4 = a4;
  v6 = *(uint64_t **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v7)
    goto LABEL_27;
  v10 = *(uint64_t **)a1;
  v11 = *(unsigned int *)(a1 + 8);
  do
  {
    v12 = v11 >> 1;
    v13 = &v10[v11 >> 1];
    v14 = *v13;
    if (!*v13 || *(_BYTE *)(v14 + 8) != 2)
    {
LABEL_3:
      v10 = v13 + 1;
      v12 = v11 + ~v12;
      goto LABEL_4;
    }
    v15 = *(unsigned int *)(v14 + 12);
    if (__n >= v15)
      v16 = *(unsigned int *)(v14 + 12);
    else
      v16 = __n;
    if (v16 && (v17 = memcmp((const void *)(v14 + 24), __s2, v16)) != 0)
    {
      if (v17 < 0)
        goto LABEL_3;
    }
    else if (__n > v15)
    {
      goto LABEL_3;
    }
LABEL_4:
    v11 = v12;
  }
  while (v12);
  v4 = a4;
  if (v10 != &v6[v7])
  {
    v18 = *v10;
    if (*v10
      && *(_BYTE *)(v18 + 8) == 2
      && (v19 = *(unsigned int *)(v18 + 12), __n == v19)
      && (!(_DWORD)v19 || !memcmp((const void *)(v18 + 24), __s2, __n)))
    {
      *v10 = a4;
    }
    else
    {
      v20 = v10 - v6;
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v7 + 1, 8);
        v6 = *(uint64_t **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v21 = &v6[v20];
      v6[v7] = v6[v7 - 1];
      v22 = *(_QWORD *)a1 + 8 * v7 - 8;
      if ((uint64_t *)v22 != v21)
      {
        memmove(v21 + 1, &v6[v20], v22 - (_QWORD)v21);
        LODWORD(v7) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v7 + 1;
      *v21 = a4;
    }
    return;
  }
LABEL_27:
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v7 + 1, 8);
    v7 = *(unsigned int *)(a1 + 8);
    v6 = *(uint64_t **)a1;
  }
  v6[v7] = v4;
  ++*(_DWORD *)(a1 + 8);
}

void addAttributeImpl<llvm::Attribute::AttrKind>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v5 = *(uint64_t **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v6)
    goto LABEL_14;
  v7 = *(uint64_t **)a1;
  v8 = *(unsigned int *)(a1 + 8);
  do
  {
    v11 = v8 >> 1;
    v12 = &v7[v8 >> 1];
    v13 = *v12;
    if (*v12)
    {
      if (*(_BYTE *)(v13 + 8) == 2)
        goto LABEL_5;
      LODWORD(v13) = *(_DWORD *)(v13 + 12);
    }
    v9 = v12 + 1;
    v10 = v8 + ~v11;
    if ((int)v13 < a2)
    {
      v11 = v10;
      v7 = v9;
    }
LABEL_5:
    v8 = v11;
  }
  while (v11);
  if (v7 == &v5[v6])
  {
LABEL_14:
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      v6 = *(unsigned int *)(a1 + 8);
      v5 = *(uint64_t **)a1;
    }
    v5[v6] = a3;
    ++*(_DWORD *)(a1 + 8);
    return;
  }
  v14 = *v7;
  if (*v7)
  {
    if (*(_BYTE *)(v14 + 8) != 2 && *(_DWORD *)(v14 + 12) == a2)
    {
LABEL_13:
      *v7 = a3;
      return;
    }
  }
  else if (!a2)
  {
    goto LABEL_13;
  }
  v15 = v7 - v5;
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
    v5 = *(uint64_t **)a1;
    v6 = *(unsigned int *)(a1 + 8);
  }
  v16 = &v5[v15];
  v5[v6] = v5[v6 - 1];
  v17 = *(_QWORD *)a1 + 8 * v6 - 8;
  if ((uint64_t *)v17 != v16)
  {
    memmove(v16 + 1, v16, v17 - (_QWORD)v16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  *v16 = a3;
}

uint64_t **llvm::AttrBuilder::addAlignmentAttr(uint64_t **a1, __int16 a2)
{
  unint64_t v3;
  int v5;

  if ((a2 & 0xFF00) == 0)
    return a1;
  v3 = llvm::Attribute::get(*a1, 78, 1 << a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(a1 + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return a1;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(a1 + 1), v5, v3);
  return a1;
}

uint64_t **llvm::AttrBuilder::addStackAlignmentAttr(uint64_t **a1, __int16 a2)
{
  unint64_t v3;
  int v5;

  if ((a2 & 0xFF00) == 0)
    return a1;
  v3 = llvm::Attribute::get(*a1, 85, 1 << a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(a1 + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return a1;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(a1 + 1), v5, v3);
  return a1;
}

uint64_t **llvm::AttrBuilder::addAllocSizeAttrFromRawRepr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;
  int v5;

  v3 = llvm::Attribute::get(*this, 80, a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(this + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(this + 1), v5, v3);
  return this;
}

uint64_t **llvm::AttrBuilder::addVScaleRangeAttrFromRawRepr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;
  int v5;

  if (!a2)
    return this;
  v3 = llvm::Attribute::get(*this, 87, a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(this + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(this + 1), v5, v3);
  return this;
}

uint64_t **llvm::AttrBuilder::addUWTableAttr(uint64_t **a1, int a2)
{
  unint64_t v3;
  int v5;

  if (!a2)
    return a1;
  v3 = llvm::Attribute::get(*a1, 86, a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(a1 + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return a1;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(a1 + 1), v5, v3);
  return a1;
}

uint64_t **llvm::AttrBuilder::addMemoryAttr(uint64_t **a1, unsigned int a2)
{
  unint64_t v3;
  int v5;

  v3 = llvm::Attribute::get(*a1, 83, a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(a1 + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return a1;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(a1 + 1), v5, v3);
  return a1;
}

uint64_t **llvm::AttrBuilder::addNoFPClassAttr(uint64_t **a1, unsigned int a2)
{
  unint64_t v3;
  int v5;

  if (!a2)
    return a1;
  v3 = llvm::Attribute::get(*a1, 84, a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(a1 + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return a1;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(a1 + 1), v5, v3);
  return a1;
}

uint64_t **llvm::AttrBuilder::addAllocKindAttr(uint64_t **a1, uint64_t a2)
{
  unint64_t v3;
  int v5;

  v3 = llvm::Attribute::get(*a1, 79, a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(a1 + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return a1;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(a1 + 1), v5, v3);
  return a1;
}

uint64_t **llvm::AttrBuilder::addTypeAttr(uint64_t **a1, int a2, uint64_t a3)
{
  unint64_t v4;
  int v6;

  v4 = llvm::Attribute::get(*a1, a2, a3);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(a1 + 1), (void *)(v4 + 24), *(unsigned int *)(v4 + 12), v4);
      return a1;
    }
    v6 = *(_DWORD *)(v4 + 12);
  }
  else
  {
    v6 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(a1 + 1), v6, v4);
  return a1;
}

uint64_t **llvm::AttrBuilder::addByValAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3;
  int v5;

  v3 = llvm::Attribute::get(*this, 73, (uint64_t)a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(this + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(this + 1), v5, v3);
  return this;
}

uint64_t **llvm::AttrBuilder::addStructRetAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3;
  int v5;

  v3 = llvm::Attribute::get(*this, 77, (uint64_t)a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(this + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(this + 1), v5, v3);
  return this;
}

uint64_t **llvm::AttrBuilder::addInAllocaAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3;
  int v5;

  v3 = llvm::Attribute::get(*this, 75, (uint64_t)a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      addAttributeImpl<llvm::StringRef>((uint64_t)(this + 1), (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    v5 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v5 = 0;
  }
  addAttributeImpl<llvm::Attribute::AttrKind>((uint64_t)(this + 1), v5, v3);
  return this;
}

uint64_t llvm::AttrBuilder::getAttribute(uint64_t a1, const void *a2, size_t a3)
{
  unint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v3)
    return 0;
  v6 = *(uint64_t **)(a1 + 8);
  v7 = &v6[v3];
  do
  {
    v8 = v3 >> 1;
    v9 = &v6[v3 >> 1];
    v10 = *v9;
    if (!*v9 || *(_BYTE *)(v10 + 8) != 2)
    {
LABEL_3:
      v6 = v9 + 1;
      v8 = v3 + ~v8;
      goto LABEL_4;
    }
    v11 = *(unsigned int *)(v10 + 12);
    if (a3 >= v11)
      v12 = *(unsigned int *)(v10 + 12);
    else
      v12 = a3;
    if (v12 && (v13 = memcmp((const void *)(v10 + 24), a2, v12)) != 0)
    {
      if (v13 < 0)
        goto LABEL_3;
    }
    else if (a3 > v11)
    {
      goto LABEL_3;
    }
LABEL_4:
    v3 = v8;
  }
  while (v8);
  if (v6 == v7)
    return 0;
  v14 = *v6;
  if (v14)
  {
    if (*(_BYTE *)(v14 + 8) != 2)
      return 0;
    v15 = *(unsigned int *)(v14 + 12);
    if (a3 != v15 || (_DWORD)v15 && memcmp((const void *)(v14 + 24), a2, a3))
      return 0;
  }
  return v14;
}

BOOL llvm::AttrBuilder::contains(uint64_t a1, int a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = &v3[v2];
  do
  {
    v7 = v2 >> 1;
    v8 = &v3[v2 >> 1];
    v9 = *v8;
    if (*v8)
    {
      if (*(_BYTE *)(v9 + 8) == 2)
        goto LABEL_5;
      LODWORD(v9) = *(_DWORD *)(v9 + 12);
    }
    v5 = v8 + 1;
    v6 = v2 + ~v7;
    if ((int)v9 < a2)
    {
      v7 = v6;
      v3 = v5;
    }
LABEL_5:
    v2 = v7;
  }
  while (v7);
  if (v3 != v4)
  {
    v10 = *v3;
    if (v10)
    {
      if (*(_BYTE *)(v10 + 8) != 2 && *(_DWORD *)(v10 + 12) == a2)
        return v10 != 0;
    }
    else if (!a2)
    {
      return v10 != 0;
    }
  }
  return 0;
}

BOOL llvm::AttrBuilder::contains(uint64_t a1, const void *a2, size_t a3)
{
  return llvm::AttrBuilder::getAttribute(a1, a2, a3) != 0;
}

BOOL llvm::AttrBuilder::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 16))
    return 0;
  if (!(_DWORD)v2)
    return 1;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a2 + 8);
  v5 = 8 * v2 - 8;
  do
  {
    v7 = *v4++;
    v6 = v7;
    v8 = *v3++;
    result = v8 == v6;
    v10 = v8 != v6 || v5 == 0;
    v5 -= 8;
  }
  while (!v10);
  return result;
}

uint64_t llvm::AttributeFuncs::typeIncompatible@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  int v10;

  v3 = 0;
  v4 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[4] = 0;
  a3[3] = 0;
  a3[2] = (uint64_t)(a3 + 3);
  v5 = *(unsigned __int8 *)(result + 8);
  if (v5 != 13)
  {
    if ((a2 & 1) != 0)
    {
      v4 = 2;
      *a3 = 2;
      if ((a2 & 2) != 0)
      {
LABEL_4:
        v4 |= 0x4000000000000uLL;
        v3 = 128;
        *a3 = v4;
        a3[1] = 128;
        if (v5 == 15)
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    else
    {
      v4 = 0;
      if ((a2 & 2) != 0)
        goto LABEL_4;
    }
    v3 = 0;
    if (v5 == 15)
      goto LABEL_12;
  }
LABEL_8:
  if ((a2 & 1) != 0)
  {
    v4 |= 0xC08000480000uLL;
    v3 |= 0x60020uLL;
    *a3 = v4;
    a3[1] = v3;
  }
  if ((a2 & 2) != 0)
  {
    v3 |= 0x3F04uLL;
    v4 |= 0x40004uLL;
    *a3 = v4;
    a3[1] = v3;
  }
LABEL_12:
  v6 = v5;
  if ((v5 & 0xFE) == 0x12)
    v6 = *(unsigned __int8 *)(**(_QWORD **)(result + 16) + 8);
  if ((a2 & 1) == 0 || v6 == 15)
  {
    if ((a2 & 1) == 0)
      return result;
  }
  else
  {
    v3 |= 0x4000uLL;
    a3[1] = v3;
  }
  if (v5 == 17)
  {
    do
    {
      result = *(_QWORD *)(result + 24);
      v7 = *(unsigned __int8 *)(result + 8);
      if (result)
        v8 = v7 == 17;
      else
        v8 = 0;
    }
    while (v8);
    if ((v7 & 0xFE) == 0x12)
      goto LABEL_24;
  }
  else
  {
    LOBYTE(v7) = v5;
    if ((v5 & 0xFE) == 0x12)
LABEL_24:
      v7 = *(_DWORD *)(**(_QWORD **)(result + 16) + 8);
  }
  v9 = v7 < 4u || v7 == 5;
  v10 = v7 & 0xFD;
  if (v9 || v10 == 4)
  {
    if ((a2 & 1) == 0)
      return result;
  }
  else
  {
    a3[1] = v3 | 0x100000;
    if ((a2 & 1) == 0)
      return result;
  }
  if (v5 == 7)
    *a3 = v4 | 0x1000000000;
  return result;
}

void llvm::AttributeImpl::Profile(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 4);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v6) = a2;
  v7 = *(_DWORD *)(a1 + 12);
  v8 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v8;
  if (v8 >= v7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8 + 1, 4);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v8) = a3;
  v9 = *(_DWORD *)(a1 + 12);
  v10 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v10;
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10 + 1, 4);
    LODWORD(v10) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v10) = HIDWORD(a3);
  ++*(_DWORD *)(a1 + 8);
}

void std::__tree<llvm::SmallString<32u>>::destroy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2)
  {
    std::__tree<llvm::SmallString<32u>>::destroy(a1, *a2);
    std::__tree<llvm::SmallString<32u>>::destroy(a1, a2[1]);
    v4 = (_QWORD *)a2[4];
    if (v4 != a2 + 7)
      free(v4);
    operator delete(a2);
  }
}

void llvm::FoldingSet<llvm::AttributeImpl>::GetNodeProfile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::AttributeImpl::Profile(a2, a3);
}

BOOL llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::AttributeImpl::Profile(a2, a5);
  return llvm::FoldingSetNodeID::operator==(a5, a3);
}

unint64_t llvm::FoldingSet<llvm::AttributeImpl>::ComputeNodeHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::AttributeImpl::Profile(a2, a3);
  return llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void llvm::FoldingSet<llvm::AttributeSetNode>::GetNodeProfile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v5 = (uint64_t *)(a2 + 48);
    v6 = (void *)(a3 + 16);
    v7 = *(_DWORD *)(a3 + 8);
    v8 = 8 * v3;
    do
    {
      v9 = *v5;
      if (v7 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v7 + 1, 4);
        v7 = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v7) = v9;
      v10 = *(_DWORD *)(a3 + 12);
      v11 = (*(_DWORD *)(a3 + 8) + 1);
      *(_DWORD *)(a3 + 8) = v11;
      if (v11 >= v10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v11 + 1, 4);
        LODWORD(v11) = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = HIDWORD(v9);
      v7 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v7;
      ++v5;
      v8 -= 8;
    }
    while (v8);
  }
}

BOOL llvm::FoldingSet<llvm::AttributeSetNode>::NodeEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)(a2 + 48);
    v9 = *(_DWORD *)(a5 + 8);
    v10 = 8 * v7;
    do
    {
      v11 = *v8;
      if (v9 >= *(_DWORD *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v9 + 1, 4);
        v9 = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v9) = v11;
      v12 = *(_DWORD *)(a5 + 12);
      v13 = (*(_DWORD *)(a5 + 8) + 1);
      *(_DWORD *)(a5 + 8) = v13;
      if (v13 >= v12)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v13 + 1, 4);
        LODWORD(v13) = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v13) = HIDWORD(v11);
      v9 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v9;
      ++v8;
      v10 -= 8;
    }
    while (v10);
  }
  return llvm::FoldingSetNodeID::operator==(a5, a3);
}

unint64_t llvm::FoldingSet<llvm::AttributeSetNode>::ComputeNodeHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)(a2 + 48);
    v6 = *(_DWORD *)(a3 + 8);
    v7 = 8 * v4;
    do
    {
      v8 = *v5;
      if (v6 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v6 + 1, 4);
        v6 = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v6) = v8;
      v9 = *(_DWORD *)(a3 + 12);
      v10 = (*(_DWORD *)(a3 + 8) + 1);
      *(_DWORD *)(a3 + 8) = v10;
      if (v10 >= v9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v10 + 1, 4);
        LODWORD(v10) = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v10) = HIDWORD(v8);
      v6 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v6;
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v6 = *(_DWORD *)(a3 + 8);
  }
  return llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * v6);
}

uint64_t llvm::array_pod_sort_comparator<llvm::Attribute>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;
  char v7;

  v2 = *a2;
  v3 = *a1;
  if (*a1)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if (v3)
      v5 = 1;
    else
      v5 = v2 == 0;
    if (!v5)
      return 0xFFFFFFFFLL;
    if (v2)
      result = 0;
    else
      result = v3 != 0;
    if (v2)
    {
LABEL_19:
      if (v3)
        return llvm::AttributeImpl::operator<(v2, v3);
    }
  }
  else
  {
    v7 = llvm::AttributeImpl::operator<(*a1, *a2);
    if ((v7 & 1) != 0)
      return 0xFFFFFFFFLL;
    result = v2 == 0;
    if (v2)
      goto LABEL_19;
  }
  return result;
}

void llvm::FoldingSet<llvm::AttributeListImpl>::GetNodeProfile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v5 = (uint64_t *)(a2 + 40);
    v6 = (void *)(a3 + 16);
    v7 = *(_DWORD *)(a3 + 8);
    v8 = 8 * v3;
    do
    {
      v9 = *v5;
      if (v7 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v7 + 1, 4);
        v7 = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v7) = v9;
      v10 = *(_DWORD *)(a3 + 12);
      v11 = (*(_DWORD *)(a3 + 8) + 1);
      *(_DWORD *)(a3 + 8) = v11;
      if (v11 >= v10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v11 + 1, 4);
        LODWORD(v11) = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = HIDWORD(v9);
      v7 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v7;
      ++v5;
      v8 -= 8;
    }
    while (v8);
  }
}

BOOL llvm::FoldingSet<llvm::AttributeListImpl>::NodeEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)(a2 + 40);
    v9 = *(_DWORD *)(a5 + 8);
    v10 = 8 * v7;
    do
    {
      v11 = *v8;
      if (v9 >= *(_DWORD *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v9 + 1, 4);
        v9 = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v9) = v11;
      v12 = *(_DWORD *)(a5 + 12);
      v13 = (*(_DWORD *)(a5 + 8) + 1);
      *(_DWORD *)(a5 + 8) = v13;
      if (v13 >= v12)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v13 + 1, 4);
        LODWORD(v13) = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v13) = HIDWORD(v11);
      v9 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v9;
      ++v8;
      v10 -= 8;
    }
    while (v10);
  }
  return llvm::FoldingSetNodeID::operator==(a5, a3);
}

unint64_t llvm::FoldingSet<llvm::AttributeListImpl>::ComputeNodeHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)(a2 + 40);
    v6 = *(_DWORD *)(a3 + 8);
    v7 = 8 * v4;
    do
    {
      v8 = *v5;
      if (v6 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v6 + 1, 4);
        v6 = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v6) = v8;
      v9 = *(_DWORD *)(a3 + 12);
      v10 = (*(_DWORD *)(a3 + 8) + 1);
      *(_DWORD *)(a3 + 8) = v10;
      if (v10 >= v9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v10 + 1, 4);
        LODWORD(v10) = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v10) = HIDWORD(v8);
      v6 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v6;
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v6 = *(_DWORD *)(a3 + 8);
  }
  return llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * v6);
}

uint64_t std::__tree<llvm::SmallString<32u>>::__count_multi<llvm::StringRef>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  size_t v6;
  size_t v7;
  const void *v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  _QWORD *v15;
  size_t v16;
  size_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  int v26;
  uint64_t *v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return 0;
  v4 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  while (1)
  {
    while (1)
    {
      v6 = v3[5];
      if (v6 >= v5)
        v7 = v5;
      else
        v7 = v3[5];
      if (!v7)
      {
        if (v5 < v6)
          goto LABEL_3;
        goto LABEL_5;
      }
      v8 = (const void *)v3[4];
      v9 = memcmp(v4, v8, v7);
      if (v9)
        break;
      if (v5 >= v6)
        goto LABEL_17;
LABEL_3:
      v2 = v3;
      v3 = (_QWORD *)*v3;
      if (!v3)
        return 0;
    }
    if (v9 < 0)
      goto LABEL_3;
LABEL_17:
    v10 = memcmp(v8, v4, v7);
    if (v10)
      break;
LABEL_5:
    if (v6 >= v5)
      goto LABEL_19;
LABEL_6:
    v3 = (_QWORD *)v3[1];
    if (!v3)
      return 0;
  }
  if (v10 < 0)
    goto LABEL_6;
LABEL_19:
  v11 = (_QWORD *)*v3;
  v12 = v3;
  if (*v3)
  {
    v12 = v3;
    do
    {
      while (1)
      {
        v16 = v11[5];
        v17 = v5 >= v16 ? v11[5] : v5;
        if (!v17)
          break;
        v18 = memcmp((const void *)v11[4], v4, v17);
        if (!v18)
          break;
        if (v18 >> 31 == -1)
          v19 = v11 + 1;
        else
          v19 = v11;
        if (v18 >> 31 != -1)
          v12 = v11;
        v11 = (_QWORD *)*v19;
        if (!*v19)
          goto LABEL_43;
      }
      if (v16 < v5)
        v13 = -1;
      else
        v13 = 1;
      if (v16 == v5)
        v13 = 0;
      v14 = v13 < 0;
      if (v13 >= 0)
        v15 = v11;
      else
        v15 = v11 + 1;
      if (!v14)
        v12 = v11;
      v11 = (_QWORD *)*v15;
    }
    while (*v15);
  }
LABEL_43:
  v20 = v3[1];
  if (v20)
  {
    do
    {
      while (1)
      {
        v24 = *(_QWORD *)(v20 + 40);
        v25 = v24 >= v5 ? v5 : *(_QWORD *)(v20 + 40);
        if (!v25)
          break;
        v26 = memcmp(v4, *(const void **)(v20 + 32), v25);
        if (!v26)
          break;
        if (v26 >> 31 == -1)
          v27 = (uint64_t *)v20;
        else
          v27 = (uint64_t *)(v20 + 8);
        if (v26 >> 31 == -1)
          v2 = (_QWORD *)v20;
        v20 = *v27;
        if (!*v27)
          goto LABEL_67;
      }
      if (v5 < v24)
        v21 = -1;
      else
        v21 = 1;
      if (v5 == v24)
        v21 = 0;
      v22 = v21 < 0;
      if (v21 >= 0)
        v23 = (uint64_t *)(v20 + 8);
      else
        v23 = (uint64_t *)v20;
      if (v22)
        v2 = (_QWORD *)v20;
      v20 = *v23;
    }
    while (*v23);
  }
LABEL_67:
  if (v12 == v2)
    return 0;
  result = 0;
  do
  {
    v29 = (_QWORD *)v12[1];
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = (_QWORD *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (_QWORD *)v12[2];
        v31 = *v30 == (_QWORD)v12;
        v12 = v30;
      }
      while (!v31);
    }
    ++result;
    v12 = v30;
  }
  while (v30 != v2);
  return result;
}

uint64_t llvm::UpgradeIntrinsicFunction(llvm *this, llvm::Function **a2, llvm::Function **a3)
{
  uint64_t v5;
  llvm *v6;
  llvm::LLVMContext *v7;
  llvm::Intrinsic *DesiredBytecodeVersion;

  *a2 = 0;
  v5 = UpgradeIntrinsicFunction1(this, a2);
  if (*a2)
    v6 = *a2;
  else
    v6 = this;
  v7 = (llvm::LLVMContext *)*((unsigned int *)v6 + 9);
  if ((_DWORD)v7)
  {
    DesiredBytecodeVersion = (llvm::Intrinsic *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v6);
    *((_QWORD *)v6 + 14) = llvm::Intrinsic::getAttributes(DesiredBytecodeVersion, v7);
  }
  return v5;
}

uint64_t UpgradeIntrinsicFunction1(llvm::Function *a1, llvm::Function **a2)
{
  const char *Name;
  llvm::Function *v5;
  uint64_t v7;
  char *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  BOOL v27;
  uint64_t *v28;
  std::string::size_type *v29;
  uint64_t v33;
  BOOL v34;
  uint64_t *v35;
  std::string::size_type *v36;
  _QWORD *v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  unsigned __int8 v45;
  unsigned __int16 *v46;
  uint64_t v47;
  int v51;
  int v52;
  uint64_t v54;
  int v55;
  unsigned __int8 v58;
  uint64_t v59;
  llvm::ScalableVectorType *v60;
  uint64_t v61;
  std::string::size_type v62;
  int v63;
  unsigned __int8 v68;
  std::string::size_type *v69;
  std::string::size_type v70;
  std::string::size_type v71;
  uint64_t *v72;
  int v73;
  int v74;
  const void *v75;
  size_t v76;
  int v77;
  std::string *v78;
  uint64_t *v79;
  int v80;
  llvm::Function *Declaration;
  BOOL v82;
  uint64_t v83;
  std::string::size_type v84;
  std::string::size_type v85;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  int v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  void *v106;
  size_t size;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t *v110;
  void *v111;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t *v128;
  __int16 v129;
  __int16 v130;
  const char *v131;
  const char *v136;
  _WORD *v137;
  int8x16_t *v140;
  uint64_t *v141;
  unsigned __int8 v144;
  int v145;
  std::string *v146;
  _DWORD *v147;
  uint64_t *v148;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  uint64_t *v157;
  char v158;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  BOOL v171;
  BOOL v173;
  BOOL v174;
  BOOL v175;
  BOOL v176;
  uint64_t *v177;
  uint64_t v178;
  BOOL v179;
  uint64_t v180;
  uint64_t **v181;
  uint64_t v182;
  const char *v183;
  unint64_t v184;
  size_t v185;
  const char *v186;
  void **p_dst;
  char v188;
  uint64_t v189;
  uint64_t v190;
  BOOL *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  llvm::Function *v197;
  llvm::Function *v198;
  llvm::Function *v199;
  char v200;
  uint64_t v204;
  uint64_t v205;
  int v206;
  const char *v207;
  unint64_t v208;
  llvm::Type *v209;
  llvm::LLVMContext *v210;
  llvm::FixedVectorType *BFloatTy;
  std::string::size_type v212;
  uint64_t v213;
  int v214;
  const char *v215;
  uint64_t *v219;
  void **__dst;
  size_t v236;
  unint64_t v237;
  __int128 v238;
  std::string v239;
  uint64_t v240;
  __int16 v241;
  void **v242;
  uint64_t Int1Ty;
  const char *v244;
  __int16 v245;
  uint64_t v246;

  v246 = *MEMORY[0x1E0C80C00];
  Name = llvm::Value::getName(a1);
  if ((unint64_t)v5 < 8)
    return 0;
  if (*(_DWORD *)Name != 1836477548 || Name[4] != 46)
    return 0;
  v9 = (char *)(Name + 5);
  v10 = (size_t)v5 - 5;
  *(_QWORD *)&v238 = Name + 5;
  *((_QWORD *)&v238 + 1) = (char *)v5 - 5;
  switch(Name[5])
  {
    case 'a':
      if (v10 < 8)
        goto LABEL_12;
      if (*(_QWORD *)v9 == 0x746962722E6D7261)
        goto LABEL_379;
      if (v10 < 0xC)
        goto LABEL_12;
      if (*(_QWORD *)v9 == 0x2E34366863726161 && *(_DWORD *)(Name + 13) == 1953063538)
        goto LABEL_379;
      if (v10 >= 0x13)
      {
        if (*(_QWORD *)v9 == 0x2E34366863726161
          && *(_QWORD *)(Name + 13) == 0x6972662E6E6F656ELL
          && *((_QWORD *)Name + 2) == 0x6E746E6972662E6ELL)
        {
          v148 = (uint64_t *)*((_QWORD *)a1 + 5);
          if ((*((_WORD *)a1 + 9) & 1) != 0)
            llvm::Function::BuildLazyArguments(a1);
          v239.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
          v7 = 1;
          v15 = v148;
          v16 = 286;
          goto LABEL_382;
        }
      }
      else if (v10 < 0x11)
      {
        goto LABEL_12;
      }
      if (*(_QWORD *)v9 == 0x2E34366863726161 && *(_QWORD *)(Name + 13) == 0x6962722E6E6F656ELL && Name[21] == 116)
      {
LABEL_379:
        v128 = (uint64_t *)*((_QWORD *)a1 + 5);
        if ((*((_WORD *)a1 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(a1);
        v239.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
        v7 = 1;
        v15 = v128;
        v16 = 12;
        goto LABEL_382;
      }
LABEL_12:
      if (v5 == (llvm::Function *)29)
      {
        if (!memcmp(Name + 5, "aarch64.sve.bfmlalb.lane", v10))
        {
          v11 = (uint64_t *)*((_QWORD *)a1 + 5);
          v12 = 1021;
          goto LABEL_531;
        }
        if (*(_QWORD *)v9 == 0x2E34366863726161
          && *((_QWORD *)v9 + 1) == 0x6C6D66622E657673
          && *((_QWORD *)v9 + 2) == 0x656E616C2E746C61)
        {
          v11 = (uint64_t *)*((_QWORD *)a1 + 5);
          v12 = 1023;
          goto LABEL_531;
        }
      }
      else if (v5 == (llvm::Function *)27 && !memcmp(Name + 5, "aarch64.sve.bfdot.lane", v10))
      {
        v11 = (uint64_t *)*((_QWORD *)a1 + 5);
        v12 = 1019;
LABEL_531:
        Declaration = (llvm::Function *)llvm::Intrinsic::getDeclaration(v11, v12, 0, 0);
        goto LABEL_612;
      }
      v58 = atomic_load((unsigned __int8 *)&_MergedGlobals_61);
      if ((v58 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_61))
      {
        llvm::Regex::Regex((uint64_t)&unk_1ECD34258, "^aarch64\\.sve\\.ld[234](.nxv[a-z0-9]+|$)", 39, 0);
        __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_1ECD34258, &dword_18013D000);
        __cxa_guard_release(&_MergedGlobals_61);
      }
      if (!llvm::Regex::match((uint64_t)&unk_1ECD34258, (char *)v238, *((uint64_t *)&v238 + 1), 0, 0))
      {
        if (*((_QWORD *)&v238 + 1) >= 0x15uLL)
        {
          if (*(_QWORD *)v238 == 0x2E34366863726161
            && *(_QWORD *)(v238 + 8) == 0x6C7075742E657673
            && *(_QWORD *)(v238 + 13) == 0x7465672E656C7075)
          {
            v239.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
            if ((*((_BYTE *)a1 + 18) & 1) != 0)
              llvm::Function::BuildLazyArguments(a1);
            v239.__r_.__value_.__l.__size_ = **((_QWORD **)a1 + 11);
            v72 = (uint64_t *)*((_QWORD *)a1 + 5);
            v73 = 345;
            goto LABEL_394;
          }
          if (*(_QWORD *)v238 == 0x2E34366863726161
            && *(_QWORD *)(v238 + 8) == 0x6C7075742E657673
            && *(_QWORD *)(v238 + 13) == 0x7465732E656C7075)
          {
            v140 = *(int8x16_t **)(*((_QWORD *)a1 + 3) + 16);
            v239.__r_.__value_.__r.__words[0] = v140->u64[1];
            *(int8x16_t *)&v239.__r_.__value_.__r.__words[1] = vextq_s8(v140[1], v140[1], 8uLL);
            v79 = (uint64_t *)*((_QWORD *)a1 + 5);
            v78 = &v239;
            v80 = 346;
LABEL_228:
            Declaration = (llvm::Function *)llvm::Intrinsic::getDeclaration(v79, v80, (BOOL **)v78, 3);
            goto LABEL_612;
          }
        }
        v68 = atomic_load((unsigned __int8 *)&qword_1ECD34238);
        if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD34238))
        {
          llvm::Regex::Regex((uint64_t)&unk_1ECD34268, "^aarch64\\.sve\\.tuple\\.create[234](.nxv[a-z0-9]+|$)", 50, 0);
          __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_1ECD34268, &dword_18013D000);
          __cxa_guard_release(&qword_1ECD34238);
        }
        if (llvm::Regex::match((uint64_t)&unk_1ECD34268, (char *)v238, *((uint64_t *)&v238 + 1), 0, 0))
        {
          v69 = *(std::string::size_type **)(*((_QWORD *)a1 + 3) + 16);
          v70 = *v69;
          v71 = v69[2];
          v239.__r_.__value_.__r.__words[0] = v70;
          v239.__r_.__value_.__l.__size_ = v71;
          v72 = (uint64_t *)*((_QWORD *)a1 + 5);
          v73 = 346;
LABEL_394:
          Declaration = (llvm::Function *)llvm::Intrinsic::getDeclaration(v72, v73, (BOOL **)&v239, 2);
LABEL_612:
          *a2 = Declaration;
          return 1;
        }
        if (*((_QWORD *)&v238 + 1) >= 0xDuLL)
        {
          if (*(_QWORD *)v238 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v238 + 5) == 0x7A6C63762E6E6F65)
          {
            if ((*((_WORD *)a1 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments(a1);
            v242 = (void **)**((_QWORD **)a1 + 11);
            DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a1);
            Int1Ty = llvm::Type::getInt1Ty(DesiredBytecodeVersion, v150);
            v151 = llvm::FunctionType::get(**(uint64_t ****)(*((_QWORD *)a1 + 3) + 16), (uint64_t)&v242, 2, 0);
            v152 = *((_DWORD *)a1 + 8) & 0xF;
            v153 = *(_DWORD *)(*(_QWORD *)a1 + 8) >> 8;
            v154 = 14;
            if (*((_QWORD *)&v238 + 1) < 0xEuLL)
              v154 = *((_QWORD *)&v238 + 1);
            v241 = 1283;
            v239.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.ctlz.";
            v239.__r_.__value_.__r.__words[2] = v238 + v154;
            v240 = *((_QWORD *)&v238 + 1) - v154;
            v155 = *((_QWORD *)a1 + 5);
            v156 = llvm::User::operator new((llvm::User *)0x80);
            Declaration = (llvm::Function *)llvm::Function::Function(v156, v151, v152, v153, &v239, v155);
            goto LABEL_612;
          }
          if (*(_QWORD *)v238 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v238 + 5) == 0x746E63762E6E6F65)
          {
            v157 = (uint64_t *)*((_QWORD *)a1 + 5);
            if ((*((_WORD *)a1 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments(a1);
            v239.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
            v7 = 1;
            v15 = v157;
            v16 = 59;
            goto LABEL_382;
          }
        }
        v114 = atomic_load((unsigned __int8 *)&qword_1ECD34240);
        if ((v114 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD34240))
        {
          llvm::Regex::Regex((uint64_t)&unk_1ECD34278, "^arm\\.neon\\.vst([1234]|[234]lane)\\.v[a-z0-9]*$", 46, 0);
          __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_1ECD34278, &dword_18013D000);
          __cxa_guard_release(&qword_1ECD34240);
        }
        if (llvm::Regex::match((uint64_t)&unk_1ECD34278, (char *)v238, *((uint64_t *)&v238 + 1), 0, 0))
        {
          v115 = *((_QWORD *)a1 + 3);
          v116 = 8 * *(unsigned int *)(v115 + 12) - 8;
          *(_OWORD *)&v239.__r_.__value_.__l.__data_ = *(_OWORD *)(*(_QWORD *)(v115 + 16) + 8);
          v117 = llvm::StringRef::find((uint64_t *)&v238, "lane", 4uLL, 0);
          v118 = (int *)((char *)&UpgradeIntrinsicFunction1(llvm::Function *,llvm::Function *&)::StoreLaneInts
                       + (v116 >> 1)
                       - 20);
          if (v117 == -1)
            v118 = (int *)((char *)&UpgradeIntrinsicFunction1(llvm::Function *,llvm::Function *&)::StoreInts
                         + (v116 >> 1)
                         - 12);
          v73 = *v118;
          v72 = (uint64_t *)*((_QWORD *)a1 + 5);
          goto LABEL_394;
        }
        if (*((_QWORD *)&v238 + 1) == 18)
        {
          if (memcmp((const void *)v238, "arm.thread.pointer", 0x12uLL))
            goto LABEL_499;
        }
        else
        {
          if (*((_QWORD *)&v238 + 1) != 22)
          {
            if (*((_QWORD *)&v238 + 1) < 0x10uLL)
            {
              if (*((_QWORD *)&v238 + 1) != 15)
              {
                if (*((_QWORD *)&v238 + 1) < 0xCuLL)
                  goto LABEL_584;
                v158 = 1;
LABEL_570:
                v173 = *(_QWORD *)v238 == 0x6E6F656E2E6D7261 && *(_DWORD *)(v238 + 8) == 1835426350;
                if (!v173
                  && ((v158 & 1) != 0
                   || (*(_QWORD *)v238 == 0x2E34366863726161
                     ? (v174 = *(_QWORD *)(v238 + 8) == 0x6D66622E6E6F656ELL)
                     : (v174 = 0),
                       !v174))
                  || (*(_QWORD *)(v238 + *((_QWORD *)&v238 + 1) - 12) == 0x762E32336634762ELL
                    ? (v175 = *(_DWORD *)(v238 + *((_QWORD *)&v238 + 1) - 4) == 946419249)
                    : (v175 = 0),
                      !v175))
                {
LABEL_584:
                  switch(*((_QWORD *)&v238 + 1))
                  {
                    case 0xELL:
                      v176 = *(_QWORD *)v238 == 0x2E65766D2E6D7261 && *(_QWORD *)(v238 + 6) == 0x3436707463762E65;
                      if (!v176 || *(_DWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 3) + 16) + 32) != 4)
                        goto LABEL_664;
                      rename(a1);
                      return 1;
                    case 0x23:
                      if (!memcmp((const void *)v238, "arm.cde.vcx1q.predicated.v2i64.v4i1", *((size_t *)&v238 + 1))
                        || !memcmp((const void *)v238, "arm.cde.vcx2q.predicated.v2i64.v4i1", *((size_t *)&v238 + 1)))
                      {
                        return 1;
                      }
                      v215 = "arm.cde.vcx3q.predicated.v2i64.v4i1";
                      goto LABEL_663;
                    case 0x24:
                      if (!memcmp((const void *)v238, "arm.cde.vcx1qa.predicated.v2i64.v4i1", *((size_t *)&v238 + 1))
                        || !memcmp((const void *)v238, "arm.cde.vcx2qa.predicated.v2i64.v4i1", *((size_t *)&v238 + 1)))
                      {
                        return 1;
                      }
                      v215 = "arm.cde.vcx3qa.predicated.v2i64.v4i1";
                      goto LABEL_663;
                    case 0x2BLL:
                      v215 = "arm.mve.vqdmull.predicated.v2i64.v4i32.v4i1";
                      goto LABEL_663;
                    case 0x2CLL:
                      v215 = "arm.mve.mull.int.predicated.v2i64.v4i32.v4i1";
                      goto LABEL_663;
                    case 0x34:
                      v215 = "arm.mve.vldr.gather.base.predicated.v2i64.v2i64.v4i1";
                      goto LABEL_663;
                    case 0x35:
                      v215 = "arm.mve.vstr.scatter.base.predicated.v2i64.v2i64.v4i1";
                      goto LABEL_663;
                    case 0x37:
                      v215 = "arm.mve.vldr.gather.base.wb.predicated.v2i64.v2i64.v4i1";
                      goto LABEL_663;
                    case 0x38:
                      v215 = "arm.mve.vstr.scatter.base.wb.predicated.v2i64.v2i64.v4i1";
                      goto LABEL_663;
                    case 0x39:
                      v215 = "arm.mve.vldr.gather.offset.predicated.v2i64.p0.v2i64.v4i1";
                      goto LABEL_663;
                    case 0x3ALL:
                      v215 = "arm.mve.vstr.scatter.offset.predicated.p0.v2i64.v2i64.v4i1";
                      goto LABEL_663;
                    case 0x3CLL:
                      v215 = "arm.mve.vldr.gather.offset.predicated.v2i64.p0i64.v2i64.v4i1";
                      goto LABEL_663;
                    case 0x3DLL:
                      v215 = "arm.mve.vstr.scatter.offset.predicated.p0i64.v2i64.v2i64.v4i1";
LABEL_663:
                      if (memcmp((const void *)v238, v215, *((size_t *)&v238 + 1)))
                        goto LABEL_664;
                      return 1;
                    default:
LABEL_664:
                      if (!llvm::StringRef::consume_front((const void **)&v238, "amdgcn.", 7uLL))
                        goto LABEL_597;
                      if (*((_QWORD *)&v238 + 1) == 8)
                      {
                        if (*(_QWORD *)v238 == 0x7469626E67696C61)
                        {
                          v15 = (uint64_t *)*((_QWORD *)a1 + 5);
                          v239.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
                          v7 = 1;
                          v16 = 163;
                          goto LABEL_382;
                        }
                      }
                      else if (*((_QWORD *)&v238 + 1) >= 0xAuLL)
                      {
                        if (*(_QWORD *)v238 == 0x692E63696D6F7461 && *(_WORD *)(v238 + 8) == 25454)
                          goto LABEL_471;
                        if (*(_QWORD *)v238 == 0x642E63696D6F7461 && *(_WORD *)(v238 + 8) == 25445)
                          goto LABEL_471;
                      }
                      else if (*((_QWORD *)&v238 + 1) < 6uLL)
                      {
                        goto LABEL_597;
                      }
                      if (*(_DWORD *)v238 != 2019910764 || *(_WORD *)(v238 + 4) != 11888)
                        goto LABEL_597;
                      v219 = (uint64_t *)*((_QWORD *)a1 + 5);
                      v239.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
                      if ((*((_BYTE *)a1 + 18) & 1) != 0)
                        llvm::Function::BuildLazyArguments(a1);
                      v239.__r_.__value_.__l.__size_ = *(_QWORD *)(*((_QWORD *)a1 + 11) + 40);
                      v72 = v219;
                      v73 = 189;
                      break;
                  }
                  goto LABEL_394;
                }
                switch(*((_QWORD *)&v238 + 1))
                {
                  case 0x1BLL:
                    if (*(_QWORD *)v238 != 0x6E6F656E2E6D7261
                      || *(_QWORD *)(v238 + 8) != 0x2E616C6D6D66622ELL
                      || *(_QWORD *)(v238 + 16) != 0x31762E3233663476
                      || *(_QWORD *)(v238 + 19) != 0x38693631762E3233)
                    {
                      goto LABEL_597;
                    }
                    v12 = 2984;
                    goto LABEL_745;
                  case 0x1CLL:
                    if (*(_QWORD *)v238 == 0x6E6F656E2E6D7261
                      && *(_QWORD *)(v238 + 8) == 0x626C616C6D66622ELL
                      && *(_QWORD *)(v238 + 16) == 0x762E32336634762ELL
                      && *(_DWORD *)(v238 + 24) == 946419249)
                    {
                      v12 = 2982;
                      goto LABEL_745;
                    }
                    if (*(_QWORD *)v238 == 0x6E6F656E2E6D7261
                      && *(_QWORD *)(v238 + 8) == 0x746C616C6D66622ELL
                      && *(_QWORD *)(v238 + 16) == 0x762E32336634762ELL
                      && *(_DWORD *)(v238 + 24) == 946419249)
                    {
                      v12 = 2983;
                      goto LABEL_745;
                    }
                    goto LABEL_597;
                  case 0x1FLL:
                    if (*(_QWORD *)v238 != 0x2E34366863726161
                      || *(_QWORD *)(v238 + 8) != 0x6D66622E6E6F656ELL
                      || *(_QWORD *)(v238 + 16) != 0x336634762E616C6DLL
                      || *(_QWORD *)(v238 + 23) != 0x38693631762E3233)
                    {
                      goto LABEL_597;
                    }
                    v12 = 519;
                    goto LABEL_745;
                  case 0x20:
                    if (*(_QWORD *)v238 == 0x2E34366863726161
                      && *(_QWORD *)(v238 + 8) == 0x6D66622E6E6F656ELL
                      && *(_QWORD *)(v238 + 16) == 0x6634762E626C616CLL
                      && *(_QWORD *)(v238 + 24) == 0x38693631762E3233)
                    {
                      v12 = 517;
                    }
                    else
                    {
                      if (*(_QWORD *)v238 != 0x2E34366863726161
                        || *(_QWORD *)(v238 + 8) != 0x6D66622E6E6F656ELL
                        || *(_QWORD *)(v238 + 16) != 0x6634762E746C616CLL
                        || *(_QWORD *)(v238 + 24) != 0x38693631762E3233)
                      {
                        goto LABEL_597;
                      }
                      v12 = 518;
                    }
LABEL_745:
                    v11 = (uint64_t *)*((_QWORD *)a1 + 5);
                    goto LABEL_531;
                  default:
                    goto LABEL_597;
                }
              }
              v158 = 1;
              goto LABEL_556;
            }
LABEL_499:
            if (*(_QWORD *)v238 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v238 + 8) == 0x2E7364646171762ELL)
            {
              v164 = (uint64_t *)*((_QWORD *)a1 + 5);
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments(a1);
              v239.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
              v7 = 1;
              v15 = v164;
              v16 = 287;
            }
            else if (*(_QWORD *)v238 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v238 + 8) == 0x2E7564646171762ELL)
            {
              v165 = (uint64_t *)*((_QWORD *)a1 + 5);
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments(a1);
              v239.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
              v7 = 1;
              v15 = v165;
              v16 = 328;
            }
            else if (*(_QWORD *)v238 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v238 + 8) == 0x2E7362757371762ELL)
            {
              v166 = (uint64_t *)*((_QWORD *)a1 + 5);
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments(a1);
              v239.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
              v7 = 1;
              v15 = v166;
              v16 = 310;
            }
            else if (*(_QWORD *)v238 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v238 + 8) == 0x2E7562757371762ELL)
            {
              v167 = (uint64_t *)*((_QWORD *)a1 + 5);
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments(a1);
              v239.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
              v7 = 1;
              v15 = v167;
              v16 = 339;
            }
            else
            {
              if (*((_QWORD *)&v238 + 1) < 0x11uLL)
              {
                v158 = 0;
                if (*(_QWORD *)v238 != 0x6E6F656E2E6D7261 || *(_QWORD *)(v238 + 7) != 0x2E746F6466622E6ELL)
                  goto LABEL_570;
                goto LABEL_569;
              }
              if (*(_QWORD *)v238 != 0x2E34366863726161
                || *(_QWORD *)(v238 + 8) != 0x6464612E6E6F656ELL
                || *(_BYTE *)(v238 + 16) != 112)
              {
                goto LABEL_555;
              }
              if (*((_QWORD *)a1 + 12) != 2)
                goto LABEL_597;
              v158 = 0;
              v213 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
              if (!v213 || (*(_DWORD *)(v213 + 8) & 0xFE) != 0x12)
              {
LABEL_556:
                if (*(_QWORD *)v238 != 0x6E6F656E2E6D7261 || *(_QWORD *)(v238 + 7) != 0x2E746F6466622E6ELL)
                {
                  if (*((_QWORD *)&v238 + 1) < 0x13uLL)
                    goto LABEL_570;
                  v171 = *(_QWORD *)v238 == 0x2E34366863726161 && *(_QWORD *)(v238 + 8) == 0x6466622E6E6F656ELL;
                  if (!v171 || *(_QWORD *)(v238 + 11) != 0x2E746F6466622E6ELL)
                    goto LABEL_570;
                }
LABEL_569:
                if (*(_WORD *)(v238 + *((_QWORD *)&v238 + 1) - 2) != 14441)
                  goto LABEL_570;
                *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v238;
                v239.__r_.__value_.__s.__data_[16] = 0;
                v239.__r_.__value_.__s.__data_[20] = 0;
                v204 = llvm::StringSwitch<unsigned int,unsigned int>::Cases((uint64_t)&v239, "arm.neon.bfdot.v2f32.v8i8", 25, "arm.neon.bfdot.v4f32.v16i8", 26, 2981);
                v205 = llvm::StringSwitch<unsigned int,unsigned int>::Cases(v204, "aarch64.neon.bfdot.v2f32.v8i8", 29, "aarch64.neon.bfdot.v4f32.v16i8", 30, 516);
                if (*(_BYTE *)(v205 + 20))
                {
                  v206 = *(_DWORD *)(v205 + 16);
                  if (v206)
                  {
                    v239.__r_.__value_.__r.__words[0] = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(*((_QWORD *)a1 + 3) + 16));
                    v239.__r_.__value_.__l.__size_ = (std::string::size_type)v207;
                    v208 = llvm::TypeSize::operator unsigned long long(&v239, v207);
                    v209 = (llvm::Type *)**((_QWORD **)a1 + 5);
                    v239.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
                    BFloatTy = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(v209, v210);
                    llvm::FixedVectorType::get(BFloatTy, (llvm::Type *)(v208 >> 4));
                    v239.__r_.__value_.__l.__size_ = v212;
                    v72 = (uint64_t *)*((_QWORD *)a1 + 5);
                    v73 = v206;
                    goto LABEL_394;
                  }
                }
LABEL_597:
                v178 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
                if (v178)
                  v179 = *(_DWORD *)(v178 + 8) == 16;
                else
                  v179 = 0;
                if (v179 && (*(_DWORD *)(v178 + 8) & 0x600) != 0x400)
                {
                  v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239.__r_.__value_.__r.__words[2];
                  v239.__r_.__value_.__l.__size_ = 0x400000000;
                  llvm::Intrinsic::getIntrinsicInfoTableEntries(*((_DWORD *)a1 + 9));
                  if (*(_DWORD *)v239.__r_.__value_.__l.__data_ == 13)
                  {
                    v180 = *((_QWORD *)a1 + 3);
                    v181 = (uint64_t **)llvm::StructType::get(*(uint64_t **)v178, *(uint64_t **)(v178 + 16), *(unsigned int *)(v178 + 12), 0);
                    v182 = llvm::FunctionType::get(v181, *(_QWORD *)(v180 + 16) + 8, (8 * *(unsigned int *)(v180 + 12) - 8) >> 3, *(_DWORD *)(v180 + 8) > 0xFFu);
                    v183 = llvm::Value::getName(a1);
                    if (!v183)
                    {
                      __dst = 0;
                      v236 = 0;
                      v237 = 0;
                      goto LABEL_620;
                    }
                    v185 = v184;
                    if (v184 >= 0x7FFFFFFFFFFFFFF8)
                      abort();
                    v186 = v183;
                    if (v184 >= 0x17)
                    {
                      v189 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v184 | 7) != 0x17)
                        v189 = v184 | 7;
                      v190 = v189 + 1;
                      p_dst = (void **)operator new(v189 + 1);
                      v236 = v185;
                      v237 = v190 | 0x8000000000000000;
                      __dst = p_dst;
                    }
                    else
                    {
                      HIBYTE(v237) = v184;
                      p_dst = (void **)&__dst;
                      if (!v184)
                        goto LABEL_619;
                    }
                    memmove(p_dst, v186, v185);
LABEL_619:
                    *((_BYTE *)p_dst + v185) = 0;
LABEL_620:
                    v191 = (BOOL *)llvm::Value::getName(a1);
                    v245 = 773;
                    v242 = (void **)v191;
                    Int1Ty = v192;
                    v244 = ".old";
                    llvm::Value::setName(a1, (const char **)&v242);
                    v193 = *((_DWORD *)a1 + 8) & 0xF;
                    v194 = *(_DWORD *)(*(_QWORD *)a1 + 8) >> 8;
                    v245 = 260;
                    v242 = (void **)&__dst;
                    v195 = *((_QWORD *)a1 + 5);
                    v196 = llvm::User::operator new((llvm::User *)0x80);
                    v197 = (llvm::Function *)llvm::Function::Function(v196, v182, v193, v194, &v242, v195);
                    *a2 = v197;
                    v199 = llvm::Intrinsic::remangleIntrinsicFunction(v197, v198);
                    if (v200)
                      *a2 = v199;
                    if (SHIBYTE(v237) < 0)
                      operator delete(__dst);
                    v111 = (void *)v239.__r_.__value_.__r.__words[0];
                    if ((std::string::size_type *)v239.__r_.__value_.__l.__data_ != &v239.__r_.__value_.__r.__words[2])
                    {
LABEL_625:
                      free(v111);
                      return 1;
                    }
                    return 1;
                  }
                  if ((std::string::size_type *)v239.__r_.__value_.__l.__data_ != &v239.__r_.__value_.__r.__words[2])
                    free(v239.__r_.__value_.__l.__data_);
                }
                Declaration = llvm::Intrinsic::remangleIntrinsicFunction(a1, v5);
                if (!v188)
                  return 0;
                goto LABEL_612;
              }
              v214 = *(_DWORD *)(*(_QWORD *)(v213 + 24) + 8);
              if (v214 >= 4u && v214 != 5 && (v214 & 0xFD) != 4)
              {
LABEL_555:
                v158 = 0;
                goto LABEL_556;
              }
              v15 = (uint64_t *)*((_QWORD *)a1 + 5);
              v239.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
              v7 = 1;
              v16 = 524;
            }
LABEL_382:
            *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v15, v16, (BOOL **)&v239, 1);
            return v7;
          }
          if (*(_QWORD *)v238 != 0x2E34366863726161
            || *(_QWORD *)(v238 + 8) != 0x702E646165726874
            || *(_QWORD *)(v238 + 14) != 0x7265746E696F702ELL)
          {
            goto LABEL_499;
          }
        }
        v11 = (uint64_t *)*((_QWORD *)a1 + 5);
        v12 = 321;
        goto LABEL_531;
      }
      v59 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
      if ((*(_DWORD *)(v59 + 8) & 0xFE) != 0x12)
        v59 = 0;
      v60 = *(llvm::ScalableVectorType **)(v59 + 24);
      if ((*((_WORD *)a1 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments(a1);
      v61 = **((_QWORD **)a1 + 11);
      if ((*(_DWORD *)(v61 + 8) & 0xFE) != 0x12)
        v61 = 0;
      llvm::VectorType::get(v60, (llvm::Type *)(*(unsigned int *)(v61 + 32) | ((unint64_t)(*(_BYTE *)(v61 + 8) == 19) << 32)));
      v239.__r_.__value_.__r.__words[0] = v62;
      if (*((_QWORD *)&v238 + 1) >= 0xFuLL)
      {
        if (*(_QWORD *)v238 == 0x2E34366863726161 && *(_QWORD *)(v238 + 7) == 0x32646C2E6576732ELL)
        {
          v63 = 1267;
        }
        else if (*(_QWORD *)v238 == 0x2E34366863726161 && *(_QWORD *)(v238 + 7) == 0x33646C2E6576732ELL)
        {
          v63 = 1269;
        }
        else if (*(_QWORD *)v238 ^ 0x2E34366863726161 | *(_QWORD *)(v238 + 7) ^ 0x34646C2E6576732ELL)
        {
          v63 = 0;
        }
        else
        {
          v63 = 1271;
        }
      }
      else
      {
        v63 = 0;
      }
      v141 = (uint64_t *)*((_QWORD *)a1 + 5);
      v7 = 1;
      *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v141, v63, (BOOL **)&v239, 1);
      return v7;
    case 'c':
      if (v10 < 5)
        goto LABEL_597;
      v13 = *(_DWORD *)v9 == 2053928035 && Name[9] == 46;
      if (v13 && *((_QWORD *)a1 + 12) == 1)
      {
        rename(a1);
        v14 = (uint64_t *)*((_QWORD *)a1 + 5);
        if ((*((_WORD *)a1 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(a1);
        v239.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
        v7 = 1;
        v15 = v14;
        v16 = 58;
        goto LABEL_382;
      }
      v38 = *(_DWORD *)v9 == 2054452323 && Name[9] == 46;
      if (v38 && *((_QWORD *)a1 + 12) == 1)
      {
        rename(a1);
        v39 = (uint64_t *)*((_QWORD *)a1 + 5);
        if ((*((_WORD *)a1 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(a1);
        v239.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
        v7 = 1;
        v15 = v39;
        v16 = 60;
        goto LABEL_382;
      }
      if (v5 == (llvm::Function *)13 && *(_QWORD *)v9 == 0x646E652E6F726F63 && *((_QWORD *)a1 + 12) == 2)
      {
        rename(a1);
        v11 = (uint64_t *)*((_QWORD *)a1 + 5);
        v12 = 37;
        goto LABEL_531;
      }
      goto LABEL_597;
    case 'd':
      if (!llvm::StringRef::consume_front((const void **)&v238, "dbg.", 4uLL))
        goto LABEL_597;
      if (*((_QWORD *)&v238 + 1) == 5)
      {
        if (memcmp((const void *)v238, "value", 5uLL) || *((_QWORD *)a1 + 12) != 4)
          goto LABEL_597;
      }
      else if (*((_QWORD *)&v238 + 1) != 4 || *(_DWORD *)v238 != 1919181921)
      {
        goto LABEL_597;
      }
      rename(a1);
      v11 = (uint64_t *)*((_QWORD *)a1 + 5);
      v12 = 64;
      goto LABEL_531;
    case 'e':
      if (!llvm::StringRef::consume_front((const void **)&v238, "experimental.vector.", 0x14uLL))
        goto LABEL_597;
      if (*((_QWORD *)&v238 + 1) >= 8uLL)
      {
        if (*(_QWORD *)v238 == 0x2E74636172747865)
        {
          v109 = *((_QWORD *)a1 + 3);
          v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239.__r_.__value_.__r.__words[2];
          v239.__r_.__value_.__l.__size_ = 0x200000000;
          v110 = *(uint64_t **)(v109 + 16);
          v97 = (_QWORD *)(v109 + 16);
          v99 = v110;
          v100 = 345;
          v101 = 1;
          goto LABEL_308;
        }
      }
      else if (*((_QWORD *)&v238 + 1) != 7)
      {
        goto LABEL_158;
      }
      if (*(_DWORD *)v238 != 1702063721 || *(_DWORD *)(v238 + 3) != 779383397)
      {
LABEL_158:
        if (!llvm::StringRef::consume_front((const void **)&v238, "reduce.", 7uLL))
          goto LABEL_597;
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239.__r_.__value_.__r.__words[2];
        v239.__r_.__value_.__l.__size_ = 0x200000000;
        v45 = atomic_load((unsigned __int8 *)&qword_1ECD34248);
        if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD34248))
        {
          llvm::Regex::Regex((uint64_t)&unk_1ECD34288, "^([a-z]+)\\.[a-z][0-9]+", 22, 0);
          __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_1ECD34288, &dword_18013D000);
          __cxa_guard_release(&qword_1ECD34248);
        }
        if (llvm::Regex::match((uint64_t)&unk_1ECD34288, (char *)v238, *((uint64_t *)&v238 + 1), (uint64_t)&v239, 0))
        {
          v46 = *(unsigned __int16 **)(v239.__r_.__value_.__r.__words[0] + 16);
          v47 = *(_QWORD *)(v239.__r_.__value_.__r.__words[0] + 24);
          switch(v47)
          {
            case 2:
              if (*v46 == 29295)
              {
                v54 = 0;
                v55 = 356;
                goto LABEL_593;
              }
              break;
            case 4:
              switch(*(_DWORD *)v46)
              {
                case 0x78616D73:
                  v54 = 0;
                  v55 = 357;
                  goto LABEL_593;
                case 0x6E696D73:
                  v54 = 0;
                  v55 = 358;
                  goto LABEL_593;
                case 0x78616D75:
                  v54 = 0;
                  v55 = 359;
                  goto LABEL_593;
                case 0x6E696D75:
                  v54 = 0;
                  v55 = 360;
                  goto LABEL_593;
                case 0x78616D66:
                  v54 = 0;
                  v55 = 350;
                  goto LABEL_593;
                case 0x6E696D66:
                  v54 = 0;
                  v55 = 352;
                  goto LABEL_593;
              }
              break;
            case 3:
              if (*v46 == 25697 && *((_BYTE *)v46 + 2) == 100)
              {
                v54 = 0;
                v55 = 347;
                goto LABEL_593;
              }
              if (*v46 == 30061 && *((_BYTE *)v46 + 2) == 108)
              {
                v54 = 0;
                v55 = 355;
                goto LABEL_593;
              }
              if (*v46 == 28257 && *((_BYTE *)v46 + 2) == 100)
              {
                v54 = 0;
                v55 = 348;
                goto LABEL_593;
              }
              v51 = *v46;
              v52 = *((unsigned __int8 *)v46 + 2);
              if (v51 == 28536 && v52 == 114)
              {
                v54 = 0;
                v55 = 361;
                goto LABEL_593;
              }
              break;
          }
        }
        v144 = atomic_load((unsigned __int8 *)&qword_1ECD34250);
        if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD34250))
        {
          llvm::Regex::Regex((uint64_t)&unk_1ECD34298, "^v2\\.([a-z]+)\\.[fi][0-9]+", 25, 0);
          __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_1ECD34298, &dword_18013D000);
          __cxa_guard_release(&qword_1ECD34250);
        }
        LODWORD(v239.__r_.__value_.__r.__words[1]) = 0;
        v145 = llvm::Regex::match((uint64_t)&unk_1ECD34298, (char *)v238, *((uint64_t *)&v238 + 1), (uint64_t)&v239, 0);
        v146 = (std::string *)v239.__r_.__value_.__r.__words[0];
        if (!v145 || *(_QWORD *)(v239.__r_.__value_.__r.__words[0] + 24) != 4)
        {
          LOBYTE(v54) = 1;
          goto LABEL_594;
        }
        v147 = *(_DWORD **)(v239.__r_.__value_.__r.__words[0] + 16);
        if (*v147 == 1684300134)
        {
          v55 = 349;
          v54 = 1;
        }
        else
        {
          v54 = 1;
          if (*v147 != 1819635046)
            goto LABEL_594;
          v55 = 354;
        }
LABEL_593:
        rename(a1);
        v177 = (uint64_t *)*((_QWORD *)a1 + 5);
        v242 = *(void ***)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8 * v54 + 8);
        LOBYTE(v54) = 0;
        *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v177, v55, (BOOL **)&v242, 1);
        v146 = (std::string *)v239.__r_.__value_.__r.__words[0];
LABEL_594:
        if (v146 != (std::string *)&v239.__r_.__value_.__r.__words[2])
          free(v146);
        if ((v54 & 1) == 0)
          return 1;
        goto LABEL_597;
      }
      v96 = *((_QWORD *)a1 + 3);
      v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239.__r_.__value_.__r.__words[2];
      v239.__r_.__value_.__l.__size_ = 0x200000000;
      v98 = *(_QWORD *)(v96 + 16);
      v97 = (_QWORD *)(v96 + 16);
      v99 = (uint64_t *)(v98 + 8);
      v100 = 346;
      v101 = 2;
LABEL_308:
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v239, *v99);
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v239, *(_QWORD *)(*v97 + 8 * v101));
      rename(a1);
      *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)a1 + 5), v100, (BOOL **)v239.__r_.__value_.__l.__data_, LODWORD(v239.__r_.__value_.__r.__words[1]));
      v111 = (void *)v239.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v239.__r_.__value_.__l.__data_ != &v239.__r_.__value_.__r.__words[2])
        goto LABEL_625;
      return 1;
    case 'f':
      if (v10 < 0xA)
        goto LABEL_597;
      if (*(_QWORD *)v9 != 0x6E756F722E746C66 || *(_WORD *)(Name + 13) != 29540)
        goto LABEL_597;
      rename(a1);
      v11 = (uint64_t *)*((_QWORD *)a1 + 5);
      v12 = 171;
      goto LABEL_531;
    case 'i':
      if (v10 < 0x17)
        goto LABEL_597;
      v17 = *(_QWORD *)v9 == 0x6E61697261766E69 && *(_QWORD *)(Name + 13) == 0x2E70756F72672E74;
      if (!v17 || *(_QWORD *)(Name + 20) != 0x726569727261622ELL)
        goto LABEL_597;
      v239.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8);
      rename(a1);
      v15 = (uint64_t *)*((_QWORD *)a1 + 5);
      v7 = 1;
      v16 = 188;
      goto LABEL_382;
    case 'm':
      if (v10 < 7)
        goto LABEL_597;
      if (*(_DWORD *)v9 == 1668113773 && *((_DWORD *)Name + 2) == 779710563)
      {
        v20 = 217;
      }
      else
      {
        if (v10 < 8 || *(_QWORD *)v9 != 0x2E65766F6D6D656DLL)
          goto LABEL_229;
        v20 = 220;
      }
      if (*((_QWORD *)a1 + 12) == 5)
      {
        rename(a1);
        v78 = (std::string *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8);
        v79 = (uint64_t *)*((_QWORD *)a1 + 5);
        v80 = v20;
        goto LABEL_228;
      }
LABEL_229:
      v82 = *(_DWORD *)v9 == 1936549229 && *((_DWORD *)Name + 2) == 779380083;
      if (!v82 || *((_QWORD *)a1 + 12) != 5)
        goto LABEL_597;
      rename(a1);
      v83 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 16);
      v84 = *(_QWORD *)(v83 + 8);
      v85 = *(_QWORD *)(v83 + 24);
      v239.__r_.__value_.__r.__words[0] = v84;
      v239.__r_.__value_.__l.__size_ = v85;
      v72 = (uint64_t *)*((_QWORD *)a1 + 5);
      v73 = 222;
      goto LABEL_394;
    case 'n':
      if (!llvm::StringRef::consume_front((const void **)&v238, "nvvm.", 5uLL))
        goto LABEL_597;
      if (*((_QWORD *)a1 + 12) == 1)
      {
        *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v238;
        v239.__r_.__value_.__s.__data_[16] = 0;
        v239.__r_.__value_.__s.__data_[20] = 0;
        v21 = llvm::StringSwitch<unsigned int,unsigned int>::Cases((uint64_t)&v239, "brev32", 6, "brev64", 6, 12);
        v22 = llvm::StringSwitch<unsigned int,unsigned int>::Case(v21, "clz.i", 5, 58);
        v23 = llvm::StringSwitch<unsigned int,unsigned int>::Case(v22, "popc.i", 6, 59);
        if (*(_BYTE *)(v23 + 20))
        {
          v16 = *(_DWORD *)(v23 + 16);
          if (v16)
          {
            v15 = (uint64_t *)*((_QWORD *)a1 + 5);
            v239.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
            v7 = 1;
            goto LABEL_382;
          }
        }
      }
      v40 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
      if ((*(_DWORD *)(v40 + 8) & 0xFE) == 0x12)
        v41 = *(unsigned __int8 *)(**(_QWORD **)(v40 + 16) + 8);
      else
        v41 = *(_DWORD *)(v40 + 8);
      if (v41 != 1 && ShouldUpgradeNVPTXBF16Intrinsic(v238, *((unint64_t *)&v238 + 1)))
        goto LABEL_471;
      v74 = llvm::StringRef::consume_front((const void **)&v238, "abs.", 4uLL);
      v76 = *((_QWORD *)&v238 + 1);
      v75 = (const void *)v238;
      if (v74)
      {
        if (*((_QWORD *)&v238 + 1) != 2)
        {
          if (*((_QWORD *)&v238 + 1) != 1)
            goto LABEL_597;
          v77 = *(unsigned __int8 *)v238;
          goto LABEL_423;
        }
        v131 = "ll";
LABEL_467:
        if (memcmp(v75, v131, v76))
          goto LABEL_597;
        goto LABEL_471;
      }
      if (*((_QWORD *)&v238 + 1) == 3)
      {
        v136 = "h2f";
      }
      else
      {
        if (*((_QWORD *)&v238 + 1) != 7)
        {
          if (*((_QWORD *)&v238 + 1) == 6 && *(_DWORD *)v238 == 779775075 && *(_WORD *)(v238 + 4) == 27756)
            goto LABEL_471;
LABEL_417:
          if ((llvm::StringRef::consume_front((const void **)&v238, "max.", 4uLL) & 1) != 0
            || llvm::StringRef::consume_front((const void **)&v238, "min.", 4uLL))
          {
            v76 = *((_QWORD *)&v238 + 1);
            v137 = (_WORD *)v238;
            if (*((_QWORD *)&v238 + 1) == 3)
            {
              v131 = "ull";
              v75 = (const void *)v238;
              goto LABEL_467;
            }
            if (*((_QWORD *)&v238 + 1) != 2)
            {
              if (*((_QWORD *)&v238 + 1) != 1)
                goto LABEL_597;
              v77 = *(unsigned __int8 *)v238;
LABEL_423:
              if (v77 != 105)
                goto LABEL_597;
              goto LABEL_471;
            }
            if (memcmp((const void *)v238, "ll", 2uLL) && *v137 != 26997)
              goto LABEL_597;
          }
          else
          {
            if (!llvm::StringRef::consume_front((const void **)&v238, "atomic.load.add.", 0x10uLL)
              || *((_QWORD *)&v238 + 1) < 5uLL)
            {
              goto LABEL_597;
            }
            if ((*(_DWORD *)v238 != 775041894 || *(_BYTE *)(v238 + 4) != 112)
              && (*(_DWORD *)v238 != 775173734 || *(_BYTE *)(v238 + 4) != 112))
            {
              goto LABEL_597;
            }
          }
LABEL_471:
          *a2 = 0;
          return 1;
        }
        v136 = "popc.ll";
      }
      if (!memcmp((const void *)v238, v136, *((size_t *)&v238 + 1)))
        goto LABEL_471;
      goto LABEL_417;
    case 'o':
      if (v10 < 0xB)
        goto LABEL_597;
      if (*(_QWORD *)v9 != 0x69737463656A626FLL || *((_QWORD *)Name + 1) != 0x2E657A6973746365)
        goto LABEL_597;
      v242 = 0;
      Int1Ty = 0;
      v242 = **(void ****)(*((_QWORD *)a1 + 3) + 16);
      if ((*((_BYTE *)a1 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(a1);
      v33 = *((_QWORD *)a1 + 12);
      Int1Ty = **((_QWORD **)a1 + 11);
      if ((v33 & 0xFFFFFFFFFFFFFFFELL) != 2)
      {
        v102 = llvm::Value::getName(a1);
        v104 = v103;
        llvm::Intrinsic::getName(260, (BOOL **)&v242, 2, *((uint64_t **)a1 + 5), 0, &v239);
        v105 = SHIBYTE(v239.__r_.__value_.__r.__words[2]);
        v106 = (void *)v239.__r_.__value_.__r.__words[0];
        if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v5 = (llvm::Function *)&v239;
        else
          v5 = (llvm::Function *)v239.__r_.__value_.__r.__words[0];
        if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v239.__r_.__value_.__r.__words[2]);
        else
          size = v239.__r_.__value_.__l.__size_;
        if (v104 == size)
        {
          if (size)
            v108 = memcmp(v102, v5, size) != 0;
          else
            v108 = 0;
        }
        else
        {
          v108 = 1;
        }
        if (v105 < 0)
          operator delete(v106);
        if (!v108)
          goto LABEL_597;
      }
      rename(a1);
      Declaration = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)a1 + 5), 260, (BOOL **)&v242, 2);
      goto LABEL_612;
    case 'p':
      if (v10 >= 0xF)
      {
        v34 = *(_QWORD *)v9 == 0x6F6E6E612E727470 && *(_QWORD *)(Name + 12) == 0x2E6E6F697461746FLL;
        if (v34 && *((_QWORD *)a1 + 12) == 4)
        {
          rename(a1);
          v35 = (uint64_t *)*((_QWORD *)a1 + 5);
          if ((*((_WORD *)a1 + 9) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments(a1);
            v130 = *((_WORD *)a1 + 9);
            v36 = (std::string::size_type *)*((_QWORD *)a1 + 11);
            v239.__r_.__value_.__r.__words[0] = *v36;
            if ((v130 & 1) != 0)
            {
              llvm::Function::BuildLazyArguments(a1);
              v36 = (std::string::size_type *)*((_QWORD *)a1 + 11);
            }
          }
          else
          {
            v36 = (std::string::size_type *)*((_QWORD *)a1 + 11);
            v239.__r_.__value_.__r.__words[0] = *v36;
          }
          v239.__r_.__value_.__l.__size_ = v36[5];
          v72 = v35;
          v73 = 269;
          goto LABEL_394;
        }
      }
      else if (v10 < 8)
      {
        goto LABEL_597;
      }
      if (*(_QWORD *)v9 == 0x2E68747561727470)
      {
        v37 = Name + 13;
        *(_QWORD *)&v238 = Name + 13;
        *((_QWORD *)&v238 + 1) = (char *)v5 - 13;
        switch((unint64_t)v5)
        {
          case 0x15uLL:
            if (*v37 == 0x3436692E68747561)
            {
              v24 = 270;
            }
            else
            {
              if (*v37 != 0x3436692E6E676973)
                goto LABEL_597;
              v24 = 273;
            }
            goto LABEL_530;
          case 0x16uLL:
            if (*v37 == 0x36692E7069727473 && Name[21] == 52)
            {
              v24 = 275;
              goto LABEL_530;
            }
            if (*v37 == 0x36692E646E656C62 && Name[21] == 52)
            {
              v24 = 271;
              goto LABEL_530;
            }
            break;
          case 0x17uLL:
            if (*v37 != 0x692E6E6769736572 || *(_WORD *)(Name + 21) != 13366)
              goto LABEL_597;
            v24 = 272;
            goto LABEL_530;
          case 0x1DuLL:
            if (*v37 != 0x6E65672E6E676973 || *(_QWORD *)(Name + 21) != 0x3436692E63697265)
              goto LABEL_597;
            v24 = 274;
            goto LABEL_530;
          default:
            goto LABEL_597;
        }
      }
      goto LABEL_597;
    case 'r':
      if (!llvm::StringRef::consume_front((const void **)&v238, "riscv.", 6uLL))
        goto LABEL_597;
      if (*((_QWORD *)&v238 + 1) == 9)
      {
        if (*(_QWORD *)v238 == 0x6D73643233736561 && *(_BYTE *)(v238 + 8) == 105)
        {
          v24 = 9703;
        }
        else
        {
          if (*(_QWORD *)v238 != 0x6D73653233736561 || *(_BYTE *)(v238 + 8) != 105)
            goto LABEL_250;
          v24 = 9705;
        }
      }
      else
      {
        if (*((_QWORD *)&v238 + 1) != 8)
        {
          if (*((_QWORD *)&v238 + 1) < 5uLL)
            goto LABEL_597;
          goto LABEL_250;
        }
        if (*(_QWORD *)v238 != 0x6973643233736561)
        {
          if (*(_QWORD *)v238 == 0x6973653233736561)
          {
            v24 = 9704;
            goto LABEL_328;
          }
LABEL_250:
          if (*(_DWORD *)v238 == 1798598003 && *(_BYTE *)(v238 + 4) == 115)
          {
            v24 = 9866;
          }
          else
          {
            if (*(_DWORD *)v238 != 1697934707 || *(_BYTE *)(v238 + 4) != 100)
            {
              if (*((_QWORD *)&v238 + 1) < 0xAuLL)
                goto LABEL_259;
              if (*(_QWORD *)v238 == 0x6973363532616873 && *(_WORD *)(v238 + 8) == 12391)
              {
                v24 = 9849;
              }
              else if (*(_QWORD *)v238 == 0x6973363532616873 && *(_WORD *)(v238 + 8) == 12647)
              {
                v24 = 9850;
              }
              else if (*(_QWORD *)v238 == 0x7573363532616873 && *(_WORD *)(v238 + 8) == 12397)
              {
                v24 = 9851;
              }
              else
              {
                if (*(_QWORD *)v238 != 0x7573363532616873 || *(_WORD *)(v238 + 8) != 12653)
                {
LABEL_259:
                  if (*(_DWORD *)v238 == 1882418547 && *(_BYTE *)(v238 + 4) == 48)
                  {
                    v24 = 9863;
                  }
                  else
                  {
                    if (*(_DWORD *)v238 != 1882418547 || *(_BYTE *)(v238 + 4) != 49)
                      goto LABEL_597;
                    v24 = 9864;
                  }
                  goto LABEL_529;
                }
                v24 = 9852;
              }
LABEL_529:
              if (!llvm::Type::isIntegerTy(**(llvm::Type ***)(*((_QWORD *)a1 + 3) + 16), 64))
                goto LABEL_597;
              goto LABEL_530;
            }
            v24 = 9865;
          }
          if (!llvm::Type::isIntegerTy(*(llvm::Type **)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 24), 32))
            goto LABEL_530;
          goto LABEL_529;
        }
        v24 = 9702;
      }
LABEL_328:
      if (!llvm::Type::isIntegerTy(*(llvm::Type **)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 24), 32))
        goto LABEL_530;
      goto LABEL_597;
    case 's':
      if (v5 != (llvm::Function *)24)
        goto LABEL_597;
      v25 = *(_QWORD *)v9 == 0x6F72706B63617473 && *(_QWORD *)(Name + 13) == 0x6863726F74636574;
      if (!v25 || *((_QWORD *)Name + 2) != 0x6B63656863726F74)
        goto LABEL_597;
      goto LABEL_471;
    case 'v':
      if (v5 != (llvm::Function *)19)
        goto LABEL_597;
      v27 = *(_QWORD *)v9 == 0x6F6E6E612E726176 && *(_QWORD *)(Name + 11) == 0x6E6F697461746F6ELL;
      if (!v27 || *((_QWORD *)a1 + 12) != 4)
        goto LABEL_597;
      rename(a1);
      v28 = (uint64_t *)*((_QWORD *)a1 + 5);
      if ((*((_WORD *)a1 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(a1);
        v129 = *((_WORD *)a1 + 9);
        v29 = (std::string::size_type *)*((_QWORD *)a1 + 11);
        v239.__r_.__value_.__r.__words[0] = *v29;
        if ((v129 & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(a1);
          v29 = (std::string::size_type *)*((_QWORD *)a1 + 11);
        }
      }
      else
      {
        v29 = (std::string::size_type *)*((_QWORD *)a1 + 11);
        v239.__r_.__value_.__r.__words[0] = *v29;
      }
      v239.__r_.__value_.__l.__size_ = v29[5];
      v72 = v28;
      v73 = 344;
      goto LABEL_394;
    case 'w':
      if (!llvm::StringRef::consume_front((const void **)&v238, "wasm.", 5uLL))
        goto LABEL_597;
      if (*((_QWORD *)&v238 + 1) < 4uLL)
        goto LABEL_81;
      if (*(_DWORD *)v238 == 778136934)
      {
        v43 = 11969;
      }
      else if (*(_DWORD *)v238 == 779316582)
      {
        v43 = 11972;
      }
      else
      {
        if (*((_QWORD *)&v238 + 1) < 0xBuLL
          || (*(_QWORD *)v238 == 0x656C6573656E616CLL
            ? (v42 = *(_QWORD *)(v238 + 3) == 0x2E7463656C657365)
            : (v42 = 0),
              !v42))
        {
LABEL_81:
          if (!llvm::StringRef::consume_front((const void **)&v238, "dot.i8x16.i7x16.", 0x10uLL))
            goto LABEL_597;
          if (*((_QWORD *)&v238 + 1) != 10)
          {
            if (*((_QWORD *)&v238 + 1) == 6 && *(_DWORD *)v238 == 1852270963 && *(_WORD *)(v238 + 4) == 25701)
            {
              v24 = 11967;
              goto LABEL_530;
            }
            goto LABEL_597;
          }
          if (*(_QWORD *)v238 != 0x6E6769732E646461 || *(_WORD *)(v238 + 8) != 25701)
            goto LABEL_597;
          v24 = 11966;
LABEL_530:
          rename(a1);
          v11 = (uint64_t *)*((_QWORD *)a1 + 5);
          v12 = v24;
          goto LABEL_531;
        }
        v43 = 11968;
      }
      rename(a1);
      v15 = (uint64_t *)*((_QWORD *)a1 + 5);
      v239.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
      v7 = 1;
      v16 = v43;
      goto LABEL_382;
    case 'x':
      if (UpgradeX86IntrinsicFunction(a1, v9, v10, a2))
        return 1;
      goto LABEL_597;
    default:
      goto LABEL_597;
  }
}

_QWORD *llvm::UpgradeGlobalVariable(llvm *this, llvm::GlobalVariable *a2)
{
  const char *Name;
  uint64_t v4;
  BOOL v5;
  const char *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  const char *v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  const char *v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t Int8PtrTy;
  uint64_t *v23;
  llvm::PoisonValue *v24;
  uint64_t v25;
  int v26;
  llvm::Type *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  llvm::Constant *v32;
  llvm::APFloatBase *AggregateElement;
  llvm::APFloatBase *v34;
  llvm::Constant *v35;
  Type *v36;
  unint64_t v37;
  int v38;
  char *v39;
  llvm::PoisonValue *v40;
  llvm::PointerType ***v41;
  llvm::PointerType **v42;
  int v43;
  const char *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  __int16 v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[6];
  llvm::Type *DesiredBytecodeVersion;
  void **v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  _QWORD v63[3];

  v63[1] = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 8) & 0xF) == 6)
  {
    if ((Name = llvm::Value::getName(this), v4 == 12)
      && (*(_QWORD *)Name == 0x646D632E6D766C6CLL ? (v5 = *((_DWORD *)Name + 2) == 1701734764) : (v5 = 0), v5)
      || (v6 = llvm::Value::getName(this), v7 == 20)
      && (*(_QWORD *)v6 == 0x626D652E6D766C6CLL ? (v8 = *((_QWORD *)v6 + 1) == 0x6F6D2E6465646465) : (v8 = 0),
          v8 ? (v9 = *((_DWORD *)v6 + 4) == 1701606756) : (v9 = 0),
          v9))
    {
      v18 = 0;
      *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFFFBCC0 | 0x4008;
      return v18;
    }
  }
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return 0;
  v10 = llvm::Value::getName(this);
  if (v11 != 17
    || (*(_QWORD *)v10 == 0x6F6C672E6D766C6CLL ? (v12 = *((_QWORD *)v10 + 1) == 0x726F74635F6C6162) : (v12 = 0),
        v12 ? (v13 = v10[16] == 115) : (v13 = 0),
        !v13))
  {
    v14 = llvm::Value::getName(this);
    if (v15 != 17)
      return 0;
    v16 = *(_QWORD *)v14 == 0x6F6C672E6D766C6CLL && *((_QWORD *)v14 + 1) == 0x726F74645F6C6162;
    if (!v16 || v14[16] != 115)
      return 0;
  }
  v18 = 0;
  if (!llvm::GlobalValue::isDeclaration(this))
  {
    v20 = *((_QWORD *)this + 3);
    if (v20)
    {
      if (*(_BYTE *)(v20 + 8) == 17)
      {
        v18 = 0;
        v21 = *(_QWORD *)(v20 + 24);
        if (v21)
        {
          if (*(_BYTE *)(v21 + 8) == 16)
          {
            if (*(_DWORD *)(v21 + 12) != 2)
              return 0;
            v50 = v52;
            v51 = 0x200000000;
            DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
            v54 = &v62;
            v55 = v63;
            v56 = 0;
            v57 = 0;
            v58 = 512;
            v59 = 7;
            v52[4] = 0;
            v52[5] = 0;
            v60 = 0;
            v61 = 0;
            v62 = &unk_1E0E204A0;
            v63[0] = &unk_1E0E22D50;
            v46 = *(_OWORD *)*(_QWORD *)(v21 + 16);
            Int8PtrTy = llvm::Type::getInt8PtrTy(DesiredBytecodeVersion, 0);
            v23 = *(uint64_t **)v46;
            v47 = v46;
            v48 = Int8PtrTy;
            v24 = (llvm::PoisonValue *)llvm::StructType::get(v23, (uint64_t *)&v47, 3, 0);
            v25 = *((_QWORD *)this - 4);
            v26 = *(_DWORD *)(v25 + 20);
            v27 = (llvm::Type *)(v26 & 0x7FFFFFF);
            if ((v26 & 0x7FFFFFF) != 0)
            {
              v28 = (char *)operator new(8 * (_QWORD)v27);
              bzero(v28, 8 * (_QWORD)v27);
              v29 = 0;
              v30 = v28;
              do
              {
                v38 = *(_DWORD *)(v25 + 20);
                if ((v38 & 0x40000000) != 0)
                  v31 = *(_QWORD *)(v25 - 8);
                else
                  v31 = v25 - 32 * (v38 & 0x7FFFFFF);
                v32 = *(llvm::Constant **)(v31 + v29);
                AggregateElement = llvm::Constant::getAggregateElement(v32, 0);
                v34 = llvm::Constant::getAggregateElement(v32, (Type *)1);
                v35 = (llvm::Constant *)llvm::Type::getInt8PtrTy(DesiredBytecodeVersion, 0);
                llvm::Constant::getNullValue(v35, v36);
                *(_QWORD *)&v47 = AggregateElement;
                *((_QWORD *)&v47 + 1) = v34;
                v48 = v37;
                *v30++ = llvm::ConstantStruct::get(v24, (llvm::Type *)&v47, 3);
                v29 += 32;
              }
              while (32 * (_QWORD)v27 != v29);
              v39 = &v28[8 * (_QWORD)v27];
            }
            else
            {
              v28 = 0;
              v39 = 0;
            }
            llvm::ArrayType::get(v24, v27);
            v41 = (llvm::PointerType ***)llvm::ConstantArray::get(v40, (llvm::Type *)v28, (v39 - v28) >> 3);
            v18 = llvm::User::operator new((llvm::User *)0x58, 1u);
            v42 = *v41;
            v43 = *((_DWORD *)this + 8) & 0xF;
            v44 = llvm::Value::getName(this);
            v49 = 261;
            *(_QWORD *)&v47 = v44;
            *((_QWORD *)&v47 + 1) = v45;
            llvm::GlobalVariable::GlobalVariable((uint64_t)v18, v42, 0, v43, (uint64_t)v41, (const char **)&v47, 0, 0, 0);
            if (v28)
              operator delete(v28);
            llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v63);
            mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v62);
            if (v50 != v52)
              free(v50);
          }
        }
      }
    }
  }
  return v18;
}

std::string *llvm::UpgradeInlineAsmString(std::string *__s)
{
  std::string *v1;
  uint64_t v2;
  std::string *v3;
  uint64_t size;
  std::string *v5;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  std::string *v14;
  std::string *v15;

  v1 = __s;
  v2 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
    if (size < 6)
      return __s;
  }
  else
  {
    v3 = __s;
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    if ((unint64_t)size < 6)
      return __s;
  }
  v5 = (std::string *)((char *)v3 + size);
  __s = v3;
  do
  {
    __s = (std::string *)memchr(__s, 109, size - 5);
    if (!__s)
      break;
    if (LODWORD(__s->__r_.__value_.__l.__data_) == 158756717 && WORD2(__s->__r_.__value_.__r.__words[0]) == 28774)
    {
      if (__s != v5 && __s == v3)
      {
        if ((v2 & 0x80) != 0)
        {
          v7 = (std::string *)v1->__r_.__value_.__r.__words[0];
          v8 = v1->__r_.__value_.__l.__size_;
          if (v8 < 33)
            return __s;
        }
        else
        {
          v7 = v1;
          v8 = v2;
          if (v2 < 33)
            return __s;
        }
        v9 = (std::string *)((char *)v7 + v8);
        __s = v7;
        while (1)
        {
          __s = (std::string *)memchr(__s, 111, v8 - 32);
          if (!__s)
            break;
          if (__s->__r_.__value_.__r.__words[0] == 0x7465725F636A626FLL
            && __s->__r_.__value_.__l.__size_ == 0x726F7475416E6961
            && __s->__r_.__value_.__r.__words[2] == 0x6552657361656C65
            && __s[1].__r_.__value_.__r.__words[0] == 0x756C61566E727574
            && __s[1].__r_.__value_.__s.__data_[8] == 101)
          {
            if (__s != v9 && (char *)__s - (char *)v7 != -1)
            {
              if ((v2 & 0x80) != 0)
              {
                v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
                v2 = v1->__r_.__value_.__l.__size_;
              }
              else
              {
                v14 = v1;
              }
              if (v2 >= 8)
              {
                v15 = (std::string *)((char *)v14 + v2);
                __s = v14;
                while (1)
                {
                  __s = (std::string *)memchr(__s, 35, v2 - 7);
                  if (!__s)
                    break;
                  if (__s->__r_.__value_.__r.__words[0] == 0x72656B72616D2023)
                  {
                    if (__s != v15 && (char *)__s - (char *)v14 != -1)
                      return std::string::replace(v1, (char *)__s - (char *)v14, 1uLL, ";");
                    return __s;
                  }
                  __s = (std::string *)((char *)__s + 1);
                  v2 = (char *)v15 - (char *)__s;
                  if ((char *)v15 - (char *)__s < 8)
                    return __s;
                }
              }
            }
            return __s;
          }
          __s = (std::string *)((char *)__s + 1);
          v8 = (char *)v9 - (char *)__s;
          if ((char *)v9 - (char *)__s < 33)
            return __s;
        }
      }
      return __s;
    }
    __s = (std::string *)((char *)__s + 1);
    size = (char *)v5 - (char *)__s;
  }
  while ((char *)v5 - (char *)__s >= 6);
  return __s;
}

void llvm::UpgradeIntrinsicCall(llvm *this, llvm::CallBase *a2, llvm::Function *a3)
{
  uint64_t v3;
  BOOL v4;
  llvm::LLVMContext *v6;
  llvm::Type *v7;
  llvm::Type *v8;
  llvm::ConstantInt *DesiredBytecodeVersion;
  llvm *v10;
  llvm::MDNode *v11;
  llvm::CallBase *v12;
  int v13;
  mlir::BytecodeWriterConfig *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  llvm::LLVMContext *v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  mlir::BytecodeWriterConfig *v28;
  uint64_t v29;
  uint64_t *v30;
  llvm::LLVMContext *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::MDNode *v35;
  int v36;
  _BOOL4 v37;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  llvm::LLVMContext *v43;
  llvm::Type **v44;
  llvm::Type *v45;
  uint64_t v46;
  unsigned int v47;
  const char *Name;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::CallBase *v52;
  uint64_t *v53;
  uint64_t v54;
  mlir::BytecodeWriterConfig *v55;
  uint64_t v56;
  uint64_t *v57;
  llvm::LLVMContext *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  mlir::BytecodeWriterConfig *v65;
  uint64_t v66;
  llvm::LLVMContext **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm::LLVMContext **v71;
  int v72;
  char *v73;
  uint64_t v74;
  llvm::VectorType *v75;
  llvm::Type **v76;
  llvm::Type *v77;
  llvm::Type **v78;
  uint64_t *v79;
  llvm::CallBase *v80;
  uint64_t v81;
  char v83;
  size_t v84;
  Value **v85;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  char *v96;
  uint64_t v97;
  llvm::Value *v98;
  llvm::Value *Select;
  llvm::Value *v100;
  llvm::Type *v101;
  llvm::Type *v102;
  char *v103;
  unsigned __int8 *v104;
  Value *v105;
  BOOL v106;
  unsigned __int8 **v107;
  const char *v108;
  unint64_t v109;
  llvm::LLVMContext *v110;
  llvm::FixedVectorType *BFloatTy;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  uint64_t *v114;
  uint64_t v115;
  unsigned int v116;
  unsigned __int8 **v117;
  unsigned __int8 **v118;
  unsigned __int8 **v119;
  llvm::Type *v120;
  llvm::Type *v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const double *v128;
  unsigned __int128 *v129;
  uint64_t v130;
  const double *v131;
  unsigned __int128 v132;
  unsigned __int128 v133;
  uint64_t v134;
  uint64_t v135;
  llvm::CallBase *v136;
  uint64_t v137;
  llvm::Type *v138;
  char *v139;
  uint64_t v140;
  llvm::LLVMContext *v141;
  uint64_t Int32Ty;
  uint64_t v143;
  uint64_t *v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  mlir::BytecodeWriterConfig *v148;
  _QWORD *v149;
  uint64_t v150;
  llvm::Type ***v151;
  llvm::Type **v152;
  llvm::Type *v153;
  llvm::FixedVectorType *FloatTy;
  llvm::LLVMContext *v155;
  llvm::Type *v156;
  llvm::Type **v157;
  llvm::FixedVectorType *v158;
  llvm::Type *v159;
  llvm::Type *v160;
  llvm::Type **BitCast;
  void *v162;
  unsigned int v163;
  unsigned __int8 **v164;
  unsigned __int8 **v165;
  unsigned __int8 **v166;
  llvm::Type *v167;
  llvm::Type *v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  llvm::MDNode *v173;
  char *v174;
  uint64_t v175;
  llvm::Type *v176;
  llvm::Type **v177;
  llvm::LLVMContext *v178;
  llvm::FixedVectorType *v179;
  llvm::Type *v180;
  llvm::Type **v181;
  llvm::MDNode *v182;
  llvm::Type **v183;
  llvm::LLVMContext *v184;
  llvm::FixedVectorType *v185;
  llvm::Type *v186;
  llvm::Type **v187;
  uint64_t v188;
  llvm::LLVMContext **v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const double *v195;
  unsigned __int128 *v196;
  uint64_t v197;
  const double *v198;
  unsigned __int128 v199;
  unsigned __int128 v200;
  llvm::LLVMContext *v201;
  unsigned __int8 **X86MaskVec;
  uint64_t *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const double *v211;
  unsigned __int128 *v212;
  uint64_t v213;
  const double *v214;
  unsigned __int128 v215;
  unsigned __int128 v216;
  uint64_t v217;
  unsigned __int8 **v218;
  uint64_t Int8Ty;
  unsigned __int8 **v220;
  unsigned __int8 **v221;
  llvm::Type *v222;
  llvm::Type *v223;
  uint64_t *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  const double *v230;
  unsigned __int128 *v231;
  uint64_t v232;
  const double *v233;
  unsigned __int128 v234;
  unsigned __int128 v235;
  uint64_t v236;
  llvm::CallBase *v237;
  llvm::Type *v238;
  llvm::Type **v239;
  llvm::FixedVectorType *v240;
  llvm::Type *v241;
  llvm::Type **v242;
  uint64_t v243;
  Type *v244;
  llvm::LLVMContext *v245;
  llvm::FixedVectorType *Int16Ty;
  uint64_t v247;
  double v248;
  unsigned __int8 **v249;
  unsigned __int8 **v250;
  llvm::Type *v251;
  llvm::Type *v252;
  BOOL v253;
  char v254;
  uint64_t v258;
  char *v259;
  llvm::Type **Trunc;
  llvm::Type **v261;
  llvm::LLVMContext *v262;
  llvm::Type *v263;
  llvm::LLVMContext *v264;
  llvm::Type *v265;
  llvm::LLVMContext *v266;
  uint64_t v267;
  uint64_t **v268;
  _QWORD *v269;
  llvm::CallBase *v270;
  uint64_t v271;
  llvm::Type **v272;
  llvm::Type **v273;
  mlir::BytecodeWriterConfig *v274;
  llvm::Type *v275;
  llvm::Value *v276;
  mlir::BytecodeWriterConfig *v277;
  llvm::CallBase *v278;
  uint64_t v279;
  uint64_t v280;
  const char *v281;
  uint64_t v284;
  uint64_t v285;
  _BOOL4 v287;
  llvm::Value *IntCast;
  Value *v289;
  llvm::Value *v290;
  uint64_t v291;
  unsigned __int8 **Value;
  llvm::Type **v293;
  llvm::Type *v294;
  llvm::Type **v295;
  uint64_t v296;
  llvm::ValueAsMetadata *v297;
  llvm::Value *v298;
  llvm::MDNode *Impl;
  char *v300;
  unsigned __int8 **v301;
  llvm::Value *v302;
  uint64_t v303;
  unsigned __int8 **v304;
  unsigned __int8 **v305;
  llvm::Type *v306;
  llvm::Type *v307;
  char v309;
  BOOL v311;
  BOOL v312;
  llvm::Value *v315;
  uint64_t v316;
  llvm::Value *v317;
  unsigned __int8 *v318;
  char *v319;
  unsigned __int8 **v320;
  llvm::PointerType ***v321;
  _BOOL4 v322;
  char *v323;
  llvm::Type **v324;
  llvm::PointerType ***v325;
  llvm::Type *v326;
  llvm::Type **v327;
  uint64_t v328;
  llvm::ValueAsMetadata *v329;
  llvm::Value *v330;
  char *v331;
  unsigned __int8 **v332;
  llvm::PointerType ***v333;
  uint64_t v334;
  unsigned __int8 **v335;
  unsigned __int8 **v336;
  llvm::Type *v337;
  llvm::Type *v338;
  char v339;
  char v340;
  BOOL v343;
  BOOL v344;
  mlir::BytecodeWriterConfig *v345;
  char *v346;
  llvm::Constant *Int8PtrTy;
  Type *v348;
  uint64_t v349;
  const char *v350;
  uint64_t v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  BOOL v356;
  uint64_t v358;
  int v359;
  uint64_t v360;
  _QWORD *v361;
  int v362;
  uint64_t v363;
  const char *v364;
  uint64_t v365;
  unint64_t v366;
  const char *v367;
  BOOL v368;
  char *v370;
  uint64_t v371;
  llvm::ConstantTokenNone *v372;
  llvm::LLVMContext *v373;
  _QWORD *v374;
  const char *v375;
  unint64_t v376;
  uint64_t v377;
  mlir::BytecodeWriterConfig *v378;
  uint64_t v379;
  mlir::BytecodeWriterConfig *v380;
  llvm::LLVMContext *v381;
  _QWORD *False;
  mlir::BytecodeWriterConfig *v383;
  __int16 v384;
  char *v385;
  llvm::Type ***v386;
  uint64_t v387;
  llvm::Type *v388;
  BOOL *SExt;
  char *v390;
  __int16 v391;
  llvm::Type **v392;
  uint64_t v393;
  uint64_t FnAttrs;
  uint64_t RetAttrs;
  uint64_t v396;
  unint64_t *v397;
  unint64_t *v398;
  unint64_t v399;
  unint64_t v400;
  __int16 v401;
  unint64_t v402;
  __int16 v403;
  llvm::LLVMContext *v404;
  _QWORD *v405;
  unsigned __int8 **AlignedStore;
  _QWORD *v407;
  llvm::PoisonValue *v408;
  unsigned int v409;
  llvm::MDNode *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  llvm::Type *v414;
  llvm::LLVMContext *v415;
  uint64_t Intrinsic;
  uint64_t v417;
  uint64_t Int64Ty;
  _QWORD *v419;
  unsigned __int8 **v420;
  uint64_t v421;
  llvm::PoisonValue *v422;
  uint64_t v423;
  llvm::ConstantInt *v424;
  llvm::Type *v425;
  llvm::Type *v426;
  BOOL v430;
  BOOL v431;
  BOOL v432;
  BOOL v433;
  BOOL v434;
  uint64_t *v435;
  uint64_t Declaration;
  uint64_t v437;
  uint64_t v438;
  char v439;
  char v440;
  char v441;
  int v442;
  llvm::Value *v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  char *v447;
  llvm::Type **v448;
  llvm::FixedVectorType *v449;
  llvm::Type *v450;
  llvm::Type **v451;
  BOOL v454;
  BOOL v455;
  _QWORD *v456;
  llvm::LLVMContext *v457;
  llvm::Metadata *v458;
  llvm::CallBase *v459;
  uint64_t v460;
  __int16 v464;
  llvm::Type *v465;
  llvm::LLVMContext *v466;
  const char *v467;
  unint64_t v468;
  const char *v469;
  unint64_t v470;
  llvm::Value *v471;
  llvm::ZExtInst *v472;
  llvm::Type *v473;
  llvm::Type *v474;
  BOOL *VectorSplat;
  _QWORD *v476;
  _QWORD *v477;
  uint64_t v478;
  _QWORD *v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  const char *v487;
  char *v488;
  llvm::Value *v489;
  llvm::Value *v490;
  unsigned __int8 *v491;
  Type *v492;
  uint64_t v493;
  __int16 v494;
  unint64_t v495;
  unint64_t v496;
  int v497;
  _QWORD *v498;
  unsigned int v499;
  unsigned __int8 **v500;
  unsigned __int8 **v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  _QWORD *v506;
  unsigned int v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _QWORD *v511;
  int v512;
  uint64_t *Module;
  uint64_t v514;
  uint64_t v515;
  char v516;
  char v517;
  llvm::ConstantInt *v518;
  llvm::Value *v519;
  llvm::Value *v520;
  llvm::ExtractElementInst *Element;
  llvm::Value *v522;
  llvm::Value *v523;
  llvm::ExtractElementInst *v524;
  uint64_t **FAdd;
  char v526;
  unsigned __int8 **v527;
  unsigned __int8 **v528;
  BOOL *Not;
  llvm::Type **v531;
  BOOL v532;
  BOOL v533;
  BOOL v536;
  BOOL v537;
  BOOL v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  BOOL v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  BOOL v548;
  BOOL v549;
  BOOL v550;
  BOOL v551;
  BOOL v552;
  BOOL v553;
  BOOL v554;
  BOOL v555;
  BOOL v556;
  BOOL v557;
  BOOL v558;
  BOOL v559;
  BOOL v560;
  BOOL v561;
  BOOL v562;
  BOOL v563;
  BOOL v564;
  BOOL v565;
  BOOL v572;
  BOOL v574;
  BOOL v576;
  llvm::Constant ***v578;
  llvm::Constant **v579;
  uint64_t v580;
  BOOL *v581;
  unsigned __int8 *v582;
  BOOL *v583;
  uint64_t **FDiv;
  _QWORD *v585;
  unsigned __int8 **v586;
  unsigned __int8 **v587;
  BOOL *v588;
  llvm::LLVMContext *v589;
  llvm::Type *v590;
  int v591;
  llvm::LLVMContext *v592;
  llvm::Constant *v593;
  llvm::Type *v594;
  const llvm::APInt *v595;
  llvm::APFloatBase *v596;
  BOOL *inserted;
  int32x4_t v598;
  int32x4_t *v599;
  int32x4_t v600;
  int32x4_t v601;
  uint64_t v602;
  uint64_t v603;
  unsigned __int8 **v604;
  unsigned __int8 **v605;
  llvm::Type *v606;
  unsigned int v607;
  char *v609;
  uint64_t v610;
  llvm::Type *v611;
  const char *v612;
  int v613;
  int ScalarSizeInBits;
  llvm::Type *v615;
  const llvm::APInt *v616;
  int v617;
  char *v618;
  mlir::BytecodeWriterConfig *v619;
  uint64_t v620;
  _QWORD *v621;
  int v622;
  unsigned __int8 **v623;
  unsigned __int8 **v624;
  unsigned __int8 **v625;
  unsigned __int8 **v626;
  unsigned __int8 **v627;
  char *v628;
  unsigned int v629;
  llvm::ScalableVectorType **v630;
  BOOL *v631;
  llvm::Type **v632;
  char *v633;
  unsigned __int8 *v634;
  Value *v635;
  uint64_t v636;
  _QWORD *v637;
  BOOL *v638;
  llvm::LLVMContext *v639;
  llvm::Type *v640;
  BOOL *v641;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  _BOOL4 v655;
  unsigned __int8 **v656;
  unsigned __int8 **v657;
  unsigned __int8 **v658;
  unsigned __int8 **v659;
  unsigned __int8 **v660;
  llvm::Type *v661;
  llvm::Value *v667;
  llvm::Value *v668;
  llvm::Type *v669;
  const char *v670;
  int v671;
  int v672;
  int v673;
  llvm::PoisonValue *v674;
  llvm::LLVMContext *v675;
  uint64_t v676;
  uint64_t v677;
  llvm::Value *v678;
  BOOL **v679;
  llvm::Value *InsertVector;
  llvm::LLVMContext *v681;
  uint64_t v682;
  llvm::Value *v683;
  BOOL **v684;
  llvm::LLVMContext *v685;
  uint64_t v686;
  llvm::Value *v687;
  BOOL **v688;
  llvm::LLVMContext *v689;
  uint64_t v690;
  llvm::Value *v691;
  BOOL **v692;
  const char *v693;
  int v694;
  int v695;
  llvm::APFloatBase *AllOnesValue;
  uint64_t v698;
  char *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  llvm::MDNode *v703;
  uint64_t v704;
  uint64_t v705;
  _QWORD *v707;
  BOOL v708;
  BOOL v709;
  BOOL v712;
  BOOL v713;
  const char *v717;
  llvm::Value *v718;
  llvm::Type *v719;
  BOOL *UIToFP;
  llvm::Value *v721;
  llvm::Value *v722;
  llvm::Value *v723;
  llvm::Type *v724;
  BOOL v725;
  BOOL v727;
  BOOL v728;
  BOOL v729;
  BOOL v730;
  BOOL v731;
  BOOL v732;
  BOOL v733;
  BOOL v734;
  BOOL v735;
  BOOL v736;
  BOOL v737;
  BOOL v738;
  const char *v739;
  BOOL v742;
  BOOL v743;
  BOOL v744;
  BOOL v746;
  BOOL v747;
  BOOL v749;
  BOOL v750;
  BOOL v751;
  BOOL v755;
  BOOL v756;
  BOOL v757;
  BOOL v758;
  BOOL v759;
  BOOL v760;
  BOOL v761;
  BOOL v762;
  BOOL v763;
  BOOL v764;
  BOOL v765;
  BOOL v766;
  BOOL v767;
  BOOL v768;
  Value **v769;
  BOOL v770;
  BOOL v771;
  BOOL v772;
  BOOL v773;
  BOOL v774;
  Value **v775;
  BOOL v776;
  BOOL v777;
  uint64_t v778;
  llvm::Type **v779;
  llvm::LLVMContext *v780;
  llvm::Type *v781;
  llvm::Type **v782;
  uint64_t v783;
  llvm::Type *v784;
  BOOL *v785;
  uint64_t v786;
  int v787;
  uint64_t v788;
  BOOL *FPExt;
  uint64_t v790;
  mlir::BytecodeWriterConfig *v791;
  uint64_t v792;
  _QWORD *v793;
  BOOL *SIToFP;
  int v795;
  uint64_t *v796;
  uint64_t v797;
  uint64_t v798;
  mlir::BytecodeWriterConfig *v799;
  llvm::Type *v800;
  BOOL *v801;
  llvm::Type *v802;
  llvm::FixedVectorType *HalfTy;
  llvm::Type *v804;
  llvm::MDNode *v805;
  unsigned __int8 **v806;
  int v807;
  uint64_t *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  llvm::Value *v812;
  llvm::Type *v813;
  char *v814;
  llvm::Type *v815;
  llvm::Type **v816;
  llvm::Type *v817;
  llvm::Type **v818;
  unsigned __int8 **v819;
  uint64_t *v820;
  uint64_t v821;
  _QWORD *v822;
  uint64_t v823;
  _QWORD *v824;
  int v825;
  llvm::Constant **v826;
  unsigned __int8 **v827;
  llvm::Value *v828;
  unsigned __int8 **v829;
  llvm::Value *v830;
  unsigned __int8 **v831;
  char *v832;
  unsigned int **v833;
  unsigned int *v834;
  llvm::Type **v835;
  llvm::Type *v836;
  llvm::Type **v837;
  unsigned __int8 **v838;
  uint64_t *v839;
  uint64_t v840;
  size_t v841;
  char *v842;
  size_t v843;
  BOOL v846;
  BOOL v848;
  BOOL v849;
  BOOL v850;
  BOOL v851;
  BOOL v852;
  BOOL v853;
  BOOL v854;
  BOOL v855;
  BOOL v856;
  BOOL v857;
  BOOL v858;
  char v859;
  char v860;
  char v861;
  uint64_t v862;
  char v863;
  char v864;
  BOOL v865;
  char v866;
  char v867;
  BOOL v868;
  BOOL v869;
  BOOL v870;
  char *v873;
  uint64_t v874;
  _QWORD *v875;
  llvm::LLVMContext *v876;
  unsigned int v877;
  BOOL v878;
  BOOL v884;
  BOOL v885;
  BOOL v887;
  BOOL v888;
  BOOL v889;
  llvm::Type *v890;
  const char *v891;
  llvm::Type *v892;
  llvm::PointerType **v893;
  llvm::Type *v894;
  llvm::Value *v895;
  llvm::Type *v896;
  llvm::Instruction *v897;
  llvm::Value *PointerCast;
  unsigned __int8 **v899;
  uint64_t v900;
  uint64_t v903;
  _QWORD *v904;
  unsigned int v905;
  llvm::Type *v906;
  const char *v907;
  unint64_t v908;
  unsigned int v909;
  unsigned int v910;
  unsigned int v911;
  unsigned int v912;
  unsigned int v913;
  unsigned int v914;
  int v915;
  int v916;
  int v917;
  unsigned int v918;
  void **v921;
  uint64_t *v922;
  uint64_t v923;
  llvm::LLVMContext *v924;
  uint64_t v925;
  uint64_t v926;
  BOOL v927;
  BOOL v928;
  BOOL v929;
  BOOL v930;
  llvm::LLVMContext *v931;
  uint64_t *v932;
  uint64_t v933;
  llvm::MDNode *v934;
  llvm::Constant **v935;
  unsigned __int8 **Neg;
  Type *v937;
  uint64_t v938;
  unsigned __int8 **ICmp;
  llvm::Type **v940;
  Value *v941;
  uint64_t *v942;
  uint64_t v943;
  uint64_t v944;
  char *v945;
  llvm::MDNode *v946;
  BOOL v949;
  Type ***v953;
  unsigned int v954;
  unint64_t v955;
  llvm::MDNode *v956;
  uint64_t n;
  char v958;
  char v959;
  int v961;
  char v963;
  BOOL v964;
  int v965;
  char v966;
  int v967;
  char *v968;
  uint64_t v969;
  _QWORD *v970;
  BOOL v972;
  BOOL v973;
  BOOL v974;
  BOOL v975;
  BOOL v976;
  BOOL v977;
  BOOL v978;
  BOOL v979;
  BOOL v980;
  BOOL v981;
  BOOL v982;
  BOOL v983;
  uint64_t v985;
  unint64_t *v986;
  unint64_t v987;
  unint64_t v988;
  llvm::Type *v989;
  char *v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t *v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  _QWORD *v997;
  unsigned int v998;
  unint64_t v999;
  llvm::MDNode *v1000;
  uint64_t v1001;
  char *v1002;
  uint64_t v1003;
  _QWORD *v1004;
  unsigned int v1005;
  llvm::LLVMContext *v1006;
  int v1007;
  int v1008;
  uint64_t v1009;
  int v1010;
  char *v1011;
  llvm::Type ***v1012;
  uint64_t v1013;
  BOOL v1014;
  __int16 v1015;
  char *v1016;
  char *v1017;
  BOOL v1018;
  __int16 v1019;
  llvm::CallBase *v1020;
  unint64_t v1021;
  llvm::Type **v1022;
  llvm::Type *v1023;
  uint64_t v1024;
  int v1025;
  BOOL v1028;
  BOOL v1029;
  BOOL v1030;
  BOOL v1031;
  BOOL v1032;
  BOOL v1033;
  BOOL v1034;
  BOOL v1035;
  BOOL v1036;
  BOOL v1037;
  llvm::PoisonValue **v1038;
  llvm::Type *v1039;
  llvm::ScalableVectorType *v1040;
  llvm::Constant *v1041;
  Type *v1042;
  llvm::ConstantDataSequential *v1043;
  char *v1044;
  mlir::BytecodeWriterConfig *v1045;
  int v1046;
  uint64_t *v1047;
  uint64_t v1048;
  char *v1049;
  uint64_t v1050;
  _QWORD *v1051;
  int8x16_t v1052;
  int8x16_t v1053;
  int32x4_t v1054;
  int32x4_t *v1055;
  int32x4_t v1056;
  int8x16_t v1057;
  uint32x4_t v1058;
  int32x4_t v1059;
  uint64_t v1060;
  int32x4_t v1061;
  uint64_t v1062;
  unsigned int *v1063;
  uint64_t v1064;
  char *v1065;
  uint64_t v1066;
  BOOL *v1067;
  llvm::Type *v1068;
  uint64_t *v1069;
  llvm::PoisonValue **v1070;
  uint64_t v1071;
  _QWORD *v1072;
  uint64_t v1073;
  unsigned int v1074;
  unint64_t v1075;
  uint64_t v1076;
  llvm::MDNode *v1077;
  uint64_t k;
  BOOL v1079;
  BOOL v1080;
  BOOL v1081;
  BOOL v1082;
  BOOL v1085;
  BOOL v1086;
  BOOL v1087;
  BOOL v1088;
  BOOL v1092;
  BOOL v1093;
  BOOL v1094;
  uint64_t *v1095;
  uint64_t v1096;
  uint64_t v1097;
  _QWORD *v1098;
  unsigned int v1099;
  unint64_t v1100;
  llvm::MDNode *v1101;
  uint64_t v1102;
  uint64_t *v1103;
  uint64_t v1104;
  _QWORD *v1105;
  _QWORD *v1106;
  unint64_t v1107;
  unsigned int v1108;
  unsigned int v1109;
  uint64_t v1110;
  uint64_t *v1111;
  uint64_t v1112;
  uint64_t v1113;
  int32x4_t v1114;
  int32x4_t *v1115;
  int32x4_t v1116;
  int32x4_t v1117;
  uint64_t v1118;
  int v1119;
  unsigned int v1120;
  int32x4_t v1121;
  unsigned int v1122;
  unsigned int v1123;
  int32x4_t *v1124;
  BOOL *v1125;
  int32x4_t v1126;
  llvm::MDNode *v1127;
  uint64_t m;
  int32x4_t v1129;
  int32x4_t *v1130;
  int32x4_t v1131;
  uint64_t v1132;
  int v1133;
  int v1134;
  uint64_t v1135;
  char *v1136;
  unsigned __int8 *v1137;
  llvm::Type **v1138;
  Value *v1139;
  llvm::Type **v1140;
  llvm::LLVMContext *v1141;
  llvm::Type *v1142;
  char *v1143;
  BOOL v1144;
  char v1145;
  char v1146;
  int32x4_t v1149;
  int32x4_t v1150;
  int32x4_t v1151;
  int32x4_t *v1152;
  int32x4_t v1153;
  uint64_t v1154;
  _DWORD *v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  int32x4_t v1159;
  int32x4_t v1160;
  int32x4_t v1161;
  int32x4_t v1162;
  int32x4_t v1163;
  uint64_t v1164;
  int32x4_t *v1165;
  llvm::LLVMContext *v1166;
  llvm::MDNode *v1167;
  unint64_t v1168;
  unsigned int v1169;
  uint64_t v1170;
  uint64_t v1171;
  char v1172;
  BOOL v1173;
  BOOL v1174;
  BOOL v1175;
  BOOL v1176;
  BOOL v1177;
  BOOL v1178;
  BOOL v1179;
  BOOL v1180;
  BOOL v1181;
  BOOL v1182;
  BOOL v1183;
  BOOL v1184;
  BOOL v1185;
  BOOL v1186;
  BOOL v1187;
  BOOL v1188;
  BOOL v1189;
  BOOL v1194;
  BOOL v1195;
  BOOL v1196;
  BOOL v1199;
  BOOL v1200;
  BOOL v1201;
  BOOL v1202;
  BOOL v1203;
  BOOL v1204;
  BOOL v1205;
  BOOL v1206;
  BOOL v1207;
  BOOL v1208;
  BOOL v1209;
  BOOL v1210;
  Value **v1212;
  BOOL v1213;
  BOOL v1214;
  BOOL v1215;
  BOOL v1216;
  Value **v1217;
  BOOL v1218;
  BOOL v1220;
  BOOL v1221;
  BOOL v1222;
  BOOL v1223;
  Value **v1225;
  BOOL v1226;
  BOOL v1227;
  Value **v1228;
  BOOL v1229;
  BOOL v1230;
  BOOL v1231;
  BOOL v1232;
  unsigned __int8 *v1233;
  BOOL v1234;
  BOOL v1235;
  BOOL v1236;
  BOOL v1237;
  Value **v1238;
  BOOL v1239;
  BOOL v1241;
  BOOL v1243;
  Value **v1245;
  BOOL v1246;
  BOOL v1248;
  BOOL v1250;
  BOOL v1252;
  BOOL v1253;
  Value **v1254;
  BOOL v1255;
  BOOL v1256;
  BOOL v1257;
  BOOL v1258;
  BOOL v1259;
  BOOL v1260;
  BOOL v1261;
  BOOL v1262;
  BOOL v1264;
  uint64_t *v1266;
  uint64_t v1267;
  uint64_t v1268;
  unint64_t *v1269;
  unint64_t v1270;
  unsigned int v1271;
  llvm::MDNode *v1272;
  unint64_t v1273;
  int8x16_t v1274;
  _DWORD *v1275;
  uint32x4_t v1276;
  int32x4_t v1277;
  int32x4_t *v1278;
  int8x16_t v1279;
  int8x16_t v1280;
  int32x4_t v1281;
  int8x16_t v1282;
  int32x4_t v1283;
  uint64_t v1284;
  int8x16_t v1285;
  int v1286;
  int32x4_t v1287;
  int32x4_t v1288;
  int32x4_t v1289;
  int32x4_t *v1290;
  int32x4_t v1291;
  uint64_t v1292;
  int v1293;
  _DWORD *v1294;
  uint64_t v1295;
  unsigned int v1296;
  uint64_t v1297;
  int32x4_t v1298;
  int32x4_t v1299;
  int32x4_t *v1300;
  int32x4_t v1301;
  int32x4_t v1302;
  uint64_t v1303;
  _DWORD *v1304;
  int v1305;
  uint64_t v1306;
  uint64_t *v1307;
  uint64_t v1308;
  unint64_t *v1309;
  unint64_t v1310;
  unsigned int v1311;
  unint64_t v1312;
  int8x16_t v1313;
  int8x16_t v1314;
  int8x16_t v1315;
  int8x16_t v1316;
  char *v1317;
  int8x16_t v1318;
  char *v1319;
  llvm::MDNode *v1320;
  uint64_t *v1323;
  uint64_t v1324;
  _QWORD *v1325;
  unsigned int v1326;
  unint64_t v1327;
  unsigned int v1328;
  unsigned int v1329;
  unsigned int v1330;
  unsigned int v1331;
  uint64_t v1332;
  int32x4_t v1333;
  uint32x4_t v1334;
  int8x16_t v1335;
  int8x16_t v1336;
  int8x16_t *v1337;
  int32x4_t v1338;
  int8x16_t v1339;
  int32x4_t v1340;
  int32x4_t v1341;
  uint64_t v1342;
  int32x4_t v1343;
  char *v1344;
  uint64_t v1347;
  unint64_t v1348;
  unsigned int v1349;
  _BOOL4 v1350;
  BOOL v1353;
  BOOL v1357;
  uint64_t *v1359;
  uint64_t v1360;
  uint64_t v1361;
  unint64_t v1362;
  unsigned int v1363;
  llvm::MDNode *v1364;
  uint64_t v1365;
  uint64_t v1366;
  int8x16_t v1367;
  int32x4_t v1368;
  int8x16_t v1369;
  int32x4_t v1370;
  unsigned int v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint32x4_t v1374;
  uint64_t v1375;
  int32x4_t v1376;
  int32x4_t v1377;
  int32x4_t *v1378;
  uint64_t *v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  _QWORD *v1383;
  unsigned int v1384;
  unint64_t v1385;
  unsigned int v1386;
  unsigned int v1387;
  unsigned int v1388;
  llvm::MDNode *v1389;
  unsigned int v1390;
  uint64_t j;
  unint64_t v1392;
  unint64_t v1393;
  int v1394;
  char *v1395;
  Type *v1396;
  Type *v1397;
  uint64_t v1398;
  Value *v1399;
  unsigned __int8 *v1400;
  int v1401;
  llvm::MDNode *v1402;
  int v1403;
  uint64_t v1404;
  unsigned int v1405;
  int v1406;
  BOOL *ShuffleVector;
  char *v1408;
  unsigned __int8 *v1409;
  Value *v1410;
  uint64_t *v1411;
  unint64_t v1412;
  unsigned int v1413;
  uint64_t v1414;
  uint64_t v1415;
  int8x16_t v1416;
  int32x4_t v1417;
  int8x16_t v1418;
  int32x4_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint32x4_t v1422;
  uint64_t v1423;
  int32x4_t v1424;
  int32x4_t v1425;
  int32x4_t *v1426;
  char *v1427;
  char *v1428;
  llvm::Type *v1429;
  llvm::Type *v1430;
  llvm::Type *v1431;
  llvm::Type **v1432;
  llvm::Type **v1433;
  llvm::Type **v1434;
  llvm::Type **v1435;
  BOOL *Xor;
  int32x4_t v1437;
  int32x4_t v1438;
  int8x16_t v1439;
  uint32x4_t v1440;
  int32x4_t v1441;
  int8x16_t v1442;
  int8x16_t v1443;
  int32x4_t v1444;
  uint64_t v1445;
  llvm::MDNode *v1446;
  int32x4_t v1447;
  int v1448;
  char *v1449;
  llvm::Type *v1450;
  llvm::Type *v1451;
  llvm::Type **v1452;
  llvm::Constant **v1453;
  BOOL *v1454;
  llvm::Type **v1455;
  llvm::Type **v1456;
  llvm::Type **v1457;
  llvm::Type *v1458;
  llvm::Type *v1459;
  llvm::Type **v1460;
  llvm::Type **v1461;
  llvm::Type **v1462;
  llvm::Type **v1463;
  char *v1470;
  llvm::Value *v1471;
  llvm::Value *v1472;
  BOOL *Add;
  llvm::Type *v1474;
  llvm::Type *v1475;
  llvm::Type **v1476;
  llvm::Type **v1477;
  llvm::Type **v1478;
  llvm::Type **v1479;
  char *v1480;
  BOOL v1491;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  char *v1496;
  llvm::Value *v1497;
  llvm::Value *v1498;
  char *v1499;
  llvm::Value *v1500;
  llvm::Value *v1501;
  int v1505;
  int v1506;
  _BOOL4 v1507;
  char *v1508;
  int8x16_t *v1509;
  llvm::Value *v1510;
  BOOL *FSub;
  char *v1512;
  int8x16_t *v1513;
  llvm::Value *v1514;
  uint64_t *v1515;
  uint64_t v1516;
  llvm::LLVMContext *v1517;
  uint64_t v1518;
  uint64_t v1519;
  int v1520;
  int v1521;
  _BOOL4 v1522;
  int v1523;
  uint64_t v1524;
  uint64_t v1525;
  int v1526;
  int v1527;
  char *v1528;
  llvm::Value *FNeg;
  llvm::Value *v1530;
  llvm::ExtractElementInst *v1531;
  llvm::ExtractElementInst *v1532;
  char *v1533;
  int8x16_t *v1534;
  llvm::Value *v1535;
  BOOL v1536;
  int v1537;
  int v1538;
  int v1539;
  _BOOL4 v1540;
  char *v1541;
  int8x16_t *v1542;
  llvm::Value *v1543;
  BOOL *v1544;
  _BOOL4 v1545;
  uint64_t Int1Ty;
  uint64_t *v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  llvm::ValueAsMetadata *v1551;
  llvm::Value *v1552;
  llvm::MDNode *v1553;
  llvm::Type **v1554;
  llvm::Type *v1555;
  llvm::Type **v1556;
  llvm::Type *v1557;
  unint64_t PrimitiveSizeInBits;
  BOOL *v1559;
  llvm::Value *v1560;
  _BOOL4 v1561;
  BOOL v1562;
  BOOL v1563;
  BOOL v1564;
  BOOL v1565;
  BOOL v1566;
  BOOL v1567;
  int v1568;
  BOOL v1569;
  int v1570;
  unint64_t v1571;
  Value **v1572;
  int v1573;
  char *v1574;
  unsigned __int8 **v1575;
  unsigned __int8 **v1576;
  unsigned __int8 **v1577;
  uint64_t v1578;
  int v1579;
  llvm::MDNode **v1580;
  llvm::ExtractElementInst *v1581;
  llvm::ExtractElementInst *v1582;
  uint64_t v1583;
  _QWORD *v1584;
  uint64_t *v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  int v1589;
  uint64_t *v1590;
  uint64_t v1591;
  uint64_t v1592;
  int v1593;
  int v1594;
  int v1595;
  uint64_t v1596;
  uint64_t v1597;
  _QWORD *v1598;
  char *v1599;
  unsigned __int8 *v1600;
  Value *v1601;
  _BOOL4 v1602;
  char *v1603;
  llvm::Value *v1604;
  llvm::Value *v1605;
  llvm::Value *v1606;
  void **v1607;
  uint64_t *v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  int v1612;
  BOOL v1613;
  BOOL v1615;
  BOOL v1617;
  BOOL v1619;
  int v1621;
  BOOL v1622;
  int v1623;
  unint64_t v1624;
  Value **v1625;
  int v1626;
  char *v1627;
  unsigned __int8 **v1628;
  unsigned __int8 **v1629;
  unsigned __int8 **v1630;
  uint64_t v1631;
  int v1632;
  uint64_t v1633;
  _QWORD *v1634;
  uint64_t *v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  int v1641;
  int v1642;
  uint64_t v1643;
  int v1644;
  int v1645;
  Type *v1646;
  llvm::Value *v1647;
  llvm::Value *v1648;
  BOOL *v1649;
  uint64_t v1650;
  int v1651;
  int v1652;
  BOOL *v1653;
  Type *v1654;
  llvm::ExtractElementInst *v1655;
  Value *v1656;
  llvm::Value *v1657;
  _QWORD *v1658;
  BOOL v1659;
  BOOL v1660;
  BOOL v1661;
  BOOL v1662;
  BOOL v1663;
  BOOL v1664;
  int v1665;
  BOOL v1666;
  unint64_t v1667;
  int v1668;
  int v1669;
  _QWORD *v1670;
  llvm::Value *v1671;
  uint64_t v1672;
  uint64_t v1673;
  Type *v1674;
  mlir::BytecodeWriterConfig *v1675;
  Value *v1676;
  int v1677;
  uint64_t v1678;
  uint64_t v1679;
  char *v1680;
  int v1681;
  int v1682;
  int v1683;
  int v1684;
  unint64_t v1685;
  char *v1686;
  uint64_t *v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  const char *v1691;
  int v1692;
  int v1693;
  int v1694;
  int v1695;
  const char *v1696;
  int v1697;
  int v1698;
  int v1699;
  _BOOL4 v1700;
  Type *v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  llvm::MDNode *v1706;
  uint64_t v1707;
  int8x16_t v1708;
  int32x4_t v1709;
  int32x4_t *v1710;
  int32x4_t v1711;
  int8x16_t v1712;
  int32x4_t v1713;
  uint64_t v1714;
  int32x4_t v1715;
  mlir::BytecodeWriterConfig *v1716;
  Value *v1717;
  uint64_t v1718;
  uint64_t v1719;
  char *v1720;
  int v1721;
  uint64_t v1722;
  int v1723;
  const char *v1724;
  int v1725;
  int v1726;
  int v1727;
  int v1728;
  BOOL v1729;
  _QWORD *v1731;
  llvm::Value *v1732;
  uint64_t v1733;
  uint64_t v1734;
  const char *v1735;
  int v1736;
  int v1737;
  int v1738;
  int v1739;
  llvm::Type *v1740;
  unint64_t v1741;
  llvm::MDNode *v1742;
  uint64_t v1743;
  llvm::PoisonValue *v1744;
  llvm::Type *v1745;
  uint64_t v1746;
  uint64_t v1747;
  unsigned __int8 **AlignedLoad;
  llvm::LLVMContext *v1749;
  llvm::ConstantInt *v1750;
  llvm::Type *v1751;
  BOOL *v1752;
  llvm::InsertElementInst *InsertElement;
  uint64_t i;
  llvm::Value *v1755;
  uint64_t v1756;
  int v1757;
  const char *v1758;
  int v1759;
  int32x4_t v1760;
  int32x4_t *v1761;
  int32x4_t v1762;
  int32x4_t v1763;
  uint64_t v1764;
  llvm::PoisonValue **v1765;
  unsigned __int8 **v1766;
  BOOL *ZExt;
  mlir::BytecodeWriterConfig *v1768;
  char *v1769;
  _QWORD *v1771;
  uint64_t *v1772;
  uint64_t v1773;
  uint64_t v1774;
  BOOL *v1775;
  llvm::Type *v1776;
  mlir::BytecodeWriterConfig *v1777;
  uint64_t v1778;
  uint64_t v1779;
  int v1781;
  int v1782;
  int v1783;
  BOOL v1784;
  _BOOL4 v1785;
  BOOL v1786;
  int v1787;
  _QWORD *v1788;
  uint64_t *v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t *v1792;
  unsigned __int8 **v1793;
  llvm::Type **v1794;
  llvm::Type *v1795;
  llvm::Type **v1796;
  unsigned __int8 **v1797;
  _BOOL4 v1798;
  _QWORD *v1799;
  uint64_t *v1800;
  uint64_t v1801;
  uint64_t v1802;
  BOOL *v1803;
  llvm::Type *v1804;
  uint64_t v1805;
  BOOL v1806;
  char v1807;
  BOOL v1808;
  char v1809;
  char v1810;
  char v1811;
  char v1812;
  char v1813;
  char v1814;
  char v1815;
  char v1816;
  char v1817;
  BOOL v1818;
  char v1819;
  char v1820;
  BOOL v1821;
  BOOL v1822;
  BOOL v1823;
  _BOOL4 v1824;
  BOOL v1825;
  unsigned int v1826;
  unsigned int v1827;
  unsigned int v1828;
  _BOOL4 v1829;
  BOOL v1830;
  char v1831;
  unsigned int v1832;
  Value **v1833;
  size_t v1834;
  llvm::Type **v1835;
  llvm::CallBase *v1836;
  mlir::BytecodeWriterConfig *v1837;
  void *v1838;
  uint64_t v1839;
  llvm::Value *v1840[2];
  __int16 v1841;
  llvm::MDNode *__src;
  uint64_t ParamAttrs;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  llvm::Type *v1847;
  uint64_t v1848;
  _BYTE v1849[32];
  uint64_t v1850;
  char *v1851;
  llvm::ConstantInt *v1852;
  void **v1853;
  void **v1854;
  uint64_t v1855;
  int v1856;
  __int16 v1857;
  char v1858;
  uint64_t v1859;
  uint64_t v1860;
  void *v1861;
  void *v1862;
  BOOL *v1863[2];
  __int128 v1864;
  __int128 v1865;
  __int16 v1866;
  uint64_t v1867;

  v1867 = *MEMORY[0x1E0C80C00];
  v1836 = a2;
  v1837 = this;
  v3 = *((_QWORD *)this - 4);
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 0;
  else
    v4 = 0;
  if (v4)
  {
    DesiredBytecodeVersion = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
    v1847 = (llvm::Type *)v1849;
    v1848 = 0x200000000;
    v1852 = DesiredBytecodeVersion;
    v1853 = &v1861;
    v1854 = &v1862;
    v1855 = 0;
    v1856 = 0;
    v1857 = 512;
    v1858 = 7;
    v1859 = 0;
    v1860 = 0;
    v1861 = &unk_1E0E204A0;
    v1862 = &unk_1E0E22D50;
    v10 = (llvm *)(*((_QWORD *)this + 5) + 48);
    v1850 = *((_QWORD *)this + 5);
    v1851 = (char *)this + 24;
    if (v10 != (llvm *)((char *)this + 24))
    {
      v11 = *(llvm::MDNode **)llvm::Instruction::getStableDebugLoc(this);
      __src = v11;
      if (v11)
      {
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v11, 1);
        llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((llvm::IRBuilderBase *)&v1847, 0, __src);
        v6 = __src;
        if (__src)
          llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
      }
      else
      {
        llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((llvm::IRBuilderBase *)&v1847, 0, 0);
        v6 = 0;
      }
    }
    v12 = v1836;
    if (v1836)
    {
      v1833 = (Value **)&v1837;
      v1834 = (size_t)&v1836;
      v1835 = &v1847;
      v13 = *((_DWORD *)v1836 + 9);
      if (v13 <= 9848)
      {
        if (v13 > 1018)
        {
          if (v13 > 3102)
          {
            if ((v13 - 3103) <= 9 && ((1 << (v13 - 31)) & 0x3F1) != 0)
            {
              v14 = v1837;
              v15 = *((_DWORD *)v1837 + 5) & 0x7FFFFFF;
              v16 = (uint64_t *)((char *)v1837 - 32 * v15);
              v17 = llvm::CallBase::arg_end(v1837);
              __src = (llvm::MDNode *)&v1844;
              ParamAttrs = 0x400000000;
              v18 = v17 - (_QWORD)v16;
              if ((unint64_t)(v17 - (_QWORD)v16) < 0x81)
              {
                v19 = 0;
                v20 = 0;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v1844, v18 >> 5, 8);
                v19 = ParamAttrs;
                v20 = ParamAttrs;
              }
              if (v16 != (uint64_t *)v17)
              {
                v122 = (_QWORD *)((char *)__src + 8 * v19);
                v123 = 32 * v15;
                v124 = 32 * v15 + v17 - (_QWORD)v14 - 32;
                if (v124 >= 0x3C0)
                {
                  v125 = v124 >> 5;
                  if (v122 >= (_QWORD *)((char *)v14 + (v124 & 0xFFFFFFFFFFFFFFE0 | 8) - v123)
                    || v16 >= (uint64_t *)__src + v19 + v125 + 1)
                  {
                    v126 = (v125 + 1) & 3;
                    if (!v126)
                      v126 = 4;
                    v127 = v125 + 1 - v126;
                    v122 += v127;
                    v16 += 4 * v127;
                    v128 = (const double *)((char *)v14 - v123 + 64);
                    v129 = (unsigned __int128 *)((char *)__src + 8 * v19 + 16);
                    v130 = ~v125 + v126;
                    do
                    {
                      v131 = v128 - 8;
                      v132 = (unsigned __int128)vld4q_f64(v131);
                      v133 = (unsigned __int128)vld4q_f64(v128);
                      *(v129 - 1) = v132;
                      *v129 = v133;
                      v128 += 16;
                      v129 += 2;
                      v130 += 4;
                    }
                    while (v130);
                  }
                }
                do
                {
                  v134 = *v16;
                  v16 += 4;
                  *v122++ = v134;
                }
                while (v16 != (uint64_t *)v17);
              }
              v135 = v20 + ((unint64_t)v18 >> 5);
              LODWORD(ParamAttrs) = v20 + ((unint64_t)v18 >> 5);
              v136 = v1836;
              if (v1836)
              {
LABEL_158:
                v137 = *((_QWORD *)v136 + 3);
                goto LABEL_272;
              }
LABEL_271:
              v137 = 0;
LABEL_272:
              v1866 = 257;
              v172 = llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v137, (uint64_t)v136, (uint64_t *)__src, v135, (uint64_t)&v1864, 0);
              v173 = __src;
              if (__src == (llvm::MDNode *)&v1844)
              {
LABEL_883:
                llvm::Value::takeName((llvm::Value *)v172, v1837);
                v289 = (Value *)v1837;
                v290 = (llvm::Value *)v172;
                goto LABEL_1828;
              }
LABEL_273:
              free(v173);
              goto LABEL_883;
            }
            if ((v13 - 9702) >= 4)
              goto LABEL_423;
            goto LABEL_278;
          }
          if ((v13 - 2981) >= 4)
          {
            if ((v13 - 1019) <= 4 && ((1 << (v13 + 5)) & 0x15) != 0)
            {
              v138 = **(llvm::Type ***)(v3 + 40);
              v139 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
              v140 = llvm::CallBase::arg_end(v1837);
              *(_QWORD *)&v1864 = v139;
              *((_QWORD *)&v1864 + 1) = v140;
              llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *>(&__src, (uint64_t)&v1864);
              Int32Ty = llvm::Type::getInt32Ty(v138, v141);
              v143 = *((_QWORD *)__src + 3);
              v144 = (uint64_t *)(v143 + 24);
              if (*(_DWORD *)(v143 + 32) >= 0x41u)
                v144 = (uint64_t *)*v144;
              v145 = llvm::ConstantInt::get(Int32Ty, *v144, 0);
              v146 = (uint64_t *)__src;
              *((_QWORD *)__src + 3) = v145;
              if (v1836)
                v147 = *((_QWORD *)v1836 + 3);
              else
                v147 = 0;
              v1866 = 257;
              v172 = llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v147, (uint64_t)v1836, v146, ParamAttrs, (uint64_t)&v1864, 0);
              v173 = __src;
              if (__src == (llvm::MDNode *)&v1844)
                goto LABEL_883;
              goto LABEL_273;
            }
            v47 = v13 - 1267;
            if (v47 <= 4 && ((1 << v47) & 0x15) != 0)
            {
              Name = llvm::Value::getName((llvm::Value *)v3);
              v50 = 5;
              if (v49 < 5)
                v50 = v49;
              if (v49 - v50 >= 0xF)
              {
                v281 = &Name[v50];
                if (*(_QWORD *)v281 == 0x2E34366863726161 && *(_QWORD *)(v281 + 7) == 0x32646C2E6576732ELL)
                {
                  v51 = 2;
                }
                else if (*(_QWORD *)v281 == 0x2E34366863726161 && *(_QWORD *)(v281 + 7) == 0x33646C2E6576732ELL)
                {
                  v51 = 3;
                }
                else
                {
                  v284 = *(_QWORD *)v281;
                  v285 = *(_QWORD *)(v281 + 7);
                  v287 = v284 == 0x2E34366863726161 && v285 == 0x34646C2E6576732ELL;
                  v51 = (4 * v287);
                }
              }
              else
              {
                v51 = 0;
              }
              if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v3 + 24) + 16) + 8) == 19)
                v408 = **(llvm::PoisonValue ***)(*(_QWORD *)(v3 + 24) + 16);
              else
                v408 = 0;
              v409 = *((_DWORD *)v408 + 8);
              v410 = (mlir::BytecodeWriterConfig *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
              v411 = llvm::CallBase::arg_end(v1837);
              __src = v410;
              ParamAttrs = v411;
              llvm::SmallVector<llvm::Value *,2u>::SmallVector<llvm::Use *>(&v1838, (uint64_t)&__src);
              if (v1836)
                v412 = *((_QWORD *)v1836 + 3);
              else
                v412 = 0;
              LOWORD(v1846) = 257;
              v413 = (uint64_t *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v412, (uint64_t)v1836, (uint64_t *)v1838, v1839, (uint64_t)&__src, 0);
              Intrinsic = llvm::PoisonValue::get(v408, v414);
              v1832 = 0;
              if ((_DWORD)v51)
              {
                v417 = v409 / v51;
                do
                {
                  Int64Ty = llvm::Type::getInt64Ty(DesiredBytecodeVersion, v415);
                  v419 = llvm::ConstantInt::get(Int64Ty, v1832 * v417, 0);
                  v1866 = 257;
                  v420 = (unsigned __int8 **)(*((uint64_t (**)(void **, uint64_t *, unsigned int *, uint64_t))*v1853
                                              + 10))(v1853, v413, &v1832, 1);
                  if (!v420)
                  {
                    v421 = v417;
                    v422 = v408;
                    v423 = v51;
                    v424 = DesiredBytecodeVersion;
                    LOWORD(v1846) = 257;
                    v420 = (unsigned __int8 **)llvm::ExtractValueInst::Create(v413, &v1832, 1, (const char **)&__src, 0);
                    (*((void (**)(void **, unsigned __int8 **, __int128 *, uint64_t, char *))*v1854 + 2))(v1854, v420, &v1864, v1850, v1851);
                    if ((_DWORD)v1848)
                    {
                      v425 = v1847;
                      v426 = (llvm::Type *)((char *)v1847 + 16 * v1848);
                      do
                      {
                        llvm::Instruction::setMetadata(v420, *(_DWORD *)v425, *((llvm::MDNode **)v425 + 1));
                        v425 = (llvm::Type *)((char *)v425 + 16);
                      }
                      while (v425 != v426);
                    }
                    DesiredBytecodeVersion = v424;
                    v51 = v423;
                    v408 = v422;
                    v417 = v421;
                  }
                  LOWORD(v1846) = 257;
                  v1863[0] = (BOOL *)v408;
                  v1863[1] = (BOOL *)*v420;
                  *(_QWORD *)&v1864 = Intrinsic;
                  *((_QWORD *)&v1864 + 1) = v420;
                  *(_QWORD *)&v1865 = v419;
                  Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t)&v1847, 346, v1863, 2, (uint64_t *)&v1864, 3, 0, (uint64_t)&__src);
                  ++v1832;
                }
                while (v1832 < v51);
              }
              if (*(_BYTE *)(Intrinsic + 16) == 84)
                v172 = Intrinsic;
              else
                v172 = 0;
              if (v1838 != v1840)
                free(v1838);
              goto LABEL_883;
            }
            goto LABEL_423;
          }
LABEL_139:
          *(_QWORD *)&v1864 = &v1865;
          *((_QWORD *)&v1864 + 1) = 0x300000000;
          __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(*((llvm::Type ***)v1837
                                                                     - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4]);
          ParamAttrs = (uint64_t)v108;
          v109 = llvm::TypeSize::operator unsigned long long(&__src, v108);
          BFloatTy = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(DesiredBytecodeVersion, v110);
          llvm::FixedVectorType::get(BFloatTy, (llvm::Type *)(v109 >> 4));
          v113 = v112;
          v114 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
          llvm::CallBase::arg_end(v1837);
          v115 = *v114;
          v116 = DWORD2(v1864);
          if (DWORD2(v1864) >= HIDWORD(v1864))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1864, &v1865, DWORD2(v1864) + 1, 8);
            v116 = DWORD2(v1864);
          }
          *(_QWORD *)(v1864 + 8 * v116) = v115;
          ++DWORD2(v1864);
          v117 = (unsigned __int8 **)v114[4];
          v1841 = 257;
          if (*v117 == v113)
          {
            v118 = v117;
          }
          else
          {
            v118 = (unsigned __int8 **)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 **, unsigned __int8 *))*v1853
                                        + 15))(v1853, 49, v117, v113);
            if (!v118)
            {
              LOWORD(v1846) = 257;
              llvm::CastInst::Create(49);
              v118 = v119;
              (*((void (**)(void **, unsigned __int8 **, void **, uint64_t, char *))*v1854 + 2))(v1854, v119, &v1838, v1850, v1851);
              if ((_DWORD)v1848)
              {
                v120 = v1847;
                v121 = (llvm::Type *)((char *)v1847 + 16 * v1848);
                do
                {
                  llvm::Instruction::setMetadata(v118, *(_DWORD *)v120, *((llvm::MDNode **)v120 + 1));
                  v120 = (llvm::Type *)((char *)v120 + 16);
                }
                while (v120 != v121);
              }
            }
          }
          v163 = DWORD2(v1864);
          if (DWORD2(v1864) >= HIDWORD(v1864))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1864, &v1865, DWORD2(v1864) + 1, 8);
            v163 = DWORD2(v1864);
          }
          *(_QWORD *)(v1864 + 8 * v163) = v118;
          ++DWORD2(v1864);
          v164 = (unsigned __int8 **)v114[8];
          v1841 = 257;
          if (*v164 == v113)
          {
            v165 = v164;
          }
          else
          {
            v165 = (unsigned __int8 **)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 **, unsigned __int8 *))*v1853
                                        + 15))(v1853, 49, v164, v113);
            if (!v165)
            {
              LOWORD(v1846) = 257;
              llvm::CastInst::Create(49);
              v165 = v166;
              (*((void (**)(void **, unsigned __int8 **, void **, uint64_t, char *))*v1854 + 2))(v1854, v166, &v1838, v1850, v1851);
              if ((_DWORD)v1848)
              {
                v167 = v1847;
                v168 = (llvm::Type *)((char *)v1847 + 16 * v1848);
                do
                {
                  llvm::Instruction::setMetadata(v165, *(_DWORD *)v167, *((llvm::MDNode **)v167 + 1));
                  v167 = (llvm::Type *)((char *)v167 + 16);
                }
                while (v167 != v168);
              }
            }
          }
          v169 = DWORD2(v1864);
          if (DWORD2(v1864) >= HIDWORD(v1864))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1864, &v1865, DWORD2(v1864) + 1, 8);
            v169 = DWORD2(v1864);
          }
          *(_QWORD *)(v1864 + 8 * v169) = v165;
          v170 = ++DWORD2(v1864);
          if (v1836)
            v171 = *((_QWORD *)v1836 + 3);
          else
            v171 = 0;
          LOWORD(v1846) = 257;
          v172 = llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v171, (uint64_t)v1836, (uint64_t *)v1864, v170, (uint64_t)&__src, 0);
          v173 = (llvm::MDNode *)v1864;
          if ((__int128 *)v1864 == &v1865)
            goto LABEL_883;
          goto LABEL_273;
        }
        if (v13 <= 259)
        {
          if (v13 <= 216)
          {
            switch(v13)
            {
              case 12:
              case 22:
              case 59:
                v39 = *((_QWORD *)v1836 + 3);
                v40 = *((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                goto LABEL_291;
              case 37:
                v370 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                v371 = llvm::CallBase::arg_end(v1837);
                *(_QWORD *)&v1864 = v370;
                *((_QWORD *)&v1864 + 1) = v371;
                llvm::SmallVector<llvm::Value *,3u>::SmallVector<llvm::Use *>(&__src, (uint64_t)&v1864);
                v372 = (llvm::ConstantTokenNone *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v1837);
                v374 = llvm::ConstantTokenNone::get(v372, v373);
                llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&__src, (uint64_t)v374);
                v80 = v1836;
                if (v1836)
                  v81 = *((_QWORD *)v1836 + 3);
                else
                  v81 = 0;
                v79 = (uint64_t *)__src;
                v188 = ParamAttrs;
                v1866 = 257;
                goto LABEL_194;
              case 58:
              case 60:
                v280 = *((_QWORD *)v1836 + 3);
                *(_QWORD *)&v1864 = *((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                *((_QWORD *)&v1864 + 1) = llvm::ConstantInt::getFalse(v1852, v6);
                LOWORD(v1846) = 257;
                v53 = (uint64_t *)&v1864;
                v39 = v280;
                v52 = v12;
                v54 = 2;
                goto LABEL_882;
              case 64:
                v375 = llvm::Value::getName((llvm::Value *)v3);
                v377 = 5;
                if (v376 < 5)
                  v377 = v376;
                if (v376 - v377 >= 8 && *(_QWORD *)&v375[v377] == 0x726464612E676264)
                {
                  v456 = *(_QWORD **)(((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8] + 24);
                  __src = (llvm::MDNode *)6;
                  v457 = llvm::DIExpression::append(v456, &__src, 1uLL);
                  v459 = v1836;
                  if (v1836)
                    v460 = *((_QWORD *)v1836 + 3);
                  else
                    v460 = 0;
                  v476 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                  *(_QWORD *)&v1864 = *v476;
                  *((_QWORD *)&v1864 + 1) = v476[4];
                  *(_QWORD *)&v1865 = llvm::MetadataAsValue::get(DesiredBytecodeVersion, v457, v458);
                  LOWORD(v1846) = 257;
                  v53 = (uint64_t *)&v1864;
                  v39 = v460;
                  v52 = v459;
                  goto LABEL_881;
                }
                v378 = v1837;
                v379 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                if (!v379 || *(unsigned __int8 *)(v379 + 16) > 0x14u)
                  goto LABEL_1830;
                if ((llvm::Constant::isZeroValue(((llvm::Constant **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4]) & 1) == 0)
                  goto LABEL_1829;
                v52 = v1836;
                if (v1836)
                  v39 = *((_QWORD *)v1836 + 3);
                else
                  v39 = 0;
                v498 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                *(_QWORD *)&v1864 = *v498;
                *((_QWORD *)&v1864 + 1) = v498[8];
                *(_QWORD *)&v1865 = v498[12];
                break;
              default:
                goto LABEL_423;
            }
LABEL_880:
            LOWORD(v1846) = 257;
            v53 = (uint64_t *)&v1864;
LABEL_881:
            v54 = 3;
            goto LABEL_882;
          }
          if (v13 == 217 || v13 == 220 || v13 == 222)
          {
            v148 = v1837;
            if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v148 - 32 * (*((_DWORD *)v148 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xA0)
            {
              v149 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
              *(_QWORD *)&v1864 = *v149;
              *((_QWORD *)&v1864 + 1) = v149[4];
              *(_QWORD *)&v1865 = v149[8];
              *((_QWORD *)&v1865 + 1) = v149[16];
              if (v1836)
                v150 = *((_QWORD *)v1836 + 3);
              else
                v150 = 0;
              LOWORD(v1846) = 257;
              v172 = llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v150, (uint64_t)v1836, (uint64_t *)&v1864, 4, (uint64_t)&__src, 0);
              v1838 = (void *)*((_QWORD *)v1837 + 9);
              FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v1838);
              RetAttrs = llvm::AttributeList::getRetAttrs((llvm::AttributeList *)&v1838);
              __src = (llvm::MDNode *)llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v1838, 0);
              ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v1838, 1);
              v1844 = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v1838, 2);
              v1845 = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v1838, 4);
              *(_QWORD *)(v172 + 72) = llvm::AttributeList::get((uint64_t *)DesiredBytecodeVersion, FnAttrs, RetAttrs, (char *)&__src, 4uLL);
              v396 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[12];
              v397 = (unint64_t *)(v396 + 24);
              v398 = (unint64_t *)(v396 + 24);
              if (*(_DWORD *)(v396 + 32) >= 0x41u)
                v398 = (unint64_t *)*v397;
              v399 = *v398;
              v400 = __clz(v399) ^ 0x13F;
              if (v399)
                v401 = v400;
              else
                v401 = 0;
              llvm::MemIntrinsicBase<llvm::MemIntrinsic>::setDestAlignment((_QWORD *)v172, v401);
              if ((*(_DWORD *)(*(_QWORD *)(v172 - 32) + 36) - 217) <= 3
                && *(_DWORD *)(*(_QWORD *)(v172 - 32) + 36) != 218)
              {
                if (*(_DWORD *)(v396 + 32) >= 0x41u)
                  v397 = (unint64_t *)*v397;
                v402 = __clz(*v397) ^ 0x13F;
                if (*v397)
                  v403 = v402;
                else
                  v403 = 0;
                llvm::MemTransferBase<llvm::MemIntrinsic>::setSourceAlignment((_QWORD *)v172, v403);
              }
              goto LABEL_883;
            }
          }
LABEL_423:
          llvm::UpgradeIntrinsicCall(llvm::CallBase *,llvm::Function *)::$_0::operator()(&v1833, (uint64_t)v6, v7, v8);
          goto LABEL_1831;
        }
        if (v13 > 515)
        {
          if ((v13 - 516) < 4)
            goto LABEL_139;
          goto LABEL_423;
        }
        switch(v13)
        {
          case 321:
            v39 = *((_QWORD *)v1836 + 3);
            LOWORD(v1846) = 257;
            v52 = v1836;
            v53 = 0;
            v54 = 0;
            goto LABEL_882;
          case 322:
          case 323:
          case 324:
          case 325:
          case 326:
          case 327:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 334:
          case 335:
          case 336:
          case 337:
          case 338:
          case 339:
          case 340:
          case 341:
          case 342:
          case 343:
            goto LABEL_423;
          case 344:
            v345 = v1837;
            if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v345 - 32 * (*((_DWORD *)v345 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80)
              goto LABEL_423;
            v278 = v1836;
            if (v1836)
              goto LABEL_394;
            goto LABEL_296;
          case 345:
            v350 = llvm::Value::getName((llvm::Value *)v3);
            v351 = 5;
            if ((unint64_t)v6 < 5)
              v351 = (uint64_t)v6;
            if ((unint64_t)v6 - v351 < 0x15)
              goto LABEL_423;
            v352 = &v350[v351];
            v353 = *(_QWORD *)v352;
            v354 = *((_QWORD *)v352 + 1);
            v355 = *(_QWORD *)(v352 + 13);
            v356 = v353 == 0x2E34366863726161 && v354 == 0x6C7075742E657673;
            if (!v356 || v355 != 0x7465672E656C7075)
              goto LABEL_423;
            v358 = **(_QWORD **)(*(_QWORD *)(v3 + 24) + 16);
            if (*(_BYTE *)(v358 + 8) != 19)
              v358 = 0;
            v359 = *(_DWORD *)(v358 + 32);
            v360 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
            v361 = (_QWORD *)(v360 + 24);
            if (*(_DWORD *)(v360 + 32) >= 0x41u)
              v361 = (_QWORD *)*v361;
            v362 = *(_DWORD *)v361;
            v363 = llvm::Type::getInt64Ty(DesiredBytecodeVersion, v6);
            v162 = llvm::ConstantInt::get(v363, (v359 * v362), 0);
            v52 = v1836;
            if (v1836)
              v39 = *((_QWORD *)v1836 + 3);
            else
              v39 = 0;
            *(_QWORD *)&v1864 = *((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
            goto LABEL_466;
          case 346:
            v364 = llvm::Value::getName((llvm::Value *)v3);
            v365 = 5;
            if ((unint64_t)v6 < 5)
              v365 = (uint64_t)v6;
            v366 = (unint64_t)v6 - v365;
            if ((unint64_t)v6 - v365 < 0x11)
              goto LABEL_423;
            v367 = &v364[v365];
            v368 = *(_QWORD *)v367 == 0x2E34366863726161 && *((_QWORD *)v367 + 1) == 0x6C7075742E657673;
            if (!v368 || v367[16] != 101)
              goto LABEL_423;
            if (v366 < 0x15)
              goto LABEL_555;
            if (*(_QWORD *)v367 == 0x2E34366863726161
              && *((_QWORD *)v367 + 1) == 0x6C7075742E657673
              && *(_QWORD *)(v367 + 13) == 0x7465732E656C7075)
            {
              v504 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
              if (*(_BYTE *)(*((_QWORD *)v504 + 4) + 16) == 16)
                v505 = *((_QWORD *)v504 + 4);
              else
                v505 = 0;
              v506 = (_QWORD *)(v505 + 24);
              if (*(_DWORD *)(v505 + 32) >= 0x41u)
                v506 = (_QWORD *)*v506;
              v507 = *(_DWORD *)v506;
              v508 = **((_QWORD **)v504 + 8);
              if (*(_BYTE *)(v508 + 8) == 19)
                v509 = v508;
              else
                v509 = 0;
              v510 = llvm::Type::getInt64Ty(DesiredBytecodeVersion, v6);
              v511 = llvm::ConstantInt::get(v510, v507 * (unint64_t)*(unsigned int *)(v509 + 32), 0);
              v52 = v1836;
              if (v1836)
                v39 = *((_QWORD *)v1836 + 3);
              else
                v39 = 0;
              v585 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
              *(_QWORD *)&v1864 = *v585;
              *((_QWORD *)&v1864 + 1) = v585[8];
              *(_QWORD *)&v1865 = v511;
              goto LABEL_880;
            }
            if (v366 >= 0x18
              && (*(_QWORD *)v367 == 0x2E34366863726161
                ? (v454 = *((_QWORD *)v367 + 1) == 0x6C7075742E657673)
                : (v454 = 0),
                  v454 ? (v455 = *((_QWORD *)v367 + 2) == 0x6574616572632E65) : (v455 = 0),
                  v455))
            {
              if (v366 >= 0x19)
              {
                if (*(_QWORD *)v367 == 0x2E34366863726161
                  && *((_QWORD *)v367 + 1) == 0x6C7075742E657673
                  && *((_QWORD *)v367 + 2) == 0x6574616572632E65
                  && v367[24] == 50)
                {
                  v607 = 2;
                }
                else if (*(_QWORD *)v367 == 0x2E34366863726161
                       && *((_QWORD *)v367 + 1) == 0x6C7075742E657673
                       && *((_QWORD *)v367 + 2) == 0x6574616572632E65
                       && v367[24] == 51)
                {
                  v607 = 3;
                }
                else
                {
                  v648 = *(_QWORD *)v367;
                  v649 = *((_QWORD *)v367 + 1);
                  v650 = *((_QWORD *)v367 + 2);
                  v651 = *((unsigned __int8 *)v367 + 24);
                  v655 = v648 == 0x2E34366863726161
                      && v649 == 0x6C7075742E657673
                      && v650 == 0x6574616572632E65
                      && v651 == 52;
                  v607 = 4 * v655;
                }
              }
              else
              {
                v607 = 0;
              }
              if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v3 + 24) + 16) + 8) == 19)
                v674 = **(llvm::PoisonValue ***)(*(_QWORD *)(v3 + 24) + 16);
              else
                v674 = 0;
              v172 = llvm::PoisonValue::get(v674, v6);
              if (v607)
              {
                v676 = *((_DWORD *)v674 + 8) / v607;
                v677 = llvm::Type::getInt64Ty(DesiredBytecodeVersion, v675);
                v678 = (llvm::Value *)llvm::ConstantInt::get(v677, 0, 0);
                v679 = (BOOL **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                LOWORD(v1846) = 257;
                InsertVector = (llvm::Value *)llvm::IRBuilderBase::CreateInsertVector((llvm::IRBuilderBase *)&v1847, v674, (llvm::Value *)v172, v679, v678, (const llvm::Twine *)&__src);
                v682 = llvm::Type::getInt64Ty(DesiredBytecodeVersion, v681);
                v683 = (llvm::Value *)llvm::ConstantInt::get(v682, v676, 0);
                v684 = (BOOL **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                LOWORD(v1846) = 257;
                v172 = llvm::IRBuilderBase::CreateInsertVector((llvm::IRBuilderBase *)&v1847, v674, InsertVector, v684, v683, (const llvm::Twine *)&__src);
                if (v607 != 2)
                {
                  v686 = llvm::Type::getInt64Ty(DesiredBytecodeVersion, v685);
                  v687 = (llvm::Value *)llvm::ConstantInt::get(v686, (2 * v676), 0);
                  v688 = (BOOL **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                  LOWORD(v1846) = 257;
                  v172 = llvm::IRBuilderBase::CreateInsertVector((llvm::IRBuilderBase *)&v1847, v674, (llvm::Value *)v172, v688, v687, (const llvm::Twine *)&__src);
                  if (v607 != 3)
                  {
                    v690 = llvm::Type::getInt64Ty(DesiredBytecodeVersion, v689);
                    v691 = (llvm::Value *)llvm::ConstantInt::get(v690, (3 * v676), 0);
                    v692 = (BOOL **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[12];
                    LOWORD(v1846) = 257;
                    v172 = llvm::IRBuilderBase::CreateInsertVector((llvm::IRBuilderBase *)&v1847, v674, (llvm::Value *)v172, v692, v691, (const llvm::Twine *)&__src);
                  }
                }
              }
              if (*(_BYTE *)(v172 + 16) != 84)
                v172 = 0;
            }
            else
            {
LABEL_555:
              v172 = 0;
            }
            goto LABEL_883;
          default:
            if (v13 == 260)
            {
              v380 = v1837;
              if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v380 - 32 * (*((_DWORD *)v380 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x40)
              {
                False = llvm::ConstantInt::getFalse(v1852, v381);
                v383 = v1837;
              }
              else
              {
                v383 = v1837;
                False = (_QWORD *)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
              }
              if (((llvm::CallBase::arg_end(v383) - ((_QWORD)v383 - 32 * (*((_DWORD *)v383 + 5) & 0x7FFFFFF))) & 0x1FFFFFFF80) != 0)
                v405 = (_QWORD *)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[12];
              else
                v405 = llvm::ConstantInt::getFalse(v1852, v404);
              v52 = v1836;
              if (v1836)
                v39 = *((_QWORD *)v1836 + 3);
              else
                v39 = 0;
              v407 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
              *(_QWORD *)&v1864 = *v407;
              *((_QWORD *)&v1864 + 1) = v407[4];
              *(_QWORD *)&v1865 = False;
              *((_QWORD *)&v1865 + 1) = v405;
              LOWORD(v1846) = 257;
              v53 = (uint64_t *)&v1864;
              v54 = 4;
              goto LABEL_882;
            }
            if (v13 != 269)
              goto LABEL_423;
            v277 = v1837;
            if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v277 - 32 * (*((_DWORD *)v277 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80)
              goto LABEL_423;
            v278 = v1836;
            if (v1836)
LABEL_394:
              v279 = *((_QWORD *)v278 + 3);
            else
LABEL_296:
              v279 = 0;
            v346 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
            __src = *(llvm::MDNode **)v346;
            ParamAttrs = *((_QWORD *)v346 + 4);
            v1844 = *((_QWORD *)v346 + 8);
            v1845 = *((_QWORD *)v346 + 12);
            Int8PtrTy = (llvm::Constant *)llvm::Type::getInt8PtrTy(v1852, 0);
            llvm::Constant::getNullValue(Int8PtrTy, v348);
            v1846 = v349;
            v1866 = 257;
            Select = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v279, (uint64_t)v278, (uint64_t *)&__src, 5, (uint64_t)&v1864, 0);
            llvm::Value::takeName(Select, v1837);
            break;
        }
LABEL_1827:
        v289 = (Value *)v1837;
        v290 = Select;
        goto LABEL_1828;
      }
      if (v13 <= 12801)
      {
        if (v13 <= 12077)
        {
          v41 = v13 - 9849;
          if (v41 <= 0x11)
          {
            v42 = 1 << v41;
            if ((v42 & 0xC00F) != 0)
            {
              if (!llvm::Type::isIntegerTy(*(llvm::Type **)v1837, 64))
                goto LABEL_1831;
              v44 = (llvm::Type **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
              v45 = (llvm::Type *)llvm::Type::getInt32Ty(v1852, v43);
              LOWORD(v1846) = 257;
              *(_QWORD *)&v1864 = llvm::IRBuilderBase::CreateTrunc((llvm::IRBuilderBase *)&v1847, v44, v45, (const llvm::Twine *)&__src);
              if (v1836)
                v46 = *((_QWORD *)v1836 + 3);
              else
                v46 = 0;
              LOWORD(v1846) = 257;
              v273 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v46, (uint64_t)v1836, (uint64_t *)&v1864, 1, (uint64_t)&__src, 0);
              v275 = *(llvm::Type **)v1837;
LABEL_315:
              LOWORD(v1846) = 257;
              IntCast = (llvm::Value *)llvm::IRBuilderBase::CreateIntCast((llvm::IRBuilderBase *)&v1847, v273, v275, 1, (const llvm::Twine *)&__src);
LABEL_316:
              v276 = IntCast;
              v274 = v1837;
              goto LABEL_317;
            }
            if ((v42 & 0x30000) != 0)
            {
LABEL_278:
              v258 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
              if (llvm::Type::isIntegerTy(*(llvm::Type **)v258, 32)
                && !llvm::Type::isIntegerTy(*(llvm::Type **)v1837, 64))
              {
                goto LABEL_1831;
              }
              v259 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
              Trunc = *(llvm::Type ***)v259;
              v261 = (llvm::Type **)*((_QWORD *)v259 + 4);
              if (llvm::Type::isIntegerTy(*(llvm::Type **)v1837, 64))
              {
                v263 = (llvm::Type *)llvm::Type::getInt32Ty(v1852, v262);
                LOWORD(v1846) = 257;
                Trunc = llvm::IRBuilderBase::CreateTrunc((llvm::IRBuilderBase *)&v1847, Trunc, v263, (const llvm::Twine *)&__src);
                v265 = (llvm::Type *)llvm::Type::getInt32Ty(v1852, v264);
                LOWORD(v1846) = 257;
                v261 = llvm::IRBuilderBase::CreateTrunc((llvm::IRBuilderBase *)&v1847, v261, v265, (const llvm::Twine *)&__src);
                v267 = llvm::Type::getInt32Ty(DesiredBytecodeVersion, v266);
                v268 = (uint64_t **)(v258 + 24);
                if (*(_DWORD *)(v258 + 32) >= 0x41u)
                  goto LABEL_282;
              }
              else
              {
                v267 = llvm::Type::getInt32Ty(DesiredBytecodeVersion, v262);
                v268 = (uint64_t **)(v258 + 24);
                if (*(_DWORD *)(v258 + 32) >= 0x41u)
                {
LABEL_282:
                  v269 = llvm::ConstantInt::get(v267, **v268, 0);
                  v270 = v1836;
                  if (!v1836)
                  {
LABEL_283:
                    v271 = 0;
                    goto LABEL_287;
                  }
LABEL_286:
                  v271 = *((_QWORD *)v270 + 3);
LABEL_287:
                  *(_QWORD *)&v1864 = Trunc;
                  *((_QWORD *)&v1864 + 1) = v261;
                  *(_QWORD *)&v1865 = v269;
                  LOWORD(v1846) = 257;
                  v272 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v271, (uint64_t)v270, (uint64_t *)&v1864, 3, (uint64_t)&__src, 0);
                  v273 = v272;
                  v274 = v1837;
                  v275 = *(llvm::Type **)v1837;
                  if (*v272 == *(llvm::Type **)v1837)
                  {
                    v276 = (llvm::Value *)v272;
LABEL_317:
                    llvm::Value::takeName((llvm::Value *)v273, v274);
                    v289 = (Value *)v1837;
                    v290 = v276;
LABEL_1828:
                    llvm::Value::replaceAllUsesWith(v289, v290);
                    goto LABEL_1829;
                  }
                  goto LABEL_315;
                }
              }
              v269 = llvm::ConstantInt::get(v267, (uint64_t)*v268, 0);
              v270 = v1836;
              if (!v1836)
                goto LABEL_283;
              goto LABEL_286;
            }
          }
          goto LABEL_423;
        }
        if ((v13 - 12307) >= 6)
        {
          if (v13 != 12078 && v13 != 12147)
            goto LABEL_423;
LABEL_26:
          v28 = v1837;
          v29 = *((_DWORD *)v1837 + 5) & 0x7FFFFFF;
          v30 = (uint64_t *)((char *)v1837 - 32 * v29);
          v32 = llvm::CallBase::arg_end(v1837);
          __src = (llvm::MDNode *)&v1844;
          ParamAttrs = 0x400000000;
          v33 = v32 - (_QWORD)v30;
          if ((unint64_t)(v32 - (_QWORD)v30) < 0x81)
          {
            v34 = 0;
            v36 = 0;
            v35 = (llvm::MDNode *)&v1844;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v1844, v33 >> 5, 8);
            v34 = ParamAttrs;
            v35 = __src;
            v36 = ParamAttrs;
          }
          if (v30 != (uint64_t *)v32)
          {
            v205 = (_QWORD *)((char *)v35 + 8 * v34);
            v206 = 32 * v29;
            v207 = 32 * v29 + v32 - (_QWORD)v28 - 32;
            if (v207 >= 0x3C0)
            {
              v208 = v207 >> 5;
              if (v205 >= (_QWORD *)((char *)v28 + (v207 & 0xFFFFFFFFFFFFFFE0 | 8) - v206)
                || v30 >= (uint64_t *)v35 + v34 + v208 + 1)
              {
                v209 = (v208 + 1) & 3;
                if (!v209)
                  v209 = 4;
                v210 = v208 + 1 - v209;
                v205 += v210;
                v30 += 4 * v210;
                v211 = (const double *)((char *)v28 - v206 + 64);
                v212 = (unsigned __int128 *)((char *)v35 + 8 * v34 + 16);
                v213 = ~v208 + v209;
                do
                {
                  v214 = v211 - 8;
                  v215 = (unsigned __int128)vld4q_f64(v214);
                  v216 = (unsigned __int128)vld4q_f64(v211);
                  *(v212 - 1) = v215;
                  *v212 = v216;
                  v211 += 16;
                  v212 += 2;
                  v213 += 4;
                }
                while (v213);
              }
            }
            do
            {
              v217 = *v30;
              v30 += 4;
              *v205++ = v217;
            }
            while (v30 != (uint64_t *)v32);
            v35 = __src;
          }
          LODWORD(ParamAttrs) = v36 + ((unint64_t)v33 >> 5);
          v218 = (unsigned __int8 **)*((_QWORD *)v35 + ParamAttrs - 1);
          Int8Ty = llvm::Type::getInt8Ty(DesiredBytecodeVersion, v31);
          v1838 = "trunc";
          v1841 = 259;
          if (*v218 == (unsigned __int8 *)Int8Ty)
          {
            v220 = v218;
          }
          else
          {
            v220 = (unsigned __int8 **)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 **, uint64_t))*v1853
                                        + 15))(v1853, 38, v218, Int8Ty);
            if (!v220)
            {
              v1866 = 257;
              llvm::CastInst::Create(38);
              v220 = v221;
              (*((void (**)(void **, unsigned __int8 **, void **, uint64_t, char *))*v1854 + 2))(v1854, v221, &v1838, v1850, v1851);
              if ((_DWORD)v1848)
              {
                v222 = v1847;
                v223 = (llvm::Type *)((char *)v1847 + 16 * v1848);
                do
                {
                  llvm::Instruction::setMetadata(v220, *(_DWORD *)v222, *((llvm::MDNode **)v222 + 1));
                  v222 = (llvm::Type *)((char *)v222 + 16);
                }
                while (v222 != v223);
              }
            }
          }
          v135 = ParamAttrs;
          *((_QWORD *)__src + ParamAttrs - 1) = v220;
          v136 = v1836;
          if (v1836)
            goto LABEL_158;
          goto LABEL_271;
        }
        v65 = v1837;
        v66 = *((_DWORD *)v1837 + 5) & 0x7FFFFFF;
        v67 = (llvm::LLVMContext **)((char *)v1837 - 32 * v66);
        v68 = llvm::CallBase::arg_end(v1837);
        __src = (llvm::MDNode *)&v1844;
        ParamAttrs = 0x400000000;
        v69 = v68 - (_QWORD)v67;
        if ((unint64_t)(v68 - (_QWORD)v67) < 0x81)
        {
          v70 = 0;
          v72 = 0;
          v71 = (llvm::LLVMContext **)&v1844;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v1844, v69 >> 5, 8);
          v70 = ParamAttrs;
          v71 = (llvm::LLVMContext **)__src;
          v72 = ParamAttrs;
        }
        if (v67 != (llvm::LLVMContext **)v68)
        {
          v189 = &v71[v70];
          v190 = 32 * v66;
          v191 = 32 * v66 + v68 - (_QWORD)v65 - 32;
          if (v191 >= 0x3C0)
          {
            v192 = v191 >> 5;
            if (v189 >= (llvm::LLVMContext **)((char *)v65 + (v191 & 0xFFFFFFFFFFFFFFE0 | 8) - v190)
              || v67 >= &v71[v192 + 1] + v70)
            {
              v193 = (v192 + 1) & 3;
              if (!v193)
                v193 = 4;
              v194 = v192 + 1 - v193;
              v189 += v194;
              v67 += 4 * v194;
              v195 = (const double *)((char *)v65 - v190 + 64);
              v196 = (unsigned __int128 *)&v71[v70 + 2];
              v197 = ~v192 + v193;
              do
              {
                v198 = v195 - 8;
                v199 = (unsigned __int128)vld4q_f64(v198);
                v200 = (unsigned __int128)vld4q_f64(v195);
                *(v196 - 1) = v199;
                *v196 = v200;
                v195 += 16;
                v196 += 2;
                v197 += 4;
              }
              while (v197);
            }
          }
          do
          {
            v201 = *v67;
            v67 += 4;
            *v189++ = v201;
          }
          while (v67 != (llvm::LLVMContext **)v68);
          v71 = (llvm::LLVMContext **)__src;
        }
        LODWORD(ParamAttrs) = v72 + ((unint64_t)v69 >> 5);
        X86MaskVec = getX86MaskVec((uint64_t *)&v1847, v71[3], *(_DWORD *)(*(_QWORD *)*v71 + 32));
        v203 = (uint64_t *)__src;
        *((_QWORD *)__src + 3) = X86MaskVec;
        if (v1836)
          v204 = *((_QWORD *)v1836 + 3);
        else
          v204 = 0;
        v1866 = 257;
        v244 = (Type *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v204, (uint64_t)v1836, v203, ParamAttrs, (uint64_t)&v1864, 0);
        v249 = ApplyX86MaskOn1BitsVec((uint64_t)&v1847, v244, 0);
      }
      else
      {
        if (v13 > 13235)
        {
          if (v13 <= 13389)
          {
            if ((v13 - 13236) < 4)
              goto LABEL_26;
            if ((v13 - 13243) >= 3)
              goto LABEL_423;
            v151 = (llvm::Type ***)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
            v152 = *v151;
            v153 = **v151;
            FloatTy = (llvm::FixedVectorType *)llvm::Type::getFloatTy(DesiredBytecodeVersion, v6);
            llvm::FixedVectorType::get(FloatTy, (llvm::Type *)4);
            if (v153 != v156)
              goto LABEL_1831;
            v157 = (llvm::Type **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
            v158 = (llvm::FixedVectorType *)llvm::Type::getInt64Ty(DesiredBytecodeVersion, v155);
            llvm::FixedVectorType::get(v158, (llvm::Type *)2);
            v160 = v159;
            __src = (llvm::MDNode *)"cast";
            LOWORD(v1846) = 259;
            BitCast = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v152, v159, (const llvm::Twine *)&__src);
            __src = (llvm::MDNode *)"cast";
            LOWORD(v1846) = 259;
            v162 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v157, v160, (const llvm::Twine *)&__src);
            v52 = v1836;
            if (v1836)
              v39 = *((_QWORD *)v1836 + 3);
            else
              v39 = 0;
            *(_QWORD *)&v1864 = BitCast;
LABEL_466:
            *((_QWORD *)&v1864 + 1) = v162;
            LOWORD(v1846) = 257;
            v53 = (uint64_t *)&v1864;
            v54 = 2;
LABEL_882:
            v172 = llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v39, (uint64_t)v52, v53, v54, (uint64_t)&__src, 0);
            goto LABEL_883;
          }
          if ((v13 - 13392) >= 4)
          {
            if ((v13 - 13390) >= 2)
              goto LABEL_423;
            v39 = *((_QWORD *)v1836 + 3);
            v40 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
LABEL_291:
            *(_QWORD *)&v1864 = v40;
            LOWORD(v1846) = 257;
            v53 = (uint64_t *)&v1864;
            v52 = v1836;
            v54 = 1;
            goto LABEL_882;
          }
          v73 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
          v74 = llvm::CallBase::arg_end(v1837);
          *(_QWORD *)&v1864 = v73;
          *((_QWORD *)&v1864 + 1) = v74;
          llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *>(&__src, (uint64_t)&v1864);
          llvm::VectorType::getInteger(**((llvm::Type ****)__src + 2), v75);
          v76 = (llvm::Type **)*((_QWORD *)__src + 2);
          v1866 = 257;
          v78 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v76, v77, (const llvm::Twine *)&v1864);
          v79 = (uint64_t *)__src;
          *((_QWORD *)__src + 2) = v78;
          v80 = v1836;
          if (v1836)
            goto LABEL_74;
          goto LABEL_192;
        }
        if ((v13 - 12802) > 8)
        {
          if (v13 == 13111)
          {
            if ((*((_DWORD *)v1837 + 5) & 0x7FFFFFF) == 0)
              goto LABEL_1831;
            v291 = *((_QWORD *)v1836 + 3);
            LOWORD(v1846) = 257;
            v273 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v291, (uint64_t)v1836, 0, 0, (uint64_t)&__src, 0);
            LODWORD(v1864) = 1;
            LOWORD(v1846) = 257;
            Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t *)&v1847, (uint64_t *)v273, (unsigned int *)&v1864, 1, (uint64_t)&__src);
            v293 = (llvm::Type **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
            v294 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType **)*Value, 0);
            LOWORD(v1846) = 257;
            v295 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v293, v294, (const llvm::Twine *)&__src);
            llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)&v1847, (llvm::Type **)Value, (uint64_t)v295, 256, 0);
            LODWORD(v1864) = 0;
            LOWORD(v1846) = 257;
            IntCast = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t *)&v1847, (uint64_t *)v273, (unsigned int *)&v1864, 1, (uint64_t)&__src);
            goto LABEL_316;
          }
          goto LABEL_423;
        }
        if (((1 << (v13 - 2)) & 0x11F) == 0)
        {
          v174 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
          v175 = llvm::CallBase::arg_end(v1837);
          *(_QWORD *)&v1864 = v174;
          *((_QWORD *)&v1864 + 1) = v175;
          llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *>(&__src, (uint64_t)&v1864);
          v176 = (llvm::Type *)(2 * *(_DWORD *)(*(_QWORD *)v1837 + 32));
          v177 = (llvm::Type **)*((_QWORD *)__src + 1);
          v179 = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(v1852, v178);
          llvm::FixedVectorType::get(v179, v176);
          v1866 = 257;
          v181 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v177, v180, (const llvm::Twine *)&v1864);
          v182 = __src;
          *((_QWORD *)__src + 1) = v181;
          v183 = (llvm::Type **)*((_QWORD *)v182 + 2);
          v185 = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(v1852, v184);
          llvm::FixedVectorType::get(v185, v176);
          v1866 = 257;
          v187 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v183, v186, (const llvm::Twine *)&v1864);
          v79 = (uint64_t *)__src;
          *((_QWORD *)__src + 2) = v187;
          v80 = v1836;
          if (v1836)
          {
LABEL_74:
            v81 = *((_QWORD *)v80 + 3);
LABEL_193:
            v188 = ParamAttrs;
            v1866 = 257;
LABEL_194:
            v172 = llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v81, (uint64_t)v80, v79, v188, (uint64_t)&v1864, 0);
            v173 = __src;
            if (__src == (llvm::MDNode *)&v1844)
              goto LABEL_883;
            goto LABEL_273;
          }
LABEL_192:
          v81 = 0;
          goto LABEL_193;
        }
        v55 = v1837;
        v56 = *((_DWORD *)v1837 + 5) & 0x7FFFFFF;
        v57 = (uint64_t *)((char *)v1837 - 32 * v56);
        v59 = llvm::CallBase::arg_end(v1837);
        __src = (llvm::MDNode *)&v1844;
        ParamAttrs = 0x400000000;
        v60 = v59 - (_QWORD)v57;
        if ((unint64_t)(v59 - (_QWORD)v57) < 0x81)
        {
          v61 = 0;
          v63 = 0;
          v62 = &v1844;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v1844, v60 >> 5, 8);
          v61 = ParamAttrs;
          v62 = (uint64_t *)__src;
          v63 = ParamAttrs;
        }
        if (v57 != (uint64_t *)v59)
        {
          v224 = &v62[v61];
          v225 = 32 * v56;
          v226 = 32 * v56 + v59 - (_QWORD)v55 - 32;
          if (v226 >= 0x3C0)
          {
            v227 = v226 >> 5;
            if (v224 >= (uint64_t *)((char *)v55 + (v226 & 0xFFFFFFFFFFFFFFE0 | 8) - v225)
              || v57 >= &v62[v61 + 1 + v227])
            {
              v228 = (v227 + 1) & 3;
              if (!v228)
                v228 = 4;
              v229 = v227 + 1 - v228;
              v224 += v229;
              v57 += 4 * v229;
              v230 = (const double *)((char *)v55 - v225 + 64);
              v231 = (unsigned __int128 *)&v62[v61 + 2];
              v232 = ~v227 + v228;
              do
              {
                v233 = v230 - 8;
                v234 = (unsigned __int128)vld4q_f64(v233);
                v235 = (unsigned __int128)vld4q_f64(v230);
                *(v231 - 1) = v234;
                *v231 = v235;
                v230 += 16;
                v231 += 2;
                v232 += 4;
              }
              while (v232);
            }
          }
          do
          {
            v236 = *v57;
            v57 += 4;
            *v224++ = v236;
          }
          while (v57 != (uint64_t *)v59);
          v62 = (uint64_t *)__src;
        }
        LODWORD(ParamAttrs) = v63 + ((unint64_t)v60 >> 5);
        v237 = v1836;
        v238 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v1837 + 32);
        if (*((_DWORD *)v1836 + 9) != 12810)
          goto LABEL_239;
        v239 = (llvm::Type **)v62[1];
        v240 = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(v1852, v58);
        llvm::FixedVectorType::get(v240, v238);
        v1866 = 257;
        v242 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v239, v241, (const llvm::Twine *)&v1864);
        v62 = (uint64_t *)__src;
        *((_QWORD *)__src + 1) = v242;
        v237 = v1836;
        if (!v1836)
          v243 = 0;
        else
LABEL_239:
          v243 = *((_QWORD *)v237 + 3);
        v1866 = 257;
        v244 = (Type *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v243, (uint64_t)v237, v62, ParamAttrs, (uint64_t)&v1864, 0);
        Int16Ty = (llvm::FixedVectorType *)llvm::Type::getInt16Ty(v1852, v245);
        v248 = llvm::FixedVectorType::get(Int16Ty, v238);
        v1841 = 257;
        v249 = (unsigned __int8 **)v244;
        if (*(_QWORD *)v244 != v247)
        {
          v249 = (unsigned __int8 **)(*((uint64_t (**)(void **, uint64_t, Type *, uint64_t, double))*v1853 + 15))(v1853, 49, v244, v247, v248);
          if (!v249)
          {
            v1866 = 257;
            llvm::CastInst::Create(49);
            v249 = v250;
            (*((void (**)(void **, unsigned __int8 **, void **, uint64_t, char *))*v1854 + 2))(v1854, v250, &v1838, v1850, v1851);
            if ((_DWORD)v1848)
            {
              v251 = v1847;
              v252 = (llvm::Type *)((char *)v1847 + 16 * v1848);
              do
              {
                llvm::Instruction::setMetadata(v249, *(_DWORD *)v251, *((llvm::MDNode **)v251 + 1));
                v251 = (llvm::Type *)((char *)v251 + 16);
              }
              while (v251 != v252);
            }
          }
        }
      }
      llvm::Value::takeName((llvm::Value *)v244, v1837);
      llvm::Value::replaceAllUsesWith((Value *)v1837, (llvm::Value *)v249);
      llvm::Instruction::eraseFromParent(v1837);
      if (__src != (llvm::MDNode *)&v1844)
        free(__src);
      goto LABEL_1831;
    }
    v21 = llvm::Value::getName((llvm::Value *)v3);
    v23 = 5;
    if ((unint64_t)v22 < 5)
      v23 = (uint64_t)v22;
    v24 = &v21[v23];
    v25 = (size_t)v22 - v23;
    v1833 = (Value **)&v21[v23];
    v1834 = (size_t)v22 - v23;
    if ((unint64_t)v22 - v23 < 4)
    {
      v26 = 0;
      v27 = 0;
      goto LABEL_83;
    }
    v37 = *(_DWORD *)v24 != 775305336;
    if (*(_DWORD *)v24 == 775305336)
    {
      v64 = 4;
      if (v25 < 4)
        v64 = v25;
      v24 += v64;
      v25 -= v64;
      v1833 = (Value **)v24;
      v1834 = v25;
      v26 = v25 > 4;
      if (v25 >= 5)
      {
LABEL_31:
        if (*(_DWORD *)v24 != 1836480110 || v24[4] != 46)
        {
          v26 = 0;
          v27 = *(_DWORD *)v24 == 778924641;
          if (*(_DWORD *)v24 == 778924641)
            goto LABEL_36;
          goto LABEL_77;
        }
        v24 += 5;
        v25 -= 5;
        v1833 = (Value **)v24;
        v1834 = v25;
        if (v25 >= 4)
        {
LABEL_76:
          v27 = *(_DWORD *)v24 == 778924641;
          if (*(_DWORD *)v24 == 778924641)
          {
LABEL_36:
            v24 += 4;
            v25 -= 4;
            v1833 = (Value **)v24;
            v1834 = v25;
            if (v25 < 7)
              goto LABEL_82;
LABEL_78:
            if (*(_DWORD *)v24 == 1734634849 && *(_DWORD *)(v24 + 3) == 778986343)
            {
              v24 += 7;
              v25 -= 7;
              v1833 = (Value **)v24;
              v1834 = v25;
              if (v37)
              {
LABEL_83:
                v83 = 0;
                v1863[0] = 0;
                v84 = v1834;
                v85 = v1833;
                if (v1834 == 23)
                  goto LABEL_84;
                goto LABEL_1453;
              }
LABEL_247:
              v253 = v25 < 0xC;
              if (v25 >= 0xC)
              {
                if (*(_QWORD *)v24 == 0x6F6D2E6134657373 && *((_DWORD *)v24 + 2) == 779382390)
                {
                  v1838 = v1840;
                  v1839 = 0x100000001;
                  v296 = llvm::Type::getInt32Ty(DesiredBytecodeVersion, v22);
                  v297 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v296, 1, 0);
                  v1840[0] = llvm::ValueAsMetadata::get(v297, v298);
                  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t)DesiredBytecodeVersion, v1840, 1uLL, 0, 1);
                  v300 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                  v301 = *(unsigned __int8 ***)v300;
                  v302 = (llvm::Value *)*((_QWORD *)v300 + 4);
                  v303 = llvm::PointerType::get(*(llvm::PointerType ***)(*(_QWORD *)v302 + 24), 0);
                  *(_QWORD *)&v1864 = "cast";
                  v1866 = 259;
                  if (*v301 == (unsigned __int8 *)v303)
                  {
                    v304 = v301;
                  }
                  else
                  {
                    v304 = (unsigned __int8 **)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 **, uint64_t))*v1853
                                                + 15))(v1853, 49, v301, v303);
                    if (!v304)
                    {
                      LOWORD(v1846) = 257;
                      llvm::CastInst::Create(49);
                      v304 = v305;
                      (*((void (**)(void **, unsigned __int8 **, __int128 *, uint64_t, char *))*v1854 + 2))(v1854, v305, &v1864, v1850, v1851);
                      if ((_DWORD)v1848)
                      {
                        v306 = v1847;
                        v307 = (llvm::Type *)((char *)v1847 + 16 * v1848);
                        do
                        {
                          llvm::Instruction::setMetadata(v304, *(_DWORD *)v306, *((llvm::MDNode **)v306 + 1));
                          v306 = (llvm::Type *)((char *)v306 + 16);
                        }
                        while (v306 != v307);
                      }
                    }
                  }
                  __src = (llvm::MDNode *)"extractelement";
                  LOWORD(v1846) = 259;
                  v392 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement(&v1847, v302, 0, (const llvm::Twine *)&__src);
                  v393 = (uint64_t)v304;
                  v391 = 256;
                  goto LABEL_469;
                }
              }
              else if (v25 < 0xA)
              {
LABEL_249:
                v253 = 1;
                v254 = 1;
                goto LABEL_336;
              }
              if (*(_QWORD *)v24 != 0x6E766F6D2E787661 || *((_WORD *)v24 + 4) != 11892)
              {
                if (v25 < 0xF)
                {
                  if (v25 == 14)
                  {
                    if (*(_QWORD *)v24 == 0x6F74732E32657373 && *(_QWORD *)(v24 + 6) == 0x71642E6C65726F74)
                    {
                      v447 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                      v324 = *(llvm::Type ***)v447;
                      v448 = (llvm::Type **)*((_QWORD *)v447 + 4);
                      v449 = (llvm::FixedVectorType *)llvm::Type::getInt64Ty(DesiredBytecodeVersion, v22);
                      llvm::FixedVectorType::get(v449, (llvm::Type *)2);
                      __src = (llvm::MDNode *)"cast";
                      LOWORD(v1846) = 259;
                      v451 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v448, v450, (const llvm::Twine *)&__src);
                      LOWORD(v1846) = 257;
                      v325 = (llvm::PointerType ***)llvm::IRBuilderBase::CreateExtractElement(&v1847, (llvm::Value *)v451, 0, (const llvm::Twine *)&__src);
                      v326 = (llvm::Type *)llvm::PointerType::get(*v325, 0);
                      __src = (llvm::MDNode *)"cast";
                      LOWORD(v1846) = 259;
                      goto LABEL_364;
                    }
                    v254 = 0;
                    v25 = 14;
                    goto LABEL_338;
                  }
                  goto LABEL_335;
                }
                if (*(_QWORD *)v24 != 0x732E323135787661 || *(_QWORD *)(v24 + 7) != 0x2E746E65726F7473)
                {
LABEL_335:
                  v254 = 0;
LABEL_336:
                  if (v25 < 0xB)
                  {
                    v309 = 1;
                    goto LABEL_343;
                  }
LABEL_338:
                  if (*(_QWORD *)v24 == 0x726F74732E657373 && *(_QWORD *)(v24 + 3) == 0x2E7565726F74732ELL)
                  {
LABEL_363:
                    v323 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                    v324 = *(llvm::Type ***)v323;
                    v325 = (llvm::PointerType ***)*((_QWORD *)v323 + 4);
                    v326 = (llvm::Type *)llvm::PointerType::get(*v325, 0);
                    __src = (llvm::MDNode *)"cast";
                    LOWORD(v1846) = 259;
LABEL_364:
                    v327 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v324, v326, (const llvm::Twine *)&__src);
                    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)&v1847, (llvm::Type **)v325, (uint64_t)v327, 256, 0);
LABEL_443:
                    llvm::Instruction::eraseFromParent(v1837);
LABEL_1831:
                    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v1862);
                    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v1861);
                    if (v1847 != (llvm::Type *)v1849)
                      free(v1847);
                    return;
                  }
                  v309 = 0;
LABEL_343:
                  if (v253
                    || (*(_QWORD *)v24 == 0x6F74732E32657373 ? (v311 = *((_DWORD *)v24 + 2) == 779445618) : (v311 = 0),
                        !v311))
                  {
                    if ((v309 & 1) != 0
                      || (*(_QWORD *)v24 == 0x726F74732E787661
                        ? (v312 = *(_QWORD *)(v24 + 3) == 0x2E7565726F74732ELL)
                        : (v312 = 0),
                          !v312))
                    {
                      if (v25 == 20)
                      {
                        if (*(_QWORD *)v24 == 0x6D2E323135787661
                          && *((_QWORD *)v24 + 1) == 0x726F74732E6B7361
                          && *((_DWORD *)v24 + 4) == 1936928357)
                        {
                          v315 = (llvm::Value *)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                          v316 = llvm::Type::getInt8Ty(v1852, v22);
                          v317 = (llvm::Value *)llvm::ConstantInt::get(v316, 1, 0);
                          LOWORD(v1846) = 257;
                          v318 = (unsigned __int8 *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)&v1847, v315, v317, (const llvm::Twine *)&__src);
                          v319 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                          v320 = *(unsigned __int8 ***)v319;
                          v321 = (llvm::PointerType ***)*((_QWORD *)v319 + 4);
                          v322 = 0;
LABEL_442:
                          UpgradeMaskedStore((uint64_t)&v1847, v320, v321, v318, v322);
                          goto LABEL_443;
                        }
                      }
                      else if (v25 < 0x11)
                      {
                        v1863[0] = 0;
                        v339 = 1;
                        v340 = 1;
                        if (v25 < 9)
                          goto LABEL_509;
                        goto LABEL_382;
                      }
                      if (*(_QWORD *)v24 != 0x6D2E323135787661
                        || *((_QWORD *)v24 + 1) != 0x726F74732E6B7361
                        || v24[16] != 101)
                      {
                        v339 = 0;
                        v1863[0] = 0;
LABEL_382:
                        v343 = *(_QWORD *)v24 == 0x6D63702E32657373 && v24[8] == 112;
                        if (v343
                          || (*(_QWORD *)v24 == 0x6D63702E32787661 ? (v344 = v24[8] == 112) : (v344 = 0), v344))
                        {
                          if (v24[9] == 101)
                            v384 = 32;
                          else
                            v384 = 38;
                          v385 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                          v386 = *(llvm::Type ****)v385;
                          v387 = *((_QWORD *)v385 + 4);
                          LOWORD(v1846) = 257;
                          v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateICmp((uint64_t *)&v1847, v384, v386, v387, (uint64_t)&__src);
                          v388 = *(llvm::Type **)v1837;
                          LOWORD(v1846) = 257;
                          SExt = (BOOL *)llvm::IRBuilderBase::CreateSExt((llvm::IRBuilderBase *)&v1847, (llvm::Type **)v1863[0], v388, (const llvm::Twine *)&__src);
                          goto LABEL_1824;
                        }
                        if ((v339 & 1) != 0)
                        {
                          v339 = 0;
                          v340 = 1;
                        }
                        else
                        {
                          if (*(_QWORD *)v24 == 0x622E323135787661
                            && *((_QWORD *)v24 + 1) == 0x7473616364616F72
                            && v24[16] == 109)
                          {
                            v465 = (llvm::Type *)llvm::Type::getInt32Ty(DesiredBytecodeVersion, v22);
                            if (llvm::Type::isIntegerTy(**((llvm::Type ***)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)), 8))
                            {
                              v465 = (llvm::Type *)llvm::Type::getInt64Ty(DesiredBytecodeVersion, v466);
                            }
                            __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1837);
                            ParamAttrs = (uint64_t)v467;
                            v468 = llvm::TypeSize::operator unsigned long long(&__src, v467);
                            *(_QWORD *)&v1864 = llvm::Type::getPrimitiveSizeInBits(v465);
                            *((_QWORD *)&v1864 + 1) = v469;
                            v470 = v468 / llvm::TypeSize::operator unsigned long long(&v1864, v469);
                            v471 = (llvm::Value *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                            v1866 = 257;
                            if (*(llvm::Type **)v471 == v465)
                            {
                              v472 = v471;
                            }
                            else
                            {
                              v472 = (llvm::ZExtInst *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, llvm::Type *))*v1853
                                                        + 15))(v1853, 39, v471, v465);
                              if (!v472)
                              {
                                v472 = (llvm::ZExtInst *)llvm::User::operator new((llvm::User *)0x48, 1u);
                                LOWORD(v1846) = 257;
                                llvm::ZExtInst::ZExtInst(v472, v471, v465, (const char **)&__src, 0);
                                (*((void (**)(void **, llvm::ZExtInst *, __int128 *, uint64_t, char *))*v1854
                                 + 2))(v1854, v472, &v1864, v1850, v1851);
                                if ((_DWORD)v1848)
                                {
                                  v473 = v1847;
                                  v474 = (llvm::Type *)((char *)v1847 + 16 * v1848);
                                  do
                                  {
                                    llvm::Instruction::setMetadata((unsigned __int8 **)v472, *(_DWORD *)v473, *((llvm::MDNode **)v473 + 1));
                                    v473 = (llvm::Type *)((char *)v473 + 16);
                                  }
                                  while (v473 != v474);
                                }
                              }
                            }
                            v1863[0] = (BOOL *)v472;
                            LOWORD(v1846) = 257;
                            VectorSplat = (BOOL *)llvm::IRBuilderBase::CreateVectorSplat((llvm::IRBuilderBase *)&v1847, v470, (llvm::ScalableVectorType **)v472, (const llvm::Twine *)&__src);
                            goto LABEL_1750;
                          }
                          v339 = 0;
                          v340 = 0;
                        }
LABEL_509:
                        if (v25 == 12)
                        {
                          v1824 = v27;
                          v1829 = v26;
                          v1818 = v253;
                          v439 = v254;
                          v440 = v339;
                          v441 = v340;
                          v442 = memcmp(v24, "sse2.sqrt.sd", 0xCuLL);
                          v340 = v441;
                          v339 = v440;
                          v254 = v439;
                          v253 = v1818;
                          v27 = v1824;
                          v26 = v1829;
                          if (v442)
                          {
LABEL_515:
                            if ((v254 & 1) == 0
                              && (*(_QWORD *)v24 == 0x747271732E787661
                                ? (v430 = *((unsigned __int16 *)v24 + 4) == 28718)
                                : (v430 = 0),
                                  v430)
                              || (v309 & 1) == 0
                              && (*(_QWORD *)v24 == 0x7271732E32657373
                                ? (v431 = *(_QWORD *)(v24 + 3) == 0x702E747271732E32)
                                : (v431 = 0),
                                  v431)
                              || (v254 & 1) == 0
                              && (*(_QWORD *)v24 == 0x747271732E657373
                                ? (v432 = *((unsigned __int16 *)v24 + 4) == 28718)
                                : (v432 = 0),
                                  v432))
                            {
                              v435 = *(uint64_t **)(v3 + 40);
                              *(_QWORD *)&v1864 = *(_QWORD *)v1837;
                              Declaration = llvm::Intrinsic::getDeclaration(v435, 307, (BOOL **)&v1864, 1);
                              v437 = Declaration;
                              if (Declaration)
                                v438 = *(_QWORD *)(Declaration + 24);
                              else
                                v438 = 0;
                              v1838 = (void *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                              v464 = 257;
LABEL_1940:
                              LOWORD(v1846) = v464;
                              VectorSplat = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v438, v437, (uint64_t *)&v1838, 1, (uint64_t)&__src, 0);
                              goto LABEL_1750;
                            }
                            if (v25 >= 0x12)
                            {
                              if (*(_QWORD *)v24 == 0x6D2E323135787661
                                && *((_QWORD *)v24 + 1) == 0x747271732E6B7361
                                && *((_WORD *)v24 + 8) == 28718)
                              {
                                if (((llvm::CallBase::arg_end(v1837)
                                     - ((_QWORD)v1837
                                      - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80)
                                  goto LABEL_592;
                                v477 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                v478 = v477[12];
                                if (*(_BYTE *)(v478 + 16) != 16)
                                  goto LABEL_645;
                                v479 = (_QWORD *)(v478 + 24);
                                if (*(_DWORD *)(v478 + 32) >= 0x41u)
                                  v479 = (_QWORD *)*v479;
                                if (*v479 == 4)
                                {
LABEL_592:
                                  v480 = *(uint64_t **)(v3 + 40);
                                  *(_QWORD *)&v1864 = *(_QWORD *)v1837;
                                  v481 = llvm::Intrinsic::getDeclaration(v480, 307, (BOOL **)&v1864, 1);
                                  if (v481)
                                    v482 = *(_QWORD *)(v481 + 24);
                                  else
                                    v482 = 0;
                                  v1838 = (void *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                  LOWORD(v1846) = 257;
                                  v583 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v482, v481, (uint64_t *)&v1838, 1, (uint64_t)&__src, 0);
                                  v1863[0] = v583;
                                }
                                else
                                {
LABEL_645:
                                  if (*((_BYTE *)v1833 + 18) == 115)
                                    v512 = 12735;
                                  else
                                    v512 = 12734;
                                  *(_QWORD *)&v1864 = *v477;
                                  *((_QWORD *)&v1864 + 1) = v478;
                                  Module = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                  v514 = llvm::Intrinsic::getDeclaration(Module, v512, 0, 0);
                                  if (v514)
                                    v515 = *(_QWORD *)(v514 + 24);
                                  else
                                    v515 = 0;
                                  LOWORD(v1846) = 257;
                                  v583 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v515, v514, (uint64_t *)&v1864, 2, (uint64_t)&__src, 0);
                                  v1863[0] = v583;
                                }
                                v618 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                VectorSplat = (BOOL *)EmitX86Select((uint64_t *)&v1847, *((unsigned __int8 **)v618 + 8), (llvm::Type **)v583, *((Value **)v618 + 4));
                                goto LABEL_1750;
                              }
                            }
                            else if (v25 < 0xD)
                            {
                              v433 = 1;
                              v434 = 1;
LABEL_611:
                              v1812 = v254;
                              v1814 = v339;
                              v1825 = v433;
                              v1830 = v434;
                              switch(v25)
                              {
                                case 0xAuLL:
                                  v1819 = v340;
                                  if (!memcmp(v24, "sse.add.ss", v25)
                                    || !memcmp(v24, "sse.sub.ss", v25)
                                    || !memcmp(v24, "sse.mul.ss", v25))
                                  {
                                    goto LABEL_656;
                                  }
                                  v487 = "sse.div.ss";
                                  goto LABEL_654;
                                case 0xBuLL:
                                  v1819 = v340;
                                  if (!memcmp(v24, "sse2.add.sd", v25)
                                    || !memcmp(v24, "sse2.sub.sd", v25)
                                    || !memcmp(v24, "sse2.mul.sd", v25))
                                  {
                                    goto LABEL_656;
                                  }
                                  v487 = "sse2.div.sd";
LABEL_654:
                                  if (!memcmp(v24, v487, v25))
                                  {
LABEL_656:
                                    v518 = (llvm::ConstantInt *)llvm::Type::getInt32Ty(DesiredBytecodeVersion, v22);
                                    v519 = (llvm::Value *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                    v520 = (llvm::Value *)llvm::ConstantInt::get(v518, 0, 0);
                                    LOWORD(v1846) = 257;
                                    Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)&v1847, v519, v520, (const llvm::Twine *)&__src);
                                    v522 = (llvm::Value *)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                    v523 = (llvm::Value *)llvm::ConstantInt::get(v518, 0, 0);
                                    LOWORD(v1846) = 257;
                                    v524 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)&v1847, v522, v523, (const llvm::Twine *)&__src);
                                    if (llvm::StringRef::find((uint64_t *)&v1833, ".add.", 5uLL, 0) == -1)
                                    {
                                      if (llvm::StringRef::find((uint64_t *)&v1833, ".sub.", 5uLL, 0) == -1)
                                      {
                                        if (llvm::StringRef::find((uint64_t *)&v1833, ".mul.", 5uLL, 0) == -1)
                                        {
                                          LOWORD(v1846) = 257;
                                          FDiv = llvm::IRBuilderBase::CreateFDiv((llvm::IRBuilderBase *)&v1847, (int8x16_t *)Element, v524, (const llvm::Twine *)&__src, 0);
                                        }
                                        else
                                        {
                                          LOWORD(v1846) = 257;
                                          FDiv = llvm::IRBuilderBase::CreateFMul((llvm::IRBuilderBase *)&v1847, (int8x16_t *)Element, v524, (const llvm::Twine *)&__src, 0);
                                        }
                                      }
                                      else
                                      {
                                        LOWORD(v1846) = 257;
                                        FDiv = llvm::IRBuilderBase::CreateFSub((llvm::IRBuilderBase *)&v1847, (int8x16_t *)Element, v524, (const llvm::Twine *)&__src, 0);
                                      }
                                      FAdd = FDiv;
                                    }
                                    else
                                    {
                                      LOWORD(v1846) = 257;
                                      FAdd = llvm::IRBuilderBase::CreateFAdd((llvm::IRBuilderBase *)&v1847, (int8x16_t *)Element, v524, (const llvm::Twine *)&__src, 0);
                                    }
                                    v667 = (llvm::Value *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                    v668 = (llvm::Value *)llvm::ConstantInt::get(v518, 0, 0);
                                    LOWORD(v1846) = 257;
                                    VectorSplat = (BOOL *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)&v1847, v667, (llvm::Value *)FAdd, v668, (const llvm::Twine *)&__src);
                                    goto LABEL_1750;
                                  }
                                  v516 = 1;
                                  v517 = 1;
                                  goto LABEL_685;
                                case 0xCuLL:
                                  v526 = v340;
                                  if (memcmp(v24, "avx512.kor.w", v25))
                                    goto LABEL_669;
                                  v527 = getX86MaskVec((uint64_t *)&v1847, *((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)), 0x10u);
                                  v528 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4], 0x10u);
                                  LOWORD(v1846) = 257;
                                  Not = (BOOL *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v527, (llvm::Value *)v528, (const llvm::Twine *)&__src);
                                  goto LABEL_965;
                                case 0xDuLL:
                                  if (*(_QWORD *)v24 != 0x6B2E323135787661
                                    || *(_QWORD *)(v24 + 5) != 0x772E646E616B2E32)
                                  {
                                    v526 = v340;
                                    if (memcmp(v24, "avx512.kxor.w", v25))
                                    {
                                      if (!memcmp(v24, "avx512.knot.w", v25))
                                      {
                                        v1863[0] = (BOOL *)getX86MaskVec((uint64_t *)&v1847, *((llvm::LLVMContext **)v1837- 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)), 0x10u);
                                        LOWORD(v1846) = 257;
                                        Not = (BOOL *)llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)&v1847, (llvm::Constant **)v1863[0], (const llvm::Twine *)&__src);
                                        v531 = (llvm::Type **)Not;
LABEL_966:
                                        v1863[0] = Not;
                                        v661 = *(llvm::Type **)v1837;
                                        LOWORD(v1846) = 257;
                                        inserted = (BOOL *)llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v531, v661, (const llvm::Twine *)&__src);
                                        goto LABEL_1056;
                                      }
                                      goto LABEL_669;
                                    }
                                    v656 = getX86MaskVec((uint64_t *)&v1847, *((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)), 0x10u);
                                    v657 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4], 0x10u);
                                    LOWORD(v1846) = 257;
                                    v658 = v656;
LABEL_964:
                                    Not = (BOOL *)llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v658, (llvm::Value *)v657, (const llvm::Twine *)&__src);
                                    goto LABEL_965;
                                  }
                                  v623 = getX86MaskVec((uint64_t *)&v1847, *((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)), 0x10u);
                                  v624 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4], 0x10u);
                                  LOWORD(v1846) = 257;
                                  v625 = v623;
                                  goto LABEL_912;
                                case 0xEuLL:
                                  v526 = v340;
                                  if (memcmp(v24, "avx512.kandn.w", v25))
                                  {
                                    if (memcmp(v24, "avx512.kxnor.w", v25))
                                    {
LABEL_669:
                                      v516 = 1;
                                      v517 = 1;
                                      v340 = v526;
LABEL_686:
                                      if (!v253
                                        && *(_QWORD *)v24 == 0x632E323135787661
                                        && *((_DWORD *)v24 + 2) == 1882091629)
                                      {
                                        v609 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                        v610 = llvm::CallBase::arg_end(v1837);
                                        *(_QWORD *)&v1864 = v609;
                                        *((_QWORD *)&v1864 + 1) = v610;
                                        llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *>(&__src, (uint64_t)&v1864);
                                        v611 = **(llvm::Type ***)__src;
                                        *(_QWORD *)&v1864 = llvm::Type::getPrimitiveSizeInBits(v611);
                                        *((_QWORD *)&v1864 + 1) = v612;
                                        v613 = llvm::TypeSize::operator unsigned long long(&v1864, v612);
                                        ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v611);
                                        if (v613 == 128 && ScalarSizeInBits == 32)
                                        {
                                          v617 = 12310;
                                        }
                                        else if (v613 == 256 && ScalarSizeInBits == 32)
                                        {
                                          v617 = 12311;
                                        }
                                        else if (v613 == 512 && ScalarSizeInBits == 32)
                                        {
                                          v617 = 12312;
                                        }
                                        else if (v613 == 128 && ScalarSizeInBits == 64)
                                        {
                                          v617 = 12307;
                                        }
                                        else if (ScalarSizeInBits == 64 && v613 == 256)
                                        {
                                          v617 = 12308;
                                        }
                                        else
                                        {
                                          v617 = 12309;
                                        }
                                        AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v1837, v615, v616);
                                        v698 = (uint64_t)AllOnesValue;
                                        if (v613 == 512)
                                        {
                                          v699 = (char *)__src + 8 * ParamAttrs;
                                          v700 = *((_QWORD *)v699 - 1);
                                          *((_QWORD *)v699 - 1) = AllOnesValue;
                                          v698 = v700;
                                        }
                                        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&__src, v698);
                                        v701 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), v617, 0, 0);
                                        if (v701)
                                          v702 = *(_QWORD *)(v701 + 24);
                                        else
                                          v702 = 0;
                                        v1866 = 257;
                                        v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v702, v701, (uint64_t *)__src, ParamAttrs, (uint64_t)&v1864, 0);
                                        v703 = __src;
                                        if (__src == (llvm::MDNode *)&v1844)
                                          goto LABEL_1820;
LABEL_1033:
                                        free(v703);
                                        goto LABEL_1820;
                                      }
                                      if ((v517 & 1) == 0
                                        && (*(_QWORD *)v24 == 0x6D2E323135787661
                                          ? (v536 = *((_QWORD *)v24 + 1) == 0x2E706D632E6B7361)
                                          : (v536 = 0),
                                            v536))
                                      {
                                        v619 = v1837;
                                        v620 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                                        v621 = (_QWORD *)(v620 + 24);
                                        if (*(_DWORD *)(v620 + 32) >= 0x41u)
                                          v621 = (_QWORD *)*v621;
                                        v622 = *(_DWORD *)v621;
                                      }
                                      else
                                      {
                                        v1820 = v516;
                                        if ((v340 & 1) != 0)
                                        {
LABEL_697:
                                          if (v25 == 16
                                            && (*(_QWORD *)v24 == 0x61702E3365737373
                                              ? (v537 = *((_QWORD *)v24 + 1) == 0x3832312E622E7362)
                                              : (v537 = 0),
                                                v537
                                             || (*(_QWORD *)v24 == 0x61702E3365737373
                                               ? (v538 = *((_QWORD *)v24 + 1) == 0x3832312E772E7362)
                                               : (v538 = 0),
                                                 v538
                                              || (*(_QWORD *)v24 == 0x61702E3365737373
                                                ? (v539 = *((_QWORD *)v24 + 1) == 0x3832312E642E7362)
                                                : (v539 = 0),
                                                  v539)))
                                            || (v1814 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x6261702E32787661
                                              ? (v540 = v24[8] == 115)
                                              : (v540 = 0),
                                                v540)
                                            || (v517 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x6D2E323135787661
                                              ? (v541 = *((_QWORD *)v24 + 1) == 0x736261702E6B7361)
                                              : (v541 = 0),
                                                v541))
                                          {
                                            inserted = (BOOL *)upgradeAbs((uint64_t)&v1847, v1837);
                                            goto LABEL_923;
                                          }
                                          v1810 = v517;
                                          if (v25 == 12
                                            && (*(_QWORD *)v24 == 0x6D702E3134657373
                                              ? (v542 = *((unsigned int *)v24 + 2) == 1651734625)
                                              : (v542 = 0),
                                                v542
                                             || (*(_QWORD *)v24 == 0x616D702E32657373
                                               ? (v543 = *((unsigned int *)v24 + 2) == 1999532920)
                                               : (v543 = 0),
                                                 v543
                                              || (*(_QWORD *)v24 == 0x6D702E3134657373
                                                ? (v544 = *((unsigned int *)v24 + 2) == 1685289057)
                                                : (v544 = 0),
                                                  v544)))
                                            || (v1812 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x616D702E32787661
                                              ? (v545 = *((unsigned __int16 *)v24 + 4) == 29560)
                                              : (v545 = 0),
                                                v545)
                                            || (v340 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x6D2E323135787661
                                              ? (v546 = *((_QWORD *)v24 + 1) == 0x78616D702E6B7361)
                                              : (v546 = 0),
                                                v546 ? (v547 = v24[16] == 115) : (v547 = 0),
                                                v547))
                                          {
                                            inserted = (BOOL *)UpgradeX86BinaryIntrinsics((uint64_t *)&v1847, v1837, 301);
                                            goto LABEL_923;
                                          }
                                          if (v25 == 12
                                            && (*(_QWORD *)v24 == 0x616D702E32657373
                                              ? (v548 = *((unsigned int *)v24 + 2) == 1647211896)
                                              : (v548 = 0),
                                                v548
                                             || (*(_QWORD *)v24 == 0x6D702E3134657373
                                               ? (v549 = *((unsigned int *)v24 + 2) == 2004187233)
                                               : (v549 = 0),
                                                 v549
                                              || (*(_QWORD *)v24 == 0x6D702E3134657373
                                                ? (v550 = *((_DWORD *)v24 + 2) == 1685420129)
                                                : (v550 = 0),
                                                  v550)))
                                            || (v1812 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x616D702E32787661
                                              ? (v551 = *((unsigned __int16 *)v24 + 4) == 30072)
                                              : (v551 = 0),
                                                v551)
                                            || (v340 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x6D2E323135787661
                                              ? (v552 = *((_QWORD *)v24 + 1) == 0x78616D702E6B7361)
                                              : (v552 = 0),
                                                v552 ? (v553 = v24[16] == 117) : (v553 = 0),
                                                v553))
                                          {
                                            inserted = (BOOL *)UpgradeX86BinaryIntrinsics((uint64_t *)&v1847, v1837, 333);
                                            goto LABEL_923;
                                          }
                                          if (v25 == 12
                                            && (*(_QWORD *)v24 == 0x6D702E3134657373
                                              ? (v554 = *((_DWORD *)v24 + 2) == 1651732073)
                                              : (v554 = 0),
                                                v554
                                             || (*(_QWORD *)v24 == 0x696D702E32657373
                                               ? (v555 = *((_DWORD *)v24 + 2) == 1999532910)
                                               : (v555 = 0),
                                                 v555
                                              || (*(_QWORD *)v24 == 0x6D702E3134657373
                                                ? (v556 = *((_DWORD *)v24 + 2) == 1685286505)
                                                : (v556 = 0),
                                                  v556)))
                                            || (v1812 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x696D702E32787661
                                              ? (v557 = *((unsigned __int16 *)v24 + 4) == 29550)
                                              : (v557 = 0),
                                                v557)
                                            || (v340 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x6D2E323135787661
                                              ? (v558 = *((_QWORD *)v24 + 1) == 0x6E696D702E6B7361)
                                              : (v558 = 0),
                                                v558 ? (v559 = v24[16] == 115) : (v559 = 0),
                                                v559))
                                          {
                                            inserted = (BOOL *)UpgradeX86BinaryIntrinsics((uint64_t *)&v1847, v1837, 302);
                                            goto LABEL_923;
                                          }
                                          if (v25 == 12
                                            && (*(_QWORD *)v24 == 0x696D702E32657373
                                              ? (v560 = *((_DWORD *)v24 + 2) == 1647211886)
                                              : (v560 = 0),
                                                v560
                                             || (*(_QWORD *)v24 == 0x6D702E3134657373
                                               ? (v561 = *((_DWORD *)v24 + 2) == 2004184681)
                                               : (v561 = 0),
                                                 v561
                                              || (*(_QWORD *)v24 == 0x6D702E3134657373
                                                ? (v562 = *((unsigned int *)v24 + 2) == 1685417577)
                                                : (v562 = 0),
                                                  v562)))
                                            || (v1812 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x696D702E32787661
                                              ? (v563 = *((unsigned __int16 *)v24 + 4) == 30062)
                                              : (v563 = 0),
                                                v563)
                                            || (v340 & 1) == 0
                                            && (*(_QWORD *)v24 == 0x6D2E323135787661
                                              ? (v564 = *((_QWORD *)v24 + 1) == 0x6E696D702E6B7361)
                                              : (v564 = 0),
                                                v564 ? (v565 = v24[16] == 117) : (v565 = 0),
                                                v565))
                                          {
                                            inserted = (BOOL *)UpgradeX86BinaryIntrinsics((uint64_t *)&v1847, v1837, 334);
                                            goto LABEL_923;
                                          }
                                          if (v25 == 19)
                                          {
                                            if (!memcmp(v24, "avx512.pmulu.dq.512", 0x13uLL))
                                              goto LABEL_1079;
                                          }
                                          else if (v25 == 13)
                                          {
                                            if (*(_QWORD *)v24 == 0x756D702E32657373
                                              && *(_QWORD *)(v24 + 5) == 0x71642E756C756D70)
                                            {
                                              goto LABEL_1079;
                                            }
                                            if (*(_QWORD *)v24 == 0x756D702E32787661
                                              && *(_QWORD *)(v24 + 5) == 0x71642E756C756D70)
                                            {
                                              goto LABEL_1079;
                                            }
                                          }
                                          if ((v1820 & 1) != 0
                                            || (*(_QWORD *)v24 == 0x6D2E323135787661
                                              ? (v708 = *((_QWORD *)v24 + 1) == 0x6C756D702E6B7361)
                                              : (v708 = 0),
                                                v708
                                              ? (v709 = *(_QWORD *)(v24 + 13) == 0x2E71642E756C756DLL)
                                              : (v709 = 0),
                                                !v709))
                                          {
                                            if (v25 == 18)
                                            {
                                              if (memcmp(v24, "avx512.pmul.dq.512", 0x12uLL))
                                              {
LABEL_1126:
                                                if ((v1820 & 1) != 0
                                                  || (*v1833 == (Value *)0x6D2E323135787661
                                                    ? (v727 = v1833[1] == (Value *)0x647476632E6B7361)
                                                    : (v727 = 0),
                                                      v727
                                                    ? (v728 = *(Value **)((char *)v1833 + 13) == (Value *)0x2E64703271647476)
                                                    : (v728 = 0),
                                                      !v728))
                                                {
                                                  if (v1830
                                                    || (*v1833 == (Value *)0x6D2E323135787661
                                                      ? (v729 = v1833[1] == (Value *)0x757476632E6B7361)
                                                      : (v729 = 0),
                                                        v729
                                                      ? (v730 = *(Value **)((char *)v1833 + 14) == (Value *)0x2E64703271647574)
                                                      : (v730 = 0),
                                                        !v730))
                                                  {
                                                    if ((v1820 & 1) != 0
                                                      || (*v1833 == (Value *)0x6D2E323135787661
                                                        ? (v731 = v1833[1] == (Value *)0x647476632E6B7361)
                                                        : (v731 = 0),
                                                          v731
                                                        ? (v732 = *(Value **)((char *)v1833 + 13) == (Value *)0x2E73703271647476)
                                                        : (v732 = 0),
                                                          !v732))
                                                    {
                                                      if (v1830
                                                        || (*v1833 == (Value *)0x6D2E323135787661
                                                          ? (v733 = v1833[1] == (Value *)0x757476632E6B7361)
                                                          : (v733 = 0),
                                                            v733
                                                          ? (v734 = *(Value **)((char *)v1833 + 14) == (Value *)0x2E73703271647574)
                                                          : (v734 = 0),
                                                            !v734))
                                                      {
                                                        if ((v1820 & 1) != 0
                                                          || (*v1833 == (Value *)0x6D2E323135787661
                                                            ? (v735 = v1833[1] == (Value *)0x717476632E6B7361)
                                                            : (v735 = 0),
                                                              v735
                                                            ? (v736 = *(Value **)((char *)v1833 + 13) == (Value *)0x2E64703271717476)
                                                            : (v736 = 0),
                                                              !v736))
                                                        {
                                                          if (v1830
                                                            || (*v1833 == (Value *)0x6D2E323135787661
                                                              ? (v737 = v1833[1] == (Value *)0x757476632E6B7361)
                                                              : (v737 = 0),
                                                                v737
                                                              ? (v738 = *(Value **)((char *)v1833 + 14) == (Value *)0x2E64703271717574)
                                                              : (v738 = 0),
                                                                !v738))
                                                          {
                                                            switch(v25)
                                                            {
                                                              case 0xDuLL:
                                                                v739 = "sse2.cvtps2pd";
                                                                goto LABEL_1177;
                                                              case 0x12uLL:
                                                                v739 = "avx.cvt.ps2.pd.256";
LABEL_1177:
                                                                if (!memcmp(v24, v739, v25))
                                                                  goto LABEL_1337;
                                                                goto LABEL_1214;
                                                              case 0x18uLL:
                                                                if (*(_QWORD *)v24 != 0x6D2E323135787661
                                                                  || *((_QWORD *)v24 + 1) != 0x717476632E6B7361
                                                                  || *((_QWORD *)v24 + 2) != 0x3635322E73703271)
                                                                {
                                                                  v742 = *(_QWORD *)v24 == 0x6D2E323135787661
                                                                      && *((_QWORD *)v24 + 1) == 0x717476632E6B7361;
                                                                  v743 = v742
                                                                      && *((_QWORD *)v24 + 2) == 0x3231352E73703271;
                                                                  if (!v743
                                                                    && memcmp(v24, "avx512.mask.cvtps2pd.128", v25))
                                                                  {
                                                                    v744 = *(_QWORD *)v24 == 0x6D2E323135787661
                                                                        && *((_QWORD *)v24 + 1) == 0x707476632E6B7361;
                                                                    if (!v744
                                                                      || *((_QWORD *)v24 + 2) != 0x3635322E64703273)
                                                                    {
                                                                      goto LABEL_1214;
                                                                    }
                                                                  }
                                                                }
                                                                goto LABEL_1337;
                                                              case 0x19uLL:
                                                                if (memcmp(v24, "avx512.mask.cvtuqq2ps.256", v25))
                                                                {
                                                                  v746 = *(_QWORD *)v24 == 0x6D2E323135787661
                                                                      && *((_QWORD *)v24 + 1) == 0x757476632E6B7361;
                                                                  v747 = v746
                                                                      && *((_QWORD *)v24 + 2) == 0x31352E7370327171;
                                                                  if (!v747 || v24[24] != 50)
                                                                    goto LABEL_1214;
                                                                }
                                                                goto LABEL_1337;
                                                              default:
LABEL_1214:
                                                                if (v1830
                                                                  || (*v1833 == (Value *)0x6D2E323135787661
                                                                    ? (v749 = v1833[1] == (Value *)0x747663762E6B7361)
                                                                    : (v749 = 0),
                                                                      v749
                                                                    ? (v750 = *(Value **)((char *)v1833 + 14) == (Value *)0x2E73703268707476)
                                                                    : (v750 = 0),
                                                                      !v750))
                                                                {
                                                                  if ((v1812 & 1) != 0
                                                                    || (*v1833 == (Value *)0x7032687074766376
                                                                      ? (v751 = *((unsigned __int16 *)v1833 + 4) == 11891)
                                                                      : (v751 = 0),
                                                                        !v751))
                                                                  {
                                                                    if ((v1810 & 1) == 0
                                                                      && *v1833 == (Value *)0x6D2E323135787661
                                                                      && v1833[1] == (Value *)0x64616F6C2E6B7361)
                                                                    {
                                                                      v814 = (char *)v1837
                                                                           - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                      inserted = (BOOL *)UpgradeMaskedLoad((uint64_t)&v1847, *(unsigned __int8 ***)v814, *((llvm::PointerType ****)v814+ 4), *((unsigned __int8 **)v814 + 8), *((unsigned __int8 *)v1833+ 16) != 117);
                                                                      goto LABEL_923;
                                                                    }
                                                                    if (v25 < 0x18)
                                                                      goto LABEL_1251;
                                                                    if (*v1833 == (Value *)0x6D2E323135787661
                                                                      && v1833[1] == (Value *)0x617078652E6B7361
                                                                      && v1833[2] == (Value *)0x2E64616F6C2E646ELL)
                                                                    {
                                                                      v815 = *(llvm::Type **)v1837;
                                                                      v816 = (llvm::Type **)*((_QWORD *)v1837
                                                                                            - 4
                                                                                            * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                      v817 = (llvm::Type *)llvm::PointerType::get(*(llvm::PointerType ***)(*(_QWORD *)v1837 + 24), 0);
                                                                      LOWORD(v1846) = 257;
                                                                      v818 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v816, v817, (const llvm::Twine *)&__src);
                                                                      v819 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837- 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8], *((_DWORD *)v815 + 8));
                                                                      v820 = *(uint64_t **)(v3 + 40);
                                                                      __src = v815;
                                                                      v821 = llvm::Intrinsic::getDeclaration(v820, 206, (BOOL **)&__src, 1);
                                                                      v810 = v821;
                                                                      if (v821)
                                                                        v811 = *(_QWORD *)(v821 + 24);
                                                                      else
                                                                        v811 = 0;
                                                                      *(_QWORD *)&v1864 = v818;
                                                                      *((_QWORD *)&v1864 + 1) = v819;
                                                                      *(_QWORD *)&v1865 = ((_QWORD *)v1837
                                                                                         - 4
                                                                                         * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                                    }
                                                                    else
                                                                    {
                                                                      if (v25 < 0x1B
                                                                        || (*v1833 == (Value *)0x6D2E323135787661
                                                                          ? (v755 = v1833[1] == (Value *)0x706D6F632E6B7361)
                                                                          : (v755 = 0),
                                                                            v755
                                                                          ? (v756 = v1833[2] == (Value *)0x6F74732E73736572)
                                                                          : (v756 = 0),
                                                                            v756
                                                                          ? (v757 = *(Value **)((char *)v1833 + 19) == (Value *)0x2E65726F74732E73)
                                                                          : (v757 = 0),
                                                                            !v757))
                                                                      {
LABEL_1251:
                                                                        if ((v1820 & 1) != 0
                                                                          || (*v1833 == (Value *)0x6D2E323135787661
                                                                            ? (v758 = v1833[1] == (Value *)0x706D6F632E6B7361)
                                                                            : (v758 = 0),
                                                                              v758
                                                                            ? (v759 = *(Value **)((char *)v1833 + 13) == (Value *)0x2E73736572706D6FLL)
                                                                            : (v759 = 0),
                                                                              !v759))
                                                                        {
                                                                          if (v25 < 0x13
                                                                            || (*v1833 == (Value *)0x6D2E323135787661
                                                                              ? (v760 = v1833[1] == (Value *)0x617078652E6B7361)
                                                                              : (v760 = 0),
                                                                                v760
                                                                              ? (v761 = *(Value **)((char *)v1833 + 11) == (Value *)0x2E646E617078652ELL)
                                                                              : (v761 = 0),
                                                                                !v761))
                                                                          {
                                                                            if ((v1814 & 1) != 0
                                                                              || (*v1833 == (Value *)0x6F6370762E706F78
                                                                                ? (v762 = *((_BYTE *)v1833 + 8) == 109)
                                                                                : (v762 = 0),
                                                                                  !v762))
                                                                            {
                                                                              if ((v1812 & 1) == 0
                                                                                && (*v1833 == (Value *)0x6D6370762E706F78
                                                                                  ? (v763 = *((unsigned __int16 *)v1833
                                                                                            + 4) == 30319)
                                                                                  : (v763 = 0),
                                                                                    v763))
                                                                              {
                                                                                v826 = (llvm::Constant **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                                                                                LOWORD(v1846) = 257;
                                                                                v827 = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)&v1847, v826, (const llvm::Twine *)&__src);
                                                                                v828 = (llvm::Value *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                LOWORD(v1846) = 257;
                                                                                v829 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)&v1847, v828, (llvm::Value *)v826, (const llvm::Twine *)&__src);
                                                                                v830 = (llvm::Value *)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                                                LOWORD(v1846) = 257;
                                                                                v831 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)&v1847, v830, (llvm::Value *)v827, (const llvm::Twine *)&__src);
                                                                                LOWORD(v1846) = 257;
                                                                                inserted = (BOOL *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v829, (llvm::Value *)v831, (const llvm::Twine *)&__src);
                                                                              }
                                                                              else if ((v1814 & 1) == 0
                                                                                     && (*v1833 == (Value *)0x6F7270762E706F78
                                                                                       ? (v764 = *((_BYTE *)v1833 + 8) == 116)
                                                                                       : (v764 = 0),
                                                                                         v764)
                                                                                     || (v309 & 1) == 0
                                                                                     && (*v1833 == (Value *)0x702E323135787661
                                                                                       ? (v765 = *(Value **)((char *)v1833 + 3) == (Value *)0x6C6F72702E323135)
                                                                                       : (v765 = 0),
                                                                                         v765)
                                                                                     || (v1810 & 1) == 0
                                                                                     && (*v1833 == (Value *)0x6D2E323135787661
                                                                                       ? (v766 = v1833[1] == (Value *)0x6C6F72702E6B7361)
                                                                                       : (v766 = 0),
                                                                                         v766))
                                                                              {
                                                                                inserted = (BOOL *)upgradeX86Rotate((llvm::IRBuilderBase *)&v1847, v1837, 0);
                                                                              }
                                                                              else if ((v309 & 1) == 0
                                                                                     && (*v1833 == (Value *)0x702E323135787661
                                                                                       ? (v767 = *(Value **)((char *)v1833 + 3) == (Value *)0x726F72702E323135)
                                                                                       : (v767 = 0),
                                                                                         v767)
                                                                                     || (v1810 & 1) == 0
                                                                                     && (*v1833 == (Value *)0x6D2E323135787661
                                                                                       ? (v768 = v1833[1] == (Value *)0x726F72702E6B7361)
                                                                                       : (v768 = 0),
                                                                                         v768))
                                                                              {
                                                                                inserted = (BOOL *)upgradeX86Rotate((llvm::IRBuilderBase *)&v1847, v1837, 1);
                                                                              }
                                                                              else if (!v1825
                                                                                     && ((v769 = v1833,
                                                                                          *v1833 == (Value *)0x762E323135787661)
                                                                                       ? (v770 = *(Value **)((char *)v1833 + 6) == (Value *)0x2E646C687370762ELL)
                                                                                       : (v770 = 0),
                                                                                         v770)
                                                                                     || v25 >= 0x12
                                                                                     && ((v769 = v1833,
                                                                                          *v1833 == (Value *)0x6D2E323135787661)
                                                                                       ? (v771 = v1833[1] == (Value *)0x687370762E6B7361)
                                                                                       : (v771 = 0),
                                                                                         v771
                                                                                       ? (v772 = *((unsigned __int16 *)v1833
                                                                                                 + 8) == 25708)
                                                                                       : (v772 = 0),
                                                                                         v772
                                                                                      || v25 >= 0x13
                                                                                      && (*v1833 == (Value *)0x6D2E323135787661
                                                                                        ? (v773 = v1833[1] == (Value *)0x7370762E7A6B7361)
                                                                                        : (v773 = 0),
                                                                                          v773
                                                                                        ? (v774 = *(Value **)((char *)v1833 + 11) == (Value *)0x646C687370762E7ALL)
                                                                                        : (v774 = 0),
                                                                                          v774)))
                                                                              {
                                                                                inserted = (BOOL *)upgradeX86ConcatShift((llvm::IRBuilderBase *)&v1847, (BOOL **)v1837, 0, *((unsigned __int8 *)v769 + 11) == 122);
                                                                              }
                                                                              else
                                                                              {
                                                                                if (v1825
                                                                                  || ((v775 = v1833,
                                                                                       *v1833 == (Value *)0x762E323135787661)
                                                                                    ? (v776 = *(Value **)((char *)v1833 + 6) == (Value *)0x2E6472687370762ELL)
                                                                                    : (v776 = 0),
                                                                                      !v776))
                                                                                {
                                                                                  if (v25 < 0x12)
                                                                                  {
                                                                                    if (v25 != 16
                                                                                      || (*(_QWORD *)v24 == 0x72632E3234657373
                                                                                        ? (v777 = *((_QWORD *)v24 + 1) == 0x382E34362E323363)
                                                                                        : (v777 = 0),
                                                                                          !v777))
                                                                                    {
LABEL_1406:
                                                                                      if ((v1810 & 1) == 0
                                                                                        && (*v1833 == (Value *)0x6F7262762E787661
                                                                                          ? (v848 = v1833[1] == (Value *)0x732E747361636461)
                                                                                          : (v848 = 0),
                                                                                            v848)
                                                                                        || v25 >= 0x13
                                                                                        && (*v1833 == (Value *)0x762E323135787661
                                                                                          ? (v849 = v1833[1] == (Value *)0x73616364616F7262)
                                                                                          : (v849 = 0),
                                                                                            v849
                                                                                          ? (v850 = *(Value **)((char *)v1833 + 11) == (Value *)0x732E747361636461)
                                                                                          : (v850 = 0),
                                                                                            v850))
                                                                                      {
                                                                                        v1744 = *(llvm::PoisonValue **)v1837;
                                                                                        v1745 = *(llvm::Type **)(*(_QWORD *)v1837 + 24);
                                                                                        v1746 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                        v1747 = *((_QWORD *)v1837
                                                                                                - 4
                                                                                                * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                        LOWORD(v1846) = 257;
                                                                                        AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)&v1847, v1745, v1747, 0, 0, (uint64_t)&__src);
                                                                                        v1750 = (llvm::ConstantInt *)llvm::Type::getInt32Ty(DesiredBytecodeVersion, v1749);
                                                                                        v1752 = (BOOL *)llvm::PoisonValue::get(v1744, v1751);
                                                                                        v1863[0] = v1752;
                                                                                        if ((_DWORD)v1746)
                                                                                        {
                                                                                          InsertElement = (llvm::InsertElementInst *)v1752;
                                                                                          for (i = 0; i != v1746; ++i)
                                                                                          {
                                                                                            v1755 = (llvm::Value *)llvm::ConstantInt::get(v1750, i, 0);
                                                                                            LOWORD(v1846) = 257;
                                                                                            InsertElement = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)&v1847, InsertElement, (llvm::Value *)AlignedLoad, v1755, (const llvm::Twine *)&__src);
                                                                                            v1863[0] = (BOOL *)InsertElement;
                                                                                          }
                                                                                        }
                                                                                        goto LABEL_1820;
                                                                                      }
                                                                                      if (v253
                                                                                        || (*v1833 == (Value *)0x6D702E3134657373
                                                                                          ? (v851 = *((_DWORD *)v1833 + 2) == 2020832879)
                                                                                          : (v851 = 0),
                                                                                            !v851
                                                                                         && (*v1833 == (Value *)0x6D702E3134657373
                                                                                           ? (v852 = *((unsigned int *)v1833 + 2) == 2021291631)
                                                                                           : (v852 = 0),
                                                                                             !v852)))
                                                                                      {
                                                                                        if ((v309 & 1) != 0
                                                                                          || (*v1833 == (Value *)0x6F6D702E32787661
                                                                                            ? (v853 = *(Value **)((char *)v1833 + 3) == (Value *)0x7873766F6D702E32)
                                                                                            : (v853 = 0),
                                                                                              !v853
                                                                                           && (*v1833 == (Value *)0x6F6D702E32787661
                                                                                             ? (v854 = *(Value **)((char *)v1833 + 3) == (Value *)0x787A766F6D702E32)
                                                                                             : (v854 = 0),
                                                                                               !v854)))
                                                                                        {
                                                                                          if (v25 < 0x12
                                                                                            || (*v1833 == (Value *)0x6D2E323135787661
                                                                                              ? (v855 = v1833[1] == (Value *)0x766F6D702E6B7361)
                                                                                              : (v855 = 0),
                                                                                                v855
                                                                                              ? (v856 = *((unsigned __int16 *)v1833 + 8) == 30835)
                                                                                              : (v856 = 0),
                                                                                                !v856
                                                                                             && (*v1833 == (Value *)0x6D2E323135787661
                                                                                               ? (v857 = v1833[1] == (Value *)0x766F6D702E6B7361)
                                                                                               : (v857 = 0),
                                                                                                 v857
                                                                                               ? (v858 = *((unsigned __int16 *)v1833 + 8) == 30842)
                                                                                               : (v858 = 0),
                                                                                                 !v858)))
                                                                                          {
                                                                                            v83 = 1;
                                                                                            v84 = v1834;
                                                                                            v85 = v1833;
                                                                                            if (v1834 == 23)
                                                                                            {
LABEL_84:
                                                                                              v87 = *v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x766F6D702E6B7361 && *(Value **)((char *)v85 + 15) == (Value *)0x3635322E64712E76;
                                                                                              if (v87
                                                                                                || (*v85 == (Value *)0x6D2E323135787661 ? (v88 = v85[1] == (Value *)0x766F6D702E6B7361) : (v88 = 0),
                                                                                                    v88 ? (v89 = *(Value **)((char *)v85 + 15) == (Value *)0x3231352E64712E76) : (v89 = 0),
                                                                                                    v89 || (*v85 == (Value *)0x6D2E323135787661 ? (v90 = v85[1] == (Value *)0x766F6D702E6B7361) : (v90 = 0), v90 ? (v91 = *(Value **)((char *)v85 + 15) == (Value *)0x3635322E62772E76) : (v91 = 0), v91 || (*v85 == (Value *)0x6D2E323135787661 ? (v92 = v85[1] == (Value *)0x766F6D702E6B7361) : (v92 = 0), v92 ? (v93 = *(Value **)((char *)v85 + 15) == (Value *)0x3231352E62772E76) : (v93 = 0), v93))))
                                                                                              {
                                                                                                v96 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                v97 = **((_QWORD **)v96 + 4);
                                                                                                v98 = *(llvm::Value **)v96;
                                                                                                v1866 = 257;
                                                                                                if (*(_QWORD *)v98 == v97)
                                                                                                {
                                                                                                  Select = v98;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  Select = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v1853 + 15))(v1853, 38, v98, v97);
                                                                                                  if (!Select)
                                                                                                  {
                                                                                                    LOWORD(v1846) = 257;
                                                                                                    llvm::CastInst::Create(38);
                                                                                                    Select = v100;
                                                                                                    (*((void (**)(void **, llvm::Value *, __int128 *, uint64_t, char *))*v1854 + 2))(v1854, v100, &v1864, v1850, v1851);
                                                                                                    if ((_DWORD)v1848)
                                                                                                    {
                                                                                                      v101 = v1847;
                                                                                                      v102 = (llvm::Type *)((char *)v1847 + 16 * v1848);
                                                                                                      do
                                                                                                      {
                                                                                                        llvm::Instruction::setMetadata((unsigned __int8 **)Select, *(_DWORD *)v101, *((llvm::MDNode **)v101 + 1));
                                                                                                        v101 = (llvm::Type *)((char *)v101 + 16);
                                                                                                      }
                                                                                                      while (v101 != v102);
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                v1863[0] = (BOOL *)Select;
                                                                                                v103 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                v104 = (unsigned __int8 *)*((_QWORD *)v103 + 8);
                                                                                                v105 = (Value *)*((_QWORD *)v103 + 4);
                                                                                                if (v104)
                                                                                                  v106 = v104[16] > 0x14u;
                                                                                                else
                                                                                                  v106 = 1;
                                                                                                if (v106 || !llvm::Constant::isAllOnesValue((llvm::Constant *)v104))
                                                                                                {
                                                                                                  v107 = getX86MaskVec((uint64_t *)&v1847, (llvm::LLVMContext *)v104, *(_DWORD *)(*(_QWORD *)Select + 32));
                                                                                                  LOWORD(v1846) = 257;
                                                                                                  Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1847, (Value *)v107, (llvm::Type **)Select, v105, (const llvm::Twine *)&__src, 0);
                                                                                                }
                                                                                                v1863[0] = (BOOL *)Select;
                                                                                                goto LABEL_1826;
                                                                                              }
                                                                                              if ((v83 & 1) == 0)
                                                                                                goto LABEL_1486;
                                                                                              if (*v85 != (Value *)0x6F7262762E787661
                                                                                                || v85[1] != (Value *)0x3166747361636461
                                                                                                || *((_WORD *)v85 + 8) != 14386)
                                                                                              {
                                                                                                goto LABEL_1514;
                                                                                              }
                                                                                              goto LABEL_1532;
                                                                                            }
LABEL_1453:
                                                                                            if ((v83 & 1) == 0)
                                                                                            {
                                                                                              if (v84 == 19)
                                                                                              {
                                                                                                v878 = *v85 == (Value *)0x6F72706B63617473 && v85[1] == (Value *)0x6863726F74636574;
                                                                                                if (v878 && *(Value **)((char *)v85 + 11) == (Value *)0x6B63656863726F74)
                                                                                                  goto LABEL_3256;
                                                                                              }
                                                                                              goto LABEL_1486;
                                                                                            }
                                                                                            if (v84 < 0x12)
                                                                                            {
                                                                                              if (v84 < 0xF)
                                                                                              {
                                                                                                v859 = 1;
                                                                                                v860 = 1;
                                                                                                v861 = 1;
                                                                                                v862 = 1;
                                                                                                v863 = 1;
                                                                                                v864 = 1;
                                                                                                v865 = 1;
                                                                                                v866 = 1;
                                                                                                v867 = 1;
                                                                                                v868 = 1;
                                                                                                if (v84 < 0xB)
                                                                                                {
LABEL_1457:
                                                                                                  v1831 = v867;
                                                                                                  switch(v84)
                                                                                                  {
                                                                                                    case 0xCuLL:
                                                                                                      v869 = *v85 == (Value *)0x6C73702E32657373 && *((_DWORD *)v85 + 2) == 1902390892;
                                                                                                      if (v869 || (*v85 == (Value *)0x6C73702E32787661 ? (v870 = *((unsigned int *)v85 + 2) == 1902390892) : (v870 = 0), v870))
                                                                                                      {
                                                                                                        v1049 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                        v1050 = *((_QWORD *)v1049 + 4);
                                                                                                        v1051 = (_QWORD *)(v1050 + 24);
                                                                                                        if (*(_DWORD *)(v1050 + 32) >= 0x41u)
                                                                                                          v1051 = (_QWORD *)*v1051;
                                                                                                        v1006 = *(llvm::LLVMContext **)v1049;
                                                                                                        v1005 = *(_DWORD *)v1051 >> 3;
                                                                                                        goto LABEL_1838;
                                                                                                      }
                                                                                                      v1811 = v864;
                                                                                                      v1813 = v859;
                                                                                                      v1809 = v863;
                                                                                                      if ((*v85 != (Value *)0x7273702E32657373 || *((_DWORD *)v85 + 2) != 1902390892) && (*v85 != (Value *)0x7273702E32787661 || *((_DWORD *)v85 + 2) != 1902390892))
                                                                                                        goto LABEL_1649;
                                                                                                      v873 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                      v874 = *((_QWORD *)v873 + 4);
                                                                                                      v875 = (_QWORD *)(v874 + 24);
                                                                                                      if (*(_DWORD *)(v874 + 32) >= 0x41u)
                                                                                                        v875 = (_QWORD *)*v875;
                                                                                                      v876 = *(llvm::LLVMContext **)v873;
                                                                                                      v877 = *(_DWORD *)v875 >> 3;
                                                                                                      goto LABEL_1647;
                                                                                                    case 0xDuLL:
                                                                                                      v1811 = v864;
                                                                                                      v1813 = v859;
                                                                                                      v1807 = v861;
                                                                                                      v1809 = v863;
                                                                                                      v1822 = v865;
                                                                                                      v1827 = v862;
                                                                                                      v963 = v860;
                                                                                                      v964 = v868;
                                                                                                      v1816 = v866;
                                                                                                      v965 = memcmp(v85, "sse41.pblendw", v84);
                                                                                                      v866 = v1816;
                                                                                                      v865 = v1822;
                                                                                                      v862 = v1827;
                                                                                                      v868 = v964;
                                                                                                      v860 = v963;
                                                                                                      v861 = v1807;
                                                                                                      if (!v965)
                                                                                                        goto LABEL_1718;
                                                                                                      goto LABEL_1649;
                                                                                                    case 0xFuLL:
                                                                                                      v1813 = v859;
                                                                                                      v1815 = v866;
                                                                                                      v1821 = v865;
                                                                                                      v1826 = v862;
                                                                                                      v1806 = v868;
                                                                                                      v1809 = v863;
                                                                                                      v958 = v861;
                                                                                                      v959 = v860;
                                                                                                      v1811 = v864;
                                                                                                      if (!memcmp(v85, "sse2.psll.dq.bs", v84))
                                                                                                        goto LABEL_1723;
                                                                                                      if (*v85 == (Value *)0x6C73702E32787661 && *(Value **)((char *)v85 + 7) == (Value *)0x73622E71642E6C6CLL)
                                                                                                        goto LABEL_1723;
                                                                                                      v961 = memcmp(v85, "sse2.psrl.dq.bs", v84);
                                                                                                      v868 = v1806;
                                                                                                      v865 = v1821;
                                                                                                      v862 = v1826;
                                                                                                      v866 = v1815;
                                                                                                      if (v961)
                                                                                                      {
                                                                                                        v860 = v959;
                                                                                                        v861 = v958;
                                                                                                        if (*v85 != (Value *)0x7273702E32787661 || *(Value **)((char *)v85 + 7) != (Value *)0x73622E71642E6C72)
                                                                                                          goto LABEL_1649;
                                                                                                      }
                                                                                                      goto LABEL_1644;
                                                                                                    case 0x12uLL:
                                                                                                      v1813 = v859;
                                                                                                      v1817 = v866;
                                                                                                      v1823 = v865;
                                                                                                      v1828 = v862;
                                                                                                      v1808 = v868;
                                                                                                      v1809 = v863;
                                                                                                      v966 = v860;
                                                                                                      v1811 = v864;
                                                                                                      if (!memcmp(v85, "avx512.psll.dq.512", v84))
                                                                                                      {
LABEL_1723:
                                                                                                        v1002 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                        v1003 = *((_QWORD *)v1002 + 4);
                                                                                                        v1004 = (_QWORD *)(v1003 + 24);
                                                                                                        if (*(_DWORD *)(v1003 + 32) >= 0x41u)
                                                                                                          v1004 = (_QWORD *)*v1004;
                                                                                                        v1005 = *(_DWORD *)v1004;
                                                                                                        v1006 = *(llvm::LLVMContext **)v1002;
LABEL_1838:
                                                                                                        VectorSplat = (BOOL *)UpgradeX86PSLLDQIntrinsics((uint64_t *)&v1847, v1006, v1005);
                                                                                                        goto LABEL_1750;
                                                                                                      }
                                                                                                      v967 = memcmp(v85, "avx512.psrl.dq.512", v84);
                                                                                                      v860 = v966;
                                                                                                      v868 = v1808;
                                                                                                      v865 = v1823;
                                                                                                      v862 = v1828;
                                                                                                      v866 = v1817;
                                                                                                      if (!v967)
                                                                                                      {
LABEL_1644:
                                                                                                        v968 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                        v969 = *((_QWORD *)v968 + 4);
                                                                                                        v970 = (_QWORD *)(v969 + 24);
                                                                                                        if (*(_DWORD *)(v969 + 32) >= 0x41u)
                                                                                                          v970 = (_QWORD *)*v970;
                                                                                                        v877 = *(_DWORD *)v970;
                                                                                                        v876 = *(llvm::LLVMContext **)v968;
LABEL_1647:
                                                                                                        VectorSplat = (BOOL *)UpgradeX86PSRLDQIntrinsics((uint64_t *)&v1847, v876, v877);
                                                                                                        goto LABEL_1750;
                                                                                                      }
LABEL_1649:
                                                                                                      if (*v85 == (Value *)0x6C622E3134657373 && *((_DWORD *)v85 + 2) == 1885630053)
                                                                                                        goto LABEL_1718;
LABEL_1653:
                                                                                                      if ((v866 & 1) != 0 || (*v85 == (Value *)0x6E656C622E787661 ? (v972 = *(Value **)((char *)v85 + 3) == (Value *)0x702E646E656C622ELL) : (v972 = 0), !v972))
                                                                                                      {
                                                                                                        if (v84 != 12 || (*v85 == (Value *)0x6C62702E32787661 ? (v973 = *((_DWORD *)v85 + 2) == 2003070565) : (v973 = 0), !v973))
                                                                                                        {
                                                                                                          if (v865 || (*v85 == (Value *)0x6C62702E32787661 ? (v974 = *(Value **)((char *)v85 + 5) == (Value *)0x2E64646E656C6270) : (v974 = 0), !v974))
                                                                                                          {
                                                                                                            if (v84 < 0x10 || (*v85 == (Value *)0x736E69762E787661 ? (v975 = v85[1] == (Value *)0x2E38323166747265) : (v975 = 0), !v975 && (v84 != 16 || (*v85 == (Value *)0x6E69762E32787661 ? (v976 = v85[1] == (Value *)0x3832316974726573) : (v976 = 0), !v976))))
                                                                                                            {
                                                                                                              if ((v862 & 1) != 0 || (*v85 == (Value *)0x6D2E323135787661 ? (v977 = v85[1] == (Value *)0x65736E692E6B7361) : (v977 = 0), v977 ? (v978 = *((unsigned __int16 *)v85 + 8) == 29810) : (v978 = 0), !v978))
                                                                                                              {
                                                                                                                if ((v1813 & 1) != 0 || (*v85 == (Value *)0x747865762E787661 ? (v979 = v85[1] == (Value *)0x3832316674636172) : (v979 = 0), v979 ? (v980 = *((_BYTE *)v85 + 16) == 46) : (v980 = 0), !v980))
                                                                                                                {
                                                                                                                  if (v84 != 17 || (*v85 == (Value *)0x7865762E32787661 ? (v981 = v85[1] == (Value *)0x3231697463617274) : (v981 = 0), v981 ? (v982 = *((_BYTE *)v85 + 16) == 56) : (v982 = 0), !v982))
                                                                                                                  {
                                                                                                                    if (v868)
                                                                                                                      goto LABEL_1703;
                                                                                                                    if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x747865762E6B7361 || *((_DWORD *)v85 + 4) != 1952670066)
                                                                                                                    {
                                                                                                                      v1092 = *v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x6D7265702E6B7361 && *((_DWORD *)v85 + 4) == 778462254;
                                                                                                                      if (v1092 || (*v85 == (Value *)0x6D2E323135787661 ? (v1093 = v85[1] == (Value *)0x6D7265702E6B7361) : (v1093 = 0), v1093 ? (v1094 = *((unsigned int *)v85 + 4) == 778658862) : (v1094 = 0), v1094))
                                                                                                                      {
                                                                                                                        v1095 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                        v1096 = *v1095;
                                                                                                                        v1097 = v1095[4];
                                                                                                                        v1098 = (_QWORD *)(v1097 + 24);
                                                                                                                        if (*(_DWORD *)(v1097 + 32) >= 0x41u)
                                                                                                                          v1098 = (_QWORD *)*v1098;
                                                                                                                        v1099 = *(_DWORD *)v1098;
                                                                                                                        v1100 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                                                        llvm::SmallVector<int,8u>::SmallVector(&__src, v1100);
                                                                                                                        v1101 = __src;
                                                                                                                        if (!(_DWORD)v1100)
                                                                                                                          goto LABEL_2417;
                                                                                                                        if (v1100 >= 8)
                                                                                                                        {
                                                                                                                          v1102 = v1100 & 0xFFFFFFF8;
                                                                                                                          v1276 = (uint32x4_t)vdupq_n_s32(v1099);
                                                                                                                          v1277 = (int32x4_t)xmmword_181235170;
                                                                                                                          v1278 = (int32x4_t *)((char *)__src + 16);
                                                                                                                          v1279.i64[0] = 0x300000003;
                                                                                                                          v1279.i64[1] = 0x300000003;
                                                                                                                          v1280.i64[0] = 0x600000006;
                                                                                                                          v1280.i64[1] = 0x600000006;
                                                                                                                          v1281.i64[0] = 0x400000004;
                                                                                                                          v1281.i64[1] = 0x400000004;
                                                                                                                          v1282.i64[0] = 0x300000003;
                                                                                                                          v1282.i64[1] = 0x300000003;
                                                                                                                          v1283.i64[0] = 0x800000008;
                                                                                                                          v1283.i64[1] = 0x800000008;
                                                                                                                          v1284 = v1102;
                                                                                                                          do
                                                                                                                          {
                                                                                                                            v1285 = (int8x16_t)vshlq_u32(v1276, (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v1277, v1277), v1280)));
                                                                                                                            v1278[-1] = (int32x4_t)vbslq_s8(v1282, v1285, (int8x16_t)v1277);
                                                                                                                            *v1278 = vaddq_s32((int32x4_t)vbslq_s8(v1279, (int8x16_t)v1277, v1285), v1281);
                                                                                                                            v1277 = vaddq_s32(v1277, v1283);
                                                                                                                            v1278 += 2;
                                                                                                                            v1284 -= 8;
                                                                                                                          }
                                                                                                                          while (v1284);
                                                                                                                          if (v1102 == v1100)
                                                                                                                            goto LABEL_2417;
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                          v1102 = 0;
                                                                                                                        }
                                                                                                                        v1286 = 2 * v1102;
                                                                                                                        do
                                                                                                                        {
                                                                                                                          *((_DWORD *)v1101 + v1102) = v1102 & 0xFFFFFFFC | (v1099 >> (v1286 & 6)) & 3;
                                                                                                                          ++v1102;
                                                                                                                          v1286 += 2;
                                                                                                                        }
                                                                                                                        while (v1100 != v1102);
                                                                                                                        goto LABEL_2417;
                                                                                                                      }
LABEL_1703:
                                                                                                                      if ((v860 & 1) != 0 || (*v85 == (Value *)0x726570762E787661 ? (v983 = *(Value **)((char *)v85 + 7) == (Value *)0x2E38323166326D72) : (v983 = 0), !v983))
                                                                                                                      {
                                                                                                                        if (v84 != 15)
                                                                                                                        {
                                                                                                                          if ((v1811 & 1) != 0)
                                                                                                                          {
                                                                                                                            v1144 = v865;
                                                                                                                            v1145 = v861;
                                                                                                                            v1146 = v860;
                                                                                                                            goto LABEL_2006;
                                                                                                                          }
LABEL_1972:
                                                                                                                          if (*v85 == (Value *)0x726570762E787661 && *((_DWORD *)v85 + 2) == 778856813)
                                                                                                                            goto LABEL_2408;
                                                                                                                          v1144 = v865;
                                                                                                                          v1145 = v861;
                                                                                                                          v1146 = v860;
                                                                                                                          if (v84 == 12)
                                                                                                                          {
                                                                                                                            if (*v85 != (Value *)0x6873702E32657373 || *((_DWORD *)v85 + 2) != 1680762485)
                                                                                                                              goto LABEL_2006;
LABEL_2408:
                                                                                                                            v1323 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                            v1096 = *v1323;
                                                                                                                            v1324 = v1323[4];
                                                                                                                            v1325 = (_QWORD *)(v1324 + 24);
                                                                                                                            if (*(_DWORD *)(v1324 + 32) >= 0x41u)
                                                                                                                              v1325 = (_QWORD *)*v1325;
                                                                                                                            v1326 = *(_DWORD *)v1325;
                                                                                                                            v1327 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                                                            v1328 = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v1837);
                                                                                                                            llvm::SmallVector<int,8u>::SmallVector(&__src, v1327);
                                                                                                                            v1101 = __src;
                                                                                                                            if (!(_DWORD)v1327)
                                                                                                                              goto LABEL_2417;
                                                                                                                            v1329 = 0x40 / v1328;
                                                                                                                            v1330 = -1 << (0x40 / v1328);
                                                                                                                            v1331 = ~v1330;
                                                                                                                            if (v1327 >= 8)
                                                                                                                            {
                                                                                                                              v1333 = vdupq_n_s32(v1329);
                                                                                                                              v1334 = (uint32x4_t)vdupq_n_s32(v1326);
                                                                                                                              v1332 = v1327 & 0xFFFFFFF8;
                                                                                                                              v1335 = (int8x16_t)vdupq_n_s32(v1331);
                                                                                                                              v1336 = (int8x16_t)vdupq_n_s32(v1330);
                                                                                                                              v1337 = (int8x16_t *)((char *)__src + 16);
                                                                                                                              v1338.i64[0] = 0x400000004;
                                                                                                                              v1338.i64[1] = 0x400000004;
                                                                                                                              v1339.i64[0] = 0x700000007;
                                                                                                                              v1339.i64[1] = 0x700000007;
                                                                                                                              v1340 = (int32x4_t)xmmword_181235170;
                                                                                                                              v1341.i64[0] = 0x800000008;
                                                                                                                              v1341.i64[1] = 0x800000008;
                                                                                                                              v1342 = v1332;
                                                                                                                              do
                                                                                                                              {
                                                                                                                                v1343 = vaddq_s32(v1340, v1338);
                                                                                                                                v1337[-1] = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32(v1334, (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)vmulq_s32(v1333, v1340), v1339))), v1335), vandq_s8(v1336, (int8x16_t)v1340));
                                                                                                                                *v1337 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32(v1334, (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)vmulq_s32(v1333, v1343), v1339))), v1335), vandq_s8(v1336, (int8x16_t)v1343));
                                                                                                                                v1340 = vaddq_s32(v1340, v1341);
                                                                                                                                v1337 += 2;
                                                                                                                                v1342 -= 8;
                                                                                                                              }
                                                                                                                              while (v1342);
                                                                                                                              if (v1332 == v1327)
                                                                                                                                goto LABEL_2417;
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              v1332 = 0;
                                                                                                                            }
                                                                                                                            do
                                                                                                                            {
                                                                                                                              *((_DWORD *)v1101 + v1332) = (v1326 >> ((v1329 * v1332) & 7)) & v1331 | v1330 & v1332;
                                                                                                                              ++v1332;
                                                                                                                            }
                                                                                                                            while (v1327 != v1332);
LABEL_2417:
                                                                                                                            v1866 = 257;
                                                                                                                            v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1096, v1096, (uint64_t)v1101, ParamAttrs, (uint64_t)&v1864);
                                                                                                                            if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80)
                                                                                                                              goto LABEL_2420;
                                                                                                                            v1344 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                            v1137 = (unsigned __int8 *)*((_QWORD *)v1344 + 12);
                                                                                                                            v1138 = (llvm::Type **)v1863[0];
                                                                                                                            v1139 = (Value *)*((_QWORD *)v1344 + 8);
LABEL_2419:
                                                                                                                            v1863[0] = (BOOL *)EmitX86Select((uint64_t *)&v1847, v1137, v1138, v1139);
LABEL_2420:
                                                                                                                            v946 = __src;
                                                                                                                            if (__src != (llvm::MDNode *)&v1844)
                                                                                                                              goto LABEL_1819;
                                                                                                                            goto LABEL_1820;
                                                                                                                          }
                                                                                                                          if (v84 >= 0x15)
                                                                                                                          {
                                                                                                                            if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x726570762E6B7361 || *(Value **)((char *)v85 + 13) != (Value *)0x702E6C696D726570)
                                                                                                                            {
                                                                                                                              v1172 = 0;
                                                                                                                              goto LABEL_2007;
                                                                                                                            }
                                                                                                                            goto LABEL_2408;
                                                                                                                          }
LABEL_2006:
                                                                                                                          v1172 = 1;
LABEL_2007:
                                                                                                                          if (v868 || (*v85 == (Value *)0x6D2E323135787661 ? (v1173 = v85[1] == (Value *)0x756873702E6B7361) : (v1173 = 0), v1173 ? (v1174 = *((_DWORD *)v85 + 4) == 778317414) : (v1174 = 0), !v1174))
                                                                                                                          {
                                                                                                                            if (v84 == 13 && (*v85 == (Value *)0x6873702E32657373 ? (v1175 = *(Value **)((char *)v85 + 5) == (Value *)0x772E6C6675687370) : (v1175 = 0), v1175) || (v1172 & 1) == 0 && (*v85 == (Value *)0x6D2E323135787661 ? (v1176 = v85[1] == (Value *)0x756873702E6B7361) : (v1176 = 0), v1176 ? (v1177 = *(Value **)((char *)v85 + 13) == (Value *)0x2E772E6C66756873) : (v1177 = 0), v1177))
                                                                                                                            {
                                                                                                                              v1266 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                              v1267 = *v1266;
                                                                                                                              v1268 = v1266[4];
                                                                                                                              v1269 = (unint64_t *)(v1268 + 24);
                                                                                                                              if (*(_DWORD *)(v1268 + 32) >= 0x41u)
                                                                                                                                v1269 = (unint64_t *)*v1269;
                                                                                                                              v1270 = *v1269;
                                                                                                                              v1271 = *(_DWORD *)(*(_QWORD *)v1837 + 32);
                                                                                                                              llvm::SmallVector<int,16u>::SmallVector(&__src, v1271);
                                                                                                                              v1272 = __src;
                                                                                                                              if (v1271)
                                                                                                                              {
                                                                                                                                v1273 = 0;
                                                                                                                                v1274 = vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v1270), (uint64x2_t)xmmword_181269A50), (int8x16_t)vdupq_n_s64(3uLL));
                                                                                                                                v1275 = (_DWORD *)((char *)__src + 16);
                                                                                                                                do
                                                                                                                                {
                                                                                                                                  *(v1275 - 4) = (v1270 & 3) + v1273;
                                                                                                                                  *(int32x2_t *)(v1275 - 3) = vmovn_s64((int64x2_t)vorrq_s8(v1274, (int8x16_t)vdupq_n_s64(v1273)));
                                                                                                                                  *(v1275 - 1) = (v1270 >> 6) + v1273;
                                                                                                                                  *v1275 = v1273 + 4;
                                                                                                                                  v1275[1] = v1273 + 5;
                                                                                                                                  v1275[2] = v1273 + 6;
                                                                                                                                  v1275[3] = v1273 + 7;
                                                                                                                                  v1275 += 8;
                                                                                                                                  v1273 += 8;
                                                                                                                                }
                                                                                                                                while (v1271 != (_DWORD)v1273);
                                                                                                                              }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              if (v84 != 13 || (*v85 == (Value *)0x6873702E32657373 ? (v1178 = *(Value **)((char *)v85 + 5) == (Value *)0x772E686675687370) : (v1178 = 0), !v1178))
                                                                                                                              {
                                                                                                                                if ((v1172 & 1) != 0 || (*v85 == (Value *)0x6D2E323135787661 ? (v1179 = v85[1] == (Value *)0x756873702E6B7361) : (v1179 = 0), v1179 ? (v1180 = *(Value **)((char *)v85 + 13) == (Value *)0x2E772E6866756873) : (v1180 = 0), !v1180))
                                                                                                                                {
                                                                                                                                  if ((v862 & 1) != 0 || (*v85 == (Value *)0x6D2E323135787661 ? (v1181 = v85[1] == (Value *)0x667568732E6B7361) : (v1181 = 0), v1181 ? (v1182 = *((unsigned __int16 *)v85 + 8) == 28718) : (v1182 = 0), !v1182))
                                                                                                                                  {
                                                                                                                                    if ((v1831 & 1) != 0 || (*v85 == (Value *)0x6D2E323135787661 ? (v1183 = v85[1] == (Value *)0x64766F6D2E6B7361) : (v1183 = 0), v1183 ? (v1184 = *(Value **)((char *)v85 + 11) == (Value *)0x70756464766F6D2ELL) : (v1184 = 0), !v1184))
                                                                                                                                    {
                                                                                                                                      if (v868 || (*v85 == (Value *)0x6D2E323135787661 ? (v1185 = v85[1] == (Value *)0x73766F6D2E6B7361) : (v1185 = 0), v1185 ? (v1186 = *((_DWORD *)v85 + 4) == 1886741608) : (v1186 = 0), !v1186 && (*v85 == (Value *)0x6D2E323135787661 ? (v1187 = v85[1] == (Value *)0x73766F6D2E6B7361) : (v1187 = 0), v1187 ? (v1188 = *((unsigned int *)v85 + 4) == 1886741612) : (v1188 = 0), !v1188)))
                                                                                                                                      {
                                                                                                                                        if ((v1831 & 1) != 0)
                                                                                                                                          goto LABEL_2073;
                                                                                                                                        if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x706E75702E6B7361 || *(Value **)((char *)v85 + 11) != (Value *)0x6C6B63706E75702ELL)
                                                                                                                                        {
                                                                                                                                          v1353 = *v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x63706E752E6B7361;
                                                                                                                                          if (!v1353 || *(Value **)((char *)v85 + 11) != (Value *)0x2E6C6B63706E752ELL)
                                                                                                                                          {
                                                                                                                                            if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x706E75702E6B7361 || *(Value **)((char *)v85 + 11) != (Value *)0x686B63706E75702ELL)
                                                                                                                                            {
                                                                                                                                              v1357 = *v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x63706E752E6B7361;
                                                                                                                                              if (!v1357 || *(Value **)((char *)v85 + 11) != (Value *)0x2E686B63706E752ELL)
                                                                                                                                              {
LABEL_2073:
                                                                                                                                                if (v84 < 0x10 || (*v85 == (Value *)0x6D2E323135787661 ? (v1189 = v85[1] == (Value *)0x2E646E612E6B7361) : (v1189 = 0), !v1189))
                                                                                                                                                {
                                                                                                                                                  if ((v1813 & 1) != 0)
                                                                                                                                                  {
LABEL_2093:
                                                                                                                                                    if ((v862 & 1) != 0 || (*v85 == (Value *)0x6D2E323135787661 ? (v1194 = v85[1] == (Value *)0x646E61702E6B7361) : (v1194 = 0), v1194 ? (v1195 = *((unsigned __int16 *)v85 + 8) == 11886) : (v1195 = 0), !v1195))
                                                                                                                                                    {
                                                                                                                                                      if ((v1146 & 1) != 0 || (*v85 == (Value *)0x6D2E323135787661 ? (v1196 = *(Value **)((char *)v85 + 7) == (Value *)0x2E726F2E6B73616DLL) : (v1196 = 0), !v1196))
                                                                                                                                                      {
                                                                                                                                                        if (v84 < 0x10)
                                                                                                                                                          goto LABEL_2115;
                                                                                                                                                        if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x2E726F702E6B7361)
                                                                                                                                                        {
                                                                                                                                                          if (*v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x2E726F782E6B7361)
                                                                                                                                                          {
LABEL_2546:
                                                                                                                                                            v1429 = *(llvm::Type **)v1837;
                                                                                                                                                            llvm::VectorType::getInteger(*(llvm::Type ***)v1837, (llvm::VectorType *)v862);
                                                                                                                                                            v1475 = v1474;
                                                                                                                                                            v1476 = (llvm::Type **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                            LOWORD(v1846) = 257;
                                                                                                                                                            v1477 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1476, v1474, (const llvm::Twine *)&__src);
                                                                                                                                                            v1478 = (llvm::Type **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                                                                                                                            v1866 = 257;
                                                                                                                                                            v1479 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1478, v1475, (const llvm::Twine *)&v1864);
                                                                                                                                                            v1841 = 257;
                                                                                                                                                            Xor = (BOOL *)llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1477, (llvm::Value *)v1479, (const llvm::Twine *)&v1838);
                                                                                                                                                            goto LABEL_2547;
                                                                                                                                                          }
LABEL_2115:
                                                                                                                                                          if ((v1813 & 1) != 0)
                                                                                                                                                            goto LABEL_2116;
                                                                                                                                                          if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x726F78702E6B7361 || *((_BYTE *)v85 + 16) != 46)
                                                                                                                                                          {
                                                                                                                                                            if (*v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x646461702E6B7361 && *((_BYTE *)v85 + 16) == 46)
                                                                                                                                                            {
                                                                                                                                                              v1496 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                              v1497 = *(llvm::Value **)v1496;
                                                                                                                                                              v1498 = (llvm::Value *)*((_QWORD *)v1496 + 4);
                                                                                                                                                              LOWORD(v1846) = 257;
                                                                                                                                                              Add = (BOOL *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)&v1847, v1497, v1498, (const llvm::Twine *)&__src, 0, 0);
                                                                                                                                                              goto LABEL_2603;
                                                                                                                                                            }
                                                                                                                                                            if (*v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x627573702E6B7361 && *((_BYTE *)v85 + 16) == 46)
                                                                                                                                                            {
                                                                                                                                                              v1470 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                              v1471 = *(llvm::Value **)v1470;
                                                                                                                                                              v1472 = (llvm::Value *)*((_QWORD *)v1470 + 4);
                                                                                                                                                              LOWORD(v1846) = 257;
                                                                                                                                                              Add = (BOOL *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)&v1847, v1471, v1472, (const llvm::Twine *)&__src, 0, 0);
                                                                                                                                                              goto LABEL_2603;
                                                                                                                                                            }
LABEL_2116:
                                                                                                                                                            if ((v862 & 1) != 0 || (*v85 == (Value *)0x6D2E323135787661 ? (v1199 = v85[1] == (Value *)0x6C756D702E6B7361) : (v1199 = 0), v1199 ? (v1200 = *((unsigned __int16 *)v85 + 8) == 11884) : (v1200 = 0), !v1200))
                                                                                                                                                            {
                                                                                                                                                              if ((v1813 & 1) != 0)
                                                                                                                                                              {
LABEL_2125:
                                                                                                                                                                if ((v862 & 1) != 0 || (*v85 == (Value *)0x6D2E323135787661 ? (v1201 = v85[1] == (Value *)0x6E637A6C2E6B7361) : (v1201 = 0), v1201 ? (v1202 = *((unsigned __int16 *)v85 + 8) == 11892) : (v1202 = 0), !v1202))
                                                                                                                                                                {
                                                                                                                                                                  if (v84 < 0x10)
                                                                                                                                                                    goto LABEL_2134;
                                                                                                                                                                  if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x6C6C73702E6B7361)
                                                                                                                                                                  {
                                                                                                                                                                    if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x6C7273702E6B7361)
                                                                                                                                                                    {
                                                                                                                                                                      if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x617273702E6B7361)
                                                                                                                                                                      {
LABEL_2134:
                                                                                                                                                                        if ((v862 & 1) == 0 && (*v85 == (Value *)0x6D2E323135787661 ? (v1203 = v85[1] == (Value *)0x65766F6D2E6B7361) : (v1203 = 0), v1203 ? (v1204 = *((unsigned __int16 *)v85 + 8) == 29486) : (v1204 = 0), v1204))
                                                                                                                                                                        {
                                                                                                                                                                          SExt = (BOOL *)upgradeMaskedMove((llvm::IRBuilderBase *)&v1847, (uint64_t)v1837);
                                                                                                                                                                        }
                                                                                                                                                                        else
                                                                                                                                                                        {
                                                                                                                                                                          if ((v1146 & 1) != 0 || (*v85 == (Value *)0x632E323135787661 ? (v1205 = *(Value **)((char *)v85 + 7) == (Value *)0x326B73616D747663) : (v1205 = 0), !v1205))
                                                                                                                                                                          {
                                                                                                                                                                            if (v84 < 9 || (*(Value **)((char *)v85 + v84 - 9) == (Value *)0x7164746E766F6D2ELL ? (v1206 = *((_BYTE *)v85 + v84 - 1) == 97) : (v1206 = 0), !v1206))
                                                                                                                                                                            {
                                                                                                                                                                              if ((v866 & 1) == 0 && (*v85 == (Value *)0x616D66762E616D66 ? (v1207 = *(Value **)((char *)v85 + 3) == (Value *)0x2E6464616D66762ELL) : (v1207 = 0), v1207 || (*v85 == (Value *)0x736D66762E616D66 ? (v1208 = *(Value **)((char *)v85 + 3) == (Value *)0x2E6275736D66762ELL) : (v1208 = 0), v1208)) || (v1811 & 1) == 0 && (*v1833 == (Value *)0x6D6E66762E616D66 ? (v1209 = *((_DWORD *)v1833 + 2) == 778331233) : (v1209 = 0), v1209 || (*v1833 == (Value *)0x6D6E66762E616D66 ? (v1210 = *((_DWORD *)v1833 + 2) == 778204531) : (v1210 = 0), v1210)))
                                                                                                                                                                              {
                                                                                                                                                                                v1523 = *((unsigned __int8 *)v1833 + 6);
                                                                                                                                                                                v1524 = 7;
                                                                                                                                                                                if (v1523 == 110)
                                                                                                                                                                                  v1524 = 8;
                                                                                                                                                                                v1525 = 11;
                                                                                                                                                                                if (v1523 == 110)
                                                                                                                                                                                  v1525 = 12;
                                                                                                                                                                                v1526 = *((unsigned __int8 *)v1833 + v1525);
                                                                                                                                                                                v1527 = *((unsigned __int8 *)v1833 + v1524);
                                                                                                                                                                                v1528 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                                FNeg = *(llvm::Value **)v1528;
                                                                                                                                                                                *(_QWORD *)&v1864 = *(_QWORD *)v1528;
                                                                                                                                                                                v1530 = (llvm::Value *)*((_QWORD *)v1528 + 4);
                                                                                                                                                                                *((_QWORD *)&v1864 + 1) = v1530;
                                                                                                                                                                                v1531 = (llvm::ExtractElementInst *)*((_QWORD *)v1528 + 8);
                                                                                                                                                                                *(_QWORD *)&v1865 = v1531;
                                                                                                                                                                                if (v1526 == 115)
                                                                                                                                                                                {
                                                                                                                                                                                  LOWORD(v1846) = 257;
                                                                                                                                                                                  FNeg = llvm::IRBuilderBase::CreateExtractElement(&v1847, FNeg, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                                  *(_QWORD *)&v1864 = FNeg;
                                                                                                                                                                                  LOWORD(v1846) = 257;
                                                                                                                                                                                  v1532 = llvm::IRBuilderBase::CreateExtractElement(&v1847, v1530, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                                  *((_QWORD *)&v1864 + 1) = v1532;
                                                                                                                                                                                  LOWORD(v1846) = 257;
                                                                                                                                                                                  v1531 = llvm::IRBuilderBase::CreateExtractElement(&v1847, v1531, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                                  *(_QWORD *)&v1865 = v1531;
                                                                                                                                                                                  if (v1523 == 110)
                                                                                                                                                                                  {
                                                                                                                                                                                    LOWORD(v1846) = 257;
                                                                                                                                                                                    *((_QWORD *)&v1864 + 1) = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, v1532, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                                else if (v1523 == 110)
                                                                                                                                                                                {
                                                                                                                                                                                  LOWORD(v1846) = 257;
                                                                                                                                                                                  FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, FNeg, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                  *(_QWORD *)&v1864 = FNeg;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1527 == 115)
                                                                                                                                                                                {
                                                                                                                                                                                  LOWORD(v1846) = 257;
                                                                                                                                                                                  *(_QWORD *)&v1865 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, v1531, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                }
                                                                                                                                                                                v1547 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                                                                                                                                                v1838 = *(void **)FNeg;
                                                                                                                                                                                v1548 = llvm::Intrinsic::getDeclaration(v1547, 155, (BOOL **)&v1838, 1);
                                                                                                                                                                                if (v1548)
                                                                                                                                                                                  v1549 = *(_QWORD *)(v1548 + 24);
                                                                                                                                                                                else
                                                                                                                                                                                  v1549 = 0;
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                v1559 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1549, v1548, (uint64_t *)&v1864, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                v1863[0] = v1559;
                                                                                                                                                                                if (v1526 == 115)
                                                                                                                                                                                {
                                                                                                                                                                                  v1560 = (llvm::Value *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                  LOWORD(v1846) = 257;
                                                                                                                                                                                  v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateInsertElement(&v1847, v1560, (llvm::Value *)v1559, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                                }
                                                                                                                                                                                goto LABEL_1820;
                                                                                                                                                                              }
                                                                                                                                                                              if (!v1144 && *v1833 == (Value *)0x6D66762E34616D66 && *(Value **)((char *)v1833 + 5) == (Value *)0x732E6464616D6676)
                                                                                                                                                                              {
                                                                                                                                                                                v1603 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                                v1604 = *(llvm::Value **)v1603;
                                                                                                                                                                                v1605 = (llvm::Value *)*((_QWORD *)v1603 + 4);
                                                                                                                                                                                v1606 = (llvm::Value *)*((_QWORD *)v1603 + 8);
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                v1607 = (void **)llvm::IRBuilderBase::CreateExtractElement(&v1847, v1604, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                                *(_QWORD *)&v1864 = v1607;
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                *((_QWORD *)&v1864 + 1) = llvm::IRBuilderBase::CreateExtractElement(&v1847, v1605, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                *(_QWORD *)&v1865 = llvm::IRBuilderBase::CreateExtractElement(&v1847, v1606, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                                v1608 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                                                                                                                                                v1838 = *v1607;
                                                                                                                                                                                v1609 = llvm::Intrinsic::getDeclaration(v1608, 155, (BOOL **)&v1838, 1);
                                                                                                                                                                                if (v1609)
                                                                                                                                                                                  v1610 = *(_QWORD *)(v1609 + 24);
                                                                                                                                                                                else
                                                                                                                                                                                  v1610 = 0;
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1610, v1609, (uint64_t *)&v1864, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                llvm::Constant::getNullValue(*(llvm::Constant **)v1837, v1646);
                                                                                                                                                                                v1648 = v1647;
                                                                                                                                                                                v1649 = v1863[0];
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                goto LABEL_2948;
                                                                                                                                                                              }
                                                                                                                                                                              if (v868 || ((v1212 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1213 = v1833[1] == (Value *)0x616D66762E6B7361) : (v1213 = 0), v1213 ? (v1214 = *((_DWORD *)v1833 + 4) == 1932420196) : (v1214 = 0), !v1214))
                                                                                                                                                                              {
                                                                                                                                                                                if ((v1172 & 1) != 0 || ((v1212 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1562 = v1833[1] == (Value *)0x6D66762E7A6B7361) : (v1562 = 0), v1562 ? (v1563 = *(Value **)((char *)v1833 + 13) == (Value *)0x732E6464616D6676) : (v1563 = 0), !v1563 && (*v1833 == (Value *)0x6D2E323135787661 ? (v1564 = v1833[1] == (Value *)0x6D66762E336B7361) : (v1564 = 0), v1564 ? (v1565 = *(Value **)((char *)v1833 + 13) == (Value *)0x732E6464616D6676) : (v1565 = 0), !v1565 && (*v1833 == (Value *)0x6D2E323135787661 ? (v1566 = v1833[1] == (Value *)0x6D66762E336B7361) : (v1566 = 0), v1566 ? (v1567 = *(Value **)((char *)v1833 + 13) == (Value *)0x732E6275736D6676) : (v1567 = 0), !v1567))))
                                                                                                                                                                                {
                                                                                                                                                                                  if ((v1145 & 1) != 0 || ((v1212 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1215 = v1833[1] == (Value *)0x6E66762E336B7361) : (v1215 = 0), v1215 ? (v1216 = *(Value **)((char *)v1833 + 14) == (Value *)0x732E6275736D6E66) : (v1216 = 0), !v1216))
                                                                                                                                                                                  {
                                                                                                                                                                                    if (!v868)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1217 = v1833;
                                                                                                                                                                                      v1218 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x616D66762E6B7361;
                                                                                                                                                                                      if (v1218 && *((_DWORD *)v1833 + 4) == 1882088548)
                                                                                                                                                                                        goto LABEL_2795;
                                                                                                                                                                                    }
                                                                                                                                                                                    if ((v1172 & 1) == 0)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1217 = v1833;
                                                                                                                                                                                      v1613 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x6D6E66762E6B7361;
                                                                                                                                                                                      if (v1613 && *(Value **)((char *)v1833 + 13) == (Value *)0x702E6464616D6E66)
                                                                                                                                                                                        goto LABEL_2795;
                                                                                                                                                                                      v1615 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x6D6E66762E6B7361;
                                                                                                                                                                                      if (v1615 && *(Value **)((char *)v1833 + 13) == (Value *)0x702E6275736D6E66)
                                                                                                                                                                                        goto LABEL_2795;
                                                                                                                                                                                      v1617 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x6D66762E336B7361;
                                                                                                                                                                                      if (v1617 && *(Value **)((char *)v1833 + 13) == (Value *)0x702E6464616D6676)
                                                                                                                                                                                        goto LABEL_2795;
                                                                                                                                                                                      v1619 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x6D66762E336B7361;
                                                                                                                                                                                      if (v1619 && *(Value **)((char *)v1833 + 13) == (Value *)0x702E6275736D6676)
                                                                                                                                                                                        goto LABEL_2795;
                                                                                                                                                                                    }
                                                                                                                                                                                    if ((v1145 & 1) == 0 && ((v1217 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1220 = v1833[1] == (Value *)0x6E66762E336B7361) : (v1220 = 0), v1220 ? (v1221 = *(Value **)((char *)v1833 + 14) == (Value *)0x702E6275736D6E66) : (v1221 = 0), v1221) || (v1172 & 1) == 0 && ((v1217 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1222 = v1833[1] == (Value *)0x6D66762E7A6B7361) : (v1222 = 0), v1222 ? (v1223 = *(Value **)((char *)v1833 + 13) == (Value *)0x702E6464616D6676) : (v1223 = 0), v1223))
                                                                                                                                                                                    {
LABEL_2795:
                                                                                                                                                                                      v1621 = *((unsigned __int8 *)v1217 + 11);
                                                                                                                                                                                      v1622 = v1621 == 51 || v1621 == 122;
                                                                                                                                                                                      v1623 = v1622;
                                                                                                                                                                                      v1624 = 12;
                                                                                                                                                                                      if (v1622)
                                                                                                                                                                                        v1624 = 13;
                                                                                                                                                                                      if (v84 < v1624)
                                                                                                                                                                                        v1624 = v84;
                                                                                                                                                                                      v1625 = (Value **)((char *)v1217 + v1624);
                                                                                                                                                                                      v1833 = v1625;
                                                                                                                                                                                      v1834 = v84 - v1624;
                                                                                                                                                                                      v1626 = *((unsigned __int8 *)v1625 + 2);
                                                                                                                                                                                      v1627 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                                      v1628 = *(unsigned __int8 ***)v1627;
                                                                                                                                                                                      v1629 = (unsigned __int8 **)*((_QWORD *)v1627 + 4);
                                                                                                                                                                                      v1630 = (unsigned __int8 **)*((_QWORD *)v1627 + 8);
                                                                                                                                                                                      if (v1626 == 110)
                                                                                                                                                                                        v1631 = 4;
                                                                                                                                                                                      else
                                                                                                                                                                                        v1631 = 3;
                                                                                                                                                                                      v1632 = *((unsigned __int8 *)v1625 + v1631);
                                                                                                                                                                                      if (v1626 == 110 && v1623)
                                                                                                                                                                                      {
                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                        v1628 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1628, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v1626 == 110 && v1621 != 51 && v1621 != 122)
                                                                                                                                                                                      {
                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                        v1629 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1629, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v1632 == 115)
                                                                                                                                                                                      {
                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                        v1630 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1630, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                      }
                                                                                                                                                                                      if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0xA0)
                                                                                                                                                                                        goto LABEL_2822;
                                                                                                                                                                                      v1633 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                                                      if (*(_BYTE *)(v1633 + 16) != 16)
                                                                                                                                                                                        goto LABEL_2841;
                                                                                                                                                                                      v1634 = (_QWORD *)(v1633 + 24);
                                                                                                                                                                                      if (*(_DWORD *)(v1633 + 32) >= 0x41u)
                                                                                                                                                                                        v1634 = (_QWORD *)*v1634;
                                                                                                                                                                                      if (*v1634 == 4)
                                                                                                                                                                                      {
LABEL_2822:
                                                                                                                                                                                        v1635 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                                                                                                                                                        __src = (llvm::MDNode *)*v1628;
                                                                                                                                                                                        v1636 = llvm::Intrinsic::getDeclaration(v1635, 155, (BOOL **)&__src, 1);
                                                                                                                                                                                        v1637 = v1636;
                                                                                                                                                                                        if (v1636)
                                                                                                                                                                                          v1638 = *(_QWORD *)(v1636 + 24);
                                                                                                                                                                                        else
                                                                                                                                                                                          v1638 = 0;
                                                                                                                                                                                        *(_QWORD *)&v1864 = v1628;
                                                                                                                                                                                        *((_QWORD *)&v1864 + 1) = v1629;
                                                                                                                                                                                        *(_QWORD *)&v1865 = v1630;
                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                        v1650 = 3;
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
LABEL_2841:
                                                                                                                                                                                        if (*((_BYTE *)v1833 + v1834 - 5) == 115)
                                                                                                                                                                                          v1642 = 12752;
                                                                                                                                                                                        else
                                                                                                                                                                                          v1642 = 12751;
                                                                                                                                                                                        v1643 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), v1642, 0, 0);
                                                                                                                                                                                        v1637 = v1643;
                                                                                                                                                                                        if (v1643)
                                                                                                                                                                                          v1638 = *(_QWORD *)(v1643 + 24);
                                                                                                                                                                                        else
                                                                                                                                                                                          v1638 = 0;
                                                                                                                                                                                        *(_QWORD *)&v1864 = v1628;
                                                                                                                                                                                        *((_QWORD *)&v1864 + 1) = v1629;
                                                                                                                                                                                        *(_QWORD *)&v1865 = v1630;
                                                                                                                                                                                        *((_QWORD *)&v1865 + 1) = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                        v1650 = 4;
                                                                                                                                                                                      }
                                                                                                                                                                                      v1544 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1638, v1637, (uint64_t *)&v1864, v1650, (uint64_t)&__src, 0);
                                                                                                                                                                                      v1863[0] = v1544;
                                                                                                                                                                                      v1675 = v1837;
                                                                                                                                                                                      if (v1621 == 122)
                                                                                                                                                                                      {
                                                                                                                                                                                        llvm::Constant::getNullValue(*(llvm::Constant **)v1837, v1674);
                                                                                                                                                                                        v1601 = v1676;
                                                                                                                                                                                        v1675 = v1837;
                                                                                                                                                                                        v1677 = *((_DWORD *)v1837 + 5);
                                                                                                                                                                                        v1544 = v1863[0];
LABEL_2992:
                                                                                                                                                                                        v1678 = -(uint64_t)(v1677 & 0x7FFFFFF);
LABEL_3279:
                                                                                                                                                                                        v1600 = (unsigned __int8 *)*((_QWORD *)v1675 + 4 * v1678 + 12);
                                                                                                                                                                                        goto LABEL_2745;
                                                                                                                                                                                      }
                                                                                                                                                                                      v1679 = *((_DWORD *)v1837 + 5) & 0x7FFFFFF;
                                                                                                                                                                                      v1678 = -v1679;
                                                                                                                                                                                      v1680 = (char *)v1837 - 32 * v1679;
                                                                                                                                                                                      if (v1621 == 51)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1601 = (Value *)*((_QWORD *)v1680 + 8);
                                                                                                                                                                                        goto LABEL_3279;
                                                                                                                                                                                      }
LABEL_3278:
                                                                                                                                                                                      v1601 = *(Value **)v1680;
                                                                                                                                                                                      goto LABEL_3279;
                                                                                                                                                                                    }
                                                                                                                                                                                    if ((v1146 & 1) == 0 && *v1833 == (Value *)0x736D66762E616D66 && *(Value **)((char *)v1833 + 7) == (Value *)0x702E646461627573)
                                                                                                                                                                                    {
                                                                                                                                                                                      __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                                                                      ParamAttrs = (uint64_t)v1691;
                                                                                                                                                                                      v1692 = llvm::TypeSize::operator unsigned long long(&__src, v1691);
                                                                                                                                                                                      v1693 = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                                                                      if (v1692 == 128 && v1693 == 32)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1694 = 12997;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1692 == 256 && v1693 == 32)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1694 = 12998;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1693 == 64 && v1692 == 128)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1694 = 12995;
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
                                                                                                                                                                                        v1694 = 12996;
                                                                                                                                                                                      }
                                                                                                                                                                                      v1731 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                      *(_QWORD *)&v1864 = *v1731;
                                                                                                                                                                                      *((_QWORD *)&v1864 + 1) = v1731[4];
                                                                                                                                                                                      v1732 = (llvm::Value *)v1731[8];
                                                                                                                                                                                      LOWORD(v1846) = 257;
                                                                                                                                                                                      *(_QWORD *)&v1865 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, v1732, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                      v1733 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), v1694, 0, 0);
                                                                                                                                                                                      if (v1733)
                                                                                                                                                                                        v1734 = *(_QWORD *)(v1733 + 24);
                                                                                                                                                                                      else
                                                                                                                                                                                        v1734 = 0;
                                                                                                                                                                                      LOWORD(v1846) = 257;
                                                                                                                                                                                      SExt = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1734, v1733, (uint64_t *)&v1864, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                      goto LABEL_2508;
                                                                                                                                                                                    }
                                                                                                                                                                                    if ((v1809 & 1) != 0 || ((v1225 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1226 = v1833[1] == (Value *)0x616D66762E6B7361) : (v1226 = 0), v1226 ? (v1227 = *(Value **)((char *)v1833 + 15) == (Value *)0x702E627573646461) : (v1227 = 0), !v1227))
                                                                                                                                                                                    {
                                                                                                                                                                                      if (v84 < 0x18 || ((v1225 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1659 = v1833[1] == (Value *)0x6D66762E336B7361) : (v1659 = 0), v1659 ? (v1660 = v1833[2] == (Value *)0x702E627573646461) : (v1660 = 0), !v1660 && (*v1833 == (Value *)0x6D2E323135787661 ? (v1661 = v1833[1] == (Value *)0x6D66762E7A6B7361) : (v1661 = 0), v1661 ? (v1662 = v1833[2] == (Value *)0x702E627573646461) : (v1662 = 0), !v1662 && (*v1833 == (Value *)0x6D2E323135787661 ? (v1663 = v1833[1] == (Value *)0x6D66762E336B7361) : (v1663 = 0), v1663 ? (v1664 = v1833[2] == (Value *)0x702E646461627573) : (v1664 = 0), !v1664))))
                                                                                                                                                                                      {
                                                                                                                                                                                        if ((v1172 & 1) == 0 && ((v1228 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1229 = v1833[1] == (Value *)0x726574702E6B7361) : (v1229 = 0), v1229 ? (v1230 = *(Value **)((char *)v1833 + 13) == (Value *)0x2E676F6C6E726574) : (v1230 = 0), v1230) || (v1145 & 1) == 0 && ((v1228 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1231 = v1833[1] == (Value *)0x6574702E7A6B7361) : (v1231 = 0), v1231 ? (v1232 = *(Value **)((char *)v1833 + 14) == (Value *)0x2E676F6C6E726574) : (v1232 = 0), v1232))
                                                                                                                                                                                        {
                                                                                                                                                                                          v1695 = *((unsigned __int8 *)v1228 + 11);
                                                                                                                                                                                          __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                                                                          ParamAttrs = (uint64_t)v1696;
                                                                                                                                                                                          v1697 = llvm::TypeSize::operator unsigned long long(&__src, v1696);
                                                                                                                                                                                          v1698 = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                                                                          if (v1697 == 128 && v1698 == 32)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1699 = 12675;
                                                                                                                                                                                          }
                                                                                                                                                                                          else if (v1697 == 256 && v1698 == 32)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1699 = 12676;
                                                                                                                                                                                          }
                                                                                                                                                                                          else if (v1697 == 512 && v1698 == 32)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1699 = 12677;
                                                                                                                                                                                          }
                                                                                                                                                                                          else if (v1697 == 128 && v1698 == 64)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1699 = 12678;
                                                                                                                                                                                          }
                                                                                                                                                                                          else if (v1698 == 64 && v1697 == 256)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1699 = 12679;
                                                                                                                                                                                          }
                                                                                                                                                                                          else
                                                                                                                                                                                          {
                                                                                                                                                                                            v1699 = 12680;
                                                                                                                                                                                          }
                                                                                                                                                                                          v1771 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                          *(_QWORD *)&v1864 = *v1771;
                                                                                                                                                                                          *((_QWORD *)&v1864 + 1) = v1771[4];
                                                                                                                                                                                          *(_QWORD *)&v1865 = v1771[8];
                                                                                                                                                                                          *((_QWORD *)&v1865 + 1) = v1771[12];
                                                                                                                                                                                          v1772 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                                                                                                                                                          v1773 = llvm::Intrinsic::getDeclaration(v1772, v1699, 0, 0);
                                                                                                                                                                                          if (v1773)
                                                                                                                                                                                            v1774 = *(_QWORD *)(v1773 + 24);
                                                                                                                                                                                          else
                                                                                                                                                                                            v1774 = 0;
                                                                                                                                                                                          LOWORD(v1846) = 257;
                                                                                                                                                                                          v1775 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1774, v1773, (uint64_t *)&v1864, 4, (uint64_t)&__src, 0);
                                                                                                                                                                                          v1863[0] = v1775;
                                                                                                                                                                                          v1777 = v1837;
                                                                                                                                                                                          if (v1695 == 122)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1601 = (Value *)llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1837, v1776);
                                                                                                                                                                                            v1777 = v1837;
                                                                                                                                                                                            v1544 = v1863[0];
                                                                                                                                                                                            v1778 = -(uint64_t)(*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                                          }
                                                                                                                                                                                          else
                                                                                                                                                                                          {
                                                                                                                                                                                            v1544 = v1775;
                                                                                                                                                                                            v1779 = *((_DWORD *)v1837 + 5) & 0x7FFFFFF;
                                                                                                                                                                                            v1778 = -v1779;
                                                                                                                                                                                            v1601 = (Value *)*((_QWORD *)v1837 - 4 * v1779);
                                                                                                                                                                                          }
                                                                                                                                                                                          v1600 = (unsigned __int8 *)*((_QWORD *)v1777 + 4 * v1778 + 16);
                                                                                                                                                                                          goto LABEL_2745;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (!v868 && ((v1233 = (unsigned __int8 *)v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1234 = v1833[1] == (Value *)0x616D70762E6B7361) : (v1234 = 0), v1234 ? (v1235 = *((_DWORD *)v1833 + 4) == 842359908) : (v1235 = 0), v1235) || (v1172 & 1) == 0 && ((v1233 = (unsigned __int8 *)v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1236 = v1833[1] == (Value *)0x6D70762E7A6B7361) : (v1236 = 0), v1236 ? (v1237 = *(Value **)((char *)v1833 + 13) == (Value *)0x32356464616D7076) : (v1237 = 0), v1237))
                                                                                                                                                                                        {
                                                                                                                                                                                          v1700 = v1233[20] == 104 || v1233[21] == 104;
                                                                                                                                                                                          v1721 = v1233[11];
                                                                                                                                                                                          __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                                                                          ParamAttrs = (uint64_t)v1735;
                                                                                                                                                                                          v1736 = llvm::TypeSize::operator unsigned long long(&__src, v1735);
                                                                                                                                                                                          if (v1736 == 128 && !v1700)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1726 = 12796;
                                                                                                                                                                                            goto LABEL_3272;
                                                                                                                                                                                          }
                                                                                                                                                                                          v1737 = v1736 != 256 || v1700;
                                                                                                                                                                                          if (v1737 != 1)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1726 = 12797;
                                                                                                                                                                                            goto LABEL_3272;
                                                                                                                                                                                          }
                                                                                                                                                                                          v1738 = v1736 != 512 || v1700;
                                                                                                                                                                                          if (v1738 != 1)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1726 = 12798;
                                                                                                                                                                                            goto LABEL_3272;
                                                                                                                                                                                          }
                                                                                                                                                                                          v1739 = !v1700;
                                                                                                                                                                                          if (v1736 == 128 && !v1739)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1726 = 12793;
                                                                                                                                                                                            goto LABEL_3272;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (v1736 != 256)
                                                                                                                                                                                            v1739 = 1;
                                                                                                                                                                                          v1786 = v1739 == 0;
                                                                                                                                                                                          v1787 = 12794;
                                                                                                                                                                                        }
                                                                                                                                                                                        else
                                                                                                                                                                                        {
                                                                                                                                                                                          if ((v1809 & 1) == 0)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1238 = v1833;
                                                                                                                                                                                            v1239 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x726570762E6B7361;
                                                                                                                                                                                            if (v1239 && *(Value **)((char *)v1833 + 15) == (Value *)0x2E72617632696D72)
                                                                                                                                                                                              goto LABEL_3075;
                                                                                                                                                                                            v1241 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x726570762E6B7361;
                                                                                                                                                                                            if (v1241 && *(Value **)((char *)v1833 + 15) == (Value *)0x2E72617632746D72)
                                                                                                                                                                                              goto LABEL_3075;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (v84 >= 0x18)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1238 = v1833;
                                                                                                                                                                                            v1243 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x6570762E7A6B7361;
                                                                                                                                                                                            if (v1243 && v1833[2] == (Value *)0x2E72617632746D72)
                                                                                                                                                                                            {
LABEL_3075:
                                                                                                                                                                                              SExt = (BOOL *)UpgradeX86VPERMT2Intrinsics((uint64_t)&v1847, (uint64_t)v1837, *((unsigned __int8 *)v1238 + 11) == 122, *((_BYTE *)v1238 + 17) == 105);
                                                                                                                                                                                              goto LABEL_2508;
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                          if ((v1172 & 1) == 0)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1245 = v1833;
                                                                                                                                                                                            v1246 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x706470762E6B7361;
                                                                                                                                                                                            if (v1246 && *(Value **)((char *)v1833 + 13) == (Value *)0x2E64737562706470)
                                                                                                                                                                                              goto LABEL_3109;
                                                                                                                                                                                          }
                                                                                                                                                                                          if ((v1145 & 1) == 0)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1245 = v1833;
                                                                                                                                                                                            v1248 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x6470762E7A6B7361;
                                                                                                                                                                                            if (v1248 && *(Value **)((char *)v1833 + 14) == (Value *)0x2E64737562706470)
                                                                                                                                                                                              goto LABEL_3109;
                                                                                                                                                                                            v1250 = *v1833 == (Value *)0x6D2E323135787661 && v1833[1] == (Value *)0x706470762E6B7361;
                                                                                                                                                                                            if (v1250 && *(Value **)((char *)v1833 + 14) == (Value *)0x2E73647375627064)
                                                                                                                                                                                              goto LABEL_3109;
                                                                                                                                                                                          }
                                                                                                                                                                                          if ((v1809 & 1) == 0 && ((v1245 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1252 = v1833[1] == (Value *)0x6470762E7A6B7361) : (v1252 = 0), v1252 ? (v1253 = *(Value **)((char *)v1833 + 15) == (Value *)0x2E73647375627064) : (v1253 = 0), v1253))
                                                                                                                                                                                          {
LABEL_3109:
                                                                                                                                                                                            v1721 = *((unsigned __int8 *)v1245 + 11);
                                                                                                                                                                                            v1722 = 20;
                                                                                                                                                                                            if (v1721 == 122)
                                                                                                                                                                                              v1722 = 21;
                                                                                                                                                                                            v1723 = *((unsigned __int8 *)v1245 + v1722);
                                                                                                                                                                                            __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                                                                            ParamAttrs = (uint64_t)v1724;
                                                                                                                                                                                            v1725 = llvm::TypeSize::operator unsigned long long(&__src, v1724);
                                                                                                                                                                                            if (v1725 == 128 && v1723 != 115)
                                                                                                                                                                                            {
                                                                                                                                                                                              v1726 = 12761;
                                                                                                                                                                                              goto LABEL_3272;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v1725 == 256 && v1723 != 115)
                                                                                                                                                                                            {
                                                                                                                                                                                              v1726 = 12762;
                                                                                                                                                                                              goto LABEL_3272;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v1725 == 512 && v1723 != 115)
                                                                                                                                                                                            {
                                                                                                                                                                                              v1726 = 12763;
                                                                                                                                                                                              goto LABEL_3272;
                                                                                                                                                                                            }
                                                                                                                                                                                            v1785 = v1723 != 115;
                                                                                                                                                                                            if (v1725 == 128 && v1723 == 115)
                                                                                                                                                                                            {
                                                                                                                                                                                              v1726 = 12764;
                                                                                                                                                                                              goto LABEL_3272;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v1725 != 256)
                                                                                                                                                                                              v1785 = 1;
                                                                                                                                                                                            v1786 = !v1785;
                                                                                                                                                                                            v1787 = 12765;
                                                                                                                                                                                          }
                                                                                                                                                                                          else
                                                                                                                                                                                          {
                                                                                                                                                                                            if ((v1172 & 1) != 0 || ((v1254 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1255 = v1833[1] == (Value *)0x706470762E6B7361) : (v1255 = 0), v1255 ? (v1256 = *(Value **)((char *)v1833 + 13) == (Value *)0x2E64737377706470) : (v1256 = 0), !v1256))
                                                                                                                                                                                            {
                                                                                                                                                                                              if ((v1145 & 1) != 0 || ((v1254 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1257 = v1833[1] == (Value *)0x6470762E7A6B7361) : (v1257 = 0), v1257 ? (v1258 = *(Value **)((char *)v1833 + 14) == (Value *)0x2E64737377706470) : (v1258 = 0), !v1258 && (*v1833 == (Value *)0x6D2E323135787661 ? (v1259 = v1833[1] == (Value *)0x706470762E6B7361) : (v1259 = 0), v1259 ? (v1260 = *(Value **)((char *)v1833 + 14) == (Value *)0x2E73647373777064) : (v1260 = 0), !v1260)))
                                                                                                                                                                                              {
                                                                                                                                                                                                if ((v1809 & 1) != 0 || ((v1254 = v1833, *v1833 == (Value *)0x6D2E323135787661) ? (v1261 = v1833[1] == (Value *)0x6470762E7A6B7361) : (v1261 = 0), v1261 ? (v1262 = *(Value **)((char *)v1833 + 15) == (Value *)0x2E73647373777064) : (v1262 = 0), !v1262))
                                                                                                                                                                                                {
                                                                                                                                                                                                  if (v84 == 12)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    if (memcmp(v85, "addcarry.u32", 0xCuLL))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      if (*v85 != (Value *)0x7972726163646461 || *((_DWORD *)v85 + 2) != 875984174)
                                                                                                                                                                                                      {
LABEL_3230:
                                                                                                                                                                                                        v1784 = *v1833 == (Value *)0x6D2E323135787661 && *((_DWORD *)v1833 + 2) == 778793825;
                                                                                                                                                                                                        if (v1784 && (upgradeAVX512MaskToSelect((uint64_t)v85, v84, (uint64_t *)&v1847, (uint64_t)v1837, (llvm::Type ***)v1863) & 1) != 0)
                                                                                                                                                                                                          goto LABEL_1820;
                                                                                                                                                                                                        goto LABEL_1486;
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
LABEL_3224:
                                                                                                                                                                                                    v1781 = *(unsigned __int8 *)v1833;
                                                                                                                                                                                                    if (v1781 == 115)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      if (*((_BYTE *)v1833 + v84 - 1) == 50)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v1783 = 13301;
                                                                                                                                                                                                        goto LABEL_3252;
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    else if (v1781 == 97)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v1782 = *((unsigned __int8 *)v1833 + v84 - 1);
                                                                                                                                                                                                      if (v1782 == 50)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v1783 = 12030;
                                                                                                                                                                                                        goto LABEL_3252;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (v1782 == 52)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v1783 = 12031;
LABEL_3252:
                                                                                                                                                                                                        v1788 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                                        *(_QWORD *)&v1864 = *v1788;
                                                                                                                                                                                                        *((_QWORD *)&v1864 + 1) = v1788[4];
                                                                                                                                                                                                        *(_QWORD *)&v1865 = v1788[8];
                                                                                                                                                                                                        v1789 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                                                                                                                                                                        v1790 = llvm::Intrinsic::getDeclaration(v1789, v1783, 0, 0);
                                                                                                                                                                                                        if (v1790)
                                                                                                                                                                                                          v1791 = *(_QWORD *)(v1790 + 24);
                                                                                                                                                                                                        else
                                                                                                                                                                                                          v1791 = 0;
                                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                                        v1792 = (uint64_t *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1791, v1790, (uint64_t *)&v1864, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                                        LODWORD(v1838) = 1;
                                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                                        v1793 = llvm::IRBuilderBase::CreateExtractValue((uint64_t *)&v1847, v1792, (unsigned int *)&v1838, 1, (uint64_t)&__src);
                                                                                                                                                                                                        v1794 = (llvm::Type **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[12];
                                                                                                                                                                                                        v1795 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType **)*v1793, 0);
                                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                                        v1796 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1794, v1795, (const llvm::Twine *)&__src);
                                                                                                                                                                                                        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)&v1847, (llvm::Type **)v1793, (uint64_t)v1796, 256, 0);
                                                                                                                                                                                                        LODWORD(v1838) = 0;
                                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                                        v1797 = llvm::IRBuilderBase::CreateExtractValue((uint64_t *)&v1847, v1792, (unsigned int *)&v1838, 1, (uint64_t)&__src);
                                                                                                                                                                                                        llvm::Value::replaceAllUsesWith((Value *)v1837, (llvm::Value *)v1797);
LABEL_3256:
                                                                                                                                                                                                        v1863[0] = 0;
LABEL_1829:
                                                                                                                                                                                                        v378 = v1837;
LABEL_1830:
                                                                                                                                                                                                        llvm::Instruction::eraseFromParent(v378);
                                                                                                                                                                                                        goto LABEL_1831;
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    v1783 = 13302;
                                                                                                                                                                                                    goto LABEL_3252;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v84 == 13)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    if (*v85 != (Value *)0x7972726163646461 || *(Value **)((char *)v85 + 5) != (Value *)0x3233752E78797272)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v1264 = *v85 == (Value *)0x7972726163646461 && *(Value **)((char *)v85 + 5) == (Value *)0x3436752E78797272;
                                                                                                                                                                                                      if (!v1264 && memcmp(v85, "subborrow.u32", 0xDuLL) && (*v85 != (Value *)0x6F72726F62627573 || *(Value **)((char *)v85 + 5) != (Value *)0x3436752E776F7272))
                                                                                                                                                                                                        goto LABEL_3230;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    goto LABEL_3224;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if ((v1811 & 1) == 0)
                                                                                                                                                                                                    goto LABEL_3230;
LABEL_1486:
                                                                                                                                                                                                  if (v26)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    if (v1834 == 6)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      if (!memcmp(v1833, "abs.ll", 6uLL))
                                                                                                                                                                                                        goto LABEL_1596;
LABEL_1561:
                                                                                                                                                                                                      if (!memcmp(v1833, "max.ll", v1834))
                                                                                                                                                                                                        goto LABEL_1732;
                                                                                                                                                                                                      if (*(_DWORD *)v1833 == 779641197 && *((_WORD *)v1833 + 2) == 26997)
                                                                                                                                                                                                        goto LABEL_1732;
                                                                                                                                                                                                      if (!memcmp(v1833, "min.ll", v1834))
                                                                                                                                                                                                        goto LABEL_1740;
                                                                                                                                                                                                      if (*(_DWORD *)v1833 == 778987885 && *((_WORD *)v1833 + 2) == 26997)
                                                                                                                                                                                                        goto LABEL_1740;
                                                                                                                                                                                                      if (memcmp(v1833, "clz.ll", v1834))
                                                                                                                                                                                                        goto LABEL_1729;
                                                                                                                                                                                                      v921 = (void **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                                      v922 = *(uint64_t **)(v3 + 40);
                                                                                                                                                                                                      v1838 = *v921;
                                                                                                                                                                                                      v923 = llvm::Intrinsic::getDeclaration(v922, 58, (BOOL **)&v1838, 1);
                                                                                                                                                                                                      v925 = v923;
                                                                                                                                                                                                      if (v923)
                                                                                                                                                                                                        v926 = *(_QWORD *)(v923 + 24);
                                                                                                                                                                                                      else
                                                                                                                                                                                                        v926 = 0;
                                                                                                                                                                                                      *(_QWORD *)&v1864 = v921;
                                                                                                                                                                                                      *((_QWORD *)&v1864 + 1) = llvm::ConstantInt::getFalse(v1852, v924);
                                                                                                                                                                                                      __src = (llvm::MDNode *)"ctlz";
                                                                                                                                                                                                      LOWORD(v1846) = 259;
                                                                                                                                                                                                      v1140 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v926, v925, (uint64_t *)&v1864, 2, (uint64_t)&__src, 0);
                                                                                                                                                                                                      v1142 = (llvm::Type *)llvm::Type::getInt32Ty(v1852, v1141);
                                                                                                                                                                                                      v1143 = "ctlz.trunc";
LABEL_1995:
                                                                                                                                                                                                      __src = (llvm::MDNode *)v1143;
                                                                                                                                                                                                      LOWORD(v1846) = 259;
                                                                                                                                                                                                      VectorSplat = (BOOL *)llvm::IRBuilderBase::CreateTrunc((llvm::IRBuilderBase *)&v1847, v1140, v1142, (const llvm::Twine *)&__src);
                                                                                                                                                                                                      goto LABEL_1750;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v1834 == 5)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      if (*(_DWORD *)v1833 != 779313761 || *((_BYTE *)v1833 + 4) != 105)
                                                                                                                                                                                                      {
LABEL_1493:
                                                                                                                                                                                                        if (*(_DWORD *)v1833 != 779641197 || *((_BYTE *)v1833 + 4) != 105)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          if (!memcmp(v1833, "min.i", v1834))
                                                                                                                                                                                                          {
LABEL_1740:
                                                                                                                                                                                                            v1017 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                                                            v1012 = *(llvm::Type ****)v1017;
                                                                                                                                                                                                            v1013 = *((_QWORD *)v1017 + 4);
                                                                                                                                                                                                            v1018 = *(_WORD *)((char *)v1833 + v1834 - 3) == 29998 && *((_BYTE *)v1833 + v1834 - 1) == 105;
                                                                                                                                                                                                            if (v1018 || *(_DWORD *)((char *)v1833 + v1834 - 4) == 1819047214)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              __src = (llvm::MDNode *)"min.cond";
                                                                                                                                                                                                              LOWORD(v1846) = 259;
                                                                                                                                                                                                              v1019 = 37;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            else
                                                                                                                                                                                                            {
                                                                                                                                                                                                              __src = (llvm::MDNode *)"min.cond";
                                                                                                                                                                                                              LOWORD(v1846) = 259;
                                                                                                                                                                                                              v1019 = 41;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)&v1847, v1019, v1012, v1013, (uint64_t)&__src);
                                                                                                                                                                                                            v1016 = "min";
LABEL_1748:
                                                                                                                                                                                                            __src = (llvm::MDNode *)v1016;
                                                                                                                                                                                                            LOWORD(v1846) = 259;
                                                                                                                                                                                                            v940 = (llvm::Type **)v1012;
                                                                                                                                                                                                            v941 = (Value *)v1013;
                                                                                                                                                                                                            goto LABEL_1749;
                                                                                                                                                                                                          }
LABEL_1729:
                                                                                                                                                                                                          v1007 = ShouldUpgradeNVPTXBF16Intrinsic((uint64_t)v1833, v1834);
                                                                                                                                                                                                          if (!v1007)
                                                                                                                                                                                                            goto LABEL_1820;
                                                                                                                                                                                                          v1008 = v1007;
                                                                                                                                                                                                          v1009 = **(_QWORD **)(*(_QWORD *)(v3 + 24) + 16);
                                                                                                                                                                                                          v1010 = (*(_DWORD *)(v1009 + 8) & 0xFE) == 0x12 ? *(unsigned __int8 *)(**(_QWORD **)(v1009 + 16) + 8) : *(_DWORD *)(v1009 + 8);
                                                                                                                                                                                                          if (v1010 == 1)
                                                                                                                                                                                                            goto LABEL_1820;
                                                                                                                                                                                                          rename((llvm::GlobalValue *)v3);
                                                                                                                                                                                                          v1020 = (llvm::CallBase *)llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), v1008, 0, 0);
                                                                                                                                                                                                          v1836 = v1020;
                                                                                                                                                                                                          *(_QWORD *)&v1864 = &v1865;
                                                                                                                                                                                                          *((_QWORD *)&v1864 + 1) = 0x200000000;
                                                                                                                                                                                                          if (*((_QWORD *)v1020 + 12))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            v1021 = 0;
                                                                                                                                                                                                            do
                                                                                                                                                                                                            {
                                                                                                                                                                                                              v1022 = (llvm::Type **)*((_QWORD *)v1837 + 4 * v1021 + -4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                                              v1023 = *v1022;
                                                                                                                                                                                                              if ((*((_WORD *)v1020 + 9) & 1) != 0)
                                                                                                                                                                                                                llvm::Function::BuildLazyArguments(v1020);
                                                                                                                                                                                                              if (*((_BYTE *)v1023 + 8) == 13)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                v1024 = *(_QWORD *)(*((_QWORD *)v1020 + 11) + 40 * v1021);
                                                                                                                                                                                                                v1025 = (*(_DWORD *)(v1024 + 8) & 0xFE) == 0x12 ? *(unsigned __int8 *)(**(_QWORD **)(v1024 + 16) + 8) : *(_DWORD *)(v1024 + 8);
                                                                                                                                                                                                                if (v1025 == 1)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  LOWORD(v1846) = 257;
                                                                                                                                                                                                                  v1022 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1022, (llvm::Type *)v1024, (const llvm::Twine *)&__src);
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v1864, (uint64_t)v1022);
                                                                                                                                                                                                              ++v1021;
                                                                                                                                                                                                              v1020 = v1836;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            while (v1021 < *((_QWORD *)v1836 + 12));
                                                                                                                                                                                                            v1047 = (uint64_t *)v1864;
                                                                                                                                                                                                            v1048 = DWORD2(v1864);
                                                                                                                                                                                                          }
                                                                                                                                                                                                          else
                                                                                                                                                                                                          {
                                                                                                                                                                                                            v1048 = 0;
                                                                                                                                                                                                            v1047 = (uint64_t *)&v1865;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          v1066 = *((_QWORD *)v1020 + 3);
                                                                                                                                                                                                          LOWORD(v1846) = 257;
                                                                                                                                                                                                          v1067 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1066, (uint64_t)v1020, v1047, v1048, (uint64_t)&__src, 0);
                                                                                                                                                                                                          v1863[0] = v1067;
                                                                                                                                                                                                          v1068 = **(llvm::Type ***)(*(_QWORD *)(v3 + 24) + 16);
                                                                                                                                                                                                          if (*((_BYTE *)v1068 + 8) == 13)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            LOWORD(v1846) = 257;
                                                                                                                                                                                                            v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, (llvm::Type **)v1067, v1068, (const llvm::Twine *)&__src);
                                                                                                                                                                                                          }
                                                                                                                                                                                                          v946 = (llvm::MDNode *)v1864;
                                                                                                                                                                                                          if ((__int128 *)v1864 == &v1865)
                                                                                                                                                                                                            goto LABEL_1820;
                                                                                                                                                                                                          goto LABEL_1819;
                                                                                                                                                                                                        }
LABEL_1732:
                                                                                                                                                                                                        v1011 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                                                        v1012 = *(llvm::Type ****)v1011;
                                                                                                                                                                                                        v1013 = *((_QWORD *)v1011 + 4);
                                                                                                                                                                                                        v1014 = *(_WORD *)((char *)v1833 + v1834 - 3) == 29998 && *((_BYTE *)v1833 + v1834 - 1) == 105;
                                                                                                                                                                                                        if (v1014 || *(_DWORD *)((char *)v1833 + v1834 - 4) == 1819047214)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          __src = (llvm::MDNode *)"max.cond";
                                                                                                                                                                                                          LOWORD(v1846) = 259;
                                                                                                                                                                                                          v1015 = 35;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        else
                                                                                                                                                                                                        {
                                                                                                                                                                                                          __src = (llvm::MDNode *)"max.cond";
                                                                                                                                                                                                          LOWORD(v1846) = 259;
                                                                                                                                                                                                          v1015 = 39;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)&v1847, v1015, v1012, v1013, (uint64_t)&__src);
                                                                                                                                                                                                        v1016 = "max";
                                                                                                                                                                                                        goto LABEL_1748;
                                                                                                                                                                                                      }
LABEL_1596:
                                                                                                                                                                                                      v935 = (llvm::Constant **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                                      __src = (llvm::MDNode *)"neg";
                                                                                                                                                                                                      LOWORD(v1846) = 259;
                                                                                                                                                                                                      Neg = llvm::IRBuilderBase::CreateNeg((llvm::IRBuilderBase *)&v1847, v935, (const llvm::Twine *)&__src, 0, 0);
                                                                                                                                                                                                      llvm::Constant::getNullValue(*v935, v937);
                                                                                                                                                                                                      __src = (llvm::MDNode *)"abs.cond";
                                                                                                                                                                                                      LOWORD(v1846) = 259;
                                                                                                                                                                                                      ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)&v1847, 39, (llvm::Type ***)v935, v938, (uint64_t)&__src);
                                                                                                                                                                                                      __src = (llvm::MDNode *)"abs";
                                                                                                                                                                                                      LOWORD(v1846) = 259;
                                                                                                                                                                                                      v940 = v935;
                                                                                                                                                                                                      v941 = (Value *)Neg;
LABEL_1749:
                                                                                                                                                                                                      VectorSplat = (BOOL *)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1847, (Value *)ICmp, v940, v941, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                                      goto LABEL_1750;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v1834 < 0x15 || (*v1833 == (Value *)0x6C2E63696D6F7461 ? (v927 = v1833[1] == (Value *)0x2E6464612E64616FLL) : (v927 = 0), v927 ? (v928 = *(Value **)((char *)v1833 + 13) == (Value *)0x702E3233662E6464) : (v928 = 0), !v928 && (*v1833 == (Value *)0x6C2E63696D6F7461 ? (v929 = v1833[1] == (Value *)0x2E6464612E64616FLL) : (v929 = 0), v929 ? (v930 = *(Value **)((char *)v1833 + 13) == (Value *)0x702E3436662E6464) : (v930 = 0), !v930)))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      switch(v1834)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        case 3uLL:
                                                                                                                                                                                                          if (memcmp(v1833, "h2f", v1834))
                                                                                                                                                                                                            goto LABEL_1729;
                                                                                                                                                                                                          v932 = *(uint64_t **)(v3 + 40);
                                                                                                                                                                                                          *(_QWORD *)&v1864 = llvm::Type::getFloatTy(v1852, v931);
                                                                                                                                                                                                          v933 = llvm::Intrinsic::getDeclaration(v932, 22, (BOOL **)&v1864, 1);
                                                                                                                                                                                                          v437 = v933;
                                                                                                                                                                                                          if (v933)
                                                                                                                                                                                                            v438 = *(_QWORD *)(v933 + 24);
                                                                                                                                                                                                          else
                                                                                                                                                                                                            v438 = 0;
                                                                                                                                                                                                          v1838 = (void *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                                          __src = (llvm::MDNode *)"h2f";
                                                                                                                                                                                                          v464 = 259;
                                                                                                                                                                                                          goto LABEL_1940;
                                                                                                                                                                                                        case 5uLL:
                                                                                                                                                                                                          goto LABEL_1493;
                                                                                                                                                                                                        case 6uLL:
                                                                                                                                                                                                          goto LABEL_1561;
                                                                                                                                                                                                        case 7uLL:
                                                                                                                                                                                                          if (!memcmp(v1833, "max.ull", v1834))
                                                                                                                                                                                                            goto LABEL_1732;
                                                                                                                                                                                                          if (!memcmp(v1833, "min.ull", v1834))
                                                                                                                                                                                                            goto LABEL_1740;
                                                                                                                                                                                                          if (memcmp(v1833, "popc.ll", v1834))
                                                                                                                                                                                                            goto LABEL_1729;
                                                                                                                                                                                                          *(_QWORD *)&v1864 = *((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                                          v1111 = *(uint64_t **)(v3 + 40);
                                                                                                                                                                                                          v1838 = *(void **)v1864;
                                                                                                                                                                                                          v1112 = llvm::Intrinsic::getDeclaration(v1111, 59, (BOOL **)&v1838, 1);
                                                                                                                                                                                                          if (v1112)
                                                                                                                                                                                                            v1113 = *(_QWORD *)(v1112 + 24);
                                                                                                                                                                                                          else
                                                                                                                                                                                                            v1113 = 0;
                                                                                                                                                                                                          __src = (llvm::MDNode *)"ctpop";
                                                                                                                                                                                                          LOWORD(v1846) = 259;
                                                                                                                                                                                                          v1140 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1113, v1112, (uint64_t *)&v1864, 1, (uint64_t)&__src, 0);
                                                                                                                                                                                                          v1142 = (llvm::Type *)llvm::Type::getInt32Ty(v1852, v1166);
                                                                                                                                                                                                          v1143 = "ctpop.trunc";
                                                                                                                                                                                                          break;
                                                                                                                                                                                                        default:
                                                                                                                                                                                                          goto LABEL_1729;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      goto LABEL_1995;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    v953 = (Type ***)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                                    VectorSplat = (BOOL *)llvm::IRBuilderBase::CreateAtomicRMW((uint64_t *)&v1847, 11, (uint64_t)*v953, v953[4], 0, 7, 1);
LABEL_1750:
                                                                                                                                                                                                    Select = (llvm::Value *)VectorSplat;
                                                                                                                                                                                                    v1863[0] = VectorSplat;
                                                                                                                                                                                                    goto LABEL_1826;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v27)
                                                                                                                                                                                                    SExt = (BOOL *)UpgradeARMIntrinsicCall(v1833, v1834, v1837, v3, (uint64_t)&v1847);
                                                                                                                                                                                                  else
                                                                                                                                                                                                    SExt = (BOOL *)UpgradeAMDGCNIntrinsicCall(v1833, v1834, (uint64_t)v1837, (mlir::BytecodeWriterConfig *)v3, (uint64_t *)&v1847);
                                                                                                                                                                                                  goto LABEL_1824;
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                            v1721 = *((unsigned __int8 *)v1254 + 11);
                                                                                                                                                                                            v1756 = 20;
                                                                                                                                                                                            if (v1721 == 122)
                                                                                                                                                                                              v1756 = 21;
                                                                                                                                                                                            v1757 = *((unsigned __int8 *)v1254 + v1756);
                                                                                                                                                                                            __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                                                                            ParamAttrs = (uint64_t)v1758;
                                                                                                                                                                                            v1759 = llvm::TypeSize::operator unsigned long long(&__src, v1758);
                                                                                                                                                                                            if (v1759 == 128 && v1757 != 115)
                                                                                                                                                                                            {
                                                                                                                                                                                              v1726 = 12767;
                                                                                                                                                                                              goto LABEL_3272;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v1759 == 256 && v1757 != 115)
                                                                                                                                                                                            {
                                                                                                                                                                                              v1726 = 12768;
                                                                                                                                                                                              goto LABEL_3272;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v1759 == 512 && v1757 != 115)
                                                                                                                                                                                            {
                                                                                                                                                                                              v1726 = 12769;
                                                                                                                                                                                              goto LABEL_3272;
                                                                                                                                                                                            }
                                                                                                                                                                                            v1798 = v1757 != 115;
                                                                                                                                                                                            if (v1759 == 128 && v1757 == 115)
                                                                                                                                                                                            {
                                                                                                                                                                                              v1726 = 12770;
                                                                                                                                                                                              goto LABEL_3272;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v1759 != 256)
                                                                                                                                                                                              v1798 = 1;
                                                                                                                                                                                            v1786 = !v1798;
                                                                                                                                                                                            v1787 = 12771;
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1786)
                                                                                                                                                                                          v1726 = v1787;
                                                                                                                                                                                        else
                                                                                                                                                                                          v1726 = v1787 + 1;
LABEL_3272:
                                                                                                                                                                                        v1799 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                        *(_QWORD *)&v1864 = *v1799;
                                                                                                                                                                                        *((_QWORD *)&v1864 + 1) = v1799[4];
                                                                                                                                                                                        *(_QWORD *)&v1865 = v1799[8];
                                                                                                                                                                                        v1800 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                                                                                                                                                        v1801 = llvm::Intrinsic::getDeclaration(v1800, v1726, 0, 0);
                                                                                                                                                                                        if (v1801)
                                                                                                                                                                                          v1802 = *(_QWORD *)(v1801 + 24);
                                                                                                                                                                                        else
                                                                                                                                                                                          v1802 = 0;
                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                        v1803 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1802, v1801, (uint64_t *)&v1864, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                        v1863[0] = v1803;
                                                                                                                                                                                        v1675 = v1837;
                                                                                                                                                                                        if (v1721 == 122)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1601 = (Value *)llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1837, v1804);
                                                                                                                                                                                          v1675 = v1837;
                                                                                                                                                                                          v1677 = *((_DWORD *)v1837 + 5);
                                                                                                                                                                                          v1544 = v1863[0];
                                                                                                                                                                                          goto LABEL_2992;
                                                                                                                                                                                        }
                                                                                                                                                                                        v1544 = v1803;
                                                                                                                                                                                        v1805 = *((_DWORD *)v1837 + 5) & 0x7FFFFFF;
                                                                                                                                                                                        v1678 = -v1805;
                                                                                                                                                                                        v1680 = (char *)v1837 - 32 * v1805;
                                                                                                                                                                                        goto LABEL_3278;
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                    v1665 = *((unsigned __int8 *)v1225 + 11);
                                                                                                                                                                                    v1666 = v1665 == 122 || v1665 == 51;
                                                                                                                                                                                    v1667 = 12;
                                                                                                                                                                                    if (v1666)
                                                                                                                                                                                      v1667 = 13;
                                                                                                                                                                                    if (v84 < v1667)
                                                                                                                                                                                      v1667 = v84;
                                                                                                                                                                                    v1833 = (Value **)((char *)v1225 + v1667);
                                                                                                                                                                                    v1834 = v84 - v1667;
                                                                                                                                                                                    v1668 = *((unsigned __int8 *)v1225 + v1667 + 3);
                                                                                                                                                                                    if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xA0)
                                                                                                                                                                                    {
                                                                                                                                                                                      if (*((_BYTE *)v1833 + v1834 - 5) == 115)
                                                                                                                                                                                        v1669 = 12754;
                                                                                                                                                                                      else
                                                                                                                                                                                        v1669 = 12753;
                                                                                                                                                                                      v1670 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                                      *(_QWORD *)&v1864 = *v1670;
                                                                                                                                                                                      *((_QWORD *)&v1864 + 1) = v1670[4];
                                                                                                                                                                                      v1671 = (llvm::Value *)v1670[8];
                                                                                                                                                                                      *(_QWORD *)&v1865 = v1671;
                                                                                                                                                                                      *((_QWORD *)&v1865 + 1) = v1670[16];
                                                                                                                                                                                      if (v1668 == 115)
                                                                                                                                                                                      {
                                                                                                                                                                                        LOWORD(v1846) = 257;
                                                                                                                                                                                        *(_QWORD *)&v1865 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, v1671, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                      }
                                                                                                                                                                                      v1672 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), v1669, 0, 0);
                                                                                                                                                                                      if (v1672)
                                                                                                                                                                                        v1673 = *(_QWORD *)(v1672 + 24);
                                                                                                                                                                                      else
                                                                                                                                                                                        v1673 = 0;
                                                                                                                                                                                      LOWORD(v1846) = 257;
                                                                                                                                                                                      v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1673, v1672, (uint64_t *)&v1864, 4, (uint64_t)&__src, 0);
LABEL_3099:
                                                                                                                                                                                      v1716 = v1837;
                                                                                                                                                                                      if (v1665 == 122)
                                                                                                                                                                                      {
                                                                                                                                                                                        llvm::Constant::getNullValue(*(llvm::Constant **)v1837, v1701);
                                                                                                                                                                                        v635 = v1717;
                                                                                                                                                                                        v1716 = v1837;
                                                                                                                                                                                        v1718 = -(uint64_t)(*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
                                                                                                                                                                                        v1719 = *((_DWORD *)v1837 + 5) & 0x7FFFFFF;
                                                                                                                                                                                        v1718 = -v1719;
                                                                                                                                                                                        v1720 = (char *)v1837 - 32 * v1719;
                                                                                                                                                                                        if (v1665 == 51)
                                                                                                                                                                                          v635 = (Value *)*((_QWORD *)v1720 + 8);
                                                                                                                                                                                        else
                                                                                                                                                                                          v635 = *(Value **)v1720;
                                                                                                                                                                                      }
                                                                                                                                                                                      v634 = (unsigned __int8 *)*((_QWORD *)v1716 + 4 * v1718 + 12);
                                                                                                                                                                                      v632 = (llvm::Type **)v1863[0];
                                                                                                                                                                                      goto LABEL_2551;
                                                                                                                                                                                    }
                                                                                                                                                                                    v1685 = *(int *)(*(_QWORD *)v1837 + 32);
                                                                                                                                                                                    v1686 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                                    v1838 = *(void **)v1686;
                                                                                                                                                                                    v1839 = *((_QWORD *)v1686 + 4);
                                                                                                                                                                                    v1840[0] = *((llvm::Value **)v1686 + 8);
                                                                                                                                                                                    v1687 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                                                                                                                                                    __src = *(llvm::MDNode **)v1838;
                                                                                                                                                                                    v1688 = llvm::Intrinsic::getDeclaration(v1687, 155, (BOOL **)&__src, 1);
                                                                                                                                                                                    v1689 = v1688;
                                                                                                                                                                                    if (v1688)
                                                                                                                                                                                      v1690 = *(_QWORD *)(v1688 + 24);
                                                                                                                                                                                    else
                                                                                                                                                                                      v1690 = 0;
                                                                                                                                                                                    LOWORD(v1846) = 257;
                                                                                                                                                                                    v1702 = llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1690, v1688, (uint64_t *)&v1838, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                    LOWORD(v1846) = 257;
                                                                                                                                                                                    v1840[0] = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, v1840[0], (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                    if (v1689)
                                                                                                                                                                                      v1703 = *(_QWORD *)(v1689 + 24);
                                                                                                                                                                                    else
                                                                                                                                                                                      v1703 = 0;
                                                                                                                                                                                    LOWORD(v1846) = 257;
                                                                                                                                                                                    v1704 = llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1703, v1689, (uint64_t *)&v1838, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                    if (v1668 == 115)
                                                                                                                                                                                      v1705 = v1702;
                                                                                                                                                                                    else
                                                                                                                                                                                      v1705 = v1704;
                                                                                                                                                                                    if (v1668 == 115)
                                                                                                                                                                                      v1702 = v1704;
                                                                                                                                                                                    llvm::SmallVector<int,32u>::SmallVector(&__src, v1685);
                                                                                                                                                                                    v1706 = __src;
                                                                                                                                                                                    if ((_DWORD)v1685)
                                                                                                                                                                                    {
                                                                                                                                                                                      if (v1685 < 8)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1707 = 0;
                                                                                                                                                                                        do
                                                                                                                                                                                        {
LABEL_3096:
                                                                                                                                                                                          *((_DWORD *)v1706 + v1707) = v1707 + (((int)((_DWORD)v1707 << 31) >> 31) & v1685);
                                                                                                                                                                                          ++v1707;
                                                                                                                                                                                        }
                                                                                                                                                                                        while (v1685 != v1707);
                                                                                                                                                                                        goto LABEL_3097;
                                                                                                                                                                                      }
                                                                                                                                                                                      v1707 = v1685 & 0xFFFFFFF8;
                                                                                                                                                                                      v1708 = (int8x16_t)vdupq_n_s32(v1685);
                                                                                                                                                                                      v1709 = (int32x4_t)xmmword_181235170;
                                                                                                                                                                                      v1710 = (int32x4_t *)((char *)__src + 16);
                                                                                                                                                                                      v1711.i64[0] = 0x400000004;
                                                                                                                                                                                      v1711.i64[1] = 0x400000004;
                                                                                                                                                                                      v1712.i64[0] = 0x100000001;
                                                                                                                                                                                      v1712.i64[1] = 0x100000001;
                                                                                                                                                                                      v1713.i64[0] = 0x800000008;
                                                                                                                                                                                      v1713.i64[1] = 0x800000008;
                                                                                                                                                                                      v1714 = v1707;
                                                                                                                                                                                      do
                                                                                                                                                                                      {
                                                                                                                                                                                        v1715 = vaddq_s32((int32x4_t)vbicq_s8(v1708, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v1709, v1712))), v1709);
                                                                                                                                                                                        v1710[-1] = v1715;
                                                                                                                                                                                        *v1710 = vaddq_s32(v1715, v1711);
                                                                                                                                                                                        v1709 = vaddq_s32(v1709, v1713);
                                                                                                                                                                                        v1710 += 2;
                                                                                                                                                                                        v1714 -= 8;
                                                                                                                                                                                      }
                                                                                                                                                                                      while (v1714);
                                                                                                                                                                                      if (v1707 != v1685)
                                                                                                                                                                                        goto LABEL_3096;
                                                                                                                                                                                    }
LABEL_3097:
                                                                                                                                                                                    v1866 = 257;
                                                                                                                                                                                    v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1705, v1702, (uint64_t)v1706, ParamAttrs, (uint64_t)&v1864);
                                                                                                                                                                                    if (__src != (llvm::MDNode *)&v1844)
                                                                                                                                                                                      free(__src);
                                                                                                                                                                                    goto LABEL_3099;
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                              v1568 = *((unsigned __int8 *)v1212 + 11);
                                                                                                                                                                              v1569 = v1568 == 51 || v1568 == 122;
                                                                                                                                                                              v1570 = v1569;
                                                                                                                                                                              v1571 = 12;
                                                                                                                                                                              if (v1569)
                                                                                                                                                                                v1571 = 13;
                                                                                                                                                                              if (v84 < v1571)
                                                                                                                                                                                v1571 = v84;
                                                                                                                                                                              v1572 = (Value **)((char *)v1212 + v1571);
                                                                                                                                                                              v1833 = v1572;
                                                                                                                                                                              v1834 = v84 - v1571;
                                                                                                                                                                              v1573 = *((unsigned __int8 *)v1572 + 2);
                                                                                                                                                                              v1574 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                              v1575 = *(unsigned __int8 ***)v1574;
                                                                                                                                                                              v1576 = (unsigned __int8 **)*((_QWORD *)v1574 + 4);
                                                                                                                                                                              v1577 = (unsigned __int8 **)*((_QWORD *)v1574 + 8);
                                                                                                                                                                              if (v1573 == 110)
                                                                                                                                                                                v1578 = 4;
                                                                                                                                                                              else
                                                                                                                                                                                v1578 = 3;
                                                                                                                                                                              v1579 = *((unsigned __int8 *)v1572 + v1578);
                                                                                                                                                                              if (v1573 == 110 && v1570)
                                                                                                                                                                              {
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                v1575 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1575, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                              }
                                                                                                                                                                              if (v1573 == 110 && v1568 != 51 && v1568 != 122)
                                                                                                                                                                              {
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                v1576 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1576, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                              }
                                                                                                                                                                              if (v1579 == 115)
                                                                                                                                                                              {
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                v1577 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1577, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                              }
                                                                                                                                                                              LOWORD(v1846) = 257;
                                                                                                                                                                              v1580 = (llvm::MDNode **)llvm::IRBuilderBase::CreateExtractElement(&v1847, (llvm::Value *)v1575, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                              LOWORD(v1846) = 257;
                                                                                                                                                                              v1581 = llvm::IRBuilderBase::CreateExtractElement(&v1847, (llvm::Value *)v1576, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                              LOWORD(v1846) = 257;
                                                                                                                                                                              v1582 = llvm::IRBuilderBase::CreateExtractElement(&v1847, (llvm::Value *)v1577, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                              v1583 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                                              if (*(_BYTE *)(v1583 + 16) != 16)
                                                                                                                                                                                goto LABEL_2715;
                                                                                                                                                                              v1584 = (_QWORD *)(v1583 + 24);
                                                                                                                                                                              if (*(_DWORD *)(v1583 + 32) >= 0x41u)
                                                                                                                                                                                v1584 = (_QWORD *)*v1584;
                                                                                                                                                                              if (*v1584 == 4)
                                                                                                                                                                              {
                                                                                                                                                                                v1585 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                                                                                                                                                __src = *v1580;
                                                                                                                                                                                v1586 = llvm::Intrinsic::getDeclaration(v1585, 155, (BOOL **)&__src, 1);
                                                                                                                                                                                v1587 = v1586;
                                                                                                                                                                                if (v1586)
                                                                                                                                                                                  v1588 = *(_QWORD *)(v1586 + 24);
                                                                                                                                                                                else
                                                                                                                                                                                  v1588 = 0;
                                                                                                                                                                                *(_QWORD *)&v1864 = v1580;
                                                                                                                                                                                *((_QWORD *)&v1864 + 1) = v1581;
                                                                                                                                                                                *(_QWORD *)&v1865 = v1582;
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                v1639 = 3;
                                                                                                                                                                              }
                                                                                                                                                                              else
                                                                                                                                                                              {
LABEL_2715:
                                                                                                                                                                                *(_QWORD *)&v1864 = v1580;
                                                                                                                                                                                *((_QWORD *)&v1864 + 1) = v1581;
                                                                                                                                                                                *(_QWORD *)&v1865 = v1582;
                                                                                                                                                                                *((_QWORD *)&v1865 + 1) = v1583;
                                                                                                                                                                                if (*((_BYTE *)v1833 + v1834 - 1) == 100)
                                                                                                                                                                                  v1589 = 12750;
                                                                                                                                                                                else
                                                                                                                                                                                  v1589 = 12749;
                                                                                                                                                                                v1590 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                                                                                                                                                v1591 = llvm::Intrinsic::getDeclaration(v1590, v1589, 0, 0);
                                                                                                                                                                                v1587 = v1591;
                                                                                                                                                                                if (v1591)
                                                                                                                                                                                  v1588 = *(_QWORD *)(v1591 + 24);
                                                                                                                                                                                else
                                                                                                                                                                                  v1588 = 0;
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                v1639 = 4;
                                                                                                                                                                              }
                                                                                                                                                                              v1653 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1588, v1587, (uint64_t *)&v1864, v1639, (uint64_t)&__src, 0);
                                                                                                                                                                              v1863[0] = v1653;
                                                                                                                                                                              if (v1568 == 122)
                                                                                                                                                                              {
                                                                                                                                                                                llvm::Constant::getNullValue(*(llvm::Constant **)v1653, v1654);
                                                                                                                                                                              }
                                                                                                                                                                              else
                                                                                                                                                                              {
                                                                                                                                                                                if (v1568 == 51)
                                                                                                                                                                                  v1656 = (Value *)v1582;
                                                                                                                                                                                else
                                                                                                                                                                                  v1656 = (Value *)v1580;
                                                                                                                                                                                if (v1579 != 115 || v1568 != 51)
                                                                                                                                                                                  goto LABEL_2947;
                                                                                                                                                                                v1657 = (llvm::Value *)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                                v1655 = llvm::IRBuilderBase::CreateExtractElement(&v1847, v1657, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                              }
                                                                                                                                                                              v1656 = (Value *)v1655;
LABEL_2947:
                                                                                                                                                                              v1649 = (BOOL *)EmitX86ScalarSelect((uint64_t)&v1847, ((unsigned __int8 **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[12], (llvm::Type **)v1863[0], v1656);
                                                                                                                                                                              v1863[0] = v1649;
                                                                                                                                                                              v1648 = (llvm::Value *)*((_QWORD *)v1837 + 8 * (unint64_t)(v1568 == 51) + -4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                              LOWORD(v1846) = 257;
LABEL_2948:
                                                                                                                                                                              SExt = (BOOL *)llvm::IRBuilderBase::CreateInsertElement(&v1847, v1648, (llvm::Value *)v1649, 0, (const llvm::Twine *)&__src);
                                                                                                                                                                              goto LABEL_1824;
                                                                                                                                                                            }
                                                                                                                                                                            v1550 = llvm::Type::getInt32Ty(DesiredBytecodeVersion, (llvm::LLVMContext *)v862);
                                                                                                                                                                            v1551 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v1550, 1, 0);
                                                                                                                                                                            __src = llvm::ValueAsMetadata::get(v1551, v1552);
                                                                                                                                                                            v1553 = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t)DesiredBytecodeVersion, &__src, 1uLL, 0, 1);
                                                                                                                                                                            v1554 = (llvm::Type **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                            v1555 = (llvm::Type *)llvm::PointerType::get(*(llvm::PointerType ***)v1837, 0);
                                                                                                                                                                            __src = (llvm::MDNode *)"cast";
                                                                                                                                                                            LOWORD(v1846) = 259;
                                                                                                                                                                            v1556 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1554, v1555, (const llvm::Twine *)&__src);
                                                                                                                                                                            v1557 = *(llvm::Type **)v1837;
                                                                                                                                                                            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                                                            LOWORD(v1846) = 257;
                                                                                                                                                                            Select = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)&v1847, v1557, (uint64_t)v1556, (63 - __clz(PrimitiveSizeInBits >> 3)) | 0x100u, 0, (uint64_t)&__src);
                                                                                                                                                                            llvm::Instruction::setMetadata((unsigned __int8 **)Select, 9, v1553);
                                                                                                                                                                            v1863[0] = (BOOL *)Select;
LABEL_1826:
                                                                                                                                                                            if (!Select)
                                                                                                                                                                              goto LABEL_1829;
                                                                                                                                                                            goto LABEL_1827;
                                                                                                                                                                          }
                                                                                                                                                                          SExt = (BOOL *)UpgradeMaskToInt((uint64_t)&v1847, v1837);
                                                                                                                                                                        }
LABEL_2508:
                                                                                                                                                                        Select = (llvm::Value *)SExt;
                                                                                                                                                                        goto LABEL_1825;
                                                                                                                                                                      }
                                                                                                                                                                      v1505 = *((unsigned __int8 *)v85 + 16);
                                                                                                                                                                      if (v1505 == 105)
                                                                                                                                                                      {
                                                                                                                                                                        v1506 = *((unsigned __int8 *)v85 + 18);
                                                                                                                                                                        if (*((_BYTE *)v85 + 17) == 46)
                                                                                                                                                                        {
                                                                                                                                                                          v1507 = 0;
                                                                                                                                                                        }
                                                                                                                                                                        else
                                                                                                                                                                        {
                                                                                                                                                                          v1507 = 0;
                                                                                                                                                                          v1640 = 19;
                                                                                                                                                                          if (v1506 != 46)
                                                                                                                                                                            v1640 = 20;
                                                                                                                                                                          v1506 = *((unsigned __int8 *)v85 + v1640);
                                                                                                                                                                        }
                                                                                                                                                                        v1602 = 1;
                                                                                                                                                                        goto LABEL_2997;
                                                                                                                                                                      }
                                                                                                                                                                      v1602 = v84 >= 0x13 && *((unsigned __int8 *)v85 + 18) == 105;
                                                                                                                                                                      v1507 = v1505 == 118;
                                                                                                                                                                      v1641 = *((unsigned __int8 *)v85 + 17);
                                                                                                                                                                      if (v1505 == 46)
                                                                                                                                                                      {
                                                                                                                                                                        v1506 = *((unsigned __int8 *)v85 + 17);
                                                                                                                                                                        goto LABEL_2997;
                                                                                                                                                                      }
                                                                                                                                                                      v1506 = *((unsigned __int8 *)v85 + 18);
                                                                                                                                                                      if (v1641 != 46)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1506 == 46)
                                                                                                                                                                        {
                                                                                                                                                                          v1506 = *((unsigned __int8 *)v85 + 19);
                                                                                                                                                                          if (v1505 == 118)
                                                                                                                                                                            goto LABEL_2836;
                                                                                                                                                                        }
                                                                                                                                                                        else
                                                                                                                                                                        {
                                                                                                                                                                          v1506 = *((unsigned __int8 *)v85 + 20);
                                                                                                                                                                          if (v1505 == 118)
                                                                                                                                                                          {
LABEL_2836:
                                                                                                                                                                            if (v1506 == 104)
                                                                                                                                                                            {
                                                                                                                                                                              if (v1641 == 49)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12662;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                              if (v1641 == 56)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12661;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                            else if (v1506 == 115)
                                                                                                                                                                            {
                                                                                                                                                                              if (v1641 == 52)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12188;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                              if (v1641 == 56)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12189;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                            v1594 = 12663;
                                                                                                                                                                            goto LABEL_3167;
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                        v1507 = 0;
                                                                                                                                                                      }
LABEL_2997:
                                                                                                                                                                      if (*(_DWORD *)((char *)v85 + v84 - 4) == 942813486)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1506 == 113)
                                                                                                                                                                        {
                                                                                                                                                                          if (v1507)
                                                                                                                                                                            v1683 = 12658;
                                                                                                                                                                          else
                                                                                                                                                                            v1683 = 12648;
                                                                                                                                                                          if (v1602)
                                                                                                                                                                            v1594 = 12653;
                                                                                                                                                                          else
                                                                                                                                                                            v1594 = v1683;
                                                                                                                                                                        }
                                                                                                                                                                        else if (v1506 == 100)
                                                                                                                                                                        {
                                                                                                                                                                          if (v1602)
                                                                                                                                                                            v1594 = 13211;
                                                                                                                                                                          else
                                                                                                                                                                            v1594 = 13209;
                                                                                                                                                                        }
                                                                                                                                                                        else if (v1602)
                                                                                                                                                                        {
                                                                                                                                                                          v1594 = 13212;
                                                                                                                                                                        }
                                                                                                                                                                        else
                                                                                                                                                                        {
                                                                                                                                                                          v1594 = 13210;
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      else if (*(_DWORD *)((char *)v85 + v84 - 4) == 909455918)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1506 == 113)
                                                                                                                                                                        {
                                                                                                                                                                          if (v1507)
                                                                                                                                                                            v1684 = 12659;
                                                                                                                                                                          else
                                                                                                                                                                            v1684 = 12649;
                                                                                                                                                                          if (v1602)
                                                                                                                                                                            v1594 = 12654;
                                                                                                                                                                          else
                                                                                                                                                                            v1594 = v1684;
                                                                                                                                                                        }
                                                                                                                                                                        else if (v1506 == 100)
                                                                                                                                                                        {
                                                                                                                                                                          if (v1602)
                                                                                                                                                                            v1594 = 12186;
                                                                                                                                                                          else
                                                                                                                                                                            v1594 = 12184;
                                                                                                                                                                        }
                                                                                                                                                                        else if (v1602)
                                                                                                                                                                        {
                                                                                                                                                                          v1594 = 12187;
                                                                                                                                                                        }
                                                                                                                                                                        else
                                                                                                                                                                        {
                                                                                                                                                                          v1594 = 12185;
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      else if (v1506 == 113)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1507)
                                                                                                                                                                          v1682 = 12660;
                                                                                                                                                                        else
                                                                                                                                                                          v1682 = 12650;
                                                                                                                                                                        if (v1602)
                                                                                                                                                                          v1594 = 12655;
                                                                                                                                                                        else
                                                                                                                                                                          v1594 = v1682;
                                                                                                                                                                      }
                                                                                                                                                                      else if (v1506 == 100)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1507)
                                                                                                                                                                          v1681 = 12657;
                                                                                                                                                                        else
                                                                                                                                                                          v1681 = 12647;
                                                                                                                                                                        if (v1602)
                                                                                                                                                                          v1594 = 12652;
                                                                                                                                                                        else
                                                                                                                                                                          v1594 = v1681;
                                                                                                                                                                      }
                                                                                                                                                                      else if (v1602)
                                                                                                                                                                      {
                                                                                                                                                                        v1594 = 12656;
                                                                                                                                                                      }
                                                                                                                                                                      else
                                                                                                                                                                      {
                                                                                                                                                                        v1594 = 12651;
                                                                                                                                                                      }
                                                                                                                                                                      goto LABEL_3167;
                                                                                                                                                                    }
                                                                                                                                                                    v1538 = *((unsigned __int8 *)v85 + 16);
                                                                                                                                                                    if (v1538 == 105)
                                                                                                                                                                    {
                                                                                                                                                                      v1539 = *((unsigned __int8 *)v85 + 18);
                                                                                                                                                                      if (*((_BYTE *)v85 + 17) == 46)
                                                                                                                                                                      {
                                                                                                                                                                        v1540 = 0;
                                                                                                                                                                      }
                                                                                                                                                                      else
                                                                                                                                                                      {
                                                                                                                                                                        v1540 = 0;
                                                                                                                                                                        v1611 = 19;
                                                                                                                                                                        if (v1539 != 46)
                                                                                                                                                                          v1611 = 20;
                                                                                                                                                                        v1539 = *((unsigned __int8 *)v85 + v1611);
                                                                                                                                                                      }
                                                                                                                                                                      v1561 = 1;
                                                                                                                                                                      goto LABEL_2895;
                                                                                                                                                                    }
                                                                                                                                                                    v1561 = v84 >= 0x13 && *((unsigned __int8 *)v85 + 18) == 105;
                                                                                                                                                                    v1540 = v1538 == 118;
                                                                                                                                                                    v1612 = *((unsigned __int8 *)v85 + 17);
                                                                                                                                                                    if (v1538 == 46)
                                                                                                                                                                    {
                                                                                                                                                                      v1539 = *((unsigned __int8 *)v85 + 17);
                                                                                                                                                                      goto LABEL_2895;
                                                                                                                                                                    }
                                                                                                                                                                    v1539 = *((unsigned __int8 *)v85 + 18);
                                                                                                                                                                    if (v1612 != 46)
                                                                                                                                                                    {
                                                                                                                                                                      if (v1539 == 46)
                                                                                                                                                                      {
                                                                                                                                                                        v1539 = *((unsigned __int8 *)v85 + 19);
                                                                                                                                                                        if (v1538 == 118)
                                                                                                                                                                          goto LABEL_2760;
                                                                                                                                                                      }
                                                                                                                                                                      else
                                                                                                                                                                      {
                                                                                                                                                                        v1539 = *((unsigned __int8 *)v85 + 20);
                                                                                                                                                                        if (v1538 == 118)
                                                                                                                                                                        {
LABEL_2760:
                                                                                                                                                                          switch(v1539)
                                                                                                                                                                          {
                                                                                                                                                                            case 's':
                                                                                                                                                                              if (v1612 == 52)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12196;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                              if (v1612 == 56)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12197;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                              break;
                                                                                                                                                                            case 'h':
                                                                                                                                                                              if (v1612 == 49)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12673;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                              if (v1612 == 56)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12672;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                              break;
                                                                                                                                                                            case 'd':
                                                                                                                                                                              if (v1612 == 50)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12198;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                              if (v1612 == 52)
                                                                                                                                                                              {
                                                                                                                                                                                v1594 = 12199;
                                                                                                                                                                                goto LABEL_3167;
                                                                                                                                                                              }
                                                                                                                                                                              break;
                                                                                                                                                                          }
                                                                                                                                                                          v1594 = 12674;
                                                                                                                                                                          goto LABEL_3167;
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      v1540 = 0;
                                                                                                                                                                    }
LABEL_2895:
                                                                                                                                                                    if (*(_DWORD *)((char *)v85 + v84 - 4) == 942813486)
                                                                                                                                                                    {
                                                                                                                                                                      if (v1539 == 113)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1561)
                                                                                                                                                                          v1594 = 13217;
                                                                                                                                                                        else
                                                                                                                                                                          v1594 = 13214;
                                                                                                                                                                      }
                                                                                                                                                                      else if (v1539 == 100)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1561)
                                                                                                                                                                          v1594 = 13216;
                                                                                                                                                                        else
                                                                                                                                                                          v1594 = 13213;
                                                                                                                                                                      }
                                                                                                                                                                      else if (v1561)
                                                                                                                                                                      {
                                                                                                                                                                        v1594 = 13218;
                                                                                                                                                                      }
                                                                                                                                                                      else
                                                                                                                                                                      {
                                                                                                                                                                        v1594 = 13215;
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    else if (*(_DWORD *)((char *)v85 + v84 - 4) == 909455918)
                                                                                                                                                                    {
                                                                                                                                                                      if (v1539 == 113)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1561)
                                                                                                                                                                          v1594 = 12194;
                                                                                                                                                                        else
                                                                                                                                                                          v1594 = 12191;
                                                                                                                                                                      }
                                                                                                                                                                      else if (v1539 == 100)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1561)
                                                                                                                                                                          v1594 = 12193;
                                                                                                                                                                        else
                                                                                                                                                                          v1594 = 12190;
                                                                                                                                                                      }
                                                                                                                                                                      else if (v1561)
                                                                                                                                                                      {
                                                                                                                                                                        v1594 = 12195;
                                                                                                                                                                      }
                                                                                                                                                                      else
                                                                                                                                                                      {
                                                                                                                                                                        v1594 = 12192;
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    else if (v1539 == 113)
                                                                                                                                                                    {
                                                                                                                                                                      if (v1540)
                                                                                                                                                                        v1652 = 12671;
                                                                                                                                                                      else
                                                                                                                                                                        v1652 = 12665;
                                                                                                                                                                      if (v1561)
                                                                                                                                                                        v1594 = 12668;
                                                                                                                                                                      else
                                                                                                                                                                        v1594 = v1652;
                                                                                                                                                                    }
                                                                                                                                                                    else if (v1539 == 100)
                                                                                                                                                                    {
                                                                                                                                                                      if (v1540)
                                                                                                                                                                        v1651 = 12670;
                                                                                                                                                                      else
                                                                                                                                                                        v1651 = 12664;
                                                                                                                                                                      if (v1561)
                                                                                                                                                                        v1594 = 12667;
                                                                                                                                                                      else
                                                                                                                                                                        v1594 = v1651;
                                                                                                                                                                    }
                                                                                                                                                                    else if (v1561)
                                                                                                                                                                    {
                                                                                                                                                                      v1594 = 12669;
                                                                                                                                                                    }
                                                                                                                                                                    else
                                                                                                                                                                    {
                                                                                                                                                                      v1594 = 12666;
                                                                                                                                                                    }
                                                                                                                                                                    goto LABEL_3167;
                                                                                                                                                                  }
                                                                                                                                                                  v1520 = *((unsigned __int8 *)v85 + 16);
                                                                                                                                                                  if (v1520 == 105)
                                                                                                                                                                  {
                                                                                                                                                                    v1521 = *((unsigned __int8 *)v85 + 18);
                                                                                                                                                                    if (*((_BYTE *)v85 + 17) == 46)
                                                                                                                                                                    {
                                                                                                                                                                      v1522 = 0;
                                                                                                                                                                    }
                                                                                                                                                                    else
                                                                                                                                                                    {
                                                                                                                                                                      v1522 = 0;
                                                                                                                                                                      v1592 = 19;
                                                                                                                                                                      if (v1521 != 46)
                                                                                                                                                                        v1592 = 20;
                                                                                                                                                                      v1521 = *((unsigned __int8 *)v85 + v1592);
                                                                                                                                                                    }
                                                                                                                                                                    v1545 = 1;
                                                                                                                                                                    goto LABEL_2848;
                                                                                                                                                                  }
                                                                                                                                                                  v1545 = v84 >= 0x13 && *((unsigned __int8 *)v85 + 18) == 105;
                                                                                                                                                                  v1522 = v1520 == 118;
                                                                                                                                                                  v1593 = *((unsigned __int8 *)v85 + 17);
                                                                                                                                                                  if (v1520 == 46)
                                                                                                                                                                  {
                                                                                                                                                                    v1521 = *((unsigned __int8 *)v85 + 17);
                                                                                                                                                                    goto LABEL_2848;
                                                                                                                                                                  }
                                                                                                                                                                  v1521 = *((unsigned __int8 *)v85 + 18);
                                                                                                                                                                  if (v1593 != 46)
                                                                                                                                                                  {
                                                                                                                                                                    if (v1521 == 46)
                                                                                                                                                                    {
                                                                                                                                                                      v1521 = *((unsigned __int8 *)v85 + 19);
                                                                                                                                                                      if (v1520 == 118)
                                                                                                                                                                        goto LABEL_2730;
                                                                                                                                                                    }
                                                                                                                                                                    else
                                                                                                                                                                    {
                                                                                                                                                                      v1521 = *((unsigned __int8 *)v85 + 20);
                                                                                                                                                                      if (v1520 == 118)
                                                                                                                                                                      {
LABEL_2730:
                                                                                                                                                                        switch(v1521)
                                                                                                                                                                        {
                                                                                                                                                                          case 's':
                                                                                                                                                                            if (v1593 == 52)
                                                                                                                                                                            {
                                                                                                                                                                              v1594 = 12180;
                                                                                                                                                                              goto LABEL_3167;
                                                                                                                                                                            }
                                                                                                                                                                            if (v1593 == 56)
                                                                                                                                                                            {
                                                                                                                                                                              v1594 = 12181;
                                                                                                                                                                              goto LABEL_3167;
                                                                                                                                                                            }
                                                                                                                                                                            break;
                                                                                                                                                                          case 'h':
                                                                                                                                                                            if (v1593 == 49)
                                                                                                                                                                            {
                                                                                                                                                                              v1594 = 12645;
                                                                                                                                                                              goto LABEL_3167;
                                                                                                                                                                            }
                                                                                                                                                                            if (v1593 == 56)
                                                                                                                                                                            {
                                                                                                                                                                              v1594 = 12644;
                                                                                                                                                                              goto LABEL_3167;
                                                                                                                                                                            }
                                                                                                                                                                            break;
                                                                                                                                                                          case 'd':
                                                                                                                                                                            if (v1593 == 50)
                                                                                                                                                                            {
                                                                                                                                                                              v1594 = 12182;
                                                                                                                                                                              goto LABEL_3167;
                                                                                                                                                                            }
                                                                                                                                                                            if (v1593 == 52)
                                                                                                                                                                            {
                                                                                                                                                                              v1594 = 12183;
LABEL_3167:
                                                                                                                                                                              SExt = (BOOL *)UpgradeX86MaskedShift((uint64_t *)&v1847, (llvm::BasicBlock **)v1837, v1594);
                                                                                                                                                                              goto LABEL_2508;
                                                                                                                                                                            }
                                                                                                                                                                            break;
                                                                                                                                                                        }
                                                                                                                                                                        v1594 = 12646;
                                                                                                                                                                        goto LABEL_3167;
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    v1522 = 0;
                                                                                                                                                                  }
LABEL_2848:
                                                                                                                                                                  if (*(_DWORD *)((char *)v85 + v84 - 4) == 942813486)
                                                                                                                                                                  {
                                                                                                                                                                    if (v1521 == 113)
                                                                                                                                                                    {
                                                                                                                                                                      if (v1545)
                                                                                                                                                                        v1594 = 13207;
                                                                                                                                                                      else
                                                                                                                                                                        v1594 = 13204;
                                                                                                                                                                    }
                                                                                                                                                                    else if (v1521 == 100)
                                                                                                                                                                    {
                                                                                                                                                                      if (v1545)
                                                                                                                                                                        v1594 = 13206;
                                                                                                                                                                      else
                                                                                                                                                                        v1594 = 13203;
                                                                                                                                                                    }
                                                                                                                                                                    else if (v1545)
                                                                                                                                                                    {
                                                                                                                                                                      v1594 = 13208;
                                                                                                                                                                    }
                                                                                                                                                                    else
                                                                                                                                                                    {
                                                                                                                                                                      v1594 = 13205;
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                  else if (*(_DWORD *)((char *)v85 + v84 - 4) == 909455918)
                                                                                                                                                                  {
                                                                                                                                                                    if (v1521 == 113)
                                                                                                                                                                    {
                                                                                                                                                                      if (v1545)
                                                                                                                                                                        v1594 = 12178;
                                                                                                                                                                      else
                                                                                                                                                                        v1594 = 12175;
                                                                                                                                                                    }
                                                                                                                                                                    else if (v1521 == 100)
                                                                                                                                                                    {
                                                                                                                                                                      if (v1545)
                                                                                                                                                                        v1594 = 12177;
                                                                                                                                                                      else
                                                                                                                                                                        v1594 = 12174;
                                                                                                                                                                    }
                                                                                                                                                                    else if (v1545)
                                                                                                                                                                    {
                                                                                                                                                                      v1594 = 12179;
                                                                                                                                                                    }
                                                                                                                                                                    else
                                                                                                                                                                    {
                                                                                                                                                                      v1594 = 12176;
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                  else if (v1521 == 113)
                                                                                                                                                                  {
                                                                                                                                                                    if (v1522)
                                                                                                                                                                      v1645 = 12643;
                                                                                                                                                                    else
                                                                                                                                                                      v1645 = 12637;
                                                                                                                                                                    if (v1545)
                                                                                                                                                                      v1594 = 12640;
                                                                                                                                                                    else
                                                                                                                                                                      v1594 = v1645;
                                                                                                                                                                  }
                                                                                                                                                                  else if (v1521 == 100)
                                                                                                                                                                  {
                                                                                                                                                                    if (v1522)
                                                                                                                                                                      v1644 = 12642;
                                                                                                                                                                    else
                                                                                                                                                                      v1644 = 12636;
                                                                                                                                                                    if (v1545)
                                                                                                                                                                      v1594 = 12639;
                                                                                                                                                                    else
                                                                                                                                                                      v1594 = v1644;
                                                                                                                                                                  }
                                                                                                                                                                  else if (v1545)
                                                                                                                                                                  {
                                                                                                                                                                    v1594 = 12641;
                                                                                                                                                                  }
                                                                                                                                                                  else
                                                                                                                                                                  {
                                                                                                                                                                    v1594 = 12638;
                                                                                                                                                                  }
                                                                                                                                                                  goto LABEL_3167;
                                                                                                                                                                }
                                                                                                                                                                v1515 = *(uint64_t **)(v3 + 40);
                                                                                                                                                                v1838 = *(void **)v1837;
                                                                                                                                                                v1516 = llvm::Intrinsic::getDeclaration(v1515, 58, (BOOL **)&v1838, 1);
                                                                                                                                                                v1518 = v1516;
                                                                                                                                                                if (v1516)
                                                                                                                                                                  v1519 = *(_QWORD *)(v1516 + 24);
                                                                                                                                                                else
                                                                                                                                                                  v1519 = 0;
                                                                                                                                                                *(_QWORD *)&v1864 = *((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                Int1Ty = llvm::Type::getInt1Ty(v1852, v1517);
                                                                                                                                                                *((_QWORD *)&v1864 + 1) = llvm::ConstantInt::get(Int1Ty, 0, 0);
                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                v631 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1519, v1518, (uint64_t *)&v1864, 2, (uint64_t)&__src, 0);
                                                                                                                                                                goto LABEL_914;
                                                                                                                                                              }
                                                                                                                                                              if (*v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x2E6464612E6B7361 && *((_BYTE *)v85 + 16) == 112)
                                                                                                                                                              {
                                                                                                                                                                if (*(_DWORD *)((char *)v85 + v84 - 4) == 842085678)
                                                                                                                                                                {
                                                                                                                                                                  v1536 = *((_BYTE *)v85 + 17) == 115;
                                                                                                                                                                  v1537 = 12224;
                                                                                                                                                                  goto LABEL_2737;
                                                                                                                                                                }
                                                                                                                                                                v1508 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                v1509 = *(int8x16_t **)v1508;
                                                                                                                                                                v1510 = (llvm::Value *)*((_QWORD *)v1508 + 4);
                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                FSub = (BOOL *)llvm::IRBuilderBase::CreateFAdd((llvm::IRBuilderBase *)&v1847, v1509, v1510, (const llvm::Twine *)&__src, 0);
                                                                                                                                                              }
                                                                                                                                                              else if (*v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x2E7669642E6B7361 && *((_BYTE *)v85 + 16) == 112)
                                                                                                                                                              {
                                                                                                                                                                if (*(_DWORD *)((char *)v85 + v84 - 4) == 842085678)
                                                                                                                                                                {
                                                                                                                                                                  v1536 = *((_BYTE *)v85 + 17) == 115;
                                                                                                                                                                  v1537 = 12255;
                                                                                                                                                                  goto LABEL_2737;
                                                                                                                                                                }
                                                                                                                                                                v1512 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                v1513 = *(int8x16_t **)v1512;
                                                                                                                                                                v1514 = (llvm::Value *)*((_QWORD *)v1512 + 4);
                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                FSub = (BOOL *)llvm::IRBuilderBase::CreateFDiv((llvm::IRBuilderBase *)&v1847, v1513, v1514, (const llvm::Twine *)&__src, 0);
                                                                                                                                                              }
                                                                                                                                                              else
                                                                                                                                                              {
                                                                                                                                                                if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x2E6C756D2E6B7361 || *((_BYTE *)v85 + 16) != 112)
                                                                                                                                                                {
                                                                                                                                                                  if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x2E6275732E6B7361 || *((_BYTE *)v85 + 16) != 112)
                                                                                                                                                                  {
                                                                                                                                                                    if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x2E78616D2E6B7361 || *((_BYTE *)v85 + 16) != 112)
                                                                                                                                                                    {
                                                                                                                                                                      v1491 = *v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x2E6E696D2E6B7361;
                                                                                                                                                                      if (!v1491 || *((_BYTE *)v85 + 16) != 112)
                                                                                                                                                                        goto LABEL_2125;
                                                                                                                                                                    }
                                                                                                                                                                    v1493 = 18;
                                                                                                                                                                    if (v84 < 0x12)
                                                                                                                                                                      v1493 = v84;
                                                                                                                                                                    if (v84 - v1493 != 4 || *(_DWORD *)((char *)v85 + v1493) != 842085678)
                                                                                                                                                                      goto LABEL_2125;
                                                                                                                                                                    v1494 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), llvm::UpgradeIntrinsicCall(llvm::CallBase *,llvm::Function *)::MinMaxTbl[2 * (*((_BYTE *)v85 + 13) == 105) + (*((_BYTE *)v85 + 17) == 100)], 0, 0);
                                                                                                                                                                    if (v1494)
                                                                                                                                                                      v1495 = *(_QWORD *)(v1494 + 24);
                                                                                                                                                                    else
                                                                                                                                                                      v1495 = 0;
                                                                                                                                                                    v1658 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                    *(_QWORD *)&v1864 = *v1658;
                                                                                                                                                                    *((_QWORD *)&v1864 + 1) = v1658[4];
                                                                                                                                                                    *(_QWORD *)&v1865 = v1658[16];
                                                                                                                                                                    LOWORD(v1846) = 257;
                                                                                                                                                                    Add = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1495, v1494, (uint64_t *)&v1864, 3, (uint64_t)&__src, 0);
                                                                                                                                                                    goto LABEL_2549;
                                                                                                                                                                  }
                                                                                                                                                                  if (*(_DWORD *)((char *)v85 + v84 - 4) != 842085678)
                                                                                                                                                                  {
                                                                                                                                                                    v1541 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                    v1542 = *(int8x16_t **)v1541;
                                                                                                                                                                    v1543 = (llvm::Value *)*((_QWORD *)v1541 + 4);
                                                                                                                                                                    LOWORD(v1846) = 257;
                                                                                                                                                                    FSub = (BOOL *)llvm::IRBuilderBase::CreateFSub((llvm::IRBuilderBase *)&v1847, v1542, v1543, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                    goto LABEL_2645;
                                                                                                                                                                  }
                                                                                                                                                                  v1536 = *((_BYTE *)v85 + 17) == 115;
                                                                                                                                                                  v1537 = 12736;
LABEL_2737:
                                                                                                                                                                  if (v1536)
                                                                                                                                                                    v1595 = v1537 + 1;
                                                                                                                                                                  else
                                                                                                                                                                    v1595 = v1537;
                                                                                                                                                                  v1596 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), v1595, 0, 0);
                                                                                                                                                                  if (v1596)
                                                                                                                                                                    v1597 = *(_QWORD *)(v1596 + 24);
                                                                                                                                                                  else
                                                                                                                                                                    v1597 = 0;
                                                                                                                                                                  v1598 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                                  *(_QWORD *)&v1864 = *v1598;
                                                                                                                                                                  *((_QWORD *)&v1864 + 1) = v1598[4];
                                                                                                                                                                  *(_QWORD *)&v1865 = v1598[16];
                                                                                                                                                                  LOWORD(v1846) = 257;
                                                                                                                                                                  v1544 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v1597, v1596, (uint64_t *)&v1864, 3, (uint64_t)&__src, 0);
                                                                                                                                                                  v1863[0] = v1544;
                                                                                                                                                                  goto LABEL_2744;
                                                                                                                                                                }
                                                                                                                                                                if (*(_DWORD *)((char *)v85 + v84 - 4) == 842085678)
                                                                                                                                                                {
                                                                                                                                                                  v1536 = *((_BYTE *)v85 + 17) == 115;
                                                                                                                                                                  v1537 = 12606;
                                                                                                                                                                  goto LABEL_2737;
                                                                                                                                                                }
                                                                                                                                                                v1533 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                                v1534 = *(int8x16_t **)v1533;
                                                                                                                                                                v1535 = (llvm::Value *)*((_QWORD *)v1533 + 4);
                                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                                FSub = (BOOL *)llvm::IRBuilderBase::CreateFMul((llvm::IRBuilderBase *)&v1847, v1534, v1535, (const llvm::Twine *)&__src, 0);
                                                                                                                                                              }
LABEL_2645:
                                                                                                                                                              v1544 = FSub;
                                                                                                                                                              v1863[0] = FSub;
LABEL_2744:
                                                                                                                                                              v1599 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                              v1600 = (unsigned __int8 *)*((_QWORD *)v1599 + 12);
                                                                                                                                                              v1601 = (Value *)*((_QWORD *)v1599 + 8);
LABEL_2745:
                                                                                                                                                              SExt = (BOOL *)EmitX86Select((uint64_t *)&v1847, v1600, (llvm::Type **)v1544, v1601);
                                                                                                                                                              goto LABEL_2508;
                                                                                                                                                            }
                                                                                                                                                            v1499 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                            v1500 = *(llvm::Value **)v1499;
                                                                                                                                                            v1501 = (llvm::Value *)*((_QWORD *)v1499 + 4);
                                                                                                                                                            LOWORD(v1846) = 257;
                                                                                                                                                            Add = (BOOL *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)&v1847, v1500, v1501, (const llvm::Twine *)&__src, 0, 0);
LABEL_2603:
                                                                                                                                                            v632 = (llvm::Type **)Add;
                                                                                                                                                            goto LABEL_2550;
                                                                                                                                                          }
                                                                                                                                                          goto LABEL_2546;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      v1429 = *(llvm::Type **)v1837;
                                                                                                                                                      llvm::VectorType::getInteger(*(llvm::Type ***)v1837, (llvm::VectorType *)v862);
                                                                                                                                                      v1459 = v1458;
                                                                                                                                                      v1460 = (llvm::Type **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                      LOWORD(v1846) = 257;
                                                                                                                                                      v1461 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1460, v1458, (const llvm::Twine *)&__src);
                                                                                                                                                      v1462 = (llvm::Type **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                                                                                                                      v1866 = 257;
                                                                                                                                                      v1463 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1462, v1459, (const llvm::Twine *)&v1864);
                                                                                                                                                      v1841 = 257;
                                                                                                                                                      Xor = (BOOL *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1461, (llvm::Value *)v1463, (const llvm::Twine *)&v1838);
LABEL_2547:
                                                                                                                                                      v1457 = (llvm::Type **)Xor;
                                                                                                                                                      goto LABEL_2548;
                                                                                                                                                    }
LABEL_2521:
                                                                                                                                                    v1429 = *(llvm::Type **)v1837;
                                                                                                                                                    llvm::VectorType::getInteger(*(llvm::Type ***)v1837, (llvm::VectorType *)v862);
                                                                                                                                                    v1451 = v1450;
                                                                                                                                                    v1452 = (llvm::Type **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                    LOWORD(v1846) = 257;
                                                                                                                                                    v1453 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1452, v1450, (const llvm::Twine *)&__src);
                                                                                                                                                    v1866 = 257;
                                                                                                                                                    v1454 = (BOOL *)llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)&v1847, v1453, (const llvm::Twine *)&v1864);
                                                                                                                                                    v1863[0] = v1454;
                                                                                                                                                    v1455 = (llvm::Type **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                                                                                                                    LOWORD(v1846) = 257;
                                                                                                                                                    v1456 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1455, v1451, (const llvm::Twine *)&__src);
                                                                                                                                                    v1866 = 257;
                                                                                                                                                    Xor = (BOOL *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1454, (llvm::Value *)v1456, (const llvm::Twine *)&v1864);
                                                                                                                                                    v1457 = (llvm::Type **)Xor;
LABEL_2548:
                                                                                                                                                    v1863[0] = Xor;
                                                                                                                                                    LOWORD(v1846) = 257;
                                                                                                                                                    Add = (BOOL *)llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1457, v1429, (const llvm::Twine *)&__src);
LABEL_2549:
                                                                                                                                                    v632 = (llvm::Type **)Add;
LABEL_2550:
                                                                                                                                                    v1863[0] = Add;
                                                                                                                                                    v1480 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                                    v634 = (unsigned __int8 *)*((_QWORD *)v1480 + 12);
                                                                                                                                                    v635 = (Value *)*((_QWORD *)v1480 + 8);
                                                                                                                                                    goto LABEL_2551;
                                                                                                                                                  }
                                                                                                                                                  if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x646E61702E6B7361 || *((_BYTE *)v85 + 16) != 46)
                                                                                                                                                  {
                                                                                                                                                    if (*v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x6E646E612E6B7361 && *((_BYTE *)v85 + 16) == 46)
                                                                                                                                                      goto LABEL_2521;
                                                                                                                                                    goto LABEL_2093;
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                                v1429 = *(llvm::Type **)v1837;
                                                                                                                                                llvm::VectorType::getInteger(*(llvm::Type ***)v1837, (llvm::VectorType *)v862);
                                                                                                                                                v1431 = v1430;
                                                                                                                                                v1432 = (llvm::Type **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                                LOWORD(v1846) = 257;
                                                                                                                                                v1433 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1432, v1430, (const llvm::Twine *)&__src);
                                                                                                                                                v1434 = (llvm::Type **)((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                                                                                                                v1866 = 257;
                                                                                                                                                v1435 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v1434, v1431, (const llvm::Twine *)&v1864);
                                                                                                                                                v1841 = 257;
                                                                                                                                                Xor = (BOOL *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1433, (llvm::Value *)v1435, (const llvm::Twine *)&v1838);
                                                                                                                                                goto LABEL_2547;
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                            v1359 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                            v1360 = *v1359;
                                                                                                                                            v1361 = v1359[4];
                                                                                                                                            v1362 = *(int *)(*(_QWORD *)v1837 + 32);
                                                                                                                                            v1363 = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                            llvm::SmallVector<int,64u>::SmallVector(&__src, v1362);
                                                                                                                                            v1364 = __src;
                                                                                                                                            if ((_DWORD)v1362)
                                                                                                                                            {
                                                                                                                                              v1365 = 0;
                                                                                                                                              v1366 = 0x80 / v1363;
                                                                                                                                              v1367 = (int8x16_t)vdupq_n_s32(v1362);
                                                                                                                                              v1368.i64[0] = 0x400000004;
                                                                                                                                              v1368.i64[1] = 0x400000004;
                                                                                                                                              v1369.i64[0] = 0x100000001;
                                                                                                                                              v1369.i64[1] = 0x100000001;
                                                                                                                                              v1370.i64[0] = 0x800000008;
                                                                                                                                              v1370.i64[1] = 0x800000008;
                                                                                                                                              while (1)
                                                                                                                                              {
                                                                                                                                                if (v1363 <= 0x80)
                                                                                                                                                {
                                                                                                                                                  v1371 = (v1366 >> 1) + v1365;
                                                                                                                                                  if (v1363 <= 0x10)
                                                                                                                                                  {
                                                                                                                                                    v1373 = 0;
                                                                                                                                                    v1374 = (uint32x4_t)vdupq_n_s32(v1371);
                                                                                                                                                    v1375 = v1366 & 0xF8;
                                                                                                                                                    v1376 = (int32x4_t)xmmword_181235170;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                      v1377 = (int32x4_t)vbicq_s8(v1367, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v1376, v1369)));
                                                                                                                                                      v1378 = (int32x4_t *)((char *)v1364 + 4 * v1373 + 4 * v1365);
                                                                                                                                                      *v1378 = vaddq_s32((int32x4_t)vsraq_n_u32(v1374, (uint32x4_t)v1376, 1uLL), v1377);
                                                                                                                                                      v1378[1] = vaddq_s32((int32x4_t)vsraq_n_u32(v1374, (uint32x4_t)vaddq_s32(v1376, v1368), 1uLL), v1377);
                                                                                                                                                      v1373 += 8;
                                                                                                                                                      v1376 = vaddq_s32(v1376, v1370);
                                                                                                                                                      v1375 -= 8;
                                                                                                                                                    }
                                                                                                                                                    while (v1375);
                                                                                                                                                    v1372 = v1366 & 0xF8;
                                                                                                                                                    if (v1372 == v1366)
                                                                                                                                                      goto LABEL_2463;
                                                                                                                                                  }
                                                                                                                                                  else
                                                                                                                                                  {
                                                                                                                                                    v1372 = 0;
                                                                                                                                                  }
                                                                                                                                                  do
                                                                                                                                                  {
                                                                                                                                                    *((_DWORD *)v1364 + v1372 + v1365) = v1371 + (v1372 >> 1) + (((int)((_DWORD)v1372 << 31) >> 31) & v1362);
                                                                                                                                                    ++v1372;
                                                                                                                                                  }
                                                                                                                                                  while (v1366 != v1372);
                                                                                                                                                }
LABEL_2463:
                                                                                                                                                v1365 += v1366;
                                                                                                                                                if (v1365 == v1362)
                                                                                                                                                  goto LABEL_2505;
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                            goto LABEL_2505;
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        v1411 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                        v1360 = *v1411;
                                                                                                                                        v1361 = v1411[4];
                                                                                                                                        v1412 = *(int *)(*(_QWORD *)v1837 + 32);
                                                                                                                                        v1413 = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                        llvm::SmallVector<int,64u>::SmallVector(&__src, v1412);
                                                                                                                                        v1364 = __src;
                                                                                                                                        if (!(_DWORD)v1412)
                                                                                                                                        {
LABEL_2505:
                                                                                                                                          v1866 = 257;
                                                                                                                                          ShuffleVector = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1360, v1361, (uint64_t)v1364, ParamAttrs, (uint64_t)&v1864);
                                                                                                                                          v1863[0] = ShuffleVector;
                                                                                                                                          v1427 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                          v1409 = (unsigned __int8 *)*((_QWORD *)v1427 + 12);
                                                                                                                                          v1410 = (Value *)*((_QWORD *)v1427 + 8);
                                                                                                                                          goto LABEL_2518;
                                                                                                                                        }
                                                                                                                                        v1414 = 0;
                                                                                                                                        v1415 = 0x80 / v1413;
                                                                                                                                        v1416 = (int8x16_t)vdupq_n_s32(v1412);
                                                                                                                                        v1417.i64[0] = 0x400000004;
                                                                                                                                        v1417.i64[1] = 0x400000004;
                                                                                                                                        v1418.i64[0] = 0x100000001;
                                                                                                                                        v1418.i64[1] = 0x100000001;
                                                                                                                                        v1419.i64[0] = 0x800000008;
                                                                                                                                        v1419.i64[1] = 0x800000008;
                                                                                                                                        while (1)
                                                                                                                                        {
                                                                                                                                          if (v1413 <= 0x80)
                                                                                                                                          {
                                                                                                                                            if (v1413 <= 0x10)
                                                                                                                                            {
                                                                                                                                              v1421 = 0;
                                                                                                                                              v1422 = (uint32x4_t)vdupq_n_s32(v1414);
                                                                                                                                              v1423 = v1415 & 0xF8;
                                                                                                                                              v1424 = (int32x4_t)xmmword_181235170;
                                                                                                                                              do
                                                                                                                                              {
                                                                                                                                                v1425 = (int32x4_t)vbicq_s8(v1416, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v1424, v1418)));
                                                                                                                                                v1426 = (int32x4_t *)((char *)v1364 + 4 * v1421 + 4 * v1414);
                                                                                                                                                *v1426 = vaddq_s32((int32x4_t)vsraq_n_u32(v1422, (uint32x4_t)v1424, 1uLL), v1425);
                                                                                                                                                v1426[1] = vaddq_s32((int32x4_t)vsraq_n_u32(v1422, (uint32x4_t)vaddq_s32(v1424, v1417), 1uLL), v1425);
                                                                                                                                                v1421 += 8;
                                                                                                                                                v1424 = vaddq_s32(v1424, v1419);
                                                                                                                                                v1423 -= 8;
                                                                                                                                              }
                                                                                                                                              while (v1423);
                                                                                                                                              v1420 = v1415 & 0xF8;
                                                                                                                                              if (v1420 == v1415)
                                                                                                                                                goto LABEL_2496;
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                              v1420 = 0;
                                                                                                                                            }
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                              *((_DWORD *)v1364 + v1420 + v1414) = v1414 + (v1420 >> 1) + (((int)((_DWORD)v1420 << 31) >> 31) & v1412);
                                                                                                                                              ++v1420;
                                                                                                                                            }
                                                                                                                                            while (v1415 != v1420);
                                                                                                                                          }
LABEL_2496:
                                                                                                                                          v1414 += v1415;
                                                                                                                                          if (v1414 == v1412)
                                                                                                                                            goto LABEL_2505;
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    v1347 = *((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                    v1348 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                                                                    v1349 = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                    if ((v1172 & 1) != 0)
                                                                                                                                    {
                                                                                                                                      v1350 = 0;
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                      v1392 = 0x6176783531322E6DLL;
                                                                                                                                      v1393 = bswap64((unint64_t)*v85);
                                                                                                                                      if (v1393 == 0x6176783531322E6DLL && (v1392 = 0x61736B2E6D6F7673, v1393 = bswap64((unint64_t)v85[1]), v1393 == 0x61736B2E6D6F7673) && (v1392 = 0x6F7673686475702ELL, v1393 = bswap64(*(unint64_t *)((char *)v85 + 13)), v1393 == 0x6F7673686475702ELL))
                                                                                                                                      {
                                                                                                                                        v1394 = 0;
                                                                                                                                      }
                                                                                                                                      else if (v1393 < v1392)
                                                                                                                                      {
                                                                                                                                        v1394 = -1;
                                                                                                                                      }
                                                                                                                                      else
                                                                                                                                      {
                                                                                                                                        v1394 = 1;
                                                                                                                                      }
                                                                                                                                      v1350 = v1394 == 0;
                                                                                                                                    }
                                                                                                                                    llvm::SmallVector<int,16u>::SmallVector(&__src, v1348);
                                                                                                                                    v1402 = __src;
                                                                                                                                    if ((_DWORD)v1348)
                                                                                                                                    {
                                                                                                                                      v1403 = 0;
                                                                                                                                      do
                                                                                                                                      {
                                                                                                                                        if (v1349 <= 0x80)
                                                                                                                                        {
                                                                                                                                          v1404 = 0;
                                                                                                                                          v1405 = 0x80 / v1349;
                                                                                                                                          do
                                                                                                                                          {
                                                                                                                                            v1406 = v1403 + v1404 + v1350;
                                                                                                                                            *((_DWORD *)v1402 + (v1403 + v1404)) = v1406;
                                                                                                                                            *((_DWORD *)v1402 + (v1403 + v1404 + 1)) = v1406;
                                                                                                                                            v1404 += 2;
                                                                                                                                            v1405 -= 2;
                                                                                                                                          }
                                                                                                                                          while (v1405);
                                                                                                                                        }
                                                                                                                                        v1403 += 0x80 / v1349;
                                                                                                                                      }
                                                                                                                                      while (v1403 != (_DWORD)v1348);
                                                                                                                                    }
                                                                                                                                    v1866 = 257;
                                                                                                                                    ShuffleVector = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1347, v1347, (uint64_t)v1402, ParamAttrs, (uint64_t)&v1864);
                                                                                                                                    v1863[0] = ShuffleVector;
                                                                                                                                    v1408 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                    v1409 = (unsigned __int8 *)*((_QWORD *)v1408 + 8);
                                                                                                                                    v1410 = (Value *)*((_QWORD *)v1408 + 4);
LABEL_2518:
                                                                                                                                    v1863[0] = (BOOL *)EmitX86Select((uint64_t *)&v1847, v1409, (llvm::Type **)ShuffleVector, v1410);
                                                                                                                                    v1320 = __src;
                                                                                                                                    if (__src == (llvm::MDNode *)&v1844)
                                                                                                                                      goto LABEL_1820;
                                                                                                                                    goto LABEL_2519;
                                                                                                                                  }
                                                                                                                                  v1379 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                                  v1380 = *v1379;
                                                                                                                                  v1381 = v1379[4];
                                                                                                                                  v1382 = v1379[8];
                                                                                                                                  v1383 = (_QWORD *)(v1382 + 24);
                                                                                                                                  if (*(_DWORD *)(v1382 + 32) >= 0x41u)
                                                                                                                                    v1383 = (_QWORD *)*v1383;
                                                                                                                                  v1384 = *(_DWORD *)v1383;
                                                                                                                                  v1385 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                                                                  v1386 = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v1837);
                                                                                                                                  llvm::SmallVector<int,16u>::SmallVector(&__src, v1385);
                                                                                                                                  if ((_DWORD)v1385)
                                                                                                                                  {
                                                                                                                                    v1387 = 0x80 / v1386;
                                                                                                                                    v1388 = (0x80 / v1386) >> 1;
                                                                                                                                    v1389 = __src;
                                                                                                                                    v1390 = ~(-1 << v1388);
                                                                                                                                    if (v1385 < 4)
                                                                                                                                    {
                                                                                                                                      for (j = 0;
                                                                                                                                            j != v1385;
                                                                                                                                            ++j)
                                                                                                                                      {
LABEL_2513:
                                                                                                                                        if (j % v1387 >= v1388)
                                                                                                                                          v1448 = v1385;
                                                                                                                                        else
                                                                                                                                          v1448 = 0;
                                                                                                                                        *((_DWORD *)v1389 + j) = j / v1387 * v1387 + ((v1384 >> ((v1388 * j) & 7)) & v1390) + v1448;
                                                                                                                                      }
                                                                                                                                      goto LABEL_2517;
                                                                                                                                    }
                                                                                                                                    j = v1385 & 0xFFFFFFFC;
                                                                                                                                    v1437 = vdupq_n_s32(v1387);
                                                                                                                                    v1438 = vdupq_n_s32(v1388);
                                                                                                                                    v1439 = (int8x16_t)vdupq_n_s32(v1385);
                                                                                                                                    v1440 = (uint32x4_t)vdupq_n_s32(v1384);
                                                                                                                                    v1441 = (int32x4_t)xmmword_181235170;
                                                                                                                                    v1442 = (int8x16_t)vdupq_n_s32(v1390);
                                                                                                                                    v1443.i64[0] = 0x700000007;
                                                                                                                                    v1443.i64[1] = 0x700000007;
                                                                                                                                    v1444.i64[0] = 0x400000004;
                                                                                                                                    v1444.i64[1] = 0x400000004;
                                                                                                                                    v1445 = j;
                                                                                                                                    v1446 = __src;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                      v1447.i32[0] = v1441.i32[0] % (unsigned __int32)v1437.i32[0];
                                                                                                                                      v1447.i32[1] = v1441.i32[1] % (unsigned __int32)v1437.i32[1];
                                                                                                                                      v1447.i32[2] = v1441.i32[2] % (unsigned __int32)v1437.i32[2];
                                                                                                                                      v1447.i32[3] = v1441.i32[3] % (unsigned __int32)v1437.i32[3];
                                                                                                                                      *(int32x4_t *)v1446 = vaddq_s32(vaddq_s32(vsubq_s32(v1441, v1447), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v1440, (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)vmulq_s32(v1438, v1441), v1443))), v1442)), (int32x4_t)vbicq_s8(v1439, (int8x16_t)vcgtq_u32((uint32x4_t)v1438, (uint32x4_t)v1447)));
                                                                                                                                      v1446 = (llvm::MDNode *)((char *)v1446 + 16);
                                                                                                                                      v1441 = vaddq_s32(v1441, v1444);
                                                                                                                                      v1445 -= 4;
                                                                                                                                    }
                                                                                                                                    while (v1445);
                                                                                                                                    if (j != v1385)
                                                                                                                                      goto LABEL_2513;
                                                                                                                                  }
LABEL_2517:
                                                                                                                                  v1866 = 257;
                                                                                                                                  ShuffleVector = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1380, v1381, (uint64_t)__src, ParamAttrs, (uint64_t)&v1864);
                                                                                                                                  v1863[0] = ShuffleVector;
                                                                                                                                  v1449 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                                  v1409 = (unsigned __int8 *)*((_QWORD *)v1449 + 16);
                                                                                                                                  v1410 = (Value *)*((_QWORD *)v1449 + 12);
                                                                                                                                  goto LABEL_2518;
                                                                                                                                }
                                                                                                                              }
                                                                                                                              v1307 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                              v1267 = *v1307;
                                                                                                                              v1308 = v1307[4];
                                                                                                                              v1309 = (unint64_t *)(v1308 + 24);
                                                                                                                              if (*(_DWORD *)(v1308 + 32) >= 0x41u)
                                                                                                                                v1309 = (unint64_t *)*v1309;
                                                                                                                              v1310 = *v1309;
                                                                                                                              v1311 = *(_DWORD *)(*(_QWORD *)v1837 + 32);
                                                                                                                              llvm::SmallVector<int,16u>::SmallVector(&__src, v1311);
                                                                                                                              v1272 = __src;
                                                                                                                              if (v1311)
                                                                                                                              {
                                                                                                                                v1312 = 0;
                                                                                                                                v1313.i64[0] = v1310;
                                                                                                                                v1313.i64[1] = v1310 >> 2;
                                                                                                                                v1314 = (int8x16_t)vdupq_n_s64(3uLL);
                                                                                                                                v1315 = vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v1310), (uint64x2_t)xmmword_181269A40), v1314);
                                                                                                                                v1316 = vandq_s8(v1313, v1314);
                                                                                                                                v1317 = (char *)__src + 8;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                  *((_DWORD *)v1317 - 2) = v1312;
                                                                                                                                  *((_DWORD *)v1317 - 1) = v1312 | 1;
                                                                                                                                  *(_DWORD *)v1317 = v1312 | 2;
                                                                                                                                  *((_DWORD *)v1317 + 1) = v1312 | 3;
                                                                                                                                  v1318 = (int8x16_t)vdupq_n_s64(v1312);
                                                                                                                                  *(_OWORD *)(v1317 + 8) = *(_OWORD *)&vuzp1q_s32((int32x4_t)vorrq_s8(v1318, v1316), (int32x4_t)vorrq_s8(v1318, v1315)) | __PAIR128__(0x400000004, 0x400000004);
                                                                                                                                  v1312 += 8;
                                                                                                                                  v1317 += 32;
                                                                                                                                }
                                                                                                                                while (v1311 != (_DWORD)v1312);
                                                                                                                              }
                                                                                                                            }
                                                                                                                            v1866 = 257;
                                                                                                                            v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1267, v1267, (uint64_t)v1272, ParamAttrs, (uint64_t)&v1864);
                                                                                                                            if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x80)
                                                                                                                            {
                                                                                                                              v1319 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                              v1863[0] = (BOOL *)EmitX86Select((uint64_t *)&v1847, *((unsigned __int8 **)v1319 + 12), (llvm::Type **)v1863[0], *((Value **)v1319 + 8));
                                                                                                                            }
                                                                                                                            v1320 = __src;
                                                                                                                            if (__src == (llvm::MDNode *)&v1844)
                                                                                                                              goto LABEL_1820;
LABEL_2519:
                                                                                                                            free(v1320);
                                                                                                                            goto LABEL_1820;
                                                                                                                          }
                                                                                                                          goto LABEL_2408;
                                                                                                                        }
                                                                                                                        if (*v85 != (Value *)0x6570762E32787661 || *(Value **)((char *)v85 + 7) != (Value *)0x38323169326D7265)
                                                                                                                          goto LABEL_1972;
                                                                                                                      }
                                                                                                                      v985 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                                                                                                                      v986 = (unint64_t *)(v985 + 24);
                                                                                                                      if (*(_DWORD *)(v985 + 32) >= 0x41u)
                                                                                                                        v986 = (unint64_t *)*v986;
                                                                                                                      v987 = *v986;
                                                                                                                      v988 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                                                      llvm::SmallVector<int,8u>::SmallVector(&__src, v988);
                                                                                                                      v990 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                                      v991 = *(_QWORD *)&v990[v987 & 0x20];
                                                                                                                      if ((v987 & 8) != 0)
                                                                                                                        v992 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1837, v989);
                                                                                                                      else
                                                                                                                        v992 = *(_QWORD *)&v990[32 * ((v987 >> 1) & 1)];
                                                                                                                      if ((v987 & 0x80) != 0)
                                                                                                                        v991 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1837, v989);
                                                                                                                      v1167 = __src;
                                                                                                                      if (v988 < 2)
                                                                                                                        goto LABEL_2389;
                                                                                                                      v1168 = v988 >> 1;
                                                                                                                      v1169 = ((int)((_DWORD)v987 << 31) >> 31) & (v988 >> 1);
                                                                                                                      if ((v988 >> 1) <= 1)
                                                                                                                        v1170 = 1;
                                                                                                                      else
                                                                                                                        v1170 = v1168;
                                                                                                                      if (v1170 >= 8)
                                                                                                                      {
                                                                                                                        v1287 = vdupq_n_s32(v1169);
                                                                                                                        v1288 = vdupq_n_s32(v1169 + 4);
                                                                                                                        v1171 = v1170 & 0x7FFFFFF8;
                                                                                                                        v1289 = (int32x4_t)xmmword_181235170;
                                                                                                                        v1290 = (int32x4_t *)((char *)__src + 16);
                                                                                                                        v1291.i64[0] = 0x800000008;
                                                                                                                        v1291.i64[1] = 0x800000008;
                                                                                                                        v1292 = v1171;
                                                                                                                        do
                                                                                                                        {
                                                                                                                          v1290[-1] = vaddq_s32(v1287, v1289);
                                                                                                                          *v1290 = vaddq_s32(v1288, v1289);
                                                                                                                          v1289 = vaddq_s32(v1289, v1291);
                                                                                                                          v1290 += 2;
                                                                                                                          v1292 -= 8;
                                                                                                                        }
                                                                                                                        while (v1292);
                                                                                                                        if (v1171 == v1170)
                                                                                                                          goto LABEL_2382;
                                                                                                                      }
                                                                                                                      else
                                                                                                                      {
                                                                                                                        v1171 = 0;
                                                                                                                      }
                                                                                                                      v1293 = v1169 + v1171;
                                                                                                                      v1294 = (_DWORD *)((char *)v1167 + 4 * v1171);
                                                                                                                      v1295 = v1170 - v1171;
                                                                                                                      do
                                                                                                                      {
                                                                                                                        *v1294++ = v1293++;
                                                                                                                        --v1295;
                                                                                                                      }
                                                                                                                      while (v1295);
LABEL_2382:
                                                                                                                      v1296 = (v1168 & ((int)((_DWORD)v987 << 27) >> 31)) + v988;
                                                                                                                      if (v1170 < 8)
                                                                                                                      {
                                                                                                                        v1297 = 0;
LABEL_2387:
                                                                                                                        v1304 = (_DWORD *)((char *)v1167 + 4 * v1297 + 4 * v1168);
                                                                                                                        v1305 = v1296 + v1297;
                                                                                                                        v1306 = v1170 - v1297;
                                                                                                                        do
                                                                                                                        {
                                                                                                                          *v1304++ = v1305++;
                                                                                                                          --v1306;
                                                                                                                        }
                                                                                                                        while (v1306);
                                                                                                                        goto LABEL_2389;
                                                                                                                      }
                                                                                                                      v1297 = v1170 & 0x7FFFFFF8;
                                                                                                                      v1298 = vdupq_n_s32(v1296);
                                                                                                                      v1299 = vdupq_n_s32(v1296 + 4);
                                                                                                                      v1300 = (int32x4_t *)((char *)v1167 + 4 * v1168 + 16);
                                                                                                                      v1301 = (int32x4_t)xmmword_181235170;
                                                                                                                      v1302.i64[0] = 0x800000008;
                                                                                                                      v1302.i64[1] = 0x800000008;
                                                                                                                      v1303 = v1297;
                                                                                                                      do
                                                                                                                      {
                                                                                                                        v1300[-1] = vaddq_s32(v1298, v1301);
                                                                                                                        *v1300 = vaddq_s32(v1299, v1301);
                                                                                                                        v1301 = vaddq_s32(v1301, v1302);
                                                                                                                        v1300 += 2;
                                                                                                                        v1303 -= 8;
                                                                                                                      }
                                                                                                                      while (v1303);
                                                                                                                      if (v1297 != v1170)
                                                                                                                        goto LABEL_2387;
LABEL_2389:
                                                                                                                      v1866 = 257;
                                                                                                                      v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v992, v991, (uint64_t)v1167, ParamAttrs, (uint64_t)&v1864);
                                                                                                                      v946 = __src;
                                                                                                                      if (__src != (llvm::MDNode *)&v1844)
                                                                                                                        goto LABEL_1819;
                                                                                                                      goto LABEL_1820;
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                v1103 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                                v1096 = *v1103;
                                                                                                                v1104 = v1103[4];
                                                                                                                v1105 = (_QWORD *)(v1104 + 24);
                                                                                                                if (*(_DWORD *)(v1104 + 32) >= 0x41u)
                                                                                                                  v1105 = (_QWORD *)*v1105;
                                                                                                                v1106 = (_QWORD *)*v1105;
                                                                                                                v1107 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                                                v1108 = *(_DWORD *)(*(_QWORD *)v1096 + 32);
                                                                                                                llvm::SmallVector<int,8u>::SmallVector(&__src, v1107);
                                                                                                                v1101 = __src;
                                                                                                                if (!(_DWORD)v1107)
                                                                                                                  goto LABEL_2417;
                                                                                                                v1109 = v1106 % (v1108 / v1107) * v1107;
                                                                                                                if (v1107 >= 8)
                                                                                                                {
                                                                                                                  v1149 = vdupq_n_s32(v1109);
                                                                                                                  v1150 = vdupq_n_s32(v1109 + 4);
                                                                                                                  v1110 = v1107 & 0xFFFFFFF8;
                                                                                                                  v1151 = (int32x4_t)xmmword_181235170;
                                                                                                                  v1152 = (int32x4_t *)((char *)__src + 16);
                                                                                                                  v1153.i64[0] = 0x800000008;
                                                                                                                  v1153.i64[1] = 0x800000008;
                                                                                                                  v1154 = v1110;
                                                                                                                  do
                                                                                                                  {
                                                                                                                    v1152[-1] = vaddq_s32(v1149, v1151);
                                                                                                                    *v1152 = vaddq_s32(v1150, v1151);
                                                                                                                    v1151 = vaddq_s32(v1151, v1153);
                                                                                                                    v1152 += 2;
                                                                                                                    v1154 -= 8;
                                                                                                                  }
                                                                                                                  while (v1154);
                                                                                                                  if (v1110 == v1107)
                                                                                                                    goto LABEL_2417;
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  v1110 = 0;
                                                                                                                }
                                                                                                                v1155 = (_DWORD *)((char *)v1101 + 4 * v1110);
                                                                                                                v1156 = v1107 - v1110;
                                                                                                                do
                                                                                                                {
                                                                                                                  *v1155++ = v1109 + v1110++;
                                                                                                                  --v1156;
                                                                                                                }
                                                                                                                while (v1156);
                                                                                                                goto LABEL_2417;
                                                                                                              }
                                                                                                            }
                                                                                                            v1069 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                            v1070 = (llvm::PoisonValue **)v1069[4];
                                                                                                            v1071 = v1069[8];
                                                                                                            v1072 = (_QWORD *)(v1071 + 24);
                                                                                                            if (*(_DWORD *)(v1071 + 32) >= 0x41u)
                                                                                                              v1072 = (_QWORD *)*v1072;
                                                                                                            v1073 = *v1069;
                                                                                                            v1074 = *(_DWORD *)v1072;
                                                                                                            v1075 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                                            v1076 = *((unsigned int *)*v1070 + 8);
                                                                                                            llvm::SmallVector<int,8u>::SmallVector(&__src, v1075);
                                                                                                            v1077 = __src;
                                                                                                            if ((_DWORD)v1076)
                                                                                                            {
                                                                                                              if (v1076 < 8)
                                                                                                              {
                                                                                                                for (k = 0;
                                                                                                                      k != v1076;
                                                                                                                      ++k)
                                                                                                                {
LABEL_1944:
                                                                                                                  *((_DWORD *)v1077 + k) = k;
                                                                                                                }
                                                                                                                goto LABEL_1945;
                                                                                                              }
                                                                                                              k = v1076 & 0xFFFFFFF8;
                                                                                                              v1114 = (int32x4_t)xmmword_181235170;
                                                                                                              v1115 = (int32x4_t *)((char *)__src + 16);
                                                                                                              v1116.i64[0] = 0x400000004;
                                                                                                              v1116.i64[1] = 0x400000004;
                                                                                                              v1117.i64[0] = 0x800000008;
                                                                                                              v1117.i64[1] = 0x800000008;
                                                                                                              v1118 = k;
                                                                                                              do
                                                                                                              {
                                                                                                                v1115[-1] = v1114;
                                                                                                                *v1115 = vaddq_s32(v1114, v1116);
                                                                                                                v1114 = vaddq_s32(v1114, v1117);
                                                                                                                v1115 += 2;
                                                                                                                v1118 -= 8;
                                                                                                              }
                                                                                                              while (v1118);
                                                                                                              if (k != v1076)
                                                                                                                goto LABEL_1944;
                                                                                                            }
LABEL_1945:
                                                                                                            if ((_DWORD)v1075 != (_DWORD)v1076)
                                                                                                            {
                                                                                                              v1119 = v1075 - v1076;
                                                                                                              v1120 = v1076;
                                                                                                              if ((v1075 - v1076) < 8)
                                                                                                                goto LABEL_3283;
                                                                                                              v1120 = v1076;
                                                                                                              if ((int)v1075 - 1 < v1076)
                                                                                                                goto LABEL_3283;
                                                                                                              v1120 = v1076 + (v1119 & 0xFFFFFFF8);
                                                                                                              v1121 = vdupq_n_s32(v1076);
                                                                                                              v1122 = v1076;
                                                                                                              v1123 = v1119 & 0xFFFFFFF8;
                                                                                                              do
                                                                                                              {
                                                                                                                v1124 = (int32x4_t *)((char *)v1077 + 4 * v1122);
                                                                                                                *v1124 = v1121;
                                                                                                                v1124[1] = v1121;
                                                                                                                v1122 += 8;
                                                                                                                v1123 -= 8;
                                                                                                              }
                                                                                                              while (v1123);
                                                                                                              if (v1119 != (v1119 & 0xFFFFFFF8))
                                                                                                              {
LABEL_3283:
                                                                                                                do
                                                                                                                  *((_DWORD *)v1077 + v1120++) = v1076;
                                                                                                                while ((_DWORD)v1075 != v1120);
                                                                                                              }
                                                                                                            }
                                                                                                            v1866 = 257;
                                                                                                            v1125 = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1070, (uint64_t)v1077, ParamAttrs, (uint64_t)&v1864);
                                                                                                            v1863[0] = v1125;
                                                                                                            v1127 = __src;
                                                                                                            if ((_DWORD)v1075)
                                                                                                            {
                                                                                                              if (v1075 < 8)
                                                                                                              {
                                                                                                                for (m = 0;
                                                                                                                      m != v1075;
                                                                                                                      ++m)
                                                                                                                {
LABEL_1958:
                                                                                                                  *((_DWORD *)v1127 + m) = m;
                                                                                                                }
                                                                                                                goto LABEL_1959;
                                                                                                              }
                                                                                                              m = v1075 & 0xFFFFFFF8;
                                                                                                              v1129 = (int32x4_t)xmmword_181235170;
                                                                                                              v1130 = (int32x4_t *)((char *)__src + 16);
                                                                                                              v1126.i64[0] = 0x400000004;
                                                                                                              v1126.i64[1] = 0x400000004;
                                                                                                              v1131.i64[0] = 0x800000008;
                                                                                                              v1131.i64[1] = 0x800000008;
                                                                                                              v1132 = m;
                                                                                                              do
                                                                                                              {
                                                                                                                v1130[-1] = v1129;
                                                                                                                *v1130 = vaddq_s32(v1129, v1126);
                                                                                                                v1129 = vaddq_s32(v1129, v1131);
                                                                                                                v1130 += 2;
                                                                                                                v1132 -= 8;
                                                                                                              }
                                                                                                              while (v1132);
                                                                                                              if (m != v1075)
                                                                                                                goto LABEL_1958;
                                                                                                            }
LABEL_1959:
                                                                                                            if ((_DWORD)v1076)
                                                                                                            {
                                                                                                              v1133 = v1074 % (v1075 / v1076) * v1076;
                                                                                                              if (v1076 < 0xC || __CFADD__(v1133, v1076 - 1))
                                                                                                              {
                                                                                                                v1158 = 0;
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                v1157 = 0;
                                                                                                                v1158 = v1076 & 0xFFFFFFF8;
                                                                                                                v1126.i32[0] = v1075;
                                                                                                                v1159 = vdupq_n_s32(v1075);
                                                                                                                v1160.i64[0] = 0x400000004;
                                                                                                                v1160.i64[1] = 0x400000004;
                                                                                                                v1161 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_s32(v1126, v1160), 0);
                                                                                                                v1162 = (int32x4_t)xmmword_181235170;
                                                                                                                v1163.i64[0] = 0x800000008;
                                                                                                                v1163.i64[1] = 0x800000008;
                                                                                                                v1164 = v1158;
                                                                                                                do
                                                                                                                {
                                                                                                                  v1165 = (int32x4_t *)((char *)v1127 + 4 * (v1133 + v1157));
                                                                                                                  *v1165 = vaddq_s32(v1159, v1162);
                                                                                                                  v1165[1] = vaddq_s32(v1161, v1162);
                                                                                                                  v1157 += 8;
                                                                                                                  v1162 = vaddq_s32(v1162, v1163);
                                                                                                                  v1164 -= 8;
                                                                                                                }
                                                                                                                while (v1164);
                                                                                                                if (v1158 == v1076)
                                                                                                                  goto LABEL_1966;
                                                                                                              }
                                                                                                              v1134 = v1075 + v1158;
                                                                                                              v1135 = v1076 - v1158;
                                                                                                              do
                                                                                                              {
                                                                                                                *((_DWORD *)v1127 + (v1133 + v1158++)) = v1134++;
                                                                                                                --v1135;
                                                                                                              }
                                                                                                              while (v1135);
                                                                                                            }
LABEL_1966:
                                                                                                            v1866 = 257;
                                                                                                            v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1073, (uint64_t)v1125, (uint64_t)v1127, ParamAttrs, (uint64_t)&v1864);
                                                                                                            if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0xA0)
                                                                                                              goto LABEL_2420;
                                                                                                            v1136 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                            v1137 = (unsigned __int8 *)*((_QWORD *)v1136 + 16);
                                                                                                            v1138 = (llvm::Type **)v1863[0];
                                                                                                            v1139 = (Value *)*((_QWORD *)v1136 + 12);
                                                                                                            goto LABEL_2419;
                                                                                                          }
                                                                                                        }
                                                                                                      }
LABEL_1718:
                                                                                                      v993 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                      v994 = *v993;
                                                                                                      v995 = v993[4];
                                                                                                      v996 = v993[8];
                                                                                                      v997 = (_QWORD *)(v996 + 24);
                                                                                                      if (*(_DWORD *)(v996 + 32) >= 0x41u)
                                                                                                        v997 = (_QWORD *)*v997;
                                                                                                      v998 = *(_DWORD *)v997;
                                                                                                      v999 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                                      llvm::SmallVector<int,16u>::SmallVector(&__src, v999);
                                                                                                      v1000 = __src;
                                                                                                      if (!(_DWORD)v999)
                                                                                                        goto LABEL_1843;
                                                                                                      if (v999 >= 8)
                                                                                                      {
                                                                                                        v1001 = v999 & 0xFFFFFFF8;
                                                                                                        v1052 = (int8x16_t)vdupq_n_s32(v998);
                                                                                                        v1053 = (int8x16_t)vdupq_n_s32(v999);
                                                                                                        v1054 = (int32x4_t)xmmword_181235170;
                                                                                                        v1055 = (int32x4_t *)((char *)__src + 16);
                                                                                                        v1056.i64[0] = 0x400000004;
                                                                                                        v1056.i64[1] = 0x400000004;
                                                                                                        v1057.i64[0] = 0x700000007;
                                                                                                        v1057.i64[1] = 0x700000007;
                                                                                                        v1058.i64[0] = 0x100000001;
                                                                                                        v1058.i64[1] = 0x100000001;
                                                                                                        v1059.i64[0] = 0x800000008;
                                                                                                        v1059.i64[1] = 0x800000008;
                                                                                                        v1060 = v1001;
                                                                                                        do
                                                                                                        {
                                                                                                          v1061 = vaddq_s32(v1054, v1056);
                                                                                                          v1055[-1] = vaddq_s32((int32x4_t)vbicq_s8(v1053, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v1058, (uint32x4_t)vandq_s8((int8x16_t)v1054, v1057)), v1052))), v1054);
                                                                                                          *v1055 = vaddq_s32((int32x4_t)vbicq_s8(v1053, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v1058, (uint32x4_t)vandq_s8((int8x16_t)v1061, v1057)), v1052))), v1061);
                                                                                                          v1054 = vaddq_s32(v1054, v1059);
                                                                                                          v1055 += 2;
                                                                                                          v1060 -= 8;
                                                                                                        }
                                                                                                        while (v1060);
                                                                                                        if (v1001 == v999)
                                                                                                        {
LABEL_1843:
                                                                                                          v1866 = 257;
                                                                                                          v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v994, v995, (uint64_t)v1000, ParamAttrs, (uint64_t)&v1864);
                                                                                                          v946 = __src;
                                                                                                          if (__src != (llvm::MDNode *)&v1844)
                                                                                                            goto LABEL_1819;
                                                                                                          goto LABEL_1820;
                                                                                                        }
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v1001 = 0;
                                                                                                      }
                                                                                                      do
                                                                                                      {
                                                                                                        *((_DWORD *)v1000 + v1001) = v1001 + (((int)(v998 >> (v1001 & 7) << 31) >> 31) & v999);
                                                                                                        ++v1001;
                                                                                                      }
                                                                                                      while (v999 != v1001);
                                                                                                      goto LABEL_1843;
                                                                                                    default:
                                                                                                      v1811 = v864;
                                                                                                      v1813 = v859;
                                                                                                      v1809 = v863;
                                                                                                      if ((v864 & 1) == 0)
                                                                                                        goto LABEL_1649;
                                                                                                      goto LABEL_1653;
                                                                                                  }
                                                                                                }
LABEL_1772:
                                                                                                v1028 = *v85 == (Value *)0x6461702E32657373 && *(Value **)((char *)v85 + 3) == (Value *)0x2E73646461702E32;
                                                                                                if (v1028 || (*v85 == (Value *)0x6461702E32787661 ? (v1029 = *(Value **)((char *)v85 + 3) == (Value *)0x2E73646461702E32) : (v1029 = 0), v1029 || (v865 = v84 < 0xD, v84 >= 0xD) && (*v85 == (Value *)0x702E323135787661 ? (v1030 = *(Value **)((char *)v85 + 5) == (Value *)0x2E73646461702E32) : (v1030 = 0), v1030)) || (v862 & 1) == 0 && (*v85 == (Value *)0x6D2E323135787661 ? (v1031 = v85[1] == (Value *)0x646461702E6B7361) : (v1031 = 0), v1031 ? (v1032 = *((unsigned __int16 *)v85 + 8) == 11891) : (v1032 = 0), v1032))
                                                                                                {
                                                                                                  v1045 = v1837;
                                                                                                  v1046 = 287;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v1033 = *v85 == (Value *)0x7573702E32657373 && *(Value **)((char *)v85 + 3) == (Value *)0x2E73627573702E32;
                                                                                                  if (v1033 || (*v85 == (Value *)0x7573702E32787661 ? (v1034 = *(Value **)((char *)v85 + 3) == (Value *)0x2E73627573702E32) : (v1034 = 0), v1034 || v84 >= 0xD && (*v85 == (Value *)0x702E323135787661 ? (v1035 = *(Value **)((char *)v85 + 5) == (Value *)0x2E73627573702E32) : (v1035 = 0), v1035)) || (v862 & 1) == 0 && (*v85 == (Value *)0x6D2E323135787661 ? (v1036 = v85[1] == (Value *)0x627573702E6B7361) : (v1036 = 0), v1036 ? (v1037 = *((unsigned __int16 *)v85 + 8) == 11891) : (v1037 = 0), v1037))
                                                                                                  {
                                                                                                    v1045 = v1837;
                                                                                                    v1046 = 310;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    if (v84 < 0xC)
                                                                                                    {
                                                                                                      v866 = 0;
                                                                                                      v864 = 1;
                                                                                                      v867 = 1;
                                                                                                      v868 = 1;
                                                                                                      goto LABEL_1457;
                                                                                                    }
                                                                                                    v1079 = *v85 == (Value *)0x6461702E32657373 && *((_DWORD *)v85 + 2) == 779318628;
                                                                                                    if (v1079 || (*v85 == (Value *)0x6461702E32787661 ? (v1080 = *((unsigned int *)v85 + 2) == 779318628) : (v1080 = 0), v1080 || v84 >= 0x13 && (*v85 == (Value *)0x6D2E323135787661 ? (v1081 = v85[1] == (Value *)0x646461702E6B7361) : (v1081 = 0), v1081 ? (v1082 = *(Value **)((char *)v85 + 11) == (Value *)0x2E7375646461702ELL) : (v1082 = 0), v1082)))
                                                                                                    {
                                                                                                      v1045 = v1837;
                                                                                                      v1046 = 328;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      if ((*v85 != (Value *)0x7573702E32657373 || *((_DWORD *)v85 + 2) != 779318626) && (*v85 != (Value *)0x7573702E32787661 || *((_DWORD *)v85 + 2) != 779318626))
                                                                                                      {
                                                                                                        if (v84 < 0x13 || (*v85 == (Value *)0x6D2E323135787661 ? (v1085 = v85[1] == (Value *)0x627573702E6B7361) : (v1085 = 0), v1085 ? (v1086 = *(Value **)((char *)v85 + 11) == (Value *)0x2E7375627573702ELL) : (v1086 = 0), !v1086))
                                                                                                        {
                                                                                                          v868 = v84 < 0x14;
                                                                                                          if (v84 >= 0x14 && (*v85 == (Value *)0x6D2E323135787661 ? (v1087 = v85[1] == (Value *)0x696C61702E6B7361) : (v1087 = 0), v1087 ? (v1088 = *((_DWORD *)v85 + 4) == 779251303) : (v1088 = 0), v1088))
                                                                                                          {
                                                                                                            v1395 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                            v1396 = *(Type **)v1395;
                                                                                                            v1397 = (Type *)*((_QWORD *)v1395 + 4);
                                                                                                            v1398 = *((_QWORD *)v1395 + 8);
                                                                                                            v1399 = (Value *)*((_QWORD *)v1395 + 12);
                                                                                                            v1400 = (unsigned __int8 *)*((_QWORD *)v1395 + 16);
                                                                                                            v1401 = 0;
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            if (v84 < 0x13)
                                                                                                            {
                                                                                                              v864 = 0;
                                                                                                              v866 = 0;
                                                                                                              v867 = 1;
                                                                                                              goto LABEL_1457;
                                                                                                            }
                                                                                                            if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x696C61762E6B7361 || *(Value **)((char *)v85 + 11) != (Value *)0x2E6E67696C61762ELL)
                                                                                                            {
                                                                                                              v864 = 0;
                                                                                                              v866 = 0;
                                                                                                              v867 = 0;
                                                                                                              goto LABEL_1457;
                                                                                                            }
                                                                                                            v1428 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                            v1396 = *(Type **)v1428;
                                                                                                            v1397 = (Type *)*((_QWORD *)v1428 + 4);
                                                                                                            v1398 = *((_QWORD *)v1428 + 8);
                                                                                                            v1399 = (Value *)*((_QWORD *)v1428 + 12);
                                                                                                            v1400 = (unsigned __int8 *)*((_QWORD *)v1428 + 16);
                                                                                                            v1401 = 1;
                                                                                                          }
                                                                                                          UpgradeX86ALIGNIntrinsics((uint64_t)&v1847, v1396, v1397, v1398, v1399, v1400, v1401);
                                                                                                          goto LABEL_2508;
                                                                                                        }
                                                                                                      }
                                                                                                      v1045 = v1837;
                                                                                                      v1046 = 339;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                SExt = (BOOL *)UpgradeX86BinaryIntrinsics((uint64_t *)&v1847, v1045, v1046);
LABEL_1824:
                                                                                                Select = (llvm::Value *)SExt;
LABEL_1825:
                                                                                                v1863[0] = SExt;
                                                                                                goto LABEL_1826;
                                                                                              }
                                                                                              v861 = 1;
                                                                                              v862 = 1;
                                                                                              goto LABEL_1535;
                                                                                            }
                                                                                            if (*v85 != (Value *)0x6F7262762E787661
                                                                                              || v85[1] != (Value *)0x3166747361636461
                                                                                              || *((_WORD *)v85 + 8) != 14386)
                                                                                            {
                                                                                              if (v84 != 19
                                                                                                || (*v85 == (Value *)0x7262762E32787661 ? (v884 = v85[1] == (Value *)0x697473616364616FLL) : (v884 = 0),
                                                                                                    v884 ? (v885 = *(Value **)((char *)v85 + 11) == (Value *)0x3832316974736163) : (v885 = 0),
                                                                                                    !v885))
                                                                                              {
LABEL_1514:
                                                                                                v887 = *v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x667568732E6B7361 && *((_WORD *)v85 + 8) == 26926;
                                                                                                if (v887 || (*v85 == (Value *)0x6D2E323135787661 ? (v888 = v85[1] == (Value *)0x667568732E6B7361) : (v888 = 0), v888 ? (v889 = *((unsigned __int16 *)v85 + 8) == 26158) : (v889 = 0), v889))
                                                                                                {
                                                                                                  v903 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                                                                                                  v904 = (_QWORD *)(v903 + 24);
                                                                                                  if (*(_DWORD *)(v903 + 32) >= 0x41u)
                                                                                                    v904 = (_QWORD *)*v904;
                                                                                                  v905 = *(_DWORD *)v904;
                                                                                                  v906 = *(llvm::Type **)v1837;
                                                                                                  __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1837);
                                                                                                  ParamAttrs = (uint64_t)v907;
                                                                                                  v908 = (unint64_t)llvm::TypeSize::operator unsigned long long(&__src, v907) >> 7;
                                                                                                  v909 = llvm::Type::getScalarSizeInBits(v906);
                                                                                                  __src = (llvm::MDNode *)&v1844;
                                                                                                  ParamAttrs = 0x800000000;
                                                                                                  if ((_DWORD)v908)
                                                                                                  {
                                                                                                    v910 = v909;
                                                                                                    v911 = 0;
                                                                                                    v912 = 0;
                                                                                                    v913 = v908 >> 1;
                                                                                                    v914 = 0x80 / v909;
                                                                                                    do
                                                                                                    {
                                                                                                      if (v910 <= 0x80)
                                                                                                      {
                                                                                                        v915 = 0;
                                                                                                        if (v912 >= v913)
                                                                                                          v916 = v908;
                                                                                                        else
                                                                                                          v916 = 0;
                                                                                                        v917 = (((v905 >> (v912 * v913)) & (v908 - 1)) + v916) * v914;
                                                                                                        v918 = v914;
                                                                                                        do
                                                                                                        {
                                                                                                          if (v911 >= HIDWORD(ParamAttrs))
                                                                                                          {
                                                                                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v1844, v911 + 1, 4);
                                                                                                            v911 = ParamAttrs;
                                                                                                          }
                                                                                                          *((_DWORD *)__src + v911) = v915 + v917;
                                                                                                          v911 = ParamAttrs + 1;
                                                                                                          LODWORD(ParamAttrs) = ParamAttrs + 1;
                                                                                                          ++v915;
                                                                                                          --v918;
                                                                                                        }
                                                                                                        while (v918);
                                                                                                      }
                                                                                                      ++v912;
                                                                                                    }
                                                                                                    while (v912 != (_DWORD)v908);
                                                                                                    v934 = __src;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v911 = 0;
                                                                                                    v934 = (llvm::MDNode *)&v1844;
                                                                                                  }
                                                                                                  v942 = (uint64_t *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                  v943 = *v942;
                                                                                                  v944 = v942[4];
                                                                                                  v1866 = 257;
                                                                                                  v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v943, v944, (uint64_t)v934, v911, (uint64_t)&v1864);
                                                                                                  v945 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                  v1863[0] = (BOOL *)EmitX86Select((uint64_t *)&v1847, *((unsigned __int8 **)v945 + 16), (llvm::Type **)v1863[0], *((Value **)v945 + 12));
                                                                                                  v946 = __src;
                                                                                                  if (__src == (llvm::MDNode *)&v1844)
                                                                                                    goto LABEL_1820;
                                                                                                  goto LABEL_1819;
                                                                                                }
                                                                                                if (v84 < 0x16)
                                                                                                {
                                                                                                  v862 = 0;
                                                                                                  v861 = 1;
LABEL_1535:
                                                                                                  if ((*v85 != (Value *)0x7262702E32787661 || *(Value **)((char *)v85 + 7) != (Value *)0x7473616364616F72) && (*v85 != (Value *)0x7262762E32787661 || *(Value **)((char *)v85 + 7) != (Value *)0x7473616364616F72))
                                                                                                  {
                                                                                                    if (v84 < 0x11)
                                                                                                    {
                                                                                                      v860 = 0;
                                                                                                      v859 = 1;
                                                                                                      v863 = 1;
                                                                                                      goto LABEL_1772;
                                                                                                    }
                                                                                                    if (*v85 != (Value *)0x702E323135787661 || v85[1] != (Value *)0x73616364616F7262 || *((_BYTE *)v85 + 16) != 116)
                                                                                                    {
                                                                                                      if (v84 < 0x17)
                                                                                                      {
                                                                                                        v859 = 0;
                                                                                                        v860 = 0;
                                                                                                        v863 = 1;
                                                                                                        goto LABEL_1772;
                                                                                                      }
                                                                                                      if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x616F72622E6B7361 || *(Value **)((char *)v85 + 15) != (Value *)0x732E747361636461)
                                                                                                      {
                                                                                                        v859 = 0;
                                                                                                        v860 = 0;
                                                                                                        v863 = 0;
                                                                                                        goto LABEL_1772;
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                  v1038 = (llvm::PoisonValue **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                  v1039 = (llvm::Type *)(*(unsigned int *)(*(_QWORD *)v1837 + 32) | ((unint64_t)(*(_BYTE *)(*(_QWORD *)v1837 + 8) == 19) << 32));
                                                                                                  v1040 = (llvm::ScalableVectorType *)llvm::Type::getInt32Ty(DesiredBytecodeVersion, (llvm::LLVMContext *)v862);
                                                                                                  llvm::VectorType::get(v1040, v1039);
                                                                                                  __src = (llvm::MDNode *)&v1844;
                                                                                                  ParamAttrs = 0x800000000;
                                                                                                  llvm::Constant::getNullValue(v1041, v1042);
                                                                                                  llvm::ShuffleVectorInst::getShuffleMask(v1043, (uint64_t)&__src);
                                                                                                  v1866 = 257;
                                                                                                  v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1038, (uint64_t)__src, ParamAttrs, (uint64_t)&v1864);
                                                                                                  if (((llvm::CallBase::arg_end(v1837) - ((_QWORD)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x60)
                                                                                                  {
                                                                                                    v1044 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                    v1863[0] = (BOOL *)EmitX86Select((uint64_t *)&v1847, *((unsigned __int8 **)v1044 + 8), (llvm::Type **)v1863[0], *((Value **)v1044 + 4));
                                                                                                  }
                                                                                                  v946 = __src;
                                                                                                  if (__src == (llvm::MDNode *)&v1844)
                                                                                                    goto LABEL_1820;
LABEL_1819:
                                                                                                  free(v946);
                                                                                                  goto LABEL_1820;
                                                                                                }
                                                                                                if (*v85 != (Value *)0x6D2E323135787661 || v85[1] != (Value *)0x616F72622E6B7361 || *(Value **)((char *)v85 + 14) != (Value *)0x667473616364616FLL)
                                                                                                {
                                                                                                  v949 = *v85 == (Value *)0x6D2E323135787661 && v85[1] == (Value *)0x616F72622E6B7361;
                                                                                                  if (!v949 || *(Value **)((char *)v85 + 14) != (Value *)0x697473616364616FLL)
                                                                                                  {
                                                                                                    v861 = 0;
                                                                                                    v862 = 0;
                                                                                                    goto LABEL_1535;
                                                                                                  }
                                                                                                }
                                                                                                v954 = *(_DWORD *)(**((_QWORD **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)) + 32);
                                                                                                v955 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                                llvm::SmallVector<int,8u>::SmallVector(&__src, v955);
                                                                                                v956 = __src;
                                                                                                if ((_DWORD)v955)
                                                                                                {
                                                                                                  if ((_DWORD)v955 == 1)
                                                                                                  {
                                                                                                    for (n = 0;
                                                                                                          n != v955;
                                                                                                          ++n)
                                                                                                    {
LABEL_1848:
                                                                                                      *((_DWORD *)v956 + n) = n % v954;
                                                                                                    }
                                                                                                    goto LABEL_1849;
                                                                                                  }
                                                                                                  v1062 = 0;
                                                                                                  n = v955 & 0xFFFFFFFE;
                                                                                                  do
                                                                                                  {
                                                                                                    v1063 = (unsigned int *)((char *)v956 + 4 * v1062);
                                                                                                    *v1063 = v1062 % v954;
                                                                                                    v1063[1] = ((int)v1062 + 1) % v954;
                                                                                                    v1062 += 2;
                                                                                                  }
                                                                                                  while (n != v1062);
                                                                                                  if (n != v955)
                                                                                                    goto LABEL_1848;
                                                                                                }
LABEL_1849:
                                                                                                v1064 = *((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                                v1866 = 257;
                                                                                                v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1064, v1064, (uint64_t)v956, ParamAttrs, (uint64_t)&v1864);
                                                                                                v1065 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                                v1863[0] = (BOOL *)EmitX86Select((uint64_t *)&v1847, *((unsigned __int8 **)v1065 + 8), (llvm::Type **)v1863[0], *((Value **)v1065 + 4));
                                                                                                v946 = __src;
                                                                                                if (__src == (llvm::MDNode *)&v1844)
                                                                                                  goto LABEL_1820;
                                                                                                goto LABEL_1819;
                                                                                              }
                                                                                            }
LABEL_1532:
                                                                                            v890 = *(llvm::Type **)(*(_QWORD *)v1837 + 24);
                                                                                            __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(v890);
                                                                                            ParamAttrs = (uint64_t)v891;
                                                                                            v892 = (llvm::Type *)(0x80uLL / llvm::TypeSize::operator unsigned long long(&__src, v891));
                                                                                            llvm::FixedVectorType::get(v890, v892);
                                                                                            v894 = (llvm::Type *)v893;
                                                                                            v895 = (llvm::Value *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                            v896 = (llvm::Type *)llvm::PointerType::get(v893, 0);
                                                                                            LOWORD(v1846) = 257;
                                                                                            PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)&v1847, v895, v896, (const llvm::Twine *)&__src, v897);
                                                                                            LOWORD(v1846) = 257;
                                                                                            v899 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)&v1847, v894, (uint64_t)PointerCast, 256, 0, (uint64_t)&__src);
                                                                                            if ((_DWORD)v892 == 2)
                                                                                            {
                                                                                              v1864 = xmmword_181269A60;
                                                                                              LOWORD(v1846) = 257;
                                                                                              v900 = 4;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v1864 = xmmword_1812699F4;
                                                                                              v1865 = *(_OWORD *)algn_181269A04;
                                                                                              LOWORD(v1846) = 257;
                                                                                              v900 = 8;
                                                                                            }
                                                                                            SExt = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, (llvm::PoisonValue **)v899, (uint64_t)&v1864, v900, (uint64_t)&__src);
                                                                                            goto LABEL_1824;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      v1740 = *(llvm::Type **)v1837;
                                                                                      v1741 = *(unsigned int *)(*(_QWORD *)v1837 + 32);
                                                                                      llvm::SmallVector<int,8u>::SmallVector(&__src, v1741);
                                                                                      v1742 = __src;
                                                                                      if (!(_DWORD)v1741)
                                                                                        goto LABEL_3197;
                                                                                      if (v1741 >= 8)
                                                                                      {
                                                                                        v1743 = v1741 & 0xFFFFFFF8;
                                                                                        v1760 = (int32x4_t)xmmword_181235170;
                                                                                        v1761 = (int32x4_t *)((char *)__src + 16);
                                                                                        v1762.i64[0] = 0x400000004;
                                                                                        v1762.i64[1] = 0x400000004;
                                                                                        v1763.i64[0] = 0x800000008;
                                                                                        v1763.i64[1] = 0x800000008;
                                                                                        v1764 = v1743;
                                                                                        do
                                                                                        {
                                                                                          v1761[-1] = v1760;
                                                                                          *v1761 = vaddq_s32(v1760, v1762);
                                                                                          v1760 = vaddq_s32(v1760, v1763);
                                                                                          v1761 += 2;
                                                                                          v1764 -= 8;
                                                                                        }
                                                                                        while (v1764);
                                                                                        if (v1743 == v1741)
                                                                                          goto LABEL_3197;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1743 = 0;
                                                                                      }
                                                                                      do
                                                                                      {
                                                                                        *((_DWORD *)v1742 + v1743) = v1743;
                                                                                        ++v1743;
                                                                                      }
                                                                                      while (v1741 != v1743);
LABEL_3197:
                                                                                      v1765 = (llvm::PoisonValue **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                      v1866 = 257;
                                                                                      v1766 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, v1765, (uint64_t)v1742, ParamAttrs, (uint64_t)&v1864);
                                                                                      if (llvm::StringRef::find((uint64_t *)&v1833, "pmovsx", 6uLL, 0) == -1)
                                                                                      {
                                                                                        v1866 = 257;
                                                                                        ZExt = (BOOL *)llvm::IRBuilderBase::CreateZExt((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1766, v1740, (const llvm::Twine *)&v1864, 0);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1866 = 257;
                                                                                        ZExt = (BOOL *)llvm::IRBuilderBase::CreateSExt((llvm::IRBuilderBase *)&v1847, (llvm::Type **)v1766, v1740, (const llvm::Twine *)&v1864);
                                                                                      }
                                                                                      v1863[0] = ZExt;
                                                                                      v1768 = v1837;
                                                                                      if (((llvm::CallBase::arg_end(v1837)
                                                                                           - ((_QWORD)v1768
                                                                                            - 32
                                                                                            * (*((_DWORD *)v1768 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x60)
                                                                                      {
                                                                                        v1769 = (char *)v1837
                                                                                              - 32
                                                                                              * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                                        v1863[0] = (BOOL *)EmitX86Select((uint64_t *)&v1847, *((unsigned __int8 **)v1769 + 8), (llvm::Type **)v1863[0], *((Value **)v1769 + 4));
                                                                                      }
                                                                                      v703 = __src;
                                                                                      if (__src == (llvm::MDNode *)&v1844)
                                                                                        goto LABEL_1820;
                                                                                      goto LABEL_1033;
                                                                                    }
                                                                                    v778 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), 13252, 0, 0);
                                                                                    v779 = (llvm::Type **)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                                    v781 = (llvm::Type *)llvm::Type::getInt32Ty(DesiredBytecodeVersion, v780);
                                                                                    LOWORD(v1846) = 257;
                                                                                    v782 = llvm::IRBuilderBase::CreateTrunc((llvm::IRBuilderBase *)&v1847, v779, v781, (const llvm::Twine *)&__src);
                                                                                    if (v778)
                                                                                      v783 = *(_QWORD *)(v778 + 24);
                                                                                    else
                                                                                      v783 = 0;
                                                                                    *(_QWORD *)&v1864 = v782;
                                                                                    *((_QWORD *)&v1864 + 1) = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                                                    LOWORD(v1846) = 257;
                                                                                    v641 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v783, v778, (uint64_t *)&v1864, 2, (uint64_t)&__src, 0);
                                                                                    v1863[0] = v641;
                                                                                    v640 = *(llvm::Type **)v1837;
                                                                                    LOWORD(v1846) = 257;
LABEL_926:
                                                                                    inserted = (BOOL *)llvm::IRBuilderBase::CreateZExt((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v641, v640, (const llvm::Twine *)&__src, 0);
LABEL_1056:
                                                                                    Select = (llvm::Value *)inserted;
                                                                                    goto LABEL_1057;
                                                                                  }
                                                                                  v775 = v1833;
                                                                                  if (*v1833 != (Value *)0x6D2E323135787661
                                                                                    || v1833[1] != (Value *)0x687370762E6B7361
                                                                                    || *((_WORD *)v1833 + 8) != 25714)
                                                                                  {
                                                                                    if (v25 < 0x13)
                                                                                      goto LABEL_1406;
                                                                                    v846 = *v1833 == (Value *)0x6D2E323135787661
                                                                                        && v1833[1] == (Value *)0x7370762E7A6B7361;
                                                                                    if (!v846
                                                                                      || *(Value **)((char *)v1833 + 11) != (Value *)0x6472687370762E7ALL)
                                                                                    {
                                                                                      goto LABEL_1406;
                                                                                    }
                                                                                  }
                                                                                }
                                                                                inserted = (BOOL *)upgradeX86ConcatShift((llvm::IRBuilderBase *)&v1847, (BOOL **)v1837, 1, *((unsigned __int8 *)v775 + 11) == 122);
                                                                              }
LABEL_923:
                                                                              Select = (llvm::Value *)inserted;
LABEL_1057:
                                                                              v1863[0] = inserted;
                                                                              goto LABEL_1826;
                                                                            }
                                                                            if (((llvm::CallBase::arg_end(v1837)
                                                                                 - ((_QWORD)v1837
                                                                                  - 32
                                                                                  * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x60)
                                                                            {
                                                                              v823 = ((_QWORD *)v1837
                                                                                    - 4
                                                                                    * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                                                                              v824 = (_QWORD *)(v823 + 24);
                                                                              if (*(_DWORD *)(v823 + 32) >= 0x41u)
                                                                                v824 = (_QWORD *)*v824;
                                                                              v825 = *(_DWORD *)v824;
                                                                              goto LABEL_3265;
                                                                            }
                                                                            v841 = 9;
                                                                            if (v1834 < 9)
                                                                              v841 = v1834;
                                                                            v842 = (char *)v1833 + v841;
                                                                            v843 = v1834 - v841;
                                                                            v1833 = (Value **)((char *)v1833 + v841);
                                                                            v1834 = v843;
                                                                            if (v843 < 2)
                                                                              goto LABEL_1389;
                                                                            switch(*(_WORD *)v842)
                                                                            {
                                                                              case 0x746C:
                                                                                v825 = 0;
                                                                                goto LABEL_3265;
                                                                              case 0x656C:
                                                                                v825 = 1;
                                                                                goto LABEL_3265;
                                                                              case 0x7467:
                                                                                v825 = 2;
                                                                                goto LABEL_3265;
                                                                              case 0x6567:
                                                                                v825 = 3;
                                                                                goto LABEL_3265;
                                                                              case 0x7165:
                                                                                v825 = 4;
                                                                                goto LABEL_3265;
                                                                              case 0x656E:
                                                                                v825 = 5;
                                                                                goto LABEL_3265;
                                                                            }
                                                                            if (v843 >= 5
                                                                              && ((v1727 = *(_DWORD *)v842,
                                                                                   v1728 = v842[4],
                                                                                   v1727 == 1936482662)
                                                                                ? (v1729 = v1728 == 101)
                                                                                : (v1729 = 0),
                                                                                  v1729))
                                                                            {
                                                                              v825 = 6;
                                                                            }
                                                                            else
                                                                            {
LABEL_1389:
                                                                              v825 = 7;
                                                                            }
LABEL_3265:
                                                                            upgradeX86vpcom((uint64_t)&v1847, (uint64_t)v1837, v825);
                                                                            goto LABEL_923;
                                                                          }
                                                                        }
                                                                        v805 = *(llvm::MDNode **)v1837;
                                                                        v806 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837- 4* (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8], *(_DWORD *)(*(_QWORD *)v1837 + 32));
                                                                        if (*((_BYTE *)v1833 + 12) == 99)
                                                                          v807 = 12315;
                                                                        else
                                                                          v807 = 12369;
                                                                        v808 = *(uint64_t **)(v3 + 40);
                                                                        __src = v805;
                                                                        v809 = llvm::Intrinsic::getDeclaration(v808, v807, (BOOL **)&__src, 1);
                                                                        v810 = v809;
                                                                        if (v809)
                                                                          v811 = *(_QWORD *)(v809 + 24);
                                                                        else
                                                                          v811 = 0;
                                                                        v822 = (_QWORD *)((char *)v1837
                                                                                        - 32
                                                                                        * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                        *(_QWORD *)&v1864 = *v822;
                                                                        *((_QWORD *)&v1864 + 1) = v822[4];
                                                                        *(_QWORD *)&v1865 = v806;
                                                                        LOWORD(v1846) = 257;
LABEL_3140:
                                                                        inserted = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v811, v810, (uint64_t *)&v1864, 3, (uint64_t)&__src, 0);
                                                                        goto LABEL_1056;
                                                                      }
                                                                      v832 = (char *)v1837
                                                                           - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                                      v833 = (unsigned int **)*((_QWORD *)v832 + 4);
                                                                      v834 = *v833;
                                                                      v835 = *(llvm::Type ***)v832;
                                                                      v836 = (llvm::Type *)llvm::PointerType::get(*((llvm::PointerType ***)*v833+ 3), 0);
                                                                      LOWORD(v1846) = 257;
                                                                      v837 = llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, v835, v836, (const llvm::Twine *)&__src);
                                                                      v838 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837- 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8], v834[8]);
                                                                      v839 = *(uint64_t **)(v3 + 40);
                                                                      __src = (llvm::MDNode *)v834;
                                                                      v840 = llvm::Intrinsic::getDeclaration(v839, 205, (BOOL **)&__src, 1);
                                                                      v810 = v840;
                                                                      if (v840)
                                                                        v811 = *(_QWORD *)(v840 + 24);
                                                                      else
                                                                        v811 = 0;
                                                                      *(_QWORD *)&v1864 = ((_QWORD *)v1837
                                                                                         - 4
                                                                                         * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                                      *((_QWORD *)&v1864 + 1) = v837;
                                                                      *(_QWORD *)&v1865 = v838;
                                                                    }
                                                                    LOWORD(v1846) = 257;
                                                                    goto LABEL_3140;
                                                                  }
                                                                }
                                                                v800 = *(llvm::Type **)v1837;
                                                                v801 = (BOOL *)*((_QWORD *)v1837
                                                                               - 4
                                                                               * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                                v1863[0] = v801;
                                                                v802 = (llvm::Type *)*((unsigned int *)v800 + 8);
                                                                if ((_DWORD)v802 != *(_DWORD *)(*(_QWORD *)v801 + 32))
                                                                {
                                                                  v1864 = xmmword_181235170;
                                                                  LOWORD(v1846) = 257;
                                                                  v801 = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, (uint64_t)v801, (uint64_t)v801, (uint64_t)&v1864, 4, (uint64_t)&__src);
                                                                  v1863[0] = v801;
                                                                }
                                                                HalfTy = (llvm::FixedVectorType *)llvm::Type::getHalfTy(DesiredBytecodeVersion, v22);
                                                                llvm::FixedVectorType::get(HalfTy, v802);
                                                                LOWORD(v1846) = 257;
                                                                v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, (llvm::Type **)v801, v804, (const llvm::Twine *)&__src);
                                                                __src = (llvm::MDNode *)"cvtph2ps";
                                                                LOWORD(v1846) = 259;
                                                                v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1863[0], v800, (const llvm::Twine *)&__src);
                                                                if (((unint64_t)(llvm::CallBase::arg_end(v1837) - ((_QWORD)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))) >> 5) < 3)
                                                                  goto LABEL_1820;
                                                                break;
                                                            }
LABEL_1359:
                                                            v633 = (char *)v1837
                                                                 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                                            v634 = (unsigned __int8 *)*((_QWORD *)v633 + 8);
                                                            v632 = (llvm::Type **)v1863[0];
                                                            goto LABEL_915;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
LABEL_1337:
                                                v784 = *(llvm::Type **)v1837;
                                                v785 = (BOOL *)*((_QWORD *)v1837
                                                               - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                v1863[0] = v785;
                                                v786 = *(_QWORD *)v785;
                                                if (*((_DWORD *)v784 + 8) < *(_DWORD *)(*(_QWORD *)v785 + 32))
                                                {
                                                  *(_QWORD *)&v1864 = 0x100000000;
                                                  LOWORD(v1846) = 257;
                                                  v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, (uint64_t)v785, (uint64_t)v785, (uint64_t)&v1864, 2, (uint64_t)&__src);
                                                }
                                                v787 = *(unsigned __int8 *)(*(_QWORD *)(v786 + 24) + 8);
                                                v788 = llvm::StringRef::find((uint64_t *)&v1833, "cvtu", 4uLL, 0);
                                                if (v787 == 2)
                                                {
                                                  __src = (llvm::MDNode *)"cvtps2pd";
                                                  LOWORD(v1846) = 259;
                                                  FPExt = (BOOL *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1863[0], v784, (const llvm::Twine *)&__src);
                                                }
                                                else
                                                {
                                                  v790 = v788;
                                                  v791 = v1837;
                                                  if (((llvm::CallBase::arg_end(v1837)
                                                       - ((_QWORD)v791
                                                        - 32 * (*((_DWORD *)v791 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80)
                                                    goto LABEL_1346;
                                                  v792 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[12];
                                                  if (*(_BYTE *)(v792 + 16) == 16)
                                                  {
                                                    v793 = (_QWORD *)(v792 + 24);
                                                    if (*(_DWORD *)(v792 + 32) >= 0x41u)
                                                      v793 = (_QWORD *)*v793;
                                                    if (*v793 == 4)
                                                    {
LABEL_1346:
                                                      __src = (llvm::MDNode *)"cvt";
                                                      LOWORD(v1846) = 259;
                                                      if (v790 == -1)
                                                        SIToFP = (BOOL *)llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1863[0], v784, (const llvm::Twine *)&__src);
                                                      else
                                                        SIToFP = (BOOL *)llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1863[0], v784, (const llvm::Twine *)&__src);
                                                      v1863[0] = SIToFP;
LABEL_1358:
                                                      v799 = v1837;
                                                      if (((unint64_t)(llvm::CallBase::arg_end(v1837)
                                                                                           - ((_QWORD)v799
                                                                                            - 32
                                                                                            * (*((_DWORD *)v799 + 5) & 0x7FFFFFF))) >> 5) < 3)
                                                      {
LABEL_1820:
                                                        Select = (llvm::Value *)v1863[0];
                                                        goto LABEL_1826;
                                                      }
                                                      goto LABEL_1359;
                                                    }
                                                  }
                                                  if (v790 == -1)
                                                    v795 = 12733;
                                                  else
                                                    v795 = 12738;
                                                  v796 = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)v1837);
                                                  __src = v784;
                                                  ParamAttrs = v786;
                                                  v797 = llvm::Intrinsic::getDeclaration(v796, v795, (BOOL **)&__src, 2);
                                                  if (v797)
                                                    v798 = *(_QWORD *)(v797 + 24);
                                                  else
                                                    v798 = 0;
                                                  *(BOOL **)&v1864 = v1863[0];
                                                  *((_QWORD *)&v1864 + 1) = ((_QWORD *)v1837
                                                                           - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[12];
                                                  LOWORD(v1846) = 257;
                                                  FPExt = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v798, v797, (uint64_t *)&v1864, 2, (uint64_t)&__src, 0);
                                                }
                                                v1863[0] = FPExt;
                                                goto LABEL_1358;
                                              }
                                            }
                                            else if (v25 == 12)
                                            {
                                              if ((*(_QWORD *)v24 != 0x6D702E3134657373
                                                 || *((_DWORD *)v24 + 2) != 1902406773)
                                                && (*(_QWORD *)v24 != 0x756D702E32787661
                                                 || *((_DWORD *)v24 + 2) != 1902390892))
                                              {
LABEL_1091:
                                                if (*(_QWORD *)v24 != 0x737476632E657373
                                                  || *((_DWORD *)v24 + 2) != 1936929385)
                                                {
                                                  goto LABEL_1126;
                                                }
LABEL_1113:
                                                v718 = (llvm::Value *)((_QWORD *)v1837
                                                                     - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                v719 = *(llvm::Type **)(*(_QWORD *)v1837 + 24);
                                                LOWORD(v1846) = 257;
                                                UIToFP = (BOOL *)llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)&v1847, v718, v719, (const llvm::Twine *)&__src);
LABEL_1114:
                                                v721 = (llvm::Value *)UIToFP;
LABEL_1115:
                                                v1863[0] = UIToFP;
                                                v722 = (llvm::Value *)*((_QWORD *)v1837
                                                                      - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                                LOWORD(v1846) = 257;
                                                inserted = (BOOL *)llvm::IRBuilderBase::CreateInsertElement(&v1847, v722, v721, 0, (const llvm::Twine *)&__src);
                                                goto LABEL_1056;
                                              }
                                            }
                                            else if (v25 < 0x14
                                                   || (*(_QWORD *)v24 == 0x6D2E323135787661
                                                     ? (v712 = *((_QWORD *)v24 + 1) == 0x6C756D702E6B7361)
                                                     : (v712 = 0),
                                                       v712 ? (v713 = *((_DWORD *)v24 + 4) == 779183150) : (v713 = 0),
                                                       !v713))
                                            {
                                              switch(v25)
                                              {
                                                case 0xCuLL:
                                                  goto LABEL_1091;
                                                case 0xDuLL:
                                                  if (!memcmp(v24, "sse2.cvtsi2sd", v25))
                                                    goto LABEL_1113;
                                                  if (memcmp(v24, "sse2.cvtss2sd", v25))
                                                  {
                                                    if (*(_QWORD *)v24 == 0x7476632E32657373
                                                      && *(_QWORD *)(v24 + 5) == 0x6470327164747663)
                                                    {
                                                      goto LABEL_1337;
                                                    }
                                                    if (*(_QWORD *)v24 == 0x7476632E32657373
                                                      && *(_QWORD *)(v24 + 5) == 0x7370327164747663)
                                                    {
                                                      goto LABEL_1337;
                                                    }
                                                    goto LABEL_1126;
                                                  }
                                                  v812 = (llvm::Value *)((_QWORD *)v1837
                                                                       - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                  LOWORD(v1846) = 257;
                                                  v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateExtractElement(&v1847, v812, 0, (const llvm::Twine *)&__src);
                                                  v813 = *(llvm::Type **)(*(_QWORD *)v1837 + 24);
                                                  LOWORD(v1846) = 257;
                                                  UIToFP = (BOOL *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v1863[0], v813, (const llvm::Twine *)&__src);
                                                  v721 = (llvm::Value *)UIToFP;
                                                  break;
                                                case 0xEuLL:
                                                  v717 = "sse.cvtsi642ss";
                                                  goto LABEL_1112;
                                                case 0xFuLL:
                                                  v717 = "sse2.cvtsi642sd";
LABEL_1112:
                                                  if (!memcmp(v24, v717, v25))
                                                    goto LABEL_1113;
                                                  goto LABEL_1126;
                                                case 0x10uLL:
                                                  if (memcmp(v24, "avx512.cvtusi2sd", v25))
                                                    goto LABEL_1126;
                                                  v723 = (llvm::Value *)((_QWORD *)v1837
                                                                       - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4];
                                                  v724 = *(llvm::Type **)(*(_QWORD *)v1837 + 24);
                                                  LOWORD(v1846) = 257;
                                                  UIToFP = (BOOL *)llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)&v1847, v723, v724, (const llvm::Twine *)&__src);
                                                  goto LABEL_1114;
                                                case 0x11uLL:
                                                  if (memcmp(v24, "avx.cvtdq2.pd.256", v25))
                                                  {
                                                    v725 = *(_QWORD *)v24 == 0x647476632E787661
                                                        && *((_QWORD *)v24 + 1) == 0x35322E73702E3271;
                                                    if (!v725 || v24[16] != 54)
                                                      goto LABEL_1126;
                                                  }
                                                  goto LABEL_1337;
                                                default:
                                                  goto LABEL_1126;
                                              }
                                              goto LABEL_1115;
                                            }
                                            inserted = (BOOL *)upgradePMULDQ((uint64_t)&v1847, v1837, 1);
                                            goto LABEL_923;
                                          }
LABEL_1079:
                                          inserted = (BOOL *)upgradePMULDQ((uint64_t)&v1847, v1837, 0);
                                          goto LABEL_923;
                                        }
                                        if (*(_QWORD *)v24 != 0x6D2E323135787661
                                          || *((_QWORD *)v24 + 1) != 0x706D63752E6B7361
                                          || v24[16] != 46)
                                        {
                                          if (*(_QWORD *)v24 != 0x632E323135787661
                                            || *((_QWORD *)v24 + 1) != 0x6B73616D32627476
                                            || v24[16] != 46)
                                          {
                                            v572 = *(_QWORD *)v24 == 0x632E323135787661
                                                && *((_QWORD *)v24 + 1) == 0x6B73616D32777476;
                                            if (!v572 || v24[16] != 46)
                                            {
                                              v574 = *(_QWORD *)v24 == 0x632E323135787661
                                                  && *((_QWORD *)v24 + 1) == 0x6B73616D32647476;
                                              if (!v574 || v24[16] != 46)
                                              {
                                                v576 = *(_QWORD *)v24 == 0x632E323135787661
                                                    && *((_QWORD *)v24 + 1) == 0x6B73616D32717476;
                                                if (!v576 || v24[16] != 46)
                                                  goto LABEL_697;
                                              }
                                            }
                                          }
                                          v578 = (llvm::Constant ***)((char *)v1837
                                                                    - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                          v579 = *v578;
                                          llvm::Constant::getNullValue(**v578, (Type *)v22);
                                          LOWORD(v1846) = 257;
                                          v581 = (BOOL *)llvm::IRBuilderBase::CreateICmp((uint64_t *)&v1847, 40, (llvm::Type ***)v579, v580, (uint64_t)&__src);
                                          v1863[0] = v581;
                                          v582 = 0;
LABEL_1055:
                                          inserted = (BOOL *)ApplyX86MaskOn1BitsVec((uint64_t)&v1847, (Type *)v581, v582);
                                          goto LABEL_1056;
                                        }
                                        v619 = v1837;
                                        v636 = ((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                                        v637 = (_QWORD *)(v636 + 24);
                                        if (*(_DWORD *)(v636 + 32) >= 0x41u)
                                          v637 = (_QWORD *)*v637;
                                        v622 = *(_DWORD *)v637;
                                      }
LABEL_922:
                                      upgradeMaskedCompare((uint64_t)&v1847, (uint64_t)v619, v622);
                                      goto LABEL_923;
                                    }
                                    v659 = getX86MaskVec((uint64_t *)&v1847, *((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)), 0x10u);
                                    v660 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4], 0x10u);
                                    LOWORD(v1846) = 257;
                                    v658 = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)&v1847, (llvm::Constant **)v659, (const llvm::Twine *)&__src);
                                    LOWORD(v1846) = 257;
                                    v657 = v660;
                                    goto LABEL_964;
                                  }
                                  v626 = getX86MaskVec((uint64_t *)&v1847, *((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)), 0x10u);
                                  v627 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4], 0x10u);
                                  LOWORD(v1846) = 257;
                                  v625 = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)&v1847, (llvm::Constant **)v626, (const llvm::Twine *)&__src);
                                  LOWORD(v1846) = 257;
                                  v624 = v627;
LABEL_912:
                                  Not = (BOOL *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v625, (llvm::Value *)v624, (const llvm::Twine *)&__src);
LABEL_965:
                                  v531 = (llvm::Type **)Not;
                                  goto LABEL_966;
                                case 0x11uLL:
                                  v1819 = v340;
                                  if (!memcmp(v24, "avx512.kortestz.w", v25)
                                    || (*(_QWORD *)v24 == 0x6B2E323135787661
                                      ? (v532 = *((_QWORD *)v24 + 1) == 0x2E6374736574726FLL)
                                      : (v532 = 0),
                                        v532 ? (v533 = v24[16] == 119) : (v533 = 0),
                                        v533))
                                  {
                                    v586 = getX86MaskVec((uint64_t *)&v1847, *((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)), 0x10u);
                                    v587 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4], 0x10u);
                                    LOWORD(v1846) = 257;
                                    v588 = (BOOL *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)&v1847, (llvm::Value *)v586, (llvm::Value *)v587, (const llvm::Twine *)&__src);
                                    v1863[0] = v588;
                                    v590 = (llvm::Type *)llvm::Type::getInt16Ty(v1852, v589);
                                    LOWORD(v1846) = 257;
                                    v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, (llvm::Type **)v588, v590, (const llvm::Twine *)&__src);
                                    v591 = *((unsigned __int8 *)v1833 + 14);
                                    v593 = (llvm::Constant *)llvm::Type::getInt16Ty(v1852, v592);
                                    if (v591 == 99)
                                      v596 = llvm::Constant::getAllOnesValue(v593, v594, v595);
                                    else
                                      llvm::Constant::getNullValue(v593, (Type *)v594);
                                    LOWORD(v1846) = 257;
                                    v638 = (BOOL *)llvm::IRBuilderBase::CreateICmp((uint64_t *)&v1847, 32, (llvm::Type ***)v1863[0], (uint64_t)v596, (uint64_t)&__src);
                                    v1863[0] = v638;
                                    v640 = (llvm::Type *)llvm::Type::getInt32Ty(v1852, v639);
                                    LOWORD(v1846) = 257;
                                    v641 = v638;
                                    goto LABEL_926;
                                  }
                                  if (*(_QWORD *)v24 == 0x6D2E323135787661
                                    && *((_QWORD *)v24 + 1) == 0x706D63702E6B7361)
                                  {
                                    goto LABEL_916;
                                  }
                                  v517 = 0;
                                  v516 = 1;
LABEL_685:
                                  v340 = v1819;
                                  goto LABEL_686;
                                default:
                                  if (v25 < 0x10)
                                  {
                                    v516 = 1;
                                    v517 = 1;
                                    goto LABEL_686;
                                  }
                                  if (*(_QWORD *)v24 == 0x6D2E323135787661
                                    && *((_QWORD *)v24 + 1) == 0x706D63702E6B7361)
                                  {
LABEL_916:
                                    v619 = v1837;
                                    if (v24[16] == 101)
                                      v622 = 0;
                                    else
                                      v622 = 6;
                                    goto LABEL_922;
                                  }
                                  if (v25 >= 0x19)
                                  {
                                    if (*(_QWORD *)v24 == 0x6D2E323135787661
                                      && *((_QWORD *)v24 + 1) == 0x687370762E6B7361
                                      && *((_QWORD *)v24 + 2) == 0x626D717469626675
                                      && v24[24] == 46)
                                    {
                                      __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)v1837
                                                                                                  - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)));
                                      ParamAttrs = (uint64_t)v693;
                                      v694 = llvm::TypeSize::operator unsigned long long(&__src, v693);
                                      if (v694 == 128)
                                      {
                                        v695 = 12799;
                                      }
                                      else if (v694 == 256)
                                      {
                                        v695 = 12800;
                                      }
                                      else
                                      {
                                        v695 = 12801;
                                      }
                                      v704 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), v695, 0, 0);
                                      if (v704)
                                      {
LABEL_1053:
                                        v705 = *(_QWORD *)(v704 + 24);
                                        goto LABEL_1054;
                                      }
LABEL_1038:
                                      v705 = 0;
LABEL_1054:
                                      v707 = (_QWORD *)((char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                      *(_QWORD *)&v1864 = *v707;
                                      *((_QWORD *)&v1864 + 1) = v707[4];
                                      LOWORD(v1846) = 257;
                                      v581 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v705, v704, (uint64_t *)&v1864, 2, (uint64_t)&__src, 0);
                                      v1863[0] = v581;
                                      v582 = (unsigned __int8 *)((_QWORD *)v1837
                                                               - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[8];
                                      goto LABEL_1055;
                                    }
                                  }
                                  else if (v25 < 0x15)
                                  {
                                    v517 = 0;
                                    v516 = 1;
                                    goto LABEL_686;
                                  }
                                  if (*(_QWORD *)v24 != 0x6D2E323135787661
                                    || *((_QWORD *)v24 + 1) != 0x6C6370662E6B7361
                                    || *(_QWORD *)(v24 + 13) != 0x702E7373616C6370)
                                  {
                                    v516 = 0;
                                    v517 = 0;
                                    goto LABEL_686;
                                  }
                                  v669 = (llvm::Type *)**((_QWORD **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                                  __src = (llvm::MDNode *)llvm::Type::getPrimitiveSizeInBits(v669);
                                  ParamAttrs = (uint64_t)v670;
                                  v671 = llvm::TypeSize::operator unsigned long long(&__src, v670);
                                  v672 = llvm::Type::getScalarSizeInBits(v669);
                                  if (v671 == 128 && v672 == 32)
                                  {
                                    v673 = 12262;
                                  }
                                  else if (v671 == 256 && v672 == 32)
                                  {
                                    v673 = 12263;
                                  }
                                  else if (v671 == 512 && v672 == 32)
                                  {
                                    v673 = 12264;
                                  }
                                  else if (v671 == 128 && v672 == 64)
                                  {
                                    v673 = 12259;
                                  }
                                  else if (v672 == 64 && v671 == 256)
                                  {
                                    v673 = 12260;
                                  }
                                  else
                                  {
                                    v673 = 12261;
                                  }
                                  v704 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v3 + 40), v673, 0, 0);
                                  if (v704)
                                    goto LABEL_1053;
                                  goto LABEL_1038;
                              }
                            }
                            if (*(_QWORD *)v24 != 0x702E323135787661 || *(_QWORD *)(v24 + 5) != 0x6D74736574702E32)
                            {
                              v433 = v25 < 0xE;
                              if (v25 < 0xE)
                              {
                                v434 = 1;
                                goto LABEL_607;
                              }
                              if (*(_QWORD *)v24 != 0x702E323135787661
                                || *(_QWORD *)(v24 + 6) != 0x6D6E74736574702ELL)
                              {
                                v434 = v25 < 0x16;
                                if (v25 >= 0x16)
                                {
                                  if (*(_QWORD *)v24 == 0x6D2E323135787661
                                    && *((_QWORD *)v24 + 1) == 0x6F7262702E6B7361
                                    && *(_QWORD *)(v24 + 14) == 0x7473616364616F72)
                                  {
                                    v628 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                    v629 = *(_DWORD *)(**((_QWORD **)v628 + 4) + 32);
                                    v630 = *(llvm::ScalableVectorType ***)v628;
                                    LOWORD(v1846) = 257;
                                    v631 = (BOOL *)llvm::IRBuilderBase::CreateVectorSplat((llvm::IRBuilderBase *)&v1847, v629, v630, (const llvm::Twine *)&__src);
LABEL_914:
                                    v632 = (llvm::Type **)v631;
                                    v1863[0] = v631;
                                    v633 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                                    v634 = (unsigned __int8 *)*((_QWORD *)v633 + 8);
LABEL_915:
                                    v635 = (Value *)*((_QWORD *)v633 + 4);
LABEL_2551:
                                    SExt = (BOOL *)EmitX86Select((uint64_t *)&v1847, v634, v632, v635);
                                    goto LABEL_1824;
                                  }
                                  v434 = 0;
                                }
LABEL_607:
                                if (*(_QWORD *)v24 != 0x6B2E323135787661
                                  || *(_QWORD *)(v24 + 5) != 0x6B63706E756B2E32)
                                {
                                  goto LABEL_611;
                                }
                                v499 = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v1837);
                                v500 = getX86MaskVec((uint64_t *)&v1847, *((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF)), v499);
                                v501 = getX86MaskVec((uint64_t *)&v1847, ((llvm::LLVMContext **)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF))[4], v499);
                                if (v499)
                                {
                                  v502 = v499;
                                  if (v499 >= 8)
                                  {
                                    v503 = v499 & 0xFFFFFFF8;
                                    v598 = (int32x4_t)xmmword_181235170;
                                    v599 = (int32x4_t *)&v1844;
                                    v600.i64[0] = 0x400000004;
                                    v600.i64[1] = 0x400000004;
                                    v601.i64[0] = 0x800000008;
                                    v601.i64[1] = 0x800000008;
                                    v602 = v503;
                                    do
                                    {
                                      v599[-1] = v598;
                                      *v599 = vaddq_s32(v598, v600);
                                      v598 = vaddq_s32(v598, v601);
                                      v599 += 2;
                                      v602 -= 8;
                                    }
                                    while (v602);
                                    if (v503 == v499)
                                      goto LABEL_891;
                                  }
                                  else
                                  {
                                    v503 = 0;
                                  }
                                  do
                                  {
                                    *((_DWORD *)&__src + v503) = v503;
                                    ++v503;
                                  }
                                  while (v499 != v503);
                                }
                                else
                                {
                                  v502 = 0;
                                }
LABEL_891:
                                v603 = v499 >> 1;
                                v1866 = 257;
                                v604 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, (uint64_t)v500, (uint64_t)v500, (uint64_t)&__src, v603, (uint64_t)&v1864);
                                v1866 = 257;
                                v605 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, (uint64_t)v501, (uint64_t)v501, (uint64_t)&__src, v603, (uint64_t)&v1864);
                                v1866 = 257;
                                v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)&v1847, (uint64_t)v605, (uint64_t)v604, (uint64_t)&__src, v502, (uint64_t)&v1864);
                                v606 = *(llvm::Type **)v1837;
                                v1866 = 257;
                                VectorSplat = (BOOL *)llvm::IRBuilderBase::CreateBitCast((llvm::IRBuilderBase *)&v1847, (llvm::Type **)v1863[0], v606, (const llvm::Twine *)&v1864);
                                goto LABEL_1750;
                              }
                            }
                            v488 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                            v489 = *(llvm::Value **)v488;
                            v490 = (llvm::Value *)*((_QWORD *)v488 + 4);
                            v491 = (unsigned __int8 *)*((_QWORD *)v488 + 8);
                            LOWORD(v1846) = 257;
                            v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)&v1847, v489, v490, (const llvm::Twine *)&__src);
                            llvm::Constant::getNullValue(*(llvm::Constant **)v489, v492);
                            if (v1834 >= 0xD)
                            {
                              v495 = bswap64((unint64_t)*v1833);
                              v496 = 0x6176783531322E70;
                              if (v495 == 0x6176783531322E70
                                && (v496 = 0x322E70746573746DLL,
                                    v495 = bswap64(*(unint64_t *)((char *)v1833 + 5)),
                                    v495 == 0x322E70746573746DLL))
                              {
                                v497 = 0;
                              }
                              else if (v495 < v496)
                              {
                                v497 = -1;
                              }
                              else
                              {
                                v497 = 1;
                              }
                              if (v497)
                                v494 = 32;
                              else
                                v494 = 33;
                            }
                            else
                            {
                              v494 = 32;
                            }
                            LOWORD(v1846) = 257;
                            v1863[0] = (BOOL *)llvm::IRBuilderBase::CreateICmp((uint64_t *)&v1847, v494, (llvm::Type ***)v1863[0], v493, (uint64_t)&__src);
                            VectorSplat = (BOOL *)ApplyX86MaskOn1BitsVec((uint64_t)&v1847, (Type *)v1863[0], v491);
                            goto LABEL_1750;
                          }
                        }
                        else
                        {
                          if (v25 != 11)
                            goto LABEL_515;
                          if (*(_QWORD *)v24 != 0x747271732E657373 || *(_QWORD *)(v24 + 3) != 0x73732E747271732ELL)
                            goto LABEL_515;
                        }
                        v443 = (llvm::Value *)*((_QWORD *)v1837 - 4 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF));
                        LOWORD(v1846) = 257;
                        *(_QWORD *)&v1864 = llvm::IRBuilderBase::CreateExtractElement(&v1847, v443, 0, (const llvm::Twine *)&__src);
                        v444 = *(uint64_t **)(v3 + 40);
                        __src = *(llvm::MDNode **)v1864;
                        v445 = llvm::Intrinsic::getDeclaration(v444, 307, (BOOL **)&__src, 1);
                        if (v445)
                          v446 = *(_QWORD *)(v445 + 24);
                        else
                          v446 = 0;
                        LOWORD(v1846) = 257;
                        *(_QWORD *)&v1864 = llvm::IRBuilderBase::CreateCall((uint64_t *)&v1847, v446, v445, (uint64_t *)&v1864, 1, (uint64_t)&__src, 0);
                        LOWORD(v1846) = 257;
                        VectorSplat = (BOOL *)llvm::IRBuilderBase::CreateInsertElement(&v1847, v443, (llvm::Value *)v1864, 0, (const llvm::Twine *)&__src);
                        goto LABEL_1750;
                      }
                      v322 = *((unsigned __int8 *)v24 + 17) != 117;
                      v390 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
                      v320 = *(unsigned __int8 ***)v390;
                      v321 = (llvm::PointerType ***)*((_QWORD *)v390 + 4);
                      v318 = (unsigned __int8 *)*((_QWORD *)v390 + 8);
                      goto LABEL_442;
                    }
                  }
                  goto LABEL_363;
                }
              }
              v1838 = v1840;
              v1839 = 0x100000001;
              v328 = llvm::Type::getInt32Ty(DesiredBytecodeVersion, v22);
              v329 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v328, 1, 0);
              v1840[0] = llvm::ValueAsMetadata::get(v329, v330);
              Impl = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t)DesiredBytecodeVersion, v1840, 1uLL, 0, 1);
              v331 = (char *)v1837 - 32 * (*((_DWORD *)v1837 + 5) & 0x7FFFFFF);
              v332 = *(unsigned __int8 ***)v331;
              v333 = (llvm::PointerType ***)*((_QWORD *)v331 + 4);
              v334 = llvm::PointerType::get(*v333, 0);
              *(_QWORD *)&v1864 = "cast";
              v1866 = 259;
              if (*v332 == (unsigned __int8 *)v334)
              {
                v335 = v332;
              }
              else
              {
                v335 = (unsigned __int8 **)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 **, uint64_t))*v1853
                                            + 15))(v1853, 49, v332, v334);
                if (!v335)
                {
                  LOWORD(v1846) = 257;
                  llvm::CastInst::Create(49);
                  v335 = v336;
                  (*((void (**)(void **, unsigned __int8 **, __int128 *, uint64_t, char *))*v1854 + 2))(v1854, v336, &v1864, v1850, v1851);
                  if ((_DWORD)v1848)
                  {
                    v337 = v1847;
                    v338 = (llvm::Type *)((char *)v1847 + 16 * v1848);
                    do
                    {
                      llvm::Instruction::setMetadata(v335, *(_DWORD *)v337, *((llvm::MDNode **)v337 + 1));
                      v337 = (llvm::Type *)((char *)v337 + 16);
                    }
                    while (v337 != v338);
                  }
                }
              }
              v391 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*v333) >> 3)) | 0x100;
              v392 = (llvm::Type **)v333;
              v393 = (uint64_t)v335;
LABEL_469:
              AlignedStore = llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)&v1847, v392, v393, v391, 0);
              llvm::Instruction::setMetadata(AlignedStore, 9, Impl);
              llvm::Instruction::eraseFromParent(v1837);
              if (v1838 != v1840)
                free(v1838);
              goto LABEL_1831;
            }
LABEL_82:
            if (v37)
              goto LABEL_83;
            goto LABEL_247;
          }
LABEL_77:
          if (v25 < 7)
            goto LABEL_82;
          goto LABEL_78;
        }
LABEL_67:
        v27 = 0;
        if (v37)
          goto LABEL_83;
        goto LABEL_249;
      }
    }
    else
    {
      v26 = v25 > 4;
      if (v25 >= 5)
        goto LABEL_31;
    }
    if (v25 >= 4)
      goto LABEL_76;
    goto LABEL_67;
  }
}

llvm::Type **llvm::IRBuilderBase::CreateBitCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  if (*a2 == a3)
    return a2;
  v6 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Type **, llvm::Type *))(**((_QWORD **)this + 9) + 120))(*((_QWORD *)this + 9), 49, a2, a3);
  if (!v6)
  {
    llvm::CastInst::Create(49);
    v6 = v7;
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v7, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v8 = *((unsigned int *)this + 2);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD **)this;
      v10 = &v9[2 * v8];
      do
      {
        llvm::Instruction::setMetadata(v6, *(_DWORD *)v9, (llvm::MDNode *)v9[1]);
        v9 += 2;
      }
      while (v9 != v10);
    }
  }
  return (llvm::Type **)v6;
}

llvm::ExtractElementInst *llvm::IRBuilderBase::CreateExtractElement(llvm::Type **this, llvm::Value *a2, uint64_t a3, const llvm::Twine *a4)
{
  uint64_t Int64Ty;
  llvm::Value *v9;
  llvm::ExtractElementInst *v10;
  uint64_t v11;
  llvm::Type *v12;
  llvm::Type *v13;
  _BYTE v15[32];
  __int16 v16;

  Int64Ty = llvm::Type::getInt64Ty(this[8], a2);
  v9 = (llvm::Value *)llvm::ConstantInt::get(Int64Ty, a3, 0);
  v10 = (llvm::ExtractElementInst *)(*(uint64_t (**)(llvm::Type *, llvm::Value *, llvm::Value *))(*(_QWORD *)this[9] + 96))(this[9], a2, v9);
  if (!v10)
  {
    v16 = 257;
    v10 = (llvm::ExtractElementInst *)llvm::User::operator new((llvm::User *)0x48, 2u);
    llvm::ExtractElementInst::ExtractElementInst(v10, a2, v9, (const llvm::Twine *)v15, 0);
    (*(void (**)(llvm::Type *, llvm::ExtractElementInst *, const llvm::Twine *, llvm::Type *, llvm::Type *))(*(_QWORD *)this[10] + 16))(this[10], v10, a4, this[6], this[7]);
    v11 = *((unsigned int *)this + 2);
    if ((_DWORD)v11)
    {
      v12 = *this;
      v13 = (llvm::Type *)((char *)v12 + 16 * v11);
      do
      {
        llvm::Instruction::setMetadata((unsigned __int8 **)v10, *(_DWORD *)v12, *((llvm::MDNode **)v12 + 1));
        v12 = (llvm::Type *)((char *)v12 + 16);
      }
      while (v12 != v13);
    }
  }
  return v10;
}

unsigned __int8 **llvm::IRBuilderBase::CreateAlignedStore(uint64_t *a1, llvm::Type **a2, uint64_t a3, __int16 a4, __int16 a5)
{
  char v9;
  uint64_t Module;
  char v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;

  v9 = a4;
  if ((a4 & 0xFF00) == 0)
  {
    Module = llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    llvm::DataLayout::getABITypeAlign((llvm::DataLayout *)(Module + 256), *a2);
    v9 = v11;
  }
  v12 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x50, 2u);
  llvm::StoreInst::StoreInst((uint64_t)v12, (mlir::BytecodeWriterConfig *)a2, a3, a5, v9, 0);
  v18 = 257;
  (*(void (**)(uint64_t, unsigned __int8 **, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v12, v17, a1[6], a1[7]);
  v13 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v13)
  {
    v14 = *a1;
    v15 = v14 + 16 * v13;
    do
    {
      llvm::Instruction::setMetadata(v12, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
      v14 += 16;
    }
    while (v14 != v15);
  }
  return v12;
}

unsigned __int8 **llvm::IRBuilderBase::CreateAnd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v13;
  __int16 v14;

  v8 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), 28, a2, a3);
  if (!v8)
  {
    v14 = 257;
    v8 = (unsigned __int8 **)llvm::BinaryOperator::Create(28, (uint64_t)a2, (uint64_t)a3, &v13, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v8, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v9 = *((unsigned int *)this + 2);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)this;
      v11 = &v10[2 * v9];
      do
      {
        llvm::Instruction::setMetadata(v8, *(_DWORD *)v10, (llvm::MDNode *)v10[1]);
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
  return v8;
}

unsigned __int8 **UpgradeMaskedStore(uint64_t a1, unsigned __int8 **a2, llvm::PointerType ***a3, unsigned __int8 *a4, int a5)
{
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unsigned __int8 **X86MaskVec;
  _WORD v19[40];

  v10 = llvm::PointerType::get(*a3, 0);
  v19[16] = 257;
  if (*a2 == (unsigned __int8 *)v10)
  {
    v11 = a2;
    if (a5)
      goto LABEL_7;
LABEL_10:
    v16 = 0;
    if (!a4)
      goto LABEL_14;
    goto LABEL_11;
  }
  v11 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, uint64_t))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72), 49, a2, v10);
  if (!v11)
  {
    v19[36] = 257;
    llvm::CastInst::Create(49);
    v11 = v12;
    (*(void (**)(_QWORD, unsigned __int8 **, _WORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v12, v19, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)a1;
      v15 = *(_QWORD *)a1 + 16 * v13;
      do
      {
        llvm::Instruction::setMetadata(v11, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
        v14 += 16;
      }
      while (v14 != v15);
    }
  }
  if (!a5)
    goto LABEL_10;
LABEL_7:
  v16 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*a3) >> 3));
  if (!a4)
    goto LABEL_14;
LABEL_11:
  if (a4[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)a4))
    return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)a1, (llvm::Type **)a3, (uint64_t)v11, v16 | 0x100u, 0);
LABEL_14:
  X86MaskVec = getX86MaskVec((uint64_t *)a1, (llvm::LLVMContext *)a4, *((_DWORD *)*a3 + 8));
  return (unsigned __int8 **)llvm::IRBuilderBase::CreateMaskedStore(a1, (llvm::LLVMContext *)a3, (BOOL **)v11, v16, (uint64_t)X86MaskVec);
}

unsigned __int8 **llvm::IRBuilderBase::CreateICmp(uint64_t *a1, __int16 a2, llvm::Type ***a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 **v10;
  llvm::Type **v11;
  int v12;
  llvm::LLVMContext *v13;
  llvm::ScalableVectorType *Int1Ty;
  llvm::Type *v15;
  llvm::Type *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v21;
  __int16 v22;

  v10 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 56))(a1[9]);
  if (!v10)
  {
    v10 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x48, 2u);
    v22 = 257;
    v11 = *a3;
    v12 = *((_DWORD *)*a3 + 2);
    Int1Ty = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(**a3, v13);
    v15 = Int1Ty;
    if (v11 && (v12 & 0xFE) == 0x12)
    {
      llvm::VectorType::get(Int1Ty, (llvm::Type *)(*((unsigned int *)v11 + 8) | ((unint64_t)(*((_BYTE *)v11 + 8) == 19) << 32)));
      v15 = v16;
    }
    llvm::CmpInst::CmpInst(v10, v15, 53, a2, (uint64_t)a3, a4, &v21, 0, 0);
    (*(void (**)(uint64_t, unsigned __int8 **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, a5, a1[6], a1[7]);
    v17 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v17)
    {
      v18 = *a1;
      v19 = v18 + 16 * v17;
      do
      {
        llvm::Instruction::setMetadata(v10, *(_DWORD *)v18, *(llvm::MDNode **)(v18 + 8));
        v18 += 16;
      }
      while (v18 != v19);
    }
  }
  return v10;
}

llvm::Type **llvm::IRBuilderBase::CreateSExt(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  if (*a2 == a3)
    return a2;
  v6 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Type **, llvm::Type *))(**((_QWORD **)this + 9) + 120))(*((_QWORD *)this + 9), 40, a2, a3);
  if (!v6)
  {
    llvm::CastInst::Create(40);
    v6 = v7;
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v7, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v8 = *((unsigned int *)this + 2);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD **)this;
      v10 = &v9[2 * v8];
      do
      {
        llvm::Instruction::setMetadata(v6, *(_DWORD *)v9, (llvm::MDNode *)v9[1]);
        v9 += 2;
      }
      while (v9 != v10);
    }
  }
  return (llvm::Type **)v6;
}

llvm::Value *llvm::IRBuilderBase::CreateZExt(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, int a5)
{
  llvm::ZExtInst *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v15;
  __int16 v16;

  if (*(llvm::Type **)a2 == a3)
    return a2;
  v10 = (llvm::ZExtInst *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Type *))(**((_QWORD **)this + 9)
                                                                                                  + 120))(*((_QWORD *)this + 9), 39, a2, a3);
  if (!v10)
  {
    v10 = (llvm::ZExtInst *)llvm::User::operator new((llvm::User *)0x48, 1u);
    v16 = 257;
    llvm::ZExtInst::ZExtInst(v10, a2, a3, &v15, 0);
    (*(void (**)(_QWORD, llvm::ZExtInst *, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                          + 16))(*((_QWORD *)this + 10), v10, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v11 = *((unsigned int *)this + 2);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD **)this;
      v13 = &v12[2 * v11];
      do
      {
        llvm::Instruction::setMetadata((unsigned __int8 **)v10, *(_DWORD *)v12, (llvm::MDNode *)v12[1]);
        v12 += 2;
      }
      while (v12 != v13);
    }
    if (a5)
      llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v10, 1);
  }
  return v10;
}

llvm::InsertElementInst *llvm::IRBuilderBase::CreateInsertElement(llvm::Type **this, llvm::Value *a2, llvm::Value *a3, uint64_t a4, const llvm::Twine *a5)
{
  uint64_t Int64Ty;
  llvm::Value *v11;
  llvm::InsertElementInst *v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::Type *v15;
  _BYTE v17[32];
  __int16 v18;

  Int64Ty = llvm::Type::getInt64Ty(this[8], a2);
  v11 = (llvm::Value *)llvm::ConstantInt::get(Int64Ty, a4, 0);
  v12 = (llvm::InsertElementInst *)(*(uint64_t (**)(llvm::Type *, llvm::Value *, llvm::Value *, llvm::Value *))(*(_QWORD *)this[9] + 104))(this[9], a2, a3, v11);
  if (!v12)
  {
    v18 = 257;
    v12 = (llvm::InsertElementInst *)llvm::User::operator new((llvm::User *)0x48, 3u);
    llvm::InsertElementInst::InsertElementInst(v12, a2, a3, v11, (const llvm::Twine *)v17, 0);
    (*(void (**)(llvm::Type *, llvm::InsertElementInst *, const llvm::Twine *, llvm::Type *, llvm::Type *))(*(_QWORD *)this[10] + 16))(this[10], v12, a5, this[6], this[7]);
    v13 = *((unsigned int *)this + 2);
    if ((_DWORD)v13)
    {
      v14 = *this;
      v15 = (llvm::Type *)((char *)v14 + 16 * v13);
      do
      {
        llvm::Instruction::setMetadata((unsigned __int8 **)v12, *(_DWORD *)v14, *((llvm::MDNode **)v14 + 1));
        v14 = (llvm::Type *)((char *)v14 + 16);
      }
      while (v14 != v15);
    }
  }
  return v12;
}

llvm::Instruction *EmitX86Select(uint64_t *a1, unsigned __int8 *a2, llvm::Type **a3, Value *a4)
{
  unsigned __int8 **X86MaskVec;
  _BYTE v10[32];
  __int16 v11;

  if (!a2 || a2[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a2))
  {
    X86MaskVec = getX86MaskVec(a1, (llvm::LLVMContext *)a2, *((_DWORD *)*a3 + 8));
    v11 = 257;
    return llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a1, (Value *)X86MaskVec, a3, a4, (const llvm::Twine *)v10, 0);
  }
  return (llvm::Instruction *)a3;
}

unsigned __int8 **ApplyX86MaskOn1BitsVec(uint64_t a1, Type *a2, unsigned __int8 *a3)
{
  llvm::Constant **v3;
  unsigned int v5;
  unsigned __int8 **X86MaskVec;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t IntNTy;
  unsigned __int8 **v25;
  unsigned __int8 **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[32];
  __int16 v32;
  const char *v33[4];
  __int16 v34;
  _DWORD v35[8];
  uint64_t v36;

  v3 = (llvm::Constant **)a2;
  v36 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 32);
  if (a3 && (a3[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a3)))
  {
    X86MaskVec = getX86MaskVec((uint64_t *)a1, (llvm::LLVMContext *)a3, v5);
    v32 = 257;
    v8 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Constant **, unsigned __int8 **))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), 28, v3, X86MaskVec);
    if (!v8)
    {
      v34 = 257;
      v8 = (unsigned __int8 **)llvm::BinaryOperator::Create(28, (uint64_t)v3, (uint64_t)X86MaskVec, v33, 0);
      (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, v31, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v9 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)a1;
        v11 = *(_QWORD *)a1 + 16 * v9;
        do
        {
          llvm::Instruction::setMetadata(v8, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
          v10 += 16;
        }
        while (v10 != v11);
      }
    }
    v3 = (llvm::Constant **)v8;
  }
  if (v5 <= 7)
  {
    if (v5)
    {
      v35[0] = 0;
      if (v5 != 1)
      {
        v35[1] = 1;
        if (v5 != 2)
        {
          v35[2] = 2;
          if (v5 != 3)
          {
            v35[3] = 3;
            if (v5 != 4)
            {
              v35[4] = 4;
              if (v5 != 5)
              {
                v35[5] = 5;
                if (v5 != 6)
                  v35[6] = 6;
              }
            }
          }
        }
      }
    }
    v12 = 8 - v5;
    if (8 - v5 < 2 || v5 > 7)
    {
      v14 = v5;
    }
    else
    {
      v14 = v5 + (v12 & 0xFFFFFFFE);
      v15 = v5;
      v16 = v12 & 0xFFFFFFFE;
      do
      {
        v35[v15] = v15 % v5 + v5;
        v35[v15 + 1] = (v15 + 1) % v5 + v5;
        v15 += 2;
        v16 -= 2;
      }
      while (v16);
      if (v12 == (v12 & 0xFFFFFFFE))
        goto LABEL_27;
    }
    do
    {
      v35[v14] = v14 % v5 + v5;
      ++v14;
    }
    while (v14 != 8);
LABEL_27:
    llvm::Constant::getNullValue(*v3, a2);
    v18 = v17;
    v32 = 257;
    v19 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, llvm::Constant **, uint64_t, _DWORD *, uint64_t))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72), v3, v17, v35, 8);
    if (!v19)
    {
      v19 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x70, 2u);
      v34 = 257;
      llvm::ShuffleVectorInst::ShuffleVectorInst(v19, v3, v18, v35, 8, v33, 0);
      (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v19, v31, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v20 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD *)a1 + 16 * v20;
        do
        {
          llvm::Instruction::setMetadata(v19, *(_DWORD *)v21, *(llvm::MDNode **)(v21 + 8));
          v21 += 16;
        }
        while (v21 != v22);
      }
    }
    v3 = (llvm::Constant **)v19;
  }
  if (v5 <= 8)
    v23 = 8;
  else
    v23 = v5;
  IntNTy = llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 64), (llvm::LLVMContext *)v23, a3);
  v32 = 257;
  if (*v3 == (llvm::Constant *)IntNTy)
    return (unsigned __int8 **)v3;
  v25 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Constant **, uint64_t))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72), 49, v3, IntNTy);
  if (!v25)
  {
    v34 = 257;
    llvm::CastInst::Create(49);
    v25 = v26;
    (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v26, v31, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v27 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)a1;
      v29 = v28 + 16 * v27;
      do
      {
        llvm::Instruction::setMetadata(v25, *(_DWORD *)v28, *(llvm::MDNode **)(v28 + 8));
        v28 += 16;
      }
      while (v28 != v29);
    }
  }
  return v25;
}

unsigned __int8 **getX86MaskVec(uint64_t *a1, llvm::LLVMContext *a2, unsigned int a3)
{
  llvm::FixedVectorType *Int1Ty;
  uint64_t v7;
  double v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  __int16 v21;
  _BYTE v22[32];
  __int16 v23;
  _DWORD v24[4];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  Int1Ty = (llvm::FixedVectorType *)llvm::Type::getInt1Ty((llvm::Type *)a1[8], a2);
  v8 = llvm::FixedVectorType::get(Int1Ty, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8));
  v21 = 257;
  if (*(_QWORD *)a2 == v7)
  {
    v9 = (unsigned __int8 **)a2;
  }
  else
  {
    v9 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t, llvm::LLVMContext *, uint64_t, double))(*(_QWORD *)a1[9] + 120))(a1[9], 49, a2, v7, v8);
    if (!v9)
    {
      v23 = 257;
      llvm::CastInst::Create(49);
      v9 = v10;
      (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, v20, a1[6], a1[7]);
      v11 = *((unsigned int *)a1 + 2);
      if ((_DWORD)v11)
      {
        v12 = *a1;
        v13 = *a1 + 16 * v11;
        do
        {
          llvm::Instruction::setMetadata(v9, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
          v12 += 16;
        }
        while (v12 != v13);
      }
    }
  }
  if (a3 <= 4)
  {
    if (a3)
    {
      v14 = a3;
      v24[0] = 0;
      if (a3 != 1)
      {
        v24[1] = 1;
        if (a3 != 2)
        {
          v24[2] = 2;
          if (a3 != 3)
            v24[3] = 3;
        }
      }
    }
    else
    {
      v14 = 0;
    }
    v20[0] = "extract";
    v21 = 259;
    v15 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, unsigned __int8 **, unsigned __int8 **, _DWORD *, uint64_t))(*(_QWORD *)a1[9] + 112))(a1[9], v9, v9, v24, v14);
    if (!v15)
    {
      v15 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x70, 2u);
      v23 = 257;
      llvm::ShuffleVectorInst::ShuffleVectorInst(v15, v9, v9, v24, v14, v22, 0);
      (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v15, v20, a1[6], a1[7]);
      v16 = *((unsigned int *)a1 + 2);
      if ((_DWORD)v16)
      {
        v17 = *a1;
        v18 = v17 + 16 * v16;
        do
        {
          llvm::Instruction::setMetadata(v15, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
          v17 += 16;
        }
        while (v17 != v18);
      }
    }
    return v15;
  }
  return v9;
}

unsigned __int8 **llvm::IRBuilderBase::CreateShuffleVector(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;

  v12 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 112))(a1[9]);
  if (!v12)
  {
    v12 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x70, 2u);
    v18 = 257;
    llvm::ShuffleVectorInst::ShuffleVectorInst(v12, a2, a3, a4, a5, v17, 0);
    (*(void (**)(uint64_t, unsigned __int8 **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v12, a6, a1[6], a1[7]);
    v13 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v13)
    {
      v14 = *a1;
      v15 = v14 + 16 * v13;
      do
      {
        llvm::Instruction::setMetadata(v12, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
        v14 += 16;
      }
      while (v14 != v15);
    }
  }
  return v12;
}

unsigned __int8 **llvm::IRBuilderBase::CreateNot(llvm::IRBuilderBase *this, llvm::Constant **a2, const llvm::Twine *a3)
{
  llvm::APFloatBase *AllOnesValue;
  unsigned __int8 **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v12;
  __int16 v13;

  AllOnesValue = llvm::Constant::getAllOnesValue(*a2, (llvm::Type *)a2, a3);
  v7 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Constant **, llvm::APFloatBase *))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), 30, a2, AllOnesValue);
  if (!v7)
  {
    v13 = 257;
    v7 = (unsigned __int8 **)llvm::BinaryOperator::Create(30, (uint64_t)a2, (uint64_t)AllOnesValue, &v12, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v7, a3, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v8 = *((unsigned int *)this + 2);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD **)this;
      v10 = &v9[2 * v8];
      do
      {
        llvm::Instruction::setMetadata(v7, *(_DWORD *)v9, (llvm::MDNode *)v9[1]);
        v9 += 2;
      }
      while (v9 != v10);
    }
  }
  return v7;
}

unsigned __int8 **llvm::IRBuilderBase::CreateOr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v13;
  __int16 v14;

  v8 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), 29, a2, a3);
  if (!v8)
  {
    v14 = 257;
    v8 = (unsigned __int8 **)llvm::BinaryOperator::Create(29, (uint64_t)a2, (uint64_t)a3, &v13, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v8, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v9 = *((unsigned int *)this + 2);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)this;
      v11 = &v10[2 * v9];
      do
      {
        llvm::Instruction::setMetadata(v8, *(_DWORD *)v10, (llvm::MDNode *)v10[1]);
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
  return v8;
}

unsigned __int8 **llvm::IRBuilderBase::CreateXor(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v13;
  __int16 v14;

  v8 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), 30, a2, a3);
  if (!v8)
  {
    v14 = 257;
    v8 = (unsigned __int8 **)llvm::BinaryOperator::Create(30, (uint64_t)a2, (uint64_t)a3, &v13, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v8, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v9 = *((unsigned int *)this + 2);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)this;
      v11 = &v10[2 * v9];
      do
      {
        llvm::Instruction::setMetadata(v8, *(_DWORD *)v10, (llvm::MDNode *)v10[1]);
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
  return v8;
}

llvm::ExtractElementInst *llvm::IRBuilderBase::CreateExtractElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  llvm::ExtractElementInst *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _BYTE v13[32];
  __int16 v14;

  v8 = (llvm::ExtractElementInst *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 96))(*((_QWORD *)this + 9));
  if (!v8)
  {
    v14 = 257;
    v8 = (llvm::ExtractElementInst *)llvm::User::operator new((llvm::User *)0x48, 2u);
    llvm::ExtractElementInst::ExtractElementInst(v8, a2, a3, (const llvm::Twine *)v13, 0);
    (*(void (**)(_QWORD, llvm::ExtractElementInst *, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), v8, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v9 = *((unsigned int *)this + 2);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)this;
      v11 = &v10[2 * v9];
      do
      {
        llvm::Instruction::setMetadata((unsigned __int8 **)v8, *(_DWORD *)v10, (llvm::MDNode *)v10[1]);
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
  return v8;
}

uint64_t **llvm::IRBuilderBase::CreateFAdd(llvm::IRBuilderBase *this, int8x16_t *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;

  v5 = a5;
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 90, a2, (const unsigned __int8 *)a3, 0, (uint64_t)a4, a5, 0, 0);
  v11 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, int8x16_t *, llvm::Value *, _QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), 14, a2, a3, *((unsigned int *)this + 24));
  if (!v11)
  {
    v18 = 257;
    v12 = (unsigned __int8 **)llvm::BinaryOperator::Create(14, (uint64_t)a2, (uint64_t)a3, &v17, 0);
    v11 = v12;
    v13 = *((_DWORD *)this + 24);
    if (v5 || (v5 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Instruction::setMetadata(v12, 3, v5);
    llvm::Instruction::setFastMathFlags((uint64_t)v11, v13);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v11, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v14 = *((unsigned int *)this + 2);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)this;
      v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata(v11, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return (uint64_t **)v11;
}

uint64_t **llvm::IRBuilderBase::CreateFSub(llvm::IRBuilderBase *this, int8x16_t *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;

  v5 = a5;
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 103, a2, (const unsigned __int8 *)a3, 0, (uint64_t)a4, a5, 0, 0);
  v11 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, int8x16_t *, llvm::Value *, _QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), 16, a2, a3, *((unsigned int *)this + 24));
  if (!v11)
  {
    v18 = 257;
    v12 = (unsigned __int8 **)llvm::BinaryOperator::Create(16, (uint64_t)a2, (uint64_t)a3, &v17, 0);
    v11 = v12;
    v13 = *((_DWORD *)this + 24);
    if (v5 || (v5 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Instruction::setMetadata(v12, 3, v5);
    llvm::Instruction::setFastMathFlags((uint64_t)v11, v13);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v11, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v14 = *((unsigned int *)this + 2);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)this;
      v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata(v11, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return (uint64_t **)v11;
}

uint64_t **llvm::IRBuilderBase::CreateFMul(llvm::IRBuilderBase *this, int8x16_t *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;

  v5 = a5;
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 96, a2, (const unsigned __int8 *)a3, 0, (uint64_t)a4, a5, 0, 0);
  v11 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, int8x16_t *, llvm::Value *, _QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), 18, a2, a3, *((unsigned int *)this + 24));
  if (!v11)
  {
    v18 = 257;
    v12 = (unsigned __int8 **)llvm::BinaryOperator::Create(18, (uint64_t)a2, (uint64_t)a3, &v17, 0);
    v11 = v12;
    v13 = *((_DWORD *)this + 24);
    if (v5 || (v5 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Instruction::setMetadata(v12, 3, v5);
    llvm::Instruction::setFastMathFlags((uint64_t)v11, v13);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v11, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v14 = *((unsigned int *)this + 2);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)this;
      v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata(v11, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return (uint64_t **)v11;
}

uint64_t **llvm::IRBuilderBase::CreateFDiv(llvm::IRBuilderBase *this, int8x16_t *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;

  v5 = a5;
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 93, a2, (const unsigned __int8 *)a3, 0, (uint64_t)a4, a5, 0, 0);
  v11 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, int8x16_t *, llvm::Value *, _QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), 21, a2, a3, *((unsigned int *)this + 24));
  if (!v11)
  {
    v18 = 257;
    v12 = (unsigned __int8 **)llvm::BinaryOperator::Create(21, (uint64_t)a2, (uint64_t)a3, &v17, 0);
    v11 = v12;
    v13 = *((_DWORD *)this + 24);
    if (v5 || (v5 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Instruction::setMetadata(v12, 3, v5);
    llvm::Instruction::setFastMathFlags((uint64_t)v11, v13);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v11, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v14 = *((unsigned int *)this + 2);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)this;
      v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata(v11, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return (uint64_t **)v11;
}

llvm::InsertElementInst *llvm::IRBuilderBase::CreateInsertElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  llvm::InsertElementInst *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BYTE v15[32];
  __int16 v16;

  v10 = (llvm::InsertElementInst *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 104))(*((_QWORD *)this + 9));
  if (!v10)
  {
    v16 = 257;
    v10 = (llvm::InsertElementInst *)llvm::User::operator new((llvm::User *)0x48, 3u);
    llvm::InsertElementInst::InsertElementInst(v10, a2, a3, a4, (const llvm::Twine *)v15, 0);
    (*(void (**)(_QWORD, llvm::InsertElementInst *, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), v10, a5, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v11 = *((unsigned int *)this + 2);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD **)this;
      v13 = &v12[2 * v11];
      do
      {
        llvm::Instruction::setMetadata((unsigned __int8 **)v10, *(_DWORD *)v12, (llvm::MDNode *)v12[1]);
        v12 += 2;
      }
      while (v12 != v13);
    }
  }
  return v10;
}

void upgradeMaskedCompare(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X11 }
}

unsigned __int8 **sub_180CA1804(uint64_t a1, uint64_t a2, llvm::Type ***a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  llvm::CallBase *v6;
  __int16 v7;
  uint64_t v8;
  unsigned __int8 **ICmp;
  uint64_t v10;
  _DWORD *v11;
  _WORD v13[44];

  if (a4)
    v7 = 40;
  else
    v7 = 36;
  v8 = *(_QWORD *)(v4 + 32);
  v13[16] = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp(v5, v7, a3, v8, (uint64_t)v13);
  v10 = llvm::CallBase::arg_end(v6);
  v11 = (_DWORD *)((char *)v6 - 32 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF));
  return ApplyX86MaskOn1BitsVec((uint64_t)v5, (Type *)ICmp, *(unsigned __int8 **)&v11[8 * ((unint64_t)(v10 - (_QWORD)v11) >> 5) - 8]);
}

void sub_180CA18C8(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t v2;
  llvm::Type *v3;
  llvm::FixedVectorType *Int1Ty;
  llvm::Constant *v5;
  llvm::Type *v6;
  const llvm::APInt *v7;

  Int1Ty = (llvm::FixedVectorType *)llvm::Type::getInt1Ty(*(llvm::Type **)(v2 + 64), a2);
  llvm::FixedVectorType::get(Int1Ty, v3);
  llvm::Constant::getAllOnesValue(v5, v6, v7);
  JUMPOUT(0x180CA187CLL);
}

_QWORD *llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const double *v16;
  unsigned __int128 *v17;
  const double *v18;
  unsigned __int128 v19;
  unsigned __int128 v20;
  uint64_t v21;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v4 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v3 - *(_QWORD *)a2;
  if ((unint64_t)v5 < 0x81)
  {
    v6 = 0;
    v7 = 0;
    if (v4 == v3)
      goto LABEL_17;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v5 >> 5, 8);
    v6 = *((unsigned int *)a1 + 2);
    v7 = *((_DWORD *)a1 + 2);
    if (v4 == v3)
      goto LABEL_17;
  }
  v8 = *a1;
  v9 = (_QWORD *)(*a1 + 8 * v6);
  v10 = v5 - 32;
  if ((unint64_t)(v5 - 32) >= 0x300
    && (v9 >= (_QWORD *)((char *)v4 + (v10 & 0xFFFFFFFFFFFFFFE0) + 8)
     || (unint64_t)v4 >= v8 + 8 * (v6 + (v10 >> 5)) + 8))
  {
    v12 = (v10 >> 5) + 1;
    v13 = v12 & 3;
    if ((v12 & 3) == 0)
      v13 = 4;
    v14 = v12 - v13;
    v9 += v14;
    v15 = &v4[4 * v14];
    v16 = (const double *)(v4 + 8);
    v17 = (unsigned __int128 *)(v8 + 8 * v6 + 16);
    do
    {
      v18 = v16 - 8;
      v19 = (unsigned __int128)vld4q_f64(v18);
      v20 = (unsigned __int128)vld4q_f64(v16);
      *(v17 - 1) = v19;
      *v17 = v20;
      v16 += 16;
      v17 += 2;
      v14 -= 4;
    }
    while (v14);
    v4 = v15;
  }
  do
  {
    v21 = *v4;
    v4 += 4;
    *v9++ = v21;
  }
  while (v4 != v3);
LABEL_17:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v5 >> 5);
  return a1;
}

llvm::Instruction *upgradeAbs(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v4;
  uint64_t *Module;
  uint64_t Declaration;
  llvm::LLVMContext *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Int1Ty;
  llvm::Type **v11;
  uint64_t v12;
  char *v13;
  unsigned __int8 *v14;
  Value *v15;
  BOOL v16;
  unsigned __int8 **X86MaskVec;
  BOOL *v19;
  _BYTE v20[32];
  __int16 v21;
  uint64_t v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v19 = *(BOOL **)this;
  v4 = *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  Module = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)this);
  Declaration = llvm::Intrinsic::getDeclaration(Module, 5, &v19, 1);
  v8 = Declaration;
  if (Declaration)
    v9 = *(_QWORD *)(Declaration + 24);
  else
    v9 = 0;
  v22[0] = v4;
  Int1Ty = llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 64), v7);
  v22[1] = (uint64_t)llvm::ConstantInt::get(Int1Ty, 0, 0);
  v21 = 257;
  v11 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v9, v8, v22, 2, (uint64_t)v20, 0);
  v12 = llvm::CallBase::arg_end(this);
  v13 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  if (((v12 - (_QWORD)v13) & 0x1FFFFFFFE0) == 0x60)
  {
    v14 = (unsigned __int8 *)*((_QWORD *)v13 + 8);
    v15 = (Value *)*((_QWORD *)v13 + 4);
    if (v14)
      v16 = v14[16] > 0x14u;
    else
      v16 = 1;
    if (v16 || !llvm::Constant::isAllOnesValue((llvm::Constant *)v14))
    {
      X86MaskVec = getX86MaskVec((uint64_t *)a1, (llvm::LLVMContext *)v14, *((_DWORD *)*v11 + 8));
      v21 = 257;
      return llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a1, (Value *)X86MaskVec, v11, v15, (const llvm::Twine *)v20, 0);
    }
  }
  return (llvm::Instruction *)v11;
}

llvm::Instruction *UpgradeX86BinaryIntrinsics(uint64_t *a1, llvm::Instruction *this, int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *Module;
  uint64_t Declaration;
  uint64_t v11;
  llvm::Type **v12;
  uint64_t v13;
  char *v14;
  Value *v15;
  unsigned __int8 *v16;
  BOOL v17;
  unsigned __int8 **X86MaskVec;
  BOOL *v20;
  _BYTE v21[32];
  __int16 v22;
  uint64_t v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v20 = *(BOOL **)this;
  v6 = (uint64_t *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  v7 = *v6;
  v8 = v6[4];
  Module = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)this);
  Declaration = llvm::Intrinsic::getDeclaration(Module, a3, &v20, 1);
  if (Declaration)
    v11 = *(_QWORD *)(Declaration + 24);
  else
    v11 = 0;
  v23[0] = v7;
  v23[1] = v8;
  v22 = 257;
  v12 = (llvm::Type **)llvm::IRBuilderBase::CreateCall(a1, v11, Declaration, v23, 2, (uint64_t)v21, 0);
  v13 = llvm::CallBase::arg_end(this);
  v14 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  if (((v13 - (_QWORD)v14) & 0x1FFFFFFFE0) == 0x80)
  {
    v15 = (Value *)*((_QWORD *)v14 + 8);
    v16 = (unsigned __int8 *)*((_QWORD *)v14 + 12);
    if (v16)
      v17 = v16[16] > 0x14u;
    else
      v17 = 1;
    if (v17 || !llvm::Constant::isAllOnesValue((llvm::Constant *)v16))
    {
      X86MaskVec = getX86MaskVec(a1, (llvm::LLVMContext *)v16, *((_DWORD *)*v12 + 8));
      v22 = 257;
      return llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a1, (Value *)X86MaskVec, v12, v15, (const llvm::Twine *)v21, 0);
    }
  }
  return (llvm::Instruction *)v12;
}

llvm::Instruction *upgradePMULDQ(uint64_t a1, llvm::CallBase *a2, int a3)
{
  llvm::ConstantInt *v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ConstantInt *v19;
  _QWORD *v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned __int8 *v50;
  Value *v51;
  BOOL v52;
  unsigned __int8 **X86MaskVec;
  _BYTE v55[32];
  __int16 v56;
  const char *v57[4];
  __int16 v58;

  v6 = *(llvm::ConstantInt **)a2;
  v7 = (unsigned __int8 **)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v56 = 257;
  if (*v7 == (unsigned __int8 *)v6)
  {
    v8 = v7;
  }
  else
  {
    v8 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, llvm::ConstantInt *))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72), 49, v7, v6);
    if (!v8)
    {
      v58 = 257;
      llvm::CastInst::Create(49);
      v8 = v9;
      (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v9, v55, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v10 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)a1;
        v12 = *(_QWORD *)a1 + 16 * v10;
        do
        {
          llvm::Instruction::setMetadata(v8, *(_DWORD *)v11, *(llvm::MDNode **)(v11 + 8));
          v11 += 16;
        }
        while (v11 != v12);
      }
    }
  }
  v13 = (unsigned __int8 **)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  v56 = 257;
  if (*v13 == (unsigned __int8 *)v6)
  {
    v14 = v13;
    v19 = v6;
    if (a3)
    {
LABEL_14:
      v20 = llvm::ConstantInt::get(v19, 32, 0);
      v56 = 257;
      v21 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72), 25, v8, v20, 0, 0);
      if (!v21)
      {
        v58 = 257;
        v21 = (unsigned __int8 **)llvm::BinaryOperator::Create(25, (uint64_t)v8, (uint64_t)v20, v57, 0);
        (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v21, v55, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
        v22 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v22)
        {
          v23 = *(_QWORD *)a1;
          v24 = *(_QWORD *)a1 + 16 * v22;
          do
          {
            llvm::Instruction::setMetadata(v21, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
            v23 += 16;
          }
          while (v23 != v24);
        }
      }
      v56 = 257;
      v25 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), 27, v21, v20, 0);
      if (!v25)
      {
        v58 = 257;
        v25 = (unsigned __int8 **)llvm::BinaryOperator::Create(27, (uint64_t)v21, (uint64_t)v20, v57, 0);
        (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v25, v55, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
        v26 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v26)
        {
          v27 = *(_QWORD *)a1;
          v28 = *(_QWORD *)a1 + 16 * v26;
          do
          {
            llvm::Instruction::setMetadata(v25, *(_DWORD *)v27, *(llvm::MDNode **)(v27 + 8));
            v27 += 16;
          }
          while (v27 != v28);
        }
      }
      v56 = 257;
      v29 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72), 25, v14, v20, 0, 0);
      if (!v29)
      {
        v58 = 257;
        v29 = (unsigned __int8 **)llvm::BinaryOperator::Create(25, (uint64_t)v14, (uint64_t)v20, v57, 0);
        (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v29, v55, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
        v30 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v30)
        {
          v31 = *(_QWORD *)a1;
          v32 = *(_QWORD *)a1 + 16 * v30;
          do
          {
            llvm::Instruction::setMetadata(v29, *(_DWORD *)v31, *(llvm::MDNode **)(v31 + 8));
            v31 += 16;
          }
          while (v31 != v32);
        }
      }
      v56 = 257;
      v33 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), 27, v29, v20, 0);
      if (!v33)
      {
        v58 = 257;
        v33 = (unsigned __int8 **)llvm::BinaryOperator::Create(27, (uint64_t)v29, (uint64_t)v20, v57, 0);
        (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v33, v55, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
        v34 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v34)
        {
          v35 = *(_QWORD *)a1;
          v36 = *(_QWORD *)a1 + 16 * v34;
          do
          {
            llvm::Instruction::setMetadata(v33, *(_DWORD *)v35, *(llvm::MDNode **)(v35 + 8));
            v35 += 16;
          }
          while (v35 != v36);
        }
      }
      goto LABEL_40;
    }
  }
  else
  {
    v14 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, llvm::ConstantInt *))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72), 49, v13, v6);
    if (!v14)
    {
      v58 = 257;
      llvm::CastInst::Create(49);
      v14 = v15;
      (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v15, v55, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v16 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD *)a1 + 16 * v16;
        do
        {
          llvm::Instruction::setMetadata(v14, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
          v17 += 16;
        }
        while (v17 != v18);
      }
    }
    v19 = v6;
    if (a3)
      goto LABEL_14;
  }
  v37 = llvm::ConstantInt::get(v19, 0xFFFFFFFFLL, 0);
  v56 = 257;
  v25 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, _QWORD *))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), 28, v8, v37);
  if (!v25)
  {
    v58 = 257;
    v25 = (unsigned __int8 **)llvm::BinaryOperator::Create(28, (uint64_t)v8, (uint64_t)v37, v57, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v25, v55, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v38 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v38)
    {
      v39 = *(_QWORD *)a1;
      v40 = *(_QWORD *)a1 + 16 * v38;
      do
      {
        llvm::Instruction::setMetadata(v25, *(_DWORD *)v39, *(llvm::MDNode **)(v39 + 8));
        v39 += 16;
      }
      while (v39 != v40);
    }
  }
  v56 = 257;
  v33 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, _QWORD *))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), 28, v14, v37);
  if (!v33)
  {
    v58 = 257;
    v33 = (unsigned __int8 **)llvm::BinaryOperator::Create(28, (uint64_t)v14, (uint64_t)v37, v57, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v33, v55, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v41 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v41)
    {
      v42 = *(_QWORD *)a1;
      v43 = *(_QWORD *)a1 + 16 * v41;
      do
      {
        llvm::Instruction::setMetadata(v33, *(_DWORD *)v42, *(llvm::MDNode **)(v42 + 8));
        v42 += 16;
      }
      while (v42 != v43);
    }
  }
LABEL_40:
  v56 = 257;
  v44 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72), 17, v25, v33, 0, 0);
  if (!v44)
  {
    v58 = 257;
    v44 = (unsigned __int8 **)llvm::BinaryOperator::Create(17, (uint64_t)v25, (uint64_t)v33, v57, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v44, v55, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v45 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v45)
    {
      v46 = *(_QWORD *)a1;
      v47 = *(_QWORD *)a1 + 16 * v45;
      do
      {
        llvm::Instruction::setMetadata(v44, *(_DWORD *)v46, *(llvm::MDNode **)(v46 + 8));
        v46 += 16;
      }
      while (v46 != v47);
    }
  }
  v48 = llvm::CallBase::arg_end(a2);
  v49 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (((v48 - (_QWORD)v49) & 0x1FFFFFFFE0) == 0x80)
  {
    v50 = (unsigned __int8 *)*((_QWORD *)v49 + 12);
    v51 = (Value *)*((_QWORD *)v49 + 8);
    if (v50)
      v52 = v50[16] > 0x14u;
    else
      v52 = 1;
    if (v52 || !llvm::Constant::isAllOnesValue((llvm::Constant *)v50))
    {
      X86MaskVec = getX86MaskVec((uint64_t *)a1, (llvm::LLVMContext *)v50, *((_DWORD *)*v44 + 8));
      v58 = 257;
      return llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a1, (Value *)X86MaskVec, (llvm::Type **)v44, v51, (const llvm::Twine *)v57, 0);
    }
  }
  return (llvm::Instruction *)v44;
}

llvm::Value *llvm::IRBuilderBase::CreateSIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*((_BYTE *)this + 100))
    return (llvm::Value *)llvm::IRBuilderBase::CreateConstrainedFPCast((uint64_t)this, 123, (BOOL *)a2, (BOOL *)a3, 0, (uint64_t)a4, 0, 0, 0);
  if (*(llvm::Type **)a2 == a3)
    return a2;
  v7 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Type *))(**((_QWORD **)this + 9) + 120))(*((_QWORD *)this + 9), 44, a2, a3);
  if (!v7)
  {
    llvm::CastInst::Create(44);
    v7 = v8;
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v8, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v9 = *((unsigned int *)this + 2);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)this;
      v11 = v10 + 16 * v9;
      do
      {
        llvm::Instruction::setMetadata(v7, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
        v10 += 16;
      }
      while (v10 != v11);
    }
  }
  return (llvm::Value *)v7;
}

llvm::Value *llvm::IRBuilderBase::CreateUIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*((_BYTE *)this + 100))
    return (llvm::Value *)llvm::IRBuilderBase::CreateConstrainedFPCast((uint64_t)this, 126, (BOOL *)a2, (BOOL *)a3, 0, (uint64_t)a4, 0, 0, 0);
  if (*(llvm::Type **)a2 == a3)
    return a2;
  v7 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Type *))(**((_QWORD **)this + 9) + 120))(*((_QWORD *)this + 9), 43, a2, a3);
  if (!v7)
  {
    llvm::CastInst::Create(43);
    v7 = v8;
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v8, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v9 = *((unsigned int *)this + 2);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)this;
      v11 = v10 + 16 * v9;
      do
      {
        llvm::Instruction::setMetadata(v7, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
        v10 += 16;
      }
      while (v10 != v11);
    }
  }
  return (llvm::Value *)v7;
}

llvm::Value *llvm::IRBuilderBase::CreateFPExt(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*((_BYTE *)this + 100))
    return (llvm::Value *)llvm::IRBuilderBase::CreateConstrainedFPCast((uint64_t)this, 98, (BOOL *)a2, (BOOL *)a3, 0, (uint64_t)a4, 0, 0, 0);
  if (*(llvm::Type **)a2 == a3)
    return a2;
  v7 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Type *))(**((_QWORD **)this + 9) + 120))(*((_QWORD *)this + 9), 46, a2, a3);
  if (!v7)
  {
    llvm::CastInst::Create(46);
    v7 = v8;
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v8, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v9 = *((unsigned int *)this + 2);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)this;
      v11 = v10 + 16 * v9;
      do
      {
        llvm::Instruction::setMetadata(v7, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
        v10 += 16;
      }
      while (v10 != v11);
    }
  }
  return (llvm::Value *)v7;
}

unsigned __int8 **UpgradeMaskedLoad(uint64_t a1, unsigned __int8 **a2, llvm::PointerType ***a3, unsigned __int8 *a4, int a5)
{
  llvm::PointerType **v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unsigned __int8 **X86MaskVec;
  _WORD v20[20];
  _BYTE v21[32];
  __int16 v22;

  v10 = *a3;
  v11 = llvm::PointerType::get(*a3, 0);
  v20[16] = 257;
  if (*a2 == (unsigned __int8 *)v11)
  {
    v12 = a2;
    if (a5)
      goto LABEL_7;
LABEL_10:
    v17 = 0;
    if (!a4)
      goto LABEL_14;
    goto LABEL_11;
  }
  v12 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, uint64_t))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72), 49, a2, v11);
  if (!v12)
  {
    v22 = 257;
    llvm::CastInst::Create(49);
    v12 = v13;
    (*(void (**)(_QWORD, unsigned __int8 **, _WORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, v20, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)a1;
      v16 = *(_QWORD *)a1 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata(v12, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  if (!a5)
    goto LABEL_10;
LABEL_7:
  v17 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*a3) >> 3));
  if (!a4)
    goto LABEL_14;
LABEL_11:
  if (a4[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)a4))
  {
    v22 = 257;
    return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)a1, (llvm::Type *)v10, (uint64_t)v12, v17 | 0x100u, 0, (uint64_t)v21);
  }
LABEL_14:
  X86MaskVec = getX86MaskVec((uint64_t *)a1, (llvm::LLVMContext *)a4, *((_DWORD *)v10 + 8));
  v22 = 257;
  return (unsigned __int8 **)llvm::IRBuilderBase::CreateMaskedLoad(a1, (llvm::PoisonValue *)v10, (BOOL **)v12, v17, (uint64_t)X86MaskVec, (uint64_t)a3, (uint64_t)v21);
}

void upgradeX86vpcom(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X11 }
}

unsigned __int8 **sub_180CA291C@<X0>(llvm::Type ***a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  uint64_t v3;
  unsigned __int8 *v4;
  __int16 v5;
  unsigned __int8 **result;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v12[20];
  uint64_t v13;
  __int16 v14;

  if (a3)
    v5 = 40;
  else
    v5 = 36;
  v14 = 257;
  result = llvm::IRBuilderBase::CreateICmp((uint64_t *)v3, v5, a1, a2, (uint64_t)&v13);
  v12[16] = 257;
  if (*result != v4)
  {
    v7 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, unsigned __int8 *))(**(_QWORD **)(v3 + 72) + 120))(*(_QWORD *)(v3 + 72), 40, result, v4);
    if (!v7)
    {
      v14 = 257;
      llvm::CastInst::Create(40);
      v7 = v8;
      (*(void (**)(_QWORD, unsigned __int8 **, _WORD *, _QWORD, _QWORD))(**(_QWORD **)(v3 + 80) + 16))(*(_QWORD *)(v3 + 80), v8, v12, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
      v9 = *(unsigned int *)(v3 + 8);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)v3;
        v11 = v10 + 16 * v9;
        do
        {
          llvm::Instruction::setMetadata(v7, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
          v10 += 16;
        }
        while (v10 != v11);
      }
    }
    return v7;
  }
  return result;
}

void sub_180CA2A54(int a1, Type *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  llvm::Constant *v24;

  llvm::Constant::getNullValue(v24, a2);
}

llvm::APFloatBase *sub_180CA2A6C(uint64_t a1, llvm::Type *a2, const llvm::APInt *a3)
{
  llvm::Constant *v3;

  return llvm::Constant::getAllOnesValue(v3, a2, a3);
}

llvm::Instruction *upgradeX86Rotate(llvm::IRBuilderBase *a1, llvm::Instruction *this, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 **VectorSplat;
  unsigned int v10;
  llvm::Type **IntCast;
  int v12;
  uint64_t *Module;
  uint64_t Declaration;
  uint64_t v15;
  llvm::Type **v16;
  uint64_t v17;
  char *v18;
  Value *v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 **X86MaskVec;
  BOOL *v24;
  _BYTE v25[32];
  __int16 v26;
  uint64_t v27[4];

  v27[3] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)this;
  v24 = (BOOL *)v6;
  v7 = (uint64_t *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  v8 = *v7;
  VectorSplat = (unsigned __int8 **)v7[4];
  if (*VectorSplat != (unsigned __int8 *)v6)
  {
    v10 = *(_DWORD *)(v6 + 32);
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      v6 = **(_QWORD **)(v6 + 16);
    v26 = 257;
    IntCast = llvm::IRBuilderBase::CreateIntCast(a1, (llvm::Type **)VectorSplat, (llvm::Type *)v6, 0, (const llvm::Twine *)v25);
    v26 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(a1, v10, IntCast, (const llvm::Twine *)v25);
  }
  if (a3)
    v12 = 163;
  else
    v12 = 162;
  Module = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)this);
  Declaration = llvm::Intrinsic::getDeclaration(Module, v12, &v24, 1);
  if (Declaration)
    v15 = *(_QWORD *)(Declaration + 24);
  else
    v15 = 0;
  v27[0] = v8;
  v27[1] = v8;
  v27[2] = (uint64_t)VectorSplat;
  v26 = 257;
  v16 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v15, Declaration, v27, 3, (uint64_t)v25, 0);
  v17 = llvm::CallBase::arg_end(this);
  v18 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  if (((v17 - (_QWORD)v18) & 0x1FFFFFFFE0) == 0x80)
  {
    v19 = (Value *)*((_QWORD *)v18 + 8);
    v20 = (unsigned __int8 *)*((_QWORD *)v18 + 12);
    if (v20)
      v21 = v20[16] > 0x14u;
    else
      v21 = 1;
    if (v21 || !llvm::Constant::isAllOnesValue((llvm::Constant *)v20))
    {
      X86MaskVec = getX86MaskVec((uint64_t *)a1, (llvm::LLVMContext *)v20, *((_DWORD *)*v16 + 8));
      v26 = 257;
      return llvm::IRBuilderBase::CreateSelect(a1, (Value *)X86MaskVec, v16, v19, (const llvm::Twine *)v25, 0);
    }
  }
  return (llvm::Instruction *)v16;
}

llvm::Instruction *upgradeX86ConcatShift(llvm::IRBuilderBase *a1, BOOL **this, int a3, int a4)
{
  BOOL *v8;
  uint64_t *v9;
  unsigned __int8 **VectorSplat;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  llvm::Type **IntCast;
  int v15;
  uint64_t *Module;
  uint64_t Declaration;
  uint64_t v18;
  llvm::Type **v19;
  uint64_t v20;
  llvm::Type *v21;
  uint64_t v22;
  BOOL **v23;
  unint64_t v24;
  uint64_t v25;
  Value *v26;
  unsigned __int8 *v27;
  BOOL v28;
  unsigned __int8 **X86MaskVec;
  BOOL *v31;
  _BYTE v32[32];
  __int16 v33;
  uint64_t v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  v8 = *this;
  v31 = *this;
  v9 = (uint64_t *)&this[-4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)];
  VectorSplat = (unsigned __int8 **)v9[8];
  if (a3)
    v11 = *v9;
  else
    v11 = v9[4];
  if (a3)
    v12 = v9[4];
  else
    v12 = *v9;
  if (*VectorSplat != (unsigned __int8 *)v8)
  {
    v13 = *((_DWORD *)v8 + 8);
    if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x12)
      v8 = (BOOL *)**((_QWORD **)v8 + 2);
    v33 = 257;
    IntCast = llvm::IRBuilderBase::CreateIntCast(a1, (llvm::Type **)VectorSplat, (llvm::Type *)v8, 0, (const llvm::Twine *)v32);
    v33 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(a1, v13, IntCast, (const llvm::Twine *)v32);
  }
  if (a3)
    v15 = 163;
  else
    v15 = 162;
  Module = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)this);
  Declaration = llvm::Intrinsic::getDeclaration(Module, v15, &v31, 1);
  if (Declaration)
    v18 = *(_QWORD *)(Declaration + 24);
  else
    v18 = 0;
  v34[0] = v12;
  v34[1] = v11;
  v34[2] = (uint64_t)VectorSplat;
  v33 = 257;
  v19 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v18, Declaration, v34, 3, (uint64_t)v32, 0);
  v20 = llvm::CallBase::arg_end((llvm::CallBase *)this);
  v22 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  v23 = &this[-4 * v22];
  v24 = (unint64_t)(v20 - (_QWORD)v23) >> 5;
  if (v24 >= 4)
  {
    v25 = -v22;
    if ((_DWORD)v24 == 5)
    {
      v26 = (Value *)v23[12];
    }
    else if (a4)
    {
      v26 = (Value *)llvm::ConstantAggregateZero::get((llvm::ConstantAggregateZero *)*this, v21);
      v25 = -(uint64_t)(*((_DWORD *)this + 5) & 0x7FFFFFF);
    }
    else
    {
      v26 = (Value *)*v23;
    }
    v27 = (unsigned __int8 *)(&this[4 * v25])[4 * (v24 - 1)];
    if (v27)
      v28 = v27[16] > 0x14u;
    else
      v28 = 1;
    if (v28 || !llvm::Constant::isAllOnesValue((llvm::Constant *)v27))
    {
      X86MaskVec = getX86MaskVec((uint64_t *)a1, (llvm::LLVMContext *)v27, *((_DWORD *)*v19 + 8));
      v33 = 257;
      return llvm::IRBuilderBase::CreateSelect(a1, (Value *)X86MaskVec, v19, v26, (const llvm::Twine *)v32, 0);
    }
  }
  return (llvm::Instruction *)v19;
}

llvm::Type **llvm::IRBuilderBase::CreateTrunc(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  if (*a2 == a3)
    return a2;
  v6 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Type **, llvm::Type *))(**((_QWORD **)this + 9) + 120))(*((_QWORD *)this + 9), 38, a2, a3);
  if (!v6)
  {
    llvm::CastInst::Create(38);
    v6 = v7;
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v7, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v8 = *((unsigned int *)this + 2);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD **)this;
      v10 = &v9[2 * v8];
      do
      {
        llvm::Instruction::setMetadata(v6, *(_DWORD *)v9, (llvm::MDNode *)v9[1]);
        v9 += 2;
      }
      while (v9 != v10);
    }
  }
  return (llvm::Type **)v6;
}

_QWORD *llvm::SmallVector<int,8u>::SmallVector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (a2)
  {
    if (a2 < 9)
    {
      v4 = 0;
      v5 = a2;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, a2, 4);
      v4 = *((unsigned int *)a1 + 2);
      v5 = a2 - v4;
      if (a2 == v4)
        goto LABEL_7;
    }
    bzero((void *)(*a1 + 4 * v4), 4 * v5);
LABEL_7:
    *((_DWORD *)a1 + 2) = a2;
  }
  return a1;
}

unsigned __int8 **llvm::IRBuilderBase::CreateShuffleVector(uint64_t *a1, llvm::PoisonValue **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[32];
  __int16 v17;

  v10 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  v11 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, llvm::PoisonValue **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[9] + 112))(a1[9], a2, v10, a3, a4);
  if (!v11)
  {
    v11 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x70, 2u);
    v17 = 257;
    llvm::ShuffleVectorInst::ShuffleVectorInst(v11, a2, v10, a3, a4, v16, 0);
    (*(void (**)(uint64_t, unsigned __int8 **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v11, a5, a1[6], a1[7]);
    v12 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v12)
    {
      v13 = *a1;
      v14 = v13 + 16 * v12;
      do
      {
        llvm::Instruction::setMetadata(v11, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
        v13 += 16;
      }
      while (v13 != v14);
    }
  }
  return v11;
}

llvm::Value *llvm::IRBuilderBase::CreatePointerCast(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  llvm::Value *v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;

  v5 = a2;
  if (*(llvm::Type **)a2 == a3)
    return v5;
  if (*((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    v18 = 257;
    v5 = llvm::CastInst::CreatePointerCast(a2, a3, &v17, 0, a5);
    (*(void (**)(_QWORD, llvm::Value *, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), v5, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v8 = *((unsigned int *)this + 2);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD **)this;
      v10 = &v9[2 * v8];
      do
      {
        llvm::Instruction::setMetadata((unsigned __int8 **)v5, *(_DWORD *)v9, (llvm::MDNode *)v9[1]);
        v9 += 2;
      }
      while (v9 != v10);
    }
    return v5;
  }
  v12 = (*(uint64_t (**)(_QWORD, llvm::Value *, llvm::Type *))(**((_QWORD **)this + 9) + 128))(*((_QWORD *)this + 9), a2, a3);
  v5 = (llvm::Value *)v12;
  if (*(unsigned __int8 *)(v12 + 16) <= 0x1Bu)
    v13 = 0;
  else
    v13 = (unsigned __int8 **)v12;
  if (!v13)
    return v5;
  (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                          + 16))(*((_QWORD *)this + 10), v13, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
  v14 = *((unsigned int *)this + 2);
  if (!(_DWORD)v14)
    return v5;
  v15 = *(_QWORD **)this;
  v16 = *(_QWORD *)this + 16 * v14;
  do
  {
    llvm::Instruction::setMetadata(v13, *(_DWORD *)v15, (llvm::MDNode *)v15[1]);
    v15 += 2;
  }
  while (v15 != (_QWORD *)v16);
  return (llvm::Value *)v13;
}

void UpgradeX86ALIGNIntrinsics(uint64_t a1, Type *a2, Type *a3, uint64_t a4, Value *a5, unsigned __int8 *a6, int a7)
{
  char v7;
  Type *v11;
  _QWORD *v13;
  unsigned int v14;
  llvm::Constant *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  Type *v19;
  int32x2_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t *v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t *v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  unsigned __int8 **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 **X86MaskVec;
  const char *v48;
  __int16 v49;
  _BYTE v50[32];
  __int16 v51;
  _BYTE v52[32];
  _BYTE v53[232];

  v7 = a7;
  v11 = a2;
  *(_QWORD *)&v53[224] = *MEMORY[0x1E0C80C00];
  v13 = (_QWORD *)(a4 + 24);
  if (*(_DWORD *)(a4 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v14 = *(_DWORD *)v13;
  v15 = *(llvm::Constant **)a2;
  v16 = *(unsigned int *)(*(_QWORD *)a2 + 32);
  v17 = v16 - 1;
  if (!a7)
    v17 = -1;
  v18 = v17 & v14;
  if ((v17 & v14) < 0x20)
  {
    if (v18 >= 0x11)
    {
      v18 -= 16;
      llvm::Constant::getNullValue(v15, a2);
      a3 = v11;
      v11 = v19;
    }
    if ((_DWORD)v16)
    {
      v20 = 0;
      if ((v7 & 1) != 0)
      {
        v21 = vdupq_n_s32(v18);
        v22 = vaddq_s32(v21, (int32x4_t)xmmword_181269A70);
        v23 = vaddq_s32(v21, (int32x4_t)xmmword_181269A80);
        v24 = vaddq_s32(v21, (int32x4_t)xmmword_181269A90);
        v25 = (int32x4_t *)&v53[4];
        do
        {
          v25[-3].i32[3] = v18 + v20.i32[0];
          v26 = vdupq_n_s32(v20.u32[0]);
          v25[-2] = vaddq_s32(v22, v26);
          v25[-1] = vaddq_s32(v23, v26);
          *v25 = vaddq_s32(v24, v26);
          *(int32x2_t *)v25[1].i8 = vadd_s32(vdup_lane_s32(vadd_s32(v20, (int32x2_t)(v18 | 0xA00000000)), 0), (int32x2_t)0xE0000000DLL);
          v25[1].i32[2] = v18 + v20.i32[0] + 15;
          *(_QWORD *)&v20 += 16;
          v25 += 4;
        }
        while (*(_QWORD *)&v20 < v16);
      }
      else
      {
        v27 = vdupq_n_s32(v18);
        v28.i32[0] = v18;
        v28.i32[1] = v18 + 1;
        v28.u64[1] = (unint64_t)vadd_s32(*(int32x2_t *)v27.i8, (int32x2_t)0x300000002);
        v29.i64[0] = 0x1000000010;
        v29.i64[1] = 0x1000000010;
        v30 = (int8x16_t)vdupq_n_s32((int)v16 - 16);
        v31 = (int32x4_t)vbicq_s8(v30, (int8x16_t)vcgtq_u32(v29, (uint32x4_t)v28));
        v32 = vaddq_s32(v27, (int32x4_t)xmmword_181267B90);
        v33 = (int32x4_t)vbicq_s8(v30, (int8x16_t)vcgtq_u32(v29, (uint32x4_t)v32));
        v34 = vaddq_s32(v27, (int32x4_t)xmmword_181267B80);
        v35 = (int32x4_t)vbicq_s8(v30, (int8x16_t)vcgtq_u32(v29, (uint32x4_t)v34));
        v36 = vaddq_s32(v27, (int32x4_t)xmmword_181267B70);
        v37 = (int32x4_t)vbicq_s8(v30, (int8x16_t)vcgtq_u32(v29, (uint32x4_t)v36));
        v38 = (int32x4_t *)v53;
        v39 = vaddq_s32(v32, v33);
        v40 = vaddq_s32(v34, v35);
        v41 = vaddq_s32(v36, v37);
        do
        {
          v42 = vdupq_n_s32(v20.u32[0]);
          v38[-2] = vaddq_s32(vaddq_s32(v28, v42), v31);
          v38[-1] = vaddq_s32(v39, v42);
          *v38 = vaddq_s32(v40, v42);
          v38[1] = vaddq_s32(v41, v42);
          v38 += 4;
          *(_QWORD *)&v20 += 16;
        }
        while (*(_QWORD *)&v20 < v16);
      }
    }
    else
    {
      v16 = 0;
    }
    v48 = "palignr";
    v49 = 259;
    v43 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, Type *, Type *, _BYTE *, unint64_t))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72), a3, v11, v52, v16);
    if (!v43)
    {
      v43 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x70, 2u);
      v51 = 257;
      llvm::ShuffleVectorInst::ShuffleVectorInst(v43, a3, v11, v52, v16, v50, 0);
      (*(void (**)(_QWORD, unsigned __int8 **, const char **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v43, &v48, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v44 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v44)
      {
        v45 = *(_QWORD *)a1;
        v46 = *(_QWORD *)a1 + 16 * v44;
        do
        {
          llvm::Instruction::setMetadata(v43, *(_DWORD *)v45, *(llvm::MDNode **)(v45 + 8));
          v45 += 16;
        }
        while (v45 != v46);
      }
    }
    if (!a6 || a6[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a6))
    {
      X86MaskVec = getX86MaskVec((uint64_t *)a1, (llvm::LLVMContext *)a6, *((_DWORD *)*v43 + 8));
      v51 = 257;
      llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a1, (Value *)X86MaskVec, (llvm::Type **)v43, a5, (const llvm::Twine *)v50, 0);
    }
  }
  else
  {
    llvm::Constant::getNullValue(v15, a2);
  }
}

unsigned __int8 **UpgradeX86PSLLDQIntrinsics(uint64_t *a1, llvm::LLVMContext *a2, unsigned int a3)
{
  unsigned __int8 *v6;
  llvm::Type *v7;
  llvm::FixedVectorType *Int8Ty;
  llvm::Constant *v9;
  Type *v10;
  double v11;
  llvm::Constant *v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  unsigned int v20;
  int32x4_t v21;
  int32x4_t v22;
  uint32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t *v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  unsigned __int8 **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 **v41;
  unsigned __int8 **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47[32];
  __int16 v48;
  _QWORD v49[4];
  __int16 v50;
  _BYTE v51[32];
  __int16 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 **)a2;
  v7 = (llvm::Type *)(8 * *(_DWORD *)(*(_QWORD *)a2 + 32));
  Int8Ty = (llvm::FixedVectorType *)llvm::Type::getInt8Ty((llvm::Type *)a1[8], a2);
  v11 = llvm::FixedVectorType::get(Int8Ty, v7);
  v12 = v9;
  v49[0] = "cast";
  v50 = 259;
  if (*(llvm::Constant **)a2 == v9)
  {
    v13 = (unsigned __int8 **)a2;
  }
  else
  {
    v13 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t, llvm::LLVMContext *, llvm::Constant *, double))(*(_QWORD *)a1[9] + 120))(a1[9], 49, a2, v9, v11);
    if (!v13)
    {
      v52 = 257;
      llvm::CastInst::Create(49);
      v13 = v14;
      (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v14, v49, a1[6], a1[7]);
      v15 = *((unsigned int *)a1 + 2);
      if ((_DWORD)v15)
      {
        v16 = *a1;
        v17 = *a1 + 16 * v15;
        do
        {
          llvm::Instruction::setMetadata(v13, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
          v16 += 16;
        }
        while (v16 != v17);
      }
    }
  }
  llvm::Constant::getNullValue(v12, v10);
  v19 = v18;
  if (a3 <= 0xF)
  {
    if ((_DWORD)v7)
    {
      v20 = 0;
      v21 = vdupq_n_s32(v7 - a3);
      v22.i32[0] = (_DWORD)v7 - a3;
      v22.i32[1] = (_DWORD)v7 - a3 + 1;
      v22.u64[1] = (unint64_t)vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x300000002);
      v23 = (uint32x4_t)vdupq_n_s32(v7);
      v24 = (int8x16_t)vdupq_n_s32(16 - (int)v7);
      v25 = (int32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_u32(v23, (uint32x4_t)v22));
      v26 = vaddq_s32(v21, (int32x4_t)xmmword_181267B90);
      v27 = (int32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_u32(v23, (uint32x4_t)v26));
      v28 = vaddq_s32(v21, (int32x4_t)xmmword_181267B80);
      v29 = (int32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_u32(v23, (uint32x4_t)v28));
      v30 = vaddq_s32(v21, (int32x4_t)xmmword_181267B70);
      v31 = (int32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_u32(v23, (uint32x4_t)v30));
      v32 = (int32x4_t *)&v52;
      v33 = vaddq_s32(v26, v27);
      v34 = vaddq_s32(v28, v29);
      v35 = vaddq_s32(v30, v31);
      do
      {
        v36 = vdupq_n_s32(v20);
        v32[-2] = vaddq_s32(vaddq_s32(v22, v36), v25);
        v32[-1] = vaddq_s32(v33, v36);
        *v32 = vaddq_s32(v34, v36);
        v32[1] = vaddq_s32(v35, v36);
        v32 += 4;
        v20 += 16;
      }
      while ((_DWORD)v7 != v20);
    }
    v48 = 257;
    v37 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, unsigned __int8 **, unsigned __int8 **, _BYTE *, llvm::Type *))(*(_QWORD *)a1[9] + 112))(a1[9], v18, v13, v51, v7);
    if (!v37)
    {
      v37 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x70, 2u);
      v50 = 257;
      llvm::ShuffleVectorInst::ShuffleVectorInst(v37, v19, v13, v51, v7, v49, 0);
      (*(void (**)(uint64_t, unsigned __int8 **, char *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v37, v47, a1[6], a1[7]);
      v38 = *((unsigned int *)a1 + 2);
      if ((_DWORD)v38)
      {
        v39 = *a1;
        v40 = *a1 + 16 * v38;
        do
        {
          llvm::Instruction::setMetadata(v37, *(_DWORD *)v39, *(llvm::MDNode **)(v39 + 8));
          v39 += 16;
        }
        while (v39 != v40);
      }
    }
    v19 = v37;
  }
  v49[0] = "cast";
  v50 = 259;
  if (*v19 == v6)
    return v19;
  v41 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, unsigned __int8 *))(*(_QWORD *)a1[9] + 120))(a1[9], 49, v19, v6);
  if (!v41)
  {
    v52 = 257;
    llvm::CastInst::Create(49);
    v41 = v42;
    (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v42, v49, a1[6], a1[7]);
    v43 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v43)
    {
      v44 = *a1;
      v45 = v44 + 16 * v43;
      do
      {
        llvm::Instruction::setMetadata(v41, *(_DWORD *)v44, *(llvm::MDNode **)(v44 + 8));
        v44 += 16;
      }
      while (v44 != v45);
    }
  }
  return v41;
}

unsigned __int8 **UpgradeX86PSRLDQIntrinsics(uint64_t *a1, llvm::LLVMContext *a2, unsigned int a3)
{
  unsigned __int8 *v6;
  llvm::Type *v7;
  llvm::FixedVectorType *Int8Ty;
  llvm::Constant *v9;
  Type *v10;
  double v11;
  llvm::Constant *v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  unsigned int v20;
  int32x4_t v21;
  int32x4_t v22;
  uint32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int v32;
  int32x4_t *v33;
  int v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x2_t v38;
  int v39;
  int32x4_t v40;
  unsigned __int8 **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 **v45;
  unsigned __int8 **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v51[32];
  __int16 v52;
  _QWORD v53[4];
  __int16 v54;
  _BYTE v55[32];
  __int16 v56;
  _BYTE v57[228];

  *(_QWORD *)&v57[220] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 **)a2;
  v7 = (llvm::Type *)(8 * *(_DWORD *)(*(_QWORD *)a2 + 32));
  Int8Ty = (llvm::FixedVectorType *)llvm::Type::getInt8Ty((llvm::Type *)a1[8], a2);
  v11 = llvm::FixedVectorType::get(Int8Ty, v7);
  v12 = v9;
  v53[0] = "cast";
  v54 = 259;
  if (*(llvm::Constant **)a2 == v9)
  {
    v13 = (unsigned __int8 **)a2;
  }
  else
  {
    v13 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t, llvm::LLVMContext *, llvm::Constant *, double))(*(_QWORD *)a1[9] + 120))(a1[9], 49, a2, v9, v11);
    if (!v13)
    {
      v56 = 257;
      llvm::CastInst::Create(49);
      v13 = v14;
      (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v14, v53, a1[6], a1[7]);
      v15 = *((unsigned int *)a1 + 2);
      if ((_DWORD)v15)
      {
        v16 = *a1;
        v17 = *a1 + 16 * v15;
        do
        {
          llvm::Instruction::setMetadata(v13, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
          v16 += 16;
        }
        while (v16 != v17);
      }
    }
  }
  llvm::Constant::getNullValue(v12, v10);
  v19 = v18;
  if (a3 <= 0xF)
  {
    if ((_DWORD)v7)
    {
      v20 = 0;
      v21 = vdupq_n_s32(a3);
      v22 = vaddq_s32(v21, (int32x4_t)xmmword_181269A70);
      v23.i64[0] = 0xF0000000FLL;
      v23.i64[1] = 0xF0000000FLL;
      v24 = (int8x16_t)vdupq_n_s32((int)v7 - 16);
      v25 = (int32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_u32((uint32x4_t)v22, v23));
      v26 = vaddq_s32(v21, (int32x4_t)xmmword_181269A80);
      v27 = (int32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_u32((uint32x4_t)v26, v23));
      v28 = vaddq_s32(v21, (int32x4_t)xmmword_181269A90);
      v29 = (int32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_u32((uint32x4_t)v28, v23));
      v30 = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0xE0000000DLL);
      v31 = (int32x2_t)vand_s8(*(int8x8_t *)v24.i8, (int8x8_t)vcgt_u32((uint32x2_t)v30, (uint32x2_t)0xF0000000FLL));
      if (a3 != 0 && a3 < 0xFFFFFFF1)
        v32 = (_DWORD)v7 - 16;
      else
        v32 = 0;
      v33 = (int32x4_t *)v57;
      v34 = v32 + 15;
      v35 = vaddq_s32(v22, v25);
      v36 = vaddq_s32(v26, v27);
      v37 = vaddq_s32(v28, v29);
      v38 = vadd_s32(v30, v31);
      v39 = (int)v7;
      do
      {
        v33[-3].i32[3] = a3;
        v40 = vdupq_n_s32(v20);
        v33[-2] = vaddq_s32(v35, v40);
        v33[-1] = vaddq_s32(v36, v40);
        *v33 = vaddq_s32(v37, v40);
        *(int32x2_t *)v33[1].i8 = vadd_s32(v38, *(int32x2_t *)v40.i8);
        v33[1].i32[2] = v34 + a3;
        v33 += 4;
        a3 += 16;
        v20 += 16;
        v39 -= 16;
      }
      while (v39);
    }
    v52 = 257;
    v41 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, unsigned __int8 **, unsigned __int8 **, _BYTE *, llvm::Type *))(*(_QWORD *)a1[9] + 112))(a1[9], v13, v18, v55, v7);
    if (!v41)
    {
      v41 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x70, 2u);
      v54 = 257;
      llvm::ShuffleVectorInst::ShuffleVectorInst(v41, v13, v19, v55, v7, v53, 0);
      (*(void (**)(uint64_t, unsigned __int8 **, char *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v41, v51, a1[6], a1[7]);
      v42 = *((unsigned int *)a1 + 2);
      if ((_DWORD)v42)
      {
        v43 = *a1;
        v44 = *a1 + 16 * v42;
        do
        {
          llvm::Instruction::setMetadata(v41, *(_DWORD *)v43, *(llvm::MDNode **)(v43 + 8));
          v43 += 16;
        }
        while (v43 != v44);
      }
    }
    v19 = v41;
  }
  v53[0] = "cast";
  v54 = 259;
  if (*v19 == v6)
    return v19;
  v45 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, unsigned __int8 *))(*(_QWORD *)a1[9] + 120))(a1[9], 49, v19, v6);
  if (!v45)
  {
    v56 = 257;
    llvm::CastInst::Create(49);
    v45 = v46;
    (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v46, v53, a1[6], a1[7]);
    v47 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v47)
    {
      v48 = *a1;
      v49 = v48 + 16 * v47;
      do
      {
        llvm::Instruction::setMetadata(v45, *(_DWORD *)v48, *(llvm::MDNode **)(v48 + 8));
        v48 += 16;
      }
      while (v48 != v49);
    }
  }
  return v45;
}

_QWORD *llvm::SmallVector<int,16u>::SmallVector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = a1 + 2;
  a1[1] = 0x1000000000;
  if (a2)
  {
    if (a2 < 0x11)
    {
      v4 = 0;
      v5 = a2;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, a2, 4);
      v4 = *((unsigned int *)a1 + 2);
      v5 = a2 - v4;
      if (a2 == v4)
        goto LABEL_7;
    }
    bzero((void *)(*a1 + 4 * v4), 4 * v5);
LABEL_7:
    *((_DWORD *)a1 + 2) = a2;
  }
  return a1;
}

_QWORD *llvm::SmallVector<int,64u>::SmallVector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = a1 + 2;
  a1[1] = 0x4000000000;
  if (a2)
  {
    if (a2 < 0x41)
    {
      v4 = 0;
      v5 = a2;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, a2, 4);
      v4 = *((unsigned int *)a1 + 2);
      v5 = a2 - v4;
      if (a2 == v4)
        goto LABEL_7;
    }
    bzero((void *)(*a1 + 4 * v4), 4 * v5);
LABEL_7:
    *((_DWORD *)a1 + 2) = a2;
  }
  return a1;
}

double llvm::VectorType::getInteger(llvm::Type **this, llvm::VectorType *a2)
{
  const char *v3;
  llvm::LLVMContext *v4;
  llvm::ScalableVectorType *v5;
  _QWORD v7[2];

  v7[0] = llvm::Type::getPrimitiveSizeInBits(this[3]);
  v7[1] = v3;
  v4 = (llvm::LLVMContext *)llvm::TypeSize::operator unsigned long long(v7, v3);
  v5 = (llvm::ScalableVectorType *)llvm::IntegerType::get(*this, v4);
  return llvm::VectorType::get(v5, (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_BYTE *)this + 8) == 19) << 32)));
}

unsigned __int8 **llvm::IRBuilderBase::CreateAdd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  unsigned __int8 **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v17;
  __int16 v18;

  v12 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9), 13, a2, a3);
  if (!v12)
  {
    v18 = 257;
    v12 = (unsigned __int8 **)llvm::BinaryOperator::Create(13, (uint64_t)a2, (uint64_t)a3, &v17, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v12, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v13 = *((unsigned int *)this + 2);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD **)this;
      v15 = &v14[2 * v13];
      do
      {
        llvm::Instruction::setMetadata(v12, *(_DWORD *)v14, (llvm::MDNode *)v14[1]);
        v14 += 2;
      }
      while (v14 != v15);
    }
    if (a5)
      llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v12, 1);
    if (a6)
      llvm::Instruction::setHasNoSignedWrap((uint64_t)v12, 1);
  }
  return v12;
}

unsigned __int8 **llvm::IRBuilderBase::CreateSub(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  unsigned __int8 **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v17;
  __int16 v18;

  v12 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9), 15, a2, a3);
  if (!v12)
  {
    v18 = 257;
    v12 = (unsigned __int8 **)llvm::BinaryOperator::Create(15, (uint64_t)a2, (uint64_t)a3, &v17, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v12, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v13 = *((unsigned int *)this + 2);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD **)this;
      v15 = &v14[2 * v13];
      do
      {
        llvm::Instruction::setMetadata(v12, *(_DWORD *)v14, (llvm::MDNode *)v14[1]);
        v14 += 2;
      }
      while (v14 != v15);
    }
    if (a5)
      llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v12, 1);
    if (a6)
      llvm::Instruction::setHasNoSignedWrap((uint64_t)v12, 1);
  }
  return v12;
}

unsigned __int8 **llvm::IRBuilderBase::CreateMul(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  unsigned __int8 **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v17;
  __int16 v18;

  v12 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9), 17, a2, a3);
  if (!v12)
  {
    v18 = 257;
    v12 = (unsigned __int8 **)llvm::BinaryOperator::Create(17, (uint64_t)a2, (uint64_t)a3, &v17, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v12, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v13 = *((unsigned int *)this + 2);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD **)this;
      v15 = &v14[2 * v13];
      do
      {
        llvm::Instruction::setMetadata(v12, *(_DWORD *)v14, (llvm::MDNode *)v14[1]);
        v14 += 2;
      }
      while (v14 != v15);
    }
    if (a5)
      llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v12, 1);
    if (a6)
      llvm::Instruction::setHasNoSignedWrap((uint64_t)v12, 1);
  }
  return v12;
}

llvm::Instruction *UpgradeX86MaskedShift(uint64_t *a1, llvm::BasicBlock **this, int a3)
{
  uint64_t *Module;
  uint64_t Declaration;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Type **v12;
  llvm::BasicBlock **v13;
  unsigned __int8 *v14;
  Value *v15;
  BOOL v16;
  unsigned __int8 **X86MaskVec;
  _BYTE v19[32];
  __int16 v20;
  uint64_t v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  Module = (uint64_t *)llvm::Instruction::getModule(this);
  Declaration = llvm::Intrinsic::getDeclaration(Module, a3, 0, 0);
  if (Declaration)
    v8 = *(_QWORD *)(Declaration + 24);
  else
    v8 = 0;
  v9 = (uint64_t *)&this[-4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)];
  v10 = *v9;
  v11 = v9[4];
  v21[0] = v10;
  v21[1] = v11;
  v20 = 257;
  v12 = (llvm::Type **)llvm::IRBuilderBase::CreateCall(a1, v8, Declaration, v21, 2, (uint64_t)v19, 0);
  v13 = &this[-4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)];
  v14 = (unsigned __int8 *)v13[12];
  v15 = (Value *)v13[8];
  if (v14)
    v16 = v14[16] > 0x14u;
  else
    v16 = 1;
  if (v16 || !llvm::Constant::isAllOnesValue((llvm::Constant *)v14))
  {
    X86MaskVec = getX86MaskVec(a1, (llvm::LLVMContext *)v14, *((_DWORD *)*v12 + 8));
    v20 = 257;
    return llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a1, (Value *)X86MaskVec, v12, v15, (const llvm::Twine *)v19, 0);
  }
  return (llvm::Instruction *)v12;
}

llvm::InsertElementInst *upgradeMaskedMove(llvm::IRBuilderBase *a1, uint64_t a2)
{
  uint64_t v3;
  llvm::Value *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::ConstantInt ***v7;
  Type *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 **ICmp;
  llvm::Type **Element;
  Value *v13;
  llvm::Instruction *Select;
  _BYTE v16[32];
  __int16 v17;
  void *__p;
  unsigned int v19;

  v3 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v4 = *(llvm::Value **)v3;
  v5 = *(llvm::Value **)(v3 + 32);
  v6 = *(llvm::Value **)(v3 + 64);
  v7 = *(llvm::ConstantInt ****)(v3 + 96);
  v19 = 8;
  __p = (void *)1;
  v17 = 257;
  v9 = llvm::IRBuilderBase::CreateAnd(a1, v7, (const llvm::APInt *)&__p, (const llvm::Twine *)v16);
  if (v19 >= 0x41 && __p)
    operator delete[](__p);
  v17 = 257;
  llvm::Constant::getNullValue((llvm::Constant *)*v9, v8);
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)a1, 33, (llvm::Type ***)v9, v10, (uint64_t)v16);
  v17 = 257;
  Element = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::Type **)a1, v5, 0, (const llvm::Twine *)v16);
  v17 = 257;
  v13 = (Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::Type **)a1, v6, 0, (const llvm::Twine *)v16);
  v17 = 257;
  Select = llvm::IRBuilderBase::CreateSelect(a1, (Value *)ICmp, Element, v13, (const llvm::Twine *)v16, 0);
  v17 = 257;
  return llvm::IRBuilderBase::CreateInsertElement((llvm::Type **)a1, v4, Select, 0, (const llvm::Twine *)v16);
}

unsigned __int8 **UpgradeMaskToInt(uint64_t a1, _DWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 **result;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  __int16 v12;

  v3 = *(unsigned __int8 **)a2;
  result = getX86MaskVec((uint64_t *)a1, *(llvm::LLVMContext **)&a2[-8 * (a2[5] & 0x7FFFFFF)], *(_DWORD *)(*(_QWORD *)a2 + 32));
  v10 = "vpmovm2";
  v11 = 259;
  if (*result != v3)
  {
    v5 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, unsigned __int8 *))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72), 40, result, v3);
    if (!v5)
    {
      v12 = 257;
      llvm::CastInst::Create(40);
      v5 = v6;
      (*(void (**)(_QWORD, unsigned __int8 **, const char **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v6, &v10, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)a1;
        v9 = v8 + 16 * v7;
        do
        {
          llvm::Instruction::setMetadata(v5, *(_DWORD *)v8, *(llvm::MDNode **)(v8 + 8));
          v8 += 16;
        }
        while (v8 != v9);
      }
    }
    return v5;
  }
  return result;
}

unsigned __int8 **llvm::IRBuilderBase::CreateFNeg(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3, llvm::MDNode *a4)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v15;
  __int16 v16;

  v8 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, _QWORD))(**((_QWORD **)this + 9)
                                                                                             + 48))(*((_QWORD *)this + 9), 12, a2, *((unsigned int *)this + 24));
  if (!v8)
  {
    v16 = 257;
    v9 = (unsigned __int8 **)llvm::UnaryOperator::Create(12, (uint64_t)a2, &v15, 0);
    v8 = v9;
    v10 = *((_DWORD *)this + 24);
    if (a4 || (a4 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Instruction::setMetadata(v9, 3, a4);
    llvm::Instruction::setFastMathFlags((uint64_t)v8, v10);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v8, a3, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v11 = *((unsigned int *)this + 2);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD **)this;
      v13 = &v12[2 * v11];
      do
      {
        llvm::Instruction::setMetadata(v8, *(_DWORD *)v12, (llvm::MDNode *)v12[1]);
        v12 += 2;
      }
      while (v12 != v13);
    }
  }
  return v8;
}

llvm::Instruction *EmitX86ScalarSelect(uint64_t a1, unsigned __int8 *a2, llvm::Type **a3, Value *a4)
{
  llvm::FixedVectorType *Int1Ty;
  uint64_t v9;
  double v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t v15;
  Value *Element;
  _WORD v18[20];
  _BYTE v19[32];
  __int16 v20;

  if (!a2 || a2[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a2))
  {
    Int1Ty = (llvm::FixedVectorType *)llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 64), (llvm::LLVMContext *)a2);
    v10 = llvm::FixedVectorType::get(Int1Ty, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8));
    v18[16] = 257;
    if (*(_QWORD *)a2 == v9)
    {
      v11 = (unsigned __int8 **)a2;
    }
    else
    {
      v11 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 *, uint64_t, double))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72), 49, a2, v9, v10);
      if (!v11)
      {
        v20 = 257;
        llvm::CastInst::Create(49);
        v11 = v12;
        (*(void (**)(_QWORD, unsigned __int8 **, _WORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v12, v18, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
        v13 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v13)
        {
          v14 = *(llvm::Type **)a1;
          v15 = *(_QWORD *)a1 + 16 * v13;
          do
          {
            llvm::Instruction::setMetadata(v11, *(_DWORD *)v14, *((llvm::MDNode **)v14 + 1));
            v14 = (llvm::Type *)((char *)v14 + 16);
          }
          while (v14 != (llvm::Type *)v15);
        }
      }
    }
    v20 = 257;
    Element = (Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::Type **)a1, (llvm::Value *)v11, 0, (const llvm::Twine *)v19);
    v20 = 257;
    return llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a1, Element, a3, a4, (const llvm::Twine *)v19, 0);
  }
  return (llvm::Instruction *)a3;
}

_QWORD *llvm::SmallVector<int,32u>::SmallVector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = a1 + 2;
  a1[1] = 0x2000000000;
  if (a2)
  {
    if (a2 < 0x21)
    {
      v4 = 0;
      v5 = a2;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, a2, 4);
      v4 = *((unsigned int *)a1 + 2);
      v5 = a2 - v4;
      if (a2 == v4)
        goto LABEL_7;
    }
    bzero((void *)(*a1 + 4 * v4), 4 * v5);
LABEL_7:
    *((_DWORD *)a1 + 2) = a2;
  }
  return a1;
}

llvm::Instruction *UpgradeX86VPERMT2Intrinsics(uint64_t a1, uint64_t a2, int a3, char a4)
{
  llvm::Type *v8;
  const char *v9;
  int v10;
  int ScalarSizeInBits;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *Module;
  uint64_t Declaration;
  uint64_t v39;
  llvm::Type *v40;
  llvm::Type **v41;
  unsigned __int8 **v42;
  unsigned __int8 **v43;
  unsigned __int8 **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  BOOL v49;
  unsigned __int8 **X86MaskVec;
  _WORD v52[20];
  _QWORD v53[4];
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v8 = *(llvm::Type **)a2;
  v53[0] = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
  v53[1] = v9;
  v10 = llvm::TypeSize::operator unsigned long long(v53, v9);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v8);
  v12 = *((_DWORD *)v8 + 2);
  if ((v12 & 0xFE) == 0x12)
    v12 = *(_DWORD *)(**((_QWORD **)v8 + 2) + 8);
  if (v12 < 6u && ((0x2Fu >> v12) & 1) != 0)
  {
    v13 = 1;
    v17 = v10 == 128 && ScalarSizeInBits == 32;
    v15 = !v17;
    v16 = 0;
    if (!v17)
      goto LABEL_23;
  }
  else
  {
    v13 = (v12 & 0xFD) == 4;
    v14 = v10 == 128 && ScalarSizeInBits == 32;
    v15 = !v14;
    v16 = !v13;
    if (!v14)
      goto LABEL_23;
  }
  if (!v16)
  {
    v18 = 12782;
    goto LABEL_107;
  }
LABEL_23:
  if ((v13 | v15) == 1)
  {
    v19 = v10 == 128 && ScalarSizeInBits == 64;
    v20 = !v19;
    if (v19)
      v21 = v16;
    else
      v21 = 1;
    if (v21 == 1)
    {
      if ((v13 | v20) == 1)
      {
        v22 = v10 == 256 && ScalarSizeInBits == 32;
        v23 = !v22;
        if (v22)
          v24 = v16;
        else
          v24 = 1;
        if (v24 == 1)
        {
          if ((v13 | v23) == 1)
          {
            v25 = v10 == 256 && ScalarSizeInBits == 64;
            v26 = !v25;
            if (v25)
              v27 = v16;
            else
              v27 = 1;
            if (v27 == 1)
            {
              if ((v13 | v26) == 1)
              {
                v28 = v10 == 512 && ScalarSizeInBits == 32;
                v29 = !v28;
                if (v28)
                  v30 = v16;
                else
                  v30 = 1;
                if (v30 == 1)
                {
                  if ((v13 | v29) == 1)
                  {
                    v31 = v10 == 512 && ScalarSizeInBits == 64;
                    v32 = !v31;
                    if (!v31)
                      v16 = 1;
                    if (v16 == 1)
                    {
                      if ((v13 | v32) == 1)
                      {
                        if (v10 == 128 && ScalarSizeInBits == 16)
                        {
                          v18 = 12776;
                        }
                        else if (v10 == 256 && ScalarSizeInBits == 16)
                        {
                          v18 = 12777;
                        }
                        else if (v10 == 512 && ScalarSizeInBits == 16)
                        {
                          v18 = 12778;
                        }
                        else if (v10 == 128 && ScalarSizeInBits == 8)
                        {
                          v18 = 12788;
                        }
                        else if (ScalarSizeInBits == 8 && v10 == 256)
                        {
                          v18 = 12789;
                        }
                        else
                        {
                          v18 = 12790;
                        }
                      }
                      else
                      {
                        v18 = 12787;
                      }
                    }
                    else
                    {
                      v18 = 12781;
                    }
                  }
                  else
                  {
                    v18 = 12775;
                  }
                }
                else
                {
                  v18 = 12784;
                }
              }
              else
              {
                v18 = 12786;
              }
            }
            else
            {
              v18 = 12780;
            }
          }
          else
          {
            v18 = 12774;
          }
        }
        else
        {
          v18 = 12783;
        }
      }
      else
      {
        v18 = 12785;
      }
    }
    else
    {
      v18 = 12779;
    }
  }
  else
  {
    v18 = 12773;
  }
LABEL_107:
  v34 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v35 = *v34;
  v36 = v34[4];
  v55 = *v34;
  v56 = v36;
  v57 = v34[8];
  if ((a4 & 1) == 0)
  {
    v55 = v36;
    v56 = v35;
  }
  Module = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)a2);
  Declaration = llvm::Intrinsic::getDeclaration(Module, v18, 0, 0);
  if (Declaration)
    v39 = *(_QWORD *)(Declaration + 24);
  else
    v39 = 0;
  v54 = 257;
  v41 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v39, Declaration, &v55, 3, (uint64_t)v53, 0);
  if (a3)
  {
    v42 = (unsigned __int8 **)llvm::ConstantAggregateZero::get(v8, v40);
  }
  else
  {
    v43 = *(unsigned __int8 ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v52[16] = 257;
    if (*v43 == (unsigned __int8 *)v8)
    {
      v42 = v43;
    }
    else
    {
      v42 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, llvm::Type *))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72), 49, v43, v8);
      if (!v42)
      {
        v54 = 257;
        llvm::CastInst::Create(49);
        v42 = v44;
        (*(void (**)(_QWORD, unsigned __int8 **, _WORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v44, v52, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
        v45 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v45)
        {
          v46 = *(_QWORD *)a1;
          v47 = *(_QWORD *)a1 + 16 * v45;
          do
          {
            llvm::Instruction::setMetadata(v42, *(_DWORD *)v46, *(llvm::MDNode **)(v46 + 8));
            v46 += 16;
          }
          while (v46 != v47);
        }
      }
    }
  }
  v48 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96);
  if (v48)
    v49 = v48[16] > 0x14u;
  else
    v49 = 1;
  if (v49 || !llvm::Constant::isAllOnesValue((llvm::Constant *)v48))
  {
    X86MaskVec = getX86MaskVec((uint64_t *)a1, (llvm::LLVMContext *)v48, *((_DWORD *)*v41 + 8));
    v54 = 257;
    return llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a1, (Value *)X86MaskVec, v41, (Value *)v42, (const llvm::Twine *)v53, 0);
  }
  return (llvm::Instruction *)v41;
}

unsigned __int8 **llvm::IRBuilderBase::CreateExtractValue(uint64_t *a1, uint64_t *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;

  v10 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 80))(a1[9]);
  if (!v10)
  {
    v16 = 257;
    v10 = (unsigned __int8 **)llvm::ExtractValueInst::Create(a2, a3, a4, &v15, 0);
    (*(void (**)(uint64_t, unsigned __int8 **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, a5, a1[6], a1[7]);
    v11 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v11)
    {
      v12 = *a1;
      v13 = v12 + 16 * v11;
      do
      {
        llvm::Instruction::setMetadata(v10, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
        v12 += 16;
      }
      while (v12 != v13);
    }
  }
  return v10;
}

uint64_t upgradeAVX512MaskToSelect(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, llvm::Type ***a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  int v12;
  llvm::Type *v13;
  int ScalarSizeInBits;
  int v15;
  char v16;
  int v19;
  char v23;
  BOOL v24;
  int v25;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  int v41;
  _BOOL4 v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  BOOL v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const double *v73;
  unsigned __int128 *v74;
  uint64_t v75;
  const double *v76;
  unsigned __int128 v77;
  unsigned __int128 v78;
  uint64_t v79;
  uint64_t *Module;
  uint64_t Declaration;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned __int8 *v86;
  llvm::Type **Select;
  Value *v88;
  BOOL v89;
  unsigned __int8 **X86MaskVec;
  _BYTE v91[32];
  __int16 v92;
  void *PrimitiveSizeInBits;
  uint64_t v94;
  _QWORD v95[5];

  v95[4] = *MEMORY[0x1E0C80C00];
  v8 = 12;
  if (a2 < 0xC)
    v8 = a2;
  v9 = a1 + v8;
  v10 = a2 - v8;
  PrimitiveSizeInBits = (void *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a4);
  v94 = (uint64_t)v11;
  v12 = llvm::TypeSize::operator unsigned long long(&PrimitiveSizeInBits, v11);
  v13 = *(llvm::Type **)a4;
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*(llvm::Type **)a4);
  v15 = ScalarSizeInBits;
  if (v10 < 5)
    goto LABEL_4;
  if (*(_DWORD *)v9 == 779641197 && *(_BYTE *)(v9 + 4) == 112)
  {
    if (v12 == 128 && ScalarSizeInBits == 32)
    {
      v19 = 13147;
      goto LABEL_318;
    }
    if (v12 == 128 && ScalarSizeInBits == 64)
    {
      v19 = 13186;
      goto LABEL_318;
    }
    v24 = ScalarSizeInBits == 32 && v12 == 256;
    v25 = 12092;
LABEL_58:
    if (v24)
      v19 = v25 + 1;
    else
      v19 = v25;
    goto LABEL_318;
  }
  if (*(_DWORD *)v9 == 778987885 && *(_BYTE *)(v9 + 4) == 112)
  {
    if (v12 == 128 && ScalarSizeInBits == 32)
    {
      v19 = 13149;
      goto LABEL_318;
    }
    if (v12 == 128 && ScalarSizeInBits == 64)
    {
      v19 = 13189;
      goto LABEL_318;
    }
    v24 = ScalarSizeInBits == 32 && v12 == 256;
    v25 = 12094;
    goto LABEL_58;
  }
  if (v10 < 8)
  {
LABEL_4:
    v16 = 1;
    goto LABEL_5;
  }
  if (*(_QWORD *)v9 == 0x2E622E6675687370)
  {
    if (v12 == 128)
    {
      v19 = 13292;
    }
    else if (v12 == 256)
    {
      v19 = 12170;
    }
    else
    {
      v19 = 12635;
    }
    goto LABEL_318;
  }
  if (v10 >= 0xB && *(_QWORD *)v9 == 0x2E72682E6C756D70 && *(_QWORD *)(v9 + 3) == 0x2E77732E72682E6CLL)
  {
    if (v12 == 128)
    {
      v19 = 13290;
    }
    else if (v12 == 256)
    {
      v19 = 12166;
    }
    else
    {
      v19 = 12628;
    }
    goto LABEL_318;
  }
  if (*(_QWORD *)v9 == 0x2E772E686C756D70)
  {
    if (v12 == 128)
    {
      v19 = 13200;
    }
    else if (v12 == 256)
    {
      v19 = 12167;
    }
    else
    {
      v19 = 12629;
    }
    goto LABEL_318;
  }
  if (v10 < 9)
  {
    v23 = 1;
    goto LABEL_111;
  }
  if (*(_QWORD *)v9 == 0x772E75686C756D70 && *(_BYTE *)(v9 + 8) == 46)
  {
    if (v12 == 128)
    {
      v19 = 13201;
    }
    else if (v12 == 256)
    {
      v19 = 12168;
    }
    else
    {
      v19 = 12630;
    }
    goto LABEL_318;
  }
  if (*(_QWORD *)v9 == 0x642E776464616D70 && *(_BYTE *)(v9 + 8) == 46)
  {
    if (v12 == 128)
    {
      v19 = 13198;
    }
    else if (v12 == 256)
    {
      v19 = 12164;
    }
    else
    {
      v19 = 12627;
    }
    goto LABEL_318;
  }
  if (v10 >= 0xB && *(_QWORD *)v9 == 0x7362756464616D70 && *(_QWORD *)(v9 + 3) == 0x2E772E7362756464)
  {
    if (v12 == 128)
    {
      v19 = 13288;
    }
    else if (v12 == 256)
    {
      v19 = 12163;
    }
    else
    {
      v19 = 12626;
    }
    goto LABEL_318;
  }
  if (*(_QWORD *)v9 == 0x627773736B636170 && *(_BYTE *)(v9 + 8) == 46)
  {
    if (v12 == 128)
    {
      v19 = 13193;
    }
    else if (v12 == 256)
    {
      v19 = 12149;
    }
    else
    {
      v19 = 12609;
    }
    goto LABEL_318;
  }
  if (*(_QWORD *)v9 == 0x776473736B636170 && *(_BYTE *)(v9 + 8) == 46)
  {
    if (v12 == 128)
    {
      v19 = 13192;
    }
    else if (v12 == 256)
    {
      v19 = 12148;
    }
    else
    {
      v19 = 12608;
    }
    goto LABEL_318;
  }
  if (*(_QWORD *)v9 == 0x627773756B636170 && *(_BYTE *)(v9 + 8) == 46)
  {
    if (v12 == 128)
    {
      v19 = 13194;
    }
    else if (v12 == 256)
    {
      v19 = 12151;
    }
    else
    {
      v19 = 12611;
    }
    goto LABEL_318;
  }
  if (*(_QWORD *)v9 == 0x776473756B636170 && *(_BYTE *)(v9 + 8) == 46)
  {
    if (v12 == 128)
    {
      v19 = 13240;
    }
    else if (v12 == 256)
    {
      v19 = 12150;
    }
    else
    {
      v19 = 12610;
    }
    goto LABEL_318;
  }
  if (v10 >= 0xB && *(_QWORD *)v9 == 0x766C696D72657076 && *(_QWORD *)(v9 + 3) == 0x2E7261766C696D72)
  {
    if (v12 == 128 && ScalarSizeInBits == 32)
    {
      v19 = 12107;
      goto LABEL_318;
    }
    if (v12 == 128 && ScalarSizeInBits == 64)
    {
      v19 = 12105;
      goto LABEL_318;
    }
    if (v12 == 256 && ScalarSizeInBits == 32)
    {
      v19 = 12108;
      goto LABEL_318;
    }
    if (v12 == 256 && ScalarSizeInBits == 64)
    {
      v19 = 12106;
      goto LABEL_318;
    }
    v24 = ScalarSizeInBits == 32 && v12 == 512;
    v25 = 12791;
    goto LABEL_58;
  }
  v16 = 0;
  if (v10 != 13)
  {
LABEL_5:
    if (v10 == 12)
    {
      if (*(_QWORD *)v9 == 0x7164326470747663 && *(_DWORD *)(v9 + 8) == 909455918)
      {
        v19 = 12074;
        goto LABEL_318;
      }
      if (*(_QWORD *)v9 == 0x7370326470747663 && *(_DWORD *)(v9 + 8) == 909455918)
      {
        v19 = 12073;
        goto LABEL_318;
      }
    }
    goto LABEL_108;
  }
  if (!memcmp((const void *)v9, "cvttpd2dq.256", 0xDuLL))
  {
    v19 = 12076;
    goto LABEL_318;
  }
  if (*(_QWORD *)v9 == 0x6432737074747663 && *(_QWORD *)(v9 + 5) == 0x3832312E71643273)
  {
    v19 = 13181;
    goto LABEL_318;
  }
  if (*(_QWORD *)v9 == 0x6432737074747663 && *(_QWORD *)(v9 + 5) == 0x3635322E71643273)
  {
    v19 = 12077;
    goto LABEL_318;
  }
LABEL_108:
  if ((v16 & 1) == 0)
  {
    v23 = 0;
LABEL_111:
    if (*(_QWORD *)v9 != 0x2E7261766D726570)
      goto LABEL_112;
    v41 = *((_DWORD *)v13 + 2);
    if ((v41 & 0xFE) == 0x12)
      v41 = *(_DWORD *)(**((_QWORD **)v13 + 2) + 8);
    if (v41 < 6u && ((0x2Fu >> v41) & 1) != 0)
    {
      v42 = 1;
      v48 = v12 == 256 && v15 == 32;
      v44 = !v48;
      v45 = 0;
      if (!v48)
      {
LABEL_175:
        if ((v42 | v44) == 1)
        {
          v49 = v12 == 256 && v15 == 64;
          v50 = !v49;
          if (v49)
            v51 = v45;
          else
            v51 = 1;
          if (v51 == 1)
          {
            if ((v42 | v50) == 1)
            {
              v52 = v12 == 512 && v15 == 32;
              v53 = !v52;
              if (v52)
                v54 = v45;
              else
                v54 = 1;
              if (v54 == 1)
              {
                if ((v42 | v53) == 1)
                {
                  v55 = v12 == 512 && v15 == 64;
                  v56 = !v55;
                  if (!v55)
                    v45 = 1;
                  if (v45 == 1)
                  {
                    if ((v42 | v56) == 1)
                    {
                      if (v12 == 128 && v15 == 16)
                      {
                        v19 = 12618;
                      }
                      else if (v12 == 256 && v15 == 16)
                      {
                        v19 = 12619;
                      }
                      else if (v12 == 512 && v15 == 16)
                      {
                        v19 = 12620;
                      }
                      else if (v12 == 128 && v15 == 8)
                      {
                        v19 = 12621;
                      }
                      else if (v15 == 8 && v12 == 256)
                      {
                        v19 = 12622;
                      }
                      else
                      {
                        v19 = 12623;
                      }
                    }
                    else
                    {
                      v19 = 12617;
                    }
                  }
                  else
                  {
                    v19 = 12615;
                  }
                }
                else
                {
                  v19 = 12625;
                }
              }
              else
              {
                v19 = 12624;
              }
            }
            else
            {
              v19 = 12616;
            }
          }
          else
          {
            v19 = 12614;
          }
        }
        else
        {
          v19 = 12155;
        }
        goto LABEL_318;
      }
    }
    else
    {
      v42 = (v41 & 0xFD) == 4;
      v43 = v12 == 256 && v15 == 32;
      v44 = !v43;
      v45 = !v42;
      if (!v43)
        goto LABEL_175;
    }
    if (!v45)
    {
      v19 = 12156;
      goto LABEL_318;
    }
    goto LABEL_175;
  }
  v23 = 1;
LABEL_112:
  if ((v23 & 1) == 0 && (*(_QWORD *)v9 == 0x7762646173706264 ? (v36 = *(_BYTE *)(v9 + 8) == 46) : (v36 = 0), v36))
  {
    if (v12 == 128)
    {
      v19 = 12252;
    }
    else if (v12 == 256)
    {
      v19 = 12253;
    }
    else
    {
      v19 = 12254;
    }
  }
  else if (v10 >= 0xF
         && (*(_QWORD *)v9 == 0x687369746C756D70 ? (v37 = *(_QWORD *)(v9 + 7) == 0x2E62712E74666968) : (v37 = 0), v37))
  {
    if (v12 == 128)
    {
      v19 = 12631;
    }
    else if (v12 == 256)
    {
      v19 = 12632;
    }
    else
    {
      v19 = 12633;
    }
  }
  else if ((v23 & 1) == 0
         && (*(_QWORD *)v9 == 0x7463696C666E6F63 ? (v38 = *(_BYTE *)(v9 + 8) == 46) : (v38 = 0), v38))
  {
    v46 = *(unsigned __int8 *)(v9 + 9);
    if (v46 == 100 && v12 == 128)
    {
      v19 = 12232;
    }
    else if (v46 == 100 && v12 == 256)
    {
      v19 = 12233;
    }
    else if (v46 == 100 && v12 == 512)
    {
      v19 = 12234;
    }
    else if (v46 == 113 && v12 == 128)
    {
      v19 = 12235;
    }
    else if (v12 == 256 && v46 == 113)
    {
      v19 = 12236;
    }
    else
    {
      v19 = 12237;
    }
  }
  else
  {
    if (v10 < 5)
      return 0;
    if (*(_DWORD *)v9 != 1735811440 || *(_BYTE *)(v9 + 4) != 46)
      return 0;
    v47 = *(unsigned __int8 *)(v9 + 5);
    if (v47 == 98 && v12 == 128)
    {
      v19 = 13196;
    }
    else if (v47 == 98 && v12 == 256)
    {
      v19 = 12152;
    }
    else if (v47 == 98 && v12 == 512)
    {
      v19 = 12612;
    }
    else if (v47 == 119 && v12 == 128)
    {
      v19 = 13197;
    }
    else if (v12 == 256 && v47 == 119)
    {
      v19 = 12153;
    }
    else
    {
      v19 = 12613;
    }
  }
LABEL_318:
  v60 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
  v61 = (uint64_t *)(a4 - 32 * v60);
  v62 = llvm::CallBase::arg_end((llvm::CallBase *)a4);
  v63 = (uint64_t *)v62;
  PrimitiveSizeInBits = v95;
  v94 = 0x400000000;
  v64 = v62 - (_QWORD)v61;
  if ((unint64_t)(v62 - (_QWORD)v61) >= 0x81)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&PrimitiveSizeInBits, v95, v64 >> 5, 8);
    v65 = v94;
    v66 = v94;
    if (v61 == v63)
      goto LABEL_330;
LABEL_322:
    v67 = (char *)PrimitiveSizeInBits + 8 * v65;
    v68 = 32 * v60;
    v69 = (unint64_t)&v63[4 * v60 - 4] - a4;
    if (v69 >= 0x3C0)
    {
      v70 = v69 >> 5;
      if ((unint64_t)v67 >= a4 + (v69 & 0xFFFFFFFFFFFFFFE0 | 8) - v68
        || v61 >= (uint64_t *)((char *)PrimitiveSizeInBits + 8 * v65 + 8 * v70 + 8))
      {
        v71 = (v70 + 1) & 3;
        if (!v71)
          v71 = 4;
        v72 = v70 + 1 - v71;
        v67 += v72;
        v61 += 4 * v72;
        v73 = (const double *)(a4 - v68 + 64);
        v74 = (unsigned __int128 *)((char *)PrimitiveSizeInBits + 8 * v65 + 16);
        v75 = ~v70 + v71;
        do
        {
          v76 = v73 - 8;
          v77 = (unsigned __int128)vld4q_f64(v76);
          v78 = (unsigned __int128)vld4q_f64(v73);
          *(v74 - 1) = v77;
          *v74 = v78;
          v73 += 16;
          v74 += 2;
          v75 += 4;
        }
        while (v75);
      }
    }
    do
    {
      v79 = *v61;
      v61 += 4;
      *v67++ = v79;
    }
    while (v61 != v63);
    goto LABEL_330;
  }
  v65 = 0;
  v66 = 0;
  if (v61 != (uint64_t *)v62)
    goto LABEL_322;
LABEL_330:
  LODWORD(v94) = ((unint64_t)v64 >> 5) + v66 - 2;
  Module = (uint64_t *)llvm::Instruction::getModule((llvm::BasicBlock **)a4);
  Declaration = llvm::Intrinsic::getDeclaration(Module, v19, 0, 0);
  if (Declaration)
    v82 = *(_QWORD *)(Declaration + 24);
  else
    v82 = 0;
  v92 = 257;
  *a5 = (llvm::Type **)llvm::IRBuilderBase::CreateCall(a3, v82, Declaration, (uint64_t *)PrimitiveSizeInBits, v94, (uint64_t)v91, 0);
  v83 = llvm::CallBase::arg_end((llvm::CallBase *)a4);
  v84 = a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF);
  v85 = (unint64_t)(v83 - v84) >> 5;
  v86 = *(unsigned __int8 **)(v84 + 32 * (v85 - 1));
  Select = *a5;
  v88 = *(Value **)(v84 + 32 * (v85 - 2));
  if (v86)
    v89 = v86[16] > 0x14u;
  else
    v89 = 1;
  if (v89 || !llvm::Constant::isAllOnesValue((llvm::Constant *)v86))
  {
    X86MaskVec = getX86MaskVec(a3, (llvm::LLVMContext *)v86, *((_DWORD *)*Select + 8));
    v92 = 257;
    Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a3, (Value *)X86MaskVec, Select, v88, (const llvm::Twine *)v91, 0);
  }
  *a5 = Select;
  if (PrimitiveSizeInBits != v95)
    free(PrimitiveSizeInBits);
  return 1;
}

unsigned __int8 **llvm::IRBuilderBase::CreateNeg(llvm::IRBuilderBase *this, llvm::Constant **a2, const llvm::Twine *a3, int a4, int a5)
{
  llvm::Value *v10;

  llvm::Constant::getNullValue(*a2, (Type *)a2);
  return llvm::IRBuilderBase::CreateSub(this, v10, (llvm::Value *)a2, a3, a4, a5);
}

llvm::Instruction *llvm::IRBuilderBase::CreateAtomicRMW(uint64_t *a1, __int16 a2, uint64_t a3, Type **a4, __int16 a5, __int16 a6, char a7)
{
  unint64_t v9;
  uint64_t Module;
  uint64_t v15;
  const char *v16;
  llvm::Instruction *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[4];
  __int16 v23;

  LOBYTE(v9) = a5;
  if ((a5 & 0xFF00) == 0)
  {
    Module = llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(Module + 256), *a4);
    v22[0] = (unint64_t)(v15 + 7) >> 3;
    v22[1] = v16 != 0;
    v9 = 63 - __clz(llvm::TypeSize::operator unsigned long long(v22, v16));
  }
  v17 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x50, 2u);
  llvm::AtomicRMWInst::AtomicRMWInst(v17, a2, a3, (uint64_t)a4, v9, a6, a7, 0);
  v23 = 257;
  (*(void (**)(uint64_t, llvm::Instruction *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v17, v22, a1[6], a1[7]);
  v18 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v18)
  {
    v19 = *a1;
    v20 = v19 + 16 * v18;
    do
    {
      llvm::Instruction::setMetadata((unsigned __int8 **)v17, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
      v19 += 16;
    }
    while (v19 != v20);
  }
  return v17;
}

uint64_t ShouldUpgradeNVPTXBF16Intrinsic(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v10;
  _DWORD *v11;

  if (a2 < 4)
    return 0;
  if (*(_DWORD *)a1 != 779313761)
  {
    if (a2 >= 7)
    {
      if (*(_DWORD *)a1 == 778136934 && *(_DWORD *)(a1 + 3) == 778990126)
      {
        v10 = (_DWORD *)(a1 + 7);
        switch(a2)
        {
          case 0xBuLL:
            if (*v10 != 909207138)
              return 0;
            return 7585;
          case 0xDuLL:
            if (*v10 != 909207138 || *(_WORD *)(a1 + 11) != 12920)
              return 0;
            return 7586;
          case 0xFuLL:
            if (*(_QWORD *)v10 == 0x363166625F7A7466)
              return 7591;
            if (*(_QWORD *)v10 != 0x363166622E746173)
              return 0;
            return 7608;
          case 0x10uLL:
            if (*(_QWORD *)v10 != 0x3166622E756C6572 || *(_BYTE *)(a1 + 15) != 54)
              return 0;
            return 7604;
          case 0x11uLL:
            if (*(_QWORD *)v10 == 0x363166622E7A7466 && *(_WORD *)(a1 + 15) == 12920)
              return 7592;
            if (*(_QWORD *)v10 == 0x363166622E746173 && *(_WORD *)(a1 + 15) == 12920)
              return 7609;
            break;
          case 0x12uLL:
            if (*(_QWORD *)v10 != 0x3166622E756C6572 || *(_QWORD *)(a1 + 10) != 0x3278363166622E75)
              return 0;
            return 7605;
          case 0x13uLL:
            if (*(_QWORD *)v10 != 0x2E7461735F7A7466 || *(_DWORD *)(a1 + 15) != 909207138)
              return 0;
            return 7600;
          case 0x14uLL:
            if (*(_QWORD *)v10 != 0x756C65722E7A7466 || *(_QWORD *)(a1 + 12) != 0x363166622E756C65)
              return 0;
            return 7596;
          case 0x15uLL:
            if (*(_QWORD *)v10 != 0x2E7461735F7A7466 || *(_QWORD *)(a1 + 13) != 0x3278363166622E74)
              return 0;
            return 7601;
          case 0x16uLL:
            if (*(_QWORD *)v10 != 0x756C65722E7A7466 || *(_QWORD *)(a1 + 14) != 0x3278363166622E75)
              return 0;
            return 7597;
          default:
            return 0;
        }
        return 0;
      }
    }
    else if (a2 < 5)
    {
LABEL_23:
      if (*(_DWORD *)a1 != 778528110)
        return 0;
      v7 = (_DWORD *)(a1 + 4);
      if (a2 != 10)
      {
        if (a2 == 8 && *v7 == 909207138)
          return 7869;
        return 0;
      }
      if (*v7 != 909207138 || *(_WORD *)(a1 + 8) != 12920)
        return 0;
      return 7870;
    }
    if (*(_DWORD *)a1 == 2019650918 && *(_BYTE *)(a1 + 4) == 46)
    {
      v8 = (_DWORD *)(a1 + 5);
      switch(a2)
      {
        case 9uLL:
          if (*v8 != 909207138)
            return 0;
          return 7618;
        case 0xBuLL:
          if (*v8 != 909207138 || *(_WORD *)(a1 + 9) != 12920)
            return 0;
          return 7619;
        case 0xDuLL:
          if (*(_QWORD *)v8 == 0x363166622E7A7466)
            return 7624;
          if (*(_QWORD *)v8 != 0x363166622E6E616ELL)
            return 0;
          return 7644;
        case 0xFuLL:
          if (*(_QWORD *)v8 == 0x363166622E7A7466 && *(_WORD *)(a1 + 13) == 12920)
            return 7625;
          if (*(_QWORD *)v8 == 0x363166622E6E616ELL && *(_WORD *)(a1 + 13) == 12920)
            return 7645;
          return 0;
        case 0x11uLL:
          if (*(_QWORD *)v8 != 0x2E6E616E2E7A7466 || *(_DWORD *)(a1 + 13) != 909207138)
            return 0;
          return 7629;
        case 0x13uLL:
          if (*(_QWORD *)v8 != 0x2E6E616E2E7A7466 || *(_QWORD *)(a1 + 11) != 0x3278363166622E6ELL)
            return 0;
          return 7630;
        case 0x15uLL:
          if (*(_QWORD *)v8 != 0x2E6E676973726F78 || *(_QWORD *)(a1 + 13) != 0x363166622E736261)
            return 0;
          return 7654;
        case 0x17uLL:
          if (*(_QWORD *)v8 != 0x2E6E676973726F78
            || *(_QWORD *)(a1 + 13) != 0x363166622E736261
            || *(_WORD *)(a1 + 21) != 12920)
          {
            return 0;
          }
          return 7655;
        case 0x19uLL:
          if (*(_QWORD *)v8 == 0x73726F782E7A7466
            && *(_QWORD *)(a1 + 13) == 0x2E7362612E6E6769
            && *(_DWORD *)(a1 + 21) == 909207138)
          {
            return 7639;
          }
          if (*(_QWORD *)v8 == 0x73726F782E6E616ELL
            && *(_QWORD *)(a1 + 13) == 0x2E7362612E6E6769
            && *(_DWORD *)(a1 + 21) == 909207138)
          {
            return 7649;
          }
          return 0;
        case 0x1BuLL:
          if (*(_QWORD *)v8 == 0x73726F782E7A7466
            && *(_QWORD *)(a1 + 13) == 0x2E7362612E6E6769
            && *(_QWORD *)(a1 + 19) == 0x3278363166622E73)
          {
            return 7640;
          }
          if (*(_QWORD *)v8 == 0x73726F782E6E616ELL
            && *(_QWORD *)(a1 + 13) == 0x2E7362612E6E6769
            && *(_QWORD *)(a1 + 19) == 0x3278363166622E73)
          {
            return 7650;
          }
          break;
        case 0x1DuLL:
          if (*(_QWORD *)v8 != 0x2E6E616E2E7A7466
            || *(_QWORD *)(a1 + 13) != 0x2E6E676973726F78
            || *(_QWORD *)(a1 + 21) != 0x363166622E736261)
          {
            return 0;
          }
          return 7634;
        case 0x1FuLL:
          if (*(_QWORD *)v8 != 0x2E6E616E2E7A7466
            || *(_QWORD *)(a1 + 13) != 0x2E6E676973726F78
            || *(_QWORD *)(a1 + 21) != 0x363166622E736261
            || *(_WORD *)(a1 + 29) != 12920)
          {
            return 0;
          }
          return 7635;
        default:
          return 0;
      }
      return 0;
    }
    if (*(_DWORD *)a1 == 1852403046 && *(_BYTE *)(a1 + 4) == 46)
    {
      v11 = (_DWORD *)(a1 + 5);
      switch(a2)
      {
        case 9uLL:
          if (*v11 != 909207138)
            return 0;
          return 7659;
        case 0xBuLL:
          if (*v11 != 909207138 || *(_WORD *)(a1 + 9) != 12920)
            return 0;
          return 7660;
        case 0xDuLL:
          if (*(_QWORD *)v11 == 0x363166622E7A7466)
            return 7665;
          if (*(_QWORD *)v11 != 0x363166622E6E616ELL)
            return 0;
          return 7685;
        case 0xFuLL:
          if (*(_QWORD *)v11 == 0x363166622E7A7466 && *(_WORD *)(a1 + 13) == 12920)
            return 7666;
          if (*(_QWORD *)v11 == 0x363166622E6E616ELL && *(_WORD *)(a1 + 13) == 12920)
            return 7686;
          return 0;
        case 0x11uLL:
          if (*(_QWORD *)v11 != 0x5F6E616E2E7A7466 || *(_DWORD *)(a1 + 13) != 909207138)
            return 0;
          return 7670;
        case 0x13uLL:
          if (*(_QWORD *)v11 != 0x5F6E616E2E7A7466 || *(_QWORD *)(a1 + 11) != 0x3278363166625F6ELL)
            return 0;
          return 7671;
        case 0x15uLL:
          if (*(_QWORD *)v11 != 0x2E6E676973726F78 || *(_QWORD *)(a1 + 13) != 0x363166622E736261)
            return 0;
          return 7695;
        case 0x17uLL:
          if (*(_QWORD *)v11 != 0x2E6E676973726F78
            || *(_QWORD *)(a1 + 13) != 0x363166622E736261
            || *(_WORD *)(a1 + 21) != 12920)
          {
            return 0;
          }
          return 7696;
        case 0x19uLL:
          if (*(_QWORD *)v11 == 0x73726F782E7A7466
            && *(_QWORD *)(a1 + 13) == 0x2E7362612E6E6769
            && *(_DWORD *)(a1 + 21) == 909207138)
          {
            return 7680;
          }
          if (*(_QWORD *)v11 == 0x73726F782E6E616ELL
            && *(_QWORD *)(a1 + 13) == 0x2E7362612E6E6769
            && *(_DWORD *)(a1 + 21) == 909207138)
          {
            return 7690;
          }
          return 0;
        case 0x1BuLL:
          if (*(_QWORD *)v11 == 0x73726F782E7A7466
            && *(_QWORD *)(a1 + 13) == 0x2E7362612E6E6769
            && *(_QWORD *)(a1 + 19) == 0x3278363166622E73)
          {
            return 7681;
          }
          if (*(_QWORD *)v11 == 0x73726F782E6E616ELL
            && *(_QWORD *)(a1 + 13) == 0x2E7362612E6E6769
            && *(_QWORD *)(a1 + 19) == 0x3278363166622E73)
          {
            return 7691;
          }
          break;
        case 0x1DuLL:
          if (*(_QWORD *)v11 != 0x2E6E616E2E7A7466
            || *(_QWORD *)(a1 + 13) != 0x2E6E676973726F78
            || *(_QWORD *)(a1 + 21) != 0x363166622E736261)
          {
            return 0;
          }
          return 7675;
        case 0x1FuLL:
          if (*(_QWORD *)v11 != 0x2E6E616E2E7A7466
            || *(_QWORD *)(a1 + 13) != 0x2E6E676973726F78
            || *(_QWORD *)(a1 + 21) != 0x363166622E736261
            || *(_WORD *)(a1 + 29) != 12920)
          {
            return 0;
          }
          return 7676;
        default:
          return 0;
      }
      return 0;
    }
    goto LABEL_23;
  }
  v3 = (_DWORD *)(a1 + 4);
  if (a2 != 10)
  {
    if (a2 == 8 && *v3 == 909207138)
      return 7404;
    return 0;
  }
  if (*v3 != 909207138 || *(_WORD *)(a1 + 8) != 12920)
    return 0;
  return 7405;
}

void rename(llvm::GlobalValue *a1)
{
  const char *v2;
  const char *v3[4];
  __int16 v4;

  v4 = 773;
  v3[0] = llvm::Value::getName(a1);
  v3[1] = v2;
  v3[2] = ".old";
  llvm::Value::setName(a1, v3);
}

uint64_t UpgradeARMIntrinsicCall(_QWORD *__s1, size_t __n, llvm::CallBase *this, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int IntrinsicID;
  llvm::LLVMContext *v11;
  llvm::FixedVectorType *v12;
  BOOL *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL *v16;
  BOOL **v17;
  _QWORD *v18;
  BOOL *v19;
  uint64_t v20;
  BOOL *v21;
  BOOL **v22;
  uint64_t v23;
  BOOL *v24;
  uint64_t Declaration;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  BOOL ***v31;
  BOOL *v32;
  BOOL *v33;
  BOOL *v34;
  BOOL **v35;
  llvm::Type ***v36;
  uint64_t v37;
  llvm::Type ***v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  llvm::Type **v43;
  llvm::LLVMContext *v44;
  uint64_t *v45;
  llvm::ScalableVectorType *v46;
  BOOL *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  llvm::Type ***v58;
  unint64_t v59;
  char *v60;
  llvm::Type **v61;
  llvm::Type ***v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t *v77;
  llvm::LLVMContext *v78;
  llvm::ScalableVectorType *Int1Ty;
  BOOL *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  llvm::LLVMContext *v84;
  llvm::ScalableVectorType *v85;
  BOOL *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  BOOL **v90;
  int v91;
  llvm::CallBase *v92;
  uint64_t v93;
  BOOL *v94;
  const char *Name;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  BOOL *v99;
  BOOL *v100[2];

  v6 = a4;
  v100[1] = *(BOOL **)MEMORY[0x1E0C80C00];
  switch(__n)
  {
    case 0xEuLL:
      if (*__s1 != 0x707463762E65766DLL || *(_QWORD *)((char *)__s1 + 6) != 0x646C6F2E34367074)
        goto LABEL_2;
      Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a4 + 40), 2868, 0, 0);
      v27 = Declaration;
      if (Declaration)
        v28 = *(_QWORD *)(Declaration + 24);
      else
        v28 = 0;
      v98 = *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      v97 = 261;
      Name = llvm::Value::getName(this);
      v96 = v76;
      v98 = llvm::IRBuilderBase::CreateCall((uint64_t *)a5, v28, v27, &v98, 1, (uint64_t)&Name, 0);
      v77 = *(uint64_t **)(v6 + 40);
      Int1Ty = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(*(llvm::Type **)(a5 + 64), v78);
      llvm::VectorType::get(Int1Ty, (llvm::Type *)2);
      v100[0] = v80;
      v81 = llvm::Intrinsic::getDeclaration(v77, 2828, v100, 1);
      if (v81)
        v82 = *(_QWORD *)(v81 + 24);
      else
        v82 = 0;
      v97 = 257;
      v100[0] = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)a5, v82, v81, &v98, 1, (uint64_t)&Name, 0);
      v83 = *(uint64_t **)(v6 + 40);
      v85 = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(*(llvm::Type **)(a5 + 64), v84);
      llvm::VectorType::get(v85, (llvm::Type *)4);
      v99 = v86;
      v87 = llvm::Intrinsic::getDeclaration(v83, 2827, &v99, 1);
      if (v87)
        v88 = *(_QWORD *)(v87 + 24);
      else
        v88 = 0;
      v97 = 257;
      return llvm::IRBuilderBase::CreateCall((uint64_t *)a5, v88, v87, (uint64_t *)v100, 1, (uint64_t)&Name, 0);
    case 0x1FuLL:
      if (!memcmp(__s1, "cde.vcx1q.predicated.v2i64.v4i1", __n))
        goto LABEL_2;
      v29 = "cde.vcx2q.predicated.v2i64.v4i1";
      goto LABEL_23;
    case 0x20uLL:
      v29 = "cde.vcx1qa.predicated.v2i64.v4i1";
LABEL_23:
      memcmp(__s1, v29, __n);
      goto LABEL_2;
    default:
LABEL_2:
      IntrinsicID = llvm::CallBase::getIntrinsicID(this);
      v12 = (llvm::FixedVectorType *)llvm::Type::getInt1Ty(*(llvm::Type **)(a5 + 64), v11);
      llvm::FixedVectorType::get(v12, (llvm::Type *)2);
      v94 = v13;
      v91 = IntrinsicID;
      if (IntrinsicID <= 2897)
      {
        if ((IntrinsicID - 2731) <= 0xE && ((1 << (IntrinsicID + 85)) & 0x5145) != 0)
        {
          v14 = *((_DWORD *)this + 5) & 0x7FFFFFF;
          v15 = -v14;
          v16 = (BOOL *)*((_QWORD **)this - 4 * v14)[4];
          v17 = (BOOL **)operator new(0x10uLL);
          *v17 = v16;
          v17[1] = v94;
          v90 = v17;
          v18 = v17 + 2;
          goto LABEL_25;
        }
        v19 = *(BOOL **)this;
        v20 = *((_DWORD *)this + 5) & 0x7FFFFFF;
        v15 = -v20;
        v21 = (BOOL *)**((_QWORD **)this - 4 * v20);
        v22 = (BOOL **)operator new(0x18uLL);
        *v22 = v19;
        v22[1] = v21;
        goto LABEL_12;
      }
      if (IntrinsicID <= 2971)
        __asm { BR              X10 }
      if (IntrinsicID == 2972 || IntrinsicID == 2974)
      {
        v23 = *((_DWORD *)this + 5) & 0x7FFFFFF;
        v15 = -v23;
        v24 = (BOOL *)**((_QWORD **)this - 4 * v23);
        v22 = (BOOL **)operator new(0x18uLL);
        *v22 = v24;
        v22[1] = v24;
LABEL_12:
        v22[2] = v94;
        v90 = v22;
        v18 = v22 + 3;
        goto LABEL_25;
      }
      v30 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      v15 = -v30;
      v31 = (BOOL ***)((char *)this - 32 * v30);
      v32 = **v31;
      v33 = *v31[4];
      v34 = *v31[8];
      v35 = (BOOL **)operator new(0x20uLL);
      *v35 = v32;
      v35[1] = v33;
      v35[2] = v34;
      v35[3] = v94;
      v90 = v35;
      v18 = v35 + 4;
LABEL_25:
      v89 = v18;
      v36 = (llvm::Type ***)((char *)this + 32 * v15);
      v92 = this;
      v37 = llvm::CallBase::arg_end(this);
      if (v36 != (llvm::Type ***)v37)
      {
        v38 = (llvm::Type ***)v37;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v93 = v6;
        while (1)
        {
          while (1)
          {
            v43 = *v36;
            v98 = (uint64_t)v43;
            if (llvm::Type::getScalarSizeInBits(*v43) == 1)
            {
              v100[0] = 0;
              v45 = *(uint64_t **)(v6 + 40);
              v46 = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(*(llvm::Type **)(a5 + 64), v44);
              llvm::VectorType::get(v46, (llvm::Type *)4);
              v99 = v47;
              v48 = llvm::Intrinsic::getDeclaration(v45, 2828, &v99, 1);
              if (v48)
                v49 = *(_QWORD *)(v48 + 24);
              else
                v49 = 0;
              v97 = 257;
              v100[0] = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t *)a5, v49, v48, &v98, 1, (uint64_t)&Name, 0);
              v50 = *(uint64_t **)(v6 + 40);
              v99 = v94;
              v51 = llvm::Intrinsic::getDeclaration(v50, 2827, &v99, 1);
              if (v51)
                v52 = *(_QWORD *)(v51 + 24);
              else
                v52 = 0;
              v97 = 257;
              v43 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t *)a5, v52, v51, (uint64_t *)v100, 1, (uint64_t)&Name, 0);
              v98 = (uint64_t)v43;
            }
            if (v40 >= v41)
              break;
            *(_QWORD *)v40 = v43;
            v40 += 8;
            v42 = v40;
            v36 += 4;
            if (v36 == v38)
              goto LABEL_64;
          }
          v53 = v40 - v39;
          v54 = (v40 - v39) >> 3;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61)
            abort();
          if ((v41 - v39) >> 2 > v55)
            v55 = (v41 - v39) >> 2;
          v56 = (unint64_t)(v41 - v39) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v55;
          if (v56)
          {
            if (v56 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v57 = operator new(8 * v56);
            v58 = (llvm::Type ***)&v57[8 * v54];
            *v58 = v43;
            v42 = (char *)(v58 + 1);
            if (v40 == v39)
            {
LABEL_54:
              v41 = &v57[8 * v56];
              if (!v39)
                goto LABEL_51;
LABEL_50:
              operator delete(v39);
              goto LABEL_51;
            }
          }
          else
          {
            v57 = 0;
            v58 = (llvm::Type ***)(8 * v54);
            v62 = (llvm::Type ***)(8 * v54);
            *v62 = v43;
            v42 = (char *)(v62 + 1);
            if (v40 == v39)
              goto LABEL_54;
          }
          v59 = v40 - 8 - v39;
          if (v59 < 0x168
            || &v57[v53 - 8 - (v59 & 0xFFFFFFFFFFFFFFF8)] > &v57[v53 - 8]
            || &v40[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] > v40 - 8
            || (unint64_t)(v39 - v57) < 0x20)
          {
            break;
          }
          v63 = (v59 >> 3) + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v60 = &v40[-v64];
          v58 = (llvm::Type ***)((char *)v58 - v64);
          v65 = &v57[v53 - 16];
          v66 = v40 - 16;
          v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *(_OWORD *)v66;
            *(v65 - 1) = *((_OWORD *)v66 - 1);
            *v65 = v68;
            v65 -= 2;
            v66 -= 32;
            v67 -= 4;
          }
          while (v67);
          if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_48;
LABEL_49:
          v41 = &v57[8 * v56];
          if (v39)
            goto LABEL_50;
LABEL_51:
          v39 = (char *)v58;
          v6 = v93;
          v36 += 4;
          v40 = v42;
          if (v36 == v38)
            goto LABEL_64;
        }
        v60 = v40;
        do
        {
LABEL_48:
          v61 = (llvm::Type **)*((_QWORD *)v60 - 1);
          v60 -= 8;
          *--v58 = v61;
        }
        while (v60 != v39);
        goto LABEL_49;
      }
      v42 = 0;
      v39 = 0;
LABEL_64:
      v69 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v6 + 40), v91, v90, (BOOL **)v89 - v90);
      v70 = v69;
      if (v69)
        v71 = *(_QWORD *)(v69 + 24);
      else
        v71 = 0;
      v72 = llvm::Value::getName(v92);
      v97 = 261;
      Name = v72;
      v96 = v73;
      v74 = llvm::IRBuilderBase::CreateCall((uint64_t *)a5, v71, v70, (uint64_t *)v39, (v42 - v39) >> 3, (uint64_t)&Name, 0);
      if (v39)
        operator delete(v39);
      operator delete(v90);
      return v74;
  }
}

llvm::Instruction *UpgradeAMDGCNIntrinsicCall(_QWORD *a1, unint64_t a2, uint64_t a3, mlir::BytecodeWriterConfig *this, uint64_t *a5)
{
  BOOL v6;
  __int16 v7;
  uint64_t v8;
  Type **v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  llvm::Instruction *AtomicRMW;
  uint64_t *DesiredBytecodeVersion;
  char inserted;
  llvm::APInt *v20;
  unsigned int v21;

  if (a2 < 0xB
    || (*a1 == 0x692E63696D6F7461 ? (v6 = *(_QWORD *)((char *)a1 + 3) == 0x2E636E692E63696DLL) : (v6 = 0), !v6))
  {
    v7 = 16;
    if ((*(_DWORD *)(a3 + 20) & 0x7FFFFFF) == 6)
      goto LABEL_7;
    return 0;
  }
  v7 = 15;
  if ((*(_DWORD *)(a3 + 20) & 0x7FFFFFF) != 6)
    return 0;
LABEL_7:
  v8 = *(_QWORD *)(a3 - 192);
  v9 = *(Type ***)(a3 - 160);
  v10 = *(_QWORD *)(a3 - 128);
  if (*(_BYTE *)(*(_QWORD *)(a3 - 64) + 16) == 16)
    v11 = *(_QWORD *)(a3 - 64);
  else
    v11 = 0;
  v12 = 7;
  if (v10 && *(_BYTE *)(v10 + 16) == 16)
  {
    if (*(_DWORD *)(v10 + 32) > 0x40u)
    {
      v13 = **(_QWORD **)(v10 + 24);
      if (v13 <= 7 && v13 != 3)
        goto LABEL_26;
    }
    else
    {
      v13 = *(_QWORD *)(v10 + 24);
      if (v13 <= 7 && v13 != 3)
      {
LABEL_26:
        if (v13 >= 2)
          v12 = v13;
        else
          v12 = 7;
      }
    }
  }
  DesiredBytecodeVersion = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  inserted = llvm::LLVMContext::getOrInsertSyncScopeID(DesiredBytecodeVersion, (int8x16_t *)"agent", (const unsigned __int8 *)5);
  AtomicRMW = llvm::IRBuilderBase::CreateAtomicRMW(a5, v7, v8, v9, 0, v12, inserted);
  if (!v11)
    goto LABEL_34;
  v20 = (llvm::APInt *)(v11 + 24);
  v21 = *(_DWORD *)(v11 + 32);
  if (v21 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v20) != v21)
      goto LABEL_34;
    return AtomicRMW;
  }
  if (!*(_QWORD *)v20)
    return AtomicRMW;
LABEL_34:
  *((_WORD *)AtomicRMW + 9) |= 1u;
  return AtomicRMW;
}

void llvm::UpgradeIntrinsicCall(llvm::CallBase *,llvm::Function *)::$_0::operator()(Value ***a1, uint64_t a2, llvm::Type *a3, llvm::Type *a4)
{
  llvm::Constant ***v5;
  llvm::Constant **v6;
  llvm::PoisonValue *v7;
  BOOL v8;
  llvm::Constant ***v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Constant **v12;
  llvm::Constant **v13;
  llvm::Constant **v14;
  uint64_t v15;
  llvm::Constant **v16;
  llvm::Constant **v17;
  llvm::Constant **v18;
  uint64_t v19;
  llvm::Constant ***v20;
  uint64_t v21;
  llvm::Constant ***v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  llvm::Constant ***v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  const double *v33;
  unsigned __int128 *v34;
  uint64_t v35;
  const double *v36;
  unsigned __int128 v37;
  unsigned __int128 v38;
  llvm::Constant **v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  llvm::Type *v44;
  llvm::Type **inserted;
  uint64_t *v46;
  Value **v47;
  unsigned __int8 **v48;
  uint64_t v49;
  Value *v50;
  Value *v51;
  _WORD v52[22];
  unsigned int i;
  const char *v54[4];
  __int16 v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[7];

  v58[6] = *MEMORY[0x1E0C80C00];
  v5 = (llvm::Constant ***)**a1;
  v6 = (llvm::Constant **)*a1[1];
  if (v5[10] != (llvm::Constant **)v6[3])
  {
    v7 = (llvm::PoisonValue *)*v5;
    if (*v5)
      v8 = *((_BYTE *)*v5 + 8) == 16;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = v5 - 4;
      llvm::ConstantExpr::getPointerCast((llvm::ConstantExpr *)v6, **(v5 - 4), a3, a4);
      if (*(v5 - 4))
      {
        **(v5 - 2) = (llvm::Constant *)*(v5 - 3);
        v11 = (uint64_t)*(v5 - 3);
        if (v11)
          *(_QWORD *)(v11 + 16) = *(v5 - 2);
      }
      *v9 = (llvm::Constant **)v10;
      if (v10)
      {
        v14 = *(llvm::Constant ***)(v10 + 8);
        v12 = (llvm::Constant **)(v10 + 8);
        v13 = v14;
        *(v5 - 3) = v14;
        if (v14)
          v13[2] = (llvm::Constant *)(v5 - 3);
        *(v5 - 2) = v12;
        *v12 = (llvm::Constant *)v9;
      }
      return;
    }
    v19 = *((_DWORD *)v5 + 5) & 0x7FFFFFF;
    v20 = &v5[-4 * v19];
    v21 = llvm::CallBase::arg_end((llvm::CallBase *)v5);
    v22 = (llvm::Constant ***)v21;
    v56 = v58;
    v57 = 0x600000000;
    v23 = v21 - (_QWORD)v20;
    if ((unint64_t)(v21 - (_QWORD)v20) < 0xC1)
    {
      v24 = 0;
      v25 = 0;
      if (v20 == (llvm::Constant ***)v21)
      {
LABEL_34:
        LODWORD(v57) = v25 + ((unint64_t)v23 >> 5);
        v40 = (uint64_t *)a1[2];
        v41 = (uint64_t)*a1[1];
        if (v41)
          v42 = *(_QWORD *)(v41 + 24);
        else
          v42 = 0;
        v55 = 257;
        v43 = (uint64_t *)llvm::IRBuilderBase::CreateCall(v40, v42, v41, (uint64_t *)v56, v25 + ((unint64_t)v23 >> 5), (uint64_t)v54, 0);
        inserted = (llvm::Type **)llvm::PoisonValue::get(v7, v44);
        for (i = 0; i < *((_DWORD *)v7 + 3); ++i)
        {
          v47 = a1[2];
          v52[16] = 257;
          v48 = (unsigned __int8 **)(*((uint64_t (**)(Value *, uint64_t *, unsigned int *, uint64_t))v47[9]->impl
                                     + 10))(v47[9], v43, &i, 1);
          if (!v48)
          {
            v55 = 257;
            v48 = (unsigned __int8 **)llvm::ExtractValueInst::Create(v43, &i, 1, v54, 0);
            (*((void (**)(Value *, unsigned __int8 **, _WORD *, Value *, Value *))v47[10]->impl + 2))(v47[10], v48, v52, v47[6], v47[7]);
            v49 = *((unsigned int *)v47 + 2);
            if ((_DWORD)v49)
            {
              v50 = *v47;
              v51 = &v50[2 * v49];
              do
              {
                llvm::Instruction::setMetadata(v48, (int)v50->impl, (llvm::MDNode *)v50[1].impl);
                v50 += 2;
              }
              while (v50 != v51);
            }
          }
          v46 = (uint64_t *)a1[2];
          v55 = 257;
          inserted = (llvm::Type **)llvm::IRBuilderBase::CreateInsertValue(v46, inserted, (uint64_t)v48, &i, 1, (uint64_t)v54);
        }
        llvm::Value::replaceAllUsesWith(**a1, (llvm::Value *)inserted);
        llvm::Instruction::eraseFromParent((llvm::Instruction *)**a1);
        if (v56 != v58)
          free(v56);
        return;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, v23 >> 5, 8);
      v24 = v57;
      v25 = v57;
      if (v20 == v22)
        goto LABEL_34;
    }
    v26 = (llvm::Constant ***)((char *)v56 + 8 * v24);
    v27 = 32 * v19;
    v28 = (char *)&v22[4 * v19] - (char *)v5 - 32;
    if (v28 >= 0x3C0)
    {
      v29 = v28 >> 5;
      if (v26 >= (llvm::Constant ***)((char *)v5 + (v28 & 0xFFFFFFFFFFFFFFE0 | 8) - v27)
        || v20 >= (llvm::Constant ***)((char *)v56 + 8 * v24 + 8 * (v28 >> 5) + 8))
      {
        v31 = (v29 + 1) & 3;
        if (!v31)
          v31 = 4;
        v32 = v29 + 1 - v31;
        v26 += v32;
        v20 += 4 * v32;
        v33 = (const double *)&v5[v27 / 0xFFFFFFFFFFFFFFF8 + 8];
        v34 = (unsigned __int128 *)((char *)v56 + 8 * v24 + 16);
        v35 = ~v29 + v31;
        do
        {
          v36 = v33 - 8;
          v37 = (unsigned __int128)vld4q_f64(v36);
          v38 = (unsigned __int128)vld4q_f64(v33);
          *(v34 - 1) = v37;
          *v34 = v38;
          v33 += 16;
          v34 += 2;
          v35 += 4;
        }
        while (v35);
      }
    }
    do
    {
      v39 = *v20;
      v20 += 4;
      *v26++ = v39;
    }
    while (v20 != v22);
    goto LABEL_34;
  }
  if (*(v5 - 4))
  {
    **(v5 - 2) = (llvm::Constant *)*(v5 - 3);
    v15 = (uint64_t)*(v5 - 3);
    if (v15)
      *(_QWORD *)(v15 + 16) = *(v5 - 2);
  }
  *(v5 - 4) = v6;
  v18 = (llvm::Constant **)v6[1];
  v16 = v6 + 1;
  v17 = v18;
  *(v5 - 3) = v18;
  if (v18)
    v17[2] = (llvm::Constant *)(v5 - 3);
  *(v5 - 2) = v16;
  *v16 = (llvm::Constant *)(v5 - 4);
}

_QWORD *llvm::SmallVector<llvm::Value *,2u>::SmallVector<llvm::Use *>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const double *v16;
  unsigned __int128 *v17;
  const double *v18;
  unsigned __int128 v19;
  unsigned __int128 v20;
  uint64_t v21;

  *a1 = a1 + 2;
  a1[1] = 0x200000000;
  v4 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v3 - *(_QWORD *)a2;
  if ((unint64_t)v5 < 0x41)
  {
    v6 = 0;
    v7 = 0;
    if (v4 == v3)
      goto LABEL_17;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v5 >> 5, 8);
    v6 = *((unsigned int *)a1 + 2);
    v7 = *((_DWORD *)a1 + 2);
    if (v4 == v3)
      goto LABEL_17;
  }
  v8 = *a1;
  v9 = (_QWORD *)(*a1 + 8 * v6);
  v10 = v5 - 32;
  if ((unint64_t)(v5 - 32) >= 0x300
    && (v9 >= (_QWORD *)((char *)v4 + (v10 & 0xFFFFFFFFFFFFFFE0) + 8)
     || (unint64_t)v4 >= v8 + 8 * (v6 + (v10 >> 5)) + 8))
  {
    v12 = (v10 >> 5) + 1;
    v13 = v12 & 3;
    if ((v12 & 3) == 0)
      v13 = 4;
    v14 = v12 - v13;
    v9 += v14;
    v15 = &v4[4 * v14];
    v16 = (const double *)(v4 + 8);
    v17 = (unsigned __int128 *)(v8 + 8 * v6 + 16);
    do
    {
      v18 = v16 - 8;
      v19 = (unsigned __int128)vld4q_f64(v18);
      v20 = (unsigned __int128)vld4q_f64(v16);
      *(v17 - 1) = v19;
      *v17 = v20;
      v16 += 16;
      v17 += 2;
      v14 -= 4;
    }
    while (v14);
    v4 = v15;
  }
  do
  {
    v21 = *v4;
    v4 += 4;
    *v9++ = v21;
  }
  while (v4 != v3);
LABEL_17:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v5 >> 5);
  return a1;
}

uint64_t llvm::IRBuilderBase::CreateInsertVector(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Value *a3, BOOL **a4, llvm::Value *a5, const llvm::Twine *a6)
{
  BOOL *v6;
  uint64_t v8[3];
  BOOL *v9[3];

  v9[2] = *(BOOL **)MEMORY[0x1E0C80C00];
  v6 = *a4;
  v9[0] = (BOOL *)a2;
  v9[1] = v6;
  v8[0] = (uint64_t)a3;
  v8[1] = (uint64_t)a4;
  v8[2] = (uint64_t)a5;
  return llvm::IRBuilderBase::CreateIntrinsic((uint64_t)this, 346, v9, 2, v8, 3, 0, (uint64_t)a6);
}

_QWORD *llvm::SmallVector<llvm::Value *,3u>::SmallVector<llvm::Use *>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const double *v16;
  unsigned __int128 *v17;
  const double *v18;
  unsigned __int128 v19;
  unsigned __int128 v20;
  uint64_t v21;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v4 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v3 - *(_QWORD *)a2;
  if ((unint64_t)v5 < 0x61)
  {
    v6 = 0;
    v7 = 0;
    if (v4 == v3)
      goto LABEL_17;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v5 >> 5, 8);
    v6 = *((unsigned int *)a1 + 2);
    v7 = *((_DWORD *)a1 + 2);
    if (v4 == v3)
      goto LABEL_17;
  }
  v8 = *a1;
  v9 = (_QWORD *)(*a1 + 8 * v6);
  v10 = v5 - 32;
  if ((unint64_t)(v5 - 32) >= 0x300
    && (v9 >= (_QWORD *)((char *)v4 + (v10 & 0xFFFFFFFFFFFFFFE0) + 8)
     || (unint64_t)v4 >= v8 + 8 * (v6 + (v10 >> 5)) + 8))
  {
    v12 = (v10 >> 5) + 1;
    v13 = v12 & 3;
    if ((v12 & 3) == 0)
      v13 = 4;
    v14 = v12 - v13;
    v9 += v14;
    v15 = &v4[4 * v14];
    v16 = (const double *)(v4 + 8);
    v17 = (unsigned __int128 *)(v8 + 8 * v6 + 16);
    do
    {
      v18 = v16 - 8;
      v19 = (unsigned __int128)vld4q_f64(v18);
      v20 = (unsigned __int128)vld4q_f64(v16);
      *(v17 - 1) = v19;
      *v17 = v20;
      v16 += 16;
      v17 += 2;
      v14 -= 4;
    }
    while (v14);
    v4 = v15;
  }
  do
  {
    v21 = *v4;
    v4 += 4;
    *v9++ = v21;
  }
  while (v4 != v3);
LABEL_17:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v5 >> 5);
  return a1;
}

llvm::Type **llvm::IRBuilderBase::CreateIntCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, int a4, const llvm::Twine *a5)
{
  llvm::Type *v10;
  unsigned int ScalarSizeInBits;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  v10 = *a2;
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  v12 = llvm::Type::getScalarSizeInBits(a3);
  if (a4)
    v13 = 40;
  else
    v13 = 39;
  if (ScalarSizeInBits <= v12)
    v14 = v13;
  else
    v14 = 38;
  if (v10 == a3)
    return a2;
  v15 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Type **, llvm::Type *))(**((_QWORD **)this + 9) + 120))(*((_QWORD *)this + 9), v14, a2, a3);
  if (!v15)
  {
    llvm::CastInst::Create(v14);
    v15 = v16;
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v16, a5, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v17 = *((unsigned int *)this + 2);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD **)this;
      v19 = &v18[2 * v17];
      do
      {
        llvm::Instruction::setMetadata(v15, *(_DWORD *)v18, (llvm::MDNode *)v18[1]);
        v18 += 2;
      }
      while (v18 != v19);
    }
  }
  return (llvm::Type **)v15;
}

uint64_t *llvm::MemIntrinsicBase<llvm::MemIntrinsic>::setDestAlignment(_QWORD *a1, __int16 a2)
{
  _QWORD *v4;
  uint64_t *DesiredBytecodeVersion;
  uint64_t *result;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;

  v4 = a1 + 9;
  DesiredBytecodeVersion = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
  result = llvm::AttributeList::removeAttributeAtIndex(v4, DesiredBytecodeVersion, 1, 78);
  a1[9] = result;
  if ((a2 & 0xFF00) != 0)
  {
    v7 = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
    v8 = llvm::Attribute::getWithAlignment(v7, a2);
    v10 = 0;
    v9 = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
    result = llvm::AttributeList::addParamAttribute(v4, v9, &v10, 1, v8);
    a1[9] = result;
  }
  return result;
}

uint64_t *llvm::MemTransferBase<llvm::MemIntrinsic>::setSourceAlignment(_QWORD *a1, __int16 a2)
{
  _QWORD *v4;
  uint64_t *DesiredBytecodeVersion;
  uint64_t *result;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;

  v4 = a1 + 9;
  DesiredBytecodeVersion = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
  result = llvm::AttributeList::removeAttributeAtIndex(v4, DesiredBytecodeVersion, 2, 78);
  a1[9] = result;
  if ((a2 & 0xFF00) != 0)
  {
    v7 = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
    v8 = llvm::Attribute::getWithAlignment(v7, a2);
    v10 = 1;
    v9 = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
    result = llvm::AttributeList::addParamAttribute(v4, v9, &v10, 1, v8);
    a1[9] = result;
  }
  return result;
}

llvm *llvm::UpgradeTBAANode(llvm *this, llvm::MDNode *a2)
{
  llvm *v2;
  unint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v8;
  llvm::Type *v9;
  __int128 *v10;
  llvm::Constant *v11;
  Type *v12;
  llvm::ValueAsMetadata *v13;
  llvm::Value *v14;
  uint64_t v15;
  unint64_t v16;
  llvm::LLVMContext *v17;
  llvm::Constant *Int64Ty;
  Type *v19;
  llvm::ValueAsMetadata *v20;
  llvm::Value *v21;
  _QWORD *v22;
  llvm *Impl;
  llvm *v25;
  llvm::ValueAsMetadata *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v2 = this;
  v29 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)((char *)this - 16);
  v3 = *((_QWORD *)this - 2);
  if ((v3 & 2) != 0)
  {
    v5 = *((_DWORD *)this - 6);
    if (!v5)
      return v2;
    if (v5 >= 3 && ***((unsigned __int8 ***)this - 4) - 5 < 0x1F)
      return v2;
  }
  else
  {
    v5 = (v3 >> 6) & 0xF;
    if (!v5)
      return v2;
    if (v5 >= 3 && *(unsigned __int8 *)v4[-((v3 >> 2) & 0xF)] - 5 < 0x1F)
      return v2;
  }
  v8 = *((_QWORD *)this + 1);
  v9 = (llvm::Type *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = *(llvm::Type **)v9;
  if (v5 == 3)
  {
    *((_QWORD *)&v28 + 1) = 0;
    if ((v3 & 2) != 0)
      v10 = (__int128 *)*((_QWORD *)this - 4);
    else
      v10 = (__int128 *)&v4[-((v3 >> 2) & 0xF)];
    v28 = *v10;
    Impl = (llvm *)llvm::MDTuple::getImpl((uint64_t)v9, &v28, 2uLL, 0, 1);
    v25 = Impl;
    Int64Ty = (llvm::Constant *)llvm::Type::getInt64Ty(v9, v17);
    llvm::Constant::getNullValue(Int64Ty, v19);
    v26 = llvm::ValueAsMetadata::get(v20, v21);
    if ((*v4 & 2) != 0)
      v22 = (_QWORD *)*((_QWORD *)v2 - 4);
    else
      v22 = &v4[-((*v4 >> 2) & 0xFLL)];
    v27 = v22[2];
    v15 = (uint64_t)v9;
    v16 = 4;
  }
  else
  {
    Impl = this;
    v25 = this;
    v11 = (llvm::Constant *)llvm::Type::getInt64Ty(v9, a2);
    llvm::Constant::getNullValue(v11, v12);
    v26 = llvm::ValueAsMetadata::get(v13, v14);
    v15 = (uint64_t)v9;
    v16 = 3;
  }
  return (llvm *)llvm::MDTuple::getImpl(v15, &Impl, v16, 0, 1);
}

void llvm::UpgradeBitCastInst(llvm *this, mlir::BytecodeWriterConfig *a2, llvm::Value *a3, llvm::Type *a4, llvm::Instruction **a5)
{
  uint64_t v6;
  unsigned int v7;
  char v8;
  int v9;
  int v10;
  char v11;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v13;
  uint64_t v14;

  if ((_DWORD)this == 49)
  {
    *(_QWORD *)a4 = 0;
    v6 = *(_QWORD *)a2;
    v7 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    v8 = v7;
    if ((v7 & 0xFE) == 0x12)
      v8 = *(_BYTE *)(**(_QWORD **)(v6 + 16) + 8);
    if (v8 == 15)
    {
      v9 = *((_DWORD *)a3 + 2);
      v10 = v9 & 0xFE;
      v11 = v9;
      if (v10 == 18)
        v11 = *(_BYTE *)(**((_QWORD **)a3 + 2) + 8);
      if (v11 == 15)
      {
        if ((v7 & 0xFE) == 0x12)
        {
          v7 = *(_DWORD *)(**(_QWORD **)(v6 + 16) + 8);
          if (v10 != 18)
            goto LABEL_10;
        }
        else if (v10 != 18)
        {
LABEL_10:
          if ((v9 ^ v7) < 0x100)
            return;
LABEL_15:
          DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
          llvm::Type::getInt64Ty(DesiredBytecodeVersion, v13);
          llvm::CastInst::Create(47);
          *(_QWORD *)a4 = v14;
          llvm::CastInst::Create(48);
          return;
        }
        if ((*(_DWORD *)(**((_QWORD **)a3 + 2) + 8) ^ v7) >= 0x100)
          goto LABEL_15;
      }
    }
  }
}

void llvm::UpgradeBitCastExpr(llvm *this, mlir::BytecodeWriterConfig *a2, llvm::Constant *a3, llvm::Type *a4)
{
  uint64_t v6;
  unsigned int v7;
  char v8;
  int v9;
  int v10;
  char v11;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v13;
  llvm::Type **Int64Ty;
  llvm::Type *v15;
  llvm::ConstantExpr *v16;
  llvm::Type *v17;

  if ((_DWORD)this == 49)
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    v8 = v7;
    if ((v7 & 0xFE) == 0x12)
      v8 = *(_BYTE *)(**(_QWORD **)(v6 + 16) + 8);
    if (v8 == 15)
    {
      v9 = *((_DWORD *)a3 + 2);
      v10 = v9 & 0xFE;
      v11 = v9;
      if (v10 == 18)
        v11 = *(_BYTE *)(**((_QWORD **)a3 + 2) + 8);
      if (v11 == 15)
      {
        if ((v7 & 0xFE) == 0x12)
        {
          v7 = *(_DWORD *)(**(_QWORD **)(v6 + 16) + 8);
          if (v10 != 18)
          {
LABEL_10:
            if ((v9 ^ v7) < 0x100)
              return;
LABEL_14:
            DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
            Int64Ty = (llvm::Type **)llvm::Type::getInt64Ty(DesiredBytecodeVersion, v13);
            llvm::ConstantExpr::getPtrToInt(a2, Int64Ty, 0, v15);
            llvm::ConstantExpr::getIntToPtr(v16, (llvm::Type **)a3, 0, v17);
            return;
          }
        }
        else if (v10 != 18)
        {
          goto LABEL_10;
        }
        if ((*(_DWORD *)(**((_QWORD **)a3 + 2) + 8) ^ v7) >= 0x100)
          goto LABEL_14;
      }
    }
  }
}

uint64_t llvm::UpgradeDebugInfo(llvm *this, llvm::Module *a2)
{
  llvm *DebugMetadataVersionFromModule;
  llvm::Module *v5;
  int v6;
  const llvm::Module *v7;
  BOOL *v8;
  void *v9;
  int v10;
  char v11;
  llvm *v12;
  int v13;
  char v14;

  if (byte_1EDC0BC70)
    return 0;
  DebugMetadataVersionFromModule = (llvm *)llvm::getDebugMetadataVersionFromModule(this, a2);
  if ((_DWORD)DebugMetadataVersionFromModule == 700000003
    || (v6 = (int)DebugMetadataVersionFromModule, (_DWORD)DebugMetadataVersionFromModule == 3))
  {
    v14 = 0;
    v7 = (const llvm::Module *)llvm::errs(DebugMetadataVersionFromModule);
    llvm::verifyModule(this, v7, (llvm::raw_ostream *)&v14, v8);
  }
  if (!llvm::StripDebugInfo(this, v5))
    return 0;
  v10 = 5;
  v11 = 1;
  v9 = &unk_1E0E23C58;
  v12 = this;
  v13 = v6;
  llvm::LLVMContext::diagnose(*(uint64_t **)this, (const llvm::DiagnosticInfo *)&v9);
  return 1;
}

void llvm::UpgradeARCRuntime(llvm *this, llvm::Module *a2)
{
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v4;
  uint64_t Operand;
  unint64_t v6;
  llvm::MDString *v7;
  void *v8;
  const void *v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  const void *v16;
  size_t v17;
  void *v18;
  std::string::size_type v19;
  void **v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  void **v28;
  const unsigned __int8 *v29;
  llvm *v30;
  void *v31;
  size_t v32;
  unint64_t v33;
  std::string __dst;
  std::string v35;
  void *__p[2];
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _WORD v40[32];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v30 = this;
  llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"clang.arc.use", 238);
  v38 = "clang.arc.retainAutoreleasedReturnValueMarker";
  v40[8] = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const char **)&v38);
  if (NamedMetadata)
  {
    v4 = NamedMetadata;
    Operand = llvm::NamedMDNode::getOperand(NamedMetadata, 0);
    if (Operand)
    {
      v6 = *(_QWORD *)(Operand - 16);
      if ((v6 & 2) != 0)
      {
        v7 = **(llvm::MDString ***)(Operand - 32);
        if (!v7)
          return;
      }
      else
      {
        v7 = *(llvm::MDString **)(Operand - 16 - 8 * ((v6 >> 2) & 0xF));
        if (!v7)
          return;
      }
      if (!*(_BYTE *)v7)
      {
        v38 = v40;
        v39 = 0x400000000;
        __p[0] = (void *)llvm::MDString::getString(v7);
        __p[1] = v8;
        llvm::StringRef::split((__int128 *)__p, (uint64_t)&v38, "#", 1uLL, -1, 1);
        if ((_DWORD)v39 != 2)
        {
LABEL_48:
          llvm::Module::addModuleFlag((uint64_t *)this, (llvm::LLVMContext *)1, (int8x16_t *)"clang.arc.retainAutoreleasedReturnValueMarker", (const unsigned __int8 *)0x2D, (uint64_t)v7);
          llvm::Module::eraseNamedMetadata(this, v4);
          if (v38 != v40)
            free(v38);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_autorelease", 232);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_autoreleasePoolPop", 233);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_autoreleasePoolPush", 234);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_autoreleaseReturnValue", 235);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_copyWeak", 239);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_destroyWeak", 240);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_initWeak", 241);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_loadWeak", 242);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_loadWeakRetained", 243);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_moveWeak", 244);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_release", 245);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_retain", 246);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_retainAutorelease", 248);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_retainAutoreleaseReturnValue", 249);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_retainAutoreleasedReturnValue", 250);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_retainBlock", 251);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_storeStrong", 253);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_storeWeak", 254);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_unsafeClaimAutoreleasedReturnValue", 259);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_retainedObject", 252);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_unretainedObject", 257);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_unretainedPointer", 258);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_retain_autorelease", 247);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_sync_enter", 255);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_sync_exit", 256);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_arc_annotation_topdown_bbstart", 231);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_arc_annotation_topdown_bbend", 230);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_arc_annotation_bottomup_bbstart", 229);
          llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()((uint64_t *)&v30, (int8x16_t *)"objc_arc_annotation_bottomup_bbend", 228);
          return;
        }
        v9 = *(const void **)v38;
        if (!*(_QWORD *)v38)
        {
          memset(&__dst, 0, sizeof(__dst));
          goto LABEL_20;
        }
        v10 = *((_QWORD *)v38 + 1);
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_55;
        if (v10 >= 0x17)
        {
          v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v12 = v10 | 7;
          v13 = v12 + 1;
          p_dst = (std::string *)operator new(v12 + 1);
          __dst.__r_.__value_.__l.__size_ = v10;
          __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *((_QWORD *)v38 + 1);
          p_dst = &__dst;
          if (!v10)
            goto LABEL_19;
        }
        memmove(p_dst, v9, v10);
LABEL_19:
        p_dst->__r_.__value_.__s.__data_[v10] = 0;
LABEL_20:
        v14 = std::string::append(&__dst, ";");
        v15 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        v16 = (const void *)*((_QWORD *)v38 + 2);
        if (!v16)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          goto LABEL_31;
        }
        v17 = *((_QWORD *)v38 + 3);
        if (v17 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v17 >= 0x17)
          {
            v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v22 = v17 | 7;
            v23 = v22 + 1;
            v18 = operator new(v22 + 1);
            v32 = v17;
            v33 = v23 | 0x8000000000000000;
            v31 = v18;
          }
          else
          {
            HIBYTE(v33) = *((_QWORD *)v38 + 3);
            v18 = &v31;
            if (!v17)
              goto LABEL_30;
          }
          memmove(v18, v16, v17);
LABEL_30:
          *((_BYTE *)v18 + v17) = 0;
          v21 = HIBYTE(v33);
          v20 = (void **)v31;
          v19 = v32;
LABEL_31:
          if ((v21 & 0x80u) == 0)
            v24 = &v31;
          else
            v24 = v20;
          if ((v21 & 0x80u) == 0)
            v25 = v21;
          else
            v25 = v19;
          v26 = std::string::append(&v35, (const std::string::value_type *)v24, v25);
          v27 = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v37 = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v33) < 0)
          {
            operator delete(v31);
            if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_39:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_40;
LABEL_54:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_40:
              if (v37 >= 0)
                v28 = __p;
              else
                v28 = (void **)__p[0];
              if (v37 >= 0)
                v29 = (const unsigned __int8 *)HIBYTE(v37);
              else
                v29 = (const unsigned __int8 *)__p[1];
              v7 = (llvm::MDString *)llvm::MDString::get(*(_QWORD **)this, (int8x16_t *)v28, v29);
              if (SHIBYTE(v37) < 0)
                operator delete(__p[0]);
              goto LABEL_48;
            }
          }
          else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_39;
          }
          operator delete(v35.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_40;
          goto LABEL_54;
        }
LABEL_55:
        abort();
      }
    }
  }
}

void llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()(uint64_t *a1, int8x16_t *__s, int a3)
{
  uint64_t v6;
  const unsigned __int8 *v7;
  uint64_t Function;
  llvm::Function *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  llvm::Type **v18;
  llvm::Type *v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  llvm::MDNode **v22;
  llvm::MDNode **v23;
  uint64_t v24;
  unsigned int v25;
  llvm::Value *v26;
  uint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 **v29;
  llvm::MDNode **v30;
  llvm::MDNode **v31;
  uint64_t Declaration;
  _BYTE v33[32];
  __int16 v34;
  char v35[32];
  __int16 v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[16];
  void *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];

  v48[1] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  if (__s)
  {
    v7 = (const unsigned __int8 *)strlen(__s->i8);
    Function = llvm::Module::getFunction(v6, __s, v7);
    if (!Function)
      return;
  }
  else
  {
    Function = llvm::Module::getFunction(*a1, 0, 0);
    if (!Function)
      return;
  }
  v9 = (llvm::Function *)Function;
  Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)*a1, a3, 0, 0);
  v10 = *((_QWORD *)v9 + 1);
  if (!v10)
    goto LABEL_49;
  do
  {
    v11 = *(uint64_t **)(v10 + 24);
    v10 = *(_QWORD *)(v10 + 8);
    if (v11 && *((_BYTE *)v11 + 16) == 84)
    {
      v12 = *(v11 - 4);
      if (!v12 || *(_BYTE *)(v12 + 16) || *(_QWORD *)(v12 + 24) != v11[10])
        v12 = 0;
      if ((llvm::Function *)v12 == v9)
      {
        llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&v40, (mlir::BytecodeWriterConfig *)v11[5], (mlir::BytecodeWriterConfig *)(v11 + 3), 0, 0, 0);
        v13 = *(_QWORD *)(Declaration + 24);
        v37 = v39;
        v38 = 0x200000000;
        v14 = *(uint64_t **)(v13 + 16);
        if (*v14 == *v11 || llvm::CastInst::castIsValid(49, (llvm::Type *)*v11, *v14))
        {
          v15 = llvm::CallBase::arg_end((llvm::CallBase *)v11) - (_QWORD)v11 + 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF);
          if ((v15 & 0x1FFFFFFFE0) != 0)
          {
            v16 = 0;
            v17 = (v15 >> 5);
            do
            {
              v18 = (llvm::Type **)v11[4 * v16 + -4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)];
              if (v16 < (*(_DWORD *)(v13 + 12) - 1))
              {
                if (!llvm::CastInst::castIsValid(49, *v18, *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * (v16 + 1))))
                  goto LABEL_44;
                v19 = *(llvm::Type **)(*(_QWORD *)(v13 + 16) + 8 * (v16 + 1));
                v34 = 257;
                if (*v18 == v19)
                {
                  v20 = (unsigned __int8 **)v18;
                }
                else
                {
                  v20 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Type **, llvm::Type *))(*(_QWORD *)v45 + 120))(v45, 49, v18, v19);
                  if (!v20)
                  {
                    v36 = 257;
                    llvm::CastInst::Create(49);
                    v20 = v21;
                    (*(void (**)(uint64_t, unsigned __int8 **, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v21, v33, v43, v44);
                    if (v41)
                    {
                      v22 = (llvm::MDNode **)v40;
                      v23 = (llvm::MDNode **)((char *)v40 + 16 * v41);
                      do
                      {
                        llvm::Instruction::setMetadata(v20, *(_DWORD *)v22, v22[1]);
                        v22 += 2;
                      }
                      while (v22 != v23);
                    }
                  }
                }
                v18 = (llvm::Type **)v20;
              }
              v24 = v38;
              if (v38 >= (unint64_t)HIDWORD(v38))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v38 + 1, 8);
                v24 = v38;
              }
              *((_QWORD *)v37 + v24) = v18;
              v25 = v38 + 1;
              LODWORD(v38) = v38 + 1;
              ++v16;
            }
            while (v16 != v17);
          }
          else
          {
            v25 = v38;
          }
          v36 = 257;
          v26 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t *)&v40, v13, Declaration, (uint64_t *)v37, v25, (uint64_t)v35, 0);
          *((_WORD *)v26 + 9) = *((_WORD *)v26 + 9) & 0xFFFC | *((_WORD *)v11 + 9) & 3;
          llvm::Value::takeName(v26, (llvm::Value *)v11);
          v27 = *v11;
          v34 = 257;
          if (*(_QWORD *)v26 == v27)
          {
            v28 = (unsigned __int8 **)v26;
          }
          else
          {
            v28 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t))(*(_QWORD *)v45 + 120))(v45, 49, v26, v27);
            if (!v28)
            {
              v36 = 257;
              llvm::CastInst::Create(49);
              v28 = v29;
              (*(void (**)(uint64_t, unsigned __int8 **, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v29, v33, v43, v44);
              if (v41)
              {
                v30 = (llvm::MDNode **)v40;
                v31 = (llvm::MDNode **)((char *)v40 + 16 * v41);
                do
                {
                  llvm::Instruction::setMetadata(v28, *(_DWORD *)v30, v30[1]);
                  v30 += 2;
                }
                while (v30 != v31);
              }
            }
          }
          if (v11[1])
            llvm::Value::replaceAllUsesWith((Value *)v11, (llvm::Value *)v28);
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v11);
        }
LABEL_44:
        if (v37 != v39)
          free(v37);
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v48);
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v47);
        if (v40 != &v42)
          free(v40);
      }
    }
  }
  while (v10);
  if (!*((_QWORD *)v9 + 1))
LABEL_49:
    llvm::Function::eraseFromParent(v9);
}

BOOL llvm::UpgradeModuleFlags(llvm *this, llvm::Module *a2)
{
  llvm::NamedMDNode *ModuleFlagsMetadata;
  llvm::LLVMContext *v4;
  llvm::NamedMDNode *v5;
  uint64_t Int8Ty;
  llvm::LLVMContext *v7;
  uint64_t Int32Ty;
  int NumOperands;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t Operand;
  _QWORD *v22;
  uint64_t v23;
  llvm::MDString *v24;
  _QWORD *String;
  uint64_t v26;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  llvm::LLVMContext *v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  _QWORD *v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD **v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned int v73;
  unsigned int v74;
  llvm::ConstantInt *v75;
  llvm::ValueAsMetadata *v76;
  llvm::Value *v77;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  unsigned int v81;
  unsigned int v83;
  _QWORD *v84;
  llvm::NamedMDNode *v85;
  unsigned int v86;
  llvm::MDNode *Impl;
  _QWORD *v88;
  uint64_t v89;
  BOOL v90;
  BOOL v91;
  _QWORD *v93;
  uint64_t v94;
  BOOL v95;
  BOOL v96;
  BOOL v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  llvm::MDString *v103;
  std::string::size_type v104;
  uint64_t v105;
  size_t *v106;
  uint64_t v107;
  uint64_t v108;
  const void *v109;
  size_t v110;
  void **v111;
  std::string::size_type v112;
  const std::string::value_type *v113;
  std::string::size_type v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  const std::string::value_type *p_dst;
  std::string::size_type v120;
  llvm::Constant *v121;
  uint64_t UniqueInteger;
  unint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  BOOL v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  int v130;
  llvm::ValueAsMetadata *v131;
  llvm::Value *v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  llvm::ValueAsMetadata *v136;
  llvm::Value *v137;
  llvm::NamedMDNode *v138;
  unsigned int v139;
  llvm::MDNode *v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  void **v144;
  int v145;
  _QWORD *v146;
  std::string *v147;
  std::string::size_type size;
  llvm::NamedMDNode *v149;
  unsigned int v150;
  llvm::MDNode *v151;
  char v152;
  BOOL v153;
  uint64_t v154;
  llvm::ValueAsMetadata *v156;
  llvm::ValueAsMetadata *v157;
  BOOL v158;
  char v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  _BOOL4 v167;
  _BOOL4 v168;
  std::string v169;
  uint64_t *v170[4];
  unsigned int *v171;
  char *v172;
  llvm::MDString *v173;
  uint64_t v174;
  unsigned int v175;
  char v176;
  llvm::NamedMDNode *v177;
  void *__dst;
  size_t v179;
  uint64_t v180;
  void *__p;
  uint64_t v182;
  llvm::ValueAsMetadata *v183;
  int v184;
  int v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  ModuleFlagsMetadata = (llvm::NamedMDNode *)llvm::Module::getModuleFlagsMetadata(this);
  v177 = ModuleFlagsMetadata;
  if (ModuleFlagsMetadata)
  {
    v5 = ModuleFlagsMetadata;
    v176 = 0;
    Int8Ty = llvm::Type::getInt8Ty(*(llvm::Type **)this, v4);
    Int32Ty = llvm::Type::getInt32Ty(*(llvm::Type **)this, v7);
    v175 = 0;
    NumOperands = llvm::NamedMDNode::getNumOperands(v5);
    if (!NumOperands)
      goto LABEL_240;
    v10 = NumOperands;
    v162 = Int32Ty;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v163 = 0;
    v164 = 0;
    v165 = 0;
    v166 = NumOperands;
    while (1)
    {
      v174 = 0;
      Operand = llvm::NamedMDNode::getOperand(v177, v11);
      v174 = Operand;
      v22 = (_QWORD *)(Operand - 16);
      v23 = *(_QWORD *)(Operand - 16);
      if ((v23 & 2) != 0)
      {
        if (*(_DWORD *)(Operand - 24) != 3)
          goto LABEL_15;
      }
      else if (((v23 >> 6) & 0xF) != 3)
      {
        goto LABEL_15;
      }
      v173 = 0;
      if ((*v22 & 2) != 0)
      {
        v24 = *(llvm::MDString **)(*(_QWORD *)(Operand - 32) + 8);
        if (!v24)
          goto LABEL_15;
      }
      else
      {
        v24 = (llvm::MDString *)v22[-((*v22 >> 2) & 0xFLL) + 1];
        if (!v24)
          goto LABEL_15;
      }
      if (*(_BYTE *)v24)
        goto LABEL_15;
      v170[0] = (uint64_t *)this;
      v170[1] = (uint64_t *)&v173;
      v170[2] = &v174;
      v170[3] = (uint64_t *)&v177;
      v171 = &v175;
      v172 = &v176;
      v173 = v24;
      String = (_QWORD *)llvm::MDString::getString(v24);
      if (v26 == 30)
      {
        v30 = *String == 0x76697463656A624FLL
           && String[1] == 0x67616D4920432D65
           && String[2] == 0x56206F666E492065
           && *(_QWORD *)((char *)String + 22) == 0x6E6F697372655620;
        v168 = v30;
        v31 = llvm::MDString::getString(v173);
        if (v32 == 28)
        {
LABEL_42:
          v39 = *(_QWORD *)v31 == 0x76697463656A624FLL
             && *(_QWORD *)(v31 + 8) == 0x73616C4320432D65
             && *(_QWORD *)(v31 + 16) == 0x7265706F72502073
             && *(_DWORD *)(v31 + 24) == 1936025972;
          v167 = v39;
          v33 = llvm::MDString::getString(v173);
          if (v40 != 9)
            goto LABEL_59;
          goto LABEL_55;
        }
      }
      else
      {
        v168 = 0;
        v31 = llvm::MDString::getString(v173);
        if (v35 == 28)
          goto LABEL_42;
      }
      v167 = 0;
      v33 = llvm::MDString::getString(v173);
      if (v34 != 9)
        goto LABEL_59;
LABEL_55:
      if (*(_QWORD *)v33 == 0x6576654C20434950 && *(_BYTE *)(v33 + 8) == 108)
      {
        v55 = *(_QWORD *)(v174 - 16);
        if ((v55 & 2) != 0)
        {
          v56 = **(_QWORD **)(v174 - 32);
          if (!v56)
            goto LABEL_59;
        }
        else
        {
          v56 = *(_QWORD *)(v174 - 16 - 8 * ((v55 >> 2) & 0xF));
          if (!v56)
            goto LABEL_59;
        }
        if (*(_BYTE *)v56 != 1)
          goto LABEL_59;
        v64 = *(_QWORD *)(v56 + 128);
        if (*(_BYTE *)(v64 + 16) != 16)
          goto LABEL_59;
        v65 = v12;
        v66 = v15;
        v67 = (_QWORD *)(v64 + 24);
        v68 = *(_DWORD *)(v64 + 32);
        if (v68 >= 0x41)
        {
          v81 = v68 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v64 + 24));
          v15 = v66;
          v12 = v65;
          if (v81 > 0x40)
            goto LABEL_59;
          v67 = (_QWORD *)*v67;
        }
        else
        {
          v15 = v66;
          v12 = v65;
        }
        if (*v67 == 7 || *v67 == 1)
          llvm::UpgradeModuleFlags(llvm::Module &)::$_0::operator()(v170, (llvm::LLVMContext *)8);
      }
LABEL_59:
      v42 = llvm::MDString::getString(v173);
      if (v43 != 9)
        goto LABEL_64;
      if (*(_QWORD *)v42 != 0x6576654C20454950 || *(_BYTE *)(v42 + 8) != 108)
        goto LABEL_64;
      v57 = *(_QWORD *)(v174 - 16);
      if ((v57 & 2) != 0)
      {
        v58 = **(_QWORD **)(v174 - 32);
        if (!v58)
          goto LABEL_64;
      }
      else
      {
        v58 = *(_QWORD *)(v174 - 16 - 8 * ((v57 >> 2) & 0xF));
        if (!v58)
          goto LABEL_64;
      }
      if (*(_BYTE *)v58 == 1)
      {
        v69 = *(_QWORD *)(v58 + 128);
        if (*(_BYTE *)(v69 + 16) == 16)
        {
          v70 = v12;
          v71 = v15;
          v72 = (_QWORD *)(v69 + 24);
          v73 = *(_DWORD *)(v69 + 32);
          if (v73 >= 0x41)
          {
            v83 = v73 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v69 + 24));
            v15 = v71;
            v12 = v70;
            if (v83 > 0x40)
              goto LABEL_64;
            v72 = (_QWORD *)*v72;
          }
          else
          {
            v15 = v71;
            v12 = v70;
          }
          if (*v72 == 1)
            llvm::UpgradeModuleFlags(llvm::Module &)::$_0::operator()(v170, (llvm::LLVMContext *)7);
        }
      }
LABEL_64:
      v45 = llvm::MDString::getString(v173);
      if (v46 == (llvm::LLVMContext *)25
        && (*(_QWORD *)v45 == 0x742D68636E617262 ? (v47 = *(_QWORD *)(v45 + 8) == 0x6E652D7465677261) : (v47 = 0),
            v47 ? (v48 = *(_QWORD *)(v45 + 16) == 0x6E656D6563726F66) : (v48 = 0),
            v48 ? (v49 = *(_BYTE *)(v45 + 24) == 116) : (v49 = 0),
            v49)
        || (v50 = (_QWORD *)llvm::MDString::getString(v173), (unint64_t)v46 >= 0x13)
        && (*v50 == 0x7465722D6E676973 ? (v51 = v50[1] == 0x726464612D6E7275) : (v51 = 0),
            v51 ? (v52 = *(_QWORD *)((char *)v50 + 11) == 0x737365726464612DLL) : (v52 = 0),
            v52))
      {
        v53 = *(_QWORD *)(v174 - 16);
        if ((v53 & 2) != 0)
        {
          v54 = **(_QWORD **)(v174 - 32);
          if (!v54)
            goto LABEL_130;
        }
        else
        {
          v54 = *(_QWORD *)(v174 - 16 - 8 * ((v53 >> 2) & 0xF));
          if (!v54)
            goto LABEL_130;
        }
        if (*(_BYTE *)v54 != 1)
          goto LABEL_130;
        v59 = *(_QWORD *)(v54 + 128);
        if (*(_BYTE *)(v59 + 16) != 16)
          goto LABEL_130;
        v60 = v12;
        v61 = v15;
        v62 = (_QWORD **)(v59 + 24);
        v63 = *(_DWORD *)(v59 + 32);
        if (v63 >= 0x41)
        {
          v74 = v63 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v59 + 24));
          v15 = v61;
          v12 = v60;
          if (v74 > 0x40 || **v62 != 1)
            goto LABEL_130;
        }
        else
        {
          v15 = v61;
          v12 = v60;
          if (*v62 != (_QWORD *)1)
            goto LABEL_130;
        }
        v75 = (llvm::ConstantInt *)llvm::Type::getInt32Ty(*(llvm::Type **)this, v46);
        __p = 0;
        v182 = 0;
        v183 = 0;
        v76 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v75, 8, 0);
        __p = llvm::ValueAsMetadata::get(v76, v77);
        v78 = (_QWORD *)(v174 - 16);
        v79 = *(_QWORD *)(v174 - 16);
        if ((v79 & 2) != 0)
          v80 = *(_QWORD **)(v174 - 32);
        else
          v80 = &v78[-((v79 >> 2) & 0xF)];
        v182 = v80[1];
        if ((*v78 & 2) != 0)
          v84 = *(_QWORD **)(v174 - 32);
        else
          v84 = &v78[-((*v78 >> 2) & 0xFLL)];
        v183 = (llvm::ValueAsMetadata *)v84[2];
        v85 = v177;
        v86 = v175;
        Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(*(_QWORD *)this, &__p, 3uLL, 0, 1);
        llvm::NamedMDNode::setOperand((uint64_t)v85, v86, Impl);
        v176 = 1;
        v12 = v60;
      }
LABEL_130:
      v88 = (_QWORD *)llvm::MDString::getString(v173);
      if (v89 != 30)
        goto LABEL_141;
      v90 = *v88 == 0x76697463656A624FLL && v88[1] == 0x67616D4920432D65;
      v91 = v90 && v88[2] == 0x53206F666E492065;
      if (!v91 || *(_QWORD *)((char *)v88 + 22) != 0x6E6F697463655320)
        goto LABEL_141;
      v102 = *(_QWORD *)(v174 - 16);
      if ((v102 & 2) != 0)
      {
        v103 = *(llvm::MDString **)(*(_QWORD *)(v174 - 32) + 16);
        if (!v103)
          goto LABEL_141;
      }
      else
      {
        v103 = *(llvm::MDString **)(v174 - 8 * ((v102 >> 2) & 0xF));
        if (!v103)
          goto LABEL_141;
      }
      if (*(_BYTE *)v103)
        goto LABEL_141;
      __p = &v183;
      v182 = 0x400000000;
      v169.__r_.__value_.__r.__words[0] = llvm::MDString::getString(v103);
      v169.__r_.__value_.__l.__size_ = v104;
      llvm::StringRef::split((__int128 *)&v169, (uint64_t)&__p, " ", 1uLL, -1, 1);
      if ((_DWORD)v182 != 1)
      {
        v160 = v15;
        v161 = v14;
        memset(&v169, 0, sizeof(v169));
        if ((_DWORD)v182)
        {
          v105 = 16 * v182;
          v106 = (size_t *)((char *)__p + 8);
          while (1)
          {
            v107 = v13;
            v108 = v12;
            v109 = (const void *)*(v106 - 1);
            if (v109)
              break;
            v112 = 0;
            v113 = 0;
            v114 = 0;
            __dst = 0;
            v179 = 0;
            v180 = 0;
            v12 = v108;
LABEL_177:
            v13 = v107;
            if ((v114 & 0x80u) == 0)
              p_dst = (const std::string::value_type *)&__dst;
            else
              p_dst = v113;
            if ((v114 & 0x80u) == 0)
              v120 = v114;
            else
              v120 = v112;
            std::string::append(&v169, p_dst, v120);
            if (SHIBYTE(v180) < 0)
              operator delete(__dst);
            v106 += 2;
            v105 -= 16;
            if (!v105)
              goto LABEL_208;
          }
          v110 = *v106;
          if (*v106 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v110 >= 0x17)
          {
            v115 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v110 | 7) != 0x17)
              v115 = v110 | 7;
            v116 = Int8Ty;
            v117 = v115 + 1;
            v111 = (void **)operator new(v115 + 1);
            v118 = v117 | 0x8000000000000000;
            Int8Ty = v116;
            v179 = v110;
            v180 = v118;
            __dst = v111;
          }
          else
          {
            HIBYTE(v180) = *v106;
            v111 = &__dst;
            if (!v110)
              goto LABEL_176;
          }
          memmove(v111, v109, v110);
LABEL_176:
          v12 = v108;
          *((_BYTE *)v111 + v110) = 0;
          v114 = HIBYTE(v180);
          v113 = (const std::string::value_type *)__dst;
          v112 = v179;
          v10 = v166;
          goto LABEL_177;
        }
LABEL_208:
        __dst = 0;
        v179 = 0;
        v180 = 0;
        v142 = (_QWORD *)(v174 - 16);
        v143 = *(_QWORD *)(v174 - 16);
        if ((v143 & 2) != 0)
          v144 = *(void ***)(v174 - 32);
        else
          v144 = (void **)&v142[-((v143 >> 2) & 0xF)];
        __dst = *v144;
        v145 = v12;
        if ((*v142 & 2) != 0)
          v146 = *(_QWORD **)(v174 - 32);
        else
          v146 = &v142[-((*v142 >> 2) & 0xFLL)];
        v15 = v160;
        v14 = v161;
        v179 = v146[1];
        if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v147 = &v169;
        else
          v147 = (std::string *)v169.__r_.__value_.__r.__words[0];
        if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v169.__r_.__value_.__r.__words[2]);
        else
          size = v169.__r_.__value_.__l.__size_;
        v180 = llvm::MDString::get(*(_QWORD **)this, (int8x16_t *)v147, (const unsigned __int8 *)size);
        v149 = v177;
        v150 = v175;
        v151 = (llvm::MDNode *)llvm::MDTuple::getImpl(*(_QWORD *)this, &__dst, 3uLL, 0, 1);
        llvm::NamedMDNode::setOperand((uint64_t)v149, v150, v151);
        v176 = 1;
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);
        LODWORD(v12) = v145;
      }
      if (__p != &v183)
        free(__p);
LABEL_141:
      v93 = (_QWORD *)llvm::MDString::getString(v173);
      if (v94 != 30
        || (*v93 == 0x76697463656A624FLL ? (v95 = v93[1] == 0x6272614720432D65) : (v95 = 0),
            v95 ? (v96 = v93[2] == 0x6C6C6F4320656761) : (v96 = 0),
            v96 ? (v97 = *(_QWORD *)((char *)v93 + 22) == 0x6E6F697463656C6CLL) : (v97 = 0),
            !v97))
      {
LABEL_155:
        v100 = (_QWORD *)llvm::MDString::getString(v173);
        if (v101 == 19)
          goto LABEL_4;
        goto LABEL_156;
      }
      v98 = *(_QWORD *)(v174 - 16);
      if ((v98 & 2) != 0)
      {
        v99 = *(_QWORD *)(*(_QWORD *)(v174 - 32) + 16);
        if (*(_BYTE *)v99 != 1)
          goto LABEL_155;
      }
      else
      {
        v99 = *(_QWORD *)(v174 - 8 * ((v98 >> 2) & 0xF));
        if (*(_BYTE *)v99 != 1)
          goto LABEL_155;
      }
      v121 = *(llvm::Constant **)(v99 + 128);
      if (*(_QWORD *)v121 == Int8Ty)
      {
        v20 = v167;
        v19 = v168;
        goto LABEL_14;
      }
      UniqueInteger = llvm::Constant::getUniqueInteger(v121);
      if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u)
        v123 = *(unint64_t **)UniqueInteger;
      else
        v123 = (unint64_t *)UniqueInteger;
      LODWORD(v124) = v15;
      v125 = *v123;
      v126 = *v123 >= 0x100;
      v127 = BYTE1(*v123);
      v128 = v165;
      if (v126)
        v128 = v127;
      v165 = v128;
      if (v126)
        v129 = v125 >> 16;
      else
        v129 = v164;
      v164 = v129;
      if (v126)
        v130 = v125 >> 24;
      else
        v130 = v163;
      v163 = v130;
      if (v126)
        v124 = 1;
      else
        v124 = v124;
      __p = 0;
      v182 = 0;
      v183 = 0;
      v131 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v162, 1, 0);
      __p = llvm::ValueAsMetadata::get(v131, v132);
      v133 = *(_QWORD *)(v174 - 16);
      v134 = v12;
      if ((v133 & 2) != 0)
        v135 = *(_QWORD *)(v174 - 32);
      else
        v135 = v174 - 16 - 8 * ((v133 >> 2) & 0xF);
      v182 = *(_QWORD *)(v135 + 8);
      v136 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int8Ty, v125, 0);
      v183 = llvm::ValueAsMetadata::get(v136, v137);
      v138 = v177;
      v139 = v175;
      v140 = (llvm::MDNode *)llvm::MDTuple::getImpl(*(_QWORD *)this, &__p, 3uLL, 0, 1);
      llvm::NamedMDNode::setOperand((uint64_t)v138, v139, v140);
      v176 = 1;
      v15 = v124;
      v10 = v166;
      LODWORD(v12) = v134;
      v100 = (_QWORD *)llvm::MDString::getString(v173);
      if (v141 == 19)
      {
LABEL_4:
        v18 = *v100 == 0x2E68747561727470
           && v100[1] == 0x737265762D696261
           && *(_QWORD *)((char *)v100 + 11) == 0x6E6F69737265762DLL;
        goto LABEL_13;
      }
LABEL_156:
      v18 = 0;
LABEL_13:
      v20 = v167;
      v19 = v168;
      v14 |= v18;
LABEL_14:
      v12 = v19 | v12;
      v13 = v20 | v13;
LABEL_15:
      v11 = v175 + 1;
      v175 = v11;
      if (v11 == v10)
      {
        if (v13 & 1 | ((v12 & 1) == 0))
        {
          if ((v15 & 1) == 0)
            goto LABEL_227;
        }
        else
        {
          llvm::Module::addModuleFlag((llvm::Type **)this, (llvm::LLVMContext *)4, (int8x16_t *)"Objective-C Class Properties", (const unsigned __int8 *)0x1C, 0);
          v176 = 1;
          if ((v15 & 1) == 0)
          {
LABEL_227:
            if ((v14 & 1) != 0)
            {
LABEL_228:
              v152 = v176;
              return v152 != 0;
            }
LABEL_240:
            LOWORD(v171) = 260;
            v170[0] = (uint64_t *)((char *)this + 208);
            llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v170);
            v158 = v184 == 3 && v185 == 34;
            v159 = v158;
            if (v158)
              llvm::Module::setPtrAuthABIVersion((llvm::Type **)this, (llvm::LLVMContext *)0xFFFFFFFFLL);
            if (SHIBYTE(v183) < 0)
              operator delete(__p);
            v152 = v176 | v159;
            return v152 != 0;
          }
        }
        llvm::Module::addModuleFlag((llvm::Type **)this, (llvm::LLVMContext *)1, (int8x16_t *)"Swift ABI Version", (const unsigned __int8 *)0x11, v165);
        v156 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int8Ty, v163, 0);
        llvm::Module::addModuleFlag((uint64_t *)this, (llvm::Value *)1, (int8x16_t *)"Swift Major Version", (const unsigned __int8 *)0x13, v156);
        v157 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int8Ty, v164, 0);
        llvm::Module::addModuleFlag((uint64_t *)this, (llvm::Value *)1, (int8x16_t *)"Swift Minor Version", (const unsigned __int8 *)0x13, v157);
        v176 = 1;
        if ((v14 & 1) != 0)
          goto LABEL_228;
        goto LABEL_240;
      }
    }
  }
  LOWORD(v171) = 260;
  v170[0] = (uint64_t *)((char *)this + 208);
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v170);
  v153 = v184 == 3 && v185 == 34;
  v154 = v153;
  if (v153)
  {
    llvm::Module::setPtrAuthABIVersion((llvm::Type **)this, (llvm::LLVMContext *)0xFFFFFFFFLL);
    if ((SHIBYTE(v183) & 0x80000000) == 0)
      return v154;
LABEL_254:
    operator delete(__p);
    return v154;
  }
  if (SHIBYTE(v183) < 0)
    goto LABEL_254;
  return v154;
}

uint64_t llvm::UpgradeModuleFlags(llvm::Module &)::$_0::operator()(uint64_t **a1, llvm::LLVMContext *a2)
{
  unsigned int v2;
  uint64_t Int32Ty;
  llvm::ValueAsMetadata *v5;
  llvm::Value *v6;
  _QWORD *v7;
  int8x16_t *String;
  const unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  llvm::MDNode *Impl;
  uint64_t result;
  _QWORD v19[4];

  v2 = a2;
  v19[3] = *MEMORY[0x1E0C80C00];
  Int32Ty = llvm::Type::getInt32Ty((llvm::Type *)**a1, a2);
  v5 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int32Ty, v2, 0);
  v19[0] = llvm::ValueAsMetadata::get(v5, v6);
  v7 = (_QWORD *)**a1;
  String = (int8x16_t *)llvm::MDString::getString((llvm::MDString *)*a1[1]);
  v19[1] = llvm::MDString::get(v7, String, v9);
  v10 = *a1[2];
  v13 = *(_QWORD *)(v10 - 16);
  v11 = v10 - 16;
  v12 = v13;
  if ((v13 & 2) != 0)
    v14 = *(_QWORD *)(*a1[2] - 32);
  else
    v14 = v11 - 8 * ((v12 >> 2) & 0xF);
  v19[2] = *(_QWORD *)(v14 + 16);
  v15 = *a1[3];
  v16 = *(_DWORD *)a1[4];
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(**a1, v19, 3uLL, 0, 1);
  result = llvm::NamedMDNode::setOperand(v15, v16, Impl);
  *(_BYTE *)a1[5] = 1;
  return result;
}

void llvm::UpgradeFunctionAttributes(llvm *this, llvm::Function *a2)
{
  llvm *v3;
  llvm *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12[2];
  uint64_t v13;
  _QWORD *v14;

  if (!llvm::GlobalValue::isDeclaration(this) && (llvm::Function::hasFnAttribute((uint64_t)this, 64) & 1) == 0)
  {
    v3 = (llvm *)*((_QWORD *)this + 10);
    if (v3 != (llvm *)((char *)this + 72))
    {
      do
      {
        v4 = (llvm *)*((_QWORD *)v3 + 1);
        if (v3)
          v5 = (_QWORD *)((char *)v3 - 24);
        else
          v5 = 0;
        v6 = (_QWORD *)v5[7];
        if (v6 != v5 + 6)
        {
          if (v6)
            v7 = v6 - 3;
          else
            v7 = 0;
          __asm { BR              X9 }
        }
        v3 = v4;
      }
      while (v4 != (llvm *)((char *)this + 72));
    }
  }
  llvm::AttributeFuncs::typeIncompatible(**(_QWORD **)(*((_QWORD *)this + 3) + 16), 3, v12);
  llvm::Function::removeRetAttrs((uint64_t)this, (uint64_t)v12);
  std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v13, v14);
  if ((*((_WORD *)this + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this);
    v8 = *((_QWORD *)this + 11);
    if ((*((_WORD *)this + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(this);
      v9 = *((_QWORD *)this + 11) + 40 * *((_QWORD *)this + 12);
      if (v8 == v9)
        return;
    }
    else
    {
      v9 = v8 + 40 * *((_QWORD *)this + 12);
      if (v8 == v9)
        return;
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 11);
    v9 = v8 + 40 * *((_QWORD *)this + 12);
    if (v8 == v9)
      return;
  }
  v10 = (uint64_t *)v8;
  do
  {
    v11 = *v10;
    v10 += 5;
    llvm::AttributeFuncs::typeIncompatible(v11, 3, v12);
    llvm::Argument::removeAttrs(v8, (uint64_t)v12);
    std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v13, v14);
    v8 = (uint64_t)v10;
  }
  while (v10 != (uint64_t *)v9);
}

llvm *llvm::upgradeInstructionLoopAttachment(llvm *this, llvm::MDNode *a2)
{
  llvm *v2;
  int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  llvm::MDString *v12;
  _QWORD *String;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t Impl;
  unint64_t v23;
  _QWORD *v24;
  llvm::MDString *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v37;
  int8x16_t *p_p;
  std::string::size_type size;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD v53[4];
  __int16 v54;
  std::string __p;
  void *v56;
  uint64_t v57;
  _BYTE v58[64];
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v2 = this;
  v61[8] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)this;
  if (v3 == 5)
    v4 = this;
  else
    v4 = 0;
  if (v3 != 5)
    return v2;
  v6 = (unint64_t *)((char *)this - 16);
  v5 = *((_QWORD *)this - 2);
  if ((v5 & 2) != 0)
  {
    v7 = (unint64_t *)*((_QWORD *)this - 4);
    v8 = *((unsigned int *)this - 6);
    if (!*((_DWORD *)this - 6))
      return v2;
  }
  else
  {
    v7 = &v6[-((v5 >> 2) & 0xF)];
    v8 = (v5 >> 6) & 0xF;
    if (!v8)
      return v2;
  }
  v9 = 8 * v8 - 8;
  do
  {
    v10 = (_BYTE *)*v7;
    if (!*v7)
      goto LABEL_21;
    if (*v10 != 5)
      goto LABEL_20;
    v11 = *((_QWORD *)v10 - 2);
    if ((v11 & 2) != 0)
    {
      if (!*((_DWORD *)v10 - 6) || (v12 = (llvm::MDString *)**((_QWORD **)v10 - 4)) == 0)
      {
LABEL_20:
        LODWORD(v10) = 0;
LABEL_21:
        if ((v10 & 1) != 0)
          break;
        goto LABEL_22;
      }
    }
    else
    {
      if ((v11 & 0x3C0) == 0)
        goto LABEL_20;
      v12 = *(llvm::MDString **)&v10[-8 * ((v11 >> 2) & 0xF) - 16];
      if (!v12)
        goto LABEL_20;
    }
    if (*(_BYTE *)v12)
      goto LABEL_20;
    String = (_QWORD *)llvm::MDString::getString(v12);
    if (v14 < 0x10)
      goto LABEL_20;
    v16 = *String == 0x6365762E6D766C6CLL && String[1] == 0x2E72657A69726F74;
    LODWORD(v10) = v16;
    if ((v10 & 1) != 0)
      break;
LABEL_22:
    ++v7;
    v15 = v9;
    v9 -= 8;
  }
  while (v15);
  if (!(_DWORD)v10)
    return v2;
  v56 = v58;
  v57 = 0x800000000;
  v17 = *v6;
  if ((*v6 & 2) != 0)
  {
    v18 = *((_DWORD *)v4 - 6);
    if (v18 < 9)
      goto LABEL_37;
    goto LABEL_36;
  }
  v18 = (v17 >> 6) & 0xF;
  if (v18 >= 9)
  {
LABEL_36:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, v18, 8);
    v17 = *v6;
  }
LABEL_37:
  if ((v17 & 2) != 0)
  {
    v19 = (uint64_t *)*((_QWORD *)v4 - 4);
    v20 = *((unsigned int *)v4 - 6);
    if (!*((_DWORD *)v4 - 6))
      goto LABEL_106;
    goto LABEL_41;
  }
  v19 = (uint64_t *)&v6[-((v17 >> 2) & 0xF)];
  v20 = (v17 >> 6) & 0xF;
  if (v20)
  {
LABEL_41:
    v21 = &v19[v20];
    do
    {
      Impl = *v19;
      if (!*v19 || *(_BYTE *)Impl != 5)
        goto LABEL_94;
      v24 = (_QWORD *)(Impl - 16);
      v23 = *(_QWORD *)(Impl - 16);
      if ((v23 & 2) != 0)
      {
        if (!*(_DWORD *)(Impl - 24))
          goto LABEL_94;
        v25 = **(llvm::MDString ***)(Impl - 32);
        if (!v25)
          goto LABEL_94;
      }
      else
      {
        if ((v23 & 0x3C0) == 0)
          goto LABEL_94;
        v25 = (llvm::MDString *)v24[-((v23 >> 2) & 0xF)];
        if (!v25)
          goto LABEL_94;
      }
      if (!*(_BYTE *)v25)
      {
        v26 = (_QWORD *)llvm::MDString::getString(v25);
        if (v27 >= 0x10 && *v26 == 0x6365762E6D766C6CLL && v26[1] == 0x2E72657A69726F74)
        {
          v59 = v61;
          v60 = 0x800000000;
          if ((*v24 & 2) != 0)
            v29 = *(unsigned int *)(Impl - 24);
          else
            v29 = (*v24 >> 6) & 0xFLL;
          if (v29 < 9)
          {
            v34 = *(_QWORD *)(Impl + 8);
            v31 = (_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF8);
            if ((v34 & 4) == 0)
              goto LABEL_65;
LABEL_62:
            v31 = (_QWORD *)*v31;
            v32 = (_QWORD *)llvm::MDString::getString(v25);
            if (v33 != 22)
              goto LABEL_73;
LABEL_66:
            if (*v32 != 0x6365762E6D766C6CLL
              || v32[1] != 0x2E72657A69726F74
              || *(_QWORD *)((char *)v32 + 14) != 0x6C6C6F726E752E72)
            {
              goto LABEL_73;
            }
            v40 = llvm::MDString::get(v31, (int8x16_t *)"llvm.loop.interleave.count", (const unsigned __int8 *)0x1A);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v29, 8);
            v30 = *(_QWORD *)(Impl + 8);
            v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
            if ((v30 & 4) != 0)
              goto LABEL_62;
LABEL_65:
            v32 = (_QWORD *)llvm::MDString::getString(v25);
            if (v33 == 22)
              goto LABEL_66;
LABEL_73:
            v37 = 16;
            if (v33 < 0x10)
              v37 = v33;
            v53[0] = "llvm.loop.vectorize.";
            v53[2] = (char *)v32 + v37;
            v53[3] = v33 - v37;
            v54 = 1283;
            llvm::Twine::str((llvm::Twine *)v53, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = (int8x16_t *)&__p;
            else
              p_p = (int8x16_t *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            v40 = llvm::MDString::get(v31, p_p, (const unsigned __int8 *)size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v41 = v60;
          if (v60 >= (unint64_t)HIDWORD(v60))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v60 + 1, 8);
            v41 = v60;
          }
          *((_QWORD *)v59 + v41) = v40;
          v42 = v60 + 1;
          LODWORD(v60) = v60 + 1;
          if ((*v24 & 2) != 0)
            v43 = *(unsigned int *)(Impl - 24);
          else
            v43 = (*v24 >> 6) & 0xFLL;
          if (v43 != 1)
          {
            v47 = 1;
            do
            {
              if ((*v24 & 2) != 0)
                v48 = *(_QWORD **)(Impl - 32);
              else
                v48 = &v24[-((*v24 >> 2) & 0xFLL)];
              v49 = v48[v47];
              if (v42 >= HIDWORD(v60))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v42 + 1, 8);
                v42 = v60;
              }
              *((_QWORD *)v59 + v42) = v49;
              v42 = v60 + 1;
              LODWORD(v60) = v60 + 1;
              ++v47;
            }
            while (v43 != v47);
          }
          v44 = *(_QWORD *)(Impl + 8);
          v45 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
          if ((v44 & 4) != 0)
            v45 = (_QWORD *)*v45;
          Impl = llvm::MDTuple::getImpl((uint64_t)v45, v59, v42, 0, 1);
          if (v59 != v61)
            free(v59);
        }
      }
LABEL_94:
      v46 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, v57 + 1, 8);
        v46 = v57;
      }
      *((_QWORD *)v56 + v46) = Impl;
      LODWORD(v57) = v57 + 1;
      ++v19;
    }
    while (v19 != v21);
  }
LABEL_106:
  v50 = *((_QWORD *)v4 + 1);
  v51 = (_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF8);
  if ((v50 & 4) != 0)
    v51 = (_QWORD *)*v51;
  v2 = (llvm *)llvm::MDTuple::getImpl((uint64_t)v51, v56, v57, 0, 1);
  if (v56 != v58)
    free(v56);
  return v2;
}

void llvm::UpgradeDataLayoutString(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t *v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  _WORD *v13;
  BOOL v14;
  void **p_data;
  unint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  const char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  std::string::size_type v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  void **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type size;
  const std::string::value_type *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  void *v48[4];
  __int16 v49;
  void **p_p;
  unint64_t v51;
  __int16 v52;
  std::string v53;
  __int16 v54;
  std::string v55;
  void *v56[2];
  uint64_t v57[2];
  void *__p;
  __int16 v59;
  char v60;
  uint64_t *v61;
  uint64_t *v62;
  void **v63;
  __int16 v64;
  void *v65;
  __int128 v66;
  uint64_t *v67;
  unint64_t v68;
  const char *v69;
  uint64_t *v70;
  __int16 v71;
  void *v72[2];
  char v73;
  int v74;
  int v75;
  int v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t **v79;
  uint64_t v80;
  _QWORD v81[2];
  __int16 v82;
  uint64_t v83;

  v5 = a1;
  v83 = *MEMORY[0x1E0C80C00];
  v77 = a1;
  v78 = a2;
  v82 = 261;
  v79 = a3;
  v80 = a4;
  llvm::Triple::Triple((llvm::Triple *)v72, (const llvm::Twine *)&v79);
  v7 = v74;
  if ((v74 - 25) > 1)
    goto LABEL_5;
  if (v74 == 26)
    goto LABEL_16;
  if (llvm::StringRef::find((uint64_t *)&v77, "-G", 2uLL, 0) != -1)
  {
LABEL_4:
    v7 = v74;
LABEL_5:
    if (v7 == 28)
    {
      v8 = llvm::StringRef::find((uint64_t *)&v77, "-n64-", 5uLL, 0);
      if (v8 != -1)
      {
        if (v78 >= v8)
          v9 = v8;
        else
          v9 = v78;
        v71 = 773;
        v67 = v77;
        v68 = v9;
        v69 = "-n32:64-";
        v10 = v8 + 5;
        if (v78 < v8 + 5)
          v10 = v78;
        v79 = &v67;
        v81[0] = (char *)v77 + v10;
        v81[1] = v78 - v10;
        v82 = 1282;
LABEL_13:
        llvm::Twine::str((llvm::Twine *)&v79, a5);
        if ((v73 & 0x80000000) == 0)
          return;
        goto LABEL_125;
      }
      v43 = v77;
      if (!v77)
      {
        a5->__r_.__value_.__r.__words[0] = 0;
        a5->__r_.__value_.__l.__size_ = 0;
        a5->__r_.__value_.__r.__words[2] = 0;
        if ((v73 & 0x80000000) == 0)
          return;
        goto LABEL_125;
      }
      v44 = v78;
      if (v78 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v78 >= 0x17)
        {
          v45 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v78 | 7) != 0x17)
            v45 = v78 | 7;
          v46 = v45 + 1;
          v47 = (std::string *)operator new(v45 + 1);
          a5->__r_.__value_.__l.__size_ = v44;
          a5->__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
          a5->__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
          a5 = v47;
        }
        else
        {
          *((_BYTE *)&a5->__r_.__value_.__s + 23) = v78;
          if (!v44)
            goto LABEL_123;
        }
        memmove(a5, v43, v44);
LABEL_123:
        a5->__r_.__value_.__s.__data_[v44] = 0;
        goto LABEL_124;
      }
LABEL_129:
      abort();
    }
    v5 = v77;
LABEL_16:
    if (!v5)
    {
      a5->__r_.__value_.__r.__words[0] = 0;
      a5->__r_.__value_.__l.__size_ = 0;
      a5->__r_.__value_.__r.__words[2] = 0;
      if (v7 == 26)
      {
LABEL_84:
        if (llvm::StringRef::find((uint64_t *)&v77, "-G", 2uLL, 0) == -1 && (!v78 || *(_BYTE *)v77 != 71))
        {
          size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
          if ((size & 0x80u) != 0)
            size = a5->__r_.__value_.__l.__size_;
          if (size)
            v40 = "-G1";
          else
            v40 = "G1";
          std::string::append(a5, v40);
        }
        v41 = llvm::StringRef::find((uint64_t *)&v77, "-ni", 3uLL, 0);
        v42 = v78;
        if (v41 == -1 && (v78 < 2 || *(_WORD *)v77 != 26990))
        {
          std::string::append(a5, "-ni:7:8");
          v42 = v78;
        }
        if (v42 >= 4 && *(_DWORD *)((char *)v77 + v42 - 4) == 926574958)
          std::string::append(a5, ":8");
        if (llvm::StringRef::find((uint64_t *)&v77, "-p7", 3uLL, 0) == -1 && (v78 < 2 || *(_WORD *)v77 != 14192))
          std::string::append(a5, "-p7:160:256:256:32");
        if (llvm::StringRef::find((uint64_t *)&v77, "-p8", 3uLL, 0) == -1 && (v78 < 2 || *(_WORD *)v77 != 14448))
        {
          std::string::append(a5, "-p8:128:128");
          if ((v73 & 0x80000000) == 0)
            return;
          goto LABEL_125;
        }
        goto LABEL_124;
      }
LABEL_22:
      if ((v7 - 37) <= 1)
      {
        v13 = operator new(0x28uLL);
        v66 = xmmword_181269AA0;
        v13[16] = 52;
        v14 = (a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        p_data = (void **)a5->__r_.__value_.__r.__words[0];
        v16 = HIBYTE(a5->__r_.__value_.__r.__words[2]);
        if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = a5->__r_.__value_.__l.__size_;
        v65 = v13;
        qmemcpy(v13, "-p270:32:32-p271:32:32-p272:64:6", 32);
        if (!v14)
          p_data = (void **)&a5->__r_.__value_.__l.__data_;
        p_p = p_data;
        v51 = v16;
        if (llvm::StringRef::find((uint64_t *)&p_p, (char *)v13, 0x21uLL, 0) == -1)
        {
          v79 = (uint64_t **)v81;
          v80 = 0x400000000;
          llvm::Regex::Regex((uint64_t)v48, "(e-m:[a-z](-p:32:32)?)(-[if]64:.*$)", 35, 0);
          v17 = SHIBYTE(a5->__r_.__value_.__r.__words[2]);
          if (v17 >= 0)
            v18 = (char *)a5;
          else
            v18 = (char *)a5->__r_.__value_.__r.__words[0];
          if (v17 >= 0)
            v19 = HIBYTE(a5->__r_.__value_.__r.__words[2]);
          else
            v19 = a5->__r_.__value_.__l.__size_;
          if (llvm::Regex::match((uint64_t)v48, v18, v19, (uint64_t)&v79, 0))
          {
            v20 = v79[3];
            v61 = v79[2];
            v62 = v20;
            v63 = &v65;
            v64 = 1029;
            v21 = (const char *)v79[6];
            v22 = v79[7];
            v67 = (uint64_t *)&v61;
            v69 = v21;
            v70 = v22;
            v71 = 1282;
            llvm::Twine::str((llvm::Twine *)&v67, &v53);
            if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
              operator delete(a5->__r_.__value_.__l.__data_);
            *a5 = v53;
          }
          llvm::Regex::~Regex(v48);
          if (v79 != v81)
            free(v79);
        }
        if (v75 != 25)
        {
          v60 = 9;
          v59 = 56;
          v23 = a5->__r_.__value_.__r.__words[0];
          v24 = HIBYTE(a5->__r_.__value_.__r.__words[2]);
          if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = (uint64_t)a5;
          else
            v24 = a5->__r_.__value_.__l.__size_;
          v57[0] = v23;
          v57[1] = v24;
          __p = *(void **)"-i128:128";
          if (llvm::StringRef::find(v57, (char *)&__p, 9uLL, 0) == -1)
          {
            v79 = (uint64_t **)v81;
            v80 = 0x400000000;
            llvm::Regex::Regex((uint64_t)v56, "^(e(-[mpi][^-]*)*)((-[^mpi][^-]*)*)$", 36, 0);
            v25 = SHIBYTE(a5->__r_.__value_.__r.__words[2]);
            if (v25 >= 0)
              v26 = (char *)a5;
            else
              v26 = (char *)a5->__r_.__value_.__r.__words[0];
            if (v25 >= 0)
              v27 = HIBYTE(a5->__r_.__value_.__r.__words[2]);
            else
              v27 = a5->__r_.__value_.__l.__size_;
            if (llvm::Regex::match((uint64_t)v56, v26, v27, (uint64_t)&v79, 0))
            {
              v54 = 261;
              v28 = (std::string::size_type)v79[3];
              v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v79[2];
              v53.__r_.__value_.__l.__size_ = v28;
              v52 = 260;
              p_p = &__p;
              llvm::operator+((uint64_t *)&v53, (uint64_t *)&p_p, (uint64_t)&v61);
              v49 = 261;
              v29 = v79[7];
              v48[0] = v79[6];
              v48[1] = v29;
              llvm::operator+((uint64_t *)&v61, (uint64_t *)v48, (uint64_t)&v67);
              llvm::Twine::str((llvm::Twine *)&v67, &v55);
              if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
                operator delete(a5->__r_.__value_.__l.__data_);
              *a5 = v55;
            }
            llvm::Regex::~Regex(v56);
            if (v79 != v81)
              free(v79);
          }
          if (v60 < 0)
            operator delete(__p);
          if (v75 == 14 && (v76 == 19 || !v76) && !llvm::Triple::isArch64Bit((llvm::Triple *)v72))
          {
            v30 = SHIBYTE(a5->__r_.__value_.__r.__words[2]);
            v31 = v30 < 0;
            v32 = (void **)a5->__r_.__value_.__r.__words[0];
            if (v30 >= 0)
              v32 = (void **)&a5->__r_.__value_.__l.__data_;
            v33 = HIBYTE(a5->__r_.__value_.__r.__words[2]);
            if (v31)
              v33 = a5->__r_.__value_.__l.__size_;
            p_p = v32;
            v51 = v33;
            v34 = llvm::StringRef::find((uint64_t *)&p_p, "-f80:32-", 8uLL, 0);
            if (v34 != -1)
            {
              if (v51 >= v34)
                v35 = v34;
              else
                v35 = v51;
              v71 = 773;
              v67 = (uint64_t *)p_p;
              v68 = v35;
              v69 = "-f80:128-";
              v36 = v34 + 8;
              if (v51 < v34 + 8)
                v36 = v51;
              v64 = 261;
              v61 = (uint64_t *)((char *)p_p + v36);
              v62 = (uint64_t *)(v51 - v36);
              llvm::operator+((uint64_t *)&v67, (uint64_t *)&v61, (uint64_t)&v79);
              llvm::Twine::str((llvm::Twine *)&v79, &v53);
              if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
                operator delete(a5->__r_.__value_.__l.__data_);
              *a5 = v53;
            }
          }
        }
        if (SHIBYTE(v66) < 0)
        {
          operator delete(v65);
          if ((v73 & 0x80000000) == 0)
            return;
          goto LABEL_125;
        }
      }
LABEL_124:
      if ((v73 & 0x80000000) == 0)
        return;
      goto LABEL_125;
    }
    v11 = v78;
    if (v78 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_129;
    if (v78 >= 0x17)
    {
      v37 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v78 | 7) != 0x17)
        v37 = v78 | 7;
      v38 = v37 + 1;
      v12 = operator new(v37 + 1);
      a5->__r_.__value_.__l.__size_ = v11;
      a5->__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
      a5->__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    }
    else
    {
      *((_BYTE *)&a5->__r_.__value_.__s + 23) = v78;
      v12 = a5;
      if (!v11)
      {
LABEL_83:
        v12[v11] = 0;
        v7 = v74;
        if (v74 == 26)
          goto LABEL_84;
        goto LABEL_22;
      }
    }
    memmove(v12, v5, v11);
    goto LABEL_83;
  }
  if (v78)
  {
    if (*(_BYTE *)v77 != 71)
    {
      v82 = 773;
      v79 = (uint64_t **)v77;
      v80 = v78;
      v81[0] = "-G1";
      goto LABEL_13;
    }
    goto LABEL_4;
  }
  *((_BYTE *)&a5->__r_.__value_.__s + 23) = 2;
  strcpy((char *)a5, "G1");
  if (v73 < 0)
LABEL_125:
    operator delete(v72[0]);
}

uint64_t **llvm::UpgradeAttributes(uint64_t **this, llvm::AttrBuilder *a2)
{
  unsigned int *ValueAsString;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  size_t v10;
  uint64_t **result;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t **Attribute;

  Attribute = (uint64_t **)llvm::AttrBuilder::getAttribute((uint64_t)this, "no-frame-pointer-elim", 0x15uLL);
  if (!Attribute)
  {
    if (!llvm::AttrBuilder::contains((uint64_t)this, "no-frame-pointer-elim-non-leaf", 0x1EuLL))
      goto LABEL_21;
LABEL_17:
    v4 = "non-leaf";
    v10 = 8;
    goto LABEL_18;
  }
  ValueAsString = (unsigned int *)llvm::Attribute::getValueAsString((llvm::Attribute *)&Attribute);
  v4 = "none";
  if (v5 == 4)
  {
    v6 = bswap32(*ValueAsString);
    v7 = v6 >= 0x74727565;
    v8 = v6 > 0x74727565;
    v9 = !v7;
    if (v8 == v9)
      v4 = "all";
  }
  v10 = strlen(v4);
  llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim", 0x15uLL);
  if (!llvm::AttrBuilder::contains((uint64_t)this, "no-frame-pointer-elim-non-leaf", 0x1EuLL))
  {
    if (!v10)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (v10 != 3)
    goto LABEL_17;
  if (*(_WORD *)v4 != 27745 || v4[2] != 108)
    goto LABEL_17;
  v10 = 3;
LABEL_18:
  llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim-non-leaf", 0x1EuLL);
LABEL_20:
  llvm::AttrBuilder::addAttribute(this, "frame-pointer", 0xDuLL, (unsigned __int8 *)v4, v10);
LABEL_21:
  result = (uint64_t **)llvm::AttrBuilder::getAttribute((uint64_t)this, "null-pointer-is-valid", 0x15uLL);
  Attribute = result;
  if (result)
  {
    v13 = (int *)llvm::Attribute::getValueAsString((llvm::Attribute *)&Attribute);
    if (v14 == 4)
    {
      v15 = *v13;
      result = (uint64_t **)llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 0x15uLL);
      if (v15 == 1702195828)
        return llvm::AttrBuilder::addAttribute(this, 40);
    }
    else
    {
      return (uint64_t **)llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 0x15uLL);
    }
  }
  return result;
}

uint64_t llvm::UpgradeOperandBundles(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  __int128 v21;
  void *v22;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v3 = *a1;
  }
  else
  {
    while (1)
    {
      v4 = *(unsigned __int8 *)(v2 + 23);
      v5 = (char)v4;
      if ((v4 & 0x80u) != 0)
        v4 = *(_QWORD *)(v2 + 8);
      if (v4 == 22)
      {
        v6 = v5 >= 0 ? (uint64_t *)v2 : *(uint64_t **)v2;
        v7 = *v6;
        v8 = v6[1];
        v9 = *(uint64_t *)((char *)v6 + 14);
        v10 = v7 == 0x72612E676E616C63 && v8 == 0x6863617474612E63;
        v11 = v10 && v9 == 0x6C6C616364656863;
        if (v11 && *(_QWORD *)(v2 + 32) == *(_QWORD *)(v2 + 24))
          break;
      }
      v2 += 48;
      if (v2 == v3)
      {
        v2 = a1[1];
        return std::vector<llvm::OperandBundleDefT<llvm::Value *>>::erase((uint64_t)a1, v2, v3);
      }
    }
    if (v2 != v3)
    {
      v12 = v2 + 48;
      if (v2 + 48 != v3)
      {
        do
        {
          v13 = *(unsigned __int8 *)(v12 + 23);
          v14 = (char)v13;
          if ((v13 & 0x80u) != 0)
            v13 = *(_QWORD *)(v12 + 8);
          if (v13 != 22
            || (v14 >= 0 ? (v15 = (uint64_t *)v12) : (v15 = *(uint64_t **)v12),
                (v16 = *v15, v17 = v15[1], v18 = *(uint64_t *)((char *)v15 + 14), v16 == 0x72612E676E616C63)
              ? (v19 = v17 == 0x6863617474612E63)
              : (v19 = 0),
                v19 ? (v20 = v18 == 0x6C6C616364656863) : (v20 = 0),
                !v20 || *(_QWORD *)(v12 + 32) != *(_QWORD *)(v12 + 24)))
          {
            if (*(char *)(v2 + 23) < 0)
              operator delete(*(void **)v2);
            v21 = *(_OWORD *)v12;
            *(_QWORD *)(v2 + 16) = *(_QWORD *)(v12 + 16);
            *(_OWORD *)v2 = v21;
            *(_BYTE *)(v12 + 23) = 0;
            *(_BYTE *)v12 = 0;
            v22 = *(void **)(v2 + 24);
            if (v22)
            {
              *(_QWORD *)(v2 + 32) = v22;
              operator delete(v22);
              *(_QWORD *)(v2 + 24) = 0;
              *(_QWORD *)(v2 + 32) = 0;
              *(_QWORD *)(v2 + 40) = 0;
            }
            *(_OWORD *)(v2 + 24) = *(_OWORD *)(v12 + 24);
            *(_QWORD *)(v2 + 40) = *(_QWORD *)(v12 + 40);
            *(_QWORD *)(v12 + 24) = 0;
            *(_QWORD *)(v12 + 32) = 0;
            *(_QWORD *)(v12 + 40) = 0;
            v2 += 48;
          }
          v12 += 48;
        }
        while (v12 != v3);
        v3 = a1[1];
      }
    }
  }
  return std::vector<llvm::OperandBundleDefT<llvm::Value *>>::erase((uint64_t)a1, v2, v3);
}

uint64_t llvm::StringSwitch<unsigned int,unsigned int>::Cases(uint64_t a1, const void *a2, uint64_t a3, void *__s2, uint64_t a5, int a6)
{
  const void *v11;
  size_t v12;

  if (*(_BYTE *)(a1 + 20))
    return a1;
  v11 = *(const void **)a1;
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 != a3 || v12 && memcmp(*(const void **)a1, a2, *(_QWORD *)(a1 + 8)))
    && (v12 != a5 || v12 && memcmp(v11, __s2, v12)))
  {
    return a1;
  }
  *(_DWORD *)(a1 + 16) = a6;
  *(_BYTE *)(a1 + 20) = 1;
  return a1;
}

uint64_t llvm::StringSwitch<unsigned int,unsigned int>::Case(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  size_t v7;

  if (*(_BYTE *)(a1 + 20))
    return a1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 != a3 || v7 && memcmp(*(const void **)a1, a2, v7))
    return a1;
  *(_DWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 20) = 1;
  return a1;
}

BOOL UpgradeX86IntrinsicFunction(llvm::Value *a1, _DWORD *a2, unint64_t a3, llvm::Function **a4)
{
  _BOOL8 result;
  _DWORD *v7;
  size_t v8;
  BOOL v9;
  const char *v10;
  uint64_t *v11;
  int v12;
  llvm::Function *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  llvm::Function *v19;
  int v20;
  const char *v23;
  llvm::Function *v34;
  int v35;
  llvm::Function *v40;
  int v41;
  llvm::Function *v45;
  int v46;
  BOOL v53;
  BOOL v54;
  uint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  const char *v62;
  int v63;
  int ScalarSizeInBits;
  const char *Name;
  const char *v67;
  const char *v68;
  __int16 v69;

  if (a3 >= 4)
  {
    if (*a2 != 775305336)
      return 0;
    v7 = a2 + 1;
    v8 = a3 - 4;
    if (ShouldUpgradeX86Intrinsic(a2 + 1, a3 - 4))
    {
      *a4 = 0;
      return 1;
    }
    if (v8 == 6)
    {
      v9 = *v7 == 1937007730 && *((_WORD *)v7 + 2) == 28771;
      if (!v9 || *(_DWORD *)(*((_QWORD *)a1 + 3) + 12) == 1)
        return 0;
      v69 = 773;
      Name = llvm::Value::getName(a1);
      v67 = v10;
      v68 = ".old";
      llvm::Value::setName(a1, &Name);
      v11 = (uint64_t *)*((_QWORD *)a1 + 5);
      v12 = 13111;
      goto LABEL_210;
    }
    if (v8 < 0xB)
      goto LABEL_22;
    if (*(_QWORD *)v7 != 0x74702E3134657373 || *(_QWORD *)((char *)v7 + 3) != 0x74736574702E3134)
      goto LABEL_22;
    v17 = (unsigned __int8 *)v7 + 11;
    if (v8 == 14)
    {
      if (!memcmp(v17, "nzc", 3uLL))
      {
        v19 = a1;
        v20 = 13244;
        return UpgradePTESTIntrinsic(v19, v20, a4);
      }
    }
    else if (v8 == 12)
    {
      v18 = *v17;
      if (v18 == 122)
      {
        v19 = a1;
        v20 = 13245;
        return UpgradePTESTIntrinsic(v19, v20, a4);
      }
      if (v18 == 99)
      {
        v19 = a1;
        v20 = 13243;
        return UpgradePTESTIntrinsic(v19, v20, a4);
      }
    }
LABEL_22:
    switch(v8)
    {
      case 0xAuLL:
        if (!memcmp(v7, "sse41.dppd", v8))
        {
          v15 = a1;
          v16 = 13236;
          return UpgradeX86IntrinsicsWith8BitMask(v15, v16, a4);
        }
        if (*(_QWORD *)v7 == 0x70642E3134657373 && *((_WORD *)v7 + 4) == 29552)
        {
          v15 = a1;
          v16 = 13237;
          return UpgradeX86IntrinsicsWith8BitMask(v15, v16, a4);
        }
        return 0;
      case 0xCuLL:
        if (memcmp(v7, "avx2.mpsadbw", v8))
          goto LABEL_145;
        v15 = a1;
        v16 = 12147;
        return UpgradeX86IntrinsicsWith8BitMask(v15, v16, a4);
      case 0xDuLL:
        if (!memcmp(v7, "sse41.mpsadbw", v8))
        {
          v15 = a1;
          v16 = 13239;
        }
        else
        {
          if (*(_QWORD *)v7 != 0x702E70642E787661 || *(_QWORD *)((char *)v7 + 5) != 0x3635322E73702E70)
            goto LABEL_145;
          v15 = a1;
          v16 = 12078;
        }
        return UpgradeX86IntrinsicsWith8BitMask(v15, v16, a4);
      case 0xEuLL:
        if (*(_QWORD *)v7 != 0x6E692E3134657373 || *(_QWORD *)((char *)v7 + 6) != 0x7370747265736E69)
          goto LABEL_145;
        result = llvm::Type::isIntegerTy(*(llvm::Type **)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16)+ 8 * (*(_DWORD *)(*((_QWORD *)a1 + 3) + 12) - 1)), 32);
        if (!result)
          return result;
        v69 = 773;
        Name = llvm::Value::getName(a1);
        v67 = v23;
        v68 = ".old";
        llvm::Value::setName(a1, &Name);
        v11 = (uint64_t *)*((_QWORD *)a1 + 5);
        v12 = 13238;
        goto LABEL_210;
      case 0x16uLL:
        if (!memcmp(v7, "avx512.mask.cmp.pd.128", v8))
        {
          v34 = a1;
          v35 = 12307;
        }
        else if (*(_QWORD *)v7 == 0x6D2E323135787661
               && *((_QWORD *)v7 + 1) == 0x2E706D632E6B7361
               && *(_QWORD *)((char *)v7 + 14) == 0x3635322E64702E70)
        {
          v34 = a1;
          v35 = 12308;
        }
        else if (*(_QWORD *)v7 == 0x6D2E323135787661
               && *((_QWORD *)v7 + 1) == 0x2E706D632E6B7361
               && *(_QWORD *)((char *)v7 + 14) == 0x3231352E64702E70)
        {
          v34 = a1;
          v35 = 12309;
        }
        else if (*(_QWORD *)v7 == 0x6D2E323135787661
               && *((_QWORD *)v7 + 1) == 0x2E706D632E6B7361
               && *(_QWORD *)((char *)v7 + 14) == 0x3832312E73702E70)
        {
          v34 = a1;
          v35 = 12310;
        }
        else if (*(_QWORD *)v7 == 0x6D2E323135787661
               && *((_QWORD *)v7 + 1) == 0x2E706D632E6B7361
               && *(_QWORD *)((char *)v7 + 14) == 0x3635322E73702E70)
        {
          v34 = a1;
          v35 = 12311;
        }
        else
        {
          if (*(_QWORD *)v7 != 0x6D2E323135787661
            || *((_QWORD *)v7 + 1) != 0x2E706D632E6B7361
            || *(_QWORD *)((char *)v7 + 14) != 0x3231352E73702E70)
          {
            goto LABEL_145;
          }
          v34 = a1;
          v35 = 12312;
        }
        return UpgradeX86MaskedFPCompare(v34, v35, a4);
      case 0x17uLL:
        if (!memcmp(v7, "avx512bf16.dpbf16ps.128", v8))
        {
          v40 = a1;
          v41 = 12807;
        }
        else if (*(_QWORD *)v7 == 0x6662323135787661
               && *((_QWORD *)v7 + 1) == 0x31666270642E3631
               && *(_QWORD *)((char *)v7 + 15) == 0x3635322E73703631)
        {
          v40 = a1;
          v41 = 12808;
        }
        else
        {
          if (*(_QWORD *)v7 != 0x6662323135787661
            || *((_QWORD *)v7 + 1) != 0x31666270642E3631
            || *(_QWORD *)((char *)v7 + 15) != 0x3231352E73703631)
          {
            goto LABEL_145;
          }
          v40 = a1;
          v41 = 12809;
        }
        return UpgradeX86BF16DPIntrinsic(v40, v41, a4);
      case 0x1BuLL:
        if (!memcmp(v7, "avx512bf16.cvtneps2bf16.256", v8))
        {
          v45 = a1;
          v46 = 12805;
          return UpgradeX86BF16Intrinsic(v45, v46, a4);
        }
        if (*(_QWORD *)v7 == 0x6662323135787661
          && *((_QWORD *)v7 + 1) == 0x656E7476632E3631
          && *((_QWORD *)v7 + 2) == 0x2E36316662327370
          && *(_QWORD *)((char *)v7 + 19) == 0x3231352E36316662)
        {
          v45 = a1;
          v46 = 12806;
          return UpgradeX86BF16Intrinsic(v45, v46, a4);
        }
        goto LABEL_145;
      case 0x1CuLL:
        if (!memcmp(v7, "avx512bf16.cvtne2ps2bf16.128", v8))
        {
          v45 = a1;
          v46 = 12802;
        }
        else if (*(_QWORD *)v7 == 0x6662323135787661
               && *((_QWORD *)v7 + 1) == 0x656E7476632E3631
               && *((_QWORD *)v7 + 2) == 0x3631666232737032
               && v7[6] == 909455918)
        {
          v45 = a1;
          v46 = 12803;
        }
        else
        {
          if (*(_QWORD *)v7 != 0x6662323135787661
            || *((_QWORD *)v7 + 1) != 0x656E7476632E3631
            || *((_QWORD *)v7 + 2) != 0x3631666232737032
            || v7[6] != 842085678)
          {
LABEL_145:
            v53 = *(_QWORD *)v7 == 0x637266762E706F78 && v7[2] == 1936928378;
            if (v53 && *((_QWORD *)a1 + 12) == 2)
            {
              rename(a1);
              v11 = (uint64_t *)*((_QWORD *)a1 + 5);
              v12 = 13391;
            }
            else
            {
              v54 = *(_QWORD *)v7 == 0x637266762E706F78 && v7[2] == 1685270138;
              if (v54 && *((_QWORD *)a1 + 12) == 2)
              {
                rename(a1);
                v11 = (uint64_t *)*((_QWORD *)a1 + 5);
                v12 = 13390;
              }
              else
              {
                if (*(_QWORD *)v7 != 0x726570762E706F78 || v7[2] != 845965677)
                  goto LABEL_167;
                v57 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 24);
                v58 = *(_DWORD *)(v57 + 8);
                if ((v58 & 0xFE) == 0x12)
                  v58 = *(_DWORD *)(**(_QWORD **)(v57 + 16) + 8);
                v59 = v58 < 4u || v58 == 5;
                v60 = v58 & 0xFD;
                if (v59 || v60 == 4)
                {
                  rename(a1);
                  Name = (const char *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v57);
                  v67 = v62;
                  v63 = llvm::TypeSize::operator unsigned long long(&Name, v62);
                  ScalarSizeInBits = llvm::Type::getScalarSizeInBits((llvm::Type *)v57);
                  if (ScalarSizeInBits == 64 && v63 == 128)
                  {
                    v12 = 13392;
                  }
                  else if (ScalarSizeInBits == 32 && v63 == 128)
                  {
                    v12 = 13394;
                  }
                  else if (v63 == 256 && ScalarSizeInBits == 64)
                  {
                    v12 = 13393;
                  }
                  else
                  {
                    v12 = 13395;
                  }
                  v11 = (uint64_t *)*((_QWORD *)a1 + 5);
                }
                else
                {
LABEL_167:
                  if (v8 != 13)
                    return 0;
                  if (*(_QWORD *)v7 != 0x6F6365722E686573 || *(_QWORD *)((char *)v7 + 5) != 0x70667265766F6365)
                    return 0;
                  v11 = (uint64_t *)*((_QWORD *)a1 + 5);
                  v12 = 70;
                }
              }
            }
LABEL_210:
            *a4 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v11, v12, 0, 0);
            return 1;
          }
          v45 = a1;
          v46 = 12804;
        }
        return UpgradeX86BF16Intrinsic(v45, v46, a4);
      case 0x20uLL:
        if (memcmp(v7, "avx512bf16.mask.cvtneps2bf16.128", v8))
          goto LABEL_145;
        v45 = a1;
        v46 = 12810;
        return UpgradeX86BF16Intrinsic(v45, v46, a4);
      default:
        if (v8 < 0xC)
          return 0;
        goto LABEL_145;
    }
  }
  return 0;
}

BOOL ShouldUpgradeX86Intrinsic(_DWORD *a1, size_t a2)
{
  _QWORD *v2;
  size_t v3;
  BOOL v4;
  BOOL v8;
  _DWORD *v9;
  unint64_t v10;
  BOOL v11;
  size_t v13;
  _WORD *v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v20;
  _DWORD *v21;
  char v25;
  BOOL v29;
  char v30;
  _QWORD *v32;
  size_t v33;
  _BOOL8 v37;
  char v40;
  int v43;
  char v51;
  int v64;
  BOOL v65;
  int v66;
  _DWORD *v67;
  size_t v68;
  size_t v69;
  BOOL v70;
  int v71;
  _QWORD *v72;
  uint64_t v87;
  BOOL v90;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  const char *v97;
  uint64_t v98;
  _DWORD *v99;
  size_t v100;
  BOOL v101;
  char v102;
  char v103;
  char v104;
  _QWORD *v113;
  unint64_t v114;
  BOOL v115;
  BOOL v126;
  char v129;
  BOOL v135;
  unint64_t v136;
  _QWORD *v142;
  BOOL v147;
  char v153;
  BOOL v173;
  char v174;
  BOOL v175;
  char v193;
  char v206;
  BOOL v207;
  BOOL v208;
  BOOL v209;
  BOOL v210;
  BOOL v211;
  BOOL v212;
  BOOL v213;
  BOOL v214;
  BOOL v215;
  BOOL v216;
  BOOL v217;
  BOOL v218;
  BOOL v219;
  BOOL v220;
  BOOL v221;
  BOOL v222;
  BOOL v223;
  BOOL v224;
  BOOL v225;
  BOOL v226;
  BOOL v227;
  BOOL v228;
  BOOL v229;
  BOOL v230;
  BOOL v275;
  BOOL v276;
  BOOL v277;
  BOOL v295;
  char v296;
  void *__s1;
  size_t __n;

  __s1 = a1;
  __n = a2;
  if (a2 < 4)
  {
LABEL_2:
    if (llvm::StringRef::consume_front((const void **)&__s1, "sse2.", 5uLL))
    {
      v2 = __s1;
      v3 = __n;
      switch(__n)
      {
        case 0xAuLL:
          if (!memcmp(__s1, "cvtsi642sd", 0xAuLL))
            return 1;
          break;
        case 8uLL:
          if (!memcmp(__s1, "cvtdq2pd", 8uLL)
            || *v2 == 0x7370327164747663
            || *v2 == 0x6470327370747663
            || *v2 == 0x6473326973747663
            || !memcmp(v2, "cvtss2sd", 8uLL))
          {
            return 1;
          }
          break;
        case 6uLL:
          v4 = *(_DWORD *)__s1 == 778331233 && *((_WORD *)__s1 + 2) == 25715;
          if (v4 || !memcmp(__s1, "div.sd", __n))
            return 1;
          if (*(_DWORD *)v2 == 778859885 && *((_WORD *)v2 + 2) == 25715)
            return 1;
          break;
        default:
          if (__n < 6)
          {
            v25 = 1;
            goto LABEL_106;
          }
          break;
      }
      if (*(_DWORD *)v2 == 1684300144 && *((_WORD *)v2 + 2) == 11891)
        return 1;
      if (v3 < 7)
      {
        v25 = 0;
        v30 = 1;
        goto LABEL_295;
      }
      if (*(_DWORD *)v2 == 1684300144 && *(_DWORD *)((char *)v2 + 3) == 779318628)
        return 1;
      if (*(_DWORD *)v2 == 1886217072 && *(_DWORD *)((char *)v2 + 3) == 779183472)
        return 1;
      if (*(_DWORD *)v2 == 1886217072 && *(_DWORD *)((char *)v2 + 3) == 779380592)
        return 1;
      v25 = 0;
      if (v3 == 8)
      {
        v30 = 0;
        if (!memcmp(v2, "pmulu.dq", 8uLL))
          return 1;
        goto LABEL_295;
      }
LABEL_106:
      if (v3 == 7)
      {
        if (*(_DWORD *)v2 == 2019650928 && *(_DWORD *)((char *)v2 + 3) == 1999532920)
          return 1;
        if (*(_DWORD *)v2 == 2019650928 && *(_DWORD *)((char *)v2 + 3) == 1647211896)
          return 1;
        if (*(_DWORD *)v2 == 1852403056 && *(_DWORD *)((char *)v2 + 3) == 1999532910)
          return 1;
        v29 = *(_DWORD *)v2 == 1852403056 && *(_DWORD *)((char *)v2 + 3) == 1647211886;
        v30 = v25;
        if (v29)
          return 1;
      }
      else
      {
        v30 = v25;
        if (v3 < 5)
        {
LABEL_299:
          if ((v30 & 1) == 0)
          {
            if (*(_DWORD *)v2 == 1819046768 && *(_DWORD *)((char *)v2 + 3) == 1902390892)
              return 1;
            if (*(_DWORD *)v2 == 1819439984 && *(_DWORD *)((char *)v2 + 3) == 1902390892)
              return 1;
          }
          if ((v25 & 1) == 0 && *(_DWORD *)v2 == 1651864432 && *((_WORD *)v2 + 2) == 11891)
            return 1;
          if ((v30 & 1) == 0 && *(_DWORD *)v2 == 1651864432 && *(_DWORD *)((char *)v2 + 3) == 779318626)
            return 1;
          if ((v25 & 1) == 0 && *(_DWORD *)v2 == 1953657203 && *((_WORD *)v2 + 2) == 28718)
            return 1;
          if (v3 == 9)
          {
            if (!memcmp(v2, "storel.dq", 9uLL))
              return 1;
          }
          else if (v3 == 7 && *(_DWORD *)v2 == 1953657203 && *(_DWORD *)((char *)v2 + 3) == 1685270132)
          {
            return 1;
          }
          if ((v30 & 1) != 0
            || (*(_DWORD *)v2 == 1919906931 ? (v90 = *(_DWORD *)((char *)v2 + 3) == 779445618) : (v90 = 0), !v90))
          {
            if (v3 == 6)
            {
              v64 = *((unsigned __int16 *)v2 + 2);
              v65 = *(_DWORD *)v2 == 778204531;
              v66 = 25715;
              return v65 && v64 == v66;
            }
            return 0;
          }
          return 1;
        }
      }
LABEL_295:
      if (*(_DWORD *)v2 == 1969779568 && *((_BYTE *)v2 + 4) == 102)
        return 1;
      goto LABEL_299;
    }
    if (llvm::StringRef::consume_front((const void **)&__s1, "sse41.", 6uLL))
    {
      v13 = __n;
      if (__n > 5)
      {
        v14 = __s1;
        if (*(_DWORD *)__s1 == 1852140642 && *((_WORD *)__s1 + 2) == 28772)
          return 1;
      }
      else
      {
        v14 = __s1;
      }
      switch(__n)
      {
        case 6uLL:
          if (!memcmp(v14, "pmaxsb", 6uLL))
            return 1;
          if (*(_DWORD *)v14 == 2019650928 && v14[2] == 25715)
            return 1;
          if (*(_DWORD *)v14 == 2019650928 && v14[2] == 25717)
            return 1;
          if (*(_DWORD *)v14 == 2019650928 && v14[2] == 30581)
            return 1;
          if (*(_DWORD *)v14 == 1852403056 && v14[2] == 25203)
            return 1;
          if (*(_DWORD *)v14 == 1852403056 && v14[2] == 25715)
            return 1;
          if (*(_DWORD *)v14 == 1852403056 && v14[2] == 25717)
            return 1;
          if (*(_DWORD *)v14 == 1852403056 && v14[2] == 30581)
            return 1;
          break;
        case 7uLL:
          if (!memcmp(v14, "pblendw", 7uLL))
            return 1;
          break;
        case 8uLL:
          if (*(_QWORD *)v14 == 0x617164746E766F6DLL)
            return 1;
          break;
        default:
          if (__n < 6)
            return 0;
          break;
      }
      if ((*(_DWORD *)v14 != 1987014000 || v14[2] != 30835) && (*(_DWORD *)v14 != 1987014000 || v14[2] != 30842))
      {
        if (v13 == 6)
        {
          v64 = (unsigned __int16)v14[2];
          v65 = *(_DWORD *)v14 == 1819635056;
          v66 = 29028;
          return v65 && v64 == v66;
        }
        return 0;
      }
    }
    else
    {
      if (llvm::StringRef::consume_front((const void **)&__s1, "sse42.", 6uLL))
      {
        if (__n == 10)
          return *(_QWORD *)__s1 == 0x34362E3233637263 && *((_WORD *)__s1 + 4) == 14382;
        return 0;
      }
      if (llvm::StringRef::consume_front((const void **)&__s1, "sse4a.", 6uLL))
      {
        if (__n >= 6)
          return *(_DWORD *)__s1 == 1853255533 && *((_WORD *)__s1 + 2) == 11892;
        return 0;
      }
      if (!llvm::StringRef::consume_front((const void **)&__s1, "ssse3.", 6uLL))
      {
        v71 = llvm::StringRef::consume_front((const void **)&__s1, "xop.", 4uLL);
        v72 = __s1;
        if (!v71)
        {
          if (__n == 13)
          {
            if (!memcmp(__s1, "addcarryx.u32", 0xDuLL))
              return 1;
            if (*v72 == 0x7972726163646461 && *(_QWORD *)((char *)v72 + 5) == 0x3436752E78797272)
              return 1;
            if (*v72 == 0x6F72726F62627573 && *(_QWORD *)((char *)v72 + 5) == 0x3233752E776F7272)
              return 1;
            if (*v72 == 0x6F72726F62627573 && *(_QWORD *)((char *)v72 + 5) == 0x3436752E776F7272)
              return 1;
          }
          else if (__n == 12)
          {
            if (*(_QWORD *)__s1 == 0x7972726163646461 && *((_DWORD *)__s1 + 2) == 842233134)
              return 1;
            if (*(_QWORD *)__s1 == 0x7972726163646461 && *((_DWORD *)__s1 + 2) == 875984174)
              return 1;
          }
          else if (__n < 0xA)
          {
            return 0;
          }
          v64 = *((unsigned __int16 *)v72 + 4);
          v65 = *v72 == 0x7032687074766376;
          v66 = 11891;
          return v65 && v64 == v66;
        }
        if (__n == 10)
        {
          if (!memcmp(__s1, "vpcmov.256", 0xAuLL))
            return 1;
        }
        else if (__n == 6)
        {
          if (*(_DWORD *)__s1 == 1835233398 && *((_WORD *)__s1 + 2) == 30319)
            return 1;
        }
        else if (__n < 5)
        {
          return 0;
        }
        if (!(*(_DWORD *)v72 ^ 0x6F637076 | *((unsigned __int8 *)v72 + 4) ^ 0x6D))
          return 1;
        v64 = *((unsigned __int8 *)v72 + 4);
        v65 = *(_DWORD *)v72 == 1869770870;
        v66 = 116;
        return v65 && v64 == v66;
      }
      if (__n != 10)
        return 0;
      if ((*(_QWORD *)__s1 != 0x312E622E73626170 || *((_WORD *)__s1 + 4) != 14386)
        && (*(_QWORD *)__s1 != 0x312E642E73626170 || *((_WORD *)__s1 + 4) != 14386))
      {
        return *(_QWORD *)__s1 == 0x312E772E73626170 && *((_WORD *)__s1 + 4) == 14386;
      }
    }
    return 1;
  }
  if (*a1 == 779646561)
  {
    v15 = a1 + 1;
    v16 = a2 - 4;
    if (a2 - 4 >= 7 && *v15 == 1852140642 && *(_DWORD *)((char *)a1 + 7) == 1882088558)
      return 1;
    if (a2 == 17)
    {
      if (!memcmp(v15, "cvtdq2.pd.256", 0xDuLL))
        return 1;
      if (*(_QWORD *)v15 == 0x702E327164747663 && *(_QWORD *)((char *)v15 + 5) == 0x3635322E73702E32)
        return 1;
    }
    else if (a2 == 18)
    {
      if (*(_QWORD *)v15 == 0x2E3273702E747663 && *(_QWORD *)((char *)a1 + 10) == 0x3635322E64702E32)
        return 1;
    }
    else if (v16 < 6)
    {
      return 0;
    }
    if (*v15 == 1853255533 && *((_WORD *)v15 + 2) == 11892)
      return 1;
    v43 = *v15 ^ 0x74727173 | *((unsigned __int16 *)v15 + 2) ^ 0x702E;
    v37 = v43 == 0;
    if (!v43 || v16 < 7)
      return v37;
    if (*v15 == 1919906931 && *(_DWORD *)((char *)v15 + 3) == 779445618)
      return 1;
    if (v16 < 0xC)
    {
      if (v16 != 11)
      {
        if (v16 < 8)
          return 0;
        return *(_QWORD *)v15 == 0x2E6C696D72657076;
      }
LABEL_539:
      if (*(_QWORD *)v15 == 0x3166326D72657076 && *(_QWORD *)((char *)v15 + 3) == 0x2E38323166326D72)
        return 1;
      return *(_QWORD *)v15 == 0x2E6C696D72657076;
    }
    if (*(_QWORD *)v15 == 0x616364616F726276 && v15[2] == 1932424307)
      return 1;
    if (v16 >= 0xE)
    {
      if (*(_QWORD *)v15 == 0x616364616F726276 && *(_QWORD *)((char *)v15 + 6) == 0x3832316674736163)
        return 1;
    }
    else if (v16 != 13)
    {
      goto LABEL_535;
    }
    if (*(_QWORD *)v15 == 0x7463617274786576 && *(_QWORD *)((char *)v15 + 5) == 0x2E38323166746361)
      return 1;
LABEL_535:
    if (*(_QWORD *)v15 == 0x66747265736E6976 && v15[2] == 775434801)
      return 1;
    goto LABEL_539;
  }
  if (a2 < 5)
  {
LABEL_28:
    if (*a1 != 778136934)
    {
      if (a2 < 5 || (*a1 == 878800230 ? (v8 = *((_BYTE *)a1 + 4) == 46) : (v8 = 0), !v8))
      {
        if (*a1 != 778400627)
          goto LABEL_2;
        v9 = a1 + 1;
        v10 = a2 - 4;
        switch(a2)
        {
          case 0xEuLL:
            if (!memcmp(a1 + 1, "cvtsi642ss", 0xAuLL))
              return 1;
            break;
          case 0xCuLL:
            if (!memcmp(a1 + 1, "cvtsi2ss", 8uLL))
              return 1;
            break;
          case 0xAuLL:
            v11 = *v9 == 778331233 && *((_WORD *)a1 + 4) == 29555;
            if (v11 || !memcmp(v9, "div.ss", 6uLL))
              return 1;
            if (*v9 == 778859885 && *((_WORD *)v9 + 2) == 29555)
              return 1;
            break;
          default:
            if (v10 < 6)
              return 0;
            break;
        }
        if (*v9 == 1953657203 && *((_WORD *)v9 + 2) == 28718)
          return 1;
        if (v10 == 7)
        {
          if (*v9 == 1953657203 && *(_DWORD *)((char *)v9 + 3) == 1936928372)
            return 1;
        }
        else if (v10 < 7)
        {
          v64 = *((unsigned __int16 *)v9 + 2);
          v65 = *v9 == 778204531;
          v66 = 29555;
          return v65 && v64 == v66;
        }
        return *v9 == 1919906931 && *(_DWORD *)((char *)v9 + 3) == 779445618;
      }
      if (a2 - 5 < 8)
        return 0;
      return *(_QWORD *)((char *)a1 + 5) == 0x732E6464616D6676;
    }
    v20 = a2 - 4;
    if (a2 - 4 < 7)
      return 0;
    v21 = a1 + 1;
    if (a1[1] == 1634559606 && *(_DWORD *)((char *)a1 + 7) == 778331233)
      return 1;
    if (*v21 == 1936549494 && *(_DWORD *)((char *)a1 + 7) == 778204531)
      return 1;
    if (v20 >= 0xA)
    {
      if (*(_QWORD *)v21 == 0x64616275736D6676 && *((_WORD *)a1 + 6) == 11876)
        return 1;
    }
    else if (v20 < 8)
    {
      return 0;
    }
    v37 = *(_QWORD *)v21 == 0x2E6464616D6E6676;
    if (*(_QWORD *)v21 == 0x2E6464616D6E6676)
      return v37;
    v87 = *(_QWORD *)v21;
    return v87 == 0x2E6275736D6E6676;
  }
  if (*a1 == 846755425 && *((_BYTE *)a1 + 4) == 46)
  {
    v32 = (_QWORD *)((char *)a1 + 5);
    v33 = a2 - 5;
    if (a2 == 13)
    {
      if (*v32 == 0x617164746E766F6DLL)
        return 1;
      if (*(_DWORD *)v32 == 1935827312 && *((_BYTE *)a1 + 9) == 46)
        return 1;
      if (*(_DWORD *)v32 == 1684300144 && *(_WORD *)((char *)a1 + 9) == 11891)
        return 1;
      if (*(_DWORD *)v32 == 1684300144 && a1[2] == 779318628)
        return 1;
      v37 = 1;
      if (*v32 == 0x2E64646E656C6270)
        return v37;
    }
    else
    {
      if (v33 < 5)
        goto LABEL_212;
      if (*(_DWORD *)v32 == 1935827312 && *((_BYTE *)a1 + 9) == 46)
        return 1;
      if (v33 < 6)
      {
LABEL_212:
        LOBYTE(v37) = 1;
        v40 = 1;
LABEL_213:
        v51 = v40;
        if (v33 < 4)
          goto LABEL_216;
        if (*(_DWORD *)v32 == 2019650928)
          return 1;
LABEL_215:
        if (*(_DWORD *)v32 == 1852403056)
          return 1;
LABEL_216:
        if ((v51 & 1) == 0)
        {
          if (*(_DWORD *)v32 == 1987014000 && *(_WORD *)((char *)a1 + 9) == 30835)
            return 1;
          if (*(_DWORD *)v32 == 1987014000 && *(_WORD *)((char *)a1 + 9) == 30842)
            return 1;
        }
        if (a2 == 13)
        {
          if (!memcmp(v32, "pmulu.dq", 8uLL))
            return 1;
        }
        else if (a2 == 12 && *(_DWORD *)v32 == 1819635056 && a1[2] == 1902390892)
        {
          return 1;
        }
        if ((v40 & 1) != 0
          || (*(_DWORD *)v32 == 1819046768 ? (v92 = *(_DWORD *)((char *)v32 + 3) == 1902390892) : (v92 = 0),
              !v92
           && (*(_DWORD *)v32 == 1819439984 ? (v93 = *(_DWORD *)((char *)v32 + 3) == 1902390892) : (v93 = 0), !v93)))
        {
          if ((v51 & 1) != 0
            || (*(_DWORD *)v32 == 1651864432 ? (v94 = *((unsigned __int16 *)v32 + 2) == 11891) : (v94 = 0), !v94))
          {
            if ((v40 & 1) != 0
              || (*(_DWORD *)v32 == 1651864432 ? (v95 = *(_DWORD *)((char *)v32 + 3) == 779318626) : (v95 = 0), !v95))
            {
              if (v37
                || (*v32 == 0x616364616F726276 ? (v96 = *((unsigned __int16 *)v32 + 4) == 29811) : (v96 = 0), !v96))
              {
                v37 = 0;
                switch(v33)
                {
                  case 0xAuLL:
                    v97 = "vperm2i128";
                    return memcmp(v32, v97, v33) == 0;
                  case 0xBuLL:
                    v97 = "vinserti128";
                    return memcmp(v32, v97, v33) == 0;
                  case 0xCuLL:
                    v97 = "vextracti128";
                    return memcmp(v32, v97, v33) == 0;
                  case 0xEuLL:
                    return *v32 == 0x616364616F726276 && *(_QWORD *)((char *)v32 + 6) == 0x3832316974736163;
                  default:
                    return v37;
                }
              }
            }
          }
        }
        return 1;
      }
      if (*(_DWORD *)v32 == 1684300144 && *(_WORD *)((char *)a1 + 9) == 11891)
        return 1;
      if (v33 < 7)
      {
        v51 = 0;
        v40 = 1;
        LOBYTE(v37) = 1;
        if (*(_DWORD *)v32 == 2019650928)
          return 1;
        goto LABEL_215;
      }
      if (*(_DWORD *)v32 == 1684300144 && a1[2] == 779318628)
        return 1;
      if (v33 >= 8)
      {
        if (*v32 == 0x2E64646E656C6270)
          return 1;
        if (v33 >= 0xA)
        {
          if (*v32 == 0x616364616F726270 && *(_WORD *)((char *)a1 + 13) == 29811)
            return 1;
          LOBYTE(v37) = 0;
        }
        else
        {
          LOBYTE(v37) = 1;
        }
      }
      else
      {
        v135 = *(_DWORD *)v32 == 1701601904 && a1[2] == 2003070565;
        v37 = 1;
        if (v135)
          return v37;
      }
    }
    if (*(_DWORD *)v32 == 1886217072 && a1[2] == 779183472)
      return 1;
    if (*(_DWORD *)v32 == 1886217072 && a1[2] == 779380592)
      return 1;
    v40 = 0;
    goto LABEL_213;
  }
  if (a2 < 7)
    goto LABEL_28;
  if (*a1 != 897087073 || *(_DWORD *)((char *)a1 + 3) != 775041333)
    goto LABEL_28;
  v67 = (_DWORD *)((char *)a1 + 7);
  v68 = a2 - 7;
  v69 = a2 - 12;
  v70 = a2 - 7 < 5;
  if (a2 - 7 < 5)
    goto LABEL_280;
  if (*v67 == 1802723693 && *((_BYTE *)a1 + 11) == 46)
  {
    v98 = 5;
    if (v68 < 5)
      v98 = a2 - 7;
    v99 = (_DWORD *)((char *)v67 + v98);
    v100 = v68 - v98;
    __s1 = v99;
    __n = v68 - v98;
    if (v68 - v98 < 5)
    {
      if (v100 != 4)
      {
        LOBYTE(v37) = 1;
        v103 = 1;
        v102 = 1;
        v104 = 1;
        v101 = 1;
        if (v100 != 13)
          goto LABEL_602;
        goto LABEL_436;
      }
      v101 = 1;
      v102 = 1;
      v103 = 1;
      v37 = 1;
      if (*v99 == 778333793)
        return v37;
LABEL_434:
      if (v100 < 9)
      {
        v104 = 0;
        LOBYTE(v37) = 1;
        goto LABEL_602;
      }
      if (*(_QWORD *)v99 == 0x7463696C666E6F63 && *((_BYTE *)v99 + 8) == 46)
        return 1;
      if (*(_QWORD *)v99 == 0x6470327164747663 && *((_BYTE *)v99 + 8) == 46)
        return 1;
      if (*(_QWORD *)v99 == 0x7370327164747663 && *((_BYTE *)v99 + 8) == 46)
        return 1;
      if (v100 == 12)
      {
        if (*(_QWORD *)v99 == 0x7164326470747663 && v99[2] == 909455918)
          return 1;
        if (*(_QWORD *)v99 == 0x7370326470747663 && v99[2] == 909455918)
          return 1;
        if (*(_QWORD *)v99 == 0x6470327370747663 && v99[2] == 942813486)
          return 1;
        if (*(_QWORD *)v99 == 0x6470327370747663 && v99[2] == 909455918)
          return 1;
      }
      if (*(_QWORD *)v99 == 0x6470327171747663 && *((_BYTE *)v99 + 8) == 46)
        return 1;
      LOBYTE(v37) = 0;
      v104 = 0;
      if (v100 != 13)
      {
LABEL_602:
        if (v100 == 12)
        {
          if (*(_QWORD *)v99 == 0x7370327171747663 && v99[2] == 909455918)
            return 1;
          if (*(_QWORD *)v99 == 0x7370327171747663 && v99[2] == 842085678)
            return 1;
        }
LABEL_611:
        if ((v103 & 1) == 0)
        {
          if (*(_QWORD *)v99 == 0x7032716475747663 && *((_WORD *)v99 + 4) == 11876)
            return 1;
          if (*(_QWORD *)v99 == 0x7032716475747663 && *((_WORD *)v99 + 4) == 11891)
            return 1;
          if (*(_QWORD *)v99 == 0x7032717175747663 && *((_WORD *)v99 + 4) == 11876)
            return 1;
        }
        if (v100 == 13)
        {
          if (*(_QWORD *)v99 == 0x7032717175747663 && *(_QWORD *)((char *)v99 + 5) == 0x3635322E73703271)
            return 1;
          if (*(_QWORD *)v99 == 0x7032717175747663 && *(_QWORD *)((char *)v99 + 5) == 0x3231352E73703271)
            return 1;
        }
        else if (v37)
        {
          if (v100 < 5)
          {
            if (v100 >= 3)
            {
              v208 = *(_WORD *)v99 == 29295 && *((_BYTE *)v99 + 2) == 46;
              v37 = 1;
              v173 = 1;
              v174 = 1;
              v175 = 1;
              if (v208)
                return v37;
            }
            else
            {
              LOBYTE(v37) = 1;
              v173 = 1;
              v174 = 1;
              v175 = 1;
            }
LABEL_955:
            if ((v104 & 1) != 0 || *v99 != 1735811440)
            {
              if ((v103 & 1) != 0
                || (*(_QWORD *)v99 == 0x616364616F726270
                  ? (v209 = *((unsigned __int16 *)v99 + 4) == 29811)
                  : (v209 = 0),
                    !v209))
              {
                if (v173
                  || (*v99 == 1886217072 ? (v210 = *(_DWORD *)((char *)v99 + 3) == 779183472) : (v210 = 0),
                      !v210
                   && (*v99 == 1886217072 ? (v211 = *(_DWORD *)((char *)v99 + 3) == 779380592) : (v211 = 0), !v211)))
                {
                  if (v175
                    || *(_QWORD *)v99 != 0x2E66642E6D726570
                    && *(_QWORD *)v99 != 0x2E69642E6D726570
                    && *(_QWORD *)v99 != 0x2E7261766D726570)
                  {
                    if (v101
                      || (*(_QWORD *)v99 == 0x7362756464616D70
                        ? (v212 = *(_QWORD *)((char *)v99 + 3) == 0x2E772E7362756464)
                        : (v212 = 0),
                          !v212))
                    {
                      if (v37
                        || (*(_QWORD *)v99 == 0x642E776464616D70 ? (v213 = *((_BYTE *)v99 + 8) == 46) : (v213 = 0),
                            !v213))
                      {
                        if ((v104 & 1) != 0 || *v99 != 2019650928 && *v99 != 1852403056)
                        {
                          if (v100 != 11
                            || (*(_QWORD *)v99 == 0x2E64712E766F6D70
                              ? (v214 = *(_QWORD *)((char *)v99 + 3) == 0x3635322E64712E76)
                              : (v214 = 0),
                                !v214
                             && (*(_QWORD *)v99 == 0x2E64712E766F6D70
                               ? (v215 = *(_QWORD *)((char *)v99 + 3) == 0x3231352E64712E76)
                               : (v215 = 0),
                                 !v215
                              && (*(_QWORD *)v99 == 0x2E62772E766F6D70
                                ? (v216 = *(_QWORD *)((char *)v99 + 3) == 0x3635322E62772E76)
                                : (v216 = 0),
                                  !v216
                               && (*(_QWORD *)v99 == 0x2E62772E766F6D70
                                 ? (v217 = *(_QWORD *)((char *)v99 + 3) == 0x3231352E62772E76)
                                 : (v217 = 0),
                                   !v217)))))
                          {
                            if ((v174 & 1) != 0
                              || (*v99 == 1987014000 ? (v218 = *((unsigned __int16 *)v99 + 2) == 30835) : (v218 = 0),
                                  !v218
                               && (*v99 == 1987014000 ? (v219 = *((unsigned __int16 *)v99 + 2) == 30842) : (v219 = 0),
                                   !v219)))
                            {
                              if (v175 || *(_QWORD *)v99 != 0x2E71642E6C756D70)
                              {
                                if (v101
                                  || (*(_QWORD *)v99 == 0x2E72682E6C756D70
                                    ? (v220 = *(_QWORD *)((char *)v99 + 3) == 0x2E77732E72682E6CLL)
                                    : (v220 = 0),
                                      !v220))
                                {
                                  if (v175 || *(_QWORD *)v99 != 0x2E772E686C756D70)
                                  {
                                    if (v37
                                      || (*(_QWORD *)v99 == 0x772E75686C756D70
                                        ? (v221 = *((_BYTE *)v99 + 8) == 46)
                                        : (v221 = 0),
                                          !v221))
                                    {
                                      if ((v174 & 1) != 0
                                        || (*v99 == 1819635056
                                          ? (v222 = *((unsigned __int16 *)v99 + 2) == 11884)
                                          : (v222 = 0),
                                            !v222))
                                      {
                                        if ((v102 & 1) != 0
                                          || (*(_QWORD *)v99 == 0x687369746C756D70
                                            ? (v223 = *(_QWORD *)((char *)v99 + 7) == 0x2E62712E74666968)
                                            : (v223 = 0),
                                              !v223))
                                        {
                                          if (v37
                                            || (*(_QWORD *)v99 == 0x71642E756C756D70
                                              ? (v224 = *((_BYTE *)v99 + 8) == 46)
                                              : (v224 = 0),
                                                !v224))
                                          {
                                            if ((v104 & 1) != 0 || *(_DWORD *)__s1 != 779251568)
                                            {
                                              if (v100 < 5
                                                || (*(_DWORD *)__s1 == 1819243120
                                                  ? (v225 = *((_BYTE *)__s1 + 4) == 46)
                                                  : (v225 = 0),
                                                    !v225))
                                              {
                                                if ((v174 & 1) != 0
                                                  || (*(_DWORD *)__s1 == 1819243120
                                                    ? (v226 = *((unsigned __int16 *)__s1 + 2) == 11894)
                                                    : (v226 = 0),
                                                      !v226))
                                                {
                                                  if (v100 < 5
                                                    || (*(_DWORD *)__s1 == 1919906416
                                                      ? (v227 = *((_BYTE *)__s1 + 4) == 46)
                                                      : (v227 = 0),
                                                        !v227))
                                                  {
                                                    if ((v174 & 1) != 0
                                                      || (*(_DWORD *)__s1 == 1919906416
                                                        ? (v228 = *((unsigned __int16 *)__s1 + 2) == 11894)
                                                        : (v228 = 0),
                                                          !v228))
                                                    {
                                                      if (v175
                                                        || *(_QWORD *)__s1 != 0x2E622E6675687370
                                                        && *(_QWORD *)__s1 != 0x2E642E6675687370)
                                                      {
                                                        if (v37
                                                          || (*(_QWORD *)__s1 == 0x772E686675687370
                                                            ? (v229 = *((_BYTE *)__s1 + 8) == 46)
                                                            : (v229 = 0),
                                                              !v229
                                                           && (*(_QWORD *)__s1 == 0x772E6C6675687370
                                                             ? (v230 = *((_BYTE *)__s1 + 8) == 46)
                                                             : (v230 = 0),
                                                               !v230)))
                                                        {
                                                          if ((v174 & 1) != 0
                                                            || (*(_DWORD *)__s1 == 1819046768
                                                              ? (v275 = *((unsigned __int16 *)__s1 + 2) == 25646)
                                                              : (v275 = 0),
                                                                !v275
                                                             && (*(_DWORD *)__s1 == 1819046768
                                                               ? (v276 = *((unsigned __int16 *)__s1 + 2) == 28974)
                                                               : (v276 = 0),
                                                                 !v276
                                                              && (*(_DWORD *)__s1 == 1819046768
                                                                ? (v277 = *((unsigned __int16 *)__s1 + 2) == 30510)
                                                                : (v277 = 0),
                                                                  !v277))))
                                                          {
                                                            if (v100 >= 5)
                                                            {
                                                              if (*(_DWORD *)__s1 == 1819046768
                                                                && *((_BYTE *)__s1 + 4) == 105)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1819046768
                                                                && *((_BYTE *)__s1 + 4) == 118)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if ((v174 & 1) == 0)
                                                            {
                                                              if (*(_DWORD *)__s1 == 1634890608
                                                                && *((_WORD *)__s1 + 2) == 25646)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1634890608
                                                                && *((_WORD *)__s1 + 2) == 28974)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1634890608
                                                                && *((_WORD *)__s1 + 2) == 30510)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if (v100 >= 5)
                                                            {
                                                              if (*(_DWORD *)__s1 == 1634890608
                                                                && *((_BYTE *)__s1 + 4) == 105)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1634890608
                                                                && *((_BYTE *)__s1 + 4) == 118)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if ((v174 & 1) == 0)
                                                            {
                                                              if (*(_DWORD *)__s1 == 1819439984
                                                                && *((_WORD *)__s1 + 2) == 25646)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1819439984
                                                                && *((_WORD *)__s1 + 2) == 28974)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1819439984
                                                                && *((_WORD *)__s1 + 2) == 30510)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if (v100 >= 5)
                                                            {
                                                              if (*(_DWORD *)__s1 == 1819439984
                                                                && *((_BYTE *)__s1 + 4) == 105)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1819439984
                                                                && *((_BYTE *)__s1 + 4) == 118)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1651864432
                                                                && *((_BYTE *)__s1 + 4) == 46)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if ((v174 & 1) == 0
                                                              && *(_DWORD *)__s1 == 1651864432
                                                              && *((_WORD *)__s1 + 2) == 11891)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v173
                                                              && *(_DWORD *)__s1 == 1651864432
                                                              && *(_DWORD *)((char *)__s1 + 3) == 779318626)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v37
                                                              && *(_QWORD *)__s1 == 0x676F6C6E72657470
                                                              && *((_BYTE *)__s1 + 8) == 46)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v173)
                                                            {
                                                              if (*(_DWORD *)__s1 == 1886287216
                                                                && *(_DWORD *)((char *)__s1 + 3) == 1751868272)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1886287216
                                                                && *(_DWORD *)((char *)__s1 + 3) == 1818977136)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if (v100 >= 5
                                                              && *(_DWORD *)__s1 == 1919907952
                                                              && *((_BYTE *)__s1 + 4) == 46)
                                                            {
                                                              return 1;
                                                            }
                                                            if ((v174 & 1) == 0)
                                                            {
                                                              if (*(_DWORD *)__s1 == 1718970483
                                                                && *((_WORD *)__s1 + 2) == 26158)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1718970483
                                                                && *((_WORD *)__s1 + 2) == 26926)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1718970483
                                                                && *((_WORD *)__s1 + 2) == 28718)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1953657203
                                                                && *((_WORD *)__s1 + 2) == 28718)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if (!v175
                                                              && (*(_QWORD *)__s1 == 0x2E622E65726F7473
                                                               || *(_QWORD *)__s1 == 0x2E642E65726F7473))
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v173
                                                              && *(_DWORD *)__s1 == 1919906931
                                                              && *(_DWORD *)((char *)__s1 + 3) == 1882088818)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v175
                                                              && (*(_QWORD *)__s1 == 0x2E712E65726F7473
                                                               || *(_QWORD *)__s1 == 0x2E772E65726F7473))
                                                            {
                                                              return 1;
                                                            }
                                                            if (v100 == 8 && *(_QWORD *)v99 == 0x73732E65726F7473)
                                                              return 1;
                                                            if (!v173
                                                              && *(_DWORD *)__s1 == 1919906931
                                                              && *(_DWORD *)((char *)__s1 + 3) == 779445618)
                                                            {
                                                              return 1;
                                                            }
                                                            if (v100 >= 5)
                                                            {
                                                              if (*(_DWORD *)__s1 == 778204531
                                                                && *((_BYTE *)__s1 + 4) == 112)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1886217077
                                                                && *((_BYTE *)__s1 + 4) == 46)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if (!v173)
                                                            {
                                                              if (*(_DWORD *)__s1 == 1668312693
                                                                && *(_DWORD *)((char *)__s1 + 3) == 778595171)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1668312693
                                                                && *(_DWORD *)((char *)__s1 + 3) == 778857315)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_DWORD *)__s1 == 1768710518
                                                                && *(_DWORD *)((char *)__s1 + 3) == 778987369)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if (v100 == 13)
                                                            {
                                                              if (*(_QWORD *)v99 == 0x7032687074766376
                                                                && *(_QWORD *)((char *)v99 + 5) == 0x3832312E73703268)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_QWORD *)v99 == 0x7032687074766376
                                                                && *(_QWORD *)((char *)v99 + 5) == 0x3635322E73703268)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if (!v175 && *(_QWORD *)__s1 == 0x7463617274786576)
                                                              return 1;
                                                            if (!v173
                                                              && *(_DWORD *)__s1 == 1634559606
                                                              && *(_DWORD *)((char *)__s1 + 3) == 778331233)
                                                            {
                                                              return 1;
                                                            }
                                                            if ((v103 & 1) == 0
                                                              && *(_QWORD *)__s1 == 0x75736464616D6676
                                                              && *((_WORD *)__s1 + 4) == 11874)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v175
                                                              && (*(_QWORD *)__s1 == 0x2E6464616D6E6676
                                                               || *(_QWORD *)__s1 == 0x2E6275736D6E6676))
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v37
                                                              && *(_QWORD *)__s1 == 0x6473756270647076
                                                              && *((_BYTE *)__s1 + 8) == 46)
                                                            {
                                                              return 1;
                                                            }
                                                            if ((v103 & 1) == 0
                                                              && *(_QWORD *)__s1 == 0x6473756270647076
                                                              && *((_WORD *)__s1 + 4) == 11891)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v37
                                                              && *(_QWORD *)__s1 == 0x6473737770647076
                                                              && *((_BYTE *)__s1 + 8) == 46)
                                                            {
                                                              return 1;
                                                            }
                                                            if ((v103 & 1) == 0
                                                              && *(_QWORD *)__s1 == 0x6473737770647076
                                                              && *((_WORD *)__s1 + 4) == 11891)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v101
                                                              && *(_QWORD *)__s1 == 0x7632696D72657076
                                                              && *(_QWORD *)((char *)__s1 + 3) == 0x2E72617632696D72)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v37
                                                              && *(_QWORD *)__s1 == 0x2E6C696D72657076
                                                              && *((_BYTE *)__s1 + 8) == 112)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v101)
                                                            {
                                                              if (*(_QWORD *)__s1 == 0x766C696D72657076
                                                                && *(_QWORD *)((char *)__s1 + 3) == 0x2E7261766C696D72)
                                                              {
                                                                return 1;
                                                              }
                                                              if (*(_QWORD *)__s1 == 0x7632746D72657076
                                                                && *(_QWORD *)((char *)__s1 + 3) == 0x2E72617632746D72)
                                                              {
                                                                return 1;
                                                              }
                                                            }
                                                            if (!v175 && *(_QWORD *)__s1 == 0x32356464616D7076)
                                                              return 1;
                                                            if (!v173
                                                              && *(_DWORD *)__s1 == 1752395894
                                                              && *(_DWORD *)((char *)__s1 + 3) == 778333288)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v175 && *(_QWORD *)__s1 == 0x2E76646C68737076)
                                                              return 1;
                                                            if (!v173
                                                              && *(_DWORD *)__s1 == 1752395894
                                                              && *(_DWORD *)((char *)__s1 + 3) == 778334824)
                                                            {
                                                              return 1;
                                                            }
                                                            if (!v175 && *(_QWORD *)__s1 == 0x2E76647268737076)
                                                              return 1;
                                                            if (v100 >= 0xD)
                                                            {
                                                              v295 = *(_QWORD *)__s1 == 0x6962667568737076
                                                                  && *(_QWORD *)((char *)__s1 + 5) == 0x2E626D7174696266;
                                                              v37 = v295;
                                                              if (v295)
                                                                v296 = 1;
                                                              else
                                                                v296 = v104;
                                                              if ((v296 & 1) != 0)
                                                                return v37;
                                                            }
                                                            else if ((v104 & 1) != 0)
                                                            {
                                                              return 0;
                                                            }
                                                            return *(_DWORD *)__s1 == 779251576;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return 1;
          }
          LOBYTE(v37) = 1;
LABEL_868:
          if (*v99 == 779512164 && *((_BYTE *)v99 + 4) == 112)
            return 1;
          v175 = v100 < 8;
          if (v100 >= 8)
          {
            if (*(_QWORD *)v99 == 0x622E646E61707865 || *(_QWORD *)v99 == 0x642E646E61707865)
              return 1;
            if (v100 >= 0xC && *(_QWORD *)v99 == 0x6C2E646E61707865 && v99[2] == 778330479)
              return 1;
            if (*(_QWORD *)v99 == 0x702E646E61707865
              || *(_QWORD *)v99 == 0x712E646E61707865
              || *(_QWORD *)v99 == 0x772E646E61707865)
            {
              return 1;
            }
            if (!v37 && *(_QWORD *)v99 == 0x2E7373616C637066 && *((_BYTE *)v99 + 8) == 112)
              return 1;
          }
          else if (v100 < 6)
          {
            v193 = 1;
            v175 = 1;
            goto LABEL_895;
          }
          if (*v99 == 1702063721 && *((_WORD *)v99 + 2) == 29810)
            return 1;
          v193 = 0;
LABEL_895:
          if (*v99 == 1684107116 && *((_BYTE *)v99 + 4) == 46)
            return 1;
          if ((v193 & 1) == 0)
          {
            if (*v99 == 1684107116 && *((_WORD *)v99 + 2) == 11893)
              return 1;
            if (*v99 == 1852013164 && *((_WORD *)v99 + 2) == 11892)
              return 1;
          }
          if (*v99 == 779641197 && *((_BYTE *)v99 + 4) == 112)
            return 1;
          if (*v99 == 778987885 && *((_BYTE *)v99 + 4) == 112)
            return 1;
          v173 = v100 < 7;
          if (v100 >= 7 && *v99 == 1685483373 && *(_DWORD *)((char *)v99 + 3) == 1886741604)
            return 1;
          if ((v193 & 1) == 0 && *v99 == 1702260589 && *((_WORD *)v99 + 2) == 29486)
            return 1;
          if (!v175 && (*(_QWORD *)v99 == 0x7075646873766F6DLL || *(_QWORD *)v99 == 0x7075646C73766F6DLL))
            return 1;
          if (*v99 == 778859885 && *((_BYTE *)v99 + 4) == 112)
            return 1;
          if (*(_WORD *)v99 == 29295 && *((_BYTE *)v99 + 2) == 46)
            return 1;
          if (v100 >= 5)
          {
            if (*v99 == 1935827312 && *((_BYTE *)v99 + 4) == 46)
              return 1;
            if (!v37)
            {
              if (*(_QWORD *)v99 == 0x776473736B636170 && *((_BYTE *)v99 + 8) == 46)
                return 1;
              if (*(_QWORD *)v99 == 0x627773736B636170 && *((_BYTE *)v99 + 8) == 46)
                return 1;
              if (*(_QWORD *)v99 == 0x776473756B636170 && *((_BYTE *)v99 + 8) == 46)
                return 1;
              if (*(_QWORD *)v99 == 0x627773756B636170 && *((_BYTE *)v99 + 8) == 46)
                return 1;
            }
            if (*v99 == 1684300144 && *((_BYTE *)v99 + 4) == 46)
              return 1;
            if ((v193 & 1) != 0)
              goto LABEL_939;
          }
          else if ((v193 & 1) != 0)
          {
LABEL_939:
            v206 = 1;
            goto LABEL_1284;
          }
          if (*v99 == 1684300144 && *((_WORD *)v99 + 2) == 11891)
            return 1;
          v206 = 0;
LABEL_1284:
          if (v100 >= 7 && *v99 == 1684300144 && *(_DWORD *)((char *)v99 + 3) == 779318628)
            return 1;
          if (!v175 && *(_QWORD *)v99 == 0x2E726E67696C6170)
            return 1;
          if (v100 >= 5 && *v99 == 1684955504 && *((_BYTE *)v99 + 4) == 46)
            return 1;
          if ((v206 & 1) != 0)
          {
            v174 = 1;
          }
          else
          {
            if (*v99 == 1684955504 && *((_WORD *)v99 + 2) == 11886)
              return 1;
            v174 = 0;
          }
          goto LABEL_955;
        }
        if (*(_QWORD *)v99 == 0x7762646173706264 && *((_BYTE *)v99 + 8) == 46)
          return 1;
        goto LABEL_868;
      }
LABEL_436:
      if (!memcmp(v99, "cvttpd2dq.256", v100))
        return 1;
      if (*(_QWORD *)v99 == 0x6432737074747663 && *(_QWORD *)((char *)v99 + 5) == 0x3832312E71643273)
        return 1;
      if (*(_QWORD *)v99 == 0x6432737074747663 && *(_QWORD *)((char *)v99 + 5) == 0x3635322E71643273)
        return 1;
      goto LABEL_611;
    }
    v126 = *v99 == 778331233 && *((_BYTE *)v99 + 4) == 112;
    if (v126 || *v99 == 778333793)
      return 1;
    if (*v99 == 1852075617 && *((_BYTE *)v99 + 4) == 46)
      return 1;
    v101 = v100 < 0xB;
    if (v100 < 0xB)
      goto LABEL_560;
    if (*(_QWORD *)v99 == 0x73616364616F7262 && *(_QWORD *)((char *)v99 + 3) == 0x732E747361636461)
      return 1;
    if (v100 >= 0xF)
    {
      if (*(_QWORD *)v99 == 0x73616364616F7262 && *(_QWORD *)((char *)v99 + 7) == 0x2E34783233667473)
        return 1;
      if (*(_QWORD *)v99 == 0x73616364616F7262 && *(_QWORD *)((char *)v99 + 7) == 0x2E38783233667473)
        return 1;
      if (*(_QWORD *)v99 == 0x73616364616F7262 && *(_QWORD *)((char *)v99 + 7) == 0x2E32783436667473)
        return 1;
      if (*(_QWORD *)v99 == 0x73616364616F7262 && *(_QWORD *)((char *)v99 + 7) == 0x2E34783436667473)
        return 1;
      if (*(_QWORD *)v99 == 0x73616364616F7262 && *(_QWORD *)((char *)v99 + 7) == 0x2E34783233697473)
        return 1;
      if (*(_QWORD *)v99 == 0x73616364616F7262 && *(_QWORD *)((char *)v99 + 7) == 0x2E38783233697473)
        return 1;
      if (*(_QWORD *)v99 == 0x73616364616F7262 && *(_QWORD *)((char *)v99 + 7) == 0x2E32783436697473)
        return 1;
      if (*(_QWORD *)v99 == 0x73616364616F7262 && *(_QWORD *)((char *)v99 + 7) == 0x2E34783436697473)
        return 1;
      v129 = 0;
    }
    else
    {
LABEL_560:
      v129 = 1;
    }
    if ((*v99 != 779119971 || *((_BYTE *)v99 + 4) != 98)
      && (*v99 != 779119971 || *((_BYTE *)v99 + 4) != 100)
      && (*v99 != 779119971 || *((_BYTE *)v99 + 4) != 113)
      && (*v99 != 779119971 || *((_BYTE *)v99 + 4) != 119))
    {
      if (v100 >= 0xA)
      {
        if (*(_QWORD *)v99 == 0x73736572706D6F63 && *((_WORD *)v99 + 4) == 25134)
          return 1;
        if (*(_QWORD *)v99 == 0x73736572706D6F63 && *((_WORD *)v99 + 4) == 25646)
          return 1;
        if (*(_QWORD *)v99 == 0x73736572706D6F63 && *((_WORD *)v99 + 4) == 28718)
          return 1;
        if (*(_QWORD *)v99 == 0x73736572706D6F63 && *((_WORD *)v99 + 4) == 28974)
          return 1;
        if ((v129 & 1) != 0)
        {
          v102 = 1;
          goto LABEL_1264;
        }
      }
      else if ((v129 & 1) != 0)
      {
        v102 = 1;
        v103 = 1;
        goto LABEL_434;
      }
      if (*(_QWORD *)v99 == 0x73736572706D6F63 && *(_QWORD *)((char *)v99 + 7) == 0x2E65726F74732E73)
        return 1;
      v102 = 0;
      if (v100 < 0xA)
      {
        v103 = 1;
        goto LABEL_434;
      }
LABEL_1264:
      if (*(_QWORD *)v99 == 0x73736572706D6F63 && *((_WORD *)v99 + 4) == 30510)
        return 1;
      v103 = 0;
      goto LABEL_434;
    }
    return 1;
  }
  if (v68 < 6)
  {
    v70 = 1;
    LOBYTE(v37) = 1;
    goto LABEL_500;
  }
  if (*v67 == 1802723693 && *(_WORD *)((char *)a1 + 11) == 11827)
  {
    v136 = a2 - 13;
    if (a2 - 13 < 7)
      return 0;
    v142 = (_QWORD *)((char *)a1 + 13);
    if (*(_DWORD *)((char *)a1 + 13) == 1634559606 && a1[4] == 778331233)
      return 1;
    if (v136 >= 0xA && *v142 == 0x75736464616D6676 && *(_WORD *)((char *)a1 + 21) == 11874)
      return 1;
    if (*(_DWORD *)v142 == 1936549494 && a1[4] == 778204531)
      return 1;
    if (v136 >= 0xA && *v142 == 0x64616275736D6676 && *(_WORD *)((char *)a1 + 21) == 11876)
      return 1;
    if (v136 < 8)
      return 0;
    v87 = *v142;
    return v87 == 0x2E6275736D6E6676;
  }
  if (*v67 == 1802723693 && *(_WORD *)((char *)a1 + 11) == 11898)
  {
    v113 = (_QWORD *)((char *)a1 + 13);
    v114 = a2 - 13;
    if (a2 - 13 >= 9)
    {
      if (*v113 == 0x676F6C6E72657470 && *((_BYTE *)a1 + 21) == 46)
        return 1;
    }
    else if (v114 < 7)
    {
      return 0;
    }
    if (*(_DWORD *)v113 == 1634559606 && a1[4] == 778331233)
      return 1;
    if (v114 >= 0xA)
    {
      if (*v113 == 0x75736464616D6676 && *(_WORD *)((char *)a1 + 21) == 11874)
        return 1;
    }
    else if (v114 < 9)
    {
      if (a2 != 21)
        return 0;
LABEL_831:
      v37 = *v113 == 0x32356464616D7076;
      if (*v113 == 0x32356464616D7076)
        return v37;
      if (*v113 == 0x2E76646C68737076)
        return 1;
      return *v113 == 0x2E76647268737076;
    }
    if (*v113 == 0x6473756270647076 && *((_BYTE *)a1 + 21) == 46)
      return 1;
    if (v114 >= 0xA && *v113 == 0x6473756270647076 && *(_WORD *)((char *)a1 + 21) == 11891)
      return 1;
    if (*v113 == 0x6473737770647076 && *((_BYTE *)a1 + 21) == 46)
      return 1;
    if (v114 >= 0xA && *v113 == 0x6473737770647076 && *(_WORD *)((char *)a1 + 21) == 11891)
      return 1;
    if (v114 >= 0xB && *v113 == 0x7632746D72657076 && *((_QWORD *)a1 + 2) == 0x2E72617632746D72)
      return 1;
    goto LABEL_831;
  }
LABEL_280:
  switch(a2)
  {
    case 0x13uLL:
      if (!memcmp(v67, "pmulu.dq.512", 0xCuLL))
        return 1;
      break;
    case 0x12uLL:
      if (!memcmp(v67, "pmul.dq.512", 0xBuLL))
        return 1;
      break;
    case 0xFuLL:
      v37 = 1;
      if (*(_QWORD *)v67 == 0x617164746E766F6DLL)
        return v37;
      goto LABEL_500;
    default:
      if (v68 < 0xA)
      {
        LOBYTE(v37) = 1;
        v115 = 1;
        if (v68 < 5)
          goto LABEL_598;
        goto LABEL_500;
      }
      break;
  }
  if (*(_QWORD *)v67 == 0x73616364616F7262 && *((_WORD *)v67 + 4) == 28020)
    return 1;
  LOBYTE(v37) = 0;
LABEL_500:
  if (*v67 == 779119971 && *((_BYTE *)v67 + 4) == 112)
    return 1;
  if (!v37)
  {
    if (*(_QWORD *)v67 == 0x73616D3262747663 && *((_WORD *)v67 + 4) == 11883)
      return 1;
    if (*(_QWORD *)v67 == 0x73616D3264747663 && *((_WORD *)v67 + 4) == 11883)
      return 1;
  }
  v115 = v68 < 8;
  if (v68 >= 8 && *(_QWORD *)v67 == 0x326B73616D747663)
    return 1;
  if (!v37 && *(_QWORD *)v67 == 0x73616D3271747663 && *((_WORD *)v67 + 4) == 11883)
    return 1;
  if (v68 == 9 && *(_QWORD *)v67 == 0x7332697375747663 && *((_BYTE *)v67 + 8) == 100)
    return 1;
  if (v37)
  {
    LOBYTE(v37) = 1;
  }
  else
  {
    if (*(_QWORD *)v67 == 0x73616D3277747663 && *((_WORD *)v67 + 4) == 11883)
      return 1;
    LOBYTE(v37) = 0;
  }
LABEL_598:
  switch(v69)
  {
    case 0uLL:
      if (!memcmp(v67, "kor.w", v68))
        return 1;
      break;
    case 1uLL:
      v147 = *v67 == 1684955499 && *((_WORD *)v67 + 2) == 30510;
      if (v147 || !memcmp(v67, "knot.w", v68))
        return 1;
      break;
    case 2uLL:
      if (!memcmp(v67, "kandn.w", v68))
        return 1;
      break;
    case 5uLL:
      if (!memcmp(v67, "kortestc.w", v68))
        return 1;
      if (*(_QWORD *)v67 == 0x7A74736574726F6BLL && *((_WORD *)v67 + 4) == 30510)
        return 1;
      break;
    default:
      break;
  }
  if (!v70 && *v67 == 1886287211 && *((_WORD *)v67 + 2) == 27491)
    return 1;
  if (v68 == 6)
  {
    if (!memcmp(v67, "kxor.w", 6uLL))
      return 1;
  }
  else if (v68 == 7 && *v67 == 1869510763 && *(_DWORD *)((char *)v67 + 3) == 1999532655)
  {
    return 1;
  }
  if (!v70 && *v67 == 1684300144 && *((_WORD *)v67 + 2) == 11891)
    return 1;
  if (!v37 && *(_QWORD *)v67 == 0x616364616F726270 && *((_WORD *)v67 + 4) == 29811)
    return 1;
  if (v68 < 4)
    goto LABEL_690;
  if (*v67 == 1819243120 || *v67 == 1919906416)
    return 1;
  if (v68 < 7)
  {
LABEL_690:
    v153 = 1;
    if (v70)
      goto LABEL_699;
  }
  else
  {
    if (*v67 == 1819046768 && *(_DWORD *)((char *)v67 + 3) == 1902390892)
      return 1;
    if (*v67 == 1819439984 && *(_DWORD *)((char *)v67 + 3) == 1902390892)
      return 1;
    v153 = 0;
    if (v70)
      goto LABEL_699;
  }
  if (*v67 == 1651864432 && *((_WORD *)v67 + 2) == 11891)
    return 1;
  if (*v67 == 1936028784 && *((_WORD *)v67 + 2) == 28020)
    return 1;
LABEL_699:
  if ((v153 & 1) == 0 && *v67 == 1936028784 && *(_DWORD *)((char *)v67 + 3) == 1835955315)
    return 1;
  if (v115)
    goto LABEL_707;
  if (*(_QWORD *)v67 == 0x2E746E65726F7473)
    return 1;
  if (v68 < 0xC)
  {
LABEL_707:
    if ((v153 & 1) != 0)
      return 0;
    goto LABEL_708;
  }
  v207 = *(_QWORD *)v67 == 0x616364616F726276 && v67[2] == 1932424307;
  v37 = v207;
  if (v207)
    v153 = 1;
  if ((v153 & 1) == 0)
  {
LABEL_708:
    if (*v67 != 1752395894 || *(_DWORD *)((char *)v67 + 3) != 778333288)
      return *v67 == 1752395894 && *(_DWORD *)((char *)v67 + 3) == 778334824;
    return 1;
  }
  return v37;
}

BOOL UpgradePTESTIntrinsic(llvm::Function *a1, int a2, llvm::Function **a3)
{
  uint64_t v6;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v8;
  llvm::FixedVectorType *FloatTy;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v14[4];
  __int16 v15;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8);
  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a1);
  FloatTy = (llvm::FixedVectorType *)llvm::Type::getFloatTy(DesiredBytecodeVersion, v8);
  llvm::FixedVectorType::get(FloatTy, (llvm::Type *)4);
  v11 = v10;
  if (v6 == v10)
  {
    v15 = 773;
    v14[0] = llvm::Value::getName(a1);
    v14[1] = v12;
    v14[2] = ".old";
    llvm::Value::setName(a1, v14);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)a1 + 5), a2, 0, 0);
  }
  return v6 == v11;
}

BOOL UpgradeX86IntrinsicsWith8BitMask(llvm::Function *a1, int a2, llvm::Function **a3)
{
  _BOOL8 isIntegerTy;
  const char *v7;
  const char *v9[4];
  __int16 v10;

  isIntegerTy = llvm::Type::isIntegerTy(*(llvm::Type **)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16)+ 8 * (*(_DWORD *)(*((_QWORD *)a1 + 3) + 12) - 1)), 32);
  if (isIntegerTy)
  {
    v10 = 773;
    v9[0] = llvm::Value::getName(a1);
    v9[1] = v7;
    v9[2] = ".old";
    llvm::Value::setName(a1, v9);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)a1 + 5), a2, 0, 0);
  }
  return isIntegerTy;
}

BOOL UpgradeX86MaskedFPCompare(llvm::Function *a1, int a2, llvm::Function **a3)
{
  int v3;
  const char *v7;
  const char *v9[4];
  __int16 v10;

  v3 = *(_DWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 3) + 16) + 8) & 0xFE;
  if (v3 != 18)
  {
    v10 = 773;
    v9[0] = llvm::Value::getName(a1);
    v9[1] = v7;
    v9[2] = ".old";
    llvm::Value::setName(a1, v9);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)a1 + 5), a2, 0, 0);
  }
  return v3 != 18;
}

BOOL UpgradeX86BF16Intrinsic(llvm::Function *this, int a2, llvm::Function **a3)
{
  uint64_t v6;
  int v7;
  const char *v8;
  const char *v10[4];
  __int16 v11;

  v6 = **(_QWORD **)(*((_QWORD *)this + 3) + 16);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
  {
    v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
    if (v7 == 1)
      return v7 != 1;
    goto LABEL_5;
  }
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 != 1)
  {
LABEL_5:
    v11 = 773;
    v10[0] = llvm::Value::getName(this);
    v10[1] = v8;
    v10[2] = ".old";
    llvm::Value::setName(this, v10);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)this + 5), a2, 0, 0);
  }
  return v7 != 1;
}

BOOL UpgradeX86BF16DPIntrinsic(llvm::Function *this, int a2, llvm::Function **a3)
{
  uint64_t v6;
  int v7;
  const char *v8;
  const char *v10[4];
  __int16 v11;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 16);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
  {
    v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
    if (v7 == 1)
      return v7 != 1;
    goto LABEL_5;
  }
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 != 1)
  {
LABEL_5:
    v11 = 773;
    v10[0] = llvm::Value::getName(this);
    v10[1] = v8;
    v10[2] = ".old";
    llvm::Value::setName(this, v10);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)this + 5), a2, 0, 0);
  }
  return v7 != 1;
}

void llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(llvm::IRBuilderBase *this, unsigned int a2, llvm::MDNode *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *i;
  _QWORD *v14;

  v4 = *(_QWORD *)this;
  v5 = *((unsigned int *)this + 2);
  v6 = (unsigned int *)(*(_QWORD *)this + 16 * v5);
  if (a3)
  {
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)(v4 + 8);
      v9 = 16 * v5;
      while (*((_DWORD *)v8 - 2) != a2)
      {
        v8 += 2;
        v9 -= 16;
        if (!v9)
          goto LABEL_6;
      }
      *v8 = a3;
    }
    else
    {
LABEL_6:
      if (v5 >= *((_DWORD *)this + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (char *)this + 16, v5 + 1, 16);
        v14 = (_QWORD *)(*(_QWORD *)this + 16 * *((unsigned int *)this + 2));
        *v14 = a2;
        v14[1] = a3;
        ++*((_DWORD *)this + 2);
      }
      else
      {
        *v6 = a2;
        *(_QWORD *)(v4 + 16 * v5 + 8) = a3;
        *((_DWORD *)this + 2) = v5 + 1;
      }
    }
  }
  else
  {
    if ((_DWORD)v5)
    {
      v10 = 16 * v5;
      v11 = *(unsigned int **)this;
      while (*v11 != a2)
      {
        v11 += 4;
        v10 -= 16;
        if (!v10)
        {
          v11 = v6;
          goto LABEL_21;
        }
      }
    }
    else
    {
      v11 = *(unsigned int **)this;
    }
    if (v11 != v6)
    {
      for (i = v11 + 4; i != v6; i += 4)
      {
        if (*i != a2)
        {
          *v11 = *i;
          *((_QWORD *)v11 + 1) = *((_QWORD *)i + 1);
          v11 += 4;
        }
      }
    }
LABEL_21:
    *((_DWORD *)this + 2) = ((unint64_t)v11 - v4) >> 4;
  }
}

uint64_t llvm::IRBuilderBase::CreateCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7)
{
  int8x16_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *DesiredBytecodeVersion;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  BOOL v22;
  int v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v30;
  __int16 v31;

  v11 = (int8x16_t *)a1[13];
  v12 = a1[14];
  v31 = 257;
  v13 = llvm::CallInst::Create(a2, a3, a4, a5, v11, v12, &v30, 0);
  v14 = (uint64_t)v13;
  if (*((_BYTE *)a1 + 100))
  {
    DesiredBytecodeVersion = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v13);
    *(_QWORD *)(v14 + 72) = llvm::AttributeList::addAttributeAtIndex((uint64_t **)(v14 + 72), DesiredBytecodeVersion, -1, 64);
  }
  v16 = *(unsigned __int8 *)(v14 + 16);
  v17 = v16 - 28;
  if (v16 < 0x1C)
  {
    if (v16 != 5)
      goto LABEL_28;
    v17 = *(unsigned __int16 *)(v14 + 18);
  }
  if (v17 <= 0x39)
  {
    if (((1 << v17) & 0x40000001255000) != 0)
      goto LABEL_24;
    if (((1 << v17) & 0x380000000000000) != 0)
    {
      v18 = v14;
      do
      {
        v19 = *(_QWORD *)v18;
        v20 = *(unsigned __int8 *)(*(_QWORD *)v18 + 8);
        v18 = *(_QWORD *)v18 + 24;
        if (v19)
          v21 = v20 == 17;
        else
          v21 = 0;
      }
      while (v21);
      if ((v20 & 0xFE) == 0x12)
        v20 = *(_DWORD *)(**(_QWORD **)(v19 + 16) + 8);
      v22 = v20 < 4u || v20 == 5;
      v23 = v20 & 0xFD;
      if (v22 || v23 == 4)
      {
LABEL_24:
        v25 = *((_DWORD *)a1 + 24);
        if (a7 || (a7 = (llvm::MDNode *)a1[11]) != 0)
          llvm::Instruction::setMetadata((unsigned __int8 **)v14, 3, a7);
        llvm::Instruction::setFastMathFlags(v14, v25);
      }
    }
  }
LABEL_28:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v14, a6, a1[6], a1[7]);
  v26 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v26)
  {
    v27 = *a1;
    v28 = v27 + 16 * v26;
    do
    {
      llvm::Instruction::setMetadata((unsigned __int8 **)v14, *(_DWORD *)v27, *(llvm::MDNode **)(v27 + 8));
      v27 += 16;
    }
    while (v27 != v28);
  }
  return v14;
}

char *llvm::CallInst::Create(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int8x16_t *a5, uint64_t a6, const char **a7, llvm::Instruction *a8)
{
  int8x16_t *v14;
  unint64_t v15;
  int v16;
  int8x16_t *v17;
  int v18;
  int v19;
  unint64_t v20;
  int8x16_t *v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int8x16_t *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int8x16_t *v34;
  uint64_t v35;
  int8x16_t *v36;
  int v37;
  int v38;
  int8x16_t *v39;
  uint64_t v40;
  mlir::BytecodeWriterConfig *v41;

  v14 = &a5[3 * a6];
  if (!a6)
  {
    v16 = 0;
    goto LABEL_9;
  }
  v15 = 48 * a6 - 48;
  if (v15 < 0x30)
  {
    v16 = 0;
    v17 = a5;
    do
    {
LABEL_8:
      v16 += (unint64_t)(v17[2].i64[0] - v17[1].i64[1]) >> 3;
      v17 += 3;
    }
    while (v17 != v14);
    goto LABEL_9;
  }
  v18 = 0;
  v19 = 0;
  v20 = v15 / 0x30 + 1;
  v17 = &a5[3 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = a5 + 5;
  v22 = v20 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    v18 += (unint64_t)(v21[-3].i64[0] - v21[-4].i64[1]) >> 3;
    v19 += (unint64_t)(v21->i64[0] - v21[-1].i64[1]) >> 3;
    v21 += 6;
    v22 -= 2;
  }
  while (v22);
  v16 = v19 + v18;
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v23 = a4 + 1;
  v24 = llvm::User::operator new((llvm::User *)0x58, v16 + (int)a4 + 1, 16 * (int)a6);
  v25 = v24;
  if (a6)
  {
    v26 = 48 * a6 - 48;
    v27 = v26 / 0x30 + 1;
    if (v26 >= 0x30)
    {
      v32 = 0;
      v33 = 0;
      v29 = &a5[3 * (v27 & 0xFFFFFFFFFFFFFFELL)];
      v34 = a5 + 5;
      v35 = v27 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        v32 += (unint64_t)(v34[-3].i64[0] - v34[-4].i64[1]) >> 3;
        v33 += (unint64_t)(v34->i64[0] - v34[-1].i64[1]) >> 3;
        v34 += 6;
        v35 -= 2;
      }
      while (v35);
      v28 = v33 + v32;
      if (v27 == (v27 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_17:
        if (v26 >= 0x30)
        {
          v37 = 0;
          v38 = 0;
          v36 = &a5[3 * (v27 & 0xFFFFFFFFFFFFFFELL)];
          v39 = a5 + 5;
          v40 = v27 & 0xFFFFFFFFFFFFFFELL;
          do
          {
            v37 += (unint64_t)(v39[-3].i64[0] - v39[-4].i64[1]) >> 3;
            v38 += (unint64_t)(v39->i64[0] - v39[-1].i64[1]) >> 3;
            v39 += 6;
            v40 -= 2;
          }
          while (v40);
          v30 = v38 + v37;
          if (v27 == (v27 & 0xFFFFFFFFFFFFFFELL))
            goto LABEL_23;
        }
        else
        {
          v30 = 0;
          v36 = a5;
        }
        do
        {
          v30 += (unint64_t)(v36[2].i64[0] - v36[1].i64[1]) >> 3;
          v36 += 3;
        }
        while (v36 != v14);
LABEL_23:
        v31 = a4 + v28;
        goto LABEL_24;
      }
    }
    else
    {
      v28 = 0;
      v29 = a5;
    }
    do
    {
      v28 += (unint64_t)(v29[2].i64[0] - v29[1].i64[1]) >> 3;
      v29 += 3;
    }
    while (v29 != v14);
    goto LABEL_17;
  }
  v30 = 0;
  v31 = a4;
LABEL_24:
  v41 = llvm::Instruction::Instruction((llvm::Instruction *)v24, **(llvm::Type ***)(a1 + 16), 56, (llvm::Use *)&v24[32 * ~v31], v30 + v23, a8);
  *((_QWORD *)v25 + 9) = 0;
  llvm::CallInst::init(v41, a1, a2, a3, a4, a5, a6, a7);
  return v25;
}

unsigned __int8 **llvm::IRBuilderBase::CreateAlignedLoad(uint64_t *a1, llvm::Type *a2, uint64_t a3, __int16 a4, __int16 a5, uint64_t a6)
{
  char v11;
  uint64_t Module;
  char v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v19;
  __int16 v20;

  v11 = a4;
  if ((a4 & 0xFF00) == 0)
  {
    Module = llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    llvm::DataLayout::getABITypeAlign((llvm::DataLayout *)(Module + 256), a2);
    v11 = v13;
  }
  v14 = (unsigned __int8 **)llvm::User::operator new((llvm::User *)0x50, 1u);
  v20 = 257;
  llvm::LoadInst::LoadInst((uint64_t)v14, a2, a3, &v19, a5, v11, 0);
  (*(void (**)(uint64_t, unsigned __int8 **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v14, a6, a1[6], a1[7]);
  v15 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v15)
  {
    v16 = *a1;
    v17 = v16 + 16 * v15;
    do
    {
      llvm::Instruction::setMetadata(v14, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
      v16 += 16;
    }
    while (v16 != v17);
  }
  return v14;
}

unsigned __int8 **llvm::IRBuilderBase::CreateAnd(llvm::IRBuilderBase *this, llvm::ConstantInt ***a2, const llvm::APInt *a3, const llvm::Twine *a4)
{
  _QWORD *v7;
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v13;
  __int16 v14;

  v7 = llvm::ConstantInt::get(*a2, a3, a3);
  v8 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, uint64_t, llvm::ConstantInt ***, _QWORD *))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), 28, a2, v7);
  if (!v8)
  {
    v14 = 257;
    v8 = (unsigned __int8 **)llvm::BinaryOperator::Create(28, (uint64_t)a2, (uint64_t)v7, &v13, 0);
    (*(void (**)(_QWORD, unsigned __int8 **, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                            + 16))(*((_QWORD *)this + 10), v8, a4, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
    v9 = *((unsigned int *)this + 2);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)this;
      v11 = &v10[2 * v9];
      do
      {
        llvm::Instruction::setMetadata(v8, *(_DWORD *)v10, (llvm::MDNode *)v10[1]);
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
  return v8;
}

llvm::Instruction *llvm::ExtractValueInst::Create(uint64_t *a1, unsigned int *a2, uint64_t a3, const char **a4, llvm::Instruction *a5)
{
  llvm::Instruction *v10;
  llvm::Type *IndexedType;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v10 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x68, 1u);
  IndexedType = (llvm::Type *)llvm::ExtractValueInst::getIndexedType(*a1, a2, a3);
  llvm::Instruction::Instruction(v10, IndexedType, 64, (llvm::Instruction *)((char *)v10 - 32), 1, a5);
  if (*((_QWORD *)v10 - 4))
  {
    **((_QWORD **)v10 - 2) = *((_QWORD *)v10 - 3);
    v12 = *((_QWORD *)v10 - 3);
    if (v12)
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v10 - 2);
  }
  *((_QWORD *)v10 - 4) = a1;
  v15 = a1[1];
  v14 = a1 + 1;
  v13 = v15;
  *((_QWORD *)v10 - 3) = v15;
  if (v15)
    *(_QWORD *)(v13 + 16) = (char *)v10 - 24;
  *((_QWORD *)v10 - 2) = v14;
  *v14 = (char *)v10 - 32;
  *((_QWORD *)v10 + 9) = (char *)v10 + 88;
  *((_QWORD *)v10 + 10) = 0x400000000;
  llvm::ExtractValueInst::init((uint64_t)v10, a2, a3, a4);
  return v10;
}

llvm::Instruction *llvm::IRBuilderBase::CreateInsertValue(uint64_t *a1, llvm::Type **a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  llvm::Instruction *v12;
  llvm::Instruction *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v18;
  __int16 v19;

  v12 = (llvm::Instruction *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 88))(a1[9]);
  if (!v12)
  {
    v19 = 257;
    v12 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x68, 2u);
    v13 = llvm::Instruction::Instruction(v12, *a2, 65, (llvm::Instruction *)((char *)v12 - 64), 2, 0);
    *((_QWORD *)v13 + 9) = (char *)v13 + 88;
    *((_QWORD *)v13 + 10) = 0x400000000;
    llvm::InsertValueInst::init((uint64_t)v13, (uint64_t)a2, a3, a4, a5, &v18);
    (*(void (**)(uint64_t, llvm::Instruction *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v12, a6, a1[6], a1[7]);
    v14 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v14)
    {
      v15 = *a1;
      v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata((unsigned __int8 **)v12, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return v12;
}

uint64_t llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(uint64_t a1, mlir::BytecodeWriterConfig *this, mlir::BytecodeWriterConfig *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DesiredBytecodeVersion;
  llvm::Instruction *v13;
  llvm::MDNode *v14;
  llvm::MDNode *v16;

  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 120) = &unk_1E0E204A0;
  *(_QWORD *)(a1 + 64) = DesiredBytecodeVersion;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 128) = &unk_1E0E22D50;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = a5;
  *(_QWORD *)(a1 + 112) = a6;
  *(_QWORD *)(a1 + 48) = this;
  *(_QWORD *)(a1 + 56) = a3;
  if ((mlir::BytecodeWriterConfig *)((char *)this + 48) != a3)
  {
    if (a3)
      v13 = (mlir::BytecodeWriterConfig *)((char *)a3 - 24);
    else
      v13 = 0;
    v14 = *(llvm::MDNode **)llvm::Instruction::getStableDebugLoc(v13);
    v16 = v14;
    if (v14)
    {
      llvm::MetadataTracking::track((uint64_t)&v16, (unsigned __int8 *)v14, 1);
      llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((llvm::IRBuilderBase *)a1, 0, v16);
      if (v16)
        llvm::MetadataTracking::untrack((uint64_t)&v16, (unsigned __int8 *)v16);
    }
    else
    {
      llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((llvm::IRBuilderBase *)a1, 0, 0);
    }
  }
  return a1;
}

uint64_t std::vector<llvm::OperandBundleDefT<llvm::Value *>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  __int128 v11;
  void *v12;
  void *v13;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 == v6)
    {
      v8 = a2;
    }
    else
    {
      v7 = 16 * ((a3 - a2) >> 4);
      v8 = a2;
      do
      {
        if (*(char *)(v8 + 23) < 0)
          operator delete(*(void **)v8);
        v10 = (_BYTE *)(v8 + v7);
        v11 = *(_OWORD *)(v8 + v7);
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + v7 + 16);
        *(_OWORD *)v8 = v11;
        v10[23] = 0;
        *v10 = 0;
        v12 = *(void **)(v8 + 24);
        if (v12)
        {
          *(_QWORD *)(v8 + 32) = v12;
          operator delete(v12);
          *(_QWORD *)(v8 + 24) = 0;
          *(_QWORD *)(v8 + 32) = 0;
          *(_QWORD *)(v8 + 40) = 0;
        }
        v9 = (_QWORD *)(v8 + v7);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v8 + v7 + 24);
        *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + v7 + 40);
        v9[3] = 0;
        v9[4] = 0;
        v9[5] = 0;
        v8 += 48;
      }
      while (v8 + v7 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v8)
    {
      v13 = *(void **)(v5 - 24);
      if (v13)
      {
        *(_QWORD *)(v5 - 16) = v13;
        operator delete(v13);
      }
      if (*(char *)(v5 - 25) < 0)
        operator delete(*(void **)(v5 - 48));
      v5 -= 48;
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a2;
}

uint64_t _GLOBAL__sub_I_AutoUpgrade_cpp()
{
  __int128 v1;

  *(_QWORD *)&v1 = "Disable autoupgrade of debug info";
  *((_QWORD *)&v1 + 1) = 33;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [23],llvm::cl::desc>((uint64_t)&DisableAutoUpgradeDebugInfo, (int8x16_t *)"disable-auto-upgrade-debug-info", &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &DisableAutoUpgradeDebugInfo, &dword_18013D000);
}

_QWORD *llvm::BasicBlock::createMarker(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a2 + 64);
  if (!result)
  {
    result = operator new(0x18uLL);
    result[1] = result + 1;
    result[2] = result + 1;
    *result = a2;
    *(_QWORD *)(a2 + 64) = result;
  }
  return result;
}

uint64_t ***llvm::BasicBlock::createMarker(uint64_t ***a1, uint64_t ***a2)
{
  uint64_t ***v2;
  uint64_t ***v3;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t ***v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t ****v18;
  uint64_t ***v19;
  uint64_t ****v21;
  int v22;
  int v23;
  uint64_t ****v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t ***v28;

  if (a1 + 6 == a2)
  {
    v5 = **a1;
    v6 = *v5;
    v7 = *(_DWORD *)(*v5 + 2736);
    v8 = *v5 + 2744;
    v9 = a1 >> 4;
    if ((v7 & 1) != 0)
    {
      v10 = 4;
      v11 = *v5 + 2744;
    }
    else
    {
      v10 = *(_DWORD *)(v6 + 2752);
      if (!v10)
        goto LABEL_13;
      v11 = *(_QWORD *)(v6 + 2744);
    }
    v12 = v10 - 1;
    v13 = (v10 - 1) & (v9 ^ (a1 >> 9));
    v14 = *(uint64_t ****)(v11 + 16 * v13);
    if (v14 == a1)
    {
LABEL_12:
      v3 = *(uint64_t ****)(v11 + 16 * v13 + 8);
      if (v3)
        return v3;
    }
    else
    {
      v22 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        v23 = v13 + v22++;
        v13 = v23 & v12;
        v14 = *(uint64_t ****)(v11 + 16 * v13);
        if (v14 == a1)
          goto LABEL_12;
      }
    }
LABEL_13:
    v3 = (uint64_t ***)operator new(0x18uLL);
    *v3 = 0;
    v3[1] = (uint64_t **)(v3 + 1);
    v3[2] = (uint64_t **)(v3 + 1);
    v28 = a1;
    if ((v7 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v15 = *(_DWORD *)(v6 + 2752);
      if (!v15)
      {
        v21 = 0;
        goto LABEL_21;
      }
      v8 = *(_QWORD *)(v6 + 2744);
    }
    v16 = v15 - 1;
    v17 = v16 & (v9 ^ (a1 >> 9));
    v18 = (uint64_t ****)(v8 + 16 * v17);
    v19 = *v18;
    if (*v18 == a1)
    {
LABEL_18:
      v18[1] = v3;
      return v3;
    }
    v24 = 0;
    v25 = 1;
    while (v19 != (uint64_t ***)-4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v19 == (uint64_t ***)-8192;
      if (v26)
        v24 = v18;
      v27 = v17 + v25++;
      v17 = v27 & v16;
      v18 = (uint64_t ****)(v8 + 16 * v17);
      v19 = *v18;
      if (*v18 == a1)
        goto LABEL_18;
    }
    if (v24)
      v21 = v24;
    else
      v21 = v18;
LABEL_21:
    v18 = (uint64_t ****)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>,llvm::BasicBlock *,llvm::DPMarker *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::InsertIntoBucket<llvm::BasicBlock * const&>(v6 + 2736, v21, &v28);
    goto LABEL_18;
  }
  if (a2)
    v2 = a2 - 3;
  else
    v2 = 0;
  v3 = (uint64_t ***)v2[8];
  if (!v3)
  {
    v3 = (uint64_t ***)operator new(0x18uLL);
    v3[1] = (uint64_t **)(v3 + 1);
    v3[2] = (uint64_t **)(v3 + 1);
    *v3 = (uint64_t **)v2;
    v2[8] = (uint64_t **)v3;
  }
  return v3;
}

uint64_t ***llvm::BasicBlock::setTrailingDPValues(uint64_t ***this, uint64_t **a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t ****v8;
  uint64_t ***v9;
  uint64_t ****v10;
  uint64_t ****v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t ***v15;

  v3 = ***this;
  v15 = this;
  if ((*(_BYTE *)(v3 + 2736) & 1) != 0)
  {
    v5 = v3 + 2744;
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 2752);
    if (!v4)
    {
      v10 = 0;
      goto LABEL_8;
    }
    v5 = *(_QWORD *)(v3 + 2744);
  }
  v6 = v4 - 1;
  v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  v8 = (uint64_t ****)(v5 + 16 * v7);
  v9 = *v8;
  if (*v8 == this)
  {
LABEL_6:
    v8[1] = (uint64_t ***)a2;
    return this;
  }
  v11 = 0;
  v12 = 1;
  while (v9 != (uint64_t ***)-4096)
  {
    if (v11)
      v13 = 0;
    else
      v13 = v9 == (uint64_t ***)-8192;
    if (v13)
      v11 = v8;
    v14 = v7 + v12++;
    v7 = v14 & v6;
    v8 = (uint64_t ****)(v5 + 16 * (v14 & v6));
    v9 = *v8;
    if (*v8 == this)
      goto LABEL_6;
  }
  if (v11)
    v10 = v11;
  else
    v10 = v8;
LABEL_8:
  this = (uint64_t ***)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>,llvm::BasicBlock *,llvm::DPMarker *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::InsertIntoBucket<llvm::BasicBlock * const&>(v3 + 2736, v10, &v15);
  this[1] = a2;
  return this;
}

void llvm::BasicBlock::convertToNewDbgValues(llvm::BasicBlock *this)
{
  char *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm::DPValue *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  if (byte_1EDC0BB08)
  {
    *((_BYTE *)this + 40) = 1;
    v14 = v16;
    v15 = 0x400000000;
    v1 = (char *)this + 48;
    v2 = (char *)*((_QWORD *)this + 7);
    if (v2 != (char *)this + 48)
    {
      while (1)
      {
        while (1)
        {
          v3 = (char *)*((_QWORD *)v2 + 1);
          v4 = v2 ? (uint64_t)(v2 - 24) : 0;
          if (*(_BYTE *)(v4 + 16) != 84)
            break;
          v5 = *(_QWORD *)(v4 - 32);
          if (!v5)
            break;
          if (*(_BYTE *)(v5 + 16))
            break;
          if (*(_QWORD *)(v5 + 24) != *(_QWORD *)(v4 + 80))
            break;
          if ((*(_BYTE *)(v5 + 33) & 0x20) == 0)
            break;
          v6 = *(_DWORD *)(v5 + 36);
          if (v6 != 64 && v6 != 61)
            break;
          v7 = (llvm::DPValue *)operator new(0x40uLL);
          llvm::DPValue::DPValue(v7, (const llvm::DbgVariableIntrinsic *)v4);
          v8 = v15;
          if (v15 >= (unint64_t)HIDWORD(v15))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v15 + 1, 8);
            v8 = v15;
          }
          *((_QWORD *)v14 + v8) = v7;
          LODWORD(v15) = v15 + 1;
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v4);
          v2 = v3;
          if (v3 == v1)
          {
LABEL_24:
            if (v14 != v16)
              free(v14);
            return;
          }
        }
        v9 = *(_QWORD **)(v4 + 64);
        if (v9)
        {
          v10 = v15;
          if ((_DWORD)v15)
            goto LABEL_21;
        }
        else
        {
          v9 = operator new(0x18uLL);
          v9[1] = v9 + 1;
          v9[2] = v9 + 1;
          *v9 = v4;
          *(_QWORD *)(v4 + 64) = v9;
          v10 = v15;
          if ((_DWORD)v15)
          {
LABEL_21:
            v11 = (uint64_t **)v14;
            v12 = 8 * v10;
            do
            {
              v13 = *v11++;
              llvm::DPMarker::insertDPValue((uint64_t)v9, v13, 0);
              v12 -= 8;
            }
            while (v12);
          }
        }
        LODWORD(v15) = 0;
        v2 = v3;
        if (v3 == v1)
          goto LABEL_24;
      }
    }
  }
}

void llvm::BasicBlock::convertFromNewDbgValues(llvm::BasicBlock *this)
{
  char *v1;
  char *v2;
  char *v4;
  llvm::DPMarker *v5;
  uint64_t DbgValueRange;
  llvm::DPValue *v7;
  llvm::DPValue *v8;
  llvm::DPValue *v9;
  char **v10;
  char *v11;
  char *v12;
  char *DebugIntrinsic;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  *((_WORD *)this + 9) &= ~0x8000u;
  *((_BYTE *)this + 40) = 0;
  v1 = (char *)this + 48;
  v2 = (char *)*((_QWORD *)this + 7);
  if (v2 != (char *)this + 48)
  {
    do
    {
      if (v2)
        v4 = v2 - 24;
      else
        v4 = 0;
      v5 = (llvm::DPMarker *)*((_QWORD *)v4 + 8);
      if (v5)
      {
        DbgValueRange = llvm::DPMarker::getDbgValueRange(*((llvm::DPMarker **)v4 + 8));
        if ((llvm::DPValue *)DbgValueRange != v7)
        {
          v8 = (llvm::DPValue *)DbgValueRange;
          v9 = v7;
          v10 = (char **)(v4 + 24);
          do
          {
            DebugIntrinsic = llvm::DPValue::createDebugIntrinsic(v8, *(llvm::Module **)(*((_QWORD *)this + 8) + 40), 0);
            llvm::MCSymbolXCOFF::setRepresentedCsect((uint64_t)DebugIntrinsic, this);
            *((_WORD *)this + 9) &= ~0x8000u;
            if ((DebugIntrinsic[23] & 0x10) != 0)
            {
              v14 = *((_QWORD *)this + 8);
              if (v14)
              {
                v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
                if (v15)
                  llvm::ValueSymbolTable::reinsertValue(v15, (llvm::Value *)DebugIntrinsic);
              }
            }
            v11 = *v10;
            *((_QWORD *)DebugIntrinsic + 3) = *v10;
            *((_QWORD *)DebugIntrinsic + 4) = v10;
            v12 = DebugIntrinsic + 24;
            *((_QWORD *)v11 + 1) = v12;
            *v10 = v12;
            v8 = (llvm::DPValue *)*((_QWORD *)v8 + 1);
          }
          while (v8 != v9);
        }
        llvm::DPMarker::eraseFromParent(v5);
      }
      v2 = (char *)*((_QWORD *)v2 + 1);
    }
    while (v2 != v1);
  }
}

BOOL llvm::BasicBlock::validateDbgValues(llvm::BasicBlock *this, BOOL a2, int a3, llvm::raw_ostream *a4)
{
  llvm::raw_ostream *v4;
  int v7;
  char v8;
  void *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  char **v15;
  uint64_t i;
  uint64_t v17;
  char *v18;
  llvm::DPMarker *v19;
  void *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  uint64_t DbgValueRange;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  void *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  llvm::BasicBlock *v39;
  void *v40;
  _BYTE *v41;
  _BYTE *v43;
  int v44;
  int v45;
  llvm::BasicBlock *v46;
  int v47;

  v4 = a4;
  if (a4)
  {
    v7 = *(unsigned __int8 *)(*((_QWORD *)this + 8) + 120);
    if (v7 == *((unsigned __int8 *)this + 40))
      goto LABEL_3;
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::errs(this);
    v7 = *(unsigned __int8 *)(*((_QWORD *)this + 8) + 120);
    if (v7 == *((unsigned __int8 *)this + 40))
    {
LABEL_3:
      v8 = 0;
      if (!v7)
        return v8 != 0;
      goto LABEL_11;
    }
  }
  if (!a3)
  {
LABEL_10:
    v8 = 1;
    if (!*((_BYTE *)this + 40))
      return v8 != 0;
    goto LABEL_11;
  }
  v9 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v9 > 0x36uLL)
  {
    qmemcpy(v9, "Parent function doesn't have the same debug-info format", 55);
    v11 = (_BYTE *)(*((_QWORD *)v4 + 4) + 55);
    *((_QWORD *)v4 + 4) = v11;
    v10 = v4;
    if (*((_BYTE **)v4 + 3) != v11)
      goto LABEL_9;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v4, "Parent function doesn't have the same debug-info format", 0x37uLL);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if (*((_BYTE **)v10 + 3) != v11)
    {
LABEL_9:
      *v11 = 10;
      ++*((_QWORD *)v10 + 4);
      goto LABEL_10;
    }
  }
  llvm::raw_ostream::write(v10, "\n", 1uLL);
  v8 = 1;
  if (!*((_BYTE *)this + 40))
    return v8 != 0;
LABEL_11:
  v12 = (char *)this + 48;
  v13 = (char *)*((_QWORD *)this + 7);
  v47 = a3;
  v46 = this;
  if (v13 != (char *)this + 48)
  {
    if ((a3 & 1) != 0)
    {
      while (1)
      {
        if (v13)
          v18 = v13 - 24;
        else
          v18 = 0;
        v19 = (llvm::DPMarker *)*((_QWORD *)v18 + 8);
        if (!v19)
          goto LABEL_29;
        if (*(char **)v19 != v18)
        {
          v20 = (void *)*((_QWORD *)v4 + 4);
          if (*((_QWORD *)v4 + 3) - (_QWORD)v20 >= 0x2DuLL)
          {
            qmemcpy(v20, "Debug Marker points to incorrect instruction?", 45);
            v22 = (_BYTE *)(*((_QWORD *)v4 + 4) + 45);
            *((_QWORD *)v4 + 4) = v22;
            v21 = v4;
            if (*((_BYTE **)v4 + 3) == v22)
            {
LABEL_56:
              v8 = 1;
              llvm::raw_ostream::write(v21, "\n", 1uLL);
              DbgValueRange = llvm::DPMarker::getDbgValueRange(v19);
              if (DbgValueRange == v24)
                goto LABEL_29;
LABEL_39:
              v25 = DbgValueRange;
              v26 = v24;
              while (2)
              {
                if (*(llvm::DPMarker **)(v25 + 56) != v19)
                {
                  v27 = (void *)*((_QWORD *)v4 + 4);
                  if (*((_QWORD *)v4 + 3) - (_QWORD)v27 < 0x24uLL)
                  {
                    v28 = llvm::raw_ostream::write(v4, "Not pointing at correct next marker!", 0x24uLL);
                    v29 = (_BYTE *)*((_QWORD *)v28 + 4);
                    if (*((_BYTE **)v28 + 3) != v29)
                      goto LABEL_45;
LABEL_51:
                    v8 = 1;
                    llvm::raw_ostream::write(v28, "\n", 1uLL);
                    if (v18[16] == 83)
                    {
LABEL_47:
                      v30 = (void *)*((_QWORD *)v4 + 4);
                      if (*((_QWORD *)v4 + 3) - (_QWORD)v30 >= 0x3FuLL)
                      {
                        qmemcpy(v30, "DebugProgramValues must not appear before PHI nodes in a block!", 63);
                        v32 = (_BYTE *)(*((_QWORD *)v4 + 4) + 63);
                        *((_QWORD *)v4 + 4) = v32;
                        v31 = v4;
                        if (*((_BYTE **)v4 + 3) == v32)
                          goto LABEL_40;
                      }
                      else
                      {
                        v31 = llvm::raw_ostream::write(v4, "DebugProgramValues must not appear before PHI nodes in a block!", 0x3FuLL);
                        v32 = (_BYTE *)*((_QWORD *)v31 + 4);
                        if (*((_BYTE **)v31 + 3) == v32)
                        {
LABEL_40:
                          v8 = 1;
                          llvm::raw_ostream::write(v31, "\n", 1uLL);
                          goto LABEL_41;
                        }
                      }
                      *v32 = 10;
                      ++*((_QWORD *)v31 + 4);
                      v8 = 1;
                    }
LABEL_41:
                    v25 = *(_QWORD *)(v25 + 8);
                    if (v25 == v26)
                      goto LABEL_29;
                    continue;
                  }
                  qmemcpy(v27, "Not pointing at correct next marker!", 36);
                  v29 = (_BYTE *)(*((_QWORD *)v4 + 4) + 36);
                  *((_QWORD *)v4 + 4) = v29;
                  v28 = v4;
                  if (*((_BYTE **)v4 + 3) == v29)
                    goto LABEL_51;
LABEL_45:
                  *v29 = 10;
                  ++*((_QWORD *)v28 + 4);
                  v8 = 1;
                }
                break;
              }
              if (v18[16] == 83)
                goto LABEL_47;
              goto LABEL_41;
            }
          }
          else
          {
            v21 = llvm::raw_ostream::write(v4, "Debug Marker points to incorrect instruction?", 0x2DuLL);
            v22 = (_BYTE *)*((_QWORD *)v21 + 4);
            if (*((_BYTE **)v21 + 3) == v22)
              goto LABEL_56;
          }
          *v22 = 10;
          ++*((_QWORD *)v21 + 4);
          v8 = 1;
        }
        DbgValueRange = llvm::DPMarker::getDbgValueRange(v19);
        if (DbgValueRange != v24)
          goto LABEL_39;
LABEL_29:
        v13 = (char *)*((_QWORD *)v13 + 1);
        if (v13 == (char *)this + 48)
          goto LABEL_58;
      }
    }
    do
    {
      if (v13)
        v14 = v13 - 24;
      else
        v14 = 0;
      v15 = (char **)*((_QWORD *)v14 + 8);
      if (v15)
      {
        if (*v15 != v14)
          v8 = 1;
        for (i = llvm::DPMarker::getDbgValueRange(*((llvm::DPMarker **)v14 + 8)); i != v17; i = *(_QWORD *)(i + 8))
        {
          while (*(char ***)(i + 56) != v15)
          {
            v8 = 1;
            i = *(_QWORD *)(i + 8);
            if (i == v17)
              goto LABEL_14;
          }
          if (v14[16] == 83)
            v8 = 1;
        }
      }
LABEL_14:
      v13 = (char *)*((_QWORD *)v13 + 1);
    }
    while (v13 != v12);
  }
LABEL_58:
  v33 = ***(_QWORD ***)v46;
  if ((*(_BYTE *)(v33 + 2736) & 1) != 0)
  {
    v36 = v33 + 2744;
    v34 = 4;
    v35 = v47;
  }
  else
  {
    v34 = *(_DWORD *)(v33 + 2752);
    v35 = v47;
    if (!v34)
      return v8 != 0;
    v36 = *(_QWORD *)(v33 + 2744);
  }
  v37 = v34 - 1;
  v38 = (v34 - 1) & ((v46 >> 4) ^ (v46 >> 9));
  v39 = *(llvm::BasicBlock **)(v36 + 16 * v38);
  if (v39 == v46)
  {
LABEL_63:
    if (*(_QWORD *)(v36 + 16 * v38 + 8))
    {
      if (!v35)
      {
LABEL_68:
        v8 = 1;
        return v8 != 0;
      }
      v40 = (void *)*((_QWORD *)v4 + 4);
      if (*((_QWORD *)v4 + 3) - (_QWORD)v40 > 0x19uLL)
      {
        qmemcpy(v40, "Trailing DPValues in block", 26);
        v43 = (_BYTE *)*((_QWORD *)v4 + 3);
        v41 = (_BYTE *)(*((_QWORD *)v4 + 4) + 26);
        *((_QWORD *)v4 + 4) = v41;
        if (v43 != v41)
          goto LABEL_67;
      }
      else
      {
        v4 = llvm::raw_ostream::write(v4, "Trailing DPValues in block", 0x1AuLL);
        v41 = (_BYTE *)*((_QWORD *)v4 + 4);
        if (*((_BYTE **)v4 + 3) != v41)
        {
LABEL_67:
          *v41 = 10;
          ++*((_QWORD *)v4 + 4);
          goto LABEL_68;
        }
      }
      v8 = 1;
      llvm::raw_ostream::write(v4, "\n", 1uLL);
    }
  }
  else
  {
    v44 = 1;
    while (v39 != (llvm::BasicBlock *)-4096)
    {
      v45 = v38 + v44++;
      v38 = v45 & v37;
      v39 = *(llvm::BasicBlock **)(v36 + 16 * v38);
      if (v39 == v46)
        goto LABEL_63;
    }
  }
  return v8 != 0;
}

llvm::ValueSymbolTable *llvm::SymbolTableListTraits<llvm::Instruction,llvm::ilist_iterator_bits<true>>::addNodeToList(uint64_t a1, llvm::MCSymbolXCOFF *this)
{
  llvm::ValueSymbolTable *result;
  uint64_t v5;

  result = (llvm::ValueSymbolTable *)llvm::MCSymbolXCOFF::setRepresentedCsect((uint64_t)this, (llvm::MCSectionXCOFF *)(a1 - 48));
  *(_WORD *)(a1 - 30) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      result = *(llvm::ValueSymbolTable **)(v5 + 104);
      if (result)
        return (llvm::ValueSymbolTable *)llvm::ValueSymbolTable::reinsertValue(result, this);
    }
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction,llvm::ilist_iterator_bits<true>>::removeNodeFromList(uint64_t a1, llvm::MCSymbolXCOFF *this)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ValueName;

  result = llvm::MCSymbolXCOFF::setRepresentedCsect((uint64_t)this, 0);
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 104);
      if (v6)
      {
        ValueName = llvm::Value::getValueName(this);
        return llvm::ValueSymbolTable::removeValueName(v6, ValueName);
      }
    }
  }
  return result;
}

llvm::BasicBlock *llvm::BasicBlock::BasicBlock(llvm::BasicBlock *this, llvm::LLVMContext *a2, const char **a3, llvm::Function *a4, llvm::BasicBlock *a5)
{
  llvm::Type *LabelTy;
  llvm::BasicBlock *v10;

  LabelTy = (llvm::Type *)llvm::Type::getLabelTy(a2, a2);
  v10 = (llvm::BasicBlock *)llvm::Value::Value((uint64_t)this, LabelTy, 22);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = (char *)this + 48;
  *((_QWORD *)this + 7) = (char *)this + 48;
  *((_QWORD *)this + 8) = 0;
  if (a4)
  {
    llvm::BasicBlock::insertInto(v10, a4, a5);
    llvm::Value::setName(this, a3);
    if (*((_BYTE *)a4 + 120))
    {
      if (*((_BYTE *)this + 40))
        return this;
      llvm::BasicBlock::convertToNewDbgValues(this);
      return this;
    }
    else
    {
      if (!*((_BYTE *)this + 40))
        return this;
      llvm::BasicBlock::convertFromNewDbgValues(this);
      return this;
    }
  }
  else
  {
    llvm::Value::setName(v10, a3);
    return this;
  }
}

llvm::ValueSymbolTable *llvm::BasicBlock::insertInto(llvm::BasicBlock *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  char *v6;
  llvm::ValueSymbolTable *result;
  uint64_t v8;
  char *v9;

  if (*((_BYTE *)a2 + 120))
  {
    if (!*((_BYTE *)this + 40))
      llvm::BasicBlock::convertToNewDbgValues(this);
  }
  else if (*((_BYTE *)this + 40))
  {
    llvm::BasicBlock::convertFromNewDbgValues(this);
  }
  if (a3)
  {
    v6 = (char *)a3 + 24;
    if (*((_BYTE *)a2 + 120))
      goto LABEL_8;
  }
  else
  {
    v6 = (char *)a2 + 72;
    if (*((_BYTE *)a2 + 120))
    {
LABEL_8:
      if (!*((_BYTE *)this + 40))
        llvm::BasicBlock::convertToNewDbgValues(this);
      goto LABEL_13;
    }
  }
  if (*((_BYTE *)this + 40))
    llvm::BasicBlock::convertFromNewDbgValues(this);
LABEL_13:
  result = (llvm::ValueSymbolTable *)llvm::SymbolTableListTraits<llvm::Instruction,llvm::ilist_iterator_bits<true>>::setSymTabObject<llvm::Function *>((uint64_t)this + 48, (_QWORD *)this + 8, (uint64_t)a2);
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    result = (llvm::ValueSymbolTable *)*((_QWORD *)a2 + 13);
    if (result)
      result = (llvm::ValueSymbolTable *)llvm::ValueSymbolTable::reinsertValue(result, this);
  }
  v8 = *(_QWORD *)v6;
  *((_QWORD *)this + 3) = *(_QWORD *)v6;
  *((_QWORD *)this + 4) = v6;
  v9 = (char *)this + 24;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)v6 = v9;
  return result;
}

void llvm::BasicBlock::~BasicBlock(llvm::Type ***this, llvm::LLVMContext *a2)
{
  uint64_t Int32Ty;
  llvm::ConstantExpr *v4;
  llvm::Type *v5;
  llvm::Type **v6;
  llvm::ConstantExpr *v7;
  llvm::Type ***v8;
  llvm::Value *v9;
  char *v10;
  llvm::Type ***v11;
  llvm::Type ***v12;
  int v13;
  uint64_t v14;
  llvm::Type ***v15;
  uint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  llvm::Type **v19;
  llvm::Type **v20;
  llvm::DPMarker *v21;
  llvm::Type **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  llvm::Type **v28;
  llvm::Type *v29;
  uint64_t ValueName;
  llvm::Type **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Type **v36;
  llvm::Type *v37;
  uint64_t v38;

  if ((*((_WORD *)this + 9) & 0x7FFF) != 0)
  {
    Int32Ty = llvm::Type::getInt32Ty(**this, a2);
    v4 = (llvm::ConstantExpr *)llvm::ConstantInt::get(Int32Ty, 1, 0);
    v6 = this[1];
    if (v6)
    {
      v7 = v4;
      do
      {
        v8 = (llvm::Type ***)v6[3];
        llvm::ConstantExpr::getIntToPtr(v7, *v8, 0, v5);
        llvm::Value::replaceAllUsesWith((Value *)v8, v9);
        llvm::Constant::destroyConstant((llvm::Constant *)v8);
        v6 = this[1];
      }
      while (v6);
    }
  }
  v10 = (char *)(this + 6);
  v11 = (llvm::Type ***)this[7];
  if (v11 != this + 6)
  {
    while (1)
    {
      if (v11)
        v12 = v11 - 3;
      else
        v12 = 0;
      v13 = *((_DWORD *)v12 + 5);
      if ((v13 & 0x40000000) != 0)
      {
        v15 = (llvm::Type ***)*(v12 - 1);
        v14 = v13 & 0x7FFFFFF;
        if (v14)
        {
LABEL_15:
          v16 = 32 * v14;
          v17 = v15 + 2;
          do
          {
            if (*(v17 - 2))
            {
              **v17 = *(v17 - 1);
              v18 = (uint64_t)*(v17 - 1);
              if (v18)
                *(_QWORD *)(v18 + 16) = *v17;
            }
            *(v17 - 2) = 0;
            v17 += 4;
            v16 -= 32;
          }
          while (v16);
        }
      }
      else
      {
        v14 = v13 & 0x7FFFFFF;
        v15 = &v12[-4 * v14];
        if (v14)
          goto LABEL_15;
      }
      v11 = (llvm::Type ***)v11[1];
      if (v11 == (llvm::Type ***)v10)
      {
        v19 = this[7];
        if (v19 != (llvm::Type **)v10)
        {
          do
          {
            v20 = v19 - 3;
            if (!v19)
              v20 = 0;
            v21 = v20[8];
            if (v21)
              llvm::DPMarker::eraseFromParent(v21);
            v19 = (llvm::Type **)v19[1];
          }
          while (v19 != (llvm::Type **)v10);
          v22 = this[7];
          if (v22 != (llvm::Type **)v10)
          {
            do
            {
              v25 = (uint64_t)(v22 - 3);
              v26 = v22 == 0;
              v22 = (llvm::Type **)v22[1];
              if (v26)
                v27 = 0;
              else
                v27 = v25;
              llvm::MCSymbolXCOFF::setRepresentedCsect(v27, 0);
              if ((*(_BYTE *)(v27 + 23) & 0x10) != 0)
              {
                v28 = this[8];
                if (v28)
                {
                  v29 = v28[13];
                  if (v29)
                  {
                    ValueName = llvm::Value::getValueName((llvm::Value *)v27);
                    llvm::ValueSymbolTable::removeValueName(v29, ValueName);
                  }
                }
              }
              v23 = *(_QWORD *)(v27 + 24);
              v24 = *(_QWORD **)(v27 + 32);
              *v24 = v23;
              *(_QWORD *)(v23 + 8) = v24;
              *(_QWORD *)(v27 + 24) = 0;
              *(_QWORD *)(v27 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v27);
            }
            while (v22 != (llvm::Type **)v10);
            v31 = this[7];
            while (v31 != (llvm::Type **)v10)
            {
              v34 = (uint64_t)(v31 - 3);
              v26 = v31 == 0;
              v31 = (llvm::Type **)v31[1];
              if (v26)
                v35 = 0;
              else
                v35 = v34;
              llvm::MCSymbolXCOFF::setRepresentedCsect(v35, 0);
              if ((*(_BYTE *)(v35 + 23) & 0x10) != 0)
              {
                v36 = this[8];
                if (v36)
                {
                  v37 = v36[13];
                  if (v37)
                  {
                    v38 = llvm::Value::getValueName((llvm::Value *)v35);
                    llvm::ValueSymbolTable::removeValueName(v37, v38);
                  }
                }
              }
              v32 = *(_QWORD *)(v35 + 24);
              v33 = *(_QWORD **)(v35 + 32);
              *v33 = v32;
              *(_QWORD *)(v32 + 8) = v33;
              *(_QWORD *)(v35 + 24) = 0;
              *(_QWORD *)(v35 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v35);
            }
          }
        }
        break;
      }
    }
  }
  llvm::Value::~Value((llvm::Value *)this, a2);
}

uint64_t llvm::BasicBlock::dropAllReferences(uint64_t this)
{
  uint64_t i;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;

  for (i = *(_QWORD *)(this + 56); i != this + 48; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v2 = i - 24;
    else
      v2 = 0;
    v3 = *(_DWORD *)(v2 + 20);
    if ((v3 & 0x40000000) != 0)
    {
      v5 = *(_QWORD *)(v2 - 8);
      v4 = v3 & 0x7FFFFFF;
      if (!v4)
        continue;
    }
    else
    {
      v4 = v3 & 0x7FFFFFF;
      v5 = v2 - 32 * v4;
      if (!v4)
        continue;
    }
    v6 = 32 * v4;
    v7 = (_QWORD **)(v5 + 16);
    do
    {
      if (*(v7 - 2))
      {
        **v7 = *(v7 - 1);
        v8 = (uint64_t)*(v7 - 1);
        if (v8)
          *(_QWORD *)(v8 + 16) = *v7;
      }
      *(v7 - 2) = 0;
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return this;
}

uint64_t llvm::BasicBlock::setParent(llvm::BasicBlock *this, llvm::Function *a2)
{
  return llvm::SymbolTableListTraits<llvm::Instruction,llvm::ilist_iterator_bits<true>>::setSymTabObject<llvm::Function *>((uint64_t)this + 48, (_QWORD *)this + 8, (uint64_t)a2);
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction,llvm::ilist_iterator_bits<true>>::setSymTabObject<llvm::Function *>(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  llvm::ValueSymbolTable *v5;
  uint64_t v6;
  llvm::ValueSymbolTable *v7;
  uint64_t i;
  uint64_t ValueName;
  uint64_t j;
  llvm::Value *v11;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = *(llvm::ValueSymbolTable **)(v4 + 104);
    *a2 = a3;
    v6 = *(_QWORD *)(result + 16);
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    *a2 = a3;
    v6 = *(_QWORD *)(result + 16);
    if (v6)
    {
LABEL_3:
      v7 = *(llvm::ValueSymbolTable **)(v6 + 104);
      if (v5 == v7)
        return result;
      goto LABEL_7;
    }
  }
  v7 = 0;
  if (!v5)
    return result;
LABEL_7:
  if (*(_QWORD *)result != result)
  {
    if (v5)
    {
      for (i = *(_QWORD *)(result + 8); i != v3; i = *(_QWORD *)(i + 8))
      {
        if (i)
          result = i - 24;
        else
          result = 0;
        if ((*(_BYTE *)(result + 23) & 0x10) != 0)
        {
          ValueName = llvm::Value::getValueName((llvm::Value *)result);
          result = llvm::ValueSymbolTable::removeValueName(v5, ValueName);
        }
      }
    }
    if (v7)
    {
      for (j = *(_QWORD *)(v3 + 8); j != v3; j = *(_QWORD *)(j + 8))
      {
        if (j)
          v11 = (llvm::Value *)(j - 24);
        else
          v11 = 0;
        if ((*((_BYTE *)v11 + 23) & 0x10) != 0)
          result = llvm::ValueSymbolTable::reinsertValue(v7, v11);
      }
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::eraseFromParent(llvm::BasicBlock *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  llvm::LLVMContext *v5;
  uint64_t v6;
  uint64_t ValueName;
  uint64_t v8;
  _QWORD *v9;
  void *v10;

  v2 = (char *)this + 64;
  v3 = *((_QWORD *)this + 8);
  v4 = *((_QWORD *)this + 4);
  llvm::SymbolTableListTraits<llvm::Instruction,llvm::ilist_iterator_bits<true>>::setSymTabObject<llvm::Function *>((uint64_t)this + 48, (_QWORD *)this + 8, 0);
  if ((*(v2 - 41) & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v3 + 104);
    if (v6)
    {
      ValueName = llvm::Value::getValueName(this);
      llvm::ValueSymbolTable::removeValueName(v6, ValueName);
    }
  }
  v8 = *((_QWORD *)this + 3);
  v9 = (_QWORD *)*((_QWORD *)this + 4);
  *v9 = v8;
  *(_QWORD *)(v8 + 8) = v9;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  llvm::BasicBlock::~BasicBlock((llvm::Type ***)this, v5);
  operator delete(v10);
  return v4;
}

uint64_t *llvm::BasicBlock::moveBefore(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)result[4];
  if (result + 3 != a2 && v2 != a2)
    return (uint64_t *)llvm::Function::splice(result[8], a2, result[8], result + 3, v2);
  return result;
}

uint64_t llvm::BasicBlock::getModule(llvm::BasicBlock *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 40);
}

char *llvm::BasicBlock::getFirstNonPHI(llvm::BasicBlock *this)
{
  char *v1;
  char *v2;
  char *result;
  uint64_t v4;

  v1 = (char *)this + 48;
  v2 = (char *)*((_QWORD *)this + 7);
  if (v2 == (char *)this + 48)
    return 0;
  while (1)
  {
    result = v2 - 24;
    v4 = v2 ? (uint64_t)(v2 - 24) : 0;
    if (*(_BYTE *)(v4 + 16) != 83)
      break;
    v2 = (char *)*((_QWORD *)v2 + 1);
    if (v2 == v1)
      return 0;
  }
  return result;
}

BOOL llvm::BasicBlock::isEntryBlock(llvm::BasicBlock *this)
{
  uint64_t v1;
  llvm::BasicBlock *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 8) + 80);
  if (v1)
    v2 = (llvm::BasicBlock *)(v1 - 24);
  else
    v2 = 0;
  return v2 == this;
}

uint64_t llvm::BasicBlock::getSinglePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  do
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      break;
    v8 = *(_QWORD *)(v1 + 24);
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v8 && v9 >= 0x1C;
  }
  while (!v10 || v9 - 29 >= 0xB);
  if (v1)
    return 0;
  else
    return v7;
}

uint64_t llvm::BasicBlock::getUniquePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      break;
    v8 = *(_QWORD *)(v1 + 24);
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v8)
      v10 = v9 >= 0x1C;
    else
      v10 = 0;
    if (v10 && v9 - 29 <= 0xA)
    {
      if (*(_QWORD *)(v8 + 40) != v7)
        return 0;
      while (1)
      {
        v1 = *(_QWORD *)(v1 + 8);
        if (!v1)
          break;
        v12 = *(_QWORD *)(v1 + 24);
        v13 = *(unsigned __int8 *)(v12 + 16);
        if (v12)
          v14 = v13 >= 0x1C;
        else
          v14 = 0;
        if (v14 && v13 - 29 < 0xB)
        {
          result = 0;
          if (*(_QWORD *)(v12 + 40) != v7)
            return result;
        }
      }
      return v7;
    }
  }
  return v7;
}

char *llvm::BasicBlock::phis(llvm::BasicBlock **this)
{
  llvm::BasicBlock *v1;
  char *v2;

  if (this[6] == (llvm::BasicBlock *)(this + 6))
    return 0;
  v1 = this[7];
  if (v1)
    v2 = (char *)v1 - 24;
  else
    v2 = 0;
  if (v2[16] == 83)
    return v2;
  else
    return 0;
}

uint64_t llvm::BasicBlock::replaceSuccessorsPhiUsesWith(llvm::BasicBlock *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  llvm::Instruction *v6;
  uint64_t v7;
  int v10;
  int i;
  uint64_t j;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *((_QWORD *)this + 6);
  result = (uint64_t)this + 48;
  v4 = v5;
  if (v5 != result)
  {
    v6 = (llvm::Instruction *)(v4 - 24);
    v7 = v4 ? v4 - 24 : 0;
    if (*(unsigned __int8 *)(v7 + 16) - 29 <= 0xA)
    {
      result = llvm::Instruction::getNumSuccessors(v6);
      if ((_DWORD)result)
      {
        v10 = result;
        for (i = 0; v10 != i; ++i)
        {
          result = llvm::Instruction::getSuccessor(v6);
          for (j = *(_QWORD *)(result + 56); j != result + 48; j = *(_QWORD *)(j + 8))
          {
            v13 = j - 24;
            if (!j)
              v13 = 0;
            v14 = *(unsigned __int8 *)(v13 + 16);
            if (v14 != 83)
              v13 = 0;
            if (!j || v14 != 83)
              break;
            v15 = *(_DWORD *)(v13 + 20);
            v16 = v15 & 0x7FFFFFF;
            if ((v15 & 0x7FFFFFF) != 0)
            {
              v17 = 0;
              v18 = 8 * v16;
              do
              {
                v19 = *(_DWORD *)(v13 + 20);
                if ((v19 & 0x40000000) != 0)
                {
                  v20 = *(_QWORD *)(v13 - 8);
                  v21 = *(unsigned int *)(v13 + 72);
                  if (*(llvm::BasicBlock **)(v20 + 32 * v21 + v17) == a2)
LABEL_25:
                    *(_QWORD *)(v20 + 32 * v21 + v17) = a3;
                }
                else
                {
                  v20 = v13 - 32 * (v19 & 0x7FFFFFF);
                  v21 = *(unsigned int *)(v13 + 72);
                  if (*(llvm::BasicBlock **)(v20 + 32 * v21 + v17) == a2)
                    goto LABEL_25;
                }
                v17 += 8;
              }
              while (v18 != v17);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::replacePhiUsesWith(uint64_t this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t i;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  for (i = *(_QWORD *)(this + 56); i != this + 48; i = *(_QWORD *)(i + 8))
  {
    v4 = i - 24;
    if (!i)
      v4 = 0;
    v5 = *(unsigned __int8 *)(v4 + 16);
    if (v5 != 83)
      v4 = 0;
    if (!i || v5 != 83)
      break;
    v6 = *(_DWORD *)(v4 + 20);
    v7 = v6 & 0x7FFFFFF;
    if ((v6 & 0x7FFFFFF) != 0)
    {
      v8 = 0;
      v9 = 8 * v7;
      do
      {
        v10 = *(_DWORD *)(v4 + 20);
        if ((v10 & 0x40000000) != 0)
        {
          v11 = *(_QWORD *)(v4 - 8);
          v12 = *(unsigned int *)(v4 + 72);
          if (*(llvm::BasicBlock **)(v11 + 32 * v12 + v8) == a2)
LABEL_17:
            *(_QWORD *)(v11 + 32 * v12 + v8) = a3;
        }
        else
        {
          v11 = v4 - 32 * (v10 & 0x7FFFFFF);
          v12 = *(unsigned int *)(v4 + 72);
          if (*(llvm::BasicBlock **)(v11 + 32 * v12 + v8) == a2)
            goto LABEL_17;
        }
        v8 += 8;
      }
      while (v9 != v8);
    }
  }
  return this;
}

uint64_t llvm::BasicBlock::replaceSuccessorsPhiUsesWith(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
  return llvm::BasicBlock::replaceSuccessorsPhiUsesWith(this, this, a2);
}

_QWORD *llvm::BasicBlock::getLandingPadInst(llvm::BasicBlock *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)*((_QWORD *)this + 7);
  if (v1 == (_QWORD *)((char *)this + 48))
    return 0;
  while (1)
  {
    v2 = v1 - 3;
    v3 = v1 ? (uint64_t)(v1 - 3) : 0;
    if (*(_BYTE *)(v3 + 16) != 83)
      break;
    v1 = (_QWORD *)v1[1];
    if (v1 == (_QWORD *)((char *)this + 48))
    {
      v2 = 0;
      break;
    }
  }
  if (*((_BYTE *)v2 + 16) == 94)
    return v2;
  else
    return 0;
}

uint64_t llvm::BasicBlock::renumberInstructions(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 56);
  if (v1 != this + 48)
  {
    v2 = 0;
    do
    {
      v3 = v1 - 24;
      if (!v1)
        v3 = 0;
      *(_DWORD *)(v3 + 56) = v2++;
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1 != this + 48);
  }
  *(_WORD *)(this + 18) |= 0x8000u;
  return this;
}

uint64_t ***llvm::BasicBlock::flushTerminatorDbgValues(uint64_t ***this)
{
  uint64_t ***v1;
  uint64_t ***v2;
  uint64_t ***v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  int v21;
  int v22;

  if (*((_BYTE *)this + 40))
  {
    v1 = this;
    v2 = (uint64_t ***)this[6];
    if (v2 != this + 6)
    {
      v3 = v2 - 3;
      if (!v2)
        v3 = 0;
      if (*((unsigned __int8 *)v3 + 16) - 29 <= 0xA)
      {
        v4 = ***this;
        if ((*(_BYTE *)(v4 + 2736) & 1) != 0)
        {
          v6 = v4 + 2744;
          v5 = 4;
        }
        else
        {
          v5 = *(_DWORD *)(v4 + 2752);
          if (!v5)
            return this;
          v6 = *(_QWORD *)(v4 + 2744);
        }
        v7 = (this >> 4) ^ (this >> 9);
        v8 = v5 - 1;
        v9 = (v5 - 1) & v7;
        v10 = *(uint64_t ****)(v6 + 16 * v9);
        if (v10 == this)
        {
LABEL_11:
          v11 = *(_QWORD *)(v6 + 16 * v9 + 8);
          if (!v11)
            return this;
          this = (uint64_t ***)llvm::DPMarker::absorbDebugValues((uint64_t)v2[5], v11, 0);
          v12 = ***v1;
          if ((*(_BYTE *)(v12 + 2736) & 1) != 0)
          {
            v14 = v12 + 2744;
            v13 = 4;
          }
          else
          {
            v13 = *(_DWORD *)(v12 + 2752);
            if (!v13)
              return this;
            v14 = *(_QWORD *)(v12 + 2744);
          }
          v15 = v13 - 1;
          LODWORD(v16) = (v13 - 1) & v7;
          v17 = (uint64_t ****)(v14 + 16 * v16);
          v18 = *v17;
          if (*v17 == v1)
          {
LABEL_17:
            *v17 = (uint64_t ***)-8192;
            *(_DWORD *)(v12 + 2736) -= 2;
            ++*(_DWORD *)(v12 + 2740);
          }
          else
          {
            v21 = 1;
            while (v18 != (uint64_t ***)-4096)
            {
              v22 = v16 + v21++;
              v16 = v22 & v15;
              v18 = *(uint64_t ****)(v14 + 16 * v16);
              if (v18 == v1)
              {
                v17 = (uint64_t ****)(v14 + 16 * v16);
                goto LABEL_17;
              }
            }
          }
        }
        else
        {
          v19 = 1;
          while (v10 != (uint64_t ***)-4096)
          {
            v20 = v9 + v19++;
            v9 = v20 & v8;
            v10 = *(uint64_t ****)(v6 + 16 * v9);
            if (v10 == this)
              goto LABEL_11;
          }
        }
      }
    }
  }
  return this;
}

uint64_t **llvm::BasicBlock::getMarker(uint64_t ***a1, uint64_t ***a2)
{
  uint64_t ***v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t ***v9;
  int v10;
  int v11;

  if (a1 + 6 == a2)
  {
    v4 = ***a1;
    if ((*(_BYTE *)(v4 + 2736) & 1) != 0)
    {
      v6 = v4 + 2744;
      v5 = 4;
    }
    else
    {
      v5 = *(_DWORD *)(v4 + 2752);
      if (!v5)
        return 0;
      v6 = *(_QWORD *)(v4 + 2744);
    }
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v9 = *(uint64_t ****)(v6 + 16 * v8);
    if (v9 == a1)
      return *(uint64_t ***)(v6 + 16 * v8 + 8);
    v10 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(uint64_t ****)(v6 + 16 * v8);
      if (v9 == a1)
        return *(uint64_t ***)(v6 + 16 * v8 + 8);
    }
    return 0;
  }
  v2 = a2 - 3;
  if (!a2)
    v2 = 0;
  return v2[8];
}

uint64_t **llvm::BasicBlock::getNextMarker(uint64_t ***a1, uint64_t a2)
{
  uint64_t ***v2;
  uint64_t ***v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t ***v10;
  int v11;
  int v12;

  v2 = *(uint64_t ****)(a2 + 32);
  if (a1 + 6 == v2)
  {
    v5 = ***a1;
    if ((*(_BYTE *)(v5 + 2736) & 1) != 0)
    {
      v7 = v5 + 2744;
      v6 = 4;
    }
    else
    {
      v6 = *(_DWORD *)(v5 + 2752);
      if (!v6)
        return 0;
      v7 = *(_QWORD *)(v5 + 2744);
    }
    v8 = v6 - 1;
    v9 = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v10 = *(uint64_t ****)(v7 + 16 * v9);
    if (v10 == a1)
      return *(uint64_t ***)(v7 + 16 * v9 + 8);
    v11 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      v12 = v9 + v11++;
      v9 = v12 & v8;
      v10 = *(uint64_t ****)(v7 + 16 * v9);
      if (v10 == a1)
        return *(uint64_t ***)(v7 + 16 * v9 + 8);
    }
    return 0;
  }
  if (v2)
    v3 = v2 - 3;
  else
    v3 = 0;
  return v3[8];
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>,llvm::BasicBlock *,llvm::DPMarker *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::InsertIntoBucket<llvm::BasicBlock * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::grow(a1, v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = (_QWORD *)(v11 + 16 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (_QWORD *)(v11 + 16 * (v19 & v13));
      v15 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

int *llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  _QWORD v19[7];

  v19[6] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v15 = (char *)(16 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>,llvm::BasicBlock *,llvm::DPMarker *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v15[(_QWORD)v6]);
    llvm::deallocate_buffer((llvm *)v6, v15);
  }
  v8 = v18;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16);
    v18[0] = *(_QWORD *)(a1 + 8);
    v18[1] = v16;
    v8 = v19;
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v10 = *(_QWORD *)(a1 + 40);
      if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_19;
    }
  }
  v17 = *(_QWORD *)(a1 + 32);
  *v8 = v9;
  v8[1] = v17;
  v8 += 2;
  v10 = *(_QWORD *)(a1 + 40);
  if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v11 = *(_QWORD *)(a1 + 56);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
LABEL_20:
    *v8 = v11;
    v8[1] = *(_QWORD *)(a1 + 64);
    v8 += 2;
    if (a2 < 5)
      return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>,llvm::BasicBlock *,llvm::DPMarker *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::moveFromOldBuckets((int *)a1, v18, v8);
    goto LABEL_13;
  }
LABEL_19:
  *v8 = v10;
  v8[1] = *(_QWORD *)(a1 + 48);
  v8 += 2;
  v11 = *(_QWORD *)(a1 + 56);
  if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    goto LABEL_20;
LABEL_12:
  if (a2 >= 5)
  {
LABEL_13:
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>,llvm::BasicBlock *,llvm::DPMarker *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::moveFromOldBuckets((int *)a1, v18, v8);
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>,llvm::BasicBlock *,llvm::DPMarker *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::moveFromOldBuckets(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int *v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 18;
    v5 = result + 2;
    v7 = 48;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_11;
    v5 = (int *)*((_QWORD *)result + 1);
    v6 = &v5[4 * v4];
    v7 = (char *)v6 - (char *)v5 - 16;
    if (v7 < 0x10)
    {
      v9 = (int *)*((_QWORD *)result + 1);
      do
      {
LABEL_10:
        *(_QWORD *)v9 = -4096;
        v9 += 4;
      }
      while (v9 != v6);
      goto LABEL_11;
    }
  }
  v8 = (v7 >> 4) + 1;
  v9 = &v5[4 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
  v10 = v5 + 4;
  v11 = v8 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = -4096;
    *v10 = -4096;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  while (a2 != a3)
  {
    v18 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v13 = 4;
        v12 = result + 2;
      }
      else
      {
        v12 = (int *)*((_QWORD *)result + 1);
        v13 = result[4];
      }
      v14 = v13 - 1;
      v15 = (v13 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v16 = &v12[4 * v15];
      v17 = *(_QWORD *)v16;
      if (v18 != *(_QWORD *)v16)
      {
        v19 = 0;
        v20 = 1;
        while (v17 != -4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v17 == -8192;
          if (v21)
            v19 = v16;
          v22 = v15 + v20++;
          v15 = v22 & v14;
          v16 = &v12[4 * (v22 & v14)];
          v17 = *(_QWORD *)v16;
          if (v18 == *(_QWORD *)v16)
            goto LABEL_15;
        }
        if (v19)
          v16 = v19;
      }
LABEL_15:
      *(_QWORD *)v16 = v18;
      *((_QWORD *)v16 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_BasicBlock_cpp()
{
  char v1;
  _BYTE *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Enable communicating debuginfo positions through iterators, eliminating intrinsics";
  *((_QWORD *)&v3 + 1) = 82;
  v1 = 0;
  v2 = &v1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::desc,llvm::cl::initializer<BOOL>>((uint64_t)&UseNewDbgInfoFormat, (int8x16_t *)"experimental-debuginfo-iterators", &v3, &v2);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &UseNewDbgInfoFormat, &dword_18013D000);
}

uint64_t llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::ErlangGC>::CtorFn@<X0>(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t result;

  v2 = operator new(0x28uLL);
  result = llvm::GCStrategy::GCStrategy((uint64_t)v2);
  *(_QWORD *)result = off_1E0E1A6C8;
  *(_WORD *)(result + 34) = 257;
  *a1 = result;
  return result;
}

void `anonymous namespace'::ErlangGC::~ErlangGC(void **this)
{
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  _anonymous_namespace_::ErlangGC *v1;

  v1 = (_anonymous_namespace_::ErlangGC *)this;
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    this = (void **)v1;
  }
  operator delete(this);
}

uint64_t llvm::GCStrategy::isGCManagedPointer(llvm::GCStrategy *this, const Type *a2)
{
  return 0;
}

void llvm::GCStrategy::~GCStrategy(void **this)
{
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  llvm::GCStrategy *v1;

  v1 = (llvm::GCStrategy *)this;
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    this = (void **)v1;
  }
  operator delete(this);
}

uint64_t llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::OcamlGC>::CtorFn@<X0>(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t result;

  v2 = operator new(0x28uLL);
  result = llvm::GCStrategy::GCStrategy((uint64_t)v2);
  *(_QWORD *)result = off_1E0E1A6A0;
  *(_WORD *)(result + 34) = 257;
  *a1 = result;
  return result;
}

void `anonymous namespace'::OcamlGC::~OcamlGC(void **this)
{
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  _anonymous_namespace_::OcamlGC *v1;

  v1 = (_anonymous_namespace_::OcamlGC *)this;
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    this = (void **)v1;
  }
  operator delete(this);
}

_QWORD *llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::ShadowStackGC>::CtorFn@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  _QWORD *result;

  v2 = operator new(0x28uLL);
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  result = (_QWORD *)llvm::GCStrategy::GCStrategy((uint64_t)v2);
  *result = off_1E0E159E0;
  *a1 = result;
  return result;
}

void `anonymous namespace'::ShadowStackGC::~ShadowStackGC(void **this)
{
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  _anonymous_namespace_::ShadowStackGC *v1;

  v1 = (_anonymous_namespace_::ShadowStackGC *)this;
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    this = (void **)v1;
  }
  operator delete(this);
}

double llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::StatepointGC>::CtorFn@<D0>(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  double result;

  v2 = operator new(0x28uLL);
  v3 = llvm::GCStrategy::GCStrategy((uint64_t)v2);
  *(_QWORD *)v3 = off_1E0E15570;
  *(_QWORD *)&result = 257;
  *(_DWORD *)(v3 + 32) = 257;
  *a1 = v3;
  return result;
}

void `anonymous namespace'::StatepointGC::~StatepointGC(void **this)
{
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  _anonymous_namespace_::StatepointGC *v1;

  v1 = (_anonymous_namespace_::StatepointGC *)this;
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    this = (void **)v1;
  }
  operator delete(this);
}

uint64_t `anonymous namespace'::StatepointGC::isGCManagedPointer(_anonymous_namespace_::StatepointGC *this, const Type *a2)
{
  return ((*((_DWORD *)a2 + 2) & 0xFFFFFF00) == 256) | 0x100u;
}

double llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::CoreCLRGC>::CtorFn@<D0>(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  double result;

  v2 = operator new(0x28uLL);
  v3 = llvm::GCStrategy::GCStrategy((uint64_t)v2);
  *(_QWORD *)v3 = off_1E0E1A8F0;
  *(_QWORD *)&result = 257;
  *(_DWORD *)(v3 + 32) = 257;
  *a1 = v3;
  return result;
}

void `anonymous namespace'::CoreCLRGC::~CoreCLRGC(void **this)
{
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  _anonymous_namespace_::CoreCLRGC *v1;

  v1 = (_anonymous_namespace_::CoreCLRGC *)this;
  *this = &unk_1E0E1F970;
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    this = (void **)v1;
  }
  operator delete(this);
}

uint64_t `anonymous namespace'::CoreCLRGC::isGCManagedPointer(_anonymous_namespace_::CoreCLRGC *this, const Type *a2)
{
  return ((*((_DWORD *)a2 + 2) & 0xFFFFFF00) == 256) | 0x100u;
}

uint64_t _GLOBAL__sub_I_BuiltinGCs_cpp()
{
  _MergedGlobals_62 = (uint64_t)"erlang";
  unk_1ECD342B0 = 6;
  qword_1ECD342B8 = (uint64_t)"erlang-compatible garbage collector";
  unk_1ECD342C0 = 35;
  qword_1ECD342D0 = 0;
  qword_1ECD342D8 = (uint64_t)&_MergedGlobals_62;
  llvm::Registry<llvm::GCStrategy>::add_node((uint64_t)&qword_1ECD342D0);
  qword_1ECD342E0 = (uint64_t)"ocaml";
  qword_1ECD342E8 = 5;
  unk_1ECD342F0 = "ocaml 3.10-compatible GC";
  qword_1ECD342F8 = 24;
  qword_1ECD34308 = 0;
  qword_1ECD34310 = (uint64_t)&qword_1ECD342E0;
  llvm::Registry<llvm::GCStrategy>::add_node((uint64_t)&qword_1ECD34308);
  qword_1ECD34318 = (uint64_t)"shadow-stack";
  qword_1ECD34320 = 12;
  unk_1ECD34328 = "Very portable GC for uncooperative code generators";
  qword_1ECD34330 = 50;
  qword_1ECD34340 = 0;
  qword_1ECD34348 = (uint64_t)&qword_1ECD34318;
  llvm::Registry<llvm::GCStrategy>::add_node((uint64_t)&qword_1ECD34340);
  qword_1ECD34350 = (uint64_t)"statepoint-example";
  qword_1ECD34358 = 18;
  unk_1ECD34360 = "an example strategy for statepoint";
  qword_1ECD34368 = 34;
  qword_1ECD34378 = 0;
  qword_1ECD34380 = (uint64_t)&qword_1ECD34350;
  llvm::Registry<llvm::GCStrategy>::add_node((uint64_t)&qword_1ECD34378);
  qword_1ECD34388 = (uint64_t)"coreclr";
  unk_1ECD34390 = 7;
  qword_1ECD34398 = (uint64_t)"CoreCLR-compatible GC";
  qword_1ECD343A0 = 21;
  qword_1ECD343B0 = 0;
  qword_1ECD343B8 = (uint64_t)&qword_1ECD34388;
  return llvm::Registry<llvm::GCStrategy>::add_node((uint64_t)&qword_1ECD343B0);
}

double llvm::Comdat::Comdat(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a1 + 48;
  *(_QWORD *)(a1 + 24) = a1 + 48;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a1 + 32) = 2;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double llvm::Comdat::Comdat(llvm::Comdat *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = (char *)this + 48;
  *((_QWORD *)this + 3) = (char *)this + 48;
  *(_QWORD *)&result = 2;
  *((_QWORD *)this + 4) = 2;
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t llvm::Comdat::getName(llvm::Comdat *this)
{
  return *(_QWORD *)this + 72;
}

const void **llvm::Comdat::addUser(const void **result, const void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = result[3];
  if (v2 != result[2])
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(result + 2), a2);
  v3 = *((unsigned int *)result + 9);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 8 * v3;
    v6 = result[3];
    while ((const void *)*v6 != a2)
    {
      if (*v6 == -2)
        v4 = v6;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        if (!v4)
          goto LABEL_11;
        *v4 = a2;
        --*((_DWORD *)result + 10);
        return result;
      }
    }
  }
  else
  {
LABEL_11:
    if (v3 >= *((_DWORD *)result + 8))
      return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(result + 2), a2);
    *((_DWORD *)result + 9) = v3 + 1;
    v2[v3] = a2;
  }
  return result;
}

const void **llvm::Comdat::removeUser(uint64_t a1, void *a2)
{
  llvm::SmallPtrSetImplBase *v4;
  uint64_t v5;
  uint64_t v6;
  const void **result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v4 = (llvm::SmallPtrSetImplBase *)(a1 + 16);
  if (v5 == v6)
  {
    v10 = *(unsigned int *)(a1 + 36);
    result = (const void **)(v5 + 8 * v10);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 8 * v10;
      while (*(void **)(v5 + v11) != a2)
      {
        v11 += 8;
        if (v12 == v11)
          goto LABEL_12;
      }
      result = (const void **)(v5 + v11);
    }
LABEL_12:
    v8 = v5;
  }
  else
  {
    result = llvm::SmallPtrSetImplBase::FindBucketFor(v4, a2);
    v5 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    if (*result != a2)
    {
      v9 = 32;
      if (v8 == v5)
        v9 = 36;
      result = (const void **)(v8 + 8 * *(unsigned int *)(a1 + v9));
    }
  }
  v13 = v8 == v5;
  v14 = 32;
  if (v13)
    v14 = 36;
  if (result != (const void **)(v8 + 8 * *(unsigned int *)(a1 + v14)))
  {
    *result = (const void *)-2;
    ++*(_DWORD *)(a1 + 40);
  }
  return result;
}

void llvm::ConstantFoldCastInstruction(llvm *this, llvm::Type *a2, llvm::Type **a3, llvm::Type *a4)
{
  llvm::Type *v5;
  int v7;
  int v8;
  int v9;
  llvm::LLVMContext *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  llvm *isEliminableCastPair;
  llvm::ConstantExpr *v15;
  llvm::Type *v16;
  llvm::Constant *SplatValue;
  uint64_t v18;
  llvm::IntegerType *DesiredBytecodeVersion;
  llvm::ConstantInt *v20;
  BOOL v21;
  llvm::Type *v22;
  llvm::ConstantInt *v23;
  llvm::Type *v24;
  llvm::Constant *v25;
  llvm::Type *v26;
  unsigned int Element;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  llvm::FixedVectorType ***v33;
  uint64_t v34;
  _QWORD v35[32];

  v5 = a2;
  v35[16] = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v7 = *((unsigned __int8 *)v5 + 16);
    if (v7 == 12)
    {
      llvm::PoisonValue::get((llvm::PoisonValue *)a3, a2);
      return;
    }
    if ((v7 - 11) <= 1)
      break;
    if (llvm::Constant::isNullValue(v5))
    {
      v8 = *((unsigned __int8 *)a3 + 8);
      if (v8 != 10 && (_DWORD)this != 50 && v8 != 11)
        goto LABEL_25;
    }
    v9 = *((unsigned __int8 *)v5 + 16);
    if (v9 != 5)
      goto LABEL_14;
    if (!llvm::ConstantExpr::isCast(v5)
      || (v11 = **((_QWORD **)v5 - 4 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF)),
          v12 = *(_QWORD *)v5,
          v13 = *((unsigned __int16 *)v5 + 9),
          llvm::Type::getInt64Ty(*a3, v10),
          isEliminableCastPair = (llvm *)llvm::CastInst::isEliminableCastPair(v13, (int)this, v11, v12, (uint64_t)a3),
          !(_DWORD)isEliminableCastPair))
    {
      v9 = *((unsigned __int8 *)v5 + 16);
LABEL_14:
      if (v9 != 15 && v9 != 10
        || ((_DWORD)a3[1] & 0xFE) != 0x12
        || *((_DWORD *)a3 + 8) != *(_DWORD *)(*(_QWORD *)v5 + 32))
      {
        __asm { BR              X11 }
      }
      v16 = a3[3];
      SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(v5, 0);
      if (SplatValue)
      {
        foldMaybeUndesirableCast(this, SplatValue, v16);
        if (v18)
          llvm::ConstantVector::getSplat(*((unsigned int *)a3 + 8) | ((unint64_t)(*((_BYTE *)a3 + 8) == 19) << 32), v18);
      }
      else
      {
        v33 = (llvm::FixedVectorType ***)v35;
        v34 = 0x1000000000;
        DesiredBytecodeVersion = (llvm::IntegerType *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v5);
        v20 = (llvm::ConstantInt *)llvm::IntegerType::get(DesiredBytecodeVersion, (llvm::LLVMContext *)0x20);
        v22 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v5 + 32);
        if ((_DWORD)v22)
        {
          v23 = v20;
          v24 = 0;
          while (1)
          {
            v25 = (llvm::Constant *)llvm::ConstantInt::get(v23, v24, 0, v21);
            Element = llvm::ConstantExpr::getExtractElement(v5, v25, 0, v26);
            if (llvm::ConstantExpr::isDesirableCastOp(this))
              llvm::ConstantExpr::getCast(this, Element, v16, 0);
            else
              v29 = llvm::ConstantFoldCastInstruction(this, Element, v16, v28);
            if (!v29)
              break;
            v30 = v34;
            if (v34 >= (unint64_t)HIDWORD(v34))
            {
              v32 = v29;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 8);
              v29 = v32;
              v30 = v34;
            }
            v33[v30] = (llvm::FixedVectorType **)v29;
            v31 = v34 + 1;
            LODWORD(v34) = v34 + 1;
            v24 = (llvm::Type *)((char *)v24 + 1);
            if (v22 == v24)
              goto LABEL_38;
          }
        }
        else
        {
          v31 = v34;
LABEL_38:
          llvm::ConstantVector::get(v33, (llvm::Type *)v31);
        }
        if (v33 != v35)
          free(v33);
      }
      return;
    }
    v15 = isEliminableCastPair;
    v5 = (llvm::Type *)*((_QWORD *)v5 - 4 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF));
    this = isEliminableCastPair;
    if (llvm::ConstantExpr::isDesirableCastOp(isEliminableCastPair))
    {
      llvm::ConstantExpr::getCast(v15, v5, (llvm::Constant *)a3, 0);
      return;
    }
  }
  if (this <= 0x2C && ((1 << (char)this) & 0x198000000000) != 0)
  {
LABEL_25:
    llvm::Constant::getNullValue((llvm::Constant *)a3, (Type *)a2);
    return;
  }
  llvm::UndefValue::get((llvm::UndefValue *)a3, a2);
}

void foldMaybeUndesirableCast(llvm::ConstantExpr *a1, llvm::Constant *a2, llvm::Type *a3)
{
  unsigned int v4;
  llvm::Type *v6;

  v4 = a2;
  if (llvm::ConstantExpr::isDesirableCastOp(a1))
    llvm::ConstantExpr::getCast(a1, v4, a3, 0);
  else
    llvm::ConstantFoldCastInstruction(a1, v4, a3, v6);
}

llvm::APFloat *llvm::APFloat::APFloat(llvm::APFloat *this, const llvm::APFloat *a2)
{
  llvm::detail::DoubleAPFloat *v3;
  const llvm::detail::DoubleAPFloat *v4;
  void *v5;

  v3 = (llvm::APFloat *)((char *)this + 8);
  v4 = (const llvm::APFloat *)((char *)a2 + 8);
  v5 = (void *)*((_QWORD *)a2 + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v5)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v3, v4);
  else
    llvm::detail::IEEEFloat::IEEEFloat(v3, v4);
  return this;
}

_QWORD *ExtractConstantBytes(llvm::Constant *a1, unsigned int a2, unsigned int a3)
{
  int v6;
  const void **v7;
  _QWORD *ConstantBytes;
  uint64_t v9;
  unsigned int v11;
  llvm::ConstantInt *v12;
  const llvm::APInt *v13;
  const void **v15;
  void *v16;
  unsigned int v17;
  BOOL v18;
  void *v19;
  unint64_t v20;
  unsigned int v21;
  void *v22;
  _DWORD *p_p;
  unsigned int v24;
  llvm::IntegerType *DesiredBytecodeVersion;
  llvm::Constant *v26;
  Type *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  unsigned int v31;
  void *__p;
  unsigned int v33;

  v6 = *((unsigned __int8 *)a1 + 16);
  if (!a1 || v6 != 16)
  {
    ConstantBytes = 0;
    if (!a1 || v6 != 5)
      return ConstantBytes;
    if (*((_WORD *)a1 + 9) != 25)
      return 0;
    v9 = ((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4];
    if (!v9 || *(_BYTE *)(v9 + 16) != 16)
      return 0;
    v15 = (const void **)(v9 + 24);
    LODWORD(v9) = *(_DWORD *)(v9 + 32);
    v33 = v9;
    if (v9 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, v15);
      LODWORD(v9) = v33;
      v29 = v33;
      if (v33 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v28, (const void **)&__p);
        v9 = v29;
        if (v29 > 0x40)
        {
          *(_QWORD *)v28 &= 7uLL;
          v16 = v28;
          bzero((char *)v28 + 8, (((unint64_t)(v9 + 63) >> 3) - 8) & 0xFFFFFFF8);
          v17 = v29;
          v31 = v29;
          v30 = v16;
          v29 = 0;
          if (v31 >= 0x41)
          {
            if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v30) > 0x40)
            {
              if (!v30)
                goto LABEL_34;
              v18 = 1;
            }
            else
            {
              v18 = *(_QWORD *)v30 != 0;
            }
            operator delete[](v30);
            if (v29 >= 0x41 && v28)
              operator delete[](v28);
            if (v18)
            {
LABEL_34:
              ConstantBytes = 0;
              if (v33 < 0x41)
                return ConstantBytes;
              goto LABEL_24;
            }
LABEL_45:
            if (v33 > 0x40)
            {
              llvm::APInt::lshrSlowCase(&__p, 3u);
              v21 = v33;
              v20 = a3 + a2;
              if (v33 >= 0x41)
              {
                v24 = v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
                if (v24 < 0x41)
                {
                  p_p = __p;
                  v22 = *(void **)__p;
                  if (*(_QWORD *)__p < v20)
                  {
LABEL_53:
                    if ((unint64_t)v22 <= a2)
                    {
                      ConstantBytes = (_QWORD *)ExtractConstantBytes(*((llvm::Constant **)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)), a2 - *p_p, a3);
                      if (v33 < 0x41)
                        return ConstantBytes;
                      goto LABEL_24;
                    }
                    goto LABEL_34;
                  }
                }
LABEL_58:
                DesiredBytecodeVersion = (llvm::IntegerType *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a1);
                v26 = (llvm::Constant *)llvm::IntegerType::get(DesiredBytecodeVersion, (llvm::LLVMContext *)(8 * a3));
                ConstantBytes = (_QWORD *)llvm::Constant::getNullValue(v26, v27);
                if (v33 < 0x41)
                  return ConstantBytes;
                goto LABEL_24;
              }
            }
            else
            {
              if (v33 == 3)
                v19 = 0;
              else
                v19 = (void *)((unint64_t)__p >> 3);
              __p = v19;
              v20 = a3 + a2;
            }
            v22 = __p;
            if ((unint64_t)__p < v20)
            {
              p_p = &__p;
              goto LABEL_53;
            }
            goto LABEL_58;
          }
LABEL_33:
          if (v16)
            goto LABEL_34;
          goto LABEL_45;
        }
      }
      else
      {
        v28 = __p;
      }
    }
    else
    {
      __p = (void *)*v15;
      v29 = v9;
      v28 = __p;
    }
    v16 = (void *)(v28 & 7);
    v28 = v16;
    v31 = v9;
    v30 = v16;
    v29 = 0;
    goto LABEL_33;
  }
  v7 = (const void **)((char *)a1 + 24);
  v33 = *((_DWORD *)a1 + 8);
  if (v33 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v7);
    if (!a2)
      goto LABEL_20;
  }
  else
  {
    __p = (void *)*v7;
    if (!a2)
      goto LABEL_20;
  }
  v11 = 8 * a2;
  if (v33 > 0x40)
  {
    llvm::APInt::lshrSlowCase(&__p, v11);
  }
  else if (v33 == v11)
  {
    __p = 0;
  }
  else
  {
    __p = (void *)((unint64_t)__p >> v11);
  }
LABEL_20:
  llvm::APInt::trunc((char *)&__p, 8 * a3, (uint64_t)&v30);
  if (v33 >= 0x41 && __p)
    operator delete[](__p);
  __p = v30;
  v33 = v31;
  v12 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a1);
  ConstantBytes = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&__p, v13);
  if (v33 >= 0x41)
  {
LABEL_24:
    if (__p)
      operator delete[](__p);
  }
  return ConstantBytes;
}

llvm::Constant **FoldBitCast(llvm::FixedVectorType **this, llvm::Type *a2)
{
  llvm::FixedVectorType *v3;
  BOOL v5;
  llvm::Type *v6;
  const llvm::APInt *v7;
  uint64_t NullValue;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  int v13;
  BOOL v14;
  BOOL v15;
  llvm::Constant *Int32Ty;
  Type *v18;
  llvm::GetElementPtrInst *v19;
  uint64_t TypeAtIndex;
  llvm::GetElementPtrInst *v21;
  unsigned int v22;
  int v23;
  llvm::ConstantFP *v24;
  void *FltSemantics;
  const llvm::APFloat *v26;
  llvm::Constant **v27;
  llvm::Type *v28;
  llvm::ConstantInt *DesiredBytecodeVersion;
  const llvm::APInt *v32;
  BOOL v33;
  BOOL v34;
  llvm::FixedVectorType **v35;
  void *__p;
  uint64_t v37;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x1E0C80C00];
  v35 = this;
  v3 = *this;
  if (*this == a2)
    return this;
  if (v3)
    v5 = *((_DWORD *)v3 + 2) == 15;
  else
    v5 = 0;
  if (!v5
    || !a2
    || *((_DWORD *)a2 + 2) != 15
    || (*((_DWORD *)a2 + 2) ^ *((_DWORD *)v3 + 2)) > 0xFF
    || !*((_QWORD *)v3 + 3)
    || !*((_QWORD *)a2 + 3))
  {
    goto LABEL_7;
  }
  v9 = **((_QWORD **)v3 + 2);
  v10 = *(unsigned __int8 *)(v9 + 8);
  v11 = v10 != 13 && v10 >= 4;
  v12 = !v11 || v10 == 5;
  v13 = v10 & 0xFE;
  v14 = v12 || v13 == 10;
  v15 = v14 || (v10 & 0xFFFFFFFD) == 4;
  if (!v15 && v10 != 15)
  {
    v33 = v13 == 16 || v13 == 18;
    v34 = v33 || v10 == 21;
    if (!v34 || !llvm::Type::isSizedDerivedType(v9, 0))
      goto LABEL_7;
  }
  __p = v38;
  v37 = 0x800000000;
  Int32Ty = (llvm::Constant *)llvm::Type::getInt32Ty(*(llvm::Type **)a2, a2);
  NullValue = llvm::Constant::getNullValue(Int32Ty, v18);
  llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&__p, NullValue);
  v19 = (llvm::GetElementPtrInst *)**((_QWORD **)v3 + 2);
  if (v19)
  {
    while (v19 != **((llvm::GetElementPtrInst ***)a2 + 2))
    {
      TypeAtIndex = llvm::GetElementPtrInst::getTypeAtIndex(v19, 0);
      v19 = (llvm::GetElementPtrInst *)TypeAtIndex;
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v38, v37 + 1, 8);
        *((_QWORD *)__p + v37) = NullValue;
        LODWORD(v37) = v37 + 1;
        if (!v19)
          break;
      }
      else
      {
        *((_QWORD *)__p + v37) = NullValue;
        LODWORD(v37) = v37 + 1;
        if (!TypeAtIndex)
          break;
      }
    }
  }
  v21 = (llvm::GetElementPtrInst *)**((_QWORD **)a2 + 2);
  if (v19 == v21)
    NullValue = llvm::ConstantExpr::getGetElementPtr(**((_QWORD **)v3 + 2), (uint64_t *)this, (uint64_t)__p, v37, 1u, 0, 0);
  if (__p != v38)
    free(__p);
  if (v19 != v21)
  {
LABEL_7:
    if (a2 && (*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
    {
      if (llvm::Constant::isAllOnesValue((llvm::Constant *)this))
        return (llvm::Constant **)llvm::Constant::getAllOnesValue(a2, v6, v7);
      if (((_BYTE)this[2] & 0xFE) == 0x10)
      {
        v27 = (llvm::Constant **)llvm::ConstantVector::get(&v35, (llvm::Type *)1);
        return llvm::ConstantExpr::getBitCast(v27, a2, 0, v28);
      }
    }
    else
    {
      v22 = *((_DWORD *)a2 + 2);
      v23 = *((unsigned __int8 *)this + 16);
      if (v23 == 17)
      {
        if (*((_BYTE *)*this + 8) != 6 && v22 == 13)
        {
          DesiredBytecodeVersion = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)this);
          llvm::APFloat::bitcastToAPInt((llvm::APFloat *)(this + 3), (llvm::APInt *)&__p);
          NullValue = (uint64_t)llvm::ConstantInt::get(DesiredBytecodeVersion, (llvm::LLVMContext *)&__p, v32);
          if (v37 >= 0x41 && __p)
            operator delete[](__p);
          return (llvm::Constant **)NullValue;
        }
      }
      else if (v23 == 16)
      {
        if (v22 < 4 || v22 == 5 || (NullValue = 0, (v22 & 0xFFFFFFFD) == 4) && v22 != 6)
        {
          v24 = *(llvm::ConstantFP **)a2;
          FltSemantics = (void *)llvm::Type::getFltSemantics(a2);
          llvm::APFloat::APFloat((llvm::APFloatBase *)&__p, FltSemantics, this + 3);
          NullValue = (uint64_t)llvm::ConstantFP::get(v24, (llvm::LLVMContext *)&__p, v26);
          llvm::APFloat::~APFloat((llvm::APFloat *)&__p);
        }
        return (llvm::Constant **)NullValue;
      }
    }
    return 0;
  }
  return (llvm::Constant **)NullValue;
}

llvm::Constant *llvm::ConstantFoldSelectInstruction(llvm *this, llvm::PoisonValue **a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ConstantInt *v7;
  llvm::Type *v8;
  int v9;
  uint64_t v10;
  llvm::IntegerType *DesiredBytecodeVersion;
  llvm::ConstantInt *v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  llvm::Constant *v16;
  llvm::Type *v17;
  llvm::APFloatBase *Element;
  llvm::Constant *v19;
  llvm::Type *v20;
  llvm::APFloatBase *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[18];

  v33[16] = *MEMORY[0x1E0C80C00];
  if ((llvm::Constant::isNullValue(this) & 1) != 0)
    return a3;
  if (llvm::Constant::isAllOnesValue(this))
    return (llvm::Constant *)a2;
  v9 = *((unsigned __int8 *)this + 16);
  if (!this || v9 != 10)
  {
LABEL_28:
    if (v9 == 12)
      return (llvm::Constant *)llvm::PoisonValue::get(*a2, v8);
    if ((v9 - 11) <= 1)
    {
      if (*((unsigned __int8 *)a2 + 16) - 11 >= 2)
        return a3;
      else
        return (llvm::Constant *)a2;
    }
    if (a2 == (llvm::PoisonValue **)a3)
      return (llvm::Constant *)a2;
    v28 = *((unsigned __int8 *)a2 + 16);
    if (v28 != 12)
    {
      v29 = *((unsigned __int8 *)a3 + 16);
      if (v29 == 12)
        return (llvm::Constant *)a2;
      if ((v28 - 11) > 1)
        goto LABEL_41;
      if (!llvm::ConstantFoldSelectInstruction(llvm::Constant *,llvm::Constant *,llvm::Constant *)::$_0::operator()((unsigned __int8 *)a3))
      {
        v29 = *((unsigned __int8 *)a3 + 16);
LABEL_41:
        if ((v29 - 11) > 1)
          return 0;
        if (llvm::ConstantFoldSelectInstruction(llvm::Constant *,llvm::Constant *,llvm::Constant *)::$_0::operator()((unsigned __int8 *)a2))
          return (llvm::Constant *)a2;
        return 0;
      }
    }
    return a3;
  }
  v10 = *(_QWORD *)this;
  v31 = v33;
  v32 = 0x1000000000;
  DesiredBytecodeVersion = (llvm::IntegerType *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v12 = (llvm::ConstantInt *)llvm::IntegerType::get(DesiredBytecodeVersion, (llvm::LLVMContext *)0x20);
  v13 = *(unsigned int *)(v10 + 32);
  if (!(_DWORD)v13)
  {
    v25 = 0;
    v26 = v32;
LABEL_23:
    v7 = (llvm::ConstantInt *)llvm::ConstantVector::get((llvm::FixedVectorType ***)v31, (llvm::Type *)v25);
    goto LABEL_24;
  }
  v7 = v12;
  v30 = v10;
  v14 = 0;
  v15 = this;
  do
  {
    v16 = (llvm::Constant *)llvm::ConstantInt::get(v7, v14, 0);
    Element = llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a2, v16, 0, v17);
    v19 = (llvm::Constant *)llvm::ConstantInt::get(v7, v14, 0);
    v21 = llvm::ConstantExpr::getExtractElement(a3, v19, 0, v20);
    v22 = (unsigned __int8 *)*((_QWORD *)v15 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    v23 = v22[16];
    if (v23 == 12)
    {
      Element = (llvm::APFloatBase *)llvm::PoisonValue::get(*(llvm::PoisonValue **)Element, v8);
    }
    else if (Element != v21)
    {
      if ((v23 - 11) > 1)
      {
        if (v23 != 16)
          break;
        if (llvm::Constant::isNullValue((llvm::Constant *)v22))
          Element = v21;
      }
      else if (*((unsigned __int8 *)Element + 16) - 11 >= 2)
      {
        Element = v21;
      }
    }
    v24 = v32;
    if (v32 >= (unint64_t)HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 8);
      v24 = v32;
    }
    *((_QWORD *)v31 + v24) = Element;
    LODWORD(v32) = v32 + 1;
    ++v14;
    v15 = (llvm *)((char *)v15 + 32);
  }
  while (v13 != v14);
  v25 = *(_DWORD *)(v30 + 32);
  v26 = v32;
  if ((_DWORD)v32 == v25)
    goto LABEL_23;
LABEL_24:
  if (v31 != v33)
    free(v31);
  if (v26 != v25)
  {
    v9 = *((unsigned __int8 *)this + 16);
    goto LABEL_28;
  }
  return v7;
}

BOOL llvm::ConstantFoldSelectInstruction(llvm::Constant *,llvm::Constant *,llvm::Constant *)::$_0::operator()(unsigned __int8 *a1)
{
  unsigned int v2;

  v2 = a1[16];
  if (v2 < 0x14 && ((0xB1029u >> v2) & 1) != 0)
    return (0xB0009u >> v2) & 1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12
    && (llvm::Constant::containsPoisonElement((llvm::Constant *)a1) & 1) == 0)
  {
    return !llvm::Constant::containsConstantExpression((llvm::Constant *)a1);
  }
  return 0;
}

llvm::APFloatBase *llvm::ConstantFoldExtractElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Type *a4)
{
  uint64_t v4;
  int v5;
  int v7;
  unint64_t v11;
  unint64_t *v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  llvm *v17;
  llvm::ConstantExpr *Element;
  uint64_t v19;
  unsigned int v20;
  llvm::ConstantExpr *v21;
  uint64_t v22;
  BOOL v23;
  llvm::APFloatBase *AggregateElement;
  llvm::APInt *v25;
  unint64_t v26;
  unsigned int v27;
  const void **v28;
  unsigned int v29;
  void *v30;
  void *v31;
  llvm::Constant *v32;
  llvm::Constant *v33;
  uint64_t SourceElementType;
  llvm::APFloatBase *v35;
  const void **v36;
  unsigned int v37;
  void *v38;
  llvm::Type *v39;
  int v40;
  char *v41;
  void *v42;
  unsigned int v43;
  void *__p;
  unsigned int v45;
  char v46;
  void *v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[9];

  v51[8] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 12)
    return (llvm::APFloatBase *)llvm::PoisonValue::get(*(llvm::PoisonValue **)(v4 + 24), a2);
  v7 = *((unsigned __int8 *)a2 + 16);
  if ((v7 - 11) <= 1)
    return (llvm::APFloatBase *)llvm::PoisonValue::get(*(llvm::PoisonValue **)(v4 + 24), a2);
  if ((v5 - 11) <= 1)
    return (llvm::APFloatBase *)llvm::UndefValue::get(*(llvm::UndefValue **)(v4 + 24), a2);
  if (v7 != 16)
    return 0;
  if (*(_BYTE *)(v4 + 8) != 18 || v4 == 0)
    goto LABEL_15;
  v11 = *(unsigned int *)(v4 + 32);
  v12 = (unint64_t *)((char *)a2 + 24);
  v13 = *((_DWORD *)a2 + 8);
  if (v13 >= 0x41)
  {
    if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a2 + 24)) > 0x40)
      return (llvm::APFloatBase *)llvm::PoisonValue::get(*(llvm::PoisonValue **)(v4 + 24), a2);
    v12 = (unint64_t *)*v12;
  }
  if (*v12 >= v11)
    return (llvm::APFloatBase *)llvm::PoisonValue::get(*(llvm::PoisonValue **)(v4 + 24), a2);
LABEL_15:
  if (v5 == 5)
  {
    v14 = *((unsigned __int16 *)this + 9);
    if (v14 == 62)
    {
      v22 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
      if (v22)
        v23 = *(_BYTE *)(v22 + 16) == 16;
      else
        v23 = 0;
      if (v23)
      {
        v28 = (const void **)(v22 + 24);
        v29 = *(_DWORD *)(v22 + 32);
        v48 = v29;
        if (v29 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v47, v28);
          v29 = v48;
          v30 = v47;
        }
        else
        {
          v30 = (void *)*v28;
          v47 = (void *)*v28;
        }
        LODWORD(v50) = v29;
        v49 = v30;
        v48 = 0;
        BYTE4(v50) = 1;
        v36 = (const void **)((char *)a2 + 24);
        v37 = *((_DWORD *)a2 + 8);
        v43 = v37;
        if (v37 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v42, v36);
          v37 = v43;
          v38 = v42;
        }
        else
        {
          v38 = (void *)*v36;
          v42 = (void *)*v36;
        }
        v45 = v37;
        __p = v38;
        v43 = 0;
        v46 = 1;
        v40 = llvm::APSInt::compareValues((uint64_t)&v49, (uint64_t)&__p);
        if (v45 >= 0x41 && __p)
          operator delete[](__p);
        if (v43 >= 0x41 && v42)
          operator delete[](v42);
        if (v50 >= 0x41 && v49)
          operator delete[](v49);
        if (v48 >= 0x41 && v47)
          operator delete[](v47);
        v41 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
        if (v40)
          return (llvm::APFloatBase *)llvm::ConstantExpr::getExtractElement(*(llvm::ConstantExpr **)v41, a2, 0, v39);
        else
          return (llvm::APFloatBase *)*((_QWORD *)v41 + 4);
      }
    }
    else if (v14 == 34)
    {
      v49 = v51;
      v50 = 0x800000000;
      v15 = *((_DWORD *)this + 5);
      if ((v15 & 0x7FFFFFFu) >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v15 & 0x7FFFFFF, 8);
        v15 = *((_DWORD *)this + 5);
      }
      v16 = v15 & 0x7FFFFFF;
      if ((v15 & 0x7FFFFFF) != 0)
      {
        v17 = this;
        while (1)
        {
          Element = (llvm::ConstantExpr *)*((_QWORD *)v17 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
          if ((*(_DWORD *)(*(_QWORD *)Element + 8) & 0xFE) == 0x12)
          {
            Element = (llvm::ConstantExpr *)llvm::ConstantExpr::getExtractElement(Element, a2, 0, a4);
            if (!Element)
              break;
          }
          v19 = v50;
          if (v50 >= (unint64_t)HIDWORD(v50))
          {
            v21 = Element;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 8);
            Element = v21;
            v19 = v50;
          }
          *((_QWORD *)v49 + v19) = Element;
          v20 = v50 + 1;
          LODWORD(v50) = v50 + 1;
          v17 = (llvm *)((char *)v17 + 32);
          if (!--v16)
            goto LABEL_43;
        }
        AggregateElement = 0;
      }
      else
      {
        v20 = v50;
LABEL_43:
        v31 = v49;
        v32 = (llvm::Constant *)v20;
        v33 = *(llvm::Constant **)(v4 + 24);
        SourceElementType = llvm::GEPOperator::getSourceElementType(this);
        llvm::ConstantExpr::getWithOperands(this, (uint64_t)v31, v32, v33, 0, SourceElementType);
        AggregateElement = v35;
      }
      if (v49 != v51)
        free(v49);
      return AggregateElement;
    }
  }
  AggregateElement = llvm::Constant::getAggregateElement(this, a2);
  if (!AggregateElement)
  {
    v25 = (llvm::Constant *)((char *)a2 + 24);
    v26 = *(unsigned int *)(v4 + 32);
    v27 = *((_DWORD *)a2 + 8);
    if (v27 < 0x41)
    {
LABEL_36:
      if (*(_QWORD *)v25 < v26)
      {
        AggregateElement = (llvm::APFloatBase *)llvm::Constant::getSplatValue(this, 0);
        if (AggregateElement)
          return AggregateElement;
      }
      return 0;
    }
    if (v27 - llvm::APInt::countLeadingZerosSlowCase(v25) <= 0x40)
    {
      v25 = *(llvm::APInt **)v25;
      goto LABEL_36;
    }
    return 0;
  }
  return AggregateElement;
}

mlir::BytecodeWriterConfig *llvm::ConstantFoldInsertElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  mlir::BytecodeWriterConfig *v4;
  int v5;
  llvm::PoisonValue *v6;
  unsigned int *v10;
  unint64_t v11;
  unint64_t *v12;
  unsigned int v13;
  unint64_t *v14;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v16;
  uint64_t Int32Ty;
  uint64_t v18;
  unint64_t *v19;
  llvm::Constant *v20;
  llvm::Type *v21;
  llvm::APFloatBase *Element;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[17];

  v4 = this;
  v28[16] = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)a3 + 16);
  if ((v5 - 11) <= 1)
  {
    v6 = *(llvm::PoisonValue **)this;
    return (mlir::BytecodeWriterConfig *)llvm::PoisonValue::get(v6, a2);
  }
  if (*((_BYTE *)this + 16) != 13)
  {
LABEL_7:
    if (v5 != 16)
      return 0;
    v10 = *(unsigned int **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 8) == 19)
      return 0;
    v11 = v10[8];
    v12 = (unint64_t *)((char *)a3 + 24);
    v13 = *((_DWORD *)a3 + 8);
    v14 = (unint64_t *)((char *)a3 + 24);
    if (v13 >= 0x41)
    {
      if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) > 0x40)
        goto LABEL_29;
      v14 = (unint64_t *)*v12;
    }
    if (*v14 < v11)
    {
      v26 = v28;
      v27 = 0x1000000000;
      if (v11 >= 0x11)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v11, 8);
      DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v4);
      Int32Ty = llvm::Type::getInt32Ty(DesiredBytecodeVersion, v16);
      if (*((_DWORD *)a3 + 8) >= 0x41u)
        v12 = (unint64_t *)*v12;
      if ((_DWORD)v11)
      {
        v18 = 0;
        v19 = (unint64_t *)*v12;
        do
        {
          if (v19 == (unint64_t *)v18)
          {
            v25 = v27;
            if (v27 >= (unint64_t)HIDWORD(v27))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v27 + 1, 8);
              v25 = v27;
            }
            *((_QWORD *)v26 + v25) = a2;
          }
          else
          {
            v20 = (llvm::Constant *)llvm::ConstantInt::get(Int32Ty, v18, 0);
            Element = llvm::ConstantExpr::getExtractElement(v4, v20, 0, v21);
            v23 = v27;
            if (v27 >= (unint64_t)HIDWORD(v27))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v27 + 1, 8);
              v23 = v27;
            }
            *((_QWORD *)v26 + v23) = Element;
          }
          v24 = v27 + 1;
          LODWORD(v27) = v27 + 1;
          ++v18;
        }
        while (v11 != v18);
      }
      else
      {
        v24 = v27;
      }
      v4 = (mlir::BytecodeWriterConfig *)llvm::ConstantVector::get((llvm::FixedVectorType ***)v26, (llvm::Type *)v24);
      if (v26 != v28)
        free(v26);
      return v4;
    }
LABEL_29:
    v6 = (llvm::PoisonValue *)v10;
    return (mlir::BytecodeWriterConfig *)llvm::PoisonValue::get(v6, a2);
  }
  if ((llvm::Constant::isNullValue(a2) & 1) == 0)
  {
    v5 = *((unsigned __int8 *)a3 + 16);
    goto LABEL_7;
  }
  return v4;
}

_QWORD *llvm::ConstantFoldShuffleVectorInstruction(mlir::BytecodeWriterConfig *this, mlir::BytecodeWriterConfig *a2, int *a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  llvm::ScalableVectorType *v7;
  int *v8;
  mlir::BytecodeWriterConfig *v9;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  llvm::PoisonValue *v14;
  llvm::Type *v15;
  _DWORD *v17;
  llvm::IntegerType *DesiredBytecodeVersion;
  llvm::ConstantInt *v19;
  BOOL v20;
  llvm::Constant *v21;
  llvm::Type *v22;
  llvm::Constant *Element;
  llvm::ConstantAggregateZero *v24;
  llvm::Type *v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  llvm::Type *v29;
  llvm::Type *v30;
  llvm::IntegerType *v31;
  llvm::ConstantInt *v32;
  BOOL v33;
  llvm::Constant *v34;
  llvm::Type *v35;
  llvm::ConstantExpr *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::IntegerType *v39;
  llvm::ConstantInt *v40;
  BOOL v41;
  void *v42;
  void *v43;
  uint64_t v44;
  llvm::FixedVectorType **v45[33];

  v4 = a4;
  v45[32] = *(llvm::FixedVectorType ***)MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)this;
  v6 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  v7 = *(llvm::ScalableVectorType **)(*(_QWORD *)this + 24);
  if (!a4)
  {
LABEL_5:
    llvm::VectorType::get(*(llvm::ScalableVectorType **)(*(_QWORD *)this + 24), (llvm::Type *)(a4 | ((unint64_t)(v6 == 19) << 32)));
    return (_QWORD *)llvm::PoisonValue::get(v14, v15);
  }
  v8 = a3;
  v9 = a2;
  v11 = 4 * a4;
  v12 = 4 * a4;
  v13 = a3;
  while (*v13 == -1)
  {
    ++v13;
    v12 -= 4;
    if (!v12)
      goto LABEL_5;
  }
  v17 = a3;
  do
  {
    if (*v17)
      goto LABEL_14;
    ++v17;
    v11 -= 4;
  }
  while (v11);
  DesiredBytecodeVersion = (llvm::IntegerType *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v19 = (llvm::ConstantInt *)llvm::IntegerType::get(DesiredBytecodeVersion, (llvm::LLVMContext *)0x20);
  v21 = (llvm::Constant *)llvm::ConstantInt::get(v19, 0, 0, v20);
  Element = (llvm::Constant *)llvm::ConstantExpr::getExtractElement(this, v21, 0, v22);
  if (llvm::Constant::isNullValue(Element))
  {
    llvm::VectorType::get(v7, (llvm::Type *)(v4 | ((unint64_t)(v6 == 19) << 32)));
    return (_QWORD *)llvm::ConstantAggregateZero::get(v24, v25);
  }
  if (v6 != 19)
    return (_QWORD *)llvm::ConstantVector::getSplat(v4, Element);
  v6 = *(unsigned __int8 *)(v5 + 8);
LABEL_14:
  if (v6 == 19)
    return 0;
  v27 = *(_DWORD *)(v5 + 32);
  v43 = v45;
  v44 = 0x2000000000;
  v28 = v4;
  if (v4)
  {
    while (1)
    {
      v30 = (llvm::Type *)*v8++;
      v29 = v30;
      if ((_DWORD)v30 != -1 && v29 < 2 * v27)
        break;
      v37 = llvm::UndefValue::get(v7, a2);
      v38 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
        goto LABEL_26;
LABEL_22:
      *((_QWORD *)v43 + v38) = v37;
      a2 = (mlir::BytecodeWriterConfig *)(v44 + 1);
      LODWORD(v44) = v44 + 1;
      if (!--v28)
      {
        v26 = llvm::ConstantVector::get((llvm::FixedVectorType ***)v43, a2);
        v42 = v43;
        if (v43 != v45)
          goto LABEL_28;
        return v26;
      }
    }
    if (v29 >= v27)
    {
      v39 = (llvm::IntegerType *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v9);
      v40 = (llvm::ConstantInt *)llvm::IntegerType::get(v39, (llvm::LLVMContext *)0x20);
      v34 = (llvm::Constant *)llvm::ConstantInt::get(v40, (llvm::Type *)(v29 - v27), 0, v41);
      v36 = v9;
    }
    else
    {
      v31 = (llvm::IntegerType *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
      v32 = (llvm::ConstantInt *)llvm::IntegerType::get(v31, (llvm::LLVMContext *)0x20);
      v34 = (llvm::Constant *)llvm::ConstantInt::get(v32, v29, 0, v33);
      v36 = this;
    }
    v37 = llvm::ConstantExpr::getExtractElement(v36, v34, 0, v35);
    v38 = v44;
    if (v44 < (unint64_t)HIDWORD(v44))
      goto LABEL_22;
LABEL_26:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v38 + 1, 8);
    v38 = v44;
    goto LABEL_22;
  }
  v26 = llvm::ConstantVector::get(v45, 0);
  v42 = v43;
  if (v43 != v45)
LABEL_28:
    free(v42);
  return v26;
}

llvm::APFloatBase *llvm::ConstantFoldExtractValueInstruction(llvm::APFloatBase *result, unsigned int *a2, uint64_t a3)
{
  uint64_t i;

  for (i = a3; i; ++a2)
  {
    result = llvm::Constant::getAggregateElement(result, (Type *)*a2);
    if (!result)
      break;
    --i;
  }
  return result;
}

_QWORD *llvm::ConstantFoldInsertValueInstruction(llvm::Constant *a1, _QWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  Type *v11;
  uint64_t v12;
  llvm::APFloatBase *AggregateElement;
  uint64_t inserted;
  uint64_t v15;
  uint64_t v16;
  llvm::Type *v17;
  _QWORD *v18;
  void *v19;
  void *v21;
  uint64_t v22;
  _QWORD v23[33];

  v23[32] = *MEMORY[0x1E0C80C00];
  if (!a4)
    return a2;
  v7 = *(_QWORD *)a1;
  v8 = *(unsigned __int8 *)(v7 + 8);
  if (v7)
    v9 = v8 == 16;
  else
    v9 = 0;
  if (v9)
    v10 = *(_DWORD *)(v7 + 12);
  else
    v10 = *(_DWORD *)(v7 + 32);
  v21 = v23;
  v22 = 0x2000000000;
  if (v10)
  {
    v11 = 0;
    v12 = a4 - 1;
    do
    {
      AggregateElement = llvm::Constant::getAggregateElement(a1, v11);
      if (!AggregateElement)
      {
        a2 = 0;
        v19 = v21;
        if (v21 != v23)
          goto LABEL_24;
        return a2;
      }
      inserted = (uint64_t)AggregateElement;
      if ((_DWORD)v11 == *a3)
        inserted = llvm::ConstantFoldInsertValueInstruction(AggregateElement, a2, a3 + 1, v12);
      v15 = v22;
      if (v22 >= (unint64_t)HIDWORD(v22))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
        v15 = v22;
      }
      *((_QWORD *)v21 + v15) = inserted;
      v16 = (v22 + 1);
      LODWORD(v22) = v22 + 1;
      v11 = (Type *)((_DWORD)v11 + 1);
    }
    while (v10 != (_DWORD)v11);
    v7 = *(_QWORD *)a1;
    v17 = (llvm::Type *)v21;
    if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 16)
      goto LABEL_18;
  }
  else
  {
    v16 = 0;
    v17 = (llvm::Type *)v21;
    if (v8 == 16)
    {
LABEL_18:
      v18 = llvm::ConstantStruct::get((llvm::PoisonValue *)v7, v17, v16);
      goto LABEL_23;
    }
  }
  v18 = llvm::ConstantArray::get((llvm::PoisonValue *)v7, v17, v16);
LABEL_23:
  a2 = v18;
  v19 = v21;
  if (v21 != v23)
LABEL_24:
    free(v19);
  return a2;
}

_QWORD *llvm::ConstantFoldUnaryInstruction(llvm *this, unsigned __int8 *a2, llvm::Constant *a3)
{
  _QWORD *v3;
  uint64_t v5;
  int v6;
  int v8;
  llvm::APFloatBase *DesiredBytecodeVersion;
  const llvm::detail::DoubleAPFloat *v10;
  void *v11;
  void *v12;
  llvm::detail::DoubleAPFloat *v13;
  _BOOL4 v14;
  llvm::ConstantInt *v15;
  uint64_t v16;
  llvm::Constant *v17;
  unint64_t v18;
  llvm::Constant *v19;
  uint64_t v21;
  uint64_t v22;
  llvm::Constant *v23;
  llvm::Type *v24;
  unsigned int Element;
  llvm::Constant *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Type *v30;
  const llvm::APFloat *v31;
  llvm::FixedVectorType ***v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[128];
  _QWORD v36[4];

  v3 = a2;
  v36[3] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12 && v6 != 19)
  {
    v14 = (_DWORD)this == 12;
    if (a2[16] != 17)
      goto LABEL_14;
LABEL_9:
    if (!v14)
      return 0;
    DesiredBytecodeVersion = (llvm::APFloatBase *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a2);
    v11 = (void *)v3[4];
    v10 = (const llvm::detail::DoubleAPFloat *)(v3 + 4);
    v12 = llvm::APFloatBase::PPCDoubleDouble(DesiredBytecodeVersion);
    if (v12 == v11)
    {
      v13 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v36, v10);
      if (v12 != (void *)v36[0])
        goto LABEL_12;
    }
    else
    {
      v13 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v36, v10);
      if (v12 != (void *)v36[0])
      {
LABEL_12:
        llvm::detail::IEEEFloat::changeSign(v13);
        goto LABEL_28;
      }
    }
    llvm::detail::DoubleAPFloat::changeSign(v13);
LABEL_28:
    if (v12 == (void *)v36[0])
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v34, v36);
    else
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v34, (uint64_t)v36);
    v3 = llvm::ConstantFP::get(DesiredBytecodeVersion, (llvm::LLVMContext *)&v33, v31);
    if (v12 == (void *)v34)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v34);
      if (v12 != (void *)v36[0])
        goto LABEL_33;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v34);
      if (v12 != (void *)v36[0])
      {
LABEL_33:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v36);
        return v3;
      }
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v36);
    return v3;
  }
  v8 = a2[16];
  v14 = (_DWORD)this == 12;
  if ((_DWORD)this == 12 && (v8 - 11) < 2)
    return v3;
  if (v8 == 17)
    goto LABEL_9;
LABEL_14:
  if (v6 != 18)
    return 0;
  v15 = (llvm::ConstantInt *)llvm::IntegerType::get(*(llvm::IntegerType **)v5, (llvm::LLVMContext *)0x20);
  llvm::Constant::getSplatValue((llvm::Constant *)v3, 0);
  if (v16)
  {
    v18 = llvm::ConstantFoldUnaryInstruction(this, v16, v17);
    if (v18)
      return (_QWORD *)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v5 + 32) | ((unint64_t)(*(_BYTE *)(v5 + 8) == 19) << 32)), v18, v19);
  }
  v33 = v35;
  v34 = 0x1000000000;
  v21 = *(unsigned int *)(v5 + 32);
  if ((_DWORD)v21)
  {
    v22 = 0;
    while (1)
    {
      v23 = (llvm::Constant *)llvm::ConstantInt::get(v15, v22, 0);
      Element = llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)v3, v23, 0, v24);
      v27 = llvm::ConstantFoldUnaryInstruction(this, Element, v26);
      if (!v27)
        break;
      v28 = v27;
      v29 = v34;
      if (v34 >= (unint64_t)HIDWORD(v34))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 8);
        v29 = v34;
      }
      *((_QWORD *)v33 + v29) = v28;
      v30 = (llvm::Type *)(v34 + 1);
      LODWORD(v34) = v34 + 1;
      if (v21 == ++v22)
      {
        v32 = (llvm::FixedVectorType ***)v33;
        goto LABEL_38;
      }
    }
    v3 = 0;
  }
  else
  {
    v30 = 0;
    v32 = (llvm::FixedVectorType ***)v35;
LABEL_38:
    v3 = llvm::ConstantVector::get(v32, v30);
  }
  if (v33 != v35)
    free(v33);
  return v3;
}

llvm::APFloatBase *llvm::ConstantFoldBinaryInstruction(llvm *this, llvm::ConstantFP **a2, llvm::PoisonValue **a3, llvm::Constant *a4)
{
  uint64_t v5;
  int v7;
  unsigned __int8 *v8;
  llvm::APFloatBase *BinOpIdentity;
  llvm::Type *v10;
  const llvm::APInt *v11;
  llvm::Constant *v12;
  llvm::Type *v13;
  int v14;
  int v15;
  llvm::UndefValue *v16;
  char v18;
  unsigned __int8 v19;
  llvm::Type *v21;
  unsigned __int8 *v23;
  uint64_t NullValue;
  llvm::APFloatBase *v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  llvm::APInt *v29;
  unsigned int v30;
  int v31;
  llvm::APInt **v32;
  unint64_t *v33;
  llvm::ConstantInt *v34;
  const llvm::APFloat *v35;
  llvm::ConstantFP *v36;
  llvm::Constant *SplatValue;
  llvm::Constant *v38;
  llvm::PoisonValue *v39;
  llvm::APInt *v40;
  unsigned int v41;
  llvm::APInt *v44;
  unsigned int v45;
  llvm::APInt *v46;
  _BYTE *v47;
  llvm::APInt *v48;
  unsigned int v49;
  unsigned int v50;
  llvm::APInt *v51;
  unsigned int v52;
  llvm::APInt *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  mlir::BytecodeWriterConfig *v57;
  llvm::Constant *v58;
  llvm::Type *v59;
  uint64_t v60;
  llvm::ConstantInt *v61;
  BOOL v62;
  llvm::Type *v63;
  llvm::ConstantInt *v64;
  llvm::Type *v65;
  llvm::Constant *v66;
  llvm::Type *v67;
  mlir::BytecodeWriterConfig *v68;
  llvm::Type *v69;
  llvm::Constant *v70;
  llvm::Constant *v71;
  llvm::Type *v72;
  uint64_t v73;
  void *v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned __int8 v80;
  int Predicate;
  unsigned __int16 InversePredicate;
  mlir::BytecodeWriterConfig **v83;
  uint64_t v84;
  llvm::Type *v85;
  llvm::Constant *v86;
  llvm::Constant *v87;
  llvm::ConstantInt *v88;
  llvm::LLVMContext *v89;
  llvm::ConstantFP *DesiredBytecodeVersion;
  const llvm::APFloat *v91;
  llvm::ConstantInt *v92;
  llvm::ConstantInt *v93;
  const llvm::APInt *v94;
  unint64_t v95;
  unsigned int v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t *v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t *v103;
  void *v104;
  llvm::ConstantInt *v105;
  llvm::ConstantInt *v106;
  llvm::ConstantInt *v107;
  llvm::Type *v108;
  llvm::Constant *v109;
  llvm::Type *v110;
  mlir::BytecodeWriterConfig *Element;
  llvm::Type *v112;
  llvm::Constant *v113;
  llvm::Type *v114;
  llvm::Constant *v115;
  llvm::Type *v116;
  uint64_t v117;
  const llvm::APInt *v118;
  const llvm::APInt *v119;
  const llvm::APInt *v120;
  const llvm::APInt *v121;
  const llvm::APInt *v122;
  int v123;
  unsigned int v124;
  _BOOL4 v125;
  llvm::APInt *v126;
  unsigned int v127;
  llvm::APInt *v128;
  unsigned int v129;
  llvm::APInt *v130;
  unsigned int v131;
  llvm::APInt *v132;
  unsigned int v133;
  llvm::APInt *v134;
  unsigned int v135;
  void *v136;
  unsigned int v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  void *__p;
  uint64_t v142;
  _QWORD v143[18];

  v5 = (uint64_t)a2;
  v143[16] = *MEMORY[0x1E0C80C00];
  if (this <= 0x1E && ((1 << (char)this) & 0x70066000) != 0)
  {
    v7 = (_DWORD)this - 13;
    while (1)
    {
      v8 = (unsigned __int8 *)a3;
      a3 = (llvm::PoisonValue **)v5;
      BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity(this, *(llvm::ConstantFP **)v5, 0, 0);
      if (BinOpIdentity)
      {
        if (BinOpIdentity == (llvm::APFloatBase *)v5)
          return (llvm::APFloatBase *)v8;
        if (BinOpIdentity == (llvm::APFloatBase *)v8)
          return (llvm::APFloatBase *)a3;
      }
      v14 = *(unsigned __int8 *)(v5 + 16);
      if (v14 == 12)
        return (llvm::APFloatBase *)llvm::PoisonValue::get(*a3, v10);
      v15 = v8[16];
      if (v15 == 12)
        return (llvm::APFloatBase *)llvm::PoisonValue::get(*a3, v10);
      v16 = *(llvm::UndefValue **)v5;
      if ((*(_DWORD *)(*(_QWORD *)v5 + 8) & 0xFE) != 0x12 || *(_DWORD *)(*(_QWORD *)v5 + 8) == 19)
      {
        v18 = v14 - 11;
        v19 = v15 - 11;
        if ((v14 - 11) < 2u || (v15 - 11) <= 1u)
        {
          switch(v7)
          {
            case 0:
            case 2:
              return (llvm::APFloatBase *)llvm::UndefValue::get(v16, v10);
            case 1:
            case 5:
            case 8:
            case 11:
              a3 = (llvm::PoisonValue **)v8;
              goto LABEL_25;
            case 3:
              a3 = (llvm::PoisonValue **)v8;
              goto LABEL_97;
            case 4:
              a3 = (llvm::PoisonValue **)v8;
              goto LABEL_101;
            case 6:
            case 7:
              a3 = (llvm::PoisonValue **)v8;
              goto LABEL_62;
            case 9:
            case 10:
              a3 = (llvm::PoisonValue **)v8;
              goto LABEL_66;
            case 12:
            case 13:
            case 14:
              a3 = (llvm::PoisonValue **)v8;
              goto LABEL_49;
            case 15:
              goto LABEL_108;
            case 16:
              goto LABEL_110;
            case 17:
              goto LABEL_86;
            default:
              break;
          }
        }
      }
      if (v15 == 16)
        break;
      if (v14 != 16)
      {
        a3 = (llvm::PoisonValue **)v8;
        goto LABEL_41;
      }
      v5 = (uint64_t)v8;
      if ((llvm::ConstantExpr::isDesirableBinOp(this) & 1) != 0)
        return (llvm::APFloatBase *)llvm::ConstantExpr::get(this, (mlir::BytecodeWriterConfig *)v8, (llvm::Constant *)a3, 0, 0, v21);
    }
    a3 = (llvm::PoisonValue **)v8;
    goto LABEL_36;
  }
  v25 = llvm::ConstantExpr::getBinOpIdentity(this, *a2, 0, 0);
  if (v25)
  {
    if (v25 == (llvm::APFloatBase *)v5)
      return (llvm::APFloatBase *)a3;
    if (v25 == (llvm::APFloatBase *)a3)
      return (llvm::APFloatBase *)v5;
  }
  v14 = *(unsigned __int8 *)(v5 + 16);
  if (v14 == 12 || (v26 = *((unsigned __int8 *)a3 + 16), v26 == 12))
  {
    a3 = (llvm::PoisonValue **)v5;
    return (llvm::APFloatBase *)llvm::PoisonValue::get(*a3, v10);
  }
  v16 = *(llvm::UndefValue **)v5;
  if ((*(_DWORD *)(*(_QWORD *)v5 + 8) & 0xFE) != 0x12 || *(_DWORD *)(*(_QWORD *)v5 + 8) == 19)
  {
    v18 = v14 - 11;
    v19 = v26 - 11;
    if ((v14 - 11) < 2u || (v26 - 11) <= 1u)
    {
      switch((int)this)
      {
        case 15:
          return (llvm::APFloatBase *)llvm::UndefValue::get(v16, v10);
        case 16:
LABEL_97:
          v23 = (unsigned __int8 *)(a3 + 2);
          if (llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_neg_zero_fp,llvm::ConstantFP>::match<llvm::Constant>((llvm::APFloatBase *)&__p, (llvm::Constant *)v5))
          {
            v8 = (unsigned __int8 *)a3;
            if (*v23 - 11 < 2)
              return (llvm::APFloatBase *)v8;
          }
          goto LABEL_26;
        case 17:
LABEL_101:
          if ((v19 | v18) < 2u)
            return (llvm::APFloatBase *)v5;
          v140 = 0;
          __p = &v140;
          v142 = 0;
          if ((llvm::PatternMatch::match<llvm::Constant,llvm::PatternMatch::apint_match>(v5, (uint64_t)&__p) & 1) == 0)
          {
            v138 = &v140;
            v139 = 0;
            if ((llvm::PatternMatch::match<llvm::Constant,llvm::PatternMatch::apint_match>((uint64_t)a3, (uint64_t)&v138) & 1) == 0)
              goto LABEL_107;
          }
          v47 = (_BYTE *)v140;
          if (*(_DWORD *)(v140 + 8) >= 0x41u)
            v47 = *(_BYTE **)v140;
          if ((*v47 & 1) == 0)
            goto LABEL_107;
          return (llvm::APFloatBase *)llvm::UndefValue::get(*(llvm::UndefValue **)v5, v10);
        case 18:
        case 21:
        case 24:
LABEL_25:
          v23 = (unsigned __int8 *)(a3 + 2);
LABEL_26:
          if (*(unsigned __int8 *)(v5 + 16) - 11 <= 1 && *v23 - 11 < 2)
            return (llvm::APFloatBase *)v5;
          return llvm::ConstantFP::getNaN(*(llvm::ConstantFP **)v5, 0, 0);
        case 19:
        case 20:
LABEL_62:
          if (llvm::PatternMatch::match<llvm::Constant,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::undef_match,llvm::PatternMatch::is_zero>>((llvm::PatternMatch::undef_match *)a3, (const llvm::Value *)&__p))
          {
            goto LABEL_67;
          }
          if (llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_one,llvm::ConstantInt>::match<llvm::Constant>((uint64_t)&__p, (llvm::Constant *)a3))
          {
            return (llvm::APFloatBase *)v5;
          }
          goto LABEL_107;
        case 22:
        case 23:
LABEL_66:
          if (!llvm::PatternMatch::match<llvm::Constant,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::undef_match,llvm::PatternMatch::is_zero>>((llvm::PatternMatch::undef_match *)a3, (const llvm::Value *)&__p))goto LABEL_107;
LABEL_67:
          v39 = *a3;
          return (llvm::APFloatBase *)llvm::PoisonValue::get(v39, v10);
        case 25:
        case 26:
        case 27:
LABEL_49:
          if (v19 <= 1u)
            return (llvm::APFloatBase *)llvm::PoisonValue::get(*a3, v10);
          if ((llvm::PatternMatch::match<llvm::Constant,llvm::PatternMatch::is_zero>((llvm::Constant *)a3) & 1) != 0)
            return (llvm::APFloatBase *)v5;
LABEL_107:
          NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v5, (Type *)v10);
          break;
        case 28:
LABEL_108:
          v8 = (unsigned __int8 *)v5;
          if ((v19 | v18) < 2u)
            return (llvm::APFloatBase *)v8;
          return (llvm::APFloatBase *)llvm::Constant::getNullValue(v16, (Type *)v10);
        case 29:
LABEL_110:
          v8 = (unsigned __int8 *)v5;
          if ((v19 | v18) < 2u)
            return (llvm::APFloatBase *)v8;
          return llvm::Constant::getAllOnesValue(v16, v10, v11);
        case 30:
LABEL_86:
          if ((v19 | v18) <= 1u)
            return (llvm::APFloatBase *)llvm::Constant::getNullValue(v16, (Type *)v10);
          else
            return (llvm::APFloatBase *)llvm::UndefValue::get(v16, v10);
        default:
          goto LABEL_112;
      }
      return (llvm::APFloatBase *)NullValue;
    }
  }
LABEL_112:
  if (v26 == 16)
  {
LABEL_36:
    v27 = (_BYTE *)(v5 + 16);
    v28 = a3 + 2;
    switch((int)this)
    {
      case 13:
      case 15:
        v29 = (llvm::APInt *)(a3 + 3);
        v30 = *((_DWORD *)a3 + 8);
        if (v30 > 0x40)
        {
          v8 = (unsigned __int8 *)v5;
          if (llvm::APInt::countLeadingZerosSlowCase(v29) != v30)
            goto LABEL_42;
        }
        else
        {
          v8 = (unsigned __int8 *)v5;
          if (*(_QWORD *)v29)
            goto LABEL_42;
        }
        return (llvm::APFloatBase *)v8;
      case 17:
        v48 = (llvm::APInt *)(a3 + 3);
        v49 = *((_DWORD *)a3 + 8);
        if (v49 <= 0x40)
        {
          if (!*(_QWORD *)v48)
            return (llvm::APFloatBase *)a3;
          if (*(_QWORD *)v48 == 1)
            return (llvm::APFloatBase *)v5;
          goto LABEL_42;
        }
        v75 = llvm::APInt::countLeadingZerosSlowCase(v48);
        if (v75 == v49)
          return (llvm::APFloatBase *)a3;
        v76 = v49 - 1;
        v8 = (unsigned __int8 *)v5;
        if (v75 != v76)
          goto LABEL_42;
        return (llvm::APFloatBase *)v8;
      case 19:
      case 20:
        v44 = (llvm::APInt *)(a3 + 3);
        v45 = *((_DWORD *)a3 + 8);
        if (v45 > 0x40)
        {
          v55 = llvm::APInt::countLeadingZerosSlowCase(v44);
          if (v55 == v45 - 1)
            return (llvm::APFloatBase *)v5;
          goto LABEL_136;
        }
        if (!*(_QWORD *)v44)
          return (llvm::APFloatBase *)llvm::PoisonValue::get(*a3, v10);
        v8 = (unsigned __int8 *)v5;
        if (*(_QWORD *)v44 == 1)
          return (llvm::APFloatBase *)v8;
        goto LABEL_42;
      case 22:
      case 23:
        v46 = (llvm::APInt *)(a3 + 3);
        v45 = *((_DWORD *)a3 + 8);
        if (v45 <= 0x40)
        {
          if (!*(_QWORD *)v46)
            return (llvm::APFloatBase *)llvm::PoisonValue::get(*a3, v10);
          if (*(_QWORD *)v46 != 1)
            goto LABEL_42;
LABEL_134:
          v16 = *a3;
          return (llvm::APFloatBase *)llvm::Constant::getNullValue(v16, (Type *)v10);
        }
        v55 = llvm::APInt::countLeadingZerosSlowCase(v46);
        if (v55 == v45 - 1)
          goto LABEL_134;
LABEL_136:
        if (v55 == v45)
          return (llvm::APFloatBase *)llvm::PoisonValue::get(*a3, v10);
        goto LABEL_42;
      case 28:
        v8 = (unsigned __int8 *)(a3 + 3);
        v50 = *((_DWORD *)a3 + 8);
        if (v50 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a3 + 3)) == v50)
            return (llvm::APFloatBase *)a3;
        }
        else if (!*(_QWORD *)v8)
        {
          return (llvm::APFloatBase *)a3;
        }
        if (llvm::ConstantInt::isMinusOne((llvm::ConstantInt *)a3))
          return (llvm::APFloatBase *)v5;
        if (*v27 != 5)
          goto LABEL_42;
        if (*(_WORD *)(v5 + 18) != 47)
          goto LABEL_42;
        v77 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
        v78 = *(unsigned __int8 *)(v77 + 16);
        if (v78 > 3)
          goto LABEL_42;
        v79 = *(_QWORD *)(v77 + 40);
        if (v79)
        {
          llvm::Value::getPointerAlignment(*(unsigned __int8 ***)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF)), (const llvm::DataLayout *)(v79 + 256));
          if (!*(_BYTE *)(v77 + 16) && *(unsigned __int16 *)(v79 + 276) < 0x100u)
          {
            v80 = 2;
            goto LABEL_289;
          }
        }
        else
        {
          if (v78 != 3)
            goto LABEL_42;
          v123 = (*(_DWORD *)(v77 + 32) >> 17) & 0x3F;
          if (!v123)
            goto LABEL_42;
          v80 = v123 - 1;
        }
        if (!v80)
          goto LABEL_42;
LABEL_289:
        if (*((_DWORD *)*a3 + 2) >> 8 >= v80)
          v124 = v80;
        else
          v124 = *((_DWORD *)*a3 + 2) >> 8;
        llvm::APInt::getLowBitsSet((llvm::APInt *)(*((_DWORD *)*a3 + 2) >> 8), v124, (llvm::APInt *)&__p);
        v137 = *((_DWORD *)a3 + 8);
        if (v137 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v136, (const void **)a3 + 3);
        else
          v136 = *(void **)v8;
        llvm::operator&((uint64_t)&v136, (const llvm::APInt *)&__p, (uint64_t)&v138);
        if (v139 > 0x40)
        {
          v125 = llvm::APInt::equalSlowCase((const void **)&v138, (const void **)a3 + 3);
          if (v138)
            operator delete[](v138);
        }
        else
        {
          v125 = v138 == *(void **)v8;
        }
        if (v137 >= 0x41 && v136)
          operator delete[](v136);
        if (v125)
          v8 = (unsigned __int8 *)llvm::Constant::getNullValue(*a3, (Type *)v10);
        if (v142 >= 0x41 && __p)
          operator delete[](__p);
        if (v125)
          return (llvm::APFloatBase *)v8;
        goto LABEL_42;
      case 29:
        v51 = (llvm::APInt *)(a3 + 3);
        v52 = *((_DWORD *)a3 + 8);
        if (v52 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v51) == v52)
            return (llvm::APFloatBase *)v5;
        }
        else if (!*(_QWORD *)v51)
        {
          return (llvm::APFloatBase *)v5;
        }
        v8 = (unsigned __int8 *)a3;
        if (llvm::ConstantInt::isMinusOne((llvm::ConstantInt *)a3))
          return (llvm::APFloatBase *)v8;
        goto LABEL_42;
      case 30:
        v53 = (llvm::APInt *)(a3 + 3);
        v54 = *((_DWORD *)a3 + 8);
        if (v54 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v53) == v54)
            return (llvm::APFloatBase *)v5;
        }
        else if (!*(_QWORD *)v53)
        {
          return (llvm::APFloatBase *)v5;
        }
        if (v14 != 5 || *(unsigned __int16 *)(v5 + 18) - 53 > 1)
          goto LABEL_42;
        Predicate = llvm::ConstantExpr::getPredicate((llvm::ConstantExpr *)v5);
        InversePredicate = llvm::CmpInst::getInversePredicate(Predicate);
        v83 = (mlir::BytecodeWriterConfig **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
        return llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)InversePredicate, *v83, v83[4], 0);
      default:
        goto LABEL_42;
    }
  }
LABEL_41:
  v27 = (_BYTE *)(v5 + 16);
  v28 = a3 + 2;
LABEL_42:
  v31 = *(unsigned __int8 *)(v5 + 16);
  if (v31 == 17)
  {
    if (*v28 == 17)
    {
      llvm::APFloat::APFloat((llvm::APFloat *)&__p, (const llvm::APFloat *)(v5 + 24));
      v35 = (const llvm::APFloat *)(a3 + 3);
      switch((int)this)
      {
        case 14:
          llvm::APFloat::add((llvm::detail::IEEEFloat *)&__p, (uint64_t)v35, 1);
          break;
        case 16:
          llvm::APFloat::subtract((llvm::detail::DoubleAPFloat *)&__p, (uint64_t)v35, 1);
          break;
        case 18:
          llvm::APFloat::multiply((llvm::detail::DoubleAPFloat *)&__p, (uint64_t)v35, 1);
          break;
        case 21:
          llvm::APFloat::divide(&__p, (uint64_t)v35, 1);
          break;
        case 24:
          llvm::APFloat::mod((llvm::APFloat *)&__p, v35);
          break;
        default:
          llvm::APFloat::~APFloat((llvm::APFloat *)&__p);
          goto LABEL_174;
      }
      DesiredBytecodeVersion = (llvm::ConstantFP *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
      v8 = (unsigned __int8 *)llvm::ConstantFP::get(DesiredBytecodeVersion, (llvm::LLVMContext *)&__p, v91);
      llvm::APFloat::~APFloat((llvm::APFloat *)&__p);
      return (llvm::APFloatBase *)v8;
    }
    goto LABEL_174;
  }
  if (v31 == 16)
  {
    if (*v28 == 16)
    {
      v32 = (llvm::APInt **)(v5 + 24);
      v33 = (unint64_t *)(a3 + 3);
      switch((int)this)
      {
        case 13:
          v34 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          v135 = *(_DWORD *)(v5 + 32);
          if (v135 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v134, (const void **)(v5 + 24));
          else
            v134 = *v32;
          llvm::APInt::operator+=((uint64_t)&v134, (_QWORD **)v33);
          LODWORD(v142) = v135;
          __p = v134;
          v135 = 0;
          v8 = (unsigned __int8 *)llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&__p, v118);
          if (v142 >= 0x41 && __p)
            operator delete[](__p);
          if (v135 < 0x41)
            return (llvm::APFloatBase *)v8;
          v104 = v134;
          if (!v134)
            return (llvm::APFloatBase *)v8;
          goto LABEL_230;
        case 15:
          v92 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          v133 = *(_DWORD *)(v5 + 32);
          if (v133 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v132, (const void **)(v5 + 24));
          else
            v132 = *v32;
          llvm::APInt::operator-=((uint64_t)&v132, (_QWORD **)v33);
          LODWORD(v142) = v133;
          __p = v132;
          v133 = 0;
          v8 = (unsigned __int8 *)llvm::ConstantInt::get(v92, (llvm::LLVMContext *)&__p, v119);
          if (v142 >= 0x41 && __p)
            operator delete[](__p);
          if (v133 < 0x41)
            return (llvm::APFloatBase *)v8;
          v104 = v132;
          if (!v132)
            return (llvm::APFloatBase *)v8;
          goto LABEL_230;
        case 17:
          v93 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          llvm::APInt::operator*((uint64_t)v32, (const unint64_t **)a3 + 3, (uint64_t)&__p);
          goto LABEL_228;
        case 19:
          v93 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          llvm::APInt::udiv(v32, (size_t)(a3 + 3), (llvm::APInt *)&__p);
          goto LABEL_228;
        case 20:
          if (llvm::APInt::isAllOnes((llvm::APInt *)(a3 + 3))
            && llvm::APInt::isMinSignedValue((llvm::APInt *)(v5 + 24)))
          {
            goto LABEL_231;
          }
          v93 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          llvm::APInt::sdiv(v32, (size_t)(a3 + 3), (llvm::APInt *)&__p);
          goto LABEL_228;
        case 22:
          v93 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          llvm::APInt::urem(v32, (size_t)(a3 + 3), (llvm::APInt *)&__p);
          goto LABEL_228;
        case 23:
          if (llvm::APInt::isAllOnes((llvm::APInt *)(a3 + 3))
            && llvm::APInt::isMinSignedValue((llvm::APInt *)(v5 + 24)))
          {
            goto LABEL_231;
          }
          v93 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          llvm::APInt::srem(v32, (size_t)(a3 + 3), (llvm::APInt *)&__p);
          goto LABEL_228;
        case 25:
          v95 = *(unsigned int *)(v5 + 32);
          v96 = *((_DWORD *)a3 + 8);
          v97 = v33;
          if (v96 < 0x41)
            goto LABEL_216;
          if (v96 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v33) > 0x40)
            goto LABEL_231;
          v97 = (unint64_t *)*v33;
LABEL_216:
          if (*v97 >= v95)
            goto LABEL_231;
          v93 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          llvm::APInt::shl((llvm::APInt *)v32, (const llvm::APInt *)v33, (llvm::APInt *)&__p);
          goto LABEL_228;
        case 26:
          v98 = *(unsigned int *)(v5 + 32);
          v99 = *((_DWORD *)a3 + 8);
          v100 = v33;
          if (v99 < 0x41)
            goto LABEL_221;
          if (v99 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v33) > 0x40)
            goto LABEL_231;
          v100 = (unint64_t *)*v33;
LABEL_221:
          if (*v100 >= v98)
            goto LABEL_231;
          v93 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          llvm::APInt::lshr((llvm::APInt *)v32, (const llvm::APInt *)v33, (llvm::APInt *)&__p);
          goto LABEL_228;
        case 27:
          v101 = *(unsigned int *)(v5 + 32);
          v102 = *((_DWORD *)a3 + 8);
          v103 = v33;
          if (v102 < 0x41)
            goto LABEL_226;
          if (v102 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v33) > 0x40)
            goto LABEL_231;
          v103 = (unint64_t *)*v33;
LABEL_226:
          if (*v103 >= v101)
          {
LABEL_231:
            v39 = *(llvm::PoisonValue **)v5;
            return (llvm::APFloatBase *)llvm::PoisonValue::get(v39, v10);
          }
          v93 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          llvm::APInt::ashr((llvm::APInt *)v32, (unint64_t **)v33, (llvm::APInt *)&__p);
LABEL_228:
          v8 = (unsigned __int8 *)llvm::ConstantInt::get(v93, (llvm::LLVMContext *)&__p, v94);
          if (v142 >= 0x41)
          {
            v104 = __p;
            if (__p)
LABEL_230:
              operator delete[](v104);
          }
          break;
        case 28:
          v105 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          v131 = *(_DWORD *)(v5 + 32);
          if (v131 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v130, (const void **)(v5 + 24));
          else
            v130 = *v32;
          llvm::operator&((uint64_t)&v130, (const llvm::APInt *)v33, (uint64_t)&__p);
          v8 = (unsigned __int8 *)llvm::ConstantInt::get(v105, (llvm::LLVMContext *)&__p, v120);
          if (v142 >= 0x41 && __p)
            operator delete[](__p);
          if (v131 < 0x41)
            return (llvm::APFloatBase *)v8;
          v104 = v130;
          if (!v130)
            return (llvm::APFloatBase *)v8;
          goto LABEL_230;
        case 29:
          v106 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          v129 = *(_DWORD *)(v5 + 32);
          if (v129 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v128, (const void **)(v5 + 24));
          else
            v128 = *v32;
          llvm::operator|((uint64_t)&v128, (const llvm::APInt *)v33, (uint64_t)&__p);
          v8 = (unsigned __int8 *)llvm::ConstantInt::get(v106, (llvm::LLVMContext *)&__p, v121);
          if (v142 >= 0x41 && __p)
            operator delete[](__p);
          if (v129 < 0x41)
            return (llvm::APFloatBase *)v8;
          v104 = v128;
          if (!v128)
            return (llvm::APFloatBase *)v8;
          goto LABEL_230;
        case 30:
          v107 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          v127 = *(_DWORD *)(v5 + 32);
          if (v127 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v126, (const void **)(v5 + 24));
          else
            v126 = *v32;
          llvm::operator^((uint64_t)&v126, (const llvm::APInt *)v33, (uint64_t)&__p);
          v8 = (unsigned __int8 *)llvm::ConstantInt::get(v107, (llvm::LLVMContext *)&__p, v122);
          if (v142 >= 0x41 && __p)
            operator delete[](__p);
          if (v127 < 0x41)
            return (llvm::APFloatBase *)v8;
          v104 = v126;
          if (!v126)
            return (llvm::APFloatBase *)v8;
          goto LABEL_230;
        default:
          goto LABEL_174;
      }
      return (llvm::APFloatBase *)v8;
    }
    if (this <= 0x1B && ((1 << (char)this) & 0xED80000) != 0)
    {
      v40 = (llvm::APInt *)(v5 + 24);
      v41 = *(_DWORD *)(v5 + 32);
      if (v41 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v40) == v41)
          return (llvm::APFloatBase *)v5;
      }
      else if (!*(_QWORD *)v40)
      {
        return (llvm::APFloatBase *)v5;
      }
    }
    goto LABEL_174;
  }
  v36 = *(llvm::ConstantFP **)v5;
  if (!*(_QWORD *)v5 || (*((_DWORD *)v36 + 2) & 0xFE) != 0x12)
    goto LABEL_174;
  SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue((llvm::Constant *)a3, 0);
  if (SplatValue)
  {
    v38 = SplatValue;
    if (this <= 0x17
      && ((1 << (char)this) & 0xD80000) != 0
      && llvm::Constant::isNullValue(SplatValue))
    {
      v39 = v36;
      return (llvm::APFloatBase *)llvm::PoisonValue::get(v39, v10);
    }
    v56 = llvm::Constant::getSplatValue((llvm::Constant *)v5, 0);
    if (v56)
    {
      v57 = (mlir::BytecodeWriterConfig *)v56;
      if (llvm::ConstantExpr::isDesirableBinOp(this))
        v60 = llvm::ConstantExpr::get(this, v57, v38, 0, 0, v59);
      else
        v60 = llvm::ConstantFoldBinaryInstruction(this, v57, v38, v58);
      if (!v60)
        return 0;
      return (llvm::APFloatBase *)llvm::ConstantVector::getSplat(*((unsigned int *)v36 + 8) | ((unint64_t)(*((_BYTE *)v36 + 8) == 19) << 32), v60);
    }
  }
  if (*((_BYTE *)v36 + 8) != 18)
  {
LABEL_174:
    if (*v27 == 5)
    {
      if (this <= 0x1E
        && ((1 << (char)this) & 0x70022000) != 0
        && *(unsigned __int16 *)(v5 + 18) == (_DWORD)this)
      {
        v84 = llvm::ConstantExpr::get(this, *(mlir::BytecodeWriterConfig **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32), (llvm::Constant *)a3, 0, 0, v13);
        if (*(_BYTE *)(v84 + 16) != 5 || *(unsigned __int16 *)(v84 + 18) != (_DWORD)this)
          return (llvm::APFloatBase *)llvm::ConstantExpr::get(this, *(mlir::BytecodeWriterConfig **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF)), (llvm::Constant *)v84, 0, 0, v85);
      }
    }
    else if (*v28 == 5 && this <= 0x1E && ((1 << (char)this) & 0x70066000) != 0)
    {
      return (llvm::APFloatBase *)llvm::ConstantFoldBinaryInstruction(this, a3, (llvm::Constant *)v5, v12);
    }
    v8 = 0;
    if (llvm::Type::isIntegerTy(*(llvm::Type **)v5, 1))
    {
      switch((int)this)
      {
        case 13:
        case 15:
          return (llvm::APFloatBase *)llvm::ConstantExpr::getXor((llvm::ConstantExpr *)v5, (llvm::Constant *)a3, v86, v87);
        case 19:
        case 20:
        case 25:
        case 26:
        case 27:
          return (llvm::APFloatBase *)v5;
        case 22:
        case 23:
          v88 = (llvm::ConstantInt *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v5);
          return (llvm::APFloatBase *)llvm::ConstantInt::getFalse(v88, v89);
        default:
          return (llvm::APFloatBase *)v8;
      }
    }
    return (llvm::APFloatBase *)v8;
  }
  __p = v143;
  v142 = 0x1000000000;
  v61 = (llvm::ConstantInt *)llvm::IntegerType::get(*(llvm::IntegerType **)v36, (llvm::LLVMContext *)0x20);
  v63 = (llvm::Type *)*((unsigned int *)v36 + 8);
  if ((_DWORD)v63)
  {
    v64 = v61;
    if (((_DWORD)this - 19) < 5 && ((0x1Bu >> ((_BYTE)this - 19)) & 1) != 0)
    {
      v108 = 0;
      while (1)
      {
        v109 = (llvm::Constant *)llvm::ConstantInt::get(v64, v108, 0, v62);
        Element = (mlir::BytecodeWriterConfig *)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)v5, v109, 0, v110);
        v113 = (llvm::Constant *)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a3, v109, 0, v112);
        if ((llvm::Constant::isNullValue(v113) & 1) != 0)
          break;
        if ((llvm::ConstantExpr::isDesirableBinOp(this) & 1) != 0)
          v117 = llvm::ConstantExpr::get(this, Element, v113, 0, 0, v116);
        else
          v117 = llvm::ConstantFoldBinaryInstruction(this, Element, v113, v115);
        if (!v117)
          goto LABEL_246;
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&__p, v117);
        v108 = (llvm::Type *)((char *)v108 + 1);
        if ((_DWORD)v63 == (_DWORD)v108)
          goto LABEL_151;
      }
      v8 = (unsigned __int8 *)llvm::PoisonValue::get(v36, v114);
      v74 = __p;
      if (__p == v143)
        return (llvm::APFloatBase *)v8;
    }
    else
    {
      v65 = 0;
      while (1)
      {
        v66 = (llvm::Constant *)llvm::ConstantInt::get(v64, v65, 0, v62);
        v68 = (mlir::BytecodeWriterConfig *)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)v5, v66, 0, v67);
        v70 = (llvm::Constant *)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a3, v66, 0, v69);
        v73 = (llvm::ConstantExpr::isDesirableBinOp(this) & 1) != 0
            ? llvm::ConstantExpr::get(this, v68, v70, 0, 0, v72)
            : llvm::ConstantFoldBinaryInstruction(this, v68, v70, v71);
        if (!v73)
          break;
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&__p, v73);
        v65 = (llvm::Type *)((char *)v65 + 1);
        if (v63 == v65)
          goto LABEL_151;
      }
LABEL_246:
      v8 = 0;
      v74 = __p;
      if (__p == v143)
        return (llvm::APFloatBase *)v8;
    }
  }
  else
  {
LABEL_151:
    v8 = (unsigned __int8 *)llvm::ConstantVector::get((llvm::FixedVectorType ***)__p, (llvm::Type *)v142);
    v74 = __p;
    if (__p == v143)
      return (llvm::APFloatBase *)v8;
  }
  free(v74);
  return (llvm::APFloatBase *)v8;
}

uint64_t llvm::PatternMatch::match<llvm::Constant,llvm::PatternMatch::apint_match>(uint64_t result, uint64_t a2)
{
  if (result && *(_BYTE *)(result + 16) == 16)
    goto LABEL_3;
  if ((*(_DWORD *)(*(_QWORD *)result + 8) & 0xFE) != 0x12)
    return 0;
  result = llvm::Constant::getSplatValue((llvm::Constant *)result, *(_BYTE *)(a2 + 8));
  if (result)
  {
    if (*(_BYTE *)(result + 16) == 16)
    {
LABEL_3:
      **(_QWORD **)a2 = result + 24;
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL llvm::PatternMatch::match<llvm::Constant,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::undef_match,llvm::PatternMatch::is_zero>>(llvm::PatternMatch::undef_match *a1, const llvm::Value *a2)
{
  char v4;

  if (llvm::PatternMatch::undef_match::check(a1, a2))
    return 1;
  if (!a1)
    return 0;
  if ((llvm::Constant::isNullValue(a1) & 1) != 0)
    return 1;
  return llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_zero_int,llvm::ConstantInt>::match<llvm::Constant>((uint64_t)&v4, a1);
}

llvm::Constant *llvm::PatternMatch::match<llvm::Constant,llvm::PatternMatch::is_zero>(llvm::Constant *result)
{
  llvm::Constant *v1;
  char v2;

  if (result)
  {
    v1 = result;
    if ((llvm::Constant::isNullValue(result) & 1) != 0)
      return (llvm::Constant *)1;
    else
      return (llvm::Constant *)llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_zero_int,llvm::ConstantInt>::match<llvm::Constant>((uint64_t)&v2, v1);
  }
  return result;
}

BOOL llvm::ConstantInt::isMinusOne(llvm::ConstantInt *this)
{
  unsigned int v1;
  llvm::APInt *v2;

  v1 = *((_DWORD *)this + 8);
  if (!v1)
    return 1;
  v2 = (llvm::ConstantInt *)((char *)this + 24);
  if (v1 > 0x40)
    return llvm::APInt::countTrailingOnesSlowCase(v2) == v1;
  else
    return *(_QWORD *)v2 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
}

void llvm::APInt::getLowBitsSet(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  unint64_t v5;

  *((_DWORD *)a3 + 2) = (_DWORD)this;
  if (this > 0x40)
  {
    llvm::APInt::initSlowCase(a3, 0, 0);
    if (!a2)
      return;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    if (!a2)
      return;
  }
  if (a2 > 0x40)
  {
    llvm::APInt::setBitsSlowCase(a3, 0, a2);
  }
  else
  {
    v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (*((_DWORD *)a3 + 2) > 0x40u)
      **(_QWORD **)a3 |= v5;
    else
      *(_QWORD *)a3 |= v5;
  }
}

uint64_t llvm::operator&@<X0>(uint64_t this@<X0>, const llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v5 = *(_DWORD *)(this + 8);
  if (v5 > 0x40)
  {
    this = llvm::APInt::andAssignSlowCase(this, a2);
    v7 = *(_QWORD *)v3;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 8);
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(v3 + 8) = 0;
  }
  else
  {
    v6 = *(_QWORD *)this & *(_QWORD *)a2;
    *(_QWORD *)this = v6;
    *(_DWORD *)(a3 + 8) = v5;
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(this + 8) = 0;
  }
  return this;
}

BOOL llvm::APInt::isAllOnes(llvm::APInt *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 2);
  if (!v1)
    return 1;
  if (v1 > 0x40)
    return llvm::APInt::countTrailingOnesSlowCase(this) == v1;
  return *(_QWORD *)this == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
}

BOOL llvm::APInt::isMinSignedValue(llvm::APInt *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 2);
  if (v1 <= 0x40)
    return *(_QWORD *)this == 1 << (v1 - 1);
  if (((*(_QWORD *)(*(_QWORD *)this + 8 * ((v1 - 1) >> 6)) >> (v1 - 1)) & 1) != 0)
    return llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this) == v1 - 1;
  return 0;
}

uint64_t llvm::operator|@<X0>(uint64_t this@<X0>, const llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v5 = *(_DWORD *)(this + 8);
  if (v5 > 0x40)
  {
    this = llvm::APInt::orAssignSlowCase(this, a2);
    v7 = *(_QWORD *)v3;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 8);
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(v3 + 8) = 0;
  }
  else
  {
    v6 = *(_QWORD *)this | *(_QWORD *)a2;
    *(_QWORD *)this = v6;
    *(_DWORD *)(a3 + 8) = v5;
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(this + 8) = 0;
  }
  return this;
}

uint64_t llvm::operator^@<X0>(uint64_t this@<X0>, const llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v5 = *(_DWORD *)(this + 8);
  if (v5 > 0x40)
  {
    this = llvm::APInt::xorAssignSlowCase(this, a2);
    v7 = *(_QWORD *)v3;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 8);
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(v3 + 8) = 0;
  }
  else
  {
    v6 = *(_QWORD *)this ^ *(_QWORD *)a2;
    *(_QWORD *)this = v6;
    *(_DWORD *)(a3 + 8) = v5;
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(this + 8) = 0;
  }
  return this;
}

uint64_t llvm::APInt::shl@<X0>(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v5;

  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)a3 + 2) = v5;
  if (v5 > 0x40)
    llvm::APInt::initSlowCase(a3, (const void **)this);
  else
    *(_QWORD *)a3 = *(_QWORD *)this;
  return llvm::APInt::operator<<=((uint64_t)a3, (uint64_t)a2);
}

void llvm::APInt::lshr(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v5;

  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)a3 + 2) = v5;
  if (v5 > 0x40)
    llvm::APInt::initSlowCase(a3, (const void **)this);
  else
    *(_QWORD *)a3 = *(_QWORD *)this;
  llvm::APInt::lshrInPlace(a3, a2);
}

unsigned int *llvm::APInt::ashr@<X0>(llvm::APInt *this@<X0>, unint64_t **a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v5;

  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)a3 + 2) = v5;
  if (v5 > 0x40)
    llvm::APInt::initSlowCase(a3, (const void **)this);
  else
    *(_QWORD *)a3 = *(_QWORD *)this;
  return llvm::APInt::ashrInPlace((unsigned int *)a3, a2);
}

void llvm::APFloat::divide(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  void *v7;
  llvm::detail::DoubleAPFloat *v8;

  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v6 = (void *)a1[1];
  v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  v8 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v7 == v6)
    llvm::detail::DoubleAPFloat::divide(v5, v8, a3);
  else
    llvm::detail::IEEEFloat::divide(v5, v8, a3);
}

uint64_t llvm::APFloat::mod(llvm::APFloat *this, const llvm::APFloat *a2)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  void *v5;
  const llvm::detail::DoubleAPFloat *v6;

  v3 = (llvm::APFloat *)((char *)this + 8);
  v4 = (void *)*((_QWORD *)this + 1);
  v5 = llvm::APFloatBase::PPCDoubleDouble(this);
  v6 = (const llvm::APFloat *)((char *)a2 + 8);
  if (v5 == v4)
    return llvm::detail::DoubleAPFloat::mod(v3, v6);
  else
    return llvm::detail::IEEEFloat::mod(v3, v6);
}

llvm::APFloatBase *llvm::ConstantFoldCompareInstruction(unsigned int a1, mlir::BytecodeWriterConfig *this, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v9;
  llvm::ScalableVectorType *Int1Ty;
  llvm::Type *v11;
  const llvm::APInt *v12;
  llvm::Constant *v13;
  BOOL v14;
  llvm::Constant *v15;
  int v17;
  int v18;
  llvm::Constant *v19;
  const llvm::APInt *v20;
  llvm::Constant *v21;
  llvm::Constant *Not;
  llvm::ConstantExpr *v23;
  unsigned int isUnordered;
  BOOL v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t SplatValue;
  unsigned __int16 v31;
  llvm::Constant *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Compare;
  _QWORD *v37;
  char *v38;
  llvm::IntegerType *v39;
  llvm::ConstantInt *v40;
  BOOL v41;
  llvm::Type *v42;
  llvm::ConstantInt *v43;
  llvm::Type *i;
  llvm::Constant *v45;
  llvm::Type *v46;
  unsigned __int16 Element;
  BOOL v48;
  llvm::Constant *v49;
  llvm::Type *v50;
  llvm::Constant *v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD v59[5];

  v59[4] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)this;
  v7 = *(_DWORD *)(*(_QWORD *)this + 8) & 0xFE;
  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  Int1Ty = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(DesiredBytecodeVersion, v9);
  v13 = Int1Ty;
  if (v6)
    v14 = v7 == 18;
  else
    v14 = 0;
  if (v14)
  {
    llvm::VectorType::get(Int1Ty, (llvm::Type *)(*(unsigned int *)(v6 + 32) | ((unint64_t)(*(_BYTE *)(v6 + 8) == 19) << 32)));
    v13 = v15;
  }
  if (a1 == 15)
    return llvm::Constant::getAllOnesValue(v13, v11, v12);
  if (!a1)
    return (llvm::APFloatBase *)llvm::Constant::getNullValue(v13, (Type *)v11);
  v17 = *((unsigned __int8 *)this + 16);
  if (v17 == 12)
    return (llvm::APFloatBase *)llvm::PoisonValue::get(v13, v11);
  v18 = a3[16];
  if (v18 == 12)
    return (llvm::APFloatBase *)llvm::PoisonValue::get(v13, v11);
  if ((v17 - 11) < 2 || (v18 - 11) <= 1)
  {
    if ((a1 & 0xFFFFFFFE) == 0x20)
      return (llvm::APFloatBase *)llvm::UndefValue::get(v13, v11);
    if (a1 - 32 > 9)
    {
      isUnordered = llvm::CmpInst::isUnordered(a1);
      return (llvm::APFloatBase *)llvm::ConstantInt::get(v13, (llvm::Type *)isUnordered, 0, v25);
    }
    if (this == (mlir::BytecodeWriterConfig *)a3)
      return (llvm::APFloatBase *)llvm::UndefValue::get(v13, v11);
    isUnordered = llvm::CmpInst::isTrueWhenEqual(a1);
    return (llvm::APFloatBase *)llvm::ConstantInt::get(v13, (llvm::Type *)isUnordered, 0, v25);
  }
  if (llvm::Constant::isNullValue((llvm::Constant *)a3))
  {
    if (a1 == 36)
      return (llvm::APFloatBase *)llvm::Constant::getNullValue(v13, (Type *)v11);
    if (a1 == 35)
      return llvm::Constant::getAllOnesValue(v13, v11, v12);
  }
  if (llvm::Type::isIntegerTy(*(llvm::Type **)this, 1))
  {
    if (a1 == 33)
    {
      v23 = this;
      goto LABEL_54;
    }
    if (a1 == 32)
    {
      if (a3[16] == 16)
      {
        Not = (llvm::Constant *)llvm::ConstantExpr::getNot((llvm::Constant **)a3, v19, v20);
        v23 = this;
        return (llvm::APFloatBase *)llvm::ConstantExpr::getXor(v23, Not, v20, v21);
      }
      v23 = (llvm::ConstantExpr *)llvm::ConstantExpr::getNot((llvm::Constant **)this, v19, v20);
LABEL_54:
      Not = (llvm::Constant *)a3;
      return (llvm::APFloatBase *)llvm::ConstantExpr::getXor(v23, Not, v20, v21);
    }
  }
  v26 = *((unsigned __int8 *)this + 16);
  if (v26 == 17)
  {
    if (a3[16] == 17)
    {
      llvm::FCmpInst::compare((_QWORD *)this + 3, (uint64_t)(a3 + 24), a1);
      return (llvm::APFloatBase *)llvm::ConstantInt::get(v13, (llvm::Type *)isUnordered, 0, v25);
    }
  }
  else if (v26 == 16 && a3[16] == 16)
  {
    llvm::ICmpInst::compare((uint64_t)this + 24, (uint64_t)(a3 + 24), a1);
    return (llvm::APFloatBase *)llvm::ConstantInt::get(v13, (llvm::Type *)isUnordered, 0, v25);
  }
  v27 = *(_QWORD *)this;
  v28 = *(_DWORD *)(*(_QWORD *)this + 8);
  v29 = v28 & 0xFE;
  if (*(_QWORD *)this && v29 == 18)
  {
    SplatValue = llvm::Constant::getSplatValue(this, 0);
    if (SplatValue)
    {
      v31 = SplatValue;
      v32 = (llvm::Constant *)llvm::Constant::getSplatValue((llvm::Constant *)a3, 0);
      if (v32)
      {
        v34 = *(unsigned int *)(v27 + 32);
        v35 = *(unsigned __int8 *)(v27 + 8) == 19;
        Compare = llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)(unsigned __int16)a1, v31, v32, 0, v33);
        return (llvm::APFloatBase *)llvm::ConstantVector::getSplat(v34 | (v35 << 32), Compare);
      }
    }
    if (*(_BYTE *)(v27 + 8) != 19)
    {
      v57 = v59;
      v58 = 0x400000000;
      v39 = (llvm::IntegerType *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
      v40 = (llvm::ConstantInt *)llvm::IntegerType::get(v39, (llvm::LLVMContext *)0x20);
      v42 = (llvm::Type *)*(unsigned int *)(v27 + 32);
      if ((_DWORD)v42)
      {
        v43 = v40;
        for (i = 0; i != v42; i = (llvm::Type *)((char *)i + 1))
        {
          v45 = (llvm::Constant *)llvm::ConstantInt::get(v43, i, 0, v41);
          Element = llvm::ConstantExpr::getExtractElement(this, v45, 0, v46);
          v49 = (llvm::Constant *)llvm::ConstantInt::get(v43, i, 0, v48);
          v51 = (llvm::Constant *)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a3, v49, 0, v50);
          v53 = llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)(unsigned __int16)a1, Element, v51, 0, v52);
          v54 = v58;
          if (v58 >= (unint64_t)HIDWORD(v58))
          {
            v56 = v53;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 8);
            v53 = v56;
            v54 = v58;
          }
          *((_QWORD *)v57 + v54) = v53;
          v55 = v58 + 1;
          LODWORD(v58) = v58 + 1;
        }
      }
      else
      {
        v55 = v58;
      }
      v37 = llvm::ConstantVector::get((llvm::FixedVectorType ***)v57, (llvm::Type *)v55);
      if (v57 != v59)
        free(v57);
      return (llvm::APFloatBase *)v37;
    }
    return 0;
  }
  if (v29 == 18)
    v28 = *(_DWORD *)(**(_QWORD **)(v27 + 16) + 8);
  if (v28 >= 4u && v28 != 5 && (v28 & 0xFD) != 4)
  {
    v38 = (char *)&loc_180CB5D98
        + 4 * byte_181269C23[evaluateICmpRelation(this, (llvm::Constant *)a3) - 32];
    __asm { BR              X10 }
  }
  if (this != (mlir::BytecodeWriterConfig *)a3)
    return 0;
  if (a1 != 9)
  {
    if (a1 == 6)
      return (llvm::APFloatBase *)llvm::ConstantInt::getFalse((llvm::Type **)v13, v19);
    return 0;
  }
  return (llvm::APFloatBase *)llvm::ConstantInt::getTrue((llvm::Type **)v13, v19);
}

uint64_t evaluateICmpRelation(llvm::Constant *a1, llvm::Constant *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  unsigned __int8 *v10;
  BOOL v11;
  BOOL v12;
  int v13;
  char *v14;
  const llvm::GlobalValue *v15;

  if (a1 == a2)
    return 32;
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 15)
    return 42;
  v4 = *((unsigned __int8 *)a1 + 16);
  if (v4 >= 4)
    v5 = v4 == 4;
  else
    v5 = 2;
  if (v4 == 5)
    v5 = 3;
  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 >= 4)
    v7 = v6 == 4;
  else
    v7 = 2;
  if (v6 == 5)
    v8 = 3;
  else
    v8 = v7;
  if (v5 < v8)
  {
    result = evaluateICmpRelation(a2, a1);
    if ((_DWORD)result != 42)
      return llvm::CmpInst::getSwappedPredicate(result);
    return result;
  }
  if (v4 == 4)
  {
    if (v6 != 19 && (v6 != 4 || *((_QWORD *)a2 - 8) == *((_QWORD *)a1 - 8)))
      return 42;
    return 33;
  }
  if (v4 <= 3)
  {
    if (v6 <= 3)
      return areGlobalsPotentiallyEqual(a1, a2);
    if (v6 == 4)
      return 33;
    if (v6 != 19
      || (llvm::GlobalValue::hasExternalWeakLinkage(a1) & 1) != 0
      || *((_BYTE *)a1 + 16) == 1
      || llvm::NullPointerIsDefined(0, (const Function *)(*(_DWORD *)(*(_QWORD *)a1 + 8) >> 8)))
    {
      return 42;
    }
    return 34;
  }
  if (*((_WORD *)a1 + 9) != 34)
    return 42;
  v10 = (unsigned __int8 *)*((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
  if (v6 == 19)
  {
    v11 = v10[16] > 3u || v10 == 0;
    if (v11
      || (llvm::GlobalValue::hasExternalWeakLinkage(*((llvm::GlobalValue **)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))) & 1) != 0
      || (*((_BYTE *)a1 + 17) & 2) == 0)
    {
      return 42;
    }
    return 34;
  }
  if (v6 <= 3)
  {
    if (v10[16] >= 4u)
      v10 = 0;
    if (v10)
      v12 = v10 == (unsigned __int8 *)a2;
    else
      v12 = 1;
    if (!v12 && llvm::GEPOperator::hasAllZeroIndices(a1))
      return areGlobalsPotentiallyEqual((const llvm::GlobalValue *)v10, a2);
    return 42;
  }
  if (v6 <= 0x1B)
  {
    if (v6 != 5 || *((_WORD *)a2 + 9) != 34)
      return 42;
  }
  else if (v6 != 62)
  {
    return 42;
  }
  v13 = *((_DWORD *)a2 + 5);
  if ((v13 & 0x40000000) != 0)
    v14 = (char *)*((_QWORD *)a2 - 1);
  else
    v14 = (char *)a2 - 32 * (v13 & 0x7FFFFFF);
  if (v10[16] > 3u)
    return 42;
  v15 = *(const llvm::GlobalValue **)v14;
  result = 42;
  if (*(unsigned __int8 *)(*(_QWORD *)v14 + 16) <= 3u && v10 != (unsigned __int8 *)v15)
  {
    if (llvm::GEPOperator::hasAllZeroIndices(a1)
      && llvm::GEPOperator::hasAllZeroIndices(a2))
    {
      return areGlobalsPotentiallyEqual((const llvm::GlobalValue *)v10, v15);
    }
    return 42;
  }
  return result;
}

uint64_t llvm::ConstantFoldGetElementPtr(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v6;
  unint64_t v7;
  llvm::Constant **v8;
  unint64_t v11;
  llvm::PoisonValue *v12;
  llvm::Type *v13;
  llvm::PoisonValue *v14;
  int v15;
  llvm::Type *v17;
  _BOOL4 v18;
  uint64_t v19;
  llvm::Constant **v20;
  llvm::Constant *v21;
  llvm::Constant **v22;
  llvm::Constant *v23;
  _BOOL4 isCast;
  uint64_t *v25;
  uint64_t v26;
  llvm::Type *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t ElementPtr;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  const llvm::Value **v40;
  int v41;
  llvm::Constant *v42;
  int v43;
  BOOL v44;
  char v45;
  int v46;
  const llvm::Value **v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  llvm::APInt *v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  char v61;
  llvm::APFloatBase *ElementAsConstant;
  unint64_t v63;
  llvm::APInt *v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;
  char v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  char v75;
  int v76;
  char v77;
  unint64_t v78;
  unint64_t v80;
  llvm::Constant **v81;
  llvm::Type *v82;
  llvm::Constant *v83;
  BOOL v84;
  llvm::Type **v85;
  uint64_t Splat;
  int v87;
  llvm::Type **v88;
  llvm::Type *v89;
  int v90;
  _BOOL4 v91;
  llvm::ConstantInt ***v94;
  llvm::Constant *v95;
  llvm::Constant *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  llvm::Constant *v100;
  llvm::Type **v101;
  unsigned int ScalarSizeInBits;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  llvm::Type *DesiredBytecodeVersion;
  unsigned int v107;
  llvm::FixedVectorType *v108;
  uint64_t v109;
  llvm::Constant *v110;
  llvm::Constant *v111;
  llvm::Type *v112;
  llvm::Type *v113;
  llvm::Type *v114;
  llvm::Type *v115;
  uint64_t Add;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  void *v121;
  void *v122;
  mlir::BytecodeWriterConfig *v123;
  int v124;
  unint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  llvm::Type *v130;
  int v131;
  uint64_t v132;
  unsigned __int8 *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  const double *v143;
  unsigned __int128 *v144;
  const double *v145;
  unsigned __int128 v146;
  unsigned __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t SourceElementType;
  int v153;
  uint64_t *v154;
  const llvm::Value **v155;
  unint64_t v156;
  uint64_t v157;
  char v158;
  unint64_t TypeAtIndex;
  int v160;
  int v161;
  uint64_t v162;
  unsigned __int8 *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 v168;
  void *v169;
  llvm::Constant *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  llvm::Constant *v178;
  uint64_t v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  const double *v187;
  unsigned __int128 *v188;
  const double *v189;
  unsigned __int128 v190;
  unsigned __int128 v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  llvm::Type *v195;
  llvm::Constant *IntNTy;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  unint64_t v201;
  unsigned int v202;
  unsigned __int8 v203;
  unint64_t v204;
  uint64_t v205;
  int v206;
  unsigned __int8 *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  llvm::GEPOperator *v211;
  llvm::GEPOperator *v212;
  llvm::GEPOperator *v213;
  uint64_t v214;
  llvm::Constant **v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int v218;
  int v219;
  unint64_t v220;
  int NumElements;
  uint64_t v222;
  BOOL v223;
  const llvm::Value **v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  _QWORD v228[18];

  v6 = (unsigned __int8 *)a2;
  v228[16] = *MEMORY[0x1E0C80C00];
  if (!a6)
    return (uint64_t)v6;
  v7 = a6;
  v8 = (llvm::Constant **)a5;
  v11 = a1;
  llvm::GetElementPtrInst::getGEPReturnType(a1, a2, a5, a6);
  v14 = v12;
  v15 = v6[16];
  if (v15 == 12)
    return llvm::PoisonValue::get(v12, v13);
  if ((v15 - 11) <= 1)
  {
    if (!a3)
      return llvm::UndefValue::get(v12, v13);
    return llvm::PoisonValue::get(v12, v13);
  }
  v219 = BYTE4(a4);
  v17 = *(llvm::Type **)v6;
  v218 = a3;
  if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
    v17 = (llvm::Type *)**((_QWORD **)v17 + 2);
  v18 = !llvm::Type::isOpaquePointerTy(v17);
  if (v7 == 1)
    LOBYTE(v18) = 0;
  if (!v18 && !BYTE4(a4))
  {
    v19 = 8 * v7;
    v20 = v8;
    do
    {
      v21 = *v20;
      if ((llvm::Constant::isNullValue(*v20) & 1) == 0 && *((unsigned __int8 *)v21 + 16) - 11 > 1)
        goto LABEL_16;
      ++v20;
      v19 -= 8;
    }
    while (v19);
    if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x12 && (*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) != 0x12)
      return llvm::ConstantVector::getSplat(*((unsigned int *)v14 + 8) | ((unint64_t)(*((_DWORD *)v14 + 2) == 19) << 32), v6);
    return (uint64_t)v6;
  }
LABEL_16:
  if (v6[16] == 5)
  {
    v22 = v8;
    if (*((_WORD *)v6 + 9) != 34 || llvm::GEPOperator::getResultElementType((llvm::GEPOperator *)v6) != v11)
    {
LABEL_19:
      v8 = v22;
      v23 = *v22;
      isCast = llvm::ConstantExpr::isCast((llvm::ConstantExpr *)v6);
      if (v7 >= 2 && isCast && llvm::Constant::isNullValue(v23))
      {
        v25 = *(uint64_t **)&v6[-32 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
        v26 = *v25;
        if (*(_BYTE *)(*v25 + 8) != 15)
          v26 = 0;
        v27 = *(llvm::Type **)v6;
        if (*(_BYTE *)(*(_QWORD *)v6 + 8) != 15)
          v27 = 0;
        v28 = !v26 || v27 == 0;
        if (!v28 && *(_QWORD *)(v26 + 24) && *((_QWORD *)v27 + 3))
        {
          if (*(_BYTE *)(**(_QWORD **)(v26 + 16) + 8) == 17)
            v29 = **(_QWORD **)(v26 + 16);
          else
            v29 = 0;
          v30 = **((_QWORD **)v27 + 2);
          if (*(_BYTE *)(v30 + 8) != 17)
            v30 = 0;
          v31 = !v29 || v30 == 0;
          if (!v31
            && *(_QWORD *)(v29 + 24) == *(_QWORD *)(v30 + 24)
            && (*((_DWORD *)v27 + 2) ^ *(_DWORD *)(v26 + 8)) <= 0xFF)
          {
            return llvm::ConstantExpr::getGetElementPtr(v29, v25, v8, v7, v218, a4, 0);
          }
        }
      }
      goto LABEL_44;
    }
    v123 = *v8;
    if (llvm::Constant::isNullValue(*v8))
    {
      v226 = v228;
      v227 = 0x1000000000;
      v124 = *((_DWORD *)v6 + 5);
      v125 = v7 + (v124 & 0x7FFFFFFu) - 1;
      if (v125 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, v228, v125, 8);
        v124 = *((_DWORD *)v6 + 5);
      }
      v212 = (llvm::GEPOperator *)v6;
      if ((v124 & 0x40000000) != 0)
      {
        v128 = (unsigned __int8 *)*((_QWORD *)v6 - 1);
        v127 = v124 & 0x7FFFFFF;
      }
      else
      {
        v126 = v6;
        v127 = v124 & 0x7FFFFFF;
        v128 = &v126[-32 * v127];
      }
      v134 = 32 * v127 - 32;
      v135 = v227;
      v136 = v227 + (v134 >> 5);
      if (v136 > HIDWORD(v227))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, v228, v136, 8);
        v135 = v227;
      }
      if (v127 != 1)
      {
        v137 = v128 + 32;
        v138 = (unsigned __int8 *)v226 + 8 * v135;
        v139 = (v127 + 0x7FFFFFFFFFFFFFELL) & 0x7FFFFFFFFFFFFFFLL;
        if (v139 >= 0x18
          && (v138 >= &v128[32 * v127 - 24] || v137 >= (unsigned __int8 *)((char *)v226 + 8 * v135 + 8 * v139 + 8)))
        {
          v140 = v139 + 1;
          v141 = v140 & 3;
          if ((v140 & 3) == 0)
            v141 = 4;
          v142 = v140 - v141;
          v138 += 8 * v142;
          v137 += 32 * v142;
          v143 = (const double *)(v128 + 96);
          v144 = (unsigned __int128 *)((char *)v226 + 8 * v135 + 16);
          do
          {
            v145 = v143 - 8;
            v146 = (unsigned __int128)vld4q_f64(v145);
            v147 = (unsigned __int128)vld4q_f64(v143);
            *(v144 - 1) = v146;
            *v144 = v147;
            v143 += 16;
            v144 += 2;
            v142 -= 4;
          }
          while (v142);
        }
        do
        {
          v148 = *(_QWORD *)v137;
          v137 += 32;
          *(_QWORD *)v138 = v148;
          v138 += 8;
        }
        while (v137 != &v128[32 * v127]);
      }
      v149 = v135 + ((unint64_t)v134 >> 5);
      LODWORD(v227) = v149;
      v150 = 8 * v7 - 8;
      v151 = v149 + (v150 >> 3);
      if (v151 > HIDWORD(v227))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, v228, v151, 8);
        LODWORD(v149) = v227;
      }
      v6 = (unsigned __int8 *)v212;
      if (v7 != 1)
      {
        memcpy((char *)v226 + 8 * v149, v8 + 1, 8 * v7 - 8);
        LODWORD(v149) = v227;
      }
      LODWORD(v227) = v149 + ((unint64_t)v150 >> 3);
      SourceElementType = llvm::GEPOperator::getSourceElementType(v212);
      v153 = *((_DWORD *)v212 + 5);
      if ((v153 & 0x40000000) != 0)
        v154 = (uint64_t *)*((_QWORD *)v212 - 1);
      else
        v154 = (uint64_t *)((char *)v212 - 32 * (v153 & 0x7FFFFFF));
      v164 = *v154;
      v165 = *((unsigned __int8 *)v212 + 17);
      v166 = v165 > 3;
      v167 = v218 & ((v165 & 2) >> 1);
      if (v165 >= 4)
        v168 = (*((_BYTE *)v212 + 17) >> 2) - 1;
      else
        v168 = 0;
      ElementPtr = llvm::ConstantExpr::getGetElementPtr(SourceElementType, v164, v226, v227, v167, v168 | (unint64_t)(v166 << 32), 0);
      v169 = v226;
      if (v226 != v228)
        goto LABEL_262;
      goto LABEL_263;
    }
    v129 = llvm::GEPOperator::getSourceElementType((llvm::GEPOperator *)v6);
    v131 = *((_DWORD *)v6 + 5);
    if ((v131 & 0x40000000) != 0)
    {
      v133 = (unsigned __int8 *)*((_QWORD *)v6 - 1);
      v132 = v131 & 0x7FFFFFF;
    }
    else
    {
      v132 = v131 & 0x7FFFFFF;
      v133 = &v6[-32 * v132];
    }
    if (v132 == 1)
      goto LABEL_19;
    v155 = (const llvm::Value **)(v133 + 32);
    v156 = v129 | 4;
    v157 = 32 * v132 - 32;
    do
    {
      while (1)
      {
        v158 = v156;
        TypeAtIndex = v156 & 0xFFFFFFFFFFFFFFF8;
        if ((v156 & 4) == 0 || !TypeAtIndex)
          TypeAtIndex = llvm::StructType::getTypeAtIndex((llvm::StructType *)TypeAtIndex, *v155);
        v160 = *(unsigned __int8 *)(TypeAtIndex + 8);
        if ((!TypeAtIndex || v160 != 17) && (!TypeAtIndex || (v160 & 0xFE) != 0x12))
          break;
        v156 = *(_QWORD *)(TypeAtIndex + 24) | 4;
        v155 += 4;
        v157 -= 32;
        if (!v157)
          goto LABEL_252;
      }
      if (v160 == 16)
        v156 = TypeAtIndex & 0xFFFFFFFFFFFFFFFBLL;
      else
        v156 = 0;
      v155 += 4;
      v157 -= 32;
    }
    while (v157);
LABEL_252:
    if ((v158 & 4) == 0 || !v123 || *((_BYTE *)v123 + 16) != 16)
      goto LABEL_19;
    v161 = *((_DWORD *)v6 + 5);
    v162 = (v161 & 0x7FFFFFFu) - 1;
    v163 = (v161 & 0x40000000) != 0 ? (unsigned __int8 *)*((_QWORD *)v6 - 1) : &v6[-32 * (v161 & 0x7FFFFFF)];
    v170 = *(llvm::Constant **)&v163[32 * (v161 & 0x7FFFFFF) - 32];
    v171 = *(_QWORD *)v170;
    if ((*(_DWORD *)(*(_QWORD *)v170 + 8) & 0xFE) == 0x12)
      goto LABEL_19;
    v226 = v228;
    v227 = 0x1000000000;
    if (v7 + v162 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, v228, v7 + v162, 8);
      v161 = *((_DWORD *)v6 + 5);
    }
    v213 = (llvm::GEPOperator *)v6;
    if ((v161 & 0x40000000) != 0)
    {
      v173 = (unsigned __int8 *)*((_QWORD *)v6 - 1);
      v172 = v161 & 0x7FFFFFF;
    }
    else
    {
      v172 = v161 & 0x7FFFFFF;
      v173 = &v6[-32 * v172];
    }
    v174 = 32 * (v172 - 1);
    v175 = v174 - 32;
    v176 = v227;
    v177 = v227 + ((v174 - 32) >> 5);
    if (v177 > HIDWORD(v227))
    {
      v178 = v170;
      v179 = v174 - 32;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, v228, v177, 8);
      v174 = 32 * (v172 - 1);
      v175 = v179;
      v170 = v178;
      v176 = v227;
    }
    if (v172 != 2)
    {
      v180 = v173 + 32;
      v181 = (unsigned __int8 *)v226 + 8 * v176;
      v182 = (v172 + 0x7FFFFFFFFFFFFFDLL) & 0x7FFFFFFFFFFFFFFLL;
      if (v182 >= 0x18
        && (v181 >= &v173[32 * v172 - 56] || v180 >= (unsigned __int8 *)((char *)v226 + 8 * v176 + 8 * v182 + 8)))
      {
        v183 = v175;
        v184 = v182 + 1;
        v185 = v184 & 3;
        if ((v184 & 3) == 0)
          v185 = 4;
        v186 = v184 - v185;
        v181 += 8 * v186;
        v180 += 32 * v186;
        v187 = (const double *)(v173 + 96);
        v188 = (unsigned __int128 *)((char *)v226 + 8 * v176 + 16);
        do
        {
          v189 = v187 - 8;
          v190 = (unsigned __int128)vld4q_f64(v189);
          v191 = (unsigned __int128)vld4q_f64(v187);
          *(v188 - 1) = v190;
          *v188 = v191;
          v187 += 16;
          v188 += 2;
          v186 -= 4;
        }
        while (v186);
        v175 = v183;
      }
      do
      {
        v192 = *(_QWORD *)v180;
        v180 += 32;
        *(_QWORD *)v181 = v192;
        v181 += 8;
      }
      while (v180 != &v173[v174]);
    }
    LODWORD(v227) = v176 + (v175 >> 5);
    if (v171 == *(_QWORD *)v123)
    {
      v6 = (unsigned __int8 *)v213;
    }
    else
    {
      v193 = *(_DWORD *)(*(_QWORD *)v123 + 8) >> 8;
      if (*(_DWORD *)(v171 + 8) >> 8 > v193)
        v193 = *(_DWORD *)(v171 + 8) >> 8;
      if (v193 <= 0x40)
        v194 = 64;
      else
        v194 = v193;
      IntNTy = (llvm::Constant *)llvm::Type::getIntNTy(*(llvm::Type **)v171, (llvm::LLVMContext *)v194, v177);
      v6 = (unsigned __int8 *)v213;
      if (*(llvm::Constant **)v123 != IntNTy)
        v123 = (mlir::BytecodeWriterConfig *)llvm::ConstantFoldCastInstruction((llvm *)0x28, v123, IntNTy, v195);
      if (*(llvm::Constant **)v170 != IntNTy)
        v170 = (llvm::Constant *)llvm::ConstantFoldCastInstruction((llvm *)0x28, v170, IntNTy, v195);
      ElementPtr = 0;
      if (!v123 || !v170)
      {
LABEL_317:
        v169 = v226;
        if (v226 != v228)
LABEL_262:
          free(v169);
LABEL_263:
        if (ElementPtr)
          return ElementPtr;
        goto LABEL_19;
      }
    }
    v197 = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xD, v123, v170, 0, 0, v130);
    v198 = v227;
    if (v227 >= HIDWORD(v227))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, v228, v227 + 1, 8);
      v198 = v227;
    }
    *((_QWORD *)v226 + v198) = v197;
    LODWORD(v227) = v227 + 1;
    v199 = v227;
    v200 = 8 * v7 - 8;
    v201 = v227 + (v200 >> 3);
    if (v201 > HIDWORD(v227))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, v228, v201, 8);
      v199 = v227;
    }
    if (v7 != 1)
    {
      memcpy((char *)v226 + 8 * v199, v22 + 1, 8 * v7 - 8);
      v199 = v227;
    }
    LODWORD(v227) = v199 + ((unint64_t)v200 >> 3);
    v202 = v6[17];
    if (v202 <= 3)
      v203 = 0;
    else
      v203 = (v6[17] >> 2) - 1;
    if (v202 < 4)
      v204 = 0;
    else
      v204 = (unint64_t)((*((_DWORD *)v6 + 5) & 0x7FFFFFF) - 2 != ((v6[17] >> 2) - 1)) << 32;
    v205 = llvm::GEPOperator::getSourceElementType((llvm::GEPOperator *)v6);
    v206 = *((_DWORD *)v6 + 5);
    if ((v206 & 0x40000000) != 0)
      v207 = (unsigned __int8 *)*((_QWORD *)v6 - 1);
    else
      v207 = &v6[-32 * (v206 & 0x7FFFFFF)];
    if (v218)
      v208 = (v6[17] >> 1) & 1;
    else
      v208 = 0;
    ElementPtr = llvm::ConstantExpr::getGetElementPtr(v205, *(_QWORD *)v207, v226, v227, v208, v204 | v203, 0);
    goto LABEL_317;
  }
LABEL_44:
  v226 = v228;
  v227 = 0x800000000;
  v33 = *((unsigned __int8 *)*v8 + 16) - 17 < 0xFFFFFFFE;
  if ((_DWORD)v7 == 1)
  {
    LOBYTE(v34) = v218;
LABEL_197:
    ElementPtr = 0;
    if (v33)
      goto LABEL_207;
    if ((v34 & 1) != 0)
      goto LABEL_207;
    ElementPtr = 0;
    if (!v6 || v6[16] != 3)
      goto LABEL_207;
    if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v6) & 1) == 0
      && *((_QWORD *)v6 + 3) == v11
      && isInBoundsIndices<llvm::Value *>(v8, v7))
    {
      v119 = v11;
      v120 = v6;
      v121 = v8;
      v117 = v7;
      v34 = 1;
      goto LABEL_206;
    }
    ElementPtr = 0;
    v122 = v226;
    if (v226 != v228)
      goto LABEL_208;
    return ElementPtr;
  }
  v223 = *((unsigned __int8 *)*v8 + 16) - 17 < 0xFFFFFFFE;
  v211 = (llvm::GEPOperator *)v6;
  v35 = v11 | 4;
  v222 = (a4 + 1);
  v36 = *(_QWORD *)v6;
  v37 = 1;
  v38 = 1;
  v39 = v11;
  v40 = v8;
  v41 = BYTE4(a4);
  v215 = v8;
  v216 = v11;
  v217 = v7;
  while (2)
  {
    v224 = v40;
    v225 = v39;
    v42 = v8[v37];
    v43 = *((unsigned __int8 *)v42 + 16);
    if ((v43 - 15) > 1)
    {
LABEL_65:
      v223 = 1;
LABEL_66:
      v47 = v224;
      goto LABEL_67;
    }
    if (v41)
      v44 = v37 == v222;
    else
      v44 = 0;
    v45 = v44;
    if (*((unsigned __int8 *)v8[v37 - 1] + 16) - 17 < 0xFFFFFFFE)
      goto LABEL_66;
    if ((v45 & 1) != 0)
      goto LABEL_66;
    v46 = *(unsigned __int8 *)(v39 + 8);
    if (v46 == 16)
      goto LABEL_66;
    if ((v46 & 0xFE) == 0x12)
      goto LABEL_65;
    v214 = v37 - 1;
    if (v43 == 16)
    {
      v51 = a4;
      v52 = *(_QWORD *)(v39 + 32);
      v53 = (llvm::Constant *)((char *)v42 + 24);
      v54 = *((_DWORD *)v42 + 8);
      v55 = v54 - 1;
      if (v54 > 0x40)
      {
        v56 = *(_QWORD *)v53;
        v47 = v224;
        if (((*(_QWORD *)(*(_QWORD *)v53 + 8 * (v55 >> 6)) >> v55) & 1) != 0)
          v59 = llvm::APInt::countLeadingOnesSlowCase(v53);
        else
          v59 = llvm::APInt::countLeadingZerosSlowCase(v53);
      }
      else
      {
        v56 = *(_QWORD *)v53;
        v57 = v54 + __clz(*(_QWORD *)v53) - 64;
        v58 = __clz(~(*(_QWORD *)v53 << -(char)v54));
        if (!v54)
          v58 = 0;
        if (((*(_QWORD *)v53 >> v55) & 1) != 0)
          v59 = v58;
        else
          v59 = v57;
        v47 = v224;
      }
      if (v54 - v59 + 1 <= 0x40)
      {
        v78 = v54 > 0x40 ? *(_QWORD *)v56 : (uint64_t)(v56 << -(char)v54) >> -(char)v54;
        if ((v78 & 0x8000000000000000) == 0 && (!v78 || v78 < v52))
        {
          a4 = v51;
          v8 = v215;
          v11 = v216;
          v7 = v217;
          v41 = v219;
          goto LABEL_67;
        }
      }
      if (v54 >= 0x41)
        v56 = *(_QWORD *)(v56 + 8 * (v55 >> 6));
      v80 = v56 >> v55;
      a4 = v51;
      v8 = v215;
      v11 = v216;
      v7 = v217;
      v41 = v219;
      if ((v80 & 1) != 0)
      {
LABEL_141:
        v223 = 1;
        goto LABEL_67;
      }
LABEL_140:
      if (*(_BYTE *)(v36 + 8) == 16)
        goto LABEL_141;
      v81 = v8;
      v82 = *(llvm::Type **)(v225 + 32);
      if (!v82)
      {
        v223 = 1;
LABEL_184:
        v8 = v81;
        v11 = v216;
        v7 = v217;
        goto LABEL_67;
      }
      v210 = a4;
      llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v226, v217);
      v85 = (llvm::Type **)*((_QWORD *)v226 + v214);
      if (!v85)
        v85 = (llvm::Type **)v8[v214];
      Splat = (uint64_t)v8[v37];
      v87 = *(_DWORD *)(*(_QWORD *)Splat + 8) & 0xFE;
      v88 = v85;
      v89 = *v85;
      v90 = *((_DWORD *)v89 + 2) & 0xFE;
      v91 = v90 == 18 || (*(_DWORD *)(*(_QWORD *)Splat + 8) & 0xFE) == 18;
      if (v87 != 18 && v90 == 18)
      {
        Splat = llvm::ConstantDataVector::getSplat((llvm::ConstantDataVector *)*((unsigned int *)v89 + 8), (unsigned __int8 *)v81[v37], v83);
        v94 = *(llvm::ConstantInt ****)Splat;
        if ((*(_DWORD *)(*(_QWORD *)Splat + 8) & 0xFE) != 0x12)
          goto LABEL_161;
      }
      else
      {
        if (v90 == 18 || v87 != 18)
        {
          v94 = *(llvm::ConstantInt ****)Splat;
          if ((*(_DWORD *)(*(_QWORD *)Splat + 8) & 0xFE) == 0x12)
            goto LABEL_157;
LABEL_161:
          v97 = (unsigned __int8 *)llvm::ConstantInt::get((llvm::ConstantInt *)v94, v82, 0, v84);
          if (!v91)
            goto LABEL_166;
LABEL_162:
          if (v90 == 18)
            v98 = (uint64_t)v88;
          else
            v98 = Splat;
          v97 = (unsigned __int8 *)llvm::ConstantDataVector::getSplat((llvm::ConstantDataVector *)*(unsigned int *)(*(_QWORD *)v98 + 32), v97, v95);
LABEL_166:
          v99 = llvm::ConstantFoldBinaryInstruction((llvm *)0x17, Splat, (llvm::Constant *)v97, v96);
          *((_QWORD *)v226 + v37) = v99;
          v101 = (llvm::Type **)llvm::ConstantFoldBinaryInstruction((llvm *)0x14, Splat, (llvm::Constant *)v97, v100);
          ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*v88);
          v103 = llvm::Type::getScalarSizeInBits(*v101);
          if (ScalarSizeInBits <= v103)
            v104 = v103;
          else
            v104 = ScalarSizeInBits;
          if (v104 <= 0x40)
            v105 = 64;
          else
            v105 = v104;
          DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v101);
          v108 = (llvm::FixedVectorType *)llvm::Type::getIntNTy(DesiredBytecodeVersion, (llvm::LLVMContext *)v105, v107);
          if (v91)
          {
            if (v90 == 18)
              v109 = (uint64_t)v88;
            else
              v109 = Splat;
            llvm::FixedVectorType::get(v108, (llvm::Type *)*(unsigned int *)(*(_QWORD *)v109 + 32));
            v111 = v110;
            v41 = v219;
          }
          else
          {
            v41 = v219;
            v111 = v108;
          }
          v112 = *v88;
          a4 = v210;
          if ((*((_DWORD *)*v88 + 2) & 0xFE) == 0x12)
          {
            if (!llvm::Type::isIntegerTy(**((llvm::Type ***)v112 + 2), v105))
              goto LABEL_180;
          }
          else if (!llvm::Type::isIntegerTy(v112, v105))
          {
LABEL_180:
            v88 = (llvm::Type **)llvm::ConstantFoldCastInstruction((llvm *)0x28, v88, v111, v113);
            v114 = *v101;
            if ((*((_DWORD *)*v101 + 2) & 0xFE) != 0x12)
              goto LABEL_181;
            goto LABEL_187;
          }
          v114 = *v101;
          if ((*((_DWORD *)*v101 + 2) & 0xFE) != 0x12)
          {
LABEL_181:
            if (llvm::Type::isIntegerTy(v114, v105))
            {
LABEL_183:
              v47 = v224;
              Add = llvm::ConstantExpr::getAdd((llvm::ConstantExpr *)v88, (llvm::Constant *)v101, 0, 0);
              *((_QWORD *)v226 + v214) = Add;
              goto LABEL_184;
            }
LABEL_182:
            v101 = (llvm::Type **)llvm::ConstantFoldCastInstruction((llvm *)0x28, v101, v111, v115);
            goto LABEL_183;
          }
LABEL_187:
          if (llvm::Type::isIntegerTy(**((llvm::Type ***)v114 + 2), v105))
            goto LABEL_183;
          goto LABEL_182;
        }
        v88 = (llvm::Type **)llvm::ConstantDataVector::getSplat((llvm::ConstantDataVector *)*(unsigned int *)(*(_QWORD *)Splat + 32), (unsigned __int8 *)v88, v83);
        v94 = *(llvm::ConstantInt ****)Splat;
        if ((*(_DWORD *)(*(_QWORD *)Splat + 8) & 0xFE) != 0x12)
          goto LABEL_161;
      }
LABEL_157:
      v97 = (unsigned __int8 *)llvm::ConstantInt::get(*v94[2], v82, 0, v84);
      if (!v91)
        goto LABEL_166;
      goto LABEL_162;
    }
    NumElements = llvm::ConstantDataSequential::getNumElements(v42);
    if (!NumElements)
      goto LABEL_66;
    v209 = a4;
    v60 = 0;
    v61 = 1;
    do
    {
      ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v42);
      v63 = *(_QWORD *)(v225 + 32);
      v64 = (llvm::APFloatBase *)((char *)ElementAsConstant + 24);
      v65 = *((_DWORD *)ElementAsConstant + 8);
      v66 = v65 - 1;
      if (v65 > 0x40)
      {
        v220 = *(_QWORD *)(v225 + 32);
        v67 = *(_QWORD *)v64;
        if (((*(_QWORD *)(*(_QWORD *)v64 + 8 * (v66 >> 6)) >> v66) & 1) != 0)
        {
          v72 = llvm::APInt::countLeadingOnesSlowCase(v64);
          v63 = v220;
          if (v65 - v72 + 1 > 0x40)
            goto LABEL_98;
        }
        else
        {
          v76 = llvm::APInt::countLeadingZerosSlowCase(v64);
          v63 = v220;
          if (v65 - v76 + 1 > 0x40)
            goto LABEL_98;
        }
      }
      else
      {
        v67 = *(_QWORD *)v64;
        v68 = v65 + __clz(*(_QWORD *)v64) - 64;
        v69 = __clz(~(*(_QWORD *)v64 << -(char)v65));
        if (!v65)
          v69 = 0;
        if (((*(_QWORD *)v64 >> v66) & 1) != 0)
          v70 = v69;
        else
          v70 = v68;
        if (v65 - v70 + 1 > 0x40)
        {
LABEL_98:
          v71 = 0;
          if (v65 < 0x41)
            goto LABEL_100;
LABEL_99:
          v67 = *(_QWORD *)(v67 + 8 * (v66 >> 6));
          goto LABEL_100;
        }
      }
      if (v65 > 0x40)
        v73 = *(_QWORD *)v67;
      else
        v73 = (uint64_t)(v67 << -(char)v65) >> -(char)v65;
      if (v73)
        v74 = v73 >= v63;
      else
        v74 = 0;
      v75 = !v74;
      if (v73 >= 0)
        v71 = v75;
      else
        v71 = 0;
      if (v65 >= 0x41)
        goto LABEL_99;
LABEL_100:
      if (((v67 >> v66) & 1) != 0)
      {
        v223 = 1;
        a4 = v209;
        v8 = v215;
        v11 = v216;
        v7 = v217;
        v41 = v219;
        goto LABEL_66;
      }
      v61 &= v71;
      ++v60;
    }
    while (NumElements != v60);
    v77 = v61 | v223;
    a4 = v209;
    v8 = v215;
    v11 = v216;
    v7 = v217;
    v41 = v219;
    v47 = v224;
    if ((v77 & 1) == 0)
    {
      v223 = 0;
      goto LABEL_140;
    }
LABEL_67:
    v48 = v35 & 0xFFFFFFFFFFFFFFF8;
    if ((v35 & 4) == 0 || !v48)
      v48 = llvm::StructType::getTypeAtIndex((llvm::StructType *)v48, *v47);
    v49 = *(unsigned __int8 *)(v48 + 8);
    if (v48 && v49 == 17 || v48 && (v49 & 0xFE) == 0x12)
    {
      v50 = *(_QWORD *)(v48 + 24);
      v35 = v50 | 4;
      v40 = v47 + 1;
      v39 = v50 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_79;
    }
    if (v49 == 16)
      v35 = v48 & 0xFFFFFFFFFFFFFFFBLL;
    else
      v35 = 0;
    v40 = v47 + 1;
    v39 = v35 & 0xFFFFFFFFFFFFFFF8;
    if ((v35 & 4) != 0)
    {
LABEL_79:
      if (!v39)
        goto LABEL_52;
    }
    else
    {
LABEL_52:
      v39 = llvm::StructType::getTypeAtIndex((llvm::StructType *)v39, *v40);
    }
    ++v38;
    ++v37;
    v36 = v225;
    if (v38 != (_DWORD)v7)
      continue;
    break;
  }
  v117 = v227;
  v6 = (unsigned __int8 *)v211;
  v34 = v218;
  v33 = v223;
  if (!(_DWORD)v227)
    goto LABEL_197;
  if ((_DWORD)v7)
  {
    v118 = 0;
    do
    {
      if (!*(_QWORD *)((char *)v226 + v118 * 8))
        *(_QWORD *)((char *)v226 + v118 * 8) = v8[v118];
      ++v118;
    }
    while (v7 != v118);
  }
  v121 = v226;
  v119 = v11;
  v120 = v211;
LABEL_206:
  ElementPtr = llvm::ConstantExpr::getGetElementPtr(v119, v120, v121, v117, v34, a4, 0);
LABEL_207:
  v122 = v226;
  if (v226 != v228)
LABEL_208:
    free(v122);
  return ElementPtr;
}

double llvm::GetElementPtrInst::getGEPReturnType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v5;
  uint64_t v7;
  unsigned int v8;
  llvm::Type *v9;
  llvm::PointerType **IndexedType;
  llvm::ScalableVectorType *v11;
  double result;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v5 = (uint64_t **)a3;
  v7 = *a2;
  v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12)
  {
    v7 = **(_QWORD **)(v7 + 16);
    v8 = *(_DWORD *)(v7 + 8);
  }
  v9 = (llvm::Type *)(v8 >> 8);
  IndexedType = (llvm::PointerType **)llvm::GetElementPtrInst::getIndexedType(a1, a3, a4);
  if (*(_QWORD *)(v7 + 24))
  {
    v11 = (llvm::ScalableVectorType *)llvm::PointerType::get(IndexedType, v9);
    v13 = *a2;
    if (!*a2)
      goto LABEL_9;
  }
  else
  {
    v11 = (llvm::ScalableVectorType *)llvm::PointerType::get(*(llvm::PointerType **)v7, v9);
    v13 = *a2;
    if (!*a2)
      goto LABEL_9;
  }
  if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
  {
    v14 = *(_DWORD *)(v13 + 8);
    return llvm::VectorType::get(v11, (llvm::Type *)(*(unsigned int *)(v13 + 32) | ((unint64_t)(v14 == 19) << 32)));
  }
LABEL_9:
  if (a4)
  {
    v15 = 8 * a4;
    while (1)
    {
      v13 = **v5;
      if (v13 && (*(_DWORD *)(v13 + 8) & 0xFE) == 18)
        break;
      ++v5;
      v15 -= 8;
      if (!v15)
        return result;
    }
    v14 = *(_DWORD *)(v13 + 8);
    return llvm::VectorType::get(v11, (llvm::Type *)(*(unsigned int *)(v13 + 32) | ((unint64_t)(v14 == 19) << 32)));
  }
  return result;
}

uint64_t isInBoundsIndices<llvm::Value *>(llvm::Constant **a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  llvm::Constant *v5;
  llvm::APInt *v6;
  unsigned int v7;
  int v8;
  llvm::Constant **v9;

  if (!a2)
    return 1;
  v2 = a2;
  if ((llvm::Constant::isNullValue(*a1) & 1) != 0)
    return 1;
  v5 = *a1;
  if (*a1 && *((_BYTE *)v5 + 16) == 16)
  {
    v6 = (llvm::Constant *)((char *)v5 + 24);
    v7 = *((_DWORD *)v5 + 8);
    if (v7 <= 0x40)
      goto LABEL_9;
  }
  else
  {
    result = (uint64_t)llvm::ConstantDataVector::getSplatValue(v5);
    if (!result)
      return result;
    if (*(_BYTE *)(result + 16) != 16)
      return 0;
    v6 = (llvm::APInt *)(result + 24);
    v7 = *(_DWORD *)(result + 32);
    if (v7 <= 0x40)
    {
LABEL_9:
      if (*(_QWORD *)v6 != 1)
        return 0;
      goto LABEL_15;
    }
  }
  if (llvm::APInt::countLeadingZerosSlowCase(v6) != v7 - 1)
    return 0;
LABEL_15:
  v8 = v2 - 1;
  if (!v8)
    return 1;
  v9 = a1 + 1;
  do
  {
    result = llvm::Constant::isNullValue(*v9);
    if ((result & 1) == 0)
      break;
    ++v9;
    --v8;
  }
  while (v8);
  return result;
}

void llvm::APFloat::bitcastToAPInt(llvm::APFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;

  v3 = (llvm::APFloat *)((char *)this + 8);
  v4 = (void *)*((_QWORD *)this + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v4)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v3, a2);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt(v3, (uint64_t)a2);
}

uint64_t llvm::APSInt::compareValues(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  void *__p;
  unsigned int v14;
  char v15;
  void *v16;
  unsigned int v17;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  if (v4 == v5 && (*(_BYTE *)(a1 + 12) == 0) == (*(_BYTE *)(a2 + 12) == 0))
  {
    if (!*(_BYTE *)(a1 + 12))
      return llvm::APInt::compareSigned((llvm::APInt *)a1, (const llvm::APInt *)a2);
    return llvm::APInt::compare((llvm::APInt *)a1, (const llvm::APInt *)a2);
  }
  if (v4 > v5)
  {
    if (*(_BYTE *)(a2 + 12))
      llvm::APInt::zext((const void **)a2, v4, (uint64_t)&v16);
    else
      llvm::APInt::sext((const void **)a2, v4, (uint64_t)&v16);
    v8 = *(_BYTE *)(a2 + 12);
    v14 = v17;
    __p = v16;
    v15 = v8;
    v9 = llvm::APSInt::compareValues(a1, &__p);
    if (v14 < 0x41)
      return v9;
    goto LABEL_22;
  }
  if (v5 <= v4)
  {
    if (*(_BYTE *)(a1 + 12))
    {
      if (!*(_BYTE *)(a2 + 12))
      {
        v7 = (_QWORD *)(*(_QWORD *)a2 + 8 * ((v5 - 1) >> 6));
        if (v5 < 0x41)
          v7 = (_QWORD *)a2;
        if (((*v7 >> (v5 - 1)) & 1) != 0)
          return 1;
      }
    }
    else
    {
      v11 = v4 - 1;
      if (v4 >= 0x41)
        v12 = (_QWORD *)(*(_QWORD *)a1 + 8 * ((v4 - 1) >> 6));
      else
        v12 = (_QWORD *)a1;
      if (((*v12 >> v11) & 1) != 0)
        return 0xFFFFFFFFLL;
    }
    return llvm::APInt::compare((llvm::APInt *)a1, (const llvm::APInt *)a2);
  }
  if (*(_BYTE *)(a1 + 12))
    llvm::APInt::zext((const void **)a1, v5, (uint64_t)&v16);
  else
    llvm::APInt::sext((const void **)a1, v5, (uint64_t)&v16);
  v10 = *(_BYTE *)(a1 + 12);
  v14 = v17;
  __p = v16;
  v15 = v10;
  v9 = llvm::APSInt::compareValues(&__p, a2);
  if (v14 < 0x41)
    return v9;
LABEL_22:
  if (!__p)
    return v9;
  operator delete[](__p);
  return v9;
}

uint64_t areGlobalsPotentiallyEqual(const llvm::GlobalValue *a1, const llvm::GlobalValue *a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  int v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v13;
  unsigned int v14;
  BOOL v15;
  BOOL v16;
  int v17;

  if (*((_BYTE *)a1 + 16) == 1
    || *((_BYTE *)a2 + 16) == 1
    || (llvm::GlobalValue::isInterposable(a1) & 1) != 0
    || (*((_DWORD *)a1 + 8) & 0xC0) == 0x80)
  {
    return 42;
  }
  if (*((_BYTE *)a1 + 16) == 3)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
    v5 = v4[8];
    v6 = v5 != 13 && v5 >= 4;
    v7 = !v6 || v5 == 5;
    v8 = v5 & 0xFE;
    v9 = v7 || v8 == 10;
    v10 = v9 || (v5 & 0xFFFFFFFD) == 4;
    if (!v10 && v5 != 15)
    {
      v15 = v8 == 16 || v8 == 18;
      v16 = v15 || v5 == 21;
      if (!v16 || !llvm::Type::isSizedDerivedType((uint64_t)v4, 0))
        return 42;
    }
    if ((llvm::Type::isEmptyTy((llvm::Type *)v4, v5) & 1) != 0)
      return 42;
  }
  if ((llvm::GlobalValue::isInterposable(a2) & 1) == 0
    && (*((_DWORD *)a2 + 8) & 0xC0) != 0x80
    && (*((_BYTE *)a2 + 16) != 3
     || ((v13 = (unsigned __int8 *)*((_QWORD *)a2 + 3), v14 = v13[8], v14 == 13)
      || v14 < 4
      || v14 == 5
      || (v17 = v14 & 0xFE, v17 == 10)
      || (v14 & 0xFFFFFFFD) == 4
      || v14 == 15
      || (v17 == 16 || v17 == 18 || v14 == 21) && llvm::Type::isSizedDerivedType((uint64_t)v13, 0))
     && !llvm::Type::isEmptyTy((llvm::Type *)v13, v14)))
  {
    return 33;
  }
  else
  {
    return 42;
  }
}

uint64_t llvm::GEPOperator::hasAllZeroIndices(llvm::GEPOperator *this)
{
  int v1;
  uint64_t v2;
  char *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::APInt *v9;
  unsigned int v10;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = (char *)*((_QWORD *)this - 1);
    v2 = v1 & 0x7FFFFFF;
    if (v2 == 1)
      return 1;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = (char *)this - 32 * v2;
    if (v2 == 1)
      return 1;
  }
  v5 = v3 + 32;
  v6 = 32 * v2 - 32;
  while (1)
  {
    v7 = *(_QWORD *)v5;
    if (!*(_QWORD *)v5 || *(_BYTE *)(*(_QWORD *)v5 + 16) != 16)
      break;
    v9 = (llvm::APInt *)(v7 + 24);
    v10 = *(_DWORD *)(v7 + 32);
    if (v10 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v9) != v10)
        return 0;
    }
    else if (*(_QWORD *)v9)
    {
      return 0;
    }
    v5 += 32;
    v6 -= 32;
    if (!v6)
      return 1;
  }
  return 0;
}

BOOL llvm::PatternMatch::undef_match::check(llvm::PatternMatch::undef_match *this, const llvm::Value *a2)
{
  unsigned int v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v6[2];
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  _BYTE v11[64];
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v2 = (*((_BYTE *)this + 16) - 11);
  if (v2 < 2)
    return 1;
  if (v2 < 0xFD)
    return 0;
  v7 = v11;
  v8 = v11;
  v9 = 8;
  v10 = 0;
  v12 = v14;
  v13 = 0x800000000;
  v6[0] = (uint64_t)&v7;
  v6[1] = (uint64_t)&v12;
  v3 = 0;
  if (llvm::PatternMatch::undef_match::check(llvm::Value const*)::{lambda(llvm::ConstantAggregate const*)#1}::operator()(v6, (uint64_t)this))
  {
    while (1)
    {
      v3 = (_DWORD)v13 == 0;
      if (!(_DWORD)v13)
        break;
      v4 = v12[v13 - 1];
      LODWORD(v13) = v13 - 1;
      if ((llvm::PatternMatch::undef_match::check(llvm::Value const*)::{lambda(llvm::ConstantAggregate const*)#1}::operator()(v6, v4) & 1) == 0)
      {
        v3 = 0;
        break;
      }
    }
  }
  if (v12 != v14)
    free(v12);
  if (v8 != v7)
    free(v8);
  return v3;
}

uint64_t llvm::PatternMatch::undef_match::check(llvm::Value const*)::{lambda(llvm::ConstantAggregate const*)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  const void **v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  unsigned int v9;
  llvm::SmallPtrSetImplBase *v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(_DWORD *)(a2 + 20);
  if ((v3 & 0x40000000) != 0)
  {
    v5 = *(const void ***)(a2 - 8);
    v4 = v3 & 0x7FFFFFF;
    if (!v4)
      return 1;
  }
  else
  {
    v4 = v3 & 0x7FFFFFF;
    v5 = (const void **)(a2 - 32 * v4);
    if (!v4)
      return 1;
  }
  v6 = &v5[4 * v4];
  while (1)
  {
    v8 = *v5;
    v9 = (*((_BYTE *)*v5 + 16) - 11);
    if (v9 >= 2)
      break;
LABEL_8:
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  if (v9 >= 0xFD)
  {
    v10 = (llvm::SmallPtrSetImplBase *)*a1;
    v11 = *(_QWORD *)(*a1 + 8);
    if (v11 != *(_QWORD *)*a1)
      goto LABEL_12;
    v15 = *((unsigned int *)v10 + 5);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = 8 * v15;
      v18 = *(_QWORD **)(*a1 + 8);
      do
      {
        if ((const void *)*v18 == v8)
        {
          v13 = 0;
          goto LABEL_13;
        }
        if (*v18 == -2)
          v16 = v18;
        ++v18;
        v17 -= 8;
      }
      while (v17);
      if (!v16)
        goto LABEL_24;
      *v16 = v8;
      --*((_DWORD *)v10 + 6);
      v13 = 1;
      goto LABEL_13;
    }
LABEL_24:
    if (v15 < *((_DWORD *)v10 + 4))
    {
      *((_DWORD *)v10 + 5) = v15 + 1;
      *(_QWORD *)(v11 + 8 * v15) = v8;
      v13 = 1;
    }
    else
    {
LABEL_12:
      llvm::SmallPtrSetImplBase::insert_imp_big(v10, *v5);
      v13 = v12;
    }
LABEL_13:
    if (v13)
    {
      v14 = a1[1];
      v7 = *(unsigned int *)(v14 + 8);
      if (v7 >= *(_DWORD *)(v14 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1[1], (void *)(v14 + 16), v7 + 1, 8);
        *(_QWORD *)(*(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8)) = v8;
        LODWORD(v7) = *(_DWORD *)(v14 + 8);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v14 + 8 * v7) = v8;
      }
      *(_DWORD *)(v14 + 8) = v7 + 1;
    }
    goto LABEL_8;
  }
  return 0;
}

BOOL llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_zero_int,llvm::ConstantInt>::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  BOOL v9;
  uint64_t SplatValue;
  int v11;
  Type *v12;
  llvm::APFloatBase *AggregateElement;
  int v14;
  unsigned int v15;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v3 = (llvm::Constant *)((char *)a2 + 24);
    v4 = *((_DWORD *)a2 + 8);
    if (v4 <= 0x40)
    {
      v5 = *(_QWORD *)v3;
      return v5 == 0;
    }
    return llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
  }
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v9 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v9 = 0;
  if (!v9)
    return 0;
  SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *(_BYTE *)(SplatValue + 16) != 16)
  {
    if (*(_BYTE *)(v8 + 8) == 18)
    {
      v11 = *(_DWORD *)(v8 + 32);
      if (v11)
      {
        v12 = 0;
        v6 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(a2, v12);
          if (!AggregateElement)
            break;
          v14 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v14 - 11) >= 2)
          {
            if (v14 != 16)
              return 0;
            v15 = *((_DWORD *)AggregateElement + 8);
            if (v15 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APFloatBase *)((char *)AggregateElement
                                                                                            + 24)) != v15)
                return 0;
            }
            else if (*((_QWORD *)AggregateElement + 3))
            {
              return 0;
            }
            v6 = 1;
          }
          v12 = (Type *)((_DWORD)v12 + 1);
          if (v11 == (_DWORD)v12)
            return v6;
        }
      }
    }
    return 0;
  }
  v4 = *(_DWORD *)(SplatValue + 32);
  if (v4 > 0x40)
  {
    v3 = (llvm::APInt *)(SplatValue + 24);
    return llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
  }
  v5 = *(_QWORD *)(SplatValue + 24);
  return v5 == 0;
}

BOOL llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_one,llvm::ConstantInt>::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  BOOL v9;
  uint64_t SplatValue;
  int v11;
  Type *v12;
  llvm::APFloatBase *AggregateElement;
  int v14;
  unsigned int v15;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v3 = (llvm::Constant *)((char *)a2 + 24);
    v4 = *((_DWORD *)a2 + 8);
    if (v4 <= 0x40)
    {
      v5 = *(_QWORD *)v3;
      return v5 == 1;
    }
    return llvm::APInt::countLeadingZerosSlowCase(v3) == v4 - 1;
  }
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v9 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v9 = 0;
  if (!v9)
    return 0;
  SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *(_BYTE *)(SplatValue + 16) != 16)
  {
    if (*(_BYTE *)(v8 + 8) == 18)
    {
      v11 = *(_DWORD *)(v8 + 32);
      if (v11)
      {
        v12 = 0;
        v6 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(a2, v12);
          if (!AggregateElement)
            break;
          v14 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v14 - 11) >= 2)
          {
            if (v14 != 16)
              return 0;
            v15 = *((_DWORD *)AggregateElement + 8);
            if (v15 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APFloatBase *)((char *)AggregateElement
                                                                                            + 24)) != v15 - 1)
                return 0;
            }
            else if (*((_QWORD *)AggregateElement + 3) != 1)
            {
              return 0;
            }
            v6 = 1;
          }
          v12 = (Type *)((_DWORD)v12 + 1);
          if (v11 == (_DWORD)v12)
            return v6;
        }
      }
    }
    return 0;
  }
  v4 = *(_DWORD *)(SplatValue + 32);
  if (v4 > 0x40)
  {
    v3 = (llvm::APInt *)(SplatValue + 24);
    return llvm::APInt::countLeadingZerosSlowCase(v3) == v4 - 1;
  }
  v5 = *(_QWORD *)(SplatValue + 24);
  return v5 == 1;
}

BOOL llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_neg_zero_fp,llvm::ConstantFP>::match<llvm::Constant>(llvm::APFloatBase *a1, llvm::Constant *a2)
{
  void *v3;
  char v4;
  char v5;
  uint64_t v7;
  BOOL v8;
  uint64_t SplatValue;
  uint64_t v10;
  void *v11;
  int v12;
  Type *v13;
  llvm::APFloatBase *AggregateElement;
  llvm::APFloatBase *v15;
  int v16;
  void *v17;
  char v18;

  if (!a2 || *((_BYTE *)a2 + 16) != 17)
  {
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v8 = 0;
    if (v8)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && (v10 = SplatValue, *(_BYTE *)(SplatValue + 16) == 17))
      {
        v11 = *(void **)(SplatValue + 32);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)SplatValue) == v11)
        {
          v4 = *(_BYTE *)(*(_QWORD *)(v10 + 40) + 28);
          if ((v4 & 7) == 3)
            return (v4 & 8) != 0;
        }
        else
        {
          v4 = *(_BYTE *)(v10 + 52);
          if ((v4 & 7) == 3)
            return (v4 & 8) != 0;
        }
      }
      else if (*(_BYTE *)(v7 + 8) == 18)
      {
        v12 = *(_DWORD *)(v7 + 32);
        if (v12)
        {
          v13 = 0;
          v5 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(a2, v13);
            if (!AggregateElement)
              break;
            v15 = AggregateElement;
            v16 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v16 - 11) >= 2)
            {
              if (v16 != 17)
                return 0;
              v17 = (void *)*((_QWORD *)AggregateElement + 4);
              if (llvm::APFloatBase::PPCDoubleDouble(AggregateElement) == v17)
              {
                v18 = *(_BYTE *)(*((_QWORD *)v15 + 5) + 28);
                if ((v18 & 7) != 3)
                  return 0;
              }
              else
              {
                v18 = *((_BYTE *)v15 + 52);
                if ((v18 & 7) != 3)
                  return 0;
              }
              if ((v18 & 8) == 0)
                return 0;
              v5 = 1;
            }
            v13 = (Type *)((_DWORD)v13 + 1);
            if (v12 == (_DWORD)v13)
              return v5 & 1;
          }
        }
      }
    }
    return 0;
  }
  v3 = (void *)*((_QWORD *)a2 + 4);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v3)
  {
    v4 = *(_BYTE *)(*((_QWORD *)a2 + 5) + 28);
    if ((v4 & 7) == 3)
      return (v4 & 8) != 0;
    return 0;
  }
  v4 = *((_BYTE *)a2 + 52);
  if ((v4 & 7) == 3)
    return (v4 & 8) != 0;
  v5 = 0;
  return v5 & 1;
}

unsigned int *llvm::ConstantRange::ConstantRange(unsigned int *this, unsigned int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  llvm::APInt *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v3 = (uint64_t)this;
  this[2] = a2;
  if (!a3)
  {
    if (a2 <= 0x40)
    {
      *(_QWORD *)this = 0;
      this[6] = a2;
      *((_QWORD *)this + 2) = 0;
      return this;
    }
    v7 = 0;
    v8 = 0;
    goto LABEL_11;
  }
  if (a2 > 0x40)
  {
    v7 = -1;
    v8 = 1;
LABEL_11:
    llvm::APInt::initSlowCase((llvm::APInt *)this, v7, v8);
    v9 = *(_DWORD *)(v3 + 8);
    v6 = (llvm::APInt *)(v3 + 16);
    *(_DWORD *)(v3 + 24) = v9;
    if (v9 > 0x40)
    {
LABEL_6:
      llvm::APInt::initSlowCase(v6, (const void **)v3);
      return (unsigned int *)v3;
    }
    goto LABEL_12;
  }
  v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
  if (!a2)
    v4 = 0;
  *(_QWORD *)this = v4;
  v5 = this[2];
  v6 = (llvm::APInt *)(this + 4);
  *(_DWORD *)(v3 + 24) = v5;
  if (v5 > 0x40)
    goto LABEL_6;
LABEL_12:
  *(_QWORD *)v6 = *(_QWORD *)v3;
  return (unsigned int *)v3;
}

uint64_t llvm::ConstantRange::ConstantRange(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

BOOL llvm::ConstantRange::isEmptySet(llvm::ConstantRange *this)
{
  unsigned int v2;
  _BOOL8 result;

  v2 = *((_DWORD *)this + 2);
  if (v2 > 0x40)
  {
    result = llvm::APInt::equalSlowCase((const void **)this, (const void **)this + 2);
    if (!(_DWORD)result)
      return result;
    return llvm::APInt::countLeadingZerosSlowCase(this) == v2;
  }
  else
  {
    return (*(_QWORD *)this | *((_QWORD *)this + 2)) == 0;
  }
}

llvm::ConstantRange *llvm::ConstantRange::ConstantRange(llvm::ConstantRange *this, const llvm::ConstantRange *a2)
{
  unsigned int v4;
  llvm::APInt *v5;
  const void **v6;
  unsigned int v7;
  unsigned int v9;

  v4 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 2) = v4;
  if (v4 > 0x40)
  {
    llvm::APInt::initSlowCase(this, (const void **)a2);
    v5 = (llvm::ConstantRange *)((char *)this + 16);
    v6 = (const void **)((char *)a2 + 16);
    v9 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 6) = v9;
    if (v9 > 0x40)
      goto LABEL_3;
  }
  else
  {
    *(_QWORD *)this = *(_QWORD *)a2;
    v5 = (llvm::ConstantRange *)((char *)this + 16);
    v6 = (const void **)((char *)a2 + 16);
    v7 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 6) = v7;
    if (v7 > 0x40)
    {
LABEL_3:
      llvm::APInt::initSlowCase(v5, v6);
      return this;
    }
  }
  *(_QWORD *)v5 = *v6;
  return this;
}

BOOL llvm::ConstantRange::isFullSet(llvm::ConstantRange *this)
{
  unsigned int v2;

  v2 = *((_DWORD *)this + 2);
  if (v2 > 0x40)
  {
    if (llvm::APInt::equalSlowCase((const void **)this, (const void **)this + 2))
      return llvm::APInt::countTrailingOnesSlowCase(this) == v2;
    return 0;
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 2))
    return 0;
  return !v2 || *(_QWORD *)this == 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
}

llvm::APInt *llvm::ConstantRange::intersectWith@<X0>(llvm::APInt *this@<X0>, llvm::APInt *a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  unsigned int v7;
  llvm::APInt *v8;
  unsigned int v9;
  const llvm::APInt *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  llvm::APInt *result;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  const void **v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  _BYTE v31[8];
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  _BYTE v35[8];
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE v39[8];
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE v43[8];
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE v47[8];
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;

  v7 = *((_DWORD *)this + 2);
  while (1)
  {
    v8 = a2;
    a2 = this;
    v9 = v7;
    v10 = (llvm::APInt *)((char *)this + 16);
    if (v7 >= 0x41)
    {
      if (llvm::APInt::equalSlowCase((const void **)this, (const void **)this + 2)
        && llvm::APInt::countLeadingZerosSlowCase(a2) == v7)
      {
        a4[2] = v7;
        goto LABEL_57;
      }
    }
    else if (!(*((_QWORD *)this + 2) | *(_QWORD *)this))
    {
      a4[2] = v7;
      goto LABEL_40;
    }
    v11 = (char *)v8 + 16;
    v7 = *((_DWORD *)v8 + 2);
    if (v7 > 0x40)
    {
      if (llvm::APInt::equalSlowCase((const void **)v8, (const void **)v8 + 2))
      {
        if (llvm::APInt::countTrailingOnesSlowCase(v8) == v7)
          goto LABEL_36;
        if (llvm::APInt::countLeadingZerosSlowCase(v8) == v7)
        {
          a4[2] = v7;
          goto LABEL_60;
        }
      }
    }
    else
    {
      v12 = *(_QWORD *)v8;
      v13 = *((_QWORD *)v8 + 2);
      if (*(_QWORD *)v8 == v13 && (!v7 || v12 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v7))
      {
LABEL_36:
        a4[2] = v9;
        if (v9 > 0x40)
        {
LABEL_57:
          llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)a2);
          result = (llvm::APInt *)(a4 + 4);
          v21 = *((_DWORD *)a2 + 6);
          a4[6] = v21;
          if (v21 > 0x40)
          {
LABEL_58:
            v22 = (const void **)v10;
            return (llvm::APInt *)llvm::APInt::initSlowCase(result, v22);
          }
LABEL_41:
          v19 = *(_QWORD *)v10;
LABEL_44:
          *(_QWORD *)result = v19;
          return result;
        }
LABEL_40:
        *(_QWORD *)a4 = *(_QWORD *)a2;
        result = (llvm::APInt *)(a4 + 4);
        v18 = *((_DWORD *)a2 + 6);
        a4[6] = v18;
        if (v18 > 0x40)
          goto LABEL_58;
        goto LABEL_41;
      }
      if (!(v13 | v12))
      {
        a4[2] = v7;
        goto LABEL_42;
      }
    }
    if (v9 > 0x40)
      break;
    if (*(_QWORD *)a2 == *((_QWORD *)a2 + 2) && (!v9 || *(_QWORD *)a2 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v9))
      goto LABEL_38;
LABEL_23:
    v14 = llvm::APInt::compare(a2, v10);
    v15 = llvm::APInt::compare(v8, (llvm::APInt *)((char *)v8 + 16));
    v16 = v15;
    if (v14 > 0)
    {
      if (v15 <= 0)
      {
        if ((llvm::APInt::compare(v8, v10) & 0x80000000) == 0)
        {
          if ((llvm::APInt::compare(v8, a2) & 0x80000000) != 0)
          {
            result = (llvm::APInt *)llvm::APInt::compare((llvm::APInt *)((char *)v8 + 16), a2);
            if ((int)result > 0)
            {
              v38 = v9;
              if (v9 > 0x40)
                result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)&v37, (const void **)a2);
              else
                v37 = *(_QWORD *)a2;
              v24 = *((_DWORD *)v8 + 6);
              v36 = v24;
              if (v24 >= 0x41)
              {
                result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)v35, (const void **)v8 + 2);
                v24 = v36;
                v11 = v35;
              }
              v25 = *(_QWORD *)v11;
              a4[2] = v38;
              v26 = v37;
              goto LABEL_98;
            }
            return llvm::ConstantRange::getEmpty(a2, a4);
          }
          return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v8);
        }
        if ((llvm::APInt::compare((llvm::APInt *)((char *)v8 + 16), v10) & 0x80000000) != 0)
          return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v8);
        result = (llvm::APInt *)llvm::APInt::compare((llvm::APInt *)((char *)v8 + 16), a2);
        if ((int)result <= 0)
        {
          v42 = v7;
          if (v7 > 0x40)
            result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)&v41, (const void **)v8);
          else
            v41 = *(_QWORD *)v8;
          v24 = *((_DWORD *)a2 + 6);
          v40 = v24;
          if (v24 >= 0x41)
          {
            result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)v39, (const void **)v10);
            v24 = v40;
            v10 = (const llvm::APInt *)v39;
          }
          v25 = *(_QWORD *)v10;
          a4[2] = v42;
          v26 = v41;
          goto LABEL_98;
        }
      }
      else if ((llvm::APInt::compare((llvm::APInt *)((char *)v8 + 16), v10) & 0x80000000) != 0)
      {
        if ((llvm::APInt::compare(v8, v10) & 0x80000000) == 0)
        {
          result = (llvm::APInt *)llvm::APInt::compare(v8, a2);
          if ((result & 0x80000000) != 0)
          {
            v34 = v9;
            if (v9 > 0x40)
              result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)&v33, (const void **)a2);
            else
              v33 = *(_QWORD *)a2;
            v24 = *((_DWORD *)v8 + 6);
            v32 = v24;
            if (v24 >= 0x41)
            {
              result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)v31, (const void **)v8 + 2);
              v24 = v32;
              v11 = v31;
            }
            v25 = *(_QWORD *)v11;
            a4[2] = v34;
            v26 = v33;
            goto LABEL_98;
          }
          return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v8);
        }
      }
      else if ((int)llvm::APInt::compare((llvm::APInt *)((char *)v8 + 16), a2) <= 0)
      {
        result = (llvm::APInt *)llvm::APInt::compare(v8, a2);
        if ((result & 0x80000000) == 0)
        {
          v30 = v7;
          if (v7 > 0x40)
            result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)&v29, (const void **)v8);
          else
            v29 = *(_QWORD *)v8;
          v24 = *((_DWORD *)a2 + 6);
          v28 = v24;
          if (v24 >= 0x41)
          {
            result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)v27, (const void **)v10);
            v24 = v28;
            v10 = (const llvm::APInt *)v27;
          }
          v25 = *(_QWORD *)v10;
          a4[2] = v30;
          v26 = v29;
          goto LABEL_98;
        }
        return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, a2);
      }
      return getPreferredRange(a4, a2, v8, a3);
    }
    this = v8;
    if (v16 <= 0)
    {
      if ((llvm::APInt::compare(a2, v8) & 0x80000000) == 0)
      {
        if ((llvm::APInt::compare(v10, (llvm::APInt *)((char *)v8 + 16)) & 0x80000000) == 0)
        {
          result = (llvm::APInt *)llvm::APInt::compare(a2, (llvm::APInt *)((char *)v8 + 16));
          if ((result & 0x80000000) != 0)
          {
            v46 = v9;
            if (v9 > 0x40)
              result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)&v45, (const void **)a2);
            else
              v45 = *(_QWORD *)a2;
            v24 = *((_DWORD *)v8 + 6);
            v44 = v24;
            if (v24 >= 0x41)
            {
              result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)v43, (const void **)v8 + 2);
              v24 = v44;
              v11 = v43;
            }
            v25 = *(_QWORD *)v11;
            a4[2] = v46;
            v26 = v45;
LABEL_98:
            *(_QWORD *)a4 = v26;
            a4[6] = v24;
            *((_QWORD *)a4 + 2) = v25;
            return result;
          }
          return llvm::ConstantRange::getEmpty(a2, a4);
        }
        return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, a2);
      }
      if ((int)llvm::APInt::compare(v10, v8) <= 0)
        return llvm::ConstantRange::getEmpty(a2, a4);
      result = (llvm::APInt *)llvm::APInt::compare(v10, (llvm::APInt *)((char *)v8 + 16));
      if ((result & 0x80000000) != 0)
      {
        v50 = v7;
        if (v7 > 0x40)
          result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)&v49, (const void **)v8);
        else
          v49 = *(_QWORD *)v8;
        v24 = *((_DWORD *)a2 + 6);
        v48 = v24;
        if (v24 >= 0x41)
        {
          result = (llvm::APInt *)llvm::APInt::initSlowCase((llvm::APInt *)v47, (const void **)v10);
          v24 = v48;
          v10 = (const llvm::APInt *)v47;
        }
        v25 = *(_QWORD *)v10;
        a4[2] = v50;
        v26 = v49;
        goto LABEL_98;
      }
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v8);
    }
  }
  if (!llvm::APInt::equalSlowCase((const void **)a2, (const void **)v10)
    || llvm::APInt::countTrailingOnesSlowCase(a2) != v9)
  {
    goto LABEL_23;
  }
LABEL_38:
  a4[2] = v7;
  if (v7 > 0x40)
  {
LABEL_60:
    llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)v8);
    result = (llvm::APInt *)(a4 + 4);
    v23 = *((_DWORD *)v8 + 6);
    a4[6] = v23;
    if (v23 > 0x40)
      goto LABEL_61;
LABEL_43:
    v19 = *(_QWORD *)v11;
    goto LABEL_44;
  }
LABEL_42:
  *(_QWORD *)a4 = *(_QWORD *)v8;
  result = (llvm::APInt *)(a4 + 4);
  v20 = *((_DWORD *)v8 + 6);
  a4[6] = v20;
  if (v20 <= 0x40)
    goto LABEL_43;
LABEL_61:
  v22 = (const void **)((char *)v8 + 16);
  return (llvm::APInt *)llvm::APInt::initSlowCase(result, v22);
}

uint64_t llvm::ConstantRange::isSizeStrictlySmallerThan(llvm::ConstantRange *this, const llvm::ConstantRange *a2)
{
  const void **v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  void *__p;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;

  v4 = (const void **)((char *)this + 16);
  v5 = *((_DWORD *)this + 2);
  if (v5 > 0x40)
  {
    if (llvm::APInt::equalSlowCase((const void **)this, (const void **)this + 2)
      && llvm::APInt::countTrailingOnesSlowCase(this) == v5)
    {
      return 0;
    }
  }
  else if (*(_QWORD *)this == *((_QWORD *)this + 2) && (!v5 || *(_QWORD *)this == 0xFFFFFFFFFFFFFFFFLL >> -(char)v5))
  {
    return 0;
  }
  v7 = *((_DWORD *)a2 + 2);
  if (v7 > 0x40)
  {
    if (llvm::APInt::equalSlowCase((const void **)a2, (const void **)a2 + 2)
      && llvm::APInt::countTrailingOnesSlowCase(a2) == v7)
    {
      return 1;
    }
  }
  else if (*(_QWORD *)a2 == *((_QWORD *)a2 + 2) && (!v7 || *(_QWORD *)a2 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v7))
  {
    return 1;
  }
  v17 = *((_DWORD *)this + 6);
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, v4);
  else
    v16 = (void *)*v4;
  llvm::APInt::operator-=((uint64_t)&v16, (_QWORD **)this);
  v19 = v17;
  v18 = v16;
  v17 = 0;
  v13 = *((_DWORD *)a2 + 6);
  if (v13 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)a2 + 2);
  else
    __p = (void *)*((_QWORD *)a2 + 2);
  llvm::APInt::operator-=((uint64_t)&__p, (_QWORD **)a2);
  v8 = v13;
  v15 = v13;
  v9 = __p;
  v14 = __p;
  v13 = 0;
  v10 = llvm::APInt::compare((llvm::APInt *)&v18, (const llvm::APInt *)&v14);
  if (v8 >= 0x41)
  {
    if (v9)
    {
      operator delete[](v9);
      if (v13 >= 0x41)
      {
        if (__p)
          operator delete[](__p);
      }
    }
  }
  if (v19 >= 0x41 && v18)
    operator delete[](v18);
  v6 = v10 >> 31;
  if (v17 >= 0x41 && v16)
    operator delete[](v16);
  return v6;
}

llvm::APInt *llvm::ConstantRange::getEmpty@<X0>(llvm::ConstantRange *this@<X0>, unsigned int *a2@<X8>)
{
  unsigned int v3;
  llvm::APInt *result;
  unsigned int v5;

  v3 = *((_DWORD *)this + 2);
  a2[2] = v3;
  if (v3 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a2, 0, 0);
    v5 = a2[2];
    result = (llvm::APInt *)(a2 + 4);
    a2[6] = v5;
    if (v5 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, (const void **)a2);
    else
      *(_QWORD *)result = *(_QWORD *)a2;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    result = (llvm::APInt *)(a2 + 4);
    a2[6] = v3;
    *((_QWORD *)a2 + 2) = 0;
  }
  return result;
}

llvm::APInt *getPreferredRange(_DWORD *a1, llvm::ConstantRange *this, llvm::ConstantRange *a3, int a4)
{
  const void **v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  llvm::APInt *result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  const void **v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  const void *v28;
  unsigned int v29;

  if (a4 == 2)
  {
    v7 = (const void **)((char *)this + 16);
    v10 = llvm::APInt::compareSigned(this, (llvm::ConstantRange *)((char *)this + 16));
    if (v10 >= 1)
    {
      v11 = *((_DWORD *)this + 6);
      if (v11 > 0x40)
      {
        if (((*((_QWORD *)*v7 + ((v11 - 1) >> 6)) >> (v11 - 1)) & 1) == 0
          || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2) != v11 - 1)
        {
          goto LABEL_41;
        }
      }
      else if (*v7 != (const void *)(1 << (v11 - 1)))
      {
LABEL_36:
        if (*v7 == (const void *)(1 << (v11 - 1)))
          goto LABEL_57;
        goto LABEL_43;
      }
    }
    v13 = (_QWORD *)((char *)a3 + 16);
    if ((int)llvm::APInt::compareSigned(a3, (llvm::ConstantRange *)((char *)a3 + 16)) >= 1)
    {
      v14 = *((_DWORD *)a3 + 6);
      if (v14 > 0x40)
      {
        if (((*(_QWORD *)(*v13 + 8 * ((v14 - 1) >> 6)) >> (v14 - 1)) & 1) == 0
          || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a3 + 2) != v14 - 1)
        {
          goto LABEL_38;
        }
      }
      else if (*v13 != 1 << (v14 - 1))
      {
        goto LABEL_38;
      }
    }
    if (v10 < 1)
      goto LABEL_57;
    v11 = *((_DWORD *)this + 6);
    if (v11 <= 0x40)
      goto LABEL_36;
LABEL_41:
    if (((*((_QWORD *)*v7 + ((v11 - 1) >> 6)) >> (v11 - 1)) & 1) != 0
      && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2) == v11 - 1)
    {
      goto LABEL_57;
    }
LABEL_43:
    v7 = (const void **)((char *)a3 + 16);
    if ((int)llvm::APInt::compareSigned(a3, (llvm::ConstantRange *)((char *)a3 + 16)) >= 1)
    {
      v19 = *((_DWORD *)a3 + 6);
      if (v19 > 0x40)
      {
        if (((*((_QWORD *)*v7 + ((v19 - 1) >> 6)) >> (v19 - 1)) & 1) == 0
          || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a3 + 2) != v19 - 1)
        {
          goto LABEL_57;
        }
      }
      else if (*v7 != (const void *)(1 << (v19 - 1)))
      {
        goto LABEL_57;
      }
    }
    goto LABEL_54;
  }
  if (a4 != 1)
    goto LABEL_57;
  v7 = (const void **)((char *)this + 16);
  v8 = llvm::APInt::compare(this, (llvm::ConstantRange *)((char *)this + 16));
  if (v8 < 1)
    goto LABEL_12;
  v9 = *((_DWORD *)this + 6);
  if (v9 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)this + 16)) != v9)
      goto LABEL_27;
LABEL_12:
    if ((int)llvm::APInt::compare(a3, (llvm::ConstantRange *)((char *)a3 + 16)) < 1)
      goto LABEL_23;
    v12 = *((_DWORD *)a3 + 6);
    if (v12 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)a3 + 16)) == v12)
        goto LABEL_23;
    }
    else if (!*((_QWORD *)a3 + 2))
    {
LABEL_23:
      if (v8 < 1)
        goto LABEL_57;
      v9 = *((_DWORD *)this + 6);
      if (v9 <= 0x40)
      {
        if (!*v7)
          goto LABEL_57;
        goto LABEL_28;
      }
LABEL_27:
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)this + 16)) == v9)
        goto LABEL_57;
      goto LABEL_28;
    }
LABEL_38:
    v16 = *((_DWORD *)this + 2);
    a1[2] = v16;
    if (v16 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a1, (const void **)this);
      result = (llvm::APInt *)(a1 + 4);
      v20 = *((_DWORD *)this + 6);
      a1[6] = v20;
      if (v20 > 0x40)
        goto LABEL_48;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)this;
      result = (llvm::APInt *)(a1 + 4);
      v18 = *((_DWORD *)this + 6);
      a1[6] = v18;
      if (v18 > 0x40)
        goto LABEL_48;
    }
    goto LABEL_69;
  }
  if (!*v7)
    goto LABEL_12;
LABEL_28:
  v7 = (const void **)((char *)a3 + 16);
  if ((int)llvm::APInt::compare(a3, (llvm::ConstantRange *)((char *)a3 + 16)) < 1)
    goto LABEL_54;
  v15 = *((_DWORD *)a3 + 6);
  if (v15 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)a3 + 16)) != v15)
      goto LABEL_57;
    goto LABEL_54;
  }
  if (!*v7)
  {
LABEL_54:
    v22 = *((_DWORD *)a3 + 2);
    a1[2] = v22;
    if (v22 <= 0x40)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      result = (llvm::APInt *)(a1 + 4);
      v23 = *((_DWORD *)a3 + 6);
      a1[6] = v23;
      if (v23 <= 0x40)
        goto LABEL_69;
LABEL_48:
      v21 = v7;
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v21);
    }
    llvm::APInt::initSlowCase((llvm::APInt *)a1, (const void **)a3);
    result = (llvm::APInt *)(a1 + 4);
    v29 = *((_DWORD *)a3 + 6);
    a1[6] = v29;
    if (v29 > 0x40)
      goto LABEL_48;
LABEL_69:
    v28 = *v7;
    goto LABEL_70;
  }
LABEL_57:
  if (llvm::ConstantRange::isSizeStrictlySmallerThan(this, a3))
  {
    v24 = *((_DWORD *)this + 2);
    a1[2] = v24;
    if (v24 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a1, (const void **)this);
    else
      *(_QWORD *)a1 = *(_QWORD *)this;
    result = (llvm::APInt *)(a1 + 4);
    v21 = (const void **)((char *)this + 16);
    v26 = *((_DWORD *)this + 6);
    a1[6] = v26;
    if (v26 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v21);
  }
  else
  {
    v25 = *((_DWORD *)a3 + 2);
    a1[2] = v25;
    if (v25 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a1, (const void **)a3);
    else
      *(_QWORD *)a1 = *(_QWORD *)a3;
    result = (llvm::APInt *)(a1 + 4);
    v21 = (const void **)((char *)a3 + 16);
    v27 = *((_DWORD *)a3 + 6);
    a1[6] = v27;
    if (v27 > 0x40)
      return (llvm::APInt *)llvm::APInt::initSlowCase(result, v21);
  }
  v28 = *v21;
LABEL_70:
  *(_QWORD *)result = v28;
  return result;
}

void llvm::Constant::getSplatValue(llvm::Constant *this, Type *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v20;

  switch(*((_BYTE *)this + 16))
  {
    case 5:
      if (*((_WORD *)this + 9) != 63)
        return;
      v3 = (uint64_t *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      if (*(unsigned __int8 *)(v3[4] + 16) - 11 > 1)
        return;
      v4 = *v3;
      if (!v4 || *(_BYTE *)(v4 + 16) != 5)
        return;
      if (*(_WORD *)(v4 + 18) != 62)
        return;
      v6 = (_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
      if (*(unsigned __int8 *)(*v6 + 16) - 11 > 1)
        return;
      v7 = v6[8];
      if (!v7 || *(_BYTE *)(v7 + 16) != 16)
        return;
      v9 = (_DWORD *)*((_QWORD *)this + 3);
      v10 = *((unsigned int *)this + 8);
      v11 = (_QWORD *)(v7 + 24);
      v12 = *(_DWORD *)(v7 + 32);
      if (v12 < 0x41)
        goto LABEL_19;
      if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v7 + 24)) <= 0x40)
      {
        v11 = (_QWORD *)*v11;
LABEL_19:
        if (!*v11 && (_DWORD)v10)
        {
          v13 = 4 * v10;
          do
          {
            if (*v9)
              break;
            ++v9;
            v13 -= 4;
          }
          while (v13);
        }
      }
      return;
    case 0xA:
      v14 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      v15 = *((_QWORD *)this - 4 * v14);
      if (v14 >= 2)
      {
        v16 = -32 * v14;
        v17 = (char *)this + 32;
        if ((a2 & 1) != 0)
        {
          while (1)
          {
            v18 = *(_QWORD *)&v17[v16];
            if (v18 == v15 || *(unsigned __int8 *)(v18 + 16) - 11 < 2)
            {
              v18 = v15;
            }
            else if (*(unsigned __int8 *)(v15 + 16) - 11 > 1)
            {
              return;
            }
            v16 += 32;
            v15 = v18;
            if (v16 == -32)
              return;
          }
        }
        do
        {
          if (*(_QWORD *)&v17[v16] != v15)
            break;
          v16 += 32;
        }
        while (v16 != -32);
      }
      return;
    case 0xD:
      llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)this + 24), a2);
      return;
    case 0xF:
      v19 = *((_BYTE *)this + 40);
      if ((v19 & 1) == 0)
      {
        *((_BYTE *)this + 40) = v19 | 1;
        if (llvm::ConstantDataVector::isSplatData(this))
          v20 = 2;
        else
          v20 = 0;
        v19 = *((_BYTE *)this + 40) & 0xFD | v20;
        *((_BYTE *)this + 40) = v19;
      }
      if ((v19 & 2) != 0)
        llvm::ConstantDataSequential::getElementAsConstant(this);
      return;
    default:
      return;
  }
}

uint64_t llvm::Constant::isNullValue(llvm::Constant *this)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v4;
  unsigned int v5;

  v1 = *((unsigned __int8 *)this + 16);
  if (this && v1 == 16)
  {
    v2 = *((_DWORD *)this + 8);
    if (v2 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)this + 24)) == v2;
    else
      return *((_QWORD *)this + 3) == 0;
  }
  else if (this && v1 == 17)
  {
    return llvm::ConstantFP::isExactlyValue(this, 0.0);
  }
  else
  {
    v4 = v1 > 0x14;
    v5 = (0x1C2000u >> v1) & 1;
    if (v4)
      return 0;
    else
      return v5;
  }
}

uint64_t llvm::Constant::isZeroValue(llvm::Constant *this)
{
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  llvm::APInt *v8;
  unsigned int v9;

  if (this && *((_BYTE *)this + 16) == 17)
  {
    v2 = (void *)*((_QWORD *)this + 4);
    if (llvm::APFloatBase::PPCDoubleDouble(this) == v2)
      v3 = (char *)*((_QWORD *)this + 5);
    else
      v3 = (char *)this + 24;
    return (v3[28] & 7) == 3;
  }
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
  {
    llvm::Constant::getSplatValue(this, 0);
    if (v4)
    {
      v5 = v4;
      if (*(_BYTE *)(v4 + 16) == 17)
      {
        v6 = *(void **)(v4 + 32);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v4) == v6)
          v3 = *(char **)(v5 + 40);
        else
          v3 = (char *)(v5 + 24);
        return (v3[28] & 7) == 3;
      }
    }
  }
  result = 1;
  switch(*((_BYTE *)this + 16))
  {
    case 0xD:
    case 0x12:
    case 0x13:
    case 0x14:
      return result;
    case 0x10:
      v8 = (llvm::Constant *)((char *)this + 24);
      v9 = *((_DWORD *)this + 8);
      if (v9 > 0x40)
        result = llvm::APInt::countLeadingZerosSlowCase(v8) == v9;
      else
        result = *(_QWORD *)v8 == 0;
      break;
    case 0x11:
      result = llvm::ConstantFP::isExactlyValue(this, 0.0);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t llvm::ConstantFP::isExactlyValue(llvm::ConstantFP *this, double a2)
{
  llvm::APFloatBase *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  llvm::APFloatBase *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t IsEqual;
  char v13;
  _BYTE v14[24];
  char v15[8];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v3 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v14, a2);
  v4 = llvm::APFloatBase::IEEEdouble(v3);
  llvm::APFloat::Storage::Storage(v16, v14, v4);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
  v6 = (void *)*((_QWORD *)this + 4);
  v5 = (llvm::ConstantFP *)((char *)this + 32);
  v7 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)v15, v6, 1, &v13);
  v8 = *(void **)v5;
  v9 = (void *)v16[0];
  v10 = llvm::APFloatBase::PPCDoubleDouble(v7);
  IsEqual = 0;
  if (v8 == v9)
  {
    if (v10 == v8)
    {
      IsEqual = llvm::detail::DoubleAPFloat::bitwiseIsEqual(v5, (const llvm::detail::DoubleAPFloat *)v16);
      if (v10 != (void *)v16[0])
        goto LABEL_3;
    }
    else
    {
      IsEqual = llvm::detail::IEEEFloat::bitwiseIsEqual(v5, (const llvm::detail::IEEEFloat *)v16);
      if (v10 != (void *)v16[0])
        goto LABEL_3;
    }
LABEL_9:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
    return IsEqual;
  }
  if (v10 == (void *)v16[0])
    goto LABEL_9;
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
  return IsEqual;
}

BOOL llvm::Constant::isAllOnesValue(llvm::Constant *this)
{
  unint64_t v1;
  int v2;
  uint64_t v4;
  llvm::APInt *v5;
  void *v6;
  uint64_t v7;
  llvm::detail::DoubleAPFloat *v8;
  void *v9;
  uint64_t v10;
  void *__p;
  unsigned int v12;

  v1 = (unint64_t)this;
  while (1)
  {
    v2 = *(unsigned __int8 *)(v1 + 16);
    if (v1 && v2 == 16)
    {
      v4 = *(unsigned int *)(v1 + 32);
      if (!(_DWORD)v4)
        return 1;
      v5 = (llvm::APInt *)(v1 + 24);
      if (v4 > 0x40)
        return llvm::APInt::countTrailingOnesSlowCase(v5) == (_DWORD)v4;
      v6 = *(void **)v5;
      v7 = -v4;
      return v6 == (void *)(0xFFFFFFFFFFFFFFFFLL >> v7);
    }
    if (v1 && v2 == 17)
      break;
    if ((*(_DWORD *)(*(_QWORD *)v1 + 8) & 0xFE) != 0x12)
      return 0;
    this = (llvm::Constant *)llvm::Constant::getSplatValue((llvm::Constant *)v1, 0);
    v1 = (unint64_t)this;
    if (!this)
      return v1;
  }
  v9 = *(void **)(v1 + 32);
  v8 = (llvm::detail::DoubleAPFloat *)(v1 + 32);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v9)
  {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v8, (llvm::APInt *)&__p);
    v10 = v12;
    if (!v12)
      return 1;
LABEL_14:
    if (v10 > 0x40)
    {
      v1 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__p) == (_DWORD)v10;
      if (!__p)
        return v1;
      operator delete[](__p);
      return v1;
    }
    v6 = __p;
    v7 = -v10;
    return v6 == (void *)(0xFFFFFFFFFFFFFFFFLL >> v7);
  }
  llvm::detail::IEEEFloat::bitcastToAPInt(v8, (uint64_t)&__p);
  v10 = v12;
  if (v12)
    goto LABEL_14;
  return 1;
}

llvm::APFloatBase *llvm::Constant::getAggregateElement(llvm::Constant *this, Type *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  llvm::Constant *v8;
  llvm::PoisonValue *v10;
  llvm::UndefValue *v11;

  v2 = *((unsigned __int8 *)this + 16);
  if (this && (v2 - 11) >= 0xFDu)
  {
    v3 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if (v3 > a2)
      return (llvm::APFloatBase *)*((_QWORD *)this + 4 * a2 + -4 * v3);
    return 0;
  }
  v5 = *(_QWORD *)this;
  v6 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  if (this && v2 == 13)
  {
    if (v5 && v6 == 17)
    {
      if (*(_DWORD *)(v5 + 32) > a2)
        goto LABEL_27;
    }
    else if (v5 && (v6 & 0xFE) == 0x12)
    {
      if (*(_DWORD *)(v5 + 32) > a2)
        goto LABEL_27;
    }
    else if (*(_DWORD *)(v5 + 12) > a2)
    {
LABEL_27:
      if (v6 == 17 || (v6 & 0xFE) == 18)
        v8 = *(llvm::Constant **)(v5 + 24);
      else
        v8 = *(llvm::Constant **)(*(_QWORD *)(v5 + 16) + 8 * a2);
      return (llvm::APFloatBase *)llvm::Constant::getNullValue(v8, a2);
    }
    return 0;
  }
  if (v6 == 19)
    return 0;
  if (v2 == 12)
  {
    if (v6 == 17 || (v6 & 0xFE) == 0x12)
    {
      if (*(_DWORD *)(v5 + 32) <= a2)
        return 0;
    }
    else if (*(_DWORD *)(v5 + 12) <= a2)
    {
      return 0;
    }
    if (v6 == 17 || (v6 & 0xFE) == 18)
      v10 = *(llvm::PoisonValue **)(v5 + 24);
    else
      v10 = *(llvm::PoisonValue **)(*(_QWORD *)(v5 + 16) + 8 * a2);
    return (llvm::APFloatBase *)llvm::PoisonValue::get(v10, (llvm::Type *)a2);
  }
  else
  {
    if ((v2 - 11) > 1u)
    {
      if ((v2 & 0xFE) == 0xE && *(_DWORD *)(v5 + 32) > a2)
        return llvm::ConstantDataSequential::getElementAsConstant(this);
      return 0;
    }
    if (v6 == 17 || (v6 & 0xFE) == 0x12)
    {
      if (*(_DWORD *)(v5 + 32) <= a2)
        return 0;
    }
    else if (*(_DWORD *)(v5 + 12) <= a2)
    {
      return 0;
    }
    if (v6 == 17 || (v6 & 0xFE) == 0x12)
      v11 = *(llvm::UndefValue **)(v5 + 24);
    else
      v11 = *(llvm::UndefValue **)(*(_QWORD *)(v5 + 16) + 8 * a2);
    return (llvm::APFloatBase *)llvm::UndefValue::get(v11, (llvm::Type *)a2);
  }
}

llvm::Constant **llvm::ConstantExpr::getBitCast(llvm::Constant **this, llvm::Constant *a2, llvm::Type *a3, llvm::Type *a4)
{
  llvm::Constant **v5;
  char v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Constant **v14;

  v5 = this;
  if (*this != a2)
  {
    v6 = (char)a3;
    v14 = this;
    v5 = (llvm::Constant **)llvm::ConstantFoldCastInstruction((llvm *)0x31, this, a2, a4);
    if (!v5 && (v6 & 1) == 0)
    {
      v7 = **(_QWORD **)a2 + 1544;
      LODWORD(v9) = 49;
      *((_QWORD *)&v9 + 1) = &v14;
      v10 = 1;
      v12 = 0;
      v13 = 0;
      v11 = 0;
      return (llvm::Constant **)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v7, a2, &v9);
    }
  }
  return v5;
}

llvm::APFloatBase *llvm::ConstantExpr::getICmp(llvm::ConstantExpr *this, mlir::BytecodeWriterConfig *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  __int16 v7;
  llvm::APFloatBase *result;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v10;
  llvm::ScalableVectorType *Int1Ty;
  llvm::Type *v12;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v4 = (char)a4;
  v7 = (__int16)this;
  v21[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldCompareInstruction(this, a2, (unsigned __int8 *)a3);
  if (!result && (v4 & 1) == 0)
  {
    v21[0] = a2;
    v21[1] = a3;
    DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
    Int1Ty = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(DesiredBytecodeVersion, v10);
    v12 = Int1Ty;
    v13 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
      {
        llvm::VectorType::get(Int1Ty, (llvm::Type *)(*(unsigned int *)(v13 + 32) | ((unint64_t)(*(_DWORD *)(v13 + 8) == 19) << 32)));
        v12 = v14;
        v13 = *(_QWORD *)a2;
      }
    }
    v15 = **(_QWORD **)v13 + 1544;
    LOWORD(v16) = 53;
    WORD1(v16) = v7;
    *((_QWORD *)&v16 + 1) = v21;
    v17 = 2;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    return (llvm::APFloatBase *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v15, v12, &v16);
  }
  return result;
}

uint64_t llvm::Constant::containsPoisonElement(llvm::Constant *this)
{
  BOOL v1;
  int v4;
  int v6;
  Type *v7;
  llvm::APFloatBase *AggregateElement;

  if (*(_QWORD *)this)
    v1 = (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18;
  else
    v1 = 0;
  if (!v1)
    return 0;
  v4 = *((unsigned __int8 *)this + 16);
  if (v4 == 12)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 19 || v4 == 13)
    return 0;
  v6 = *(_DWORD *)(*(_QWORD *)this + 32);
  if (!v6)
    return 0;
  v7 = 0;
  while (1)
  {
    AggregateElement = llvm::Constant::getAggregateElement(this, v7);
    if (AggregateElement)
    {
      if (*((_BYTE *)AggregateElement + 16) == 12)
        break;
    }
    v7 = (Type *)((_DWORD)v7 + 1);
    if (v6 == (_DWORD)v7)
      return 0;
  }
  return 1;
}

BOOL llvm::Constant::containsConstantExpression(llvm::Constant *this)
{
  BOOL v1;
  _BOOL8 result;
  int v3;
  Type *v5;
  int v6;
  int v7;
  BOOL v8;

  if (*(_QWORD *)this)
    v1 = *(_BYTE *)(*(_QWORD *)this + 8) == 18;
  else
    v1 = 0;
  if (!v1)
    return 0;
  v3 = *(_DWORD *)(*(_QWORD *)this + 32);
  if (!v3)
    return 0;
  v5 = 0;
  v6 = v3 - 1;
  do
  {
    v7 = *((unsigned __int8 *)llvm::Constant::getAggregateElement(this, v5) + 16);
    result = v7 == 5;
    v8 = v7 == 5 || v6 == (_DWORD)v5;
    v5 = (Type *)((_DWORD)v5 + 1);
  }
  while (!v8);
  return result;
}

void llvm::Constant::getNullValue(llvm::Constant *this, Type *a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_180CB9DD8(llvm::Type *a1)
{
  llvm::ConstantFP *v1;
  llvm::APFloatBase *FltSemantics;
  llvm::APFloatBase *v3;
  llvm::detail::IEEEFloat *v4;
  const llvm::APFloat *v5;
  _QWORD *v6;
  uint64_t v8;
  _QWORD v9[46];

  v1 = *(llvm::ConstantFP **)a1;
  FltSemantics = (llvm::APFloatBase *)llvm::Type::getFltSemantics(a1);
  v3 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FltSemantics);
  if (v3 == FltSemantics)
  {
    v4 = (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, (uint64_t)FltSemantics);
    if (v3 != (llvm::APFloatBase *)v9[0])
      goto LABEL_3;
  }
  else
  {
    v4 = (llvm::detail::IEEEFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)FltSemantics);
    if (v3 != (llvm::APFloatBase *)v9[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::makeZero(v4, 0);
      goto LABEL_6;
    }
  }
  llvm::detail::DoubleAPFloat::makeZero((llvm::APFloat ***)v4, 0);
LABEL_6:
  v6 = llvm::ConstantFP::get(v1, (llvm::LLVMContext *)&v8, v5);
  if (v3 == (llvm::APFloatBase *)v9[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v9);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v9);
  return v6;
}

_QWORD *llvm::ConstantInt::get(llvm::ConstantInt *this, uint64_t a2, const llvm::APInt *a3)
{
  unsigned int v4;
  llvm::ConstantInt *v5;
  llvm::ConstantInt *v6;
  unint64_t v7;
  llvm::Constant *v8;
  _QWORD *v9;
  void *__p;
  unsigned int v12;

  v4 = *((_DWORD *)this + 2);
  v5 = this;
  if ((v4 & 0xFE) == 0x12)
  {
    v5 = (llvm::ConstantInt *)**((_QWORD **)this + 2);
    v4 = *((_DWORD *)v5 + 2);
  }
  v6 = *(llvm::ConstantInt **)v5;
  v12 = v4 >> 8;
  if (v4 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, a2, (int)a3);
  }
  else
  {
    if (v4 >= 0x100)
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v4);
    else
      v7 = 0;
    __p = (void *)(v7 & a2);
  }
  v9 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&__p, a3);
  if (v12 >= 0x41 && __p)
    operator delete[](__p);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    return (_QWORD *)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (unint64_t)v9, v8);
  return v9;
}

_QWORD *llvm::ConstantFP::get(llvm::ConstantFP *this, llvm::LLVMContext *a2, const llvm::APFloat *a3)
{
  llvm::APFloatBase *v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  const llvm::detail::DoubleAPFloat *v9;
  void *v10;
  llvm::Type *FloatingPointTy;
  _DWORD *v12;
  llvm::detail::DoubleAPFloat *v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  llvm::detail::DoubleAPFloat *v17;
  llvm::Value *v18;
  llvm::Use *v19;
  uint64_t v21;

  v5 = (llvm::APFloatBase *)(*(_QWORD *)this + 240);
  v21 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>(v5, a2, &v21);
  v7 = v21;
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD **)(v21 + 32);
    if (v8)
      return v8;
  }
  else
  {
    v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::InsertIntoBucketImpl<llvm::APFloat>((unsigned int *)v5, (uint64_t)a2, a2, v21);
    llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v7 + 8), (uint64_t *)a2 + 1);
    *(_QWORD *)(v7 + 32) = 0;
  }
  v10 = (void *)*((_QWORD *)a2 + 1);
  v9 = (llvm::LLVMContext *)((char *)a2 + 8);
  FloatingPointTy = (llvm::Type *)llvm::Type::getFloatingPointTy(this, v10);
  v8 = llvm::User::operator new((llvm::User *)0x38, 0);
  v12 = (_DWORD *)llvm::Value::Value((uint64_t)v8, FloatingPointTy, 17);
  v12[5] &= 0xF8000000;
  v13 = (llvm::detail::DoubleAPFloat *)(v12 + 8);
  v14 = *(void **)v9;
  v15 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v12);
  if (v15 == v14)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v9);
    v16 = *(_QWORD **)(v7 + 32);
    *(_QWORD *)(v7 + 32) = v8;
    if (!v16)
      return v8;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat(v13, v9);
    v16 = *(_QWORD **)(v7 + 32);
    *(_QWORD *)(v7 + 32) = v8;
    if (!v16)
      return v8;
  }
  v17 = (llvm::detail::DoubleAPFloat *)(v16 + 4);
  if (v15 == (void *)v16[4])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v17);
  else
    llvm::detail::IEEEFloat::~IEEEFloat(v17);
  llvm::Value::~Value((llvm::Value *)v16, v18);
  llvm::User::operator delete(v19);
  return *(_QWORD **)(v7 + 32);
}

uint64_t llvm::ConstantPointerNull::get(llvm::ConstantPointerNull *this, llvm::PointerType *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  llvm::ConstantPointerNull *v8;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t result;
  _QWORD *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Use *v18;
  llvm::Type *v19;

  v19 = this;
  v2 = **(_QWORD **)this;
  v3 = *(_DWORD *)(v2 + 1368);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 1352);
    v5 = v3 - 1;
    v6 = v5 & ((this >> 4) ^ (this >> 9));
    v7 = (uint64_t *)(v4 + 16 * v6);
    v8 = (llvm::ConstantPointerNull *)*v7;
    if ((llvm::ConstantPointerNull *)*v7 == this)
      goto LABEL_14;
    v9 = 0;
    v10 = 1;
    while (v8 != (llvm::ConstantPointerNull *)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == (llvm::ConstantPointerNull *)-8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (uint64_t *)(v4 + 16 * v6);
      v8 = (llvm::ConstantPointerNull *)*v7;
      if ((llvm::ConstantPointerNull *)*v7 == this)
        goto LABEL_14;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
  }
  else
  {
    v13 = 0;
  }
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucket<llvm::Type * const&>(v2 + 1352, v13, (uint64_t *)&v19);
LABEL_14:
  result = v7[1];
  if (!result)
  {
    v15 = llvm::User::operator new((llvm::User *)0x18, 0);
    result = llvm::Value::Value((uint64_t)v15, v19, 19);
    *(_DWORD *)(result + 20) &= 0xF8000000;
    v17 = (llvm::Value *)v7[1];
    v7[1] = result;
    if (v17)
    {
      llvm::Value::~Value(v17, v16);
      llvm::User::operator delete(v18);
      return v7[1];
    }
  }
  return result;
}

uint64_t llvm::ConstantAggregateZero::get(llvm::ConstantAggregateZero *this, llvm::Type *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  llvm::ConstantAggregateZero *v8;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t result;
  _QWORD *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Use *v18;
  llvm::Type *v19;

  v19 = this;
  v2 = **(_QWORD **)this;
  v3 = *(_DWORD *)(v2 + 1272);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 1256);
    v5 = v3 - 1;
    v6 = v5 & ((this >> 4) ^ (this >> 9));
    v7 = (uint64_t *)(v4 + 16 * v6);
    v8 = (llvm::ConstantAggregateZero *)*v7;
    if ((llvm::ConstantAggregateZero *)*v7 == this)
      goto LABEL_14;
    v9 = 0;
    v10 = 1;
    while (v8 != (llvm::ConstantAggregateZero *)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == (llvm::ConstantAggregateZero *)-8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (uint64_t *)(v4 + 16 * v6);
      v8 = (llvm::ConstantAggregateZero *)*v7;
      if ((llvm::ConstantAggregateZero *)*v7 == this)
        goto LABEL_14;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
  }
  else
  {
    v13 = 0;
  }
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucket<llvm::Type * const&>(v2 + 1256, v13, (uint64_t *)&v19);
LABEL_14:
  result = v7[1];
  if (!result)
  {
    v15 = llvm::User::operator new((llvm::User *)0x18, 0);
    result = llvm::Value::Value((uint64_t)v15, v19, 13);
    *(_DWORD *)(result + 20) &= 0xF8000000;
    v17 = (llvm::Value *)v7[1];
    v7[1] = result;
    if (v17)
    {
      llvm::Value::~Value(v17, v16);
      llvm::User::operator delete(v18);
      return v7[1];
    }
  }
  return result;
}

_QWORD *llvm::ConstantTokenNone::get(llvm::ConstantTokenNone *this, llvm::LLVMContext *a2)
{
  uint64_t v2;
  _QWORD *v3;
  llvm::LLVMContext *v6;
  llvm::Type *TokenTy;
  llvm::Value *v8;
  llvm::Value *v9;
  llvm::Use *v10;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD **)(*(_QWORD *)this + 2064);
  if (v3)
    return v3;
  v3 = llvm::User::operator new((llvm::User *)0x18, 0);
  TokenTy = (llvm::Type *)llvm::Type::getTokenTy(this, v6);
  llvm::Value::Value((uint64_t)v3, TokenTy, 20);
  *((_DWORD *)v3 + 5) &= 0xF8000000;
  v9 = *(llvm::Value **)(v2 + 2064);
  *(_QWORD *)(v2 + 2064) = v3;
  if (!v9)
    return v3;
  llvm::Value::~Value(v9, v8);
  llvm::User::operator delete(v10);
  return *(_QWORD **)(v2 + 2064);
}

uint64_t llvm::ConstantTargetNone::get(llvm::Type *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t result;
  _QWORD *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Use *v17;
  llvm::Type *v18;

  v18 = a1;
  v1 = **(_QWORD **)a1;
  v2 = *(_DWORD *)(v1 + 1392);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 1376);
    v4 = v2 - 1;
    v5 = v4 & ((a1 >> 4) ^ (a1 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if ((llvm::Type *)*v6 == a1)
      goto LABEL_14;
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (uint64_t *)(v3 + 16 * v5);
      v7 = *v6;
      if ((llvm::Type *)*v6 == a1)
        goto LABEL_14;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
  }
  else
  {
    v12 = 0;
  }
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucket<llvm::Type * const&>(v1 + 1376, v12, (uint64_t *)&v18);
LABEL_14:
  result = v6[1];
  if (!result)
  {
    v14 = llvm::User::operator new((llvm::User *)0x18, 0);
    result = llvm::Value::Value((uint64_t)v14, v18, 18);
    *(_DWORD *)(result + 20) &= 0xF8000000;
    v16 = (llvm::Value *)v6[1];
    v6[1] = result;
    if (v16)
    {
      llvm::Value::~Value(v16, v15);
      llvm::User::operator delete(v17);
      return v6[1];
    }
  }
  return result;
}

_QWORD *llvm::ConstantInt::get(llvm::ConstantInt *this, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  char *inserted;
  int v14;
  char *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  char *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int *v35;
  char *v36;
  _QWORD *v37;
  llvm::Type *v38;
  uint64_t v39;
  llvm::Value *v40;
  llvm::APInt *v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  llvm::Use *v45;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;

  v5 = *(_QWORD **)this;
  v6 = *((_DWORD *)a2 + 2);
  if (v6 > 0x40)
  {
    v19 = llvm::APInt::countLeadingZerosSlowCase(a2);
    if (v19 != v6)
    {
      if (v19 == v6 - 1)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)a2 == 1)
    {
LABEL_4:
      v9 = v5[24];
      v8 = (uint64_t)(v5 + 24);
      v7 = v9;
      v47 = v6;
      v10 = *(_DWORD *)(v8 + 16);
      if (v10)
      {
        v11 = v10 - 1;
        v12 = v11 & (37 * v6);
        inserted = (char *)(v7 + 16 * v12);
        v14 = *(_DWORD *)inserted;
        if (v6 == *(_DWORD *)inserted)
          goto LABEL_37;
        v15 = 0;
        v16 = 1;
        while (v14 != -1)
        {
          if (v15)
            v17 = 0;
          else
            v17 = v14 == -2;
          if (v17)
            v15 = inserted;
          v18 = v12 + v16++;
          v12 = v18 & v11;
          inserted = (char *)(v7 + 16 * v12);
          v14 = *(_DWORD *)inserted;
          if (v6 == *(_DWORD *)inserted)
            goto LABEL_37;
        }
        if (v15)
          v34 = v15;
        else
          v34 = inserted;
      }
      else
      {
        v34 = 0;
      }
      v35 = &v47;
      goto LABEL_36;
    }
LABEL_28:
    v30 = (uint64_t)(v5 + 27);
    v49 = 0;
    v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>(v5 + 27, a2, &v49);
    v32 = v49;
    if ((v31 & 1) == 0)
    {
      v33 = llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<llvm::APInt>(v30, (uint64_t)a2, a2, v49);
      v32 = v33;
      if (*(_DWORD *)(v33 + 8) > 0x40u || *((_DWORD *)a2 + 2) > 0x40u)
      {
        llvm::APInt::assignSlowCase((const void **)v33, (const void **)a2);
      }
      else
      {
        *(_QWORD *)v33 = *(_QWORD *)a2;
        *(_DWORD *)(v33 + 8) = *((_DWORD *)a2 + 2);
      }
      *(_QWORD *)(v32 + 16) = 0;
    }
    v36 = (char *)(v32 + 16);
    v37 = *(_QWORD **)(v32 + 16);
    if (v37)
      return v37;
    goto LABEL_42;
  }
  v21 = v5[21];
  v8 = (uint64_t)(v5 + 21);
  v20 = v21;
  v48 = v6;
  v22 = *(_DWORD *)(v8 + 16);
  if (v22)
  {
    v23 = v22 - 1;
    v24 = v23 & (37 * v6);
    inserted = (char *)(v20 + 16 * v24);
    v25 = *(_DWORD *)inserted;
    if (v6 == *(_DWORD *)inserted)
      goto LABEL_37;
    v26 = 0;
    v27 = 1;
    while (v25 != -1)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -2;
      if (v28)
        v26 = inserted;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      inserted = (char *)(v20 + 16 * v24);
      v25 = *(_DWORD *)inserted;
      if (v6 == *(_DWORD *)inserted)
        goto LABEL_37;
    }
    if (v26)
      v34 = v26;
    else
      v34 = inserted;
  }
  else
  {
    v34 = 0;
  }
  v35 = &v48;
LABEL_36:
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucket<unsigned int>(v8, v34, v35);
LABEL_37:
  v36 = inserted + 8;
  v37 = (_QWORD *)*((_QWORD *)inserted + 1);
  if (v37)
    return v37;
LABEL_42:
  v38 = (llvm::Type *)llvm::IntegerType::get(this, (llvm::LLVMContext *)*((unsigned int *)a2 + 2));
  v37 = llvm::User::operator new((llvm::User *)0x28, 0);
  v39 = llvm::Value::Value((uint64_t)v37, v38, 16);
  *(_DWORD *)(v39 + 20) &= 0xF8000000;
  v41 = (llvm::APInt *)(v39 + 24);
  v42 = *((_DWORD *)a2 + 2);
  *((_DWORD *)v37 + 8) = v42;
  if (v42 > 0x40)
  {
    llvm::APInt::initSlowCase(v41, (const void **)a2);
    v43 = *(_QWORD *)v36;
    *(_QWORD *)v36 = v37;
    if (v43)
      goto LABEL_44;
    return v37;
  }
  *(_QWORD *)v41 = *(_QWORD *)a2;
  v43 = *(_QWORD *)v36;
  *(_QWORD *)v36 = v37;
  if (!v43)
    return v37;
LABEL_44:
  if (*(_DWORD *)(v43 + 32) >= 0x41u)
  {
    v44 = *(void **)(v43 + 24);
    if (v44)
      operator delete[](v44);
  }
  llvm::Value::~Value((llvm::Value *)v43, v40);
  llvm::User::operator delete(v45);
  return *(_QWORD **)v36;
}

void llvm::ConstantExpr::getIntToPtr(llvm::ConstantExpr *this, llvm::Type **a2, llvm::Type *a3, llvm::Type *a4)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ConstantExpr *v13;

  v4 = (char)a3;
  v13 = this;
  llvm::ConstantFoldCastInstruction((llvm *)0x30, this, a2, a4);
  if (!v6 && (v4 & 1) == 0)
  {
    v7 = *(_QWORD *)*a2 + 1544;
    LODWORD(v8) = 48;
    *((_QWORD *)&v8 + 1) = &v13;
    v9 = 1;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v7, (llvm::Type *)a2, &v8);
  }
}

uint64_t llvm::ConstantVector::getSplat(llvm::Type *a1, unint64_t a2, llvm::Constant *a3)
{
  llvm::Type *v5;
  llvm::ConstantAggregateZero *v6;
  llvm::ConstantAggregateZero *v7;
  int v8;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  int64x2_t v20;
  int64x2_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  llvm::FixedVectorType ***v27;
  uint64_t Impl;
  llvm::Type *v29;
  void *v30;
  llvm::APInt *v31;
  unsigned int v32;
  llvm::ConstantInt *Int64Ty;
  llvm::Type *v34;
  llvm *v35;
  BOOL v36;
  llvm::Constant *v37;
  llvm::Constant *v38;
  mlir::BytecodeWriterConfig *inserted;
  uint64_t v40;
  llvm::Type *v41;
  int *v42;
  llvm::Type *v43;
  llvm::Type *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[4];
  __int128 v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];

  v54[2] = *MEMORY[0x1E0C80C00];
  if (((unint64_t)a1 & 0xFF00000000) != 0)
  {
    llvm::VectorType::get(*(llvm::ScalableVectorType **)a2, a1);
    v7 = v6;
    v8 = *(unsigned __int8 *)(a2 + 16);
    switch(*(_BYTE *)(a2 + 16))
    {
      case 0xD:
      case 0x12:
      case 0x13:
      case 0x14:
        return llvm::ConstantAggregateZero::get(v7, v5);
      case 0x10:
        v31 = (llvm::APInt *)(a2 + 24);
        v32 = *(_DWORD *)(a2 + 32);
        if (v32 >= 0x41)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v31) == v32)
            return llvm::ConstantAggregateZero::get(v7, v5);
        }
        else if (!*(_QWORD *)v31)
        {
          return llvm::ConstantAggregateZero::get(v7, v5);
        }
LABEL_38:
        Int64Ty = (llvm::ConstantInt *)llvm::Type::getInt64Ty(*(llvm::Type **)v7, v5);
        v35 = (llvm *)llvm::PoisonValue::get(v7, v34);
        v37 = (llvm::Constant *)llvm::ConstantInt::get(Int64Ty, 0, 0, v36);
        inserted = llvm::ConstantFoldInsertElementInstruction(v35, (llvm::Constant *)a2, v37, v38);
        if (!inserted)
        {
          if (*(_QWORD *)v35)
          {
            v46 = v35;
            v47 = a2;
            v48[0] = v37;
            v40 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v35) + 1544;
            v41 = *(llvm::Type **)v35;
            LODWORD(v49) = 62;
            *((_QWORD *)&v49 + 1) = &v46;
            v50 = 3;
            v52 = 0;
            v53 = 0;
            v51 = 0;
            inserted = (mlir::BytecodeWriterConfig *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v40, v41, &v49);
          }
          else
          {
            inserted = 0;
          }
        }
        v46 = v48;
        v47 = 0x800000000;
        if (a1 < 9uLL)
        {
          if ((_DWORD)a1)
            bzero(v48, 4 * a1);
          v42 = (int *)v48;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, a1, 4);
          v42 = (int *)v46;
          bzero(v46, 4 * a1);
        }
        LODWORD(v47) = (_DWORD)a1;
        Impl = (uint64_t)llvm::ConstantFoldShuffleVectorInstruction(inserted, v35, v42, a1);
        if (Impl)
          goto LABEL_50;
        llvm::VectorType::get(*(llvm::ScalableVectorType **)(*(_QWORD *)inserted + 24), (llvm::Type *)(a1 | ((unint64_t)(*(_BYTE *)(*(_QWORD *)inserted + 8) == 19) << 32)));
        if (v43)
        {
          v44 = v43;
          v54[0] = inserted;
          v54[1] = v35;
          v45 = **(_QWORD **)v43 + 1544;
          LODWORD(v49) = 63;
          *((_QWORD *)&v49 + 1) = v54;
          v50 = 2;
          v51 = v42;
          v52 = a1;
          v53 = 0;
          Impl = llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v45, v44, &v49);
LABEL_50:
          v30 = v46;
          if (v46 != v48)
            goto LABEL_28;
        }
        else
        {
          Impl = 0;
          v30 = v46;
          if (v46 != v48)
            goto LABEL_28;
        }
        break;
      case 0x11:
        if ((llvm::ConstantFP::isExactlyValue((llvm::ConstantFP *)a2, 0.0) & 1) != 0)
          return llvm::ConstantAggregateZero::get(v7, v5);
        v8 = *(unsigned __int8 *)(a2 + 16);
LABEL_35:
        if ((v8 - 11) > 1)
          goto LABEL_38;
        return llvm::UndefValue::get(v7, v5);
      default:
        goto LABEL_35;
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 16) & 0xFE) == 0x10)
    {
      v10 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if (v10 < 4u)
        return llvm::ConstantDataVector::getSplat(a1, (unsigned __int8 *)a2, a3);
      if (v10 == 13)
      {
        HIDWORD(v12) = v10 >> 8;
        LODWORD(v12) = (v10 >> 8) - 8;
        v11 = v12 >> 3;
        v13 = v11 > 7;
        v14 = (1 << v11) & 0x8B;
        if (!v13 && v14 != 0)
          return llvm::ConstantDataVector::getSplat(a1, (unsigned __int8 *)a2, a3);
      }
    }
    v16 = a1;
    *(_QWORD *)&v49 = &v50;
    HIDWORD(v49) = 32;
    if (a1 < 0x21uLL)
    {
      if ((_DWORD)a1)
      {
        v22 = &v50;
        v23 = a1;
        if (a1 < 4uLL)
          goto LABEL_56;
        v23 = a1 & 3;
        v24 = a1 - v23;
        v22 = &v50 + v24;
        v25 = vdupq_n_s64(a2);
        v26 = (int64x2_t *)&v52;
        do
        {
          v26[-1] = v25;
          *v26 = v25;
          v26 += 2;
          v24 -= 4;
        }
        while (v24);
        if ((a1 & 3) != 0)
        {
LABEL_56:
          do
          {
            *v22++ = a2;
            --v23;
          }
          while (v23);
        }
      }
    }
    else
    {
      DWORD2(v49) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, &v50, a1, 8);
      v17 = a1 & 3;
      v18 = v16 - v17;
      v19 = (unint64_t *)(v49 + 8 * (v16 - v17));
      v20 = vdupq_n_s64(a2);
      v21 = (int64x2_t *)(v49 + 16);
      do
      {
        v21[-1] = v20;
        *v21 = v20;
        v21 += 2;
        v18 -= 4;
      }
      while (v18);
      if ((a1 & 3) != 0)
      {
        *v19 = a2;
        if (v17 != 1)
        {
          v19[1] = a2;
          if (v17 != 2)
            v19[2] = a2;
        }
      }
    }
    DWORD2(v49) = (_DWORD)a1;
    v27 = (llvm::FixedVectorType ***)v49;
    Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v49, a1);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v27, a1);
      Impl = (uint64_t)llvm::ConstantUniqueMap<llvm::ConstantVector>::getOrCreate(**(_QWORD **)v29 + 1328, v29, (uint64_t *)v27, a1);
    }
    v30 = (void *)v49;
    if ((uint64_t *)v49 != &v50)
LABEL_28:
      free(v30);
  }
  return Impl;
}

llvm::APFloatBase *llvm::Constant::getAllOnesValue(llvm::Constant *this, llvm::Type *a2, const llvm::APInt *a3)
{
  unsigned int v4;
  int v5;
  llvm::ConstantInt *v6;
  void *v7;
  BOOL v8;
  int v9;
  uint64_t FltSemantics;
  const llvm::APFloat *v12;
  llvm::APFloatBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AllOnesValue;
  void *__p;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 2);
  v5 = v4;
  if (this && v4 == 13)
  {
    v6 = *(llvm::ConstantInt **)this;
    LODWORD(v20[0]) = *((_DWORD *)this + 2) >> 8;
    if (v4 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, -1, 1);
    }
    else
    {
      if (v4 >= 0x100)
        v7 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v4));
      else
        v7 = 0;
      __p = v7;
    }
    v13 = (llvm::APFloatBase *)llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&__p, a3);
    if (LODWORD(v20[0]) >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
  }
  else
  {
    v8 = v4 < 4u || v4 == 5;
    v9 = v4 & 0xFD;
    if (!v8 && v9 != 4)
    {
      v15 = *((unsigned int *)this + 8);
      v16 = v5 == 19;
      AllOnesValue = llvm::Constant::getAllOnesValue(*((llvm::Constant **)this + 3), a2);
      return (llvm::APFloatBase *)llvm::ConstantVector::getSplat(v15 | (v16 << 32), AllOnesValue);
    }
    FltSemantics = llvm::Type::getFltSemantics(this);
    llvm::APFloat::getAllOnesValue(FltSemantics, (uint64_t)&__p);
    v13 = (llvm::APFloatBase *)llvm::ConstantFP::get(*(llvm::ConstantFP **)this, (llvm::LLVMContext *)&__p, v12);
    v14 = (void *)v20[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v13) == v14)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v20);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v20);
  }
  return v13;
}

uint64_t llvm::ConstantDataSequential::getNumElements(llvm::ConstantDataSequential *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 32);
}

llvm::APFloatBase *llvm::ConstantDataSequential::getElementAsConstant(llvm::ConstantDataSequential *this)
{
  const char *v2;
  uint64_t v3;
  llvm::ConstantFP *DesiredBytecodeVersion;
  const llvm::APFloat *v5;
  llvm::APFloatBase *v6;
  void *v7;
  unint64_t PrimitiveSizeInBits;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8) & 0xFC) != 0)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
    v10[0] = v2;
    llvm::TypeSize::operator unsigned long long(&PrimitiveSizeInBits, v2);
    HIDWORD(v3) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8) >> 8;
    LODWORD(v3) = HIDWORD(v3) - 8;
    __asm { BR              X11 }
  }
  DesiredBytecodeVersion = (llvm::ConstantFP *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  llvm::ConstantDataSequential::getElementAsAPFloat(this);
  v6 = (llvm::APFloatBase *)llvm::ConstantFP::get(DesiredBytecodeVersion, (llvm::LLVMContext *)&PrimitiveSizeInBits, v5);
  v7 = (void *)v10[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v6) == v7)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v10);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
  return v6;
}

llvm::APFloatBase *llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Constant *a2)
{
  unint64_t *v3;
  unsigned int v4;

  if (!a2 || *((_BYTE *)a2 + 16) != 16)
    return 0;
  v3 = (unint64_t *)((char *)a2 + 24);
  v4 = *((_DWORD *)a2 + 8);
  if (v4 > 0x40)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a2 + 24)) <= 0x40)
      return llvm::Constant::getAggregateElement(this, (Type *)*(unsigned int *)*v3);
    return 0;
  }
  if (64 - __clz(*v3) > 0x40)
    return 0;
  return llvm::Constant::getAggregateElement(this, (Type *)*(unsigned int *)v3);
}

void llvm::Constant::destroyConstant(llvm::Constant *this)
{
  __asm { BR              X10 }
}

void sub_180CBB1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  mlir::memref::LoadOp::getStored(v3, a2, a3);
}

void sub_180CBB1B8(int a1, llvm::Constant *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  llvm *v18;
  uint64_t v19;

  while (1)
  {
    v19 = *((_QWORD *)v18 + 1);
    if (!v19)
      break;
    llvm::Constant::destroyConstant(*(llvm::Constant **)(v19 + 24));
  }
  llvm::deleteConstant(v18, a2);
}

void sub_180CBB874(uint64_t a1, ...)
{
  mlir::BytecodeWriterConfig *v1;
  va_list va;

  va_start(va, a1);
  llvm::Constant::destroyConstant(v1, (llvm::Value *)va);
}

void llvm::ConstantDataSequential::destroyConstantImpl(llvm::ConstantDataSequential *this)
{
  uint64_t v2;
  int8x16_t *v3;
  uint64_t v4;
  const char *v5;
  unint64_t v6;
  int Key;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::ConstantDataSequential **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ConstantDataSequential **v16;
  llvm::ConstantDataSequential *v17;
  llvm::ConstantDataSequential *v18;
  llvm::ConstantDataSequential *v19;
  llvm::Use *v20;
  _QWORD *DesiredBytecodeVersion;
  uint64_t v22;
  llvm::Value *v23;
  llvm::ConstantDataSequential *v24;
  const unsigned __int8 *v25;
  llvm::Use *v26;
  _QWORD v27[2];

  v2 = ***(_QWORD ***)this;
  v3 = (int8x16_t *)*((_QWORD *)this + 3);
  v4 = *(unsigned int *)(*(_QWORD *)this + 32);
  v27[0] = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  v27[1] = v5;
  v6 = llvm::TypeSize::operator unsigned long long(v27, v5);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(v2 + 1448), v3, (const unsigned __int8 *)((v6 >> 3) * v4));
  v9 = *(_QWORD *)(v2 + 1448);
  if (Key == -1)
  {
    v10 = *(unsigned int *)(v2 + 1456);
    v14 = *(_QWORD *)(v9 + 8 * v10);
    v15 = *(_QWORD *)(v14 + 8);
    v12 = (llvm::ConstantDataSequential **)(v14 + 8);
    if (!*(_QWORD *)(v15 + 32))
      goto LABEL_9;
  }
  else
  {
    v10 = Key;
    v11 = *(_QWORD *)(v9 + 8 * Key);
    v13 = *(_QWORD *)(v11 + 8);
    v12 = (llvm::ConstantDataSequential **)(v11 + 8);
    if (!*(_QWORD *)(v13 + 32))
    {
LABEL_9:
      DesiredBytecodeVersion = (_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
      v22 = *(_QWORD *)(v9 + 8 * v10);
      llvm::StringMapImpl::RemoveKey(*DesiredBytecodeVersion + 1448, (const unsigned __int8 **)v22);
      v25 = *(const unsigned __int8 **)v22;
      v24 = *(llvm::ConstantDataSequential **)(v22 + 8);
      *(_QWORD *)(v22 + 8) = 0;
      if (v24)
      {
        llvm::ConstantDataSequential::~ConstantDataSequential(v24, v23);
        llvm::User::operator delete(v26);
      }
      llvm::deallocate_buffer((llvm *)v22, (void *)(v25 + 17));
    }
  }
  do
  {
    v16 = v12;
    v17 = *v12;
    v12 = (llvm::ConstantDataSequential **)((char *)*v12 + 32);
  }
  while (v17 != this);
  v18 = (llvm::ConstantDataSequential *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  v19 = *v16;
  *v16 = v18;
  if (v19)
  {
    llvm::ConstantDataSequential::~ConstantDataSequential(v19, v8);
    llvm::User::operator delete(v20);
  }
}

void llvm::deleteConstant(llvm *this, llvm::Constant *a2)
{
  __asm { BR              X10 }
}

void sub_180CBBA10(uint64_t a1, llvm::Value *a2)
{
  uint64_t v2;
  llvm::ConstantDataSequential *v3;
  llvm::Use *v4;

  v3 = *(llvm::ConstantDataSequential **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v3)
  {
    llvm::ConstantDataSequential::~ConstantDataSequential(v3, a2);
    llvm::User::operator delete(v4);
  }
  JUMPOUT(0x180CBB9F8);
}

void llvm::ShuffleVectorConstantExpr::~ShuffleVectorConstantExpr(llvm::ShuffleVectorConstantExpr *this, llvm::Value *a2)
{
  char *v3;

  v3 = (char *)*((_QWORD *)this + 3);
  if (v3 != (char *)this + 40)
    free(v3);
  llvm::Value::~Value(this, a2);
}

uint64_t llvm::Constant::isConstantUsed(llvm::Constant *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  BOOL v3;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(unsigned __int8 **)(v1 + 24);
    v3 = v2 && v2[16] - 21 >= 0xFFFFFFEF;
    if (!v3 || llvm::Constant::isConstantUsed((llvm::Constant *)v2))
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  return 1;
}

uint64_t llvm::Constant::removeDeadConstantUsers(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v1 = (uint64_t *)(this + 8);
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = 0;
    do
    {
      while (1)
      {
        this = *(_QWORD *)(v2 + 24);
        if (this && *(unsigned __int8 *)(this + 16) < 0x15u)
          break;
        v3 = v2;
        v2 = *(_QWORD *)(v2 + 8);
        if (!v2)
          return this;
      }
      this = constantIsDead((const llvm::Constant *)this, (const llvm::Constant *)1);
      v4 = (uint64_t *)(v3 + 8);
      if (!v3)
        v4 = v1;
      if ((this & 1) != 0)
        v2 = v3;
      else
        v4 = (uint64_t *)(v2 + 8);
      v3 = v2;
      v2 = *v4;
    }
    while (*v4);
  }
  return this;
}

uint64_t constantIsDead(const llvm::Constant *a1, const llvm::Constant *a2)
{
  int v3;
  uint64_t v5;
  unsigned __int8 *v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;

  if (*((unsigned __int8 *)a1 + 16) < 4u)
    return 0;
  v3 = (int)a2;
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    v6 = *(unsigned __int8 **)(v5 + 24);
    if (v6)
      v7 = v6[16] > 0x14u;
    else
      v7 = 1;
    v8 = v7;
    if ((_DWORD)a2)
    {
      if ((v8 & 1) == 0)
      {
        while (constantIsDead((const llvm::Constant *)v6, 1))
        {
          v9 = *((_QWORD *)a1 + 1);
          if (!v9)
            goto LABEL_30;
          v6 = *(unsigned __int8 **)(v9 + 24);
          if (v6)
            v10 = v6[16] > 0x14u;
          else
            v10 = 1;
          if (v10)
            return 0;
        }
      }
    }
    else if ((v8 & 1) == 0)
    {
      while (constantIsDead((const llvm::Constant *)v6, 0))
      {
        v5 = *(_QWORD *)(v5 + 8);
        if (!v5)
          goto LABEL_30;
        v6 = *(unsigned __int8 **)(v5 + 24);
        if (v6)
          v11 = v6[16] > 0x14u;
        else
          v11 = 1;
        if (v11)
          return 0;
      }
    }
    return 0;
  }
  else
  {
LABEL_30:
    if (v3)
    {
      llvm::ReplaceableMetadataImpl::SalvageDebugInfo(a1, a2);
      llvm::Constant::destroyConstant(a1);
    }
    return 1;
  }
}

_QWORD *llvm::ConstantVector::get(llvm::FixedVectorType ***a1, llvm::Type *a2)
{
  _QWORD *result;
  llvm::Type *v5;

  result = (_QWORD *)llvm::ConstantVector::getImpl(a1, (uint64_t)a2);
  if (!result)
  {
    llvm::FixedVectorType::get(**a1, a2);
    return llvm::ConstantUniqueMap<llvm::ConstantVector>::getOrCreate(**(_QWORD **)v5 + 1328, v5, (uint64_t *)a1, (uint64_t)a2);
  }
  return result;
}

uint64_t llvm::UndefValue::get(llvm::UndefValue *this, llvm::Type *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  llvm::UndefValue *v8;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t result;
  _QWORD *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Use *v18;
  llvm::Type *v19;

  v19 = this;
  v2 = **(_QWORD **)this;
  v3 = *(_DWORD *)(v2 + 1416);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 1400);
    v5 = v3 - 1;
    v6 = v5 & ((this >> 4) ^ (this >> 9));
    v7 = (uint64_t *)(v4 + 16 * v6);
    v8 = (llvm::UndefValue *)*v7;
    if ((llvm::UndefValue *)*v7 == this)
      goto LABEL_14;
    v9 = 0;
    v10 = 1;
    while (v8 != (llvm::UndefValue *)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == (llvm::UndefValue *)-8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (uint64_t *)(v4 + 16 * v6);
      v8 = (llvm::UndefValue *)*v7;
      if ((llvm::UndefValue *)*v7 == this)
        goto LABEL_14;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
  }
  else
  {
    v13 = 0;
  }
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucket<llvm::Type * const&>(v2 + 1400, v13, (uint64_t *)&v19);
LABEL_14:
  result = v7[1];
  if (!result)
  {
    v15 = llvm::User::operator new((llvm::User *)0x18, 0);
    result = llvm::Value::Value((uint64_t)v15, v19, 11);
    *(_DWORD *)(result + 20) &= 0xF8000000;
    v17 = (llvm::Value *)v7[1];
    v7[1] = result;
    if (v17)
    {
      llvm::Value::~Value(v17, v16);
      llvm::User::operator delete(v18);
      return v7[1];
    }
  }
  return result;
}

_QWORD *llvm::ConstantInt::get(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  llvm::ConstantInt *v3;
  unsigned int v4;
  unint64_t v5;
  _QWORD *v6;
  void *__p;
  unsigned int v9;

  v3 = *(llvm::ConstantInt **)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v9 = v4 >> 8;
  if (v4 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, a2, (int)a3);
  }
  else
  {
    if (v4 >= 0x100)
      v5 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v4);
    else
      v5 = 0;
    __p = (void *)(v5 & a2);
  }
  v6 = llvm::ConstantInt::get(v3, (llvm::LLVMContext *)&__p, a3);
  if (v9 >= 0x41 && __p)
    operator delete[](__p);
  return v6;
}

_QWORD *llvm::ConstantInt::getFalse(llvm::ConstantInt *this, llvm::LLVMContext *a2)
{
  uint64_t v2;
  uint64_t Int1Ty;
  const llvm::APInt *v5;
  llvm::ConstantInt *v6;
  _QWORD *v7;
  void *__p;
  unsigned int v9;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 1600))
    return *(_QWORD **)(*(_QWORD *)this + 1600);
  Int1Ty = llvm::Type::getInt1Ty(this, a2);
  v6 = *(llvm::ConstantInt **)Int1Ty;
  v9 = *(_DWORD *)(Int1Ty + 8) >> 8;
  if (v9 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  else
    __p = 0;
  v7 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&__p, v5);
  if (v9 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
  *(_QWORD *)(v2 + 1600) = v7;
  return v7;
}

_QWORD *llvm::ConstantInt::getTrue(llvm::Type **this, llvm::Type *a2)
{
  llvm::Type *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t Int1Ty;
  const llvm::APInt *v9;
  llvm::ConstantInt *v10;
  unsigned int v11;
  void *__p;
  unsigned int v13;

  v3 = *this;
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD **)(*(_QWORD *)v3 + 1592);
  if (v5)
  {
    v6 = *((_DWORD *)this + 2);
    if ((v6 & 0xFE) != 0x12)
      return v5;
  }
  else
  {
    Int1Ty = llvm::Type::getInt1Ty(v3, a2);
    v10 = *(llvm::ConstantInt **)Int1Ty;
    v11 = *(_DWORD *)(Int1Ty + 8);
    v13 = v11 >> 8;
    if (v11 >> 8 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 1, 0);
    else
      __p = (void *)(v11 > 0xFF);
    v5 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&__p, v9);
    if (v13 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    *(_QWORD *)(v4 + 1592) = v5;
    v6 = *((_DWORD *)this + 2);
    if ((v6 & 0xFE) != 0x12)
      return v5;
  }
  return (_QWORD *)llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(v6 == 19) << 32), v5);
}

_QWORD *llvm::ConstantInt::getFalse(llvm::Type **this, llvm::Type *a2)
{
  llvm::Type *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t Int1Ty;
  const llvm::APInt *v9;
  llvm::ConstantInt *v10;
  void *__p;
  unsigned int v12;

  v3 = *this;
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD **)(*(_QWORD *)v3 + 1600);
  if (v5)
  {
    v6 = *((_DWORD *)this + 2);
    if ((v6 & 0xFE) != 0x12)
      return v5;
  }
  else
  {
    Int1Ty = llvm::Type::getInt1Ty(v3, a2);
    v10 = *(llvm::ConstantInt **)Int1Ty;
    v12 = *(_DWORD *)(Int1Ty + 8) >> 8;
    if (v12 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
    else
      __p = 0;
    v5 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&__p, v9);
    if (v12 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    *(_QWORD *)(v4 + 1600) = v5;
    v6 = *((_DWORD *)this + 2);
    if ((v6 & 0xFE) != 0x12)
      return v5;
  }
  return (_QWORD *)llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(v6 == 19) << 32), v5);
}

_QWORD *llvm::ConstantInt::get(llvm::ConstantInt **this, llvm::Type *a2, const llvm::APInt *a3)
{
  _QWORD *result;
  llvm::Constant *v5;

  result = llvm::ConstantInt::get(*this, a2, a3);
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    return (_QWORD *)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (unint64_t)result, v5);
  return result;
}

llvm::APFloatBase *llvm::ConstantFP::get(llvm::ConstantFP *this, llvm::Type *a2, double a3)
{
  llvm::ConstantFP *v4;
  llvm::APFloatBase *v5;
  void *v6;
  llvm::Type *v7;
  void *FltSemantics;
  const llvm::APFloat *v9;
  llvm::APFloatBase *Splat;
  llvm::APFloatBase *v11;
  void *v12;
  _BYTE v14[24];
  char v15[8];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v4 = *(llvm::ConstantFP **)this;
  v5 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v14, a3);
  v6 = llvm::APFloatBase::IEEEdouble(v5);
  llvm::APFloat::Storage::Storage(v16, v14, v6);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
  v7 = this;
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    v7 = (llvm::Type *)**((_QWORD **)this + 2);
  v14[0] = 0;
  FltSemantics = (void *)llvm::Type::getFltSemantics(v7);
  llvm::APFloat::convert((uint64_t)v15, FltSemantics, 1, v14);
  Splat = (llvm::APFloatBase *)llvm::ConstantFP::get(v4, (llvm::LLVMContext *)v15, v9);
  v11 = Splat;
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
  {
    Splat = (llvm::APFloatBase *)llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat);
    v11 = Splat;
  }
  v12 = (void *)v16[0];
  if (llvm::APFloatBase::PPCDoubleDouble(Splat) == v12)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
  return v11;
}

llvm::APFloatBase *llvm::ConstantFP::getNaN(llvm::ConstantFP *this, llvm::Type *a2, void *a3)
{
  int v4;
  llvm::ConstantFP *v5;
  llvm::APFloatBase *FltSemantics;
  const llvm::APFloat *v7;
  llvm::APFloatBase *Splat;
  llvm::APFloatBase *v9;
  void *v10;
  char v12[8];
  _QWORD v13[4];

  v4 = (int)a2;
  v5 = this;
  v13[3] = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    this = (llvm::ConstantFP *)**((_QWORD **)this + 2);
  FltSemantics = (llvm::APFloatBase *)llvm::Type::getFltSemantics(this);
  llvm::APFloat::getNaN(FltSemantics, v4, a3, (uint64_t)v12);
  Splat = (llvm::APFloatBase *)llvm::ConstantFP::get(*(llvm::ConstantFP **)v5, (llvm::LLVMContext *)v12, v7);
  v9 = Splat;
  if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
  {
    Splat = (llvm::APFloatBase *)llvm::ConstantVector::getSplat(*((unsigned int *)v5 + 8) | ((unint64_t)(*((_DWORD *)v5 + 2) == 19) << 32), Splat);
    v9 = Splat;
  }
  v10 = (void *)v13[0];
  if (llvm::APFloatBase::PPCDoubleDouble(Splat) == v10)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v13);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v13);
  return v9;
}

_QWORD *llvm::ConstantFP::getZero(llvm::ConstantFP *this, llvm::Type *a2)
{
  int v2;
  llvm::ConstantFP *v3;
  llvm::APFloatBase *FltSemantics;
  llvm::APFloatBase *v5;
  llvm::detail::IEEEFloat *v6;
  int v7;
  const llvm::APFloat *v8;
  _QWORD *Splat;
  _BYTE v11[8];
  _QWORD v12[4];

  v2 = (int)a2;
  v3 = this;
  v12[3] = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    this = (llvm::ConstantFP *)**((_QWORD **)this + 2);
  FltSemantics = (llvm::APFloatBase *)llvm::Type::getFltSemantics(this);
  v5 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FltSemantics);
  if (v5 == FltSemantics)
  {
    v6 = (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)FltSemantics);
    v7 = v2;
    if (v5 != (llvm::APFloatBase *)v12[0])
      goto LABEL_5;
  }
  else
  {
    v6 = (llvm::detail::IEEEFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v12, (uint64_t)FltSemantics);
    v7 = v2;
    if (v5 != (llvm::APFloatBase *)v12[0])
    {
LABEL_5:
      llvm::detail::IEEEFloat::makeZero(v6, v7);
      goto LABEL_8;
    }
  }
  llvm::detail::DoubleAPFloat::makeZero((llvm::APFloat ***)v6, v7);
LABEL_8:
  Splat = llvm::ConstantFP::get(*(llvm::ConstantFP **)v3, (llvm::LLVMContext *)v11, v8);
  if ((*((_DWORD *)v3 + 2) & 0xFE) == 0x12)
    Splat = (_QWORD *)llvm::ConstantVector::getSplat(*((unsigned int *)v3 + 8) | ((unint64_t)(*((_DWORD *)v3 + 2) == 19) << 32), Splat);
  if (v5 == (llvm::APFloatBase *)v12[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  return Splat;
}

uint64_t llvm::PoisonValue::get(llvm::PoisonValue *this, llvm::Type *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  llvm::PoisonValue *v8;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t result;
  _QWORD *v15;
  llvm::Value *v16;
  llvm::Use *v17;
  llvm::Type *v18;

  v18 = this;
  v2 = **(_QWORD **)this;
  v3 = *(_DWORD *)(v2 + 1440);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 1424);
    v5 = v3 - 1;
    v6 = v5 & ((this >> 4) ^ (this >> 9));
    v7 = (uint64_t *)(v4 + 16 * v6);
    v8 = (llvm::PoisonValue *)*v7;
    if ((llvm::PoisonValue *)*v7 == this)
      goto LABEL_14;
    v9 = 0;
    v10 = 1;
    while (v8 != (llvm::PoisonValue *)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == (llvm::PoisonValue *)-8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (uint64_t *)(v4 + 16 * v6);
      v8 = (llvm::PoisonValue *)*v7;
      if ((llvm::PoisonValue *)*v7 == this)
        goto LABEL_14;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
  }
  else
  {
    v13 = 0;
  }
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucket<llvm::Type * const&>(v2 + 1424, v13, (uint64_t *)&v18);
LABEL_14:
  result = v7[1];
  if (!result)
  {
    v15 = llvm::User::operator new((llvm::User *)0x18, 0);
    result = llvm::Value::Value((uint64_t)v15, v18, 12);
    *(_DWORD *)(result + 20) &= 0xF8000000;
    v16 = (llvm::Value *)v7[1];
    v7[1] = result;
    if (v16)
    {
      llvm::Value::~Value(v16);
      llvm::User::operator delete(v17);
      return v7[1];
    }
  }
  return result;
}

_QWORD *llvm::ConstantArray::get(llvm::PoisonValue *a1, llvm::Type *a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)llvm::ConstantArray::getImpl(a1, a2, a3);
  if (!result)
    return llvm::ConstantUniqueMap<llvm::ConstantArray>::getOrCreate(**(_QWORD **)a1 + 1280, a1, (uint64_t *)a2, a3);
  return result;
}

uint64_t llvm::ConstantArray::getImpl(llvm::PoisonValue *this, llvm::Type *a2, uint64_t a3)
{
  llvm::Type **v6;
  unsigned int v7;
  uint64_t v8;
  llvm::Type *v9;
  uint64_t v11;
  llvm::Type *v12;
  llvm::APInt *v13;
  unsigned int v14;
  llvm::Type *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  int v22;
  uint64_t v23;
  llvm::Type *v24;
  llvm::Type **v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  llvm::Type *i;
  uint64_t v33;
  llvm::Type *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  llvm::detail::DoubleAPFloat *v44;
  void *v45;
  unsigned int v46;
  uint64_t v47;
  llvm::Type *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  int v55;
  llvm::Type *DesiredBytecodeVersion;
  llvm::Type *v57;
  llvm::Type *v58;
  unsigned int v59;
  llvm::ArrayType *IntNTy;
  llvm::ConstantAggregateZero *v61;
  llvm::ConstantAggregateZero *v62;
  llvm::Type *v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  llvm::detail::DoubleAPFloat *v69;
  void *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  llvm::Type *v74;
  llvm::Type *v75;
  llvm::ConstantAggregateZero *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t Impl;
  llvm::Type *v85;
  unsigned int v86;
  llvm::Type *v87;
  llvm::Type *v88;
  uint64_t v89;
  uint64_t v90;
  llvm::Type *v91;
  uint64_t v92;
  llvm::ConstantAggregateZero *v93;
  llvm::ArrayType *v94;
  llvm::ConstantAggregateZero *v95;
  void *__p;
  unsigned int v97;
  void *v98;
  llvm::Type *v99[2];
  _QWORD v100[16];

  v100[15] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return llvm::ConstantAggregateZero::get(this, a2);
  v6 = *(llvm::Type ***)a2;
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
  if (v7 != 12)
  {
LABEL_7:
    if (v7 - 11 <= 1)
    {
      v11 = 8 * a3;
      v12 = a2;
      do
      {
        if (*(llvm::Type ***)v12 != v6)
          goto LABEL_12;
        v12 = (llvm::Type *)((char *)v12 + 8);
        v11 -= 8;
      }
      while (v11);
      return llvm::UndefValue::get(this, a2);
    }
LABEL_12:
    if (v6 && v7 == 16)
    {
      v13 = (llvm::APInt *)(v6 + 3);
      v14 = *((_DWORD *)v6 + 8);
      if (v14 >= 0x41)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v13) == v14)
          goto LABEL_45;
      }
      else if (!*(_QWORD *)v13)
      {
        goto LABEL_45;
      }
LABEL_22:
      v15 = *v6;
      v16 = *((_DWORD *)*v6 + 2);
      if (v16 >= 4u)
      {
        if (v16 != 13)
          return 0;
        HIDWORD(v18) = v16 >> 8;
        LODWORD(v18) = (v16 >> 8) - 8;
        v17 = v18 >> 3;
        v19 = v17 > 7;
        v20 = (1 << v17) & 0x8B;
        if (v19 || v20 == 0)
          return 0;
      }
      v22 = *((unsigned __int8 *)v6 + 16);
      if (v22 != 17)
      {
        if (v22 == 16)
        {
          if (llvm::Type::isIntegerTy(v15, 8))
          {
            v23 = 0;
            v24 = 0;
            v25 = (llvm::Type **)v100;
            v98 = v100;
            *(_OWORD *)v99 = xmmword_181236BC0;
            v26 = 8 * a3;
            while (1)
            {
              v27 = *(_QWORD *)((char *)a2 + v23);
              if (!v27 || *(_BYTE *)(v27 + 16) != 16)
                goto LABEL_132;
              v29 = (_QWORD *)(v27 + 24);
              if (*(_DWORD *)(v27 + 32) >= 0x41u)
                v29 = (_QWORD *)*v29;
              v30 = *(_BYTE *)v29;
              if ((llvm::Type *)((char *)v24 + 1) > v99[1])
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v98, v100, (unint64_t)v24 + 1, 1);
                v24 = v99[0];
              }
              *((_BYTE *)v24 + (_QWORD)v98) = v30;
              v24 = ++v99[0];
              v23 += 8;
              if (v26 == v23)
              {
                DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*(mlir::BytecodeWriterConfig **)a2);
                v57 = (llvm::Type *)v98;
                v58 = v99[0];
                IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(DesiredBytecodeVersion, (llvm::LLVMContext *)8, v59);
                llvm::ArrayType::get(IntNTy, v58);
                v62 = v61;
                v63 = v57;
                v64 = v58;
                goto LABEL_135;
              }
            }
          }
          if (llvm::Type::isIntegerTy(*v6, 16))
          {
            v33 = 0;
            v34 = 0;
            v25 = (llvm::Type **)v100;
            v98 = v100;
            *(_OWORD *)v99 = xmmword_181236BC0;
            v35 = 8 * a3;
            while (1)
            {
              v36 = *(_QWORD *)((char *)a2 + v33);
              if (!v36 || *(_BYTE *)(v36 + 16) != 16)
                goto LABEL_132;
              v38 = (_QWORD *)(v36 + 24);
              if (*(_DWORD *)(v36 + 32) >= 0x41u)
                v38 = (_QWORD *)*v38;
              v39 = *(_WORD *)v38;
              if ((llvm::Type *)((char *)v34 + 1) > v99[1])
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v98, v100, (unint64_t)v34 + 1, 2);
                v34 = v99[0];
              }
              *((_WORD *)v98 + (_QWORD)v34) = v39;
              v34 = ++v99[0];
              v33 += 8;
              if (v35 == v33)
              {
                v85 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*(mlir::BytecodeWriterConfig **)a2);
                v87 = (llvm::Type *)v98;
                v88 = v99[0];
                v89 = 2 * (uint64_t)v99[0];
                v90 = 16;
                goto LABEL_134;
              }
            }
          }
          if (llvm::Type::isIntegerTy(*v6, 32))
          {
            v49 = 0;
            v50 = 0;
            v25 = &v99[1];
            v98 = &v99[1];
            v99[0] = (llvm::Type *)0x1000000000;
            v51 = 8 * a3;
            while (1)
            {
              v52 = *(_QWORD *)((char *)a2 + v49);
              if (!v52 || *(_BYTE *)(v52 + 16) != 16)
                goto LABEL_132;
              v54 = (_QWORD *)(v52 + 24);
              if (*(_DWORD *)(v52 + 32) >= 0x41u)
                v54 = (_QWORD *)*v54;
              v55 = *(_DWORD *)v54;
              if (v50 >= HIDWORD(v99[0]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, &v99[1], v50 + 1, 4);
                v50 = v99[0];
              }
              *((_DWORD *)v98 + v50) = v55;
              v50 = ++LODWORD(v99[0]);
              v49 += 8;
              if (v51 == v49)
              {
                v85 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*(mlir::BytecodeWriterConfig **)a2);
                v87 = (llvm::Type *)v98;
                v88 = (llvm::Type *)LODWORD(v99[0]);
                v89 = 4 * LODWORD(v99[0]);
                v90 = 32;
                goto LABEL_134;
              }
            }
          }
          if (llvm::Type::isIntegerTy(*v6, 64))
          {
            v77 = 0;
            v78 = 0;
            v25 = &v99[1];
            v98 = &v99[1];
            v99[0] = (llvm::Type *)0x1000000000;
            v79 = 8 * a3;
            while (1)
            {
              v80 = *(_QWORD *)((char *)a2 + v77);
              if (!v80 || *(_BYTE *)(v80 + 16) != 16)
                break;
              v82 = (_QWORD *)(v80 + 24);
              if (*(_DWORD *)(v80 + 32) >= 0x41u)
                v82 = (_QWORD *)*v82;
              v83 = (_QWORD *)*v82;
              if (v78 >= HIDWORD(v99[0]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, &v99[1], v78 + 1, 8);
                v78 = v99[0];
              }
              *((_QWORD *)v98 + v78) = v83;
              v78 = ++LODWORD(v99[0]);
              v77 += 8;
              if (v79 == v77)
              {
                v85 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*(mlir::BytecodeWriterConfig **)a2);
                v87 = (llvm::Type *)v98;
                v88 = (llvm::Type *)LODWORD(v99[0]);
                v89 = 8 * LODWORD(v99[0]);
                v90 = 64;
LABEL_134:
                v94 = (llvm::ArrayType *)llvm::Type::getIntNTy(v85, (llvm::LLVMContext *)v90, v86);
                llvm::ArrayType::get(v94, v88);
                v62 = v95;
                v63 = v87;
                v64 = (llvm::Type *)v89;
                goto LABEL_135;
              }
            }
LABEL_132:
            Impl = 0;
LABEL_136:
            if (v98 != v25)
              free(v98);
            return Impl;
          }
        }
        return 0;
      }
      if (v16 >= 2u)
      {
        if (v16 != 2)
        {
          if (v16 == 3)
            return getFPSequenceIfElementsMatch<llvm::ConstantDataArray,unsigned long long>(a2, a3);
          return 0;
        }
        v65 = 0;
        v25 = &v99[1];
        v98 = &v99[1];
        v99[0] = (llvm::Type *)0x1000000000;
        v66 = 8 * a3;
        while (1)
        {
          v67 = *(_QWORD *)((char *)a2 + v65);
          if (v67)
            v68 = *(_BYTE *)(v67 + 16) == 17;
          else
            v68 = 0;
          if (!v68)
            goto LABEL_132;
          v70 = *(void **)(v67 + 32);
          v69 = (llvm::detail::DoubleAPFloat *)(v67 + 32);
          if (llvm::APFloatBase::PPCDoubleDouble(v15) == v70)
          {
            v15 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v69, (llvm::APInt *)&__p);
            v71 = v97;
            if (v97 >= 0x41)
            {
LABEL_109:
              v15 = (llvm::Type *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
              if (v71 - v15 <= 0x40)
                v72 = *(_QWORD *)__p;
              else
                LODWORD(v72) = -1;
              goto LABEL_112;
            }
          }
          else
          {
            llvm::detail::IEEEFloat::bitcastToAPInt(v69, (uint64_t)&__p);
            v71 = v97;
            if (v97 >= 0x41)
              goto LABEL_109;
          }
          LODWORD(v72) = (_DWORD)__p;
LABEL_112:
          v73 = LODWORD(v99[0]);
          if (LODWORD(v99[0]) >= (unint64_t)HIDWORD(v99[0]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, &v99[1], LODWORD(v99[0]) + 1, 4);
            v73 = LODWORD(v99[0]);
          }
          *((_DWORD *)v98 + v73) = v72;
          ++LODWORD(v99[0]);
          if (v97 >= 0x41)
          {
            v15 = (llvm::Type *)__p;
            if (__p)
              operator delete[](__p);
          }
          v65 += 8;
          if (v66 == v65)
          {
            v91 = (llvm::Type *)v98;
            v92 = LODWORD(v99[0]);
            llvm::ArrayType::get(**(llvm::ArrayType ***)a2, (llvm::Type *)LODWORD(v99[0]));
            v62 = v93;
            v64 = (llvm::Type *)(4 * v92);
            v63 = v91;
            goto LABEL_135;
          }
        }
      }
      v40 = 0;
      v25 = (llvm::Type **)v100;
      v98 = v100;
      *(_OWORD *)v99 = xmmword_181236BC0;
      v41 = 8 * a3;
      while (1)
      {
        v42 = *(_QWORD *)((char *)a2 + v40);
        if (v42)
          v43 = *(_BYTE *)(v42 + 16) == 17;
        else
          v43 = 0;
        if (!v43)
          goto LABEL_132;
        v45 = *(void **)(v42 + 32);
        v44 = (llvm::detail::DoubleAPFloat *)(v42 + 32);
        if (llvm::APFloatBase::PPCDoubleDouble(v15) == v45)
        {
          v15 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v44, (llvm::APInt *)&__p);
          v46 = v97;
          if (v97 >= 0x41)
          {
LABEL_77:
            v15 = (llvm::Type *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
            if (v46 - v15 <= 0x40)
              v47 = *(_QWORD *)__p;
            else
              LOWORD(v47) = -1;
            goto LABEL_80;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::bitcastToAPInt(v44, (uint64_t)&__p);
          v46 = v97;
          if (v97 >= 0x41)
            goto LABEL_77;
        }
        LOWORD(v47) = (_WORD)__p;
LABEL_80:
        v48 = v99[0];
        if ((llvm::Type *)((char *)v99[0] + 1) > v99[1])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v98, v100, (unint64_t)v99[0] + 1, 2);
          v48 = v99[0];
        }
        *((_WORD *)v98 + (_QWORD)v48) = v47;
        ++v99[0];
        if (v97 >= 0x41)
        {
          v15 = (llvm::Type *)__p;
          if (__p)
            operator delete[](__p);
        }
        v40 += 8;
        if (v41 == v40)
        {
          v74 = (llvm::Type *)v98;
          v75 = v99[0];
          llvm::ArrayType::get(**(llvm::ArrayType ***)a2, v99[0]);
          v62 = v76;
          v64 = (llvm::Type *)(2 * (_QWORD)v75);
          v63 = v74;
LABEL_135:
          Impl = llvm::ConstantDataSequential::getImpl(v63, v64, v62);
          goto LABEL_136;
        }
      }
    }
    if (v6 && v7 == 17)
    {
      if ((llvm::ConstantFP::isExactlyValue(*(llvm::ConstantFP **)a2, 0.0) & 1) == 0)
        goto LABEL_22;
    }
    else if (v7 > 0x14 || ((1 << v7) & 0x1C2000) == 0)
    {
      goto LABEL_22;
    }
LABEL_45:
    v31 = 8 * a3;
    for (i = a2; *(llvm::Type ***)i == v6; i = (llvm::Type *)((char *)i + 8))
    {
      v31 -= 8;
      if (!v31)
        return llvm::ConstantAggregateZero::get(this, a2);
    }
    goto LABEL_22;
  }
  v8 = 8 * a3;
  v9 = a2;
  do
  {
    if (*(llvm::Type ***)v9 != v6)
      goto LABEL_7;
    v9 = (llvm::Type *)((char *)v9 + 8);
    v8 -= 8;
  }
  while (v8);
  return llvm::PoisonValue::get(this, a2);
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantArray>::getOrCreate(uint64_t a1, llvm::Type *a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[a4]);
  DWORD2(v20) = 0;
  *(_QWORD *)&v20 = 0;
  v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v18 = v8;
    v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v16 = v15;
    v8 = v18;
    if (v16)
    {
      v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v17 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v8 = v18;
    }
  }
  v11 = v10[19];
  *(_QWORD *)((char *)&v20 + 4) = __PAIR64__(v8, HIDWORD(a2));
  v12 = __ROR8__(__PAIR64__(v8, HIDWORD(a2)) + 12, 12);
  v13 = 0x9DDFEA08EB382D69
      * (v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ (unint64_t)a2 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                    * (v11 ^ (unint64_t)a2 ^ v12)));
  LODWORD(v20) = (-348639895 * ((v13 >> 47) ^ v13)) ^ HIDWORD(a2);
  *((_QWORD *)&v20 + 1) = a2;
  v21 = a3;
  v22 = a4;
  v19 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (int *)&v20, &v19)|| v19 == *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16))
  {
    return llvm::ConstantUniqueMap<llvm::ConstantArray>::create((uint64_t *)a1, a2, a3, a4, (int *)&v20);
  }
  else
  {
    return *(_QWORD **)v19;
  }
}

_QWORD *llvm::ConstantStruct::get(llvm::PoisonValue *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t *v5;
  _DWORD *v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char isExactlyValue;
  unsigned int v13;
  llvm::ConstantFP **v14;
  uint64_t v15;
  int v16;
  llvm::ConstantFP *v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  int v22;
  llvm::APInt *v24;
  unsigned int v25;
  uint64_t *v27;
  llvm::PoisonValue *v28;

  if (!a3)
    return (_QWORD *)llvm::ConstantAggregateZero::get(this, a2);
  v5 = (uint64_t *)a2;
  v6 = *(_DWORD **)a2;
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
  v8 = v7 == 12;
  v9 = (v7 - 11) < 2;
  if (*(_QWORD *)a2)
    v10 = v7 == 16;
  else
    v10 = 0;
  if (v10)
  {
    v13 = v6[8];
    if (v13 <= 0x40)
    {
      isExactlyValue = *((_QWORD *)v6 + 3) == 0;
      if ((v7 - 11) < 2u)
        goto LABEL_24;
      goto LABEL_20;
    }
    isExactlyValue = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v6 + 6)) == v13;
    if ((v7 - 11) >= 2u)
      goto LABEL_20;
  }
  else
  {
    if (v6)
      v11 = v7 == 17;
    else
      v11 = 0;
    if (v11)
    {
      isExactlyValue = llvm::ConstantFP::isExactlyValue((llvm::ConstantFP *)v6, 0.0);
      if ((v7 - 11) < 2u)
        goto LABEL_24;
      goto LABEL_20;
    }
    if ((v7 - 13) >= 8u || ((0xE1u >> (v7 - 13)) & 1) == 0)
    {
      isExactlyValue = 0;
      if ((v7 - 11) < 2u)
        goto LABEL_24;
LABEL_20:
      if ((isExactlyValue & 1) == 0)
      {
        if (v7 != 12)
          return llvm::ConstantUniqueMap<llvm::ConstantStruct>::getOrCreate(**(_QWORD **)this + 1304, this, v5, a3);
        return (_QWORD *)llvm::PoisonValue::get(this, a2);
      }
      goto LABEL_24;
    }
    isExactlyValue = 1;
  }
LABEL_24:
  v14 = (llvm::ConstantFP **)v5;
  v15 = 8 * a3;
  v27 = (uint64_t *)v14;
  v28 = this;
  do
  {
    v17 = *v14;
    v18 = *((unsigned __int8 *)*v14 + 16);
    if (*v14)
      v19 = v18 == 16;
    else
      v19 = 0;
    if (v19)
    {
      v24 = (llvm::ConstantFP *)((char *)v17 + 24);
      v25 = *((_DWORD *)v17 + 8);
      if (v25 < 0x41)
      {
        if (!*(_QWORD *)v24)
          goto LABEL_27;
LABEL_26:
        isExactlyValue = 0;
        goto LABEL_27;
      }
      if (llvm::APInt::countLeadingZerosSlowCase(v24) != v25)
        goto LABEL_26;
    }
    else
    {
      if (v17)
        v20 = v18 == 17;
      else
        v20 = 0;
      if (v20)
      {
        if ((llvm::ConstantFP::isExactlyValue(*v14, 0.0) & 1) == 0)
          goto LABEL_26;
      }
      else
      {
        v21 = v18 > 0x14;
        v22 = (1 << v18) & 0x1C2000;
        if (v21 || v22 == 0)
          goto LABEL_26;
      }
    }
LABEL_27:
    v16 = *((unsigned __int8 *)v17 + 16);
    if (v16 != 12)
      v8 = 0;
    if (v16 != 11)
      v9 = 0;
    ++v14;
    v15 -= 8;
  }
  while (v15);
  v5 = v27;
  this = v28;
  if ((isExactlyValue & 1) != 0)
    return (_QWORD *)llvm::ConstantAggregateZero::get(this, a2);
  if (v8)
    return (_QWORD *)llvm::PoisonValue::get(this, a2);
  if (v9)
    return (_QWORD *)llvm::UndefValue::get(v28, a2);
  else
    return llvm::ConstantUniqueMap<llvm::ConstantStruct>::getOrCreate(**(_QWORD **)this + 1304, this, v5, a3);
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantStruct>::getOrCreate(uint64_t a1, llvm::Type *a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[a4]);
  DWORD2(v20) = 0;
  *(_QWORD *)&v20 = 0;
  v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v18 = v8;
    v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v16 = v15;
    v8 = v18;
    if (v16)
    {
      v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v17 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v8 = v18;
    }
  }
  v11 = v10[19];
  *(_QWORD *)((char *)&v20 + 4) = __PAIR64__(v8, HIDWORD(a2));
  v12 = __ROR8__(__PAIR64__(v8, HIDWORD(a2)) + 12, 12);
  v13 = 0x9DDFEA08EB382D69
      * (v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ (unint64_t)a2 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                    * (v11 ^ (unint64_t)a2 ^ v12)));
  LODWORD(v20) = (-348639895 * ((v13 >> 47) ^ v13)) ^ HIDWORD(a2);
  *((_QWORD *)&v20 + 1) = a2;
  v21 = a3;
  v22 = a4;
  v19 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (int *)&v20, &v19)|| v19 == *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16))
  {
    return llvm::ConstantUniqueMap<llvm::ConstantStruct>::create((uint64_t *)a1, a2, a3, a4, (int *)&v20);
  }
  else
  {
    return *(_QWORD **)v19;
  }
}

uint64_t llvm::ConstantVector::getImpl(llvm::FixedVectorType ***a1, uint64_t a2)
{
  llvm::Type *v4;
  llvm::ConstantAggregateZero *v5;
  llvm::ConstantAggregateZero *v6;
  llvm::Type **v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  char v11;
  int isExactlyValue;
  unsigned __int8 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  llvm::APInt *v16;
  unsigned int v17;
  BOOL v18;
  llvm::APFloatBase *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  llvm::FixedVectorType ***v28;
  llvm::FixedVectorType **v29;
  _QWORD *v31;
  char v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::FixedVectorType ***v37;
  llvm::FixedVectorType **v38;
  _QWORD *v40;
  __int16 v41;
  unsigned int v42;
  uint64_t v43;
  llvm::FixedVectorType ***v44;
  llvm::FixedVectorType **v45;
  BOOL v46;
  llvm::detail::DoubleAPFloat *v47;
  llvm::FixedVectorType *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  llvm::Type *DesiredBytecodeVersion;
  llvm::Type *v53;
  llvm::Type *v54;
  llvm::LLVMContext *v55;
  llvm::FixedVectorType *Int8Ty;
  llvm::ConstantAggregateZero *v57;
  uint64_t Impl;
  void *v59;
  unsigned int v60;
  uint64_t v61;
  llvm::FixedVectorType ***v62;
  llvm::FixedVectorType **v63;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  llvm::FixedVectorType ***v68;
  llvm::FixedVectorType **v69;
  BOOL v70;
  llvm::detail::DoubleAPFloat *v71;
  llvm::FixedVectorType *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  llvm::Type *v76;
  llvm::Type *v77;
  llvm::Type *v78;
  llvm::LLVMContext *v79;
  llvm::FixedVectorType *Int16Ty;
  llvm::ConstantAggregateZero *v81;
  llvm::ConstantAggregateZero *v82;
  llvm::Type *v83;
  llvm::Type *v84;
  llvm::Type *v85;
  llvm::Type *v86;
  unsigned int v87;
  uint64_t v88;
  llvm::FixedVectorType ***v89;
  llvm::FixedVectorType **v90;
  _QWORD *v92;
  _QWORD *v93;
  llvm::ConstantAggregateZero *v94;
  llvm::Type *v95;
  llvm::Type *v96;
  llvm::Type *v97;
  llvm::LLVMContext *v98;
  llvm::FixedVectorType *Int32Ty;
  llvm::ConstantAggregateZero *v100;
  llvm::Type *v101;
  llvm::ConstantAggregateZero *v102;
  llvm::Type *v103;
  llvm::Type *v104;
  llvm::Type *v105;
  llvm::LLVMContext *v106;
  llvm::FixedVectorType *Int64Ty;
  llvm::ConstantAggregateZero *v108;
  void *__p;
  unsigned int v110;
  void *v111;
  __int128 v112;
  _QWORD v113[16];

  v113[15] = *MEMORY[0x1E0C80C00];
  llvm::FixedVectorType::get(**a1, (llvm::Type *)a2);
  v6 = v5;
  v7 = *a1;
  LODWORD(v8) = *((unsigned __int8 *)*a1 + 16);
  if (*a1)
    v9 = (_DWORD)v8 == 16;
  else
    v9 = 0;
  if (v9)
  {
    v16 = (llvm::APInt *)(v7 + 3);
    v17 = *((_DWORD *)v7 + 8);
    if (v17 > 0x40)
      v18 = llvm::APInt::countLeadingZerosSlowCase(v16) == v17;
    else
      v18 = *(_QWORD *)v16 == 0;
    isExactlyValue = v18;
    LOBYTE(v8) = 16;
    v13 = 5;
    v14 = 0;
    v15 = 0;
    if ((isExactlyValue & 1) != 0)
      goto LABEL_63;
LABEL_21:
    if (v13 >= 2u)
      goto LABEL_22;
    goto LABEL_63;
  }
  if (v7)
    v10 = (_DWORD)v8 == 17;
  else
    v10 = 0;
  if (v10)
  {
    isExactlyValue = llvm::ConstantFP::isExactlyValue((llvm::ConstantFP *)*a1, 0.0);
    LODWORD(v8) = *((unsigned __int8 *)v7 + 16);
    v13 = v8 - 11;
    v14 = (v8 - 11) < 2;
    v15 = v8 == 12;
    if ((isExactlyValue & 1) != 0)
      goto LABEL_63;
    goto LABEL_21;
  }
  v11 = v8 - 13;
  if ((v8 - 13) >= 8u || ((0xE1u >> v11) & 1) == 0)
  {
    isExactlyValue = 0;
    v13 = v8 - 11;
    v14 = (v8 - 11) < 2;
    v15 = v8 == 12;
    goto LABEL_21;
  }
  v15 = 0;
  v14 = 0;
  v8 = 0x1413120D0D0D0D0DuLL >> (8 * v11);
  isExactlyValue = 1;
LABEL_63:
  if ((_DWORD)a2 == 1)
  {
LABEL_67:
    if (isExactlyValue)
      return llvm::ConstantAggregateZero::get(v6, v4);
    if (v15)
      return llvm::PoisonValue::get(v6, v4);
    if (v14)
      return llvm::UndefValue::get(v6, v4);
  }
  else
  {
    v42 = 1;
    while (a1[v42] == v7)
    {
      if ((_DWORD)a2 == ++v42)
        goto LABEL_67;
    }
  }
LABEL_22:
  v19 = *v7;
  v20 = *((_DWORD *)*v7 + 2);
  if (v20 >= 4u)
  {
    if (v20 != 13)
      return 0;
    HIDWORD(v22) = v20 >> 8;
    LODWORD(v22) = (v20 >> 8) - 8;
    v21 = v22 >> 3;
    v23 = v21 > 7;
    v24 = (1 << v21) & 0x8B;
    if (v23 || v24 == 0)
      return 0;
  }
  if (v8 == 17)
  {
    if (v20 >= 2u)
    {
      if (v20 != 2)
      {
        if (v20 == 3)
          return getFPSequenceIfElementsMatch<llvm::ConstantDataVector,unsigned long long>((llvm::APFloatBase *)a1, a2);
        return 0;
      }
      v34 = (char *)&v112 + 8;
      v111 = (char *)&v112 + 8;
      *(_QWORD *)&v112 = 0x1000000000;
      if (a2)
      {
        v67 = 8 * a2;
        v68 = a1;
        while (1)
        {
          v69 = *v68;
          if (*v68)
            v70 = *((_BYTE *)*v68 + 16) == 17;
          else
            v70 = 0;
          if (!v70)
            goto LABEL_148;
          v72 = v69[4];
          v71 = (llvm::detail::DoubleAPFloat *)(v69 + 4);
          if (llvm::APFloatBase::PPCDoubleDouble(v19) == v72)
          {
            v19 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v71, (llvm::APInt *)&__p);
            v73 = v110;
            if (v110 >= 0x41)
            {
LABEL_121:
              v19 = (llvm::APFloatBase *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
              if (v73 - v19 <= 0x40)
                v74 = *(_QWORD *)__p;
              else
                LODWORD(v74) = -1;
              goto LABEL_124;
            }
          }
          else
          {
            llvm::detail::IEEEFloat::bitcastToAPInt(v71, (uint64_t)&__p);
            v73 = v110;
            if (v110 >= 0x41)
              goto LABEL_121;
          }
          LODWORD(v74) = (_DWORD)__p;
LABEL_124:
          v75 = v112;
          if (v112 >= (unint64_t)DWORD1(v112))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (char *)&v112 + 8, v112 + 1, 4);
            v75 = v112;
          }
          *((_DWORD *)v111 + v75) = v74;
          LODWORD(v112) = v112 + 1;
          if (v110 >= 0x41)
          {
            v19 = (llvm::APFloatBase *)__p;
            if (__p)
              operator delete[](__p);
          }
          ++v68;
          v67 -= 8;
          if (!v67)
          {
            v86 = (llvm::Type *)v111;
            v101 = (llvm::Type *)v112;
            goto LABEL_154;
          }
        }
      }
      v101 = 0;
      v86 = (llvm::Type *)((char *)&v112 + 8);
LABEL_154:
      llvm::FixedVectorType::get(**a1, v101);
      v82 = v102;
      v83 = (llvm::Type *)(4 * v101);
LABEL_155:
      v84 = v86;
      goto LABEL_156;
    }
    v34 = (char *)v113;
    v111 = v113;
    v112 = xmmword_181236BC0;
    if (!a2)
    {
      v85 = 0;
      v86 = (llvm::Type *)v113;
LABEL_150:
      llvm::FixedVectorType::get(**a1, v85);
      v82 = v94;
      v83 = (llvm::Type *)(2 * (_QWORD)v85);
      goto LABEL_155;
    }
    v43 = 8 * a2;
    v44 = a1;
    while (1)
    {
      v45 = *v44;
      if (*v44)
        v46 = *((_BYTE *)*v44 + 16) == 17;
      else
        v46 = 0;
      if (!v46)
        goto LABEL_148;
      v48 = v45[4];
      v47 = (llvm::detail::DoubleAPFloat *)(v45 + 4);
      if (llvm::APFloatBase::PPCDoubleDouble(v19) == v48)
      {
        v19 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v47, (llvm::APInt *)&__p);
        v49 = v110;
        if (v110 >= 0x41)
        {
LABEL_85:
          v19 = (llvm::APFloatBase *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
          if (v49 - v19 <= 0x40)
            v50 = *(_QWORD *)__p;
          else
            LOWORD(v50) = -1;
          goto LABEL_88;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::bitcastToAPInt(v47, (uint64_t)&__p);
        v49 = v110;
        if (v110 >= 0x41)
          goto LABEL_85;
      }
      LOWORD(v50) = (_WORD)__p;
LABEL_88:
      v51 = v112;
      if ((unint64_t)(v112 + 1) > *((_QWORD *)&v112 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v111, v113, v112 + 1, 2);
        v51 = v112;
      }
      *((_WORD *)v111 + v51) = v50;
      *(_QWORD *)&v112 = v112 + 1;
      if (v110 >= 0x41)
      {
        v19 = (llvm::APFloatBase *)__p;
        if (__p)
          operator delete[](__p);
      }
      ++v44;
      v43 -= 8;
      if (!v43)
      {
        v86 = (llvm::Type *)v111;
        v85 = (llvm::Type *)v112;
        goto LABEL_150;
      }
    }
  }
  if (v8 != 16)
    return 0;
  if (llvm::Type::isIntegerTy(v19, 8))
  {
    v111 = v113;
    v112 = xmmword_181236BC0;
    if (a2)
    {
      v26 = 0;
      v27 = 8 * a2;
      v28 = a1;
      while (1)
      {
        v29 = *v28;
        if (!*v28 || *((_BYTE *)*v28 + 16) != 16)
          break;
        v31 = v29 + 3;
        if (*((_DWORD *)v29 + 8) >= 0x41u)
          v31 = (_QWORD *)*v31;
        v32 = *(_BYTE *)v31;
        if ((unint64_t)(v26 + 1) > *((_QWORD *)&v112 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v111, v113, v26 + 1, 1);
          v26 = v112;
        }
        *((_BYTE *)v111 + v26) = v32;
        v26 = v112 + 1;
        *(_QWORD *)&v112 = v112 + 1;
        ++v28;
        v27 -= 8;
        if (!v27)
          goto LABEL_93;
      }
      Impl = 0;
      v59 = v111;
      if (v111 == v113)
        return Impl;
    }
    else
    {
LABEL_93:
      DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)*a1);
      v53 = (llvm::Type *)v111;
      v54 = (llvm::Type *)v112;
      Int8Ty = (llvm::FixedVectorType *)llvm::Type::getInt8Ty(DesiredBytecodeVersion, v55);
      llvm::FixedVectorType::get(Int8Ty, v54);
      Impl = llvm::ConstantDataSequential::getImpl(v53, v54, v57);
      v59 = v111;
      if (v111 == v113)
        return Impl;
    }
    goto LABEL_158;
  }
  if (llvm::Type::isIntegerTy(*v7, 16))
  {
    v34 = (char *)v113;
    v111 = v113;
    v112 = xmmword_181236BC0;
    if (a2)
    {
      v35 = 0;
      v36 = 8 * a2;
      v37 = a1;
      while (1)
      {
        v38 = *v37;
        if (!*v37 || *((_BYTE *)*v37 + 16) != 16)
          break;
        v40 = v38 + 3;
        if (*((_DWORD *)v38 + 8) >= 0x41u)
          v40 = (_QWORD *)*v40;
        v41 = *(_WORD *)v40;
        if ((unint64_t)(v35 + 1) > *((_QWORD *)&v112 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v111, v113, v35 + 1, 2);
          v35 = v112;
        }
        *((_WORD *)v111 + v35) = v41;
        v35 = v112 + 1;
        *(_QWORD *)&v112 = v112 + 1;
        ++v37;
        v36 -= 8;
        if (!v36)
          goto LABEL_129;
      }
LABEL_148:
      Impl = 0;
      goto LABEL_157;
    }
LABEL_129:
    v76 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)*a1);
    v77 = (llvm::Type *)v111;
    v78 = (llvm::Type *)v112;
    Int16Ty = (llvm::FixedVectorType *)llvm::Type::getInt16Ty(v76, v79);
    llvm::FixedVectorType::get(Int16Ty, v78);
    v82 = v81;
    v83 = (llvm::Type *)(2 * (_QWORD)v78);
    v84 = v77;
    goto LABEL_156;
  }
  if (!llvm::Type::isIntegerTy(*v7, 32))
  {
    if (llvm::Type::isIntegerTy(*v7, 64))
    {
      v34 = (char *)&v112 + 8;
      v111 = (char *)&v112 + 8;
      *(_QWORD *)&v112 = 0x1000000000;
      if (a2)
      {
        v87 = 0;
        v88 = 8 * a2;
        v89 = a1;
        do
        {
          v90 = *v89;
          if (!*v89 || *((_BYTE *)*v89 + 16) != 16)
            goto LABEL_148;
          v92 = v90 + 3;
          if (*((_DWORD *)v90 + 8) >= 0x41u)
            v92 = (_QWORD *)*v92;
          v93 = (_QWORD *)*v92;
          if (v87 >= DWORD1(v112))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (char *)&v112 + 8, v87 + 1, 8);
            v87 = v112;
          }
          *((_QWORD *)v111 + v87) = v93;
          v87 = v112 + 1;
          LODWORD(v112) = v112 + 1;
          ++v89;
          v88 -= 8;
        }
        while (v88);
      }
      v103 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)*a1);
      v104 = (llvm::Type *)v111;
      v105 = (llvm::Type *)v112;
      Int64Ty = (llvm::FixedVectorType *)llvm::Type::getInt64Ty(v103, v106);
      llvm::FixedVectorType::get(Int64Ty, v105);
      v82 = v108;
      v83 = (llvm::Type *)(8 * (_QWORD)v105);
      v84 = v104;
      goto LABEL_156;
    }
    return 0;
  }
  v34 = (char *)&v112 + 8;
  v111 = (char *)&v112 + 8;
  *(_QWORD *)&v112 = 0x1000000000;
  if (a2)
  {
    v60 = 0;
    v61 = 8 * a2;
    v62 = a1;
    do
    {
      v63 = *v62;
      if (!*v62 || *((_BYTE *)*v62 + 16) != 16)
        goto LABEL_148;
      v65 = v63 + 3;
      if (*((_DWORD *)v63 + 8) >= 0x41u)
        v65 = (_QWORD *)*v65;
      v66 = *(_DWORD *)v65;
      if (v60 >= DWORD1(v112))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (char *)&v112 + 8, v60 + 1, 4);
        v60 = v112;
      }
      *((_DWORD *)v111 + v60) = v66;
      v60 = v112 + 1;
      LODWORD(v112) = v112 + 1;
      ++v62;
      v61 -= 8;
    }
    while (v61);
  }
  v95 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)*a1);
  v96 = (llvm::Type *)v111;
  v97 = (llvm::Type *)v112;
  Int32Ty = (llvm::FixedVectorType *)llvm::Type::getInt32Ty(v95, v98);
  llvm::FixedVectorType::get(Int32Ty, v97);
  v82 = v100;
  v83 = (llvm::Type *)(4 * (_QWORD)v97);
  v84 = v96;
LABEL_156:
  Impl = llvm::ConstantDataSequential::getImpl(v84, v83, v82);
LABEL_157:
  v59 = v111;
  if (v111 != v34)
LABEL_158:
    free(v59);
  return Impl;
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantVector>::getOrCreate(uint64_t a1, llvm::Type *a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[a4]);
  DWORD2(v20) = 0;
  *(_QWORD *)&v20 = 0;
  v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v9 & 1) == 0)
  {
    v18 = v8;
    v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v16 = v15;
    v8 = v18;
    if (v16)
    {
      v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v17 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      v10 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v8 = v18;
    }
  }
  v11 = v10[19];
  *(_QWORD *)((char *)&v20 + 4) = __PAIR64__(v8, HIDWORD(a2));
  v12 = __ROR8__(__PAIR64__(v8, HIDWORD(a2)) + 12, 12);
  v13 = 0x9DDFEA08EB382D69
      * (v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ (unint64_t)a2 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                    * (v11 ^ (unint64_t)a2 ^ v12)));
  LODWORD(v20) = (-348639895 * ((v13 >> 47) ^ v13)) ^ HIDWORD(a2);
  *((_QWORD *)&v20 + 1) = a2;
  v21 = a3;
  v22 = a4;
  v19 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (int *)&v20, &v19)|| v19 == *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16))
  {
    return llvm::ConstantUniqueMap<llvm::ConstantVector>::create((uint64_t *)a1, a2, a3, a4, (int *)&v20);
  }
  else
  {
    return *(_QWORD **)v19;
  }
}

uint64_t llvm::ConstantDataVector::getSplat(llvm::ConstantDataVector *this, unsigned __int8 *a2, llvm::Constant *a3)
{
  llvm::Type *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  llvm::APFloatBase *v8;
  void *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int16 *v14;
  unsigned int v15;
  _WORD *v16;
  uint64_t v17;
  int16x8_t v18;
  int16x8_t *v19;
  uint64_t v20;
  llvm::Type *DesiredBytecodeVersion;
  llvm::APFloatBase *v22;
  llvm::Type *v23;
  llvm::LLVMContext *v24;
  llvm::FixedVectorType *Int8Ty;
  llvm::ConstantAggregateZero *v26;
  uint64_t Impl;
  llvm::APFloatBase *v28;
  unint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  llvm::APFloatBase *v32;
  unsigned int *v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  int16x8_t v41;
  llvm::Type *v42;
  llvm::APFloatBase *v43;
  llvm::Type *v44;
  llvm::LLVMContext *v45;
  llvm::FixedVectorType *Int16Ty;
  llvm::ConstantAggregateZero *v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  int64x2_t v51;
  int64x2_t *v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  void *v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  llvm::APFloatBase *v67;
  uint64_t v68;
  _WORD *v69;
  unint64_t v70;
  int16x8_t v71;
  int16x8_t *v72;
  _BYTE *v73;
  unint64_t v74;
  uint64_t v75;
  int16x8_t v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  unint64_t v80;
  int16x8_t v81;
  int16x8_t *v82;
  _BYTE *v83;
  unint64_t v84;
  uint64_t v85;
  int16x8_t v86;
  llvm::ConstantAggregateZero *v87;
  llvm::ConstantAggregateZero *v88;
  llvm::Type *v89;
  llvm::Type *v90;
  uint64_t v91;
  llvm::APFloatBase *v92;
  uint64_t v93;
  _DWORD *v94;
  unint64_t v95;
  int32x4_t v96;
  int32x4_t *v97;
  _BYTE *v98;
  unint64_t v99;
  int32x4_t v100;
  uint64_t v101;
  llvm::ConstantAggregateZero *v102;
  uint64_t v103;
  llvm::APFloatBase *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  int64x2_t v108;
  int64x2_t *v109;
  _BYTE *v110;
  unint64_t v111;
  int64x2_t v112;
  uint64_t v113;
  llvm::ConstantAggregateZero *v114;
  int32x4_t v115;
  uint64_t v116;
  llvm::Type *v117;
  llvm::APFloatBase *v118;
  llvm::Type *v119;
  llvm::LLVMContext *v120;
  llvm::FixedVectorType *Int32Ty;
  llvm::ConstantAggregateZero *v122;
  int64x2_t v123;
  uint64_t v124;
  llvm::Type *v125;
  llvm::Type *v126;
  llvm::LLVMContext *v127;
  llvm::FixedVectorType *Int64Ty;
  llvm::ConstantAggregateZero *v129;
  void *__p;
  unsigned int v131;
  llvm::APFloatBase *v132;
  _BYTE v133[56];
  int32x4_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  uint64_t v139;

  v4 = this;
  v139 = *MEMORY[0x1E0C80C00];
  v5 = a2[16];
  if (a2 && v5 == 16)
  {
    if (llvm::Type::isIntegerTy(*(llvm::Type **)a2, 8))
    {
      v6 = a2 + 24;
      if (*((_DWORD *)a2 + 8) >= 0x41u)
        v6 = *(unsigned __int8 **)v6;
      v7 = *v6;
      v132 = (llvm::APFloatBase *)&v133[16];
      *(_OWORD *)v133 = xmmword_181236BC0;
      if (v4 < 0x11)
      {
        if (!(_DWORD)v4)
          goto LABEL_27;
        v8 = (llvm::APFloatBase *)&v133[16];
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v132, &v133[16], v4, 1);
        v8 = v132;
      }
      memset(v8, v7, v4);
LABEL_27:
      *(_QWORD *)v133 = v4;
      DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a2);
      v22 = v132;
      v23 = *(llvm::Type **)v133;
      Int8Ty = (llvm::FixedVectorType *)llvm::Type::getInt8Ty(DesiredBytecodeVersion, v24);
      llvm::FixedVectorType::get(Int8Ty, v23);
      Impl = llvm::ConstantDataSequential::getImpl(v22, v23, v26);
      v28 = v132;
      if (v132 == (llvm::APFloatBase *)&v133[16])
        return Impl;
      goto LABEL_172;
    }
    if (llvm::Type::isIntegerTy(*(llvm::Type **)a2, 16))
    {
      v14 = (unsigned __int16 *)(a2 + 24);
      if (*((_DWORD *)a2 + 8) >= 0x41u)
        v14 = *(unsigned __int16 **)v14;
      v15 = *v14;
      v132 = (llvm::APFloatBase *)&v133[16];
      *(_QWORD *)&v133[8] = 16;
      if (v4 >= 0x11)
      {
        *(_QWORD *)v133 = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v132, &v133[16], v4, 2);
        v16 = (_WORD *)((char *)v132 + 2 * (v4 & 0xFFFFFFF0));
        v17 = v4 & 0xF;
        v18 = vdupq_n_s16(v15);
        v19 = (int16x8_t *)((char *)v132 + 16);
        v20 = v4 & 0xFFFFFFF0;
        do
        {
          v19[-1] = v18;
          *v19 = v18;
          v19 += 2;
          v20 -= 16;
        }
        while (v20);
        if ((v4 & 0xFFFFFFF0) != (unint64_t)v4)
        {
          do
          {
            *v16++ = v15;
            --v17;
          }
          while (v17);
        }
        goto LABEL_45;
      }
      if (!(_DWORD)v4)
        goto LABEL_45;
      v38 = &v133[16];
      v39 = v4;
      if (v4 >= 8)
      {
        v40 = v4 & 0xFFFFFFF8;
        v41 = vdupq_n_s16(v15);
        *(int16x8_t *)&v133[16] = v41;
        if (v40 != 8)
          *(int16x8_t *)&v133[32] = v41;
        if (v40 == v4)
        {
LABEL_45:
          *(_QWORD *)v133 = v4;
          v42 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a2);
          v43 = v132;
          v44 = *(llvm::Type **)v133;
          Int16Ty = (llvm::FixedVectorType *)llvm::Type::getInt16Ty(v42, v45);
          llvm::FixedVectorType::get(Int16Ty, v44);
          Impl = llvm::ConstantDataSequential::getImpl(v43, (llvm::Type *)(2 * (_QWORD)v44), v47);
          v28 = v132;
          if (v132 == (llvm::APFloatBase *)&v133[16])
            return Impl;
          goto LABEL_172;
        }
        v38 = &v133[2 * v40 + 16];
        v39 = v4 & 7;
      }
      do
      {
        *(_WORD *)v38 = v15;
        v38 += 2;
        --v39;
      }
      while (v39);
      goto LABEL_45;
    }
    v29 = (unint64_t *)(a2 + 24);
    v30 = v4;
    if (llvm::Type::isIntegerTy(*(llvm::Type **)a2, 32))
    {
      if (*((_DWORD *)a2 + 8) >= 0x41u)
        v29 = (unint64_t *)*v29;
      v31 = *(_DWORD *)v29;
      v32 = (llvm::APFloatBase *)&v133[8];
      v132 = (llvm::APFloatBase *)&v133[8];
      *(_QWORD *)v133 = 0x1000000000;
      if (v4 < 0x11)
      {
        if ((_DWORD)v4)
        {
          if (v4 >= 8)
          {
            v115 = vdupq_n_s32(v31);
            v116 = v4 & 0xFFFFFFF8;
            *(int32x4_t *)&v133[8] = v115;
            *(int32x4_t *)&v133[24] = v115;
            if (v116 != 8)
            {
              *(int32x4_t *)&v133[40] = v115;
              v134 = v115;
            }
            if (v116 == v4)
              goto LABEL_161;
            v64 = &v133[4 * v116 + 8];
            v30 = v4 & 7;
          }
          else
          {
            v64 = &v133[8];
          }
          do
          {
            *(_DWORD *)v64 = v31;
            v64 += 4;
            --v30;
          }
          while (v30);
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, &v133[8], v4, 4);
        v33 = (unsigned int *)((char *)v132 + 4 * (v4 & 0xFFFFFFF8));
        v34 = v4 & 7;
        v35 = vdupq_n_s32(v31);
        v36 = (int32x4_t *)((char *)v132 + 16);
        v37 = v4 & 0xFFFFFFF8;
        do
        {
          v36[-1] = v35;
          *v36 = v35;
          v36 += 2;
          v37 -= 8;
        }
        while (v37);
        if ((v4 & 0xFFFFFFF8) != (unint64_t)v4)
        {
          do
          {
            *v33++ = v31;
            --v34;
          }
          while (v34);
        }
      }
LABEL_161:
      *(_DWORD *)v133 = (_DWORD)v4;
      v117 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a2);
      v118 = v132;
      v119 = (llvm::Type *)*(unsigned int *)v133;
      Int32Ty = (llvm::FixedVectorType *)llvm::Type::getInt32Ty(v117, v120);
      llvm::FixedVectorType::get(Int32Ty, v119);
      v88 = v122;
      v89 = (llvm::Type *)(4 * (_QWORD)v119);
LABEL_170:
      v90 = v118;
      goto LABEL_171;
    }
    if (*((_DWORD *)a2 + 8) >= 0x41u)
      v29 = (unint64_t *)*v29;
    v48 = *v29;
    v32 = (llvm::APFloatBase *)&v133[8];
    v132 = (llvm::APFloatBase *)&v133[8];
    *(_DWORD *)&v133[4] = 16;
    if (v4 < 0x11)
    {
      if ((_DWORD)v4)
      {
        if (v4 >= 4)
        {
          v123 = vdupq_n_s64(v48);
          v124 = v4 & 0xFFFFFFFC;
          *(int64x2_t *)&v133[8] = v123;
          *(int64x2_t *)&v133[24] = v123;
          if (v124 != 4)
          {
            *(int64x2_t *)&v133[40] = v123;
            v134 = (int32x4_t)v123;
            if (v124 != 8)
            {
              v135 = v123;
              v136 = v123;
              if (v124 != 12)
              {
                v137 = v123;
                v138 = v123;
              }
            }
          }
          if (v124 == v4)
            goto LABEL_169;
          v65 = &v133[8 * v124 + 8];
          v30 = v4 & 3;
        }
        else
        {
          v65 = &v133[8];
        }
        do
        {
          *(_QWORD *)v65 = v48;
          v65 += 8;
          --v30;
        }
        while (v30);
      }
    }
    else
    {
      *(_DWORD *)v133 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, &v133[8], v4, 8);
      v49 = (unint64_t *)((char *)v132 + 8 * (v4 & 0xFFFFFFFC));
      v50 = v4 & 3;
      v51 = vdupq_n_s64(v48);
      v52 = (int64x2_t *)((char *)v132 + 16);
      v53 = v4 & 0xFFFFFFFC;
      do
      {
        v52[-1] = v51;
        *v52 = v51;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      if ((v4 & 0xFFFFFFFC) != (unint64_t)v4)
      {
        do
        {
          *v49++ = v48;
          --v50;
        }
        while (v50);
      }
    }
LABEL_169:
    *(_DWORD *)v133 = (_DWORD)v4;
    v125 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a2);
    v118 = v132;
    v126 = (llvm::Type *)*(unsigned int *)v133;
    Int64Ty = (llvm::FixedVectorType *)llvm::Type::getInt64Ty(v125, v127);
    llvm::FixedVectorType::get(Int64Ty, v126);
    v88 = v129;
    v89 = (llvm::Type *)(8 * (_QWORD)v126);
    goto LABEL_170;
  }
  if (!a2 || v5 != 17)
    return llvm::ConstantVector::getSplat(this, a2);
  switch(*(_BYTE *)(*(_QWORD *)a2 + 8))
  {
    case 0:
      v9 = (void *)*((_QWORD *)a2 + 4);
      if (llvm::APFloatBase::PPCDoubleDouble(this) == v9)
      {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(a2 + 32), (llvm::APInt *)&__p);
        v10 = v4;
        v11 = v131;
        if (v131 < 0x41)
          goto LABEL_13;
      }
      else
      {
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)(a2 + 32), (uint64_t)&__p);
        v10 = v4;
        v11 = v131;
        if (v131 < 0x41)
        {
LABEL_13:
          LODWORD(v12) = (_DWORD)__p;
          goto LABEL_83;
        }
      }
      if (v11 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
        v12 = *(_QWORD *)__p;
      else
        LODWORD(v12) = -1;
LABEL_83:
      v32 = (llvm::APFloatBase *)&v133[16];
      v132 = (llvm::APFloatBase *)&v133[16];
      *(_QWORD *)&v133[8] = 16;
      if (v4 >= 0x11)
      {
        *(_QWORD *)v133 = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v132, &v133[16], v10, 2);
        v66 = 0;
        v67 = v132;
        v68 = 2 * (v10 & 0xFFFFFFF0);
        v69 = (_WORD *)((char *)v132 + v68);
        v70 = v10 & 0xF;
        v71 = vdupq_n_s16(v12);
        do
        {
          v72 = (int16x8_t *)((char *)v67 + v66);
          *v72 = v71;
          v72[1] = v71;
          v66 += 32;
        }
        while (v68 != v66);
        if ((v10 & 0xFFFFFFF0) != v10)
        {
          do
          {
            *v69++ = v12;
            --v70;
          }
          while (v70);
        }
        goto LABEL_103;
      }
      if (!(_DWORD)v4)
        goto LABEL_112;
      v73 = &v133[16];
      v74 = v10;
      if (v4 < 8)
        goto LABEL_95;
      v75 = v10 & 0xFFFFFFF8;
      v76 = vdupq_n_s16(v12);
      *(int16x8_t *)&v133[16] = v76;
      if (v75 != 8)
        *(int16x8_t *)&v133[32] = v76;
      if (v75 != v10)
      {
        v73 = &v133[2 * v75 + 16];
        v74 = v10 & 7;
        do
        {
LABEL_95:
          *(_WORD *)v73 = v12;
          v73 += 2;
          --v74;
        }
        while (v74);
      }
      goto LABEL_112;
    case 1:
      v54 = (void *)*((_QWORD *)a2 + 4);
      if (llvm::APFloatBase::PPCDoubleDouble(this) == v54)
      {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(a2 + 32), (llvm::APInt *)&__p);
        v10 = v4;
        v11 = v131;
        if (v131 < 0x41)
          goto LABEL_57;
      }
      else
      {
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)(a2 + 32), (uint64_t)&__p);
        v10 = v4;
        v11 = v131;
        if (v131 < 0x41)
        {
LABEL_57:
          LODWORD(v55) = (_DWORD)__p;
          goto LABEL_98;
        }
      }
      if (v11 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
        v55 = *(_QWORD *)__p;
      else
        LODWORD(v55) = -1;
LABEL_98:
      v32 = (llvm::APFloatBase *)&v133[16];
      v132 = (llvm::APFloatBase *)&v133[16];
      *(_QWORD *)&v133[8] = 16;
      if (v4 >= 0x11)
      {
        *(_QWORD *)v133 = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v132, &v133[16], v10, 2);
        v77 = 0;
        v67 = v132;
        v78 = 2 * (v10 & 0xFFFFFFF0);
        v79 = (_WORD *)((char *)v132 + v78);
        v80 = v10 & 0xF;
        v81 = vdupq_n_s16(v55);
        do
        {
          v82 = (int16x8_t *)((char *)v67 + v77);
          *v82 = v81;
          v82[1] = v81;
          v77 += 32;
        }
        while (v78 != v77);
        if ((v10 & 0xFFFFFFF0) != v10)
        {
          do
          {
            *v79++ = v55;
            --v80;
          }
          while (v80);
        }
LABEL_103:
        *(_QWORD *)v133 = v10;
        if (v131 >= 0x41)
        {
LABEL_113:
          if (__p)
          {
            operator delete[](__p);
            v67 = v132;
            v10 = *(_QWORD *)v133;
          }
        }
LABEL_115:
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a2, (llvm::Type *)v10);
        v88 = v87;
        v89 = (llvm::Type *)(2 * v10);
        v90 = v67;
        goto LABEL_171;
      }
      if (!(_DWORD)v4)
        goto LABEL_112;
      v83 = &v133[16];
      v84 = v10;
      if (v4 < 8)
        goto LABEL_111;
      v85 = v10 & 0xFFFFFFF8;
      v86 = vdupq_n_s16(v55);
      *(int16x8_t *)&v133[16] = v86;
      if (v85 != 8)
        *(int16x8_t *)&v133[32] = v86;
      if (v85 != v10)
      {
        v83 = &v133[2 * v85 + 16];
        v84 = v10 & 7;
        do
        {
LABEL_111:
          *(_WORD *)v83 = v55;
          v83 += 2;
          --v84;
        }
        while (v84);
      }
LABEL_112:
      v67 = (llvm::APFloatBase *)&v133[16];
      *(_QWORD *)v133 = v10;
      if (v11 >= 0x41)
        goto LABEL_113;
      goto LABEL_115;
    case 2:
      v56 = (void *)*((_QWORD *)a2 + 4);
      if (llvm::APFloatBase::PPCDoubleDouble(this) == v56)
      {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(a2 + 32), (llvm::APInt *)&__p);
        v57 = v4;
        v58 = v131;
        if (v131 < 0x41)
          goto LABEL_60;
      }
      else
      {
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)(a2 + 32), (uint64_t)&__p);
        v57 = v4;
        v58 = v131;
        if (v131 < 0x41)
        {
LABEL_60:
          LODWORD(v59) = (_DWORD)__p;
          goto LABEL_117;
        }
      }
      if (v58 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
        v59 = *(_QWORD *)__p;
      else
        LODWORD(v59) = -1;
LABEL_117:
      v32 = (llvm::APFloatBase *)&v133[8];
      v132 = (llvm::APFloatBase *)&v133[8];
      *(_QWORD *)v133 = 0x1000000000;
      if (v4 < 0x11)
      {
        if ((_DWORD)v4)
        {
          v98 = &v133[8];
          v99 = v57;
          if (v4 >= 8)
          {
            v100 = vdupq_n_s32(v59);
            v101 = v57 & 0xFFFFFFF8;
            *(int32x4_t *)&v133[8] = v100;
            *(int32x4_t *)&v133[24] = v100;
            if (v101 != 8)
            {
              *(int32x4_t *)&v133[40] = v100;
              v134 = v100;
            }
            if (v101 == v57)
              goto LABEL_130;
            v98 = &v133[4 * v101 + 8];
            v99 = v57 & 7;
          }
          do
          {
            *(_DWORD *)v98 = v59;
            v98 += 4;
            --v99;
          }
          while (v99);
        }
LABEL_130:
        v92 = (llvm::APFloatBase *)&v133[8];
        goto LABEL_131;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, &v133[8], v57, 4);
      v91 = 0;
      v92 = v132;
      v93 = 4 * (v57 & 0xFFFFFFF8);
      v94 = (_DWORD *)((char *)v132 + v93);
      v95 = v57 & 7;
      v96 = vdupq_n_s32(v59);
      do
      {
        v97 = (int32x4_t *)((char *)v92 + v91);
        *v97 = v96;
        v97[1] = v96;
        v91 += 32;
      }
      while (v93 != v91);
      if ((v57 & 0xFFFFFFF8) != v57)
      {
        do
        {
          *v94++ = v59;
          --v95;
        }
        while (v95);
      }
      v58 = v131;
LABEL_131:
      *(_DWORD *)v133 = (_DWORD)v4;
      if (v58 >= 0x41 && __p)
      {
        operator delete[](__p);
        v92 = v132;
        v57 = *(unsigned int *)v133;
        v4 = (llvm::Type *)*(unsigned int *)v133;
      }
      llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a2, v4);
      v88 = v102;
      v89 = (llvm::Type *)(4 * v57);
      v90 = v92;
LABEL_171:
      Impl = llvm::ConstantDataSequential::getImpl(v90, v89, v88);
      v28 = v132;
      if (v132 != v32)
LABEL_172:
        free(v28);
      return Impl;
    case 3:
      v60 = (void *)*((_QWORD *)a2 + 4);
      if (llvm::APFloatBase::PPCDoubleDouble(this) == v60)
      {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(a2 + 32), (llvm::APInt *)&__p);
        v61 = v4;
        v62 = v131;
        if (v131 < 0x41)
          goto LABEL_63;
      }
      else
      {
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)(a2 + 32), (uint64_t)&__p);
        v61 = v4;
        v62 = v131;
        if (v131 < 0x41)
        {
LABEL_63:
          v63 = (unint64_t)__p;
          goto LABEL_136;
        }
      }
      if (v62 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
        v63 = *(_QWORD *)__p;
      else
        v63 = -1;
LABEL_136:
      v32 = (llvm::APFloatBase *)&v133[8];
      v132 = (llvm::APFloatBase *)&v133[8];
      *(_DWORD *)&v133[4] = 16;
      if (v4 >= 0x11)
      {
        *(_DWORD *)v133 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, &v133[8], v61, 8);
        v103 = 0;
        v104 = v132;
        v105 = 8 * (v61 & 0xFFFFFFFC);
        v106 = (unint64_t *)((char *)v132 + v105);
        v107 = v61 & 3;
        v108 = vdupq_n_s64(v63);
        do
        {
          v109 = (int64x2_t *)((char *)v104 + v103);
          *v109 = v108;
          v109[1] = v108;
          v103 += 32;
        }
        while (v105 != v103);
        if ((v61 & 0xFFFFFFFC) != v61)
        {
          do
          {
            *v106++ = v63;
            --v107;
          }
          while (v107);
        }
        v62 = v131;
        goto LABEL_152;
      }
      if (!(_DWORD)v4)
        goto LABEL_151;
      v110 = &v133[8];
      v111 = v61;
      if (v4 < 4)
        goto LABEL_150;
      v112 = vdupq_n_s64(v63);
      v113 = v61 & 0xFFFFFFFC;
      *(int64x2_t *)&v133[8] = v112;
      *(int64x2_t *)&v133[24] = v112;
      if (v113 != 4)
      {
        *(int64x2_t *)&v133[40] = v112;
        v134 = (int32x4_t)v112;
        if (v113 != 8)
        {
          v135 = v112;
          v136 = v112;
          if (v113 != 12)
          {
            v137 = v112;
            v138 = v112;
          }
        }
      }
      if (v113 != v61)
      {
        v110 = &v133[8 * v113 + 8];
        v111 = v61 & 3;
        do
        {
LABEL_150:
          *(_QWORD *)v110 = v63;
          v110 += 8;
          --v111;
        }
        while (v111);
      }
LABEL_151:
      v104 = (llvm::APFloatBase *)&v133[8];
LABEL_152:
      *(_DWORD *)v133 = (_DWORD)v4;
      if (v62 >= 0x41 && __p)
      {
        operator delete[](__p);
        v104 = v132;
        v61 = *(unsigned int *)v133;
        v4 = (llvm::Type *)*(unsigned int *)v133;
      }
      llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a2, v4);
      v88 = v114;
      v89 = (llvm::Type *)(8 * v61);
      v90 = v104;
      goto LABEL_171;
    default:
      return llvm::ConstantVector::getSplat(this, a2);
  }
}

mlir::BytecodeWriterConfig *llvm::ConstantExpr::getInsertElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  mlir::BytecodeWriterConfig *result;
  uint64_t v10;
  llvm::Type *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldInsertElementInstruction(this, a2, a3, a4);
  if (!result)
  {
    if (*(llvm::Constant **)this == a4)
    {
      return 0;
    }
    else
    {
      v17[0] = this;
      v17[1] = a2;
      v17[2] = a3;
      v10 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this) + 1544;
      v11 = *(llvm::Type **)this;
      LODWORD(v12) = 62;
      *((_QWORD *)&v12 + 1) = v17;
      v13 = 3;
      v15 = 0;
      v16 = 0;
      v14 = 0;
      return (mlir::BytecodeWriterConfig *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v10, v11, &v12);
    }
  }
  return result;
}

_QWORD *llvm::ConstantExpr::getShuffleVector(mlir::BytecodeWriterConfig *a1, mlir::BytecodeWriterConfig *a2, int *a3, uint64_t a4, llvm::Type *a5)
{
  _QWORD *result;
  llvm::Type *v11;
  llvm::Type *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldShuffleVectorInstruction(a1, a2, a3, a4);
  if (!result)
  {
    llvm::VectorType::get(*(llvm::ScalableVectorType **)(*(_QWORD *)a1 + 24), (llvm::Type *)(a4 | ((unint64_t)(*(_BYTE *)(*(_QWORD *)a1 + 8) == 19) << 32)));
    if (v11 == a5)
    {
      return 0;
    }
    else
    {
      v12 = v11;
      v19[0] = a1;
      v19[1] = a2;
      v13 = **(_QWORD **)v11 + 1544;
      LODWORD(v14) = 63;
      *((_QWORD *)&v14 + 1) = v19;
      v15 = 2;
      v16 = a3;
      v17 = a4;
      v18 = 0;
      return (_QWORD *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v13, v12, &v14);
    }
  }
  return result;
}

BOOL llvm::ConstantExpr::isCast(llvm::ConstantExpr *this)
{
  return *((unsigned __int16 *)this + 9) - 38 < 0xD;
}

BOOL llvm::ConstantExpr::isCompare(llvm::ConstantExpr *this)
{
  return *((unsigned __int16 *)this + 9) - 53 < 2;
}

uint64_t llvm::ConstantExpr::getPredicate(llvm::ConstantExpr *this)
{
  return *((unsigned __int16 *)this + 12);
}

uint64_t llvm::ConstantExpr::getShuffleMask(llvm::ConstantExpr *this)
{
  return *((_QWORD *)this + 3);
}

void llvm::ConstantExpr::getWithOperands(llvm::GEPOperator *this, uint64_t a2, llvm::Constant *a3, llvm::Constant *a4, Type *a5, uint64_t SourceElementType)
{
  llvm::Type *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  llvm::ConstantExpr *v14;
  mlir::BytecodeWriterConfig *v15;
  llvm::Constant *v16;
  uint64_t *v17;
  uint64_t v18;
  llvm *v19;
  unsigned int v20;
  int v21;
  llvm::PoisonValue **v22;
  mlir::BytecodeWriterConfig *v23;
  unsigned int v24;
  uint64_t v25;
  llvm::Type *v26;
  uint64_t v27;
  llvm::Constant *v28;
  mlir::BytecodeWriterConfig *v29;
  llvm::Type *v30;
  mlir::BytecodeWriterConfig *v31;
  llvm::Constant *v32;
  llvm::Constant *v33;
  llvm *v34;
  mlir::BytecodeWriterConfig *v35;
  int *v36;
  uint64_t v37;
  llvm::Type *v38;
  __int128 v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  mlir::BytecodeWriterConfig *v44;
  void *v45;
  llvm::Constant *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (*(llvm::Constant **)this == a4)
  {
    if (!a3)
      return;
    v11 = -32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
    v12 = 8 * (_QWORD)a3;
    v13 = (_QWORD *)a2;
    while (*v13 == *(_QWORD *)((char *)this + v11))
    {
      ++v13;
      v11 += 32;
      v12 -= 8;
      if (!v12)
        return;
    }
  }
  if ((_DWORD)a5)
    v9 = a4;
  else
    v9 = 0;
  v10 = *((_WORD *)this + 9);
  switch(v10)
  {
    case '"':
      if (!SourceElementType)
        SourceElementType = llvm::GEPOperator::getSourceElementType(this);
      v19 = *(llvm **)a2;
      v18 = a2 + 8;
      v17 = (uint64_t *)v19;
      v20 = *((unsigned __int8 *)this + 17);
      v21 = (v20 >> 2) - 1;
      if (v20 < 4)
        LOBYTE(v21) = 0;
      llvm::ConstantExpr::getGetElementPtr(SourceElementType, v17, v18, (uint64_t)a3 - 1, (v20 >> 1) & 1, v21 | ((unint64_t)(v20 > 3) << 32), v9);
      break;
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
      llvm::ConstantExpr::getCast((llvm::ConstantExpr *)*((unsigned __int16 *)this + 9), *(_QWORD *)a2, a4, a5);
      break;
    case '5':
    case '6':
      v14 = (llvm::ConstantExpr *)*((unsigned __int16 *)this + 12);
      v15 = *(mlir::BytecodeWriterConfig **)a2;
      v16 = *(llvm::Constant **)(a2 + 8);
      if (v14 > 0xF)
        llvm::ConstantExpr::getICmp(v14, v15, v16, (llvm::Constant *)(v9 != 0));
      else
        llvm::ConstantExpr::getFCmp(v14, v15, v16, (llvm::Constant *)(v9 != 0));
      break;
    case '=':
      v29 = *(mlir::BytecodeWriterConfig **)a2;
      v28 = *(llvm::Constant **)(a2 + 8);
      if (!llvm::ConstantFoldExtractElementInstruction(*(llvm **)a2, v28, a3))
      {
        v30 = *(llvm::Type **)(*(_QWORD *)v29 + 24);
        if (v30 != v9)
        {
          v44 = v29;
          v45 = v28;
          v25 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v29) + 1544;
          LODWORD(v39) = 61;
          *((_QWORD *)&v39 + 1) = &v44;
          v40 = 2;
          v42 = 0;
          v43 = 0;
          v41 = 0;
          v26 = v30;
          goto LABEL_32;
        }
      }
      break;
    case '>':
      v31 = *(mlir::BytecodeWriterConfig **)a2;
      v32 = *(llvm::Constant **)(a2 + 8);
      v33 = *(llvm::Constant **)(a2 + 16);
      if (!llvm::ConstantFoldInsertElementInstruction(*(llvm **)a2, v32, v33, a4) && *(llvm::Type **)v31 != v9)
      {
        v44 = v31;
        v45 = v32;
        v46 = v33;
        v25 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v31) + 1544;
        v26 = *(llvm::Type **)v31;
        LODWORD(v39) = 62;
        v27 = 3;
        goto LABEL_28;
      }
      break;
    case '?':
      v34 = *(llvm **)a2;
      v35 = *(mlir::BytecodeWriterConfig **)(a2 + 8);
      v36 = (int *)*((_QWORD *)this + 3);
      v37 = *((unsigned int *)this + 8);
      if (!llvm::ConstantFoldShuffleVectorInstruction(*(mlir::BytecodeWriterConfig **)a2, v35, v36, v37))
      {
        llvm::VectorType::get(*(llvm::ScalableVectorType **)(*(_QWORD *)v34 + 24), (llvm::Type *)(v37 | ((unint64_t)(*(_BYTE *)(*(_QWORD *)v34 + 8) == 19) << 32)));
        if (v38 != v9)
        {
          v26 = v38;
          v44 = v34;
          v45 = v35;
          v25 = **(_QWORD **)v38 + 1544;
          LODWORD(v39) = 63;
          *((_QWORD *)&v39 + 1) = &v44;
          v40 = 2;
          v41 = v36;
          v42 = v37;
          v43 = 0;
          goto LABEL_32;
        }
      }
      break;
    default:
      v23 = *(mlir::BytecodeWriterConfig **)a2;
      v22 = *(llvm::PoisonValue ***)(a2 + 8);
      v24 = *((unsigned __int8 *)this + 17);
      if (!llvm::ConstantFoldBinaryInstruction((llvm *)*((unsigned __int16 *)this + 9), *(llvm::ConstantFP ***)a2, v22, a4)&& *(llvm::Type **)v23 != v9)
      {
        v44 = v23;
        v45 = v22;
        v25 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v23) + 1544;
        v26 = *(llvm::Type **)v23;
        LOBYTE(v39) = v10;
        BYTE1(v39) = v24 >> 1;
        WORD1(v39) = 0;
        v27 = 2;
LABEL_28:
        *((_QWORD *)&v39 + 1) = &v44;
        v40 = v27;
        v42 = 0;
        v43 = 0;
        v41 = 0;
LABEL_32:
        llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v25, v26, &v39);
      }
      break;
  }
}

void llvm::ConstantExpr::getCast(llvm::ConstantExpr *this, unsigned int a2, llvm::Constant *a3, Type *a4)
{
  __asm { BR              X10 }
}

uint64_t sub_180CBF114(int a1, uint64_t a2, int a3, llvm::Type *a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  llvm::Constant *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v22 - 24) = a2;
  v23 = llvm::ConstantFoldCastInstruction((llvm *)0x26, a2, v20, a4);
  if (!v23 && (v21 & 1) == 0)
  {
    v24 = **(_QWORD **)v20 + 1544;
    LODWORD(v26) = 38;
    *((_QWORD *)&v26 + 1) = v22 - 24;
    v27 = 1;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v24, v20, &v26);
  }
  return v23;
}

void sub_180CBF218(uint64_t a1, llvm::ConstantExpr *a2, uint64_t a3, llvm::Type *a4)
{
  llvm::Constant ***v4;
  llvm::Type *v5;

  llvm::ConstantExpr::getAddrSpaceCast(a2, v4, v5, a4);
}

llvm::APFloatBase *llvm::ConstantExpr::getExtractElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Type *a4)
{
  llvm::APFloatBase *result;
  llvm::Type *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldExtractElementInstruction(this, a2, a3, a4);
  if (!result)
  {
    v8 = *(llvm::Type **)(*(_QWORD *)this + 24);
    if (v8 == a3)
    {
      return 0;
    }
    else
    {
      v15[0] = this;
      v15[1] = a2;
      v9 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this) + 1544;
      LODWORD(v10) = 61;
      *((_QWORD *)&v10 + 1) = v15;
      v11 = 2;
      v13 = 0;
      v14 = 0;
      v12 = 0;
      return (llvm::APFloatBase *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v9, v8, &v10);
    }
  }
  return result;
}

llvm::APFloatBase *llvm::ConstantExpr::getCompare(llvm::ConstantExpr *this, mlir::BytecodeWriterConfig *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  if (this > 0xF)
    return llvm::ConstantExpr::getICmp(this, a2, a3, a4);
  else
    return llvm::ConstantExpr::getFCmp(this, a2, a3, a4);
}

uint64_t llvm::ConstantExpr::get(llvm::ConstantExpr *this, mlir::BytecodeWriterConfig *a2, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, llvm::Type *a6)
{
  char v7;
  char v10;
  uint64_t result;
  uint64_t v12;
  llvm::Type *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];

  v7 = (char)a4;
  v10 = (char)this;
  v19[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction(this, a2, a3, a4);
  if (!result)
  {
    if (*(_QWORD *)a2 == a5)
    {
      return 0;
    }
    else
    {
      v19[0] = a2;
      v19[1] = a3;
      v12 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2) + 1544;
      v13 = *(llvm::Type **)a2;
      LOBYTE(v14) = v10;
      BYTE1(v14) = v7;
      WORD1(v14) = 0;
      *((_QWORD *)&v14 + 1) = v19;
      v15 = 2;
      v17 = 0;
      v18 = 0;
      v16 = 0;
      return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v12, v13, &v14);
    }
  }
  return result;
}

llvm::APFloatBase *llvm::ConstantDataVector::getSplatValue(llvm::ConstantDataVector *this)
{
  char v2;
  char v3;

  v2 = *((_BYTE *)this + 40);
  if ((v2 & 1) == 0)
  {
    *((_BYTE *)this + 40) = v2 | 1;
    if (llvm::ConstantDataVector::isSplatData(this))
      v3 = 2;
    else
      v3 = 0;
    v2 = *((_BYTE *)this + 40) & 0xFD | v3;
    *((_BYTE *)this + 40) = v2;
  }
  if ((v2 & 2) != 0)
    return llvm::ConstantDataSequential::getElementAsConstant(this);
  else
    return 0;
}

uint64_t llvm::Constant::getUniqueInteger(llvm::Constant *this)
{
  int v1;
  uint64_t v3;

  v1 = *((unsigned __int8 *)this + 16);
  if (this && v1 == 16)
    return (uint64_t)this + 24;
  if (v1 != 5)
    return (uint64_t)llvm::Constant::getAggregateElement(this, 0) + 24;
  llvm::Constant::getSplatValue(this, 0);
  return v3 + 24;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>,llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>::erase(int32x2_t *a1, llvm::Value *a2)
{
  __int32 v2;
  int32x2_t v4;
  __int32 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  llvm::Value *v9;
  llvm::Use *v10;
  int v12;
  int v13;

  v2 = a1[2].i32[0];
  if (!v2)
    return 0;
  v4 = *a1;
  v5 = v2 - 1;
  LODWORD(v6) = ((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) & (v2 - 1);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 16 * v6);
  v8 = *v7;
  if (*(_QWORD *)a2 != *v7)
  {
    v12 = 1;
    while (v8 != -4096)
    {
      v13 = v6 + v12++;
      v6 = v13 & v5;
      v8 = *(_QWORD *)(*(_QWORD *)&v4 + 16 * v6);
      if (*(_QWORD *)a2 == v8)
      {
        v7 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v6);
        v9 = (llvm::Value *)v7[1];
        v7[1] = 0;
        if (v9)
          goto LABEL_4;
        goto LABEL_5;
      }
    }
    return 0;
  }
  v9 = (llvm::Value *)v7[1];
  v7[1] = 0;
  if (v9)
  {
LABEL_4:
    llvm::Value::~Value(v9, a2);
    llvm::User::operator delete(v10);
  }
LABEL_5:
  *v7 = -8192;
  a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  return 1;
}

llvm::BlockAddress *llvm::BlockAddress::get(llvm::BlockAddress *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  uint64_t *v5;
  char v6;
  _QWORD *v7;
  llvm::BlockAddress *result;
  llvm::BlockAddress *v9;
  llvm::BlockAddress *v10;
  llvm::Function *v11;
  _QWORD *v12;

  v5 = (uint64_t *)(*(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this) + 1472);
  v10 = this;
  v11 = a2;
  v12 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(v5, (uint64_t *)&v10, &v12);
  v7 = v12;
  if ((v6 & 1) == 0)
  {
    v7 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::InsertIntoBucketImpl<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t)v5, (uint64_t)&v10, (uint64_t *)&v10, v12);
    *v7 = v10;
    v7[1] = v11;
    v7[2] = 0;
    goto LABEL_5;
  }
  result = (llvm::BlockAddress *)v12[2];
  if (!result)
  {
LABEL_5:
    v9 = (llvm::BlockAddress *)llvm::User::operator new((llvm::User *)0x18, 2u);
    result = llvm::BlockAddress::BlockAddress(v9, this, a2);
    v7[2] = result;
  }
  return result;
}

llvm::BlockAddress *llvm::BlockAddress::BlockAddress(llvm::BlockAddress *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::Type *Int8PtrTy;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
  Int8PtrTy = (llvm::Type *)llvm::Type::getInt8PtrTy(DesiredBytecodeVersion, (llvm::LLVMContext *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8));
  llvm::Value::Value((uint64_t)this, Int8PtrTy, 4);
  v8 = *((_QWORD *)this - 8);
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xF8000000 | 2;
  if (v8)
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v9 = *((_QWORD *)this - 7);
    if (v9)
      *(_QWORD *)(v9 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v12 = *((_QWORD *)a2 + 1);
  v11 = (_QWORD *)((char *)a2 + 8);
  v10 = v12;
  *((_QWORD *)this - 7) = v12;
  if (v12)
    *(_QWORD *)(v10 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v11;
  *v11 = (char *)this - 64;
  v13 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v14 = *((_QWORD *)this - 3);
    if (v14)
      *(_QWORD *)(v14 + 16) = *((_QWORD *)this - 2);
  }
  *v13 = a3;
  if (a3)
  {
    v15 = (_QWORD *)((char *)a3 + 8);
    v16 = *((_QWORD *)a3 + 1);
    *((_QWORD *)this - 3) = v16;
    if (v16)
      *(_QWORD *)(v16 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v15;
    *v15 = v13;
  }
  *((_WORD *)a3 + 9) = *((_WORD *)a3 + 9) & 0x8000 | (*((_WORD *)a3 + 9) + 1) & 0x7FFF;
  return this;
}

uint64_t llvm::BlockAddress::lookup(llvm::BlockAddress *this, const llvm::BasicBlock *a2)
{
  mlir::BytecodeWriterConfig *v3;
  uint64_t *v4;
  int v5;
  uint64_t result;
  uint64_t v7[2];
  uint64_t v8;

  if ((*((_WORD *)this + 9) & 0x7FFF) == 0)
    return 0;
  v3 = (mlir::BytecodeWriterConfig *)*((_QWORD *)this + 8);
  v4 = (uint64_t *)(*(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v3) + 1472);
  v7[0] = (uint64_t)v3;
  v7[1] = (uint64_t)this;
  v8 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(v4, v7, &v8);
  result = 0;
  if (v5)
    return *(_QWORD *)(v8 + 16);
  return result;
}

uint64_t llvm::BlockAddress::handleOperandChangeImpl(llvm::BlockAddress *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v3;
  llvm::Value *v5;
  llvm::Value **v6;
  llvm::Value **v7;
  llvm::Value *v8;
  uint64_t *v9;
  char v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  llvm::Value *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value ***v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm::Value *v25;
  _QWORD *v26;

  v3 = a3;
  v6 = (llvm::Value **)((char *)this - 64);
  v5 = (llvm::Value *)*((_QWORD *)this - 8);
  v7 = (llvm::Value **)((char *)this - 32);
  if (v5 == a2)
  {
    v8 = *v7;
    v5 = llvm::Value::stripPointerCasts(a3);
    v3 = v8;
  }
  v9 = (uint64_t *)(*(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this) + 1472);
  v24 = v5;
  v25 = v3;
  v26 = 0;
  v10 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(v9, (uint64_t *)&v24, &v26);
  v11 = v26;
  if ((v10 & 1) != 0)
  {
    result = v26[2];
    if (result)
      return result;
  }
  else
  {
    v11 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::InsertIntoBucketImpl<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t)v9, (uint64_t)&v24, (uint64_t *)&v24, v26);
    *v11 = v24;
    v11[1] = v25;
    v11[2] = 0;
  }
  *(_WORD *)(*((_QWORD *)this - 4) + 18) = *(_WORD *)(*((_QWORD *)this - 4) + 18) & 0x8000 | (*(_WORD *)(*((_QWORD *)this - 4) + 18)
                                                                                                - 1) & 0x7FFF;
  v13 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v14 = (llvm::Value *)*((_QWORD *)this - 4);
  v24 = (llvm::Value *)*((_QWORD *)this - 8);
  v25 = v14;
  v26 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t *)(v13 + 1472), (uint64_t *)&v24, &v26))
  {
    v15 = v26;
    *v26 = -8192;
    v15[1] = -8192;
    *(int32x2_t *)(v13 + 1480) = vadd_s32(*(int32x2_t *)(v13 + 1480), (int32x2_t)0x1FFFFFFFFLL);
  }
  v11[2] = this;
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v16 = *((_QWORD *)this - 7);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)this - 6);
  }
  *v6 = v5;
  if (v5)
  {
    v19 = *((_QWORD *)v5 + 1);
    v18 = (llvm::Value ***)((char *)v5 + 8);
    v17 = v19;
    *((_QWORD *)this - 7) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v18;
    *v18 = v6;
  }
  if (*v7)
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v20 = *((_QWORD *)this - 3);
    if (v20)
      *(_QWORD *)(v20 + 16) = *((_QWORD *)this - 2);
  }
  *((_QWORD *)this - 4) = v3;
  v23 = *((_QWORD *)v3 + 1);
  v22 = (llvm::Value ***)((char *)v3 + 8);
  v21 = v23;
  *((_QWORD *)this - 3) = v23;
  if (v23)
    *(_QWORD *)(v21 + 16) = (char *)this - 24;
  result = 0;
  *((_QWORD *)this - 2) = v22;
  *v22 = v7;
  *(_WORD *)(*((_QWORD *)this - 4) + 18) = *(_WORD *)(*((_QWORD *)this - 4) + 18) & 0x8000 | (*(_WORD *)(*((_QWORD *)this - 4) + 18)
                                                                                                + 1) & 0x7FFF;
  return result;
}

llvm::DSOLocalEquivalent *llvm::DSOLocalEquivalent::get(llvm::DSOLocalEquivalent *this, llvm::GlobalValue *a2)
{
  uint64_t DesiredBytecodeVersion;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  llvm::DSOLocalEquivalent **v8;
  llvm::DSOLocalEquivalent *v9;
  llvm::DSOLocalEquivalent **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  llvm::DSOLocalEquivalent *v14;
  llvm::DSOLocalEquivalent *result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  llvm::DSOLocalEquivalent *v25;
  llvm::DSOLocalEquivalent **v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v4 = *(_QWORD *)DesiredBytecodeVersion;
  v5 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 1512);
  if (!v5)
    goto LABEL_27;
  v6 = *(_QWORD *)(v4 + 1496);
  v7 = (v5 - 1) & ((this >> 4) ^ (this >> 9));
  v8 = (llvm::DSOLocalEquivalent **)(v6 + 16 * v7);
  v9 = *v8;
  if (*v8 == this)
    goto LABEL_17;
  v10 = 0;
  v11 = 1;
  while (v9 != (llvm::DSOLocalEquivalent *)-4096)
  {
    if (v10)
      v12 = 0;
    else
      v12 = v9 == (llvm::DSOLocalEquivalent *)-8192;
    if (v12)
      v10 = v8;
    v13 = v7 + v11++;
    v7 = v13 & (v5 - 1);
    v8 = (llvm::DSOLocalEquivalent **)(v6 + 16 * v7);
    v9 = *v8;
    if (*v8 == this)
      goto LABEL_17;
  }
  if (v10)
    v8 = v10;
  v21 = *(_DWORD *)(v4 + 1504);
  if (4 * v21 + 4 < 3 * v5)
  {
    if (v5 + ~v21 - *(_DWORD *)(v4 + 1508) > v5 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_27:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4 + 1496, v5);
  v22 = *(_QWORD *)(v4 + 1496);
  v23 = *(_DWORD *)(v4 + 1512) - 1;
  v24 = v23 & ((this >> 4) ^ (this >> 9));
  v8 = (llvm::DSOLocalEquivalent **)(v22 + 16 * v24);
  v25 = *v8;
  if (*v8 == this)
  {
LABEL_29:
    ++*(_DWORD *)(v4 + 1504);
    if (this == (llvm::DSOLocalEquivalent *)-4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v26 = 0;
  v27 = 1;
  while (v25 != (llvm::DSOLocalEquivalent *)-4096)
  {
    if (v26)
      v28 = 0;
    else
      v28 = v25 == (llvm::DSOLocalEquivalent *)-8192;
    if (v28)
      v26 = v8;
    v29 = v24 + v27++;
    v24 = v29 & v23;
    v8 = (llvm::DSOLocalEquivalent **)(v22 + 16 * v24);
    v25 = *v8;
    if (*v8 == this)
      goto LABEL_29;
  }
  if (v26)
    v8 = v26;
LABEL_14:
  v14 = *v8;
  ++*(_DWORD *)(v4 + 1504);
  if (v14 != (llvm::DSOLocalEquivalent *)-4096)
LABEL_15:
    --*(_DWORD *)(v4 + 1508);
LABEL_16:
  *v8 = this;
  v8[1] = 0;
LABEL_17:
  result = v8[1];
  if (!result)
  {
    v16 = llvm::User::operator new((llvm::User *)0x18, 1u);
    result = (llvm::DSOLocalEquivalent *)llvm::Value::Value((uint64_t)v16, *(llvm::Type **)this, 6);
    *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0xF8000000 | 1;
    if (*((_QWORD *)result - 4))
    {
      **((_QWORD **)result - 2) = *((_QWORD *)result - 3);
      v17 = *((_QWORD *)result - 3);
      if (v17)
        *(_QWORD *)(v17 + 16) = *((_QWORD *)result - 2);
    }
    *((_QWORD *)result - 4) = this;
    v20 = *((_QWORD *)this + 1);
    v19 = (_QWORD *)((char *)this + 8);
    v18 = v20;
    *((_QWORD *)result - 3) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = (char *)result - 24;
    *((_QWORD *)result - 2) = v19;
    *v19 = (char *)result - 32;
    v8[1] = result;
  }
  return result;
}

llvm::Value *llvm::DSOLocalEquivalent::handleOperandChangeImpl(llvm::DSOLocalEquivalent *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v3;
  unsigned int v5;
  uint64_t DesiredBytecodeVersion;
  llvm::Type *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  llvm::Value **v13;
  llvm::Value *v14;
  llvm::Value **v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  llvm::Value *v19;
  llvm::Type *v20;
  llvm::Type **v21;
  llvm::Value *v22;
  llvm::APInt *v24;
  unsigned int v25;
  llvm::Value *v26;
  uint64_t v27;
  llvm::Type *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  llvm::Value **v33;
  llvm::Value *v34;
  llvm::Value **v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  int32x2_t *v43;
  llvm::Value **v44;
  uint64_t v45;
  int v46;
  int32x2_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  llvm::Value ***v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  llvm::Value *v59;
  int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  llvm::Value *v64;
  int v65;
  int v66;
  llvm::Value **v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  llvm::Value **v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::Value *v80;

  v3 = a3;
  v5 = *((unsigned __int8 *)a3 + 16);
  if (!a3 || v5 > 3)
    goto LABEL_24;
  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v8 = *(_QWORD *)DesiredBytecodeVersion;
  v9 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 1512);
  if (!v9)
    goto LABEL_69;
  v10 = *(_QWORD *)(v8 + 1496);
  v11 = v9 - 1;
  v12 = (v9 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  v13 = (llvm::Value **)(v10 + 16 * v12);
  v14 = *v13;
  if (*v13 != v3)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != (llvm::Value *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == (llvm::Value *)-8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (llvm::Value **)(v10 + 16 * (v18 & v11));
      v14 = *v13;
      if (*v13 == v3)
        goto LABEL_19;
    }
    if (v15)
      v13 = v15;
    v55 = *(_DWORD *)(v8 + 1504);
    if (4 * v55 + 4 < 3 * v9)
    {
      if (v9 + ~v55 - *(_DWORD *)(v8 + 1508) > v9 >> 3)
        goto LABEL_16;
      goto LABEL_70;
    }
LABEL_69:
    v9 *= 2;
LABEL_70:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v8 + 1496, v9);
    v56 = *(_QWORD *)(v8 + 1496);
    v57 = *(_DWORD *)(v8 + 1512) - 1;
    v58 = v57 & ((v3 >> 4) ^ (v3 >> 9));
    v13 = (llvm::Value **)(v56 + 16 * v58);
    v59 = *v13;
    if (*v13 == v3)
    {
LABEL_71:
      ++*(_DWORD *)(v8 + 1504);
      if (v3 == (llvm::Value *)-4096)
        goto LABEL_18;
      goto LABEL_17;
    }
    v67 = 0;
    v68 = 1;
    while (v59 != (llvm::Value *)-4096)
    {
      if (v67)
        v69 = 0;
      else
        v69 = v59 == (llvm::Value *)-8192;
      if (v69)
        v67 = v13;
      v70 = v58 + v68++;
      v58 = v70 & v57;
      v13 = (llvm::Value **)(v56 + 16 * (v70 & v57));
      v59 = *v13;
      if (*v13 == v3)
        goto LABEL_71;
    }
    if (v67)
      v13 = v67;
LABEL_16:
    v19 = *v13;
    ++*(_DWORD *)(v8 + 1504);
    if (v19 == (llvm::Value *)-4096)
    {
LABEL_18:
      *v13 = v3;
      v13[1] = 0;
      goto LABEL_19;
    }
LABEL_17:
    --*(_DWORD *)(v8 + 1508);
    goto LABEL_18;
  }
LABEL_19:
  v20 = v13[1];
  if (v20)
  {
    v21 = *(llvm::Type ***)this;
    if (*(llvm::Type ***)v20 == v21)
      return v13[1];
    v80 = v13[1];
    llvm::ConstantFoldCastInstruction((llvm *)0x31, v20, v21, v7);
    v3 = v22;
    if (v22)
      return v3;
    goto LABEL_51;
  }
  v5 = *((unsigned __int8 *)v3 + 16);
LABEL_24:
  switch(v5)
  {
    case 0xDu:
    case 0x12u:
    case 0x13u:
    case 0x14u:
      return v3;
    case 0x10u:
      v24 = (llvm::Value *)((char *)v3 + 24);
      v25 = *((_DWORD *)v3 + 8);
      if (v25 >= 0x41)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v24) == v25)
          return v3;
      }
      else if (!*(_QWORD *)v24)
      {
        return v3;
      }
LABEL_32:
      v26 = llvm::Value::stripPointerCastsAndAliases(v3);
      v27 = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
      v29 = *(_QWORD *)v27;
      v30 = *(_DWORD *)(*(_QWORD *)v27 + 1512);
      if (!v30)
        goto LABEL_76;
      v31 = *(_QWORD *)(v29 + 1496);
      v32 = (v30 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      v33 = (llvm::Value **)(v31 + 16 * v32);
      v34 = *v33;
      if (v26 == *v33)
        goto LABEL_48;
      v35 = 0;
      v36 = 1;
      break;
    case 0x11u:
      if ((llvm::ConstantFP::isExactlyValue(v3, 0.0) & 1) != 0)
        return v3;
      goto LABEL_32;
    default:
      goto LABEL_32;
  }
  while (v34 != (llvm::Value *)-4096)
  {
    if (v35)
      v37 = 0;
    else
      v37 = v34 == (llvm::Value *)-8192;
    if (v37)
      v35 = v33;
    v38 = v32 + v36++;
    v32 = v38 & (v30 - 1);
    v33 = (llvm::Value **)(v31 + 16 * v32);
    v34 = *v33;
    if (v26 == *v33)
      goto LABEL_48;
  }
  if (v35)
    v33 = v35;
  v60 = *(_DWORD *)(v29 + 1504);
  if (4 * v60 + 4 < 3 * v30)
  {
    if (v30 + ~v60 - *(_DWORD *)(v29 + 1508) > v30 >> 3)
      goto LABEL_45;
  }
  else
  {
LABEL_76:
    v30 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v29 + 1496, v30);
  v61 = *(_QWORD *)(v29 + 1496);
  v62 = *(_DWORD *)(v29 + 1512) - 1;
  v63 = v62 & ((v26 >> 4) ^ (v26 >> 9));
  v33 = (llvm::Value **)(v61 + 16 * v63);
  v64 = *v33;
  if (v26 == *v33)
  {
LABEL_78:
    ++*(_DWORD *)(v29 + 1504);
    if (v26 == (llvm::Value *)-4096)
      goto LABEL_47;
    goto LABEL_46;
  }
  v71 = 0;
  v72 = 1;
  while (v64 != (llvm::Value *)-4096)
  {
    if (v71)
      v73 = 0;
    else
      v73 = v64 == (llvm::Value *)-8192;
    if (v73)
      v71 = v33;
    v74 = v63 + v72++;
    v63 = v74 & v62;
    v33 = (llvm::Value **)(v61 + 16 * v63);
    v64 = *v33;
    if (v26 == *v33)
      goto LABEL_78;
  }
  if (v71)
    v33 = v71;
LABEL_45:
  v39 = *v33;
  ++*(_DWORD *)(v29 + 1504);
  if (v39 != (llvm::Value *)-4096)
LABEL_46:
    --*(_DWORD *)(v29 + 1508);
LABEL_47:
  *v33 = v26;
  v33[1] = 0;
LABEL_48:
  v3 = v33[1];
  if (v3)
  {
    v21 = *(llvm::Type ***)this;
    if (*(llvm::Type ***)v3 == v21)
      return v3;
    v80 = v33[1];
    llvm::ConstantFoldCastInstruction((llvm *)0x31, v3, v21, v28);
    v3 = v40;
    if (v40)
      return v3;
LABEL_51:
    v41 = *(_QWORD *)*v21 + 1544;
    LODWORD(v75) = 49;
    *((_QWORD *)&v75 + 1) = &v80;
    v76 = 1;
    v78 = 0;
    v79 = 0;
    v77 = 0;
    return (llvm::Value *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v41, (llvm::Type *)v21, &v75);
  }
  v42 = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v43 = *(int32x2_t **)v42;
  v44 = (llvm::Value **)((char *)this - 32);
  v45 = *((_QWORD *)this - 4);
  v46 = *(_DWORD *)(*(_QWORD *)v42 + 1512);
  if (v46)
  {
    v47 = v43[187];
    v48 = v46 - 1;
    LODWORD(v49) = ((v45 >> 4) ^ (v45 >> 9)) & (v46 - 1);
    v50 = (uint64_t *)(*(_QWORD *)&v47 + 16 * v49);
    v51 = *v50;
    if (v45 == *v50)
    {
LABEL_54:
      *v50 = -8192;
      v43[188] = vadd_s32(v43[188], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v65 = 1;
      while (v51 != -4096)
      {
        v66 = v49 + v65++;
        v49 = v66 & v48;
        v51 = *(_QWORD *)(*(_QWORD *)&v47 + 16 * v49);
        if (v45 == v51)
        {
          v50 = (uint64_t *)(*(_QWORD *)&v47 + 16 * v49);
          goto LABEL_54;
        }
      }
    }
  }
  v33[1] = this;
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v52 = *((_QWORD *)this - 3);
    if (v52)
      *(_QWORD *)(v52 + 16) = *((_QWORD *)this - 2);
  }
  *v44 = v26;
  if (v26)
  {
    v53 = (llvm::Value ***)((char *)v26 + 8);
    v54 = *((_QWORD *)v26 + 1);
    *((_QWORD *)this - 3) = v54;
    if (v54)
      *(_QWORD *)(v54 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v53;
    *v53 = v44;
  }
  if (*(_QWORD *)v26 != *(_QWORD *)this)
    *(_QWORD *)this = *(_QWORD *)v26;
  return 0;
}

llvm::NoCFIValue *llvm::NoCFIValue::get(llvm::NoCFIValue *this, llvm::GlobalValue *a2)
{
  uint64_t DesiredBytecodeVersion;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  llvm::NoCFIValue **v8;
  llvm::NoCFIValue *v9;
  llvm::NoCFIValue **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  llvm::NoCFIValue *v14;
  llvm::NoCFIValue *result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  llvm::NoCFIValue *v25;
  llvm::NoCFIValue **v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v4 = *(_QWORD *)DesiredBytecodeVersion;
  v5 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 1536);
  if (!v5)
    goto LABEL_27;
  v6 = *(_QWORD *)(v4 + 1520);
  v7 = (v5 - 1) & ((this >> 4) ^ (this >> 9));
  v8 = (llvm::NoCFIValue **)(v6 + 16 * v7);
  v9 = *v8;
  if (*v8 == this)
    goto LABEL_17;
  v10 = 0;
  v11 = 1;
  while (v9 != (llvm::NoCFIValue *)-4096)
  {
    if (v10)
      v12 = 0;
    else
      v12 = v9 == (llvm::NoCFIValue *)-8192;
    if (v12)
      v10 = v8;
    v13 = v7 + v11++;
    v7 = v13 & (v5 - 1);
    v8 = (llvm::NoCFIValue **)(v6 + 16 * v7);
    v9 = *v8;
    if (*v8 == this)
      goto LABEL_17;
  }
  if (v10)
    v8 = v10;
  v21 = *(_DWORD *)(v4 + 1528);
  if (4 * v21 + 4 < 3 * v5)
  {
    if (v5 + ~v21 - *(_DWORD *)(v4 + 1532) > v5 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_27:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4 + 1520, v5);
  v22 = *(_QWORD *)(v4 + 1520);
  v23 = *(_DWORD *)(v4 + 1536) - 1;
  v24 = v23 & ((this >> 4) ^ (this >> 9));
  v8 = (llvm::NoCFIValue **)(v22 + 16 * v24);
  v25 = *v8;
  if (*v8 == this)
  {
LABEL_29:
    ++*(_DWORD *)(v4 + 1528);
    if (this == (llvm::NoCFIValue *)-4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v26 = 0;
  v27 = 1;
  while (v25 != (llvm::NoCFIValue *)-4096)
  {
    if (v26)
      v28 = 0;
    else
      v28 = v25 == (llvm::NoCFIValue *)-8192;
    if (v28)
      v26 = v8;
    v29 = v24 + v27++;
    v24 = v29 & v23;
    v8 = (llvm::NoCFIValue **)(v22 + 16 * v24);
    v25 = *v8;
    if (*v8 == this)
      goto LABEL_29;
  }
  if (v26)
    v8 = v26;
LABEL_14:
  v14 = *v8;
  ++*(_DWORD *)(v4 + 1528);
  if (v14 != (llvm::NoCFIValue *)-4096)
LABEL_15:
    --*(_DWORD *)(v4 + 1532);
LABEL_16:
  *v8 = this;
  v8[1] = 0;
LABEL_17:
  result = v8[1];
  if (!result)
  {
    v16 = llvm::User::operator new((llvm::User *)0x18, 1u);
    result = (llvm::NoCFIValue *)llvm::Value::Value((uint64_t)v16, *(llvm::Type **)this, 7);
    *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0xF8000000 | 1;
    if (*((_QWORD *)result - 4))
    {
      **((_QWORD **)result - 2) = *((_QWORD *)result - 3);
      v17 = *((_QWORD *)result - 3);
      if (v17)
        *(_QWORD *)(v17 + 16) = *((_QWORD *)result - 2);
    }
    *((_QWORD *)result - 4) = this;
    v20 = *((_QWORD *)this + 1);
    v19 = (_QWORD *)((char *)this + 8);
    v18 = v20;
    *((_QWORD *)result - 3) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = (char *)result - 24;
    *((_QWORD *)result - 2) = v19;
    *v19 = (char *)result - 32;
    v8[1] = result;
  }
  return result;
}

llvm::Type *llvm::NoCFIValue::handleOperandChangeImpl(llvm::NoCFIValue *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v4;
  llvm::Value *v5;
  uint64_t DesiredBytecodeVersion;
  llvm::Type *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  llvm::Value **v12;
  llvm::Value *v13;
  llvm::Value **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  llvm::Value *v18;
  llvm::Type *v19;
  llvm::Type **v20;
  llvm::Type *v21;
  uint64_t v23;
  int32x2_t *v24;
  llvm::Value **v25;
  uint64_t v26;
  int v27;
  int32x2_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value ***v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  llvm::Value *v41;
  int v42;
  int v43;
  llvm::Value **v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::Value *v53;

  v4 = llvm::Value::stripPointerCasts(a3);
  if (*((unsigned __int8 *)v4 + 16) >= 4u)
    v5 = 0;
  else
    v5 = v4;
  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v8 = *(_QWORD *)DesiredBytecodeVersion;
  v9 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 1536);
  if (!v9)
    goto LABEL_42;
  v10 = *(_QWORD *)(v8 + 1520);
  v11 = ((v5 >> 4) ^ (v5 >> 9)) & (v9 - 1);
  v12 = (llvm::Value **)(v10 + 16 * v11);
  v13 = *v12;
  if (v5 == *v12)
    goto LABEL_20;
  v14 = 0;
  v15 = 1;
  while (v13 != (llvm::Value *)-4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v13 == (llvm::Value *)-8192;
    if (v16)
      v14 = v12;
    v17 = v11 + v15++;
    v11 = v17 & (v9 - 1);
    v12 = (llvm::Value **)(v10 + 16 * v11);
    v13 = *v12;
    if (v5 == *v12)
      goto LABEL_20;
  }
  if (v14)
    v12 = v14;
  v37 = *(_DWORD *)(v8 + 1528);
  if (4 * v37 + 4 < 3 * v9)
  {
    if (v9 + ~v37 - *(_DWORD *)(v8 + 1532) > v9 >> 3)
      goto LABEL_17;
  }
  else
  {
LABEL_42:
    v9 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v8 + 1520, v9);
  v38 = *(_QWORD *)(v8 + 1520);
  v39 = *(_DWORD *)(v8 + 1536) - 1;
  v40 = v39 & ((v5 >> 4) ^ (v5 >> 9));
  v12 = (llvm::Value **)(v38 + 16 * v40);
  v41 = *v12;
  if (v5 == *v12)
  {
LABEL_44:
    ++*(_DWORD *)(v8 + 1528);
    if (v5 == (llvm::Value *)-4096)
      goto LABEL_19;
    goto LABEL_18;
  }
  v44 = 0;
  v45 = 1;
  while (v41 != (llvm::Value *)-4096)
  {
    if (v44)
      v46 = 0;
    else
      v46 = v41 == (llvm::Value *)-8192;
    if (v46)
      v44 = v12;
    v47 = v40 + v45++;
    v40 = v47 & v39;
    v12 = (llvm::Value **)(v38 + 16 * v40);
    v41 = *v12;
    if (v5 == *v12)
      goto LABEL_44;
  }
  if (v44)
    v12 = v44;
LABEL_17:
  v18 = *v12;
  ++*(_DWORD *)(v8 + 1528);
  if (v18 != (llvm::Value *)-4096)
LABEL_18:
    --*(_DWORD *)(v8 + 1532);
LABEL_19:
  *v12 = v5;
  v12[1] = 0;
LABEL_20:
  v19 = v12[1];
  if (v19)
  {
    v20 = *(llvm::Type ***)this;
    if (*(llvm::Type ***)v19 == v20)
      return v19;
    v53 = v12[1];
    llvm::ConstantFoldCastInstruction((llvm *)0x31, v19, v20, v7);
    v19 = v21;
    if (v21)
    {
      return v19;
    }
    else
    {
      v36 = *(_QWORD *)*v20 + 1544;
      LODWORD(v48) = 49;
      *((_QWORD *)&v48 + 1) = &v53;
      v49 = 1;
      v51 = 0;
      v52 = 0;
      v50 = 0;
      return (llvm::Type *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v36, (llvm::Type *)v20, &v48);
    }
  }
  else
  {
    v23 = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
    v24 = *(int32x2_t **)v23;
    v25 = (llvm::Value **)((char *)this - 32);
    v26 = *((_QWORD *)this - 4);
    v27 = *(_DWORD *)(*(_QWORD *)v23 + 1536);
    if (v27)
    {
      v28 = v24[190];
      v29 = v27 - 1;
      LODWORD(v30) = ((v26 >> 4) ^ (v26 >> 9)) & (v27 - 1);
      v31 = (uint64_t *)(*(_QWORD *)&v28 + 16 * v30);
      v32 = *v31;
      if (v26 == *v31)
      {
LABEL_26:
        *v31 = -8192;
        v24[191] = vadd_s32(v24[191], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v42 = 1;
        while (v32 != -4096)
        {
          v43 = v30 + v42++;
          v30 = v43 & v29;
          v32 = *(_QWORD *)(*(_QWORD *)&v28 + 16 * v30);
          if (v26 == v32)
          {
            v31 = (uint64_t *)(*(_QWORD *)&v28 + 16 * v30);
            goto LABEL_26;
          }
        }
      }
    }
    v12[1] = this;
    if (*((_QWORD *)this - 4))
    {
      **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
      v33 = *((_QWORD *)this - 3);
      if (v33)
        *(_QWORD *)(v33 + 16) = *((_QWORD *)this - 2);
    }
    *v25 = v5;
    if (v5)
    {
      v34 = (llvm::Value ***)((char *)v5 + 8);
      v35 = *((_QWORD *)v5 + 1);
      *((_QWORD *)this - 3) = v35;
      if (v35)
        *(_QWORD *)(v35 + 16) = (char *)this - 24;
      *((_QWORD *)this - 2) = v34;
      *v34 = v25;
    }
    if (*(_QWORD *)v5 != *(_QWORD *)this)
      *(_QWORD *)this = *(_QWORD *)v5;
    return 0;
  }
}

void llvm::ConstantExpr::getPtrToInt(llvm::ConstantExpr *this, llvm::Type **a2, llvm::Type *a3, llvm::Type *a4)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ConstantExpr *v13;

  v4 = (char)a3;
  v13 = this;
  llvm::ConstantFoldCastInstruction((llvm *)0x2F, this, a2, a4);
  if (!v6 && (v4 & 1) == 0)
  {
    v7 = *(_QWORD *)*a2 + 1544;
    LODWORD(v8) = 47;
    *((_QWORD *)&v8 + 1) = &v13;
    v9 = 1;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v7, (llvm::Type *)a2, &v8);
  }
}

void llvm::ConstantExpr::getAddrSpaceCast(llvm::ConstantExpr *this, llvm::Constant ***a2, llvm::Type *a3, llvm::Type *a4)
{
  char v4;
  llvm::Type *v6;
  uint64_t v7;
  llvm::Constant *v8;
  llvm::PointerType **v9;
  llvm::LLVMContext *v10;
  llvm::FixedVectorType *v11;
  llvm::FixedVectorType *v12;
  llvm::Type *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type *v22;

  v4 = (char)a3;
  v6 = this;
  v7 = *(_QWORD *)this;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 0x12)
  {
    v8 = (llvm::Constant *)a2;
    if (((_DWORD)a2[1] & 0xFE) != 0x12)
      goto LABEL_3;
LABEL_6:
    v8 = *a2[2];
    v9 = (llvm::PointerType **)*((_QWORD *)v8 + 3);
    if (*(llvm::PointerType ***)(v7 + 24) == v9)
      goto LABEL_13;
    goto LABEL_7;
  }
  v7 = **(_QWORD **)(v7 + 16);
  v8 = (llvm::Constant *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    goto LABEL_6;
LABEL_3:
  v9 = (llvm::PointerType **)*((_QWORD *)v8 + 3);
  if (*(llvm::PointerType ***)(v7 + 24) == v9)
    goto LABEL_13;
LABEL_7:
  v10 = (llvm::LLVMContext *)(*(_DWORD *)(v7 + 8) >> 8);
  if (!v9)
  {
    v11 = (llvm::FixedVectorType *)llvm::PointerType::get(*(llvm::PointerType **)v8, v10);
    if (((_DWORD)a2[1] & 0xFE) != 0x12)
      goto LABEL_10;
    goto LABEL_9;
  }
  v11 = (llvm::FixedVectorType *)llvm::PointerType::get(v9, v10);
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
  {
LABEL_9:
    llvm::FixedVectorType::get(v11, (llvm::Type *)*((unsigned int *)a2 + 8));
    v11 = v12;
  }
LABEL_10:
  if (*(llvm::FixedVectorType **)v6 != v11)
  {
    v22 = v6;
    llvm::ConstantFoldCastInstruction((llvm *)0x31, v6, (llvm::Type **)v11, a4);
    v6 = v13;
    if (!v13)
    {
      v14 = **(_QWORD **)v11 + 1544;
      LODWORD(v17) = 49;
      *((_QWORD *)&v17 + 1) = &v22;
      v18 = 1;
      v20 = 0;
      v21 = 0;
      v19 = 0;
      v6 = (llvm::Type *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v14, v11, &v17);
    }
  }
LABEL_13:
  v22 = v6;
  llvm::ConstantFoldCastInstruction((llvm *)0x32, v6, (llvm::Type **)a2, a4);
  if (!v15 && (v4 & 1) == 0)
  {
    v16 = (uint64_t)**a2 + 1544;
    LODWORD(v17) = 50;
    *((_QWORD *)&v17 + 1) = &v22;
    v18 = 1;
    v20 = 0;
    v21 = 0;
    v19 = 0;
    llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v16, (llvm::Type *)a2, &v17);
  }
}

void llvm::ConstantExpr::getPointerCast(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3, llvm::Type *a4)
{
  int v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  llvm::Constant *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ConstantExpr *v19;

  v5 = *((_DWORD *)a2 + 2);
  v6 = v5 & 0xFE;
  v7 = v5;
  if (v6 == 18)
    v7 = *(_BYTE *)(**((_QWORD **)a2 + 2) + 8);
  if (v7 == 13)
  {
    v19 = this;
    v8 = 47;
    llvm::ConstantFoldCastInstruction((llvm *)0x2F, this, (llvm::Type **)a2, a4);
    if (v9)
      return;
LABEL_15:
    v13 = **(_QWORD **)a2 + 1544;
    LODWORD(v14) = v8;
    *((_QWORD *)&v14 + 1) = &v19;
    v15 = 1;
    v17 = 0;
    v18 = 0;
    v16 = 0;
    llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v13, a2, &v14);
    return;
  }
  v10 = *(llvm::Constant **)this;
  v11 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v11 & 0xFE) != 0x12)
  {
    if (v6 != 18)
      goto LABEL_8;
LABEL_11:
    v5 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
    if (v5 != 15)
      goto LABEL_13;
    goto LABEL_12;
  }
  v11 = *(_DWORD *)(**((_QWORD **)v10 + 2) + 8);
  if (v6 == 18)
    goto LABEL_11;
LABEL_8:
  if (v5 != 15)
    goto LABEL_13;
LABEL_12:
  if ((v5 ^ v11) >= 0x100)
  {
    llvm::ConstantExpr::getAddrSpaceCast(this, (llvm::Constant ***)a2, 0, a4);
    return;
  }
LABEL_13:
  if (v10 != a2)
  {
    v19 = this;
    v8 = 49;
    llvm::ConstantFoldCastInstruction((llvm *)0x31, this, (llvm::Type **)a2, a4);
    if (!v12)
      goto LABEL_15;
  }
}

void llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(llvm::Constant **this, llvm::Constant *a2, llvm::Type *a3, llvm::Type *a4)
{
  llvm::Constant *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ConstantExpr *v15;

  v5 = *this;
  v6 = *((_DWORD *)*this + 2);
  if ((v6 & 0xFE) == 0x12)
  {
    v6 = *(_DWORD *)(**((_QWORD **)v5 + 2) + 8);
    v7 = *((_DWORD *)a2 + 2);
    if ((v7 & 0xFE) != 0x12)
    {
LABEL_3:
      if ((v7 ^ v6) < 0x100)
        goto LABEL_4;
LABEL_9:
      llvm::ConstantExpr::getAddrSpaceCast((llvm::ConstantExpr *)this, (llvm::Constant ***)a2, 0, a4);
      return;
    }
  }
  else
  {
    v7 = *((_DWORD *)a2 + 2);
    if ((v7 & 0xFE) != 0x12)
      goto LABEL_3;
  }
  if ((*(_DWORD *)(**((_QWORD **)a2 + 2) + 8) ^ v6) >= 0x100)
    goto LABEL_9;
LABEL_4:
  if (v5 != a2)
  {
    v15 = (llvm::ConstantExpr *)this;
    llvm::ConstantFoldCastInstruction((llvm *)0x31, (llvm::Type *)this, (llvm::Type **)a2, a4);
    if (!v8)
    {
      v9 = **(_QWORD **)a2 + 1544;
      LODWORD(v10) = 49;
      *((_QWORD *)&v10 + 1) = &v15;
      v11 = 1;
      v13 = 0;
      v14 = 0;
      v12 = 0;
      llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v9, a2, &v10);
    }
  }
}

uint64_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(uint64_t a1, llvm::Type *a2, _OWORD *a3)
{
  __int128 v6;
  int Hash;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  const void *v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  _QWORD **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD *v60;
  BOOL v61;
  unsigned int v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _QWORD **v73;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  size_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const void *v98;
  const void *v99;
  const void *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD v117[3];
  _BYTE v118[56];
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[24];
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v6 = a3[1];
  *(_OWORD *)&v118[8] = *a3;
  *(_QWORD *)v118 = a2;
  *(_OWORD *)&v118[24] = v6;
  *(_OWORD *)&v118[40] = a3[2];
  Hash = llvm::ConstantExprKeyType::getHash((llvm::ConstantExprKeyType *)&v118[8]);
  *(_DWORD *)&v121[8] = 0;
  *(_QWORD *)v121 = 0;
  {
    v83 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v83 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v83;
  }
  *(_DWORD *)&v121[4] = *(_DWORD *)&v118[4];
  *(_DWORD *)&v121[8] = Hash;
  v9 = *(_QWORD *)&v121[4];
  *(_OWORD *)&v121[8] = *(_OWORD *)v118;
  v10 = __ROR8__(v9 + 12, 12);
  v11 = (-348639895
       * ((((0x9DDFEA08EB382D69
                         * (v10 ^ ((0x9DDFEA08EB382D69
                                  * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *(_QWORD *)v118 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *(_QWORD *)v118 ^ v10)))) >> 32) >> 15) ^ (-348639895 * (v10 ^ (((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *(_QWORD *)v118 ^ v10)) >> 32) >> 15) ^ (-348639895 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *(_DWORD *)v118 ^ v10)))))) ^ v9;
  *(_DWORD *)v121 = v11;
  v122 = *(_OWORD *)&v118[16];
  v123 = *(_OWORD *)&v118[32];
  v124 = *(_QWORD *)&v118[48];
  v12 = *(_QWORD *)a1;
  v13 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v13)
  {
    v14 = v13 - 1;
    v15 = *(_QWORD *)&v121[8];
    v16 = v121[16];
    v17 = v121[17];
    v18 = *(unsigned __int16 *)&v121[18];
    v19 = *((_QWORD *)&v122 + 1);
    v21 = *((_QWORD *)&v123 + 1);
    v20 = (const void *)v123;
    v22 = v124;
    v23 = 4 * *((_QWORD *)&v123 + 1);
    v24 = v121[16] - 53;
    v25 = DWORD2(v122);
    if (DWORD2(v122))
    {
      v26 = (_QWORD *)v122;
      v115 = -*((_QWORD *)&v122 + 1);
      v27 = 1;
      v28 = v11 & v14;
      v29 = *(_QWORD *)(v12 + 8 * v28);
      if (v29 == -8192)
        goto LABEL_7;
      while (v29 != -4096)
      {
        if (v15 == *(_QWORD *)v29
          && *(unsigned __int16 *)(v29 + 18) == v16
          && v17 == *(unsigned __int8 *)(v29 + 17) >> 1
          && v19 == (*(_DWORD *)(v29 + 20) & 0x7FFFFFF))
        {
          v31 = v24 > 1 ? 0 : *(unsigned __int16 *)(v29 + 24);
          if (v31 == v18)
          {
            v32 = (_QWORD *)(v29 + 32 * v115);
            v33 = v25;
            v34 = v26;
            while (*v34 == *v32)
            {
              ++v34;
              v32 += 4;
              if (!--v33)
              {
                if (v16 == 63)
                {
                  v35 = *(const void **)(v29 + 24);
                  v36 = *(unsigned int *)(v29 + 32);
                }
                else
                {
                  v35 = 0;
                  v36 = 0;
                }
                if (v21 == v36)
                {
                  v98 = v20;
                  v101 = v19;
                  v110 = v16;
                  v112 = v14;
                  v84 = v15;
                  v107 = v17;
                  v104 = v18;
                  v92 = v22;
                  v95 = v21;
                  v89 = v23;
                  v86 = v24;
                  v37 = memcmp(v20, v35, v23);
                  v15 = v84;
                  v24 = v86;
                  v23 = v89;
                  v22 = v92;
                  v21 = v95;
                  v20 = v98;
                  v19 = v101;
                  v18 = v104;
                  v17 = v107;
                  v16 = v110;
                  v14 = v112;
                  if (!v37)
                  {
                    if (v110 == 34)
                    {
                      if (v92 == *(_QWORD *)(v29 + 24))
                        goto LABEL_30;
                    }
                    else if (!v92)
                    {
                      goto LABEL_30;
                    }
                  }
                }
                goto LABEL_7;
              }
            }
          }
        }
        do
        {
LABEL_7:
          v30 = v28 + v27++;
          v28 = v30 & v14;
          v29 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v29 == -8192);
      }
    }
    else
    {
      v75 = 1;
      v28 = v11 & v14;
      v76 = *(_QWORD *)(v12 + 8 * v28);
      if (v76 == -8192)
        goto LABEL_73;
      while (v76 != -4096)
      {
        if (v15 == *(_QWORD *)v76
          && *(unsigned __int16 *)(v76 + 18) == v16
          && v17 == *(unsigned __int8 *)(v76 + 17) >> 1
          && v19 == (*(_DWORD *)(v76 + 20) & 0x7FFFFFF))
        {
          v78 = v24 > 1 ? 0 : *(unsigned __int16 *)(v76 + 24);
          if (v78 == v18)
          {
            if (v16 == 63)
            {
              v79 = *(const void **)(v76 + 24);
              v80 = *(unsigned int *)(v76 + 32);
            }
            else
            {
              v79 = 0;
              v80 = 0;
            }
            if (v21 == v80)
            {
              v100 = v20;
              v103 = v19;
              v111 = v16;
              v114 = v14;
              v81 = v15;
              v109 = v17;
              v106 = v18;
              v94 = v22;
              v97 = v21;
              v91 = v23;
              v88 = v24;
              v82 = memcmp(v20, v79, v23);
              v24 = v88;
              v23 = v91;
              v22 = v94;
              v21 = v97;
              v20 = v100;
              v19 = v103;
              v18 = v106;
              v17 = v109;
              v16 = v111;
              v14 = v114;
              v15 = v81;
              if (!v82)
              {
                if (v111 == 34)
                {
                  if (v94 == *(_QWORD *)(v76 + 24))
                    goto LABEL_30;
                }
                else if (!v94)
                {
                  goto LABEL_30;
                }
              }
            }
          }
        }
        do
        {
LABEL_73:
          v77 = v28 + v75++;
          v28 = v77 & v14;
          v76 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v76 == -8192);
      }
    }
  }
  else
  {
    v28 = 0;
LABEL_30:
    if (v28 != v13)
      return *(_QWORD *)(v12 + 8 * v28);
  }
  v38 = a3[1];
  v117[0] = *a3;
  v117[1] = v38;
  v117[2] = a3[2];
  v39 = llvm::ConstantExprKeyType::create((llvm::ConstantExprKeyType *)v117, a2);
  v119 = v39;
  v40 = *(_DWORD *)(a1 + 16);
  if (v40)
  {
    v41 = 0;
    v42 = *(_QWORD *)a1;
    v43 = (v40 - 1);
    v44 = *(_QWORD *)&v121[8];
    v45 = v121[16];
    v46 = v121[17];
    v47 = *(unsigned __int16 *)&v121[18];
    v49 = *((_QWORD *)&v122 + 1);
    v48 = (_QWORD *)v122;
    v50 = DWORD2(v122);
    v51 = -*((_QWORD *)&v122 + 1);
    v53 = *((_QWORD *)&v123 + 1);
    v52 = (const void *)v123;
    v54 = 4 * *((_QWORD *)&v123 + 1);
    v55 = v124;
    v56 = v121[16] - 53;
    v57 = 1;
    v58 = v11 & v43;
    v59 = (_QWORD *)(*(_QWORD *)a1 + 8 * v58);
    v60 = (_QWORD *)*v59;
    if (*v59 == -8192)
      goto LABEL_35;
    while (v60 != (_QWORD *)-4096)
    {
      if (v44 == *v60
        && *((unsigned __int16 *)v60 + 9) == (_DWORD)v45
        && v46 == *((unsigned __int8 *)v60 + 17) >> 1
        && v49 == (*((_DWORD *)v60 + 5) & 0x7FFFFFF))
      {
        v63 = v56 > 1 ? 0 : *((unsigned __int16 *)v60 + 12);
        if (v63 == v47)
        {
          if (v50)
          {
            v64 = &v60[4 * v51];
            v65 = v50;
            v66 = v48;
            while (*v66 == *v64)
            {
              ++v66;
              v64 += 4;
              if (!--v65)
                goto LABEL_53;
            }
          }
          else
          {
LABEL_53:
            if ((_DWORD)v45 == 63)
            {
              v67 = (const void *)v60[3];
              v68 = *((unsigned int *)v60 + 8);
            }
            else
            {
              v67 = 0;
              v68 = 0;
            }
            if (v53 == v68)
            {
              v113 = v46;
              v116 = v42;
              v87 = v56;
              v69 = v43;
              v105 = v50;
              v108 = v44;
              v90 = v55;
              v93 = v54;
              v70 = v45;
              v99 = v52;
              v102 = v48;
              v85 = v57;
              v71 = v51;
              v96 = v53;
              v72 = memcmp(v52, v67, v54);
              v53 = v96;
              v52 = v99;
              v51 = v71;
              v57 = v85;
              v48 = v102;
              v50 = v105;
              v46 = v113;
              v45 = v70;
              v55 = v90;
              v54 = v93;
              v44 = v108;
              v43 = v69;
              v56 = v87;
              v42 = v116;
              if (!v72)
              {
                if ((_DWORD)v45 == 34)
                {
                  if (v90 == v60[3])
                    return v39;
                }
                else if (!v90)
                {
                  return v39;
                }
              }
            }
          }
        }
      }
      do
      {
LABEL_35:
        if (v41)
          v61 = 0;
        else
          v61 = v60 == (_QWORD *)-8192;
        if (v61)
          v41 = (_QWORD **)v59;
        v62 = v58 + v57++;
        v58 = v62 & v43;
        v59 = (_QWORD *)(v42 + 8 * v58);
        v60 = (_QWORD *)*v59;
      }
      while (*v59 == -8192);
    }
    if (v41)
      v73 = v41;
    else
      v73 = (_QWORD **)v59;
  }
  else
  {
    v73 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::InsertIntoBucketWithLookup<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>> const>(a1, v73, &v119, (uint64_t)&v120, (uint64_t)v121);
  return v39;
}

uint64_t llvm::ConstantExpr::isDesirableBinOp(llvm::ConstantExpr *this)
{
  return (0x21015u >> ((_BYTE)this - 13)) & 1;
}

BOOL llvm::ConstantExpr::isDesirableCastOp(llvm::ConstantExpr *this)
{
  return ((_DWORD)this - 47) < 0xFFFFFFF8;
}

llvm::APFloatBase *llvm::ConstantExpr::getFCmp(llvm::ConstantExpr *this, mlir::BytecodeWriterConfig *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  __int16 v7;
  llvm::APFloatBase *result;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v10;
  llvm::ScalableVectorType *Int1Ty;
  llvm::Type *v12;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v4 = (char)a4;
  v7 = (__int16)this;
  v21[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldCompareInstruction(this, a2, (unsigned __int8 *)a3);
  if (!result && (v4 & 1) == 0)
  {
    v21[0] = a2;
    v21[1] = a3;
    DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
    Int1Ty = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(DesiredBytecodeVersion, v10);
    v12 = Int1Ty;
    v13 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
      {
        llvm::VectorType::get(Int1Ty, (llvm::Type *)(*(unsigned int *)(v13 + 32) | ((unint64_t)(*(_DWORD *)(v13 + 8) == 19) << 32)));
        v12 = v14;
        v13 = *(_QWORD *)a2;
      }
    }
    v15 = **(_QWORD **)v13 + 1544;
    LOWORD(v16) = 54;
    WORD1(v16) = v7;
    *((_QWORD *)&v16 + 1) = v21;
    v17 = 2;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    return (llvm::APFloatBase *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v15, v12, &v16);
  }
  return result;
}

uint64_t llvm::ConstantExpr::getGetElementPtr(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, llvm::Type *a7)
{
  uint64_t v8;
  char v9;
  const llvm::Value **v11;
  uint64_t ElementPtr;
  llvm::Type *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  const llvm::Value **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t Splat;
  unint64_t TypeAtIndex;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  BOOL v46;
  char v47;
  char v48;
  uint64_t v49;
  llvm::Type *v50;
  char v51;
  mlir::BytecodeWriterConfig *v52;
  uint64_t v53;
  unint64_t v54;
  const llvm::Value **v55;
  unsigned int v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v8 = a6;
  v9 = a5;
  v11 = (const llvm::Value **)a3;
  ElementPtr = llvm::ConstantFoldGetElementPtr(a1, a2, a5, a6, a3, a4);
  if (ElementPtr)
    return ElementPtr;
  llvm::GetElementPtrInst::getGEPReturnType(a1, a2, (uint64_t)v11, a4);
  if (v16 == a7)
    return 0;
  v17 = 0;
  v56 = 0;
  if (v16 && (*((_DWORD *)v16 + 2) & 0xFE) == 0x12)
  {
    v56 = *((_DWORD *)v16 + 8);
    v17 = (unint64_t)(*((_DWORD *)v16 + 2) == 19) << 32;
  }
  v18 = a4 + 1;
  v52 = (mlir::BytecodeWriterConfig *)a2;
  v53 = a1;
  v51 = v9;
  v50 = v16;
  if (a4 == -1)
  {
    v19 = (char *)operator new(8uLL);
    *(_QWORD *)v19 = a2;
    v20 = v19 + 8;
    v21 = v19 + 8;
LABEL_13:
    v24 = &v11[a4];
    v25 = v53 | 4;
    v54 = v17 | v56;
    v55 = v24;
    while (1)
    {
      v26 = (uint64_t)*v11;
      if ((v25 & 4) == 0)
        break;
      if (v56 && (*(_DWORD *)(*(_QWORD *)v26 + 8) & 0xFE) != 0x12)
      {
        Splat = llvm::ConstantVector::getSplat(v54, *v11);
LABEL_21:
        v26 = Splat;
      }
LABEL_22:
      if (v20 < v21)
      {
        *(_QWORD *)v20 = v26;
        v20 += 8;
        TypeAtIndex = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) == 0)
          goto LABEL_48;
        goto LABEL_47;
      }
      v29 = v8;
      v30 = (v20 - v19) >> 3;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61)
        goto LABEL_70;
      if ((v21 - v19) >> 2 > v31)
        v31 = (v21 - v19) >> 2;
      if ((unint64_t)(v21 - v19) >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        if (v32 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v33 = operator new(8 * v32);
      }
      else
      {
        v33 = 0;
      }
      v34 = (uint64_t *)&v33[8 * v30];
      v57 = &v33[8 * v32];
      *v34 = v26;
      v35 = (char *)(v34 + 1);
      if (v20 == v19)
      {
        v8 = v29;
LABEL_45:
        operator delete(v19);
        goto LABEL_46;
      }
      v36 = v20 - 8 - v19;
      if (v36 < 0x168
        || &v33[v20 - v19 - 8 - (v36 & 0xFFFFFFFFFFFFFFF8)] > &v33[v20 - v19 - 8]
        || &v20[-(v36 & 0xFFFFFFFFFFFFFFF8) - 8] > v20 - 8
        || (unint64_t)(v19 - v33) < 0x20)
      {
        v37 = v20;
        v8 = v29;
        do
        {
LABEL_41:
          v38 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v34 = v38;
        }
        while (v37 != v19);
        goto LABEL_42;
      }
      v40 = (v36 >> 3) + 1;
      v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v37 = &v20[-v41];
      v34 = (uint64_t *)((char *)v34 - v41);
      v42 = &v33[8 * v30 - 16];
      v43 = v20 - 16;
      v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = *(_OWORD *)v43;
        *(v42 - 1) = *((_OWORD *)v43 - 1);
        *v42 = v45;
        v42 -= 2;
        v43 -= 32;
        v44 -= 4;
      }
      while (v44);
      v8 = v29;
      if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_41;
LABEL_42:
      if (v19)
        goto LABEL_45;
LABEL_46:
      v19 = (char *)v34;
      v20 = v35;
      v24 = v55;
      v21 = v57;
      TypeAtIndex = v25 & 0xFFFFFFFFFFFFFFF8;
      if ((v25 & 4) == 0)
        goto LABEL_48;
LABEL_47:
      if (!TypeAtIndex)
LABEL_48:
        TypeAtIndex = llvm::StructType::getTypeAtIndex((llvm::StructType *)TypeAtIndex, *v11);
      v39 = *(unsigned __int8 *)(TypeAtIndex + 8);
      if (TypeAtIndex && v39 == 17 || TypeAtIndex && (v39 & 0xFE) == 0x12)
      {
        v25 = *(_QWORD *)(TypeAtIndex + 24) | 4;
        if (++v11 == v24)
          goto LABEL_62;
      }
      else
      {
        if (v39 == 16)
          v25 = TypeAtIndex & 0xFFFFFFFFFFFFFFFBLL;
        else
          v25 = 0;
        if (++v11 == v24)
          goto LABEL_62;
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)v26 + 8) & 0xFE) != 0x12)
      goto LABEL_22;
    Splat = llvm::Constant::getSplatValue(*v11, 0);
    goto LABEL_21;
  }
  if (v18 >> 61)
LABEL_70:
    abort();
  v22 = 8 * v18;
  v23 = (char *)operator new(8 * v18);
  v19 = v23;
  *(_QWORD *)v23 = a2;
  v20 = v23 + 8;
  if (a4)
  {
    v21 = &v23[v22];
    goto LABEL_13;
  }
LABEL_62:
  v46 = v8 >= 0x3F || (v8 & 0xFF00000000) == 0;
  v47 = 2 * v8 + 2;
  if (v46)
    v47 = 0;
  v48 = v47 | v51;
  v49 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v52) + 1544;
  LOBYTE(v58) = 34;
  BYTE1(v58) = v48;
  WORD1(v58) = 0;
  *((_QWORD *)&v58 + 1) = v19;
  v59 = (v20 - v19) >> 3;
  v60 = 0;
  v61 = 0;
  v62 = v53;
  ElementPtr = llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v49, v50, &v58);
  if (v19)
    operator delete(v19);
  return ElementPtr;
}

uint64_t llvm::ConstantExpr::getNot(llvm::Constant **this, llvm::Constant *a2, const llvm::APInt *a3)
{
  llvm::APFloatBase *AllOnesValue;
  llvm::Constant *v5;
  uint64_t result;
  uint64_t v7;
  llvm::Type *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  AllOnesValue = llvm::Constant::getAllOnesValue(*this, a2, a3);
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1E, this, AllOnesValue, v5);
  if (!result)
  {
    if (*this)
    {
      v14[0] = this;
      v14[1] = AllOnesValue;
      v7 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)this) + 1544;
      v8 = *this;
      LODWORD(v9) = 30;
      *((_QWORD *)&v9 + 1) = v14;
      v10 = 2;
      v12 = 0;
      v13 = 0;
      v11 = 0;
      return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v7, v8, &v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getAdd(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  char v7;
  uint64_t result;
  uint64_t v9;
  llvm::Type *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  v4 = (char)a3;
  v16[2] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
    v7 = 2;
  else
    v7 = 0;
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0xD, this, a2, a4);
  if (!result)
  {
    if (*(_QWORD *)this)
    {
      v16[0] = this;
      v16[1] = a2;
      v9 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this) + 1544;
      v10 = *(llvm::Type **)this;
      LOBYTE(v11) = 13;
      BYTE1(v11) = v7 | v4;
      WORD1(v11) = 0;
      *((_QWORD *)&v11 + 1) = v16;
      v12 = 2;
      v14 = 0;
      v15 = 0;
      v13 = 0;
      return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v9, v10, &v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getXor(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t result;
  uint64_t v7;
  llvm::Type *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1E, this, a2, a4);
  if (!result)
  {
    if (*(_QWORD *)this)
    {
      v14[0] = this;
      v14[1] = a2;
      v7 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this) + 1544;
      v8 = *(llvm::Type **)this;
      LODWORD(v9) = 30;
      *((_QWORD *)&v9 + 1) = v14;
      v10 = 2;
      v12 = 0;
      v13 = 0;
      v11 = 0;
      return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v7, v8, &v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::APFloatBase *llvm::ConstantExpr::getBinOpIdentity(llvm::ConstantExpr *this, llvm::ConstantFP *a2, llvm::Type *a3, _BOOL4 a4)
{
  switch((int)this)
  {
    case 13:
    case 29:
    case 30:
      return (llvm::APFloatBase *)llvm::Constant::getNullValue(a2, (Type *)a2);
    case 14:
      return (llvm::APFloatBase *)llvm::ConstantFP::getZero(a2, (llvm::Type *)!a4);
    case 17:
      return (llvm::APFloatBase *)llvm::ConstantInt::get(a2, (llvm::Type *)1, 0, a4);
    case 18:
      return llvm::ConstantFP::get(a2, a2, 1.0);
    case 28:
      return llvm::Constant::getAllOnesValue(a2, a2, a3);
    default:
      if (!(_DWORD)a3 || this > 0x1B)
        return 0;
      if (((1 << (char)this) & 0xE018000) != 0)
        return (llvm::APFloatBase *)llvm::Constant::getNullValue(a2, (Type *)a2);
      if (((1 << (char)this) & 0x180000) != 0)
        return (llvm::APFloatBase *)llvm::ConstantInt::get(a2, (llvm::Type *)1, 0, a4);
      if ((_DWORD)this == 21)
        return llvm::ConstantFP::get(a2, a2, 1.0);
      return 0;
  }
}

const char *llvm::ConstantExpr::getOpcodeName(llvm::ConstantExpr *this)
{
  return llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int16 *)this + 9));
}

uint64_t llvm::GetElementPtrConstantExpr::GetElementPtrConstantExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, llvm::Type *a6)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v11 = a5 + 1;
  v12 = llvm::Value::Value(a1, a6, 5);
  *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 20) & 0xF8000000 | v11 & 0x7FFFFFF;
  *(_WORD *)(v12 + 18) = 34;
  *(_QWORD *)(v12 + 24) = a2;
  *(_QWORD *)(a1 + 32) = llvm::GetElementPtrInst::getIndexedType(a2, (uint64_t)a4, a5);
  v13 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  v14 = -v13;
  v15 = (_QWORD *)(a1 - 32 * v13);
  if (*v15)
  {
    v16 = a1 + 32 * v14;
    v18 = *(_QWORD **)(v16 + 16);
    v17 = (_QWORD *)(v16 + 16);
    *v18 = *(v17 - 1);
    v19 = *(v17 - 1);
    if (v19)
      *(_QWORD *)(v19 + 16) = *v17;
  }
  *v15 = a3;
  if (a3)
  {
    v22 = *(_QWORD *)(a3 + 8);
    v21 = (_QWORD *)(a3 + 8);
    v20 = v22;
    v23 = a1 + 32 * v14;
    *(_QWORD *)(v23 + 8) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = v23 + 8;
    *(_QWORD *)(v23 + 16) = v21;
    *v21 = v15;
  }
  v24 = *(_DWORD *)(a1 + 20);
  if ((v24 & 0x40000000) != 0)
  {
    v25 = *(_QWORD *)(a1 - 8);
    if (!(_DWORD)a5)
      return a1;
  }
  else
  {
    v25 = a1 - 32 * (v24 & 0x7FFFFFF);
    if (!(_DWORD)a5)
      return a1;
  }
  v26 = a5;
  v27 = v25 + 32;
  do
  {
    v28 = *a4;
    if (*(_QWORD *)v27)
    {
      **(_QWORD **)(v27 + 16) = *(_QWORD *)(v27 + 8);
      v29 = *(_QWORD *)(v27 + 8);
      if (v29)
        *(_QWORD *)(v29 + 16) = *(_QWORD *)(v27 + 16);
    }
    *(_QWORD *)v27 = v28;
    if (v28)
    {
      v32 = *(_QWORD *)(v28 + 8);
      v30 = (uint64_t *)(v28 + 8);
      v31 = v32;
      *(_QWORD *)(v27 + 8) = v32;
      if (v32)
        *(_QWORD *)(v31 + 16) = v27 + 8;
      *(_QWORD *)(v27 + 16) = v30;
      *v30 = v27;
    }
    ++a4;
    v27 += 32;
    --v26;
  }
  while (v26);
  return a1;
}

uint64_t llvm::GetElementPtrConstantExpr::getResultElementType(llvm::GetElementPtrConstantExpr *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t llvm::ConstantDataSequential::getRawDataValues(llvm::ConstantDataSequential *this)
{
  uint64_t v1;
  const char *v2;
  _QWORD v4[2];

  v1 = *((_QWORD *)this + 3);
  v4[0] = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  v4[1] = v2;
  llvm::TypeSize::operator unsigned long long(v4, v2);
  return v1;
}

uint64_t llvm::ConstantDataSequential::getImpl(llvm::Type *a1, llvm::Type *a2, llvm::ConstantAggregateZero *a3)
{
  const unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t v9;
  llvm::ConstantDataSequential *v10;
  llvm::Use *v11;
  llvm::ConstantAggregateZero **v12;
  llvm::ConstantDataSequential **v13;
  uint64_t v14;
  _QWORD *v15;
  llvm::Value *v16;
  llvm::ConstantDataSequential *v17;
  _QWORD *v18;
  llvm::Use *v19;
  llvm::ConstantDataSequential *v20;

  v4 = (const unsigned __int8 *)a2;
  if (!a2)
    return llvm::ConstantAggregateZero::get(a3, a2);
  a2 = a1;
  v5 = 0;
  while (!*((_BYTE *)a1 + v5))
  {
    if (v4 == (const unsigned __int8 *)++v5)
      return llvm::ConstantAggregateZero::get(a3, a2);
  }
  v7 = **(_QWORD **)a3 + 1448;
  v20 = 0;
  v9 = *llvm::StringMap<std::unique_ptr<mlir::OperationName::Impl>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<mlir::OperationName::Impl>>(v7, (int8x16_t *)a2, v4, (uint64_t *)&v20);
  v10 = v20;
  v20 = 0;
  if (v10)
  {
    llvm::ConstantDataSequential::~ConstantDataSequential(v10, v8);
    llvm::User::operator delete(v11);
  }
  v13 = (llvm::ConstantDataSequential **)(v9 + 8);
  v12 = *(llvm::ConstantAggregateZero ***)(v9 + 8);
  if (!v12)
  {
LABEL_12:
    v14 = v9 + 16;
    if (*((_BYTE *)a3 + 8) == 17)
    {
      v15 = llvm::User::operator new((llvm::User *)0x28, 0);
      result = llvm::Value::Value((uint64_t)v15, a3, 14);
      *(_DWORD *)(result + 20) &= 0xF8000000;
      *(_QWORD *)(result + 24) = v14;
      *(_QWORD *)(result + 32) = 0;
      v17 = *v13;
      *v13 = (llvm::ConstantDataSequential *)result;
      if (!v17)
        return result;
    }
    else
    {
      v18 = llvm::User::operator new((llvm::User *)0x30, 0);
      result = llvm::Value::Value((uint64_t)v18, a3, 15);
      *(_DWORD *)(result + 20) &= 0xF8000000;
      *(_QWORD *)(result + 24) = v14;
      *(_QWORD *)(result + 32) = 0;
      *(_BYTE *)(result + 40) &= ~1u;
      v17 = *v13;
      *v13 = (llvm::ConstantDataSequential *)result;
      if (!v17)
        return result;
    }
    llvm::ConstantDataSequential::~ConstantDataSequential(v17, v16);
    llvm::User::operator delete(v19);
    return (uint64_t)*v13;
  }
  while (1)
  {
    result = (uint64_t)v12;
    if (*v12 == a3)
      return result;
    v12 = (llvm::ConstantAggregateZero **)v12[4];
    if (!v12)
    {
      v13 = (llvm::ConstantDataSequential **)(result + 32);
      goto LABEL_12;
    }
  }
}

uint64_t llvm::ConstantDataArray::getFP(llvm::ArrayType *a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v5);
}

uint64_t llvm::ConstantDataArray::getString(llvm::Type *a1, llvm::Type *a2, unint64_t a3, char a4)
{
  uint64_t v7;
  llvm::ArrayType *IntNTy;
  llvm::ConstantAggregateZero *v9;
  char *v11;
  char *v12;
  llvm::Type *v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  llvm::Type *v26;
  llvm::Type *v27;
  llvm::ArrayType *v28;
  llvm::ConstantAggregateZero *v29;
  uint64_t Impl;
  void *v31;
  __int128 v32;
  _QWORD v33[9];

  v33[8] = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) == 0)
  {
    IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(a1, (llvm::LLVMContext *)8, a3);
    llvm::ArrayType::get(IntNTy, (llvm::Type *)a3);
    return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)a3, v9);
  }
  v31 = v33;
  v32 = xmmword_181236C00;
  if (a3 >= 0x41)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v31, v33, a3, 1);
    v7 = v32;
    if (!a3)
      goto LABEL_23;
LABEL_7:
    v11 = (char *)v31;
    v12 = (char *)v31 + v7;
    if (a3 < 8)
    {
      v13 = a2;
      goto LABEL_21;
    }
    v13 = a2;
    if ((unint64_t)((_BYTE *)v31 + v7 - (_BYTE *)a2) >= 0x20)
    {
      if (a3 < 0x20)
      {
        v14 = 0;
        goto LABEL_16;
      }
      v14 = a3 & 0xFFFFFFFFFFFFFFE0;
      v15 = (__int128 *)((char *)a2 + 16);
      v16 = (char *)v31 + v7 + 16;
      v17 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (a3 == v14)
        goto LABEL_22;
      if ((a3 & 0x18) != 0)
      {
LABEL_16:
        v12 += a3 & 0xFFFFFFFFFFFFFFF8;
        v13 = (llvm::Type *)((char *)a2 + (a3 & 0xFFFFFFFFFFFFFFF8));
        v19 = (uint64_t *)((char *)a2 + v14);
        v20 = &v11[v14 + v7];
        v21 = v14 - (a3 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v22 = *v19++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          v21 += 8;
        }
        while (v21);
        if (a3 == (a3 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_22;
        goto LABEL_21;
      }
      v13 = (llvm::Type *)((char *)a2 + v14);
      v12 += v14;
    }
    do
    {
LABEL_21:
      v23 = *(_BYTE *)v13;
      v13 = (llvm::Type *)((char *)v13 + 1);
      *v12++ = v23;
    }
    while (v13 != (llvm::Type *)((char *)a2 + a3));
LABEL_22:
    v7 = v32;
    goto LABEL_23;
  }
  v7 = 0;
  if (a3)
    goto LABEL_7;
LABEL_23:
  v24 = v7 + a3;
  *(_QWORD *)&v32 = v7 + a3;
  v25 = v7 + a3 + 1;
  if (v25 > *((_QWORD *)&v32 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v31, v33, v25, 1);
    v24 = v32;
  }
  *((_BYTE *)v31 + v24) = 0;
  v26 = (llvm::Type *)v31;
  *(_QWORD *)&v32 = v32 + 1;
  v27 = (llvm::Type *)v32;
  v28 = (llvm::ArrayType *)llvm::Type::getIntNTy(a1, (llvm::LLVMContext *)8, v25);
  llvm::ArrayType::get(v28, v27);
  Impl = llvm::ConstantDataSequential::getImpl(v26, v27, v29);
  if (v31 != v33)
    free(v31);
  return Impl;
}

uint64_t llvm::ConstantDataVector::get(llvm::Type *a1, llvm::LLVMContext *a2, llvm::Type *a3)
{
  llvm::FixedVectorType *Int8Ty;
  llvm::ConstantAggregateZero *v6;

  Int8Ty = (llvm::FixedVectorType *)llvm::Type::getInt8Ty(a1, a2);
  llvm::FixedVectorType::get(Int8Ty, a3);
  return llvm::ConstantDataSequential::getImpl(a2, a3, v6);
}

{
  llvm::FixedVectorType *Int16Ty;
  llvm::ConstantAggregateZero *v6;

  Int16Ty = (llvm::FixedVectorType *)llvm::Type::getInt16Ty(a1, a2);
  llvm::FixedVectorType::get(Int16Ty, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (_QWORD)a3), v6);
}

{
  llvm::FixedVectorType *Int32Ty;
  llvm::ConstantAggregateZero *v6;

  Int32Ty = (llvm::FixedVectorType *)llvm::Type::getInt32Ty(a1, a2);
  llvm::FixedVectorType::get(Int32Ty, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v6);
}

{
  llvm::FixedVectorType *Int64Ty;
  llvm::ConstantAggregateZero *v6;

  Int64Ty = (llvm::FixedVectorType *)llvm::Type::getInt64Ty(a1, a2);
  llvm::FixedVectorType::get(Int64Ty, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v6);
}

uint64_t llvm::ConstantDataVector::getFP(llvm::FixedVectorType *a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v5);
}

void llvm::ConstantDataSequential::getElementAsInteger(llvm::ConstantDataSequential *this)
{
  const char *v2;
  uint64_t v3;
  _QWORD v4[2];

  v4[0] = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  v4[1] = v2;
  llvm::TypeSize::operator unsigned long long(v4, v2);
  HIDWORD(v3) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8) >> 8;
  LODWORD(v3) = HIDWORD(v3) - 8;
  __asm { BR              X11 }
}

uint64_t sub_180CC2294@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + a1);
}

uint64_t sub_180CC22AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t sub_180CC22C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(unsigned __int16 *)(v1 + a1);
}

uint64_t sub_180CC22DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + a1);
}

void llvm::ConstantDataSequential::getElementAsAPFloat(llvm::ConstantDataSequential *this)
{
  const char *v2;
  _QWORD v3[2];

  v3[0] = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  v3[1] = v2;
  llvm::TypeSize::operator unsigned long long(v3, v2);
  __asm { BR              X11 }
}

void sub_180CC2360(llvm::APFloatBase *a1@<X0>, uint64_t a2@<X8>, void *__p, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  const llvm::APInt *v12;
  llvm::APFloatBase *v13;
  llvm::detail::IEEEFloat *v14;
  llvm::APFloatBase *v15;
  const llvm::APInt *v16;
  unsigned int v17;

  v12 = (const llvm::APInt *)*(unsigned __int16 *)(v11 + a2);
  v13 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(a1);
  v17 = 16;
  v16 = v12;
  v14 = (llvm::detail::IEEEFloat *)(v10 + 8);
  v15 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v13);
  if (v15 != v13)
  {
    llvm::detail::IEEEFloat::IEEEFloat(v14, v13, &v16);
    if (v17 < 0x41)
      return;
LABEL_7:
    if (v16)
      operator delete[](v16);
    return;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v14, (uint64_t)v15, (uint64_t)&v16);
  if (v17 >= 0x41)
    goto LABEL_7;
}

BOOL llvm::ConstantDataSequential::isString(llvm::ConstantDataSequential *this, int a2)
{
  return *(_BYTE *)(*(_QWORD *)this + 8) == 17
      && llvm::Type::isIntegerTy(*(llvm::Type **)(*(_QWORD *)this + 24), a2);
}

BOOL llvm::ConstantDataVector::isSplatData(llvm::ConstantDataVector *this)
{
  char *v2;
  const char *v3;
  const char *v4;
  unint64_t v5;
  int v6;
  int v7;
  _BOOL8 result;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  int v12;
  unint64_t PrimitiveSizeInBits;
  const char *v14;

  v2 = (char *)*((_QWORD *)this + 3);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  v14 = v3;
  llvm::TypeSize::operator unsigned long long(&PrimitiveSizeInBits, v3);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  v14 = v4;
  v5 = llvm::TypeSize::operator unsigned long long(&PrimitiveSizeInBits, v4);
  v6 = *(_DWORD *)(*(_QWORD *)this + 32);
  v7 = v6 - 1;
  if (v6 == 1)
    return 1;
  v9 = v5 >> 3;
  v10 = (v5 >> 3);
  v11 = v5 >> 3;
  while (1)
  {
    v12 = memcmp(v2, &v2[v11], v10);
    result = v12 == 0;
    if (v12)
      break;
    LODWORD(v11) = v11 + v9;
    if (!--v7)
      return 1;
  }
  return result;
}

void llvm::Constant::handleOperandChange(llvm::Constant *this, Value *a2, Value *a3)
{
  __asm { BR              X10 }
}

void sub_180CC258C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  mlir::memref::LoadOp::getStored(v3, a2, a3);
}

void sub_180CC2594(llvm::Value *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  Value *v12;

  if (a1)
  {
    llvm::Value::replaceAllUsesWith(v12, a1);
    llvm::Constant::destroyConstant((llvm::Constant *)v12);
  }
}

uint64_t llvm::ConstantExpr::handleOperandChangeImpl(llvm::ConstantExpr *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  llvm::Constant *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  llvm::ConstantExpr *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t **DesiredBytecodeVersion;
  void *v19;
  uint64_t v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x800000000;
  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFF) != 0)
  {
    LODWORD(v8) = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = this;
    do
    {
      if (*((llvm::Value **)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) == a2)
      {
        ++v11;
        v10 = v9;
        v13 = a3;
      }
      else
      {
        v13 = (llvm::Value *)*((_QWORD *)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      }
      if (v8 >= HIDWORD(v20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v8 + 1, 8);
        LODWORD(v8) = v20;
      }
      *((_QWORD *)v19 + v8) = v13;
      v8 = (llvm::Constant *)(v20 + 1);
      LODWORD(v20) = v20 + 1;
      ++v9;
      v12 = (llvm::ConstantExpr *)((char *)v12 + 32);
    }
    while (v7 != v9);
    v14 = v19;
  }
  else
  {
    v8 = 0;
    v11 = 0;
    v10 = 0;
    v14 = v21;
  }
  llvm::ConstantExpr::getWithOperands(this, (uint64_t)v14, v8, *(llvm::Constant **)this, (Type *)1, 0);
  v16 = v15;
  if (!v15)
  {
    DesiredBytecodeVersion = (int32x2_t **)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
    v16 = llvm::ConstantUniqueMap<llvm::ConstantExpr>::replaceOperandsInPlace(*DesiredBytecodeVersion + 193, (uint64_t)v19, v20, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, v11, v10);
  }
  if (v19 != v21)
    free(v19);
  return v16;
}

uint64_t llvm::ConstantArray::handleOperandChangeImpl(llvm::ConstantArray *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  llvm::Value **v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  llvm::Value *v15;
  unsigned int v16;
  llvm::APInt *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t Impl;
  _QWORD *DesiredBytecodeVersion;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x800000000;
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v6 & 0x7FFFFFF, 8);
    v6 = *((_DWORD *)this + 5);
  }
  if ((v6 & 0x40000000) != 0)
  {
    v8 = (llvm::Value **)*((_QWORD *)this - 1);
    v7 = v6 & 0x7FFFFFF;
    if ((_DWORD)v7)
      goto LABEL_5;
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (llvm::Value **)((char *)this - 32 * v7);
    if ((_DWORD)v7)
    {
LABEL_5:
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = v24;
      v13 = 32 * v7;
      v14 = 1;
      do
      {
        if (*v8 == a2)
        {
          ++v11;
          v10 = v9;
          v15 = a3;
        }
        else
        {
          v15 = *v8;
        }
        if (v12 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v12 + 1, 8);
          v12 = v24;
        }
        *((_QWORD *)v23 + v12) = v15;
        v12 = v24 + 1;
        LODWORD(v24) = v24 + 1;
        v14 &= v15 == a3;
        v8 += 4;
        ++v9;
        v13 -= 32;
      }
      while (v13);
      if ((v14 & 1) == 0)
        goto LABEL_32;
      v16 = *((unsigned __int8 *)a3 + 16);
      if (!a3)
        goto LABEL_21;
      goto LABEL_17;
    }
  }
  v10 = 0;
  v11 = 0;
  v16 = *((unsigned __int8 *)a3 + 16);
  if (!a3)
    goto LABEL_21;
LABEL_17:
  if (v16 == 16)
  {
    v17 = (llvm::Value *)((char *)a3 + 24);
    v18 = *((_DWORD *)a3 + 8);
    if (v18 >= 0x41)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v17) != v18)
        goto LABEL_32;
    }
    else if (*(_QWORD *)v17)
    {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_21:
  if (a3 && v16 == 17)
  {
    if ((llvm::ConstantFP::isExactlyValue(a3, 0.0) & 1) == 0)
    {
      v16 = *((unsigned __int8 *)a3 + 16);
      goto LABEL_25;
    }
LABEL_31:
    v19 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)this, a2);
    goto LABEL_34;
  }
  if (v16 <= 0x14 && ((1 << v16) & 0x1C2000) != 0)
    goto LABEL_31;
LABEL_25:
  if (v16 - 11 <= 1)
  {
    v19 = llvm::UndefValue::get(*(llvm::UndefValue **)this, a2);
    goto LABEL_34;
  }
LABEL_32:
  Impl = llvm::ConstantArray::getImpl(*(llvm::PoisonValue **)this, (llvm::Type *)v23, v24);
  if (Impl)
    goto LABEL_35;
  DesiredBytecodeVersion = (_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v19 = llvm::ConstantUniqueMap<llvm::ConstantArray>::replaceOperandsInPlace(*DesiredBytecodeVersion + 1280, v23, v24, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, v11, v10);
LABEL_34:
  Impl = v19;
LABEL_35:
  if (v23 != v25)
    free(v23);
  return Impl;
}

uint64_t llvm::ConstantStruct::handleOperandChangeImpl(llvm::ConstantStruct *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  llvm::Value **v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  llvm::Value *v16;
  unsigned int v17;
  llvm::APInt *v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  _QWORD *DesiredBytecodeVersion;
  void *v24;
  uint64_t v25;
  _QWORD v26[9];

  v26[8] = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = (llvm::Value **)*((_QWORD *)this - 1);
    LODWORD(v7) = v6 & 0x7FFFFFF;
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (llvm::Value **)((char *)this - 32 * v7);
  }
  v24 = v26;
  v25 = 0x800000000;
  if (v7 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v26, v7, 8);
    LODWORD(v7) = *((_DWORD *)this + 5) & 0x7FFFFFF;
  }
  if ((_DWORD)v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v7;
    v13 = v25;
    v14 = 32 * v12;
    v15 = 1;
    do
    {
      if (*v8 == a2)
      {
        ++v11;
        v10 = v9;
        v16 = a3;
      }
      else
      {
        v16 = *v8;
      }
      if (v13 >= HIDWORD(v25))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v26, v13 + 1, 8);
        v13 = v25;
      }
      *((_QWORD *)v24 + v13) = v16;
      v13 = v25 + 1;
      LODWORD(v25) = v25 + 1;
      v15 &= v16 == a3;
      v8 += 4;
      ++v9;
      v14 -= 32;
    }
    while (v14);
    if ((v15 & 1) == 0)
      goto LABEL_35;
    v17 = *((unsigned __int8 *)a3 + 16);
    if (!a3)
      goto LABEL_22;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v17 = *((unsigned __int8 *)a3 + 16);
    if (!a3)
      goto LABEL_22;
  }
  if (v17 == 16)
  {
    v18 = (llvm::Value *)((char *)a3 + 24);
    v19 = *((_DWORD *)a3 + 8);
    if (v19 >= 0x41)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v18) != v19)
        goto LABEL_35;
    }
    else if (*(_QWORD *)v18)
    {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_22:
  if (a3 && v17 == 17)
  {
    if ((llvm::ConstantFP::isExactlyValue(a3, 0.0) & 1) == 0)
    {
      v17 = *((unsigned __int8 *)a3 + 16);
      goto LABEL_26;
    }
LABEL_33:
    v20 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)this, a2);
    v21 = v24;
    if (v24 == v26)
      return v20;
    goto LABEL_36;
  }
  if (v17 <= 0x14 && ((1 << v17) & 0x1C2000) != 0)
    goto LABEL_33;
LABEL_26:
  if (v17 - 11 <= 1)
  {
    v20 = llvm::UndefValue::get(*(llvm::UndefValue **)this, a2);
    v21 = v24;
    if (v24 == v26)
      return v20;
    goto LABEL_36;
  }
LABEL_35:
  DesiredBytecodeVersion = (_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v20 = llvm::ConstantUniqueMap<llvm::ConstantArray>::replaceOperandsInPlace(*DesiredBytecodeVersion + 1304, v24, v25, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, v11, v10);
  v21 = v24;
  if (v24 != v26)
LABEL_36:
    free(v21);
  return v20;
}

uint64_t llvm::ConstantVector::handleOperandChangeImpl(llvm::ConstantVector *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  llvm::ConstantVector *v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t Impl;
  _QWORD *DesiredBytecodeVersion;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x800000000;
  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v7, 8);
    v8 = v19;
    LODWORD(v7) = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if ((_DWORD)v7)
      goto LABEL_3;
LABEL_12:
    v11 = 0;
    v10 = 0;
    goto LABEL_13;
  }
  v8 = 0;
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_3:
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = this;
  v13 = v7;
  do
  {
    if (*((llvm::Value **)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) == a2)
    {
      ++v11;
      v10 = v9;
      v14 = a3;
    }
    else
    {
      v14 = (llvm::Value *)*((_QWORD *)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    }
    if (v8 >= HIDWORD(v19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v8 + 1, 8);
      v8 = v19;
    }
    *((_QWORD *)v18 + v8) = v14;
    v8 = v19 + 1;
    LODWORD(v19) = v19 + 1;
    ++v9;
    v12 = (llvm::ConstantVector *)((char *)v12 + 32);
  }
  while (v13 != v9);
LABEL_13:
  Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v18, v8);
  if (!Impl)
  {
    DesiredBytecodeVersion = (_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
    Impl = llvm::ConstantUniqueMap<llvm::ConstantArray>::replaceOperandsInPlace(*DesiredBytecodeVersion + 1328, v18, v19, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, v11, v10);
  }
  if (v18 != v20)
    free(v18);
  return Impl;
}

uint64_t llvm::ConstantUniqueMap<llvm::ConstantArray>::replaceOperandsInPlace(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  _QWORD v55[2];
  _QWORD *v56;
  __int128 v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)a4;
  v17 = llvm::hashing::detail::hash_combine_range_impl<char const>(a2, (uint64_t)&a2[a3]);
  DWORD2(v57) = 0;
  *(_QWORD *)&v57 = 0;
  v19 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v18 & 1) == 0)
  {
    v54 = v17;
    v19 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v52 = v51;
    v17 = v54;
    if (v52)
    {
      v53 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v53 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v53;
      v19 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v17 = v54;
    }
  }
  v20 = v19[19];
  *(_QWORD *)((char *)&v57 + 4) = __PAIR64__(v17, HIDWORD(v16));
  v21 = __ROR8__(__PAIR64__(v17, HIDWORD(v16)) + 12, 12);
  v22 = 0x9DDFEA08EB382D69
      * (v21 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v16 ^ v21)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v16 ^ v21)));
  LODWORD(v57) = (-348639895 * ((v22 >> 47) ^ v22)) ^ HIDWORD(v16);
  *((_QWORD *)&v57 + 1) = v16;
  v58 = a2;
  v59 = a3;
  v55[0] = 0;
  v23 = llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (int *)&v57, v55);
  v24 = *(_QWORD *)a1;
  v25 = *(unsigned int *)(a1 + 16);
  if (v23 && v55[0] != v24 + 8 * v25)
    return *(_QWORD *)v55[0];
  if (!(_DWORD)v25)
  {
    v27 = 0;
LABEL_12:
    v28 = (uint64_t *)(v24 + 8 * v27);
    goto LABEL_13;
  }
  LODWORD(v27) = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t *)a4) & (v25 - 1);
  v28 = (uint64_t *)(v24 + 8 * v27);
  v29 = *v28;
  if (*v28 != a4)
  {
    v30 = 1;
    while (v29 != -4096)
    {
      v31 = v27 + v30++;
      v27 = v31 & (v25 - 1);
      v29 = *(_QWORD *)(v24 + 8 * v27);
      if (v29 == a4)
        goto LABEL_12;
    }
    v24 = *(_QWORD *)a1;
    v27 = *(unsigned int *)(a1 + 16);
    goto LABEL_12;
  }
LABEL_13:
  *v28 = -8192;
  *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  v32 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
  if (a7 == 1)
  {
    v33 = a4 - 32 * v32;
    v34 = v33 + 32 * a8;
    if (*(_QWORD *)v34)
    {
      **(_QWORD **)(v34 + 16) = *(_QWORD *)(v34 + 8);
      v35 = *(_QWORD *)(v34 + 8);
      if (v35)
        *(_QWORD *)(v35 + 16) = *(_QWORD *)(v34 + 16);
    }
    *(_QWORD *)v34 = a6;
    if (a6)
    {
      v38 = *(_QWORD *)(a6 + 8);
      v37 = (_QWORD *)(a6 + 8);
      v36 = v38;
      v39 = v33 + 32 * a8;
      *(_QWORD *)(v39 + 8) = v38;
      if (v38)
        *(_QWORD *)(v36 + 16) = v39 + 8;
      *(_QWORD *)(v39 + 16) = v37;
      *v37 = v34;
    }
  }
  else if ((_DWORD)v32)
  {
    v32 = v32;
    if (a6)
    {
      v40 = (_QWORD *)(a6 + 8);
      v41 = a4;
      do
      {
        v42 = v41 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF);
        if (*(_QWORD *)v42 == a5)
        {
          if (a5)
          {
            **(_QWORD **)(v42 + 16) = *(_QWORD *)(v42 + 8);
            v43 = *(_QWORD *)(v42 + 8);
            if (v43)
              *(_QWORD *)(v43 + 16) = *(_QWORD *)(v42 + 16);
          }
          *(_QWORD *)v42 = a6;
          v44 = *(_QWORD *)(a6 + 8);
          *(_QWORD *)(v42 + 8) = v44;
          if (v44)
            *(_QWORD *)(v44 + 16) = v42 + 8;
          *(_QWORD *)(v42 + 16) = v40;
          *v40 = v42;
        }
        v41 += 32;
        --v32;
      }
      while (v32);
    }
    else
    {
      v45 = a4;
      do
      {
        v46 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
        v47 = 32 * v46;
        if (*(_QWORD *)(v45 - 32 * v46) == a5)
        {
          if (a5)
          {
            v48 = v45 - 32 * v46;
            **(_QWORD **)(v48 + 16) = *(_QWORD *)(v48 + 8);
            v49 = *(_QWORD *)(v48 + 8);
            if (v49)
              *(_QWORD *)(v49 + 16) = *(_QWORD *)(v48 + 16);
          }
          *(_QWORD *)(v45 - v47) = 0;
        }
        v45 += 32;
        --v32;
      }
      while (v32);
    }
  }
  v55[0] = a4;
  v56 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (int *)&v57, &v56) & 1) == 0)
  {
    v50 = llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, (uint64_t)v55, (int *)&v57, v56);
    *v50 = v55[0];
  }
  return 0;
}

uint64_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::replaceOperandsInPlace(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int Hash;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  size_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int32x2_t *v55;
  int v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int32 v78;
  _QWORD **v79;
  int32x2_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const void *v90;
  uint64_t v91;
  size_t v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  int v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  int v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  const void *v105;
  uint64_t v106;
  uint64_t v107;
  int32x2_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  _QWORD **v113;
  unint64_t v114;
  int v115;
  size_t v116;
  uint64_t v117;
  const void *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  const void *v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int32x2_t *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE v145[24];
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v13 = *(unsigned __int16 *)(a4 + 18);
  v14 = *(unsigned __int8 *)(a4 + 17) >> 1;
  if ((v13 - 53) > 1)
  {
    if (v13 == 34)
    {
      v15 = 0;
      v16 = 0;
      v18 = 0;
      v17 = *(_QWORD *)(a4 + 24);
    }
    else if (v13 == 63)
    {
      v18 = 0;
      v17 = 0;
      v16 = *(_QWORD *)(a4 + 24);
      v15 = *(unsigned int *)(a4 + 32);
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v18 = 0;
      v17 = 0;
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = *(_WORD *)(a4 + 24);
  }
  *(_QWORD *)&v139 = *(_QWORD *)a4;
  BYTE8(v139) = *(_WORD *)(a4 + 18);
  BYTE9(v139) = v14;
  WORD5(v139) = v18;
  *(_QWORD *)&v140 = a2;
  *((_QWORD *)&v140 + 1) = a3;
  *(_QWORD *)&v141 = v16;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = v17;
  Hash = llvm::ConstantExprKeyType::getHash((llvm::ConstantExprKeyType *)((char *)&v139 + 8));
  *(_DWORD *)&v145[8] = 0;
  *(_QWORD *)v145 = 0;
  {
    v114 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v114 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v114;
  }
  *(_DWORD *)&v145[4] = DWORD1(v139);
  *(_DWORD *)&v145[8] = Hash;
  v21 = *(_QWORD *)&v145[4];
  *(_OWORD *)&v145[8] = v139;
  v22 = __ROR8__(v21 + 12, 12);
  v23 = (-348639895
       * ((((0x9DDFEA08EB382D69
                         * (v22 ^ ((0x9DDFEA08EB382D69
                                  * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (unint64_t)v139 ^ v22)) >> 47) ^ (0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (unint64_t)v139 ^ v22)))) >> 32) >> 15) ^ (-348639895 * (v22 ^ (((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (unint64_t)v139 ^ v22)) >> 32) >> 15) ^ (-348639895 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ v139 ^ v22)))))) ^ v21;
  *(_DWORD *)v145 = v23;
  v146 = v140;
  v147 = v141;
  v148 = v142;
  v24 = *a1;
  v138 = a1;
  v25 = a1[2].u32[0];
  if ((_DWORD)v25)
  {
    v26 = (v25 - 1);
    v27 = *(_QWORD *)&v145[8];
    v28 = v145[16];
    v29 = v145[17];
    v30 = *(unsigned __int16 *)&v145[18];
    v32 = *((_QWORD *)&v146 + 1);
    v31 = (_QWORD *)v146;
    v33 = DWORD2(v146);
    v34 = -*((_QWORD *)&v146 + 1);
    v36 = *((_QWORD *)&v147 + 1);
    v35 = (const void *)v147;
    v37 = 4 * *((_QWORD *)&v147 + 1);
    v135 = v148;
    v133 = v145[16] - 53;
    v38 = 1;
    v39 = v23 & v26;
    v40 = *(_QWORD *)(*(_QWORD *)&v24 + 8 * v39);
    if (v40 == -8192)
      goto LABEL_13;
    while (v40 != -4096)
    {
      if (v27 == *(_QWORD *)v40
        && *(unsigned __int16 *)(v40 + 18) == (_DWORD)v28
        && v29 == *(unsigned __int8 *)(v40 + 17) >> 1
        && v32 == (*(_DWORD *)(v40 + 20) & 0x7FFFFFF))
      {
        v42 = v133 > 1 ? 0 : *(unsigned __int16 *)(v40 + 24);
        if (v42 == v30)
        {
          if (v33)
          {
            v43 = (_QWORD *)(v40 + 32 * v34);
            v44 = v33;
            v45 = v31;
            while (*v45 == *v43)
            {
              ++v45;
              v43 += 4;
              if (!--v44)
                goto LABEL_26;
            }
          }
          else
          {
LABEL_26:
            if ((_DWORD)v28 == 63)
            {
              v46 = *(const void **)(v40 + 24);
              v47 = *(unsigned int *)(v40 + 32);
            }
            else
            {
              v46 = 0;
              v47 = 0;
            }
            if (v36 == v47)
            {
              v131 = a8;
              v129 = v23;
              v48 = v26;
              v127 = v27;
              v115 = v38;
              v49 = v28;
              v125 = v29;
              v120 = v33;
              v122 = v31;
              v118 = v35;
              v119 = v34;
              v116 = v37;
              v117 = v36;
              v50 = memcmp(v35, v46, v37);
              v37 = v116;
              v36 = v117;
              v35 = v118;
              v34 = v119;
              v33 = v120;
              v31 = v122;
              v29 = v125;
              v28 = v49;
              v38 = v115;
              v27 = v127;
              v26 = v48;
              v23 = v129;
              a8 = v131;
              if (!v50)
              {
                if ((_DWORD)v28 == 34)
                {
                  if (v135 == *(_QWORD *)(v40 + 24))
                    goto LABEL_35;
                }
                else if (!v135)
                {
LABEL_35:
                  if (v39 == v25)
                    break;
                  return *(_QWORD *)(*(_QWORD *)&v24 + 8 * v39);
                }
              }
            }
          }
        }
      }
      do
      {
LABEL_13:
        v41 = v39 + v38++;
        v39 = v41 & v26;
        v40 = *(_QWORD *)(*(_QWORD *)&v24 + 8 * v39);
      }
      while (v40 == -8192);
    }
  }
  v51 = v23;
  if (!(_DWORD)v25)
  {
    v52 = 0;
    v55 = v138;
LABEL_45:
    v53 = (uint64_t *)(*(_QWORD *)&v24 + 8 * v52);
    goto LABEL_46;
  }
  LODWORD(v52) = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue((uint64_t *)a4) & (v25 - 1);
  v53 = (uint64_t *)(*(_QWORD *)&v24 + 8 * v52);
  v54 = *v53;
  v55 = v138;
  if (*v53 != a4)
  {
    v56 = 1;
    while (v54 != -4096)
    {
      v57 = v52 + v56++;
      v52 = v57 & (v25 - 1);
      v54 = *(_QWORD *)(*(_QWORD *)&v24 + 8 * v52);
      if (v54 == a4)
        goto LABEL_45;
    }
    v24 = *v138;
    v52 = v138[2].u32[0];
    goto LABEL_45;
  }
LABEL_46:
  *v53 = -8192;
  v55[1] = vadd_s32(v55[1], (int32x2_t)0x1FFFFFFFFLL);
  v59 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
  if (a7 == 1)
  {
    v60 = a4 - 32 * v59;
    v61 = v60 + 32 * a8;
    v62 = v51;
    if (*(_QWORD *)v61)
    {
      **(_QWORD **)(v61 + 16) = *(_QWORD *)(v61 + 8);
      v63 = *(_QWORD *)(v61 + 8);
      if (v63)
        *(_QWORD *)(v63 + 16) = *(_QWORD *)(v61 + 16);
    }
    *(_QWORD *)v61 = a6;
    if (a6)
    {
      v66 = *(_QWORD *)(a6 + 8);
      v65 = (_QWORD *)(a6 + 8);
      v64 = v66;
      v67 = v60 + 32 * a8;
      *(_QWORD *)(v67 + 8) = v66;
      if (v66)
        *(_QWORD *)(v64 + 16) = v67 + 8;
      *(_QWORD *)(v67 + 16) = v65;
      *v65 = v61;
    }
  }
  else
  {
    v62 = v51;
    if ((_DWORD)v59)
    {
      v59 = v59;
      if (a6)
      {
        v68 = (_QWORD *)(a6 + 8);
        v69 = a4;
        do
        {
          v70 = v69 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF);
          if (*(_QWORD *)v70 == a5)
          {
            if (a5)
            {
              **(_QWORD **)(v70 + 16) = *(_QWORD *)(v70 + 8);
              v71 = *(_QWORD *)(v70 + 8);
              if (v71)
                *(_QWORD *)(v71 + 16) = *(_QWORD *)(v70 + 16);
            }
            *(_QWORD *)v70 = a6;
            v72 = *(_QWORD *)(a6 + 8);
            *(_QWORD *)(v70 + 8) = v72;
            if (v72)
              *(_QWORD *)(v72 + 16) = v70 + 8;
            *(_QWORD *)(v70 + 16) = v68;
            *v68 = v70;
          }
          v69 += 32;
          --v59;
        }
        while (v59);
      }
      else
      {
        v73 = a4;
        do
        {
          v74 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
          v75 = 32 * v74;
          if (*(_QWORD *)(v73 - 32 * v74) == a5)
          {
            if (a5)
            {
              v76 = v73 - 32 * v74;
              **(_QWORD **)(v76 + 16) = *(_QWORD *)(v76 + 8);
              v77 = *(_QWORD *)(v76 + 8);
              if (v77)
                *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 + 16);
            }
            *(_QWORD *)(v73 - v75) = 0;
          }
          v73 += 32;
          --v59;
        }
        while (v59);
      }
    }
  }
  v143 = a4;
  v78 = v55[2].i32[0];
  if (v78)
  {
    v79 = 0;
    v80 = *v55;
    v81 = (v78 - 1);
    v82 = *(_QWORD *)&v145[8];
    v83 = v145[16];
    v84 = v145[17];
    v85 = *(unsigned __int16 *)&v145[18];
    v87 = *((_QWORD *)&v146 + 1);
    v86 = (_QWORD *)v146;
    v88 = DWORD2(v146);
    v89 = -*((_QWORD *)&v146 + 1);
    v91 = *((_QWORD *)&v147 + 1);
    v90 = (const void *)v147;
    v92 = 4 * *((_QWORD *)&v147 + 1);
    v93 = v148;
    v94 = v145[16] - 53;
    v95 = 1;
    v96 = v62 & v81;
    v97 = (_QWORD *)(*(_QWORD *)v55 + 8 * (v62 & v81));
    v98 = (_QWORD *)*v97;
    if (*v97 == -8192)
      goto LABEL_76;
    while (v98 != (_QWORD *)-4096)
    {
      if (v82 == *v98
        && *((unsigned __int16 *)v98 + 9) == v83
        && (_DWORD)v84 == *((unsigned __int8 *)v98 + 17) >> 1
        && v87 == (*((_DWORD *)v98 + 5) & 0x7FFFFFF))
      {
        v101 = v94 > 1 ? 0 : *((unsigned __int16 *)v98 + 12);
        if (v101 == v85)
        {
          if (v88)
          {
            v102 = &v98[4 * v89];
            v103 = v88;
            v104 = v86;
            while (*v104 == *v102)
            {
              ++v104;
              v102 += 4;
              if (!--v103)
                goto LABEL_94;
            }
          }
          else
          {
LABEL_94:
            if (v83 == 63)
            {
              v105 = (const void *)v98[3];
              v106 = *((unsigned int *)v98 + 8);
            }
            else
            {
              v105 = 0;
              v106 = 0;
            }
            if (v91 == v106)
            {
              v132 = v82;
              v134 = v88;
              v124 = v93;
              v126 = v92;
              v107 = v84;
              v123 = v94;
              v108 = v80;
              v109 = v81;
              v136 = v85;
              v121 = v95;
              v110 = v86;
              v128 = v91;
              v130 = v90;
              v111 = v89;
              v112 = memcmp(v90, v105, v92);
              v89 = v111;
              v91 = v128;
              v90 = v130;
              v82 = v132;
              v88 = v134;
              v86 = v110;
              v95 = v121;
              v85 = v136;
              v81 = v109;
              v80 = v108;
              v94 = v123;
              v84 = v107;
              v93 = v124;
              v92 = v126;
              if (!v112)
              {
                if (v83 == 34)
                {
                  if (v124 == v98[3])
                    return 0;
                }
                else if (!v124)
                {
                  return 0;
                }
              }
            }
          }
        }
      }
      do
      {
LABEL_76:
        if (v79)
          v99 = 0;
        else
          v99 = v98 == (_QWORD *)-8192;
        if (v99)
          v79 = (_QWORD **)v97;
        v100 = v96 + v95++;
        v96 = v100 & v81;
        v97 = (_QWORD *)(*(_QWORD *)&v80 + 8 * (v100 & v81));
        v98 = (_QWORD *)*v97;
      }
      while (*v97 == -8192);
    }
    if (v79)
      v113 = v79;
    else
      v113 = (_QWORD **)v97;
    v55 = v138;
  }
  else
  {
    v113 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::InsertIntoBucketWithLookup<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>> const>((uint64_t)v55, v113, &v143, (uint64_t)&v144, (uint64_t)v145);
  return 0;
}

char *llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucket<unsigned int>(uint64_t a1, char *a2, _DWORD *a3)
{
  int v5;
  uint64_t v6;
  int v8;
  llvm::Value *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _DWORD *buffer;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  char *v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v8 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    v8 = *(_DWORD *)(a1 + 16);
  }
  v9 = *(llvm::Value **)a1;
  v10 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  buffer = llvm::allocate_buffer(16 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v9)
  {
    v15 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::moveFromOldBuckets(a1, v9, (llvm::Value *)&v15[(_QWORD)v9]);
    llvm::deallocate_buffer(v9, v15);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = buffer;
    if (((v16 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_35;
    v18 = ((v16 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v17 = &buffer[4 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = buffer + 4;
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -1;
      *v19 = -1;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_35:
      do
      {
        *v17 = -1;
        v17 += 4;
      }
      while (v17 != &buffer[4 * v16]);
    }
    v21 = v16 - 1;
    v22 = (37 * *a3) & v21;
    a2 = (char *)&buffer[4 * v22];
    v23 = *(_DWORD *)a2;
    if (*a3 != *(_DWORD *)a2)
    {
      v24 = 0;
      v25 = 1;
      while (v23 != -1)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v23 == -2;
        if (v26)
          v24 = a2;
        v27 = v22 + v25++;
        v22 = v27 & v21;
        a2 = (char *)&buffer[4 * v22];
        v23 = *(_DWORD *)a2;
        if (*a3 == *(_DWORD *)a2)
          goto LABEL_3;
      }
      if (v24)
        a2 = v24;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a2 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = *a3;
  *((_QWORD *)a2 + 1) = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::moveFromOldBuckets(uint64_t a1, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  llvm::Use *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v11 = &v7[4 * v10];
      v12 = v7 + 4;
      v13 = v10;
      do
      {
        *(v12 - 4) = -1;
        *v12 = -1;
        v12 += 8;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_DWORD **)a1;
    }
    v14 = &v7[4 * v6];
    do
    {
      *v11 = -1;
      v11 += 4;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v16 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v17 = *(_DWORD *)(a1 + 16) - 1;
        v18 = v17 & (37 * v16);
        v19 = *(_QWORD *)a1 + 16 * v18;
        v20 = *(_DWORD *)v19;
        if (v16 != *(_DWORD *)v19)
        {
          v24 = 0;
          v25 = 1;
          while (v20 != -1)
          {
            if (v24)
              v26 = 0;
            else
              v26 = v20 == -2;
            if (v26)
              v24 = v19;
            v27 = v18 + v25++;
            v18 = v27 & v17;
            v19 = *(_QWORD *)a1 + 16 * (v27 & v17);
            v20 = *(_DWORD *)v19;
            if (v16 == *(_DWORD *)v19)
              goto LABEL_16;
          }
          if (v24)
            v19 = v24;
        }
LABEL_16:
        *(_DWORD *)v19 = v16;
        v21 = *((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        *(_QWORD *)(v19 + 8) = v21;
        ++*(_DWORD *)(a1 + 8);
        v22 = *((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (v22)
        {
          if (*(_DWORD *)(v22 + 32) >= 0x41u)
          {
            v23 = *(void **)(v22 + 24);
            if (v23)
              operator delete[](v23);
          }
          llvm::Value::~Value((llvm::Value *)v22, a2);
          llvm::User::operator delete(v15);
        }
      }
      v4 = (llvm::Value *)((char *)v4 + 16);
    }
    while (v4 != a3);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>(uint64_t *a1, llvm *a2, uint64_t *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void *__p;
  unsigned int v17;
  void *v18;
  unsigned int v19;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v14 = 0;
    *a3 = 0;
    return v14;
  }
  v6 = *a1;
  v19 = 0;
  v18 = (void *)-1;
  v17 = 0;
  __p = (void *)-2;
  v7 = 0;
  v8 = v4 - 1;
  v9 = 1;
  v10 = llvm::DenseMapInfo<llvm::APInt,void>::getHashValue(a2, a2) & (v4 - 1);
  v11 = v6 + 24 * v10;
  v12 = *((_DWORD *)a2 + 2);
  if (v12 != *(_DWORD *)(v11 + 8))
    goto LABEL_7;
LABEL_3:
  if (v12 > 0x40)
  {
    if (!llvm::APInt::equalSlowCase((const void **)a2, (const void **)v11))
      goto LABEL_7;
  }
  else if (*(_QWORD *)a2 != *(_QWORD *)v11)
  {
LABEL_7:
    while (!llvm::DenseMapInfo<llvm::APInt,void>::isEqual(v11, (uint64_t)&v18))
    {
      if (llvm::DenseMapInfo<llvm::APInt,void>::isEqual(v11, (uint64_t)&__p) && v7 == 0)
        v7 = v11;
      v13 = v10 + v9++;
      v10 = v13 & v8;
      v11 = v6 + 24 * (v13 & v8);
      v12 = *((_DWORD *)a2 + 2);
      if (v12 == *(_DWORD *)(v11 + 8))
        goto LABEL_3;
    }
    v14 = 0;
    if (v7)
      v11 = v7;
    *a3 = v11;
    if (v17 < 0x41)
      goto LABEL_15;
    goto LABEL_13;
  }
  v14 = 1;
  *a3 = v11;
  if (v17 >= 0x41)
  {
LABEL_13:
    if (__p)
      operator delete[](__p);
  }
LABEL_15:
  if (v19 >= 0x41 && v18)
    operator delete[](v18);
  return v14;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<llvm::APInt>(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_8:
    llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*(_DWORD *)(a4 + 8))
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_8;
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 8))
  {
LABEL_5:
    --*(_DWORD *)(a1 + 12);
    return a4;
  }
LABEL_4:
  if (*(_QWORD *)a4 != -1)
    goto LABEL_5;
  return a4;
}

char *llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm::APInt *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm::APInt **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 24 * v3;
    llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::moveFromOldBuckets(a1, v4, (llvm::APInt *)((char *)v4 + v10));
    llvm::deallocate_buffer(v4, (void *)v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    v13 = result + 8;
    do
    {
      *v13 = 0;
      *((_QWORD *)v13 - 1) = -1;
      v13 += 6;
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::moveFromOldBuckets(uint64_t a1, llvm::APInt *this, llvm::APInt *a3)
{
  uint64_t v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  llvm::Use *v16;
  void *v17;
  unsigned int v18;
  void *__p;
  unsigned int v20;
  uint64_t v21;

  *(_QWORD *)(a1 + 8) = 0;
  v20 = 0;
  __p = (void *)-1;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(llvm::APInt **)a1;
    v8 = 24 * v6;
    do
    {
      while (1)
      {
        v9 = v20;
        *((_DWORD *)v7 + 2) = v20;
        if (v9 <= 0x40)
          break;
        llvm::APInt::initSlowCase(v7, (const void **)&__p);
        v7 = (llvm::APInt *)((char *)v7 + 24);
        v8 -= 24;
        if (!v8)
          goto LABEL_6;
      }
      *(_QWORD *)v7 = __p;
      v7 = (llvm::APInt *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
LABEL_6:
    if (v20 >= 0x41 && __p)
      operator delete[](__p);
  }
  v20 = 0;
  __p = (void *)-1;
  v18 = 0;
  v17 = (void *)-2;
  if (this == a3)
    goto LABEL_35;
  do
  {
    v10 = *((_DWORD *)this + 2);
    if (v10 == v20)
    {
      if (v10 > 0x40)
      {
        if (llvm::APInt::equalSlowCase((const void **)this, (const void **)&__p))
          goto LABEL_30;
      }
      else if (*(void **)this == __p)
      {
        goto LABEL_11;
      }
    }
    if (v10 == v18)
    {
      if (v10 > 0x40)
      {
        if (llvm::APInt::equalSlowCase((const void **)this, (const void **)&v17))
          goto LABEL_30;
      }
      else if (*(void **)this == v17)
      {
        goto LABEL_11;
      }
    }
    v21 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>((uint64_t *)a1, this, &v21);
    v12 = v21;
    if (*(_DWORD *)(v21 + 8) >= 0x41u && *(_QWORD *)v21)
      operator delete[](*(void **)v21);
    *(_QWORD *)v12 = *(_QWORD *)this;
    *(_DWORD *)(v12 + 8) = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = 0;
    v13 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)(v12 + 16) = v13;
    ++*(_DWORD *)(a1 + 8);
    v14 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v14)
    {
      if (*(_DWORD *)(v14 + 32) >= 0x41u)
      {
        v15 = *(void **)(v14 + 24);
        if (v15)
          operator delete[](v15);
      }
      llvm::Value::~Value((llvm::Value *)v14, v11);
      llvm::User::operator delete(v16);
      if (*((_DWORD *)this + 2) >= 0x41u)
      {
LABEL_30:
        if (*(_QWORD *)this)
          operator delete[](*(void **)this);
      }
    }
LABEL_11:
    this = (llvm::APInt *)((char *)this + 24);
  }
  while (this != a3);
  if (v18 >= 0x41 && v17)
    operator delete[](v17);
LABEL_35:
  if (v20 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>(llvm::APFloatBase *a1, llvm *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  llvm::APFloatBase *v7;
  llvm::APFloatBase *v8;
  const llvm::APFloat *v9;
  uint64_t v10;
  int v11;
  const llvm::APFloat *v12;
  unsigned int v13;
  llvm::detail::DoubleAPFloat *v14;
  int i;
  uint64_t v16;
  const llvm::detail::DoubleAPFloat *v17;
  const llvm::APFloat *v18;
  unsigned __int8 isEqual;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  void *v24;
  _QWORD v25[3];
  void *v26;
  _QWORD v27[4];

  v27[3] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *(_QWORD *)a1;
    v7 = (llvm::APFloatBase *)llvm::APFloatBase::Bogus(a1);
    v8 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v7);
    if (v8 == v7)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v27, (uint64_t)v7, 1);
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v25, (uint64_t)v7, 2);
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v27, (uint64_t)v7, (llvm::APInt *)1);
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v25, (uint64_t)v7, (llvm::APInt *)2);
    }
    v23 = 0;
    v11 = v4 - 1;
    v13 = (v4 - 1) & llvm::hash_value(a2, v9);
    v14 = (llvm *)((char *)a2 + 8);
    for (i = 1; ; ++i)
    {
      v16 = v6 + 40 * v13;
      v17 = (const llvm::detail::DoubleAPFloat *)(v16 + 8);
      if (*(_QWORD *)v14 == *(_QWORD *)(v16 + 8))
      {
        if (v8 == *(llvm::APFloatBase **)v14)
        {
          if ((llvm::detail::DoubleAPFloat::bitwiseIsEqual(v14, v17) & 1) != 0)
          {
LABEL_16:
            v10 = 1;
            *a3 = v16;
            if (v8 == (llvm::APFloatBase *)v25[0])
              goto LABEL_23;
            goto LABEL_17;
          }
        }
        else if (llvm::detail::IEEEFloat::bitwiseIsEqual(v14, v17))
        {
          goto LABEL_16;
        }
      }
      if (llvm::DenseMapAPFloatKeyInfo::isEqual((llvm::DenseMapAPFloatKeyInfo *)(v6 + 40 * v13), &v26, v12))
      {
        v10 = 0;
        if (v23)
          v16 = v23;
        *a3 = v16;
        if (v8 == (llvm::APFloatBase *)v25[0])
        {
LABEL_23:
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v25);
          if (v8 == (llvm::APFloatBase *)v27[0])
          {
LABEL_24:
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v27);
            return v10;
          }
LABEL_18:
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v27);
          return v10;
        }
LABEL_17:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v25);
        if (v8 == (llvm::APFloatBase *)v27[0])
          goto LABEL_24;
        goto LABEL_18;
      }
      isEqual = llvm::DenseMapAPFloatKeyInfo::isEqual((llvm::DenseMapAPFloatKeyInfo *)(v6 + 40 * v13), &v24, v18);
      v20 = v23;
      if ((isEqual & (v23 == 0)) != 0)
        v20 = v6 + 40 * v13;
      v23 = v20;
      v21 = v13 + i;
      v13 = v21 & v11;
    }
  }
  v10 = 0;
  *a3 = 0;
  return v10;
}

uint64_t llvm::DenseMapAPFloatKeyInfo::isEqual(llvm::DenseMapAPFloatKeyInfo *this, void **a2, const llvm::APFloat *a3)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  const llvm::detail::DoubleAPFloat *v5;

  v3 = (llvm::DenseMapAPFloatKeyInfo *)((char *)this + 8);
  v4 = (void *)*((_QWORD *)this + 1);
  v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 1);
  if (v4 != a2[1])
    return 0;
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v4)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::InsertIntoBucketImpl<llvm::APFloat>(unsigned int *a1, uint64_t a2, llvm *a3, uint64_t a4)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  llvm::APFloatBase *v9;
  llvm::APFloatBase *v10;
  llvm::detail::IEEEFloat *v11;
  llvm::APFloatBase *v12;
  uint64_t v14;
  _QWORD v15[4];

  v5 = a1;
  v15[3] = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::grow(a1, v7);
  v14 = 0;
  a1 = (unsigned int *)llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>((llvm::APFloatBase *)v5, a3, &v14);
  a4 = v14;
LABEL_3:
  ++v5[2];
  v9 = (llvm::APFloatBase *)llvm::APFloatBase::Bogus((llvm::APFloatBase *)a1);
  v10 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v9);
  if (v10 == v9)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, (uint64_t)v9, 1);
    v11 = (llvm::detail::IEEEFloat *)(a4 + 8);
    v12 = *(llvm::APFloatBase **)(a4 + 8);
    if (v12 != (llvm::APFloatBase *)v15[0])
      goto LABEL_9;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v15, (uint64_t)v9, (llvm::APInt *)1);
    v11 = (llvm::detail::IEEEFloat *)(a4 + 8);
    v12 = *(llvm::APFloatBase **)(a4 + 8);
    if (v12 != (llvm::APFloatBase *)v15[0])
      goto LABEL_9;
  }
  if (v10 != v12)
  {
    if (llvm::detail::IEEEFloat::bitwiseIsEqual(v11, (const llvm::detail::IEEEFloat *)v15))
      goto LABEL_10;
    goto LABEL_9;
  }
  if ((llvm::detail::DoubleAPFloat::bitwiseIsEqual(v11, (const llvm::detail::DoubleAPFloat *)v15) & 1) == 0)
LABEL_9:
    --v5[3];
LABEL_10:
  if (v10 == (llvm::APFloatBase *)v15[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v15);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v15);
  return a4;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::grow(unsigned int *a1, int a2)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v3 = a1[4];
  v4 = *(void ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  a1[4] = v8;
  *(_QWORD *)a1 = llvm::allocate_buffer(40 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    v9 = 5 * v3;
    llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::moveFromOldBuckets((llvm::APFloatBase *)a1, v4, &v4[v9]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(v9 * 8));
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty((llvm::APFloatBase *)a1);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty(llvm::APFloatBase *a1)
{
  llvm::APFloatBase *v2;
  llvm::APFloatBase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::detail::DoubleAPFloat *v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)a1 + 1) = 0;
  v2 = (llvm::APFloatBase *)llvm::APFloatBase::Bogus(a1);
  v3 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v2);
  if (v3 == v2)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v8, (uint64_t)v2, 1);
    v4 = *((unsigned int *)a1 + 4);
    if (!(_DWORD)v4)
      goto LABEL_9;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v8, (uint64_t)v2, (llvm::APInt *)1);
    v4 = *((unsigned int *)a1 + 4);
    if (!(_DWORD)v4)
      goto LABEL_9;
  }
  v5 = *(_QWORD *)a1;
  v6 = 40 * v4;
  v7 = (llvm::detail::DoubleAPFloat *)(v5 + 8);
  do
  {
    while (v3 == (llvm::APFloatBase *)v8[0])
    {
      v7 = (llvm::detail::DoubleAPFloat *)((char *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, (const llvm::detail::DoubleAPFloat *)v8)+ 40);
      v6 -= 40;
      if (!v6)
        goto LABEL_9;
    }
    v7 = (llvm::detail::DoubleAPFloat *)(llvm::detail::IEEEFloat::IEEEFloat(v7, (const llvm::detail::IEEEFloat *)v8) + 40);
    v6 -= 40;
  }
  while (v6);
LABEL_9:
  if (v3 == (llvm::APFloatBase *)v8[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v8);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v8);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::moveFromOldBuckets(llvm::APFloatBase *a1, void **a2, void **a3)
{
  llvm::APFloatBase *v6;
  llvm::APFloatBase *v7;
  llvm::APFloatBase *v8;
  llvm::APFloatBase *v9;
  void **v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  llvm::detail::DoubleAPFloat *v14;
  llvm::Value *v15;
  llvm::detail::DoubleAPFloat *v16;
  llvm::detail::DoubleAPFloat *v17;
  llvm::Use *v18;
  llvm::detail::DoubleAPFloat *v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty(a1);
  v7 = (llvm::APFloatBase *)llvm::APFloatBase::Bogus(v6);
  v8 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v7);
  if (v8 == v7)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v22, (uint64_t)v7, 1);
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v21, (uint64_t)v7, 2);
    if (a2 == a3)
      goto LABEL_5;
    while (1)
    {
LABEL_10:
      v10 = a2 + 1;
      v9 = (llvm::APFloatBase *)a2[1];
      if (v9 == (llvm::APFloatBase *)v22[0])
      {
        v16 = (llvm::detail::DoubleAPFloat *)(a2 + 1);
        if (v8 == v9)
        {
          if ((llvm::detail::DoubleAPFloat::bitwiseIsEqual(v16, (const llvm::detail::DoubleAPFloat *)v22) & 1) != 0)
            goto LABEL_23;
        }
        else if (llvm::detail::IEEEFloat::bitwiseIsEqual(v16, (const llvm::detail::IEEEFloat *)v22))
        {
          goto LABEL_23;
        }
      }
      if (*v10 != (void *)v21[0])
        goto LABEL_12;
      v17 = (llvm::detail::DoubleAPFloat *)(a2 + 1);
      if (v8 == *v10)
      {
        if ((llvm::detail::DoubleAPFloat::bitwiseIsEqual(v17, (const llvm::detail::DoubleAPFloat *)v21) & 1) == 0)
        {
LABEL_12:
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>(a1, (llvm *)a2, &v20);
          v11 = v20;
          llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v20 + 8), (llvm::APFloatBase *)(a2 + 1));
          v12 = a2[4];
          a2[4] = 0;
          *(_QWORD *)(v11 + 32) = v12;
          ++*((_DWORD *)a1 + 2);
          v13 = a2[4];
          a2[4] = 0;
          if (v13)
          {
            v14 = (llvm::detail::DoubleAPFloat *)(v13 + 4);
            if (v8 == (llvm::APFloatBase *)v13[4])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v14);
            else
              llvm::detail::IEEEFloat::~IEEEFloat(v14);
            llvm::Value::~Value((llvm::Value *)v13, v15);
            llvm::User::operator delete(v18);
          }
        }
      }
      else if (!llvm::detail::IEEEFloat::bitwiseIsEqual(v17, (const llvm::detail::IEEEFloat *)v21))
      {
        goto LABEL_12;
      }
LABEL_23:
      v19 = (llvm::detail::DoubleAPFloat *)(a2 + 1);
      if (v8 == *v10)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v19);
        a2 += 5;
        if (a2 == a3)
          goto LABEL_5;
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v19);
        a2 += 5;
        if (a2 == a3)
          goto LABEL_5;
      }
    }
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v22, (uint64_t)v7, (llvm::APInt *)1);
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v21, (uint64_t)v7, (llvm::APInt *)2);
  if (a2 != a3)
    goto LABEL_10;
LABEL_5:
  if (v8 == (llvm::APFloatBase *)v21[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v21);
    if (v8 != (llvm::APFloatBase *)v22[0])
      goto LABEL_7;
LABEL_31:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
    return;
  }
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v21);
  if (v8 == (llvm::APFloatBase *)v22[0])
    goto LABEL_31;
LABEL_7:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantArray>::create(uint64_t *a1, llvm::Type *a2, uint64_t *a3, uint64_t a4, int *a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  _QWORD *v22;

  v10 = llvm::User::operator new((llvm::User *)0x18, a4);
  v11 = llvm::Value::Value((uint64_t)v10, a2, 8);
  *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xF8000000 | a4 & 0x7FFFFFF;
  if (a4)
  {
    v12 = (_QWORD **)&v10[-4 * (a4 & 0x7FFFFFF) + 1];
    v13 = 8 * a4;
    do
    {
      v14 = v12 - 1;
      v15 = *a3;
      if (*(v12 - 1))
      {
        *v12[1] = *v12;
        if (*v12)
          (*v12)[2] = v12[1];
      }
      *v14 = v15;
      if (v15)
      {
        v18 = *(_QWORD **)(v15 + 8);
        v16 = (_QWORD *)(v15 + 8);
        v17 = v18;
        *v12 = v18;
        if (v18)
          v17[2] = v12;
        v12[1] = v16;
        *v16 = v14;
      }
      ++a3;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
  }
  v21 = v10;
  v22 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, a5, &v22) & 1) == 0)
  {
    v19 = llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t)a1, (uint64_t)&v21, a5, v22);
    *v19 = v21;
  }
  return v10;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(uint64_t *a1, int *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  int v24;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = v3 - 1;
    v7 = *((_QWORD *)a2 + 1);
    v8 = *((_QWORD *)a2 + 3);
    v9 = 0;
    if ((_DWORD)v8)
    {
      v10 = 1;
      v11 = v5 & v6;
      v12 = (_QWORD *)(v4 + 8 * (v5 & v6));
      v13 = *v12;
      if (*v12 == -8192)
        goto LABEL_11;
      while (v13 != -4096)
      {
        if (v7 == *(_QWORD *)v13 && v8 == (*(_DWORD *)(v13 + 20) & 0x7FFFFFF))
        {
          v14 = (_QWORD *)(v13 - 32 * v8);
          v15 = (_QWORD *)*((_QWORD *)a2 + 2);
          v16 = *((_QWORD *)a2 + 3);
          while (*v15 == *v14)
          {
            v14 += 4;
            ++v15;
            result = 1;
            if (!--v16)
              goto LABEL_19;
          }
        }
        do
        {
LABEL_11:
          if (v9)
            v18 = 0;
          else
            v18 = v13 == -8192;
          if (v18)
            v9 = v12;
          v19 = v11 + v10++;
          v11 = v19 & v6;
          v12 = (_QWORD *)(v4 + 8 * (v19 & v6));
          v13 = *v12;
        }
        while (*v12 == -8192);
      }
    }
    else
    {
      v20 = 1;
      v21 = v5 & v6;
      v12 = (_QWORD *)(v4 + 8 * (v5 & v6));
      v22 = *v12;
      if (*v12 == -8192)
        goto LABEL_24;
      while (v22 != -4096)
      {
        if (v7 == *(_QWORD *)v22 && v8 == (*(_DWORD *)(v22 + 20) & 0x7FFFFFF))
        {
          result = 1;
          *a3 = v12;
          return result;
        }
        do
        {
LABEL_24:
          if (v9)
            v23 = 0;
          else
            v23 = v22 == -8192;
          if (v23)
            v9 = v12;
          v24 = v21 + v20++;
          v21 = v24 & v6;
          v12 = (_QWORD *)(v4 + 8 * (v24 & v6));
          v22 = *v12;
        }
        while (*v12 == -8192);
      }
    }
    result = 0;
    if (v9)
      v12 = v9;
    *a3 = v12;
  }
  else
  {
    v12 = 0;
    result = 0;
LABEL_19:
    *a3 = v12;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  uint64_t **v26;
  llvm *v27;
  int v28;
  int HashValue;
  int v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t **v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = (uint64_t **)v4;
      do
      {
        if (((unint64_t)*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(*v18);
          v30 = v28 - 1;
          v31 = *v18;
          v32 = HashValue & (v28 - 1);
          v26 = (uint64_t **)((char *)v27 + 8 * v32);
          v33 = *v26;
          if (*v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != (uint64_t *)-4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == (uint64_t *)-8192;
              if (v36)
                v34 = v26;
              v37 = v32 + v35++;
              v32 = v37 & v30;
              v26 = (uint64_t **)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v31 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v31;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v18;
      }
      while (v18 != (uint64_t **)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[35];

  v19[34] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x2000000000;
  v1 = *a1;
  v2 = *((_DWORD *)a1 + 5);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    LODWORD(v5) = 0;
    v6 = a1;
    do
    {
      v7 = v6[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
      if (v5 >= HIDWORD(v18))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v5 + 1, 8);
        LODWORD(v5) = v18;
      }
      *((_QWORD *)v17 + v5) = v7;
      v5 = (v18 + 1);
      LODWORD(v18) = v18 + 1;
      v6 += 4;
      --v3;
    }
    while (v3);
    v8 = v17;
  }
  else
  {
    v5 = 0;
    v8 = v19;
  }
  v9 = llvm::hashing::detail::hash_combine_range_impl<char const>(v8, (uint64_t)&v8[v5]);
  memset(&v19[32], 0, 12);
  {
    v16 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v16 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v16;
  }
  v11 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v19[32] = v1;
  LODWORD(v19[33]) = v9;
  v12 = *(_QWORD *)((char *)&v19[32] + 4);
  if (v17 != v19)
    free(v17);
  v13 = __ROR8__(v12 + 12, 12);
  v14 = 0x9DDFEA08EB382D69
      * (v13 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v1 ^ v13)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v1 ^ v13)));
  return (-348639895 * ((v14 >> 47) ^ v14)) ^ v12;
}

uint64_t getFPSequenceIfElementsMatch<llvm::ConstantDataArray,unsigned long long>(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::ArrayType ***v2;
  uint64_t v3;
  llvm::APFloatBase *v4;
  uint64_t v5;
  BOOL v6;
  llvm::detail::DoubleAPFloat *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Type *v12;
  llvm::Type *v13;
  uint64_t Impl;
  void *v15;
  llvm::ConstantAggregateZero *v16;
  void *__p;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[17];

  v2 = (llvm::ArrayType ***)a1;
  v22[16] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x1000000000;
  if (a2)
  {
    v3 = 8 * a2;
    v4 = a1;
    while (1)
    {
      v5 = *(_QWORD *)v4;
      if (*(_QWORD *)v4)
        v6 = *(_BYTE *)(*(_QWORD *)v4 + 16) == 17;
      else
        v6 = 0;
      if (!v6)
      {
        Impl = 0;
        v15 = v20;
        if (v20 != v22)
          goto LABEL_26;
        return Impl;
      }
      v8 = *(void **)(v5 + 32);
      v7 = (llvm::detail::DoubleAPFloat *)(v5 + 32);
      if (llvm::APFloatBase::PPCDoubleDouble(a1) == v8)
      {
        a1 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v7, (llvm::APInt *)&__p);
        v9 = v19;
        if (v19 >= 0x41)
        {
LABEL_13:
          a1 = (llvm::APFloatBase *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
          if (v9 - a1 <= 0x40)
            v10 = *(_QWORD *)__p;
          else
            v10 = -1;
          goto LABEL_16;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::bitcastToAPInt(v7, (uint64_t)&__p);
        v9 = v19;
        if (v19 >= 0x41)
          goto LABEL_13;
      }
      v10 = (uint64_t)__p;
LABEL_16:
      v11 = v21;
      if (v21 >= (unint64_t)HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v21 + 1, 8);
        v11 = v21;
      }
      *((_QWORD *)v20 + v11) = v10;
      LODWORD(v21) = v21 + 1;
      if (v19 >= 0x41)
      {
        a1 = (llvm::APFloatBase *)__p;
        if (__p)
          operator delete[](__p);
      }
      v4 = (llvm::APFloatBase *)((char *)v4 + 8);
      v3 -= 8;
      if (!v3)
      {
        v13 = (llvm::Type *)v20;
        v12 = (llvm::Type *)v21;
        goto LABEL_25;
      }
    }
  }
  v12 = 0;
  v13 = (llvm::Type *)v22;
LABEL_25:
  llvm::ArrayType::get(**v2, v12);
  Impl = llvm::ConstantDataSequential::getImpl(v13, (llvm::Type *)(8 * (_QWORD)v12), v16);
  v15 = v20;
  if (v20 != v22)
LABEL_26:
    free(v15);
  return Impl;
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantStruct>::create(uint64_t *a1, llvm::Type *a2, uint64_t *a3, uint64_t a4, int *a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  _QWORD *v22;

  v10 = llvm::User::operator new((llvm::User *)0x18, a4);
  v11 = llvm::Value::Value((uint64_t)v10, a2, 9);
  *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xF8000000 | a4 & 0x7FFFFFF;
  if (a4)
  {
    v12 = (_QWORD **)&v10[-4 * (a4 & 0x7FFFFFF) + 1];
    v13 = 8 * a4;
    do
    {
      v14 = v12 - 1;
      v15 = *a3;
      if (*(v12 - 1))
      {
        *v12[1] = *v12;
        if (*v12)
          (*v12)[2] = v12[1];
      }
      *v14 = v15;
      if (v15)
      {
        v18 = *(_QWORD **)(v15 + 8);
        v16 = (_QWORD *)(v15 + 8);
        v17 = v18;
        *v12 = v18;
        if (v18)
          v17[2] = v12;
        v12[1] = v16;
        *v16 = v14;
      }
      ++a3;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
  }
  v21 = v10;
  v22 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, a5, &v22) & 1) == 0)
  {
    v19 = llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t)a1, (uint64_t)&v21, a5, v22);
    *v19 = v21;
  }
  return v10;
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantVector>::create(uint64_t *a1, llvm::Type *a2, uint64_t *a3, uint64_t a4, int *a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  _QWORD *v22;

  v10 = llvm::User::operator new((llvm::User *)0x18, a4);
  v11 = llvm::Value::Value((uint64_t)v10, a2, 10);
  *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xF8000000 | a4 & 0x7FFFFFF;
  if (a4)
  {
    v12 = (_QWORD **)&v10[-4 * (a4 & 0x7FFFFFF) + 1];
    v13 = 8 * a4;
    do
    {
      v14 = v12 - 1;
      v15 = *a3;
      if (*(v12 - 1))
      {
        *v12[1] = *v12;
        if (*v12)
          (*v12)[2] = v12[1];
      }
      *v14 = v15;
      if (v15)
      {
        v18 = *(_QWORD **)(v15 + 8);
        v16 = (_QWORD *)(v15 + 8);
        v17 = v18;
        *v12 = v18;
        if (v18)
          v17[2] = v12;
        v12[1] = v16;
        *v16 = v14;
      }
      ++a3;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
  }
  v21 = v10;
  v22 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, a5, &v22) & 1) == 0)
  {
    v19 = llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t)a1, (uint64_t)&v21, a5, v22);
    *v19 = v21;
  }
  return v10;
}

uint64_t getFPSequenceIfElementsMatch<llvm::ConstantDataVector,unsigned long long>(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::FixedVectorType ***v2;
  uint64_t v3;
  llvm::APFloatBase *v4;
  uint64_t v5;
  BOOL v6;
  llvm::detail::DoubleAPFloat *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Type *v12;
  llvm::Type *v13;
  uint64_t Impl;
  void *v15;
  llvm::ConstantAggregateZero *v16;
  void *__p;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[17];

  v2 = (llvm::FixedVectorType ***)a1;
  v22[16] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x1000000000;
  if (a2)
  {
    v3 = 8 * a2;
    v4 = a1;
    while (1)
    {
      v5 = *(_QWORD *)v4;
      if (*(_QWORD *)v4)
        v6 = *(_BYTE *)(*(_QWORD *)v4 + 16) == 17;
      else
        v6 = 0;
      if (!v6)
      {
        Impl = 0;
        v15 = v20;
        if (v20 != v22)
          goto LABEL_26;
        return Impl;
      }
      v8 = *(void **)(v5 + 32);
      v7 = (llvm::detail::DoubleAPFloat *)(v5 + 32);
      if (llvm::APFloatBase::PPCDoubleDouble(a1) == v8)
      {
        a1 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v7, (llvm::APInt *)&__p);
        v9 = v19;
        if (v19 >= 0x41)
        {
LABEL_13:
          a1 = (llvm::APFloatBase *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
          if (v9 - a1 <= 0x40)
            v10 = *(_QWORD *)__p;
          else
            v10 = -1;
          goto LABEL_16;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::bitcastToAPInt(v7, (uint64_t)&__p);
        v9 = v19;
        if (v19 >= 0x41)
          goto LABEL_13;
      }
      v10 = (uint64_t)__p;
LABEL_16:
      v11 = v21;
      if (v21 >= (unint64_t)HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v21 + 1, 8);
        v11 = v21;
      }
      *((_QWORD *)v20 + v11) = v10;
      LODWORD(v21) = v21 + 1;
      if (v19 >= 0x41)
      {
        a1 = (llvm::APFloatBase *)__p;
        if (__p)
          operator delete[](__p);
      }
      v4 = (llvm::APFloatBase *)((char *)v4 + 8);
      v3 -= 8;
      if (!v3)
      {
        v13 = (llvm::Type *)v20;
        v12 = (llvm::Type *)v21;
        goto LABEL_25;
      }
    }
  }
  v12 = 0;
  v13 = (llvm::Type *)v22;
LABEL_25:
  llvm::FixedVectorType::get(**v2, v12);
  Impl = llvm::ConstantDataSequential::getImpl(v13, (llvm::Type *)(8 * v12), v16);
  v15 = v20;
  if (v20 != v22)
LABEL_26:
    free(v15);
  return Impl;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucket<llvm::Type * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = buffer;
  if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v19 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v18 = &buffer[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
  v20 = buffer + 2;
  v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 2) = -4096;
    *v20 = -4096;
    v20 += 4;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 2;
    }
    while (v18 != &buffer[2 * v17]);
  }
  v7 = *a3;
  v22 = v17 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[2 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[2 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Use *v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v11 = &v7[2 * v10];
      v12 = v7 + 2;
      v13 = v10;
      do
      {
        *(v12 - 2) = -4096;
        *v12 = -4096;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)a1;
    }
    v14 = &v7[2 * v6];
    do
    {
      *v11 = -4096;
      v11 += 2;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(a1 + 16) - 1;
        v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        v18 = (_QWORD *)(*(_QWORD *)a1 + 16 * v17);
        v19 = *v18;
        if (v15 != *v18)
        {
          v23 = 0;
          v24 = 1;
          while (v19 != -4096)
          {
            if (v23)
              v25 = 0;
            else
              v25 = v19 == -8192;
            if (v25)
              v23 = v18;
            v26 = v17 + v24++;
            v17 = v26 & v16;
            v18 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v26 & v16));
            v19 = *v18;
            if (v15 == *v18)
              goto LABEL_15;
          }
          if (v23)
            v18 = v23;
        }
LABEL_15:
        *v18 = v15;
        v20 = v4[1];
        v4[1] = 0;
        v18[1] = v20;
        ++*(_DWORD *)(a1 + 8);
        v21 = (llvm::Value *)v4[1];
        v4[1] = 0;
        if (v21)
        {
          llvm::Value::~Value(v21);
          llvm::User::operator delete(v22);
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_QWORD *)(*a1 + 24 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v5 == *v13 && v6 == v14)
    {
      result = 1;
      *a3 = v13;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v15 != -4096 || v14 != -4096)
      {
        if (v17)
          v20 = 0;
        else
          v20 = v14 == -8192;
        if (v20 && v15 == -8192)
          v17 = v13;
        v22 = v12 + v18++;
        v12 = v22 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v22 & v11));
        v15 = *v13;
        v14 = v13[1];
        if (v5 == *v13 && v6 == v14)
        {
          *a3 = v13;
          return result;
        }
      }
      result = 0;
      if (v17)
        v13 = v17;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::InsertIntoBucketImpl<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    ++*(_DWORD *)(a1 + 8);
    if (*a4 != -4096)
      goto LABEL_8;
    goto LABEL_4;
  }
  llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t *)a1, a3, &v9);
  a4 = v9;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    goto LABEL_8;
LABEL_4:
  if (a4[1] == -4096)
    return a4;
LABEL_8:
  --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  unsigned int v10;
  unint64_t v11;
  int64x2_t *v12;
  unsigned int v13;
  unint64_t v14;
  int64x2_t *v15;
  unint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  int64x2_t *v19;
  int64x2_t *v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  int64x2_t *v29;
  int64x2_t *v30;
  int64x2_t v31;
  uint64_t *v32;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (int64x2_t *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v18 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v19 = result;
      do
      {
        *v19 = v17;
        *(int64x2_t *)((char *)v19 + 24) = v17;
        v19 += 3;
        v18 -= 2;
      }
      while (v18);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v22 = 24 * v3;
          v23 = (uint64_t *)v4;
          do
          {
            v25 = v23[1];
            if ((*v23 != -4096 || v25 != -4096) && (*v23 != -8192 || v25 != -8192))
            {
              v32 = 0;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t *)a1, v23, &v32);
              v24 = v32;
              *v32 = *v23;
              v24[1] = v23[1];
              v24[2] = v23[2];
              ++*(_DWORD *)(a1 + 8);
            }
            v23 += 3;
            v22 -= 24;
          }
          while (v22);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v20 = (int64x2_t *)((char *)result + 24 * v10);
    v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v12 = v21;
      v12 = (int64x2_t *)((char *)v12 + 24);
    }
    while (v12 != v20);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_29:
      v30 = (int64x2_t *)((char *)result + 24 * v13);
      v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v15 = v31;
        v15 = (int64x2_t *)((char *)v15 + 24);
      }
      while (v15 != v30);
      return result;
    }
    v26 = v14 / 0x18 + 1;
    v15 = (int64x2_t *)((char *)result + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL));
    v27 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v28 = v26 & 0x1FFFFFFFFFFFFFFELL;
    v29 = result;
    do
    {
      *v29 = v27;
      *(int64x2_t *)((char *)v29 + 24) = v27;
      v29 += 3;
      v28 -= 2;
    }
    while (v28);
    if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_29;
  }
  return result;
}

unint64_t llvm::ConstantExprKeyType::getHash(llvm::ConstantExprKeyType *this)
{
  uint64_t *v2;
  unsigned __int8 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD v9[4];
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = llvm::hashing::detail::hash_combine_range_impl<char const>(*((_QWORD **)this + 1), *((_QWORD *)this + 1) + 8 * *((_QWORD *)this + 2));
  v7 = llvm::hashing::detail::hash_combine_range_impl<char const>(*((_QWORD **)this + 3), *((_QWORD *)this + 3) + 4 * *((_QWORD *)this + 4));
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v5)
    {
      v6 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v6 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v6;
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v12 = v2[19];
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned char,unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>((llvm::hashing::detail::hash_combine_recursive_helper *)v9, 0, v9, (char *)v10, (char *)this, (char *)this + 1, (__int16 *)this + 1, (uint64_t *)&v8, (uint64_t *)&v7, (uint64_t *)this + 5);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned char,unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _BYTE *a3, char *a4, char *a5, char *a6, __int16 *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v22 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(a1, (uint64_t *)&v23, v15, (unint64_t)a4, *a6);
  v24 = v23;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned short>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, *a7);
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a8);
  v26 = v25;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a9);
  v27 = v26;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v27, v20, a4);
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned short>(_QWORD *a1, uint64_t *a2, _WORD *__dst, unint64_t a4, __int16 a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int16 __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return (char *)(__dst + 1);
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      v22 = v21 + v14;
      v24 = a1[2];
      v23 = a1[3];
      v25 = a1[5];
      v26 = v19 + v25;
      v27 = a1[4] + v17 + v20;
      v28 = v21 + v12 + v24;
      v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      v30 = 2 - v8;
      v31 = (char *)a1 + 2 - v8;
      if ((unint64_t)v31 > a4)
        return (char *)a1;
      goto LABEL_7;
    }
    v32 = a1[15];
    v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    v34 = v32 ^ (v32 >> 47);
    v35 = a1[1];
    v36 = v35 + v32 + v33;
    v37 = a1[6];
    v38 = a1[7];
    v39 = a1[5];
    v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    v47 = a1[2];
    v46 = a1[3];
    v48 = v45 + v35 + v47;
    v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    v30 = 2 - v8;
    v31 = (char *)a1 + 2 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, (char *)&__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

BOOL llvm::ConstantExprKeyType::operator==(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v11;

  v2 = *(unsigned __int16 *)(a2 + 18);
  if (v2 != *a1)
    return 0;
  if (a1[1] != *(unsigned __int8 *)(a2 + 17) >> 1)
    return 0;
  v5 = *((_QWORD *)a1 + 2);
  if (v5 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))
    return 0;
  if ((v2 - 53) > 1)
  {
    if (*((_WORD *)a1 + 1))
      return 0;
  }
  else if (*(unsigned __int16 *)(a2 + 24) != *((unsigned __int16 *)a1 + 1))
  {
    return 0;
  }
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*((_QWORD *)a1 + 1);
    v7 = (_QWORD *)(a2 - 32 * v5);
    while (*v6 == *v7)
    {
      v7 += 4;
      ++v6;
      LODWORD(v5) = v5 - 1;
      if (!(_DWORD)v5)
        goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  v8 = *((_QWORD *)a1 + 4);
  if (v2 != 63)
  {
    v9 = 0;
    if (!v8)
      goto LABEL_16;
    return 0;
  }
  v9 = *(const void **)(a2 + 24);
  if (v8 != *(_DWORD *)(a2 + 32))
    return 0;
LABEL_16:
  if (memcmp(*((const void **)a1 + 3), v9, 4 * v8))
    return 0;
  v11 = *((_QWORD *)a1 + 5);
  if (v2 == 34)
    return v11 == *(_QWORD *)(a2 + 24);
  else
    return v11 == 0;
}

uint64_t llvm::ConstantExprKeyType::create(llvm::ConstantExprKeyType *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  __int16 v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  llvm::InsertElementConstantExpr *v38;
  _QWORD *v39;
  _QWORD *v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type **v44;
  char v45;
  uint64_t v46;
  llvm::Type *v47;
  _QWORD *v48;
  llvm::Type *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;

  switch(*(_BYTE *)this)
  {
    case '"':
      v4 = *((_QWORD *)this + 5);
      v5 = (uint64_t *)*((_QWORD *)this + 1);
      v6 = *v5;
      v7 = *((_QWORD *)this + 2) - 1;
      v8 = *((_BYTE *)this + 1);
      v9 = llvm::User::operator new((llvm::User *)0x28, *((_QWORD *)this + 2));
      result = llvm::GetElementPtrConstantExpr::GetElementPtrConstantExpr((uint64_t)v9, v4, v6, v5 + 1, v7, a2);
      *(_BYTE *)(result + 17) = *(_BYTE *)(result + 17) & 1 | (2 * v8);
      return result;
    case '5':
      v15 = llvm::User::operator new((llvm::User *)0x20, 2u);
      v16 = *((_WORD *)this + 1);
      v17 = (uint64_t *)*((_QWORD *)this + 1);
      v18 = *v17;
      v13 = v17[1];
      result = llvm::Value::Value((uint64_t)v15, a2, 5);
      *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | 2;
      *(_WORD *)(result + 18) = 53;
      *(_WORD *)(result + 24) = v16;
      v19 = (_QWORD *)(result - 64);
      if (*(_QWORD *)(result - 64))
        goto LABEL_10;
      goto LABEL_12;
    case '6':
      v20 = llvm::User::operator new((llvm::User *)0x20, 2u);
      v21 = *((_WORD *)this + 1);
      v22 = (uint64_t *)*((_QWORD *)this + 1);
      v18 = *v22;
      v13 = v22[1];
      result = llvm::Value::Value((uint64_t)v20, a2, 5);
      *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | 2;
      *(_WORD *)(result + 18) = 54;
      *(_WORD *)(result + 24) = v21;
      v19 = (_QWORD *)(result - 64);
      if (*(_QWORD *)(result - 64))
      {
LABEL_10:
        **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
        v23 = *(_QWORD *)(result - 56);
        if (v23)
          *(_QWORD *)(v23 + 16) = *(_QWORD *)(result - 48);
      }
LABEL_12:
      *v19 = v18;
      if (v18)
      {
        v26 = *(_QWORD *)(v18 + 8);
        v25 = (_QWORD *)(v18 + 8);
        v24 = v26;
        *(_QWORD *)(result - 56) = v26;
        if (v26)
          *(_QWORD *)(v24 + 16) = result - 56;
        *(_QWORD *)(result - 48) = v25;
        *v25 = v19;
      }
      v14 = (_QWORD *)(result - 32);
      if (!*(_QWORD *)(result - 32))
        goto LABEL_26;
      goto LABEL_24;
    case '=':
      v27 = llvm::User::operator new((llvm::User *)0x18, 2u);
      v28 = (_QWORD *)*((_QWORD *)this + 1);
      v29 = *v28;
      v13 = v28[1];
      result = llvm::Value::Value((uint64_t)v27, *(llvm::Type **)(*(_QWORD *)*v28 + 24), 5);
      *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | 2;
      *(_WORD *)(result + 18) = 61;
      if (*(_QWORD *)(result - 64))
      {
        **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
        v30 = *(_QWORD *)(result - 56);
        if (v30)
          *(_QWORD *)(v30 + 16) = *(_QWORD *)(result - 48);
      }
      *(_QWORD *)(result - 64) = v29;
      v33 = *(_QWORD *)(v29 + 8);
      v32 = (_QWORD *)(v29 + 8);
      v31 = v33;
      *(_QWORD *)(result - 56) = v33;
      if (v33)
        *(_QWORD *)(v31 + 16) = result - 56;
      *(_QWORD *)(result - 48) = v32;
      *v32 = result - 64;
      v14 = (_QWORD *)(result - 32);
      if (*(_QWORD *)(result - 32))
        goto LABEL_24;
      goto LABEL_26;
    case '>':
      v38 = (llvm::InsertElementConstantExpr *)llvm::User::operator new((llvm::User *)0x18, 3u);
      return llvm::InsertElementConstantExpr::InsertElementConstantExpr(v38, **((llvm::Type ****)this + 1), *(llvm::Constant **)(*((_QWORD *)this + 1) + 8), *(llvm::Constant **)(*((_QWORD *)this + 1) + 16));
    case '?':
      v39 = llvm::User::operator new((llvm::User *)0x40, 2u);
      return llvm::ShuffleVectorConstantExpr::ShuffleVectorConstantExpr((uint64_t)v39, **((_QWORD ***)this + 1), *(_QWORD *)(*((_QWORD *)this + 1) + 8), *((void **)this + 3), *((llvm::LLVMContext **)this + 4));
    default:
      if (*(unsigned __int8 *)this - 38 > 0xC)
      {
        v40 = llvm::User::operator new((llvm::User *)0x18, 2u);
        v41 = *(unsigned __int8 *)this;
        v42 = *((_QWORD *)this + 1);
        v44 = *(llvm::Type ***)v42;
        v43 = *(_QWORD *)(v42 + 8);
        v45 = *((_BYTE *)this + 1);
        result = llvm::Value::Value((uint64_t)v40, **(llvm::Type ***)v42, 5);
        *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | 2;
        *(_WORD *)(result + 18) = v41;
        if (*(_QWORD *)(result - 64))
        {
          **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
          v46 = *(_QWORD *)(result - 56);
          if (v46)
            *(_QWORD *)(v46 + 16) = *(_QWORD *)(result - 48);
        }
        *(_QWORD *)(result - 64) = v44;
        v49 = v44[1];
        v48 = v44 + 1;
        v47 = v49;
        *(_QWORD *)(result - 56) = v49;
        if (v49)
          *((_QWORD *)v47 + 2) = result - 56;
        *(_QWORD *)(result - 48) = v48;
        *v48 = result - 64;
        v50 = (_QWORD *)(result - 32);
        if (*(_QWORD *)(result - 32))
        {
          **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
          v51 = *(_QWORD *)(result - 24);
          if (v51)
            *(_QWORD *)(v51 + 16) = *(_QWORD *)(result - 16);
        }
        *v50 = v43;
        if (v43)
        {
          v54 = *(_QWORD *)(v43 + 8);
          v53 = (_QWORD *)(v43 + 8);
          v52 = v54;
          *(_QWORD *)(result - 24) = v54;
          if (v54)
            *(_QWORD *)(v52 + 16) = result - 24;
          *(_QWORD *)(result - 16) = v53;
          *v53 = v50;
        }
        *(_BYTE *)(result + 17) = *(_BYTE *)(result + 17) & 1 | (2 * v45);
      }
      else
      {
        v11 = llvm::User::operator new((llvm::User *)0x18, 1u);
        v12 = *(unsigned __int8 *)this;
        v13 = **((_QWORD **)this + 1);
        result = llvm::Value::Value((uint64_t)v11, a2, 5);
        *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | 1;
        *(_WORD *)(result + 18) = v12;
        v14 = (_QWORD *)(result - 32);
        if (*(_QWORD *)(result - 32))
        {
LABEL_24:
          **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
          v34 = *(_QWORD *)(result - 24);
          if (v34)
            *(_QWORD *)(v34 + 16) = *(_QWORD *)(result - 16);
        }
LABEL_26:
        *v14 = v13;
        if (v13)
        {
          v37 = *(_QWORD *)(v13 + 8);
          v36 = (_QWORD *)(v13 + 8);
          v35 = v37;
          *(_QWORD *)(result - 24) = v37;
          if (v37)
            *(_QWORD *)(v35 + 16) = result - 24;
          *(_QWORD *)(result - 16) = v36;
          *v36 = v14;
        }
      }
      return result;
  }
}

uint64_t llvm::InsertElementConstantExpr::InsertElementConstantExpr(llvm::InsertElementConstantExpr *this, llvm::Type **a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  llvm::Type *v10;
  _QWORD *v11;
  llvm::Type *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  result = llvm::Value::Value((uint64_t)this, *a2, 5);
  v8 = *(_QWORD *)(result - 96);
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | 3;
  *(_WORD *)(result + 18) = 62;
  if (v8)
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v9 = *(_QWORD *)(result - 88);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(result - 80);
  }
  *(_QWORD *)(result - 96) = a2;
  v12 = a2[1];
  v11 = a2 + 1;
  v10 = v12;
  *(_QWORD *)(result - 88) = v12;
  if (v12)
    *((_QWORD *)v10 + 2) = result - 88;
  *(_QWORD *)(result - 80) = v11;
  *v11 = result - 96;
  v13 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v14 = *(_QWORD *)(result - 56);
    if (v14)
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(result - 48);
  }
  *v13 = a3;
  if (a3)
  {
    v17 = *((_QWORD *)a3 + 1);
    v16 = (_QWORD *)((char *)a3 + 8);
    v15 = v17;
    *(_QWORD *)(result - 56) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v16;
    *v16 = v13;
  }
  v18 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v19 = *(_QWORD *)(result - 24);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(result - 16);
  }
  *v18 = a4;
  if (a4)
  {
    v22 = *((_QWORD *)a4 + 1);
    v21 = (_QWORD *)((char *)a4 + 8);
    v20 = v22;
    *(_QWORD *)(result - 24) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v21;
    *v21 = v18;
  }
  return result;
}

uint64_t llvm::ShuffleVectorConstantExpr::ShuffleVectorConstantExpr(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, llvm::LLVMContext *a5)
{
  llvm::Type *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;

  llvm::VectorType::get(*(llvm::ScalableVectorType **)(*a2 + 24), (llvm::Type *)(a5 | ((unint64_t)(*(_BYTE *)(*a2 + 8) == 19) << 32)));
  llvm::Value::Value(a1, v10, 5);
  v11 = *(_QWORD *)(a1 - 64);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | 2;
  *(_WORD *)(a1 + 18) = 63;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  if (v11)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v12 = *(_QWORD *)(a1 - 56);
    if (v12)
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(a1 - 48);
  }
  *(_QWORD *)(a1 - 64) = a2;
  v15 = a2[1];
  v14 = a2 + 1;
  v13 = v15;
  *(_QWORD *)(a1 - 56) = v15;
  if (v15)
    *(_QWORD *)(v13 + 16) = a1 - 56;
  *(_QWORD *)(a1 - 48) = v14;
  *v14 = a1 - 64;
  v16 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v17 = *(_QWORD *)(a1 - 24);
    if (v17)
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v16 = a3;
  if (a3)
  {
    v20 = *(_QWORD *)(a3 + 8);
    v19 = (_QWORD *)(a3 + 8);
    v18 = v20;
    *(_QWORD *)(a1 - 24) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v19;
    *v19 = v16;
  }
  v21 = 0;
  *(_DWORD *)(a1 + 32) = 0;
  if ((unint64_t)(4 * (_QWORD)a5) >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), (4 * (uint64_t)a5) >> 2, 4);
    v21 = *(_DWORD *)(a1 + 32);
  }
  if (a5)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 24) + 4 * v21), a4, 4 * (_QWORD)a5);
    v21 = *(_DWORD *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 32) = v21 + ((unint64_t)(4 * (_QWORD)a5) >> 2);
  *(_QWORD *)(a1 + 56) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)a4, a5, *(_QWORD *)a1);
  return a1;
}

_QWORD **llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::InsertIntoBucketWithLookup<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>> const>(uint64_t a1, _QWORD **a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int v9;
  unsigned int v10;
  int v12;
  _QWORD **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  BOOL v20;
  unsigned int v21;
  unsigned __int8 *v22;
  _QWORD **v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  _QWORD **v28;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 12) > v10 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::grow(a1, v10);
  v12 = *(_DWORD *)(a1 + 16);
  if (v12)
  {
    v13 = 0;
    v14 = *(_QWORD *)a1;
    v15 = (unsigned __int8 *)(a5 + 16);
    v16 = v12 - 1;
    v17 = 1;
    v18 = *(_DWORD *)a5 & v16;
    a2 = (_QWORD **)(*(_QWORD *)a1 + 8 * v18);
    v19 = *a2;
    if (((unint64_t)*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      goto LABEL_9;
LABEL_10:
    while (v19 != (_QWORD *)-4096)
    {
      while (1)
      {
        if (v13)
          v20 = 0;
        else
          v20 = v19 == (_QWORD *)-8192;
        if (v20)
          v13 = a2;
        v21 = v18 + v17++;
        v18 = v21 & v16;
        a2 = (_QWORD **)(v14 + 8 * (v21 & v16));
        v19 = *a2;
        if (((unint64_t)*a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
          break;
LABEL_9:
        if (*(_QWORD *)(a5 + 8) != *v19)
          goto LABEL_10;
        v26 = v17;
        v27 = v18;
        v25 = v16;
        v23 = v13;
        v24 = v14;
        v28 = a2;
        v22 = v15;
        if (llvm::ConstantExprKeyType::operator==(v15, (uint64_t)v19))
        {
          a2 = v28;
          goto LABEL_3;
        }
        a2 = v28;
        v19 = *v28;
        v15 = v22;
        v13 = v23;
        v14 = v24;
        v16 = v25;
        v17 = v26;
        v18 = v27;
        if (*v28 == (_QWORD *)-4096)
          goto LABEL_20;
      }
    }
LABEL_20:
    if (v13)
      a2 = v13;
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != (_QWORD *)-4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = (_QWORD *)*a3;
  return a2;
}

int64x2_t *llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  uint64_t **v26;
  llvm *v27;
  int v28;
  int HashValue;
  int v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t **v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = (uint64_t **)v4;
      do
      {
        if (((unint64_t)*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(*v18);
          v30 = v28 - 1;
          v31 = *v18;
          v32 = HashValue & (v28 - 1);
          v26 = (uint64_t **)((char *)v27 + 8 * v32);
          v33 = *v26;
          if (*v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != (uint64_t *)-4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == (uint64_t *)-8192;
              if (v36)
                v34 = v26;
              v37 = v32 + v35++;
              v32 = v37 & v30;
              v26 = (uint64_t **)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v31 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v31;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v18;
      }
      while (v18 != (uint64_t **)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(uint64_t *a1)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int Hash;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE v30[2];
  __int16 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[36];

  v39[34] = *MEMORY[0x1E0C80C00];
  v37 = v39;
  v38 = 0x2000000000;
  v2 = *((unsigned __int16 *)a1 + 9);
  v3 = *((_WORD *)a1 + 9);
  v4 = *((unsigned __int8 *)a1 + 17);
  if ((v2 - 53) > 1)
  {
    if (v2 == 34)
    {
      v5 = 0;
      v6 = 0;
      v8 = 0;
      v7 = a1[3];
      v9 = *a1;
      v10 = v4 >> 1;
      v14 = *((_DWORD *)a1 + 5);
      v12 = v14 & 0x7FFFFFF;
      if ((v14 & 0x7FFFFFF) != 0)
        goto LABEL_9;
    }
    else
    {
      if (v2 == 63)
      {
        v8 = 0;
        v7 = 0;
        v6 = a1[3];
        v5 = *((unsigned int *)a1 + 8);
        v9 = *a1;
        v10 = v4 >> 1;
        v13 = *((_DWORD *)a1 + 5);
        v12 = v13 & 0x7FFFFFF;
        if ((v13 & 0x7FFFFFF) == 0)
          goto LABEL_15;
        goto LABEL_9;
      }
      v5 = 0;
      v6 = 0;
      v8 = 0;
      v7 = 0;
      v9 = *a1;
      v10 = v4 >> 1;
      v19 = *((_DWORD *)a1 + 5);
      v12 = v19 & 0x7FFFFFF;
      if ((v19 & 0x7FFFFFF) != 0)
        goto LABEL_9;
    }
LABEL_15:
    v15 = 0;
    v18 = v39;
    goto LABEL_16;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *((_WORD *)a1 + 12);
  v9 = *a1;
  v10 = v4 >> 1;
  v11 = *((_DWORD *)a1 + 5);
  v12 = v11 & 0x7FFFFFF;
  if ((v11 & 0x7FFFFFF) == 0)
    goto LABEL_15;
LABEL_9:
  LODWORD(v15) = 0;
  v16 = a1;
  do
  {
    v17 = v16[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
    if (v15 >= HIDWORD(v38))
    {
      v29 = v3;
      v28 = v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v15 + 1, 8);
      v5 = v28;
      v3 = v29;
      LODWORD(v15) = v38;
    }
    *((_QWORD *)v37 + v15) = v17;
    v15 = (v38 + 1);
    LODWORD(v38) = v38 + 1;
    v16 += 4;
    --v12;
  }
  while (v12);
  v18 = v37;
LABEL_16:
  v30[0] = v3;
  v30[1] = v10;
  v31 = v8;
  v32 = v18;
  v33 = v15;
  v34 = v6;
  v35 = v5;
  v36 = v7;
  Hash = llvm::ConstantExprKeyType::getHash((llvm::ConstantExprKeyType *)v30);
  memset(&v39[32], 0, 12);
  {
    v27 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v27 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v27;
  }
  v22 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v39[32] = v9;
  LODWORD(v39[33]) = Hash;
  v23 = *(_QWORD *)((char *)&v39[32] + 4);
  if (v37 != v39)
    free(v37);
  v24 = __ROR8__(v23 + 12, 12);
  v25 = 0x9DDFEA08EB382D69
      * (v24 ^ ((0x9DDFEA08EB382D69 * (v22 ^ v9 ^ v24)) >> 47) ^ (0x9DDFEA08EB382D69 * (v22 ^ v9 ^ v24)));
  return (-348639895 * ((v25 >> 47) ^ v25)) ^ v23;
}

void llvm::ConstantDataSequential::~ConstantDataSequential(llvm::ConstantDataSequential *this, llvm::Value *a2)
{
  llvm::ConstantDataSequential *v3;
  llvm::Use *v4;

  v3 = (llvm::ConstantDataSequential *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    llvm::ConstantDataSequential::~ConstantDataSequential(v3);
    llvm::User::operator delete(v4);
  }
  llvm::Value::~Value(this, a2);
}

unsigned __int8 *llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::findAndCheckConvergenceTokenUsed(llvm::raw_ostream **a1, llvm::User *this)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  char *Descriptor;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28[3];
  uint64_t *v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  uint64_t *v33;
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned __int8 *)this + 16) - 33;
  v3 = v2 > 0x33;
  v4 = (1 << v2) & 0x8000000000041;
  v5 = v3 || v4 == 0;
  if (v5 || (*((_DWORD *)this + 5) & 0x80000000) == 0)
    return 0;
  Descriptor = llvm::User::getDescriptor(this);
  v9 = Descriptor;
  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    v11 = llvm::User::getDescriptor(this);
    v10 = &v11[v12] - v9;
    if ((v10 & 0xFFFFFFFF0) == 0)
      return 0;
  }
  else
  {
    v10 = -(uint64_t)Descriptor;
    if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) == 0)
      return 0;
  }
  v13 = 0;
  v14 = 0;
  v15 = (v10 >> 4);
  do
  {
    if (*(_DWORD *)(*(_QWORD *)&llvm::User::getDescriptor(this)[v13] + 8) == 9)
      ++v14;
    v13 += 16;
    --v15;
  }
  while (v15);
  if (v14 >= 2)
  {
    v18 = "The 'convergencectrl' bundle can occur at most once on a call";
    goto LABEL_30;
  }
  if (!v14)
    return 0;
  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    llvm::User::getDescriptor(this);
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
      llvm::User::getDescriptor(this);
  }
  v16 = llvm::User::getDescriptor(this);
  if (*(_DWORD *)(*(_QWORD *)v16 + 8) == 9)
  {
    v17 = 0;
  }
  else
  {
    v17 = 0;
    v19 = 16;
    do
    {
      ++v17;
      v16 = llvm::User::getDescriptor(this);
      v20 = *(_DWORD *)(*(_QWORD *)&v16[v19] + 8);
      v19 += 16;
    }
    while (v20 != 9);
  }
  v21 = *(unsigned int *)&v16[16 * v17 + 8];
  if (*(unsigned int *)&v16[16 * v17 + 12] - v21 != 1
    || (v22 = (unsigned __int8 *)*((_QWORD *)this + 4 * v21 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)),
        *(_BYTE *)(*(_QWORD *)v22 + 8) != 12))
  {
    v18 = "The 'convergencectrl' bundle requires exactly one token use.";
LABEL_30:
    v28[0] = (uint64_t)v18;
    LOWORD(v30[0]) = 259;
    llvm::GenericSSAContext<llvm::Function>::print((uint64_t)this, v32);
    llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::reportFailure(a1, (uint64_t)v28, v32, 1);
    v23 = v33;
    if (v33 == v32)
    {
      v24 = 4;
      v23 = v32;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v22[16] < 0x1Cu || llvm::GenericSSAContext<llvm::Function>::getIntrinsicID(v22) - 127 >= 3)
  {
    v32[0] = "Convergence control tokens can only be produced by calls to the convergence control intrinsics.";
    v34 = 259;
    llvm::GenericSSAContext<llvm::Function>::print((uint64_t)v22, v28);
    llvm::GenericSSAContext<llvm::Function>::print((uint64_t)this, v30);
    llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::reportFailure(a1, (uint64_t)v32, v28, 2);
    v26 = v31;
    if (v31 == v30)
    {
      v27 = 4;
      v26 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_42;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_42:
    v23 = v29;
    if (v29 == v28)
    {
      v24 = 4;
      v23 = v28;
      goto LABEL_34;
    }
LABEL_31:
    if (v23)
    {
      v24 = 5;
LABEL_34:
      (*(void (**)(uint64_t *))(*v23 + 8 * v24))(v23);
    }
    return 0;
  }
  v28[0] = (uint64_t)this;
  *llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::Instruction const*,void>,llvm::detail::DenseMapPair<llvm::Instruction const*,llvm::Instruction const*>>,llvm::Instruction const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::Instruction const*,void>,llvm::detail::DenseMapPair<llvm::Instruction const*,llvm::Instruction const*>>::operator[]((uint64_t)(a1 + 18), v28) = (uint64_t)v22;
  return v22;
}

_QWORD *llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::reportFailure(llvm::raw_ostream **a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  llvm::raw_ostream *v5;
  _QWORD *result;
  BOOL v9;
  uint64_t i;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a1[4];
  if (!v5)
LABEL_23:
    std::__throw_bad_function_call[abi:nn180100]();
  result = (_QWORD *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v5 + 48))(v5);
  if (*a1)
    v9 = a4 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    for (i = 32 * a4; i; i -= 32)
    {
      v12 = (_QWORD *)a3[3];
      if (!v12)
      {
        v17 = 0;
        goto LABEL_23;
      }
      if (a3 == v12)
      {
        v17 = v16;
        (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v16);
        v13 = (uint64_t)v17;
        if (!v17)
          goto LABEL_23;
      }
      else
      {
        v13 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
        v17 = (_BYTE *)v13;
        if (!v13)
          goto LABEL_23;
      }
      v14 = *a1;
      (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)v13 + 48))(v13, *a1);
      v15 = (_BYTE *)*((_QWORD *)v14 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
      {
        llvm::raw_ostream::write(v14, 10);
        result = v17;
        if (v17 == v16)
        {
LABEL_8:
          result = v16;
          v11 = 4;
          goto LABEL_9;
        }
      }
      else
      {
        *((_QWORD *)v14 + 4) = v15 + 1;
        *v15 = 10;
        result = v17;
        if (v17 == v16)
          goto LABEL_8;
      }
      if (!result)
        goto LABEL_10;
      v11 = 5;
LABEL_9:
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
LABEL_10:
      a3 += 4;
    }
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::Instruction const*,void>,llvm::detail::DenseMapPair<llvm::Instruction const*,llvm::Instruction const*>>,llvm::Instruction const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::Instruction const*,void>,llvm::detail::DenseMapPair<llvm::Instruction const*,llvm::Instruction const*>>::operator[](uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
    return llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>(a1, 0, a2)+ 1;
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 == *v6)
    return v6 + 1;
  v9 = 0;
  v10 = 1;
  while (v7 != -4096)
  {
    if (v9)
      v11 = 0;
    else
      v11 = v7 == -8192;
    if (v11)
      v9 = v6;
    v12 = v5 + v10++;
    v5 = v12 & v4;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v12 & v4));
    v7 = *v6;
    if (*a2 == *v6)
      return v6 + 1;
  }
  if (v9)
    v13 = v9;
  else
    v13 = v6;
  return llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>(a1, v13, a2)+ 1;
}

_QWORD *llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::clear(_DWORD *a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *result;

  v2 = a1[38];
  if (v2 || a1[39])
  {
    v3 = a1 + 36;
    v4 = a1[40];
    if (v4 > 4 * v2 && v4 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)v3);
      goto LABEL_16;
    }
    if ((_DWORD)v4)
    {
      v5 = (_QWORD *)*v3;
      v6 = (v4 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v6)
      {
        v7 = v6 + 1;
        v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v9 = &v5[2 * v8];
        v10 = v5 + 2;
        v11 = v8;
        do
        {
          *(v10 - 2) = -4096;
          *v10 = -4096;
          v10 += 4;
          v11 -= 2;
        }
        while (v11);
        if (v7 == v8)
          goto LABEL_15;
      }
      else
      {
        v9 = (_QWORD *)*v3;
      }
      v12 = &v5[2 * v4];
      do
      {
        *v9 = -4096;
        v9 += 2;
      }
      while (v9 != v12);
    }
LABEL_15:
    *((_QWORD *)a1 + 19) = 0;
  }
LABEL_16:
  result = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::clear((uint64_t)(a1 + 12));
  a1[34] = 2;
  return result;
}

uint64_t llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::visit(uint64_t result)
{
  *(_BYTE *)(result + 168) = 0;
  return result;
}

uint64_t llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::visit(uint64_t a1, uint64_t a2)
{
  int IntrinsicID;
  uint64_t result;
  uint64_t v6;
  uint64_t Function;
  const char *v8;
  char v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  char v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  IntrinsicID = llvm::GenericSSAContext<llvm::Function>::getIntrinsicID((unsigned __int8 *)a2);
  result = (uint64_t)llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::findAndCheckConvergenceTokenUsed((llvm::raw_ostream **)a1, (llvm::User *)a2);
  v6 = result;
  switch(IntrinsicID)
  {
    case 127:
LABEL_8:
      if (v6)
      {
        v8 = "Entry or anchor intrinsic cannot have a convergencectrl token operand.";
        goto LABEL_42;
      }
      goto LABEL_14;
    case 129:
      if (!result)
      {
        v8 = "Loop intrinsic must have a convergencectrl token operand.";
        goto LABEL_42;
      }
      if (*(_BYTE *)(a1 + 168))
      {
        v8 = "Loop intrinsic cannot be preceded by a convergent operation in the same basic block.";
        goto LABEL_42;
      }
LABEL_14:
      v9 = 1;
      goto LABEL_15;
    case 128:
      Function = llvm::Instruction::getFunction((llvm::Instruction *)a2);
      if ((llvm::Function::hasFnAttribute(Function, 6) & 1) == 0)
      {
        v8 = "Entry intrinsic can occur only in a convergent function.";
        goto LABEL_42;
      }
      result = llvm::BasicBlock::isEntryBlock(*(llvm::BasicBlock **)(a2 + 40));
      if ((result & 1) == 0)
      {
        v8 = "Entry intrinsic can occur only in the entry block.";
        goto LABEL_42;
      }
      if (*(_BYTE *)(a1 + 168))
      {
        v8 = "Entry intrinsic cannot be preceded by a convergent operation in the same basic block.";
        goto LABEL_42;
      }
      goto LABEL_8;
  }
  v9 = 0;
LABEL_15:
  v10 = *(unsigned __int8 *)(a2 + 16) - 33;
  v11 = v10 > 0x33;
  v12 = (1 << v10) & 0x8000000000041;
  if (!v11 && v12 != 0)
  {
    result = llvm::AttributeSet::hasAttribute((_QWORD *)(a2 + 72), 6);
    if ((result & 1) != 0 || (result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6), (_DWORD)result))
      *(_BYTE *)(a1 + 168) = 1;
  }
  v14 = v9 ^ 1;
  v15 = *(unsigned __int8 *)(a2 + 16) - 33;
  if (v6)
    v14 = 0;
  if ((v14 & 1) != 0)
  {
    if (v15 > 0x33)
      return result;
    if (((1 << v15) & 0x8000000000041) == 0)
      return result;
    result = llvm::AttributeSet::hasAttribute((_QWORD *)(a2 + 72), 6);
    if ((result & 1) == 0)
    {
      result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6);
      if (!(_DWORD)result)
        return result;
    }
    if (*(_DWORD *)(a1 + 136))
    {
      *(_DWORD *)(a1 + 136) = 1;
      return result;
    }
  }
  else
  {
    if (v15 > 0x33
      || ((1 << v15) & 0x8000000000041) == 0
      || (result = llvm::AttributeSet::hasAttribute((_QWORD *)(a2 + 72), 6), (result & 1) == 0)
      && (result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6), (result & 1) == 0))
    {
      v8 = "Convergence control token can only be used in a convergent call.";
      goto LABEL_42;
    }
    if (*(_DWORD *)(a1 + 136) != 1)
    {
      *(_DWORD *)(a1 + 136) = 0;
      return result;
    }
  }
  v8 = "Cannot mix controlled and uncontrolled convergence in the same function.";
LABEL_42:
  v17 = v8;
  v18 = 259;
  llvm::GenericSSAContext<llvm::Function>::print(a2, v19);
  llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::reportFailure((llvm::raw_ostream **)a1, (uint64_t)&v17, v19, 1);
  result = (uint64_t)v20;
  if (v20 == v19)
  {
    v16 = 4;
    result = (uint64_t)v19;
  }
  else
  {
    if (!v20)
      return result;
    v16 = 5;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8 * v16))(result);
}

void llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::verify(uint64_t a1)
{
  llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::compute((_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 128));
}

_QWORD *llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::verify(llvm::DominatorTreeBase<llvm::BasicBlock,false> const&)::{lambda(llvm::Instruction const*,llvm::Instruction const*,llvm::SmallVectorImpl<llvm::Instruction const*> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (***v44)();
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD v48[4];
  __int16 v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t (**v54)();
  uint64_t v55;
  llvm::raw_ostream **v56;
  uint64_t (***v57)();
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v7 = *(llvm::raw_ostream ***)a1;
  v8 = *(_QWORD **)a4;
  v9 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = *(_QWORD **)a4;
    while (*v11 != a2)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
      {
        v11 = &v8[v9];
        break;
      }
    }
    if (v9 != v11 - v8)
    {
      v14 = v8 - 1;
      if (v14[v9] != a2)
      {
        do
          LODWORD(v9) = v9 - 1;
        while (v14[v9] != a2);
        *(_DWORD *)(a4 + 8) = v9;
      }
      v15 = *(_QWORD *)(a3 + 40);
      result = (_QWORD *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getCycle((uint64_t)(v7 + 6), v15);
      v47 = result;
      if (!result)
        return result;
      v17 = *(_QWORD *)(a2 + 40);
      if (v17 == v15)
        return result;
      v18 = (uint64_t)result;
      if (!*((_DWORD *)result + 16))
      {
        v27 = result[10];
        v28 = *((unsigned int *)result + 22);
        if ((_DWORD)v28)
        {
          v29 = 8 * v28;
          v30 = (_QWORD *)result[10];
          while (*v30 != v17)
          {
            ++v30;
            v29 -= 8;
            if (!v29)
            {
              v30 = (_QWORD *)(v27 + 8 * v28);
              break;
            }
          }
        }
        else
        {
          v30 = (_QWORD *)result[10];
        }
        if (v28 != ((uint64_t)v30 - v27) >> 3)
          return result;
LABEL_41:
        if (llvm::GenericSSAContext<llvm::Function>::getIntrinsicID((unsigned __int8 *)a3) != 129)
        {
          v48[0] = "Convergence token used by an instruction other than llvm.experimental.convergence.loop in a cycle tha"
                   "t does not contain the token's definition.";
          v49 = 259;
          llvm::GenericSSAContext<llvm::Function>::print(a3, v50);
          v52[0] = off_1E0E518F8;
          v52[1] = v18;
          v52[2] = v7 + 6;
          v53 = v52;
          llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::reportFailure(v7, (uint64_t)v48, v50, 2);
          v12 = v53;
          if (v53 != v52)
            goto LABEL_8;
          goto LABEL_72;
        }
        v31 = *(_QWORD *)v18;
        if (*(_QWORD *)v18)
        {
          while (1)
          {
            v33 = v31;
            if (*(_DWORD *)(v31 + 64))
              break;
            v41 = *(_QWORD *)(v31 + 80);
            v42 = *(unsigned int *)(v33 + 88);
            if ((_DWORD)v42)
            {
              v43 = 8 * v42;
              v32 = *(_QWORD **)(v33 + 80);
              while (*v32 != v17)
              {
                ++v32;
                v43 -= 8;
                if (!v43)
                {
                  v32 = (_QWORD *)(v41 + 8 * v42);
                  break;
                }
              }
            }
            else
            {
              v32 = *(_QWORD **)(v33 + 80);
            }
            if (v42 != ((uint64_t)v32 - v41) >> 3)
              goto LABEL_61;
LABEL_46:
            v47 = (_QWORD *)v33;
            v31 = *(_QWORD *)v33;
            v18 = v33;
            if (!*(_QWORD *)v33)
              goto LABEL_61;
          }
          v34 = *(_QWORD *)(v31 + 56);
          v35 = *(unsigned int *)(v33 + 72);
          if ((_DWORD)v35)
          {
            LODWORD(v36) = (v35 - 1) & ((v17 >> 4) ^ (v17 >> 9));
            v37 = (uint64_t *)(v34 + 8 * v36);
            v38 = *v37;
            if (*v37 == v17)
              goto LABEL_60;
            v39 = 1;
            while (v38 != -4096)
            {
              v40 = v36 + v39++;
              v36 = v40 & (v35 - 1);
              v38 = *(_QWORD *)(v34 + 8 * v36);
              if (v38 == v17)
              {
                v37 = (uint64_t *)(v34 + 8 * v36);
                goto LABEL_60;
              }
            }
          }
          v37 = (uint64_t *)(v34 + 8 * v35);
LABEL_60:
          if (v37 != (uint64_t *)(v34 + 8 * v35))
            goto LABEL_61;
          goto LABEL_46;
        }
LABEL_61:
        if (*(_DWORD *)(v18 + 16) == 1 && v15 == **(_QWORD **)(v18 + 8))
        {
          if (!llvm::DenseMapBase<llvm::DenseMap<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,void>,llvm::detail::DenseMapPair<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,llvm::Instruction const*>>,llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,void>,llvm::detail::DenseMapPair<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,llvm::Instruction const*>>::count(*(uint64_t **)(a1 + 8), v18))
          {
            result = llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::Instruction const*,void>,llvm::detail::DenseMapPair<llvm::Instruction const*,llvm::Instruction const*>>,llvm::Instruction const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::Instruction const*,void>,llvm::detail::DenseMapPair<llvm::Instruction const*,llvm::Instruction const*>>::operator[](*(_QWORD *)(a1 + 8), (uint64_t *)&v47);
            *result = a3;
            return result;
          }
          v48[0] = "Two static convergence token uses in a cycle that does not contain either token's definition.";
          v49 = 259;
          llvm::GenericSSAContext<llvm::Function>::print(a3, v50);
          v46 = llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::Instruction const*,void>,llvm::detail::DenseMapPair<llvm::Instruction const*,llvm::Instruction const*>>,llvm::Instruction const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::Instruction const*,void>,llvm::detail::DenseMapPair<llvm::Instruction const*,llvm::Instruction const*>>::operator[](*(_QWORD *)(a1 + 8), (uint64_t *)&v47);
          llvm::GenericSSAContext<llvm::Function>::print(*v46, v52);
          v54 = off_1E0E518F8;
          v55 = (uint64_t)v47;
        }
        else
        {
          v48[0] = "Cycle heart must dominate all blocks in the cycle.";
          v49 = 259;
          llvm::GenericSSAContext<llvm::Function>::print(a3, v50);
          llvm::GenericSSAContext<llvm::Function>::printAsOperand(v15, v52);
          v54 = off_1E0E518F8;
          v55 = v18;
        }
        v56 = v7 + 6;
        v57 = &v54;
        llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::reportFailure(v7, (uint64_t)v48, v50, 3);
        v44 = v57;
        if (v57 == &v54)
        {
          v45 = 4;
          v44 = &v54;
        }
        else
        {
          if (!v57)
            goto LABEL_71;
          v45 = 5;
        }
        (*v44)[v45]();
LABEL_71:
        v12 = v53;
        if (v53 != v52)
          goto LABEL_8;
LABEL_72:
        v13 = 4;
        v12 = v52;
        goto LABEL_24;
      }
      v19 = result[7];
      v20 = *((unsigned int *)result + 18);
      if ((_DWORD)v20)
      {
        LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        v22 = (uint64_t *)(v19 + 8 * v21);
        v23 = *v22;
        if (*v22 == v17)
          goto LABEL_37;
        v24 = 1;
        while (v23 != -4096)
        {
          v25 = v21 + v24++;
          v21 = v25 & (v20 - 1);
          v23 = *(_QWORD *)(v19 + 8 * v21);
          if (v23 == v17)
          {
            v22 = (uint64_t *)(v19 + 8 * v21);
            goto LABEL_37;
          }
        }
      }
      v22 = (uint64_t *)(v19 + 8 * v20);
LABEL_37:
      if (v22 != (uint64_t *)(v19 + 8 * v20))
        return result;
      goto LABEL_41;
    }
  }
  v48[0] = "Convergence region is not well-nested.";
  v49 = 259;
  llvm::GenericSSAContext<llvm::Function>::print(a2, v50);
  llvm::GenericSSAContext<llvm::Function>::print(a3, v52);
  llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::reportFailure(v7, (uint64_t)v48, v50, 2);
  v12 = v53;
  if (v53 == v52)
  {
    v13 = 4;
    v12 = v52;
    goto LABEL_24;
  }
LABEL_8:
  if (v12)
  {
    v13 = 5;
LABEL_24:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  result = v51;
  if (v51 == v50)
  {
    v26 = 4;
    result = v50;
  }
  else
  {
    if (!v51)
      return result;
    v26 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v26))();
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,void>,llvm::detail::DenseMapPair<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,llvm::Instruction const*>>,llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,llvm::Instruction const*,llvm::DenseMapInfo<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,void>,llvm::detail::DenseMapPair<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> const*,llvm::Instruction const*>>::count(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  unsigned int v9;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(*a1 + 16 * v5);
    if (v6 == a2)
      return 1;
    v8 = 1;
    result = 1;
    while (v6 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        return result;
    }
  }
  return 0;
}

__n128 std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1E0E518F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E0E518F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::operator()(uint64_t a1, llvm::raw_ostream *a2))()
{
  return llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)const::{lambda(llvm::raw_ostream &)#1}::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_8FunctionEEEE5printERKS3_EUlRNS_11raw_ostreamEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_8FunctionEEEE5printERKS3_EUlRNS_11raw_ostreamEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_8FunctionEEEE5printERKS3_EUlRNS_11raw_ostreamEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_8FunctionEEEE5printERKS3_EUlRNS_11raw_ostreamEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::target_type()
{
}

uint64_t (***llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print(llvm::GenericSSAContext<llvm::Function> const&)const::{lambda(llvm::raw_ostream &)#1}::operator()(uint64_t *a1, llvm::raw_ostream *this))()
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t (***result)();
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  uint64_t (**v25)();
  _QWORD v26[2];
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v5) > 5)
  {
    *(_WORD *)(v5 + 4) = 15720;
    *(_DWORD *)v5 = 1953523044;
    *((_QWORD *)this + 4) += 6;
    v6 = this;
  }
  else
  {
    v6 = llvm::raw_ostream::write(this, "depth=", 6uLL);
  }
  v7 = llvm::raw_ostream::operator<<(v6, *(unsigned int *)(v4 + 160));
  v8 = v7;
  v9 = *((_QWORD *)v7 + 4);
  if ((unint64_t)(*((_QWORD *)v7 + 3) - v9) > 9)
  {
    *(_WORD *)(v9 + 8) = 10355;
    *(_QWORD *)v9 = *(_QWORD *)": entries(";
    *((_QWORD *)v7 + 4) += 10;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v7, ": entries(", 0xAuLL);
  }
  v10 = a1[1];
  v25 = off_1E0E518A0;
  v26[0] = v4;
  v26[1] = v10;
  v27 = &v25;
  llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)const::{lambda(llvm::raw_ostream &)#1}::operator()(v26, v8);
  v11 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 41);
    result = v27;
    if (v27 != &v25)
      goto LABEL_9;
LABEL_12:
    v13 = 4;
    result = &v25;
    goto LABEL_13;
  }
  *((_QWORD *)v8 + 4) = v11 + 1;
  *v11 = 41;
  result = v27;
  if (v27 == &v25)
    goto LABEL_12;
LABEL_9:
  if (!result)
    goto LABEL_14;
  v13 = 5;
LABEL_13:
  result = (uint64_t (***)())(*result)[v13]();
LABEL_14:
  v14 = *(unsigned int *)(v4 + 88);
  if ((_DWORD)v14)
  {
    v15 = *(uint64_t **)(v4 + 80);
    v16 = &v15[v14];
    do
    {
      v18 = *v15;
      v19 = *(_QWORD *)(v4 + 8);
      v20 = *(unsigned int *)(v4 + 16);
      if ((_DWORD)v20)
      {
        v21 = 8 * v20;
        v22 = *(_QWORD **)(v4 + 8);
        while (*v22 != v18)
        {
          ++v22;
          v21 -= 8;
          if (!v21)
          {
            v22 = (_QWORD *)(v19 + 8 * v20);
            break;
          }
        }
        if (v20 != ((uint64_t)v22 - v19) >> 3)
          goto LABEL_18;
      }
      v23 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v23 >= *((_QWORD *)this + 3))
      {
        v24 = llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((_QWORD *)this + 4) = v23 + 1;
        *v23 = 32;
        v24 = this;
      }
      llvm::GenericSSAContext<llvm::Function>::print(v18, &v25);
      if (!v27)
        std::__throw_bad_function_call[abi:nn180100]();
      ((void (*)(uint64_t (***)(), llvm::raw_ostream *))(*v27)[6])(v27, v24);
      result = v27;
      if (v27 == &v25)
      {
        result = &v25;
        v17 = 4;
      }
      else
      {
        if (!v27)
          goto LABEL_18;
        v17 = 5;
      }
      result = (uint64_t (***)())(*result)[v17]();
LABEL_18:
      ++v15;
    }
    while (v15 != v16);
  }
  return result;
}

__n128 std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1E0E518A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E0E518A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::operator()(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)const::{lambda(llvm::raw_ostream &)#1}::operator()((_QWORD *)(a1 + 8), a2);
}

uint64_t std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_8FunctionEEEE12printEntriesERKS3_EUlRNS_11raw_ostreamEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_8FunctionEEEE12printEntriesERKS3_EUlRNS"
                                "_11raw_ostreamEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_8FunctionEEEE12printEntriesERKS3_EUlRNS_11raw_ostreamEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_8FunctionEEEE12printEntriesERKS3_EUlRNS_11raw_ostreamEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1},std::allocator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)::{lambda(llvm::raw_ostream &)#1}>,void ()(llvm::raw_ostream &)>::target_type()
{
}

_QWORD *llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries(llvm::GenericSSAContext<llvm::Function> const&)const::{lambda(llvm::raw_ostream &)#1}::operator()(_QWORD *result, llvm::raw_ostream *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(*result + 16);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(*result + 8);
    llvm::GenericSSAContext<llvm::Function>::print(*v4, v11);
    if (!v12)
LABEL_21:
      std::__throw_bad_function_call[abi:nn180100]();
    (*(void (**)(_QWORD *, llvm::raw_ostream *))(*v12 + 48))(v12, a2);
    result = v12;
    if (v12 == v11)
    {
      v5 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
      {
LABEL_8:
        if ((_DWORD)v2 == 1)
          return result;
        v6 = v4 + 1;
        v7 = 8 * v2 - 8;
        while (1)
        {
          v9 = *v6;
          v10 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v10 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 32);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v10 + 1;
            *v10 = 32;
          }
          llvm::GenericSSAContext<llvm::Function>::print(v9, v11);
          if (!v12)
            goto LABEL_21;
          (*(void (**)(_QWORD *, llvm::raw_ostream *))(*v12 + 48))(v12, a2);
          result = v12;
          if (v12 == v11)
          {
            result = v11;
            v8 = 4;
          }
          else
          {
            if (!v12)
              goto LABEL_13;
            v8 = 5;
          }
          result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
LABEL_13:
          ++v6;
          v7 -= 8;
          if (!v7)
            return result;
        }
      }
      v5 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    goto LABEL_8;
  }
  return result;
}

__n128 std::__function::__func<llvm::function_ref<void ()(llvm::Twine const&)>,std::allocator<llvm::function_ref<void ()(llvm::Twine const&)>>,void ()(llvm::Twine const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E0E4F708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::function_ref<void ()(llvm::Twine const&)>,std::allocator<llvm::function_ref<void ()(llvm::Twine const&)>>,void ()(llvm::Twine const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E0E4F708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<llvm::function_ref<void ()(llvm::Twine const&)>,std::allocator<llvm::function_ref<void ()(llvm::Twine const&)>>,void ()(llvm::Twine const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t std::__function::__func<llvm::function_ref<void ()(llvm::Twine const&)>,std::allocator<llvm::function_ref<void ()(llvm::Twine const&)>>,void ()(llvm::Twine const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000181284D3ELL)
    return a1 + 8;
  if (((v3 & 0x8000000181284D3ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181284D3ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181284D3ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::function_ref<void ()(llvm::Twine const&)>,std::allocator<llvm::function_ref<void ()(llvm::Twine const&)>>,void ()(llvm::Twine const&)>::target_type()
{
}

void llvm::ReversePostOrderTraversal<llvm::Function const*,llvm::GraphTraits<llvm::Function const*>>::Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Instruction *v5;
  uint64_t NumSuccessors;
  llvm::Instruction *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _OWORD v12[4];
  void *v13[2];
  _OWORD v14[20];
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _QWORD v20[8];
  void *v21;
  uint64_t v22;
  _QWORD v23[41];

  v23[40] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  if (v2)
    v3 = v2 - 24;
  else
    v3 = 0;
  v16 = v20;
  v17 = v20;
  v19 = 0;
  v22 = 0x800000000;
  v18 = 0x100000008;
  v21 = v23;
  v20[0] = v3;
  v4 = *(_QWORD *)(v3 + 48);
  if (v4 == v3 + 48)
  {
    v5 = 0;
    NumSuccessors = 0;
  }
  else
  {
    v5 = 0;
    NumSuccessors = 0;
    v7 = (llvm::Instruction *)(v4 - 24);
    if (v4)
      v8 = v4 - 24;
    else
      v8 = 0;
    if (*(unsigned __int8 *)(v8 + 16) - 29 <= 0xA)
    {
      NumSuccessors = llvm::Instruction::getNumSuccessors(v7);
      v5 = v7;
    }
  }
  v23[0] = v3;
  v23[1] = v5;
  v23[2] = 0;
  v23[3] = v5;
  v23[4] = NumSuccessors;
  LODWORD(v22) = 1;
  llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>::traverseChild((uint64_t)&v16);
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13[0] = 0;
  memset(v12, 0, sizeof(v12));
  v9 = (char *)v12 + 8;
  v10 = (char *)v12 + 8;
  v11 = 8;
  v13[1] = (char *)v14 + 8;
  DWORD1(v14[0]) = 8;
  std::copy[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>>((const void **)&v16, (uint64_t)&v9);
  if (v13[1] != (char *)v14 + 8)
    free(v13[1]);
  if (v10 != v9)
    free(v10);
  if (v21 != v23)
    free(v21);
  if (v17 != v16)
    free(v17);
}

uint64_t std::copy[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>>(const void **a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  void *v12;
  void *v13;
  const void *v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[320];
  void *v18;
  void *v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[41];
  void *v24;
  void *v25;
  _QWORD v26[42];

  v26[41] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v18, &v20, (const llvm::SmallPtrSetImplBase *)a1);
  v21 = v23;
  v22 = 0x800000000;
  if (&v18 != (void **)a1)
  {
    v4 = *((_DWORD *)a1 + 26);
    if (v4)
    {
      if (v4 < 9)
      {
        v6 = v23;
        v5 = *((_DWORD *)a1 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, *((unsigned int *)a1 + 26), 40);
        v5 = *((_DWORD *)a1 + 26);
        if (!v5)
        {
LABEL_8:
          LODWORD(v22) = v4;
          goto LABEL_9;
        }
        v6 = v21;
      }
      memcpy(v6, a1[12], 40 * v5);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v12, &v14, (const llvm::SmallPtrSetImplBase *)a2);
  v15 = v17;
  v16 = 0x800000000;
  if (&v12 != (void **)a2)
  {
    v7 = *(_DWORD *)(a2 + 104);
    if (v7)
    {
      if (v7 < 9)
      {
        v9 = v17;
        v8 = *(_DWORD *)(a2 + 104);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, *(unsigned int *)(a2 + 104), 40);
        v8 = *(_DWORD *)(a2 + 104);
        if (!v8)
        {
LABEL_16:
          LODWORD(v16) = v7;
          goto LABEL_17;
        }
        v9 = v15;
      }
      memcpy(v9, *(const void **)(a2 + 96), 40 * v8);
      goto LABEL_16;
    }
  }
LABEL_17:
  std::__copy[abi:nn180100]<std::_ClassicAlgPolicy,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>>((uint64_t)&v18, (uint64_t)&v12);
  v10 = v26[40];
  if (v25 != v26)
    free(v25);
  if (v24 != (void *)v23[40])
    free(v24);
  if (v15 != v17)
    free(v15);
  if (v13 != v12)
    free(v13);
  if (v21 != v23)
    free(v21);
  if (v19 != v18)
    free(v19);
  return v10;
}

void std::__copy[abi:nn180100]<std::_ClassicAlgPolicy,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7[2];
  _BYTE v8[320];
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12[2];
  _QWORD v13[41];

  v13[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v9, &v11, 8, (uint64_t *)a1);
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v12, (uint64_t *)(a1 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v4, &v6, 8, (uint64_t *)a2);
  v7[0] = v8;
  v7[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v7, (uint64_t *)(a2 + 96));
  std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>>((uint64_t)&v9, (uint64_t)&v4);
  if (v7[0] != v8)
    free(v7[0]);
  if (v5 != v4)
    free(v5);
  if (v12[0] != v13)
    free(v12[0]);
  if (v10 != v9)
    free(v10);
}

void std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7[2];
  _BYTE v8[320];
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12[2];
  _QWORD v13[41];

  v13[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v9, &v11, 8, (uint64_t *)a1);
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v12, (uint64_t *)(a1 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v4, &v6, 8, (uint64_t *)a2);
  v7[0] = v8;
  v7[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v7, (uint64_t *)(a2 + 96));
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>,0>((uint64_t)&v9);
  if (v7[0] != v8)
    free(v7[0]);
  if (v5 != v4)
    free(v5);
  if (v12[0] != v13)
    free(v12[0]);
  if (v10 != v9)
    free(v10);
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>,0>(uint64_t a1)
{
  const llvm::SmallPtrSetImplBase *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const llvm::SmallPtrSetImplBase *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18[2];
  _BYTE v19[320];
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23[2];
  _BYTE v24[320];
  void *v25;
  void *v26;
  void *v27;
  int v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33[2];
  _BYTE v34[320];
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38[2];
  _BYTE v39[320];
  void *v40;
  void *v41;
  void *v42;
  int v43;
  _QWORD v44[41];
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48[2];
  _BYTE v49[320];
  void *v50;
  void *v51;
  const void *v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[320];
  void *v56;
  void *v57;
  void *v58;
  int v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  int v64;
  _QWORD v65[41];

  v1 = (const llvm::SmallPtrSetImplBase *)MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v8 = v7;
  v65[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v50, &v52, v1);
  v53 = v55;
  v54 = 0x800000000;
  if (&v50 != (void **)v6)
  {
    v9 = *((_DWORD *)v6 + 26);
    if (v9)
    {
      if (v9 < 9)
      {
        v11 = v55;
        v10 = *((_DWORD *)v6 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, *((unsigned int *)v6 + 26), 40);
        v10 = *((_DWORD *)v6 + 26);
        if (!v10)
        {
LABEL_8:
          LODWORD(v54) = v9;
          goto LABEL_9;
        }
        v11 = v53;
      }
      memcpy(v11, *((const void **)v6 + 12), 40 * v10);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v45, &v47, 8, (uint64_t *)v5);
  v48[0] = v49;
  v48[1] = (void *)0x800000000;
  if (*(_DWORD *)(v5 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v48, (uint64_t *)(v5 + 96));
  std::__unwrap_range[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>>((uint64_t)&v50, (uint64_t)&v45, &v56);
  if (v48[0] != v49)
    free(v48[0]);
  if (v46 != v45)
    free(v46);
  if (v53 != v55)
    free(v53);
  if (v51 != v50)
    free(v51);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v35, &v37, 8, (uint64_t *)&v56);
  v38[0] = v39;
  v38[1] = (void *)0x800000000;
  if (v59)
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v38, (uint64_t *)&v58);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v30, &v32, 8, (uint64_t *)&v61);
  v33[0] = v34;
  v33[1] = (void *)0x800000000;
  if (v64)
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v33, (uint64_t *)&v63);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>>((uint64_t)&v35, (uint64_t)&v30, v3, (uint64_t)&v40);
  if (v33[0] != v34)
    free(v33[0]);
  if (v31 != v30)
    free(v31);
  if (v38[0] != v39)
    free(v38[0]);
  if (v36 != v35)
    free(v36);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v20, &v22, 8, (uint64_t *)v6);
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*((_DWORD *)v6 + 26))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v23, (uint64_t *)v6 + 12);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v15, &v17, 8, (uint64_t *)&v40);
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  if (v43)
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v18, (uint64_t *)&v42);
  std::__rewrap_range[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>>((uint64_t)&v20, (uint64_t)&v15, (uint64_t)&v25);
  v12 = v44[40];
  v13 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(v8, (void *)(v8 + 32), 8, (uint64_t *)&v25);
  *(_QWORD *)(v13 + 96) = v8 + 112;
  v14 = v13 + 96;
  *(_QWORD *)(v14 + 8) = 0x800000000;
  if (v28)
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=(v14, (uint64_t *)&v27);
  *(_QWORD *)(v8 + 432) = v12;
  if (v27 != &v29)
    free(v27);
  if (v26 != v25)
    free(v26);
  if (v18[0] != v19)
    free(v18[0]);
  if (v16 != v15)
    free(v16);
  if (v23[0] != v24)
    free(v23[0]);
  if (v21 != v20)
    free(v21);
  if (v42 != v44)
    free(v42);
  if (v41 != v40)
    free(v41);
  if (v63 != v65)
    free(v63);
  if (v62 != v61)
    free(v62);
  if (v58 != &v60)
    free(v58);
  if (v57 != v56)
    free(v57);
}

void std::__unwrap_range[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11[2];
  _BYTE v12[320];
  void *v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21[2];
  _BYTE v22[320];
  void *v23;
  void *v24;
  void *v25;
  int v26;
  _QWORD v27[41];

  v27[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v18, &v20, 8, (uint64_t *)a1);
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v21, (uint64_t *)(a1 + 96));
  std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::__unwrap_iter_impl<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,false>,0>((const void **)&v18, (uint64_t)&v23);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v8, &v10, 8, (uint64_t *)a2);
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v11, (uint64_t *)(a2 + 96));
  std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::__unwrap_iter_impl<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,false>,0>((const void **)&v8, (uint64_t)&v13);
  v6 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)a3, a3 + 4, 8, (uint64_t *)&v23);
  *(_QWORD *)(v6 + 96) = a3 + 14;
  v7 = v6 + 96;
  *(_QWORD *)(v7 + 8) = 0x800000000;
  if (v26)
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=(v7, (uint64_t *)&v25);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(a3 + 54), a3 + 58, 8, (uint64_t *)&v13);
  a3[66] = a3 + 68;
  a3[67] = 0x800000000;
  if (v16)
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)(a3 + 66), (uint64_t *)&v15);
  if (v15 != &v17)
    free(v15);
  if (v14 != v13)
    free(v14);
  if (v11[0] != v12)
    free(v11[0]);
  if (v9 != v8)
    free(v9);
  if (v25 != v27)
    free(v25);
  if (v24 != v23)
    free(v24);
  if (v21[0] != v22)
    free(v21[0]);
  if (v19 != v18)
    free(v19);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::back_insert_iterator<llvm::SmallVector<llvm::BasicBlock const*,8u>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;

  v8 = (uint64_t *)(a1 + 96);
  v9 = (void *)(a3 + 16);
  while (1)
  {
    v10 = *(_DWORD *)(a1 + 104);
    v11 = *(_QWORD *)(a1 + 96);
    if (v10 != *(_DWORD *)(a2 + 104))
      goto LABEL_13;
    if (!v10)
      break;
    v12 = *(_QWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a1 + 96);
    while (1)
    {
      v14 = *(_QWORD *)v13 == *(_QWORD *)v12 && *(_DWORD *)(v13 + 16) == *(_DWORD *)(v12 + 16);
      if (!v14 || *(_DWORD *)(v13 + 32) != *(_DWORD *)(v12 + 32))
        break;
      v13 += 40;
      v12 += 40;
      if (v13 == v11 + 40 * v10)
        goto LABEL_17;
    }
LABEL_13:
    v15 = *(_QWORD *)(v11 + 40 * v10 - 40);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v9, v16 + 1, 8);
      v16 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v15;
    ++*(_DWORD *)(a3 + 8);
    v17 = *(_DWORD *)(a1 + 104) - 1;
    *(_DWORD *)(a1 + 104) = v17;
    if (v17)
      llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>::traverseChild(a1);
  }
LABEL_17:
  v18 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a4, (void *)(a4 + 32), 8, (uint64_t *)a1);
  *(_QWORD *)(v18 + 96) = a4 + 112;
  result = v18 + 96;
  *(_QWORD *)(result + 8) = 0x800000000;
  if (*(_DWORD *)(a1 + 104))
    result = llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=(result, v8);
  *(_QWORD *)(a4 + 432) = a3;
  return result;
}

void std::__rewrap_range[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9[2];
  _BYTE v10[320];
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14[2];
  _QWORD v15[41];

  v15[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v11, &v13, 8, (uint64_t *)a1);
  v14[0] = v15;
  v14[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v14, (uint64_t *)(a1 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v6, &v8, 8, (uint64_t *)a2);
  v9[0] = v10;
  v9[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v9, (uint64_t *)(a2 + 96));
  std::__rewrap_iter[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::__unwrap_iter_impl<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,false>>((uint64_t)&v11, (uint64_t)&v6, a3);
  if (v9[0] != v10)
    free(v9[0]);
  if (v7 != v6)
    free(v7);
  if (v14[0] != v15)
    free(v14[0]);
  if (v12 != v11)
    free(v12);
}

void std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::__unwrap_iter_impl<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,false>,0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[41];

  v13[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v8, &v10, (const llvm::SmallPtrSetImplBase *)a1);
  v11 = v13;
  v12 = 0x800000000;
  if (&v8 != (void **)a1)
  {
    v4 = *((_DWORD *)a1 + 26);
    if (v4)
    {
      if (v4 < 9)
      {
        v6 = v13;
        v5 = *((_DWORD *)a1 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, *((unsigned int *)a1 + 26), 40);
        v5 = *((_DWORD *)a1 + 26);
        if (!v5)
        {
LABEL_8:
          LODWORD(v12) = v4;
          goto LABEL_9;
        }
        v6 = v11;
      }
      memcpy(v6, a1[12], 40 * v5);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a2, (void *)(a2 + 32), 8, (uint64_t *)&v8);
  *(_QWORD *)(a2 + 96) = a2 + 112;
  v7 = a2 + 96;
  *(_QWORD *)(v7 + 8) = 0x800000000;
  if ((_DWORD)v12)
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=(v7, (uint64_t *)&v11);
  if (v11 != v13)
    free(v11);
  if (v9 != v8)
    free(v9);
}

void llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>::traverseChild(uint64_t a1)
{
  uint64_t *v1;
  unsigned int v2;
  uint64_t v3;
  void *v5;
  llvm::Instruction *v6;
  _QWORD *Successor;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  char *v11;
  llvm::Instruction *v12;
  uint64_t NumSuccessors;
  llvm::Instruction *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  _QWORD v29[5];

  v1 = (uint64_t *)(a1 + 96);
  v2 = *(_DWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 96) + 40 * v2;
  if (*(_DWORD *)(v3 - 24) != *(_DWORD *)(v3 - 8))
  {
    v5 = (void *)(a1 + 112);
    while (1)
    {
      v6 = *(llvm::Instruction **)(v3 - 32);
      ++*(_DWORD *)(v3 - 24);
      Successor = (_QWORD *)llvm::Instruction::getSuccessor(v6);
      v8 = Successor;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9 == *(_QWORD *)a1)
      {
        v16 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v16)
        {
          v17 = 0;
          v18 = 8 * v16;
          v19 = *(_QWORD **)(a1 + 8);
          while ((_QWORD *)*v19 != Successor)
          {
            if (*v19 == -2)
              v17 = v19;
            ++v19;
            v18 -= 8;
            if (!v18)
            {
              if (!v17)
                goto LABEL_26;
              *v17 = Successor;
              --*(_DWORD *)(a1 + 24);
              goto LABEL_8;
            }
          }
          goto LABEL_5;
        }
LABEL_26:
        if (v16 < *(_DWORD *)(a1 + 16))
          break;
      }
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a1, Successor);
      if (v10)
        goto LABEL_8;
      v2 = *(_DWORD *)(a1 + 104);
LABEL_5:
      v3 = *v1 + 40 * v2;
      if (*(_DWORD *)(v3 - 24) == *(_DWORD *)(v3 - 8))
        return;
    }
    *(_DWORD *)(a1 + 20) = v16 + 1;
    *(_QWORD *)(v9 + 8 * v16) = Successor;
LABEL_8:
    v11 = (char *)v8[6];
    if (v11 == (char *)(v8 + 6))
    {
      v12 = 0;
      NumSuccessors = 0;
    }
    else
    {
      v12 = 0;
      NumSuccessors = 0;
      v14 = (llvm::Instruction *)(v11 - 24);
      if (v11)
        v15 = v11 - 24;
      else
        v15 = 0;
      if (v15[16] - 29 <= 0xA)
      {
        NumSuccessors = llvm::Instruction::getNumSuccessors(v14);
        v12 = v14;
      }
    }
    v20 = *(unsigned int *)(a1 + 104);
    if (v20 >= *(_DWORD *)(a1 + 108))
    {
      v29[0] = v8;
      v29[1] = v12;
      v29[2] = 0;
      v29[3] = v12;
      v29[4] = NumSuccessors;
      v22 = v20 + 1;
      if (*v1 <= (unint64_t)v29 && *v1 + 40 * (unint64_t)v20 > (unint64_t)v29)
      {
        v28 = (char *)v29 - *v1;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1, v5, v22, 40);
        v23 = *v1;
        v24 = &v28[*v1];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1, v5, v22, 40);
        v23 = *v1;
        v24 = (char *)v29;
      }
      v25 = v23 + 40 * *(unsigned int *)(a1 + 104);
      v26 = *(_OWORD *)v24;
      v27 = *((_OWORD *)v24 + 1);
      *(_QWORD *)(v25 + 32) = *((_QWORD *)v24 + 4);
      *(_OWORD *)v25 = v26;
      *(_OWORD *)(v25 + 16) = v27;
    }
    else
    {
      v21 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 40 * v20);
      *v21 = v8;
      v21[1] = v12;
      v21[2] = 0;
      v21[3] = v12;
      v21[4] = NumSuccessors;
    }
    v2 = *(_DWORD *)(a1 + 104) + 1;
    *(_DWORD *)(a1 + 104) = v2;
    goto LABEL_5;
  }
}

void std::__rewrap_iter[abi:nn180100]<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,std::__unwrap_iter_impl<llvm::po_iterator<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock const*,8u>,false,llvm::GraphTraits<llvm::Function const*>>,false>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[320];
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[41];

  v17[40] = *MEMORY[0x1E0C80C00];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v13, &v15, 8, (uint64_t *)a1);
  v16[0] = v17;
  v16[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)v16, (uint64_t *)(a1 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v7, &v9, 8, (uint64_t *)a2);
  v10 = v12;
  v11 = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=((uint64_t)&v10, (uint64_t *)(a2 + 96));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a3, (void *)(a3 + 32), 8, (uint64_t *)&v7);
  *(_QWORD *)(a3 + 96) = a3 + 112;
  v6 = a3 + 96;
  *(_QWORD *)(v6 + 8) = 0x800000000;
  if ((_DWORD)v11)
    llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=(v6, (uint64_t *)&v10);
  if (v10 != v12)
    free(v10);
  if (v8 != v7)
    free(v8);
  if (v16[0] != v17)
    free(v16[0]);
  if (v14 != v13)
    free(v14);
}

uint64_t llvm::SmallVectorImpl<std::tuple<llvm::BasicBlock const*,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>,llvm::SuccIterator<llvm::Instruction const,llvm::BasicBlock const>>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(_DWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_20;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v11 = *(_DWORD **)a1;
        v12 = v4 + 40 * v8;
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v4;
          v13 = *(_QWORD *)(v4 + 8);
          v11[4] = *(_DWORD *)(v4 + 16);
          *((_QWORD *)v11 + 1) = v13;
          v14 = *(_QWORD *)(v4 + 24);
          v11[8] = *(_DWORD *)(v4 + 32);
          *((_QWORD *)v11 + 3) = v14;
          v4 += 40;
          v11 += 10;
        }
        while (v4 != v12);
      }
      goto LABEL_19;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v15 = v4 + 40 * v9;
        v16 = *(_DWORD **)a1;
        do
        {
          *(_QWORD *)v16 = *(_QWORD *)v4;
          v17 = *(_QWORD *)(v4 + 8);
          v16[4] = *(_DWORD *)(v4 + 16);
          *((_QWORD *)v16 + 1) = v17;
          v18 = *(_QWORD *)(v4 + 24);
          v16[8] = *(_DWORD *)(v4 + 32);
          *((_QWORD *)v16 + 3) = v18;
          v4 += 40;
          v16 += 10;
        }
        while (v4 != v15);
        v10 = *v7;
        if (v9 == v10)
          goto LABEL_19;
      }
      else
      {
        v9 = 0;
        LODWORD(v10) = *v7;
        if (!*v7)
          goto LABEL_19;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 40);
      v9 = 0;
      LODWORD(v10) = *v7;
      if (!*v7)
        goto LABEL_19;
    }
    memcpy((void *)(*(_QWORD *)a1 + 40 * v9), (const void *)(*a2 + 40 * v9), *a2 + 40 * v10 - (*a2 + 40 * v9));
LABEL_19:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_20:
    *v7 = 0;
  }
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock const*,llvm::SmallVector<llvm::Instruction const*,8u>,llvm::DenseMapInfo<llvm::BasicBlock const*,void>,llvm::detail::DenseMapPair<llvm::BasicBlock const*,llvm::SmallVector<llvm::Instruction const*,8u>>>,llvm::BasicBlock const*,llvm::SmallVector<llvm::Instruction const*,8u>,llvm::DenseMapInfo<llvm::BasicBlock const*,void>,llvm::detail::DenseMapPair<llvm::BasicBlock const*,llvm::SmallVector<llvm::Instruction const*,8u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 88 * v6 - 88;
    if (v8 < 0x58)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[11 * v6];
      do
      {
        *v9 = -4096;
        v9 += 11;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x58 + 1;
    v9 = &v7[11 * (v10 & 0x7FFFFFFFFFFFFFELL)];
    v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[11] = -4096;
      v12 += 22;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16) - 1;
        v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        v17 = (_QWORD *)(*(_QWORD *)a1 + 88 * v16);
        v18 = *v17;
        if (v14 != *v17)
        {
          v20 = 0;
          v21 = 1;
          while (v18 != -4096)
          {
            if (v20)
              v22 = 0;
            else
              v22 = v18 == -8192;
            if (v22)
              v20 = v17;
            v23 = v16 + v21++;
            v16 = v23 & v15;
            v17 = (_QWORD *)(*(_QWORD *)a1 + 88 * (v23 & v15));
            v18 = *v17;
            if (v14 == *v17)
              goto LABEL_14;
          }
          if (v20)
            v17 = v20;
        }
LABEL_14:
        *v17 = v14;
        v17[1] = v17 + 3;
        v17[2] = 0x800000000;
        if (*((_DWORD *)v4 + 4))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
        ++*(_DWORD *)(a1 + 8);
        v19 = (uint64_t *)v4[1];
        if (v19 != v4 + 3)
          free(v19);
      }
      v4 += 11;
    }
    while (v4 != a3);
  }
}

_QWORD *llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::clear(uint64_t a1)
{
  _QWORD *result;
  _QWORD *i;
  int v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;

  result = *(_QWORD **)(a1 + 64);
  for (i = *(_QWORD **)(a1 + 56);
        result != i;
  *(_QWORD *)(a1 + 64) = i;
  v4 = *(_DWORD *)(a1 + 16);
  if (!v4 && !*(_DWORD *)(a1 + 20))
  {
LABEL_8:
    v6 = *(_DWORD *)(a1 + 40);
    if (v6)
      goto LABEL_21;
    goto LABEL_20;
  }
  result = (_QWORD *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 24);
  if (v5 > 4 * v4 && v5 >= 0x41)
  {
    result = (_QWORD *)llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)result);
    goto LABEL_8;
  }
  if ((_DWORD)v5)
  {
    v7 = (_QWORD *)*result;
    v8 = (v5 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v11 = &v7[2 * v10];
      v12 = v7 + 2;
      v13 = v10;
      do
      {
        *(v12 - 2) = -4096;
        *v12 = -4096;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_19;
    }
    else
    {
      v11 = (_QWORD *)*result;
    }
    v14 = &v7[2 * v5];
    do
    {
      *v11 = -4096;
      v11 += 2;
    }
    while (v11 != v14);
  }
LABEL_19:
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(_DWORD *)(a1 + 40);
  if (v6)
    goto LABEL_21;
LABEL_20:
  if (!*(_DWORD *)(a1 + 44))
    return result;
LABEL_21:
  result = (_QWORD *)(a1 + 32);
  v15 = *(unsigned int *)(a1 + 48);
  if (v15 > 4 * v6 && v15 >= 0x41)
    return (_QWORD *)llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)result);
  if ((_DWORD)v15)
  {
    v16 = (_QWORD *)*result;
    v17 = (v15 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v17)
    {
      v18 = v17 + 1;
      v19 = (v17 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v20 = &v16[2 * v19];
      v21 = v16 + 2;
      v22 = v19;
      do
      {
        *(v21 - 2) = -4096;
        *v21 = -4096;
        v21 += 4;
        v22 -= 2;
      }
      while (v22);
      if (v18 == v19)
        goto LABEL_33;
    }
    else
    {
      v20 = (_QWORD *)*result;
    }
    v23 = &v16[2 * v15];
    do
    {
      *v20 = -4096;
      v20 += 2;
    }
    while (v20 != v23);
  }
LABEL_33:
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::compute(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  llvm *v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = 0;
  v4 = a1;
  v7 = 0;
  v8 = v10;
  v9 = 0x800000000;
  *a1 = a2;
  v2 = *(_QWORD *)(a2 + 80);
  if (v2)
    v3 = v2 - 24;
  else
    v3 = 0;
  llvm::GenericCycleInfoCompute<llvm::GenericSSAContext<llvm::Function>>::run((uint64_t)&v4, v3);
  if (v8 != v10)
    free(v8);
  llvm::deallocate_buffer(v5, (void *)(16 * v7));
}

void llvm::GenericCycleInfoCompute<llvm::GenericSSAContext<llvm::Function>>::run(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *TopLevelParentCycle;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t **v94;
  void *v95;
  uint64_t v96;
  unsigned int v97;
  _QWORD *v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  _QWORD *v119;
  int v120;
  BOOL v121;
  unsigned int v122;
  uint64_t *v123;
  int v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  int v130;
  BOOL v131;
  unsigned int v132;
  _QWORD *v133;
  int v134;
  BOOL v135;
  unsigned int v136;
  uint64_t *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  void *v145;
  uint64_t *v146;
  int v147;
  BOOL v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  BOOL v160;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  BOOL v178;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t *v191;
  int v192;
  BOOL v193;
  unsigned int v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t *v200;
  uint64_t *v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  int v208;
  BOOL v209;
  unsigned int v210;
  uint64_t *v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t *v218;
  int v219;
  BOOL v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  BOOL v228;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  BOOL v246;
  uint64_t v248;
  unint64_t v249;
  _QWORD *v250;
  int v251;
  BOOL v252;
  unsigned int v253;
  uint64_t *v254;
  int v255;
  uint64_t v256;
  int v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t *v260;
  int v261;
  uint64_t v262;
  int v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  int v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t *v271;
  int v272;
  BOOL v273;
  unsigned int v274;
  uint64_t *v275;
  int v276;
  BOOL v277;
  unsigned int v278;
  uint64_t *v279;
  int v280;
  BOOL v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t *v286;
  int v287;
  uint64_t v288;
  int v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t *v292;
  int v293;
  BOOL v294;
  unsigned int v295;
  _QWORD **v296;
  _QWORD **v297;
  _QWORD *v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int *v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  _QWORD v311[10];

  v311[8] = *MEMORY[0x1E0C80C00];
  llvm::GenericCycleInfoCompute<llvm::GenericSSAContext<llvm::Function>>::dfs(a1, a2);
  v309 = v311;
  v310 = 0x800000000;
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v303 = *(_QWORD *)(a1 + 32);
    v4 = v303 + 8 * v3;
    while (1)
    {
      v7 = *(_QWORD *)(v4 - 8);
      v4 -= 8;
      v6 = v7;
      v8 = *(_DWORD *)(a1 + 24);
      v9 = v7 >> 4;
      if (!v8)
        goto LABEL_14;
      v10 = *(_QWORD *)(a1 + 8);
      v11 = v8 - 1;
      v12 = (v9 ^ (v6 >> 9)) & (v8 - 1);
      v13 = *(_QWORD *)(v10 + 16 * v12);
      if (v13 != v6)
        break;
LABEL_8:
      v14 = *(_QWORD *)(v10 + 16 * v12 + 8);
      v15 = v14;
      v16 = (v14 & 0xFFFFFFFF00000000) >> 32;
      v17 = *(_QWORD *)(v6 + 8);
      v305 = v16;
      v306 = v6;
      if (v17)
        goto LABEL_15;
LABEL_24:
      if ((_DWORD)v310)
      {
        v304 = v4;
        v24 = (char *)operator new(0xA8uLL);
        *(_OWORD *)v24 = 0u;
        *((_OWORD *)v24 + 1) = 0u;
        *((_OWORD *)v24 + 4) = 0u;
        *((_OWORD *)v24 + 5) = 0u;
        *((_OWORD *)v24 + 2) = 0u;
        *((_OWORD *)v24 + 3) = 0u;
        *((_OWORD *)v24 + 7) = 0u;
        *((_OWORD *)v24 + 8) = 0u;
        *((_OWORD *)v24 + 9) = 0u;
        *((_OWORD *)v24 + 6) = 0u;
        *((_QWORD *)v24 + 20) = 0;
        *((_QWORD *)v24 + 3) = v6;
        *((_QWORD *)v24 + 1) = v24 + 24;
        *(_OWORD *)(v24 + 60) = 0u;
        *((_QWORD *)v24 + 10) = v24 + 96;
        *((_DWORD *)v24 + 23) = 8;
        v307 = (unsigned int *)v24;
        v308 = v6;
        *((_QWORD *)v24 + 2) = 0x100000001;
        llvm::SetVector<llvm::BasicBlock *,llvm::SmallVector<llvm::BasicBlock *,8u>,llvm::DenseSet<llvm::BasicBlock const*,llvm::DenseMapInfo<llvm::BasicBlock const*,void>>,8u>::insert((int64x2_t *)(v24 + 56), &v308);
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        v27 = (uint64_t)v307;
        v28 = *(_DWORD *)(*(_QWORD *)a1 + 24);
        if (!v28)
          goto LABEL_432;
        v29 = (v28 - 1) & (v9 ^ (v6 >> 9));
        v30 = (uint64_t *)(v26 + 16 * v29);
        v31 = *v30;
        if (v6 != *v30)
        {
          v32 = 0;
          v33 = 1;
          while (v31 != -4096)
          {
            if (v32)
              v34 = 0;
            else
              v34 = v31 == -8192;
            if (v34)
              v32 = v30;
            v35 = v29 + v33++;
            v29 = v35 & (v28 - 1);
            v30 = (uint64_t *)(v26 + 16 * v29);
            v31 = *v30;
            if (v6 == *v30)
              goto LABEL_63;
          }
          if (v32)
            v286 = v32;
          else
            v286 = v30;
          v287 = *(_DWORD *)(v25 + 16);
          if (4 * v287 + 4 < 3 * v28)
          {
            if (v28 + ~v287 - *(_DWORD *)(v25 + 20) > v28 >> 3)
              goto LABEL_60;
          }
          else
          {
LABEL_432:
            v28 *= 2;
          }
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(*(_QWORD *)a1 + 8, v28);
          v288 = *(_QWORD *)(v25 + 8);
          v289 = *(_DWORD *)(v25 + 24) - 1;
          v290 = v289 & (v9 ^ (v6 >> 9));
          v286 = (uint64_t *)(v288 + 16 * v290);
          v291 = *v286;
          if (v6 == *v286)
            goto LABEL_434;
          v292 = 0;
          v293 = 1;
          do
          {
            if (v291 == -4096)
            {
              if (v292)
                v286 = v292;
              v6 = v306;
LABEL_60:
              v52 = *v286;
              ++*(_DWORD *)(v25 + 16);
              if (v52 == -4096)
                goto LABEL_62;
LABEL_61:
              --*(_DWORD *)(v25 + 20);
              goto LABEL_62;
            }
            if (v292)
              v294 = 0;
            else
              v294 = v291 == -8192;
            if (v294)
              v292 = v286;
            v295 = v290 + v293++;
            v290 = v295 & v289;
            v286 = (uint64_t *)(v288 + 16 * (v295 & v289));
            v291 = *v286;
          }
          while (v306 != *v286);
          v6 = v306;
LABEL_434:
          ++*(_DWORD *)(v25 + 16);
          if (v6 != -4096)
            goto LABEL_61;
LABEL_62:
          *v286 = v6;
          v286[1] = v27;
        }
LABEL_63:
        v53 = v310;
        while (2)
        {
          v61 = *((_QWORD *)v309 + --v53);
          LODWORD(v310) = v53;
          if (v61 == v6)
            goto LABEL_68;
          TopLevelParentCycle = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getTopLevelParentCycle(*(_QWORD *)a1, v61);
          if (TopLevelParentCycle)
          {
            v63 = TopLevelParentCycle;
            v64 = (uint64_t)v307;
            if (TopLevelParentCycle != (uint64_t *)v307)
            {
              v65 = *(_QWORD *)a1;
              if (*TopLevelParentCycle)
                v66 = *TopLevelParentCycle + 32;
              else
                v66 = *(_QWORD *)a1 + 56;
              v68 = *(uint64_t **)v66;
              v67 = *(uint64_t **)(v66 + 8);
              if (*(uint64_t **)v66 != v67)
              {
                do
                {
                  if ((uint64_t *)*v68 == TopLevelParentCycle)
                    goto LABEL_79;
                  ++v68;
                }
                while (v68 != v67);
                v68 = *(uint64_t **)(v66 + 8);
              }
LABEL_79:
              v69 = (uint64_t *)*((_QWORD *)v307 + 5);
              if ((unint64_t)v69 >= *((_QWORD *)v307 + 6))
              {
                v71 = std::vector<std::unique_ptr<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>>::__push_back_slow_path<std::unique_ptr<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>>((uint64_t **)v307 + 4, v68);
              }
              else
              {
                v70 = *v68;
                *v68 = 0;
                *v69 = v70;
                v71 = v69 + 1;
              }
              *(_QWORD *)(v64 + 40) = v71;
              v85 = *(_QWORD *)(v66 + 8);
              v86 = *(_QWORD *)(v85 - 8);
              *(_QWORD *)(v85 - 8) = 0;
              v87 = *v68;
              *v68 = v86;
              if (v87)
              {
                v88 = *(void **)(v87 + 80);
                if (v88 != (void *)(v87 + 96))
                  free(v88);
                llvm::deallocate_buffer(*(llvm **)(v87 + 56), (void *)(8 * *(unsigned int *)(v87 + 72)));
              }
              *(_QWORD *)(v66 + 8) = std::unique_ptr<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>::~unique_ptr[abi:nn180100]((uint64_t *)(*(_QWORD *)(v66 + 8) - 8));
              *v63 = v64;
              v89 = *((unsigned int *)v63 + 22);
              v90 = v305;
              if ((_DWORD)v89)
              {
                v91 = v64 + 56;
                v92 = (uint64_t *)v63[10];
                v93 = &v92[v89];
                v94 = (uint64_t **)(v64 + 80);
                v95 = (void *)(v64 + 96);
                while (1)
                {
                  v100 = *(_DWORD *)(v64 + 64);
                  if (!v100)
                    break;
                  v101 = *(_DWORD *)(v64 + 72);
                  if (!v101)
                    goto LABEL_171;
                  v96 = *(_QWORD *)(v64 + 56);
                  v97 = ((*v92 >> 4) ^ (*v92 >> 9)) & (v101 - 1);
                  v98 = (_QWORD *)(v96 + 8 * v97);
                  v99 = *v98;
                  if (*v92 == *v98)
                    goto LABEL_100;
                  v133 = 0;
                  v134 = 1;
                  while (v99 != -4096)
                  {
                    if (v133)
                      v135 = 0;
                    else
                      v135 = v99 == -8192;
                    if (v135)
                      v133 = v98;
                    v136 = v97 + v134++;
                    v97 = v136 & (v101 - 1);
                    v98 = (_QWORD *)(v96 + 8 * v97);
                    v99 = *v98;
                    if (*v92 == *v98)
                      goto LABEL_100;
                  }
                  v137 = v133 ? v133 : v98;
                  if (4 * v100 + 4 < 3 * v101)
                  {
                    if (v101 + ~v100 - *(_DWORD *)(v64 + 68) > v101 >> 3)
                      goto LABEL_105;
                    v138 = v95;
                  }
                  else
                  {
LABEL_171:
                    v138 = v95;
                    v101 *= 2;
                  }
                  v140 = v91;
                  llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(v91, v101);
                  v141 = *(_QWORD *)(v64 + 56);
                  v102 = *v92;
                  v142 = *(_DWORD *)(v64 + 72) - 1;
                  v143 = ((*v92 >> 4) ^ (*v92 >> 9)) & v142;
                  v137 = (uint64_t *)(v141 + 8 * v143);
                  v144 = *v137;
                  if (*v92 == *v137)
                  {
                    v90 = v305;
                    v91 = v140;
                    v95 = v138;
                    goto LABEL_106;
                  }
                  v146 = 0;
                  v147 = 1;
                  v95 = v138;
                  do
                  {
                    v90 = v305;
                    if (v144 == -4096)
                    {
                      v91 = v140;
                      if (v146)
                        v137 = v146;
LABEL_105:
                      v102 = *v137;
                      goto LABEL_106;
                    }
                    if (v146)
                      v148 = 0;
                    else
                      v148 = v144 == -8192;
                    if (v148)
                      v146 = v137;
                    v149 = v143 + v147++;
                    v143 = v149 & v142;
                    v137 = (uint64_t *)(v141 + 8 * (v149 & v142));
                    v144 = *v137;
                  }
                  while (v102 != *v137);
                  v90 = v305;
                  v91 = v140;
LABEL_106:
                  ++*(_DWORD *)(v64 + 64);
                  if (v102 != -4096)
                    --*(_DWORD *)(v64 + 68);
                  *v137 = *v92;
                  v103 = *v92;
                  v104 = *(unsigned int *)(v64 + 88);
                  if (v104 >= *(unsigned int *)(v64 + 92))
                  {
                    v301 = v91;
                    v139 = v95;
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v64 + 80, v95, v104 + 1, 8);
                    v95 = v139;
                    v91 = v301;
                    v90 = v305;
                    v104 = *(unsigned int *)(v64 + 88);
                  }
                  *(_QWORD *)(*(_QWORD *)(v64 + 80) + 8 * v104) = v103;
                  ++*(_DWORD *)(v64 + 88);
LABEL_100:
                  if (++v92 == v93)
                    goto LABEL_189;
                }
                v105 = *(_QWORD **)(v64 + 80);
                v106 = *(unsigned int *)(v64 + 88);
                v107 = v105;
                if ((_DWORD)v106)
                {
                  v108 = 8 * v106;
                  v107 = *(_QWORD **)(v64 + 80);
                  do
                  {
                    if (*v107 == *v92)
                      goto LABEL_116;
                    ++v107;
                    v108 -= 8;
                  }
                  while (v108);
                  v107 = &v105[v106];
                }
LABEL_116:
                if (v106 != v107 - v105)
                  goto LABEL_100;
                v109 = *v92;
                if (v106 >= *(_DWORD *)(v64 + 92))
                {
                  v302 = v91;
                  v145 = v95;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v64 + 80, v95, v106 + 1, 8);
                  v95 = v145;
                  v91 = v302;
                  v90 = v305;
                  *(_QWORD *)(*(_QWORD *)(v64 + 80) + 8 * *(unsigned int *)(v64 + 88)) = v109;
                  v110 = *(_DWORD *)(v64 + 88) + 1;
                  *(_DWORD *)(v64 + 88) = v110;
                  if (v110 < 9)
                    goto LABEL_100;
                }
                else
                {
                  v105[v106] = v109;
                  v110 = *(_DWORD *)(v64 + 88) + 1;
                  *(_DWORD *)(v64 + 88) = v110;
                  if (v110 < 9)
                    goto LABEL_100;
                }
                v111 = *v94;
                v112 = (uint64_t)&(*v94)[v110];
LABEL_122:
                v117 = *(_DWORD *)(v64 + 72);
                if (!v117)
                  goto LABEL_142;
                v113 = *(_QWORD *)(v64 + 56);
                v114 = ((*v111 >> 4) ^ (*v111 >> 9)) & (v117 - 1);
                v115 = (_QWORD *)(v113 + 8 * v114);
                v116 = *v115;
                if (*v111 == *v115)
                  goto LABEL_121;
                v119 = 0;
                v120 = 1;
                while (v116 != -4096)
                {
                  if (v119)
                    v121 = 0;
                  else
                    v121 = v116 == -8192;
                  if (v121)
                    v119 = v115;
                  v122 = v114 + v120++;
                  v114 = v122 & (v117 - 1);
                  v115 = (_QWORD *)(v113 + 8 * v114);
                  v116 = *v115;
                  if (*v111 == *v115)
                    goto LABEL_121;
                }
                v123 = v119 ? v119 : v115;
                v124 = *(_DWORD *)(v64 + 64);
                if (4 * v124 + 4 < 3 * v117)
                {
                  if (v117 + ~v124 - *(_DWORD *)(v64 + 68) <= v117 >> 3)
                  {
                    v299 = v95;
                    goto LABEL_144;
                  }
                }
                else
                {
LABEL_142:
                  v299 = v95;
                  v117 *= 2;
LABEL_144:
                  v300 = v91;
                  llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(v91, v117);
                  v125 = *(_QWORD *)(v64 + 56);
                  v118 = *v111;
                  v126 = *(_DWORD *)(v64 + 72) - 1;
                  v127 = ((*v111 >> 4) ^ (*v111 >> 9)) & v126;
                  v123 = (uint64_t *)(v125 + 8 * v127);
                  v128 = *v123;
                  if (*v111 == *v123)
                  {
                    v90 = v305;
                    v95 = v299;
                    v91 = v300;
                    goto LABEL_126;
                  }
                  v129 = 0;
                  v130 = 1;
                  v90 = v305;
                  v95 = v299;
                  while (1)
                  {
                    v91 = v300;
                    if (v128 == -4096)
                      break;
                    if (v129)
                      v131 = 0;
                    else
                      v131 = v128 == -8192;
                    if (v131)
                      v129 = v123;
                    v132 = v127 + v130++;
                    v127 = v132 & v126;
                    v123 = (uint64_t *)(v125 + 8 * (v132 & v126));
                    v128 = *v123;
                    if (v118 == *v123)
                    {
                      v91 = v300;
LABEL_126:
                      ++*(_DWORD *)(v64 + 64);
                      if (v118 != -4096)
                        --*(_DWORD *)(v64 + 68);
                      *v123 = *v111;
LABEL_121:
                      if (++v111 == (uint64_t *)v112)
                        goto LABEL_100;
                      goto LABEL_122;
                    }
                  }
                  if (v129)
                    v123 = v129;
                }
                v118 = *v123;
                goto LABEL_126;
              }
LABEL_189:
              if (*(_DWORD *)(v65 + 40))
              {
                v150 = *(unsigned int *)(v65 + 48);
                if ((_DWORD)v150)
                {
                  v151 = 16 * v150;
                  v152 = *(_QWORD **)(v65 + 32);
                  while ((*v152 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v152 += 2;
                    v151 -= 16;
                    if (!v151)
                      goto LABEL_194;
                  }
                }
                else
                {
                  v152 = *(_QWORD **)(v65 + 32);
                }
                v222 = *(_QWORD *)(v65 + 32) + 16 * v150;
LABEL_305:
                if (v152 != (_QWORD *)v222)
                {
                  if ((uint64_t *)v152[1] == v63)
                    v152[1] = v64;
                  while (1)
                  {
                    v152 += 2;
                    if (v152 == (_QWORD *)v222)
                      break;
                    if ((*v152 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      goto LABEL_305;
                  }
                }
              }
LABEL_194:
              v153 = *((unsigned int *)v63 + 4);
              if ((_DWORD)v153)
              {
                v154 = (uint64_t *)v63[1];
                v155 = &v154[v153];
                do
                {
                  v156 = *v154;
                  v157 = *(_QWORD *)(*v154 + 8);
                  if (v157)
                  {
                    while (1)
                    {
                      v158 = *(_QWORD *)(v157 + 24);
                      v159 = *(unsigned __int8 *)(v158 + 16);
                      v160 = v158 && v159 >= 0x1C;
                      if (v160 && v159 - 29 <= 0xA)
                        break;
                      v157 = *(_QWORD *)(v157 + 8);
                      if (!v157)
                        goto LABEL_197;
                    }
                    v162 = 0;
                    v163 = *(_QWORD *)(v158 + 40);
                    v164 = *(_DWORD *)(a1 + 24);
                    if (!v164)
                      goto LABEL_217;
LABEL_210:
                    v165 = *(_QWORD *)(a1 + 8);
                    v166 = v164 - 1;
                    v167 = ((v163 >> 4) ^ (v163 >> 9)) & (v164 - 1);
                    v168 = *(_QWORD *)(v165 + 16 * v167);
                    if (v168 == v163)
                    {
LABEL_211:
                      v169 = *(_QWORD *)(v165 + 16 * v167 + 8);
                      v170 = HIDWORD(v169);
                      v171 = v169;
                      v172 = 1;
                      if (v15 <= v171)
                      {
LABEL_218:
                        if (v90 >= v170)
                        {
                          v175 = v310;
                          if (v310 >= (unint64_t)HIDWORD(v310))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, v311, v310 + 1, 8);
                            v90 = v305;
                            v175 = v310;
                          }
                          *((_QWORD *)v309 + v175) = v163;
                          LODWORD(v310) = v310 + 1;
                          v172 = v162;
                        }
                      }
                      goto LABEL_222;
                    }
                    v173 = 1;
                    while (v168 != -4096)
                    {
                      v174 = v167 + v173++;
                      v167 = v174 & v166;
                      v168 = *(_QWORD *)(v165 + 16 * v167);
                      if (v168 == v163)
                        goto LABEL_211;
                    }
LABEL_217:
                    v170 = 0;
                    v172 = 1;
                    if (!v15)
                      goto LABEL_218;
LABEL_222:
                    while (1)
                    {
                      v157 = *(_QWORD *)(v157 + 8);
                      if (!v157)
                        break;
                      v176 = *(_QWORD *)(v157 + 24);
                      v177 = *(unsigned __int8 *)(v176 + 16);
                      if (v176)
                        v178 = v177 >= 0x1C;
                      else
                        v178 = 0;
                      if (v178 && v177 - 29 < 0xB)
                      {
                        v162 = v172;
                        v163 = *(_QWORD *)(v176 + 40);
                        v164 = *(_DWORD *)(a1 + 24);
                        if (!v164)
                          goto LABEL_217;
                        goto LABEL_210;
                      }
                    }
                    if ((v172 & 1) != 0)
                    {
                      v180 = (uint64_t)v307;
                      v181 = v307[4];
                      if (v181 >= v307[5])
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v307 + 2), v307 + 6, v181 + 1, 8);
                        v90 = v305;
                        v181 = *(unsigned int *)(v180 + 16);
                      }
                      *(_QWORD *)(*(_QWORD *)(v180 + 8) + 8 * v181) = v156;
                      ++*(_DWORD *)(v180 + 16);
                    }
                  }
LABEL_197:
                  ++v154;
                }
                while (v154 != v155);
              }
            }
LABEL_67:
            v53 = v310;
            v6 = v306;
LABEL_68:
            if (!v53)
            {
              v283 = *(_QWORD *)a1;
              v284 = *(uint64_t **)(*(_QWORD *)a1 + 64);
              if ((unint64_t)v284 >= *(_QWORD *)(*(_QWORD *)a1 + 72))
              {
                v5 = std::vector<std::unique_ptr<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>>::__push_back_slow_path<std::unique_ptr<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>>((uint64_t **)(v283 + 56), (uint64_t *)&v307);
              }
              else
              {
                v285 = (uint64_t)v307;
                v307 = 0;
                *v284 = v285;
                v5 = v284 + 1;
              }
              *(_QWORD *)(v283 + 64) = v5;
              std::unique_ptr<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>::~unique_ptr[abi:nn180100]((uint64_t *)&v307);
              v4 = v304;
              goto LABEL_5;
            }
            continue;
          }
          break;
        }
        v72 = *(_QWORD *)a1;
        v73 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        v74 = (uint64_t)v307;
        v75 = *(_DWORD *)(*(_QWORD *)a1 + 24);
        v76 = v61 >> 4;
        v77 = v305;
        if (!v75)
        {
LABEL_368:
          v75 *= 2;
          goto LABEL_369;
        }
        v78 = (v75 - 1) & (v76 ^ (v61 >> 9));
        v79 = (uint64_t *)(v73 + 16 * v78);
        v80 = *v79;
        if (v61 != *v79)
        {
          v81 = 0;
          v82 = 1;
          while (v80 != -4096)
          {
            if (v81)
              v83 = 0;
            else
              v83 = v80 == -8192;
            if (v83)
              v81 = v79;
            v84 = v78 + v82++;
            v78 = v84 & (v75 - 1);
            v79 = (uint64_t *)(v73 + 16 * v78);
            v80 = *v79;
            if (v61 == *v79)
              goto LABEL_245;
          }
          if (v81)
            v254 = v81;
          else
            v254 = v79;
          v255 = *(_DWORD *)(v72 + 16);
          if (4 * v255 + 4 >= 3 * v75)
            goto LABEL_368;
          if (v75 + ~v255 - *(_DWORD *)(v72 + 20) > v75 >> 3)
          {
LABEL_242:
            v183 = *v254;
            ++*(_DWORD *)(v72 + 16);
            if (v183 != -4096)
              goto LABEL_243;
            goto LABEL_244;
          }
LABEL_369:
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(*(_QWORD *)a1 + 8, v75);
          v256 = *(_QWORD *)(v72 + 8);
          v257 = *(_DWORD *)(v72 + 24) - 1;
          v258 = v257 & (v76 ^ (v61 >> 9));
          v254 = (uint64_t *)(v256 + 16 * v258);
          v259 = *v254;
          if (v61 != *v254)
          {
            v271 = 0;
            v272 = 1;
            while (v259 != -4096)
            {
              if (v271)
                v273 = 0;
              else
                v273 = v259 == -8192;
              if (v273)
                v271 = v254;
              v274 = v258 + v272++;
              v258 = v274 & v257;
              v254 = (uint64_t *)(v256 + 16 * (v274 & v257));
              v259 = *v254;
              if (v61 == *v254)
                goto LABEL_370;
            }
            if (v271)
              v254 = v271;
            v77 = v305;
            goto LABEL_242;
          }
LABEL_370:
          v77 = v305;
          ++*(_DWORD *)(v72 + 16);
          if (v61 != -4096)
LABEL_243:
            --*(_DWORD *)(v72 + 20);
LABEL_244:
          *v254 = v61;
          v254[1] = v74;
          v74 = (uint64_t)v307;
        }
LABEL_245:
        v184 = (_QWORD *)(v74 + 56);
        v185 = *(_DWORD *)(v74 + 64);
        if (v185)
        {
          v186 = *(_DWORD *)(v74 + 72);
          if (!v186)
            goto LABEL_384;
          v187 = *(_QWORD *)(v74 + 56);
          v188 = (v186 - 1) & (v76 ^ (v61 >> 9));
          v189 = (uint64_t *)(v187 + 8 * v188);
          v190 = *v189;
          if (v61 != *v189)
          {
            v191 = 0;
            v192 = 1;
            while (v190 != -4096)
            {
              if (v191)
                v193 = 0;
              else
                v193 = v190 == -8192;
              if (v193)
                v191 = v189;
              v194 = v188 + v192++;
              v188 = v194 & (v186 - 1);
              v189 = (uint64_t *)(v187 + 8 * v188);
              v190 = *v189;
              if (v61 == *v189)
                goto LABEL_318;
            }
            if (v191)
              v266 = v191;
            else
              v266 = v189;
            if (4 * v185 + 4 < 3 * v186)
            {
              if (v186 + ~v185 - *(_DWORD *)(v74 + 68) <= v186 >> 3)
                goto LABEL_385;
            }
            else
            {
LABEL_384:
              v186 *= 2;
LABEL_385:
              llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(v74 + 56, v186);
              v267 = *(_QWORD *)(v74 + 56);
              v268 = *(_DWORD *)(v74 + 72) - 1;
              v269 = v268 & (v76 ^ (v61 >> 9));
              v266 = (uint64_t *)(v267 + 8 * v269);
              v270 = *v266;
              if (v61 == *v266)
              {
LABEL_386:
                v77 = v305;
                ++*(_DWORD *)(v74 + 64);
                if (v61 == -4096)
                {
LABEL_315:
                  *v266 = v61;
                  v224 = *(unsigned int *)(v74 + 88);
                  if (v224 >= *(unsigned int *)(v74 + 92))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v74 + 80, (void *)(v74 + 96), v224 + 1, 8);
                    v77 = v305;
                    v224 = *(unsigned int *)(v74 + 88);
                  }
                  *(_QWORD *)(*(_QWORD *)(v74 + 80) + 8 * v224) = v61;
                  ++*(_DWORD *)(v74 + 88);
                  goto LABEL_318;
                }
LABEL_314:
                --*(_DWORD *)(v74 + 68);
                goto LABEL_315;
              }
              v279 = 0;
              v280 = 1;
              while (v270 != -4096)
              {
                if (v279)
                  v281 = 0;
                else
                  v281 = v270 == -8192;
                if (v281)
                  v279 = v266;
                v282 = v269 + v280++;
                v269 = v282 & v268;
                v266 = (uint64_t *)(v267 + 8 * (v282 & v268));
                v270 = *v266;
                if (v61 == *v266)
                  goto LABEL_386;
              }
              if (v279)
                v266 = v279;
              v77 = v305;
            }
            v223 = *v266;
            ++*(_DWORD *)(v74 + 64);
            if (v223 == -4096)
              goto LABEL_315;
            goto LABEL_314;
          }
LABEL_318:
          v225 = *(_QWORD *)(v61 + 8);
          if (!v225)
            goto LABEL_65;
          while (1)
          {
            v226 = *(_QWORD *)(v225 + 24);
            v227 = *(unsigned __int8 *)(v226 + 16);
            v228 = v226 && v227 >= 0x1C;
            if (v228 && v227 - 29 <= 0xA)
              break;
            v225 = *(_QWORD *)(v225 + 8);
            if (!v225)
              goto LABEL_65;
          }
          v230 = 0;
          v231 = *(_QWORD *)(v226 + 40);
          v232 = *(_DWORD *)(a1 + 24);
          if (!v232)
            goto LABEL_337;
LABEL_330:
          v233 = *(_QWORD *)(a1 + 8);
          v234 = v232 - 1;
          v235 = ((v231 >> 4) ^ (v231 >> 9)) & (v232 - 1);
          v236 = *(_QWORD *)(v233 + 16 * v235);
          if (v236 == v231)
          {
LABEL_331:
            v237 = *(_QWORD *)(v233 + 16 * v235 + 8);
            v238 = HIDWORD(v237);
            v239 = v237;
            v240 = 1;
            if (v15 <= v239)
              goto LABEL_338;
            while (1)
            {
              do
              {
                v225 = *(_QWORD *)(v225 + 8);
                if (!v225)
                {
                  if ((v240 & 1) != 0)
                  {
                    v248 = (uint64_t)v307;
                    v249 = v307[4];
                    if (v249 >= v307[5])
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v307 + 2), v307 + 6, v249 + 1, 8);
                      v249 = *(unsigned int *)(v248 + 16);
                    }
                    *(_QWORD *)(*(_QWORD *)(v248 + 8) + 8 * v249) = v61;
                    ++*(_DWORD *)(v248 + 16);
                  }
LABEL_65:
                  v54 = *(_QWORD *)a1;
                  v55 = *(_QWORD *)(*(_QWORD *)a1 + 32);
                  v56 = (uint64_t)v307;
                  v57 = *(_DWORD *)(*(_QWORD *)a1 + 48);
                  if (!v57)
                    goto LABEL_376;
                  v58 = (v57 - 1) & (v76 ^ (v61 >> 9));
                  v59 = (_QWORD *)(v55 + 16 * v58);
                  v60 = *v59;
                  if (v61 == *v59)
                    goto LABEL_67;
                  v250 = 0;
                  v251 = 1;
                  while (v60 != -4096)
                  {
                    if (v250)
                      v252 = 0;
                    else
                      v252 = v60 == -8192;
                    if (v252)
                      v250 = v59;
                    v253 = v58 + v251++;
                    v58 = v253 & (v57 - 1);
                    v59 = (_QWORD *)(v55 + 16 * v58);
                    v60 = *v59;
                    if (v61 == *v59)
                      goto LABEL_67;
                  }
                  v260 = v250 ? v250 : v59;
                  v261 = *(_DWORD *)(v54 + 40);
                  if (4 * v261 + 4 < 3 * v57)
                  {
                    if (v57 + ~v261 - *(_DWORD *)(v54 + 44) <= v57 >> 3)
                      goto LABEL_377;
                  }
                  else
                  {
LABEL_376:
                    v57 *= 2;
LABEL_377:
                    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(*(_QWORD *)a1 + 32, v57);
                    v262 = *(_QWORD *)(v54 + 32);
                    v263 = *(_DWORD *)(v54 + 48) - 1;
                    v264 = v263 & (v76 ^ (v61 >> 9));
                    v260 = (uint64_t *)(v262 + 16 * v264);
                    v265 = *v260;
                    if (v61 == *v260)
                    {
LABEL_378:
                      ++*(_DWORD *)(v54 + 40);
                      if (v61 == -4096)
                      {
LABEL_239:
                        *v260 = v61;
                        v260[1] = v56;
                        goto LABEL_67;
                      }
LABEL_238:
                      --*(_DWORD *)(v54 + 44);
                      goto LABEL_239;
                    }
                    v275 = 0;
                    v276 = 1;
                    while (v265 != -4096)
                    {
                      if (v275)
                        v277 = 0;
                      else
                        v277 = v265 == -8192;
                      if (v277)
                        v275 = v260;
                      v278 = v264 + v276++;
                      v264 = v278 & v263;
                      v260 = (uint64_t *)(v262 + 16 * (v278 & v263));
                      v265 = *v260;
                      if (v61 == *v260)
                        goto LABEL_378;
                    }
                    if (v275)
                      v260 = v275;
                  }
                  v182 = *v260;
                  ++*(_DWORD *)(v54 + 40);
                  if (v182 == -4096)
                    goto LABEL_239;
                  goto LABEL_238;
                }
                v244 = *(_QWORD *)(v225 + 24);
                v245 = *(unsigned __int8 *)(v244 + 16);
                if (v244)
                  v246 = v245 >= 0x1C;
                else
                  v246 = 0;
              }
              while (!v246 || v245 - 29 >= 0xB);
              v230 = v240;
              v231 = *(_QWORD *)(v244 + 40);
              v232 = *(_DWORD *)(a1 + 24);
              if (v232)
                goto LABEL_330;
LABEL_337:
              v238 = 0;
              v240 = 1;
              if (!v15)
              {
LABEL_338:
                if (v77 >= v238)
                {
                  v243 = v310;
                  if (v310 >= (unint64_t)HIDWORD(v310))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, v311, v310 + 1, 8);
                    v77 = v305;
                    v243 = v310;
                  }
                  *((_QWORD *)v309 + v243) = v231;
                  LODWORD(v310) = v310 + 1;
                  v240 = v230;
                }
              }
            }
          }
          v241 = 1;
          while (v236 != -4096)
          {
            v242 = v235 + v241++;
            v235 = v242 & v234;
            v236 = *(_QWORD *)(v233 + 16 * v235);
            if (v236 == v231)
              goto LABEL_331;
          }
          goto LABEL_337;
        }
        v195 = *(_QWORD **)(v74 + 80);
        v196 = *(unsigned int *)(v74 + 88);
        v197 = v195;
        if ((_DWORD)v196)
        {
          v198 = 8 * v196;
          v197 = *(_QWORD **)(v74 + 80);
          do
          {
            if (*v197 == v61)
              goto LABEL_262;
            ++v197;
            v198 -= 8;
          }
          while (v198);
          v197 = &v195[v196];
        }
LABEL_262:
        if (v196 != v197 - v195)
          goto LABEL_318;
        if (v196 < *(_DWORD *)(v74 + 92))
        {
          v195[v196] = v61;
          v199 = *(_DWORD *)(v74 + 88) + 1;
          *(_DWORD *)(v74 + 88) = v199;
          if (v199 >= 9)
            goto LABEL_265;
          goto LABEL_318;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(v74 + 80, (void *)(v74 + 96), v196 + 1, 8);
        v77 = v305;
        *(_QWORD *)(*(_QWORD *)(v74 + 80) + 8 * *(unsigned int *)(v74 + 88)) = v61;
        v199 = *(_DWORD *)(v74 + 88) + 1;
        *(_DWORD *)(v74 + 88) = v199;
        if (v199 < 9)
          goto LABEL_318;
LABEL_265:
        v200 = *(uint64_t **)(v74 + 80);
        v201 = &v200[v199];
        v202 = *(_DWORD *)(v74 + 72);
        while (2)
        {
          if (!v202)
          {
LABEL_287:
            v202 *= 2;
            goto LABEL_288;
          }
          v203 = ((*v200 >> 4) ^ (*v200 >> 9)) & (v202 - 1);
          v204 = (uint64_t *)(*v184 + 8 * v203);
          v205 = *v204;
          if (*v200 == *v204)
          {
LABEL_267:
            if (++v200 == v201)
              goto LABEL_318;
            continue;
          }
          break;
        }
        v207 = 0;
        v208 = 1;
        while (v205 != -4096)
        {
          if (v207)
            v209 = 0;
          else
            v209 = v205 == -8192;
          if (v209)
            v207 = v204;
          v210 = v203 + v208++;
          v203 = v210 & (v202 - 1);
          v204 = (uint64_t *)(*v184 + 8 * v203);
          v205 = *v204;
          if (*v200 == *v204)
            goto LABEL_267;
        }
        if (v207)
          v211 = v207;
        else
          v211 = v204;
        v212 = *(_DWORD *)(v74 + 64);
        if (4 * v212 + 4 >= 3 * v202)
          goto LABEL_287;
        if (v202 + ~v212 - *(_DWORD *)(v74 + 68) <= v202 >> 3)
        {
LABEL_288:
          llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(v74 + 56, v202);
          v213 = *(_QWORD *)(v74 + 56);
          v202 = *(_DWORD *)(v74 + 72);
          v214 = *v200;
          v215 = v202 - 1;
          v216 = ((*v200 >> 4) ^ (*v200 >> 9)) & (v202 - 1);
          v211 = (uint64_t *)(v213 + 8 * v216);
          v217 = *v211;
          if (*v200 != *v211)
          {
            v218 = 0;
            v219 = 1;
            while (v217 != -4096)
            {
              if (v218)
                v220 = 0;
              else
                v220 = v217 == -8192;
              if (v220)
                v218 = v211;
              v221 = v216 + v219++;
              v216 = v221 & v215;
              v211 = (uint64_t *)(v213 + 8 * (v221 & v215));
              v217 = *v211;
              if (v214 == *v211)
                goto LABEL_289;
            }
            if (v218)
              v211 = v218;
            v77 = v305;
            goto LABEL_271;
          }
LABEL_289:
          v77 = v305;
          ++*(_DWORD *)(v74 + 64);
          if (v214 != -4096)
LABEL_272:
            --*(_DWORD *)(v74 + 68);
        }
        else
        {
LABEL_271:
          v206 = *v211;
          ++*(_DWORD *)(v74 + 64);
          if (v206 != -4096)
            goto LABEL_272;
        }
        *v211 = *v200;
        goto LABEL_267;
      }
LABEL_5:
      if (v4 == v303)
        goto LABEL_448;
    }
    v18 = 1;
    while (v13 != -4096)
    {
      v19 = v12 + v18++;
      v12 = v19 & v11;
      v13 = *(_QWORD *)(v10 + 16 * v12);
      if (v13 == v6)
        goto LABEL_8;
    }
LABEL_14:
    v15 = 0;
    LODWORD(v16) = 0;
    v17 = *(_QWORD *)(v6 + 8);
    v305 = 0;
    v306 = v6;
    if (!v17)
      goto LABEL_24;
LABEL_15:
    while (1)
    {
      v20 = *(_QWORD *)(v17 + 24);
      v21 = *(unsigned __int8 *)(v20 + 16);
      v22 = v20 && v21 >= 0x1C;
      if (v22 && v21 - 29 <= 0xA)
        break;
      v17 = *(_QWORD *)(v17 + 8);
      if (!v17)
        goto LABEL_24;
    }
LABEL_36:
    v36 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 40);
    v37 = *(_DWORD *)(a1 + 24);
    if (v37)
    {
      v38 = *(_QWORD *)(a1 + 8);
      v39 = v37 - 1;
      v40 = ((v36 >> 4) ^ (v36 >> 9)) & (v37 - 1);
      v41 = *(_QWORD *)(v38 + 16 * v40);
      if (v41 == v36)
      {
LABEL_38:
        v42 = *(_QWORD *)(v38 + 16 * v40 + 8);
        v43 = HIDWORD(v42);
        if (v15 > v42)
          goto LABEL_49;
LABEL_45:
        if (v43 <= v16)
        {
          v46 = v310;
          if (v310 >= (unint64_t)HIDWORD(v310))
          {
            v51 = v4;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, v311, v310 + 1, 8);
            v4 = v51;
            LODWORD(v16) = v305;
            v6 = v306;
            v46 = v310;
          }
          *((_QWORD *)v309 + v46) = v36;
          LODWORD(v310) = v310 + 1;
        }
LABEL_49:
        while (1)
        {
          v17 = *(_QWORD *)(v17 + 8);
          if (!v17)
            goto LABEL_24;
          v47 = *(_QWORD *)(v17 + 24);
          v48 = *(unsigned __int8 *)(v47 + 16);
          if (v47)
            v49 = v48 >= 0x1C;
          else
            v49 = 0;
          if (v49 && v48 - 29 < 0xB)
            goto LABEL_36;
        }
      }
      v44 = 1;
      while (v41 != -4096)
      {
        v45 = v40 + v44++;
        v40 = v45 & v39;
        v41 = *(_QWORD *)(v38 + 16 * v40);
        if (v41 == v36)
          goto LABEL_38;
      }
    }
    v43 = 0;
    if (v15)
      goto LABEL_49;
    goto LABEL_45;
  }
LABEL_448:
  v296 = *(_QWORD ***)(*(_QWORD *)a1 + 56);
  v297 = *(_QWORD ***)(*(_QWORD *)a1 + 64);
  while (v296 != v297)
  {
    v298 = *v296++;
    *v298 = 0;
    llvm::GenericCycleInfoCompute<llvm::GenericSSAContext<llvm::Function>>::updateDepth((uint64_t)v298);
  }
  if (v309 != v311)
    free(v309);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getCycle(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;

  v2 = *(_DWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == a2)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

_QWORD *llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getTopLevelParentCycle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;

  v6 = *(_QWORD *)(a1 + 32);
  v4 = a1 + 32;
  v5 = v6;
  v7 = *(unsigned int *)(v4 + 16);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (uint64_t *)(v5 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(_QWORD *)(v5 + 16 * v8);
      if (v10 == a2)
      {
        v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  v9 = (uint64_t *)(v5 + 16 * v7);
LABEL_8:
  if (v9 != (uint64_t *)(v5 + 16 * v7))
    return (_QWORD *)v9[1];
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v16)
  {
    LODWORD(v17) = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v18 = (uint64_t *)(v15 + 16 * v17);
    v19 = *v18;
    if (*v18 == a2)
      goto LABEL_18;
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(_QWORD *)(v15 + 16 * v17);
      if (v19 == a2)
      {
        v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_18;
      }
    }
  }
  v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_18:
  if (v18 == (uint64_t *)(v15 + 16 * v16))
    return 0;
  v22 = (_QWORD *)v18[1];
  do
  {
    v13 = v22;
    v22 = (_QWORD *)*v22;
  }
  while (v22);
  if (!(_DWORD)v7)
    goto LABEL_42;
  v23 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v24 = (_QWORD *)(v5 + 16 * v23);
  v25 = *v24;
  if (*v24 == a2)
    return v13;
  v26 = 0;
  v27 = 1;
  while (v25 != -4096)
  {
    if (v26)
      v28 = 0;
    else
      v28 = v25 == -8192;
    if (v28)
      v26 = v24;
    v29 = v23 + v27++;
    v23 = v29 & (v7 - 1);
    v24 = (_QWORD *)(v5 + 16 * v23);
    v25 = *v24;
    if (*v24 == a2)
      return v13;
  }
  v31 = v26 ? v26 : v24;
  v32 = *(_DWORD *)(a1 + 40);
  if (4 * v32 + 4 < (3 * v7))
  {
    if ((int)v7 + ~v32 - *(_DWORD *)(a1 + 44) > v7 >> 3)
      goto LABEL_35;
  }
  else
  {
LABEL_42:
    LODWORD(v7) = 2 * v7;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  v33 = *(_QWORD *)(a1 + 32);
  v34 = *(_DWORD *)(a1 + 48) - 1;
  v35 = v34 & ((a2 >> 4) ^ (a2 >> 9));
  v31 = (_QWORD *)(v33 + 16 * v35);
  v36 = *v31;
  if (*v31 == a2)
  {
LABEL_44:
    ++*(_DWORD *)(a1 + 40);
    if (a2 == -4096)
      goto LABEL_37;
    goto LABEL_36;
  }
  v37 = 0;
  v38 = 1;
  while (v36 != -4096)
  {
    if (v37)
      v39 = 0;
    else
      v39 = v36 == -8192;
    if (v39)
      v37 = v31;
    v40 = v35 + v38++;
    v35 = v40 & v34;
    v31 = (_QWORD *)(v33 + 16 * (v40 & v34));
    v36 = *v31;
    if (*v31 == a2)
      goto LABEL_44;
  }
  if (v37)
    v31 = v37;
LABEL_35:
  v30 = *v31;
  ++*(_DWORD *)(a1 + 40);
  if (v30 != -4096)
LABEL_36:
    --*(_DWORD *)(a1 + 44);
LABEL_37:
  *v31 = a2;
  v31[1] = v13;
  return v13;
}

uint64_t llvm::SetVector<llvm::BasicBlock *,llvm::SmallVector<llvm::BasicBlock *,8u>,llvm::DenseSet<llvm::BasicBlock const*,llvm::DenseMapInfo<llvm::BasicBlock const*,void>>,8u>::insert(int64x2_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  _BYTE v17[31];

  if (!a1->i32[2])
  {
    v7 = (uint64_t **)&a1[1].i64[1];
    v8 = (_QWORD *)a1[1].i64[1];
    v9 = a1[2].u32[0];
    v10 = v8;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = (_QWORD *)a1[1].i64[1];
      while (*v10 != *a2)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
        {
          v10 = &v8[v9];
          break;
        }
      }
    }
    if (v9 != v10 - v8)
      return 0;
    if (v9 >= a1[2].i32[1])
    {
      v15 = (uint64_t **)&a1[1].i64[1];
      v16 = *a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[1].i64[1], &a1[2].u64[1], v9 + 1, 8);
      v7 = v15;
      *(_QWORD *)(a1[1].i64[1] + 8 * a1[2].u32[0]) = v16;
      v12 = a1[2].i32[0] + 1;
      a1[2].i32[0] = v12;
      if (v12 >= 9)
      {
LABEL_15:
        v13 = *v7;
        v14 = 8 * v12;
        do
        {
          llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, v13++, (uint64_t)v17);
          v14 -= 8;
        }
        while (v14);
      }
    }
    else
    {
      v8[v9] = *a2;
      v12 = a1[2].i32[0] + 1;
      a1[2].i32[0] = v12;
      if (v12 >= 9)
        goto LABEL_15;
    }
    return 1;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, a2, (uint64_t)v17);
  if (v17[16])
  {
    v4 = *a2;
    v5 = a1[2].u32[0];
    if (v5 >= a1[2].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[1].i64[1], &a1[2].u64[1], v5 + 1, 8);
      LODWORD(v5) = a1[2].i32[0];
    }
    *(_QWORD *)(a1[1].i64[1] + 8 * v5) = v4;
    ++a1[2].i32[0];
    return 1;
  }
  return 0;
}

uint64_t *std::vector<std::unique_ptr<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>>::__push_back_slow_path<std::unique_ptr<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;

  v2 = (char *)a1[1] - (char *)*a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (uint64_t *)&v9[8 * v3];
  v11 = (uint64_t *)&v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *v10 = v12;
  v13 = v10 + 1;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_22;
  }
  v16 = (char *)v15 - (char *)*a1 - 8;
  if (v16 < 0x78
    || (uint64_t *)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) < v10
    && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v15)
  {
    goto LABEL_30;
  }
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v19 = &v15[v18 / 0xFFFFFFFFFFFFFFF8];
  v10 = (uint64_t *)((char *)v10 - v18);
  v20 = &v9[8 * v3 - 16];
  v21 = v15 - 2;
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v21 - 1);
    v23 = *(_OWORD *)v21;
    *((_OWORD *)v21 - 1) = 0uLL;
    *(_OWORD *)v21 = 0uLL;
    *((_OWORD *)v20 - 1) = v24;
    *(_OWORD *)v20 = v23;
    v20 -= 32;
    v21 -= 4;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      v25 = *--v15;
      *v15 = 0;
      *--v10 = v25;
    }
    while (v15 != v14);
  }
  v15 = *a1;
  v26 = a1[1];
  *a1 = v10;
  a1[1] = v13;
  for (a1[2] = v11;
        v26 != v15;
  if (v15)
LABEL_22:
    operator delete(v15);
  return v13;
}

uint64_t *std::unique_ptr<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>::~unique_ptr[abi:nn180100](uint64_t *result)
{
  uint64_t v1;
  void *v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2 != (void *)(v1 + 96))
      free(v2);
    llvm::deallocate_buffer(*(llvm **)(v1 + 56), (void *)(8 * *(unsigned int *)(v1 + 72)));
  }
  return result;
}

void llvm::GenericCycleInfoCompute<llvm::GenericSSAContext<llvm::Function>>::dfs(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Instruction *v24;
  uint64_t NumSuccessors;
  llvm::Instruction *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[8];
  void *v52;
  uint64_t v53;
  _QWORD v54[5];

  v3 = 0;
  v54[4] = *MEMORY[0x1E0C80C00];
  v52 = v54;
  v53 = 0x800000000;
  v49 = v51;
  v51[0] = a2;
  v4 = a1 + 8;
  v50 = 0x800000001;
  v5 = a1 + 32;
  v6 = (void *)(a1 + 48);
  v7 = 1;
  do
  {
    while (1)
    {
      v9 = *((_QWORD *)v49 + v7 - 1);
      v10 = *(unsigned int *)(a1 + 24);
      if (!(_DWORD)v10)
        goto LABEL_18;
      v11 = *(_QWORD *)(a1 + 8);
      v12 = v10 - 1;
      LODWORD(v13) = ((v9 >> 4) ^ (v9 >> 9)) & (v10 - 1);
      v8 = (uint64_t *)(v11 + 16 * v13);
      v14 = *v8;
      if (*v8 == v9)
        break;
      v16 = 1;
      v17 = *v8;
      v18 = ((v9 >> 4) ^ (v9 >> 9)) & v12;
      while (v17 != -4096)
      {
        v19 = v18 + v16++;
        v18 = v19 & v12;
        v17 = *(_QWORD *)(v11 + 16 * v18);
        if (v17 == v9)
        {
          v15 = v53;
          if (v7 != *((_DWORD *)v52 + v53 - 1))
            goto LABEL_4;
          if (v14 != v9)
          {
            v20 = 1;
            do
            {
              if (v14 == -4096)
              {
                v8 = (uint64_t *)(v11 + 16 * v10);
                goto LABEL_3;
              }
              v21 = v13 + v20++;
              v13 = v21 & v12;
              v14 = *(_QWORD *)(v11 + 16 * v13);
            }
            while (v14 != v9);
            v8 = (uint64_t *)(v11 + 16 * v13);
          }
          goto LABEL_3;
        }
      }
LABEL_18:
      v22 = v53;
      if (v53 >= HIDWORD(v53))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v54, v53 + 1, 4);
        v22 = v53;
      }
      *((_DWORD *)v52 + v22) = v7;
      LODWORD(v53) = v53 + 1;
      v23 = *(_QWORD *)(v9 + 48);
      if (v23 == v9 + 48)
      {
        v24 = 0;
        NumSuccessors = 0;
      }
      else
      {
        v24 = 0;
        NumSuccessors = 0;
        v26 = (llvm::Instruction *)(v23 - 24);
        if (v23)
          v27 = v23 - 24;
        else
          v27 = 0;
        if (*(unsigned __int8 *)(v27 + 16) - 29 <= 0xA)
        {
          NumSuccessors = llvm::Instruction::getNumSuccessors(v26);
          v24 = v26;
        }
      }
      llvm::SmallVectorImpl<llvm::BasicBlock *>::insert<llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>,void>((uint64_t)&v49, (uint64_t)v49 + 8 * v50, v24, 0, (uint64_t)v24, NumSuccessors);
      ++v3;
      v28 = *(_DWORD *)(a1 + 24);
      if (!v28)
        goto LABEL_51;
      v29 = *(_QWORD *)(a1 + 8);
      v30 = (v28 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v31 = (_QWORD *)(v29 + 16 * v30);
      v32 = *v31;
      if (v9 != *v31)
      {
        v33 = 0;
        v34 = 1;
        while (v32 != -4096)
        {
          if (v33)
            v35 = 0;
          else
            v35 = v32 == -8192;
          if (v35)
            v33 = v31;
          v36 = v30 + v34++;
          v30 = v36 & (v28 - 1);
          v31 = (_QWORD *)(v29 + 16 * v30);
          v32 = *v31;
          if (v9 == *v31)
            goto LABEL_43;
        }
        if (v33)
          v39 = v33;
        else
          v39 = v31;
        v40 = *(_DWORD *)(a1 + 16);
        if (4 * v40 + 4 < 3 * v28)
        {
          if (v28 + ~v40 - *(_DWORD *)(a1 + 20) <= v28 >> 3)
            goto LABEL_52;
        }
        else
        {
LABEL_51:
          v28 *= 2;
LABEL_52:
          llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow(v4, v28);
          v41 = *(_QWORD *)(a1 + 8);
          v42 = *(_DWORD *)(a1 + 24) - 1;
          v43 = v42 & ((v9 >> 4) ^ (v9 >> 9));
          v39 = (_QWORD *)(v41 + 16 * v43);
          v44 = *v39;
          if (v9 == *v39)
          {
LABEL_53:
            ++*(_DWORD *)(a1 + 16);
            if (v9 == -4096)
              goto LABEL_42;
LABEL_41:
            --*(_DWORD *)(a1 + 20);
LABEL_42:
            *v39 = v9;
            *((_DWORD *)v39 + 2) = v3;
            *((_DWORD *)v39 + 3) = 0;
            goto LABEL_43;
          }
          v45 = 0;
          v46 = 1;
          while (v44 != -4096)
          {
            if (v45)
              v47 = 0;
            else
              v47 = v44 == -8192;
            if (v47)
              v45 = v39;
            v48 = v43 + v46++;
            v43 = v48 & v42;
            v39 = (_QWORD *)(v41 + 16 * (v48 & v42));
            v44 = *v39;
            if (v9 == *v39)
              goto LABEL_53;
          }
          if (v45)
            v39 = v45;
        }
        v37 = *v39;
        ++*(_DWORD *)(a1 + 16);
        if (v37 != -4096)
          goto LABEL_41;
        goto LABEL_42;
      }
LABEL_43:
      v38 = *(unsigned int *)(a1 + 40);
      if (v38 >= *(unsigned int *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v6, v38 + 1, 8);
        v38 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v38) = v9;
      ++*(_DWORD *)(a1 + 40);
      v7 = v50;
      if (!(_DWORD)v50)
        goto LABEL_67;
    }
    v15 = v53;
    if (v7 == *((_DWORD *)v52 + v53 - 1))
    {
LABEL_3:
      *((_DWORD *)v8 + 3) = v3;
      LODWORD(v53) = v15 - 1;
    }
LABEL_4:
    LODWORD(v50) = --v7;
  }
  while (v7);
LABEL_67:
  if (v49 != v51)
    free(v49);
  if (v52 != v54)
    free(v52);
}

void llvm::GenericCycleInfoCompute<llvm::GenericSSAContext<llvm::Function>>::updateDepth(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  char *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  char *i;
  _DWORD *v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  BOOL v16;
  void *v17;
  void *v18;
  const void *v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  const void *v25;
  void *__p;
  char *v27;
  char *v28;
  void *v29;
  void *v30;
  void *v31;
  _BYTE *v32;
  void *v33;
  void *v34;
  void *v35;
  _BYTE *v36;
  uint64_t v37;

  v37 = a1;
  llvm::depth_first<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> *>(&v37, (uint64_t)&v29);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v23, &v25, (const llvm::SmallPtrSetImplBase *)&v29);
  __p = 0;
  v27 = 0;
  v28 = 0;
  v1 = v31;
  v2 = v32 - (_BYTE *)v31;
  if (v32 != v31)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v2 >> 3) > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_41;
    v3 = (char *)operator new(v32 - (_BYTE *)v31);
    __p = v3;
    v27 = v3;
    v28 = &v3[8 * (v2 >> 3)];
    v4 = 24 * ((v2 - 24) / 0x18uLL) + 24;
    memcpy(v3, v1, v4);
    v27 = &v3[v4];
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v17, &v19, (const llvm::SmallPtrSetImplBase *)&v33);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v5 = v35;
  v6 = v36 - (_BYTE *)v35;
  if (v36 != v35)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) <= 0xAAAAAAAAAAAAAAALL)
    {
      v7 = (char *)operator new(v36 - (_BYTE *)v35);
      v20 = v7;
      v21 = v7;
      v22 = &v7[8 * (v6 >> 3)];
      v8 = 24 * ((v6 - 24) / 0x18uLL) + 24;
      memcpy(v7, v5, v8);
      i = &v7[v8];
      v21 = &v7[v8];
      goto LABEL_11;
    }
LABEL_41:
    abort();
  }
  v7 = 0;
  for (i = 0; ; i = v21)
  {
LABEL_11:
    if (v27 - (_BYTE *)__p != i - v7)
      goto LABEL_8;
    if (__p == v27)
      break;
    v12 = v7 + 8;
    v13 = (char *)__p + 8;
    while (1)
    {
      v14 = v13 - 8;
      if (*((_QWORD *)v13 - 1) != *((_QWORD *)v12 - 1))
        break;
      v15 = v12[8];
      if (v13[8])
        v16 = v15 == 0;
      else
        v16 = 1;
      if (v16)
      {
        if ((v13[8] != 0) != (v15 != 0))
          break;
      }
      else if (*(_QWORD *)v13 != *(_QWORD *)v12)
      {
        break;
      }
      v12 += 24;
      v13 += 24;
      if (v14 + 24 == v27)
        goto LABEL_24;
    }
LABEL_8:
    v10 = (_DWORD *)*((_QWORD *)v27 - 3);
    if (*(_QWORD *)v10)
      v11 = *(_DWORD *)(*(_QWORD *)v10 + 160) + 1;
    else
      v11 = 1;
    v10[40] = v11;
    llvm::df_iterator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> *,llvm::df_iterator_default_set<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> *,8u>,false,llvm::GraphTraits<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> *>>::toNext((llvm::SmallPtrSetImplBase *)&v23);
    v7 = v20;
  }
LABEL_24:
  if (v7)
  {
    v21 = v7;
    operator delete(v7);
  }
  if (v18 != v17)
    free(v18);
  if (__p)
  {
    v27 = (char *)__p;
    operator delete(__p);
  }
  if (v24 != v23)
    free(v24);
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v34 != v33)
    free(v34);
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v30 != v29)
    free(v30);
}

uint64_t *llvm::SmallVectorImpl<llvm::BasicBlock *>::insert<llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>,void>(uint64_t a1, uint64_t a2, llvm::Instruction *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  _OWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *__src;
  int __srca;

  v6 = a6;
  v7 = a4;
  v10 = a4;
  v11 = *(_QWORD *)a1;
  v12 = (a2 - *(_QWORD *)a1) >> 3;
  v14 = *(unsigned int *)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 12);
  v15 = *(_DWORD *)(a1 + 8);
  v16 = a6 - a4;
  v17 = (int)a6 - (int)a4;
  v18 = v17 + v14;
  if (*(_QWORD *)a1 + 8 * v14 != a2)
  {
    if (v18 > v13)
    {
      v19 = a6 - a4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18, 8);
      v16 = v19;
      v11 = *(_QWORD *)a1;
      v14 = *(unsigned int *)(a1 + 8);
      v15 = *(_DWORD *)(a1 + 8);
    }
    v20 = (uint64_t *)(v11 + 8 * v14);
    __src = (uint64_t *)(v11 + 8 * v12);
    v21 = v12;
    v22 = v20 - __src;
    if (v22 < v17)
    {
      *(_DWORD *)(a1 + 8) = v15 + v16;
      if (v21 == v14)
      {
        v23 = __src;
      }
      else
      {
        v23 = __src;
        memcpy((void *)(v11 + 8 * (v15 + v16) - 8 * v22), __src, (char *)v20 - (char *)__src);
        v35 = __src;
        do
        {
          *v35++ = llvm::Instruction::getSuccessor(this);
          ++v10;
          --v22;
        }
        while (v22);
      }
      if (v10 != v6)
      {
        v36 = v10;
        do
        {
          *v20++ = llvm::Instruction::getSuccessor(this);
          ++v36;
        }
        while (v36 != v6);
      }
      return v23;
    }
    v28 = v16 << 32;
    v29 = 8 * v17;
    v30 = v14;
    if (v17 + v14 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17 + v14, 8);
      v29 = 8 * v17;
      v30 = *(unsigned int *)(a1 + 8);
      v15 = *(_DWORD *)(a1 + 8);
    }
    v31 = &v20[v29 / 0xFFFFFFFFFFFFFFF8];
    if (!v28)
      goto LABEL_30;
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    v33 = (v28 >> 29) - 8;
    if (v33 >= 0x78)
    {
      v37 = 8 * v30 + *(_QWORD *)a1;
      v34 = &v20[v29 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)((v28 >> 29) - v11 - 8 * v14 + v37) >= 0x20)
      {
        v38 = (v33 >> 3) + 1;
        v39 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        v32 = (_QWORD *)((char *)v32 + v39 * 8);
        v34 = &v31[v39];
        v40 = (__int128 *)(8 * v14 - 8 * v17 + v11 + 16);
        v41 = (_OWORD *)(v37 + 16);
        v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = *v40;
          *(v41 - 1) = *(v40 - 1);
          *v41 = v43;
          v40 += 2;
          v41 += 2;
          v42 -= 4;
        }
        while (v42);
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_30;
      }
    }
    else
    {
      v34 = &v20[v29 / 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v44 = *v34++;
      *v32++ = v44;
    }
    while (v34 != v20);
LABEL_30:
    *(_DWORD *)(a1 + 8) = v15 + (v29 >> 3);
    v23 = __src;
    if (v31 != __src)
      memmove(&__src[v29 / 8], __src, (char *)&v20[v29 / 0xFFFFFFFFFFFFFFF8] - (char *)__src);
    if (v10 != v6)
    {
      v45 = __src;
      do
      {
        *v45++ = llvm::Instruction::getSuccessor(this);
        ++v7;
      }
      while (v7 != v6);
    }
    return v23;
  }
  if (v18 > v13)
  {
    v24 = a6 - a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18, 8);
    LODWORD(v16) = v24;
    v14 = *(unsigned int *)(a1 + 8);
    v11 = *(_QWORD *)a1;
    v15 = *(_DWORD *)(a1 + 8);
  }
  if (v10 != v6)
  {
    __srca = v16;
    v25 = v12;
    v26 = v15;
    v27 = (uint64_t *)(v11 + 8 * v14);
    do
    {
      *v27++ = llvm::Instruction::getSuccessor(this);
      ++v7;
    }
    while (v7 != v6);
    v11 = *(_QWORD *)a1;
    v15 = v26;
    v12 = v25;
    LODWORD(v16) = __srca;
  }
  *(_DWORD *)(a1 + 8) = v15 + v16;
  return (uint64_t *)(v11 + 8 * v12);
}

void llvm::depth_first<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> *>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _OWORD v8[4];
  uint64_t v9;
  void *__p;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD v17[8];
  void *v18;
  void *v19;
  char *v20;

  v3 = *a1;
  v13 = v17;
  v14 = v17;
  v16 = 0;
  v15 = 0x100000008;
  v17[0] = v3;
  v4 = (char *)operator new(0x18uLL);
  *(_QWORD *)v4 = v3;
  v4[8] = 0;
  v4[16] = 0;
  v19 = v4 + 24;
  v20 = v4 + 24;
  v18 = v4;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  __p = 0;
  v5 = (char *)v8 + 8;
  v6 = (char *)v8 + 8;
  v7 = 8;
  v11 = 0;
  v12 = 0;
  llvm::make_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v13, (uint64_t)&v5, a2);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v6 != v5)
    free(v6);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v14 != v13)
    free(v14);
}

void llvm::df_iterator<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> *,llvm::df_iterator_default_set<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> *,8u>,false,llvm::GraphTraits<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>> *>>::toNext(llvm::SmallPtrSetImplBase *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v2 = *((_QWORD *)this + 13);
  while (2)
  {
    v3 = *(_QWORD *)(v2 - 24);
    if (!*(_BYTE *)(v2 - 8))
    {
      *(_QWORD *)(v2 - 16) = *(_QWORD *)(v3 + 32);
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      v6 = *(const void ***)(v2 - 16);
      if (v6 == *(const void ***)(v3 + 40))
        break;
      *(_QWORD *)(v2 - 16) = v6 + 1;
      v7 = *v6;
      v8 = *((_QWORD *)this + 1);
      if (v8 != *(_QWORD *)this)
        goto LABEL_4;
      v9 = *((unsigned int *)this + 5);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = 8 * v9;
        v12 = (_QWORD *)*((_QWORD *)this + 1);
        do
        {
          if ((const void *)*v12 == v7)
          {
            v5 = 0;
            goto LABEL_5;
          }
          if (*v12 == -2)
            v10 = v12;
          ++v12;
          v11 -= 8;
        }
        while (v11);
        if (!v10)
          goto LABEL_16;
        *v10 = v7;
        --*((_DWORD *)this + 6);
        v5 = 1;
        goto LABEL_5;
      }
LABEL_16:
      if (v9 < *((_DWORD *)this + 4))
      {
        *((_DWORD *)this + 5) = v9 + 1;
        *(_QWORD *)(v8 + 8 * v9) = v7;
        v5 = 1;
      }
      else
      {
LABEL_4:
        llvm::SmallPtrSetImplBase::insert_imp_big(this, v7);
        v5 = v4;
      }
LABEL_5:
      if (v5)
      {
        v15 = (_BYTE *)*((_QWORD *)this + 13);
        v14 = *((_QWORD *)this + 14);
        if ((unint64_t)v15 >= v14)
        {
          v16 = (_BYTE *)*((_QWORD *)this + 12);
          v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3) + 1;
          if (v17 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v16) >> 3);
          if (2 * v18 > v17)
            v17 = 2 * v18;
          if (v18 >= 0x555555555555555)
            v19 = 0xAAAAAAAAAAAAAAALL;
          else
            v19 = v17;
          if (v19)
          {
            if (v19 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v20 = (char *)operator new(24 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[8 * ((v15 - v16) >> 3)];
          *(_QWORD *)v21 = v7;
          v21[8] = 0;
          v21[16] = 0;
          v22 = v21 + 24;
          if (v15 != v16)
          {
            do
            {
              v23 = *(_OWORD *)(v15 - 24);
              *((_QWORD *)v21 - 1) = *((_QWORD *)v15 - 1);
              *(_OWORD *)(v21 - 24) = v23;
              v21 -= 24;
              v15 -= 24;
            }
            while (v15 != v16);
            v15 = (_BYTE *)*((_QWORD *)this + 12);
          }
          *((_QWORD *)this + 12) = v21;
          *((_QWORD *)this + 13) = v22;
          *((_QWORD *)this + 14) = &v20[24 * v19];
          if (v15)
            operator delete(v15);
          *((_QWORD *)this + 13) = v22;
        }
        else
        {
          *(_QWORD *)v15 = v7;
          v15[8] = 0;
          v15[16] = 0;
          *((_QWORD *)this + 13) = v15 + 24;
        }
        return;
      }
    }
    v13 = *((_QWORD *)this + 12);
    v2 = *((_QWORD *)this + 13) - 24;
    *((_QWORD *)this + 13) = v2;
    if (v13 != v2)
      continue;
    break;
  }
}

llvm::StructLayout *llvm::StructLayout::StructLayout(llvm::StructLayout *this, llvm::StructType *a2, const llvm::DataLayout *a3)
{
  uint64_t v4;
  llvm::Type *v7;
  const char *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  char *v11;
  const char *v12;
  unsigned int v13;
  unint64_t v14;
  char v15;
  char v16;
  const char *v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  Type *v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  const char *v29;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 17) &= ~1u;
  v4 = *((_DWORD *)a2 + 3) & 0x7FFFFFFF;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0x80000000 | v4;
  if ((_DWORD)v4)
  {
    v7 = (llvm::Type *)**((_QWORD **)a2 + 2);
    if (llvm::Type::isScalableTy(v7))
    {
      *(_QWORD *)this = 0;
      *((_BYTE *)this + 8) = 1;
    }
    if ((*((_BYTE *)a2 + 9) & 2) != 0)
    {
      v10 = 0;
      v11 = (char *)this + 24;
      if (!*((_BYTE *)this + 8))
        goto LABEL_8;
    }
    else
    {
      llvm::DataLayout::getAlignment(a3, v7);
      v10 = v9;
      v11 = (char *)this + 24;
      if (!*((_BYTE *)this + 8))
      {
LABEL_8:
        if ((llvm::TypeSize::operator unsigned long long(this, v8) & ~(-1 << v10)) != 0)
        {
          *((_BYTE *)this + 17) |= 1u;
          *(_QWORD *)this = ((1 << v10) + llvm::TypeSize::operator unsigned long long(this, v12) - 1) & -(1 << v10);
          *((_BYTE *)this + 8) = 0;
        }
      }
    }
    v13 = *((unsigned __int8 *)this + 16);
    if (v10 > v13)
      LOBYTE(v13) = v10;
    *((_BYTE *)this + 16) = v13;
    *(_QWORD *)v11 = *(_QWORD *)this;
    v11[8] = *((_BYTE *)this + 8);
    v14 = (unint64_t)(llvm::DataLayout::getTypeSizeInBits(a3, (Type *)v7) + 7) >> 3;
    llvm::DataLayout::getAlignment(a3, v7);
    *(_QWORD *)this += ((1 << v15) + v14 - 1) & -(1 << v15);
    if ((_DWORD)v4 == 1)
    {
LABEL_13:
      if (*((_BYTE *)this + 8))
        return this;
      goto LABEL_14;
    }
    v19 = 40;
    v20 = 1;
    while (1)
    {
      v26 = *(Type **)(*((_QWORD *)a2 + 2) + 8 * v20);
      if ((*((_BYTE *)a2 + 9) & 2) != 0)
      {
        v28 = 0;
        if (!*((_BYTE *)this + 8))
        {
LABEL_25:
          if ((llvm::TypeSize::operator unsigned long long(this, (const char *)a2) & ~(-1 << v28)) != 0)
          {
            *((_BYTE *)this + 17) |= 1u;
            *(_QWORD *)this = ((1 << v28) + llvm::TypeSize::operator unsigned long long(this, v29) - 1) & -(1 << v28);
            *((_BYTE *)this + 8) = 0;
          }
        }
      }
      else
      {
        llvm::DataLayout::getAlignment(a3, *(llvm::Type **)(*((_QWORD *)a2 + 2) + 8 * v20));
        v28 = v27;
        if (!*((_BYTE *)this + 8))
          goto LABEL_25;
      }
      v21 = *((unsigned __int8 *)this + 16);
      if (v28 > v21)
        LOBYTE(v21) = v28;
      *((_BYTE *)this + 16) = v21;
      v22 = (char *)this + v19;
      v23 = *(_QWORD *)this;
      v22[8] = *((_BYTE *)this + 8);
      *(_QWORD *)v22 = v23;
      v24 = (unint64_t)(llvm::DataLayout::getTypeSizeInBits(a3, v26) + 7) >> 3;
      llvm::DataLayout::getAlignment(a3, (llvm::Type *)v26);
      *(_QWORD *)this += ((1 << v25) + v24 - 1) & -(1 << v25);
      ++v20;
      v19 += 16;
      if (v4 == v20)
        goto LABEL_13;
    }
  }
LABEL_14:
  v16 = *((_BYTE *)this + 16);
  if ((llvm::TypeSize::operator unsigned long long(this, (const char *)a2) & ~(-1 << v16)) != 0)
  {
    *((_BYTE *)this + 17) |= 1u;
    *(_QWORD *)this = (llvm::TypeSize::operator unsigned long long(this, v17) + (1 << *((_BYTE *)this + 16)) - 1) & -(1 << *((_BYTE *)this + 16));
    *((_BYTE *)this + 8) = 0;
  }
  return this;
}

void llvm::DataLayout::getABITypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  llvm::DataLayout::getAlignment(this, a2);
}

void llvm::DataLayout::reset(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  llvm::DataLayout::clear(a1);
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  if (*(_BYTE *)(a1 + 9))
    *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*(_BYTE *)(a1 + 21))
    *(_BYTE *)(a1 + 21) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 212) = 768;
  llvm::DataLayout::setAlignment(a1, DefaultAlignments, byte_1EDC0BB70, byte_1EDC0BB71, *(unsigned int *)algn_1EDC0BB6C, &v10);
  v6 = v10;
  if (v10)
    goto LABEL_19;
  llvm::DataLayout::setAlignment(a1, dword_1EDC0BB74, byte_1EDC0BB7C, byte_1EDC0BB7D, unk_1EDC0BB78, &v10);
  v6 = v10;
  if (v10)
    goto LABEL_19;
  llvm::DataLayout::setAlignment(a1, dword_1EDC0BB80, byte_1EDC0BB88, byte_1EDC0BB89, *(unsigned int *)algn_1EDC0BB84, &v10);
  v6 = v10;
  if (v10)
    goto LABEL_19;
  llvm::DataLayout::setAlignment(a1, dword_1EDC0BB8C, byte_1EDC0BB94, byte_1EDC0BB95, unk_1EDC0BB90, &v10);
  v6 = v10;
  if (v10)
    goto LABEL_19;
  llvm::DataLayout::setAlignment(a1, dword_1EDC0BB98, byte_1EDC0BBA0, byte_1EDC0BBA1, *(unsigned int *)algn_1EDC0BB9C, &v10);
  v6 = v10;
  if (v10)
    goto LABEL_19;
  llvm::DataLayout::setAlignment(a1, dword_1EDC0BBA4, byte_1EDC0BBAC, byte_1EDC0BBAD, unk_1EDC0BBA8, &v10);
  v6 = v10;
  if (v10)
    goto LABEL_19;
  llvm::DataLayout::setAlignment(a1, dword_1EDC0BBB0, byte_1EDC0BBB8, byte_1EDC0BBB9, *(unsigned int *)algn_1EDC0BBB4, &v10);
  v6 = v10;
  if (v10)
    goto LABEL_19;
  llvm::DataLayout::setAlignment(a1, dword_1EDC0BBBC, byte_1EDC0BBC4, byte_1EDC0BBC5, unk_1EDC0BBC0, &v10);
  v6 = v10;
  if (v10
    || (llvm::DataLayout::setAlignment(a1, dword_1EDC0BBC8, byte_1EDC0BBD0, byte_1EDC0BBD1, *(unsigned int *)algn_1EDC0BBCC, &v10), (v6 = v10) != 0)|| (llvm::DataLayout::setAlignment(a1, dword_1EDC0BBD4, byte_1EDC0BBDC, byte_1EDC0BBDD, unk_1EDC0BBD8, &v10), (v6 = v10) != 0)|| (llvm::DataLayout::setAlignment(a1, dword_1EDC0BBE0, byte_1EDC0BBE8, byte_1EDC0BBE9, *(unsigned int *)algn_1EDC0BBE4, &v10), (v6 = v10) != 0))
  {
LABEL_19:
    v9 = v6;
    v10 = 0;
    llvm::report_fatal_error(&v9, 1);
  }
  llvm::DataLayout::setPointerAlignmentInBits(a1, 0, 3u, 3u, 64, 64, &v10);
  if (v10)
  {
    v8 = v10;
    v10 = 0;
    llvm::report_fatal_error(&v8, 1);
  }
  llvm::DataLayout::parseSpecifier(a1, a2, a3, &v10);
  if (v10)
  {
    v7 = v10;
    v10 = 0;
    llvm::report_fatal_error(&v7, 1);
  }
}

uint64_t llvm::DataLayout::clear(uint64_t this)
{
  uint64_t v1;
  llvm *v2;
  uint64_t v3;
  llvm *v4;
  uint64_t v5;
  llvm *v6;

  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 120) = 0;
  *(_DWORD *)(this + 168) = 0;
  *(_DWORD *)(this + 248) = 0;
  v1 = *(_QWORD *)(this + 384);
  if (v1)
  {
    v2 = *(llvm **)v1;
    v3 = *(unsigned int *)(v1 + 16);
    if (*(_DWORD *)(v1 + 8))
    {
      v4 = *(llvm **)v1;
      if ((_DWORD)v3)
      {
        v5 = 0;
        while ((*(_QWORD *)((char *)v2 + v5) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v5 += 16;
          if (16 * v3 == v5)
            goto LABEL_15;
        }
        v4 = (llvm *)((char *)v2 + v5);
      }
      v6 = (llvm *)((char *)v2 + 16 * v3);
      if (v4 != v6)
      {
        do
        {
          free(*((void **)v4 + 1));
          do
          {
            v4 = (llvm *)((char *)v4 + 16);
            if (v4 == v6)
              goto LABEL_14;
          }
          while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000);
        }
        while (v4 != v6);
LABEL_14:
        v2 = *(llvm **)v1;
        v3 = *(unsigned int *)(v1 + 16);
      }
    }
LABEL_15:
    llvm::deallocate_buffer(v2, (void *)(16 * v3));
  }
  *(_QWORD *)(this + 384) = 0;
  return this;
}

void llvm::DataLayout::setAlignment(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  const char *v7;
  llvm *v8;
  uint64_t v9;
  uint64_t v10;
  std::error_code v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  __int16 v29;
  std::string __p;

  if (HIBYTE(a5))
  {
    v7 = "Invalid bit width, must be a 24-bit integer";
    goto LABEL_5;
  }
  if (a4 < a3)
  {
    v7 = "Preferred alignment cannot be less than the ABI alignment";
LABEL_5:
    v28 = v7;
    v29 = 259;
    v8 = (llvm *)llvm::inconvertibleErrorCode((llvm *)a1);
    v10 = v9;
    llvm::Twine::str((llvm::Twine *)&v28, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11.__cat_ = (const std::error_category *)&__p;
    else
      v11.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v11.__val_ = v10;
    llvm::createStringError(v8, v11, a6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v12 = 0;
  switch(a2)
  {
    case 'a':
      *(_BYTE *)(a1 + 212) = a3;
      *(_BYTE *)(a1 + 213) = a4;
      *a6 = 0;
      return;
    case 'f':
      v12 = a1 + 112;
      v13 = a5;
      v14 = *(_DWORD **)(a1 + 112);
      v15 = *(unsigned int *)(a1 + 120);
      if ((_DWORD)v15)
        goto LABEL_16;
      goto LABEL_25;
    case 'i':
      v12 = a1 + 64;
      goto LABEL_15;
    case 'v':
      v12 = a1 + 160;
      v13 = a5;
      v14 = *(_DWORD **)(a1 + 160);
      v15 = *(unsigned int *)(a1 + 168);
      if (!(_DWORD)v15)
        goto LABEL_25;
      goto LABEL_16;
    default:
LABEL_15:
      v13 = a5;
      v14 = *(_DWORD **)v12;
      v15 = *(unsigned int *)(v12 + 8);
      if (!(_DWORD)v15)
        goto LABEL_25;
LABEL_16:
      v16 = v14;
      v17 = v15;
      do
      {
        v18 = v17 >> 1;
        v19 = &v16[2 * (v17 >> 1)];
        v21 = *v19;
        v20 = v19 + 2;
        v17 += ~(v17 >> 1);
        if (v21 < a5)
          v16 = v20;
        else
          v17 = v18;
      }
      while (v17);
      if (v16 == &v14[2 * v15])
      {
LABEL_25:
        v22 = ((unint64_t)a3 << 32) | ((unint64_t)a4 << 40) | v13;
        if (v15 >= *(_DWORD *)(v12 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v12, (void *)(v12 + 16), v15 + 1, 8);
          v15 = *(unsigned int *)(v12 + 8);
          v14 = *(_DWORD **)v12;
        }
        *(_QWORD *)&v14[2 * v15] = v22;
        ++*(_DWORD *)(v12 + 8);
        *a6 = 0;
      }
      else if (*v16 == a5)
      {
        *((_BYTE *)v16 + 4) = a3;
        *((_BYTE *)v16 + 5) = a4;
        *a6 = 0;
      }
      else
      {
        v23 = ((unint64_t)a3 << 32) | ((unint64_t)a4 << 40) | v13;
        v24 = ((char *)v16 - (char *)v14) >> 3;
        if (v15 >= *(_DWORD *)(v12 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v12, (void *)(v12 + 16), v15 + 1, 8);
          v14 = *(_DWORD **)v12;
          v15 = *(unsigned int *)(v12 + 8);
        }
        v25 = &v14[2 * v24];
        *(_QWORD *)&v14[2 * v15] = *(_QWORD *)&v14[2 * v15 - 2];
        v26 = *(unsigned int *)(v12 + 8);
        v27 = *(_QWORD *)v12 + 8 * v26;
        if ((_WORD *)(v27 - 8) != v25)
        {
          memmove(v25 + 4, v25, v27 - 8 - (_QWORD)v25 - 2);
          LODWORD(v26) = *(_DWORD *)(v12 + 8);
        }
        *(_DWORD *)(v12 + 8) = v26 + 1;
        v25[2] = WORD2(v23);
        *(_DWORD *)v25 = v23;
        *a6 = 0;
      }
      break;
  }
}

void llvm::DataLayout::setPointerAlignmentInBits(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  const char *v9;
  llvm *v10;
  uint64_t v11;
  uint64_t v12;
  std::error_code v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  __int16 v40;
  std::string __p;

  v8 = a3;
  if (a4 < a3)
  {
    v9 = "Preferred alignment cannot be less than the ABI alignment";
LABEL_5:
    v39 = v9;
    v40 = 259;
    v10 = (llvm *)llvm::inconvertibleErrorCode((llvm *)a1);
    v12 = v11;
    llvm::Twine::str((llvm::Twine *)&v39, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13.__cat_ = (const std::error_category *)&__p;
    else
      v13.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v13.__val_ = v12;
    llvm::createStringError(v10, v13, a7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  if (a6 > a5)
  {
    v9 = "Index width cannot be larger than pointer width";
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(a1 + 240);
  v15 = a1 + 240;
  v16 = v17;
  v18 = *(unsigned int *)(v15 + 8);
  if (!(_DWORD)v18)
    goto LABEL_19;
  v19 = v16;
  v20 = *(unsigned int *)(v15 + 8);
  do
  {
    v21 = v20 >> 1;
    v22 = v19 + 16 * (v20 >> 1);
    v23 = *(_DWORD *)(v22 + 8);
    v24 = v22 + 16;
    v20 += ~(v20 >> 1);
    if (v23 < a2)
      v19 = v24;
    else
      v20 = v21;
  }
  while (v20);
  if (v19 == v16 + 16 * v18)
  {
LABEL_19:
    v25 = ((unint64_t)a4 << 8) | (a5 << 32) | a3;
    v26 = a2 | (unint64_t)(a6 << 32);
    if (v18 >= *(_DWORD *)(a1 + 252))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 256), v18 + 1, 16);
      v18 = *(unsigned int *)(a1 + 248);
      v16 = *(_QWORD *)(a1 + 240);
    }
    v27 = (unint64_t *)(v16 + 16 * v18);
    *v27 = v25;
    v27[1] = v26;
    ++*(_DWORD *)(a1 + 248);
  }
  else if (*(_DWORD *)(v19 + 8) == a2)
  {
    *(_BYTE *)v19 = a3;
    *(_BYTE *)(v19 + 1) = a4;
    *(_DWORD *)(v19 + 4) = a5;
    *(_DWORD *)(v19 + 12) = a6;
  }
  else
  {
    v28 = ((unint64_t)a4 << 8) | (a5 << 32);
    v29 = a2;
    v30 = (v19 - v16) >> 4;
    if (v18 >= *(_DWORD *)(a1 + 252))
    {
      v37 = a2;
      v38 = a6;
      v36 = v30;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 256), v18 + 1, 16);
      v30 = v36;
      v29 = v37;
      a6 = v38;
      v16 = *(_QWORD *)(a1 + 240);
      v18 = *(unsigned int *)(a1 + 248);
    }
    v31 = v28 | v8;
    v32 = v29 | (a6 << 32);
    v33 = (unint64_t *)(v16 + 16 * v30);
    *(_OWORD *)(v16 + 16 * v18) = *(_OWORD *)(v16 + 16 * v18 - 16);
    v34 = *(unsigned int *)(a1 + 248);
    v35 = *(_QWORD *)(a1 + 240) + 16 * v34 - 16;
    if ((unint64_t *)v35 != v33)
    {
      memmove(v33 + 2, v33, v35 - (_QWORD)v33);
      LODWORD(v34) = *(_DWORD *)(a1 + 248);
    }
    *(_DWORD *)(a1 + 248) = v34 + 1;
    *v33 = v31;
    v33[1] = v32;
  }
  *a7 = 0;
}

