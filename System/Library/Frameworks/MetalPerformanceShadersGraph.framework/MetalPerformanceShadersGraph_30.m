llvm::Metadata *sub_180D2F0E4()
{
  llvm::Metadata *v0;
  const llvm::DIVariable *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F0F4()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F104()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F114()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F124()
{
  llvm::Metadata *v0;
  _BYTE *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((v1[1] & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)&v1[-8 * ((v4 >> 2) & 0xF) - 16];
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = (llvm::Metadata *)v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = (llvm::Metadata *)v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::MDString *sub_180D2F134()
{
  llvm::Metadata *v0;
  uint64_t v1;
  int v2;
  llvm::MDString *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *(_QWORD *)(v1 - 16);
  if ((v4 & 2) != 0)
  {
    v5 = *(llvm::Metadata ***)(v1 - 32);
    v6 = *(unsigned int *)(v1 - 24);
    if (!*(_DWORD *)(v1 - 24))
    {
LABEL_23:
      if ((*(_BYTE *)(v1 + 1) & 0x7F) == 2 || *(_DWORD *)(v1 - 8))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)(v1 - 16 - 8 * ((v4 >> 2) & 0xF));
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = (llvm::Metadata *)v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = (llvm::Metadata *)v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F144()
{
  llvm::Metadata *v0;
  llvm::Metadata *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F154()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F164()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

void sub_180D2F174()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;

  JUMPOUT(0x180D2F180);
}

llvm::raw_ostream *llvm::VerifierSupport::CheckFailed<llvm::Function>(llvm::raw_ostream *result, llvm::Twine *this, unsigned __int8 *a3)
{
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  v3 = result;
  v4 = *(llvm::raw_ostream **)result;
  if (!*(_QWORD *)result)
  {
    *((_BYTE *)result + 192) = 1;
    return result;
  }
  result = (llvm::raw_ostream *)llvm::Twine::print(this, v4);
  v6 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v4 + 3))
  {
    result = llvm::raw_ostream::write(v4, 10);
    v7 = *(llvm::raw_ostream **)v3;
    *((_BYTE *)v3 + 192) = 1;
    if (!v7)
      return result;
  }
  else
  {
    *((_QWORD *)v4 + 4) = v6 + 1;
    *v6 = 10;
    v7 = *(llvm::raw_ostream **)v3;
    *((_BYTE *)v3 + 192) = 1;
    if (!v7)
      return result;
  }
  if (a3[16] >= 0x1Cu)
    llvm::Value::print((llvm::Value *)a3, v7, (llvm::raw_ostream *)((char *)v3 + 16), 0);
  llvm::Value::printAsOperand((Type **)a3, v7, 1, (_anonymous_namespace_::TypePrinting **)v3 + 2);
  result = *(llvm::raw_ostream **)v3;
  v8 = *(_BYTE **)(*(_QWORD *)v3 + 32);
  if ((unint64_t)v8 >= *(_QWORD *)(*(_QWORD *)v3 + 24))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v8 + 1;
  *v8 = 10;
  return result;
}

const void **`anonymous namespace'::Verifier::visitFunction(llvm::Function const&)::$_0::operator()(const void **result, unsigned __int8 *a2, const llvm::Module **a3)
{
  const void **v4;
  llvm::Metadata *v5;
  const void **v6;
  _QWORD *v7;
  unsigned __int8 v8;
  int v9;
  const llvm::Module **v10;
  unint64_t v11;
  llvm::Metadata *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void **v16;
  const llvm::Module **v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::Module **v20;
  llvm::Metadata **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  char v24;
  unsigned __int8 *Subprogram;
  unsigned __int8 *v26;
  uint64_t v27;
  char v28;
  llvm::Metadata **v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unsigned __int8 **v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  _QWORD v43[4];
  __int16 v44;
  llvm::Metadata *v45;
  const llvm::Module **v46;

  if (!a3 || *(_BYTE *)a3 != 6)
    return result;
  v4 = result;
  v46 = a3;
  v6 = result;
  result = (const void **)*result;
  v5 = (llvm::Metadata *)v6[1];
  v7 = result[1];
  if (v7 != *result)
    goto LABEL_4;
  v13 = *((unsigned int *)result + 5);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 8 * v13;
    v16 = (void **)result[1];
    do
    {
      if (*v16 == a3)
      {
        v9 = 0;
        goto LABEL_5;
      }
      if (*v16 == (void *)-2)
        v14 = v16;
      ++v16;
      v15 -= 8;
    }
    while (v15);
    if (!v14)
      goto LABEL_30;
    *v14 = a3;
    --*((_DWORD *)result + 6);
    v9 = 1;
  }
  else
  {
LABEL_30:
    if (v13 >= *((_DWORD *)result + 4))
    {
LABEL_4:
      result = llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, a3);
      v9 = v8;
      goto LABEL_5;
    }
    *((_DWORD *)result + 5) = v13 + 1;
    v7[v13] = a3;
    v9 = 1;
  }
LABEL_5:
  if (!v9)
    return result;
  v10 = v46;
  v11 = (unint64_t)*(v46 - 2);
  if ((v11 & 2) != 0)
  {
    v12 = *(llvm::Metadata **)*(v46 - 4);
    v45 = v12;
    if (!v12)
    {
LABEL_28:
      v44 = 259;
      v21 = (llvm::Metadata **)v4[2];
      v42 = (unsigned __int8 *)v4[3];
      v43[0] = "DILocation's scope must be a DILocalScope";
      v41 = a2;
      return (const void **)llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::Metadata *>(v5, (llvm::Twine *)v43, v21, &v42, &v41, (llvm::Metadata **)&v46, &v45);
    }
  }
  else
  {
    v12 = v46[-((v11 >> 2) & 0xF) - 2];
    v45 = v12;
    if (!v12)
      goto LABEL_28;
  }
  if (*(unsigned __int8 *)v12 - 18 >= 3)
    goto LABEL_28;
  v42 = 0;
  while ((v11 & 2) != 0)
  {
    v20 = (const llvm::Module **)*(v10 - 4);
    if (*((_DWORD *)v10 - 6) != 2)
      goto LABEL_34;
    v10 = (const llvm::Module **)v20[1];
    if (!v10)
      goto LABEL_34;
LABEL_20:
    v11 = (unint64_t)*(v10 - 2);
  }
  v17 = v10 - 2;
  v18 = v11 & 0x3C0;
  v19 = -(uint64_t)((v11 >> 2) & 0xF);
  if (v18 == 128)
  {
    v10 = (const llvm::Module **)v17[v19 + 1];
    if (v10)
      goto LABEL_20;
  }
  v20 = &v17[v19];
LABEL_34:
  v22 = (unsigned __int8 *)*v20;
  v42 = v22;
  if (!v22)
  {
    v43[0] = "Failed to find DILocalScope";
    v44 = 259;
    return (const void **)llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)v5, (llvm::Twine *)v43, &v46);
  }
  result = (const void **)*v4;
  v23 = *((_QWORD *)*v4 + 1);
  if (v23 != *(_QWORD *)*v4)
    goto LABEL_36;
  v31 = *((unsigned int *)result + 5);
  if (!(_DWORD)v31)
  {
LABEL_52:
    if (v31 >= *((_DWORD *)result + 4))
    {
LABEL_36:
      result = llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v22);
      if (!v24)
        return result;
    }
    else
    {
      *((_DWORD *)result + 5) = v31 + 1;
      *(_QWORD *)(v23 + 8 * v31) = v22;
    }
LABEL_37:
    Subprogram = llvm::DILocalScope::getSubprogram(v22);
    v26 = Subprogram;
    v41 = Subprogram;
    if (Subprogram && v22 != Subprogram)
    {
      result = (const void **)*v4;
      v27 = *((_QWORD *)*v4 + 1);
      if (v27 != *(_QWORD *)*v4)
        goto LABEL_40;
      v35 = *((unsigned int *)result + 5);
      if ((_DWORD)v35)
      {
        v36 = 0;
        v37 = 8 * v35;
        v38 = (unsigned __int8 **)*((_QWORD *)*v4 + 1);
        while (*v38 != v26)
        {
          if (*v38 == (unsigned __int8 *)-2)
            v36 = v38;
          ++v38;
          v37 -= 8;
          if (!v37)
          {
            if (!v36)
              goto LABEL_62;
            *v36 = v26;
            --*((_DWORD *)result + 6);
            goto LABEL_41;
          }
        }
        return result;
      }
LABEL_62:
      if (v35 < *((_DWORD *)result + 4))
      {
        *((_DWORD *)result + 5) = v35 + 1;
        *(_QWORD *)(v27 + 8 * v35) = v26;
      }
      else
      {
LABEL_40:
        result = llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v26);
        if (!v28)
          return result;
      }
    }
LABEL_41:
    result = (const void **)llvm::DISubprogram::describes((llvm::DISubprogram *)v26, (const llvm::Function *)v4[3]);
    if ((result & 1) == 0)
    {
      v43[0] = "!dbg attachment points at wrong subprogram for function";
      v44 = 259;
      v29 = (llvm::Metadata **)v4[2];
      v30 = (unsigned __int8 *)v4[3];
      v39 = a2;
      v40 = v30;
      return (const void **)llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>(v5, (llvm::Twine *)v43, v29, &v40, &v39, (llvm::Metadata **)&v46, (llvm::Metadata **)&v42, (llvm::Metadata **)&v41);
    }
    return result;
  }
  v32 = 0;
  v33 = 8 * v31;
  v34 = (unsigned __int8 **)*((_QWORD *)*v4 + 1);
  while (*v34 != v22)
  {
    if (*v34 == (unsigned __int8 *)-2)
      v32 = v34;
    ++v34;
    v33 -= 8;
    if (!v33)
    {
      if (!v32)
        goto LABEL_52;
      *v32 = v22;
      --*((_DWORD *)result + 6);
      goto LABEL_37;
    }
  }
  return result;
}

llvm::Metadata *llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(llvm::Metadata *result, llvm::Twine *this, unsigned __int8 **a3, llvm::Metadata **a4)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v8;
  _anonymous_namespace_::TypePrinting *v9;
  _anonymous_namespace_::TypePrinting *v10;

  v4 = (uint64_t)result;
  v5 = *(llvm::raw_ostream **)result;
  if (!*(_QWORD *)result)
  {
    *((_BYTE *)result + 192) = 1;
    return result;
  }
  result = (llvm::Metadata *)llvm::Twine::print(this, v5);
  v8 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v8 < *((_QWORD *)v5 + 3))
  {
    *((_QWORD *)v5 + 4) = v8 + 1;
    *v8 = 10;
    v9 = *(_anonymous_namespace_::TypePrinting **)v4;
    *(_BYTE *)(v4 + 192) = 1;
    if (!v9)
      return result;
    return llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v4, a3, a4);
  }
  result = llvm::raw_ostream::write(v5, 10);
  v10 = *(_anonymous_namespace_::TypePrinting **)v4;
  *(_BYTE *)(v4 + 192) = 1;
  if (v10)
    return llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v4, a3, a4);
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::Value const*>(llvm::raw_ostream *result, llvm::Twine *this, unsigned __int8 **a3, llvm::raw_ostream **a4)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v8;
  _anonymous_namespace_::TypePrinting *v9;
  _anonymous_namespace_::TypePrinting *v10;

  v4 = (uint64_t)result;
  v5 = *(llvm::raw_ostream **)result;
  if (!*(_QWORD *)result)
  {
    *((_BYTE *)result + 192) = 1;
    return result;
  }
  result = (llvm::raw_ostream *)llvm::Twine::print(this, v5);
  v8 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v8 < *((_QWORD *)v5 + 3))
  {
    *((_QWORD *)v5 + 4) = v8 + 1;
    *v8 = 10;
    v9 = *(_anonymous_namespace_::TypePrinting **)v4;
    *(_BYTE *)(v4 + 192) = 1;
    if (!v9)
      return result;
    return llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)v4, a3, a4);
  }
  result = llvm::raw_ostream::write(v5, 10);
  v10 = *(_anonymous_namespace_::TypePrinting **)v4;
  *(_BYTE *)(v4 + 192) = 1;
  if (v10)
    return llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)v4, a3, a4);
  return result;
}

void `anonymous namespace'::Verifier::verifyRangeMetadata(const llvm::Module **this, const llvm::Value *a2, const llvm::Module **a3, llvm::Type ***a4, char a5)
{
  uint64_t v9;
  unsigned int v10;
  const char *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  const llvm::Module **v15;
  unint64_t v16;
  const llvm::Module **v17;
  const llvm::Module *v18;
  uint64_t v19;
  const llvm::Module **v20;
  const llvm::Module *v21;
  uint64_t v22;
  llvm::Type *v23;
  const void **v24;
  void **v25;
  unsigned int v26;
  int v30;
  BOOL isEmptySet;
  llvm::raw_ostream **v32;
  const llvm::Module **v33;
  unint64_t v34;
  const llvm::Module **v35;
  uint64_t v36;
  const void **v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void **v41;
  BOOL v42;
  unsigned int v43;
  const char *v44;
  unsigned int v45;
  void *v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;
  void *__p;
  unsigned int v55;
  void *v56;
  unsigned int v57;
  void *v58;
  unsigned int v59;
  void *v60;
  unsigned int v61;
  void *v62;
  unsigned int v63;
  void *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unsigned int v69;
  void *v70;
  unsigned int v71;
  char *v72;
  unsigned int v73;
  void *v74;
  unsigned int v75;
  __int16 v76;
  const llvm::Module **v77[2];

  v77[0] = a3;
  v9 = (uint64_t)*(a3 - 2);
  if ((v9 & 2) != 0)
  {
    v10 = *((_DWORD *)a3 - 6);
    if ((v10 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    v10 = (v9 >> 6) & 0xF;
    if (((v9 >> 6) & 1) != 0)
    {
LABEL_3:
      v11 = "Unfinished range!";
LABEL_7:
      v72 = (char *)v11;
      v76 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)&v72, v77);
      return;
    }
  }
  if (v10 <= 1)
  {
    v11 = "It should have at least one range!";
    goto LABEL_7;
  }
  llvm::ConstantRange::ConstantRange((unsigned int *)&v68, 1u, 1);
  v12 = 0;
  if (v10 >> 1 <= 1)
    v13 = 1;
  else
    v13 = v10 >> 1;
  v14 = 16 * v13;
  do
  {
    v15 = v77[0] - 2;
    v16 = (unint64_t)*(v77[0] - 2);
    if ((v16 & 2) != 0)
      v17 = (const llvm::Module **)*(v77[0] - 4);
    else
      v17 = &v15[-((v16 >> 2) & 0xF)];
    v18 = v17[v12 / 8];
    if (*(_BYTE *)v18 != 1 || (v19 = *((_QWORD *)v18 + 16), *(_BYTE *)(v19 + 16) != 16))
    {
      v67 = 0;
      v72 = "The lower limit must be an integer!";
      v76 = 259;
      v32 = (llvm::raw_ostream **)&v67;
LABEL_116:
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)this, (llvm::Twine *)&v72, v32);
      goto LABEL_118;
    }
    v67 = *((_QWORD *)v18 + 16);
    if ((v16 & 2) != 0)
      v20 = (const llvm::Module **)*(v77[0] - 4);
    else
      v20 = &v15[-((v16 >> 2) & 0xF)];
    v21 = v20[v12 / 8 + 1];
    if (*(_BYTE *)v21 != 1 || (v22 = *((_QWORD *)v21 + 16), *(_BYTE *)(v22 + 16) != 16))
    {
      v66 = 0;
      v72 = "The upper limit must be an integer!";
      v76 = 259;
      v32 = (llvm::raw_ostream **)&v66;
      goto LABEL_116;
    }
    v66 = v22;
    if (*(_QWORD *)v22 != *(_QWORD *)v19)
      goto LABEL_117;
    v23 = (llvm::Type *)a4;
    if (((_DWORD)a4[1] & 0xFE) == 0x12)
      v23 = *a4[2];
    if (*(llvm::Type **)v22 != v23)
    {
LABEL_117:
      v72 = "Range types must match instruction type!";
      v76 = 259;
      v58 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)this, (llvm::Twine *)&v72, (llvm::raw_ostream **)&v58);
      goto LABEL_118;
    }
    v24 = (const void **)(v22 + 24);
    v65 = *(_DWORD *)(v22 + 32);
    if (v65 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v64, v24);
      v25 = (void **)(v19 + 24);
      v26 = *(_DWORD *)(v19 + 32);
      v63 = v26;
      if (v26 <= 0x40)
      {
LABEL_42:
        v62 = *v25;
        if (v62 != v64 || v26 == 0)
        {
LABEL_47:
          v57 = v26;
          v56 = v62;
          v55 = v65;
          if (v65 > 0x40)
            goto LABEL_53;
          goto LABEL_48;
        }
        goto LABEL_34;
      }
    }
    else
    {
      v64 = (void *)*v24;
      v25 = (void **)(v19 + 24);
      v26 = *(_DWORD *)(v19 + 32);
      v63 = v26;
      if (v26 <= 0x40)
        goto LABEL_42;
    }
    llvm::APInt::initSlowCase((llvm::APInt *)&v62, (const void **)v25);
    v26 = v63;
    if (v63 > 0x40)
    {
      if (llvm::APInt::equalSlowCase((const void **)&v62, (const void **)&v64)
        && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v62) != v26
        && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v62) != v26)
      {
        goto LABEL_78;
      }
      v57 = v26;
      llvm::APInt::initSlowCase((llvm::APInt *)&v56, (const void **)&v62);
      v55 = v65;
      if (v65 > 0x40)
        goto LABEL_53;
      goto LABEL_48;
    }
    if (v62 != v64 || v63 == 0)
      goto LABEL_47;
LABEL_34:
    if (v62 != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v26) && v62 != 0)
    {
LABEL_78:
      v72 = "The upper and lower limits cannot be the same value";
      v76 = 259;
      v58 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)this, (llvm::Twine *)&v72, (llvm::raw_ostream **)&v58);
      v30 = 1;
      goto LABEL_104;
    }
    v57 = v26;
    v56 = v62;
    v55 = v65;
    if (v65 > 0x40)
    {
LABEL_53:
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v64);
      goto LABEL_54;
    }
LABEL_48:
    __p = v64;
LABEL_54:
    llvm::ConstantRange::ConstantRange((uint64_t)&v58, (uint64_t)&v56, (uint64_t)&__p);
    if (v55 >= 0x41 && __p)
      operator delete[](__p);
    if (v57 >= 0x41 && v56)
      operator delete[](v56);
    if (llvm::ConstantRange::isEmptySet((llvm::ConstantRange *)&v58)
      || (a5 & 1) == 0 && llvm::ConstantRange::isFullSet((llvm::ConstantRange *)&v58))
    {
      v72 = "Range must not be empty!";
      goto LABEL_62;
    }
    if (!v12)
      goto LABEL_79;
    llvm::ConstantRange::intersectWith((llvm::APInt *)&v58, (llvm::APInt *)&v68, 0, &v72);
    isEmptySet = llvm::ConstantRange::isEmptySet((llvm::ConstantRange *)&v72);
    if (v75 >= 0x41 && v74)
      operator delete[](v74);
    if (v73 >= 0x41 && v72)
      operator delete[](v72);
    if (isEmptySet)
    {
      if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v62, (const llvm::APInt *)&v68) > 0)
      {
        if (isContiguous((const llvm::ConstantRange *)&v58, (const void **)&v68))
        {
          v72 = "Intervals are contiguous";
          goto LABEL_62;
        }
LABEL_79:
        v53 = v63;
        if (v63 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v52, (const void **)&v62);
          v51 = v65;
          if (v65 > 0x40)
            goto LABEL_81;
        }
        else
        {
          v52 = v62;
          v51 = v65;
          if (v65 > 0x40)
          {
LABEL_81:
            llvm::APInt::initSlowCase((llvm::APInt *)&v50, (const void **)&v64);
LABEL_85:
            llvm::ConstantRange::ConstantRange((uint64_t)&v72, (uint64_t)&v52, (uint64_t)&v50);
            if (v69 >= 0x41 && v68)
              operator delete[](v68);
            v68 = v72;
            v69 = v73;
            v73 = 0;
            if (v71 >= 0x41 && v70)
            {
              operator delete[](v70);
              v70 = v74;
              v71 = v75;
              v75 = 0;
              if (v73 >= 0x41 && v72)
                operator delete[](v72);
            }
            else
            {
              v70 = v74;
              v71 = v75;
              v75 = 0;
            }
            if (v51 >= 0x41 && v50)
              operator delete[](v50);
            if (v53 >= 0x41 && v52)
              operator delete[](v52);
            v30 = 0;
            if (v61 < 0x41)
              goto LABEL_101;
LABEL_63:
            if (v60)
              operator delete[](v60);
            goto LABEL_101;
          }
        }
        v50 = v64;
        goto LABEL_85;
      }
      v72 = "Intervals are not in order";
    }
    else
    {
      v72 = "Intervals are overlapping";
    }
LABEL_62:
    v76 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)&v72, v77);
    v30 = 1;
    if (v61 >= 0x41)
      goto LABEL_63;
LABEL_101:
    if (v59 >= 0x41 && v58)
      operator delete[](v58);
LABEL_104:
    if (v63 >= 0x41 && v62)
      operator delete[](v62);
    if (v65 >= 0x41 && v64)
      operator delete[](v64);
    if (v30)
      goto LABEL_118;
    v12 += 16;
  }
  while (v14 != v12);
  if (v10 >= 6)
  {
    v33 = v77[0];
    v34 = (unint64_t)*(v77[0] - 2);
    if ((v34 & 2) != 0)
      v35 = (const llvm::Module **)*(v77[0] - 4);
    else
      v35 = &v77[0][-((v34 >> 2) & 0xF) - 2];
    v36 = *((_QWORD *)*v35 + 16);
    if (*(_BYTE *)(v36 + 16) != 16)
      v36 = 0;
    v37 = (const void **)(v36 + 24);
    v65 = *(_DWORD *)(v36 + 32);
    if (v65 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v64, v37);
      v33 = v77[0];
    }
    else
    {
      v64 = (void *)*v37;
    }
    v38 = (unint64_t)*(v33 - 2);
    if ((v38 & 2) != 0)
      v39 = (uint64_t)*(v33 - 4);
    else
      v39 = (uint64_t)&v33[-((v38 >> 2) & 0xF) - 2];
    v40 = *(_QWORD *)(*(_QWORD *)(v39 + 8) + 128);
    if (*(_BYTE *)(v40 + 16) != 16)
      v40 = 0;
    v41 = (const void **)(v40 + 24);
    v63 = *(_DWORD *)(v40 + 32);
    if (v63 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v62, v41);
    else
      v62 = (void *)*v41;
    v49 = v65;
    if (v65 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v48, (const void **)&v64);
    else
      v48 = v64;
    v47 = v63;
    if (v63 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, (const void **)&v62);
    else
      v46 = v62;
    llvm::ConstantRange::ConstantRange((uint64_t)&v58, (uint64_t)&v48, (uint64_t)&v46);
    if (v47 >= 0x41 && v46)
      operator delete[](v46);
    if (v49 >= 0x41 && v48)
      operator delete[](v48);
    llvm::ConstantRange::intersectWith((llvm::APInt *)&v58, (llvm::APInt *)&v68, 0, &v72);
    v42 = llvm::ConstantRange::isEmptySet((llvm::ConstantRange *)&v72);
    if (v75 >= 0x41 && v74)
      operator delete[](v74);
    if (v73 >= 0x41 && v72)
      operator delete[](v72);
    if (v42)
    {
      v43 = v61;
      if (v61 > 0x40)
      {
        if (llvm::APInt::equalSlowCase((const void **)&v60, (const void **)&v68))
          goto LABEL_173;
      }
      else if (v60 == v68)
      {
LABEL_173:
        v44 = "Intervals are contiguous";
        goto LABEL_174;
      }
      v45 = v59;
      if (v59 > 0x40)
      {
        if (llvm::APInt::equalSlowCase((const void **)&v58, (const void **)&v70))
          goto LABEL_173;
      }
      else if (v58 == v70)
      {
        goto LABEL_173;
      }
      if (v43 >= 0x41 && v60)
      {
        operator delete[](v60);
        v45 = v59;
      }
      if (v45 >= 0x41)
      {
LABEL_178:
        if (v58)
          operator delete[](v58);
      }
    }
    else
    {
      v44 = "Intervals are overlapping";
LABEL_174:
      v72 = (char *)v44;
      v76 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)&v72, v77);
      if (v61 >= 0x41 && v60)
        operator delete[](v60);
      if (v59 >= 0x41)
        goto LABEL_178;
    }
    if (v63 >= 0x41 && v62)
      operator delete[](v62);
    if (v65 >= 0x41 && v64)
      operator delete[](v64);
  }
LABEL_118:
  if (v71 >= 0x41 && v70)
    operator delete[](v70);
  if (v69 >= 0x41)
  {
    if (v68)
      operator delete[](v68);
  }
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, llvm::Metadata **a3)
{
  unsigned __int8 *v5;
  llvm::raw_ostream *v6;
  llvm::Metadata *result;
  _anonymous_namespace_::TypePrinting *v8;
  _BYTE *v9;

  v5 = *a2;
  if (!*a2)
  {
LABEL_5:
    result = *a3;
    if (*a3)
      goto LABEL_9;
    return result;
  }
  v6 = *a1;
  if (v5[16] >= 0x1Cu)
    llvm::Value::print((llvm::Value *)v5, v6, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
  llvm::Value::printAsOperand((Type **)v5, v6, 1, a1 + 2);
  v8 = *a1;
  v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v8, 10);
    goto LABEL_5;
  }
  *((_QWORD *)v8 + 4) = v9 + 1;
  *v9 = 10;
  result = *a3;
  if (*a3)
LABEL_9:
    llvm::Metadata::print(result, *a1, (llvm::ModuleSlotTracker *)(a1 + 2), a1[1]);
  return result;
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::GlobalValue,llvm::MDNode const*>(llvm::raw_ostream **a1, llvm::Value *this, llvm::Metadata **a3)
{
  unsigned int v6;
  llvm::raw_ostream *v7;
  llvm::ModuleSlotTracker *v8;
  llvm::Metadata *result;
  llvm::raw_ostream *v10;
  _BYTE *v11;

  v6 = *((unsigned __int8 *)this + 16);
  v8 = (llvm::ModuleSlotTracker *)(a1 + 2);
  v7 = *a1;
  if (v6 >= 0x1C)
    llvm::Value::print(this, v7, v8, 0);
  llvm::Value::printAsOperand((Type **)this, v7, 1, (_anonymous_namespace_::TypePrinting **)v8);
  v10 = *a1;
  v11 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v10, 10);
    result = *a3;
    if (*a3)
      goto LABEL_7;
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 10;
    result = *a3;
    if (*a3)
LABEL_7:
      llvm::Metadata::print(result, *a1, v8, a1[1]);
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, llvm::raw_ostream **a3)
{
  unsigned __int8 *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *result;
  _anonymous_namespace_::TypePrinting *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;

  v5 = *a2;
  if (*a2)
  {
    v6 = *a1;
    if (v5[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v5, v6, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v5, v6, 1, a1 + 2);
    v8 = *a1;
    v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v9 < *((_QWORD *)*a1 + 3))
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 10;
      result = *a3;
      if (!*a3)
        return result;
      goto LABEL_9;
    }
    llvm::raw_ostream::write(v8, 10);
  }
  result = *a3;
  if (!*a3)
    return result;
LABEL_9:
  v10 = *a1;
  if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
    llvm::Value::print(result, v10, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
  llvm::Value::printAsOperand((Type **)result, v10, 1, a1 + 2);
  result = *a1;
  v11 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)*a1 + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v11 + 1;
  *v11 = 10;
  return result;
}

const llvm::Module **llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(const llvm::Module **result, llvm::Twine *this, const llvm::Module ***a3)
{
  const llvm::Module **v3;
  llvm::raw_ostream *v4;
  _BYTE *v6;
  llvm::raw_ostream *v7;

  v3 = result;
  v4 = *result;
  if (!*result)
  {
    *((_BYTE *)result + 192) = 1;
    return result;
  }
  result = (const llvm::Module **)llvm::Twine::print(this, v4);
  v6 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v4 + 3))
  {
    result = (const llvm::Module **)llvm::raw_ostream::write(v4, 10);
    v7 = *v3;
    *((_BYTE *)v3 + 192) = 1;
    if (!v7)
      return result;
  }
  else
  {
    *((_QWORD *)v4 + 4) = v6 + 1;
    *v6 = 10;
    v7 = *v3;
    *((_BYTE *)v3 + 192) = 1;
    if (!v7)
      return result;
  }
  result = *a3;
  if (*a3)
    llvm::Metadata::print((llvm::Metadata *)result, v7, (llvm::ModuleSlotTracker *)(v3 + 2), v3[1]);
  return result;
}

BOOL isContiguous(const llvm::ConstantRange *this, const void **a2)
{
  const void **v4;
  const void **v6;

  v4 = (const void **)((char *)this + 16);
  if (*((_DWORD *)this + 6) > 0x40u)
  {
    if (llvm::APInt::equalSlowCase(v4, a2))
      return 1;
  }
  else if (*v4 == *a2)
  {
    return 1;
  }
  v6 = a2 + 2;
  if (*((_DWORD *)this + 2) > 0x40u)
    return llvm::APInt::equalSlowCase((const void **)this, v6);
  else
    return *(_QWORD *)this == (_QWORD)*v6;
}

char *llvm::SmallVectorImpl<llvm::Value const*>::insert<llvm::Value::user_iterator_impl<llvm::User const>,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = v9;
  if (*(_QWORD *)a1 + 8 * v9 != a2)
  {
    if (a3 == a4)
    {
      v11 = 0;
      v13 = *(unsigned int *)(a1 + 8);
      if (v9 > *(unsigned int *)(a1 + 12))
      {
LABEL_6:
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v13, 8);
        v7 = *(_QWORD *)a1;
        v9 = *(unsigned int *)(a1 + 8);
        v10 = *(_DWORD *)(a1 + 8);
      }
    }
    else
    {
      v11 = 0;
      v12 = a3;
      do
      {
        ++v11;
        v12 = *(_QWORD *)(v12 + 8);
      }
      while (v12 != a4);
      v13 = v11 + v9;
      if (v11 + v9 > *(unsigned int *)(a1 + 12))
        goto LABEL_6;
    }
    v14 = (char *)(v7 + 8 * v8);
    v15 = (char *)(v7 + 8 * v9);
    v16 = (v15 - v14) >> 3;
    if (v16 < v11)
    {
      v17 = v10 + v11;
      *(_DWORD *)(a1 + 8) = v17;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v17 - 8 * v16), (const void *)(v7 + 8 * v8), v15 - v14);
        v18 = (_QWORD *)(v7 + 8 * v8);
        do
        {
          *v18++ = *(_QWORD *)(v5 + 24);
          v5 = *(_QWORD *)(v5 + 8);
          --v16;
        }
        while (v16);
      }
      while (v5 != a4)
      {
        *(_QWORD *)v15 = *(_QWORD *)(v5 + 24);
        v15 += 8;
        v5 = *(_QWORD *)(v5 + 8);
      }
      return v14;
    }
    v23 = 8 * v11;
    v24 = v9 + ((uint64_t)(8 * v11) >> 3);
    v25 = v9;
    if (v24 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v24, 8);
      v25 = *(unsigned int *)(a1 + 8);
      v10 = *(_DWORD *)(a1 + 8);
    }
    v26 = &v15[-v23];
    if (!v11)
      goto LABEL_39;
    v27 = *(_QWORD *)a1;
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    v29 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v29 >= 0xF)
    {
      v31 = 8 * v25;
      v32 = v23 - (8 * v9 + v7) + 8 * v25 + v27;
      v30 = &v15[-v23];
      if (v32 >= 0x20)
      {
        v33 = v29 + 1;
        v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
        v28 = (_QWORD *)((char *)v28 + v34);
        v30 = &v26[v34];
        v35 = (__int128 *)(8 * v9 - v23 + v7 + 16);
        v36 = (_OWORD *)(v31 + v27 + 16);
        v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v38 = *v35;
          *(v36 - 1) = *(v35 - 1);
          *v36 = v38;
          v35 += 2;
          v36 += 2;
          v37 -= 4;
        }
        while (v37);
        if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_39;
      }
    }
    else
    {
      v30 = &v15[-v23];
    }
    do
    {
      v39 = *(_QWORD *)v30;
      v30 += 8;
      *v28++ = v39;
    }
    while (v30 != v15);
LABEL_39:
    *(_DWORD *)(a1 + 8) = v10 + v11;
    if (v26 != v14)
      memmove(&v14[v23], v14, &v15[-v23] - v14);
    if (v5 != a4)
    {
      v40 = v14;
      do
      {
        *(_QWORD *)v40 = *(_QWORD *)(v5 + 24);
        v40 += 8;
        v5 = *(_QWORD *)(v5 + 8);
      }
      while (v5 != a4);
    }
    return v14;
  }
  if (a3 == a4)
  {
    LODWORD(v19) = 0;
    v21 = *(unsigned int *)(a1 + 8);
    if (v9 <= *(unsigned int *)(a1 + 12))
      goto LABEL_20;
  }
  else
  {
    v19 = 0;
    v20 = a3;
    do
    {
      ++v19;
      v20 = *(_QWORD *)(v20 + 8);
    }
    while (v20 != a4);
    v21 = v19 + v9;
    if (v19 + v9 <= *(unsigned int *)(a1 + 12))
      goto LABEL_20;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v21, 8);
  v9 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a1;
  v10 = *(_DWORD *)(a1 + 8);
LABEL_20:
  if (v5 != a4)
  {
    v22 = (_QWORD *)(v7 + 8 * v9);
    do
    {
      *v22++ = *(_QWORD *)(v5 + 24);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != a4);
    v7 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 8) = v10 + v19;
  return (char *)(v7 + 8 * v8);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Instruction const*>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, uint64_t *a3, llvm::raw_ostream **a4)
{
  unsigned __int8 *v7;
  llvm::raw_ostream *v8;
  _anonymous_namespace_::TypePrinting *v9;
  _BYTE *v10;

  v7 = *a2;
  if (*a2)
  {
    v8 = *a1;
    if (v7[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v7, v8, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v7, v8, 1, a1 + 2);
    v9 = *a1;
    v10 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v9, 10);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::Module const*,llvm::Instruction const*>(a1, a3, a4);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Module const*,llvm::Instruction const*>(llvm::raw_ostream **a1, uint64_t *a2, llvm::raw_ostream **a3)
{
  uint64_t v5;
  llvm::raw_ostream *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  size_t v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v17;
  _BYTE *v18;

  v5 = *a2;
  v6 = *a1;
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0xDuLL)
  {
    qmemcpy(v7, "; ModuleID = '", 14);
    *((_QWORD *)v6 + 4) += 14;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, "; ModuleID = '", 0xEuLL);
  }
  v10 = *(const char **)(v5 + 160);
  v9 = v5 + 160;
  v8 = v10;
  v11 = *(char *)(v9 + 23);
  if (v11 >= 0)
    v12 = (const char *)v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(v9 + 23);
  else
    v13 = *(_QWORD *)(v9 + 8);
  v14 = llvm::raw_ostream::write(v6, v12, v13);
  v15 = (_WORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
  {
    *v15 = 2599;
    *((_QWORD *)v14 + 4) += 2;
    result = *a3;
    if (!*a3)
      return result;
  }
  else
  {
    llvm::raw_ostream::write(v14, "'\n", 2uLL);
    result = *a3;
    if (!*a3)
      return result;
  }
  v17 = *a1;
  if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
    llvm::Value::print(result, v17, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
  llvm::Value::printAsOperand((Type **)result, v17, 1, a1 + 2);
  result = *a1;
  v18 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)*a1 + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v18 + 1;
  *v18 = 10;
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Instruction const*,llvm::Function const*,llvm::Module const*>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, uint64_t *a3, unsigned __int8 **a4, unsigned __int8 **a5, uint64_t *a6)
{
  unsigned __int8 *v11;
  llvm::raw_ostream *v12;
  _anonymous_namespace_::TypePrinting *v13;
  _BYTE *v14;

  v11 = *a2;
  if (*a2)
  {
    v12 = *a1;
    if (v11[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v11, v12, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v11, v12, 1, a1 + 2);
    v13 = *a1;
    v14 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v14 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v13, 10);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v14 + 1;
      *v14 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::Module const*,llvm::Instruction const*,llvm::Function const*,llvm::Module const*>(a1, a3, a4, a5, a6);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Module const*,llvm::Instruction const*,llvm::Function const*,llvm::Module const*>(_anonymous_namespace_::TypePrinting **a1, uint64_t *a2, unsigned __int8 **a3, unsigned __int8 **a4, uint64_t *a5)
{
  uint64_t v9;
  llvm::raw_ostream *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  const char *v16;
  size_t v17;
  llvm::raw_ostream *v18;
  _WORD *v19;

  v9 = *a2;
  v10 = *a1;
  v11 = (void *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 0xDuLL)
  {
    qmemcpy(v11, "; ModuleID = '", 14);
    *((_QWORD *)v10 + 4) += 14;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v10, "; ModuleID = '", 0xEuLL);
  }
  v14 = *(const char **)(v9 + 160);
  v13 = v9 + 160;
  v12 = v14;
  v15 = *(char *)(v13 + 23);
  if (v15 >= 0)
    v16 = (const char *)v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = *(_QWORD *)(v13 + 8);
  v18 = llvm::raw_ostream::write(v10, v16, v17);
  v19 = (_WORD *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
  {
    *v19 = 2599;
    *((_QWORD *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "'\n", 2uLL);
  }
  return llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::Function const*,llvm::Module const*>(a1, a3, a4, a5);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::Function const*,llvm::Module const*>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t *a4)
{
  unsigned __int8 *v7;
  llvm::raw_ostream *v8;
  _anonymous_namespace_::TypePrinting *v9;
  _BYTE *v10;

  v7 = *a2;
  if (*a2)
  {
    v8 = *a1;
    if (v7[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v7, v8, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v7, v8, 1, a1 + 2);
    v9 = *a1;
    v10 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v9, 10);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Module const*>(a1, a3, a4);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Module const*>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  _anonymous_namespace_::TypePrinting *v8;
  void *v9;
  _anonymous_namespace_::TypePrinting *v10;
  _BYTE *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  const char *v16;
  size_t v17;
  llvm::raw_ostream *result;
  _WORD *v19;

  v5 = *a2;
  if (*a2)
  {
    v6 = *a1;
    if (v5[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v5, v6, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v5, v6, 1, a1 + 2);
    v10 = *a1;
    v11 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v11 < *((_QWORD *)*a1 + 3))
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 10;
      v7 = *a3;
      v8 = *a1;
      v9 = (void *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v9 > 0xDuLL)
        goto LABEL_9;
LABEL_6:
      v8 = llvm::raw_ostream::write(v8, "; ModuleID = '", 0xEuLL);
      goto LABEL_10;
    }
    llvm::raw_ostream::write(v10, 10);
  }
  v7 = *a3;
  v8 = *a1;
  v9 = (void *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v9 <= 0xDuLL)
    goto LABEL_6;
LABEL_9:
  qmemcpy(v9, "; ModuleID = '", 14);
  *((_QWORD *)v8 + 4) += 14;
LABEL_10:
  v14 = *(const char **)(v7 + 160);
  v13 = v7 + 160;
  v12 = v14;
  v15 = *(char *)(v13 + 23);
  if (v15 >= 0)
    v16 = (const char *)v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = *(_QWORD *)(v13 + 8);
  result = llvm::raw_ostream::write(v8, v16, v17);
  v19 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v19 <= 1uLL)
    return llvm::raw_ostream::write(result, "'\n", 2uLL);
  *v19 = 2599;
  *((_QWORD *)result + 4) += 2;
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Function const*,llvm::Module const*>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5)
{
  unsigned __int8 *v9;
  llvm::raw_ostream *v10;
  _anonymous_namespace_::TypePrinting *v11;
  _BYTE *v12;

  v9 = *a2;
  if (*a2)
  {
    v10 = *a1;
    if (v9[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v9, v10, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v9, v10, 1, a1 + 2);
    v11 = *a1;
    v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v11, 10);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::Module const*,llvm::Function const*,llvm::Module const*>(a1, a3, a4, a5);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Module const*,llvm::Function const*,llvm::Module const*>(_anonymous_namespace_::TypePrinting **a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4)
{
  uint64_t v7;
  llvm::raw_ostream *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  int v13;
  const char *v14;
  size_t v15;
  llvm::raw_ostream *v16;
  _WORD *v17;

  v7 = *a2;
  v8 = *a1;
  v9 = (void *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 0xDuLL)
  {
    qmemcpy(v9, "; ModuleID = '", 14);
    *((_QWORD *)v8 + 4) += 14;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, "; ModuleID = '", 0xEuLL);
  }
  v12 = *(const char **)(v7 + 160);
  v11 = v7 + 160;
  v10 = v12;
  v13 = *(char *)(v11 + 23);
  if (v13 >= 0)
    v14 = (const char *)v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = *(_QWORD *)(v11 + 8);
  v16 = llvm::raw_ostream::write(v8, v14, v15);
  v17 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 1uLL)
  {
    *v17 = 2599;
    *((_QWORD *)v16 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v16, "'\n", 2uLL);
  }
  return llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Module const*>(a1, a3, a4);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::FunctionType *>(llvm::raw_ostream **a1, llvm::raw_ostream **a2, Type **a3)
{
  llvm::raw_ostream *result;
  llvm::raw_ostream *v6;
  Type *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;

  result = *a2;
  if (!*a2)
  {
LABEL_5:
    v7 = *a3;
    if (!v7)
      return result;
LABEL_6:
    v8 = *a1;
    v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v9 < *((_QWORD *)*a1 + 3))
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 32;
      llvm::Type::print(v7, v8, 0, 0);
    }
    v11 = llvm::raw_ostream::write(*a1, 32);
    llvm::Type::print(v7, v11, 0, 0);
  }
  v6 = *a1;
  if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
    llvm::Value::print(result, v6, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
  llvm::Value::printAsOperand((Type **)result, v6, 1, a1 + 2);
  result = *a1;
  v10 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v10 >= *((_QWORD *)*a1 + 3))
  {
    result = llvm::raw_ostream::write(result, 10);
    goto LABEL_5;
  }
  *((_QWORD *)result + 4) = v10 + 1;
  *v10 = 10;
  v7 = *a3;
  if (v7)
    goto LABEL_6;
  return result;
}

void `anonymous namespace'::Verifier::verifyParameterAttrs(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *a4)
{
  std::string::size_type *v6;
  uint64_t v7;
  std::string::size_type *v8;
  int v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  int hasAttribute;
  int v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int KindAsEnum;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  unsigned __int16 Alignment;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t PreallocatedType;
  const char *v34;
  uint64_t ValueAsInt;
  std::string v36;
  __int16 v37;
  std::string *Attribute;
  std::string *v39;
  uint64_t v40;
  int v41;
  _WORD v42[16];
  std::string v43;
  uint64_t v44;
  void *__p[2];
  _QWORD v46[4];
  std::string v47;
  llvm::raw_ostream *v48;
  uint64_t v49;

  v48 = a4;
  v49 = a2;
  if (!a2)
    return;
  v6 = (std::string::size_type *)llvm::AttributeSet::begin((llvm::AttributeSet *)&v49);
  v7 = llvm::AttributeSet::end((llvm::AttributeSet *)&v49);
  if (v6 == (std::string::size_type *)v7)
  {
LABEL_11:
    if (llvm::AttributeSet::hasAttribute(&v49, 11)
      && llvm::AttributeSet::getNumAttributes((llvm::AttributeSet *)&v49) != 1)
    {
      v19 = "Attribute 'immarg' is incompatible with other attributes";
      goto LABEL_25;
    }
    hasAttribute = llvm::AttributeSet::hasAttribute(&v49, 73);
    v15 = llvm::AttributeSet::hasAttribute(&v49, 75) + hasAttribute;
    v16 = v15 + llvm::AttributeSet::hasAttribute(&v49, 76);
    if ((llvm::AttributeSet::hasAttribute(&v49, 77) & 1) != 0)
      v17 = 1;
    else
      v17 = llvm::AttributeSet::hasAttribute(&v49, 12);
    v18 = v17 + llvm::AttributeSet::hasAttribute(&v49, 18);
    if (v16 + v18 + llvm::AttributeSet::hasAttribute(&v49, 72) >= 2)
    {
      v19 = "Attributes 'byval', 'inalloca', 'preallocated', 'inreg', 'nest', 'byref', and 'sret' are incompatible!";
      goto LABEL_25;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 75)
      && llvm::AttributeSet::hasAttribute(&v49, 47))
    {
      v19 = "Attributes 'inalloca and readonly' are incompatible!";
LABEL_25:
      Attribute = (std::string *)v19;
      v42[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)&Attribute, &v48);
      return;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 77)
      && llvm::AttributeSet::hasAttribute(&v49, 48))
    {
      v19 = "Attributes 'sret and returned' are incompatible!";
      goto LABEL_25;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 71)
      && llvm::AttributeSet::hasAttribute(&v49, 50))
    {
      v19 = "Attributes 'zeroext and signext' are incompatible!";
      goto LABEL_25;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 46)
      && llvm::AttributeSet::hasAttribute(&v49, 47))
    {
      v19 = "Attributes 'readnone and readonly' are incompatible!";
      goto LABEL_25;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 46)
      && llvm::AttributeSet::hasAttribute(&v49, 70))
    {
      v19 = "Attributes 'readnone and writeonly' are incompatible!";
      goto LABEL_25;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 47)
      && llvm::AttributeSet::hasAttribute(&v49, 70))
    {
      v19 = "Attributes 'readonly and writeonly' are incompatible!";
      goto LABEL_25;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 27)
      && llvm::AttributeSet::hasAttribute(&v49, 3))
    {
      v19 = "Attributes 'noinline and alwaysinline' are incompatible!";
      goto LABEL_25;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 69)
      && llvm::AttributeSet::hasAttribute(&v49, 46))
    {
      v19 = "Attributes writable and readnone are incompatible!";
      goto LABEL_25;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 69)
      && llvm::AttributeSet::hasAttribute(&v49, 47))
    {
      v19 = "Attributes writable and readonly are incompatible!";
      goto LABEL_25;
    }
    llvm::AttributeFuncs::typeIncompatible(a3, 3, (uint64_t *)__p);
    v20 = (uint64_t *)llvm::AttributeSet::begin((llvm::AttributeSet *)&v49);
    v21 = llvm::AttributeSet::end((llvm::AttributeSet *)&v49);
    if (v20 != (uint64_t *)v21)
    {
      v22 = (uint64_t *)v21;
      while (1)
      {
        v44 = *v20;
        if (!llvm::Attribute::isStringAttribute((llvm::Attribute *)&v44))
        {
          KindAsEnum = llvm::Attribute::getKindAsEnum((llvm::Attribute *)&v44);
          if (((*(unint64_t *)((char *)__p + (((unint64_t)KindAsEnum >> 3) & 0x1FFFFFF8)) >> KindAsEnum) & 1) != 0)
            break;
        }
        if (++v20 == v22)
          goto LABEL_59;
      }
      llvm::Attribute::getAsString((llvm::Attribute *)&v44, 0, (uint64_t)&v43);
      v24 = std::string::insert(&v43, 0, "Attribute '");
      v25 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = std::string::append(&v47, "' applied to incompatible type!");
      v27 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v42[0] = 260;
      Attribute = &v36;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)&Attribute, &v48);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v36.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_57:
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_87;
          goto LABEL_116;
        }
      }
      else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_57;
      }
      operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
LABEL_87:
        operator delete(v43.__r_.__value_.__l.__data_);
LABEL_116:
      std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)v46, (_QWORD *)v46[1]);
      return;
    }
LABEL_59:
    if (!a3 || *(_BYTE *)(a3 + 8) != 15)
    {
LABEL_110:
      if (!llvm::AttributeSet::hasAttribute(&v49, 84))
        goto LABEL_116;
      Attribute = (std::string *)llvm::AttributeSet::getAttribute(&v49, 84);
      ValueAsInt = llvm::Attribute::getValueAsInt((llvm::Attribute *)&Attribute);
      if (ValueAsInt)
      {
        if ((ValueAsInt & 0xFFFFFC00) == 0)
          goto LABEL_116;
        v29 = "Invalid value for 'nofpclass' test mask";
      }
      else
      {
        v29 = "Attribute 'nofpclass' must have at least one test bit set";
      }
LABEL_115:
      Attribute = (std::string *)v29;
      v42[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)&Attribute, &v48);
      goto LABEL_116;
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 73))
    {
      if (llvm::AttributeSet::hasAttribute(&v49, 78))
      {
        Alignment = llvm::AttributeSet::getAlignment((llvm::AttributeSet *)&v49);
        if (Alignment >= 0x100u && Alignment >= 0xFu)
        {
          v29 = "Attribute 'align' exceed the max size 2^14";
          goto LABEL_115;
        }
      }
      Attribute = (std::string *)v42;
      v39 = (std::string *)v42;
      v40 = 4;
      v41 = 0;
      v30 = llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v49);
      if ((llvm::Type::isSized(v30) & 1) == 0)
      {
        v34 = "Attribute 'byval' does not support unsized types!";
        goto LABEL_95;
      }
      if (v39 != Attribute)
        free(v39);
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 72))
    {
      Attribute = (std::string *)v42;
      v39 = (std::string *)v42;
      v40 = 4;
      v41 = 0;
      v31 = llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v49);
      if ((llvm::Type::isSized(v31) & 1) == 0)
      {
        v34 = "Attribute 'byref' does not support unsized types!";
        goto LABEL_95;
      }
      if (v39 != Attribute)
        free(v39);
    }
    if (llvm::AttributeSet::hasAttribute(&v49, 75))
    {
      Attribute = (std::string *)v42;
      v39 = (std::string *)v42;
      v40 = 4;
      v41 = 0;
      v32 = llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v49);
      if ((llvm::Type::isSized(v32) & 1) == 0)
      {
        v34 = "Attribute 'inalloca' does not support unsized types!";
        goto LABEL_95;
      }
      if (v39 != Attribute)
        free(v39);
    }
    if (!llvm::AttributeSet::hasAttribute(&v49, 76))
      goto LABEL_81;
    Attribute = (std::string *)v42;
    v39 = (std::string *)v42;
    v40 = 4;
    v41 = 0;
    PreallocatedType = llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v49);
    if ((llvm::Type::isSized(PreallocatedType) & 1) != 0)
    {
      if (v39 != Attribute)
        free(v39);
LABEL_81:
      if (*(_QWORD *)(a3 + 24))
      {
        if (*(_BYTE *)(**(_QWORD **)(a3 + 16) + 8) != 15 && llvm::AttributeSet::hasAttribute(&v49, 66))
        {
          v29 = "Attribute 'swifterror' only applies to parameters with pointer to pointer type!";
          goto LABEL_115;
        }
        if (llvm::AttributeSet::hasAttribute(&v49, 72)
          && llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v49) != **(_QWORD **)(a3 + 16))
        {
          v29 = "Attribute 'byref' type does not match parameter!";
          goto LABEL_115;
        }
        if (llvm::AttributeSet::hasAttribute(&v49, 73)
          && llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v49)
          && llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v49) != **(_QWORD **)(a3 + 16))
        {
          v29 = "Attribute 'byval' type does not match parameter!";
          goto LABEL_115;
        }
        if (llvm::AttributeSet::hasAttribute(&v49, 76)
          && llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v49) != **(_QWORD **)(a3 + 16))
        {
          v29 = "Attribute 'preallocated' type does not match parameter!";
          goto LABEL_115;
        }
        if (llvm::AttributeSet::hasAttribute(&v49, 75)
          && llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v49) != **(_QWORD **)(a3 + 16))
        {
          v29 = "Attribute 'inalloca' type does not match parameter!";
          goto LABEL_115;
        }
        if (llvm::AttributeSet::hasAttribute(&v49, 74)
          && llvm::AttributeSet::getElementType((llvm::AttributeSet *)&v49) != **(_QWORD **)(a3 + 16))
        {
          v29 = "Attribute 'elementtype' type does not match parameter!";
          goto LABEL_115;
        }
      }
      goto LABEL_110;
    }
    v34 = "Attribute 'preallocated' does not support unsized types!";
LABEL_95:
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    v37 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)&v36, &v48);
    if (v39 != Attribute)
      free(v39);
    goto LABEL_116;
  }
  v8 = (std::string::size_type *)v7;
  while (1)
  {
    v43.__r_.__value_.__r.__words[0] = *v6;
    if (!llvm::Attribute::isStringAttribute((llvm::Attribute *)&v43))
    {
      v9 = llvm::Attribute::getKindAsEnum((llvm::Attribute *)&v43);
      if ((llvm::Attribute::canUseAsParamAttr(v9) & 1) == 0)
        break;
    }
    if (++v6 == v8)
      goto LABEL_11;
  }
  llvm::Attribute::getAsString((llvm::Attribute *)&v43, 0, (uint64_t)&v47);
  v10 = std::string::insert(&v47, 0, "Attribute '");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v36, "' does not apply to parameters");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v46[0] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v42[0] = 260;
  Attribute = (std::string *)__p;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)&Attribute, &v48);
  if (SHIBYTE(v46[0]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_37:
      operator delete(v47.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_37;
}

void `anonymous namespace'::Verifier::verifyAttributeTypes(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  _BOOL4 isIntAttribute;
  _QWORD *KindAsString;
  uint64_t v9;
  BOOL v10;
  _DWORD *ValueAsString;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  _QWORD *v47;
  uint64_t v48;
  _DWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  _QWORD *v56;
  uint64_t v57;
  _DWORD *v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  _BYTE *v64;
  _QWORD *v65;
  uint64_t v66;
  BOOL v67;
  _DWORD *v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  llvm::raw_ostream *v73;
  _BYTE *v74;
  _QWORD *v75;
  uint64_t v76;
  BOOL v77;
  _DWORD *v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  llvm::raw_ostream *v83;
  _BYTE *v84;
  _QWORD *v85;
  uint64_t v86;
  _DWORD *v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  llvm::raw_ostream *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  llvm::raw_ostream *v102;
  _BYTE *v103;
  std::string *v104;
  std::string::size_type v105;
  std::string *v106;
  std::string::size_type v107;
  std::string v108;
  std::string v109;
  void *__p[2];
  std::string::size_type v111;
  _QWORD v112[2];
  _DWORD *v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  llvm::raw_ostream *v117;
  _QWORD v118[2];

  v117 = a3;
  v118[0] = a2;
  v4 = (uint64_t *)llvm::AttributeSet::begin((llvm::AttributeSet *)v118);
  v5 = llvm::AttributeSet::end((llvm::AttributeSet *)v118);
  if (v4 == (uint64_t *)v5)
    return;
  v6 = (uint64_t *)v5;
  while (1)
  {
    v116 = *v4;
    if (!llvm::Attribute::isStringAttribute((llvm::Attribute *)&v116))
      break;
    KindAsString = (_QWORD *)llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v9 == 19)
    {
      v10 = *KindAsString == 0x662D786F72707061 && KindAsString[1] == 0x6D2D70662D636E75;
      if (v10 && *(_QWORD *)((char *)KindAsString + 11) == 0x6874616D2D70662DLL)
      {
        ValueAsString = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
        if (v13)
        {
          v14 = ValueAsString;
          v15 = v13;
          if (v13 == 5)
          {
            if (!memcmp(ValueAsString, "false", 5uLL))
              goto LABEL_26;
          }
          else if (v13 == 4 && *ValueAsString == 1702195828)
          {
            goto LABEL_26;
          }
          v112[0] = "invalid value for 'approx-func-fp-math' attribute: ";
          v113 = v14;
          v114 = v15;
          v115 = 1283;
          v16 = *(llvm::raw_ostream **)a1;
          if (*(_QWORD *)a1)
          {
            llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
            v17 = (_BYTE *)*((_QWORD *)v16 + 4);
            if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
            {
              llvm::raw_ostream::write(v16, 10);
            }
            else
            {
              *((_QWORD *)v16 + 4) = v17 + 1;
              *v17 = 10;
            }
          }
          *(_BYTE *)(a1 + 192) = 1;
        }
      }
    }
LABEL_26:
    v18 = llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v19 == 18)
    {
      v20 = *(_QWORD *)v18 == 0x6572702D7373656CLL && *(_QWORD *)(v18 + 8) == 0x6D70662D65736963;
      if (v20 && *(_WORD *)(v18 + 16) == 25697)
      {
        v22 = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
        if (v23)
        {
          v24 = v22;
          v25 = v23;
          if (v23 == 5)
          {
            if (!memcmp(v22, "false", 5uLL))
              goto LABEL_46;
          }
          else if (v23 == 4 && *v22 == 1702195828)
          {
            goto LABEL_46;
          }
          v112[0] = "invalid value for 'less-precise-fpmad' attribute: ";
          v113 = v24;
          v114 = v25;
          v115 = 1283;
          v26 = *(llvm::raw_ostream **)a1;
          if (*(_QWORD *)a1)
          {
            llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
            v27 = (_BYTE *)*((_QWORD *)v26 + 4);
            if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
            {
              llvm::raw_ostream::write(v26, 10);
            }
            else
            {
              *((_QWORD *)v26 + 4) = v27 + 1;
              *v27 = 10;
            }
          }
          *(_BYTE *)(a1 + 192) = 1;
        }
      }
    }
LABEL_46:
    v28 = (_QWORD *)llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v29 == 15 && *v28 == 0x2D73666E692D6F6ELL && *(_QWORD *)((char *)v28 + 7) == 0x6874616D2D70662DLL)
    {
      v31 = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
      if (v32)
      {
        v33 = v31;
        v34 = v32;
        if (v32 == 5)
        {
          if (!memcmp(v31, "false", 5uLL))
            goto LABEL_63;
        }
        else if (v32 == 4 && *v31 == 1702195828)
        {
          goto LABEL_63;
        }
        v112[0] = "invalid value for 'no-infs-fp-math' attribute: ";
        v113 = v33;
        v114 = v34;
        v115 = 1283;
        v35 = *(llvm::raw_ostream **)a1;
        if (*(_QWORD *)a1)
        {
          llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
          v36 = (_BYTE *)*((_QWORD *)v35 + 4);
          if ((unint64_t)v36 >= *((_QWORD *)v35 + 3))
          {
            llvm::raw_ostream::write(v35, 10);
          }
          else
          {
            *((_QWORD *)v35 + 4) = v36 + 1;
            *v36 = 10;
          }
        }
        *(_BYTE *)(a1 + 192) = 1;
      }
    }
LABEL_63:
    v37 = (_QWORD *)llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v38 == 21)
    {
      v39 = *v37 == 0x6E696C6E692D6F6ELL && v37[1] == 0x742D656E696C2D65;
      if (v39 && *(_QWORD *)((char *)v37 + 13) == 0x73656C6261742D65)
      {
        v41 = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
        if (v42)
        {
          v43 = v41;
          v44 = v42;
          if (v42 == 5)
          {
            if (!memcmp(v41, "false", 5uLL))
              goto LABEL_83;
          }
          else if (v42 == 4 && *v41 == 1702195828)
          {
            goto LABEL_83;
          }
          v112[0] = "invalid value for 'no-inline-line-tables' attribute: ";
          v113 = v43;
          v114 = v44;
          v115 = 1283;
          v45 = *(llvm::raw_ostream **)a1;
          if (*(_QWORD *)a1)
          {
            llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
            v46 = (_BYTE *)*((_QWORD *)v45 + 4);
            if ((unint64_t)v46 >= *((_QWORD *)v45 + 3))
            {
              llvm::raw_ostream::write(v45, 10);
            }
            else
            {
              *((_QWORD *)v45 + 4) = v46 + 1;
              *v46 = 10;
            }
          }
          *(_BYTE *)(a1 + 192) = 1;
        }
      }
    }
LABEL_83:
    v47 = (_QWORD *)llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v48 == 14 && *v47 == 0x2D706D756A2D6F6ELL && *(_QWORD *)((char *)v47 + 6) == 0x73656C6261742D70)
    {
      v50 = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
      if (v51)
      {
        v52 = v50;
        v53 = v51;
        if (v51 == 5)
        {
          if (!memcmp(v50, "false", 5uLL))
            goto LABEL_100;
        }
        else if (v51 == 4 && *v50 == 1702195828)
        {
          goto LABEL_100;
        }
        v112[0] = "invalid value for 'no-jump-tables' attribute: ";
        v113 = v52;
        v114 = v53;
        v115 = 1283;
        v54 = *(llvm::raw_ostream **)a1;
        if (*(_QWORD *)a1)
        {
          llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
          v55 = (_BYTE *)*((_QWORD *)v54 + 4);
          if ((unint64_t)v55 >= *((_QWORD *)v54 + 3))
          {
            llvm::raw_ostream::write(v54, 10);
          }
          else
          {
            *((_QWORD *)v54 + 4) = v55 + 1;
            *v55 = 10;
          }
        }
        *(_BYTE *)(a1 + 192) = 1;
      }
    }
LABEL_100:
    v56 = (_QWORD *)llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v57 == 15 && *v56 == 0x2D736E616E2D6F6ELL && *(_QWORD *)((char *)v56 + 7) == 0x6874616D2D70662DLL)
    {
      v59 = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
      if (v60)
      {
        v61 = v59;
        v62 = v60;
        if (v60 == 5)
        {
          if (!memcmp(v59, "false", 5uLL))
            goto LABEL_117;
        }
        else if (v60 == 4 && *v59 == 1702195828)
        {
          goto LABEL_117;
        }
        v112[0] = "invalid value for 'no-nans-fp-math' attribute: ";
        v113 = v61;
        v114 = v62;
        v115 = 1283;
        v63 = *(llvm::raw_ostream **)a1;
        if (*(_QWORD *)a1)
        {
          llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
          v64 = (_BYTE *)*((_QWORD *)v63 + 4);
          if ((unint64_t)v64 >= *((_QWORD *)v63 + 3))
          {
            llvm::raw_ostream::write(v63, 10);
          }
          else
          {
            *((_QWORD *)v63 + 4) = v64 + 1;
            *v64 = 10;
          }
        }
        *(_BYTE *)(a1 + 192) = 1;
      }
    }
LABEL_117:
    v65 = (_QWORD *)llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v66 == 23)
    {
      v67 = *v65 == 0x656E6769732D6F6ELL && v65[1] == 0x2D736F72657A2D64;
      if (v67 && *(_QWORD *)((char *)v65 + 15) == 0x6874616D2D70662DLL)
      {
        v69 = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
        if (v70)
        {
          v71 = v69;
          v72 = v70;
          if (v70 == 5)
          {
            if (!memcmp(v69, "false", 5uLL))
              goto LABEL_137;
          }
          else if (v70 == 4 && *v69 == 1702195828)
          {
            goto LABEL_137;
          }
          v112[0] = "invalid value for 'no-signed-zeros-fp-math' attribute: ";
          v113 = v71;
          v114 = v72;
          v115 = 1283;
          v73 = *(llvm::raw_ostream **)a1;
          if (*(_QWORD *)a1)
          {
            llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
            v74 = (_BYTE *)*((_QWORD *)v73 + 4);
            if ((unint64_t)v74 >= *((_QWORD *)v73 + 3))
            {
              llvm::raw_ostream::write(v73, 10);
            }
            else
            {
              *((_QWORD *)v73 + 4) = v74 + 1;
              *v74 = 10;
            }
          }
          *(_BYTE *)(a1 + 192) = 1;
        }
      }
    }
LABEL_137:
    v75 = (_QWORD *)llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v76 == 23)
    {
      v77 = *v75 == 0x2D656C69666F7270 && v75[1] == 0x612D656C706D6173;
      if (v77 && *(_QWORD *)((char *)v75 + 15) == 0x6574617275636361)
      {
        v79 = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
        if (v80)
        {
          v81 = v79;
          v82 = v80;
          if (v80 == 5)
          {
            if (!memcmp(v79, "false", 5uLL))
              goto LABEL_157;
          }
          else if (v80 == 4 && *v79 == 1702195828)
          {
            goto LABEL_157;
          }
          v112[0] = "invalid value for 'profile-sample-accurate' attribute: ";
          v113 = v81;
          v114 = v82;
          v115 = 1283;
          v83 = *(llvm::raw_ostream **)a1;
          if (*(_QWORD *)a1)
          {
            llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
            v84 = (_BYTE *)*((_QWORD *)v83 + 4);
            if ((unint64_t)v84 >= *((_QWORD *)v83 + 3))
            {
              llvm::raw_ostream::write(v83, 10);
            }
            else
            {
              *((_QWORD *)v83 + 4) = v84 + 1;
              *v84 = 10;
            }
          }
          *(_BYTE *)(a1 + 192) = 1;
        }
      }
    }
LABEL_157:
    v85 = (_QWORD *)llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v86 == 14 && *v85 == 0x662D656661736E75 && *(_QWORD *)((char *)v85 + 6) == 0x6874616D2D70662DLL)
    {
      v88 = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
      if (v89)
      {
        v90 = v88;
        v91 = v89;
        if (v89 == 5)
        {
          if (memcmp(v88, "false", 5uLL))
            goto LABEL_169;
        }
        else if (v89 != 4 || *v88 != 1702195828)
        {
LABEL_169:
          v112[0] = "invalid value for 'unsafe-fp-math' attribute: ";
          v113 = v90;
          v114 = v91;
          v115 = 1283;
          v92 = *(llvm::raw_ostream **)a1;
          if (*(_QWORD *)a1)
          {
            llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
            v93 = (_BYTE *)*((_QWORD *)v92 + 4);
            if ((unint64_t)v93 >= *((_QWORD *)v92 + 3))
            {
              llvm::raw_ostream::write(v92, 10);
            }
            else
            {
              *((_QWORD *)v92 + 4) = v93 + 1;
              *v93 = 10;
            }
          }
          *(_BYTE *)(a1 + 192) = 1;
        }
      }
    }
    v94 = llvm::Attribute::getKindAsString((llvm::Attribute *)&v116);
    if (v95 != 18)
      goto LABEL_4;
    v96 = *(_QWORD *)v94 == 0x706D61732D657375 && *(_QWORD *)(v94 + 8) == 0x69666F72702D656CLL;
    if (!v96 || *(_WORD *)(v94 + 16) != 25964)
      goto LABEL_4;
    v98 = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v116);
    if (!v99)
      goto LABEL_4;
    v100 = v98;
    v101 = v99;
    if (v99 == 5)
    {
      if (!memcmp(v98, "false", 5uLL))
        goto LABEL_4;
    }
    else if (v99 == 4 && *v98 == 1702195828)
    {
      goto LABEL_4;
    }
    v112[0] = "invalid value for 'use-sample-profile' attribute: ";
    v113 = v100;
    v114 = v101;
    v115 = 1283;
    v102 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      llvm::Twine::print((llvm::Twine *)v112, *(llvm::raw_ostream **)a1);
      v103 = (_BYTE *)*((_QWORD *)v102 + 4);
      if ((unint64_t)v103 >= *((_QWORD *)v102 + 3))
      {
        llvm::raw_ostream::write(v102, 10);
        *(_BYTE *)(a1 + 192) = 1;
        goto LABEL_4;
      }
      *((_QWORD *)v102 + 4) = v103 + 1;
      *v103 = 10;
    }
    *(_BYTE *)(a1 + 192) = 1;
LABEL_4:
    if (++v4 == v6)
      return;
  }
  isIntAttribute = llvm::Attribute::isIntAttribute((llvm::Attribute *)&v116);
  if (isIntAttribute == llvm::Attribute::getKindAsEnum((llvm::Attribute *)&v116) - 78 < 0xA)
    goto LABEL_4;
  llvm::Attribute::getAsString((llvm::Attribute *)&v116, 0, (uint64_t)&v108);
  v104 = std::string::insert(&v108, 0, "Attribute '");
  v105 = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v109.__r_.__value_.__r.__words[2] = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  v106 = std::string::append(&v109, "' should have an Argument");
  v107 = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v111 = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  v115 = 260;
  v112[0] = __p;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)a1, (llvm::Twine *)v112, &v117);
  if (SHIBYTE(v111) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_199;
LABEL_196:
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
LABEL_200:
      operator delete(v108.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_196;
LABEL_199:
    operator delete(v109.__r_.__value_.__l.__data_);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_200;
  }
}

uint64_t `anonymous namespace'::Verifier::verifyFunctionAttrs(llvm::FunctionType *,llvm::AttributeList,llvm::Value const*,BOOL,BOOL)::$_1::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  llvm::raw_ostream *v5;
  uint64_t v6;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  _QWORD v13[4];
  __int16 v14;

  v5 = (llvm::raw_ostream *)a1[1];
  v6 = **a1;
  if (*(_DWORD *)(v6 + 12) - 1 <= a4)
  {
    v12 = 1283;
    v9 = "'allocsize' ";
    v10 = a2;
    v11 = a3;
    v8 = " argument is out of bounds";
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * (a4 + 1)) + 8) == 13)
      return 1;
    v12 = 1283;
    v9 = "'allocsize' ";
    v10 = a2;
    v11 = a3;
    v8 = " argument must refer to an integer parameter";
  }
  v13[0] = &v9;
  v13[2] = v8;
  v14 = 770;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v5, (llvm::Twine *)v13, (llvm::raw_ostream **)a1[2]);
  return 0;
}

uint64_t `anonymous namespace'::Verifier::checkUnsignedBaseTenFuncAttr(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::raw_ostream *a5)
{
  uint64_t result;
  unsigned __int8 *ValueAsString;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  unint64_t v16[4];
  __int16 v17;
  llvm::raw_ostream *v18;
  uint64_t v19;

  v18 = a5;
  v19 = a2;
  result = llvm::AttributeList::hasFnAttr(&v19, a3, a4);
  if ((_DWORD)result)
  {
    v16[0] = llvm::AttributeList::getAttributeAtIndex(&v19, -1, a3, a4);
    ValueAsString = (unsigned __int8 *)llvm::Attribute::getValueAsString((llvm::Attribute *)v16);
    v11 = v10;
    v16[0] = 0;
    result = llvm::getAsUnsignedInteger(ValueAsString, v10, 0xAu, v16);
    if ((result & 1) != 0 || HIDWORD(v16[0]))
    {
      v13 = 1283;
      v12[0] = "\"";
      v12[2] = a3;
      v12[3] = a4;
      v14[0] = v12;
      v14[2] = "\" takes an unsigned integer: ";
      v15 = 770;
      v16[0] = (unint64_t)v14;
      v16[2] = (unint64_t)ValueAsString;
      v16[3] = v11;
      v17 = 1282;
      return (uint64_t)llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)v16, &v18);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::AttributeList *,llvm::Value const*>(llvm::raw_ostream **a1, llvm::AttributeList **a2, llvm::raw_ostream **a3)
{
  llvm::raw_ostream *result;
  llvm::raw_ostream *v6;
  _BYTE *v7;

  if (*a2)
    llvm::AttributeList::print(*a2, *a1);
  result = *a3;
  if (*a3)
  {
    v6 = *a1;
    if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
      llvm::Value::print(result, v6, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)result, v6, 1, a1 + 2);
    result = *a1;
    v7 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)*a1 + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v7 + 1;
      *v7 = 10;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::AttributeSet const*,llvm::Value const*>(_anonymous_namespace_::TypePrinting **a1, llvm::AttributeSetNode ***a2, llvm::raw_ostream **a3)
{
  llvm::raw_ostream *v5;
  void **v6;
  size_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  void *__p[2];
  unsigned __int8 v14;

  if (*a2)
  {
    v5 = *a1;
    llvm::AttributeSet::getAsString(*a2, 0, (uint64_t)__p);
    if ((v14 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v7 = v14;
    else
      v7 = (size_t)__p[1];
    v8 = llvm::raw_ostream::write(v5, (const char *)v6, v7);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 10);
      if (((char)v14 & 0x80000000) == 0)
        goto LABEL_13;
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 10;
      if (((char)v14 & 0x80000000) == 0)
        goto LABEL_13;
    }
    operator delete(__p[0]);
  }
LABEL_13:
  result = *a3;
  if (*a3)
  {
    v11 = *a1;
    if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
      llvm::Value::print(result, v11, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)result, v11, 1, a1 + 2);
    result = *a1;
    v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v12 + 1;
      *v12 = 10;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Attribute const*,llvm::Value const*>(_anonymous_namespace_::TypePrinting **a1, llvm::Attribute **a2, llvm::raw_ostream **a3)
{
  llvm::raw_ostream *v5;
  void **v6;
  size_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  void *__p[2];
  unsigned __int8 v14;

  if (*a2)
  {
    v5 = *a1;
    llvm::Attribute::getAsString(*a2, 0, (uint64_t)__p);
    if ((v14 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v7 = v14;
    else
      v7 = (size_t)__p[1];
    v8 = llvm::raw_ostream::write(v5, (const char *)v6, v7);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 10);
      if (((char)v14 & 0x80000000) == 0)
        goto LABEL_13;
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 10;
      if (((char)v14 & 0x80000000) == 0)
        goto LABEL_13;
    }
    operator delete(__p[0]);
  }
LABEL_13:
  result = *a3;
  if (*a3)
  {
    v11 = *a1;
    if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
      llvm::Value::print(result, v11, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)result, v11, 1, a1 + 2);
    result = *a1;
    v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v12 + 1;
      *v12 = 10;
    }
  }
  return result;
}

unint64_t llvm::CallBase::getNumOperandBundles(llvm::CallBase *this)
{
  char *Descriptor;
  char *v4;
  char *v5;
  uint64_t v6;

  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    return 0;
  Descriptor = llvm::User::getDescriptor(this);
  v4 = Descriptor;
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    return (unint64_t)-(uint64_t)Descriptor >> 4;
  v5 = llvm::User::getDescriptor(this);
  return (unint64_t)(&v5[v6] - v4) >> 4;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Value const*,llvm::CallBase>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, llvm::Value *this)
{
  unsigned __int8 *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::ModuleSlotTracker *v8;
  llvm::Value *v9;
  llvm::raw_ostream *result;
  _anonymous_namespace_::TypePrinting *v11;
  _BYTE *v12;
  _BYTE *v13;

  v5 = *a2;
  if (!*a2)
  {
LABEL_5:
    v8 = (llvm::ModuleSlotTracker *)(a1 + 2);
    v7 = *a1;
    v9 = this;
    if (*((unsigned __int8 *)this + 16) < 0x1Cu)
      goto LABEL_10;
LABEL_6:
    llvm::Value::print(v9, v7, v8, 0);
  }
  v6 = *a1;
  if (v5[16] >= 0x1Cu)
    llvm::Value::print((llvm::Value *)v5, v6, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
  llvm::Value::printAsOperand((Type **)v5, v6, 1, a1 + 2);
  v11 = *a1;
  v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v11, 10);
    goto LABEL_5;
  }
  *((_QWORD *)v11 + 4) = v12 + 1;
  *v12 = 10;
  v8 = (llvm::ModuleSlotTracker *)(a1 + 2);
  v7 = *a1;
  v9 = this;
  if (*((unsigned __int8 *)this + 16) >= 0x1Cu)
    goto LABEL_6;
LABEL_10:
  llvm::Value::printAsOperand((Type **)v9, v7, 1, (_anonymous_namespace_::TypePrinting **)v8);
  result = *a1;
  v13 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)*a1 + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v13 + 1;
  *v13 = 10;
  return result;
}

void llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::shrink_and_clear(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  int v9;
  uint64_t v10;
  llvm *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  _QWORD *v16;
  uint64_t v17;
  llvm *v18;

  v2 = a1[4];
  v3 = a1[2];
  v4 = (void *)(16 * v2);
  if ((_DWORD)v2)
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
    v6 = 16 * v2;
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v7 = *v5;
        if ((*v5 & 4) != 0)
        {
          v8 = (void **)(v7 & 0xFFFFFFFFFFFFFFF8);
          if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v8 != v8 + 2)
              free(*v8);
            operator delete(v8);
          }
        }
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  if (!v3)
  {
    if (!a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
LABEL_21:
    llvm::deallocate_buffer(*(llvm **)a1, v4);
  }
  v9 = 1 << (33 - __clz(v3 - 1));
  if (v9 <= 64)
    v10 = 64;
  else
    v10 = v9;
  if ((_DWORD)v10 != a1[4])
    goto LABEL_21;
  *((_QWORD *)a1 + 1) = 0;
  v11 = *(llvm **)a1;
  v12 = (v10 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (!v12)
  {
    v15 = *(llvm **)a1;
LABEL_24:
    v18 = (llvm *)((char *)v11 + 16 * v10);
    do
    {
      *(_QWORD *)v15 = -4096;
      v15 = (llvm *)((char *)v15 + 16);
    }
    while (v15 != v18);
    return;
  }
  v13 = v12 + 1;
  v14 = (v12 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v15 = (llvm *)((char *)v11 + 16 * v14);
  v16 = (_QWORD *)((char *)v11 + 16);
  v17 = v14;
  do
  {
    *(v16 - 2) = -4096;
    *v16 = -4096;
    v16 += 4;
    v17 -= 2;
  }
  while (v17);
  if (v13 != v14)
    goto LABEL_24;
}

_QWORD **llvm::VerifierSupport::DebugInfoCheckFailed(_QWORD **this, const llvm::Twine *a2)
{
  _BYTE *v2;
  llvm::raw_ostream *v3;
  _BYTE *v4;

  v2 = this;
  v3 = (llvm::raw_ostream *)*this;
  if (*this)
  {
    this = (_QWORD **)llvm::Twine::print(a2, v3);
    v4 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
    {
      this = (_QWORD **)llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v4 + 1;
      *v4 = 10;
    }
  }
  v2[192] |= v2[194];
  v2[193] = 1;
  return this;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDILocation(llvm::Metadata *result, llvm::Metadata *a2)
{
  llvm::Metadata *v2;
  char *v3;
  unint64_t v4;
  char *v5;
  llvm::Metadata *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::Metadata **v9;
  llvm::Metadata **v10;
  llvm::Metadata *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::Metadata *v15;
  llvm::Metadata *v16;
  _QWORD v17[4];
  __int16 v18;

  v2 = result;
  v3 = (char *)a2 - 16;
  v4 = *((_QWORD *)a2 - 2);
  if ((v4 & 2) == 0)
  {
    v5 = &v3[-8 * ((v4 >> 2) & 0xF)];
    v6 = *(llvm::Metadata **)v5;
    if (*(_QWORD *)v5 && *(unsigned __int8 *)v6 - 21 >= 0xFFFFFFFD)
    {
      if ((*((_QWORD *)a2 - 2) & 0x3C0) != 0x80)
        goto LABEL_19;
      goto LABEL_17;
    }
LABEL_8:
    v16 = a2;
    v17[0] = "location requires a valid scope";
    v18 = 259;
    v15 = v6;
    v7 = *(llvm::raw_ostream **)result;
    if (*(_QWORD *)result)
    {
      result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v17, *(llvm::raw_ostream **)result);
      v8 = (_BYTE *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
      {
        result = llvm::raw_ostream::write(v7, 10);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v8 + 1;
        *v8 = 10;
      }
    }
    *((_BYTE *)v2 + 192) |= *((_BYTE *)v2 + 194);
    *((_BYTE *)v2 + 193) = 1;
    if (!*(_QWORD *)v2)
      return result;
    v9 = &v16;
    v10 = &v15;
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v2, v9, v10);
  }
  v5 = (char *)*((_QWORD *)a2 - 4);
  v6 = *(llvm::Metadata **)v5;
  if (!*(_QWORD *)v5 || *(unsigned __int8 *)v6 - 21 <= 0xFFFFFFFC)
    goto LABEL_8;
  if (*((_DWORD *)a2 - 6) == 2)
  {
LABEL_17:
    v11 = (llvm::Metadata *)*((_QWORD *)v5 + 1);
    v16 = v11;
    if (!v11 || *(_BYTE *)v11 == 6)
      goto LABEL_19;
    v17[0] = "inlined-at should be a location";
    v18 = 259;
    v15 = a2;
    v13 = *(llvm::raw_ostream **)result;
    if (*(_QWORD *)result)
    {
      result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v17, *(llvm::raw_ostream **)result);
      v14 = (_BYTE *)*((_QWORD *)v13 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
      {
        result = llvm::raw_ostream::write(v13, 10);
      }
      else
      {
        *((_QWORD *)v13 + 4) = v14 + 1;
        *v14 = 10;
      }
    }
    *((_BYTE *)v2 + 192) |= *((_BYTE *)v2 + 194);
    *((_BYTE *)v2 + 193) = 1;
    if (!*(_QWORD *)v2)
      return result;
    v9 = &v15;
    v10 = &v16;
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v2, v9, v10);
  }
LABEL_19:
  if ((v4 & 2) != 0)
  {
    v12 = (_BYTE *)**((_QWORD **)a2 - 4);
    if (*v12 != 18)
      return result;
  }
  else
  {
    v12 = *(_BYTE **)&v3[-8 * ((v4 >> 2) & 0xF)];
    if (*v12 != 18)
      return result;
  }
  if ((v12[36] & 8) == 0)
  {
    v16 = a2;
    v17[0] = "scope points into the type hierarchy";
    v18 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(result, (llvm::Twine *)v17, &v16);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIExpression(_anonymous_namespace_::Verifier *this, const llvm::DIExpression *a2)
{
  llvm::Metadata *result;
  llvm::Metadata *v5;
  const char *v6;
  __int16 v7;

  result = (llvm::Metadata *)llvm::DIExpression::isValid(a2);
  if ((result & 1) == 0)
  {
    v5 = a2;
    v6 = "invalid expression";
    v7 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(this, (llvm::Twine *)&v6, &v5);
  }
  return result;
}

void `anonymous namespace'::Verifier::visitDIGlobalVariableExpression(uint64_t a1, llvm::Metadata *a2)
{
  unint64_t v4;
  _QWORD *v5;
  const llvm::DIVariable *v6;
  uint64_t *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::DIVariable **v10;
  llvm::DIVariable *v11;
  __int32 v12;
  __int32 v13;
  unsigned __int8 *SizeInBits;
  char v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  int8x16_t v18;
  char v19;
  llvm::Metadata *v20;
  _QWORD v21[4];
  __int16 v22;
  llvm::Metadata *v23;

  v5 = (_QWORD *)((char *)a2 - 16);
  v4 = *((_QWORD *)a2 - 2);
  if ((v4 & 2) == 0)
  {
    v6 = (const llvm::DIVariable *)v5[-((v4 >> 2) & 0xF)];
    if (v6)
      goto LABEL_3;
LABEL_7:
    v21[0] = "missing variable";
    v22 = 259;
    v8 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      llvm::Twine::print((llvm::Twine *)v21, *(llvm::raw_ostream **)a1);
      v9 = (_BYTE *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
      {
        llvm::raw_ostream::write(v8, 10);
      }
      else
      {
        *((_QWORD *)v8 + 4) = v9 + 1;
        *v9 = 10;
      }
    }
    *(_BYTE *)(a1 + 192) |= *(_BYTE *)(a1 + 194);
    *(_BYTE *)(a1 + 193) = 1;
    return;
  }
  v6 = (const llvm::DIVariable *)**((_QWORD **)a2 - 4);
  if (!v6)
    goto LABEL_7;
LABEL_3:
  if ((*v5 & 2) != 0)
  {
    v7 = *(uint64_t **)(*((_QWORD *)a2 - 4) + 8);
    if (!v7)
      return;
  }
  else
  {
    v7 = (uint64_t *)v5[-((*v5 >> 2) & 0xFLL) + 1];
    if (!v7)
      return;
  }
  if (!llvm::DIExpression::isValid((llvm::DIExpression *)v7))
  {
    v21[0] = "invalid expression";
    v22 = 259;
    v18.i64[0] = (uint64_t)v7;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>((llvm::Metadata *)a1, (llvm::Twine *)v21, (llvm::Metadata **)&v18);
  }
  llvm::DIExpression::getFragmentInfo(v7[2], v7[3], &v18);
  if (v19)
  {
    v10 = (*v5 & 2) != 0 ? (llvm::DIVariable **)*((_QWORD *)a2 - 4) : (llvm::DIVariable **)&v5[-((*v5 >> 2) & 0xFLL)];
    v11 = *v10;
    v12 = v18.i32[0];
    v13 = v18.i32[2];
    v23 = a2;
    SizeInBits = llvm::DIVariable::getSizeInBits(v11);
    if (v15)
    {
      if ((v13 + v12) <= (unint64_t)SizeInBits)
      {
        if (SizeInBits != (unsigned __int8 *)v12)
          return;
        v20 = v11;
        v21[0] = "fragment covers entire variable";
        v22 = 259;
        v16 = *(llvm::raw_ostream **)a1;
        if (!*(_QWORD *)a1)
          goto LABEL_28;
      }
      else
      {
        v20 = v11;
        v21[0] = "fragment is larger than or outside of variable";
        v22 = 259;
        v16 = *(llvm::raw_ostream **)a1;
        if (!*(_QWORD *)a1)
        {
LABEL_28:
          *(_BYTE *)(a1 + 192) |= *(_BYTE *)(a1 + 194);
          *(_BYTE *)(a1 + 193) = 1;
          if (*(_QWORD *)a1)
            llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v23, &v20);
          return;
        }
      }
      llvm::Twine::print((llvm::Twine *)v21, v16);
      v17 = (_BYTE *)*((_QWORD *)v16 + 4);
      if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
      {
        llvm::raw_ostream::write(v16, 10);
      }
      else
      {
        *((_QWORD *)v16 + 4) = v17 + 1;
        *v17 = 10;
      }
      goto LABEL_28;
    }
  }
}

llvm::Metadata *`anonymous namespace'::Verifier::visitGenericDINode(_anonymous_namespace_::Verifier *this, const llvm::GenericDINode *a2)
{
  llvm::Metadata *result;
  llvm::Metadata *v5;
  const char *v6;
  __int16 v7;

  result = (llvm::Metadata *)llvm::DINode::getTag(a2);
  if (!(_DWORD)result)
  {
    v5 = a2;
    v6 = "invalid tag";
    v7 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(this, (llvm::Twine *)&v6, &v5);
  }
  return result;
}

unint64_t `anonymous namespace'::Verifier::visitDISubrange(_anonymous_namespace_::Verifier *this, const llvm::DISubrange *a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  unsigned __int8 **v10;
  const char *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  unint64_t result;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v30;
  unsigned int v31;
  llvm::Metadata *v32;
  const char *v33;
  __int16 v34;

  if (llvm::DINode::getTag(a2) != 33)
  {
    v11 = "invalid tag";
LABEL_56:
    v32 = a2;
    v33 = v11;
    v34 = 259;
    return (unint64_t)llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(this, (llvm::Twine *)&v33, &v32);
  }
  v4 = *((_DWORD *)this + 201);
  v5 = v4 > 0x2D;
  v6 = (1 << v4) & 0x200C00004180;
  if (v5 || v6 == 0)
  {
    v19 = *((_QWORD *)a2 - 2);
    if ((v19 & 2) != 0)
    {
      v20 = (_QWORD *)*((_QWORD *)a2 - 4);
      if (*v20)
        goto LABEL_6;
    }
    else
    {
      v20 = (_QWORD *)((char *)a2 - 8 * ((v19 >> 2) & 0xF) - 16);
      if (*v20)
        goto LABEL_6;
    }
    if (!v20[2])
    {
      v11 = "Subrange must contain count or upperBound";
      goto LABEL_56;
    }
  }
LABEL_6:
  v9 = (unint64_t *)((char *)a2 - 16);
  v8 = *((_QWORD *)a2 - 2);
  if ((v8 & 2) != 0)
  {
    v10 = (unsigned __int8 **)*((_QWORD *)a2 - 4);
    if (!*v10)
      goto LABEL_18;
  }
  else
  {
    v10 = (unsigned __int8 **)&v9[-((v8 >> 2) & 0xF)];
    if (!*v10)
      goto LABEL_13;
  }
  if (v10[2])
  {
    v11 = "Subrange can have any one of count or upperBound";
    goto LABEL_56;
  }
LABEL_13:
  v12 = *v10;
  if (v12)
  {
    v13 = *v12;
    v5 = v13 > 0x1A;
    v14 = (1 << v13) & 0x6000082;
    if (v5 || v14 == 0)
    {
      v11 = "Count must be signed constant or DIVariable or DIExpression";
      goto LABEL_56;
    }
  }
LABEL_18:
  result = llvm::DISubrange::getCount(a2);
  if (result >= 8 && (result & 6) == 0)
  {
    v17 = result & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 32);
    if (v18 > 0x40)
    {
      if (**(uint64_t **)(v17 + 24) <= -2)
        goto LABEL_22;
    }
    else if ((uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v18) >> -(char)v18 <= -2)
    {
LABEL_22:
      v11 = "invalid subrange count";
      goto LABEL_56;
    }
  }
  v21 = *v9;
  if ((*v9 & 2) != 0)
  {
    v22 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 8);
    if (!v22)
      goto LABEL_35;
  }
  else
  {
    v22 = (unsigned __int8 *)v9[-((v21 >> 2) & 0xF) + 1];
    if (!v22)
      goto LABEL_35;
  }
  v23 = *v22;
  v5 = v23 > 0x1A;
  v24 = (1 << v23) & 0x6000082;
  if (v5 || v24 == 0)
  {
    v11 = "LowerBound must be signed constant or DIVariable or DIExpression";
    goto LABEL_56;
  }
LABEL_35:
  if ((v21 & 2) != 0)
  {
    v26 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 16);
    if (!v26)
      goto LABEL_43;
  }
  else
  {
    v26 = (unsigned __int8 *)*((_QWORD *)a2 - ((v21 >> 2) & 0xF));
    if (!v26)
      goto LABEL_43;
  }
  v27 = *v26;
  v5 = v27 > 0x1A;
  v28 = (1 << v27) & 0x6000082;
  if (v5 || v28 == 0)
  {
    v11 = "UpperBound must be signed constant or DIVariable or DIExpression";
    goto LABEL_56;
  }
LABEL_43:
  if ((v21 & 2) != 0)
  {
    v30 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 24);
    if (!v30)
      return result;
  }
  else
  {
    v30 = (unsigned __int8 *)v9[-((v21 >> 2) & 0xF) + 3];
    if (!v30)
      return result;
  }
  v31 = *v30;
  if (v31 > 0x1A || ((1 << v31) & 0x6000082) == 0)
  {
    v11 = "Stride must be signed constant or DIVariable or DIExpression";
    goto LABEL_56;
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIEnumerator(llvm::Metadata *a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  llvm::Metadata *v5;
  const char *v6;
  __int16 v7;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 40)
  {
    v5 = this;
    v6 = "invalid tag";
    v7 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v6, &v5);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIBasicType(llvm::Metadata *a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  llvm::Metadata *v5;
  const char *v6;
  __int16 v7;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 36)
  {
    result = (llvm::Metadata *)llvm::DINode::getTag(this);
    if ((_DWORD)result != 59)
    {
      result = (llvm::Metadata *)llvm::DINode::getTag(this);
      if ((_DWORD)result != 18)
      {
        v5 = this;
        v6 = "invalid tag";
        v7 = 259;
        return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v6, &v5);
      }
    }
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIDerivedType(uint64_t a1, const llvm::DIScope *a2)
{
  llvm::Metadata *result;
  _BYTE *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v9;
  int v10;
  llvm::Metadata *v11;
  int v12;
  BOOL v13;
  _BYTE *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  const char *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::Metadata **v24;
  llvm::Metadata **v25;
  _BYTE *v26;
  const llvm::DIScope *v27;
  llvm::Metadata *v28;
  _QWORD v29[4];
  __int16 v30;

  if (llvm::DINode::getTag(a2) != 22
    && llvm::DINode::getTag(a2) != 15
    && llvm::DINode::getTag(a2) != 31
    && llvm::DINode::getTag(a2) != 16
    && llvm::DINode::getTag(a2) != 66
    && llvm::DINode::getTag(a2) != 38
    && llvm::DINode::getTag(a2) != 75
    && llvm::DINode::getTag(a2) != 53
    && llvm::DINode::getTag(a2) != 55
    && llvm::DINode::getTag(a2) != 71
    && llvm::DINode::getTag(a2) != 17152
    && llvm::DINode::getTag(a2) != 13
    && (llvm::DINode::getTag(a2) != 52 || (*((_BYTE *)a2 + 21) & 0x10) == 0)
    && llvm::DINode::getTag(a2) != 28
    && llvm::DINode::getTag(a2) != 42
    && llvm::DINode::getTag(a2) != 32)
  {
    v20 = "invalid tag";
    goto LABEL_57;
  }
  result = (llvm::Metadata *)llvm::DINode::getTag(a2);
  if ((_DWORD)result == 31)
  {
    v5 = (char *)a2 - 16;
    v6 = *((_QWORD *)a2 - 2);
    if ((v6 & 2) != 0)
    {
      v7 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 32);
      if (!v7)
        goto LABEL_25;
    }
    else
    {
      v7 = *(unsigned __int8 **)&v5[-8 * ((v6 >> 2) & 0xF) + 32];
      if (!v7)
        goto LABEL_25;
    }
    v8 = *v7;
    if ((v8 - 12) >= 4 && v8 != 34)
    {
      v28 = a2;
      v29[0] = "invalid pointer to member type";
      v30 = 259;
      if ((v6 & 2) != 0)
      {
        v27 = *(const llvm::DIScope **)(*((_QWORD *)a2 - 4) + 32);
        v21 = *(llvm::raw_ostream **)a1;
        if (!*(_QWORD *)a1)
          goto LABEL_83;
      }
      else
      {
        v27 = *(const llvm::DIScope **)&v5[-8 * ((v6 >> 2) & 0xF) + 32];
        v21 = *(llvm::raw_ostream **)a1;
        if (!*(_QWORD *)a1)
          goto LABEL_83;
      }
      goto LABEL_80;
    }
  }
LABEL_25:
  result = (llvm::Metadata *)llvm::DINode::getTag(a2);
  if ((_DWORD)result != 32)
    goto LABEL_41;
  v9 = *((_QWORD *)a2 - 2);
  if ((v9 & 2) != 0)
  {
    result = *(llvm::Metadata **)(*((_QWORD *)a2 - 4) + 24);
    v28 = result;
    if (!result)
      goto LABEL_41;
  }
  else
  {
    result = (llvm::Metadata *)((_QWORD *)a2 - ((v9 >> 2) & 0xF))[1];
    v28 = result;
    if (!result)
      goto LABEL_41;
  }
  v10 = *(unsigned __int8 *)result;
  if (v10 == 12)
    v11 = result;
  else
    v11 = 0;
  if (v10 != 14 || (result = (llvm::Metadata *)llvm::DINode::getTag(result), (_DWORD)result != 4))
  {
    if (!v11 || ((v12 = *((_DWORD *)v11 + 10), (v12 - 5) >= 4) ? (v13 = v12 == 2) : (v13 = 1), !v13))
    {
      v29[0] = "invalid set base type";
      v30 = 259;
      v27 = a2;
      v22 = *(llvm::raw_ostream **)a1;
      if (*(_QWORD *)a1)
      {
        result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v29, *(llvm::raw_ostream **)a1);
        v23 = (_BYTE *)*((_QWORD *)v22 + 4);
        if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
        {
          result = llvm::raw_ostream::write(v22, 10);
        }
        else
        {
          *((_QWORD *)v22 + 4) = v23 + 1;
          *v23 = 10;
        }
      }
      *(_BYTE *)(a1 + 192) |= *(_BYTE *)(a1 + 194);
      *(_BYTE *)(a1 + 193) = 1;
      if (!*(_QWORD *)a1)
        return result;
      v24 = &v27;
      v25 = &v28;
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, v24, v25);
    }
  }
LABEL_41:
  v14 = (char *)a2 - 16;
  v15 = *((_QWORD *)a2 - 2);
  if ((v15 & 2) != 0)
  {
    v16 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 8);
    if (!v16)
      goto LABEL_46;
  }
  else
  {
    v16 = *(unsigned __int8 **)&v14[-8 * ((v15 >> 2) & 0xF) + 8];
    if (!v16)
      goto LABEL_46;
  }
  v17 = *v16;
  if ((v17 - 12) >= 0xB && (v17 - 33) >= 2)
  {
    v28 = a2;
    v29[0] = "invalid scope";
    v30 = 259;
    if ((v15 & 2) != 0)
    {
      v27 = *(const llvm::DIScope **)(*((_QWORD *)a2 - 4) + 8);
      v21 = *(llvm::raw_ostream **)a1;
      if (*(_QWORD *)a1)
        goto LABEL_80;
    }
    else
    {
      v27 = *(const llvm::DIScope **)&v14[-8 * ((v15 >> 2) & 0xF) + 8];
      v21 = *(llvm::raw_ostream **)a1;
      if (*(_QWORD *)a1)
        goto LABEL_80;
    }
LABEL_83:
    *(_BYTE *)(a1 + 192) |= *(_BYTE *)(a1 + 194);
    *(_BYTE *)(a1 + 193) = 1;
    if (!*(_QWORD *)a1)
      return result;
    v24 = &v28;
    v25 = &v27;
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, v24, v25);
  }
LABEL_46:
  if ((v15 & 2) != 0)
  {
    v18 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 24);
    if (!v18)
      goto LABEL_52;
  }
  else
  {
    v18 = *(unsigned __int8 **)&v14[-8 * ((v15 >> 2) & 0xF) + 24];
    if (!v18)
      goto LABEL_52;
  }
  v19 = *v18;
  if ((v19 - 12) >= 4 && v19 != 34)
  {
    v28 = a2;
    v29[0] = "invalid base type";
    v30 = 259;
    if ((v15 & 2) != 0)
    {
      v27 = *(const llvm::DIScope **)(*((_QWORD *)a2 - 4) + 24);
      v21 = *(llvm::raw_ostream **)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_83;
    }
    else
    {
      v27 = *(const llvm::DIScope **)&v14[-8 * ((v15 >> 2) & 0xF) + 24];
      v21 = *(llvm::raw_ostream **)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_83;
    }
LABEL_80:
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v29, v21);
    v26 = (_BYTE *)*((_QWORD *)v21 + 4);
    if ((unint64_t)v26 >= *((_QWORD *)v21 + 3))
    {
      result = llvm::raw_ostream::write(v21, 10);
    }
    else
    {
      *((_QWORD *)v21 + 4) = v26 + 1;
      *v26 = 10;
    }
    goto LABEL_83;
  }
LABEL_52:
  if (*((_BYTE *)a2 + 44))
  {
    result = (llvm::Metadata *)llvm::DINode::getTag(a2);
    if ((_DWORD)result != 15)
    {
      result = (llvm::Metadata *)llvm::DINode::getTag(a2);
      if ((_DWORD)result != 16)
      {
        result = (llvm::Metadata *)llvm::DINode::getTag(a2);
        if ((_DWORD)result != 66)
        {
          v20 = "DWARF address space only applies to pointer or reference types";
LABEL_57:
          v28 = a2;
          v29[0] = v20;
          v30 = 259;
          return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>((llvm::Metadata *)a1, (llvm::Twine *)v29, &v28);
        }
      }
    }
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDICompositeType(uint64_t a1, const llvm::DIScope *a2)
{
  llvm::Metadata *result;
  unint64_t v5;
  unint64_t *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t *v11;
  _BYTE *v12;
  llvm::Metadata *v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unint64_t *v18;
  const char *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  llvm::DINode **v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  const llvm::Metadata *v26;
  _BYTE *v27;
  unint64_t *v28;
  const char *v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  llvm::Metadata *v34;
  llvm::Metadata *v35;
  _QWORD v36[4];
  __int16 v37;

  result = (llvm::Metadata *)llvm::DINode::getTag(a2);
  if ((_DWORD)result != 1)
  {
    result = (llvm::Metadata *)llvm::DINode::getTag(a2);
    if ((_DWORD)result != 19)
    {
      result = (llvm::Metadata *)llvm::DINode::getTag(a2);
      if ((_DWORD)result != 23)
      {
        result = (llvm::Metadata *)llvm::DINode::getTag(a2);
        if ((_DWORD)result != 4)
        {
          result = (llvm::Metadata *)llvm::DINode::getTag(a2);
          if ((_DWORD)result != 2)
          {
            result = (llvm::Metadata *)llvm::DINode::getTag(a2);
            if ((_DWORD)result != 51)
            {
              result = (llvm::Metadata *)llvm::DINode::getTag(a2);
              if ((_DWORD)result != 43)
              {
                v19 = "invalid tag";
                goto LABEL_73;
              }
            }
          }
        }
      }
    }
  }
  v6 = (unint64_t *)((char *)a2 - 16);
  v5 = *((_QWORD *)a2 - 2);
  if ((v5 & 2) != 0)
  {
    v7 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 8);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
    v7 = (unsigned __int8 *)v6[-((v5 >> 2) & 0xF) + 1];
    if (!v7)
      goto LABEL_13;
  }
  v8 = *v7;
  if ((v8 - 12) < 0xB || (v8 - 33) < 2)
  {
LABEL_13:
    if ((v5 & 2) != 0)
    {
      v9 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 24);
      if (!v9)
        goto LABEL_19;
    }
    else
    {
      v9 = (unsigned __int8 *)v6[-((v5 >> 2) & 0xF) + 3];
      if (!v9)
        goto LABEL_19;
    }
    v10 = *v9;
    if ((v10 - 12) >= 4 && v10 != 34)
    {
      v35 = a2;
      v36[0] = "invalid base type";
      v37 = 259;
      if ((v5 & 2) != 0)
        v13 = *(llvm::Metadata **)(*((_QWORD *)a2 - 4) + 24);
      else
        v13 = (llvm::Metadata *)v6[-((v5 >> 2) & 0xF) + 3];
      goto LABEL_55;
    }
LABEL_19:
    if ((v5 & 2) != 0)
    {
      v11 = (unint64_t *)*((_QWORD *)a2 - 4);
      v14 = (_BYTE *)v11[4];
      if (v14 && *v14 != 5)
      {
        v35 = a2;
        v36[0] = "invalid composite elements";
        v37 = 259;
        v13 = *(llvm::Metadata **)(*((_QWORD *)a2 - 4) + 32);
        goto LABEL_55;
      }
    }
    else
    {
      v11 = &v6[-((v5 >> 2) & 0xF)];
      v12 = (_BYTE *)v11[4];
      if (v12 && *v12 != 5)
      {
        v35 = a2;
        v36[0] = "invalid composite elements";
        v37 = 259;
        v13 = (llvm::Metadata *)v11[4];
        goto LABEL_55;
      }
    }
    v15 = (unsigned __int8 *)v11[5];
    if (v15)
    {
      v16 = *v15;
      if ((v16 - 12) >= 4 && v16 != 34)
      {
        v35 = a2;
        v36[0] = "invalid vtable holder";
        v37 = 259;
        if ((v5 & 2) != 0)
          v13 = *(llvm::Metadata **)(*((_QWORD *)a2 - 4) + 40);
        else
          v13 = (llvm::Metadata *)v6[-((v5 >> 2) & 0xF) + 5];
        goto LABEL_55;
      }
    }
    v17 = *((_DWORD *)a2 + 5);
    if ((~v17 & 0x6000) == 0 || (v17 & 0xC00000) == 0xC00000)
    {
      v19 = "invalid reference flags";
      goto LABEL_73;
    }
    if ((v17 & 0x10) != 0)
    {
      v19 = "DIBlockByRefStruct on DICompositeType is no longer supported";
      goto LABEL_73;
    }
    if ((v17 & 0x800) == 0)
    {
      if ((v5 & 2) == 0)
      {
LABEL_33:
        v18 = &v6[-((v5 >> 2) & 0xF)];
        goto LABEL_67;
      }
LABEL_66:
      v18 = (unint64_t *)*((_QWORD *)a2 - 4);
LABEL_67:
      v26 = (const llvm::Metadata *)v18[6];
      if (v26)
      {
        v5 = *((_QWORD *)a2 - 2);
      }
      if ((v5 & 2) != 0)
      {
        v27 = *(_BYTE **)(*((_QWORD *)a2 - 4) + 64);
        if (!v27)
          goto LABEL_78;
      }
      else
      {
        v27 = (_BYTE *)v6[-((v5 >> 2) & 0xF) + 8];
        if (!v27)
          goto LABEL_78;
      }
      if (*v27 != 13 || llvm::DINode::getTag(a2) != 51)
      {
        v29 = "discriminator can only appear on variant part";
        goto LABEL_110;
      }
      v5 = *v6;
LABEL_78:
      if ((v5 & 2) != 0)
        v28 = (unint64_t *)*((_QWORD *)a2 - 4);
      else
        v28 = &v6[-((v5 >> 2) & 0xF)];
      if (v28[9])
      {
        if (llvm::DINode::getTag(a2) != 1)
        {
          v29 = "dataLocation can only appear in array type";
          goto LABEL_110;
        }
        v5 = *v6;
      }
      if ((v5 & 2) != 0)
        v30 = (unint64_t *)*((_QWORD *)a2 - 4);
      else
        v30 = &v6[-((v5 >> 2) & 0xF)];
      if (v30[10])
      {
        if (llvm::DINode::getTag(a2) != 1)
        {
          v29 = "associated can only appear in array type";
          goto LABEL_110;
        }
        v5 = *v6;
      }
      if ((v5 & 2) != 0)
        v31 = (unint64_t *)*((_QWORD *)a2 - 4);
      else
        v31 = &v6[-((v5 >> 2) & 0xF)];
      if (v31[11])
      {
        if (llvm::DINode::getTag(a2) != 1)
        {
          v29 = "allocated can only appear in array type";
          goto LABEL_110;
        }
        v5 = *v6;
      }
      if ((v5 & 2) != 0)
        v32 = (unint64_t *)*((_QWORD *)a2 - 4);
      else
        v32 = &v6[-((v5 >> 2) & 0xF)];
      if (!v32[12] || llvm::DINode::getTag(a2) == 1)
      {
        result = (llvm::Metadata *)llvm::DINode::getTag(a2);
        if ((_DWORD)result != 1)
          return result;
        v33 = (*v6 & 2) != 0 ? (unint64_t *)*((_QWORD *)a2 - 4) : &v6[-((*v6 >> 2) & 0xF)];
        if (v33[3])
          return result;
        v19 = "array types must have a base type";
LABEL_73:
        v35 = a2;
        v36[0] = v19;
        v37 = 259;
        return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>((llvm::Metadata *)a1, (llvm::Twine *)v36, &v35);
      }
      v29 = "rank can only appear in array type";
LABEL_110:
      v36[0] = v29;
      v37 = 259;
      return (llvm::Metadata *)llvm::VerifierSupport::DebugInfoCheckFailed((_QWORD **)a1, (const llvm::Twine *)v36);
    }
    if ((v5 & 2) != 0)
    {
      v21 = *(_QWORD *)(*((_QWORD *)a2 - 4) + 32);
      if (!v21)
        goto LABEL_72;
    }
    else
    {
      v21 = v6[-((v5 >> 2) & 0xF) + 4];
      if (!v21)
        goto LABEL_72;
    }
    v22 = *(_QWORD *)(v21 - 16);
    if ((v22 & 2) != 0)
    {
      if (*(_DWORD *)(v21 - 24) != 1)
        goto LABEL_72;
      v23 = *(llvm::DINode ***)(v21 - 32);
    }
    else
    {
      if ((*(_QWORD *)(v21 - 16) & 0x3C0) != 0x40)
        goto LABEL_72;
      v23 = (llvm::DINode **)(v21 - 16 - 8 * ((v22 >> 2) & 0xF));
    }
    if (llvm::DINode::getTag(*v23) == 33)
    {
      v5 = *v6;
      if ((*v6 & 2) == 0)
        goto LABEL_33;
      goto LABEL_66;
    }
LABEL_72:
    v19 = "invalid vector, expected one element of type subrange";
    goto LABEL_73;
  }
  v35 = a2;
  v36[0] = "invalid scope";
  v37 = 259;
  if ((v5 & 2) != 0)
    v20 = (unint64_t *)*((_QWORD *)a2 - 4);
  else
    v20 = &v6[-((v5 >> 2) & 0xF)];
  v13 = (llvm::Metadata *)v20[1];
LABEL_55:
  v34 = v13;
  v24 = *(llvm::raw_ostream **)a1;
  if (*(_QWORD *)a1)
  {
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v36, *(llvm::raw_ostream **)a1);
    v25 = (_BYTE *)*((_QWORD *)v24 + 4);
    if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
    {
      result = llvm::raw_ostream::write(v24, 10);
    }
    else
    {
      *((_QWORD *)v24 + 4) = v25 + 1;
      *v25 = 10;
    }
  }
  *(_BYTE *)(a1 + 192) |= *(_BYTE *)(a1 + 194);
  *(_BYTE *)(a1 + 193) = 1;
  if (*(_QWORD *)a1)
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v35, &v34);
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDISubroutineType(uint64_t a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  char *v5;
  unint64_t v6;
  llvm::Metadata *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  llvm::Metadata **v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  llvm::Metadata *v17;
  int v18;
  int v19;
  llvm::Metadata *v20;
  llvm::Metadata *v21;
  llvm::Metadata *v22;
  _QWORD v23[4];
  __int16 v24;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 21)
  {
    v8 = "invalid tag";
    goto LABEL_27;
  }
  v5 = (char *)this - 16;
  v6 = *((_QWORD *)this - 2);
  if ((v6 & 2) != 0)
  {
    v7 = *(llvm::Metadata **)(*((_QWORD *)this - 4) + 24);
    v22 = v7;
    if (!v7)
      goto LABEL_23;
  }
  else
  {
    v7 = *(llvm::Metadata **)&v5[-8 * ((v6 >> 2) & 0xF) + 24];
    v22 = v7;
    if (!v7)
      goto LABEL_23;
  }
  if (*(_BYTE *)v7 != 5)
  {
    v23[0] = "invalid composite elements";
    v24 = 259;
    v21 = this;
    v14 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v23, *(llvm::raw_ostream **)a1);
      v15 = (_BYTE *)*((_QWORD *)v14 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
      {
        result = llvm::raw_ostream::write(v14, 10);
      }
      else
      {
        *((_QWORD *)v14 + 4) = v15 + 1;
        *v15 = 10;
      }
    }
    *(_BYTE *)(a1 + 192) |= *(_BYTE *)(a1 + 194);
    *(_BYTE *)(a1 + 193) = 1;
    if (*(_QWORD *)a1)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v21, &v22);
    return result;
  }
  if ((v6 & 2) != 0)
  {
    v9 = *(_QWORD *)(*((_QWORD *)this - 4) + 24);
    v10 = v9 - 16;
    v11 = *(_QWORD *)(v9 - 16);
    if ((v11 & 2) != 0)
    {
LABEL_10:
      v12 = *(llvm::Metadata ***)(v9 - 32);
      v13 = *(unsigned int *)(v9 - 24);
      if (!v13)
      {
LABEL_23:
        v19 = *((_DWORD *)this + 5);
        if ((~v19 & 0x6000) != 0 && (v19 & 0xC00000) != 0xC00000)
          return result;
        v8 = "invalid reference flags";
LABEL_27:
        v22 = this;
        v23[0] = v8;
        v24 = 259;
        return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>((llvm::Metadata *)a1, (llvm::Twine *)v23, &v22);
      }
      goto LABEL_17;
    }
  }
  else
  {
    v9 = *(_QWORD *)&v5[-8 * ((v6 >> 2) & 0xF) + 24];
    v10 = v9 - 16;
    v11 = *(_QWORD *)(v9 - 16);
    if ((v11 & 2) != 0)
      goto LABEL_10;
  }
  v12 = (llvm::Metadata **)(v10 - 8 * ((v11 >> 2) & 0xF));
  v13 = (v11 >> 6) & 0xF;
  if (!v13)
    goto LABEL_23;
LABEL_17:
  v16 = 8 * v13;
  while (1)
  {
    v17 = *v12;
    v21 = v17;
    if (v17)
    {
      v18 = *(unsigned __int8 *)v17;
      if ((v18 - 12) >= 4 && v18 != 34)
        break;
    }
    ++v12;
    v16 -= 8;
    if (!v16)
      goto LABEL_23;
  }
  v23[0] = "invalid subroutine type ref";
  v24 = 259;
  v20 = this;
  return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::MDTuple const*,llvm::Metadata *>((llvm::Metadata *)a1, (llvm::Twine *)v23, &v20, &v22, &v21);
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIFile(llvm::Metadata *a1, llvm::MDString **this)
{
  llvm::Metadata *result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  llvm::MDString **v10;
  const char *v11;
  __int16 v12;

  result = (llvm::Metadata *)llvm::DINode::getTag((llvm::DINode *)this);
  if ((_DWORD)result != 41)
  {
    v8 = "invalid tag";
    goto LABEL_9;
  }
  if (!*((_BYTE *)this + 32))
    return result;
  result = (llvm::Metadata *)llvm::MDString::getString(this[3]);
  v6 = *((_DWORD *)this + 4);
  if (v6 >= 4)
  {
    v8 = "invalid checksum kind";
    goto LABEL_9;
  }
  v7 = v6 - 1;
  if (v7 > 2)
  {
    if (v5)
      goto LABEL_6;
  }
  else if (v5 != *(_QWORD *)&asc_181284D68[8 * v7])
  {
LABEL_6:
    v8 = "invalid checksum length";
LABEL_9:
    v10 = this;
    v11 = v8;
    v12 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v11, (llvm::Metadata **)&v10);
  }
  if (v5)
  {
    v9 = 0;
    while (llvm::hexDigitValue(char)::LUT[*((unsigned __int8 *)result + v9)] != -1)
    {
      if (v5 == ++v9)
        return result;
    }
    if (v9 != -1)
    {
      v8 = "invalid checksum";
      goto LABEL_9;
    }
  }
  return result;
}

llvm::MDString *`anonymous namespace'::Verifier::visitDICompileUnit(uint64_t a1, llvm::DINode *this)
{
  llvm::DINode *v2;
  llvm::MDString *result;
  int v5;
  llvm::DINode *v6;
  unint64_t v7;
  llvm::DINode **v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  llvm::DINode *v12;
  unint64_t v13;
  llvm::DINode **v14;
  unint64_t v15;
  llvm::DINode **v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  llvm::Metadata *v24;
  unint64_t *v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  llvm::Metadata **v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Metadata *v32;
  unint64_t *v33;
  llvm::Metadata *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  llvm::Metadata **v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Metadata *v43;
  int v44;
  const char *v45;
  unint64_t *v46;
  llvm::Metadata *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  llvm::Metadata **v51;
  uint64_t v52;
  uint64_t v53;
  llvm::Metadata *v54;
  unint64_t *v55;
  llvm::Metadata *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  llvm::Metadata **v60;
  uint64_t v61;
  uint64_t v62;
  llvm::Metadata *v63;
  unint64_t *v64;
  llvm::Metadata *v65;
  unint64_t *v66;
  llvm::Metadata **v67;
  llvm::Metadata **v68;
  unint64_t v69;
  unint64_t v70;
  llvm::Metadata **v71;
  uint64_t v72;
  uint64_t v73;
  llvm::Metadata *v74;
  llvm::Metadata *v75;
  llvm::Metadata *v76;
  llvm::Metadata *v77;
  llvm::Metadata *v78;
  _QWORD v79[4];
  __int16 v80;

  v2 = this;
  if ((*((_BYTE *)this + 1) & 0x7F) != 1)
  {
    v9 = "compile units must be distinct";
    goto LABEL_10;
  }
  result = (llvm::MDString *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 17)
  {
    v9 = "invalid tag";
    goto LABEL_10;
  }
  v5 = *(unsigned __int8 *)v2;
  v6 = v2;
  if (v5 == 16)
  {
LABEL_15:
    v10 = *((_QWORD *)v6 - 2);
    if ((v10 & 2) != 0)
    {
      result = (llvm::MDString *)**((_QWORD **)v6 - 4);
      if (!result)
        goto LABEL_23;
    }
    else
    {
      result = (llvm::MDString *)*((_QWORD *)v6 - ((v10 >> 2) & 0xF) - 2);
      if (!result)
      {
LABEL_23:
        v78 = v2;
        v79[0] = "invalid filename";
        v80 = 259;
        if (v5 != 16)
        {
          v15 = *((_QWORD *)v2 - 2);
          if ((v15 & 2) != 0)
            v16 = (llvm::DINode **)*((_QWORD *)v2 - 4);
          else
            v16 = (llvm::DINode **)((char *)v2 - 8 * ((v15 >> 2) & 0xF) - 16);
          v2 = *v16;
        }
        v77 = v2;
        v19 = *(llvm::raw_ostream **)a1;
        if (*(_QWORD *)a1)
        {
          result = (llvm::MDString *)llvm::Twine::print((llvm::Twine *)v79, *(llvm::raw_ostream **)a1);
          v20 = (_BYTE *)*((_QWORD *)v19 + 4);
          if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
          {
            result = llvm::raw_ostream::write(v19, 10);
          }
          else
          {
            *((_QWORD *)v19 + 4) = v20 + 1;
            *v20 = 10;
          }
        }
        *(_BYTE *)(a1 + 192) |= *(_BYTE *)(a1 + 194);
        *(_BYTE *)(a1 + 193) = 1;
        if (*(_QWORD *)a1)
          return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v78, &v77);
        return result;
      }
    }
    result = (llvm::MDString *)llvm::MDString::getString(result);
    v5 = *(unsigned __int8 *)v2;
    if (!v11)
      goto LABEL_23;
    *(_DWORD *)(a1 + 804) = *((_DWORD *)v2 + 4);
    v12 = v2;
    if (v5 != 16)
    {
      v13 = *((_QWORD *)v2 - 2);
      if ((v13 & 2) != 0)
        v14 = (llvm::DINode **)*((_QWORD *)v2 - 4);
      else
        v14 = (llvm::DINode **)((char *)v2 - 8 * ((v13 >> 2) & 0xF) - 16);
      v12 = *v14;
    }
    if (*((_DWORD *)v2 + 8) < 4u)
    {
      v22 = (unint64_t *)((char *)v2 - 16);
      v21 = *((_QWORD *)v2 - 2);
      if ((v21 & 2) != 0)
        v23 = (unint64_t *)*((_QWORD *)v2 - 4);
      else
        v23 = &v22[-((v21 >> 2) & 0xF)];
      v24 = (llvm::Metadata *)v23[4];
      v78 = v24;
      if (v24)
      {
        if (*(_BYTE *)v24 != 5)
        {
          v26 = "invalid enum list";
          goto LABEL_132;
        }
        if ((v21 & 2) != 0)
          v25 = (unint64_t *)*((_QWORD *)v2 - 4);
        else
          v25 = &v22[-((v21 >> 2) & 0xF)];
        v27 = v25[4];
        v28 = *(_QWORD *)(v27 - 16);
        if ((v28 & 2) != 0)
        {
          v29 = *(llvm::Metadata ***)(v27 - 32);
          v30 = *(unsigned int *)(v27 - 24);
        }
        else
        {
          v29 = (llvm::Metadata **)(v27 - 16 - 8 * ((v28 >> 2) & 0xF));
          v30 = (v28 >> 6) & 0xF;
        }
        if (v30)
        {
          v31 = 8 * v30;
          while (1)
          {
            v32 = *v29;
            v77 = v32;
            if (!v32 || *(_BYTE *)v32 != 14 || llvm::DINode::getTag(v32) != 4)
              break;
            ++v29;
            v31 -= 8;
            if (!v31)
            {
              v21 = *v22;
              goto LABEL_64;
            }
          }
          v79[0] = "invalid enum type";
          v80 = 259;
          v76 = v2;
          v36 = *((_QWORD *)v2 - 2);
          if ((v36 & 2) != 0)
            v37 = (unint64_t *)*((_QWORD *)v2 - 4);
          else
            v37 = &v22[-((v36 >> 2) & 0xF)];
          v75 = (llvm::Metadata *)v37[4];
          return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::MDTuple const*,llvm::Metadata *>((llvm::Metadata *)a1, (llvm::Twine *)v79, &v76, &v75, &v77);
        }
      }
LABEL_64:
      if ((v21 & 2) != 0)
        v33 = (unint64_t *)*((_QWORD *)v2 - 4);
      else
        v33 = &v22[-((v21 >> 2) & 0xF)];
      v34 = (llvm::Metadata *)v33[5];
      v78 = v34;
      if (v34)
      {
        if (*(_BYTE *)v34 != 5)
        {
          v26 = "invalid retained type list";
          goto LABEL_132;
        }
        if ((v21 & 2) != 0)
          v35 = (unint64_t *)*((_QWORD *)v2 - 4);
        else
          v35 = &v22[-((v21 >> 2) & 0xF)];
        v38 = v35[5];
        v39 = *(_QWORD *)(v38 - 16);
        if ((v39 & 2) != 0)
        {
          v40 = *(llvm::Metadata ***)(v38 - 32);
          v41 = *(unsigned int *)(v38 - 24);
        }
        else
        {
          v40 = (llvm::Metadata **)(v38 - 16 - 8 * ((v39 >> 2) & 0xF));
          v41 = (v39 >> 6) & 0xF;
        }
        if (v41)
        {
          v42 = 8 * v41;
          while (1)
          {
            v43 = *v40;
            v77 = v43;
            if (!v43)
              break;
            v44 = *(unsigned __int8 *)v43;
            if ((v44 - 12) >= 4 && v44 != 34 && (v44 != 18 || (*((_BYTE *)v43 + 36) & 8) != 0))
              break;
            ++v40;
            v42 -= 8;
            if (!v42)
              goto LABEL_87;
          }
          v45 = "invalid retained type";
          goto LABEL_146;
        }
      }
LABEL_87:
      if ((v21 & 2) != 0)
        v46 = (unint64_t *)*((_QWORD *)v2 - 4);
      else
        v46 = &v22[-((v21 >> 2) & 0xF)];
      v47 = (llvm::Metadata *)v46[6];
      v78 = v47;
      if (v47)
      {
        if (*(_BYTE *)v47 != 5)
        {
          v26 = "invalid global variable list";
          goto LABEL_132;
        }
        if ((v21 & 2) != 0)
          v48 = (unint64_t *)*((_QWORD *)v2 - 4);
        else
          v48 = &v22[-((v21 >> 2) & 0xF)];
        v49 = v48[6];
        v50 = *(_QWORD *)(v49 - 16);
        if ((v50 & 2) != 0)
        {
          v51 = *(llvm::Metadata ***)(v49 - 32);
          v52 = *(unsigned int *)(v49 - 24);
        }
        else
        {
          v51 = (llvm::Metadata **)(v49 - 16 - 8 * ((v50 >> 2) & 0xF));
          v52 = (v50 >> 6) & 0xF;
        }
        if (v52)
        {
          v53 = 8 * v52;
          while (1)
          {
            v54 = *v51;
            v77 = v54;
            if (!v54 || *(_BYTE *)v54 != 8)
              break;
            ++v51;
            v53 -= 8;
            if (!v53)
              goto LABEL_106;
          }
          v45 = "invalid global variable ref";
          goto LABEL_146;
        }
      }
LABEL_106:
      if ((v21 & 2) != 0)
        v55 = (unint64_t *)*((_QWORD *)v2 - 4);
      else
        v55 = &v22[-((v21 >> 2) & 0xF)];
      v56 = (llvm::Metadata *)v55[7];
      v78 = v56;
      if (v56)
      {
        if (*(_BYTE *)v56 != 5)
        {
          v26 = "invalid imported entity list";
          goto LABEL_132;
        }
        if ((v21 & 2) != 0)
          v57 = (unint64_t *)*((_QWORD *)v2 - 4);
        else
          v57 = &v22[-((v21 >> 2) & 0xF)];
        v58 = v57[7];
        v59 = *(_QWORD *)(v58 - 16);
        if ((v59 & 2) != 0)
        {
          v60 = *(llvm::Metadata ***)(v58 - 32);
          v61 = *(unsigned int *)(v58 - 24);
        }
        else
        {
          v60 = (llvm::Metadata **)(v58 - 16 - 8 * ((v59 >> 2) & 0xF));
          v61 = (v59 >> 6) & 0xF;
        }
        if (v61)
        {
          v62 = 8 * v61;
          while (1)
          {
            v63 = *v60;
            v77 = v63;
            if (!v63 || *(_BYTE *)v63 != 29)
              break;
            ++v60;
            v62 -= 8;
            if (!v62)
              goto LABEL_124;
          }
          v45 = "invalid imported entity ref";
          goto LABEL_146;
        }
      }
LABEL_124:
      if ((v21 & 2) != 0)
        v64 = (unint64_t *)*((_QWORD *)v2 - 4);
      else
        v64 = &v22[-((v21 >> 2) & 0xF)];
      v65 = (llvm::Metadata *)v64[8];
      v78 = v65;
      if (!v65)
        return (llvm::MDString *)llvm::SmallPtrSetImpl<llvm::MCSymbol const*>::insert((llvm::SmallPtrSetImplBase *)(a1 + 744), v2, (uint64_t)v79);
      if (*(_BYTE *)v65 == 5)
      {
        if ((v21 & 2) != 0)
          v66 = (unint64_t *)*((_QWORD *)v2 - 4);
        else
          v66 = &v22[-((v21 >> 2) & 0xF)];
        v69 = v66[8];
        v70 = *(_QWORD *)(v69 - 16);
        if ((v70 & 2) != 0)
        {
          v71 = *(llvm::Metadata ***)(v69 - 32);
          v72 = *(unsigned int *)(v69 - 24);
        }
        else
        {
          v71 = (llvm::Metadata **)(v69 - 16 - 8 * ((v70 >> 2) & 0xF));
          v72 = (v70 >> 6) & 0xF;
        }
        if (v72)
        {
          v73 = 8 * v72;
          while (1)
          {
            v74 = *v71;
            v77 = v74;
            if (!v74 || *(unsigned __int8 *)v74 - 31 > 1)
              break;
            ++v71;
            v73 -= 8;
            if (!v73)
              return (llvm::MDString *)llvm::SmallPtrSetImpl<llvm::MCSymbol const*>::insert((llvm::SmallPtrSetImplBase *)(a1 + 744), v2, (uint64_t)v79);
          }
          v45 = "invalid macro ref";
LABEL_146:
          v79[0] = v45;
          v80 = 259;
          v76 = v2;
          v67 = &v76;
          v68 = &v77;
          return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DICompileUnit const*,llvm::Metadata *>((llvm::Metadata *)a1, (llvm::Twine *)v79, v67, v68);
        }
        return (llvm::MDString *)llvm::SmallPtrSetImpl<llvm::MCSymbol const*>::insert((llvm::SmallPtrSetImplBase *)(a1 + 744), v2, (uint64_t)v79);
      }
      v26 = "invalid macro list";
LABEL_132:
      v79[0] = v26;
      v80 = 259;
      v77 = v2;
      v67 = &v77;
      v68 = &v78;
      return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DICompileUnit const*,llvm::Metadata *>((llvm::Metadata *)a1, (llvm::Twine *)v79, v67, v68);
    }
    v9 = "invalid emission kind";
LABEL_10:
    v78 = v2;
    v79[0] = v9;
    v80 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>((llvm::Metadata *)a1, (llvm::Twine *)v79, &v78);
  }
  v7 = *((_QWORD *)v2 - 2);
  if ((v7 & 2) == 0)
  {
    v8 = (llvm::DINode **)((char *)v2 - 8 * ((v7 >> 2) & 0xF) - 16);
    if (!*v8 || *(_BYTE *)*v8 != 16)
    {
      v78 = v2;
      v79[0] = "invalid file";
      v80 = 259;
      goto LABEL_27;
    }
    goto LABEL_14;
  }
  v8 = (llvm::DINode **)*((_QWORD *)v2 - 4);
  if (*v8 && *(_BYTE *)*v8 == 16)
  {
LABEL_14:
    v6 = *v8;
    goto LABEL_15;
  }
  v78 = v2;
  v79[0] = "invalid file";
  v80 = 259;
  v8 = (llvm::DINode **)*((_QWORD *)v2 - 4);
LABEL_27:
  v77 = *v8;
  v17 = *(llvm::raw_ostream **)a1;
  if (*(_QWORD *)a1)
  {
    result = (llvm::MDString *)llvm::Twine::print((llvm::Twine *)v79, *(llvm::raw_ostream **)a1);
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
    {
      result = llvm::raw_ostream::write(v17, 10);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v18 + 1;
      *v18 = 10;
    }
  }
  *(_BYTE *)(a1 + 192) |= *(_BYTE *)(a1 + 194);
  *(_BYTE *)(a1 + 193) = 1;
  if (*(_QWORD *)a1)
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v78, &v77);
  return result;
}

llvm::raw_ostream *`anonymous namespace'::Verifier::visitDISubprogram(llvm::LLVMContext ***this, const llvm::DISubprogram *a2)
{
  llvm::raw_ostream *result;
  unint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  const char *v8;
  llvm::Metadata **v9;
  int v10;
  const llvm::DISubprogram *v11;
  llvm::LLVMContext **v12;
  int v13;
  const llvm::DISubprogram *v14;
  unsigned __int8 *v15;
  int v16;
  const llvm::Metadata *v17;
  llvm::LLVMContext *v18;
  _QWORD *v19;
  llvm::Metadata **v20;
  llvm::Metadata **v21;
  const llvm::DISubprogram *v22;
  const llvm::DISubprogram *v23;
  const char *v24;
  llvm::Metadata **v25;
  llvm::Metadata *v26;
  unint64_t v27;
  const llvm::DISubprogram **v28;
  uint64_t v29;
  llvm::Metadata **v30;
  uint64_t v31;
  const llvm::DISubprogram *v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  int v37;
  _QWORD *v38;
  const llvm::DISubprogram *v39;
  const char *v40;
  _QWORD *v41;
  llvm::Metadata **v42;
  llvm::Metadata **v43;
  llvm::Metadata **v44;
  llvm::Metadata *v45;
  _QWORD *v46;
  llvm::LLVMContext **v47;
  llvm::LLVMContext *v48;
  const char *v49;
  _BYTE *v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  const llvm::DISubprogram *v57;
  const llvm::DISubprogram *v58;
  _QWORD *v59;
  llvm::Metadata *v60;
  llvm::Metadata *v61;
  unint64_t v62;
  const llvm::DISubprogram **v63;
  uint64_t v64;
  uint64_t v65;
  const llvm::DISubprogram *v66;
  int v67;
  const llvm::DISubprogram *v68;
  const llvm::DISubprogram *v69;
  const llvm::DISubprogram *v70;
  llvm::Metadata *v71;
  const llvm::DISubprogram *v72;
  _QWORD v73[4];
  __int16 v74;

  result = (llvm::raw_ostream *)llvm::DINode::getTag(a2);
  if ((_DWORD)result != 46)
  {
    v8 = "invalid tag";
    goto LABEL_6;
  }
  v6 = (_QWORD *)((char *)a2 - 16);
  v5 = *((_QWORD *)a2 - 2);
  if ((v5 & 2) != 0)
  {
    v7 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 8);
    if (!v7)
      goto LABEL_11;
  }
  else
  {
    v7 = (unsigned __int8 *)v6[-((v5 >> 2) & 0xF) + 1];
    if (!v7)
      goto LABEL_11;
  }
  v10 = *v7;
  if ((v10 - 12) >= 0xB && (v10 - 33) >= 2)
  {
    v72 = a2;
    v73[0] = "invalid scope";
    v74 = 259;
    if ((v5 & 2) != 0)
      v19 = (_QWORD *)*((_QWORD *)a2 - 4);
    else
      v19 = &v6[-((v5 >> 2) & 0xF)];
    v45 = (llvm::Metadata *)v19[1];
    goto LABEL_107;
  }
LABEL_11:
  if (*(_BYTE *)a2 == 16)
    goto LABEL_20;
  if ((v5 & 2) == 0)
  {
    v11 = (const llvm::DISubprogram *)v6[-((v5 >> 2) & 0xF)];
    v72 = v11;
    if (v11)
      goto LABEL_14;
LABEL_18:
    v13 = *((_DWORD *)a2 + 4);
    if (v13)
    {
      v73[0] = "line specified with no file";
      v74 = 259;
      v71 = a2;
      LODWORD(v70) = v13;
      return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram const*,unsigned int>((llvm::raw_ostream *)this, (llvm::Twine *)v73, &v71, (unsigned int *)&v70);
    }
    goto LABEL_20;
  }
  v11 = (const llvm::DISubprogram *)**((_QWORD **)a2 - 4);
  v72 = v11;
  if (!v11)
    goto LABEL_18;
LABEL_14:
  if (*(_BYTE *)v11 != 16)
  {
    v73[0] = "invalid file";
    v74 = 259;
    v71 = a2;
    v12 = *this;
    if (!*this)
      goto LABEL_44;
    goto LABEL_38;
  }
LABEL_20:
  if ((v5 & 2) == 0)
  {
    v14 = (const llvm::DISubprogram *)v6[-((v5 >> 2) & 0xF) + 4];
    v72 = v14;
    if (!v14)
      goto LABEL_25;
LABEL_24:
    if (*(_BYTE *)v14 != 15)
    {
      v73[0] = "invalid subroutine type";
      v74 = 259;
      v71 = a2;
      v12 = *this;
      if (!*this)
        goto LABEL_44;
LABEL_38:
      result = (llvm::raw_ostream *)llvm::Twine::print((llvm::Twine *)v73, (llvm::raw_ostream *)v12);
      v18 = v12[4];
      if (v18 >= v12[3])
      {
        result = llvm::raw_ostream::write((llvm::raw_ostream *)v12, 10);
      }
      else
      {
        v12[4] = (llvm::LLVMContext *)((char *)v18 + 1);
        *(_BYTE *)v18 = 10;
      }
LABEL_44:
      *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
      *((_BYTE *)this + 193) = 1;
      if (*this)
      {
        v20 = &v71;
        v21 = &v72;
        return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)this, v20, v21);
      }
      return result;
    }
    goto LABEL_25;
  }
  v14 = *(const llvm::DISubprogram **)(*((_QWORD *)a2 - 4) + 32);
  v72 = v14;
  if (v14)
    goto LABEL_24;
LABEL_25:
  if ((v5 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6) < 9u)
      goto LABEL_50;
    v15 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 64);
    if (!v15)
      goto LABEL_33;
  }
  else
  {
    if ((v5 & 0x3C0) <= 0x200)
      goto LABEL_34;
    v15 = (unsigned __int8 *)v6[-((v5 >> 2) & 0xF) + 8];
    if (!v15)
    {
LABEL_33:
      if ((v5 & 2) != 0)
      {
        if (*((_DWORD *)a2 - 6) < 0xAu || (v17 = *(const llvm::Metadata **)(*((_QWORD *)a2 - 4) + 72)) == 0)
        {
LABEL_50:
          if ((v5 & 2) != 0)
          {
            v22 = *(const llvm::DISubprogram **)(*((_QWORD *)a2 - 4) + 48);
            v72 = v22;
            if (!v22)
              goto LABEL_56;
          }
          else
          {
            v22 = (const llvm::DISubprogram *)v6[-((v5 >> 2) & 0xF) + 6];
            v72 = v22;
            if (!v22)
              goto LABEL_56;
          }
          if (*(_BYTE *)v22 != 18 || (*((_BYTE *)v22 + 36) & 8) != 0)
          {
            v24 = "invalid subprogram declaration";
LABEL_60:
            v73[0] = v24;
            v74 = 259;
            v71 = a2;
            v25 = &v71;
LABEL_69:
            v30 = &v72;
            return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DICompileUnit const*,llvm::Metadata *>((llvm::Metadata *)this, (llvm::Twine *)v73, v25, v30);
          }
LABEL_56:
          if ((v5 & 2) != 0)
          {
            v23 = *(const llvm::DISubprogram **)(*((_QWORD *)a2 - 4) + 56);
            v72 = v23;
            if (!v23)
              goto LABEL_80;
          }
          else
          {
            v23 = (const llvm::DISubprogram *)v6[-((v5 >> 2) & 0xF) + 7];
            v72 = v23;
            if (!v23)
            {
LABEL_80:
              v37 = *((_DWORD *)a2 + 8);
              if ((~v37 & 0x6000) != 0 && (v37 & 0xC00000) != 0xC00000)
              {
                if ((v5 & 2) != 0)
                  v38 = (_QWORD *)*((_QWORD *)a2 - 4);
                else
                  v38 = &v6[-((v5 >> 2) & 0xF)];
                v39 = (const llvm::DISubprogram *)v38[5];
                v72 = v39;
                if ((*((_BYTE *)a2 + 36) & 8) == 0)
                {
                  if (v39)
                  {
                    v40 = "subprogram declarations must not have a compile unit";
LABEL_114:
                    v73[0] = v40;
                    v74 = 259;
                    v71 = a2;
                    v9 = &v71;
                    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>((llvm::Metadata *)this, (llvm::Twine *)v73, v9);
                  }
                  if ((v5 & 2) != 0)
                    v46 = (_QWORD *)*((_QWORD *)a2 - 4);
                  else
                    v46 = &v6[-((v5 >> 2) & 0xF)];
                  if (v46[6])
                  {
                    v49 = "subprogram declaration must not have a declaration field";
                    goto LABEL_166;
                  }
                  goto LABEL_142;
                }
                if ((*((_BYTE *)a2 + 1) & 0x7F) != 1)
                {
                  v40 = "subprogram definitions must be distinct";
                  goto LABEL_114;
                }
                if (!v39)
                {
                  v40 = "subprogram definitions must have a compile unit";
                  goto LABEL_114;
                }
                if (*(_BYTE *)v39 == 17)
                {
                  if ((v5 & 2) != 0)
                    v41 = (_QWORD *)*((_QWORD *)a2 - 4);
                  else
                    v41 = &v6[-((v5 >> 2) & 0xF)];
                  v50 = (_BYTE *)v41[1];
                  if (v50 && *v50 == 14)
                  {
                    v51 = *((_QWORD *)v50 - 2);
                    v52 = (v51 & 2) != 0 ? (_BYTE *)*((_QWORD *)v50 - 4) : &v50[-8 * ((v51 >> 2) & 0xF) - 16];
                    if (*((_QWORD *)v52 + 7))
                    {
                      result = (llvm::raw_ostream *)llvm::LLVMContext::isODRUniquingDebugTypes(*this[1]);
                      if ((_DWORD)result)
                      {
                        v53 = (*v6 & 2) != 0 ? (_QWORD *)*((_QWORD *)a2 - 4) : &v6[-((*v6 >> 2) & 0xFLL)];
                        if (!v53[6])
                        {
                          v40 = "definition subprograms cannot be nested within DICompositeType when enabling ODR";
                          goto LABEL_114;
                        }
                      }
                    }
                  }
                  v5 = *((_QWORD *)a2 - 2);
                  if (*(_BYTE *)a2 == 16)
                  {
                    if ((v5 & 2) != 0)
                      v54 = (_QWORD *)*((_QWORD *)a2 - 4);
                    else
                      v54 = &v6[-((v5 >> 2) & 0xF)];
                    v56 = v54 + 5;
                    v57 = a2;
                  }
                  else
                  {
                    if ((v5 & 2) != 0)
                      v55 = (_QWORD *)*((_QWORD *)a2 - 4);
                    else
                      v55 = &v6[-((v5 >> 2) & 0xF)];
                    if (!*v55)
                      goto LABEL_142;
                    v58 = (const llvm::DISubprogram *)*v55;
                    v56 = v55 + 5;
                    v57 = v58;
                  }
                  v5 = *((_QWORD *)a2 - 2);
LABEL_142:
                  if ((v5 & 2) != 0)
                  {
                    if (*((_DWORD *)a2 - 6) < 0xBu)
                      goto LABEL_163;
                    v59 = (_QWORD *)*((_QWORD *)a2 - 4);
                  }
                  else
                  {
                    if ((v5 & 0x3C0) <= 0x280)
                      goto LABEL_163;
                    v59 = &v6[-((v5 >> 2) & 0xF)];
                  }
                  v60 = (llvm::Metadata *)v59[10];
                  v71 = v60;
                  if (!v60)
                  {
LABEL_163:
                    if ((*((_BYTE *)a2 + 35) & 0x20) == 0 || (*((_BYTE *)a2 + 36) & 8) != 0)
                      return result;
                    v49 = "DIFlagAllCallsDescribed must be attached to a definition";
LABEL_166:
                    v73[0] = v49;
                    v74 = 259;
                    return (llvm::raw_ostream *)llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v73);
                  }
                  if (*(_BYTE *)v60 == 5)
                    v61 = v60;
                  else
                    v61 = 0;
                  v70 = v61;
                  if (v61)
                  {
                    v62 = *((_QWORD *)v61 - 2);
                    if ((v62 & 2) != 0)
                    {
                      v63 = (const llvm::DISubprogram **)*((_QWORD *)v61 - 4);
                      v64 = *((unsigned int *)v61 - 6);
                    }
                    else
                    {
                      v63 = (const llvm::DISubprogram **)((char *)v61 - 8 * ((v62 >> 2) & 0xF) - 16);
                      v64 = (v62 >> 6) & 0xF;
                    }
                    if (v64)
                    {
                      v65 = 8 * v64;
                      while (1)
                      {
                        v69 = 0;
                        v66 = *v63;
                        v69 = v66;
                        if (!v66)
                          break;
                        v67 = *(unsigned __int8 *)v66;
                        if ((v67 - 12) >= 4 && v67 != 34)
                          break;
                        ++v63;
                        v65 -= 8;
                        if (!v65)
                          goto LABEL_163;
                      }
                      v73[0] = "invalid thrown type";
                      v74 = 259;
                      v68 = a2;
                      v42 = &v68;
                      v43 = &v70;
                      v44 = &v69;
                      return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::MDTuple const*,llvm::Metadata *>((llvm::Metadata *)this, (llvm::Twine *)v73, v42, v43, v44);
                    }
                    goto LABEL_163;
                  }
                  v73[0] = "invalid thrown types list";
                  v74 = 259;
                  v69 = a2;
                  v25 = &v69;
                  v30 = &v71;
                  return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DICompileUnit const*,llvm::Metadata *>((llvm::Metadata *)this, (llvm::Twine *)v73, v25, v30);
                }
                v24 = "invalid unit type";
                goto LABEL_60;
              }
              v8 = "invalid reference flags";
LABEL_6:
              v72 = a2;
              v73[0] = v8;
              v74 = 259;
              v9 = &v72;
              return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>((llvm::Metadata *)this, (llvm::Twine *)v73, v9);
            }
          }
          if (*(_BYTE *)v23 == 5)
            v26 = v23;
          else
            v26 = 0;
          v71 = v26;
          if (!v26)
          {
            v73[0] = "invalid retained nodes list";
            v74 = 259;
            v70 = a2;
            v25 = &v70;
            goto LABEL_69;
          }
          v27 = *((_QWORD *)v26 - 2);
          if ((v27 & 2) != 0)
          {
            v28 = (const llvm::DISubprogram **)*((_QWORD *)v26 - 4);
            v29 = *((unsigned int *)v26 - 6);
          }
          else
          {
            v28 = (const llvm::DISubprogram **)((char *)v26 - 8 * ((v27 >> 2) & 0xF) - 16);
            v29 = (v27 >> 6) & 0xF;
          }
          if (v29)
          {
            v31 = 8 * v29;
            while (1)
            {
              v70 = 0;
              v32 = *v28;
              v70 = v32;
              if (!v32)
                break;
              v33 = *(unsigned __int8 *)v32;
              v34 = v33 > 0x1D;
              v35 = (1 << v33) & 0x2C000000;
              if (v34 || v35 == 0)
                break;
              ++v28;
              v31 -= 8;
              if (!v31)
                goto LABEL_80;
            }
            v73[0] = "invalid retained nodes, expected DILocalVariable, DILabel or DIImportedEntity";
            v74 = 259;
            v69 = a2;
            v42 = &v69;
            v43 = &v71;
            v44 = &v70;
            return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::MDTuple const*,llvm::Metadata *>((llvm::Metadata *)this, (llvm::Twine *)v73, v42, v43, v44);
          }
          goto LABEL_80;
        }
LABEL_49:
        v5 = *((_QWORD *)a2 - 2);
        goto LABEL_50;
      }
LABEL_34:
      if ((v5 & 0x380) <= 0x240)
        goto LABEL_50;
      v17 = (const llvm::Metadata *)v6[-((v5 >> 2) & 0xF) + 9];
      if (!v17)
        goto LABEL_50;
      goto LABEL_49;
    }
  }
  v16 = *v15;
  if ((v16 - 12) < 4 || v16 == 34)
    goto LABEL_33;
  v72 = a2;
  v73[0] = "invalid containing type";
  v74 = 259;
  if ((v5 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6) >= 9u)
    {
      v45 = *(llvm::Metadata **)(*((_QWORD *)a2 - 4) + 64);
      goto LABEL_107;
    }
  }
  else if ((v5 & 0x3C0) > 0x200)
  {
    v45 = (llvm::Metadata *)v6[-((v5 >> 2) & 0xF) + 8];
    goto LABEL_107;
  }
  v45 = 0;
LABEL_107:
  v71 = v45;
  v47 = *this;
  if (*this)
  {
    result = (llvm::raw_ostream *)llvm::Twine::print((llvm::Twine *)v73, (llvm::raw_ostream *)*this);
    v48 = v47[4];
    if (v48 >= v47[3])
    {
      result = llvm::raw_ostream::write((llvm::raw_ostream *)v47, 10);
    }
    else
    {
      v47[4] = (llvm::LLVMContext *)((char *)v48 + 1);
      *(_BYTE *)v48 = 10;
    }
  }
  *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
  *((_BYTE *)this + 193) = 1;
  if (*this)
  {
    v20 = &v72;
    v21 = &v71;
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)this, v20, v21);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDILexicalBlock(llvm::Metadata *a1, uint64_t a2)
{
  llvm::Metadata *result;
  BOOL v5;
  llvm::Metadata *v6;
  const char *v7;
  __int16 v8;

  if (*(_DWORD *)(a2 + 4))
    v5 = 1;
  else
    v5 = *(unsigned __int16 *)(a2 + 16) == 0;
  if (!v5)
  {
    v6 = (llvm::Metadata *)a2;
    v7 = "cannot have column info without line info";
    v8 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v7, &v6);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDINamespace(llvm::Metadata *a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  unint64_t v5;
  llvm::Metadata *v6;
  int v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::Metadata *v10;
  llvm::Metadata *v11;
  _QWORD v12[4];
  __int16 v13;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 57)
  {
    v11 = this;
    v12[0] = "invalid tag";
    v13 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)v12, &v11);
  }
  v5 = *((_QWORD *)this - 2);
  if ((v5 & 2) != 0)
  {
    v6 = *(llvm::Metadata **)(*((_QWORD *)this - 4) + 8);
    v11 = v6;
    if (!v6)
      return result;
  }
  else
  {
    v6 = (llvm::Metadata *)*((_QWORD *)this - ((v5 >> 2) & 0xF) - 1);
    v11 = v6;
    if (!v6)
      return result;
  }
  v7 = *(unsigned __int8 *)v6;
  if ((v7 - 12) >= 0xB && (v7 - 33) >= 2)
  {
    v12[0] = "invalid scope ref";
    v13 = 259;
    v10 = this;
    v8 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v12, *(llvm::raw_ostream **)a1);
      v9 = (_BYTE *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
      {
        result = llvm::raw_ostream::write(v8, 10);
      }
      else
      {
        *((_QWORD *)v8 + 4) = v9 + 1;
        *v9 = 10;
      }
    }
    *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
    *((_BYTE *)a1 + 193) = 1;
    if (*(_QWORD *)a1)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v10, &v11);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIModule(llvm::Metadata *a1, llvm::DINode *this)
{
  unint64_t v4;
  llvm::MDString *v5;
  const char *v6;
  llvm::Metadata *result;
  uint64_t v8;
  llvm::Metadata *v9;
  const char *v10;
  __int16 v11;

  if (llvm::DINode::getTag(this) == 30)
  {
    v4 = *((_QWORD *)this - 2);
    if ((v4 & 2) != 0)
    {
      v5 = *(llvm::MDString **)(*((_QWORD *)this - 4) + 16);
      if (!v5)
      {
LABEL_8:
        v6 = "anonymous module";
        goto LABEL_9;
      }
    }
    else
    {
      v5 = (llvm::MDString *)*((_QWORD *)this - ((v4 >> 2) & 0xF));
      if (!v5)
        goto LABEL_8;
    }
    result = (llvm::Metadata *)llvm::MDString::getString(v5);
    if (v8)
      return result;
    goto LABEL_8;
  }
  v6 = "invalid tag";
LABEL_9:
  v9 = this;
  v10 = v6;
  v11 = 259;
  return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v10, &v9);
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDITemplateTypeParameter(llvm::Metadata *a1, llvm::Metadata *a2)
{
  llvm::Metadata *result;
  llvm::Metadata *v5;
  const char *v6;
  __int16 v7;

  result = (llvm::Metadata *)llvm::DINode::getTag(a2);
  if ((_DWORD)result != 47)
  {
    v5 = a2;
    v6 = "invalid tag";
    v7 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v6, &v5);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDITemplateValueParameter(llvm::Metadata *a1, llvm::Metadata *a2)
{
  llvm::Metadata *result;
  llvm::Metadata *v5;
  const char *v6;
  __int16 v7;

  result = (llvm::Metadata *)llvm::DINode::getTag(a2);
  if ((_DWORD)result != 48)
  {
    result = (llvm::Metadata *)llvm::DINode::getTag(a2);
    if ((_DWORD)result != 16646)
    {
      result = (llvm::Metadata *)llvm::DINode::getTag(a2);
      if ((_DWORD)result != 16647)
      {
        v5 = a2;
        v6 = "invalid tag";
        v7 = 259;
        return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v6, &v5);
      }
    }
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIGlobalVariable(llvm::Metadata *a1, const llvm::DIVariable *a2)
{
  llvm::Metadata *result;
  _BYTE *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  const char *v8;
  int v9;
  llvm::Metadata *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::Metadata *v16;
  llvm::Metadata *v17;
  _QWORD v18[4];
  __int16 v19;

  result = (llvm::Metadata *)llvm::DINode::getTag(a2);
  if ((_DWORD)result != 52)
  {
    v8 = "invalid tag";
    goto LABEL_6;
  }
  v5 = (char *)a2 - 16;
  v6 = *((_QWORD *)a2 - 2);
  if ((v6 & 2) != 0)
  {
    v7 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 24);
    if (!v7)
      goto LABEL_10;
  }
  else
  {
    v7 = *(unsigned __int8 **)&v5[-8 * ((v6 >> 2) & 0xF) + 24];
    if (!v7)
      goto LABEL_10;
  }
  v9 = *v7;
  if ((v9 - 12) >= 4 && v9 != 34)
  {
    v17 = a2;
    v18[0] = "invalid type ref";
    v19 = 259;
    if ((v6 & 2) != 0)
      v13 = (_BYTE *)*((_QWORD *)a2 - 4);
    else
      v13 = &v5[-8 * ((v6 >> 2) & 0xF)];
    v16 = (llvm::Metadata *)*((_QWORD *)v13 + 3);
    v14 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v18, *(llvm::raw_ostream **)a1);
      v15 = (_BYTE *)*((_QWORD *)v14 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
      {
        result = llvm::raw_ostream::write(v14, 10);
      }
      else
      {
        *((_QWORD *)v14 + 4) = v15 + 1;
        *v15 = 10;
      }
    }
    *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
    *((_BYTE *)a1 + 193) = 1;
    if (*(_QWORD *)a1)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v17, &v16);
    return result;
  }
LABEL_10:
  if (*((_BYTE *)a2 + 21))
  {
    if ((v6 & 2) != 0)
    {
      if (*(_QWORD *)(*((_QWORD *)a2 - 4) + 24))
        goto LABEL_13;
    }
    else if (*(_QWORD *)&v5[-8 * ((v6 >> 2) & 0xF) + 24])
    {
      goto LABEL_13;
    }
    v8 = "missing global variable type";
LABEL_6:
    v17 = a2;
    v18[0] = v8;
    v19 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)v18, &v17);
  }
LABEL_13:
  if ((v6 & 2) != 0)
  {
    v10 = *(llvm::Metadata **)(*((_QWORD *)a2 - 4) + 48);
    v17 = v10;
    if (!v10)
      return result;
  }
  else
  {
    v10 = *(llvm::Metadata **)&v5[-8 * ((v6 >> 2) & 0xF) + 48];
    v17 = v10;
    if (!v10)
      return result;
  }
  if (*(_BYTE *)v10 != 13)
  {
    v18[0] = "invalid static data member declaration";
    v19 = 259;
    v16 = a2;
    v11 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v18, *(llvm::raw_ostream **)a1);
      v12 = (_BYTE *)*((_QWORD *)v11 + 4);
      if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
      {
        result = llvm::raw_ostream::write(v11, 10);
      }
      else
      {
        *((_QWORD *)v11 + 4) = v12 + 1;
        *v12 = 10;
      }
    }
    *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
    *((_BYTE *)a1 + 193) = 1;
    if (*(_QWORD *)a1)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v16, &v17);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDILocalVariable(llvm::Metadata *a1, const llvm::DIVariable *a2)
{
  llvm::Metadata *result;
  unint64_t v5;
  unint64_t *v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v9;
  llvm::Metadata **v10;
  llvm::Metadata *v11;
  llvm::raw_ostream *v12;
  unint64_t *v13;
  llvm::Metadata *v14;
  unint64_t *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  llvm::Metadata *v19;
  llvm::Metadata *v20;
  _QWORD v21[4];
  __int16 v22;

  v6 = (unint64_t *)((char *)a2 - 16);
  v5 = *((_QWORD *)a2 - 2);
  if ((v5 & 2) != 0)
  {
    v7 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 24);
    if (!v7)
      goto LABEL_6;
  }
  else
  {
    v7 = (unsigned __int8 *)v6[-((v5 >> 2) & 0xF) + 3];
    if (!v7)
      goto LABEL_6;
  }
  v8 = *v7;
  if ((v8 - 12) >= 4 && v8 != 34)
  {
    v20 = a2;
    v21[0] = "invalid type ref";
    v22 = 259;
    if ((v5 & 2) != 0)
      v13 = (unint64_t *)*((_QWORD *)a2 - 4);
    else
      v13 = &v6[-((v5 >> 2) & 0xF)];
    v19 = (llvm::Metadata *)v13[3];
    v12 = *(llvm::raw_ostream **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_29;
LABEL_26:
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v21, v12);
    v16 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v12 + 3))
    {
      result = llvm::raw_ostream::write(v12, 10);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v16 + 1;
      *v16 = 10;
    }
    goto LABEL_29;
  }
LABEL_6:
  result = (llvm::Metadata *)llvm::DINode::getTag(a2);
  if ((_DWORD)result != 52)
  {
    v20 = a2;
    v21[0] = "invalid tag";
    v22 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)v21, &v20);
  }
  v9 = *v6;
  if ((*v6 & 2) != 0)
  {
    v10 = (llvm::Metadata **)*((_QWORD *)a2 - 4);
    v11 = *v10;
    if (*v10 && *(unsigned __int8 *)v11 - 21 > 0xFFFFFFFC)
      goto LABEL_20;
  }
  else
  {
    v10 = (llvm::Metadata **)&v6[-((v9 >> 2) & 0xF)];
    v11 = *v10;
    if (*v10 && *(unsigned __int8 *)v11 - 21 >= 0xFFFFFFFD)
    {
LABEL_20:
      v14 = v10[3];
      if (v14 && *(_BYTE *)v14 == 15)
      {
        v20 = a2;
        v21[0] = "invalid type";
        v22 = 259;
        v15 = (v9 & 2) != 0 ? (unint64_t *)*((_QWORD *)a2 - 4) : &v6[-((v9 >> 2) & 0xF)];
        v19 = (llvm::Metadata *)v15[3];
        v17 = *(llvm::raw_ostream **)a1;
        if (*(_QWORD *)a1)
        {
          result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v21, *(llvm::raw_ostream **)a1);
          v18 = (_BYTE *)*((_QWORD *)v17 + 4);
          if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
          {
            result = llvm::raw_ostream::write(v17, 10);
          }
          else
          {
            *((_QWORD *)v17 + 4) = v18 + 1;
            *v18 = 10;
          }
        }
        *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
        *((_BYTE *)a1 + 193) = 1;
        if (*(_QWORD *)a1)
          return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v20, &v19);
      }
      return result;
    }
  }
  v20 = a2;
  v21[0] = "local variable requires a valid scope";
  v22 = 259;
  v19 = v11;
  v12 = *(llvm::raw_ostream **)a1;
  if (*(_QWORD *)a1)
    goto LABEL_26;
LABEL_29:
  *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
  *((_BYTE *)a1 + 193) = 1;
  if (*(_QWORD *)a1)
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v20, &v19);
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDILabel(llvm::Metadata *result, llvm::DINode *this)
{
  llvm::Metadata *v3;
  unint64_t v4;
  unint64_t *v5;
  llvm::Metadata *v6;
  int v7;
  llvm::Metadata *v8;
  unint64_t v9;
  llvm::DINode *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::DINode **v13;
  llvm::raw_ostream *v14;
  llvm::Metadata **v15;
  llvm::Metadata **v16;
  _BYTE *v17;
  llvm::DINode *v18;
  _QWORD v19[4];
  __int16 v20;
  llvm::Metadata *v21;

  v3 = result;
  v5 = (unint64_t *)((char *)this - 16);
  v4 = *((_QWORD *)this - 2);
  if ((v4 & 2) != 0)
  {
    v6 = (llvm::Metadata *)**((_QWORD **)this - 4);
    v21 = v6;
    if (!v6)
      goto LABEL_6;
  }
  else
  {
    v6 = (llvm::Metadata *)v5[-((v4 >> 2) & 0xF)];
    v21 = v6;
    if (!v6)
      goto LABEL_6;
  }
  v7 = *(unsigned __int8 *)v6;
  if ((v7 - 12) >= 0xB && (v7 - 33) >= 2)
  {
    v18 = this;
    v19[0] = "invalid scope";
    v20 = 259;
    v11 = *(llvm::raw_ostream **)result;
    if (!*(_QWORD *)result)
      goto LABEL_29;
    goto LABEL_18;
  }
LABEL_6:
  if ((v4 & 2) != 0)
  {
    v8 = *(llvm::Metadata **)(*((_QWORD *)this - 4) + 16);
    v21 = v8;
    if (!v8)
      goto LABEL_11;
  }
  else
  {
    v8 = (llvm::Metadata *)*((_QWORD *)this - ((v4 >> 2) & 0xF));
    v21 = v8;
    if (!v8)
    {
LABEL_11:
      result = (llvm::Metadata *)llvm::DINode::getTag(this);
      if ((_DWORD)result != 10)
      {
        v19[0] = "invalid tag";
        v20 = 259;
        v21 = this;
        return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(v3, (llvm::Twine *)v19, &v21);
      }
      v9 = *v5;
      if ((*v5 & 2) != 0)
      {
        v13 = (llvm::DINode **)*((_QWORD *)this - 4);
        v10 = *v13;
        if (!*v13)
        {
          v19[0] = "label requires a valid scope";
          v20 = 259;
          v21 = this;
          v18 = *v13;
          v14 = *(llvm::raw_ostream **)v3;
          if (!*(_QWORD *)v3)
            goto LABEL_37;
          goto LABEL_34;
        }
      }
      else
      {
        v10 = (llvm::DINode *)v5[-((v9 >> 2) & 0xF)];
        if (!v10)
        {
          v19[0] = "label requires a valid scope";
          v20 = 259;
          v21 = this;
          goto LABEL_23;
        }
      }
      if (*(unsigned __int8 *)v10 - 21 > 0xFFFFFFFC)
        return result;
      v19[0] = "label requires a valid scope";
      v20 = 259;
      v21 = this;
      if ((v9 & 2) != 0)
      {
        v18 = (llvm::DINode *)**((_QWORD **)this - 4);
        v14 = *(llvm::raw_ostream **)v3;
        if (!*(_QWORD *)v3)
          goto LABEL_37;
LABEL_34:
        result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v19, v14);
        v17 = (_BYTE *)*((_QWORD *)v14 + 4);
        if ((unint64_t)v17 >= *((_QWORD *)v14 + 3))
        {
          result = llvm::raw_ostream::write(v14, 10);
        }
        else
        {
          *((_QWORD *)v14 + 4) = v17 + 1;
          *v17 = 10;
        }
LABEL_37:
        *((_BYTE *)v3 + 192) |= *((_BYTE *)v3 + 194);
        *((_BYTE *)v3 + 193) = 1;
        if (*(_QWORD *)v3)
        {
          v15 = &v21;
          v16 = &v18;
          return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v3, v15, v16);
        }
        return result;
      }
LABEL_23:
      v18 = (llvm::DINode *)v5[-((v9 >> 2) & 0xF)];
      v14 = *(llvm::raw_ostream **)v3;
      if (!*(_QWORD *)v3)
        goto LABEL_37;
      goto LABEL_34;
    }
  }
  if (*(_BYTE *)v8 == 16)
    goto LABEL_11;
  v18 = this;
  v19[0] = "invalid file";
  v20 = 259;
  v11 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
LABEL_18:
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v19, v11);
    v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
    {
      result = llvm::raw_ostream::write(v11, 10);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 10;
    }
  }
LABEL_29:
  *((_BYTE *)v3 + 192) |= *((_BYTE *)v3 + 194);
  *((_BYTE *)v3 + 193) = 1;
  if (*(_QWORD *)v3)
  {
    v15 = &v18;
    v16 = &v21;
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v3, v15, v16);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIObjCProperty(llvm::Metadata *a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  char *v5;
  unint64_t v6;
  llvm::Metadata *v7;
  int v8;
  llvm::Metadata *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::Metadata *v12;
  llvm::Metadata *v13;
  _QWORD v14[4];
  __int16 v15;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 16896)
  {
    v13 = this;
    v14[0] = "invalid tag";
    v15 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)v14, &v13);
  }
  v5 = (char *)this - 16;
  v6 = *((_QWORD *)this - 2);
  if ((v6 & 2) != 0)
  {
    v7 = *(llvm::Metadata **)(*((_QWORD *)this - 4) + 32);
    v13 = v7;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
    v7 = *(llvm::Metadata **)&v5[-8 * ((v6 >> 2) & 0xF) + 32];
    v13 = v7;
    if (!v7)
      goto LABEL_9;
  }
  v8 = *(unsigned __int8 *)v7;
  if ((v8 - 12) >= 4 && v8 != 34)
  {
    v14[0] = "invalid type ref";
    v15 = 259;
    v12 = this;
    v10 = *(llvm::raw_ostream **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_21;
LABEL_18:
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v14, v10);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      result = llvm::raw_ostream::write(v10, 10);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 10;
    }
    goto LABEL_21;
  }
LABEL_9:
  if ((v6 & 2) != 0)
  {
    v9 = *(llvm::Metadata **)(*((_QWORD *)this - 4) + 8);
    v13 = v9;
    if (!v9)
      return result;
  }
  else
  {
    v9 = *(llvm::Metadata **)&v5[-8 * ((v6 >> 2) & 0xF) + 8];
    v13 = v9;
    if (!v9)
      return result;
  }
  if (*(_BYTE *)v9 == 16)
    return result;
  v14[0] = "invalid file";
  v15 = 259;
  v12 = this;
  v10 = *(llvm::raw_ostream **)a1;
  if (*(_QWORD *)a1)
    goto LABEL_18;
LABEL_21:
  *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
  *((_BYTE *)a1 + 193) = 1;
  if (*(_QWORD *)a1)
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v12, &v13);
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIImportedEntity(llvm::Metadata *a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  char *v5;
  unint64_t v6;
  llvm::Metadata *v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  char *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::Metadata *v16;
  llvm::Metadata *v17;
  _QWORD v18[4];
  __int16 v19;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 58)
  {
    result = (llvm::Metadata *)llvm::DINode::getTag(this);
    if ((_DWORD)result != 8)
    {
      v17 = this;
      v18[0] = "invalid tag";
      v19 = 259;
      return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)v18, &v17);
    }
  }
  v5 = (char *)this - 16;
  v6 = *((_QWORD *)this - 2);
  if ((v6 & 2) != 0)
  {
    v7 = (llvm::Metadata *)**((_QWORD **)this - 4);
    v17 = v7;
    if (!v7)
      goto LABEL_8;
  }
  else
  {
    v7 = *(llvm::Metadata **)&v5[-8 * ((v6 >> 2) & 0xF)];
    v17 = v7;
    if (!v7)
      goto LABEL_8;
  }
  v8 = *(unsigned __int8 *)v7;
  if ((v8 - 12) >= 0xB && (v8 - 33) >= 2)
  {
    v18[0] = "invalid scope for imported entity";
    v19 = 259;
    v16 = this;
    v12 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v18, *(llvm::raw_ostream **)a1);
      v13 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
      {
        result = llvm::raw_ostream::write(v12, 10);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v13 + 1;
        *v13 = 10;
      }
    }
    *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
    *((_BYTE *)a1 + 193) = 1;
    if (*(_QWORD *)a1)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v16, &v17);
    return result;
  }
LABEL_8:
  if ((v6 & 2) != 0)
  {
    v9 = *(unsigned __int8 **)(*((_QWORD *)this - 4) + 8);
    if (!v9)
      return result;
  }
  else
  {
    v9 = *(unsigned __int8 **)&v5[-8 * ((v6 >> 2) & 0xF) + 8];
    if (!v9)
      return result;
  }
  v10 = *v9;
  if ((v10 - 9) >= 0x16 && (v10 - 33) >= 3)
  {
    v17 = this;
    v18[0] = "invalid imported entity";
    v19 = 259;
    if ((v6 & 2) != 0)
      v11 = (char *)*((_QWORD *)this - 4);
    else
      v11 = &v5[-8 * ((v6 >> 2) & 0xF)];
    v16 = (llvm::Metadata *)*((_QWORD *)v11 + 1);
    v14 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v18, *(llvm::raw_ostream **)a1);
      v15 = (_BYTE *)*((_QWORD *)v14 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
      {
        result = llvm::raw_ostream::write(v14, 10);
      }
      else
      {
        *((_QWORD *)v14 + 4) = v15 + 1;
        *v15 = 10;
      }
    }
    *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
    *((_BYTE *)a1 + 193) = 1;
    if (*(_QWORD *)a1)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v17, &v16);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIAssignID(llvm::Metadata *result, _BYTE *a2)
{
  uint64_t v2;
  const char *v3;
  llvm::Metadata *v4;
  const char *v5;
  __int16 v6;

  v2 = *((_QWORD *)a2 - 2);
  if ((v2 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6))
      goto LABEL_3;
  }
  else if (((v2 >> 6) & 0xF) != 0)
  {
LABEL_3:
    v3 = "DIAssignID has no arguments";
    goto LABEL_7;
  }
  if ((a2[1] & 0x7F) == 1)
    return result;
  v3 = "DIAssignID must be distinct";
LABEL_7:
  v4 = (llvm::Metadata *)a2;
  v5 = v3;
  v6 = 259;
  return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(result, (llvm::Twine *)&v5, &v4);
}

llvm::MDString *`anonymous namespace'::Verifier::visitDIMacro(llvm::Metadata *a1, unsigned __int16 *a2)
{
  unint64_t v4;
  unsigned __int16 *v5;
  llvm::MDString *v6;
  const char *v7;
  uint64_t v8;
  llvm::MDString *result;
  llvm::Metadata *v10;
  const char *v11;
  __int16 v12;

  if (a2[1] - 1 >= 2)
  {
    v7 = "invalid macinfo type";
LABEL_12:
    v10 = (llvm::Metadata *)a2;
    v11 = v7;
    v12 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v11, &v10);
  }
  v5 = a2 - 8;
  v4 = *((_QWORD *)a2 - 2);
  if ((v4 & 2) != 0)
  {
    v6 = (llvm::MDString *)**((_QWORD **)a2 - 4);
    if (!v6)
    {
LABEL_11:
      v7 = "anonymous macro";
      goto LABEL_12;
    }
  }
  else
  {
    v6 = *(llvm::MDString **)&v5[-4 * ((v4 >> 2) & 0xF)];
    if (!v6)
      goto LABEL_11;
  }
  llvm::MDString::getString(v6);
  if (!v8)
    goto LABEL_11;
  if ((*(_QWORD *)v5 & 2) == 0)
  {
    result = *(llvm::MDString **)&v5[-4 * ((*(_QWORD *)v5 >> 2) & 0xFLL) + 4];
    if (!result)
      return result;
    return (llvm::MDString *)llvm::MDString::getString(result);
  }
  result = *(llvm::MDString **)(*((_QWORD *)a2 - 4) + 8);
  if (result)
    return (llvm::MDString *)llvm::MDString::getString(result);
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIMacroFile(llvm::Metadata *result, llvm::Metadata *a2)
{
  llvm::Metadata *v2;
  _WORD *v3;
  unint64_t v4;
  llvm::Metadata *v5;
  llvm::Metadata *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  llvm::Metadata **v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  uint64_t v14;
  llvm::Metadata *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  llvm::Metadata *v20;
  _QWORD v21[4];
  __int16 v22;

  v2 = result;
  if (*((_WORD *)a2 + 1) != 3)
  {
    v20 = a2;
    v21[0] = "invalid macinfo type";
    v22 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(result, (llvm::Twine *)v21, &v20);
  }
  v3 = (_WORD *)((char *)a2 - 16);
  v4 = *((_QWORD *)a2 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata *)**((_QWORD **)a2 - 4);
    v20 = v5;
    if (!v5)
      goto LABEL_9;
  }
  else
  {
    v5 = *(llvm::Metadata **)&v3[-4 * ((v4 >> 2) & 0xF)];
    v20 = v5;
    if (!v5)
      goto LABEL_9;
  }
  if (*(_BYTE *)v5 != 16)
  {
    v21[0] = "invalid file";
    v22 = 259;
    v19 = a2;
    v12 = *(llvm::raw_ostream **)result;
    if (!*(_QWORD *)result)
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_9:
  if ((v4 & 2) != 0)
  {
    v6 = *(llvm::Metadata **)(*((_QWORD *)a2 - 4) + 8);
    v20 = v6;
    if (!v6)
      return result;
  }
  else
  {
    v6 = *(llvm::Metadata **)&v3[-4 * ((v4 >> 2) & 0xF) + 4];
    v20 = v6;
    if (!v6)
      return result;
  }
  if (*(_BYTE *)v6 != 5)
  {
    v21[0] = "invalid macro list";
    v22 = 259;
    v19 = a2;
    v12 = *(llvm::raw_ostream **)result;
    if (!*(_QWORD *)result)
      goto LABEL_24;
LABEL_21:
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v21, v12);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      result = llvm::raw_ostream::write(v12, 10);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 10;
    }
LABEL_24:
    *((_BYTE *)v2 + 192) |= *((_BYTE *)v2 + 194);
    *((_BYTE *)v2 + 193) = 1;
    if (*(_QWORD *)v2)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v2, &v19, &v20);
    return result;
  }
  if ((v4 & 2) != 0)
  {
    v7 = *(_QWORD *)(*((_QWORD *)a2 - 4) + 8);
    v8 = v7 - 16;
    v9 = *(_QWORD *)(v7 - 16);
    if ((v9 & 2) != 0)
    {
LABEL_16:
      v10 = *(llvm::Metadata ***)(v7 - 32);
      v11 = *(unsigned int *)(v7 - 24);
      if (!v11)
        return result;
      goto LABEL_28;
    }
  }
  else
  {
    v7 = *(_QWORD *)&v3[-4 * ((v4 >> 2) & 0xF) + 4];
    v8 = v7 - 16;
    v9 = *(_QWORD *)(v7 - 16);
    if ((v9 & 2) != 0)
      goto LABEL_16;
  }
  v10 = (llvm::Metadata **)(v8 - 8 * ((v9 >> 2) & 0xF));
  v11 = (v9 >> 6) & 0xF;
  if (!v11)
    return result;
LABEL_28:
  v14 = 8 * v11;
  while (1)
  {
    v15 = *v10;
    v19 = v15;
    if (!v15 || *(unsigned __int8 *)v15 - 31 >= 2)
      break;
    ++v10;
    v14 -= 8;
    if (!v14)
      return result;
  }
  v21[0] = "invalid macro ref";
  v22 = 259;
  v18 = a2;
  v16 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v21, *(llvm::raw_ostream **)result);
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
    {
      result = llvm::raw_ostream::write(v16, 10);
    }
    else
    {
      *((_QWORD *)v16 + 4) = v17 + 1;
      *v17 = 10;
    }
  }
  *((_BYTE *)v2 + 192) |= *((_BYTE *)v2 + 194);
  *((_BYTE *)v2 + 193) = 1;
  if (*(_QWORD *)v2)
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v2, &v18, &v19);
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDICommonBlock(llvm::Metadata *a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  char *v5;
  unint64_t v6;
  llvm::Metadata *v7;
  int v8;
  llvm::Metadata *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::Metadata *v12;
  llvm::Metadata *v13;
  _QWORD v14[4];
  __int16 v15;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 26)
  {
    v13 = this;
    v14[0] = "invalid tag";
    v15 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)v14, &v13);
  }
  v5 = (char *)this - 16;
  v6 = *((_QWORD *)this - 2);
  if ((v6 & 2) != 0)
  {
    v7 = (llvm::Metadata *)**((_QWORD **)this - 4);
    v13 = v7;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
    v7 = *(llvm::Metadata **)&v5[-8 * ((v6 >> 2) & 0xF)];
    v13 = v7;
    if (!v7)
      goto LABEL_9;
  }
  v8 = *(unsigned __int8 *)v7;
  if ((v8 - 12) < 0xB || (v8 - 33) < 2)
  {
LABEL_9:
    if ((v6 & 2) != 0)
    {
      v9 = *(llvm::Metadata **)(*((_QWORD *)this - 4) + 8);
      v13 = v9;
      if (!v9)
        return result;
    }
    else
    {
      v9 = *(llvm::Metadata **)&v5[-8 * ((v6 >> 2) & 0xF) + 8];
      v13 = v9;
      if (!v9)
        return result;
    }
    if (*(_BYTE *)v9 == 25)
      return result;
    v14[0] = "invalid declaration";
    v15 = 259;
    v12 = this;
    v10 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
      goto LABEL_15;
    goto LABEL_21;
  }
  v14[0] = "invalid scope ref";
  v15 = 259;
  v12 = this;
  v10 = *(llvm::raw_ostream **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_15:
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v14, v10);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      result = llvm::raw_ostream::write(v10, 10);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 10;
    }
  }
LABEL_21:
  *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
  *((_BYTE *)a1 + 193) = 1;
  if (*(_QWORD *)a1)
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v12, &v13);
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIStringType(llvm::Metadata *a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  const char *v5;
  llvm::Metadata *v6;
  const char *v7;
  __int16 v8;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result == 18)
  {
    if ((~*((_DWORD *)this + 5) & 0x18000000) != 0)
      return result;
    v5 = "has conflicting flags";
  }
  else
  {
    v5 = "invalid tag";
  }
  v6 = this;
  v7 = v5;
  v8 = 259;
  return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v7, &v6);
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIGenericSubrange(llvm::Metadata *a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  char *v5;
  unint64_t v6;
  char *v7;
  const char *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  llvm::Metadata *v26;
  const char *v27;
  __int16 v28;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 69)
  {
    v8 = "invalid tag";
    goto LABEL_50;
  }
  v5 = (char *)this - 16;
  v6 = *((_QWORD *)this - 2);
  if ((v6 & 2) != 0)
  {
    v7 = (char *)*((_QWORD *)this - 4);
    if (*(_QWORD *)v7)
      goto LABEL_9;
    if (*((_QWORD *)v7 + 2))
    {
LABEL_23:
      v14 = *(unsigned __int8 **)(*((_QWORD *)this - 4) + 8);
      if (!v14)
        goto LABEL_21;
      goto LABEL_24;
    }
LABEL_31:
    v8 = "GenericSubrange must contain count or upperBound";
    goto LABEL_50;
  }
  v7 = &v5[-8 * ((v6 >> 2) & 0xF)];
  if (!*(_QWORD *)v7 && !*((_QWORD *)v7 + 2))
    goto LABEL_31;
  if (*(_QWORD *)v7)
  {
LABEL_9:
    if (!*((_QWORD *)v7 + 2))
      goto LABEL_11;
    v8 = "GenericSubrange can have any one of count or upperBound";
LABEL_50:
    v26 = this;
    v27 = v8;
    v28 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)&v27, &v26);
  }
LABEL_11:
  if ((v6 & 2) != 0)
  {
    v9 = (unsigned __int8 *)**((_QWORD **)this - 4);
    if (!v9)
      goto LABEL_19;
  }
  else
  {
    v9 = *(unsigned __int8 **)&v5[-8 * ((v6 >> 2) & 0xF)];
    if (!v9)
      goto LABEL_19;
  }
  v10 = *v9;
  v11 = v10 > 0x1A;
  v12 = (1 << v10) & 0x6000080;
  if (v11 || v12 == 0)
  {
    v8 = "Count must be signed constant or DIVariable or DIExpression";
    goto LABEL_50;
  }
LABEL_19:
  if ((v6 & 2) != 0)
    goto LABEL_23;
  v14 = *(unsigned __int8 **)&v5[-8 * ((v6 >> 2) & 0xF) + 8];
  if (!v14)
  {
LABEL_21:
    v8 = "GenericSubrange must contain lowerBound";
    goto LABEL_50;
  }
LABEL_24:
  v15 = *v14;
  v11 = v15 > 0x1A;
  v16 = (1 << v15) & 0x6000080;
  if (v11 || v16 == 0)
  {
    v8 = "LowerBound must be signed constant or DIVariable or DIExpression";
    goto LABEL_50;
  }
  if ((v6 & 2) != 0)
  {
    v18 = *(unsigned __int8 **)(*((_QWORD *)this - 4) + 16);
    if (!v18)
      goto LABEL_37;
  }
  else
  {
    v18 = (unsigned __int8 *)*((_QWORD *)this - ((v6 >> 2) & 0xF));
    if (!v18)
      goto LABEL_37;
  }
  v19 = *v18;
  v11 = v19 > 0x1A;
  v20 = (1 << v19) & 0x6000080;
  if (v11 || v20 == 0)
  {
    v8 = "UpperBound must be signed constant or DIVariable or DIExpression";
    goto LABEL_50;
  }
LABEL_37:
  if ((v6 & 2) == 0)
  {
    v22 = *(unsigned __int8 **)&v5[-8 * ((v6 >> 2) & 0xF) + 24];
    if (v22)
      goto LABEL_39;
LABEL_45:
    v8 = "GenericSubrange must contain stride";
    goto LABEL_50;
  }
  v22 = *(unsigned __int8 **)(*((_QWORD *)this - 4) + 24);
  if (!v22)
    goto LABEL_45;
LABEL_39:
  v23 = *v22;
  v11 = v23 > 0x1A;
  v24 = (1 << v23) & 0x6000080;
  if (v11 || v24 == 0)
  {
    v8 = "Stride must be signed constant or DIVariable or DIExpression";
    goto LABEL_50;
  }
  return result;
}

const llvm::Module **`anonymous namespace'::Verifier::visitValueAsMetadata(const llvm::Module **this, const llvm::ValueAsMetadata *a2, llvm::Function *a3)
{
  uint64_t v3;
  llvm::raw_ostream *v4;
  const llvm::Module *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  BOOL v9;
  const llvm::Module **v10;
  uint64_t v11;
  unsigned int v12;
  llvm::raw_ostream *v13;
  const llvm::Module *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  const char *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  const llvm::Module **v20;
  _QWORD v21[4];
  __int16 v22;

  v3 = (uint64_t)this;
  v4 = (llvm::raw_ostream *)*((_QWORD *)a2 + 16);
  if (!v4)
  {
    v20 = (const llvm::Module **)a2;
    v21[0] = "Expected valid value";
    v22 = 259;
    return llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)v21, &v20);
  }
  if (*(_BYTE *)(*(_QWORD *)v4 + 8) == 9)
  {
    v20 = (const llvm::Module **)a2;
    v21[0] = "Unexpected metadata round-trip through values";
    v22 = 259;
    v19 = v4;
    v5 = *this;
    if (*this)
    {
      this = (const llvm::Module **)llvm::Twine::print((llvm::Twine *)v21, *this);
      v6 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
      {
        this = (const llvm::Module **)llvm::raw_ostream::write(v5, 10);
        v16 = *(llvm::raw_ostream **)v3;
        *(_BYTE *)(v3 + 192) = 1;
        if (!v16)
          return this;
      }
      else
      {
        *((_QWORD *)v5 + 4) = v6 + 1;
        *v6 = 10;
        v7 = *(llvm::raw_ostream **)v3;
        *(_BYTE *)(v3 + 192) = 1;
        if (!v7)
          return this;
      }
      return (const llvm::Module **)llvm::VerifierSupport::WriteTs<llvm::ValueAsMetadata const*,llvm::Value *>((llvm::raw_ostream **)v3, (llvm::Metadata **)&v20, &v19);
    }
LABEL_22:
    *((_BYTE *)this + 192) = 1;
    return this;
  }
  v8 = *(unsigned __int8 *)a2;
  v9 = v8 == 2;
  if (v8 == 2)
    v10 = (const llvm::Module **)a2;
  else
    v10 = 0;
  v20 = v10;
  if (v9)
  {
    if (!a3)
    {
      v17 = "function-local metadata used outside a function";
LABEL_30:
      v21[0] = v17;
      v22 = 259;
      return llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)v21, &v20);
    }
    v11 = *((_QWORD *)a2 + 16);
    v12 = *(unsigned __int8 *)(v11 + 16);
    if (v12 <= 0x1B)
      v13 = 0;
    else
      v13 = (llvm::raw_ostream *)*((_QWORD *)a2 + 16);
    v19 = v13;
    if (v13)
    {
      v11 = *((_QWORD *)v13 + 5);
      if (!v11)
      {
        v21[0] = "function-local metadata not in basic block";
        v22 = 259;
        v14 = *this;
        if (!*this)
          goto LABEL_22;
        this = (const llvm::Module **)llvm::Twine::print((llvm::Twine *)v21, *this);
        v15 = (_BYTE *)*((_QWORD *)v14 + 4);
        if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
        {
          this = (const llvm::Module **)llvm::raw_ostream::write(v14, 10);
        }
        else
        {
          *((_QWORD *)v14 + 4) = v15 + 1;
          *v15 = 10;
        }
        v18 = *(llvm::raw_ostream **)v3;
        *(_BYTE *)(v3 + 192) = 1;
        if (v18)
          return (const llvm::Module **)llvm::VerifierSupport::WriteTs<llvm::ValueAsMetadata const*,llvm::Value *>((llvm::raw_ostream **)v3, (llvm::Metadata **)&v20, &v19);
        return this;
      }
    }
    else
    {
      if (v12 == 21)
      {
        if (*(llvm::Function **)(v11 + 24) == a3)
          return this;
        goto LABEL_29;
      }
      if (v12 != 22)
      {
LABEL_29:
        v17 = "function-local metadata used in wrong function";
        goto LABEL_30;
      }
    }
    if (*(llvm::Function **)(v11 + 64) == a3)
      return this;
    goto LABEL_29;
  }
  return this;
}

llvm::Metadata *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(llvm::Metadata *result, llvm::Twine *this, llvm::Metadata **a3)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;

  v4 = (uint64_t)result;
  v5 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::Metadata *)llvm::Twine::print(this, v5);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      result = llvm::raw_ostream::write(v5, 10);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 10;
    }
  }
  *(_BYTE *)(v4 + 192) |= *(_BYTE *)(v4 + 194);
  *(_BYTE *)(v4 + 193) = 1;
  if (*(_QWORD *)v4)
  {
    result = *a3;
    if (*a3)
      llvm::Metadata::print(result, *(llvm::raw_ostream **)v4, (llvm::ModuleSlotTracker *)(v4 + 16), *(const llvm::Module **)(v4 + 8));
  }
  return result;
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>(llvm::raw_ostream **a1, llvm::Metadata **a2, llvm::Metadata **a3)
{
  llvm::Metadata *result;

  if (*a2)
    llvm::Metadata::print(*a2, *a1, (llvm::ModuleSlotTracker *)(a1 + 2), a1[1]);
  result = *a3;
  if (*a3)
    llvm::Metadata::print(result, *a1, (llvm::ModuleSlotTracker *)(a1 + 2), a1[1]);
  return result;
}

llvm::raw_ostream **`anonymous namespace'::Verifier::visitDIScope(llvm::raw_ostream **this, const llvm::DIScope *a2)
{
  llvm::raw_ostream **v2;
  unint64_t v3;
  llvm::Metadata *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::Metadata *v7;
  const char *v8;
  __int16 v9;
  llvm::Metadata *v10;

  if (*(_BYTE *)a2 != 16)
  {
    v2 = this;
    v3 = *((_QWORD *)a2 - 2);
    if ((v3 & 2) != 0)
    {
      v4 = (llvm::Metadata *)**((_QWORD **)a2 - 4);
      v10 = v4;
      if (!v4)
        return this;
    }
    else
    {
      v4 = (llvm::Metadata *)*((_QWORD *)a2 - ((v3 >> 2) & 0xF) - 2);
      v10 = v4;
      if (!v4)
        return this;
    }
    if (*(_BYTE *)v4 != 16)
    {
      v7 = a2;
      v8 = "invalid file";
      v9 = 259;
      v5 = *this;
      if (*this)
      {
        this = (llvm::raw_ostream **)llvm::Twine::print((llvm::Twine *)&v8, *this);
        v6 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
        {
          this = (llvm::raw_ostream **)llvm::raw_ostream::write(v5, 10);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v6 + 1;
          *v6 = 10;
        }
      }
      *((_BYTE *)v2 + 192) |= *((_BYTE *)v2 + 194);
      *((_BYTE *)v2 + 193) = 1;
      if (*v2)
        return (llvm::raw_ostream **)llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>(v2, &v7, &v10);
    }
  }
  return this;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitTemplateParams(llvm::Metadata *this, const llvm::MDNode *a2, const llvm::Metadata *a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  llvm::Metadata *v6;
  unint64_t v7;
  llvm::Metadata **v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  uint64_t v12;
  llvm::Metadata *v13;
  llvm::Metadata *v14;
  llvm::Metadata *v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::Metadata *v18;

  v3 = (uint64_t)this;
  v4 = *(unsigned __int8 *)a3;
  v5 = v4 == 5;
  if (v4 == 5)
    v6 = a3;
  else
    v6 = 0;
  v18 = v6;
  if (v5)
  {
    v7 = *((_QWORD *)a3 - 2);
    if ((v7 & 2) != 0)
    {
      v8 = (llvm::Metadata **)*((_QWORD *)a3 - 4);
      v9 = *((unsigned int *)a3 - 6);
      if (!*((_DWORD *)a3 - 6))
        return this;
    }
    else
    {
      v8 = (llvm::Metadata **)((char *)a3 - 8 * ((v7 >> 2) & 0xF) - 16);
      v9 = (v7 >> 6) & 0xF;
      if (!v9)
        return this;
    }
    v12 = 8 * v9;
    while (1)
    {
      v13 = *v8;
      v15 = v13;
      if (!v13 || *(unsigned __int8 *)v13 - 23 >= 2)
        break;
      ++v8;
      v12 -= 8;
      if (!v12)
        return this;
    }
    v16[0] = "invalid template parameter";
    v17 = 259;
    v14 = a2;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::MDTuple const*,llvm::Metadata *>(this, (llvm::Twine *)v16, &v14, &v18, &v15);
  }
  else
  {
    v15 = a2;
    v16[0] = "invalid template params";
    v17 = 259;
    v14 = a3;
    v10 = *(llvm::raw_ostream **)this;
    if (*(_QWORD *)this)
    {
      this = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v16, *(llvm::raw_ostream **)this);
      v11 = (_BYTE *)*((_QWORD *)v10 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
      {
        this = llvm::raw_ostream::write(v10, 10);
      }
      else
      {
        *((_QWORD *)v10 + 4) = v11 + 1;
        *v11 = 10;
      }
    }
    *(_BYTE *)(v3 + 192) |= *(_BYTE *)(v3 + 194);
    *(_BYTE *)(v3 + 193) = 1;
    if (*(_QWORD *)v3)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v3, &v15, &v14);
  }
  return this;
}

llvm::Metadata *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::MDTuple const*,llvm::Metadata *>(llvm::Metadata *result, llvm::Twine *this, llvm::Metadata **a3, llvm::Metadata **a4, llvm::Metadata **a5)
{
  uint64_t v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;

  v8 = (uint64_t)result;
  v9 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::Metadata *)llvm::Twine::print(this, v9);
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
    {
      result = llvm::raw_ostream::write(v9, 10);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 10;
    }
  }
  *(_BYTE *)(v8 + 192) |= *(_BYTE *)(v8 + 194);
  *(_BYTE *)(v8 + 193) = 1;
  if (*(_QWORD *)v8)
  {
    if (*a3)
      llvm::Metadata::print(*a3, *(llvm::raw_ostream **)v8, (llvm::ModuleSlotTracker *)(v8 + 16), *(const llvm::Module **)(v8 + 8));
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v8, a4, a5);
  }
  return result;
}

llvm::Metadata *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DICompileUnit const*,llvm::Metadata *>(llvm::Metadata *result, llvm::Twine *this, llvm::Metadata **a3, llvm::Metadata **a4)
{
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  v6 = (uint64_t)result;
  v7 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::Metadata *)llvm::Twine::print(this, v7);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      result = llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 10;
    }
  }
  *(_BYTE *)(v6 + 192) |= *(_BYTE *)(v6 + 194);
  *(_BYTE *)(v6 + 193) = 1;
  if (*(_QWORD *)v6)
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v6, a3, a4);
  return result;
}

void *`anonymous namespace'::Verifier::verifySourceDebugInfo(void *result, uint64_t a2, llvm::MDString *this)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  uint64_t *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  const char *v52;
  __int16 v53;

  v5 = (uint64_t)result;
  if (this)
    result = (void *)llvm::MDString::getString(this);
  v6 = *(_DWORD *)(v5 + 824);
  v7 = a2 >> 4;
  if (!v6)
  {
    v17 = this != 0;
    goto LABEL_57;
  }
  v8 = *(_QWORD *)(v5 + 808);
  v9 = v6 - 1;
  v10 = (v6 - 1) & (v7 ^ (a2 >> 9));
  v11 = (uint64_t *)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    v14 = *v11;
    v15 = v9 & (v7 ^ (a2 >> 9));
    while (v14 != -4096)
    {
      v16 = v15 + v13++;
      v15 = v16 & v9;
      v14 = *(_QWORD *)(v8 + 16 * v15);
      if (v14 == a2)
        goto LABEL_15;
    }
    v35 = 0;
    v17 = this != 0;
    v36 = 1;
    while (v12 != -4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v12 == -8192;
      if (v37)
        v35 = v11;
      v38 = v10 + v36++;
      v10 = v38 & v9;
      v11 = (uint64_t *)(v8 + 16 * (v38 & v9));
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_14;
    }
    if (v35)
      v11 = v35;
    v39 = *(_DWORD *)(v5 + 816);
    if (4 * v39 + 4 < 3 * v6)
    {
      if (v6 + ~v39 - *(_DWORD *)(v5 + 820) > v6 >> 3)
        goto LABEL_11;
      goto LABEL_58;
    }
LABEL_57:
    v6 *= 2;
LABEL_58:
    result = llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow(v5 + 808, v6);
    v40 = *(_QWORD *)(v5 + 808);
    v6 = *(_DWORD *)(v5 + 824);
    v41 = v6 - 1;
    v42 = (v6 - 1) & (v7 ^ (a2 >> 9));
    v11 = (uint64_t *)(v40 + 16 * v42);
    v43 = *v11;
    if (*v11 == a2)
    {
LABEL_59:
      ++*(_DWORD *)(v5 + 816);
      if (a2 == -4096)
      {
LABEL_13:
        *v11 = a2;
        *((_BYTE *)v11 + 8) = 0;
        v8 = *(_QWORD *)(v5 + 808);
LABEL_14:
        *((_BYTE *)v11 + 8) = v17;
LABEL_15:
        if (!v6)
          goto LABEL_41;
        goto LABEL_16;
      }
LABEL_12:
      --*(_DWORD *)(v5 + 820);
      goto LABEL_13;
    }
    v44 = 0;
    v45 = 1;
    while (v43 != -4096)
    {
      if (v44)
        v46 = 0;
      else
        v46 = v43 == -8192;
      if (v46)
        v44 = v11;
      v47 = v42 + v45++;
      v42 = v47 & v41;
      v11 = (uint64_t *)(v40 + 16 * (v47 & v41));
      v43 = *v11;
      if (*v11 == a2)
        goto LABEL_59;
    }
    if (v44)
      v11 = v44;
LABEL_11:
    v18 = *v11;
    ++*(_DWORD *)(v5 + 816);
    if (v18 == -4096)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_16:
  v19 = v6 - 1;
  v20 = (v6 - 1) & (v7 ^ (a2 >> 9));
  v21 = (uint64_t *)(v8 + 16 * v20);
  v22 = *v21;
  if (*v21 == a2)
    goto LABEL_17;
  v26 = 0;
  v27 = 1;
  while (v22 != -4096)
  {
    if (v26)
      v28 = 0;
    else
      v28 = v22 == -8192;
    if (v28)
      v26 = v21;
    v29 = v20 + v27++;
    v20 = v29 & v19;
    v21 = (uint64_t *)(v8 + 16 * (v29 & v19));
    v22 = *v21;
    if (*v21 == a2)
      goto LABEL_17;
  }
  if (v26)
    v21 = v26;
  v30 = *(_DWORD *)(v5 + 816);
  if (4 * v30 + 4 < 3 * v6)
  {
    if (v6 + ~v30 - *(_DWORD *)(v5 + 820) > v6 >> 3)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_41:
  v6 *= 2;
LABEL_42:
  result = llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow(v5 + 808, v6);
  v31 = *(_QWORD *)(v5 + 808);
  v32 = *(_DWORD *)(v5 + 824) - 1;
  v33 = v32 & (v7 ^ (a2 >> 9));
  v21 = (uint64_t *)(v31 + 16 * v33);
  v34 = *v21;
  if (*v21 == a2)
  {
LABEL_43:
    ++*(_DWORD *)(v5 + 816);
    if (a2 == -4096)
      goto LABEL_28;
    goto LABEL_27;
  }
  v48 = 0;
  v49 = 1;
  while (v34 != -4096)
  {
    if (v48)
      v50 = 0;
    else
      v50 = v34 == -8192;
    if (v50)
      v48 = v21;
    v51 = v33 + v49++;
    v33 = v51 & v32;
    v21 = (uint64_t *)(v31 + 16 * (v51 & v32));
    v34 = *v21;
    if (*v21 == a2)
      goto LABEL_43;
  }
  if (v48)
    v21 = v48;
LABEL_26:
  v25 = *v21;
  ++*(_DWORD *)(v5 + 816);
  if (v25 != -4096)
LABEL_27:
    --*(_DWORD *)(v5 + 820);
LABEL_28:
  *v21 = a2;
  *((_BYTE *)v21 + 8) = 0;
LABEL_17:
  if (*((_BYTE *)v21 + 8) != (this != 0))
  {
    v52 = "inconsistent use of embedded source";
    v53 = 259;
    v23 = *(llvm::raw_ostream **)v5;
    if (*(_QWORD *)v5)
    {
      result = llvm::Twine::print((llvm::Twine *)&v52, *(llvm::raw_ostream **)v5);
      v24 = (_BYTE *)*((_QWORD *)v23 + 4);
      if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
      {
        result = llvm::raw_ostream::write(v23, 10);
      }
      else
      {
        *((_QWORD *)v23 + 4) = v24 + 1;
        *v24 = 10;
      }
    }
    *(_BYTE *)(v5 + 192) |= *(_BYTE *)(v5 + 194);
    *(_BYTE *)(v5 + 193) = 1;
  }
  return result;
}

_QWORD *llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_39;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_39:
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if ((_DWORD)v3)
    {
      v15 = 0;
      v16 = v11 - 1;
      v17 = v4;
      do
      {
        v24 = *(_QWORD *)v17;
        if ((*(_QWORD *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = ((v24 >> 4) ^ (v24 >> 9)) & v16;
          v23 = *(_QWORD *)a1 + 16 * v25;
          v26 = *(_QWORD *)v23;
          if (v24 != *(_QWORD *)v23)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v23;
              v30 = v25 + v28++;
              v25 = v30 & v16;
              v23 = *(_QWORD *)a1 + 16 * (v30 & v16);
              v26 = *(_QWORD *)v23;
              if (v24 == *(_QWORD *)v23)
                goto LABEL_23;
            }
            if (v27)
              v23 = v27;
          }
LABEL_23:
          *(_QWORD *)v23 = v24;
          *(_BYTE *)(v23 + 8) = *((_BYTE *)v17 + 8);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_18;
    v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    v20 = result + 2;
    v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -4096;
      *v20 = -4096;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v22 = &result[2 * v18];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram const*,unsigned int>(llvm::raw_ostream *result, llvm::Twine *this, llvm::Metadata **a3, unsigned int *a4)
{
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  _BYTE *v9;

  v6 = (uint64_t)result;
  v7 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::raw_ostream *)llvm::Twine::print(this, v7);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      result = llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 10;
    }
  }
  *(_BYTE *)(v6 + 192) |= *(_BYTE *)(v6 + 194);
  *(_BYTE *)(v6 + 193) = 1;
  if (*(_QWORD *)v6)
  {
    if (*a3)
      llvm::Metadata::print(*a3, *(llvm::raw_ostream **)v6, (llvm::ModuleSlotTracker *)(v6 + 16), *(const llvm::Module **)(v6 + 8));
    result = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)v6, *a4);
    v9 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v9 >= *((_QWORD *)result + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v9 + 1;
      *v9 = 10;
    }
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDILexicalBlockBase(llvm::Metadata *a1, llvm::DINode *this)
{
  llvm::Metadata *result;
  unint64_t v5;
  llvm::Metadata *v6;
  int v7;
  const char *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::Metadata *v11;
  llvm::Metadata *v12;
  _QWORD v13[4];
  __int16 v14;

  result = (llvm::Metadata *)llvm::DINode::getTag(this);
  if ((_DWORD)result != 11)
  {
    v8 = "invalid tag";
LABEL_7:
    v12 = this;
    v13[0] = v8;
    v14 = 259;
    return llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(a1, (llvm::Twine *)v13, &v12);
  }
  v5 = *((_QWORD *)this - 2);
  if ((v5 & 2) == 0)
  {
    v6 = (llvm::Metadata *)*((_QWORD *)this - ((v5 >> 2) & 0xF) - 1);
    if (v6)
    {
      v7 = *(unsigned __int8 *)v6;
      if ((v7 - 21) >= 0xFFFFFFFD)
        goto LABEL_14;
    }
LABEL_11:
    v12 = this;
    v13[0] = "invalid local scope";
    v14 = 259;
    v11 = v6;
    v9 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v13, *(llvm::raw_ostream **)a1);
      v10 = (_BYTE *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
      {
        result = llvm::raw_ostream::write(v9, 10);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v10 + 1;
        *v10 = 10;
      }
    }
    *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
    *((_BYTE *)a1 + 193) = 1;
    if (*(_QWORD *)a1)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)a1, &v12, &v11);
    return result;
  }
  v6 = *(llvm::Metadata **)(*((_QWORD *)this - 4) + 8);
  if (!v6)
    goto LABEL_11;
  v7 = *(unsigned __int8 *)v6;
  if ((v7 - 21) <= 0xFFFFFFFC)
    goto LABEL_11;
LABEL_14:
  if (v7 == 18 && (*((_BYTE *)v6 + 36) & 8) == 0)
  {
    v8 = "scope points into the type hierarchy";
    goto LABEL_7;
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDITemplateParameter(llvm::Metadata *result, llvm::Metadata *a2)
{
  llvm::Metadata *v2;
  char *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::Metadata *v9;
  llvm::Metadata *v10;
  const char *v11;
  __int16 v12;

  v2 = result;
  v3 = (char *)a2 - 16;
  v4 = *((_QWORD *)a2 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = *(unsigned __int8 **)(*((_QWORD *)a2 - 4) + 8);
    if (!v5)
      return result;
  }
  else
  {
    v5 = *(unsigned __int8 **)&v3[-8 * ((v4 >> 2) & 0xF) + 8];
    if (!v5)
      return result;
  }
  v6 = *v5;
  if ((v6 - 12) >= 4 && v6 != 34)
  {
    v10 = a2;
    v11 = "invalid type ref";
    v12 = 259;
    if ((v4 & 2) != 0)
    {
      v9 = *(llvm::Metadata **)(*((_QWORD *)a2 - 4) + 8);
      v7 = *(llvm::raw_ostream **)result;
      if (!*(_QWORD *)result)
        goto LABEL_14;
    }
    else
    {
      v9 = *(llvm::Metadata **)&v3[-8 * ((v4 >> 2) & 0xF) + 8];
      v7 = *(llvm::raw_ostream **)result;
      if (!*(_QWORD *)result)
      {
LABEL_14:
        *((_BYTE *)v2 + 192) |= *((_BYTE *)v2 + 194);
        *((_BYTE *)v2 + 193) = 1;
        if (*(_QWORD *)v2)
          return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v2, &v10, &v9);
        return result;
      }
    }
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)&v11, v7);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      result = llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 10;
    }
    goto LABEL_14;
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIVariable(llvm::Metadata *this, const llvm::DIVariable *a2)
{
  uint64_t v2;
  unint64_t v3;
  llvm::Metadata *v4;
  int v5;
  llvm::Metadata *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::Metadata *v9;
  const char *v10;
  __int16 v11;
  llvm::Metadata *v12;

  v2 = (uint64_t)this;
  v3 = *((_QWORD *)a2 - 2);
  if ((v3 & 2) != 0)
  {
    v4 = (llvm::Metadata *)**((_QWORD **)a2 - 4);
    v12 = v4;
    if (!v4)
      goto LABEL_6;
  }
  else
  {
    v4 = (llvm::Metadata *)*((_QWORD *)a2 - ((v3 >> 2) & 0xF) - 2);
    v12 = v4;
    if (!v4)
      goto LABEL_6;
  }
  v5 = *(unsigned __int8 *)v4;
  if ((v5 - 12) >= 0xB && (v5 - 33) >= 2)
  {
    v9 = a2;
    v10 = "invalid scope";
    v11 = 259;
    v7 = *(llvm::raw_ostream **)this;
    if (*(_QWORD *)this)
    {
LABEL_12:
      this = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)&v10, v7);
      v8 = (_BYTE *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
      {
        this = llvm::raw_ostream::write(v7, 10);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v8 + 1;
        *v8 = 10;
      }
    }
LABEL_18:
    *(_BYTE *)(v2 + 192) |= *(_BYTE *)(v2 + 194);
    *(_BYTE *)(v2 + 193) = 1;
    if (*(_QWORD *)v2)
      return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v2, &v9, &v12);
    return this;
  }
LABEL_6:
  if ((v3 & 2) != 0)
  {
    v6 = *(llvm::Metadata **)(*((_QWORD *)a2 - 4) + 16);
    v12 = v6;
    if (!v6)
      return this;
  }
  else
  {
    v6 = (llvm::Metadata *)*((_QWORD *)a2 - ((v3 >> 2) & 0xF));
    v12 = v6;
    if (!v6)
      return this;
  }
  if (*(_BYTE *)v6 != 16)
  {
    v9 = a2;
    v10 = "invalid file";
    v11 = 259;
    v7 = *(llvm::raw_ostream **)this;
    if (*(_QWORD *)this)
      goto LABEL_12;
    goto LABEL_18;
  }
  return this;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::ValueAsMetadata const*,llvm::Value *>(llvm::raw_ostream **a1, llvm::Metadata **a2, llvm::raw_ostream **a3)
{
  llvm::raw_ostream *result;
  llvm::raw_ostream *v5;
  _BYTE *v6;

  if (*a2)
    llvm::Metadata::print(*a2, *a1, (llvm::ModuleSlotTracker *)(a1 + 2), a1[1]);
  result = *a3;
  if (*a3)
  {
    v5 = *a1;
    if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
      llvm::Value::print(result, v5, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)result, v5, 1, a1 + 2);
    result = *a1;
    v6 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)*a1 + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v6 + 1;
      *v6 = 10;
    }
  }
  return result;
}

llvm::Metadata *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::Metadata *>(llvm::Metadata *result, llvm::Twine *this, llvm::Metadata **a3, unsigned __int8 **a4, unsigned __int8 **a5, llvm::Metadata **a6, llvm::Metadata **a7)
{
  uint64_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;

  v12 = (uint64_t)result;
  v13 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::Metadata *)llvm::Twine::print(this, v13);
    v14 = (_BYTE *)*((_QWORD *)v13 + 4);
    if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
    {
      result = llvm::raw_ostream::write(v13, 10);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v14 + 1;
      *v14 = 10;
    }
  }
  *(_BYTE *)(v12 + 192) |= *(_BYTE *)(v12 + 194);
  *(_BYTE *)(v12 + 193) = 1;
  if (*(_QWORD *)v12)
  {
    if (*a3)
      llvm::Metadata::print(*a3, *(llvm::raw_ostream **)v12, (llvm::ModuleSlotTracker *)(v12 + 16), *(const llvm::Module **)(v12 + 8));
    return llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::Metadata *>((_anonymous_namespace_::TypePrinting **)v12, a4, a5, a6, a7);
  }
  return result;
}

llvm::Metadata *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>(llvm::Metadata *result, llvm::Twine *this, llvm::Metadata **a3, unsigned __int8 **a4, unsigned __int8 **a5, llvm::Metadata **a6, llvm::Metadata **a7, llvm::Metadata **a8)
{
  uint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;

  v14 = (uint64_t)result;
  v15 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::Metadata *)llvm::Twine::print(this, v15);
    v16 = (_BYTE *)*((_QWORD *)v15 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
    {
      result = llvm::raw_ostream::write(v15, 10);
    }
    else
    {
      *((_QWORD *)v15 + 4) = v16 + 1;
      *v16 = 10;
    }
  }
  *(_BYTE *)(v14 + 192) |= *(_BYTE *)(v14 + 194);
  *(_BYTE *)(v14 + 193) = 1;
  if (*(_QWORD *)v14)
  {
    if (*a3)
      llvm::Metadata::print(*a3, *(llvm::raw_ostream **)v14, (llvm::ModuleSlotTracker *)(v14 + 16), *(const llvm::Module **)(v14 + 8));
    return llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>((_anonymous_namespace_::TypePrinting **)v14, a4, a5, a6, a7, a8);
  }
  return result;
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::Metadata *>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, unsigned __int8 **a3, llvm::Metadata **a4, llvm::Metadata **a5)
{
  unsigned __int8 *v9;
  llvm::raw_ostream *v10;
  _anonymous_namespace_::TypePrinting *v11;
  _BYTE *v12;

  v9 = *a2;
  if (*a2)
  {
    v10 = *a1;
    if (v9[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v9, v10, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v9, v10, 1, a1 + 2);
    v11 = *a1;
    v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v11, 10);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::DILocation const*,llvm::Metadata *>(a1, a3, a4, a5);
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::DILocation const*,llvm::Metadata *>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, llvm::Metadata **a3, llvm::Metadata **a4)
{
  unsigned __int8 *v7;
  llvm::raw_ostream *v8;
  _anonymous_namespace_::TypePrinting *v9;
  _BYTE *v10;

  v7 = *a2;
  if (*a2)
  {
    v8 = *a1;
    if (v7[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v7, v8, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v7, v8, 1, a1 + 2);
    v9 = *a1;
    v10 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v9, 10);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>(a1, a3, a4);
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, unsigned __int8 **a3, llvm::Metadata **a4, llvm::Metadata **a5, llvm::Metadata **a6)
{
  unsigned __int8 *v11;
  llvm::raw_ostream *v12;
  _anonymous_namespace_::TypePrinting *v13;
  _BYTE *v14;

  v11 = *a2;
  if (*a2)
  {
    v12 = *a1;
    if (v11[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v11, v12, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v11, v12, 1, a1 + 2);
    v13 = *a1;
    v14 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v14 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v13, 10);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v14 + 1;
      *v14 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>(a1, a3, a4, a5, a6);
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>(llvm::raw_ostream **a1, unsigned __int8 **a2, llvm::Metadata **a3, llvm::Metadata **a4, llvm::Metadata **a5)
{
  unsigned __int8 *v9;
  llvm::raw_ostream *v10;
  llvm::Metadata *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;

  v9 = *a2;
  if (!*a2)
  {
LABEL_5:
    v11 = *a3;
    if (*a3)
      goto LABEL_9;
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>(a1, a4, a5);
  }
  v10 = *a1;
  if (v9[16] >= 0x1Cu)
    llvm::Value::print((llvm::Value *)v9, v10, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
  llvm::Value::printAsOperand((Type **)v9, v10, 1, a1 + 2);
  v12 = *a1;
  v13 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v12, 10);
    goto LABEL_5;
  }
  *((_QWORD *)v12 + 4) = v13 + 1;
  *v13 = 10;
  v11 = *a3;
  if (*a3)
LABEL_9:
    llvm::Metadata::print(v11, *a1, (llvm::ModuleSlotTracker *)(a1 + 2), a1[1]);
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>(a1, a4, a5);
}

uint64_t llvm::array_pod_sort_comparator<llvm::BasicBlock *>(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t *v22;
  char v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *i;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *j;
  unint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t *v65;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = a2 - 2;
  v63 = a2 - 6;
  v64 = a2 - 4;
  v10 = v8;
  v65 = a2;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = (char *)a2 - (char *)v10;
    v13 = v12 >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(a2 - 2);
        v26 = *v8;
        if (v25 < *v8 || v26 >= v25 && *(a2 - 1) < v8[1])
        {
          *v8 = v25;
          *(a2 - 2) = v26;
          v27 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v27;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v8, v8 + 2, v9);
      case 4uLL:
        result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v8, v8 + 2, v8 + 4);
        v28 = *(a2 - 2);
        v29 = v8[4];
        if (v28 >= v29 && (v29 < v28 || *(a2 - 1) >= v8[5]))
          return result;
        v8[4] = v28;
        *(a2 - 2) = v29;
        v30 = v8[5];
        v8[5] = *(a2 - 1);
        *(a2 - 1) = v30;
        v31 = v8[4];
        v32 = v8[2];
        if (v31 >= v32)
        {
          if (v32 < v31)
            return result;
          v34 = v8[5];
          v33 = v8[3];
          if (v34 >= v33)
            return result;
        }
        else
        {
          v33 = v8[3];
          v34 = v8[5];
        }
        v8[2] = v31;
        v8[3] = v34;
        v8[4] = v32;
        v8[5] = v33;
        v35 = *v8;
        if (v31 < *v8)
        {
          v36 = v8[1];
LABEL_88:
          *v8 = v31;
          v8[1] = v34;
          v8[2] = v35;
          v8[3] = v36;
          return result;
        }
        if (v35 >= v31)
        {
          v36 = v8[1];
          if (v34 < v36)
            goto LABEL_88;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v8, v8 + 2, v8 + 4, v8 + 6, v9);
      default:
        if (v12 > 383)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if (v8 != a2)
            {
              v51 = (v13 - 2) >> 1;
              v52 = v51 + 1;
              v53 = &v8[2 * v51];
              do
              {
                std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>((uint64_t)v8, a3, v12 >> 4, v53);
                v53 -= 2;
                --v52;
              }
              while (v52);
              v54 = (unint64_t)v12 >> 4;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v8, (uint64_t)a2, a3, v54);
                a2 -= 2;
              }
              while (v54-- > 2);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = &v8[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v16, v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v8, v16, v9);
            v17 = a5;
            v18 = v9;
            v19 = &v8[2 * v15];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v8 + 2, v19 - 2, v64);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v8 + 4, &v8[2 * v15 + 2], v63);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v19 - 2, v16, &v8[2 * v15 + 2]);
            v20 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v19;
            *(_OWORD *)v19 = v20;
            v9 = v18;
            a5 = v17;
            a2 = v65;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v21 = *(v8 - 2);
          if (v21 >= *v8 && (*v8 < v21 || *(v8 - 1) >= v8[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<llvm::BasicBlock *,llvm::Value *> *,std::__less<void,void> &>(v8, a2);
            v10 = (unint64_t *)result;
            goto LABEL_19;
          }
LABEL_14:
          v22 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<llvm::BasicBlock *,llvm::Value *> *,std::__less<void,void> &>(v8, a2);
          if ((v23 & 1) == 0)
            goto LABEL_17;
          v24 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v8, v22);
          v10 = v22 + 2;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v22 + 2, a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v24)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *,false>(v8, v22, a3, -v14, a5 & 1);
            v10 = v22 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v22;
          if (v24)
            return result;
          goto LABEL_2;
        }
        v37 = v8 + 2;
        v39 = v8 == a2 || v37 == a2;
        if ((a5 & 1) != 0)
        {
          if (v39)
            return result;
          v40 = 0;
          v41 = v8;
LABEL_44:
          v43 = v41;
          v41 = v37;
          v44 = v43[2];
          v45 = *v43;
          if (v44 >= *v43)
          {
            if (v45 < v44)
              goto LABEL_43;
            v46 = v43[3];
            if (v46 >= v43[1])
              goto LABEL_43;
          }
          else
          {
            v46 = v43[3];
          }
          v43[2] = v45;
          v41[1] = v43[1];
          v42 = v8;
          if (v43 == v8)
            goto LABEL_42;
          v47 = v40;
          while (1)
          {
            v50 = *(unint64_t *)((char *)v8 + v47 - 16);
            if (v44 < v50)
            {
              v48 = *(unint64_t *)((char *)v8 + v47 - 8);
            }
            else
            {
              if (v50 < v44)
              {
                v42 = (unint64_t *)((char *)v8 + v47);
LABEL_42:
                *v42 = v44;
                v42[1] = v46;
LABEL_43:
                v37 = v41 + 2;
                v40 += 16;
                if (v41 + 2 == a2)
                  return result;
                goto LABEL_44;
              }
              v48 = *(unint64_t *)((char *)v8 + v47 - 8);
              if (v46 >= v48)
              {
                v42 = v43;
                goto LABEL_42;
              }
            }
            v43 -= 2;
            v49 = (unint64_t *)((char *)v8 + v47);
            *v49 = v50;
            v49[1] = v48;
            v47 -= 16;
            if (!v47)
            {
              v42 = v8;
              goto LABEL_42;
            }
          }
        }
        if (!v39)
        {
          for (i = v8 + 1; ; i += 2)
          {
            v57 = v8;
            v8 = v37;
            v58 = v57[2];
            v59 = *v57;
            if (v58 < *v57)
              break;
            if (v59 >= v58)
            {
              v60 = v57[3];
              if (v60 < v57[1])
                goto LABEL_77;
            }
LABEL_72:
            v37 = v8 + 2;
            if (v8 + 2 == a2)
              return result;
          }
          v60 = v57[3];
LABEL_77:
          for (j = i; ; j -= 2)
          {
            v62 = *j;
            j[1] = v59;
            j[2] = v62;
            v59 = *(j - 3);
            if (v58 >= v59 && (v59 < v58 || v60 >= *(j - 2)))
              break;
          }
          *(j - 1) = v58;
          *j = v60;
          goto LABEL_72;
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 < v3)
      goto LABEL_7;
    if (v3 < v9)
      return 0;
    if (a3[1] < a2[1])
    {
LABEL_7:
      *a2 = v9;
      *a3 = v3;
      v11 = (uint64_t *)(a2 + 1);
      v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      v12 = *a2;
      v13 = *a1;
      if (*a2 < *a1)
        goto LABEL_8;
      if (v13 < v12)
        return 1;
      if (*v11 < a1[1])
      {
LABEL_8:
        *a1 = v12;
        v14 = (uint64_t *)(a1 + 1);
        *a2 = v13;
        v15 = *v14;
        *v14 = *v11;
        *v11 = v15;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (uint64_t *)(a1 + 1);
      *a3 = v4;
      v7 = (uint64_t *)(a3 + 1);
      v8 = 1;
LABEL_13:
      v20 = *v6;
      *v6 = *v7;
      *v7 = v20;
      return v8;
    }
    *a1 = v3;
    *a2 = v4;
    v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    v18 = *a3;
    v19 = *a2;
    if (*a3 < *a2)
    {
LABEL_12:
      *a2 = v18;
      *a3 = v19;
      v7 = (uint64_t *)(a3 + 1);
      v8 = 2;
      v6 = (uint64_t *)(a2 + 1);
      goto LABEL_13;
    }
    if (v19 >= v18)
    {
      if (a3[1] < v17)
        goto LABEL_12;
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

unint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<llvm::BasicBlock *,llvm::Value *> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<llvm::BasicBlock *,llvm::Value *> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unint64_t *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unint64_t *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        v17 = *(v14 - 2);
        v14 -= 2;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = *(a2 - 2);
      v19 = *a1;
      if (v18 < *a1 || v19 >= v18 && *(a2 - 1) < a1[1])
      {
        *a1 = v18;
        *(a2 - 2) = v19;
        v20 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v20;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a1 + 4);
      v21 = *(a2 - 2);
      v22 = a1[4];
      if (v21 >= v22 && (v22 < v21 || *(a2 - 1) >= a1[5]))
        return 1;
      a1[4] = v21;
      *(a2 - 2) = v22;
      v23 = a1[5];
      a1[5] = *(a2 - 1);
      *(a2 - 1) = v23;
      v24 = a1[4];
      v25 = a1[2];
      if (v24 >= v25)
      {
        if (v25 < v24)
          return 1;
        v27 = a1[5];
        v26 = a1[3];
        if (v27 >= v26)
          return 1;
      }
      else
      {
        v26 = a1[3];
        v27 = a1[5];
      }
      a1[2] = v24;
      a1[3] = v27;
      a1[4] = v25;
      a1[5] = v26;
      v28 = *a1;
      if (v24 < *a1)
      {
        v29 = a1[1];
LABEL_44:
        *a1 = v24;
        a1[1] = v27;
        result = 1;
        a1[2] = v28;
        a1[3] = v29;
        return result;
      }
      if (v28 >= v24)
      {
        v29 = a1[1];
        if (v27 < v29)
          goto LABEL_44;
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v6 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a1 + 4);
      v7 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *v7;
        v12 = *v6;
        if (*v7 >= *v6)
        {
          if (v12 < v11)
            goto LABEL_7;
          v13 = v7[1];
          if (v13 >= v6[1])
            goto LABEL_7;
        }
        else
        {
          v13 = v7[1];
        }
        *v7 = v12;
        v7[1] = v6[1];
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v14 = v8;
        while (2)
        {
          v16 = (char *)a1 + v14;
          v17 = *(unint64_t *)((char *)a1 + v14 + 16);
          if (v11 < v17)
          {
            v15 = *((_QWORD *)v16 + 3);
LABEL_13:
            v6 -= 2;
            *((_QWORD *)v16 + 4) = v17;
            *(unint64_t *)((char *)a1 + v14 + 40) = v15;
            v14 -= 16;
            if (v14 == -32)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v17 >= v11)
        {
          v15 = *(unint64_t *)((char *)a1 + v14 + 24);
          if (v13 >= v15)
          {
            v10 = (unint64_t *)((char *)a1 + v14 + 32);
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *v10 = v11;
        v10[1] = v13;
        if (++v9 == 8)
          return v7 + 2 == a2;
LABEL_7:
        v6 = v7;
        v8 += 16;
        v7 += 2;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a2, a3);
  v11 = *a4;
  v12 = *a3;
  if (*a4 < *a3 || v12 >= v11 && a4[1] < a3[1])
  {
    *a3 = v11;
    *a4 = v12;
    v13 = a3[1];
    a3[1] = a4[1];
    a4[1] = v13;
    v14 = *a3;
    v15 = *a2;
    if (*a3 < *a2 || v15 >= v14 && a3[1] < a2[1])
    {
      *a2 = v14;
      *a3 = v15;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = *a2;
      v18 = *a1;
      if (*a2 < *a1 || v18 >= v17 && a2[1] < a1[1])
      {
        *a1 = v17;
        *a2 = v18;
        v19 = a1[1];
        a1[1] = a2[1];
        a2[1] = v19;
      }
    }
  }
  v20 = *a5;
  v21 = *a4;
  if (*a5 < *a4 || v21 >= v20 && a5[1] < a4[1])
  {
    *a4 = v20;
    *a5 = v21;
    v22 = a4[1];
    a4[1] = a5[1];
    a5[1] = v22;
    v23 = *a4;
    v24 = *a3;
    if (*a4 < *a3 || v24 >= v23 && a4[1] < a3[1])
    {
      *a3 = v23;
      *a4 = v24;
      v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      v26 = *a3;
      v27 = *a2;
      if (*a3 < *a2 || v27 >= v26 && a3[1] < a2[1])
      {
        *a2 = v26;
        *a3 = v27;
        v28 = a2[1];
        a2[1] = a3[1];
        a3[1] = v28;
        v29 = *a2;
        v30 = *a1;
        if (*a2 < *a1 || v30 >= v29 && a2[1] < a1[1])
        {
          *a1 = v29;
          *a2 = v30;
          v31 = a1[1];
          a1[1] = a2[1];
          a2[1] = v31;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_QWORD *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v13 = a4[1];
          if (v8[1] < v13)
            return result;
        }
        else
        {
          v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unint64_t *)(result + 16 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_QWORD *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v14 = v8;
LABEL_14:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unint64_t *std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = result[1];
    v7 = result;
    do
    {
      v8 = v7;
      v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v11 < a4)
      {
        v12 = v7[2];
        if (*v7 < v12 || v12 >= *v7 && v8[2 * v9 + 1] < v7[3])
        {
          v7 += 2;
          v4 = v11;
        }
      }
      *v8 = *v7;
      v8[1] = v7[1];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (unint64_t *)(a2 - 16))
    {
      *v7 = v5;
      v7[1] = v6;
      return result;
    }
    *v7 = *(_QWORD *)(a2 - 16);
    v7[1] = *(_QWORD *)(a2 - 8);
    *(_QWORD *)(a2 - 16) = v5;
    *(_QWORD *)(a2 - 8) = v6;
    v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      v14 = ((unint64_t)v13 >> 4) - 2;
      v15 = v14 >> 1;
      v16 = &result[2 * (v14 >> 1)];
      v17 = *v16;
      v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17)
          return result;
        v19 = v7[1];
        if (result[2 * v15 + 1] >= v19)
          return result;
      }
      else
      {
        v19 = v7[1];
      }
      *v7 = v17;
      v7[1] = result[2 * v15 + 1];
      if (v14 >= 2)
      {
        while (1)
        {
          v22 = v15 - 1;
          v15 = (v15 - 1) >> 1;
          v20 = &result[2 * v15];
          v23 = *v20;
          if (*v20 < v18)
          {
            v21 = v20[1];
          }
          else
          {
            if (v18 < v23)
              break;
            v21 = result[2 * v15 + 1];
            if (v21 >= v19)
              break;
          }
          *v16 = v23;
          v16[1] = v21;
          v16 = &result[2 * v15];
          if (v22 <= 1)
            goto LABEL_19;
        }
      }
      v20 = v16;
LABEL_19:
      *v20 = v18;
      v20[1] = v19;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::PHINode const*,llvm::BasicBlock *,llvm::Value *,llvm::Value *>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 **a4, llvm::raw_ostream **a5)
{
  unsigned __int8 *v9;
  llvm::raw_ostream *v10;
  _anonymous_namespace_::TypePrinting *v11;
  _BYTE *v12;

  v9 = *a2;
  if (*a2)
  {
    v10 = *a1;
    if (v9[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v9, v10, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v9, v10, 1, a1 + 2);
    v11 = *a1;
    v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v11, 10);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Value *,llvm::Value *>(a1, a3, a4, a5);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Value *,llvm::Value *>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, unsigned __int8 **a3, llvm::raw_ostream **a4)
{
  unsigned __int8 *v7;
  llvm::raw_ostream *v8;
  _anonymous_namespace_::TypePrinting *v9;
  _BYTE *v10;

  v7 = *a2;
  if (*a2)
  {
    v8 = *a1;
    if (v7[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v7, v8, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v7, v8, 1, a1 + 2);
    v9 = *a1;
    v10 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v9, 10);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>(a1, a3, a4);
}

llvm::raw_ostream *`anonymous namespace'::Verifier::visit(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  char *v5;
  llvm::raw_ostream *v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)a2 + 5);
  if ((v2 & 0x7FFFFFF) == 0)
LABEL_7:
    __asm { BR              X12 }
  v3 = 0;
  v4 = v2 & 0x7FFFFFF;
  while (1)
  {
    v5 = (char *)a2 - 32 * (v2 & 0x7FFFFFF);
    if ((v2 & 0x40000000) != 0)
      v5 = (char *)*((_QWORD *)a2 - 1);
    if (!*(_QWORD *)&v5[v3])
      break;
    v3 += 32;
    if (!--v4)
      goto LABEL_7;
  }
  v8 = "Operand is null";
  v9 = 259;
  v7 = a2;
  return llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v8, &v7);
}

void `anonymous namespace'::Verifier::visitInstruction(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  uint64_t i;
  uint64_t v17;
  llvm::Instruction *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  llvm::Instruction *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  char *Descriptor;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  char *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  unsigned int v55;
  BOOL v56;
  int v57;
  int v59;
  uint64_t v60;
  unsigned __int8 **v61;
  llvm::APFloatBase *MetadataImpl;
  int v63;
  BOOL v64;
  int v65;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 isFiniteNonZero;
  void *v78;
  const llvm::Module **v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  llvm::MDNode *v84;
  llvm::MDNode *v85;
  const llvm::MDNode *v86;
  const llvm::Module **v87;
  const llvm::Module **v88;
  const llvm::Module **v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  int8x8_t *v95;
  int8x8_t v96;
  uint8x8_t v97;
  const llvm::Module **v98;
  llvm::MDNode *v99;
  const llvm::Module **v100;
  llvm::MDNode *v101;
  llvm::MDNode *v102;
  unsigned __int8 *v103;
  const llvm::DbgVariableIntrinsic *v104;
  const llvm::DbgVariableIntrinsic *v105;
  char *v106;
  char *v107;
  unsigned __int8 *v108[3];
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  void *v113;
  uint64_t v114;
  _BYTE v115[16];
  __int16 v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 5);
  if (!v4)
  {
    v14 = "Instruction not embedded in basic block!";
    goto LABEL_263;
  }
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 != 83)
  {
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      while (1)
      {
        if (*(llvm::Instruction **)(v6 + 24) != a2)
          goto LABEL_5;
        v7 = *((_QWORD *)this + 28);
        v8 = *((unsigned int *)this + 60);
        if (!(_DWORD)v8)
          goto LABEL_13;
        LODWORD(v9) = (v8 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        v10 = (uint64_t *)(v7 + 16 * v9);
        v11 = *v10;
        if (*v10 != v4)
          break;
LABEL_14:
        if (v10 != (uint64_t *)(v7 + 16 * v8) && v10[1])
        {
          v14 = "Only PHI nodes may reference their own value!";
LABEL_263:
          v113 = v14;
          v116 = 259;
          v108[0] = (unsigned __int8 *)a2;
          v61 = v108;
          goto LABEL_264;
        }
LABEL_5:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          goto LABEL_17;
      }
      v12 = 1;
      while (v11 != -4096)
      {
        v13 = v9 + v12++;
        v9 = v13 & (v8 - 1);
        v11 = *(_QWORD *)(v7 + 16 * v9);
        if (v11 == v4)
        {
          v10 = (uint64_t *)(v7 + 16 * v9);
          goto LABEL_14;
        }
      }
LABEL_13:
      v10 = (uint64_t *)(v7 + 16 * v8);
      goto LABEL_14;
    }
  }
LABEL_17:
  v15 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if (v15 == 14)
  {
    v14 = "Instruction returns a non-scalar type!";
    goto LABEL_263;
  }
  if (v15 == 9)
  {
    if (v5 != 33 && v5 != 84)
    {
      v14 = "Invalid use of metadata!";
      goto LABEL_263;
    }
  }
  else if (v15 == 7 && (*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v14 = "Instruction has a name, but provides a void value!";
    goto LABEL_263;
  }
  for (i = *((_QWORD *)a2 + 1); i; i = *(_QWORD *)(i + 8))
  {
    v17 = *(_QWORD *)(i + 24);
    if (*(unsigned __int8 *)(v17 + 16) <= 0x1Bu)
      v17 = 0;
    v108[0] = (unsigned __int8 *)v17;
    if (!v17)
    {
      v113 = "Use of instruction is not an instruction!";
      v116 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v113, (llvm::raw_ostream **)i);
      return;
    }
    if (!*(_QWORD *)(v17 + 40))
    {
      v112 = (unsigned __int8 *)a2;
      v113 = "Instruction referencing instruction not embedded in a basic block!";
      v116 = 259;
      v24 = *(llvm::raw_ostream **)this;
      if (*(_QWORD *)this)
      {
        llvm::Twine::print((llvm::Twine *)&v113, *(llvm::raw_ostream **)this);
        v25 = (_BYTE *)*((_QWORD *)v24 + 4);
        if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
        {
          llvm::raw_ostream::write(v24, 10);
        }
        else
        {
          *((_QWORD *)v24 + 4) = v25 + 1;
          *v25 = 10;
        }
        v60 = *(_QWORD *)this;
        *((_BYTE *)this + 192) = 1;
        if (v60)
          llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)this, &v112, (llvm::raw_ostream **)v108);
        return;
      }
LABEL_166:
      *((_BYTE *)this + 192) = 1;
      return;
    }
  }
  v18 = 0;
  v19 = v5 - 33;
  if (v19 <= 0x33 && ((1 << v19) & 0x8000000000041) != 0)
    v18 = a2;
  v20 = *((_DWORD *)a2 + 5);
  v21 = v20 & 0x7FFFFFF;
  if ((v20 & 0x7FFFFFF) != 0)
  {
    v22 = 0;
    v23 = (llvm::Instruction *)((char *)v18 - 32);
    while (1)
    {
      v29 = *((_DWORD *)a2 + 5);
      if ((v29 & 0x40000000) != 0)
        v30 = (char *)*((_QWORD *)a2 - 1);
      else
        v30 = (char *)a2 - 32 * (v29 & 0x7FFFFFF);
      v31 = *(_QWORD *)&v30[32 * v22];
      if (!v31)
      {
        v14 = "Instruction has null operand!";
        goto LABEL_263;
      }
      v32 = *(unsigned __int8 *)(*(_QWORD *)v31 + 8);
      if (v32 == 14 || v32 == 7)
      {
        v14 = "Instruction operands must be first-class values!";
        goto LABEL_263;
      }
      if ((v29 & 0x40000000) != 0)
      {
        if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 - 1) + 32 * v22) + 16))
          v34 = 0;
        else
          v34 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 32 * v22);
        v108[0] = (unsigned __int8 *)v34;
        if (v34)
        {
LABEL_62:
          if ((*(_BYTE *)(v34 + 33) & 0x20) != 0)
          {
            if (!v18)
              goto LABEL_137;
            if ((v29 & 0x40000000) != 0)
            {
              if ((llvm::Instruction *)(*((_QWORD *)a2 - 1) + 32 * v22) == v23)
                goto LABEL_88;
LABEL_66:
              if ((*((_DWORD *)v18 + 5) & 0x80000000) != 0)
              {
                Descriptor = llvm::User::getDescriptor(v18);
                if ((*((_DWORD *)v18 + 5) & 0x80000000) != 0)
                {
                  v49 = llvm::User::getDescriptor(v18);
                  v36 = &v49[v50];
                }
                else
                {
                  v36 = 0;
                }
              }
              else
              {
                Descriptor = 0;
                v36 = 0;
              }
              if (((v36 - Descriptor) & 0xFFFFFFFF0) == 0
                || v22 < *((unsigned int *)llvm::User::getDescriptor(v18) + 2)
                || (v51 = llvm::User::getDescriptor(v18), v22 >= *(unsigned int *)&v51[v52 - 4])
                || *(_DWORD *)(*(_QWORD *)llvm::CallBase::getBundleOpInfoForOperand(v18, v22) + 8) != 6)
              {
LABEL_137:
                v74 = "Cannot take the address of an intrinsic!";
                goto LABEL_138;
              }
              v45 = *(_DWORD *)(v34 + 32) & 0x2000;
            }
            else
            {
              if ((llvm::Instruction *)((char *)a2 + 32 * v22 + -32 * (v29 & 0x7FFFFFF)) != v23)
                goto LABEL_66;
LABEL_88:
              v45 = 1;
            }
            if (v45 && *((_BYTE *)a2 + 16) != 84)
            {
              v53 = *(_DWORD *)(v34 + 36);
              if (v53 > 290)
              {
                if ((v53 - 291) >= 4 && v53 != 11979)
                  goto LABEL_122;
              }
              else
              {
                if ((v53 - 35) <= 0x1F && ((1 << (v53 - 35)) & 0x80008001) != 0)
                  goto LABEL_47;
                v55 = v53 - 136;
                v56 = v55 > 5;
                v57 = (1 << v55) & 0x31;
                if (!v56 && v57 != 0)
                  goto LABEL_47;
LABEL_122:
                {
                  v74 = "Cannot invoke an intrinsic other than donothing, patchpoint, statepoint, coro_resume, coro_destr"
                        "oy or clang.arc.attachedcall";
                  goto LABEL_138;
                }
              }
            }
          }
LABEL_47:
          v27 = *(_QWORD *)(v34 + 40);
          v28 = (unsigned __int8 *)*((_QWORD *)this + 1);
          if ((unsigned __int8 *)v27 != v28)
          {
            v112 = (unsigned __int8 *)a2;
            v113 = "Referencing function in another module!";
            v116 = 259;
            v110 = v27;
            v111 = v28;
            v72 = *(llvm::raw_ostream **)this;
            if (*(_QWORD *)this)
            {
              llvm::Twine::print((llvm::Twine *)&v113, *(llvm::raw_ostream **)this);
              v73 = (_BYTE *)*((_QWORD *)v72 + 4);
              if ((unint64_t)v73 >= *((_QWORD *)v72 + 3))
              {
                llvm::raw_ostream::write(v72, 10);
              }
              else
              {
                *((_QWORD *)v72 + 4) = v73 + 1;
                *v73 = 10;
              }
              v75 = *(_QWORD *)this;
              *((_BYTE *)this + 192) = 1;
              if (v75)
                llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Function const*,llvm::Module const*>((_anonymous_namespace_::TypePrinting **)this, &v112, (uint64_t *)&v111, v108, &v110);
              return;
            }
            goto LABEL_166;
          }
          goto LABEL_48;
        }
      }
      else
      {
        if (*(_BYTE *)(*((_QWORD *)a2 + 4 * v22 + -4 * (v29 & 0x7FFFFFF)) + 16))
          v34 = 0;
        else
          v34 = *((_QWORD *)a2 + 4 * v22 + -4 * (v29 & 0x7FFFFFF));
        v108[0] = (unsigned __int8 *)v34;
        if (v34)
          goto LABEL_62;
      }
      if ((v29 & 0x40000000) != 0)
      {
        v38 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 32 * v22);
        v44 = *(unsigned __int8 *)(v38 + 16);
        if (v38 && v44 == 22)
          goto LABEL_85;
        if (v44 == 21)
          goto LABEL_90;
        v41 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 32 * v22);
        if (*(unsigned __int8 *)(v41 + 16) >= 4u)
          v41 = 0;
        v112 = (unsigned __int8 *)v41;
        if (v41)
          goto LABEL_81;
      }
      else
      {
        v37 = (char *)a2 - 32 * (v29 & 0x7FFFFFF);
        v38 = *(_QWORD *)&v37[32 * v22];
        v39 = *(unsigned __int8 *)(v38 + 16);
        if (v38)
          v40 = v39 == 22;
        else
          v40 = 0;
        if (v40)
        {
LABEL_85:
          if (*(_QWORD *)(v38 + 64) != *(_QWORD *)(v4 + 64))
          {
            v74 = "Referring to a basic block in another function!";
LABEL_138:
            v112 = (unsigned __int8 *)a2;
            v113 = v74;
            v116 = 259;
            v61 = &v112;
            goto LABEL_264;
          }
          goto LABEL_48;
        }
        if (v39 == 21)
        {
LABEL_90:
          if (*(_QWORD *)(v38 + 24) != *(_QWORD *)(v4 + 64))
          {
            v74 = "Referring to an argument in another function!";
            goto LABEL_138;
          }
          goto LABEL_48;
        }
        v41 = *(_QWORD *)&v37[32 * v22];
        if (*(unsigned __int8 *)(v41 + 16) >= 4u)
          v41 = 0;
        v112 = (unsigned __int8 *)v41;
        if (v41)
        {
LABEL_81:
          v42 = *(_QWORD *)(v41 + 40);
          v43 = *((_QWORD *)this + 1);
          if (v42 != v43)
          {
            v113 = "Referencing global in another module!";
            v116 = 259;
            v110 = v43;
            v111 = (unsigned __int8 *)a2;
            v109 = v42;
            llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::Module const*,llvm::GlobalValue *,llvm::Module*>(this, (llvm::Twine *)&v113, &v111, &v110, &v112, &v109);
            return;
          }
          goto LABEL_48;
        }
      }
      if ((v29 & 0x40000000) != 0)
      {
        v46 = (char *)*((_QWORD *)a2 - 1);
        v47 = *(unsigned __int8 **)&v46[32 * v22];
        v48 = v47[16];
        if (v48 < 0x1C)
        {
LABEL_99:
          if (v48 == 24)
          {
            if (!v18 || &v46[32 * v22] != (char *)v23)
            {
              v113 = "Cannot take the address of an inline asm!";
              v116 = 259;
              v111 = (unsigned __int8 *)a2;
              v61 = &v111;
LABEL_264:
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v113, (llvm::raw_ostream **)v61);
              return;
            }
          }
          else if (v48 == 5)
          {
            v59 = (*(_DWORD *)(*(_QWORD *)v47 + 8) & 0xFE) == 0x12
                ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v47 + 16) + 8)
                : *(_DWORD *)(*(_QWORD *)v47 + 8);
            if (v59 == 15)
          }
          goto LABEL_48;
        }
      }
      else
      {
        v46 = (char *)a2 - 32 * (v29 & 0x7FFFFFF);
        v47 = *(unsigned __int8 **)&v46[32 * v22];
        v48 = v47[16];
        if (v48 <= 0x1B)
          goto LABEL_99;
      }
LABEL_48:
      if (++v22 == v21)
      {
        v20 = *((_DWORD *)a2 + 5);
        break;
      }
    }
  }
  if ((v20 & 0x20000000) != 0)
  {
    MetadataImpl = (llvm::APFloatBase *)llvm::Value::getMetadataImpl(a2, 3);
    if (MetadataImpl)
    {
      v63 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if ((v63 & 0xFE) == 0x12)
        v63 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
      v64 = v63 < 4u || v63 == 5;
      v65 = v63 & 0xFD;
      if (!v64 && v65 != 4)
      {
        v14 = "fpmath requires a floating point result!";
        goto LABEL_263;
      }
      v67 = *((_QWORD *)MetadataImpl - 2);
      if ((v67 & 2) != 0)
      {
        if (*((_DWORD *)MetadataImpl - 6) == 1)
        {
          v68 = (uint64_t *)*((_QWORD *)MetadataImpl - 4);
LABEL_157:
          v69 = *v68;
          if (!v69 || *(_BYTE *)v69 != 1 || (v70 = *(_QWORD *)(v69 + 128), *(_BYTE *)(v70 + 16) != 17))
          {
            v14 = "invalid fpmath accuracy!";
            goto LABEL_263;
          }
          v71 = *(void **)(v70 + 32);
          if (v71 != llvm::APFloatBase::IEEEsingle(MetadataImpl))
          {
            v14 = "fpmath accuracy must have float type";
            goto LABEL_263;
          }
          v76 = v70 + 24;
          isFiniteNonZero = llvm::APFloat::isFiniteNonZero((llvm::APFloat *)(v70 + 24));
          if (!isFiniteNonZero)
            goto LABEL_262;
          v78 = *(void **)(v70 + 32);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)isFiniteNonZero) == v78)
            v76 = *(_QWORD *)(v70 + 40);
          if ((*(_BYTE *)(v76 + 28) & 8) != 0)
          {
LABEL_262:
            v14 = "fpmath accuracy not a positive number!";
            goto LABEL_263;
          }
          goto LABEL_175;
        }
      }
      else if ((*((_QWORD *)MetadataImpl - 2) & 0x3C0) == 0x40)
      {
        v68 = (uint64_t *)((char *)MetadataImpl - 8 * ((v67 >> 2) & 0xF) - 16);
        goto LABEL_157;
      }
      v14 = "fpmath takes one operand!";
      goto LABEL_263;
    }
  }
LABEL_175:
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v79 = (const llvm::Module **)llvm::Value::getMetadataImpl(a2, 4);
    if (v79)
    {
      v80 = *((unsigned __int8 *)a2 + 16) - 33;
      if (v80 > 0x33 || ((1 << v80) & 0x8000008000001) == 0)
      {
        v14 = "Ranges are only for loads, calls and invokes!";
        goto LABEL_263;
      }
    }
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0 && llvm::Value::getMetadataImpl(a2, 16) && (*((_BYTE *)a2 + 16) & 0xFE) != 0x3C)
  {
    v14 = "invariant.group metadata is only for loads and stores";
    goto LABEL_263;
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v81 = llvm::Value::getMetadataImpl(a2, 11);
    if (v81)
    {
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 15)
      {
        v14 = "nonnull applies only to pointer types";
        goto LABEL_263;
      }
      if (*((_BYTE *)a2 + 16) != 60)
      {
        v14 = "nonnull applies only to load instructions, use attributes for calls or invokes";
        goto LABEL_263;
      }
      v82 = *(_QWORD *)(v81 - 16);
      if ((v82 & 2) != 0)
        v83 = *(_DWORD *)(v81 - 24);
      else
        v83 = (v82 >> 6) & 0xF;
      if (v83)
      {
        v14 = "nonnull metadata must be empty";
        goto LABEL_263;
      }
    }
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v84 = (llvm::MDNode *)llvm::Value::getMetadataImpl(a2, 12);
    if (v84)
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v85 = (llvm::MDNode *)llvm::Value::getMetadataImpl(a2, 13);
    if (v85)
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v86 = (const llvm::MDNode *)llvm::Value::getMetadataImpl(a2, 1);
    if (v86)
      llvm::TBAAVerifier::visitTBAAMetadata((llvm::raw_ostream **)this + 247, a2, v86);
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v87 = (const llvm::Module **)llvm::Value::getMetadataImpl(a2, 8);
    if (v87)
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v88 = (const llvm::Module **)llvm::Value::getMetadataImpl(a2, 7);
    if (v88)
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v89 = (const llvm::Module **)llvm::Value::getMetadataImpl(a2, 25);
    if (v89)
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v90 = llvm::Value::getMetadataImpl(a2, 17);
    if (v90)
    {
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 15)
      {
        v14 = "align applies only to pointer types";
        goto LABEL_263;
      }
      if (*((_BYTE *)a2 + 16) != 60)
      {
        v14 = "align applies only to load instructions, use attributes for calls or invokes";
        goto LABEL_263;
      }
      v91 = *(_QWORD *)(v90 - 16);
      if ((v91 & 2) != 0)
      {
        if (*(_DWORD *)(v90 - 24) == 1)
        {
          v92 = *(uint64_t **)(v90 - 32);
LABEL_225:
          v93 = *v92;
          if (*(_BYTE *)v93 != 1
            || (v94 = *(_QWORD *)(v93 + 128), *(_BYTE *)(v94 + 16) != 16)
            || !llvm::Type::isIntegerTy(*(llvm::Type **)v94, 64))
          {
            v14 = "align metadata value must be an i64!";
            goto LABEL_263;
          }
          v95 = (int8x8_t *)(v94 + 24);
          if (*(_DWORD *)(v94 + 32) >= 0x41u)
            v95 = (int8x8_t *)*v95;
          v96 = *v95;
          v97 = (uint8x8_t)vcnt_s8(v96);
          v97.i16[0] = vaddlv_u8(v97);
          if (v97.u32[0] != 1)
          {
            v14 = "align metadata value must be a power of 2!";
            goto LABEL_263;
          }
          if (*(_QWORD *)&v96 >= 0x100000001uLL)
          {
            v14 = "alignment is larger that implementation defined limit";
            goto LABEL_263;
          }
          goto LABEL_232;
        }
      }
      else if ((*(_QWORD *)(v90 - 16) & 0x3C0) == 0x40)
      {
        v92 = (uint64_t *)(v90 - 16 - 8 * ((v91 >> 2) & 0xF));
        goto LABEL_225;
      }
      v14 = "align takes one operand!";
      goto LABEL_263;
    }
  }
LABEL_232:
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v98 = (const llvm::Module **)llvm::Value::getMetadataImpl(a2, 2);
    if (v98)
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v99 = (llvm::MDNode *)llvm::Value::getMetadataImpl(a2, 34);
    if (v99)
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v100 = (const llvm::Module **)llvm::Value::getMetadataImpl(a2, 35);
    if (v100)
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v101 = (llvm::MDNode *)llvm::Value::getMetadataImpl(a2, 38);
    if (v101)
  }
  if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v102 = (llvm::MDNode *)llvm::Value::getMetadataImpl(a2, 30);
    if (v102)
  }
  v103 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v108[0] = v103;
  if (v103)
  {
    if (*v103 != 6)
    {
      v112 = (unsigned __int8 *)a2;
      v113 = "invalid !dbg metadata attachment";
      v116 = 259;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>(this, (llvm::Twine *)&v113, &v112, (llvm::Metadata **)v108);
      return;
    }
  }
  v104 = (const llvm::DbgVariableIntrinsic *)llvm::dyn_cast<llvm::DbgVariableIntrinsic,llvm::Instruction>((uint64_t)a2);
  if (v104)
  {
    v105 = v104;
  }
  v113 = v115;
  v114 = 0x400000000;
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    llvm::Instruction::getAllMetadataImpl(a2, (uint64_t)&v113);
    if ((_DWORD)v114)
    {
      v106 = (char *)v113;
      v107 = (char *)v113 + 16 * v114;
      do
      {
        v106 += 16;
      }
      while (v106 != v107);
    }
  }
  llvm::SmallPtrSetImpl<llvm::MCSymbol const*>::insert((_anonymous_namespace_::Verifier *)((char *)this + 272), a2, (uint64_t)v108);
  if (v113 != v115)
    free(v113);
}

llvm::User *`anonymous namespace'::Verifier::visitInstruction(llvm::Instruction &)::$_0::operator()(llvm::User *this, unsigned int a2)
{
  llvm::User *v3;
  char *Descriptor;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  if (this)
  {
    v3 = this;
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
    {
      Descriptor = llvm::User::getDescriptor(this);
      v5 = Descriptor;
      if ((*((_DWORD *)v3 + 5) & 0x80000000) == 0)
      {
        if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) == 0)
          return 0;
LABEL_7:
        if (*((_DWORD *)llvm::User::getDescriptor(v3) + 2) <= a2)
        {
          v8 = llvm::User::getDescriptor(v3);
          if (*(_DWORD *)&v8[v9 - 4] > a2)
            return (llvm::User *)(*(_DWORD *)(*(_QWORD *)llvm::CallBase::getBundleOpInfoForOperand(v3, a2) + 8) == 6);
        }
        return 0;
      }
      v6 = llvm::User::getDescriptor(v3);
      if (((&v6[v7] - v5) & 0xFFFFFFFF0) != 0)
        goto LABEL_7;
    }
    return 0;
  }
  return this;
}

llvm::raw_ostream *llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::Module const*,llvm::GlobalValue *,llvm::Module*>(llvm::raw_ostream *result, llvm::Twine *this, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 **a5, uint64_t *a6)
{
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v12;
  _anonymous_namespace_::TypePrinting *v13;
  _anonymous_namespace_::TypePrinting *v14;

  v6 = (uint64_t)result;
  v7 = *(llvm::raw_ostream **)result;
  if (!*(_QWORD *)result)
  {
    *((_BYTE *)result + 192) = 1;
    return result;
  }
  result = (llvm::raw_ostream *)llvm::Twine::print(this, v7);
  v12 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v12 < *((_QWORD *)v7 + 3))
  {
    *((_QWORD *)v7 + 4) = v12 + 1;
    *v12 = 10;
    v13 = *(_anonymous_namespace_::TypePrinting **)v6;
    *(_BYTE *)(v6 + 192) = 1;
    if (!v13)
      return result;
    return llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Function const*,llvm::Module const*>((_anonymous_namespace_::TypePrinting **)v6, a3, a4, a5, a6);
  }
  result = llvm::raw_ostream::write(v7, 10);
  v14 = *(_anonymous_namespace_::TypePrinting **)v6;
  *(_BYTE *)(v6 + 192) = 1;
  if (v14)
    return llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Function const*,llvm::Module const*>((_anonymous_namespace_::TypePrinting **)v6, a3, a4, a5, a6);
  return result;
}

llvm::raw_ostream *`anonymous namespace'::Verifier::verifyDominatesUse(llvm::raw_ostream *this, llvm::Instruction *a2, unsigned int a3)
{
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  const char *v21;
  __int16 v22;
  unsigned __int8 *v23;

  v5 = (uint64_t)this;
  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0)
  {
    v7 = *(unsigned __int8 **)(*((_QWORD *)a2 - 1) + 32 * a3);
    v23 = v7;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    v7 = (unsigned __int8 *)*((_QWORD *)a2 + 4 * a3 + -4 * (v6 & 0x7FFFFFF));
    v23 = v7;
    if (!v7)
      goto LABEL_7;
  }
  if (v7[16] == 33 && *((_QWORD *)v7 - 12) == *((_QWORD *)v7 - 8))
    return this;
LABEL_7:
  if (*((_BYTE *)a2 + 16) == 83)
    goto LABEL_25;
  v8 = *((_QWORD *)this + 35);
  if (v8 == *((_QWORD *)this + 34))
  {
    v11 = *((unsigned int *)this + 73);
    this = (llvm::raw_ostream *)(v8 + 8 * v11);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 8 * v11;
      while (*(unsigned __int8 **)(v8 + v12) != v7)
      {
        v12 += 8;
        if (v13 == v12)
          goto LABEL_19;
      }
      this = (llvm::raw_ostream *)(v8 + v12);
    }
LABEL_19:
    v9 = *(_QWORD *)(v5 + 280);
  }
  else
  {
    this = (llvm::raw_ostream *)llvm::SmallPtrSetImplBase::FindBucketFor((llvm::raw_ostream *)((char *)this + 272), v7);
    v8 = *(_QWORD *)(v5 + 272);
    v9 = *(_QWORD *)(v5 + 280);
    if (*(unsigned __int8 **)this != v7)
    {
      v10 = 288;
      if (v9 == v8)
        v10 = 292;
      this = (llvm::raw_ostream *)(v9 + 8 * *(unsigned int *)(v5 + v10));
    }
  }
  v14 = v9 == v8;
  v15 = 288;
  if (v14)
    v15 = 292;
  if (this == (llvm::raw_ostream *)(v9 + 8 * *(unsigned int *)(v5 + v15)))
  {
    v6 = *((_DWORD *)a2 + 5);
LABEL_25:
    if ((v6 & 0x40000000) != 0)
    {
      this = (llvm::raw_ostream *)llvm::DominatorTree::dominates((llvm::DominatorTree *)(v5 + 200), (const llvm::Value *)v7, (const llvm::Use *)(*((_QWORD *)a2 - 1) + 32 * a3));
      if ((this & 1) != 0)
        return this;
    }
    else
    {
      this = (llvm::raw_ostream *)llvm::DominatorTree::dominates((llvm::DominatorTree *)(v5 + 200), (const llvm::Value *)v7, (llvm::Instruction *)((char *)a2 + 32 * a3 + -32 * (v6 & 0x7FFFFFF)));
      if ((this & 1) != 0)
        return this;
    }
    v20 = a2;
    v21 = "Instruction does not dominate all uses!";
    v22 = 259;
    v16 = *(llvm::raw_ostream **)v5;
    if (!*(_QWORD *)v5)
    {
      *(_BYTE *)(v5 + 192) = 1;
      return this;
    }
    this = (llvm::raw_ostream *)llvm::Twine::print((llvm::Twine *)&v21, *(llvm::raw_ostream **)v5);
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
    {
      this = llvm::raw_ostream::write(v16, 10);
      v19 = *(llvm::raw_ostream **)v5;
      *(_BYTE *)(v5 + 192) = 1;
      if (!v19)
        return this;
    }
    else
    {
      *((_QWORD *)v16 + 4) = v17 + 1;
      *v17 = 10;
      v18 = *(llvm::raw_ostream **)v5;
      *(_BYTE *)(v5 + 192) = 1;
      if (!v18)
        return this;
    }
    return llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)v5, &v23, &v20);
  }
  return this;
}

void `anonymous namespace'::Verifier::visitConstantExprsRecursively(_anonymous_namespace_::Verifier *this, const llvm::Constant *a2)
{
  llvm::SmallPtrSetImplBase *v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  const void **v17;
  const void **v18;
  const void *v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  const llvm::Constant **v30;
  uint64_t v31;
  const llvm::Constant **v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  _QWORD v40[4];
  __int16 v41;
  unsigned __int8 *v42;
  void *v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[17];

  v46[16] = *MEMORY[0x1E0C80C00];
  v39 = (unsigned __int8 *)a2;
  v4 = (_anonymous_namespace_::Verifier *)((char *)this + 920);
  v5 = *((_QWORD *)this + 116);
  if (v5 != *((_QWORD *)this + 115))
    goto LABEL_2;
  v29 = *((unsigned int *)this + 235);
  if ((_DWORD)v29)
  {
    v30 = 0;
    v31 = 8 * v29;
    v32 = (const llvm::Constant **)*((_QWORD *)this + 116);
    do
    {
      if (*v32 == a2)
      {
        v7 = 1;
        goto LABEL_3;
      }
      if (*v32 == (const llvm::Constant *)-2)
        v30 = v32;
      ++v32;
      v31 -= 8;
    }
    while (v31);
    if (!v30)
      goto LABEL_59;
    v7 = 0;
    *v30 = a2;
    --*((_DWORD *)this + 236);
    goto LABEL_3;
  }
LABEL_59:
  if (v29 < *((_DWORD *)this + 234))
  {
    v7 = 0;
    *((_DWORD *)this + 235) = v29 + 1;
    *(_QWORD *)(v5 + 8 * v29) = a2;
  }
  else
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((_anonymous_namespace_::Verifier *)((char *)this + 920), a2);
    v7 = v6 == 0;
  }
LABEL_3:
  if (v7)
    return;
  v43 = v46;
  v45 = 16;
  v46[0] = a2;
  v8 = 1;
  while (1)
  {
    v13 = *((_QWORD *)v43 + v8 - 1);
    v44 = v8 - 1;
    v9 = *(unsigned __int8 *)(v13 + 16);
    if (v13)
      v14 = v9 == 5;
    else
      v14 = 0;
    if (v14)
    {
      v42 = (unsigned __int8 *)v13;
      if (*(_WORD *)(v13 + 18) == 49
        && !llvm::CastInst::castIsValid(49, **(llvm::Type ***)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF)), *(_QWORD *)v13))
      {
        v40[0] = "Invalid bitcast";
        v41 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)v40, (llvm::raw_ostream **)&v42);
      }
      v9 = *(unsigned __int8 *)(v13 + 16);
    }
    v10 = v9 >= 4 ? 0 : v13;
    v42 = (unsigned __int8 *)v10;
    if (v10)
      break;
    v15 = *(_DWORD *)(v13 + 20);
    if ((v15 & 0x40000000) != 0)
    {
      v17 = *(const void ***)(v13 - 8);
      v16 = v15 & 0x7FFFFFF;
      if (!v16)
        goto LABEL_11;
LABEL_24:
      v18 = &v17[4 * v16];
      while (2)
      {
        v19 = *v17;
        if (*v17)
          v20 = *((unsigned __int8 *)*v17 + 16) > 0x14u;
        else
          v20 = 1;
        if (!v20)
        {
          v21 = *((_QWORD *)this + 116);
          if (v21 != *((_QWORD *)this + 115))
            goto LABEL_32;
          v25 = *((unsigned int *)this + 235);
          if ((_DWORD)v25)
          {
            v26 = 0;
            v27 = 8 * v25;
            v28 = (_QWORD *)*((_QWORD *)this + 116);
            do
            {
              if ((const void *)*v28 == v19)
              {
                v23 = 0;
                goto LABEL_33;
              }
              if (*v28 == -2)
                v26 = v28;
              ++v28;
              v27 -= 8;
            }
            while (v27);
            if (!v26)
              goto LABEL_44;
            *v26 = v19;
            --*((_DWORD *)this + 236);
            v23 = 1;
          }
          else
          {
LABEL_44:
            if (v25 >= *((_DWORD *)this + 234))
            {
LABEL_32:
              llvm::SmallPtrSetImplBase::insert_imp_big(v4, *v17);
              v23 = v22;
            }
            else
            {
              *((_DWORD *)this + 235) = v25 + 1;
              *(_QWORD *)(v21 + 8 * v25) = v19;
              v23 = 1;
            }
          }
LABEL_33:
          if (v23)
          {
            v24 = v44;
            if (v44 >= (unint64_t)v45)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v44 + 1, 8);
              v24 = v44;
            }
            *((_QWORD *)v43 + v24) = v19;
            ++v44;
          }
        }
        v17 += 4;
        if (v17 == v18)
          goto LABEL_11;
        continue;
      }
    }
    v16 = v15 & 0x7FFFFFF;
    v17 = (const void **)(v13 - 32 * v16);
    if (v16)
      goto LABEL_24;
LABEL_11:
    v8 = v44;
    if (!v44)
      goto LABEL_65;
  }
  v11 = *(_QWORD *)(v10 + 40);
  v12 = *((_QWORD *)this + 1);
  if (v11 == v12)
    goto LABEL_11;
  v40[0] = "Referencing global in another module!";
  v41 = 259;
  v37 = v11;
  v38 = v12;
  v33 = *(llvm::raw_ostream **)this;
  if (*(_QWORD *)this)
  {
    llvm::Twine::print((llvm::Twine *)v40, *(llvm::raw_ostream **)this);
    v34 = (_BYTE *)*((_QWORD *)v33 + 4);
    if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
    {
      llvm::raw_ostream::write(v33, 10);
      v36 = *(_QWORD *)this;
      *((_BYTE *)this + 192) = 1;
      if (v36)
        goto LABEL_64;
    }
    else
    {
      *((_QWORD *)v33 + 4) = v34 + 1;
      *v34 = 10;
      v35 = *(_QWORD *)this;
      *((_BYTE *)this + 192) = 1;
      if (!v35)
        goto LABEL_65;
LABEL_64:
      llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Function const*,llvm::Module const*>((_anonymous_namespace_::TypePrinting **)this, &v39, &v38, &v42, &v37);
    }
  }
  else
  {
    *((_BYTE *)this + 192) = 1;
  }
LABEL_65:
  if (v43 != v46)
    free(v43);
}

BOOL llvm::APFloat::isFiniteNonZero(llvm::APFloat *this)
{
  void *v2;
  char v3;

  v2 = (void *)*((_QWORD *)this + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v2)
  {
    v3 = *(_BYTE *)(*((_QWORD *)this + 2) + 28);
    if ((v3 & 6) != 0)
      return (v3 & 7) != 3;
  }
  else
  {
    v3 = *((_BYTE *)this + 28);
    if ((v3 & 6) != 0)
      return (v3 & 7) != 3;
  }
  return 0;
}

llvm::raw_ostream *`anonymous namespace'::Verifier::visitDereferenceableMetadata(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2, llvm::MDNode *a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v11;
  const char *v12;
  __int16 v13;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 15)
  {
    v8 = "dereferenceable, dereferenceable_or_null apply only to pointer types";
LABEL_16:
    v11 = a2;
    v12 = v8;
    v13 = 259;
    return llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v12, &v11);
  }
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 != 60 && v5 != 76)
  {
    v8 = "dereferenceable, dereferenceable_or_null apply only to load and inttoptr instructions, use attributes for calls or invokes";
    goto LABEL_16;
  }
  v6 = *((_QWORD *)a3 - 2);
  if ((v6 & 2) == 0)
  {
    if ((*((_QWORD *)a3 - 2) & 0x3C0) == 0x40)
    {
      v7 = *((_QWORD *)a3 - ((v6 >> 2) & 0xF) - 2);
      if (*(_BYTE *)v7 != 1)
        goto LABEL_14;
      goto LABEL_12;
    }
LABEL_15:
    v8 = "dereferenceable, dereferenceable_or_null take one operand!";
    goto LABEL_16;
  }
  if (*((_DWORD *)a3 - 6) != 1)
    goto LABEL_15;
  v7 = **((_QWORD **)a3 - 4);
  if (*(_BYTE *)v7 != 1)
  {
LABEL_14:
    v8 = "dereferenceable, dereferenceable_or_null metadata value must be an i64!";
    goto LABEL_16;
  }
LABEL_12:
  v9 = *(_QWORD *)(v7 + 128);
  if (*(_BYTE *)(v9 + 16) != 16)
    goto LABEL_14;
  result = (llvm::raw_ostream *)llvm::Type::isIntegerTy(*(llvm::Type **)v9, 64);
  if ((result & 1) == 0)
    goto LABEL_14;
  return result;
}

const llvm::Module **`anonymous namespace'::Verifier::visitAliasScopeListMetadata(const llvm::Module **this, const llvm::Module **a2)
{
  const llvm::Module **v2;
  unint64_t v3;
  const llvm::Module ***v4;
  uint64_t v5;
  uint64_t i;
  const llvm::Module **v7;
  const llvm::Module **v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const llvm::Module **v12;
  uint64_t v13;
  const llvm::Module **v14;
  const llvm::Module **v15;
  const llvm::Module **v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  const llvm::Module **v20;
  uint64_t v21;
  uint64_t v22;
  const llvm::Module **v23;
  const llvm::Module **v24;
  _QWORD v25[4];
  __int16 v26;
  const llvm::Module **v27;

  v2 = this;
  v23 = a2;
  v3 = (unint64_t)*(a2 - 2);
  if ((v3 & 2) != 0)
  {
    v4 = (const llvm::Module ***)*(a2 - 4);
    v5 = *((unsigned int *)a2 - 6);
    if (!*((_DWORD *)a2 - 6))
      return this;
    goto LABEL_5;
  }
  v4 = (const llvm::Module ***)&a2[-((v3 >> 2) & 0xF) - 2];
  v5 = (v3 >> 6) & 0xF;
  if (v5)
  {
LABEL_5:
    for (i = 8 * v5; i; i -= 8)
    {
      v7 = *v4;
      if (*(unsigned __int8 *)*v4 - 5 >= 0x1F)
      {
        v25[0] = "scope list must consist of MDNodes";
        v26 = 259;
        return llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(v2, (llvm::Twine *)v25, &v23);
      }
      v27 = *v4;
      v8 = v7 - 2;
      v9 = (unint64_t)*(v7 - 2);
      if ((v9 & 2) != 0)
      {
        v10 = *((_DWORD *)v7 - 6);
        if ((v10 & 0xFFFFFFFE) != 2)
        {
LABEL_16:
          v25[0] = "scope must have two or three operands";
          goto LABEL_17;
        }
        v14 = (const llvm::Module **)*(v7 - 4);
        v12 = (const llvm::Module **)*v14;
        if (*v14 == (const llvm::Module *)v7)
        {
          if (v10 != 3)
            goto LABEL_32;
          if (*(_BYTE *)v14[2])
            goto LABEL_27;
          goto LABEL_29;
        }
      }
      else
      {
        if ((v9 & 0x380) != 0x80)
          goto LABEL_16;
        v10 = (v9 >> 6) & 0xF;
        v11 = (v9 >> 2) & 0xF;
        v12 = (const llvm::Module **)v8[-v11];
        if (v12 == v7)
        {
          v13 = -v11;
          if (v10 != 3)
            goto LABEL_31;
          goto LABEL_23;
        }
      }
      if (*(_BYTE *)v12)
      {
        v25[0] = "first scope operand must be self-referential or string";
LABEL_17:
        v26 = 259;
        this = llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(v2, (llvm::Twine *)v25, &v27);
        goto LABEL_18;
      }
      if (v10 == 3)
      {
        if ((v9 & 2) == 0)
        {
          v13 = -(uint64_t)((v9 >> 2) & 0xF);
LABEL_23:
          if (*(_BYTE *)v7[v13])
            goto LABEL_27;
          goto LABEL_29;
        }
        if (**((_BYTE **)*(v7 - 4) + 2))
        {
LABEL_27:
          v25[0] = "third scope operand must be string (if used)";
          goto LABEL_17;
        }
      }
LABEL_29:
      if ((v9 & 2) == 0)
      {
        v13 = -(uint64_t)((v9 >> 2) & 0xF);
LABEL_31:
        v14 = &v8[v13];
LABEL_32:
        v15 = (const llvm::Module **)v14[1];
        if (*(unsigned __int8 *)v15 - 5 >= 0x1F)
          goto LABEL_39;
        goto LABEL_33;
      }
      v15 = (const llvm::Module **)*((_QWORD *)*(v7 - 4) + 1);
      if (*(unsigned __int8 *)v15 - 5 >= 0x1F)
      {
LABEL_39:
        v25[0] = "second scope operand must be MDNode";
        goto LABEL_17;
      }
LABEL_33:
      v24 = v15;
      v16 = v15 - 2;
      v17 = (unint64_t)*(v15 - 2);
      if ((v17 & 2) != 0)
      {
        v18 = *((_DWORD *)v15 - 6);
        if (v18 - 1 >= 2)
        {
LABEL_44:
          v25[0] = "domain must have one or two operands";
        }
        else
        {
          v22 = (uint64_t)*(v15 - 4);
          v20 = *(const llvm::Module ***)v22;
          if (*(const llvm::Module ***)v22 == v15)
          {
            if (v18 != 2 || !**(_BYTE **)(v22 + 8))
              goto LABEL_18;
            goto LABEL_53;
          }
LABEL_42:
          if (*(_BYTE *)v20)
          {
            v25[0] = "first domain operand must be self-referential or string";
          }
          else
          {
            if (v18 != 2)
              goto LABEL_18;
            if ((v17 & 2) == 0)
            {
              v21 = -(uint64_t)((v17 >> 2) & 0xF);
              goto LABEL_49;
            }
            if (!**((_BYTE **)*(v15 - 4) + 1))
              goto LABEL_18;
LABEL_53:
            v25[0] = "second domain operand must be string (if used)";
          }
        }
        v26 = 259;
        this = llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(v2, (llvm::Twine *)v25, &v24);
        goto LABEL_18;
      }
      v18 = (v17 >> 6) & 0xF;
      if (v18 - 1 >= 2)
        goto LABEL_44;
      v19 = (v17 >> 2) & 0xF;
      v20 = (const llvm::Module **)v16[-v19];
      if (v20 != v15)
        goto LABEL_42;
      if (v18 == 2)
      {
        v21 = -v19;
LABEL_49:
        if (!*(_BYTE *)v16[v21 + 1])
          goto LABEL_18;
        goto LABEL_53;
      }
LABEL_18:
      ++v4;
    }
  }
  return this;
}

const llvm::Module **`anonymous namespace'::Verifier::visitAccessGroupMetadata(const llvm::Module **this, const llvm::Module **a2)
{
  unint64_t v2;
  const llvm::Module **v3;
  uint64_t v4;
  uint64_t v5;
  const llvm::Module *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  __int16 v10;
  const llvm::Module **v11;

  v11 = a2;
  v2 = (unint64_t)*(a2 - 2);
  if ((v2 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6))
      goto LABEL_6;
  }
  else if (((v2 >> 6) & 0xF) != 0)
  {
    goto LABEL_6;
  }
  if ((*((_BYTE *)a2 + 1) & 0x7F) == 1)
    return this;
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v3 = (const llvm::Module **)*(a2 - 4);
    v4 = *((unsigned int *)a2 - 6);
    if (!*((_DWORD *)a2 - 6))
      return this;
  }
  else
  {
    v3 = &a2[-((v2 >> 2) & 0xF) - 2];
    v4 = (v2 >> 6) & 0xF;
    if (!v4)
      return this;
  }
  v5 = 8 * v4;
  while (1)
  {
    v6 = *v3;
    if (*(unsigned __int8 *)*v3 - 5 >= 0x1F)
      break;
    v7 = *((_QWORD *)v6 - 2);
    if ((v7 & 2) != 0)
    {
      if (*((_DWORD *)v6 - 6))
        goto LABEL_19;
    }
    else if (((v7 >> 6) & 0xF) != 0)
    {
      goto LABEL_19;
    }
    if ((*((_BYTE *)v6 + 1) & 0x7F) != 1)
    {
LABEL_19:
      v8 = "Access scope list contains invalid access scope";
      goto LABEL_21;
    }
    ++v3;
    v5 -= 8;
    if (!v5)
      return this;
  }
  v8 = "Access scope list must consist of MDNodes";
LABEL_21:
  v9 = v8;
  v10 = 259;
  return llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)&v9, &v11);
}

const llvm::Module **`anonymous namespace'::Verifier::visitProfMetadata(const llvm::Module **this, llvm::Instruction *a2, const llvm::Module **a3)
{
  const llvm::Module **v3;
  unint64_t v6;
  unint64_t *v7;
  llvm::MDString *v8;
  const char *v9;
  const llvm::Module **result;
  uint64_t v11;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::Module **v20;
  const llvm::Module *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  __int16 v27;
  const llvm::Module **v28;

  v3 = a3;
  v28 = a3;
  v7 = (unint64_t *)(a3 - 2);
  v6 = (unint64_t)*(a3 - 2);
  if ((v6 & 2) == 0)
  {
    if ((v6 & 0x380) != 0)
    {
      v8 = (llvm::MDString *)v7[-((v6 >> 2) & 0xF)];
      if (v8)
        goto LABEL_4;
LABEL_8:
      v9 = "first operand should not be null";
      goto LABEL_10;
    }
LABEL_9:
    v9 = "!prof annotations should have no less than 2 operands";
    goto LABEL_10;
  }
  if (*((_DWORD *)a3 - 6) <= 1u)
    goto LABEL_9;
  v8 = *(llvm::MDString **)*(a3 - 4);
  if (!v8)
    goto LABEL_8;
LABEL_4:
  if (*(_BYTE *)v8)
  {
    v9 = "expected string with name of the !prof annotation";
LABEL_10:
    v26[0] = v9;
    v27 = 259;
    return llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)v26, &v28);
  }
  result = (const llvm::Module **)llvm::MDString::getString(v8);
  if (v11 == 14
    && *result == (const llvm::Module *)0x775F68636E617262
    && *(const llvm::Module **)((char *)result + 6) == (const llvm::Module *)0x737468676965775FLL)
  {
    v13 = 1;
    switch(*((_BYTE *)a2 + 16))
    {
      case 0x1E:
        if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 3)
          v13 = 2;
        else
          v13 = 1;
        goto LABEL_30;
      case 0x1F:
        v13 = (*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF;
        goto LABEL_30;
      case 0x20:
        v13 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) - 1;
        goto LABEL_30;
      case 0x21:
        v14 = *v7;
        if ((*v7 & 2) != 0)
        {
          v15 = *((_DWORD *)v3 - 6);
          if (v15 == 2)
            goto LABEL_34;
        }
        else
        {
          if ((*v7 & 0x3C0) == 0x80)
            goto LABEL_34;
          v15 = (v14 >> 6) & 0xF;
        }
        if (v15 != 3)
        {
          v9 = "Wrong number of InvokeInst branch_weights operands";
          goto LABEL_10;
        }
LABEL_34:
        if ((v14 & 2) != 0)
        {
          v22 = *((_DWORD *)v3 - 6);
          if (v22 <= 1)
            v22 = 1;
          v23 = 8 * v22;
          v24 = 8;
          while (1)
          {
            if (v23 == v24)
              return result;
            v25 = *(_QWORD *)((char *)*(v3 - 4) + v24);
            if (!v25)
              break;
            if (*(_BYTE *)v25 == 1)
            {
              v24 += 8;
              if (*(_BYTE *)(*(_QWORD *)(v25 + 128) + 16) == 16)
                continue;
            }
LABEL_52:
            v26[0] = "!prof brunch_weights operand is not a const int";
            v27 = 259;
            return (const llvm::Module **)llvm::VerifierSupport::CheckFailed((_QWORD **)this, (const llvm::Twine *)v26);
          }
        }
        else
        {
          v17 = (v14 >> 2) & 0xF;
          if (((v14 >> 6) & 0xE) != 0)
            v18 = (v14 >> 6) & 0xF;
          else
            v18 = 1;
          v19 = v18 - 1;
          v20 = &v3[-v17 - 1];
          while (1)
          {
            if (!v19)
              return result;
            v21 = *v20;
            if (!*v20)
              break;
            if (*(_BYTE *)v21 == 1)
            {
              --v19;
              ++v20;
              if (*(_BYTE *)(*((_QWORD *)v21 + 16) + 16) == 16)
                continue;
            }
            goto LABEL_52;
          }
        }
        v9 = "second operand should not be null";
        break;
      case 0x27:
        v13 = *((_DWORD *)a2 + 22) + 1;
        goto LABEL_30;
      case 0x54:
        goto LABEL_30;
      case 0x55:
        v13 = 2;
        goto LABEL_30;
      default:
        v26[0] = "!prof branch_weights are not allowed for this instruction";
        v27 = 259;
        result = llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)v26, &v28);
        v13 = 0;
        v3 = v28;
LABEL_30:
        v14 = (unint64_t)*(v3 - 2);
        if ((v14 & 2) != 0)
          v16 = *((_DWORD *)v3 - 6);
        else
          v16 = (v14 >> 6) & 0xF;
        if (v16 == v13 + 1)
          goto LABEL_34;
        v9 = "Wrong number of operands";
        goto LABEL_10;
    }
    goto LABEL_10;
  }
  return result;
}

const llvm::Module **`anonymous namespace'::Verifier::visitMemProfMetadata(const llvm::Module **this, llvm::Instruction *a2, llvm::MDNode *a3)
{
  const llvm::Module **v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  llvm::raw_ostream **v10;
  llvm::raw_ostream **v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  unint64_t v14;
  uint64_t v15;
  const llvm::Module ***v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE **v20;
  uint64_t v21;
  llvm::MDNode **v22;
  const char *v23;
  llvm::raw_ostream *v24;
  _QWORD v25[4];
  __int16 v26;
  llvm::MDNode *v27;

  v3 = this;
  v27 = a3;
  v4 = *((unsigned __int8 *)a2 + 16) - 33;
  v5 = v4 > 0x33;
  v6 = (1 << v4) & 0x8000000000041;
  if (v5 || v6 == 0)
  {
    v24 = a2;
    v25[0] = "!memprof metadata should only exist on calls";
    v26 = 259;
    return (const llvm::Module **)llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)this, (llvm::Twine *)v25, &v24);
  }
  v8 = *((_QWORD *)a3 - 2);
  if ((v8 & 2) == 0)
  {
    if ((v8 & 0x3C0) != 0)
    {
      v9 = (v8 >> 6) & 0xF;
      if (v9)
      {
        v10 = (llvm::raw_ostream **)((char *)a3 - 8 * ((v8 >> 2) & 0xF) - 16);
        v11 = &v10[v9];
        goto LABEL_12;
      }
      return this;
    }
LABEL_31:
    v25[0] = "!memprof annotations should have at least 1 metadata operand (MemInfoBlock)";
    v26 = 259;
    v22 = &v27;
    return llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(v3, (llvm::Twine *)v25, (const llvm::Module ***)v22);
  }
  v12 = *((unsigned int *)a3 - 6);
  if (!(_DWORD)v12)
    goto LABEL_31;
  v10 = (llvm::raw_ostream **)*((_QWORD *)a3 - 4);
  v11 = &v10[v12];
LABEL_12:
  while (2)
  {
    v24 = 0;
    v13 = *v10;
    switch(*(_BYTE *)*v10)
    {
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
        v24 = *v10;
        v15 = (uint64_t)v13 - 16;
        v14 = *((_QWORD *)v13 - 2);
        if ((v14 & 2) == 0)
          goto LABEL_14;
        goto LABEL_17;
      default:
        v13 = 0;
        v24 = 0;
        v15 = -16;
        v14 = MEMORY[0xFFFFFFFFFFFFFFF0];
        if ((MEMORY[0xFFFFFFFFFFFFFFF0] & 2) != 0)
        {
LABEL_17:
          if (*((_DWORD *)v13 - 6) <= 1u)
          {
LABEL_37:
            v23 = "Each !memprof MemInfoBlock should have at least 2 operands";
            goto LABEL_33;
          }
          v16 = (const llvm::Module ***)*((_QWORD *)v13 - 4);
        }
        else
        {
LABEL_14:
          if ((v14 & 0x380) == 0)
            goto LABEL_37;
          v16 = (const llvm::Module ***)(v15 - 8 * ((v14 >> 2) & 0xF));
        }
        if (!*v16)
        {
          v23 = "!memprof MemInfoBlock first operand should not be null";
          goto LABEL_33;
        }
        if (*(unsigned __int8 *)*v16 - 5 >= 0x1F)
        {
          v23 = "!memprof MemInfoBlock first operand should be an MDNode";
          goto LABEL_33;
        }
        break;
    }
    switch(*(_BYTE *)*v16)
    {
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
        v17 = *(_QWORD *)v15;
        if ((*(_QWORD *)v15 & 2) != 0)
          goto LABEL_26;
        goto LABEL_23;
      default:
        v17 = *(_QWORD *)v15;
        if ((*(_QWORD *)v15 & 2) == 0)
        {
LABEL_23:
          v18 = v15 - 8 * ((v17 >> 2) & 0xF);
          v19 = (v17 >> 6) & 0xF;
          if (v19 != 1)
            goto LABEL_27;
LABEL_11:
          if (++v10 == v11)
            return this;
          continue;
        }
LABEL_26:
        v18 = *((_QWORD *)v13 - 4);
        v19 = *((unsigned int *)v13 - 6);
        if (v19 == 1)
          goto LABEL_11;
LABEL_27:
        v20 = (_BYTE **)(v18 + 8);
        v21 = 8 * v19 - 8;
        while (!**v20)
        {
          ++v20;
          v21 -= 8;
          if (!v21)
            goto LABEL_11;
        }
        v23 = "Not all !memprof MemInfoBlock operands 1 to N are MDString";
LABEL_33:
        v25[0] = v23;
        v26 = 259;
        v22 = &v24;
        return llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(v3, (llvm::Twine *)v25, (const llvm::Module ***)v22);
    }
  }
}

const llvm::Module **`anonymous namespace'::Verifier::visitCallsiteMetadata(const llvm::Module **this, llvm::Instruction *a2, const llvm::Module **a3)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  llvm::raw_ostream *v8;
  const char *v9;
  __int16 v10;

  v3 = *((unsigned __int8 *)a2 + 16) - 33;
  v4 = v3 >= 0x33;
  v6 = v3 == 51;
  v5 = (1 << v3) & 0x8000000000041;
  v6 = !v6 && v4 || v5 == 0;
  if (!v6)
  v8 = a2;
  v9 = "!callsite metadata should only exist on calls";
  v10 = 259;
  return (const llvm::Module **)llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)this, (llvm::Twine *)&v9, &v8);
}

llvm::Metadata *`anonymous namespace'::Verifier::visitDIAssignIDMetadata(llvm::Metadata *this, llvm::Instruction *a2, llvm::MDNode *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Function;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  llvm::Metadata *v21;
  llvm::raw_ostream *v22;
  _QWORD v23[4];
  __int16 v24;
  llvm::Metadata *v25;

  v4 = (uint64_t)this;
  v25 = a3;
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 == 59
    || v5 == 61
    || v5 == 84
    && (v6 = *((_QWORD *)a2 - 4)) != 0
    && !*(_BYTE *)(v6 + 16)
    && *(_QWORD *)(v6 + 24) == *((_QWORD *)a2 + 10)
    && (*(_BYTE *)(v6 + 33) & 0x20) != 0
    && ((v9 = *(_DWORD *)(v6 + 36) - 217, v10 = v9 > 7, v11 = (1 << v9) & 0xAD, !v10) ? (v12 = v11 == 0) : (v12 = 1),
        !v12))
  {
    this = (llvm::Metadata *)llvm::MetadataAsValue::getIfExists(*((llvm::MetadataAsValue **)this + 23), a3, a3);
    if (this)
    {
      v13 = *((_QWORD *)this + 1);
      if (v13)
      {
        while (1)
        {
          this = *(llvm::Metadata **)(v13 + 24);
          v22 = this;
          if (*((_BYTE *)this + 16) != 84)
            break;
          v14 = *((_QWORD *)this - 4);
          if (!v14
            || *(_BYTE *)(v14 + 16)
            || *(_QWORD *)(v14 + 24) != *((_QWORD *)this + 10)
            || (*(_BYTE *)(v14 + 33) & 0x20) == 0
            || *(_DWORD *)(v14 + 36) != 61)
          {
            break;
          }
          v21 = this;
          Function = llvm::Instruction::getFunction(this);
          this = (llvm::Metadata *)llvm::Instruction::getFunction(a2);
          if ((llvm::Metadata *)Function != this)
          {
            v23[0] = "dbg.assign not in same function as inst";
            v24 = 259;
            v20 = a2;
            v18 = *(llvm::raw_ostream **)v4;
            if (*(_QWORD *)v4)
            {
              this = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v23, *(llvm::raw_ostream **)v4);
              v19 = (_BYTE *)*((_QWORD *)v18 + 4);
              if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
              {
                this = llvm::raw_ostream::write(v18, 10);
              }
              else
              {
                *((_QWORD *)v18 + 4) = v19 + 1;
                *v19 = 10;
              }
            }
            *(_BYTE *)(v4 + 192) |= *(_BYTE *)(v4 + 194);
            *(_BYTE *)(v4 + 193) = 1;
            if (*(_QWORD *)v4)
              return llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)v4, (unsigned __int8 **)&v21, &v20);
            return this;
          }
          v13 = *(_QWORD *)(v13 + 8);
          if (!v13)
            return this;
        }
        v23[0] = "!DIAssignID should only be used by llvm.dbg.assign intrinsics";
        v24 = 259;
        v16 = *(llvm::raw_ostream **)v4;
        if (*(_QWORD *)v4)
        {
          this = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v23, *(llvm::raw_ostream **)v4);
          v17 = (_BYTE *)*((_QWORD *)v16 + 4);
          if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
          {
            this = llvm::raw_ostream::write(v16, 10);
          }
          else
          {
            *((_QWORD *)v16 + 4) = v17 + 1;
            *v17 = 10;
          }
        }
        *(_BYTE *)(v4 + 192) |= *(_BYTE *)(v4 + 194);
        *(_BYTE *)(v4 + 193) = 1;
        if (*(_QWORD *)v4)
          return llvm::VerifierSupport::WriteTs<llvm::ValueAsMetadata const*,llvm::Value *>((llvm::raw_ostream **)v4, &v25, &v22);
      }
    }
  }
  else
  {
    v23[0] = "!DIAssignID attached to unexpected instruction kind";
    v24 = 259;
    v7 = *(llvm::raw_ostream **)this;
    if (*(_QWORD *)this)
    {
      this = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)v23, *(llvm::raw_ostream **)this);
      v8 = (_BYTE *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
      {
        this = llvm::raw_ostream::write(v7, 10);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v8 + 1;
        *v8 = 10;
      }
    }
    *(_BYTE *)(v4 + 192) |= *(_BYTE *)(v4 + 194);
    *(_BYTE *)(v4 + 193) = 1;
    if (*(_QWORD *)v4)
      return llvm::VerifierSupport::WriteTs<llvm::GlobalValue,llvm::MDNode const*>((llvm::raw_ostream **)v4, a2, &v25);
  }
  return this;
}

_QWORD **`anonymous namespace'::Verifier::visitAnnotationMetadata(_QWORD **this, llvm::MDNode *a2)
{
  _QWORD **v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE **v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  const char *v15;
  __int16 v16;

  v2 = this;
  if (*(_BYTE *)a2 != 5)
  {
    v15 = "annotation must be a tuple";
    v16 = 259;
    v7 = (llvm::raw_ostream *)*this;
    if (!*this)
      goto LABEL_27;
    goto LABEL_24;
  }
  v3 = *((_QWORD *)a2 - 2);
  if ((v3 & 2) != 0)
  {
    v8 = *((unsigned int *)a2 - 6);
    if ((_DWORD)v8)
    {
      v5 = (_QWORD *)*((_QWORD *)a2 - 4);
      v6 = &v5[v8];
      while (1)
      {
LABEL_11:
        v9 = (_BYTE *)*v5;
        if (*(_BYTE *)*v5)
        {
          if (*(_BYTE *)*v5 != 5)
            goto LABEL_21;
          v10 = *((_QWORD *)v9 - 2);
          if ((v10 & 2) != 0)
          {
            v11 = (_BYTE **)*((_QWORD *)v9 - 4);
            v12 = *((unsigned int *)v9 - 6);
            if (v12)
            {
LABEL_17:
              v13 = 8 * v12;
              while (!**v11)
              {
                ++v11;
                v13 -= 8;
                if (!v13)
                  goto LABEL_10;
              }
LABEL_21:
              v15 = "operands must be a string or a tuple of strings";
              v16 = 259;
              v7 = (llvm::raw_ostream *)*this;
              if (!*this)
              {
LABEL_27:
                *((_BYTE *)v2 + 192) = 1;
                return this;
              }
LABEL_24:
              this = (_QWORD **)llvm::Twine::print((llvm::Twine *)&v15, v7);
              v14 = (_BYTE *)*((_QWORD *)v7 + 4);
              if ((unint64_t)v14 >= *((_QWORD *)v7 + 3))
              {
                this = (_QWORD **)llvm::raw_ostream::write(v7, 10);
              }
              else
              {
                *((_QWORD *)v7 + 4) = v14 + 1;
                *v14 = 10;
              }
              goto LABEL_27;
            }
          }
          else
          {
            v11 = (_BYTE **)&v9[-8 * ((v10 >> 2) & 0xF) - 16];
            v12 = (v10 >> 6) & 0xF;
            if (v12)
              goto LABEL_17;
          }
        }
LABEL_10:
        if (++v5 == v6)
          return this;
      }
    }
LABEL_23:
    v15 = "annotation must have at least one operand";
    v16 = 259;
    v7 = (llvm::raw_ostream *)*this;
    if (!*this)
      goto LABEL_27;
    goto LABEL_24;
  }
  if ((v3 & 0x3C0) == 0)
    goto LABEL_23;
  v4 = (v3 >> 6) & 0xF;
  if (v4)
  {
    v5 = (_QWORD *)((char *)a2 - 8 * ((v3 >> 2) & 0xF) - 16);
    v6 = &v5[v4];
    goto LABEL_11;
  }
  return this;
}

llvm::Metadata *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>(llvm::Metadata *result, llvm::Twine *this, unsigned __int8 **a3, llvm::Metadata **a4)
{
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  v6 = (uint64_t)result;
  v7 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::Metadata *)llvm::Twine::print(this, v7);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      result = llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 10;
    }
  }
  *(_BYTE *)(v6 + 192) |= *(_BYTE *)(v6 + 194);
  *(_BYTE *)(v6 + 193) = 1;
  if (*(_QWORD *)v6)
    return llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v6, a3, a4);
  return result;
}

uint64_t llvm::dyn_cast<llvm::DbgVariableIntrinsic,llvm::Instruction>(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_BYTE *)(result + 16) != 84)
    return 0;
  v1 = *(_QWORD *)(result - 32);
  if (!v1
    || *(_BYTE *)(v1 + 16)
    || *(_QWORD *)(v1 + 24) != *(_QWORD *)(result + 80)
    || (*(_BYTE *)(v1 + 33) & 0x20) == 0)
  {
    return 0;
  }
  v2 = *(_DWORD *)(v1 + 36) - 61;
  if (v2 > 3 || v2 == 2)
    return 0;
  return result;
}

void `anonymous namespace'::Verifier::verifyFragmentExpression(llvm::raw_ostream **this, const llvm::DbgVariableIntrinsic *a2)
{
  char *v4;
  _BYTE *v5;
  llvm::DIVariable *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  __int32 v10;
  __int32 v11;
  unsigned __int8 *SizeInBits;
  char v13;
  const char *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  int8x16_t v17;
  char v18;
  llvm::Metadata *v19;
  const char *v20;
  __int16 v21;
  unsigned __int8 *v22;

  v4 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v5 = *(_BYTE **)(*((_QWORD *)v4 + 4) + 24);
  if (v5)
  {
    if (*v5 == 26)
      v6 = *(llvm::DIVariable **)(*((_QWORD *)v4 + 4) + 24);
    else
      v6 = 0;
    v7 = *(uint64_t **)(*((_QWORD *)v4 + 8) + 24);
    if (!v7)
      return;
  }
  else
  {
    v6 = 0;
    v7 = *(uint64_t **)(*((_QWORD *)v4 + 8) + 24);
    if (!v7)
      return;
  }
  v8 = *(unsigned __int8 *)v7;
  if (v8 == 7)
    v9 = v7;
  else
    v9 = 0;
  if (v6)
  {
    if (v8 == 7 && llvm::DIExpression::isValid((llvm::DIExpression *)v9))
    {
      llvm::DIExpression::getFragmentInfo(v9[2], v9[3], &v17);
      if (v18)
      {
        if ((*((_BYTE *)v6 + 24) & 0x40) == 0)
        {
          v10 = v17.i32[0];
          v11 = v17.i32[2];
          v22 = (unsigned __int8 *)a2;
          SizeInBits = llvm::DIVariable::getSizeInBits(v6);
          if (v13)
          {
            if ((v11 + v10) <= (unint64_t)SizeInBits)
            {
              if (SizeInBits != (unsigned __int8 *)v10)
                return;
              v14 = "fragment covers entire variable";
            }
            else
            {
              v14 = "fragment is larger than or outside of variable";
            }
            v19 = v6;
            v20 = v14;
            v21 = 259;
            v15 = *this;
            if (*this)
            {
              llvm::Twine::print((llvm::Twine *)&v20, *this);
              v16 = (_BYTE *)*((_QWORD *)v15 + 4);
              if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
              {
                llvm::raw_ostream::write(v15, 10);
              }
              else
              {
                *((_QWORD *)v15 + 4) = v16 + 1;
                *v16 = 10;
              }
            }
            *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
            *((_BYTE *)this + 193) = 1;
            if (*this)
              llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>(this, &v22, &v19);
          }
        }
      }
    }
  }
}

uint64_t `anonymous namespace'::Verifier::verifyNotEntryValue(uint64_t this, const llvm::DbgVariableIntrinsic *a2)
{
  uint64_t **v2;
  llvm::raw_ostream *v4;
  int v5;
  llvm::raw_ostream *v6;
  const char *v7;
  __int16 v8;

  v2 = *(uint64_t ***)(((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8] + 24);
  if (v2)
  {
    if (*(_BYTE *)v2 == 7)
    {
      v4 = (llvm::raw_ostream *)this;
      this = llvm::DIExpression::isValid(*(llvm::DIExpression **)(((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8]
                                                                + 24));
      if ((_DWORD)this)
      {
        if (**(unsigned __int8 **)(*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)) + 24) - 1 > 1
          || (this = llvm::DbgVariableIntrinsic::getVariableLocationOp(a2, 0),
              v5 = *(unsigned __int8 *)(this + 16),
              (v5 - 11) >= 2)
          && (v5 != 21 || (this = llvm::Argument::hasAttribute(this, 65), (this & 1) == 0)))
        {
          this = llvm::DIExpression::isEntryValue(v2);
          if ((_DWORD)this)
          {
            v6 = a2;
            v7 = "Entry values are only allowed in MIR unless they target a swiftasync Argument";
            v8 = 259;
            return (uint64_t)llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*>(v4, (llvm::Twine *)&v7, &v6);
          }
        }
      }
    }
  }
  return this;
}

const llvm::Module **`anonymous namespace'::Verifier::visitCallStackMetadata(const llvm::Module **this, const llvm::Module **a2)
{
  unint64_t v2;
  uint64_t v3;
  const llvm::Module ***v4;
  const llvm::Module ***v5;
  uint64_t v6;
  const llvm::Module **v7;
  _QWORD v8[4];
  __int16 v9;
  const llvm::Module **v10;

  v10 = a2;
  v2 = (unint64_t)*(a2 - 2);
  if ((v2 & 2) != 0)
  {
    v6 = *((unsigned int *)a2 - 6);
    if ((_DWORD)v6)
    {
      v4 = (const llvm::Module ***)*(a2 - 4);
      v5 = &v4[v6];
      goto LABEL_7;
    }
    goto LABEL_12;
  }
  if ((v2 & 0x3C0) == 0)
  {
LABEL_12:
    v8[0] = "call stack metadata should have at least 1 operand";
    v9 = 259;
    return llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)v8, &v10);
  }
  v3 = (v2 >> 6) & 0xF;
  if (v3)
  {
    v4 = (const llvm::Module ***)&a2[-((v2 >> 2) & 0xF) - 2];
    v5 = &v4[v3];
LABEL_7:
    while (1)
    {
      v7 = *v4;
      if (!*v4 || *(_BYTE *)v7 != 1 || *((_BYTE *)v7[16] + 16) != 16)
        break;
      if (++v4 == v5)
        return this;
    }
    v8[0] = "call stack metadata operand should be constant integer";
    v9 = 259;
    return llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(this, (llvm::Twine *)v8, v4);
  }
  return this;
}

void `anonymous namespace'::Verifier::visitCallBase(llvm::raw_ostream **this, llvm::CallBase *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  Type *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  unint64_t v20;
  llvm::Value *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  llvm::Type *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Type *v27;
  char v28;
  int hasAttribute;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  int v42;
  char *Descriptor;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  const char *v51;
  int v52;
  int v53;
  unsigned int v54;
  const char *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Type *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  llvm::IntrinsicInst *v72;
  unsigned int NumOperandBundles;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v87;
  uint64_t v88;
  llvm::Function *Function;
  uint64_t Subprogram;
  uint64_t v91;
  char isInterposable;
  BOOL isDeclaration;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned __int8 *v98[3];
  unsigned __int8 *v99;
  Type *v100;
  llvm::CallBase *v101;
  const void *v102;
  uint64_t v103[4];
  __int16 v104;

  v4 = **((_QWORD **)a2 - 4);
  if (*(_BYTE *)(v4 + 8) != 15)
  {
    v14 = "Called function must be a pointer!";
    goto LABEL_11;
  }
  v5 = *((_QWORD *)a2 + 10);
  v6 = *(_QWORD *)(v4 + 24);
  if (v6)
    v7 = v6 == v5;
  else
    v7 = 1;
  if (!v7)
  {
    v14 = "Called function is not the same type as the call!";
    goto LABEL_11;
  }
  v8 = *(_DWORD *)(v5 + 8);
  v9 = llvm::CallBase::arg_end(a2);
  v10 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v11 = (unint64_t)(v9 - (_QWORD)v10) >> 5;
  v12 = *(_DWORD *)(v5 + 12);
  v13 = v12 - 1;
  if (v8 < 0x100)
  {
    if (v13 != (_DWORD)v11)
    {
      v14 = "Incorrect number of arguments passed to called function!";
      goto LABEL_11;
    }
  }
  else if (v13 > v11)
  {
    v14 = "Called function requires more parameters than were provided!";
    goto LABEL_11;
  }
  v15 = 1;
  while (v12 != v15)
  {
    v16 = *(unsigned __int8 **)&v10[32 * v15 - 32];
    v17 = *(Type **)(*(_QWORD *)(v5 + 16) + 8 * v15++);
    if (*(Type **)v16 != v17)
    {
      v103[0] = (uint64_t)"Call parameter type does not match function signature!";
      v104 = 259;
      v98[0] = v16;
      v100 = v17;
      v18 = *this;
      if (*this)
      {
        llvm::Twine::print((llvm::Twine *)v103, *this);
        v19 = (_BYTE *)*((_QWORD *)v18 + 4);
        if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
        {
          llvm::raw_ostream::write(v18, 10);
        }
        else
        {
          *((_QWORD *)v18 + 4) = v19 + 1;
          *v19 = 10;
        }
        v23 = *this;
        *((_BYTE *)this + 192) = 1;
        if (v23)
          llvm::VerifierSupport::WriteTs<llvm::Value *,llvm::Type *,llvm::CallBase>(this, v98, &v100, a2);
      }
      else
      {
        *((_BYTE *)this + 192) = 1;
      }
      return;
    }
  }
  v102 = (const void *)*((_QWORD *)a2 + 9);
  v20 = (unint64_t)(llvm::CallBase::arg_end(a2) - ((_QWORD)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) >> 5;
  v103[0] = (uint64_t)v102;
  if (llvm::AttributeSet::getNumAttributes((llvm::AttributeSet *)v103) > (int)v20 + 2)
  {
    v14 = "Attribute after last parameter!";
    goto LABEL_11;
  }
  v21 = llvm::Value::stripPointerCasts(*((llvm::Value **)a2 - 4));
  if (*((_BYTE *)v21 + 16))
    v22 = 0;
  else
    v22 = (uint64_t)v21;
  if (!v22 || (*(_BYTE *)(v22 + 33) & 0x20) == 0)
  {
    if ((*((_WORD *)a2 + 9) & 0xFF8) == 0x1A0)
      goto LABEL_29;
    v100 = (Type *)this;
    v101 = a2;
    v24 = **(llvm::Type ***)(v5 + 16);
    v103[0] = (uint64_t)"return type";
    v104 = 259;
    if (*(_DWORD *)(v5 + 12) != 1)
    {
      v25 = 0;
      v26 = 8 * (*(_DWORD *)(v5 + 12) - 1);
      do
      {
        v27 = *(llvm::Type **)(*(_QWORD *)(v5 + 16) + v25 + 8);
        v103[0] = (uint64_t)"argument passed";
        v104 = 259;
        v25 += 8;
      }
      while (v26 != v25);
    }
    if ((llvm::AttributeSet::hasAttribute(&v102, 59) & 1) == 0)
    {
      v28 = 0;
      goto LABEL_46;
    }
    if (!v22)
      goto LABEL_99;
    v28 = 0;
LABEL_45:
    if ((llvm::Function::hasFnAttribute(v22, 59) & 1) != 0)
      goto LABEL_46;
LABEL_99:
    v14 = "speculatable attribute may not apply to call sites";
    goto LABEL_11;
  }
  if (*(_QWORD *)(v22 + 24) != v5)
  {
    v14 = "Intrinsic called with incompatible signature";
    goto LABEL_11;
  }
  if ((*((_WORD *)a2 + 9) & 0xFF8) == 0x1A0)
  {
LABEL_29:
    v14 = "Direct calls to amdgpu_cs_chain/amdgpu_cs_chain_preserve functions not allowed. Please use the @llvm.amdgpu.cs"
          ".chain intrinsic instead.";
    goto LABEL_11;
  }
  v100 = (Type *)this;
  v101 = a2;
  v28 = 1;
  if ((llvm::AttributeSet::hasAttribute(&v102, 59) & 1) != 0)
    goto LABEL_45;
LABEL_46:
  hasAttribute = llvm::AttributeSet::hasAttribute(&v102, 76);
  v30 = *((_QWORD *)a2 - 4);
  if (hasAttribute)
  {
    if (*(_DWORD *)(v30 + 36) != 14)
    {
      v55 = "preallocated as a call site attribute can only be on llvm.call.preallocated.arg";
LABEL_137:
      v103[0] = (uint64_t)v55;
      v104 = 259;
      llvm::VerifierSupport::CheckFailed((_QWORD **)this, (const llvm::Twine *)v103);
      return;
    }
    v31 = 0;
  }
  else
  {
    v31 = *(unsigned __int8 *)(v30 + 16);
  }
  if (llvm::CallBase::hasInAllocaArgument(a2))
  {
    v32 = llvm::Value::stripInBoundsOffsets(*((_QWORD *)a2 + 4 * (*(_DWORD *)(v5 + 12) - 2) + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (void (*)(uint64_t, uint64_t))_ZN4llvm12function_refIFvPKNS_5ValueEEE11callback_fnIZNS1_20stripInBoundsOffsetsES5_Ed_UlS3_E_EEvlS3_, (uint64_t)v103);
    v33 = *(_BYTE *)(v32 + 16) == 59 ? v32 : 0;
    v98[0] = (unsigned __int8 *)v33;
    if (v33)
    {
      if ((*(_WORD *)(v33 + 18) & 0x40) == 0)
      {
        v103[0] = (uint64_t)"inalloca argument for call has mismatched alloca";
        v104 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream *)this, (llvm::Twine *)v103, v98, a2);
        return;
      }
    }
  }
  v97 = v28;
  v34 = *(_DWORD *)(v5 + 12);
  v35 = (v34 - 1);
  if (v34 != 1)
  {
    v36 = 0;
    do
    {
      if (!llvm::CallBase::paramHasAttr((uint64_t *)a2, v36, 66))
        goto LABEL_81;
      v98[0] = *((unsigned __int8 **)a2 + 4 * v36 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      v99 = 0;
      v37 = llvm::Value::stripInBoundsOffsets((uint64_t)v98[0], (void (*)(uint64_t, uint64_t))_ZN4llvm12function_refIFvPKNS_5ValueEEE11callback_fnIZNS1_20stripInBoundsOffsetsES5_Ed_UlS3_E_EEvlS3_, (uint64_t)v103);
      if (*(_BYTE *)(v37 + 16) == 59)
        v38 = v37;
      else
        v38 = 0;
      v99 = (unsigned __int8 *)v38;
      if (v38)
      {
        if ((*(_WORD *)(v38 + 18) & 0x80) != 0)
        {
          v40 = 32;
          goto LABEL_78;
        }
        v103[0] = (uint64_t)"swifterror argument for call has mismatched alloca";
        v104 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream *)this, (llvm::Twine *)v103, &v99, a2);
      }
      else
      {
        if (v98[0][16] == 21)
          v39 = v98[0];
        else
          v39 = 0;
        v99 = v39;
        if (v39)
        {
          if ((llvm::Argument::hasSwiftErrorAttr((llvm::Argument *)v39) & 1) != 0)
          {
            v40 = 0;
            goto LABEL_78;
          }
          v103[0] = (uint64_t)"swifterror argument for call has mismatched parameter";
          v104 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream *)this, (llvm::Twine *)v103, &v99, a2);
        }
        else
        {
          v103[0] = (uint64_t)"swifterror argument should come from an alloca or parameter";
          v104 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream *)this, (llvm::Twine *)v103, v98, a2);
        }
      }
      v40 = 1;
LABEL_78:
      if (v40)
      {
        if (v40 != 32)
          return;
        v41 = v36 + 1;
        goto LABEL_60;
      }
LABEL_81:
      v41 = v36 + 1;
      if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v102, (int)v36 + 1, 11)
        && (!v22 || (llvm::Function::hasParamAttribute(v22, v36, 11) & 1) == 0))
      {
        v103[0] = (uint64_t)"immarg may not apply only to call sites";
        v104 = 259;
        v98[0] = *((unsigned __int8 **)a2 + 4 * v36 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        goto LABEL_184;
      }
      if (llvm::CallBase::paramHasAttr((uint64_t *)a2, v36, 11))
      {
        v98[0] = *((unsigned __int8 **)a2 + 4 * v36 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        if ((v98[0][16] & 0xFE) != 0x10)
        {
          v51 = "immarg operand has non-immediate parameter";
LABEL_183:
          v103[0] = (uint64_t)v51;
          v104 = 259;
LABEL_184:
          llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream *)this, (llvm::Twine *)v103, v98, a2);
          return;
        }
      }
      if (llvm::CallBase::paramHasAttr((uint64_t *)a2, v36, 76))
      {
        v42 = *((_DWORD *)a2 + 5);
        v98[0] = *((unsigned __int8 **)a2 + 4 * v36 + -4 * (v42 & 0x7FFFFFF));
        if (v42 < 0)
        {
          Descriptor = llvm::User::getDescriptor(a2);
          if ((*((_DWORD *)a2 + 5) & 0x80000000) != 0)
          {
            v45 = llvm::User::getDescriptor(a2);
            v44 = &v45[v46];
          }
          else
          {
            v44 = 0;
          }
        }
        else
        {
          Descriptor = 0;
          v44 = 0;
        }
        v47 = v44 - Descriptor;
        if ((v47 & 0xFFFFFFFF0) != 0)
        {
          v48 = 0;
          v49 = 0;
          v50 = (v47 >> 4);
          do
          {
            if (*(_DWORD *)(*(_QWORD *)&llvm::User::getDescriptor(a2)[v48] + 8) == 4)
              ++v49;
            v48 += 16;
            --v50;
          }
          while (v50);
          if ((v49 == 0) != llvm::CallBase::isMustTailCall(a2))
          {
LABEL_98:
            v51 = "preallocated operand either requires a preallocated bundle or the call to be musttail (but not both)";
            goto LABEL_183;
          }
        }
        else if (!llvm::CallBase::isMustTailCall(a2))
        {
          goto LABEL_98;
        }
      }
LABEL_60:
      v36 = v41;
    }
    while (v41 != v35);
  }
  if (*(_DWORD *)(v5 + 8) >= 0x100u)
  {
    if (*(_DWORD *)(v5 + 12) == 1)
    {
      LOBYTE(v52) = 0;
      LOBYTE(v53) = 0;
      v54 = 0;
    }
    else
    {
      v56 = 0;
      v53 = 0;
      v52 = 0;
      do
      {
        v52 |= llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v102, ++v56, 18);
        v53 |= llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v102, v56, 48);
        v54 = *(_DWORD *)(v5 + 12) - 1;
      }
      while (v56 < v54);
    }
    v57 = llvm::CallBase::arg_end(a2);
    v58 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if (v54 < ((unint64_t)(v57 - (_QWORD)a2 + 32 * v58) >> 5))
    {
      v59 = -v58;
      v60 = v54;
      v61 = (char *)a2 + 32 * v54;
      do
      {
        v64 = **(llvm::Type ***)&v61[32 * v59];
        v98[0] = (unsigned __int8 *)llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v102, v60);
        v65 = llvm::AttributeSet::hasAttribute(v98, 18);
        if (v65 && (v52 & 1) != 0)
        {
          v14 = "More than one parameter has attribute nest!";
          goto LABEL_11;
        }
        if (llvm::AttributeSet::hasAttribute(v98, 48))
        {
          if ((v53 & 1) != 0)
          {
            v14 = "More than one parameter has attribute returned!";
            goto LABEL_11;
          }
          if (!llvm::Type::canLosslesslyBitCastTo(v64, **(llvm::Type ***)(v5 + 16)))
          {
            v14 = "Incompatible argument and return types for 'returned' attribute";
            goto LABEL_11;
          }
          LOBYTE(v53) = 1;
        }
        v66 = *((_QWORD *)a2 - 4);
        if ((!v66
           || *(_BYTE *)(v66 + 16)
           || *(_QWORD *)(v66 + 24) != *((_QWORD *)a2 + 10)
           || *(_DWORD *)(v66 + 36) != 136)
          && llvm::AttributeSet::hasAttribute(v98, 77))
        {
          v14 = "Attribute 'sret' cannot be used for vararg call arguments!";
          goto LABEL_11;
        }
        if (llvm::AttributeSet::hasAttribute(v98, 75)
          && v60 != ((unint64_t)(llvm::CallBase::arg_end(a2)
                                                    - ((_QWORD)a2
                                                     - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) >> 5)
                  - 1)
        {
          v14 = "inalloca isn't on the last argument!";
          goto LABEL_11;
        }
        LOBYTE(v52) = v65 | v52;
        ++v60;
        v62 = llvm::CallBase::arg_end(a2);
        v63 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        v59 = -v63;
        v61 += 32;
      }
      while (v60 < ((unint64_t)(v62 - (_QWORD)a2 + 32 * v63) >> 5));
    }
  }
  if ((v97 & 1) == 0 && 8 * *(unsigned int *)(v5 + 12) != 8)
  {
    v67 = *(_QWORD *)(v5 + 16) + 8;
    v68 = 8 * ((8 * *(unsigned int *)(v5 + 12) - 8) >> 3);
    do
    {
      v69 = *(unsigned __int8 *)(*(_QWORD *)v67 + 8);
      if (v69 == 12)
      {
        v14 = "Function has token parameter but isn't an intrinsic";
        goto LABEL_11;
      }
      if (v69 == 9)
      {
        v14 = "Function has metadata parameter but isn't an intrinsic";
        goto LABEL_11;
      }
      v67 += 8;
      v68 -= 8;
    }
    while (v68);
  }
  v70 = *((_QWORD *)a2 - 4);
  if (v70 && !*(_BYTE *)(v70 + 16) && *(_QWORD *)(v70 + 24) == *((_QWORD *)a2 + 10))
    goto LABEL_236;
  v71 = *(unsigned __int8 *)(**(_QWORD **)(v5 + 16) + 8);
  if (v71 == 11)
  {
    v55 = "Return type cannot be x86_amx for indirect call!";
    goto LABEL_137;
  }
  if (v71 == 12)
  {
    v55 = "Return type cannot be token for indirect call!";
    goto LABEL_137;
  }
  if (v70 && !*(_BYTE *)(v70 + 16))
  {
LABEL_236:
    if (*(_QWORD *)(v70 + 24) == *((_QWORD *)a2 + 10))
    {
      v72 = (llvm::IntrinsicInst *)*(unsigned int *)(v70 + 36);
      if ((_DWORD)v72)
    }
  }
  NumOperandBundles = llvm::CallBase::getNumOperandBundles(a2);
  if (NumOperandBundles)
  {
    v74 = 0;
    v95 = 0;
    v96 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v94 = 0;
    v78 = 0;
    v79 = 16 * NumOperandBundles;
    while (1)
    {
      v80 = llvm::User::getDescriptor(a2);
      v81 = *(unsigned int *)&v80[v74 + 8];
      v82 = (char *)a2 + 32 * v81 + -32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
      v83 = (unsigned __int8 *)(*(unsigned int *)&v80[v74 + 12] - v81);
      v84 = *(_QWORD *)&v80[v74];
      v98[0] = (unsigned __int8 *)v82;
      v98[1] = v83;
      v98[2] = (unsigned __int8 *)v84;
      switch(*(_DWORD *)(v84 + 8))
      {
        case 0:
          if ((v95 & 0x100000000) == 0)
          {
            BYTE4(v95) = 1;
            goto LABEL_146;
          }
          v14 = "Multiple deopt operand bundles";
          goto LABEL_11;
        case 1:
          if ((v78 & 1) != 0)
          {
            v14 = "Multiple funclet operand bundles";
            goto LABEL_11;
          }
          if (v83 != (unsigned __int8 *)1)
          {
            v14 = "Expected exactly one funclet bundle operand";
            goto LABEL_11;
          }
          v85 = *(unsigned __int8 *)(*(_QWORD *)v82 + 16);
          if (v85 < 0x1C || v85 - 79 >= 2)
          {
            v14 = "Funclet bundle operands should correspond to a FuncletPadInst";
            goto LABEL_11;
          }
          v78 = 1;
          goto LABEL_146;
        case 2:
          if ((v96 & 1) != 0)
          {
            v14 = "Multiple gc-transition operand bundles";
            goto LABEL_11;
          }
          LOBYTE(v96) = 1;
          goto LABEL_146;
        case 3:
          if ((v94 & 1) != 0)
          {
            v14 = "Multiple CFGuardTarget operand bundles";
            goto LABEL_11;
          }
          if (v83 != (unsigned __int8 *)1)
          {
            v14 = "Expected exactly one cfguardtarget bundle operand";
            goto LABEL_11;
          }
          v94 = 1;
          goto LABEL_146;
        case 4:
          if ((v77 & 1) != 0)
          {
            v14 = "Multiple preallocated operand bundles";
            goto LABEL_11;
          }
          if (v83 != (unsigned __int8 *)1)
          {
            v14 = "Expected exactly one preallocated bundle operand";
            goto LABEL_11;
          }
          v87 = llvm::dyn_cast<llvm::IntrinsicInst,llvm::Use>((uint64_t *)v82);
          if (!v87 || *(_DWORD *)(*(_QWORD *)(v87 - 32) + 36) != 15)
          {
            v14 = "\"preallocated\" argument must be a token from llvm.call.preallocated.setup";
            goto LABEL_11;
          }
          v77 = 1;
          goto LABEL_146;
        case 5:
          if ((v96 & 0x100000000) != 0)
          {
            v14 = "Multiple gc-live operand bundles";
            goto LABEL_11;
          }
          BYTE4(v96) = 1;
          goto LABEL_146;
        case 6:
          if ((v95 & 1) != 0)
          {
            v14 = "Multiple \"clang.arc.attachedcall\" operand bundles";
            goto LABEL_11;
          }
          LOBYTE(v95) = 1;
          goto LABEL_146;
        case 7:
          if ((v76 & 1) != 0)
          {
            v14 = "Multiple ptrauth operand bundles";
            goto LABEL_11;
          }
          if (v83 != (unsigned __int8 *)2)
          {
            v14 = "Expected exactly two ptrauth bundle operands";
            goto LABEL_11;
          }
          if (*(_BYTE *)(*(_QWORD *)v82 + 16) != 16 || !llvm::Type::isIntegerTy(**(llvm::Type ***)v82, 32))
          {
            v14 = "Ptrauth bundle key operand must be an i32 constant";
            goto LABEL_11;
          }
          if (!llvm::Type::isIntegerTy(**((llvm::Type ***)v82 + 4), 64))
          {
            v14 = "Ptrauth bundle discriminator operand must be an i64";
LABEL_11:
            v103[0] = (uint64_t)v14;
            v104 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream *)this, (llvm::Twine *)v103, (unsigned __int8 *)a2);
            return;
          }
          v76 = 1;
LABEL_146:
          v74 += 16;
          if (v79 == v74)
            goto LABEL_186;
          break;
        case 8:
          if ((v75 & 1) != 0)
          {
            v14 = "Multiple kcfi operand bundles";
            goto LABEL_11;
          }
          if (v83 != (unsigned __int8 *)1)
          {
            v14 = "Expected exactly one kcfi bundle operand";
            goto LABEL_11;
          }
          if (*(_BYTE *)(*(_QWORD *)v82 + 16) != 16 || !llvm::Type::isIntegerTy(**(llvm::Type ***)v82, 32))
          {
            v14 = "Kcfi bundle operand must be an i32 constant";
            goto LABEL_11;
          }
          v75 = 1;
          goto LABEL_146;
        default:
          goto LABEL_146;
      }
    }
  }
  v76 = 0;
LABEL_186:
  v88 = *((_QWORD *)a2 - 4);
  if (v88 && !*(_BYTE *)(v88 + 16) && ((*(_QWORD *)(v88 + 24) == *((_QWORD *)a2 + 10)) & v76) == 1)
  {
    v14 = "Direct call cannot have a ptrauth bundle";
    goto LABEL_11;
  }
  Function = (llvm::Function *)llvm::Instruction::getFunction(a2);
  Subprogram = llvm::Function::getSubprogram(Function);
  v91 = *((_QWORD *)a2 - 4);
  if (Subprogram)
  {
    if (!*(_BYTE *)(v91 + 16) && *(_QWORD *)(v91 + 24) == *((_QWORD *)a2 + 10))
    {
      isInterposable = llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v91);
      v91 = *((_QWORD *)a2 - 4);
      if ((isInterposable & 1) == 0)
      {
        if (!v91 || *(_BYTE *)(v91 + 16) || *(_QWORD *)(v91 + 24) != *((_QWORD *)a2 + 10))
          v91 = 0;
        isDeclaration = llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v91);
        v91 = *((_QWORD *)a2 - 4);
        if (!isDeclaration)
        {
          if (!v91 || *(_BYTE *)(v91 + 16) || *(_QWORD *)(v91 + 24) != *((_QWORD *)a2 + 10))
            v91 = 0;
          if (llvm::Function::getSubprogram((llvm::Function *)v91) && !*((_QWORD *)a2 + 6))
          {
            v103[0] = (uint64_t)"inlinable function call in a function with debug info must have a !dbg location";
            v104 = 259;
            llvm::VerifierSupport::DebugInfoCheckFailed<llvm::CallBase>((llvm::raw_ostream *)this, (llvm::Twine *)v103, a2);
            return;
          }
          v91 = *((_QWORD *)a2 - 4);
        }
      }
    }
  }
  if (*(_BYTE *)(v91 + 16) == 24)
  llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::visit((uint64_t)(this + 254), (uint64_t)a2);
}

void `anonymous namespace'::Verifier::visitCallBase(llvm::CallBase &)::$_0::operator()(uint64_t a1, llvm::Type *a2, uint64_t *a3)
{
  llvm::DataLayout **v6;
  unsigned int v7;
  BOOL v9;
  int v10;
  BOOL v13;
  unsigned __int8 v14;
  int v15;
  const char *v16;
  _BOOL4 v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  char v27;
  char v28;

  v6 = *(llvm::DataLayout ***)a1;
  v7 = *((unsigned __int8 *)a2 + 8);
  v9 = v7 == 13 || v7 < 4 || v7 == 5;
  v10 = v7 & 0xFE;
  v13 = v9 || v10 == 10 || (v7 & 0xFFFFFFFD) == 4 || v7 == 15;
  if (v13
    || (v10 != 16 ? (v22 = v10 == 18) : (v22 = 1),
        !v22 ? (v23 = v7 == 21) : (v23 = 1),
        v23 && llvm::Type::isSizedDerivedType((uint64_t)a2, 0)))
  {
    llvm::DataLayout::getABITypeAlign(v6[22], a2);
    if (v14 >= 0xFu)
    {
      v15 = *((unsigned __int8 *)a3 + 32);
      if (*((_BYTE *)a3 + 32))
      {
        v16 = "Incorrect alignment of ";
        if (v15 == 1)
        {
          v24[0] = "Incorrect alignment of ";
          v25 = 259;
          v17 = 1;
        }
        else
        {
          v19 = a3[1];
          if (*((_BYTE *)a3 + 33) == 1)
          {
            v20 = (uint64_t *)*a3;
          }
          else
          {
            v15 = 2;
            v20 = a3;
          }
          v24[0] = "Incorrect alignment of ";
          v24[2] = v20;
          v24[3] = v19;
          LOBYTE(v25) = 3;
          HIBYTE(v25) = v15;
          v17 = v15 == 1;
        }
        v21 = !v17;
        if (v17)
          LOBYTE(v15) = 3;
        else
          LOBYTE(v15) = 2;
        if (v21)
          v16 = (const char *)v24;
        v26[0] = v16;
        v26[2] = " to called function!";
        v18 = 3;
      }
      else
      {
        v25 = 256;
        v18 = 1;
      }
      v27 = v15;
      v28 = v18;
      llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream *)v6, (llvm::Twine *)v26, *(unsigned __int8 **)(a1 + 8));
    }
  }
}

uint64_t llvm::CallBase::hasInAllocaArgument(llvm::CallBase *this)
{
  int v2;

  if ((llvm::CallBase *)llvm::CallBase::arg_end(this) == (llvm::CallBase *)((char *)this
                                                                           - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF)))
    return 0;
  v2 = ((unint64_t)(llvm::CallBase::arg_end(this) - ((_QWORD)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) >> 5)
     - 1;
  return llvm::CallBase::paramHasAttr((uint64_t *)this, v2, 75);
}

llvm::raw_ostream *llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>(llvm::raw_ostream *result, llvm::Twine *this, unsigned __int8 **a3, llvm::Value *a4)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v8;
  _anonymous_namespace_::TypePrinting *v9;
  _anonymous_namespace_::TypePrinting *v10;

  v4 = (uint64_t)result;
  v5 = *(llvm::raw_ostream **)result;
  if (!*(_QWORD *)result)
  {
    *((_BYTE *)result + 192) = 1;
    return result;
  }
  result = (llvm::raw_ostream *)llvm::Twine::print(this, v5);
  v8 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v8 < *((_QWORD *)v5 + 3))
  {
    *((_QWORD *)v5 + 4) = v8 + 1;
    *v8 = 10;
    v9 = *(_anonymous_namespace_::TypePrinting **)v4;
    *(_BYTE *)(v4 + 192) = 1;
    if (!v9)
      return result;
    return llvm::VerifierSupport::WriteTs<llvm::Value const*,llvm::CallBase>((_anonymous_namespace_::TypePrinting **)v4, a3, a4);
  }
  result = llvm::raw_ostream::write(v5, 10);
  v10 = *(_anonymous_namespace_::TypePrinting **)v4;
  *(_BYTE *)(v4 + 192) = 1;
  if (v10)
    return llvm::VerifierSupport::WriteTs<llvm::Value const*,llvm::CallBase>((_anonymous_namespace_::TypePrinting **)v4, a3, a4);
  return result;
}

uint64_t llvm::CallBase::countOperandBundlesOfType(llvm::CallBase *this, int a2)
{
  char *Descriptor;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    return 0;
  Descriptor = llvm::User::getDescriptor(this);
  v5 = Descriptor;
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
  {
    v6 = -(uint64_t)Descriptor;
    if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) != 0)
      goto LABEL_4;
    return 0;
  }
  v11 = llvm::User::getDescriptor(this);
  v6 = &v11[v12] - v5;
  if ((v6 & 0xFFFFFFFF0) == 0)
    return 0;
LABEL_4:
  v7 = 0;
  LODWORD(v8) = 0;
  v9 = (v6 >> 4);
  do
  {
    if (*(_DWORD *)(*(_QWORD *)&llvm::User::getDescriptor(this)[v7] + 8) == a2)
      v8 = (v8 + 1);
    else
      v8 = v8;
    v7 += 16;
    --v9;
  }
  while (v9);
  return v8;
}

void `anonymous namespace'::Verifier::visitIntrinsicCall(_anonymous_namespace_::Verifier *this, llvm::IntrinsicInst *a2, llvm::CallBase *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int matched;
  char *v10;
  std::string *v11;
  size_t size;
  const char *Name;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t Function;
  const llvm::ValueAsMetadata ***v21;
  int v22;
  llvm::Function *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  const llvm::ValueAsMetadata **v27;
  uint64_t v28;
  const llvm::ValueAsMetadata *v29;
  BOOL v30;
  uint64_t v31;
  const llvm::ValueAsMetadata ****v32;
  uint64_t v33;
  const llvm::ValueAsMetadata ****v34;
  char *v35;
  llvm *v36;
  uint64_t PersonalityFn;
  const llvm::Value *v38;
  int v39;
  llvm::BasicBlock *v41;
  llvm::BasicBlock **v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  char *FirstNonPHI;
  int v47;
  unsigned int NumOperandBundles;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  llvm::Value *v60;
  unsigned int v61;
  int8x16_t **v63;
  __int16 ParamAlignment;
  int v65;
  __int16 v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  llvm::SmallPtrSetImplBase *v85;
  char *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  BOOL v98;
  llvm::CallBrInst *v99;
  llvm::BasicBlock *v100;
  uint64_t UniquePredecessor;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  llvm::BasicBlock **v107;
  llvm::BasicBlock *v108;
  BOOL v109;
  BOOL v110;
  unsigned __int8 *v111;
  int v112;
  unsigned __int8 *v113;
  const char *v114;
  llvm::Metadata *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  int v127;
  BOOL v128;
  llvm::CallBase *v129;
  uint64_t v130;
  llvm::APInt *v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  _BYTE *v140;
  uint64_t v141;
  BOOL v142;
  _QWORD *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  _QWORD *v147;
  void **v148;
  llvm::Value *v149;
  uint64_t v150;
  int8x16_t **v151;
  unsigned int v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  BOOL v159;
  uint64_t v160;
  int8x16_t **v161;
  unsigned int v162;
  char *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  int v170;
  _BOOL4 v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t **v179;
  uint64_t v180;
  int v181;
  int v182;
  llvm::Type *v183;
  char *v184;
  uint64_t *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  unsigned int v206;
  int v207;
  int v209;
  unsigned int v210;
  size_t *v211;
  _QWORD *v212;
  size_t v213;
  uint64_t v215;
  int v216;
  int AttrKindFromName;
  unsigned int v218;
  int v219;
  uint64_t v220;
  char *v221;
  int v222;
  uint64_t v224;
  char v225;
  uint64_t v226;
  unsigned int v227;
  unsigned int v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  _QWORD *v235;
  int v236;
  uint64_t v237;
  BOOL v238;
  const void **v239;
  char v240;
  int64_t v241;
  uint64_t v242;
  uint64_t v243;
  llvm::Argument *v244;
  int v245;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  llvm::ConstantInt *v251;
  uint64_t *v252;
  unint64_t v253;
  _QWORD *LimitedValue;
  int v255;
  llvm::BasicBlock **v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  llvm::Type *v261;
  char *v262;
  unint64_t *v264;
  unint64_t v265;
  char *v266;
  char *v267;
  llvm::Value **v268;
  uint64_t v269;
  llvm::Value **v270;
  llvm::Value *v271;
  int IndexTypeSizeInBits;
  unsigned int v273;
  unsigned int v274;
  unsigned int v276;
  unsigned int v277;
  unint64_t v279;
  uint64_t Statepoint;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t *String;
  uint64_t v287;
  unsigned __int16 v288;
  uint64_t v290;
  uint64_t v291;
  BOOL v292;
  int v293;
  uint64_t v294;
  BOOL v295;
  uint64_t v296;
  char *v297;
  int v298;
  _BOOL4 v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  llvm::Type *v303;
  uint64_t v304;
  uint64_t v305;
  llvm::Type *v306;
  uint64_t BasePtr;
  int v308;
  int v309;
  int v310;
  char v311;
  unsigned int v312;
  llvm::LLVMContext ***v313;
  uint64_t *GC;
  const void *v315;
  const void *v316;
  unsigned __int16 v317;
  char *v318;
  unsigned __int16 v319;
  unsigned __int16 v320;
  char v321;
  void *v322;
  uint64_t v323;
  llvm::SmallPtrSetImplBase *v324;
  llvm::raw_ostream *v325;
  void *__p;
  unint64_t v327;
  char v328;
  char v329;
  std::string v330;
  int *v331;
  uint64_t v332;
  llvm::Value *v333;
  void *p_p;
  unsigned int v335;
  uint64_t v336;
  __int16 v337;
  void *v338;
  uint64_t v339;
  _BYTE v340[32];
  _QWORD *v341;
  uint64_t v342;
  _QWORD v343[14];

  v343[12] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a3 - 4);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *((_QWORD *)a3 + 10))
    v6 = 0;
  v333 = (llvm::Value *)v6;
  if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    p_p = "Intrinsic functions should never be defined!";
    v337 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, &v333);
    return;
  }
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_DWORD *)(v7 + 8);
  v341 = v343;
  v342 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries((int)a2);
  v331 = (int *)v343;
  v332 = 0;
  v338 = v340;
  v339 = 0x400000000;
  matched = llvm::Intrinsic::matchIntrinsicSignature(v7, (unsigned int **)&v331);
  if (matched == 2)
  {
    v10 = "Intrinsic has incorrect argument type!";
    goto LABEL_18;
  }
  if (matched != 1)
  {
    if (v8 < 0x100)
    {
      if (llvm::Intrinsic::matchIntrinsicVarArg(0, &v331))
      {
        v10 = "Callsite was not defined with variable arguments!";
        goto LABEL_18;
      }
    }
    else if (llvm::Intrinsic::matchIntrinsicVarArg(1, &v331))
    {
      v10 = "Intrinsic was not defined with variable arguments!";
      goto LABEL_18;
    }
    if (v332)
    {
      v10 = "Intrinsic has too few arguments!";
      goto LABEL_18;
    }
    llvm::Intrinsic::getName((int)a2, (BOOL **)v338, v339, *((uint64_t **)v333 + 5), v7, &v330);
    if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v330;
    else
      v11 = (std::string *)v330.__r_.__value_.__r.__words[0];
    if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v330.__r_.__value_.__r.__words[2]);
    else
      size = v330.__r_.__value_.__l.__size_;
    Name = llvm::Value::getName(v333);
    if (size != v14 || size && memcmp(v11, Name, size))
    {
      std::operator+<char>();
      v337 = 260;
      p_p = &__p;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, &v333);
      if (v328 < 0)
        operator delete(__p);
      goto LABEL_680;
    }
    v15 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
    v16 = llvm::CallBase::arg_end(a3);
    if (v15 != (char *)v16)
    {
      v17 = (char *)v16;
      while (1)
      {
        v18 = *(_QWORD *)v15;
        if (*(_QWORD *)v15)
          v19 = *(_BYTE *)(*(_QWORD *)v15 + 16) == 23;
        else
          v19 = 0;
        if (!v19)
          goto LABEL_54;
        Function = llvm::Instruction::getFunction(a3);
        v21 = *(const llvm::ValueAsMetadata ****)(v18 + 24);
        v22 = *(unsigned __int8 *)v21;
        if ((v22 - 5) <= 0x1E)
        {
          goto LABEL_54;
        }
        v23 = (llvm::Function *)Function;
        v24 = *((_QWORD *)this + 55);
        if (v24 != *((_QWORD *)this + 54))
          goto LABEL_46;
        v31 = *((unsigned int *)this + 113);
        if (!(_DWORD)v31)
          break;
        v32 = 0;
        v33 = 8 * v31;
        v34 = (const llvm::ValueAsMetadata ****)*((_QWORD *)this + 55);
        while (*v34 != v21)
        {
          if (*v34 == (const llvm::ValueAsMetadata ***)-2)
            v32 = v34;
          ++v34;
          v33 -= 8;
          if (!v33)
          {
            if (!v32)
              goto LABEL_68;
            *v32 = v21;
            --*((_DWORD *)this + 114);
            goto LABEL_48;
          }
        }
LABEL_54:
        if (v18)
          v30 = *(unsigned __int8 *)(v18 + 16) > 0x14u;
        else
          v30 = 1;
        if (!v30 && *(_BYTE *)(*(_QWORD *)v18 + 8) == 11)
        {
          v35 = "const x86_amx is not allowed in argument!";
          goto LABEL_73;
        }
        v15 += 32;
        if (v15 == v17)
          goto LABEL_70;
      }
LABEL_68:
      if (v31 >= *((_DWORD *)this + 112))
      {
LABEL_46:
        llvm::SmallPtrSetImplBase::insert_imp_big((_anonymous_namespace_::Verifier *)((char *)this + 432), *(const void **)(v18 + 24));
        if (!v25)
          goto LABEL_54;
        v22 = *(unsigned __int8 *)v21;
      }
      else
      {
        *((_DWORD *)this + 113) = v31 + 1;
        *(_QWORD *)(v24 + 8 * v31) = v21;
      }
LABEL_48:
      if ((v22 - 3) >= 0xFFFFFFFE)
      {
        v22 = *(unsigned __int8 *)v21;
      }
      if (v22 == 4)
      {
        v26 = *((unsigned int *)v21 + 34);
        if ((_DWORD)v26)
        {
          v27 = v21[16];
          v28 = 8 * v26;
          do
          {
            v29 = *v27++;
            v28 -= 8;
          }
          while (v28);
        }
      }
      goto LABEL_54;
    }
LABEL_70:
    if ((int)a2 <= 2614)
    {
      switch((int)a2)
      {
        case 11:
          v84 = llvm::CallBase::bundle_op_infos(a3);
          v324 = v85;
          if (v84 == (char *)v85)
            goto LABEL_75;
          v86 = v84;
          while (2)
          {
            v323 = *((unsigned int *)v86 + 2);
            v209 = *((_DWORD *)v86 + 3);
            v210 = v209 - v323;
            v211 = *(size_t **)v86;
            v212 = (_QWORD *)(*(_QWORD *)v86 + 16);
            v213 = **(_QWORD **)v86;
            if (v213 == 6)
            {
              v215 = *(_QWORD *)v86 + 16;
              v216 = memcmp(v212, "ignore", 6uLL);
              v212 = (_QWORD *)v215;
              if (!v216)
              {
                AttrKindFromName = llvm::Attribute::getAttrKindFromName((uint64_t)(v211 + 2), 6);
                v218 = AttrKindFromName - 78;
                if (AttrKindFromName != 78)
                  goto LABEL_415;
LABEL_426:
                if ((v210 & 0xFFFFFFFE) != 2)
                {
                  v266 = "alignment assumptions should have 2 or 3 arguments";
                  goto LABEL_679;
                }
                v220 = *((unsigned int *)v86 + 2);
                v221 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
                if (*(_BYTE *)(**(_QWORD **)&v221[32 * v220] + 8) != 15)
                {
                  v266 = "first argument should be a pointer";
                  goto LABEL_679;
                }
                if (*(_BYTE *)(**(_QWORD **)&v221[32 * (v220 + 1)] + 8) != 13)
                {
                  v266 = "second argument should be an integer";
                  goto LABEL_679;
                }
                if (v210 == 3 && *(_BYTE *)(**(_QWORD **)&v221[32 * (v220 + 2)] + 8) != 13)
                {
                  v266 = "third argument should be an integer if present";
                  goto LABEL_679;
                }
LABEL_680:
                if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v330.__r_.__value_.__l.__data_);
                goto LABEL_19;
              }
            }
            else if (v213 == 16
                   && *v212 == 0x6574617261706573
                   && *(_QWORD *)(*(_QWORD *)v86 + 24) == 0x656761726F74735FLL)
            {
              if (v210 != 2)
              {
                v266 = "separate_storage assumptions should have 2 arguments";
                goto LABEL_679;
              }
              v297 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
              if (*(_BYTE *)(**(_QWORD **)&v297[32 * v323] + 8) != 15
                || *(_BYTE *)(**(_QWORD **)&v297[32 * (v323 + 1)] + 8) != 15)
              {
                v266 = "arguments to separate_storage assumptions should be pointers";
                goto LABEL_679;
              }
              goto LABEL_680;
            }
            if (!llvm::Attribute::isExistingAttribute((uint64_t)v212, v213))
            {
              v266 = "tags must be valid attribute names";
              goto LABEL_679;
            }
            AttrKindFromName = llvm::Attribute::getAttrKindFromName(*(_QWORD *)v86 + 16, **(_QWORD **)v86);
            v218 = AttrKindFromName - 78;
            if (AttrKindFromName != 78)
            {
LABEL_415:
              if (v210 >= 3)
              {
                v266 = "too many arguments";
                goto LABEL_679;
              }
              v219 = AttrKindFromName;
              if (AttrKindFromName)
              {
                if (v218 > 9)
                {
                  if (llvm::Attribute::canUseAsParamAttr(AttrKindFromName))
                  {
                    if (v210 != 1)
                    {
                      v266 = "this attribute should have one argument";
                      goto LABEL_679;
                    }
                  }
                  else if (llvm::Attribute::canUseAsFnAttr(v219) && v209 != (_DWORD)v323)
                  {
                    v266 = "this attribute has no argument";
                    goto LABEL_679;
                  }
                }
                else
                {
                  if (v210 != 2)
                  {
                    v266 = "this attribute should have 2 arguments";
                    goto LABEL_679;
                  }
                  if (*(_BYTE *)(*((_QWORD *)a3
                                  + 4 * (*((_DWORD *)v86 + 2) + 1)
                                  + -4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))
                                + 16) != 16)
                  {
                    v266 = "the second argument should be a constant integral value";
LABEL_679:
                    p_p = v266;
                    v337 = 259;
                    llvm::VerifierSupport::CheckFailed<llvm::Function>(this, (llvm::Twine *)&p_p, (unsigned __int8 *)a3);
                    goto LABEL_680;
                  }
                }
                v86 += 16;
                if (v86 == (char *)v324)
                  goto LABEL_75;
                continue;
              }
              goto LABEL_75;
            }
            goto LABEL_426;
          }
        case 13:
          if ((llvm::Type::getScalarSizeInBits(*(llvm::Type **)a3) & 0xF) == 0)
            goto LABEL_75;
          v52 = "bswap must be an even number of bytes";
          goto LABEL_101;
        case 14:
          v87 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v88 = *(unsigned __int8 *)(v87 + 16);
          if (v88 < 0x1C
            || ((v89 = v88 - 33, v30 = v89 > 0x33, v90 = (1 << v89) & 0x8000000000041, !v30)
              ? (v91 = v90 == 0)
              : (v91 = 1),
                v91 || *(_DWORD *)(*(_QWORD *)(v87 - 32) + 36) != 15))
          {
            v35 = "llvm.call.preallocated.arg token argument must be a llvm.call.preallocated.setup";
          }
          else
          {
            if ((llvm::CallBase::hasFnAttr((uint64_t)a3, 76) & 1) != 0)
              goto LABEL_75;
            v35 = "llvm.call.preallocated.arg must be called with a \"preallocated\" call site attribute";
          }
          goto LABEL_73;
        case 15:
          v92 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (v92)
            v93 = *(_BYTE *)(v92 + 16) == 16;
          else
            v93 = 0;
          if (!v93)
          {
            v35 = "llvm.call.preallocated.setup argument must be a constant";
            goto LABEL_73;
          }
          v224 = *((_QWORD *)a3 + 1);
          if (!v224)
            goto LABEL_75;
          v225 = 0;
          while (2)
          {
            v226 = *(_QWORD *)(v224 + 24);
            v227 = *(unsigned __int8 *)(v226 + 16);
            if (v227 < 0x1C
              || ((v228 = v227 - 33, v30 = v228 > 0x33, v229 = (1 << v228) & 0x8000000000041, !v30)
                ? (v230 = v229 == 0)
                : (v230 = 1),
                  v230))
            {
              v35 = "Uses of llvm.call.preallocated.setup must be calls";
              goto LABEL_73;
            }
            v231 = *(_QWORD *)(v226 - 32);
            if (!v231 || *(_BYTE *)(v231 + 16) || *(_QWORD *)(v231 + 24) != *(_QWORD *)(v226 + 80))
              break;
            v236 = *(_DWORD *)(v231 + 36);
            if (v236 == 16)
              goto LABEL_462;
            if (v236 == 14)
            {
              v237 = *(_QWORD *)(v226 - 32 * (*(_DWORD *)(v226 + 20) & 0x7FFFFFF) + 32);
              if (v237)
                v238 = *(_BYTE *)(v237 + 16) == 16;
              else
                v238 = 0;
              if (!v238)
              {
                v35 = "llvm.call.preallocated.alloc arg index must be a constant";
                goto LABEL_73;
              }
              v239 = (const void **)(v237 + 24);
              LODWORD(v327) = *(_DWORD *)(v237 + 32);
              if (v327 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&__p, v239);
              else
                __p = (void *)*v239;
              if (llvm::APInt::sge((llvm::APInt *)&__p, 0)
                && (llvm::APInt::compareSigned((llvm::APInt *)&__p, (const llvm::APInt *)(v92 + 24)) & 0x80000000) != 0)
              {
                v240 = 1;
                if (v327 < 0x41)
                  goto LABEL_480;
              }
              else
              {
                p_p = "llvm.call.preallocated.alloc arg index must be between 0 and corresponding llvm.call.preallocated."
                      "setup's argument count";
                v337 = 259;
                llvm::VerifierSupport::CheckFailed((_QWORD **)this, (const llvm::Twine *)&p_p);
                v240 = 0;
                if (v327 < 0x41)
                  goto LABEL_480;
              }
              if (__p)
                operator delete[](__p);
LABEL_480:
              if ((v240 & 1) == 0)
                goto LABEL_680;
LABEL_462:
              v224 = *(_QWORD *)(v224 + 8);
              if (!v224)
                goto LABEL_75;
              continue;
            }
            break;
          }
          if ((v225 & 1) != 0)
          {
            v35 = "Can have at most one call corresponding to a llvm.call.preallocated.setup";
            goto LABEL_73;
          }
          if (((llvm::CallBase::arg_end(*(llvm::CallBase **)(v224 + 24))
               - (v226
                + 32 * -(*(_DWORD *)(v226 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0)
            goto LABEL_625;
          v232 = 0;
          v233 = 0;
          do
            v232 += llvm::CallBase::paramHasAttr((uint64_t *)v226, v233++, 76);
          while (v233 < ((llvm::CallBase::arg_end((llvm::CallBase *)v226)
                                       - (v226
                                        + 32 * (unint64_t)-(*(_DWORD *)(v226 + 20) & 0x7FFFFFF))) >> 5));
          if (!v232)
          {
LABEL_625:
            v35 = "cannot use preallocated intrinsics on a call without preallocated arguments";
            goto LABEL_73;
          }
          v234 = *(_DWORD *)(v92 + 32);
          v235 = (_QWORD *)(v92 + 24);
          if (v234 < 0x41)
            goto LABEL_457;
          if (v234 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v92 + 24)) <= 0x40)
          {
            v235 = *(_QWORD **)(v92 + 24);
LABEL_457:
            if (*v235 == v232)
            {
              if (llvm::CallBase::countOperandBundlesOfType((llvm::CallBase *)v226, 4) > 1)
                goto LABEL_680;
              llvm::CallBase::getOperandBundle((char *)v226, 4, (uint64_t)&__p);
              if (v329)
              {
                if (*(llvm::CallBase **)__p == a3)
                {
                  v225 = 1;
                  goto LABEL_462;
                }
                v35 = "preallocated bundle must have token from corresponding llvm.call.preallocated.setup";
              }
              else
              {
                v35 = "Use of llvm.call.preallocated.setup outside intrinsics must be in \"preallocated\" operand bundle";
              }
LABEL_73:
              p_p = v35;
              v337 = 259;
              llvm::VerifierSupport::CheckFailed((_QWORD **)this, (const llvm::Twine *)&p_p);
              goto LABEL_680;
            }
          }
          p_p = "llvm.call.preallocated.setup arg size must be equal to number of preallocated arguments at call site";
          v337 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::CallBase>(this, (llvm::Twine *)&p_p, a3, (unsigned __int8 *)v226);
          goto LABEL_680;
        case 16:
          v94 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v95 = *(unsigned __int8 *)(v94 + 16);
          if (v95 >= 0x1C)
          {
            v96 = v95 - 33;
            v30 = v96 > 0x33;
            v97 = (1 << v96) & 0x8000000000041;
            v98 = v30 || v97 == 0;
            if (!v98 && *(_DWORD *)(*(_QWORD *)(v94 - 32) + 36) == 15)
              goto LABEL_75;
          }
          v35 = "llvm.call.preallocated.teardown token argument must be a llvm.call.preallocated.setup";
          goto LABEL_73;
        case 17:
          v99 = (llvm::CallBrInst *)*((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (!v99 || *((_BYTE *)v99 + 16) != 39)
          {
            v52 = "intrinstic requires callbr operand";
            goto LABEL_101;
          }
          v100 = (llvm::BasicBlock *)*((_QWORD *)a3 + 5);
          UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v100);
          if (UniquePredecessor)
          {
            v102 = *(_QWORD *)(UniquePredecessor + 48);
            v103 = v102 - 24;
            if (v102)
              v104 = v102 - 24;
            else
              v104 = 0;
            if (*(unsigned __int8 *)(v104 + 16) - 29 >= 0xB)
              v105 = 0;
            else
              v105 = v103;
            if (*(_BYTE *)(v105 + 16) == 39)
            {
              llvm::CallBrInst::getIndirectDests(v99, (uint64_t)&p_p);
              if (v335)
              {
                v106 = 8 * v335 - 8;
                v107 = (llvm::BasicBlock **)p_p;
                do
                {
                  v108 = *v107++;
                  v109 = v108 == v100;
                  v110 = v108 == v100 || v106 == 0;
                  v106 -= 8;
                }
                while (!v110);
              }
              else
              {
                v109 = 0;
              }
              if (p_p != &v336)
                free(p_p);
              if (!v109)
              {
                v52 = "Intrinsic's corresponding callbr must have intrinsic's parent basic block in indirect destination list";
                goto LABEL_101;
              }
              v296 = *((_QWORD *)v100 + 7);
              if (!v296 || (llvm::CallBase *)(v296 - 24) != a3)
              {
                v52 = "No other instructions may proceed intrinsic";
                goto LABEL_101;
              }
              goto LABEL_75;
            }
            v267 = "Intrinsic must have corresponding callbr in predecessor";
          }
          else
          {
            v267 = "Intrinsic in block must have 1 unique predecessor";
          }
          p_p = v267;
          v337 = 259;
          __p = a3;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, (llvm::raw_ostream **)&__p);
          goto LABEL_75;
        case 42:
          v111 = (unsigned __int8 *)llvm::Value::stripPointerCasts(((llvm::Value **)a3
                                                                  - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[12]);
          v112 = v111[16];
          if (v112 == 19)
            goto LABEL_75;
          if (v112 == 3
            && (v113 = v111, (v111[80] & 1) != 0)
            && llvm::GlobalVariable::hasDefinitiveInitializer((llvm::GlobalVariable *)v111))
          {
            if ((*(_BYTE *)(*((_QWORD *)v113 - 4) + 16) & 0xFE) == 8)
              goto LABEL_75;
            v35 = "info argument of llvm.coro.id must refer to either a struct or an array";
          }
          else
          {
            v35 = "info argument of llvm.coro.id must refer to an initialized constant";
          }
          goto LABEL_73;
        case 61:
          v114 = "assign";
          v115 = this;
          v116 = 6;
          goto LABEL_240;
        case 62:
          if (*(_BYTE *)(*((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)) + 16) != 23)
          {
            v266 = "invalid llvm.dbg.declare intrinsic call 1";
            goto LABEL_679;
          }
          v114 = "declare";
          v115 = this;
          v116 = 7;
LABEL_240:
          goto LABEL_75;
        case 63:
          goto LABEL_75;
        case 64:
          v114 = "value";
          v115 = this;
          v116 = 5;
          goto LABEL_240;
        case 68:
        case 69:
          if (*(_BYTE *)(*((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)) + 16) == 80)
            goto LABEL_75;
          v266 = "eh.exceptionpointer argument must be a catchpad";
          goto LABEL_679;
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
          goto LABEL_75;
        case 131:
          if (*((_BYTE *)a3 + 16) != 84)
          {
            v266 = "experimental_deoptimize cannot be invoked";
            goto LABEL_679;
          }
          if (llvm::CallBase::countOperandBundlesOfType(a3, 0) != 1)
          {
            v35 = "experimental_deoptimize must have exactly one \"deopt\" operand bundle";
            goto LABEL_73;
          }
          v117 = *(_QWORD *)a3;
          if (v117 != **(_QWORD **)(*(_QWORD *)(llvm::Instruction::getFunction(a3) + 24) + 16))
          {
            v35 = "experimental_deoptimize return type must match caller return type";
            goto LABEL_73;
          }
          if (*((_BYTE *)a3 + 16) != 84)
            goto LABEL_75;
          v290 = *((_QWORD *)a3 + 4);
          v291 = v290 - 24;
          v292 = v290 == *((_QWORD *)a3 + 5) + 48 || v290 == 0;
          v293 = v292;
          if (v292)
            v294 = 0;
          else
            v294 = v291;
          if (*(_BYTE *)(v294 + 16) == 29)
          {
            v295 = v293 == 0;
          }
          else
          {
            v294 = 0;
            v295 = 0;
          }
          if (!v295)
          {
            v35 = "calls to experimental_deoptimize must be followed by a return";
            goto LABEL_73;
          }
          if (*(_BYTE *)(*(_QWORD *)a3 + 8) == 7)
            goto LABEL_75;
          v300 = *(_DWORD *)(v294 + 20) & 0x7FFFFFF;
          if ((_DWORD)v300)
          {
            if (*(llvm::CallBase **)(v294 - 32 * v300) == a3)
              goto LABEL_75;
          }
          v35 = "calls to experimental_deoptimize must be followed by a return of the value computed by experimental_deoptimize";
          goto LABEL_73;
        case 134:
          v118 = llvm::CallBase::arg_end(a3);
          v119 = (void **)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (((v118 - (_QWORD)v119) & 0x1FFFFFFFE0) != 0x60)
          {
            v266 = "wrong number of arguments";
            goto LABEL_679;
          }
          if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
            v120 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
          else
            v120 = *(_DWORD *)(*(_QWORD *)a3 + 8);
          if (v120 != 15)
          {
            v266 = "gc.relocate must return a pointer or a vector of pointers";
            goto LABEL_679;
          }
          v256 = (llvm::BasicBlock **)*v119;
          if (*v119 && *((_BYTE *)v256 + 16) == 94)
          {
            __p = 0;
            v257 = (_QWORD *)llvm::BasicBlock::getUniquePredecessor(v256[5]);
            __p = v257;
            if (!v257)
            {
              p_p = "safepoints should have unique landingpads";
              v337 = 259;
              v325 = v256[5];
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, &v325);
              goto LABEL_680;
            }
            v258 = (_QWORD *)v257[6];
            if (v258 == v257 + 6
              || ((v259 = v258 - 3, v258) ? (v260 = v258 - 3) : (v260 = 0),
                  *((unsigned __int8 *)v260 + 16) - 29 >= 0xB))
            {
              v262 = "safepoint block should be well formed";
              goto LABEL_635;
            }
            p_p = v259;
            if (!llvm::isa<llvm::GCStatepointInst,llvm::Instruction const*>((uint64_t *)&p_p))
            {
              v262 = "gc relocate should be linked to a statepoint";
LABEL_635:
              p_p = v262;
              v337 = 259;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, (llvm::raw_ostream **)&__p);
              goto LABEL_680;
            }
          }
          else
          {
            __p = *v119;
            if (!llvm::isa<llvm::GCStatepointInst,llvm::Instruction const*>((uint64_t *)&__p)
              && *((unsigned __int8 *)__p + 16) - 11 >= 2)
            {
              p_p = "gc relocate is incorrectly tied to the statepoint";
              v337 = 259;
LABEL_559:
              llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(this, (llvm::Twine *)&p_p, a3, (llvm::raw_ostream **)&__p);
              goto LABEL_680;
            }
          }
          Statepoint = llvm::GCProjectionInst::getStatepoint(a3, v261);
          v281 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v282 = *((_QWORD *)v281 + 4);
          if (*(_BYTE *)(v282 + 16) != 16)
          {
            v266 = "gc.relocate operand #2 must be integer offset";
            goto LABEL_679;
          }
          v283 = *((_QWORD *)v281 + 8);
          if (*(_BYTE *)(v283 + 16) != 16)
          {
            v266 = "gc.relocate operand #3 must be integer offset";
            goto LABEL_679;
          }
          v284 = (_QWORD *)(v282 + 24);
          if (*(_DWORD *)(v282 + 32) >= 0x41u)
          {
            v284 = (_QWORD *)*v284;
            v285 = (_QWORD *)(v283 + 24);
            if (*(_DWORD *)(v283 + 32) < 0x41u)
            {
LABEL_600:
              if (*(unsigned __int8 *)(Statepoint + 16) - 11 < 2)
                goto LABEL_75;
              goto LABEL_663;
            }
          }
          else
          {
            v285 = (_QWORD *)(v283 + 24);
            if (*(_DWORD *)(v283 + 32) < 0x41u)
              goto LABEL_600;
          }
          v285 = (_QWORD *)*v285;
          if (*(unsigned __int8 *)(Statepoint + 16) - 11 < 2)
            goto LABEL_75;
LABEL_663:
          v301 = (_QWORD *)*v284;
          v302 = (_QWORD *)*v285;
          llvm::CallBase::getOperandBundle((char *)Statepoint, 5, (uint64_t)&__p);
          if (v329)
          {
            if ((unint64_t)v301 >= v327)
            {
              v266 = "gc.relocate: statepoint base index out of bounds";
              goto LABEL_679;
            }
            if ((unint64_t)v302 >= v327)
            {
              v266 = "gc.relocate: statepoint derived index out of bounds";
              goto LABEL_679;
            }
          }
          v304 = *(_QWORD *)a3;
          v305 = *(_QWORD *)llvm::GCRelocateInst::getDerivedPtr(a3, v303);
          BasePtr = llvm::GCRelocateInst::getBasePtr(a3, v306);
          if ((*(_DWORD *)(*(_QWORD *)BasePtr + 8) & 0xFE) == 0x12)
            v308 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)BasePtr + 16) + 8);
          else
            v308 = *(_DWORD *)(*(_QWORD *)BasePtr + 8);
          if (v308 != 15)
            goto LABEL_677;
          v309 = *(_DWORD *)(v305 + 8);
          v310 = v309 & 0xFE;
          v311 = v309;
          if (v310 == 18)
            v311 = *(_BYTE *)(**(_QWORD **)(v305 + 16) + 8);
          if (v311 != 15)
          {
LABEL_677:
            v266 = "gc.relocate: relocated value must be a pointer";
            goto LABEL_679;
          }
          v312 = *(_DWORD *)(v304 + 8);
          if ((v310 == 18) != ((v312 & 0xFE) == 18))
          {
            v266 = "gc.relocate: vector relocates to vector and pointer to pointer";
            goto LABEL_679;
          }
          if ((v312 & 0xFE) == 0x12)
          {
            v312 = *(_DWORD *)(**(_QWORD **)(v304 + 16) + 8);
            if (v310 != 18)
            {
LABEL_684:
              if ((v309 ^ v312) < 0x100)
                goto LABEL_685;
              goto LABEL_694;
            }
          }
          else if (v310 != 18)
          {
            goto LABEL_684;
          }
          if ((*(_DWORD *)(**(_QWORD **)(v305 + 16) + 8) ^ v312) < 0x100)
          {
LABEL_685:
            v313 = (llvm::LLVMContext ***)llvm::Instruction::getFunction(a3);
            GC = llvm::Function::getGC(v313);
            v315 = (const void *)GC[1];
            if (*((char *)GC + 23) >= 0)
            {
              v316 = (const void *)*((unsigned __int8 *)GC + 23);
            }
            else
            {
              GC = (uint64_t *)*GC;
              v316 = v315;
            }
            llvm::getGCStrategy(GC, v316);
            if (__p)
            {
              v317 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 16))();
              if (v317 < 0x100u || (_BYTE)v317)
              {
                v319 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 16))();
                if (v319 < 0x100u || (_BYTE)v319)
                {
                  v320 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 16))();
                  v321 = 1;
                  if (v320 < 0x100u || (_BYTE)v320)
                  {
LABEL_703:
                    v322 = __p;
                    __p = 0;
                    if (v322)
                      (*(void (**)(void *))(*(_QWORD *)v322 + 8))(v322);
                    if ((v321 & 1) == 0)
                      goto LABEL_680;
                    goto LABEL_75;
                  }
                }
                v318 = "gc.relocate: relocated value must be a gc pointer";
              }
              else
              {
                v318 = "gc.relocate: must return gc pointer";
              }
              p_p = v318;
              v337 = 259;
              llvm::VerifierSupport::CheckFailed<llvm::Function>(this, (llvm::Twine *)&p_p, (unsigned __int8 *)a3);
            }
            else
            {
              p_p = "gc.relocate: calling function must have GCStrategy";
              v337 = 259;
              v325 = (llvm::raw_ostream *)llvm::Instruction::getFunction(a3);
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, &v325);
            }
            v321 = 0;
            goto LABEL_703;
          }
LABEL_694:
          v266 = "gc.relocate: relocating a pointer shouldn't change its address space";
          goto LABEL_679;
        case 135:
          if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 64) + 18) & 0x4000) == 0)
            goto LABEL_401;
          v121 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v122 = *(unsigned __int8 *)(v121 + 16);
          if (v122 - 11 < 2)
            goto LABEL_75;
          if (v122 < 0x1C
            || ((v123 = v122 - 33, v30 = v123 > 0x33, v124 = (1 << v123) & 0x8000000000041, !v30)
              ? (v125 = v124 == 0)
              : (v125 = 1),
                v125
             || (v126 = *(_QWORD *)(v121 - 32)) == 0
             || *(_BYTE *)(v126 + 16)
             || *(_QWORD *)(v126 + 24) != *(_QWORD *)(v121 + 80)
             || !llvm::GlobalValue::isDeclaration(*(llvm::GlobalValue **)(v121 - 32))
             || *(_DWORD *)(v126 + 36) != 136))
          {
            p_p = "gc.result operand #1 must be from a statepoint";
            v337 = 259;
            __p = (void *)*((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
            goto LABEL_559;
          }
          if (*(_QWORD *)a3 == **(_QWORD **)(llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v121 + 72), 2)+ 16))goto LABEL_75;
          v266 = "gc.result result type does not match wrapped callee";
          goto LABEL_679;
        case 136:
          v127 = *((unsigned __int8 *)a3 + 16);
          v128 = v127 == 84;
          if (v127 == 84)
            v129 = a3;
          else
            v129 = 0;
          __p = v129;
          if (v128 && *(_BYTE *)(*((_QWORD *)a3 - 4) + 16) == 24)
          {
            p_p = "gc.statepoint support for inline assembly unimplemented";
            v337 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, (llvm::raw_ostream **)&__p);
            goto LABEL_680;
          }
          if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 64) + 18) & 0x4000) == 0)
            goto LABEL_401;
          goto LABEL_75;
        case 137:
          v130 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          v131 = (llvm::APInt *)(v130 + 24);
          v132 = *(_DWORD *)(v130 + 32);
          v133 = v132 - 1;
          if (v132 > 0x40)
          {
            if (((*(_QWORD *)(*(_QWORD *)v131 + 8 * (v133 >> 6)) >> v133) & 1) == 0
              && llvm::APInt::countLeadingZerosSlowCase(v131) != v132)
            {
              goto LABEL_75;
            }
          }
          else if (((*(_QWORD *)v131 >> v133) & 1) == 0 && *(_QWORD *)v131)
          {
            goto LABEL_75;
          }
          v266 = "get_vector_length: VF must be positive";
          goto LABEL_679;
        case 138:
          if (*((_BYTE *)a3 + 16) != 84)
          {
            v266 = "experimental_guard cannot be invoked";
            goto LABEL_679;
          }
          if (llvm::CallBase::countOperandBundlesOfType(a3, 0) == 1)
            goto LABEL_75;
          v35 = "experimental_guard must have exactly one \"deopt\" operand bundle";
          goto LABEL_73;
        case 139:
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)this + 2208, (uint64_t)a3);
          goto LABEL_75;
        case 143:
          v134 = *(_QWORD *)a3;
          if (*(_QWORD *)a3
            && (*(_DWORD *)(v134 + 8) & 0xFE) == 0x12
            && *(_BYTE *)(**(_QWORD **)(v134 + 16) + 8) == 13
            && llvm::Type::getScalarSizeInBits((llvm::Type *)v134) > 7)
          {
            goto LABEL_75;
          }
          v52 = "experimental_stepvector only supported for vectors of integers with a bitwidth of at least 8.";
          goto LABEL_101;
        case 147:
          v135 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[8];
          v136 = *(_DWORD *)(v135 + 32);
          if (v136 > 0x40)
            v137 = **(_QWORD **)(v135 + 24);
          else
            v137 = (uint64_t)(*(_QWORD *)(v135 + 24) << -(char)v136) >> -(char)v136;
          v241 = *(unsigned int *)(*(_QWORD *)a3 + 32);
          v242 = *((_QWORD *)a3 + 5);
          if (v242)
          {
            v243 = *(_QWORD *)(v242 + 64);
            if (v243)
            {
              p_p = *(void **)(v243 + 112);
              if (llvm::AttributeSet::hasAttribute(&p_p, 87))
              {
                __p = (void *)llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&p_p);
                v241 = v241
                     * (unint64_t)llvm::AttributeSet::getVScaleRangeMin((llvm::AttributeSet *)&__p);
              }
            }
          }
          if (v137 < 0)
          {
            if (v241 >= -v137)
              goto LABEL_75;
          }
          else if (v137 < v241)
          {
            goto LABEL_75;
          }
          v52 = "The splice index exceeds the range [-VL, VL-1] where VL is the known minimum number of elements in the v"
                "ector. For scalable vectors the minimum number of elements is determined from vscale_range.";
          goto LABEL_101;
        case 148:
        case 149:
        case 150:
        case 151:
        case 362:
        case 363:
        case 364:
        case 365:
        case 366:
        case 367:
        case 368:
        case 369:
        case 370:
        case 371:
        case 372:
        case 373:
        case 374:
        case 375:
        case 376:
        case 377:
        case 378:
        case 379:
        case 380:
        case 381:
        case 382:
        case 383:
        case 384:
        case 385:
        case 386:
        case 387:
        case 388:
        case 389:
        case 390:
        case 391:
        case 392:
        case 393:
        case 394:
        case 395:
        case 396:
        case 397:
        case 398:
        case 399:
        case 400:
        case 401:
        case 402:
        case 403:
        case 404:
        case 405:
        case 406:
        case 407:
        case 408:
        case 409:
        case 410:
        case 411:
        case 412:
        case 413:
        case 414:
        case 415:
        case 416:
        case 417:
        case 418:
        case 419:
        case 420:
        case 421:
        case 422:
        case 423:
        case 424:
        case 425:
        case 426:
        case 427:
        case 428:
        case 429:
        case 430:
        case 431:
        case 432:
        case 433:
        case 434:
        case 435:
        case 436:
        case 437:
        case 438:
        case 439:
          goto LABEL_75;
        case 159:
          v138 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          if (v138)
            v139 = *(_BYTE *)(v138 + 16) == 23;
          else
            v139 = 0;
          if (!v139 || (v140 = *(_BYTE **)(v138 + 24), (__p = v140) == 0))
          {
            v266 = "missing rounding mode argument";
            goto LABEL_679;
          }
          if (*v140)
          {
            p_p = "invalid value for llvm.fptrunc.round metadata operand (the operand should be a string)";
            v337 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)&p_p, (const llvm::Module ***)&__p);
            goto LABEL_680;
          }
          String = (uint64_t *)llvm::MDString::getString((llvm::MDString *)v140);
          v288 = llvm::convertStrToRoundingMode(String, v287);
          if (v288 >= 0x100u && v288 != 7)
            goto LABEL_75;
          v266 = "unsupported rounding mode argument";
          goto LABEL_679;
        case 164:
        case 165:
        case 166:
          if ((_DWORD)a2 != 165)
            goto LABEL_132;
          v60 = llvm::Value::stripPointerCasts(*((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)));
          if (!v60 || *((_BYTE *)v60 + 16) != 59)
          {
            v266 = "llvm.gcroot parameter #1 must be an alloca.";
            goto LABEL_679;
          }
          v61 = *(unsigned __int8 *)(((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4] + 16);
          if (v61 >= 0x15)
          {
            v266 = "llvm.gcroot parameter #2 must be a constant.";
            goto LABEL_679;
          }
          if (v61 == 19 && *(_BYTE *)(*((_QWORD *)v60 + 9) + 8) != 15)
          {
            v266 = "llvm.gcroot parameter #1 must either be a pointer alloca, or argument #2 must be a non-null constant.";
            goto LABEL_679;
          }
LABEL_132:
          if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 64) + 18) & 0x4000) == 0)
          {
LABEL_401:
            v266 = "Enclosing function does not use GC.";
            goto LABEL_679;
          }
          goto LABEL_75;
        case 167:
          if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
          {
            if (llvm::Type::isIntegerTy(**(llvm::Type ***)(*(_QWORD *)a3 + 16), 1))
              goto LABEL_75;
            v266 = "get_active_lane_mask: element type is not i1";
          }
          else
          {
            v266 = "get_active_lane_mask: must return a vector";
          }
          goto LABEL_679;
        case 175:
          if (!*((_BYTE *)llvm::Value::stripPointerCasts(((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4])
                + 16))
            goto LABEL_75;
          v266 = "llvm.init_trampoline parameter #2 must resolve to a function.";
          goto LABEL_679;
        case 185:
          v141 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (v141)
            v142 = *(_BYTE *)(v141 + 16) == 16;
          else
            v142 = 0;
          if (v142)
          {
            v143 = (_QWORD *)(v141 + 24);
            v144 = *(_DWORD *)(v141 + 32);
            v145 = v144 - 1;
            if (v144 >= 0x41)
              v143 = (_QWORD *)(*v143 + 8 * (v145 >> 6));
            if (((*v143 >> v145) & 1) == 0 || llvm::ConstantInt::isMinusOne((llvm::ConstantInt *)v141))
              goto LABEL_75;
          }
          v52 = "invariant_start parameter must be -1, 0 or a positive number";
          goto LABEL_101;
        case 187:
          v146 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          v147 = (_QWORD *)(v146 + 24);
          if (*(_DWORD *)(v146 + 32) >= 0x41u)
            v147 = (_QWORD *)*v147;
          if ((*(_DWORD *)v147 & 0xFFFFFC00) == 0)
            goto LABEL_75;
          v35 = "unsupported bits for llvm.is.fpclass test mask";
          goto LABEL_73;
        case 192:
        case 203:
          v67 = **((_QWORD **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v68 = *(_DWORD *)(v67 + 8);
          v69 = *(_DWORD *)(v67 + 8) & 0xFE;
          LOBYTE(v70) = *(_DWORD *)(v67 + 8);
          if (v69 == 18)
            v70 = *(_DWORD *)(**(_QWORD **)(v67 + 16) + 8);
          v71 = v70 < 4u || v70 == 5;
          v72 = v70 & 0xFD;
          if (!v71 && v72 != 4)
            goto LABEL_186;
          v74 = *(_QWORD *)a3;
          v75 = *(_DWORD *)(*(_QWORD *)a3 + 8);
          if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
            v75 = *(unsigned __int8 *)(**(_QWORD **)(v74 + 16) + 8);
          if (v75 != 13)
          {
LABEL_186:
            v52 = "llvm.lrint, llvm.llrint: argument must be floating-point or vector of floating-points, and result must"
                  " be integer or vector of integers";
            goto LABEL_101;
          }
          if ((v69 == 18) != ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 18))
          {
            v52 = "llvm.lrint, llvm.llrint: argument and result disagree on vector use";
            goto LABEL_101;
          }
          if (v69 != 18)
            goto LABEL_75;
          v245 = *(_DWORD *)(v67 + 32);
          if ((v68 != 19) != (*(_DWORD *)(*(_QWORD *)a3 + 8) == 19) && v245 == *(_DWORD *)(v74 + 32))
            goto LABEL_75;
          v52 = "llvm.lrint, llvm.llrint: argument must be same length as result";
          goto LABEL_101;
        case 193:
        case 204:
          if ((*(_DWORD *)(**((_QWORD **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)) + 8) & 0xFE) != 0x12
            && (*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) != 0x12)
          {
            goto LABEL_75;
          }
          v52 = "Intrinsic does not support vectors";
          goto LABEL_101;
        case 196:
          v148 = (void **)*((_QWORD *)a3 + 5);
          if (!llvm::BasicBlock::isEntryBlock((llvm::BasicBlock *)v148))
          {
            v266 = "llvm.localescape used outside of entry block";
            goto LABEL_679;
          }
          if (*((_BYTE *)this + 800))
          {
            v266 = "multiple calls to llvm.localescape in one function";
            goto LABEL_679;
          }
          v268 = (llvm::Value **)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v269 = llvm::CallBase::arg_end(a3);
          if (v268 == (llvm::Value **)v269)
            goto LABEL_591;
          v270 = (llvm::Value **)v269;
          do
          {
            if (*((_BYTE *)*v268 + 16) != 19)
            {
              v271 = llvm::Value::stripPointerCasts(*v268);
              if (!v271 || *((_BYTE *)v271 + 16) != 59 || !llvm::AllocaInst::isStaticAlloca(v271))
              {
                v266 = "llvm.localescape only accepts static allocas";
                goto LABEL_679;
              }
            }
            v268 += 4;
          }
          while (v268 != v270);
LABEL_591:
          v279 = (unint64_t)(llvm::CallBase::arg_end(a3) - ((_QWORD)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))) >> 5;
          p_p = v148[8];
          *(_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::operator[]((uint64_t)this + 832, (uint64_t *)&p_p) = v279;
          *((_BYTE *)this + 800) = 1;
          goto LABEL_75;
        case 197:
          v149 = llvm::Value::stripPointerCasts(*((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)));
          if (*((_BYTE *)v149 + 16))
            v149 = 0;
          __p = v149;
          if (!v149 || llvm::GlobalValue::isDeclaration(v149))
          {
            v266 = "llvm.localrecover first argument must be function defined in this module";
            goto LABEL_679;
          }
          v251 = (llvm::ConstantInt *)((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[8];
          v252 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::operator[]((uint64_t)this + 832, (uint64_t *)&__p);
          v253 = *((unsigned int *)v252 + 1);
          LimitedValue = llvm::ConstantInt::getLimitedValue(v251, 0xFFFFFFFFuLL);
          if ((unint64_t)LimitedValue + 1 > v253)
            v255 = (_DWORD)LimitedValue + 1;
          else
            v255 = v253;
          *((_DWORD *)v252 + 1) = v255;
          goto LABEL_75;
        case 207:
          v150 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          v151 = (int8x16_t **)(v150 + 24);
          v152 = *(_DWORD *)(v150 + 32);
          if (v152 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v150 + 24)) == v152)
              goto LABEL_75;
          }
          else if (!*v151)
          {
            goto LABEL_75;
          }
          if (llvm::APInt::isPowerOf2(v151))
            goto LABEL_75;
          v266 = "masked_gather: alignment must be 0 or a power of 2";
          goto LABEL_679;
        case 208:
          if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) != 0x12)
          {
            v266 = "masked_load: must return a vector";
            goto LABEL_679;
          }
          v153 = (uint64_t *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v154 = v153[8];
          if ((*(_DWORD *)(*(_QWORD *)v154 + 8) & 0xFE) != 0x12)
          {
            v266 = "masked_load: mask must be vector";
            goto LABEL_679;
          }
          v155 = *v153;
          v156 = (_QWORD *)v153[12];
          if (!llvm::APInt::isPowerOf2((int8x16_t **)(v153[4] + 24)))
          {
            v266 = "masked_load: alignment must be a power of 2";
            goto LABEL_679;
          }
          v157 = *(_QWORD *)a3;
          v158 = *(_QWORD *)(*(_QWORD *)v155 + 24);
          if (v158)
            v159 = v158 == v157;
          else
            v159 = 1;
          if (!v159)
          {
            v266 = "masked_load: return must match pointer type";
            goto LABEL_679;
          }
          if (*v156 != v157)
          {
            v266 = "masked_load: pass through and return type must match";
            goto LABEL_679;
          }
          v298 = *(_DWORD *)(v157 + 32);
          v299 = *(unsigned __int8 *)(v157 + 8) == 19;
          if (*(_DWORD *)(*(_QWORD *)v154 + 32) == v298
            && (((*(_BYTE *)(*(_QWORD *)v154 + 8) != 19) ^ v299) & 1) != 0)
          {
            goto LABEL_75;
          }
          v266 = "masked_load: vector mask must be same length as return";
          goto LABEL_679;
        case 209:
          v160 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[8];
          v161 = (int8x16_t **)(v160 + 24);
          v162 = *(_DWORD *)(v160 + 32);
          if (v162 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v160 + 24)) == v162)
              goto LABEL_75;
          }
          else if (!*v161)
          {
            goto LABEL_75;
          }
          if (llvm::APInt::isPowerOf2(v161))
            goto LABEL_75;
          v266 = "masked_scatter: alignment must be 0 or a power of 2";
          goto LABEL_679;
        case 210:
          v163 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v164 = *((_QWORD *)v163 + 12);
          if ((*(_DWORD *)(*(_QWORD *)v164 + 8) & 0xFE) != 0x12)
          {
            v266 = "masked_store: mask must be vector";
            goto LABEL_679;
          }
          v165 = *(uint64_t **)v163;
          v166 = *((_QWORD *)v163 + 4);
          if (!llvm::APInt::isPowerOf2((int8x16_t **)(*((_QWORD *)v163 + 8) + 24)))
          {
            v266 = "masked_store: alignment must be a power of 2";
            goto LABEL_679;
          }
          v167 = *v165;
          v168 = *(_QWORD *)(*(_QWORD *)v166 + 24);
          if (v168)
            v169 = v168 == v167;
          else
            v169 = 1;
          if (!v169)
          {
            v266 = "masked_store: storee must match pointer type";
            goto LABEL_679;
          }
          v170 = *(_DWORD *)(v167 + 32);
          v171 = *(unsigned __int8 *)(v167 + 8) == 19;
          if (*(_DWORD *)(*(_QWORD *)v164 + 32) != v170
            || (((*(_BYTE *)(*(_QWORD *)v164 + 8) != 19) ^ v171) & 1) == 0)
          {
            v266 = "masked_store: vector mask must be same length as value";
            goto LABEL_679;
          }
          goto LABEL_75;
        case 211:
        case 212:
        case 213:
        case 214:
          v57 = *((_QWORD *)a3 - 4);
          if (!v57 || *(_BYTE *)(v57 + 16) || *(_QWORD *)(v57 + 24) != *((_QWORD *)a3 + 10))
            v57 = 0;
          __p = (void *)v57;
          __asm { BR              X10 }
          return;
        case 218:
        case 221:
        case 223:
          v63 = (int8x16_t **)(((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[12] + 24);
          if (!llvm::APInt::isPowerOf2(v63))
          {
            v266 = "element size of the element-wise atomic memory intrinsic must be a power of 2";
            goto LABEL_679;
          }
          ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::CallBase *)((char *)a3 + 72), 0);
          {
            v266 = "incorrect alignment of the destination argument";
            goto LABEL_679;
          }
          v65 = *(_DWORD *)(*((_QWORD *)a3 - 4) + 36);
          if (v65 == 221 || v65 == 218)
          {
            v66 = llvm::AttributeList::getParamAlignment((llvm::CallBase *)((char *)a3 + 72), 1);
            {
              v266 = "incorrect alignment of the source argument";
              goto LABEL_679;
            }
          }
          goto LABEL_75;
        case 264:
          v172 = (_QWORD *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v173 = v172[4];
          v174 = (_QWORD *)(v173 + 24);
          if (*(_DWORD *)(v173 + 32) >= 0x41u)
            v174 = (_QWORD *)*v174;
          if (*v174 >= 2uLL)
          {
            v266 = "rw argument to llvm.prefetch must be 0-1";
            goto LABEL_679;
          }
          v175 = v172[8];
          v176 = (_QWORD *)(v175 + 24);
          if (*(_DWORD *)(v175 + 32) >= 0x41u)
            v176 = (_QWORD *)*v176;
          if (*v176 >= 4uLL)
          {
            v266 = "locality argument to llvm.prefetch must be 0-4";
            goto LABEL_679;
          }
          v177 = v172[12];
          v178 = (_QWORD *)(v177 + 24);
          if (*(_DWORD *)(v177 + 32) >= 0x41u)
            v178 = (_QWORD *)*v178;
          if (*v178 >= 2uLL)
          {
            v266 = "cache type argument to llvm.prefetch must be 0-1";
            goto LABEL_679;
          }
          goto LABEL_75;
        case 265:
        case 266:
        case 505:
        case 508:
          goto LABEL_142;
        case 276:
          v179 = (uint64_t **)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v180 = **v179;
          v181 = *(_DWORD *)(v180 + 8) & 0xFE;
          v182 = *(_DWORD *)(v180 + 8);
          if (v181 == 18)
            v182 = *(unsigned __int8 *)(**(_QWORD **)(v180 + 16) + 8);
          if (v182 != 15)
          {
            v52 = "llvm.ptrmask intrinsic first argument must be pointer or vector of pointers";
            goto LABEL_101;
          }
          v183 = (llvm::Type *)*v179[4];
          if ((v181 == 18) != ((*((_DWORD *)v183 + 2) & 0xFE) == 18))
          {
            v52 = "llvm.ptrmask intrinsic arguments must be both scalars or both vectors";
            goto LABEL_101;
          }
          if (v181 == 18
            && ((*(_DWORD *)(v180 + 8) != 19) == (*((_DWORD *)v183 + 2) == 19)
             || *(_DWORD *)(v180 + 32) != *((_DWORD *)v183 + 8)))
          {
            v52 = "llvm.ptrmask intrinsic arguments must have the same number of elements";
            goto LABEL_101;
          }
          IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(*((llvm::DataLayout **)this + 22), (Type *)v180);
          if (IndexTypeSizeInBits == llvm::Type::getScalarSizeInBits(v183))
            goto LABEL_75;
          v52 = "llvm.ptrmask intrinsic second argument bitwidth must match pointer index type size of first argument";
          goto LABEL_101;
        case 289:
        case 290:
        case 303:
        case 304:
        case 331:
        case 332:
        case 335:
        case 336:
          v54 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v55 = **(_QWORD **)v54;
          if ((*(_DWORD *)(v55 + 8) & 0xFE) == 0x12)
            v56 = *(unsigned __int8 *)(**(_QWORD **)(v55 + 16) + 8);
          else
            v56 = *(_DWORD *)(v55 + 8);
          if (v56 != 13)
          {
            v35 = "first operand of [us][mul|div]_fix[_sat] must be an int type or vector of ints";
            goto LABEL_73;
          }
          v58 = **((_QWORD **)v54 + 4);
          if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12)
            v59 = *(unsigned __int8 *)(**(_QWORD **)(v58 + 16) + 8);
          else
            v59 = *(_DWORD *)(v58 + 8);
          if (v59 != 13)
          {
            v35 = "second operand of [us][mul|div]_fix[_sat] must be an int type or vector of ints";
            goto LABEL_73;
          }
          v81 = (unint64_t *)*((_QWORD *)v54 + 8);
          if (*(_DWORD *)(*v81 + 8) >> 8 >= 0x21u)
          {
            v35 = "third argument of [us][mul|div]_fix[_sat] must fit within 32 bits";
            goto LABEL_73;
          }
          if (((_DWORD)a2 - 289) <= 0xF && ((1 << ((_BYTE)a2 - 33)) & 0xC003) != 0)
          {
            v82 = v81 + 3;
            if (*((_DWORD *)v81 + 8) >= 0x41u)
              v82 = (unint64_t *)*v82;
            v83 = *v82;
            if (v83 >= llvm::Type::getScalarSizeInBits((llvm::Type *)v55))
            {
              v35 = "the scale of s[mul|div]_fix[_sat] must be less than the width of the operands";
              goto LABEL_73;
            }
          }
          else
          {
            v264 = v81 + 3;
            if (*((_DWORD *)v81 + 8) >= 0x41u)
              v264 = (unint64_t *)*v264;
            v265 = *v264;
            if (v265 > llvm::Type::getScalarSizeInBits((llvm::Type *)v55))
            {
              v35 = "the scale of u[mul|div]_fix[_sat] must be less than or equal to the width of the operands";
              goto LABEL_73;
            }
          }
          goto LABEL_75;
        case 313:
          if (*((_BYTE *)llvm::Value::stripPointerCasts(((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4])
               + 16) == 59)
            goto LABEL_75;
          v266 = "llvm.stackprotector parameter #2 must resolve to an alloca.";
          goto LABEL_679;
        case 345:
          v184 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v185 = *(uint64_t **)v184;
          v186 = *((_QWORD *)v184 + 4);
          v187 = (_QWORD *)(v186 + 24);
          if (*(_DWORD *)(v186 + 32) >= 0x41u)
            v187 = (_QWORD *)*v187;
          v188 = *(_QWORD *)a3;
          v189 = *v185;
          if (*(_QWORD *)(*(_QWORD *)a3 + 24) != *(_QWORD *)(v189 + 24))
          {
            v52 = "vector_extract result must have the same element type as the input vector.";
            goto LABEL_101;
          }
          v247 = *(_DWORD *)v187;
          v248 = *(_DWORD *)(v188 + 32);
          if (v247 % v248)
          {
            v35 = "vector_extract index must be a constant multiple of the result type's known minimum vector length.";
            goto LABEL_73;
          }
          if ((*(_BYTE *)(v189 + 8) == 19) != (*(_BYTE *)(v188 + 8) == 19))
            goto LABEL_75;
          v273 = *(_DWORD *)(v189 + 32);
          v274 = v248 + v247;
          if (v273 > v247 && v274 <= v273)
            goto LABEL_75;
          v35 = "vector_extract would overrun.";
          goto LABEL_73;
        case 346:
          v190 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v191 = *(uint64_t **)v190;
          v192 = (uint64_t *)*((_QWORD *)v190 + 4);
          v193 = *((_QWORD *)v190 + 8);
          v194 = (_QWORD *)(v193 + 24);
          if (*(_DWORD *)(v193 + 32) >= 0x41u)
            v194 = (_QWORD *)*v194;
          v195 = *v191;
          v196 = *v192;
          if (*(_QWORD *)(v195 + 24) != *(_QWORD *)(*v192 + 24))
          {
            v52 = "vector_insert parameters must have the same element type.";
            goto LABEL_101;
          }
          v249 = *(_DWORD *)v194;
          v250 = *(_DWORD *)(v196 + 32);
          if (v249 % v250)
          {
            v35 = "vector_insert index must be a constant multiple of the subvector's known minimum vector length.";
            goto LABEL_73;
          }
          if ((*(_BYTE *)(v195 + 8) == 19) != (*(_BYTE *)(v196 + 8) == 19))
            goto LABEL_75;
          v276 = *(_DWORD *)(v195 + 32);
          v277 = v250 + v249;
          if (v276 > v249 && v277 <= v276)
            goto LABEL_75;
          v35 = "subvector operand of vector_insert would overrun the vector being inserted into.";
          goto LABEL_73;
        case 347:
        case 348:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 361:
          v53 = **((_QWORD **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if ((*(_DWORD *)(v53 + 8) & 0xFE) != 0x12 || *(_BYTE *)(**(_QWORD **)(v53 + 16) + 8) != 13)
            goto LABEL_174;
          goto LABEL_75;
        case 349:
        case 354:
          v76 = (uint64_t *)((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          goto LABEL_166;
        case 350:
        case 352:
          v76 = (uint64_t *)*((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
LABEL_166:
          v77 = *v76;
          v78 = *(_DWORD *)(*v76 + 8);
          v79 = v78 & 0xFE;
          if (v79 == 18)
            v78 = *(_DWORD *)(**(_QWORD **)(v77 + 16) + 8);
          if (v78 < 4u || v78 == 5)
          {
            if (v79 == 18)
              goto LABEL_75;
          }
          else
          {
            v222 = v78 & 0xFD;
            if (v79 == 18 && v222 == 4)
              goto LABEL_75;
          }
LABEL_174:
          v35 = "Intrinsic has incorrect argument type!";
          goto LABEL_73;
        case 692:
          v197 = (_QWORD *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v198 = v197[4];
          v199 = (_QWORD *)(v198 + 24);
          if (*(_DWORD *)(v198 + 32) >= 0x41u)
            v199 = (_QWORD *)*v199;
          if (*v199 >= 2uLL)
          {
            v266 = "write argument to llvm.aarch64.prefetch must be 0 or 1";
            goto LABEL_679;
          }
          v200 = v197[8];
          v201 = (_QWORD *)(v200 + 24);
          if (*(_DWORD *)(v200 + 32) >= 0x41u)
            v201 = (_QWORD *)*v201;
          if (*v201 >= 4uLL)
          {
            v266 = "target argument to llvm.aarch64.prefetch must be 0-3";
            goto LABEL_679;
          }
          v202 = v197[12];
          v203 = (_QWORD *)(v202 + 24);
          if (*(_DWORD *)(v202 + 32) >= 0x41u)
            v203 = (_QWORD *)*v203;
          if (*v203 >= 2uLL)
          {
            v266 = "stream argument to llvm.aarch64.prefetch must be 0 or 1";
            goto LABEL_679;
          }
          v204 = v197[16];
          v205 = (_QWORD *)(v204 + 24);
          if (*(_DWORD *)(v204 + 32) >= 0x41u)
            v205 = (_QWORD *)*v205;
          if (*v205 >= 2uLL)
          {
            v266 = "isdata argument to llvm.aarch64.prefetch must be 0 or 1";
            goto LABEL_679;
          }
          goto LABEL_75;
        case 983:
        case 985:
          goto LABEL_111;
        case 1881:
          v206 = ((*(unsigned __int16 *)(llvm::Instruction::getFunction(a3) + 18) >> 4) & 0x3FF) - 90;
          v30 = v206 > 0xF;
          v207 = (1 << v206) & 0xC001;
          if (v30 || v207 == 0)
          {
            p_p = "Intrinsic can only be used from functions with the amdgpu_cs, amdgpu_cs_chain or amdgpu_cs_chain_prese"
                  "rve calling conventions";
            v337 = 259;
            __p = a3;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, (llvm::raw_ostream **)&__p);
          }
          if ((llvm::CallBase::paramHasAttr((uint64_t *)a3, 2, 12) & 1) != 0)
          {
            if (!llvm::CallBase::paramHasAttr((uint64_t *)a3, 3, 12))
              goto LABEL_75;
          }
          else
          {
          }
          goto LABEL_101;
        default:
          goto LABEL_75;
      }
    }
    if ((int)a2 <= 2773)
    {
      if ((_DWORD)a2 == 2615)
      {
        if ((*(_WORD *)(llvm::Instruction::getFunction(a3) + 18) & 0x3FE0) != 0x680)
        {
          p_p = "Intrinsic can only be used from functions with the amdgpu_cs_chain or amdgpu_cs_chain_preserve calling conventions";
          v337 = 259;
          __p = a3;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, (llvm::raw_ostream **)&__p);
        }
        if (llvm::CallBase::paramHasAttr((uint64_t *)a3, 1, 12))
        {
        }
        else
        {
          v244 = (llvm::Argument *)((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          if (*((_BYTE *)v244 + 16) == 21)
          {
            if (!llvm::Argument::hasInRegAttr(v244))
              goto LABEL_75;
            v52 = "Value for inactive lanes must be a VGPR function argument";
          }
          else
          {
            v52 = "Value for inactive lanes must be a function argument";
          }
        }
        goto LABEL_101;
      }
      if ((_DWORD)a2 != 2768)
        goto LABEL_75;
    }
    else if ((_DWORD)a2 != 2774)
    {
      if ((_DWORD)a2 != 3174 && (_DWORD)a2 != 3176)
        goto LABEL_75;
LABEL_111:
      p_p = (void *)*((_QWORD *)a3 + 9);
      if (llvm::AttributeList::getParamElementType((llvm::AttributeList *)&p_p, 1))
      {
LABEL_75:
        if (!llvm::IntrinsicInst::mayLowerToFunctionCall(a2))
          goto LABEL_680;
        v36 = *(llvm **)(*((_QWORD *)a3 + 5) + 64);
        if ((*((_WORD *)v36 + 9) & 8) == 0)
          goto LABEL_680;
        PersonalityFn = llvm::Function::getPersonalityFn(*(llvm::Function **)(*((_QWORD *)a3 + 5) + 64));
        v39 = llvm::classifyEHPersonality(PersonalityFn, v38);
        if ((v39 - 7) >= 4 && v39 != 12)
          goto LABEL_680;
        if (!*((_DWORD *)this + 226))
        {
          llvm::colorEHFunclets(v36, (uint64_t)&p_p);
          llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::operator=((uint64_t)this + 896);
        }
        v42 = (llvm::BasicBlock **)(llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>,llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>::find((uint64_t *)this + 112, *((_QWORD *)a3 + 5))+ 1);
        v41 = *v42;
        if ((*v42 & 4) != 0)
        {
          v44 = (unint64_t)v41 & 0xFFFFFFFFFFFFFFF8;
          v42 = *(llvm::BasicBlock ***)v44;
          v43 = *(_QWORD *)v44 + 8 * *(unsigned int *)(v44 + 8);
        }
        else
        {
          v43 = (uint64_t)&v42[(unint64_t)v41 > 7];
        }
        if (v42 == (llvm::BasicBlock **)v43)
        {
          v47 = 1;
        }
        else
        {
          v45 = 0;
          do
          {
            while (1)
            {
              FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(*v42);
              if (FirstNonPHI)
                break;
              if (++v42 == (llvm::BasicBlock **)v43)
                goto LABEL_92;
            }
            v45 |= FirstNonPHI[16] - 79 < 2;
            ++v42;
          }
          while (v42 != (llvm::BasicBlock **)v43);
LABEL_92:
          v47 = v45 ^ 1;
        }
        NumOperandBundles = llvm::CallBase::getNumOperandBundles(a3);
        if (NumOperandBundles)
        {
          v49 = 0;
          v50 = 0;
          v51 = 16 * NumOperandBundles;
          do
          {
            v50 |= *(_DWORD *)(*(_QWORD *)&llvm::User::getDescriptor(a3)[v49] + 8) == 1;
            v49 += 16;
          }
          while (v51 != v49);
        }
        else
        {
          v50 = 0;
        }
        if (((v47 | v50) & 1) != 0)
          goto LABEL_680;
        v52 = "Missing funclet token on intrinsic call";
        goto LABEL_101;
      }
      v52 = "Intrinsic requires elementtype attribute on second argument.";
LABEL_101:
      p_p = v52;
      v337 = 259;
      __p = a3;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, (llvm::raw_ostream **)&__p);
      goto LABEL_680;
    }
LABEL_142:
    if (llvm::AttributeList::getParamElementType((llvm::CallBase *)((char *)a3 + 72), 0))
      goto LABEL_75;
    v52 = "Intrinsic requires elementtype attribute on first argument.";
    goto LABEL_101;
  }
  v10 = "Intrinsic has incorrect return type!";
LABEL_18:
  p_p = v10;
  v337 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&p_p, &v333);
LABEL_19:
  if (v338 != v340)
    free(v338);
  if (v341 != v343)
    free(v341);
}

uint64_t llvm::dyn_cast<llvm::IntrinsicInst,llvm::Use>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  if (*(_BYTE *)(*a1 + 16) != 84)
    return 0;
  v2 = *(_QWORD *)(v1 - 32);
  if (!v2 || *(_BYTE *)(v2 + 16) || *(_QWORD *)(v2 + 24) != *(_QWORD *)(v1 + 80))
    return 0;
  if ((*(_BYTE *)(v2 + 33) & 0x20) != 0)
    return *a1;
  return 0;
}

char *`anonymous namespace'::Verifier::verifyAttachedCallBundle(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *result;
  const char *v8;
  int v9;
  size_t v11;
  size_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  const char *v17;
  const char *v18;
  __int16 v19;

  v6 = *(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(**(_QWORD **)(v6 + 16) + 8) != 15
    && ((llvm::AttributeSet::hasAttribute((_QWORD *)(a2 + 72), 32) & 1) == 0
     && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 32)
     || *(_BYTE *)(**(_QWORD **)(v6 + 16) + 8) != 7))
  {
    v8 = "a call with operand bundle \"clang.arc.attachedcall\" must call a function returning a pointer or a non-returni"
         "ng function that has a void return type";
    goto LABEL_9;
  }
  if (*(_QWORD *)(a3 + 8) != 1 || (result = **(char ***)a3, result[16]))
  {
    v8 = "operand bundle \"clang.arc.attachedcall\" requires one function as an argument";
LABEL_9:
    v18 = v8;
    v19 = 259;
    return (char *)llvm::VerifierSupport::CheckFailed<llvm::Function>(a1, (llvm::Twine *)&v18, (unsigned __int8 *)a2);
  }
  v9 = *((_DWORD *)result + 9);
  if ((v9 - 236) > 0x17 || ((1 << (v9 + 20)) & 0x804001) == 0)
  {
    if (v9)
      goto LABEL_38;
    result = (char *)llvm::Value::getName((llvm::Value *)result);
    v12 = v11;
    if (v11 == 33)
    {
      v17 = "objc_claimAutoreleasedReturnValue";
    }
    else
    {
      if (v11 != 39)
      {
        if (v11 == 34)
        {
          v13 = *(_QWORD *)result == 0x7465725F636A626FLL && *((_QWORD *)result + 1) == 0x726F7475416E6961;
          v14 = v13 && *((_QWORD *)result + 2) == 0x5264657361656C65;
          v15 = v14 && *((_QWORD *)result + 3) == 0x6C61566E72757465;
          if (v15 && *((_WORD *)result + 16) == 25973)
            return result;
        }
LABEL_38:
        v8 = "invalid function argument";
        goto LABEL_9;
      }
      v17 = "objc_unsafeClaimAutoreleasedReturnValue";
    }
    result = (char *)memcmp(result, v17, v12);
    if (!(_DWORD)result)
      return result;
    goto LABEL_38;
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::CallBase>(llvm::raw_ostream *result, llvm::Twine *this, llvm::Value *a3)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  v4 = result;
  v5 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::raw_ostream *)llvm::Twine::print(this, v5);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      result = llvm::raw_ostream::write(v5, 10);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 10;
    }
  }
  *((_BYTE *)v4 + 192) |= *((_BYTE *)v4 + 194);
  *((_BYTE *)v4 + 193) = 1;
  v7 = *(llvm::raw_ostream **)v4;
  if (*(_QWORD *)v4)
  {
    if (*((unsigned __int8 *)a3 + 16) >= 0x1Cu)
      llvm::Value::print(a3, v7, (llvm::raw_ostream *)((char *)v4 + 16), 0);
    llvm::Value::printAsOperand((Type **)a3, v7, 1, (_anonymous_namespace_::TypePrinting **)v4 + 2);
    result = *(llvm::raw_ostream **)v4;
    v8 = *(_BYTE **)(*(_QWORD *)v4 + 32);
    if ((unint64_t)v8 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v8 + 1;
      *v8 = 10;
    }
  }
  return result;
}

void `anonymous namespace'::Verifier::verifyInlineAsmCall(_anonymous_namespace_::Verifier *this, const llvm::CallBase *a2)
{
  int8x16_t *v4;
  int8x16_t *v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  const char *v21;
  llvm::raw_ostream *v22;
  _QWORD v23[4];
  __int16 v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;

  v4 = (int8x16_t *)*((_QWORD *)a2 - 4);
  v7 = (int8x16_t *)v4[3].i64[0];
  v5 = v4 + 3;
  v6 = v7;
  v8 = v5[1].i8[7];
  if (v8 >= 0)
    v9 = v5;
  else
    v9 = v6;
  v10 = v5->i64[1];
  if (v8 >= 0)
    v11 = v8;
  else
    v11 = v10;
  llvm::InlineAsm::ParseConstraints(v9, v11, &v25);
  v12 = v25;
  v13 = v26;
  if (v25 == v26)
  {
    v15 = 0;
    v17 = 1;
    if (v25)
      goto LABEL_29;
    goto LABEL_33;
  }
  v14 = 0;
  v15 = 0;
  while (1)
  {
    v16 = *(_DWORD *)v12;
    if (!*(_DWORD *)v12)
      break;
    if (v16 != 1)
    {
      if (v16 == 3)
        ++v15;
      goto LABEL_11;
    }
    if (*((_BYTE *)v12 + 13))
      goto LABEL_17;
LABEL_11:
    v12 = (llvm::raw_ostream *)((char *)v12 + 80);
    if (v12 == v13)
    {
      v17 = 1;
      v12 = v25;
      if (v25)
        goto LABEL_29;
      goto LABEL_33;
    }
  }
  if (*((_BYTE *)v12 + 13))
  {
LABEL_17:
    if (*(_BYTE *)(**((_QWORD **)a2 + 4 * v14 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)) + 8) != 15)
    {
      v18 = "Operand for indirect constraint must have pointer type";
      goto LABEL_28;
    }
    if (!llvm::AttributeList::getParamElementType((const llvm::CallBase *)((char *)a2 + 72), v14))
    {
      v18 = "Operand for indirect constraint must have elementtype attribute";
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  if (!llvm::CallBase::paramHasAttr((uint64_t *)a2, v14, 74))
  {
LABEL_21:
    ++v14;
    goto LABEL_11;
  }
  v18 = "Elementtype attribute can only be applied for indirect constraints";
LABEL_28:
  v22 = a2;
  v23[0] = v18;
  v24 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)v23, &v22);
  v17 = 0;
  v12 = v25;
  if (!v25)
    goto LABEL_33;
LABEL_29:
  v19 = v26;
  v20 = v12;
  if (v26 != v12)
  {
    do
      llvm::InlineAsm::ConstraintInfo::~ConstraintInfo((llvm::raw_ostream *)((char *)v19 - 80));
    while (v19 != v12);
    v20 = v25;
  }
  v26 = v12;
  operator delete(v20);
LABEL_33:
  if (v17)
  {
    if (*((_BYTE *)a2 + 16) == 39)
    {
      if (v15 != *((_DWORD *)a2 + 22))
      {
        v21 = "Number of label constraints does not match number of callbr dests";
        goto LABEL_39;
      }
    }
    else if (v15)
    {
      v21 = "Label constraints can only be used with callbr";
LABEL_39:
      v23[0] = v21;
      v24 = 259;
      v25 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)v23, &v25);
    }
  }
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Value *,llvm::Type *,llvm::CallBase>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, Type **a3, llvm::Value *a4)
{
  unsigned __int8 *v7;
  llvm::raw_ostream *v8;
  _anonymous_namespace_::TypePrinting *v9;
  _BYTE *v10;

  v7 = *a2;
  if (*a2)
  {
    v8 = *a1;
    if (v7[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v7, v8, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v7, v8, 1, a1 + 2);
    v9 = *a1;
    v10 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v9, 10);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::Type *,llvm::CallBase>(a1, a3, a4);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Type *,llvm::CallBase>(llvm::raw_ostream **a1, Type **a2, llvm::Value *this)
{
  Type *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *result;
  _BYTE *v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = *a1;
    v6 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)*a1 + 3))
    {
      v5 = llvm::raw_ostream::write(*a1, 32);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 32;
    }
    llvm::Type::print(v4, v5, 0, 0);
  }
  v7 = *a1;
  if (*((unsigned __int8 *)this + 16) >= 0x1Cu)
    llvm::Value::print(this, v7, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
  llvm::Value::printAsOperand((Type **)this, v7, 1, a1 + 2);
  result = *a1;
  v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)*a1 + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v9 + 1;
  *v9 = 10;
  return result;
}

char *llvm::CallBase::bundle_op_infos(llvm::CallBase *this)
{
  char *result;
  char *v3;

  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    return 0;
  result = llvm::User::getDescriptor(this);
  v3 = result;
  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    llvm::User::getDescriptor(this);
    return v3;
  }
  return result;
}

BOOL llvm::GlobalVariable::hasDefinitiveInitializer(llvm::GlobalVariable *this)
{
  if (llvm::GlobalValue::isDeclaration(this))
    return 0;
  if ((llvm::GlobalValue::isInterposable(this) & 1) != 0)
    return 0;
  return (*((_BYTE *)this + 80) & 2) == 0;
}

llvm::raw_ostream *`anonymous namespace'::Verifier::visitVPIntrinsic(llvm::raw_ostream *a1, _DWORD *a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  const char *v11;
  llvm::raw_ostream *v12;
  _QWORD v13[4];
  __int16 v14;

  result = (llvm::raw_ostream *)llvm::VPCastIntrinsic::isVPCast((llvm::VPCastIntrinsic *)*(unsigned int *)(*((_QWORD *)a2 - 4) + 36));
  if ((_DWORD)result)
  {
    v5 = **(_QWORD **)&a2[-8 * (a2[5] & 0x7FFFFFF)];
    if (*(_DWORD *)(*(_QWORD *)a2 + 32) == *(_DWORD *)(v5 + 32)
      && (*(_BYTE *)(*(_QWORD *)a2 + 8) != 19) != (*(_BYTE *)(v5 + 8) == 19))
    {
      __asm { BR              X12 }
    }
    v13[0] = "VP cast intrinsic first argument and result vector lengths must be equal";
    v14 = 259;
    return llvm::VerifierSupport::CheckFailed<llvm::Function>(a1, (llvm::Twine *)v13, (unsigned __int8 *)a2);
  }
  v6 = *(_DWORD *)(*((_QWORD *)a2 - 4) + 36);
  if (v6 == 375)
  {
    result = (llvm::raw_ostream *)llvm::VPCmpIntrinsic::getPredicate((llvm::VPCmpIntrinsic *)a2);
    if (result > 0xF)
    {
      v11 = "invalid predicate for VP FP comparison intrinsic";
LABEL_22:
      v12 = (llvm::raw_ostream *)a2;
      v13[0] = v11;
      v14 = 259;
      return llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)v13, &v12);
    }
    v6 = *(_DWORD *)(*((_QWORD *)a2 - 4) + 36);
  }
  if (v6 != 391)
    goto LABEL_13;
  result = (llvm::raw_ostream *)llvm::VPCmpIntrinsic::getPredicate((llvm::VPCmpIntrinsic *)a2);
  if (((_DWORD)result - 32) > 9)
  {
    v11 = "invalid predicate for VP integer comparison intrinsic";
    goto LABEL_22;
  }
  v6 = *(_DWORD *)(*((_QWORD *)a2 - 4) + 36);
LABEL_13:
  if (v6 == 393)
  {
    v7 = *(_QWORD *)&a2[-8 * (a2[5] & 0x7FFFFFF) + 8];
    v8 = (_QWORD *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u)
      v8 = (_QWORD *)*v8;
    if ((*(_DWORD *)v8 & 0xFFFFFC00) != 0)
    {
      v13[0] = "unsupported bits for llvm.vp.is.fpclass test mask";
      v14 = 259;
      v9 = *(llvm::raw_ostream **)a1;
      if (*(_QWORD *)a1)
      {
        result = (llvm::raw_ostream *)llvm::Twine::print((llvm::Twine *)v13, *(llvm::raw_ostream **)a1);
        v10 = (_BYTE *)*((_QWORD *)v9 + 4);
        if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
        {
          result = llvm::raw_ostream::write(v9, 10);
        }
        else
        {
          *((_QWORD *)v9 + 4) = v10 + 1;
          *v10 = 10;
        }
      }
      *((_BYTE *)a1 + 192) = 1;
    }
  }
  return result;
}

void `anonymous namespace'::Verifier::visitConstrainedFPIntrinsic(_anonymous_namespace_::Verifier *this, llvm::ConstrainedFPIntrinsic *a2)
{
  __asm { BR              X12 }
}

llvm::raw_ostream *sub_180D43E10@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v15;
  llvm::raw_ostream *v16;
  llvm::CallBase *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t **v22;
  int v23;
  const char *v24;
  llvm::raw_ostream *result;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  uint64_t v32;
  int v33;
  unsigned int ScalarSizeInBits;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  _BOOL4 v53;
  int v54;
  _BOOL4 v55;
  llvm::raw_ostream *v56;
  const char *v57;
  __int16 v58;

  if ((a1 - 91) >= 2)
    v19 = 1;
  else
    v19 = 2;
  v20 = v19 + v15;
  v21 = llvm::CallBase::arg_end(v17);
  v22 = (uint64_t **)((char *)v17 - 32 * (*((_DWORD *)v17 + 5) & 0x7FFFFFF));
  if (v20 != ((unint64_t)(v21 - (_QWORD)v22) >> 5))
  {
    v24 = "invalid arguments for constrained FP intrinsic";
LABEL_10:
    v56 = v17;
    v57 = v24;
    v58 = 259;
    return llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v16, (llvm::Twine *)&v57, &v56);
  }
  v23 = *(_DWORD *)(*((_QWORD *)v17 - 4) + 36);
  switch(v23)
  {
    case '[':
    case '\\':
      if (llvm::ConstrainedFPCmpIntrinsic::getPredicate(v17) < 0x10)
        goto LABEL_13;
      v24 = "invalid predicate for constrained FP comparison intrinsic";
      goto LABEL_10;
    case 'b':
    case 'e':
      v26 = **v22;
      v27 = *(_DWORD *)(v26 + 8) & 0xFE;
      LOBYTE(v28) = *(_DWORD *)(v26 + 8);
      if (v27 == 18)
        v28 = *(_DWORD *)(**(_QWORD **)(v26 + 16) + 8);
      v29 = v28 < 4u || v28 == 5;
      v30 = v28 & 0xFD;
      if (!v29 && v30 != 4)
      {
        v24 = "Intrinsic first argument must be FP or FP vector";
        goto LABEL_10;
      }
      v32 = *(_QWORD *)v17;
      LOBYTE(v33) = *(_DWORD *)(*(_QWORD *)v17 + 8);
      if ((*(_DWORD *)(*(_QWORD *)v17 + 8) & 0xFE) == 0x12)
        v33 = *(_DWORD *)(**(_QWORD **)(v32 + 16) + 8);
      if (v33 >= 4u && v33 != 5 && (v33 & 0xFD) != 4)
      {
        v24 = "Intrinsic result must be FP or FP vector";
        goto LABEL_10;
      }
      if ((v27 == 18) != ((*(_DWORD *)(*(_QWORD *)v17 + 8) & 0xFE) == 18))
        goto LABEL_75;
      if (v27 == 18
        && ((*(_DWORD *)(v26 + 8) != 19) == (*(_DWORD *)(*(_QWORD *)v17 + 8) == 19)
         || *(_DWORD *)(v26 + 32) != *(_DWORD *)(v32 + 32)))
      {
        goto LABEL_85;
      }
      ScalarSizeInBits = llvm::Type::getScalarSizeInBits((llvm::Type *)v26);
      v36 = llvm::Type::getScalarSizeInBits((llvm::Type *)v32);
      if (v23 == 101)
      {
        if (ScalarSizeInBits > v36)
          goto LABEL_13;
        v24 = "Intrinsic first argument's type must be larger than result type";
      }
      else
      {
        if (ScalarSizeInBits < v36)
          goto LABEL_13;
        v24 = "Intrinsic first argument's type must be smaller than result type";
      }
      goto LABEL_10;
    case 'c':
    case 'd':
      v37 = **v22;
      v38 = *(_DWORD *)(v37 + 8);
      LOBYTE(v39) = *(_DWORD *)(v37 + 8);
      if ((*(_DWORD *)(v37 + 8) & 0xFE) == 0x12)
        v39 = *(_DWORD *)(**(_QWORD **)(v37 + 16) + 8);
      v40 = v39 < 4u || v39 == 5;
      v41 = v39 & 0xFD;
      if (!v40 && v41 != 4)
      {
        v24 = "Intrinsic first argument must be floating point";
        goto LABEL_10;
      }
      if ((*(_DWORD *)(v37 + 8) & 0xFE) == 0x12)
      {
        v43 = *(_DWORD *)(v37 + 32);
        v44 = *(_QWORD *)v17;
        v45 = *(_DWORD *)(*(_QWORD *)v17 + 8);
        if ((v43 != 0) != ((v45 & 0xFE) == 18))
          goto LABEL_75;
        v46 = v38 == 19;
        if ((v45 & 0xFE) == 0x12)
        {
          v45 = *(unsigned __int8 *)(**(_QWORD **)(v44 + 16) + 8);
          goto LABEL_69;
        }
      }
      else
      {
        v45 = *(_DWORD *)(*(_QWORD *)v17 + 8);
        if ((v45 & 0xFE) == 0x12)
          goto LABEL_75;
        v46 = 0;
        v43 = 0;
      }
      v44 = 0;
      v45 = v45;
LABEL_69:
      if (v45 != 13)
      {
        v24 = "Intrinsic result must be an integer";
        goto LABEL_10;
      }
      if (v44)
      {
        v54 = *(_DWORD *)(v44 + 32);
        v55 = *(unsigned __int8 *)(v44 + 8) != 19;
        if (v43 != v54 || ((v55 ^ v46) & 1) == 0)
          goto LABEL_85;
      }
      goto LABEL_13;
    case 'i':
    case 'j':
    case 'n':
    case 'o':
      if ((*(_DWORD *)(**v22 + 8) & 0xFE) != 0x12 && (*(_DWORD *)(*(_QWORD *)v17 + 8) & 0xFE) != 0x12)
        goto LABEL_13;
      v24 = "Intrinsic does not support vectors";
      goto LABEL_10;
    case '{':
    case '~':
      v47 = **v22;
      v48 = *(_DWORD *)(v47 + 8);
      v49 = v48;
      if ((*(_DWORD *)(v47 + 8) & 0xFE) == 0x12)
        v49 = *(unsigned __int8 *)(**(_QWORD **)(v47 + 16) + 8);
      if (v49 != 13)
      {
        v24 = "Intrinsic first argument must be integer";
        goto LABEL_10;
      }
      if ((*(_DWORD *)(v47 + 8) & 0xFE) != 0x12)
      {
        v52 = *(_DWORD *)(*(_QWORD *)v17 + 8);
        if ((v52 & 0xFE) != 0x12)
        {
          v53 = 0;
          v50 = 0;
          goto LABEL_80;
        }
LABEL_75:
        v24 = "Intrinsic first argument and result disagree on vector use";
        goto LABEL_10;
      }
      v50 = *(_DWORD *)(v47 + 32);
      v51 = *(_QWORD *)v17;
      v52 = *(_DWORD *)(*(_QWORD *)v17 + 8);
      if ((v50 != 0) != ((v52 & 0xFE) == 18))
        goto LABEL_75;
      v53 = v48 == 19;
      if ((v52 & 0xFE) != 0x12)
      {
LABEL_80:
        v51 = 0;
        goto LABEL_81;
      }
      v52 = *(_DWORD *)(**(_QWORD **)(v51 + 16) + 8);
LABEL_81:
      if (v52 >= 4u && v52 != 5 && (v52 & 0xFD) != 4)
      {
        v24 = "Intrinsic result must be a floating point";
        goto LABEL_10;
      }
      if (v51 && (v50 != *(_DWORD *)(v51 + 32) || (((*(_BYTE *)(v51 + 8) != 19) ^ v53) & 1) == 0))
      {
LABEL_85:
        v24 = "Intrinsic first argument and result vector lengths must be equal";
        goto LABEL_10;
      }
LABEL_13:
      result = (llvm::raw_ostream *)llvm::ConstrainedFPIntrinsic::getExceptionBehavior(v17);
      if ((unsigned __int16)result <= 0xFFu)
      {
        v24 = "invalid exception behavior argument";
        goto LABEL_10;
      }
      if (v18)
      {
        result = (llvm::raw_ostream *)llvm::ConstrainedFPIntrinsic::getRoundingMode(v17);
        if ((unsigned __int16)result <= 0xFFu)
        {
          v24 = "invalid rounding mode argument";
          goto LABEL_10;
        }
      }
      return result;
    default:
      goto LABEL_13;
  }
}

void `anonymous namespace'::Verifier::visitDbgIntrinsic(llvm::Metadata *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  llvm::raw_ostream *v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t AssignmentInsts;
  unsigned __int8 **v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  uint64_t Function;
  _BYTE *v25;
  uint64_t v26;
  llvm::Metadata *v27;
  llvm::Metadata *CallableRegion;
  llvm::Metadata *v29;
  char *v30;
  unint64_t v31;
  unsigned __int8 *Subprogram;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 **v35;
  __int16 v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  _BYTE *v39;
  llvm::Metadata **v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  BOOL v46;
  unint64_t v47;
  unsigned __int8 **v48;
  char *v49;
  unsigned __int8 **v50;
  unsigned __int8 *v51;
  int v52;
  char *v53;
  llvm::Metadata *v54;
  llvm::Metadata *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57[4];
  __int16 v58;
  llvm::Metadata *v59;
  llvm::Metadata *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  llvm::raw_ostream *v63[2];
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  _QWORD v67[2];
  const char *v68;
  __int16 v69;
  unsigned __int8 *v70;

  v8 = (_QWORD *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF));
  v9 = *(unsigned __int8 **)(*v8 + 24);
  v70 = v9;
  v10 = *v9;
  if (v10 <= 4 && ((1 << v10) & 0x16) != 0)
  {
LABEL_5:
    v12 = *(unsigned __int8 **)(v8[4] + 24);
    if (*v12 != 26)
    {
      v66 = 1283;
      v63[0] = (llvm::raw_ostream *)"invalid llvm.dbg.";
      v64 = a2;
      v65 = a3;
      v67[0] = v63;
      v68 = " intrinsic variable";
      v36 = 770;
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 **)(v8[8] + 24);
    if (*v13 != 7)
    {
      v66 = 1283;
      v62 = v13;
      v63[0] = (llvm::raw_ostream *)"invalid llvm.dbg.";
      v64 = a2;
      v65 = a3;
      v67[0] = v63;
      v68 = " intrinsic expression";
      v69 = 770;
      v57[0] = (unsigned __int8 *)a4;
      v37 = *(llvm::raw_ostream **)a1;
      if (!*(_QWORD *)a1)
      {
LABEL_37:
        *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
        *((_BYTE *)a1 + 193) = 1;
        if (!*(_QWORD *)a1)
          return;
        v40 = (llvm::Metadata **)&v62;
        goto LABEL_46;
      }
LABEL_34:
      llvm::Twine::print((llvm::Twine *)v67, v37);
      v39 = (_BYTE *)*((_QWORD *)v37 + 4);
      if ((unint64_t)v39 >= *((_QWORD *)v37 + 3))
      {
        llvm::raw_ostream::write(v37, 10);
      }
      else
      {
        *((_QWORD *)v37 + 4) = v39 + 1;
        *v39 = 10;
      }
      goto LABEL_37;
    }
    v14 = *(_DWORD *)(*(_QWORD *)(a4 - 32) + 36);
    if (v14 == 61)
      v15 = (llvm::raw_ostream *)a4;
    else
      v15 = 0;
    v63[0] = v15;
    if (v14 == 61)
    {
      v16 = (_QWORD *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF));
      v17 = *(unsigned __int8 **)(v16[12] + 24);
      if (*v17 != 30)
      {
        v67[0] = "invalid llvm.dbg.assign intrinsic DIAssignID";
        v69 = 259;
        v57[0] = (unsigned __int8 *)a4;
        v62 = v17;
        v37 = *(llvm::raw_ostream **)a1;
        if (!*(_QWORD *)a1)
          goto LABEL_37;
        goto LABEL_34;
      }
      v12 = *(unsigned __int8 **)(v16[16] + 24);
      v18 = *v12;
      if ((v18 - 1) >= 2)
      {
        if ((v18 - 5) > 0x1E
          || ((v43 = *((_QWORD *)v12 - 2), (v43 & 2) != 0)
            ? (v44 = *((_DWORD *)v12 - 6))
            : (v44 = (v43 >> 6) & 0xF),
              v44))
        {
          v67[0] = "invalid llvm.dbg.assign intrinsic address";
          v36 = 259;
LABEL_27:
          v69 = v36;
          v57[0] = (unsigned __int8 *)a4;
          v62 = v12;
          v37 = *(llvm::raw_ostream **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_37;
          goto LABEL_34;
        }
      }
      v19 = *(unsigned __int8 **)(v16[20] + 24);
      if (*v19 != 7)
      {
        v67[0] = "invalid llvm.dbg.assign intrinsic address expression";
        v69 = 259;
        v57[0] = (unsigned __int8 *)a4;
        v62 = v19;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>(a1, (llvm::Twine *)v67, v57, (llvm::Metadata **)&v62);
        return;
      }
      AssignmentInsts = llvm::at::getAssignmentInsts((uint64_t)v17);
      if ((unsigned __int8 **)AssignmentInsts != v21)
      {
        v22 = (unsigned __int8 **)AssignmentInsts;
        v23 = v21;
        while (1)
        {
          v57[0] = *v22;
          Function = llvm::Instruction::getFunction(v15);
          if (Function != llvm::Instruction::getFunction((llvm::Instruction *)v57[0]))
            break;
          if (++v22 == v23)
            goto LABEL_18;
        }
        v67[0] = "inst not in same function as dbg.assign";
        v69 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::DbgAssignIntrinsic *>(a1, (llvm::Twine *)v67, v57, v63);
        return;
      }
    }
LABEL_18:
    v25 = *(_BYTE **)(a4 + 48);
    if (v25 && *v25 != 6)
      return;
    v26 = *(_QWORD *)(a4 + 40);
    v62 = (unsigned __int8 *)v26;
    if (v26)
      v26 = *(_QWORD *)(v26 + 64);
    v61 = (unsigned __int8 *)v26;
    v27 = *(llvm::Metadata **)(*(_QWORD *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) + 32) + 24);
    v60 = v27;
    CallableRegion = (llvm::Metadata *)mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(a4 + 48));
    v59 = CallableRegion;
    if (!CallableRegion)
    {
      v66 = 1283;
      v63[0] = (llvm::raw_ostream *)"llvm.dbg.";
      v64 = a2;
      v65 = a3;
      v57[0] = " intrinsic requires a !dbg attachment";
      v58 = 259;
      llvm::operator+((uint64_t *)v63, (uint64_t *)v57, (uint64_t)v67);
      v56 = (unsigned __int8 *)a4;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *>(a1, (llvm::Twine *)v67, &v56, &v62, (llvm::raw_ostream **)&v61);
      return;
    }
    v29 = CallableRegion;
    v30 = (char *)v27 - 16;
    v31 = *((_QWORD *)v27 - 2);
    if ((v31 & 2) != 0)
    {
      Subprogram = getSubprogram(**((unsigned __int8 ***)v27 - 4));
      v34 = (_QWORD *)((char *)v29 - 16);
      v33 = *((_QWORD *)v29 - 2);
      if ((v33 & 2) != 0)
        goto LABEL_25;
    }
    else
    {
      Subprogram = getSubprogram(*(unsigned __int8 **)&v30[-8 * ((v31 >> 2) & 0xF)]);
      v34 = (_QWORD *)((char *)v29 - 16);
      v33 = *((_QWORD *)v29 - 2);
      if ((v33 & 2) != 0)
      {
LABEL_25:
        v35 = (unsigned __int8 **)*((_QWORD *)v29 - 4);
        goto LABEL_56;
      }
    }
    v35 = (unsigned __int8 **)&v34[-((v33 >> 2) & 0xF)];
LABEL_56:
    v45 = getSubprogram(*v35);
    if (Subprogram)
      v46 = v45 == 0;
    else
      v46 = 1;
    if (!v46)
    {
      if (Subprogram == v45)
      {
        if ((v31 & 2) != 0)
          v49 = (char *)*((_QWORD *)v27 - 4);
        else
          v49 = &v30[-8 * ((v31 >> 2) & 0xF)];
        v51 = (unsigned __int8 *)*((_QWORD *)v49 + 3);
        if (!v51 || (v52 = *v51, (v52 - 12) < 4) || v52 == 34)
        {
        }
        else
        {
          v67[0] = "invalid type ref";
          v69 = 259;
          if ((v31 & 2) != 0)
            v53 = (char *)*((_QWORD *)v27 - 4);
          else
            v53 = &v30[-8 * ((v31 >> 2) & 0xF)];
          v63[0] = *((llvm::raw_ostream **)v53 + 3);
          llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DICompileUnit const*,llvm::Metadata *>(a1, (llvm::Twine *)v67, &v60, v63);
        }
      }
      else
      {
        v66 = 1283;
        v63[0] = (llvm::raw_ostream *)"mismatched subprogram between llvm.dbg.";
        v64 = a2;
        v65 = a3;
        v57[0] = " variable and !dbg attachment";
        v58 = 259;
        llvm::operator+((uint64_t *)v63, (uint64_t *)v57, (uint64_t)v67);
        v56 = (unsigned __int8 *)a4;
        v47 = *((_QWORD *)v60 - 2);
        if ((v47 & 2) != 0)
          v48 = (unsigned __int8 **)*((_QWORD *)v60 - 4);
        else
          v48 = (unsigned __int8 **)((char *)v60 - 8 * ((v47 >> 2) & 0xF) - 16);
        v55 = (llvm::Metadata *)llvm::DILocalScope::getSubprogram(*v48);
        if ((*v34 & 2) != 0)
          v50 = (unsigned __int8 **)*((_QWORD *)v29 - 4);
        else
          v50 = (unsigned __int8 **)&v34[-((*v34 >> 2) & 0xFLL)];
        v54 = (llvm::Metadata *)llvm::DILocalScope::getSubprogram(*v50);
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(a1, (llvm::Twine *)v67, &v56, &v62, &v61, &v60, &v55, &v59, &v54);
      }
    }
    return;
  }
  if (v10 - 5 <= 0x1E)
  {
    v38 = *((_QWORD *)v9 - 2);
    if ((v38 & 2) != 0)
    {
      if (!*((_DWORD *)v9 - 6))
        goto LABEL_5;
    }
    else if (((v38 >> 6) & 0xF) == 0)
    {
      goto LABEL_5;
    }
  }
  v66 = 1283;
  v63[0] = (llvm::raw_ostream *)"invalid llvm.dbg.";
  v64 = a2;
  v65 = a3;
  v67[0] = v63;
  v68 = " intrinsic address/value";
  v69 = 770;
  v57[0] = (unsigned __int8 *)a4;
  v41 = *(llvm::raw_ostream **)a1;
  if (*(_QWORD *)a1)
  {
    llvm::Twine::print((llvm::Twine *)v67, *(llvm::raw_ostream **)a1);
    v42 = (_BYTE *)*((_QWORD *)v41 + 4);
    if ((unint64_t)v42 >= *((_QWORD *)v41 + 3))
    {
      llvm::raw_ostream::write(v41, 10);
    }
    else
    {
      *((_QWORD *)v41 + 4) = v42 + 1;
      *v42 = 10;
    }
  }
  *((_BYTE *)a1 + 192) |= *((_BYTE *)a1 + 194);
  *((_BYTE *)a1 + 193) = 1;
  if (*(_QWORD *)a1)
  {
    v40 = (llvm::Metadata **)&v70;
LABEL_46:
    llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)a1, v57, v40);
  }
}

llvm::raw_ostream *`anonymous namespace'::Verifier::visitDbgLabelIntrinsic(llvm::raw_ostream *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  unsigned __int8 *v8;
  _BYTE *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *Subprogram;
  unint64_t v15;
  unint64_t *v16;
  BOOL v17;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  _anonymous_namespace_::TypePrinting *v21;
  _BYTE *v22;
  BOOL v23;
  unint64_t v25;
  _anonymous_namespace_::TypePrinting *v26;
  _BYTE *v27;
  _anonymous_namespace_::TypePrinting *v28;
  llvm::Metadata *v29;
  llvm::Metadata *v30;
  unsigned __int8 *v31;
  llvm::Metadata *v32;
  llvm::Metadata *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  _QWORD v40[2];
  const char *v41;
  __int16 v42;

  v7 = result;
  v8 = *(unsigned __int8 **)(*(_QWORD *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF)) + 24);
  if (*v8 != 27)
  {
    v39 = 1283;
    v35 = (unsigned __int8 *)a4;
    v36[0] = "invalid llvm.dbg.";
    v37 = a2;
    v38 = a3;
    v40[0] = v36;
    v41 = " intrinsic variable";
    v42 = 770;
    v34 = v8;
    v19 = *(llvm::raw_ostream **)result;
    if (*(_QWORD *)result)
    {
      result = (llvm::raw_ostream *)llvm::Twine::print((llvm::Twine *)v40, *(llvm::raw_ostream **)result);
      v20 = (_BYTE *)*((_QWORD *)v19 + 4);
      if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
      {
        result = llvm::raw_ostream::write(v19, 10);
      }
      else
      {
        *((_QWORD *)v19 + 4) = v20 + 1;
        *v20 = 10;
      }
    }
    *((_BYTE *)v7 + 192) |= *((_BYTE *)v7 + 194);
    *((_BYTE *)v7 + 193) = 1;
    if (*(_QWORD *)v7)
      return llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v7, &v35, (llvm::Metadata **)&v34);
    return result;
  }
  result = (llvm::raw_ostream *)(a4 + 48);
  v9 = *(_BYTE **)(a4 + 48);
  if (v9 && *v9 != 6)
    return result;
  v10 = *(_QWORD *)(a4 + 40);
  v35 = (unsigned __int8 *)v10;
  if (v10)
    v10 = *(_QWORD *)(v10 + 64);
  v33 = (llvm::Metadata *)v8;
  v34 = (unsigned __int8 *)v10;
  result = (llvm::raw_ostream *)mlir::CallGraphNode::getCallableRegion(result);
  v32 = result;
  if (!result)
  {
    v39 = 1283;
    v36[0] = "llvm.dbg.";
    v37 = a2;
    v38 = a3;
    v40[0] = v36;
    v41 = " intrinsic requires a !dbg attachment";
    v42 = 770;
    v31 = (unsigned __int8 *)a4;
    v21 = *(_anonymous_namespace_::TypePrinting **)v7;
    if (*(_QWORD *)v7)
    {
      result = (llvm::raw_ostream *)llvm::Twine::print((llvm::Twine *)v40, *(llvm::raw_ostream **)v7);
      v22 = (_BYTE *)*((_QWORD *)v21 + 4);
      if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
      {
        result = llvm::raw_ostream::write(v21, 10);
      }
      else
      {
        *((_QWORD *)v21 + 4) = v22 + 1;
        *v22 = 10;
      }
      v28 = *(_anonymous_namespace_::TypePrinting **)v7;
      *((_BYTE *)v7 + 192) = 1;
      if (v28)
        return llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Value *,llvm::Value *>((_anonymous_namespace_::TypePrinting **)v7, &v31, &v35, (llvm::raw_ostream **)&v34);
    }
    else
    {
      *((_BYTE *)v7 + 192) = 1;
    }
    return result;
  }
  v11 = result;
  v12 = v8 - 16;
  v13 = *((_QWORD *)v8 - 2);
  if ((v13 & 2) != 0)
  {
    Subprogram = getSubprogram(**((unsigned __int8 ***)v8 - 4));
    v16 = (unint64_t *)((char *)v11 - 16);
    v15 = *((_QWORD *)v11 - 2);
    if ((v15 & 2) != 0)
    {
LABEL_9:
      result = (llvm::raw_ostream *)getSubprogram(**((unsigned __int8 ***)v11 - 4));
      if (Subprogram)
        v17 = result == 0;
      else
        v17 = 1;
      if (!v17 && Subprogram != (unsigned __int8 *)result)
        goto LABEL_35;
      return result;
    }
  }
  else
  {
    Subprogram = getSubprogram(*(unsigned __int8 **)&v12[-8 * ((v13 >> 2) & 0xF)]);
    v16 = (unint64_t *)((char *)v11 - 16);
    v15 = *((_QWORD *)v11 - 2);
    if ((v15 & 2) != 0)
      goto LABEL_9;
  }
  result = (llvm::raw_ostream *)getSubprogram((unsigned __int8 *)v16[-((v15 >> 2) & 0xF)]);
  if (Subprogram)
    v23 = result == 0;
  else
    v23 = 1;
  if (!v23 && Subprogram != (unsigned __int8 *)result)
  {
LABEL_35:
    v39 = 1283;
    v36[0] = "mismatched subprogram between llvm.dbg.";
    v37 = a2;
    v38 = a3;
    v40[0] = v36;
    v41 = " label and !dbg attachment";
    v42 = 770;
    v31 = (unsigned __int8 *)a4;
    if ((v13 & 2) != 0)
    {
      v30 = (llvm::Metadata *)llvm::DILocalScope::getSubprogram(**((unsigned __int8 ***)v8 - 4));
      v25 = *v16;
      if ((*v16 & 2) != 0)
      {
LABEL_37:
        result = (llvm::raw_ostream *)llvm::DILocalScope::getSubprogram(**((unsigned __int8 ***)v11 - 4));
        v29 = result;
        v26 = *(_anonymous_namespace_::TypePrinting **)v7;
        if (!*(_QWORD *)v7)
        {
LABEL_48:
          *((_BYTE *)v7 + 192) |= *((_BYTE *)v7 + 194);
          *((_BYTE *)v7 + 193) = 1;
          if (*(_QWORD *)v7)
            return llvm::VerifierSupport::WriteTs<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>((_anonymous_namespace_::TypePrinting **)v7, &v31, &v35, &v34, &v33, &v30, &v32, &v29);
          return result;
        }
LABEL_41:
        result = (llvm::raw_ostream *)llvm::Twine::print((llvm::Twine *)v40, v26);
        v27 = (_BYTE *)*((_QWORD *)v26 + 4);
        if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
        {
          result = llvm::raw_ostream::write(v26, 10);
        }
        else
        {
          *((_QWORD *)v26 + 4) = v27 + 1;
          *v27 = 10;
        }
        goto LABEL_48;
      }
    }
    else
    {
      v30 = (llvm::Metadata *)llvm::DILocalScope::getSubprogram(*(unsigned __int8 **)&v12[-8 * ((v13 >> 2) & 0xF)]);
      v25 = *v16;
      if ((*v16 & 2) != 0)
        goto LABEL_37;
    }
    result = (llvm::raw_ostream *)llvm::DILocalScope::getSubprogram((unsigned __int8 *)v16[-((v25 >> 2) & 0xF)]);
    v29 = result;
    v26 = *(_anonymous_namespace_::TypePrinting **)v7;
    if (!*(_QWORD *)v7)
      goto LABEL_48;
    goto LABEL_41;
  }
  return result;
}

BOOL llvm::APInt::isPowerOf2(int8x16_t **this)
{
  if (*((_DWORD *)this + 2) > 0x40u)
    return llvm::APInt::countPopulationSlowCase(this) == 1;
  if (*this)
    return ((unint64_t)*this & ((unint64_t)&(*this)[-1].u64[1] + 7)) == 0;
  return 0;
}

BOOL `anonymous namespace'::Verifier::visitIntrinsicCall(unsigned int,llvm::CallBase &)::$_1::operator()(llvm::APInt *this, __int16 a2)
{
  char v2;
  llvm::APInt *v3;
  unsigned int v4;

  if ((a2 & 0xFF00) == 0)
    return 0;
  v2 = a2;
  v3 = this;
  v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40)
      return 0;
    v3 = *(llvm::APInt **)v3;
  }
  return *(_QWORD *)v3 <= (unint64_t)(1 << v2);
}

BOOL llvm::APInt::sge(llvm::APInt *this, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *((_DWORD *)this + 2);
  if (v3 >= 0x41)
  {
    v5 = *(uint64_t **)this;
    v6 = *(_QWORD *)(*(_QWORD *)this + 8 * ((v3 - 1) >> 6)) & (1 << (v3 - 1));
    if (v6)
    {
      if (v3 - llvm::APInt::countLeadingOnesSlowCase(this) + 1 >= 0x41)
        return v6 == 0;
    }
    else if (v3 - llvm::APInt::countLeadingZerosSlowCase(this) + 1 >= 0x41)
    {
      return v6 == 0;
    }
    v4 = *v5;
    return v4 >= a2;
  }
  v4 = (uint64_t)(*(_QWORD *)this << -(char)v3) >> -(char)v3;
  return v4 >= a2;
}

llvm::raw_ostream *llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::CallBase>(llvm::raw_ostream *result, llvm::Twine *this, llvm::Value *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;

  v4 = (uint64_t)result;
  v5 = *(llvm::raw_ostream **)result;
  if (!*(_QWORD *)result)
  {
    *((_BYTE *)result + 192) = 1;
    return result;
  }
  result = (llvm::raw_ostream *)llvm::Twine::print(this, v5);
  v8 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v8 < *((_QWORD *)v5 + 3))
  {
    *((_QWORD *)v5 + 4) = v8 + 1;
    *v8 = 10;
    v9 = *(llvm::raw_ostream **)v4;
    *(_BYTE *)(v4 + 192) = 1;
    if (!v9)
      return result;
    return llvm::VerifierSupport::WriteTs<llvm::CallBase,llvm::CallBase>((llvm::raw_ostream **)v4, a3, a4);
  }
  result = llvm::raw_ostream::write(v5, 10);
  v10 = *(llvm::raw_ostream **)v4;
  *(_BYTE *)(v4 + 192) = 1;
  if (v10)
    return llvm::VerifierSupport::WriteTs<llvm::CallBase,llvm::CallBase>((llvm::raw_ostream **)v4, a3, a4);
  return result;
}

char *llvm::CallBase::getOperandBundle@<X0>(char *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = this;
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    goto LABEL_9;
  this = llvm::User::getDescriptor((llvm::User *)this);
  v6 = this;
  if ((*((_DWORD *)v4 + 5) & 0x80000000) != 0)
  {
    this = llvm::User::getDescriptor((llvm::User *)v4);
    v7 = (unint64_t)(&this[v8] - v6) >> 4;
    if (!(_DWORD)v7)
    {
LABEL_9:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 24) = 0;
      return this;
    }
  }
  else
  {
    v7 = (unint64_t)-(uint64_t)this >> 4;
    if (!(_DWORD)v7)
      goto LABEL_9;
  }
  v9 = 0;
  while (1)
  {
    this = llvm::User::getDescriptor((llvm::User *)v4);
    v10 = *(_QWORD *)&this[v9];
    if (*(_DWORD *)(v10 + 8) == a2)
      break;
    v9 += 16;
    LODWORD(v7) = v7 - 1;
    if (!(_DWORD)v7)
      goto LABEL_9;
  }
  v11 = *(unsigned int *)&this[v9 + 8];
  v12 = *(unsigned int *)&this[v9 + 12] - v11;
  *(_QWORD *)a3 = &v4[32 * v11 + -32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 24) = 1;
  return this;
}

uint64_t llvm::CallBase::hasFnAttr(uint64_t a1, int a2)
{
  if ((llvm::AttributeSet::hasAttribute((_QWORD *)(a1 + 72), a2) & 1) != 0)
    return 1;
  else
    return llvm::CallBase::hasFnAttrOnCalledFunction(a1, a2);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::operator[](uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
    return llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>,mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Region * const&>(a1, 0, a2)+ 1;
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 == *v6)
    return v6 + 1;
  v9 = 0;
  v10 = 1;
  while (v7 != -4096)
  {
    if (v9)
      v11 = 0;
    else
      v11 = v7 == -8192;
    if (v11)
      v9 = v6;
    v12 = v5 + v10++;
    v5 = v12 & v4;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v12 & v4));
    v7 = *v6;
    if (*a2 == *v6)
      return v6 + 1;
  }
  if (v9)
    v13 = v9;
  else
    v13 = v6;
  return llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>,mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Region * const&>(a1, v13, a2)+ 1;
}

llvm::raw_ostream *`anonymous namespace'::Verifier::verifyStatepoint(_anonymous_namespace_::Verifier *this, const llvm::CallBase *a2)
{
  const char *v4;
  llvm::raw_ostream *result;
  uint64_t v6;
  unsigned int v7;
  uint64_t ParamElementType;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  const char *v27;
  const char *v28;
  const llvm::CallBase **v29;
  llvm::raw_ostream *ParamAttrs;
  uint64_t v31;
  _QWORD v32[4];
  __int16 v33;

  if (llvm::CallBase::doesNotAccessMemory(a2)
    || llvm::CallBase::onlyReadsMemory(a2)
    || llvm::CallBase::onlyAccessesArgMemory(a2))
  {
    v4 = "gc.statepoint must read and write all memory to preserve reordering restrictions required by safepoint semantics";
LABEL_5:
    v32[0] = v4;
    v33 = 259;
    return llvm::VerifierSupport::CheckFailed<llvm::Function>(this, (llvm::Twine *)v32, (unsigned __int8 *)a2);
  }
  v6 = ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  v7 = *(_DWORD *)(v6 + 32);
  if (v7 > 0x40)
  {
    if ((**(_QWORD **)(v6 + 24) & 0x8000000000000000) != 0)
      goto LABEL_9;
  }
  else if ((uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v7) >> -(char)v7 < 0)
  {
LABEL_9:
    v4 = "gc.statepoint number of patchable bytes must be positive";
    goto LABEL_5;
  }
  ParamElementType = llvm::AttributeList::getParamElementType((const llvm::CallBase *)((char *)a2 + 72), 2);
  if (!ParamElementType)
  {
    v4 = "gc.statepoint callee argument must have elementtype attribute";
    goto LABEL_5;
  }
  v9 = ParamElementType;
  if (*(_DWORD *)(ParamElementType + 8) != 14)
  {
    v4 = "gc.statepoint callee elementtype must be function type";
    goto LABEL_5;
  }
  v10 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  v11 = (char *)a2 - 32 * v10;
  v12 = *((_QWORD *)v11 + 12);
  v13 = (_QWORD *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v14 = (_QWORD *)*v13;
  if ((*v13 & 0x80000000) != 0)
  {
    v4 = "gc.statepoint number of arguments to underlying call must be positive";
    goto LABEL_5;
  }
  v15 = (*(_DWORD *)(ParamElementType + 12) - 1);
  if (*(_DWORD *)(ParamElementType + 8) < 0x100u)
  {
    if ((_DWORD)v15 != (_DWORD)v14)
    {
      v4 = "gc.statepoint mismatch in number of call args";
      goto LABEL_5;
    }
  }
  else
  {
    if ((int)v15 > (int)v14)
    {
      v4 = "gc.statepoint mismatch in number of vararg call args";
      goto LABEL_5;
    }
    if (*(_BYTE *)(**(_QWORD **)(ParamElementType + 16) + 8) != 7)
    {
      v4 = "gc.statepoint doesn't support wrapping non-void vararg functions yet";
      goto LABEL_5;
    }
  }
  v16 = *((_QWORD *)v11 + 16);
  v17 = (_QWORD *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (_QWORD *)*v17;
  if (*v17 >= 4uLL)
  {
    v4 = "unknown flag used in gc.statepoint flags argument";
    goto LABEL_5;
  }
  v31 = *((_QWORD *)a2 + 9);
  if ((int)v15 >= 1)
  {
    v18 = 0;
    v19 = (char *)a2 + 160;
    do
    {
      if (**(_QWORD **)&v19[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)] != *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v18 + 8))
      {
        v4 = "gc.statepoint call argument does not match wrapped function type";
        goto LABEL_5;
      }
      if (*(_DWORD *)(v9 + 8) >= 0x100u)
      {
        ParamAttrs = (llvm::raw_ostream *)llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v31, (int)v18 + 5);
        if (llvm::AttributeSet::hasAttribute(&ParamAttrs, 77))
        {
          v4 = "Attribute 'sret' cannot be used for vararg call arguments!";
          goto LABEL_5;
        }
      }
      ++v18;
      v19 += 32;
    }
    while (v15 != v18);
    v10 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  }
  v20 = (char *)a2 - 32 * v10;
  v21 = *(_QWORD *)&v20[32 * ((_DWORD)v14 + 5)];
  if (*(_BYTE *)(v21 + 16) != 16)
  {
    v4 = "gc.statepoint number of transition arguments must be constant integer";
    goto LABEL_5;
  }
  v22 = (_QWORD *)(v21 + 24);
  if (*(_DWORD *)(v21 + 32) >= 0x41u)
    v22 = (_QWORD *)*v22;
  if (*(_DWORD *)v22)
  {
    v4 = "gc.statepoint w/inline transition bundle is deprecated";
    goto LABEL_5;
  }
  v23 = *(_QWORD *)&v20[32 * ((_DWORD)v14 + 6)];
  if (*(_BYTE *)(v23 + 16) != 16)
  {
    v4 = "gc.statepoint number of deoptimization arguments must be constant integer";
    goto LABEL_5;
  }
  v24 = (_QWORD *)(v23 + 24);
  if (*(_DWORD *)(v23 + 32) >= 0x41u)
    v24 = (_QWORD *)*v24;
  if (*(_DWORD *)v24)
  {
    v4 = "gc.statepoint w/inline deopt operands is deprecated";
    goto LABEL_5;
  }
  result = (llvm::raw_ostream *)llvm::CallBase::arg_end(a2);
  if ((_DWORD)v14 + 7 != ((unint64_t)(result
                                                          - (const llvm::CallBase *)((char *)a2
                                                                                   - 32
                                                                                   * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) >> 5))
  {
    v4 = "gc.statepoint too many arguments";
    goto LABEL_5;
  }
  v25 = *((_QWORD *)a2 + 1);
  if (v25)
  {
    while (1)
    {
      v26 = *(llvm::raw_ostream **)(v25 + 24);
      ParamAttrs = v26;
      if (*((_BYTE *)v26 + 16) != 84)
        v26 = 0;
      v29 = (const llvm::CallBase **)v26;
      if (!v26)
      {
        v28 = "illegal use of statepoint token";
        goto LABEL_70;
      }
      if (!llvm::isa<llvm::GCRelocateInst,llvm::CallInst const*>((uint64_t *)&v29)
        && !llvm::isa<llvm::GCResultInst,llvm::CallInst const*>((uint64_t *)&v29))
      {
        break;
      }
      result = (llvm::raw_ostream *)llvm::isa<llvm::GCResultInst,llvm::CallInst const*>((uint64_t *)&v29);
      if ((_DWORD)result)
      {
        if (v29[-4 * (*((_DWORD *)v29 + 5) & 0x7FFFFFF)] != a2)
        {
          v27 = "gc.result connected to wrong gc.statepoint";
          goto LABEL_68;
        }
      }
      else
      {
        result = (llvm::raw_ostream *)llvm::isa<llvm::GCRelocateInst,llvm::CallBase>((uint64_t)a2);
        if ((_DWORD)result && v29[-4 * (*((_DWORD *)v29 + 5) & 0x7FFFFFF)] != a2)
        {
          v27 = "gc.relocate connected to wrong gc.statepoint";
LABEL_68:
          v32[0] = v27;
          v33 = 259;
          return llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(this, (llvm::Twine *)v32, a2, (llvm::raw_ostream **)&v29);
        }
      }
      v25 = *(_QWORD *)(v25 + 8);
      if (!v25)
        return result;
    }
    v28 = "gc.result or gc.relocate are the only value uses of a gc.statepoint";
LABEL_70:
    v32[0] = v28;
    v33 = 259;
    return llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(this, (llvm::Twine *)v32, a2, &ParamAttrs);
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(llvm::raw_ostream *result, llvm::Twine *this, llvm::Value *a3, llvm::raw_ostream **a4)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;

  v4 = (uint64_t)result;
  v5 = *(llvm::raw_ostream **)result;
  if (!*(_QWORD *)result)
  {
    *((_BYTE *)result + 192) = 1;
    return result;
  }
  result = (llvm::raw_ostream *)llvm::Twine::print(this, v5);
  v8 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v8 < *((_QWORD *)v5 + 3))
  {
    *((_QWORD *)v5 + 4) = v8 + 1;
    *v8 = 10;
    v9 = *(llvm::raw_ostream **)v4;
    *(_BYTE *)(v4 + 192) = 1;
    if (!v9)
      return result;
    return llvm::VerifierSupport::WriteTs<llvm::CallBase,llvm::User const*>((llvm::raw_ostream **)v4, a3, a4);
  }
  result = llvm::raw_ostream::write(v5, 10);
  v10 = *(llvm::raw_ostream **)v4;
  *(_BYTE *)(v4 + 192) = 1;
  if (v10)
    return llvm::VerifierSupport::WriteTs<llvm::CallBase,llvm::User const*>((llvm::raw_ostream **)v4, a3, a4);
  return result;
}

BOOL llvm::isa<llvm::GCStatepointInst,llvm::Instruction const*>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v1 = *a1;
  v2 = *(unsigned __int8 *)(*a1 + 16);
  if (v2 >= 0x1C
    && ((v3 = v2 - 33, v4 = v3 > 0x33, v5 = (1 << v3) & 0x8000000000041, !v4) ? (v6 = v5 == 0) : (v6 = 1),
        !v6 && (v7 = *(_QWORD *)(v1 - 32)) != 0 && !*(_BYTE *)(v7 + 16) && *(_QWORD *)(v7 + 24) == *(_QWORD *)(v1 + 80)))
  {
    return *(_DWORD *)(v7 + 36) == 136;
  }
  else
  {
    return 0;
  }
}

void llvm::CallBrInst::getIndirectDests(llvm::CallBrInst *this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  unsigned int v6;
  char *v7;
  uint64_t v8;

  v3 = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x1000000000;
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = (char *)this - 32;
    do
    {
      v8 = *(_QWORD *)&v7[-32 * *((unsigned int *)this + 22)];
      if (v6 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v6 + 1, 8);
        v6 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v8;
      v6 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v6;
      v7 += 32;
      --v4;
    }
    while (v4);
  }
}

void llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::operator=(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)((char *)v3 + 8);
    v5 = 16 * v2;
    do
    {
      if ((*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = *v4;
        if ((*v4 & 4) != 0)
        {
          v7 = (void **)(v6 & 0xFFFFFFFFFFFFFFF8);
          if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v7 != v7 + 2)
              free(*v7);
            operator delete(v7);
          }
        }
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
    v3 = *(llvm **)a1;
    v8 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v8 = 0;
  }
  llvm::deallocate_buffer(v3, v8);
}

uint64_t sub_180D457B4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;

  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_DWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v0 + 8) = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = 0;
  v2 = *(_DWORD *)(v0 + 12);
  *(_DWORD *)(v0 + 12) = *(_DWORD *)(v1 + 12);
  *(_DWORD *)(v1 + 12) = v2;
  v3 = *(_DWORD *)(v0 + 16);
  *(_DWORD *)(v0 + 16) = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 16) = v3;
  return v0;
}

void llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::~DenseMap(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)((char *)v3 + 8);
    v5 = 16 * v2;
    do
    {
      if ((*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = *v4;
        if ((*v4 & 4) != 0)
        {
          v7 = (void **)(v6 & 0xFFFFFFFFFFFFFFF8);
          if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v7 != v7 + 2)
              free(*v7);
            operator delete(v7);
          }
        }
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
    v3 = *(llvm **)a1;
    v8 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v8 = 0;
  }
  llvm::deallocate_buffer(v3, v8);
}

uint64_t sub_180D458A0()
{
  uint64_t v0;

  return v0;
}

llvm::raw_ostream *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::DbgAssignIntrinsic *>(llvm::raw_ostream *result, llvm::Twine *this, unsigned __int8 **a3, llvm::raw_ostream **a4)
{
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  v6 = (uint64_t)result;
  v7 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::raw_ostream *)llvm::Twine::print(this, v7);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      result = llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 10;
    }
  }
  *(_BYTE *)(v6 + 192) |= *(_BYTE *)(v6 + 194);
  *(_BYTE *)(v6 + 193) = 1;
  if (*(_QWORD *)v6)
    return llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)v6, a3, a4);
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *>(llvm::raw_ostream *result, llvm::Twine *this, unsigned __int8 **a3, unsigned __int8 **a4, llvm::raw_ostream **a5)
{
  uint64_t v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;

  v8 = (uint64_t)result;
  v9 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::raw_ostream *)llvm::Twine::print(this, v9);
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
    {
      result = llvm::raw_ostream::write(v9, 10);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 10;
    }
  }
  *(_BYTE *)(v8 + 192) |= *(_BYTE *)(v8 + 194);
  *(_BYTE *)(v8 + 193) = 1;
  if (*(_QWORD *)v8)
    return llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Value *,llvm::Value *>((_anonymous_namespace_::TypePrinting **)v8, a3, a4, a5);
  return result;
}

unsigned __int8 *getSubprogram(unsigned __int8 *result)
{
  int v1;
  unint64_t v2;

  if (result)
  {
    while (1)
    {
      v1 = *result;
      if (v1 == 18)
        break;
      if ((v1 - 21) < 0xFFFFFFFE)
        return 0;
      v2 = *((_QWORD *)result - 2);
      if ((v2 & 2) != 0)
      {
        result = *(unsigned __int8 **)(*((_QWORD *)result - 4) + 8);
        if (!result)
          return result;
      }
      else
      {
        result = *(unsigned __int8 **)&result[-8 * ((v2 >> 2) & 0xF) - 8];
        if (!result)
          return result;
      }
    }
  }
  return result;
}

llvm::Metadata *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(llvm::Metadata *result, llvm::Twine *this, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5, llvm::Metadata **a6, llvm::Metadata **a7, llvm::Metadata **a8, llvm::Metadata **a9)
{
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;

  v15 = (uint64_t)result;
  v16 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::Metadata *)llvm::Twine::print(this, v16);
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
    {
      result = llvm::raw_ostream::write(v16, 10);
    }
    else
    {
      *((_QWORD *)v16 + 4) = v17 + 1;
      *v17 = 10;
    }
  }
  *(_BYTE *)(v15 + 192) |= *(_BYTE *)(v15 + 194);
  *(_BYTE *)(v15 + 193) = 1;
  if (*(_QWORD *)v15)
    return llvm::VerifierSupport::WriteTs<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>((_anonymous_namespace_::TypePrinting **)v15, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

void `anonymous namespace'::Verifier::verifyFnArgs(_anonymous_namespace_::Verifier *this, const llvm::DbgVariableIntrinsic *a2)
{
  uint64_t CallableRegion;
  unint64_t v5;
  unsigned __int16 *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Metadata *v15;
  BOOL v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  llvm::Metadata *v22;
  _QWORD v23[4];
  __int16 v24;
  llvm::Metadata *v25;

  if (!*((_BYTE *)this + 801))
    return;
  CallableRegion = mlir::CallGraphNode::getCallableRegion((const llvm::DbgVariableIntrinsic *)((char *)a2 + 48));
  v5 = *(_QWORD *)(CallableRegion - 16);
  if ((v5 & 2) != 0)
  {
    if (*(_DWORD *)(CallableRegion - 24) == 2 && *(_QWORD *)(*(_QWORD *)(CallableRegion - 32) + 8))
      return;
  }
  else if ((*(_QWORD *)(CallableRegion - 16) & 0x3C0) == 0x80
         && *(_QWORD *)(CallableRegion - 16 - 8 * ((v5 >> 2) & 0xF) + 8))
  {
    return;
  }
  v6 = *(unsigned __int16 **)(((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4] + 24);
  v25 = (llvm::Metadata *)v6;
  if (v6)
  {
    v7 = v6[10];
    if (!v6[10])
      return;
    v8 = (uint64_t *)((char *)this + 1832);
    v9 = *((unsigned int *)this + 460);
    if (v7 <= v9)
      goto LABEL_15;
    v10 = *((unsigned int *)this + 460);
    v11 = *((_DWORD *)this + 460);
    if (*((_DWORD *)this + 461) < v7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1832, (char *)this + 1848, v6[10], 8);
      v10 = *((unsigned int *)this + 460);
      v11 = *((_DWORD *)this + 460);
      v12 = v7 - v9;
      if (v7 == v9)
        goto LABEL_14;
    }
    else
    {
      v12 = v7 - v9;
      if (v7 == v9)
      {
LABEL_14:
        *((_DWORD *)this + 460) = v11 + v7 - v9;
LABEL_15:
        v13 = *v8;
        v14 = 8 * (v7 - 1);
        v22 = *(llvm::Metadata **)(*v8 + v14);
        v15 = v22;
        *(_QWORD *)(v13 + v14) = v6;
        if (v15)
          v16 = v15 == (llvm::Metadata *)v6;
        else
          v16 = 1;
        if (!v16)
        {
          v23[0] = "conflicting debug info for argument";
          v24 = 259;
          v21 = (unsigned __int8 *)a2;
          v17 = *(llvm::raw_ostream **)this;
          if (*(_QWORD *)this)
          {
            llvm::Twine::print((llvm::Twine *)v23, *(llvm::raw_ostream **)this);
            v18 = (_BYTE *)*((_QWORD *)v17 + 4);
            if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
            {
              llvm::raw_ostream::write(v17, 10);
            }
            else
            {
              *((_QWORD *)v17 + 4) = v18 + 1;
              *v18 = 10;
            }
          }
          *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
          *((_BYTE *)this + 193) = 1;
          if (*(_QWORD *)this)
            llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::DILocation const*,llvm::Metadata *>((_anonymous_namespace_::TypePrinting **)this, &v21, &v22, &v25);
        }
        return;
      }
    }
    bzero((void *)(*v8 + 8 * v10), 8 * v12);
    goto LABEL_14;
  }
  v23[0] = "dbg intrinsic without variable";
  v24 = 259;
  v19 = *(llvm::raw_ostream **)this;
  if (*(_QWORD *)this)
  {
    llvm::Twine::print((llvm::Twine *)v23, *(llvm::raw_ostream **)this);
    v20 = (_BYTE *)*((_QWORD *)v19 + 4);
    if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
    {
      llvm::raw_ostream::write(v19, 10);
    }
    else
    {
      *((_QWORD *)v19 + 4) = v20 + 1;
      *v20 = 10;
    }
  }
  *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
  *((_BYTE *)this + 193) = 1;
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 **a4, llvm::Metadata **a5, llvm::Metadata **a6, llvm::Metadata **a7, llvm::Metadata **a8)
{
  unsigned __int8 *v15;
  llvm::raw_ostream *v16;
  _anonymous_namespace_::TypePrinting *v17;
  _BYTE *v18;

  v15 = *a2;
  if (*a2)
  {
    v16 = *a1;
    if (v15[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v15, v16, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v15, v16, 1, a1 + 2);
    v17 = *a1;
    v18 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v17, 10);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v18 + 1;
      *v18 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(a1, a3, a4, a5, a6, a7, a8);
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, unsigned __int8 **a3, llvm::Metadata **a4, llvm::Metadata **a5, llvm::Metadata **a6, llvm::Metadata **a7)
{
  unsigned __int8 *v13;
  llvm::raw_ostream *v14;
  _anonymous_namespace_::TypePrinting *v15;
  _BYTE *v16;

  v13 = *a2;
  if (*a2)
  {
    v14 = *a1;
    if (v13[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v13, v14, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v13, v14, 1, a1 + 2);
    v15 = *a1;
    v16 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v15, 10);
    }
    else
    {
      *((_QWORD *)v15 + 4) = v16 + 1;
      *v16 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(a1, a3, a4, a5, a6, a7);
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, llvm::Metadata **a3, llvm::Metadata **a4, llvm::Metadata **a5, llvm::Metadata **a6)
{
  unsigned __int8 *v11;
  llvm::raw_ostream *v12;
  _anonymous_namespace_::TypePrinting *v13;
  _BYTE *v14;

  v11 = *a2;
  if (*a2)
  {
    v12 = *a1;
    if (v11[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v11, v12, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v11, v12, 1, a1 + 2);
    v13 = *a1;
    v14 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v14 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v13, 10);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v14 + 1;
      *v14 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(a1, a3, a4, a5, a6);
}

llvm::Metadata *llvm::VerifierSupport::WriteTs<llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(llvm::raw_ostream **a1, llvm::Metadata **a2, llvm::Metadata **a3, llvm::Metadata **a4, llvm::Metadata **a5)
{
  if (*a2)
    llvm::Metadata::print(*a2, *a1, (llvm::ModuleSlotTracker *)(a1 + 2), a1[1]);
  if (*a3)
    llvm::Metadata::print(*a3, *a1, (llvm::ModuleSlotTracker *)(a1 + 2), a1[1]);
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>(a1, a4, a5);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::CallBase,llvm::CallBase>(llvm::raw_ostream **a1, llvm::Value *this, unsigned __int8 *a3)
{
  unsigned int v6;
  llvm::raw_ostream *v7;
  llvm::ModuleSlotTracker *v8;
  llvm::raw_ostream *v9;
  llvm::Value *v10;
  llvm::raw_ostream *result;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;

  v6 = *((unsigned __int8 *)this + 16);
  v8 = (llvm::ModuleSlotTracker *)(a1 + 2);
  v7 = *a1;
  if (v6 >= 0x1C)
    llvm::Value::print(this, v7, v8, 0);
  llvm::Value::printAsOperand((Type **)this, v7, 1, (_anonymous_namespace_::TypePrinting **)v8);
  v13 = *a1;
  v14 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
    v9 = *a1;
    v10 = (llvm::Value *)a3;
    if (a3[16] >= 0x1Cu)
      goto LABEL_8;
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
    v9 = *a1;
    v10 = (llvm::Value *)a3;
    if (a3[16] >= 0x1Cu)
LABEL_8:
      llvm::Value::print(v10, v9, v8, 0);
  }
  llvm::Value::printAsOperand((Type **)v10, v9, 1, (_anonymous_namespace_::TypePrinting **)v8);
  result = *a1;
  v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v12 + 1;
  *v12 = 10;
  return result;
}

BOOL llvm::isa<llvm::GCRelocateInst,llvm::CallInst const*>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  return *(_BYTE *)(*a1 + 16) == 84
      && (v2 = *(_QWORD *)(v1 - 32)) != 0
      && !*(_BYTE *)(v2 + 16)
      && *(_QWORD *)(v2 + 24) == *(_QWORD *)(v1 + 80)
      && (*(_BYTE *)(v2 + 33) & 0x20) != 0
      && *(_DWORD *)(v2 + 36) == 134;
}

BOOL llvm::isa<llvm::GCResultInst,llvm::CallInst const*>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  return *(_BYTE *)(*a1 + 16) == 84
      && (v2 = *(_QWORD *)(v1 - 32)) != 0
      && !*(_BYTE *)(v2 + 16)
      && *(_QWORD *)(v2 + 24) == *(_QWORD *)(v1 + 80)
      && (*(_BYTE *)(v2 + 33) & 0x20) != 0
      && *(_DWORD *)(v2 + 36) == 135;
}

BOOL llvm::isa<llvm::GCRelocateInst,llvm::CallBase>(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 80)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 134;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::CallBase,llvm::User const*>(llvm::raw_ostream **a1, llvm::Value *this, llvm::raw_ostream **a3)
{
  llvm::raw_ostream *v5;
  llvm::ModuleSlotTracker *v6;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;

  v6 = (llvm::ModuleSlotTracker *)(a1 + 2);
  v5 = *a1;
  if (*((unsigned __int8 *)this + 16) >= 0x1Cu)
    llvm::Value::print(this, v5, v6, 0);
  llvm::Value::printAsOperand((Type **)this, v5, 1, (_anonymous_namespace_::TypePrinting **)v6);
  v8 = *a1;
  v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v8, 10);
    result = *a3;
    if (!*a3)
      return result;
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 10;
    result = *a3;
    if (!*a3)
      return result;
  }
  v10 = *a1;
  if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
    llvm::Value::print(result, v10, v6, 0);
  llvm::Value::printAsOperand((Type **)result, v10, 1, (_anonymous_namespace_::TypePrinting **)v6);
  result = *a1;
  v11 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)*a1 + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v11 + 1;
  *v11 = 10;
  return result;
}

uint64_t llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Instruction *>,0u>>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v4 = *a2;
  v5 = *(_DWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_25;
  v6 = *(_QWORD *)a1;
  v7 = ((v4 >> 4) ^ (v4 >> 9)) & (v5 - 1);
  v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v9 = *v8;
  if (v4 == *v8)
  {
LABEL_3:
    v10 = *(_DWORD *)(v6 + 16 * v7 + 8);
    return *(_QWORD *)(a1 + 24) + 16 * v10 + 8;
  }
  v16 = 0;
  v17 = 1;
  while (v9 != -4096)
  {
    if (v16)
      v18 = 0;
    else
      v18 = v9 == -8192;
    if (v18)
      v16 = v8;
    v19 = v7 + v17++;
    v7 = v19 & (v5 - 1);
    v8 = (_QWORD *)(v6 + 16 * v7);
    v9 = *v8;
    if (v4 == *v8)
      goto LABEL_3;
  }
  v20 = (uint64_t)(v16 ? v16 : v8);
  v21 = *(_DWORD *)(a1 + 8);
  if (4 * v21 + 4 < 3 * v5)
  {
    if (v5 + ~v21 - *(_DWORD *)(a1 + 12) > v5 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_25:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v5);
  v22 = *(_DWORD *)(a1 + 16) - 1;
  v23 = v22 & ((v4 >> 4) ^ (v4 >> 9));
  v20 = *(_QWORD *)a1 + 16 * v23;
  v24 = *(_QWORD *)v20;
  if (v4 == *(_QWORD *)v20)
  {
LABEL_27:
    ++*(_DWORD *)(a1 + 8);
    if (v4 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v25 = 0;
  v26 = 1;
  while (v24 != -4096)
  {
    if (v25)
      v27 = 0;
    else
      v27 = v24 == -8192;
    if (v27)
      v25 = v20;
    v28 = v23 + v26++;
    v23 = v28 & v22;
    v20 = *(_QWORD *)a1 + 16 * v23;
    v24 = *(_QWORD *)v20;
    if (v4 == *(_QWORD *)v20)
      goto LABEL_27;
  }
  if (v25)
    v20 = v25;
LABEL_6:
  v11 = *(_QWORD *)v20;
  ++*(_DWORD *)(a1 + 8);
  if (v11 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(_QWORD *)v20 = v4;
  *(_DWORD *)(v20 + 8) = 0;
  v12 = *a2;
  v13 = *(unsigned int *)(a1 + 32);
  if (v13 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v13 + 1, 16);
    LODWORD(v13) = *(_DWORD *)(a1 + 32);
  }
  v14 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v13);
  *v14 = v12;
  v14[1] = 0;
  v10 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v10 + 1;
  *(_DWORD *)(v20 + 8) = v10;
  return *(_QWORD *)(a1 + 24) + 16 * v10 + 8;
}

void `anonymous namespace'::Verifier::visitEHPadPredecessors(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2)
{
  llvm::BasicBlock *v3;
  uint64_t v4;
  llvm::BasicBlock *v5;
  unsigned int v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  llvm::raw_ostream *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  unsigned __int8 *v46;
  char *Descriptor;
  char *v48;
  unsigned __int8 *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  llvm::ConstantTokenNone *DesiredBytecodeVersion;
  llvm::LLVMContext *v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  char *v61;
  unsigned __int8 *v62;
  unsigned __int8 v63;
  int v64;
  unsigned int v65;
  int v67;
  unsigned __int8 **v68;
  uint64_t v69;
  unsigned __int8 **v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  uint64_t v73;
  int v74;
  const char *v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  llvm::raw_ostream *v80;
  _BYTE *v81;
  uint64_t v82;
  llvm::raw_ostream *v83;
  _BYTE *v84;
  uint64_t v85;
  llvm::raw_ostream *v86;
  _BYTE *v87;
  uint64_t v88;
  llvm::raw_ostream *v89[4];
  __int16 v90;
  const char *v91;
  char *v92;
  uint64_t v93;
  int v94;
  _WORD v95[32];
  llvm::raw_ostream *v96;
  unsigned __int8 *v97;
  llvm::raw_ostream *v98;
  unsigned __int8 *v99[2];

  v3 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 8) + 80);
  if (v4)
    v5 = (llvm::BasicBlock *)(v4 - 24);
  else
    v5 = 0;
  if (v3 == v5)
  {
    v91 = "EH pad cannot be in entry block.";
    v95[0] = 259;
    v89[0] = a2;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v91, v89);
    return;
  }
  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 94)
    v7 = a2;
  else
    v7 = 0;
  v89[0] = v7;
  if (v6 == 94)
  {
    v8 = *((_QWORD *)v3 + 1);
    if (v8)
    {
      while (1)
      {
        v9 = *(_QWORD *)(v8 + 24);
        v10 = *(unsigned __int8 *)(v9 + 16);
        v11 = v9 && v10 >= 0x1C;
        if (v11 && v10 - 29 <= 0xA)
          break;
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          return;
      }
LABEL_59:
      v28 = *(_QWORD *)(v9 + 40);
      v29 = *(_QWORD *)(v28 + 48);
      if (v29 != v28 + 48
        && ((v20 = v29 - 24, v29) ? (v21 = v29 - 24) : (v21 = 0),
            (v22 = *(unsigned __int8 *)(v21 + 16) - 40, v23 = __CFADD__(v22, 11), v22 >= 0xFFFFFFF5)
          ? (v24 = v20)
          : (v24 = 0),
            v23
         && *(_BYTE *)(v24 + 16) == 33
         && *(llvm::BasicBlock **)(v24 - 64) == v3
         && *(llvm::BasicBlock **)(v24 - 96) != v3))
      {
        while (1)
        {
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
            break;
          v9 = *(_QWORD *)(v8 + 24);
          v25 = *(unsigned __int8 *)(v9 + 16);
          if (v9)
            v26 = v25 >= 0x1C;
          else
            v26 = 0;
          if (v26 && v25 - 29 < 0xB)
            goto LABEL_59;
        }
      }
      else
      {
        v91 = "Block containing LandingPadInst must be jumped to only by the unwind edge of an invoke.";
        v95[0] = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v91, v89);
      }
    }
    return;
  }
  if (v6 == 80)
    v13 = a2;
  else
    v13 = 0;
  v89[0] = v13;
  if (v6 == 80)
  {
    v14 = *((_QWORD *)v3 + 1);
    if (v14)
    {
      while (1)
      {
        v15 = *(_QWORD *)(v14 + 24);
        v16 = *(unsigned __int8 *)(v15 + 16);
        v17 = v15 && v16 >= 0x1C;
        if (v17 && v16 - 29 < 0xB)
          break;
        v14 = *(_QWORD *)(v14 + 8);
        if (!v14)
          goto LABEL_65;
      }
      if (llvm::BasicBlock::getUniquePredecessor(v3) != *(_QWORD *)(*((_QWORD *)v13 - 4) + 40))
      {
        v91 = "Block containg CatchPadInst must be jumped to only by its catchswitch.";
        v95[0] = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v91, v89);
        return;
      }
    }
LABEL_65:
    v31 = *((_QWORD *)v13 - 4);
    if ((*(_WORD *)(v31 + 18) & 1) != 0)
    {
      v32 = *(_DWORD *)(v31 + 20);
      if ((v32 & 0x40000000) != 0)
        v33 = *(_QWORD *)(v31 - 8);
      else
        v33 = v31 - 32 * (v32 & 0x7FFFFFF);
      if (v3 != *(llvm::BasicBlock **)(v33 + 32))
        return;
    }
    else if (v3)
    {
      return;
    }
    v91 = "Catchswitch cannot unwind to one of its catchpads";
    v95[0] = 259;
    v99[0] = (unsigned __int8 *)v31;
    v80 = *(llvm::raw_ostream **)this;
    if (*(_QWORD *)this)
    {
      llvm::Twine::print((llvm::Twine *)&v91, *(llvm::raw_ostream **)this);
      v81 = (_BYTE *)*((_QWORD *)v80 + 4);
      if ((unint64_t)v81 >= *((_QWORD *)v80 + 3))
      {
        llvm::raw_ostream::write(v80, 10);
      }
      else
      {
        *((_QWORD *)v80 + 4) = v81 + 1;
        *v81 = 10;
      }
      v82 = *(_QWORD *)this;
      *((_BYTE *)this + 192) = 1;
      if (!v82)
        return;
      goto LABEL_178;
    }
    goto LABEL_188;
  }
  v99[0] = (unsigned __int8 *)a2;
  if (v6 < 0x1C || v6 - 81 < 0xFFFFFFFE)
  {
    v30 = *((_DWORD *)a2 + 5);
    if ((v30 & 0x40000000) != 0)
      v19 = (char *)*((_QWORD *)a2 - 1);
    else
      v19 = (char *)a2 - 32 * (v30 & 0x7FFFFFF);
  }
  else
  {
    v19 = (char *)a2 - 32;
  }
  v34 = *((_QWORD *)v3 + 1);
  if (!v34)
    return;
  v35 = *(unsigned __int8 **)v19;
  while (1)
  {
    v36 = *(_QWORD *)(v34 + 24);
    v37 = *(unsigned __int8 *)(v36 + 16);
    v38 = v36 && v37 >= 0x1C;
    if (v38 && v37 - 29 < 0xB)
      break;
    v34 = *(_QWORD *)(v34 + 8);
    if (!v34)
      return;
  }
LABEL_83:
  v40 = *(_QWORD *)(*(_QWORD *)(v34 + 24) + 40);
  v41 = *(_QWORD *)(v40 + 48);
  if (v41 == v40 + 48)
  {
    v44 = 0;
    v97 = 0;
    v98 = 0;
    v45 = MEMORY[0x10];
    v89[0] = 0;
  }
  else
  {
    v42 = (unsigned __int8 *)(v41 - 24);
    if (v41)
      v43 = v41 - 24;
    else
      v43 = 0;
    if (*(unsigned __int8 *)(v43 + 16) - 29 >= 0xB)
      v44 = 0;
    else
      v44 = v42;
    v97 = 0;
    v98 = (llvm::raw_ostream *)v44;
    v45 = v44[16];
    if (v45 == 33)
      v46 = v44;
    else
      v46 = 0;
    v89[0] = (llvm::raw_ostream *)v46;
    if (v46)
    {
      if (*((llvm::BasicBlock **)v46 - 8) != v3 || *((llvm::BasicBlock **)v46 - 12) == v3)
      {
        v91 = "EH pad must be jumped to via an unwind edge";
        v95[0] = 259;
        v83 = *(llvm::raw_ostream **)this;
        if (*(_QWORD *)this)
        {
          llvm::Twine::print((llvm::Twine *)&v91, *(llvm::raw_ostream **)this);
          v84 = (_BYTE *)*((_QWORD *)v83 + 4);
          if ((unint64_t)v84 >= *((_QWORD *)v83 + 3))
          {
            llvm::raw_ostream::write(v83, 10);
          }
          else
          {
            *((_QWORD *)v83 + 4) = v84 + 1;
            *v84 = 10;
          }
          v85 = *(_QWORD *)this;
          *((_BYTE *)this + 192) = 1;
          if (!v85)
            return;
LABEL_178:
          llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)this, v99, v89);
          return;
        }
LABEL_188:
        *((_BYTE *)this + 192) = 1;
        return;
      }
      if ((*((_DWORD *)v46 + 5) & 0x80000000) != 0)
      {
        Descriptor = llvm::User::getDescriptor((llvm::User *)v46);
        if ((*((_DWORD *)v46 + 5) & 0x80000000) != 0)
        {
          v50 = llvm::User::getDescriptor((llvm::User *)v46);
          v48 = &v50[v51];
        }
        else
        {
          v48 = 0;
        }
      }
      else
      {
        Descriptor = 0;
        v48 = 0;
      }
      v52 = v48 - Descriptor;
      if ((v52 & 0xFFFFFFFF0) != 0)
      {
        v53 = 0;
        v54 = (v52 >> 4);
        while (1)
        {
          v55 = llvm::User::getDescriptor((llvm::User *)v46);
          if (*(_DWORD *)(*(_QWORD *)&v55[v53] + 8) == 1)
            break;
          v53 += 16;
          if (!--v54)
            goto LABEL_114;
        }
        v44 = *(unsigned __int8 **)&v46[32 * *(unsigned int *)&v55[v53 + 8] + -32 * (*((_DWORD *)v46 + 5) & 0x7FFFFFF)];
        goto LABEL_118;
      }
LABEL_114:
      DesiredBytecodeVersion = (llvm::ConstantTokenNone *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v46);
      v44 = (unsigned __int8 *)llvm::ConstantTokenNone::get(DesiredBytecodeVersion, v57);
      v97 = v44;
      goto LABEL_115;
    }
  }
  if (v45 == 36)
    v49 = v44;
  else
    v49 = 0;
  v96 = (llvm::raw_ostream *)v49;
  if (!v49)
  {
    if (v45 != 38)
    {
      v91 = "EH pad must be jumped to via an unwind edge";
      v95[0] = 259;
      v86 = *(llvm::raw_ostream **)this;
      if (*(_QWORD *)this)
      {
        llvm::Twine::print((llvm::Twine *)&v91, *(llvm::raw_ostream **)this);
        v87 = (_BYTE *)*((_QWORD *)v86 + 4);
        if ((unint64_t)v87 >= *((_QWORD *)v86 + 3))
        {
          llvm::raw_ostream::write(v86, 10);
        }
        else
        {
          *((_QWORD *)v86 + 4) = v87 + 1;
          *v87 = 10;
        }
        v88 = *(_QWORD *)this;
        *((_BYTE *)this + 192) = 1;
        if (v88)
          llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)this, v99, &v98);
        return;
      }
      goto LABEL_188;
    }
LABEL_118:
    v97 = v44;
    v91 = (const char *)v95;
    v92 = (char *)v95;
    v93 = 8;
    v94 = 0;
    if (v44 != v99[0])
      goto LABEL_119;
LABEL_146:
    v89[0] = (llvm::raw_ostream *)"EH pad cannot handle exceptions raised within it";
    v90 = 259;
    v71 = *(llvm::raw_ostream **)this;
    if (*(_QWORD *)this)
    {
      llvm::Twine::print((llvm::Twine *)v89, *(llvm::raw_ostream **)this);
      v72 = (_BYTE *)*((_QWORD *)v71 + 4);
      if ((unint64_t)v72 >= *((_QWORD *)v71 + 3))
      {
        llvm::raw_ostream::write(v71, 10);
      }
      else
      {
        *((_QWORD *)v71 + 4) = v72 + 1;
        *v72 = 10;
      }
      v73 = *(_QWORD *)this;
      *((_BYTE *)this + 192) = 1;
      if (v73)
        llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)this, &v97, &v98);
    }
    else
    {
      *((_BYTE *)this + 192) = 1;
    }
    goto LABEL_158;
  }
  v44 = *(unsigned __int8 **)&v49[-32 * (*((_DWORD *)v49 + 5) & 0x7FFFFFF)];
  v97 = v44;
  if (v44 == v35)
  {
    v91 = "A cleanupret must exit its cleanup";
    v95[0] = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v91, &v96);
    return;
  }
LABEL_115:
  v91 = (const char *)v95;
  v92 = (char *)v95;
  v93 = 8;
  v94 = 0;
  if (v44 == v99[0])
    goto LABEL_146;
LABEL_119:
  v58 = 0;
  v59 = 8;
  v60 = (const char *)v95;
  v61 = (char *)v95;
  while (1)
  {
    if (v44 == v35)
    {
      v74 = 1;
      goto LABEL_159;
    }
    if (v44[16] == 20)
    {
      v75 = "A single unwind edge may only enter one EH pad";
      goto LABEL_157;
    }
    if (v61 != v60)
    {
LABEL_124:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v91, v44);
      v64 = v63;
      goto LABEL_125;
    }
    if (v58)
    {
      v68 = 0;
      v69 = 8 * v58;
      v70 = (unsigned __int8 **)v60;
      do
      {
        if (*v70 == v44)
        {
          v64 = 0;
          goto LABEL_125;
        }
        if (*v70 == (unsigned __int8 *)-2)
          v68 = v70;
        ++v70;
        v69 -= 8;
      }
      while (v69);
      if (!v68)
        goto LABEL_143;
      *v68 = v44;
      --v94;
      v64 = 1;
    }
    else
    {
LABEL_143:
      if (v58 >= v59)
        goto LABEL_124;
      HIDWORD(v93) = v58 + 1;
      *(_QWORD *)&v60[8 * v58] = v44;
      v64 = 1;
    }
LABEL_125:
    if (!v64)
    {
      v89[0] = (llvm::raw_ostream *)"EH pad jumps through a cycle of pads";
      v90 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)v89, (llvm::raw_ostream **)&v97);
      goto LABEL_158;
    }
    v60 = v91;
    v61 = v92;
    v59 = v93;
    v58 = HIDWORD(v93);
    v65 = v97[16];
    if (v65 < 0x1C || v65 - 79 >= 2)
      break;
    v62 = v97 - 32;
LABEL_120:
    v97 = *(unsigned __int8 **)v62;
    v44 = v97;
    if (v97 == v99[0])
      goto LABEL_146;
  }
  if (v65 == 38)
  {
    v67 = *((_DWORD *)v97 + 5);
    if ((v67 & 0x40000000) != 0)
      v62 = (unsigned __int8 *)*((_QWORD *)v97 - 1);
    else
      v62 = &v97[-32 * (v67 & 0x7FFFFFF)];
    goto LABEL_120;
  }
  v75 = "Parent pad must be catchpad/cleanuppad/catchswitch";
LABEL_157:
  v89[0] = (llvm::raw_ostream *)v75;
  v90 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)v89, &v98);
LABEL_158:
  v74 = 0;
LABEL_159:
  if (v92 != v91)
    free(v92);
  if (v74)
  {
    while (1)
    {
      v34 = *(_QWORD *)(v34 + 8);
      if (!v34)
        break;
      v76 = *(_QWORD *)(v34 + 24);
      v77 = *(unsigned __int8 *)(v76 + 16);
      if (v76)
        v78 = v77 >= 0x1C;
      else
        v78 = 0;
      if (v78 && v77 - 29 < 0xB)
        goto LABEL_83;
    }
  }
}

llvm::raw_ostream *`anonymous namespace'::Verifier::visitBinaryOperator(llvm::raw_ostream *a1, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v3;
  const char *v4;
  __int16 v5;

  if (**((_QWORD **)a2 - 8) == **((_QWORD **)a2 - 4))
    __asm { BR              X11 }
  v3 = a2;
  v4 = "Both operands to a binary operator are not of the same type!";
  v5 = 259;
  return llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)&v4, &v3);
}

void sub_180D46E7C(_anonymous_namespace_::Verifier *this@<X0>, llvm::Instruction *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    if (*(_BYTE *)(**(_QWORD **)(v3 + 16) + 8) != 13)
      goto LABEL_7;
  }
  else if (*(_DWORD *)(*(_QWORD *)a2 + 8) != 13)
  {
LABEL_7:
    JUMPOUT(0x180D46E38);
  }
  if (v3 != a3)
    goto LABEL_7;
}

llvm::raw_ostream *`anonymous namespace'::Verifier::checkAtomicMemAccessSize(llvm::DataLayout **this, Type *a2, const llvm::Instruction *a3)
{
  uint64_t v4;
  const char *v5;
  llvm::raw_ostream *result;
  llvm::DataLayout *v7;
  _BYTE *v8;
  llvm::DataLayout *v9;
  llvm::DataLayout *v10;
  _QWORD v11[4];
  __int16 v12;
  llvm::raw_ostream *v13;
  Type *v14;

  v13 = a3;
  v14 = a2;
  llvm::DataLayout::getTypeSizeInBits(this[22], a2);
  v11[0] = v4;
  v11[1] = v5;
  result = (llvm::raw_ostream *)llvm::TypeSize::operator unsigned long long(v11, v5);
  if (result <= 7)
  {
    v11[0] = "atomic memory access' size must be byte-sized";
    v12 = 259;
    v7 = *this;
    if (!*this)
    {
LABEL_4:
      *((_BYTE *)this + 192) = 1;
      return result;
    }
  }
  else
  {
    if ((result & ((_DWORD)result - 1)) == 0)
      return result;
    v11[0] = "atomic memory access' operand must have a power-of-two size";
    v12 = 259;
    v7 = *this;
    if (!*this)
      goto LABEL_4;
  }
  result = (llvm::raw_ostream *)llvm::Twine::print((llvm::Twine *)v11, v7);
  v8 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
  {
    result = llvm::raw_ostream::write(v7, 10);
    v10 = *this;
    *((_BYTE *)this + 192) = 1;
    if (!v10)
      return result;
    return llvm::VerifierSupport::WriteTs<llvm::Type *,llvm::LoadInst *>(this, &v14, &v13);
  }
  *((_QWORD *)v7 + 4) = v8 + 1;
  *v8 = 10;
  v9 = *this;
  *((_BYTE *)this + 192) = 1;
  if (v9)
    return llvm::VerifierSupport::WriteTs<llvm::Type *,llvm::LoadInst *>(this, &v14, &v13);
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Type *,llvm::LoadInst *>(llvm::raw_ostream **a1, Type **a2, llvm::raw_ostream **a3)
{
  Type *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v8;
  _BYTE *v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = *a1;
    v6 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)*a1 + 3))
    {
      v5 = llvm::raw_ostream::write(*a1, 32);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 32;
    }
    llvm::Type::print(v4, v5, 0, 0);
  }
  result = *a3;
  if (*a3)
  {
    v8 = *a1;
    if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
      llvm::Value::print(result, v8, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)result, v8, 1, a1 + 2);
    result = *a1;
    v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)*a1 + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v9 + 1;
      *v9 = 10;
    }
  }
  return result;
}

void `anonymous namespace'::Verifier::visitFuncletPadInst(llvm::raw_ostream *a1, mlir::BytecodeWriterConfig *a2)
{
  _QWORD *v4;
  uint64_t v5;
  mlir::BytecodeWriterConfig *v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  mlir::BytecodeWriterConfig *v10;
  mlir::BytecodeWriterConfig *v11;
  uint64_t v12;
  mlir::BytecodeWriterConfig **v13;
  uint64_t v14;
  mlir::BytecodeWriterConfig **v15;
  uint64_t v16;
  int v17;
  llvm::BasicBlock *v18;
  int v19;
  char *FirstNonPHI;
  int v21;
  _QWORD *v23;
  int v24;
  mlir::BytecodeWriterConfig *v25;
  uint64_t v26;
  llvm::ConstantTokenNone *DesiredBytecodeVersion;
  llvm::LLVMContext *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v38;
  uint64_t *v39;
  mlir::BytecodeWriterConfig *v40;
  mlir::BytecodeWriterConfig **v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  llvm::raw_ostream *v51;
  llvm::BasicBlock *v52;
  _QWORD *v53;
  llvm::ConstantTokenNone *v54;
  llvm::LLVMContext *v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  llvm::raw_ostream *v58;
  uint64_t v59;
  mlir::BytecodeWriterConfig *v60;
  unsigned __int8 *v61;
  uint64_t v62[4];
  __int16 v63;
  llvm::raw_ostream *v64;
  mlir::BytecodeWriterConfig **v65;
  mlir::BytecodeWriterConfig **v66;
  uint64_t v67;
  int v68;
  _BYTE v69[64];
  unsigned __int8 *v70;
  _QWORD *v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD v74[10];

  v4 = 0;
  v74[8] = *MEMORY[0x1E0C80C00];
  v70 = 0;
  v71 = v74;
  v73 = 8;
  v74[0] = a2;
  v65 = (mlir::BytecodeWriterConfig **)v69;
  v66 = (mlir::BytecodeWriterConfig **)v69;
  v67 = 8;
  v68 = 0;
  v59 = (uint64_t)a1 + 856;
  LODWORD(v5) = 1;
  do
  {
    v6 = (mlir::BytecodeWriterConfig *)v71[v5 - 1];
    v72 = v5 - 1;
    v64 = v6;
    if (v66 != v65)
      goto LABEL_5;
    v12 = HIDWORD(v67);
    if (HIDWORD(v67))
    {
      v13 = 0;
      v14 = 8 * HIDWORD(v67);
      v15 = v66;
      do
      {
        if (*v15 == v6)
        {
          v8 = 0;
          goto LABEL_6;
        }
        if (*v15 == (mlir::BytecodeWriterConfig *)-2)
          v13 = v15;
        ++v15;
        v14 -= 8;
      }
      while (v14);
      if (!v13)
        goto LABEL_114;
      *v13 = v6;
      --v68;
      v8 = 1;
      goto LABEL_6;
    }
LABEL_114:
    if (HIDWORD(v67) < v67)
    {
      ++HIDWORD(v67);
      v66[v12] = v6;
      v8 = 1;
    }
    else
    {
LABEL_5:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v65, v6);
      v8 = v7;
    }
LABEL_6:
    if (!v8)
    {
      v62[0] = (uint64_t)"FuncletPadInst must not be nested within itself";
      v63 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)v62, &v64);
      goto LABEL_142;
    }
    v9 = *((_QWORD *)v6 + 1);
    if (!v9)
    {
LABEL_2:
      LODWORD(v5) = v72;
      continue;
    }
    v10 = 0;
    v11 = v6;
    while (1)
    {
      v16 = *(_QWORD *)(v9 + 24);
      v61 = (unsigned __int8 *)v16;
      v17 = *(unsigned __int8 *)(v16 + 16);
      if (v16 && v17 == 36)
      {
        if ((*(_WORD *)(v16 + 18) & 1) == 0)
          goto LABEL_50;
        v18 = *(llvm::BasicBlock **)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
        if (!v18)
          goto LABEL_50;
      }
      else if (v16 && v17 == 38)
      {
        if ((*(_WORD *)(v16 + 18) & 1) == 0)
          goto LABEL_18;
        v19 = *(_DWORD *)(v16 + 20);
        if ((v19 & 0x40000000) != 0)
        {
          v18 = *(llvm::BasicBlock **)(*(_QWORD *)(v16 - 8) + 32);
          if (!v18)
            goto LABEL_50;
        }
        else
        {
          v18 = *(llvm::BasicBlock **)(v16 - 32 * (v19 & 0x7FFFFFF) + 32);
          if (!v18)
            goto LABEL_50;
        }
      }
      else
      {
        if (!v16 || v17 != 33)
        {
          if (v17 != 84)
          {
            if (v16 && v17 == 79)
            {
              v26 = v72;
              if (v72 >= (unint64_t)v73)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v72 + 1, 8);
                v26 = v72;
              }
              v71[v26] = v16;
              ++v72;
            }
            else if (v17 != 37)
            {
              v62[0] = (uint64_t)"Bogus funclet pad use";
              v63 = 259;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)v62, (llvm::raw_ostream **)&v61);
              goto LABEL_142;
            }
          }
          goto LABEL_18;
        }
        v18 = *(llvm::BasicBlock **)(v16 - 64);
        if (!v18)
        {
LABEL_50:
          DesiredBytecodeVersion = (llvm::ConstantTokenNone *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
          v23 = llvm::ConstantTokenNone::get(DesiredBytecodeVersion, v28);
          goto LABEL_51;
        }
      }
      FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(v18);
      v21 = FirstNonPHI[16];
      if ((v21 - 38) <= 0x38 && ((1 << (v21 - 38)) & 0x100060000000001) != 0)
      {
        v23 = FirstNonPHI;
        if ((v21 - 81) >= 0xFFFFFFFE)
        {
          v25 = (mlir::BytecodeWriterConfig *)*((_QWORD *)FirstNonPHI - 4);
          if (v25 != v11)
            break;
          goto LABEL_18;
        }
        v24 = *((_DWORD *)FirstNonPHI + 5);
        if ((v24 & 0x40000000) == 0)
        {
          v25 = *(mlir::BytecodeWriterConfig **)&FirstNonPHI[-32 * (v24 & 0x7FFFFFF)];
          if (v25 != v11)
            break;
          goto LABEL_18;
        }
        v25 = (mlir::BytecodeWriterConfig *)**((_QWORD **)FirstNonPHI - 1);
        if (v25 != v11)
          break;
      }
LABEL_18:
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        goto LABEL_85;
    }
    while (v11 != a2)
    {
      if (v11
        && ((v30 = *((unsigned __int8 *)v11 + 16), v30 >= 0x1C) ? (v31 = v30 - 81 >= 0xFFFFFFFE) : (v31 = 0), v31))
      {
        v11 = (mlir::BytecodeWriterConfig *)*((_QWORD *)v11 - 4);
        if (v11 == v25)
          goto LABEL_82;
      }
      else
      {
        v32 = *((_DWORD *)v11 + 5);
        if ((v32 & 0x40000000) != 0)
        {
          v11 = (mlir::BytecodeWriterConfig *)**((_QWORD **)v11 - 1);
          if (v11 == v25)
            goto LABEL_82;
        }
        else
        {
          v11 = (mlir::BytecodeWriterConfig *)*((_QWORD *)v11 - 4 * (v32 & 0x7FFFFFF));
          if (v11 == v25)
            goto LABEL_82;
        }
      }
      if (*((_BYTE *)v11 + 16) == 20)
      {
        v25 = v10;
        goto LABEL_82;
      }
    }
LABEL_51:
    if (!v70)
    {
      v70 = v61;
      if (*((_BYTE *)a2 + 16) != 79)
        goto LABEL_81;
      v29 = *((unsigned __int8 *)v23 + 16);
      if (v29 == 20)
        goto LABEL_81;
      if (v29 < 0x1C || v29 - 81 < 0xFFFFFFFE)
      {
        v33 = *((_DWORD *)v23 + 5);
        if ((v33 & 0x40000000) != 0)
        {
          if (*(_QWORD *)*(v23 - 1) == *((_QWORD *)a2 - 4))
          {
LABEL_80:
            v62[0] = (uint64_t)a2;
            *(_QWORD *)llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Instruction *>,0u>>::operator[](v59, v62) = v61;
          }
        }
        else if (v23[-4 * (v33 & 0x7FFFFFF)] == *((_QWORD *)a2 - 4))
        {
          goto LABEL_80;
        }
      }
      else if (*(v23 - 4) == *((_QWORD *)a2 - 4))
      {
        goto LABEL_80;
      }
LABEL_81:
      v25 = a2;
      v4 = v23;
      goto LABEL_82;
    }
    v25 = a2;
    if (v23 != v4)
    {
      v62[0] = (uint64_t)"Unwind edges out of a funclet pad must have the same unwind dest";
      v63 = 259;
      v60 = a2;
      v45 = *(llvm::raw_ostream **)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_140;
      llvm::Twine::print((llvm::Twine *)v62, *(llvm::raw_ostream **)a1);
      v46 = (_BYTE *)*((_QWORD *)v45 + 4);
      if ((unint64_t)v46 >= *((_QWORD *)v45 + 3))
      {
        llvm::raw_ostream::write(v45, 10);
        v51 = *(llvm::raw_ostream **)a1;
        *((_BYTE *)a1 + 192) = 1;
        if (!v51)
          goto LABEL_142;
      }
      else
      {
        *((_QWORD *)v45 + 4) = v46 + 1;
        *v46 = 10;
        v47 = *(llvm::raw_ostream **)a1;
        *((_BYTE *)a1 + 192) = 1;
        if (!v47)
          goto LABEL_142;
      }
      llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Value *,llvm::Value *>((_anonymous_namespace_::TypePrinting **)a1, (unsigned __int8 **)&v60, &v61, (llvm::raw_ostream **)&v70);
      goto LABEL_142;
    }
LABEL_82:
    if (v6 == a2)
    {
      v11 = a2;
      v10 = v25;
      goto LABEL_18;
    }
    v10 = v25;
LABEL_85:
    if (!v10)
      goto LABEL_2;
    v5 = v72;
    if (v6 != v10)
    {
      if (v72)
      {
        do
        {
          v34 = v71[v5 - 1];
          v35 = *(unsigned __int8 *)(v34 + 16);
          if (v34)
            v36 = v35 >= 0x1C;
          else
            v36 = 0;
          if (v36 && v35 - 81 >= 0xFFFFFFFE)
          {
            v39 = (uint64_t *)(v34 - 32);
          }
          else
          {
            v38 = *(_DWORD *)(v34 + 20);
            if ((v38 & 0x40000000) != 0)
              v39 = *(uint64_t **)(v34 - 8);
            else
              v39 = (uint64_t *)(v34 - 32 * (v38 & 0x7FFFFFF));
          }
          v40 = (mlir::BytecodeWriterConfig *)*v39;
          while (v6 != v40)
          {
            if (v6
              && ((v42 = *((unsigned __int8 *)v6 + 16), v42 >= 0x1C) ? (v43 = v42 - 81 >= 0xFFFFFFFE) : (v43 = 0), v43))
            {
              v41 = (mlir::BytecodeWriterConfig **)((char *)v6 - 32);
            }
            else
            {
              v44 = *((_DWORD *)v6 + 5);
              if ((v44 & 0x40000000) != 0)
                v41 = (mlir::BytecodeWriterConfig **)*((_QWORD *)v6 - 1);
              else
                v41 = (mlir::BytecodeWriterConfig **)((char *)v6 - 32 * (v44 & 0x7FFFFFF));
            }
            v6 = *v41;
            if (*v41 == v10)
              goto LABEL_3;
          }
          v6 = v40;
          v72 = --v5;
        }
        while ((_DWORD)v5);
      }
      goto LABEL_121;
    }
LABEL_3:
    ;
  }
  while ((_DWORD)v5);
  if (!v4)
    goto LABEL_141;
LABEL_121:
  v48 = *((_QWORD *)a2 - 4);
  if (*(_BYTE *)(v48 + 16) != 38)
    v48 = 0;
  v64 = (llvm::raw_ostream *)v48;
  if (v48
    && ((*(_WORD *)(v48 + 18) & 1) == 0
     || ((v49 = *(_DWORD *)(v48 + 20), (v49 & 0x40000000) != 0)
       ? (v50 = *(_QWORD *)(v48 - 8))
       : (v50 = v48 - 32 * (v49 & 0x7FFFFFF)),
         (v52 = *(llvm::BasicBlock **)(v50 + 32)) == 0)
      ? (v54 = (llvm::ConstantTokenNone *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2),
         v53 = llvm::ConstantTokenNone::get(v54, v55))
      : (v53 = llvm::BasicBlock::getFirstNonPHI(v52)),
        v53 != v4))
  {
    v61 = (unsigned __int8 *)a2;
    v62[0] = (uint64_t)"Unwind edges out of a catch must have the same unwind dest as the parent catchswitch";
    v63 = 259;
    v56 = *(llvm::raw_ostream **)a1;
    if (*(_QWORD *)a1)
    {
      llvm::Twine::print((llvm::Twine *)v62, *(llvm::raw_ostream **)a1);
      v57 = (_BYTE *)*((_QWORD *)v56 + 4);
      if ((unint64_t)v57 >= *((_QWORD *)v56 + 3))
      {
        llvm::raw_ostream::write(v56, 10);
      }
      else
      {
        *((_QWORD *)v56 + 4) = v57 + 1;
        *v57 = 10;
      }
      v58 = *(llvm::raw_ostream **)a1;
      *((_BYTE *)a1 + 192) = 1;
      if (v58)
        llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Value *,llvm::Value *>((_anonymous_namespace_::TypePrinting **)a1, &v61, &v70, &v64);
    }
    else
    {
LABEL_140:
      *((_BYTE *)a1 + 192) = 1;
    }
  }
  else
  {
LABEL_141:
  }
LABEL_142:
  if (v66 != v65)
    free(v66);
  if (v71 != v74)
    free(v71);
}

uint64_t **getParameterABIAttributes(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t Attribute;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **result;
  __int16 ParamAlignment;
  uint64_t ParamAttrs;
  uint64_t v19;

  v19 = a4;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  Attribute = llvm::AttributeSet::getAttribute(&ParamAttrs, 77);
  if (Attribute)
    llvm::AttrBuilder::addAttribute(a1, Attribute);
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  v7 = llvm::AttributeSet::getAttribute(&ParamAttrs, 73);
  if (v7)
    llvm::AttrBuilder::addAttribute(a1, v7);
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  v8 = llvm::AttributeSet::getAttribute(&ParamAttrs, 75);
  if (v8)
    llvm::AttrBuilder::addAttribute(a1, v8);
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  v9 = llvm::AttributeSet::getAttribute(&ParamAttrs, 12);
  if (v9)
    llvm::AttrBuilder::addAttribute(a1, v9);
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  v10 = llvm::AttributeSet::getAttribute(&ParamAttrs, 85);
  if (v10)
    llvm::AttrBuilder::addAttribute(a1, v10);
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  v11 = llvm::AttributeSet::getAttribute(&ParamAttrs, 67);
  if (v11)
    llvm::AttrBuilder::addAttribute(a1, v11);
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  v12 = llvm::AttributeSet::getAttribute(&ParamAttrs, 65);
  if (v12)
    llvm::AttrBuilder::addAttribute(a1, v12);
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  v13 = llvm::AttributeSet::getAttribute(&ParamAttrs, 66);
  if (v13)
    llvm::AttrBuilder::addAttribute(a1, v13);
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  v14 = llvm::AttributeSet::getAttribute(&ParamAttrs, 76);
  if (v14)
    llvm::AttrBuilder::addAttribute(a1, v14);
  ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v19, a3);
  v15 = llvm::AttributeSet::getAttribute(&ParamAttrs, 72);
  if (v15)
    llvm::AttrBuilder::addAttribute(a1, v15);
  result = (uint64_t **)llvm::AttributeList::hasAttributeAtIndex(&v19, a3 + 1, 78);
  if ((_DWORD)result)
  {
    if ((llvm::AttributeList::hasAttributeAtIndex(&v19, a3 + 1, 73) & 1) != 0
      || (result = (uint64_t **)llvm::AttributeList::hasAttributeAtIndex(&v19, a3 + 1, 72), (_DWORD)result))
    {
      ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)&v19, a3);
      return llvm::AttrBuilder::addAlignmentAttr((uint64_t **)a1, ParamAlignment);
    }
  }
  return result;
}

void *`anonymous namespace'::Verifier::verifyTailCCMustTailAttrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *result;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  result = (void *)llvm::AttrBuilder::contains(a2, 75);
  if ((_DWORD)result)
  {
    v11 = "inalloca attribute not allowed in ";
    v12 = a3;
    v13 = a4;
    v14 = 1283;
    v9 = *(llvm::raw_ostream **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_18;
LABEL_15:
    result = llvm::Twine::print((llvm::Twine *)&v11, v9);
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
    {
      result = llvm::raw_ostream::write(v9, 10);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 10;
    }
    goto LABEL_18;
  }
  result = (void *)llvm::AttrBuilder::contains(a2, 12);
  if ((_DWORD)result)
  {
    v11 = "inreg attribute not allowed in ";
    v12 = a3;
    v13 = a4;
    v14 = 1283;
    v9 = *(llvm::raw_ostream **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_18;
    goto LABEL_15;
  }
  result = (void *)llvm::AttrBuilder::contains(a2, 66);
  if ((_DWORD)result)
  {
    v11 = "swifterror attribute not allowed in ";
    v12 = a3;
    v13 = a4;
    v14 = 1283;
    v9 = *(llvm::raw_ostream **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_18;
    goto LABEL_15;
  }
  result = (void *)llvm::AttrBuilder::contains(a2, 76);
  if ((_DWORD)result)
  {
    v11 = "preallocated attribute not allowed in ";
    v12 = a3;
    v13 = a4;
    v14 = 1283;
    v9 = *(llvm::raw_ostream **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_18;
    goto LABEL_15;
  }
  result = (void *)llvm::AttrBuilder::contains(a2, 72);
  if (!(_DWORD)result)
    return result;
  v11 = "byref attribute not allowed in ";
  v12 = a3;
  v13 = a4;
  v14 = 1283;
  v9 = *(llvm::raw_ostream **)a1;
  if (*(_QWORD *)a1)
    goto LABEL_15;
LABEL_18:
  *(_BYTE *)(a1 + 192) = 1;
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::Write<llvm::Instruction *>(llvm::raw_ostream *result, llvm::raw_ostream **a2, uint64_t a3)
{
  llvm::raw_ostream **v4;
  llvm::ModuleSlotTracker *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  if (a3)
  {
    v4 = (llvm::raw_ostream **)result;
    v5 = (llvm::raw_ostream *)((char *)result + 16);
    v6 = 8 * a3;
    do
    {
      result = *a2;
      if (*a2)
      {
        v7 = *v4;
        if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
          llvm::Value::print(result, v7, v5, 0);
        llvm::Value::printAsOperand((Type **)result, v7, 1, (_anonymous_namespace_::TypePrinting **)v5);
        result = *v4;
        v8 = (_BYTE *)*((_QWORD *)*v4 + 4);
        if ((unint64_t)v8 < *((_QWORD *)*v4 + 3))
        {
          *((_QWORD *)result + 4) = v8 + 1;
          *v8 = 10;
        }
        else
        {
          result = llvm::raw_ostream::write(result, 10);
        }
      }
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  BOOL v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int64_t v156;
  int64_t v157;
  int64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v121 = *(a2 - 1);
        v122 = *v9;
        v123 = *(_QWORD *)(*(_QWORD *)(v121 - 32 * (*(_DWORD *)(v121 + 20) & 0x7FFFFFF)) + 24);
        v126 = *(_QWORD *)(v123 - 16);
        v124 = v123 - 16;
        v125 = v126;
        if ((v126 & 2) != 0)
          v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v121 - 32 * (*(_DWORD *)(v121 + 20) & 0x7FFFFFF)) + 24) - 32);
        else
          v127 = v124 - 8 * ((v125 >> 2) & 0xF);
        v242 = *(_QWORD *)(*(_QWORD *)(v122 - 32 * (*(_DWORD *)(v122 + 20) & 0x7FFFFFF)) + 24);
        v245 = *(_QWORD *)(v242 - 16);
        v243 = v242 - 16;
        v244 = v245;
        if ((v245 & 2) != 0)
        {
          if (v127 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v122 - 32 * (*(_DWORD *)(v122 + 20) & 0x7FFFFFF)) + 24)
                                 - 32))
            return result;
        }
        else if (v127 >= v243 - 8 * ((v244 >> 2) & 0xF))
        {
          return result;
        }
        *v9 = v121;
        *(a2 - 1) = v122;
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
      default:
        if (v10 <= 191)
        {
          v128 = v9 + 1;
          v130 = v9 == a2 || v128 == a2;
          if ((a4 & 1) != 0)
          {
            if (v130)
              return result;
            v131 = 0;
            v132 = v9;
            while (1)
            {
              v134 = v128;
              v135 = v132[1];
              v136 = *(_QWORD *)(*(_QWORD *)(v135 - 32 * (*(_DWORD *)(v135 + 20) & 0x7FFFFFF)) + 24);
              v139 = *(_QWORD *)(v136 - 16);
              v137 = v136 - 16;
              v138 = v139;
              if ((v139 & 2) != 0)
                v140 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v135 - 32 * (*(_DWORD *)(v135 + 20) & 0x7FFFFFF)) + 24)
                                 - 32);
              else
                v140 = v137 - 8 * ((v138 >> 2) & 0xF);
              v141 = *v132;
              v142 = *(_QWORD *)(*(_QWORD *)(v141 - 32 * (*(_DWORD *)(v141 + 20) & 0x7FFFFFF)) + 24);
              v145 = *(_QWORD *)(v142 - 16);
              v143 = v142 - 16;
              v144 = v145;
              if ((v145 & 2) != 0)
              {
                if (v140 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v141 - 32 * (*(_DWORD *)(v141 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32))
                  goto LABEL_145;
              }
              else if (v140 >= v143 - 8 * ((v144 >> 2) & 0xF))
              {
                goto LABEL_145;
              }
              v146 = v131;
              do
              {
                while (1)
                {
                  *(uint64_t *)((char *)v9 + v146 + 8) = v141;
                  if (!v146)
                  {
                    v133 = v9;
                    goto LABEL_144;
                  }
                  v147 = *(_QWORD *)(*(_QWORD *)(v135 - 32 * (*(_DWORD *)(v135 + 20) & 0x7FFFFFF)) + 24);
                  v150 = *(_QWORD *)(v147 - 16);
                  v148 = v147 - 16;
                  v149 = v150;
                  v151 = (v150 & 2) != 0
                       ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v135 - 32 * (*(_DWORD *)(v135 + 20) & 0x7FFFFFF)) + 24)
                                   - 32)
                       : v148 - 8 * ((v149 >> 2) & 0xF);
                  v141 = *(uint64_t *)((char *)v9 + v146 - 8);
                  v152 = *(_QWORD *)(*(_QWORD *)(v141 - 32 * (*(_DWORD *)(v141 + 20) & 0x7FFFFFF)) + 24);
                  v155 = *(_QWORD *)(v152 - 16);
                  v153 = v152 - 16;
                  v154 = v155;
                  if ((v155 & 2) != 0)
                    break;
                  v146 -= 8;
                  if (v151 >= v153 - 8 * ((v154 >> 2) & 0xF))
                    goto LABEL_161;
                }
                v146 -= 8;
              }
              while (v151 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v141 - 32 * (*(_DWORD *)(v141 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32));
LABEL_161:
              v133 = (uint64_t *)((char *)v9 + v146 + 8);
LABEL_144:
              *v133 = v135;
LABEL_145:
              v128 = v134 + 1;
              v131 += 8;
              v132 = v134;
              if (v134 + 1 == a2)
                return result;
            }
          }
          if (v130)
            return result;
          while (1)
          {
            v246 = v128;
            v247 = v7[1];
            v248 = *(_QWORD *)(*(_QWORD *)(v247 - 32 * (*(_DWORD *)(v247 + 20) & 0x7FFFFFF)) + 24);
            v251 = *(_QWORD *)(v248 - 16);
            v249 = v248 - 16;
            v250 = v251;
            if ((v251 & 2) != 0)
              v252 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v247 - 32 * (*(_DWORD *)(v247 + 20) & 0x7FFFFFF)) + 24)
                               - 32);
            else
              v252 = v249 - 8 * ((v250 >> 2) & 0xF);
            v253 = *v7;
            v254 = *(_QWORD *)(*(_QWORD *)(*v7 - 32 * (*(_DWORD *)(*v7 + 20) & 0x7FFFFFF)) + 24);
            v257 = *(_QWORD *)(v254 - 16);
            v255 = v254 - 16;
            v256 = v257;
            if ((v257 & 2) != 0)
            {
              if (v252 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v7 - 32 * (*(_DWORD *)(*v7 + 20) & 0x7FFFFFF)) + 24)
                                     - 32))
                goto LABEL_245;
            }
            else if (v252 >= v255 - 8 * ((v256 >> 2) & 0xF))
            {
              goto LABEL_245;
            }
            v258 = v246;
            do
            {
              while (1)
              {
                *v258 = v253;
                v259 = *(_QWORD *)(*(_QWORD *)(v247 - 32 * (*(_DWORD *)(v247 + 20) & 0x7FFFFFF)) + 24);
                v262 = *(_QWORD *)(v259 - 16);
                v260 = v259 - 16;
                v261 = v262;
                v263 = (v262 & 2) != 0
                     ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v247 - 32 * (*(_DWORD *)(v247 + 20) & 0x7FFFFFF)) + 24)
                                 - 32)
                     : v260 - 8 * ((v261 >> 2) & 0xF);
                v253 = *(v258 - 2);
                v264 = *(_QWORD *)(*(_QWORD *)(v253 - 32 * (*(_DWORD *)(v253 + 20) & 0x7FFFFFF)) + 24);
                v267 = *(_QWORD *)(v264 - 16);
                v265 = v264 - 16;
                v266 = v267;
                if ((v267 & 2) != 0)
                  break;
                --v258;
                if (v263 >= v265 - 8 * ((v266 >> 2) & 0xF))
                  goto LABEL_244;
              }
              --v258;
            }
            while (v263 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v253 - 32 * (*(_DWORD *)(v253 + 20) & 0x7FFFFFF)) + 24)
                                     - 32));
LABEL_244:
            *v258 = v247;
LABEL_245:
            v128 = v246 + 1;
            v7 = v246;
            if (v246 + 1 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v9 == a2)
            return result;
          v156 = (v11 - 2) >> 1;
          v157 = v156;
          while (1)
          {
            v158 = v157;
            if (v156 >= v157)
            {
              v159 = (2 * v157) | 1;
              v160 = &v9[v159];
              if (2 * v158 + 2 < (uint64_t)v11)
              {
                v161 = *(_QWORD *)(*(_QWORD *)(*v160 - 32 * (*(_DWORD *)(*v160 + 20) & 0x7FFFFFF)) + 24);
                v164 = *(_QWORD *)(v161 - 16);
                v163 = v161 - 16;
                v162 = v164;
                if ((v164 & 2) != 0)
                  v165 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v160 - 32 * (*(_DWORD *)(*v160 + 20) & 0x7FFFFFF)) + 24)
                                   - 32);
                else
                  v165 = v163 - 8 * ((v162 >> 2) & 0xF);
                v166 = v160[1];
                ++v160;
                v167 = *(_QWORD *)(*(_QWORD *)(v166 - 32 * (*(_DWORD *)(v166 + 20) & 0x7FFFFFF)) + 24);
                v168 = *(_QWORD *)(v167 - 16);
                if ((v168 & 2) != 0)
                  v169 = *(_QWORD *)(v167 - 32);
                else
                  v169 = v167 - 16 - 8 * ((v168 >> 2) & 0xF);
                if (v165 < v169)
                  v159 = 2 * v158 + 2;
                else
                  v160 = &v9[v159];
              }
              v170 = *v160;
              v171 = *(_QWORD *)(*(_QWORD *)(*v160 - 32 * (*(_DWORD *)(*v160 + 20) & 0x7FFFFFF)) + 24);
              v174 = *(_QWORD *)(v171 - 16);
              v172 = v171 - 16;
              v173 = v174;
              if ((v174 & 2) != 0)
                v175 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v160 - 32 * (*(_DWORD *)(*v160 + 20) & 0x7FFFFFF)) + 24)
                                 - 32);
              else
                v175 = v172 - 8 * ((v173 >> 2) & 0xF);
              v176 = &v9[v158];
              v177 = *v176;
              v178 = *(_QWORD *)(*(_QWORD *)(*v176 - 32 * (*(_DWORD *)(*v176 + 20) & 0x7FFFFFF)) + 24);
              v181 = *(_QWORD *)(v178 - 16);
              v179 = v178 - 16;
              v180 = v181;
              if ((v181 & 2) != 0)
              {
                result = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*v176 - 32 * (*(_DWORD *)(*v176 + 20) & 0x7FFFFFF))
                                                 + 24)
                                     - 32);
                if (v175 >= (unint64_t)result)
                {
LABEL_186:
                  while (1)
                  {
                    v182 = v160;
                    *v176 = v170;
                    if (v156 < v159)
                      break;
                    v183 = (2 * v159) | 1;
                    v160 = &v9[v183];
                    if (2 * v159 + 2 >= (uint64_t)v11)
                    {
                      v159 = (2 * v159) | 1;
                    }
                    else
                    {
                      v184 = *(_QWORD *)(*(_QWORD *)(*v160 - 32 * (*(_DWORD *)(*v160 + 20) & 0x7FFFFFF)) + 24);
                      v187 = *(_QWORD *)(v184 - 16);
                      v185 = v184 - 16;
                      v186 = v187;
                      if ((v187 & 2) != 0)
                        v188 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v160 - 32 * (*(_DWORD *)(*v160 + 20) & 0x7FFFFFF))
                                                     + 24)
                                         - 32);
                      else
                        v188 = v185 - 8 * ((v186 >> 2) & 0xF);
                      v189 = v160[1];
                      ++v160;
                      v190 = *(_QWORD *)(*(_QWORD *)(v189 - 32 * (*(_DWORD *)(v189 + 20) & 0x7FFFFFF)) + 24);
                      v191 = *(_QWORD *)(v190 - 16);
                      if ((v191 & 2) != 0)
                        v192 = *(_QWORD *)(v190 - 32);
                      else
                        v192 = v190 - 16 - 8 * ((v191 >> 2) & 0xF);
                      if (v188 < v192)
                      {
                        v159 = 2 * v159 + 2;
                      }
                      else
                      {
                        v160 = &v9[v183];
                        v159 = (2 * v159) | 1;
                      }
                    }
                    v170 = *v160;
                    v193 = *(_QWORD *)(*(_QWORD *)(*v160 - 32 * (*(_DWORD *)(*v160 + 20) & 0x7FFFFFF)) + 24);
                    v196 = *(_QWORD *)(v193 - 16);
                    v194 = v193 - 16;
                    v195 = v196;
                    if ((v196 & 2) != 0)
                      result = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*v160 - 32
                                                                           * (*(_DWORD *)(*v160 + 20) & 0x7FFFFFF))
                                                       + 24)
                                           - 32);
                    else
                      result = (uint64_t *)(v194 - 8 * ((v195 >> 2) & 0xF));
                    v197 = *(_QWORD *)(*(_QWORD *)(v177 - 32 * (*(_DWORD *)(v177 + 20) & 0x7FFFFFF)) + 24);
                    v200 = *(_QWORD *)(v197 - 16);
                    v198 = v197 - 16;
                    v199 = v200;
                    if ((v200 & 2) != 0)
                    {
                      v176 = v182;
                      if ((unint64_t)result < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v177
                                                                                        - 32
                                                                                        * (*(_DWORD *)(v177 + 20) & 0x7FFFFFF))
                                                                            + 24)
                                                                - 32))
                        break;
                    }
                    else
                    {
                      v176 = v182;
                      if ((unint64_t)result < v198 - 8 * ((v199 >> 2) & 0xF))
                        break;
                    }
                  }
                  *v182 = v177;
                }
              }
              else
              {
                result = (uint64_t *)(v179 - 8 * ((v180 >> 2) & 0xF));
                if (v175 >= (unint64_t)result)
                  goto LABEL_186;
              }
            }
            v157 = v158 - 1;
            if (!v158)
            {
              v201 = (unint64_t)v10 >> 3;
              while (1)
              {
                v203 = 0;
                v204 = *v9;
                v205 = v9;
                do
                {
                  v207 = &v205[v203 + 1];
                  v208 = (2 * v203) | 1;
                  v209 = 2 * v203 + 2;
                  if (v209 < v201)
                  {
                    v210 = *(_QWORD *)(*(_QWORD *)(*v207 - 32 * (*(_DWORD *)(*v207 + 20) & 0x7FFFFFF)) + 24);
                    v213 = *(_QWORD *)(v210 - 16);
                    v211 = v210 - 16;
                    v212 = v213;
                    v214 = (v213 & 2) != 0
                         ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v207 - 32 * (*(_DWORD *)(*v207 + 20) & 0x7FFFFFF))
                                                 + 24)
                                     - 32)
                         : v211 - 8 * ((v212 >> 2) & 0xF);
                    v215 = *(_QWORD *)(*(_QWORD *)(v207[1] - 32 * (*(_DWORD *)(v207[1] + 20) & 0x7FFFFFF)) + 24);
                    v217 = *(_QWORD *)(v215 - 16);
                    result = (uint64_t *)(v215 - 16);
                    v216 = v217;
                    v206 = (v217 & 2) != 0
                         ? *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v207[1] - 32
                                                                         * (*(_DWORD *)(v207[1] + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32)
                         : &result[-((v216 >> 2) & 0xF)];
                    if (v214 < (unint64_t)v206)
                    {
                      ++v207;
                      v208 = v209;
                    }
                  }
                  *v205 = *v207;
                  v205 = v207;
                  v203 = v208;
                }
                while (v208 <= (uint64_t)((unint64_t)(v201 - 2) >> 1));
                if (v207 == --a2)
                {
                  *v207 = v204;
                }
                else
                {
                  *v207 = *a2;
                  *a2 = v204;
                  v218 = (char *)v207 - (char *)v9 + 8;
                  if (v218 >= 9)
                  {
                    v219 = (((unint64_t)v218 >> 3) - 2) >> 1;
                    v220 = &v9[v219];
                    v221 = *v220;
                    v222 = *(_QWORD *)(*(_QWORD *)(*v220 - 32 * (*(_DWORD *)(*v220 + 20) & 0x7FFFFFF)) + 24);
                    v225 = *(_QWORD *)(v222 - 16);
                    v223 = v222 - 16;
                    v224 = v225;
                    if ((v225 & 2) != 0)
                      v226 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v220 - 32 * (*(_DWORD *)(*v220 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32);
                    else
                      v226 = v223 - 8 * ((v224 >> 2) & 0xF);
                    v227 = *v207;
                    v228 = *(_QWORD *)(*(_QWORD *)(*v207 - 32 * (*(_DWORD *)(*v207 + 20) & 0x7FFFFFF)) + 24);
                    v231 = *(_QWORD *)(v228 - 16);
                    v229 = v228 - 16;
                    v230 = v231;
                    if ((v231 & 2) != 0)
                    {
                      if (v226 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v207
                                                                    - 32 * (*(_DWORD *)(*v207 + 20) & 0x7FFFFFF))
                                                        + 24)
                                            - 32))
                      {
LABEL_229:
                        while (1)
                        {
                          v232 = v220;
                          *v207 = v221;
                          if (!v219)
                            break;
                          v219 = (v219 - 1) >> 1;
                          v220 = &v9[v219];
                          v221 = *v220;
                          v233 = *(_QWORD *)(*(_QWORD *)(*v220 - 32 * (*(_DWORD *)(*v220 + 20) & 0x7FFFFFF)) + 24);
                          v236 = *(_QWORD *)(v233 - 16);
                          v234 = v233 - 16;
                          v235 = v236;
                          if ((v236 & 2) != 0)
                            v237 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v220
                                                                     - 32 * (*(_DWORD *)(*v220 + 20) & 0x7FFFFFF))
                                                         + 24)
                                             - 32);
                          else
                            v237 = v234 - 8 * ((v235 >> 2) & 0xF);
                          v238 = *(_QWORD *)(*(_QWORD *)(v227 - 32 * (*(_DWORD *)(v227 + 20) & 0x7FFFFFF)) + 24);
                          v241 = *(_QWORD *)(v238 - 16);
                          v239 = v238 - 16;
                          v240 = v241;
                          if ((v241 & 2) != 0)
                          {
                            v207 = v232;
                            if (v237 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v227
                                                                           - 32 * (*(_DWORD *)(v227 + 20) & 0x7FFFFFF))
                                                               + 24)
                                                   - 32))
                              break;
                          }
                          else
                          {
                            v207 = v232;
                            if (v237 >= v239 - 8 * ((v240 >> 2) & 0xF))
                              break;
                          }
                        }
                        *v232 = v227;
                      }
                    }
                    else if (v226 < v229 - 8 * ((v230 >> 2) & 0xF))
                    {
                      goto LABEL_229;
                    }
                  }
                }
                if (v201-- <= 2)
                  return result;
              }
            }
          }
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 >= 0x401)
        {
          v14 = &v7[v12];
          v15 = *v7;
          *v7 = *v14;
          *v14 = v15;
          --a3;
          v16 = *v7;
          if ((a4 & 1) != 0)
            goto LABEL_11;
LABEL_8:
          v17 = *(_QWORD *)(*(_QWORD *)(*(v7 - 1) - 32 * (*(_DWORD *)(*(v7 - 1) + 20) & 0x7FFFFFF)) + 24);
          v20 = *(_QWORD *)(v17 - 16);
          v18 = v17 - 16;
          v19 = v20;
          if ((v20 & 2) != 0)
            v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(v7 - 1) - 32 * (*(_DWORD *)(*(v7 - 1) + 20) & 0x7FFFFFF))
                                        + 24)
                            - 32);
          else
            v21 = v18 - 8 * ((v19 >> 2) & 0xF);
          v23 = *(_DWORD *)(v16 + 20) & 0x7FFFFFF;
          v22 = -v23;
          v24 = *(_QWORD *)(*(_QWORD *)(v16 - 32 * v23) + 24);
          v26 = v24 - 16;
          v25 = *(_QWORD *)(v24 - 16);
          if ((v25 & 2) != 0)
          {
            v27 = *(_QWORD *)(v24 - 32);
            if (v21 < v27)
              goto LABEL_20;
          }
          else
          {
            v27 = v26 - 8 * ((v25 >> 2) & 0xF);
            if (v21 < v27)
              goto LABEL_20;
          }
          v28 = *(_QWORD *)(*(_QWORD *)(*v8 - 32 * (*(_DWORD *)(*v8 + 20) & 0x7FFFFFF)) + 24);
          v31 = *(_QWORD *)(v28 - 16);
          v29 = v28 - 16;
          v30 = v31;
          if ((v31 & 2) != 0)
          {
            if (v27 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v8 - 32 * (*(_DWORD *)(*v8 + 20) & 0x7FFFFFF)) + 24)
                                  - 32))
            {
LABEL_17:
              if ((v25 & 2) != 0)
              {
                v87 = v7 + 1;
                while (1)
                {
                  v9 = v87;
                  if (v87 >= a2)
                    break;
                  v88 = *(_QWORD *)(*(_QWORD *)(*v87 - 32 * (*(_DWORD *)(*v87 + 20) & 0x7FFFFFF)) + 24);
                  v91 = *(_QWORD *)(v88 - 16);
                  v89 = v88 - 16;
                  v90 = v91;
                  if ((v91 & 2) != 0)
                  {
                    v92 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v87 - 32 * (*(_DWORD *)(*v87 + 20) & 0x7FFFFFF)) + 24)
                                    - 32);
                    ++v87;
                    if (*(_QWORD *)(v24 - 32) < v92)
                      goto LABEL_96;
                  }
                  else
                  {
                    ++v87;
                    if (*(_QWORD *)(v24 - 32) < v89 - 8 * ((v90 >> 2) & 0xF))
                      goto LABEL_96;
                  }
                }
              }
              else
              {
                v32 = v26 - 8 * ((v25 >> 2) & 0xF);
                v33 = v7 + 1;
                while (1)
                {
                  v9 = v33;
                  if (v33 >= a2)
                    break;
                  v78 = *(_QWORD *)(*(_QWORD *)(*v33 - 32 * (*(_DWORD *)(*v33 + 20) & 0x7FFFFFF)) + 24);
                  v81 = *(_QWORD *)(v78 - 16);
                  v79 = v78 - 16;
                  v80 = v81;
                  if ((v81 & 2) != 0)
                  {
                    v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v33 - 32 * (*(_DWORD *)(*v33 + 20) & 0x7FFFFFF)) + 24)
                                    - 32);
                    ++v33;
                    if (v32 < v82)
                      goto LABEL_96;
                  }
                  else
                  {
                    ++v33;
                    if (v32 < v79 - 8 * ((v80 >> 2) & 0xF))
                      goto LABEL_96;
                  }
                }
              }
              goto LABEL_96;
            }
          }
          else if (v27 >= v29 - 8 * ((v30 >> 2) & 0xF))
          {
            goto LABEL_17;
          }
          if ((v25 & 2) != 0)
          {
            v93 = *(_QWORD *)(v24 - 32);
            v9 = v7;
            do
            {
              while (1)
              {
                v94 = v9[1];
                ++v9;
                v95 = *(_QWORD *)(*(_QWORD *)(v94 - 32 * (*(_DWORD *)(v94 + 20) & 0x7FFFFFF)) + 24);
                v96 = *(_QWORD *)(v95 - 16);
                if ((v96 & 2) != 0)
                  break;
                if (v93 < v95 - 16 - 8 * ((v96 >> 2) & 0xF))
                  goto LABEL_96;
              }
            }
            while (v93 >= *(_QWORD *)(v95 - 32));
          }
          else
          {
            v83 = v26 - 8 * ((v25 >> 2) & 0xF);
            v9 = v7;
            do
            {
              while (1)
              {
                v84 = v9[1];
                ++v9;
                v85 = *(_QWORD *)(*(_QWORD *)(v84 - 32 * (*(_DWORD *)(v84 + 20) & 0x7FFFFFF)) + 24);
                v86 = *(_QWORD *)(v85 - 16);
                if ((v86 & 2) != 0)
                  break;
                if (v83 < v85 - 16 - 8 * ((v86 >> 2) & 0xF))
                  goto LABEL_96;
              }
            }
            while (v83 >= *(_QWORD *)(v85 - 32));
          }
LABEL_96:
          v97 = a2;
          if (v9 < a2)
          {
            v98 = v26 - 8 * ((v25 >> 2) & 0xF);
            v97 = a2;
            do
            {
              while (1)
              {
                v99 = v98;
                if ((v25 & 2) != 0)
                  v99 = *(_QWORD *)(v24 - 32);
                v100 = *--v97;
                v101 = *(_QWORD *)(*(_QWORD *)(v100 - 32 * (*(_DWORD *)(v100 + 20) & 0x7FFFFFF)) + 24);
                v102 = *(_QWORD *)(v101 - 16);
                if ((v102 & 2) != 0)
                  break;
                if (v99 >= v101 - 16 - 8 * ((v102 >> 2) & 0xF))
                  goto LABEL_103;
              }
            }
            while (v99 < *(_QWORD *)(v101 - 32));
          }
LABEL_103:
          if (v9 < v97)
          {
            v103 = *v9;
            v104 = *v97;
            do
            {
              *v9 = v104;
              *v97 = v103;
              v105 = *(_QWORD *)(*(_QWORD *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)) + 24);
              v106 = *(_QWORD *)(v105 - 16);
              v107 = v105 - 16 - 8 * ((v106 >> 2) & 0xF);
              if ((v106 & 2) != 0)
              {
                v108 = *(_QWORD *)(v105 - 32);
                do
                {
                  while (1)
                  {
                    v112 = v9[1];
                    ++v9;
                    v103 = v112;
                    v113 = *(_QWORD *)(*(_QWORD *)(v112 - 32 * (*(_DWORD *)(v112 + 20) & 0x7FFFFFF)) + 24);
                    v114 = *(_QWORD *)(v113 - 16);
                    if ((v114 & 2) != 0)
                      break;
                    if (v108 < v113 - 16 - 8 * ((v114 >> 2) & 0xF))
                      goto LABEL_117;
                  }
                }
                while (v108 >= *(_QWORD *)(v113 - 32));
              }
              else
              {
                do
                {
                  while (1)
                  {
                    v109 = v9[1];
                    ++v9;
                    v103 = v109;
                    v110 = *(_QWORD *)(*(_QWORD *)(v109 - 32 * (*(_DWORD *)(v109 + 20) & 0x7FFFFFF)) + 24);
                    v111 = *(_QWORD *)(v110 - 16);
                    if ((v111 & 2) != 0)
                      break;
                    if (v107 < v110 - 16 - 8 * ((v111 >> 2) & 0xF))
                      goto LABEL_117;
                  }
                }
                while (v107 >= *(_QWORD *)(v110 - 32));
              }
              do
              {
                while (1)
                {
LABEL_117:
                  v115 = *--v97;
                  v104 = v115;
                  v116 = v105 - 16 - 8 * ((v106 >> 2) & 0xF);
                  if ((v106 & 2) != 0)
                    v116 = *(_QWORD *)(v105 - 32);
                  v117 = *(_QWORD *)(*(_QWORD *)(v104 - 32 * (*(_DWORD *)(v104 + 20) & 0x7FFFFFF)) + 24);
                  v119 = *(uint64_t **)(v117 - 16);
                  v118 = v117 - 16;
                  result = v119;
                  if ((v119 & 2) != 0)
                    break;
                  if (v116 >= v118 - 8 * (((unint64_t)result >> 2) & 0xF))
                    goto LABEL_105;
                }
              }
              while (v116 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v104 - 32 * (*(_DWORD *)(v104 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32));
LABEL_105:
              ;
            }
            while (v9 < v97);
          }
          v120 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v120;
          a4 = 0;
          *v120 = v16;
          continue;
        }
        --a3;
        v16 = *v7;
        if ((a4 & 1) == 0)
          goto LABEL_8;
LABEL_11:
        v22 = -(uint64_t)(*(_DWORD *)(v16 + 20) & 0x7FFFFFF);
LABEL_20:
        v34 = *(_QWORD *)(*(_QWORD *)(v16 + 32 * v22) + 24);
        v35 = *(_QWORD *)(v34 - 16);
        v36 = v34 - 16 - 8 * ((v35 >> 2) & 0xF);
        if ((v35 & 2) != 0)
        {
          v42 = *(_QWORD *)(v34 - 32);
          v37 = v7;
          do
          {
            while (1)
            {
              v43 = v37[1];
              ++v37;
              v38 = v43;
              v44 = *(_QWORD *)(*(_QWORD *)(v43 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF)) + 24);
              v45 = *(_QWORD *)(v44 - 16);
              if ((v45 & 2) != 0)
                break;
              if (v44 - 16 - 8 * ((v45 >> 2) & 0xF) >= v42)
                goto LABEL_30;
            }
          }
          while (*(_QWORD *)(v44 - 32) < v42);
        }
        else
        {
          v37 = v7;
          do
          {
            while (1)
            {
              v39 = v37[1];
              ++v37;
              v38 = v39;
              v40 = *(_QWORD *)(*(_QWORD *)(v39 - 32 * (*(_DWORD *)(v39 + 20) & 0x7FFFFFF)) + 24);
              v41 = *(_QWORD *)(v40 - 16);
              if ((v41 & 2) != 0)
                break;
              if (v40 - 16 - 8 * ((v41 >> 2) & 0xF) >= v36)
                goto LABEL_30;
            }
          }
          while (*(_QWORD *)(v40 - 32) < v36);
        }
LABEL_30:
        if (v37 - 1 == v7)
        {
          v46 = a2;
          while (1)
          {
            if (v37 >= v46)
              goto LABEL_49;
            v50 = *--v46;
            v51 = *(_QWORD *)(*(_QWORD *)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF)) + 24);
            v52 = *(_QWORD *)(v51 - 16);
            if ((v52 & 2) != 0)
            {
              v53 = *(_QWORD *)(v51 - 32);
              v54 = v34 - 16 - 8 * ((v35 >> 2) & 0xF);
              if ((v35 & 2) != 0)
LABEL_44:
                v54 = *(_QWORD *)(v34 - 32);
            }
            else
            {
              v53 = v51 - 16 - 8 * ((v52 >> 2) & 0xF);
              v54 = v34 - 16 - 8 * ((v35 >> 2) & 0xF);
              if ((v35 & 2) != 0)
                goto LABEL_44;
            }
            if (v53 < v54)
              goto LABEL_49;
          }
        }
        if ((v35 & 2) != 0)
        {
          v55 = *(_QWORD *)(v34 - 32);
          v46 = a2;
          do
          {
            while (1)
            {
              v56 = *--v46;
              v57 = *(_QWORD *)(*(_QWORD *)(v56 - 32 * (*(_DWORD *)(v56 + 20) & 0x7FFFFFF)) + 24);
              v58 = *(_QWORD *)(v57 - 16);
              if ((v58 & 2) != 0)
                break;
              if (v57 - 16 - 8 * ((v58 >> 2) & 0xF) < v55)
                goto LABEL_49;
            }
          }
          while (*(_QWORD *)(v57 - 32) >= v55);
        }
        else
        {
          v46 = a2;
          do
          {
            while (1)
            {
              v47 = *--v46;
              v48 = *(_QWORD *)(*(_QWORD *)(v47 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF)) + 24);
              v49 = *(_QWORD *)(v48 - 16);
              if ((v49 & 2) != 0)
                break;
              if (v48 - 16 - 8 * ((v49 >> 2) & 0xF) < v36)
                goto LABEL_49;
            }
          }
          while (*(_QWORD *)(v48 - 32) >= v36);
        }
LABEL_49:
        v9 = v37;
        if (v37 >= v46)
          goto LABEL_68;
        v59 = *v46;
        v9 = v37;
        v60 = v46;
        while (2)
        {
          *v9 = v59;
          *v60 = v38;
          v61 = *(_QWORD *)(*(_QWORD *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)) + 24);
          v62 = *(_QWORD *)(v61 - 16);
          v63 = v61 - 16 - 8 * ((v62 >> 2) & 0xF);
          if ((v62 & 2) != 0)
          {
            v64 = *(_QWORD *)(v61 - 32);
            do
            {
              while (1)
              {
                v68 = v9[1];
                ++v9;
                v38 = v68;
                v69 = *(_QWORD *)(*(_QWORD *)(v68 - 32 * (*(_DWORD *)(v68 + 20) & 0x7FFFFFF)) + 24);
                v70 = *(_QWORD *)(v69 - 16);
                if ((v70 & 2) != 0)
                  break;
                if (v69 - 16 - 8 * ((v70 >> 2) & 0xF) >= v64)
                  goto LABEL_63;
              }
            }
            while (*(_QWORD *)(v69 - 32) < v64);
          }
          else
          {
            do
            {
              while (1)
              {
                v65 = v9[1];
                ++v9;
                v38 = v65;
                v66 = *(_QWORD *)(*(_QWORD *)(v65 - 32 * (*(_DWORD *)(v65 + 20) & 0x7FFFFFF)) + 24);
                v67 = *(_QWORD *)(v66 - 16);
                if ((v67 & 2) != 0)
                  break;
                if (v66 - 16 - 8 * ((v67 >> 2) & 0xF) >= v63)
                  goto LABEL_63;
              }
            }
            while (*(_QWORD *)(v66 - 32) < v63);
          }
LABEL_63:
          while (2)
          {
            v71 = *--v60;
            v59 = v71;
            v72 = *(_QWORD *)(*(_QWORD *)(v71 - 32 * (*(_DWORD *)(v71 + 20) & 0x7FFFFFF)) + 24);
            v73 = *(_QWORD *)(v72 - 16);
            if ((v73 & 2) != 0)
            {
              v74 = *(_QWORD *)(v72 - 32);
              v75 = v61 - 16 - 8 * ((v62 >> 2) & 0xF);
              if ((v62 & 2) != 0)
                goto LABEL_67;
            }
            else
            {
              v74 = v72 - 16 - 8 * ((v73 >> 2) & 0xF);
              v75 = v61 - 16 - 8 * ((v62 >> 2) & 0xF);
              if ((v62 & 2) != 0)
LABEL_67:
                v75 = *(_QWORD *)(v61 - 32);
            }
            if (v74 >= v75)
              continue;
            break;
          }
          if (v9 < v60)
            continue;
          break;
        }
LABEL_68:
        v76 = v9 - 1;
        if (v9 - 1 != v7)
          *v7 = *v76;
        *v76 = v16;
        if (v37 < v46)
        {
LABEL_73:
          a4 = 0;
          continue;
        }
        if (!(_DWORD)result)
        {
          if (v77)
            continue;
          goto LABEL_73;
        }
        a2 = v9 - 1;
        if (!v77)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v11 = *a4;
  v12 = *(_QWORD *)(*(_QWORD *)(*a5 - 32 * (*(_DWORD *)(*a5 + 20) & 0x7FFFFFF)) + 24);
  v15 = *(_QWORD *)(v12 - 16);
  v13 = v12 - 16;
  v14 = v15;
  if ((v15 & 2) != 0)
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a5 - 32 * (*(_DWORD *)(*a5 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v16 = v13 - 8 * ((v14 >> 2) & 0xF);
  v17 = *(_QWORD *)(*(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)) + 24);
  v20 = *(_QWORD *)(v17 - 16);
  v18 = v17 - 16;
  v19 = v20;
  if ((v20 & 2) != 0)
  {
    if (v16 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)) + 24) - 32))
      return result;
  }
  else if (v16 >= v18 - 8 * ((v19 >> 2) & 0xF))
  {
    return result;
  }
  *a4 = *a5;
  *a5 = v11;
  v21 = *a3;
  v22 = *(_QWORD *)(*(_QWORD *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24);
  v25 = *(_QWORD *)(v22 - 16);
  v23 = v22 - 16;
  v24 = v25;
  if ((v25 & 2) != 0)
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v26 = v23 - 8 * ((v24 >> 2) & 0xF);
  v27 = *(_QWORD *)(*(_QWORD *)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF)) + 24);
  v30 = *(_QWORD *)(v27 - 16);
  v28 = v27 - 16;
  v29 = v30;
  if ((v30 & 2) != 0)
  {
    if (v26 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF)) + 24) - 32))
      return result;
  }
  else if (v26 >= v28 - 8 * ((v29 >> 2) & 0xF))
  {
    return result;
  }
  *a3 = *a4;
  *a4 = v21;
  v31 = *a2;
  v32 = *(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  v35 = *(_QWORD *)(v32 - 16);
  v33 = v32 - 16;
  v34 = v35;
  if ((v35 & 2) != 0)
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v36 = v33 - 8 * ((v34 >> 2) & 0xF);
  v37 = *(_QWORD *)(*(_QWORD *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF)) + 24);
  v40 = *(_QWORD *)(v37 - 16);
  v38 = v37 - 16;
  v39 = v40;
  if ((v40 & 2) != 0)
  {
    if (v36 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF)) + 24) - 32))
      return result;
  }
  else if (v36 >= v38 - 8 * ((v39 >> 2) & 0xF))
  {
    return result;
  }
  *a2 = *a3;
  *a3 = v31;
  v41 = *a1;
  v42 = *(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
  v45 = *(_QWORD *)(v42 - 16);
  v43 = v42 - 16;
  v44 = v45;
  if ((v45 & 2) != 0)
    v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v46 = v43 - 8 * ((v44 >> 2) & 0xF);
  v47 = *(_QWORD *)(*(_QWORD *)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF)) + 24);
  v50 = *(_QWORD *)(v47 - 16);
  v48 = v47 - 16;
  v49 = v50;
  if ((v50 & 2) != 0)
  {
    if (v46 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF)) + 24) - 32))
    {
LABEL_29:
      *a1 = *a2;
      *a2 = v41;
    }
  }
  else if (v46 < v48 - 8 * ((v49 >> 2) & 0xF))
  {
    goto LABEL_29;
  }
  return result;
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
  v6 = v5 - 16;
  v7 = *(_QWORD *)(v5 - 16);
  if ((v7 & 2) != 0)
    v8 = *(_QWORD *)(v5 - 32);
  else
    v8 = v6 - 8 * ((v7 >> 2) & 0xF);
  v9 = *(_QWORD *)(*(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24);
  v12 = *(_QWORD *)(v9 - 16);
  v10 = v9 - 16;
  v11 = v12;
  if ((v12 & 2) != 0)
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v13 = v10 - 8 * ((v11 >> 2) & 0xF);
  v14 = *a3;
  v15 = *(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  v17 = v15 - 16;
  v16 = *(_QWORD *)(v15 - 16);
  if (v8 >= v13)
  {
    if ((v16 & 2) != 0)
    {
      v24 = *(_QWORD *)(v15 - 32);
      if ((v7 & 2) != 0)
      {
LABEL_15:
        if (v24 >= *(_QWORD *)(v5 - 32))
          return result;
        goto LABEL_22;
      }
    }
    else
    {
      v24 = v17 - 8 * ((v16 >> 2) & 0xF);
      if ((v7 & 2) != 0)
        goto LABEL_15;
    }
    if (v24 >= v6 - 8 * ((v7 >> 2) & 0xF))
      return result;
LABEL_22:
    *a2 = v14;
    *a3 = v3;
    v25 = *result;
    v26 = *(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
    v29 = *(_QWORD *)(v26 - 16);
    v27 = v26 - 16;
    v28 = v29;
    if ((v29 & 2) != 0)
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24) - 32);
    else
      v30 = v27 - 8 * ((v28 >> 2) & 0xF);
    v35 = *(_QWORD *)(*(_QWORD *)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF)) + 24);
    v38 = *(_QWORD *)(v35 - 16);
    v36 = v35 - 16;
    v37 = v38;
    if ((v38 & 2) != 0)
    {
      if (v30 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF)) + 24) - 32))
        return result;
    }
    else if (v30 >= v36 - 8 * ((v37 >> 2) & 0xF))
    {
      return result;
    }
    *result = *a2;
    *a2 = v25;
    return result;
  }
  if ((v16 & 2) != 0)
  {
    v18 = *(_QWORD *)(v15 - 32);
    if ((v7 & 2) != 0)
    {
LABEL_10:
      if (v18 >= *(_QWORD *)(v5 - 32))
        goto LABEL_11;
LABEL_19:
      *result = v14;
      *a3 = v4;
      return result;
    }
  }
  else
  {
    v18 = v17 - 8 * ((v16 >> 2) & 0xF);
    if ((v7 & 2) != 0)
      goto LABEL_10;
  }
  if (v18 < v6 - 8 * ((v7 >> 2) & 0xF))
    goto LABEL_19;
LABEL_11:
  *result = v3;
  *a2 = v4;
  v19 = *(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  v22 = *(_QWORD *)(v19 - 16);
  v20 = v19 - 16;
  v21 = v22;
  if ((v22 & 2) != 0)
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v23 = v20 - 8 * ((v21 >> 2) & 0xF);
  v31 = *(_QWORD *)(*(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24);
  v34 = *(_QWORD *)(v31 - 16);
  v32 = v31 - 16;
  v33 = v34;
  if ((v34 & 2) != 0)
  {
    if (v23 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24) - 32))
    {
LABEL_33:
      *a2 = *a3;
      *a3 = v4;
    }
  }
  else if (v23 < v32 - 8 * ((v33 >> 2) & 0xF))
  {
    goto LABEL_33;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v32 = *(a2 - 1);
      v33 = *a1;
      v34 = *(_QWORD *)(*(_QWORD *)(v32 - 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF)) + 24);
      v37 = *(_QWORD *)(v34 - 16);
      v35 = v34 - 16;
      v36 = v37;
      if ((v37 & 2) != 0)
        v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 - 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF)) + 24) - 32);
      else
        v38 = v35 - 8 * ((v36 >> 2) & 0xF);
      v39 = *(_QWORD *)(*(_QWORD *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF)) + 24);
      v42 = *(_QWORD *)(v39 - 16);
      v40 = v39 - 16;
      v41 = v42;
      if ((v42 & 2) != 0)
      {
        if (v38 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF)) + 24) - 32))
          return result;
      }
      else if (v38 >= v40 - 8 * ((v41 >> 2) & 0xF))
      {
        return result;
      }
      *a1 = v32;
      *(a2 - 1) = v33;
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v6 = a1 + 2;
      v7 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v8 = 0;
      v9 = 24;
      break;
  }
  while (1)
  {
    v10 = *v7;
    v11 = *(_QWORD *)(*(_QWORD *)(*v7 - 32 * (*(_DWORD *)(*v7 + 20) & 0x7FFFFFF)) + 24);
    v14 = *(_QWORD *)(v11 - 16);
    v12 = v11 - 16;
    v13 = v14;
    v15 = (v14 & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v7 - 32 * (*(_DWORD *)(*v7 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v12 - 8 * ((v13 >> 2) & 0xF);
    v16 = *v6;
    v17 = *(_QWORD *)(*(_QWORD *)(*v6 - 32 * (*(_DWORD *)(*v6 + 20) & 0x7FFFFFF)) + 24);
    v20 = *(_QWORD *)(v17 - 16);
    v18 = v17 - 16;
    v19 = v20;
    if ((v20 & 2) != 0)
      break;
    if (v15 < v18 - 8 * ((v19 >> 2) & 0xF))
      goto LABEL_14;
LABEL_23:
    v6 = v7;
    v9 += 8;
    if (++v7 == a2)
      return 1;
  }
  if (v15 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v6 - 32 * (*(_DWORD *)(*v6 + 20) & 0x7FFFFFF)) + 24) - 32))
    goto LABEL_23;
LABEL_14:
  v21 = v9;
  do
  {
    while (1)
    {
      *(uint64_t *)((char *)a1 + v21) = v16;
      v22 = v21 - 8;
      if (v21 == 8)
      {
        *a1 = v10;
        if (++v8 != 8)
          goto LABEL_23;
        return v7 + 1 == a2;
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF)) + 24);
      v26 = *(_QWORD *)(v23 - 16);
      v24 = v23 - 16;
      v25 = v26;
      v27 = (v26 & 2) != 0
          ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF)) + 24) - 32)
          : v24 - 8 * ((v25 >> 2) & 0xF);
      v16 = *(uint64_t *)((char *)a1 + v21 - 16);
      v28 = *(_QWORD *)(*(_QWORD *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)) + 24);
      v31 = *(_QWORD *)(v28 - 16);
      v29 = v28 - 16;
      v30 = v31;
      if ((v31 & 2) != 0)
        break;
      v21 -= 8;
      if (v27 >= v29 - 8 * ((v30 >> 2) & 0xF))
        goto LABEL_22;
    }
    v21 -= 8;
  }
  while (v27 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)) + 24) - 32));
LABEL_22:
  *(uint64_t *)((char *)a1 + v22) = v10;
  if (++v8 != 8)
    goto LABEL_23;
  return v7 + 1 == a2;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v9 = *a3;
  v10 = *(_QWORD *)(*(_QWORD *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24);
  v13 = *(_QWORD *)(v10 - 16);
  v11 = v10 - 16;
  v12 = v13;
  if ((v13 & 2) != 0)
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v14 = v11 - 8 * ((v12 >> 2) & 0xF);
  v15 = *(_QWORD *)(*(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)) + 24);
  v18 = *(_QWORD *)(v15 - 16);
  v16 = v15 - 16;
  v17 = v18;
  if ((v18 & 2) != 0)
  {
    if (v14 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)) + 24) - 32))
      return result;
  }
  else if (v14 >= v16 - 8 * ((v17 >> 2) & 0xF))
  {
    return result;
  }
  *a3 = *a4;
  *a4 = v9;
  v19 = *a2;
  v20 = *(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  v23 = *(_QWORD *)(v20 - 16);
  v21 = v20 - 16;
  v22 = v23;
  if ((v23 & 2) != 0)
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v24 = v21 - 8 * ((v22 >> 2) & 0xF);
  v25 = *(_QWORD *)(*(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF)) + 24);
  v28 = *(_QWORD *)(v25 - 16);
  v26 = v25 - 16;
  v27 = v28;
  if ((v28 & 2) != 0)
  {
    if (v24 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF)) + 24) - 32))
      return result;
  }
  else if (v24 >= v26 - 8 * ((v27 >> 2) & 0xF))
  {
    return result;
  }
  *a2 = *a3;
  *a3 = v19;
  v29 = *a1;
  v30 = *(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
  v33 = *(_QWORD *)(v30 - 16);
  v31 = v30 - 16;
  v32 = v33;
  if ((v33 & 2) != 0)
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v34 = v31 - 8 * ((v32 >> 2) & 0xF);
  v35 = *(_QWORD *)(*(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)) + 24);
  v38 = *(_QWORD *)(v35 - 16);
  v36 = v35 - 16;
  v37 = v38;
  if ((v38 & 2) != 0)
  {
    if (v34 < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)) + 24) - 32))
    {
LABEL_22:
      *a1 = *a2;
      *a2 = v29;
    }
  }
  else if (v34 < v36 - 8 * ((v37 >> 2) & 0xF))
  {
    goto LABEL_22;
  }
  return result;
}

void llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::~GenericConvergenceVerifier(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 144), (void *)(16 * *(unsigned int *)(a1 + 160)));
}

void sub_180D497E4()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 56), (void *)(16 * *(unsigned int *)(v0 + 72)));
}

uint64_t sub_180D497F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(v0 + 32);
  if (v1 == (_QWORD *)(v0 + 8))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 + 8);
    goto LABEL_5;
  }
  if (v1)
  {
    v2 = 5;
LABEL_5:
    (*(void (**)(void))(*v1 + 8 * v2))();
  }
  return v0;
}

void std::default_delete<llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 80);
    if (v3 != (void *)(a2 + 96))
      free(v3);
    llvm::deallocate_buffer(*(llvm **)(a2 + 56), (void *)(8 * *(unsigned int *)(a2 + 72)));
  }
}

void `anonymous namespace'::Verifier::visitAliaseeSubExpr(llvm::raw_ostream *a1, uint64_t a2, llvm::raw_ostream *a3, uint64_t a4)
{
  unsigned int v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t i;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  llvm::raw_ostream *v25;
  const char *v26;
  __int16 v27;

  v8 = *(unsigned __int8 *)(a4 + 16);
  if ((*((_DWORD *)a3 + 8) & 0xF) == 1)
  {
    if (v8 > 3 || (*(_DWORD *)(a4 + 32) & 0xF) != 1)
    {
      v9 = "available_externally alias must point to available_externally global value";
LABEL_14:
      v25 = a3;
      v26 = v9;
      v27 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (llvm::Twine *)&v26, &v25);
      return;
    }
LABEL_31:
    if (v8 == 1)
      v18 = (void *)a4;
    else
      v18 = 0;
    if (v8 != 1)
      return;
    v19 = *(_QWORD *)(a2 + 8);
    if (v19 != *(_QWORD *)a2)
      goto LABEL_36;
    v21 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = 8 * v21;
      v24 = *(_QWORD **)(a2 + 8);
      do
      {
        if ((void *)*v24 == v18)
          goto LABEL_47;
        if (*v24 == -2)
          v22 = v24;
        ++v24;
        v23 -= 8;
      }
      while (v23);
      if (v22)
      {
        *v22 = v18;
        --*(_DWORD *)(a2 + 24);
        goto LABEL_37;
      }
    }
    if (v21 < *(_DWORD *)(a2 + 16))
    {
      *(_DWORD *)(a2 + 20) = v21 + 1;
      *(_QWORD *)(v19 + 8 * v21) = v18;
    }
    else
    {
LABEL_36:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a2, v18);
      if (!v20)
      {
LABEL_47:
        v9 = "Aliases cannot form a cycle";
        goto LABEL_14;
      }
    }
LABEL_37:
    if ((llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v18) & 1) != 0)
    {
      v9 = "Alias cannot point to an interposable alias";
      goto LABEL_14;
    }
    if (*(_BYTE *)(a4 + 16) != 5)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v8 <= 3)
  {
    if ((*(_DWORD *)(a4 + 32) & 0xF) == 1 || llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)a4))
    {
      v9 = "Alias must point to a definition";
      goto LABEL_14;
    }
    v8 = *(unsigned __int8 *)(a4 + 16);
    goto LABEL_31;
  }
  if (v8 == 5)
LABEL_7:
LABEL_8:
  v10 = *(_DWORD *)(a4 + 20);
  if ((v10 & 0x40000000) == 0)
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = (uint64_t *)(a4 - 32 * v11);
    if (!v11)
      return;
    goto LABEL_16;
  }
  v12 = *(uint64_t **)(a4 - 8);
  v11 = v10 & 0x7FFFFFF;
  if (v11)
  {
LABEL_16:
    for (i = 32 * v11; i; i -= 32)
    {
      v14 = *v12;
      v15 = *(unsigned __int8 *)(*v12 + 16);
      if (*v12)
        v16 = v15 == 1;
      else
        v16 = 0;
      if (v16)
      {
        v14 = *(_QWORD *)(v14 - 32);
      }
      else
      {
        if (v14)
          v17 = v15 > 0x14;
        else
          v17 = 1;
        if (v17)
          goto LABEL_19;
      }
LABEL_19:
      v12 += 4;
    }
  }
}

llvm::NamedMDNode *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::NamedMDNode const*>(llvm::NamedMDNode *result, llvm::Twine *this, llvm::NamedMDNode **a3)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;

  v4 = (uint64_t)result;
  v5 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::NamedMDNode *)llvm::Twine::print(this, v5);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      result = llvm::raw_ostream::write(v5, 10);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 10;
    }
  }
  *(_BYTE *)(v4 + 192) |= *(_BYTE *)(v4 + 194);
  *(_BYTE *)(v4 + 193) = 1;
  if (*(_QWORD *)v4)
  {
    result = *a3;
    if (*a3)
      llvm::NamedMDNode::print(result, *(llvm::raw_ostream **)v4, (llvm::ModuleSlotTracker *)(v4 + 16), 0);
  }
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _WORD *a3, _BYTE **a4, _OWORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  _BYTE *v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v15 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v15;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void llvm::VerifierSupport::WriteTs<llvm::Instruction *,llvm::MDNode const*,llvm::APInt *>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, llvm::Metadata **a3, llvm::APInt **a4)
{
  unsigned __int8 *v7;
  llvm::raw_ostream *v8;
  llvm::Metadata *v9;
  _anonymous_namespace_::TypePrinting *v10;
  _BYTE *v11;
  _anonymous_namespace_::TypePrinting *v12;
  _BYTE *v13;

  v7 = *a2;
  if (!*a2)
  {
LABEL_5:
    v9 = *a3;
    if (*a3)
      goto LABEL_9;
    goto LABEL_10;
  }
  v8 = *a1;
  if (v7[16] >= 0x1Cu)
    llvm::Value::print((llvm::Value *)v7, v8, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
  llvm::Value::printAsOperand((Type **)v7, v8, 1, a1 + 2);
  v10 = *a1;
  v11 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v10, 10);
    goto LABEL_5;
  }
  *((_QWORD *)v10 + 4) = v11 + 1;
  *v11 = 10;
  v9 = *a3;
  if (*a3)
LABEL_9:
    llvm::Metadata::print(v9, *a1, (llvm::ModuleSlotTracker *)(a1 + 2), a1[1]);
LABEL_10:
  if (*a4)
  {
    v12 = *a1;
    llvm::APInt::print(*a4, v12, 1);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 10);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 10;
    }
  }
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Instruction *,llvm::MDNode const*,unsigned int,unsigned int>(_anonymous_namespace_::TypePrinting **a1, unsigned __int8 **a2, llvm::Metadata **a3, unsigned int *a4, unsigned int *a5)
{
  unsigned __int8 *v9;
  llvm::raw_ostream *v10;
  _anonymous_namespace_::TypePrinting *v11;
  _BYTE *v12;

  v9 = *a2;
  if (*a2)
  {
    v10 = *a1;
    if (v9[16] >= 0x1Cu)
      llvm::Value::print((llvm::Value *)v9, v10, (llvm::ModuleSlotTracker *)(a1 + 2), 0);
    llvm::Value::printAsOperand((Type **)v9, v10, 1, a1 + 2);
    v11 = *a1;
    v12 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v11, 10);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 10;
    }
  }
  return llvm::VerifierSupport::WriteTs<llvm::MDNode const*,unsigned int,unsigned int>(a1, a3, a4, a5);
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::MDNode const*,unsigned int,unsigned int>(llvm::raw_ostream **a1, llvm::Metadata **a2, unsigned int *a3, unsigned int *a4)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *result;
  _BYTE *v9;

  if (*a2)
    llvm::Metadata::print(*a2, *a1, (llvm::ModuleSlotTracker *)(a1 + 2), a1[1]);
  v6 = llvm::raw_ostream::operator<<(*a1, *a3);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 10);
    result = llvm::raw_ostream::operator<<(*a1, *a4);
    v9 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v9 >= *((_QWORD *)result + 3))
      return llvm::raw_ostream::write(result, 10);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 10;
    result = llvm::raw_ostream::operator<<(*a1, *a4);
    v9 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v9 >= *((_QWORD *)result + 3))
      return llvm::raw_ostream::write(result, 10);
  }
  *((_QWORD *)result + 4) = v9 + 1;
  *v9 = 10;
  return result;
}

uint64_t _GLOBAL__sub_I_Verifier_cpp()
{
  char v1;
  int v2;
  __int128 v3;
  int *v4;

  v2 = 1;
  v1 = 0;
  v4 = (int *)&v1;
  *(_QWORD *)&v3 = "Ensure that llvm.experimental.noalias.scope.decl for identical scopes are not dominating";
  *((_QWORD *)&v3 + 1) = 88;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)&unk_1ECD35180, (int8x16_t *)"verify-noalias-scope-decl-dom", &v2, (_BYTE **)&v4, &v3);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_1ECD35180, &dword_18013D000);
  LOBYTE(v2) = 0;
  *(_QWORD *)&v3 = "Check that tail calls from swifttailcc functions to swifttailcc functions are marked musttail.";
  *((_QWORD *)&v3 + 1) = 94;
  v4 = &v2;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)&algn_1ECD35201[63], (int8x16_t *)"enable-swifttailcc-musttail-check", (_BYTE **)&v4, &v3);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &algn_1ECD35201[63], &dword_18013D000);
}

const char *llvm::dwarf::TagString(llvm::dwarf *this)
{
  int v1;
  const char *result;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;

  v1 = (int)this;
  result = 0;
  if (v1 > 16895)
  {
    if (v1 <= 20736)
    {
      switch(v1)
      {
        case 16896:
          result = "DW_TAG_APPLE_property";
          break;
        case 16897:
          result = "DW_TAG_SUN_function_template";
          break;
        case 16898:
          result = "DW_TAG_SUN_class_template";
          break;
        case 16899:
          result = "DW_TAG_SUN_struct_template";
          break;
        case 16900:
          result = "DW_TAG_SUN_union_template";
          break;
        case 16901:
          result = "DW_TAG_SUN_indirect_inheritance";
          break;
        case 16902:
          result = "DW_TAG_SUN_codeflags";
          break;
        case 16903:
          result = "DW_TAG_SUN_memop_info";
          break;
        case 16904:
          result = "DW_TAG_SUN_omp_child_func";
          break;
        case 16905:
          result = "DW_TAG_SUN_rtti_descriptor";
          break;
        case 16906:
          result = "DW_TAG_SUN_dtor_info";
          break;
        case 16907:
          result = "DW_TAG_SUN_dtor";
          break;
        case 16908:
          result = "DW_TAG_SUN_f90_interface";
          break;
        case 16909:
          result = "DW_TAG_SUN_fortran_vax_structure";
          break;
        default:
          v5 = "DW_TAG_LLVM_ptrauth_type";
          if (v1 != 17152)
            v5 = 0;
          if (v1 == 17151)
            result = "DW_TAG_SUN_hi";
          else
            result = v5;
          break;
      }
    }
    else if (v1 <= 34660)
    {
      switch(v1)
      {
        case 20737:
          result = "DW_TAG_ALTIUM_circ_type";
          break;
        case 20738:
          result = "DW_TAG_ALTIUM_mwa_circ_type";
          break;
        case 20739:
          result = "DW_TAG_ALTIUM_rev_carry_type";
          break;
        case 20740:
        case 20741:
        case 20742:
        case 20743:
        case 20744:
        case 20745:
        case 20746:
        case 20747:
        case 20748:
        case 20749:
        case 20750:
        case 20751:
        case 20752:
          return result;
        case 20753:
          result = "DW_TAG_ALTIUM_rom";
          break;
        default:
          switch(v1)
          {
            case 32772:
              result = "DW_TAG_GHS_namespace";
              break;
            case 32773:
              result = "DW_TAG_GHS_using_namespace";
              break;
            case 32774:
              result = "DW_TAG_GHS_using_declaration";
              break;
            case 32775:
              result = "DW_TAG_GHS_template_templ_param";
              break;
            default:
              if (v1 == 24576)
                result = "DW_TAG_LLVM_annotation";
              else
                result = 0;
              break;
          }
          break;
      }
    }
    else if (v1 >= 40960)
    {
      switch(v1)
      {
        case 45056:
          result = "DW_TAG_BORLAND_property";
          break;
        case 45057:
          result = "DW_TAG_BORLAND_Delphi_string";
          break;
        case 45058:
          result = "DW_TAG_BORLAND_Delphi_dynamic_array";
          break;
        case 45059:
          result = "DW_TAG_BORLAND_Delphi_set";
          break;
        case 45060:
          result = "DW_TAG_BORLAND_Delphi_variant";
          break;
        default:
          v6 = "DW_TAG_PGI_interface_block";
          if (v1 != 40992)
            v6 = 0;
          if (v1 == 40960)
            result = "DW_TAG_PGI_kanji_type";
          else
            result = v6;
          break;
      }
    }
    else
    {
      v3 = "DW_TAG_UPC_relaxed";
      if (v1 != 34663)
        v3 = 0;
      if (v1 == 34662)
        v4 = "DW_TAG_UPC_strict_type";
      else
        v4 = v3;
      if (v1 == 34661)
        return "DW_TAG_UPC_shared_type";
      else
        return v4;
    }
  }
  else
  {
    switch(v1)
    {
      case 0:
        result = "DW_TAG_null";
        break;
      case 1:
        result = "DW_TAG_array_type";
        break;
      case 2:
        result = "DW_TAG_class_type";
        break;
      case 3:
        result = "DW_TAG_entry_point";
        break;
      case 4:
        result = "DW_TAG_enumeration_type";
        break;
      case 5:
        result = "DW_TAG_formal_parameter";
        break;
      case 6:
      case 7:
      case 9:
      case 12:
      case 14:
      case 20:
      case 62:
        return result;
      case 8:
        result = "DW_TAG_imported_declaration";
        break;
      case 10:
        result = "DW_TAG_label";
        break;
      case 11:
        result = "DW_TAG_lexical_block";
        break;
      case 13:
        result = "DW_TAG_member";
        break;
      case 15:
        result = "DW_TAG_pointer_type";
        break;
      case 16:
        result = "DW_TAG_reference_type";
        break;
      case 17:
        result = "DW_TAG_compile_unit";
        break;
      case 18:
        result = "DW_TAG_string_type";
        break;
      case 19:
        result = "DW_TAG_structure_type";
        break;
      case 21:
        result = "DW_TAG_subroutine_type";
        break;
      case 22:
        result = "DW_TAG_typedef";
        break;
      case 23:
        result = "DW_TAG_union_type";
        break;
      case 24:
        result = "DW_TAG_unspecified_parameters";
        break;
      case 25:
        result = "DW_TAG_variant";
        break;
      case 26:
        result = "DW_TAG_common_block";
        break;
      case 27:
        result = "DW_TAG_common_inclusion";
        break;
      case 28:
        result = "DW_TAG_inheritance";
        break;
      case 29:
        result = "DW_TAG_inlined_subroutine";
        break;
      case 30:
        result = "DW_TAG_module";
        break;
      case 31:
        result = "DW_TAG_ptr_to_member_type";
        break;
      case 32:
        result = "DW_TAG_set_type";
        break;
      case 33:
        result = "DW_TAG_subrange_type";
        break;
      case 34:
        result = "DW_TAG_with_stmt";
        break;
      case 35:
        result = "DW_TAG_access_declaration";
        break;
      case 36:
        result = "DW_TAG_base_type";
        break;
      case 37:
        result = "DW_TAG_catch_block";
        break;
      case 38:
        result = "DW_TAG_const_type";
        break;
      case 39:
        result = "DW_TAG_constant";
        break;
      case 40:
        result = "DW_TAG_enumerator";
        break;
      case 41:
        result = "DW_TAG_file_type";
        break;
      case 42:
        result = "DW_TAG_friend";
        break;
      case 43:
        result = "DW_TAG_namelist";
        break;
      case 44:
        result = "DW_TAG_namelist_item";
        break;
      case 45:
        result = "DW_TAG_packed_type";
        break;
      case 46:
        result = "DW_TAG_subprogram";
        break;
      case 47:
        result = "DW_TAG_template_type_parameter";
        break;
      case 48:
        result = "DW_TAG_template_value_parameter";
        break;
      case 49:
        result = "DW_TAG_thrown_type";
        break;
      case 50:
        result = "DW_TAG_try_block";
        break;
      case 51:
        result = "DW_TAG_variant_part";
        break;
      case 52:
        result = "DW_TAG_variable";
        break;
      case 53:
        result = "DW_TAG_volatile_type";
        break;
      case 54:
        result = "DW_TAG_dwarf_procedure";
        break;
      case 55:
        result = "DW_TAG_restrict_type";
        break;
      case 56:
        result = "DW_TAG_interface_type";
        break;
      case 57:
        result = "DW_TAG_namespace";
        break;
      case 58:
        result = "DW_TAG_imported_module";
        break;
      case 59:
        result = "DW_TAG_unspecified_type";
        break;
      case 60:
        result = "DW_TAG_partial_unit";
        break;
      case 61:
        result = "DW_TAG_imported_unit";
        break;
      case 63:
        result = "DW_TAG_condition";
        break;
      case 64:
        result = "DW_TAG_shared_type";
        break;
      case 65:
        result = "DW_TAG_type_unit";
        break;
      case 66:
        result = "DW_TAG_rvalue_reference_type";
        break;
      case 67:
        result = "DW_TAG_template_alias";
        break;
      case 68:
        result = "DW_TAG_coarray_type";
        break;
      case 69:
        result = "DW_TAG_generic_subrange";
        break;
      case 70:
        result = "DW_TAG_dynamic_type";
        break;
      case 71:
        result = "DW_TAG_atomic_type";
        break;
      case 72:
        result = "DW_TAG_call_site";
        break;
      case 73:
        result = "DW_TAG_call_site_parameter";
        break;
      case 74:
        result = "DW_TAG_skeleton_unit";
        break;
      case 75:
        result = "DW_TAG_immutable_type";
        break;
      default:
        switch(v1)
        {
          case 16641:
            result = "DW_TAG_format_label";
            break;
          case 16642:
            result = "DW_TAG_function_template";
            break;
          case 16643:
            result = "DW_TAG_class_template";
            break;
          case 16644:
            result = "DW_TAG_GNU_BINCL";
            break;
          case 16645:
            result = "DW_TAG_GNU_EINCL";
            break;
          case 16646:
            result = "DW_TAG_GNU_template_template_param";
            break;
          case 16647:
            result = "DW_TAG_GNU_template_parameter_pack";
            break;
          case 16648:
            result = "DW_TAG_GNU_formal_parameter_pack";
            break;
          case 16649:
            result = "DW_TAG_GNU_call_site";
            break;
          case 16650:
            result = "DW_TAG_GNU_call_site_parameter";
            break;
          default:
            if (v1 == 16513)
              result = "DW_TAG_MIPS_loop";
            else
              result = 0;
            break;
        }
        break;
    }
  }
  return result;
}

const char *llvm::dwarf::OperationEncodingString(llvm::dwarf *this)
{
  int v1;
  const char *result;

  v1 = (int)this;
  result = 0;
  switch(v1)
  {
    case 3:
      result = "DW_OP_addr";
      break;
    case 4:
    case 5:
    case 7:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 231:
    case 234:
    case 235:
    case 236:
    case 239:
    case 241:
    case 242:
    case 244:
    case 245:
    case 246:
    case 247:
    case 249:
    case 250:
      return result;
    case 6:
      result = "DW_OP_deref";
      break;
    case 8:
      result = "DW_OP_const1u";
      break;
    case 9:
      result = "DW_OP_const1s";
      break;
    case 10:
      result = "DW_OP_const2u";
      break;
    case 11:
      result = "DW_OP_const2s";
      break;
    case 12:
      result = "DW_OP_const4u";
      break;
    case 13:
      result = "DW_OP_const4s";
      break;
    case 14:
      result = "DW_OP_const8u";
      break;
    case 15:
      result = "DW_OP_const8s";
      break;
    case 16:
      result = "DW_OP_constu";
      break;
    case 17:
      result = "DW_OP_consts";
      break;
    case 18:
      result = "DW_OP_dup";
      break;
    case 19:
      result = "DW_OP_drop";
      break;
    case 20:
      result = "DW_OP_over";
      break;
    case 21:
      result = "DW_OP_pick";
      break;
    case 22:
      result = "DW_OP_swap";
      break;
    case 23:
      result = "DW_OP_rot";
      break;
    case 24:
      result = "DW_OP_xderef";
      break;
    case 25:
      result = "DW_OP_abs";
      break;
    case 26:
      result = "DW_OP_and";
      break;
    case 27:
      result = "DW_OP_div";
      break;
    case 28:
      result = "DW_OP_minus";
      break;
    case 29:
      result = "DW_OP_mod";
      break;
    case 30:
      result = "DW_OP_mul";
      break;
    case 31:
      result = "DW_OP_neg";
      break;
    case 32:
      result = "DW_OP_not";
      break;
    case 33:
      result = "DW_OP_or";
      break;
    case 34:
      result = "DW_OP_plus";
      break;
    case 35:
      result = "DW_OP_plus_uconst";
      break;
    case 36:
      result = "DW_OP_shl";
      break;
    case 37:
      result = "DW_OP_shr";
      break;
    case 38:
      result = "DW_OP_shra";
      break;
    case 39:
      result = "DW_OP_xor";
      break;
    case 40:
      result = "DW_OP_bra";
      break;
    case 41:
      result = "DW_OP_eq";
      break;
    case 42:
      result = "DW_OP_ge";
      break;
    case 43:
      result = "DW_OP_gt";
      break;
    case 44:
      result = "DW_OP_le";
      break;
    case 45:
      result = "DW_OP_lt";
      break;
    case 46:
      result = "DW_OP_ne";
      break;
    case 47:
      result = "DW_OP_skip";
      break;
    case 48:
      result = "DW_OP_lit0";
      break;
    case 49:
      result = "DW_OP_lit1";
      break;
    case 50:
      result = "DW_OP_lit2";
      break;
    case 51:
      result = "DW_OP_lit3";
      break;
    case 52:
      result = "DW_OP_lit4";
      break;
    case 53:
      result = "DW_OP_lit5";
      break;
    case 54:
      result = "DW_OP_lit6";
      break;
    case 55:
      result = "DW_OP_lit7";
      break;
    case 56:
      result = "DW_OP_lit8";
      break;
    case 57:
      result = "DW_OP_lit9";
      break;
    case 58:
      result = "DW_OP_lit10";
      break;
    case 59:
      result = "DW_OP_lit11";
      break;
    case 60:
      result = "DW_OP_lit12";
      break;
    case 61:
      result = "DW_OP_lit13";
      break;
    case 62:
      result = "DW_OP_lit14";
      break;
    case 63:
      result = "DW_OP_lit15";
      break;
    case 64:
      result = "DW_OP_lit16";
      break;
    case 65:
      result = "DW_OP_lit17";
      break;
    case 66:
      result = "DW_OP_lit18";
      break;
    case 67:
      result = "DW_OP_lit19";
      break;
    case 68:
      result = "DW_OP_lit20";
      break;
    case 69:
      result = "DW_OP_lit21";
      break;
    case 70:
      result = "DW_OP_lit22";
      break;
    case 71:
      result = "DW_OP_lit23";
      break;
    case 72:
      result = "DW_OP_lit24";
      break;
    case 73:
      result = "DW_OP_lit25";
      break;
    case 74:
      result = "DW_OP_lit26";
      break;
    case 75:
      result = "DW_OP_lit27";
      break;
    case 76:
      result = "DW_OP_lit28";
      break;
    case 77:
      result = "DW_OP_lit29";
      break;
    case 78:
      result = "DW_OP_lit30";
      break;
    case 79:
      result = "DW_OP_lit31";
      break;
    case 80:
      result = "DW_OP_reg0";
      break;
    case 81:
      result = "DW_OP_reg1";
      break;
    case 82:
      result = "DW_OP_reg2";
      break;
    case 83:
      result = "DW_OP_reg3";
      break;
    case 84:
      result = "DW_OP_reg4";
      break;
    case 85:
      result = "DW_OP_reg5";
      break;
    case 86:
      result = "DW_OP_reg6";
      break;
    case 87:
      result = "DW_OP_reg7";
      break;
    case 88:
      result = "DW_OP_reg8";
      break;
    case 89:
      result = "DW_OP_reg9";
      break;
    case 90:
      result = "DW_OP_reg10";
      break;
    case 91:
      result = "DW_OP_reg11";
      break;
    case 92:
      result = "DW_OP_reg12";
      break;
    case 93:
      result = "DW_OP_reg13";
      break;
    case 94:
      result = "DW_OP_reg14";
      break;
    case 95:
      result = "DW_OP_reg15";
      break;
    case 96:
      result = "DW_OP_reg16";
      break;
    case 97:
      result = "DW_OP_reg17";
      break;
    case 98:
      result = "DW_OP_reg18";
      break;
    case 99:
      result = "DW_OP_reg19";
      break;
    case 100:
      result = "DW_OP_reg20";
      break;
    case 101:
      result = "DW_OP_reg21";
      break;
    case 102:
      result = "DW_OP_reg22";
      break;
    case 103:
      result = "DW_OP_reg23";
      break;
    case 104:
      result = "DW_OP_reg24";
      break;
    case 105:
      result = "DW_OP_reg25";
      break;
    case 106:
      result = "DW_OP_reg26";
      break;
    case 107:
      result = "DW_OP_reg27";
      break;
    case 108:
      result = "DW_OP_reg28";
      break;
    case 109:
      result = "DW_OP_reg29";
      break;
    case 110:
      result = "DW_OP_reg30";
      break;
    case 111:
      result = "DW_OP_reg31";
      break;
    case 112:
      result = "DW_OP_breg0";
      break;
    case 113:
      result = "DW_OP_breg1";
      break;
    case 114:
      result = "DW_OP_breg2";
      break;
    case 115:
      result = "DW_OP_breg3";
      break;
    case 116:
      result = "DW_OP_breg4";
      break;
    case 117:
      result = "DW_OP_breg5";
      break;
    case 118:
      result = "DW_OP_breg6";
      break;
    case 119:
      result = "DW_OP_breg7";
      break;
    case 120:
      result = "DW_OP_breg8";
      break;
    case 121:
      result = "DW_OP_breg9";
      break;
    case 122:
      result = "DW_OP_breg10";
      break;
    case 123:
      result = "DW_OP_breg11";
      break;
    case 124:
      result = "DW_OP_breg12";
      break;
    case 125:
      result = "DW_OP_breg13";
      break;
    case 126:
      result = "DW_OP_breg14";
      break;
    case 127:
      result = "DW_OP_breg15";
      break;
    case 128:
      result = "DW_OP_breg16";
      break;
    case 129:
      result = "DW_OP_breg17";
      break;
    case 130:
      result = "DW_OP_breg18";
      break;
    case 131:
      result = "DW_OP_breg19";
      break;
    case 132:
      result = "DW_OP_breg20";
      break;
    case 133:
      result = "DW_OP_breg21";
      break;
    case 134:
      result = "DW_OP_breg22";
      break;
    case 135:
      result = "DW_OP_breg23";
      break;
    case 136:
      result = "DW_OP_breg24";
      break;
    case 137:
      result = "DW_OP_breg25";
      break;
    case 138:
      result = "DW_OP_breg26";
      break;
    case 139:
      result = "DW_OP_breg27";
      break;
    case 140:
      result = "DW_OP_breg28";
      break;
    case 141:
      result = "DW_OP_breg29";
      break;
    case 142:
      result = "DW_OP_breg30";
      break;
    case 143:
      result = "DW_OP_breg31";
      break;
    case 144:
      result = "DW_OP_regx";
      break;
    case 145:
      result = "DW_OP_fbreg";
      break;
    case 146:
      result = "DW_OP_bregx";
      break;
    case 147:
      result = "DW_OP_piece";
      break;
    case 148:
      result = "DW_OP_deref_size";
      break;
    case 149:
      result = "DW_OP_xderef_size";
      break;
    case 150:
      result = "DW_OP_nop";
      break;
    case 151:
      result = "DW_OP_push_object_address";
      break;
    case 152:
      result = "DW_OP_call2";
      break;
    case 153:
      result = "DW_OP_call4";
      break;
    case 154:
      result = "DW_OP_call_ref";
      break;
    case 155:
      result = "DW_OP_form_tls_address";
      break;
    case 156:
      result = "DW_OP_call_frame_cfa";
      break;
    case 157:
      result = "DW_OP_bit_piece";
      break;
    case 158:
      result = "DW_OP_implicit_value";
      break;
    case 159:
      result = "DW_OP_stack_value";
      break;
    case 160:
      result = "DW_OP_implicit_pointer";
      break;
    case 161:
      result = "DW_OP_addrx";
      break;
    case 162:
      result = "DW_OP_constx";
      break;
    case 163:
      result = "DW_OP_entry_value";
      break;
    case 164:
      result = "DW_OP_const_type";
      break;
    case 165:
      result = "DW_OP_regval_type";
      break;
    case 166:
      result = "DW_OP_deref_type";
      break;
    case 167:
      result = "DW_OP_xderef_type";
      break;
    case 168:
      result = "DW_OP_convert";
      break;
    case 169:
      result = "DW_OP_reinterpret";
      break;
    case 224:
      result = "DW_OP_GNU_push_tls_address";
      break;
    case 225:
      result = "DW_OP_HP_is_value";
      break;
    case 226:
      result = "DW_OP_HP_fltconst4";
      break;
    case 227:
      result = "DW_OP_HP_fltconst8";
      break;
    case 228:
      result = "DW_OP_HP_mod_range";
      break;
    case 229:
      result = "DW_OP_HP_unmod_range";
      break;
    case 230:
      result = "DW_OP_HP_tls";
      break;
    case 232:
      result = "DW_OP_INTEL_bit_piece";
      break;
    case 233:
      result = "DW_OP_LLVM_user";
      break;
    case 237:
      result = "DW_OP_WASM_location";
      break;
    case 238:
      result = "DW_OP_WASM_location_int";
      break;
    case 240:
      result = "DW_OP_APPLE_uninit";
      break;
    case 243:
      result = "DW_OP_GNU_entry_value";
      break;
    case 248:
      result = "DW_OP_PGI_omp_thread_num";
      break;
    case 251:
      result = "DW_OP_GNU_addr_index";
      break;
    case 252:
      result = "DW_OP_GNU_const_index";
      break;
    default:
      switch(v1)
      {
        case 4096:
          result = "DW_OP_LLVM_fragment";
          break;
        case 4097:
          result = "DW_OP_LLVM_convert";
          break;
        case 4098:
          result = "DW_OP_LLVM_tag_offset";
          break;
        case 4099:
          result = "DW_OP_LLVM_entry_value";
          break;
        case 4100:
          result = "DW_OP_LLVM_implicit_pointer";
          break;
        case 4101:
          result = "DW_OP_LLVM_arg";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

const char *llvm::dwarf::AttributeEncodingString(llvm::dwarf *this)
{
  int v1;
  const char *result;

  v1 = (int)this;
  result = 0;
  switch(v1)
  {
    case 1:
      result = "DW_ATE_address";
      break;
    case 2:
      result = "DW_ATE_BOOLean";
      break;
    case 3:
      result = "DW_ATE_complex_float";
      break;
    case 4:
      result = "DW_ATE_float";
      break;
    case 5:
      result = "DW_ATE_signed";
      break;
    case 6:
      result = "DW_ATE_signed_char";
      break;
    case 7:
      result = "DW_ATE_unsigned";
      break;
    case 8:
      result = "DW_ATE_unsigned_char";
      break;
    case 9:
      result = "DW_ATE_imaginary_float";
      break;
    case 10:
      result = "DW_ATE_packed_decimal";
      break;
    case 11:
      result = "DW_ATE_numeric_string";
      break;
    case 12:
      result = "DW_ATE_edited";
      break;
    case 13:
      result = "DW_ATE_signed_fixed";
      break;
    case 14:
      result = "DW_ATE_unsigned_fixed";
      break;
    case 15:
      result = "DW_ATE_decimal_float";
      break;
    case 16:
      result = "DW_ATE_UTF";
      break;
    case 17:
      result = "DW_ATE_UCS";
      break;
    case 18:
      result = "DW_ATE_ASCII";
      break;
    case 129:
      result = "DW_ATE_HP_complex_float";
      break;
    case 130:
      result = "DW_ATE_HP_float128";
      break;
    case 131:
      result = "DW_ATE_HP_complex_float128";
      break;
    case 132:
      result = "DW_ATE_HP_floathpintel";
      break;
    case 133:
      result = "DW_ATE_HP_imaginary_float90";
      break;
    case 134:
      result = "DW_ATE_HP_imaginary_float128";
      break;
    default:
      return result;
  }
  return result;
}

const char *llvm::dwarf::LanguageString(llvm::dwarf *this)
{
  int v1;
  const char *result;
  const char *v3;
  const char *v4;

  v1 = (int)this;
  result = 0;
  if (v1 > 0x8000)
  {
    v3 = "DW_LANG_BORLAND_Delphi";
    if (v1 != 45056)
      v3 = 0;
    if (v1 == 36439)
      v4 = "DW_LANG_GOOGLE_RenderScript";
    else
      v4 = v3;
    if (v1 == 32769)
      return "DW_LANG_Mips_Assembler";
    else
      return v4;
  }
  else
  {
    switch(v1)
    {
      case 1:
        result = "DW_LANG_C89";
        break;
      case 2:
        result = "DW_LANG_C";
        break;
      case 3:
        result = "DW_LANG_Ada83";
        break;
      case 4:
        result = "DW_LANG_C_plus_plus";
        break;
      case 5:
        result = "DW_LANG_Cobol74";
        break;
      case 6:
        result = "DW_LANG_Cobol85";
        break;
      case 7:
        result = "DW_LANG_Fortran77";
        break;
      case 8:
        result = "DW_LANG_Fortran90";
        break;
      case 9:
        result = "DW_LANG_Pascal83";
        break;
      case 10:
        result = "DW_LANG_Modula2";
        break;
      case 11:
        result = "DW_LANG_Java";
        break;
      case 12:
        result = "DW_LANG_C99";
        break;
      case 13:
        result = "DW_LANG_Ada95";
        break;
      case 14:
        result = "DW_LANG_Fortran95";
        break;
      case 15:
        result = "DW_LANG_PLI";
        break;
      case 16:
        result = "DW_LANG_ObjC";
        break;
      case 17:
        result = "DW_LANG_ObjC_plus_plus";
        break;
      case 18:
        result = "DW_LANG_UPC";
        break;
      case 19:
        result = "DW_LANG_D";
        break;
      case 20:
        result = "DW_LANG_Python";
        break;
      case 21:
        result = "DW_LANG_OpenCL";
        break;
      case 22:
        result = "DW_LANG_Go";
        break;
      case 23:
        result = "DW_LANG_Modula3";
        break;
      case 24:
        result = "DW_LANG_Haskell";
        break;
      case 25:
        result = "DW_LANG_C_plus_plus_03";
        break;
      case 26:
        result = "DW_LANG_C_plus_plus_11";
        break;
      case 27:
        result = "DW_LANG_OCaml";
        break;
      case 28:
        result = "DW_LANG_Rust";
        break;
      case 29:
        result = "DW_LANG_C11";
        break;
      case 30:
        result = "DW_LANG_Swift";
        break;
      case 31:
        result = "DW_LANG_Julia";
        break;
      case 32:
        result = "DW_LANG_Dylan";
        break;
      case 33:
        result = "DW_LANG_C_plus_plus_14";
        break;
      case 34:
        result = "DW_LANG_Fortran03";
        break;
      case 35:
        result = "DW_LANG_Fortran08";
        break;
      case 36:
        result = "DW_LANG_RenderScript";
        break;
      case 37:
        result = "DW_LANG_BLISS";
        break;
      case 38:
        result = "DW_LANG_Kotlin";
        break;
      case 39:
        result = "DW_LANG_Zig";
        break;
      case 40:
        result = "DW_LANG_Crystal";
        break;
      case 42:
        result = "DW_LANG_C_plus_plus_17";
        break;
      case 43:
        result = "DW_LANG_C_plus_plus_20";
        break;
      case 44:
        result = "DW_LANG_C17";
        break;
      case 45:
        result = "DW_LANG_Fortran18";
        break;
      case 46:
        result = "DW_LANG_Ada2005";
        break;
      case 47:
        result = "DW_LANG_Ada2012";
        break;
      case 51:
        result = "DW_LANG_Mojo";
        break;
      default:
        return result;
    }
  }
  return result;
}

const char *llvm::dwarf::ConventionString(llvm::dwarf *this)
{
  int v1;
  const char *result;

  v1 = (int)this;
  result = 0;
  switch(v1)
  {
    case 1:
      result = "DW_CC_normal";
      break;
    case 2:
      result = "DW_CC_program";
      break;
    case 3:
      result = "DW_CC_nocall";
      break;
    case 4:
      result = "DW_CC_pass_by_reference";
      break;
    case 5:
      result = "DW_CC_pass_by_value";
      break;
    case 64:
      result = "DW_CC_GNU_renesas_sh";
      break;
    case 65:
      result = "DW_CC_GNU_borland_fastcall_i386";
      break;
    case 176:
      result = "DW_CC_BORLAND_safecall";
      break;
    case 177:
      result = "DW_CC_BORLAND_stdcall";
      break;
    case 178:
      result = "DW_CC_BORLAND_pascal";
      break;
    case 179:
      result = "DW_CC_BORLAND_msfastcall";
      break;
    case 180:
      result = "DW_CC_BORLAND_msreturn";
      break;
    case 181:
      result = "DW_CC_BORLAND_thiscall";
      break;
    case 182:
      result = "DW_CC_BORLAND_fastcall";
      break;
    case 192:
      result = "DW_CC_LLVM_vectorcall";
      break;
    case 193:
      result = "DW_CC_LLVM_Win64";
      break;
    case 194:
      result = "DW_CC_LLVM_X86_64SysV";
      break;
    case 195:
      result = "DW_CC_LLVM_AAPCS";
      break;
    case 196:
      result = "DW_CC_LLVM_AAPCS_VFP";
      break;
    case 197:
      result = "DW_CC_LLVM_IntelOclBicc";
      break;
    case 198:
      result = "DW_CC_LLVM_SpirFunction";
      break;
    case 199:
      result = "DW_CC_LLVM_OpenCLKernel";
      break;
    case 200:
      result = "DW_CC_LLVM_Swift";
      break;
    case 201:
      result = "DW_CC_LLVM_PreserveMost";
      break;
    case 202:
      result = "DW_CC_LLVM_PreserveAll";
      break;
    case 203:
      result = "DW_CC_LLVM_X86RegCall";
      break;
    case 204:
      result = "DW_CC_LLVM_M68kRTD";
      break;
    case 205:
      result = "DW_CC_LLVM_SwiftTail";
      break;
    case 255:
      result = "DW_CC_GDB_IBM_OpenCL";
      break;
    default:
      return result;
  }
  return result;
}

const char *llvm::dwarf::MacinfoString(llvm::dwarf *this)
{
  int v1;
  const char *result;

  v1 = (_DWORD)this + 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = "DW_MACINFO_invalid";
      break;
    case 1:
      return result;
    case 2:
      result = "DW_MACINFO_define";
      break;
    case 3:
      result = "DW_MACINFO_undef";
      break;
    case 4:
      result = "DW_MACINFO_start_file";
      break;
    case 5:
      result = "DW_MACINFO_end_file";
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t llvm::identify_magic(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t result;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  unint64_t v14;
  BOOL v15;
  int v17;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;

  if (a2 < 4)
    return 0;
  if (a2 >= 6)
  {
    v3 = *(_DWORD *)a1 == 1230192963 && a1[2] == 14916;
    if (v3)
      return 41;
  }
  v4 = 35;
  switch(*(_BYTE *)a1)
  {
    case 0:
      if (*(_DWORD *)a1 != -65536)
      {
        if (a2 >= 0x10 && *(_QWORD *)a1 == 0x2000000000 && *((_QWORD *)a1 + 1) == 0xFFFF0000FFFFLL)
          return 30;
        if (!*((_BYTE *)a1 + 1))
          return 27;
        if (*(_DWORD *)a1 == 1836278016)
          return 33;
        return 0;
      }
      if (a2 < 0x1C)
        return 28;
      if (*(_QWORD *)(a1 + 6) != 0x4BA9BAEED1BAA1C7 || *(_QWORD *)(a1 + 10) != 0xB8DCA46AF6FA20AFLL)
      {
        if (*(_QWORD *)(a1 + 6) ^ 0x4DABD9A50CB3FE38 | *(_QWORD *)(a1 + 10) ^ 0xC2532622B6D69BACLL)
          return 28;
        else
          return 26;
      }
      return 27;
    case 1:
      if (*a1 == 57089)
        return 31;
      if ((__int16)*a1 != -2303)
        return 0;
      return 32;
    case 3:
      if (*a1 ^ 0xF003 | *((unsigned __int8 *)a1 + 2))
        return 0;
      return 8;
    case 0x10:
      if (*(_DWORD *)a1 != -1391395056)
        return 0;
      return 37;
    case 0x21:
      if (a2 < 8 || *(_QWORD *)a1 != 0xA3E686372613C21 && *(_QWORD *)a1 != 0xA3E6E6968743C21)
        return 0;
      return 2;
    case 0x2D:
      if (a2 < 9)
        return 0;
      if (*(_QWORD *)a1 != 0x70617421202D2D2DLL || *((_BYTE *)a1 + 8) != 105)
      {
        if (a2 < 0xA)
          return 0;
        if (*(_QWORD *)a1 != 0x686372610A2D2D2DLL || a1[4] != 14963)
          return 0;
      }
      return 35;
    case 0x3C:
      if (a2 < 8 || *(_QWORD *)a1 != 0xA3E66616769623CLL)
        return 0;
      return 2;
    case 0x41:
    case 0x4E:
      if (*((unsigned __int8 *)a1 + 1) != 166)
        return 0;
      return 27;
    case 0x42:
      return *(_DWORD *)a1 == -557825214;
    case 0x43:
      if (*(_DWORD *)a1 != 1112490819)
        return 0;
      return 40;
    case 0x44:
      if (*(_DWORD *)a1 != 1128421444)
        return 0;
      return 38;
    case 0x4C:
    case 0xC4:
      goto LABEL_10;
    case 0x4D:
      if (a2 >= 0x40 && *a1 == 23117)
      {
        v14 = *((unsigned int *)a1 + 15);
        if (a2 < v14)
          v14 = a2;
        if (a2 - v14 >= 4 && *(_DWORD *)((char *)a1 + v14) == 17744)
          return 29;
      }
      else if (a2 < 0x1A)
      {
        goto LABEL_120;
      }
      if (*(_QWORD *)a1 == 0x666F736F7263694DLL
        && *((_QWORD *)a1 + 1) == 0x202B2B432F432074
        && *((_QWORD *)a1 + 2) == 0x30302E372046534DLL
        && a1[12] == 2573)
      {
        return 34;
      }
LABEL_120:
      if (*(_DWORD *)a1 == 1347241037)
        return 25;
      if (*(_DWORD *)a1 != 1112298573)
        return 0;
      return 42;
    case 0x50:
    case 0x66:
    case 0x83:
    case 0x84:
    case 0xF0:
      if (*(_DWORD *)a1 == -1168773808)
        return 36;
LABEL_10:
      if (*((_BYTE *)a1 + 1) != 1)
      {
LABEL_11:
        if (*((_BYTE *)a1 + 1) != 2)
          return 0;
      }
      return 27;
    case 0x5F:
      if (a2 < 0x19)
        return 0;
      v15 = *(_QWORD *)a1 == 0x5F474E414C435F5FLL && *((_QWORD *)a1 + 1) == 0x5F44414F4C46464FLL;
      if (!v15 || *((_QWORD *)a1 + 2) != 0x5F5F454C444E5542)
        return 0;
      return 39;
    case 0x64:
      v17 = *((unsigned __int8 *)a1 + 1);
      if (v17 == 170 || v17 == 134)
        return 27;
      else
        return 0;
    case 0x68:
    case 0x90:
      goto LABEL_11;
    case 0x7B:
      return v4;
    case 0x7F:
      if (a2 < 0x12 || *(_DWORD *)a1 != 1179403647)
        return 0;
      v19 = *((unsigned __int8 *)a1 + 5);
      v20 = 16;
      if (v19 != 2)
        v20 = 17;
      v21 = *((unsigned __int8 *)a1 + v20);
      v4 = 3;
      if (v21)
        return v4;
      v3 = v19 == 2;
      v25 = 16;
      if (v3)
        v25 = 17;
      v26 = *((char *)a1 + v25);
      v27 = v26 - 1;
      v28 = v26 + 3;
      if (v27 >= 4)
        return 3;
      else
        return v28;
    case 0xCA:
      if (*(_DWORD *)a1 == -1095041334)
      {
        if (a2 < 8)
          return 0;
      }
      else if (a2 < 8 || *(_DWORD *)a1 != -1078264118)
      {
        return 0;
      }
      if (*((char *)a1 + 7) >= 43)
        return 0;
      return 22;
    case 0xCB:
      if (*(_DWORD *)a1 != -1095041333)
        return 0;
      return 23;
    case 0xCE:
    case 0xCF:
    case 0xFE:
      if (*(_DWORD *)a1 == -822415874 || *(_DWORD *)a1 == -805638658)
      {
        v9 = 32;
        if (*((unsigned __int8 *)a1 + 3) == 206)
          v9 = 28;
        if (a2 < v9)
          return 0;
        v6 = 15;
        v7 = 14;
        v8 = 13;
      }
      else
      {
        if (*(_DWORD *)a1 != -17958194 && *(_DWORD *)a1 != -17958193)
          return 0;
        v5 = 32;
        if (*(unsigned __int8 *)a1 == 206)
          v5 = 28;
        if (a2 < v5)
          return 0;
        v6 = 12;
        v7 = 13;
        v8 = 14;
      }
      v10 = ((*((unsigned __int8 *)a1 + v8) << 12) | (*((unsigned __int8 *)a1 + v7) << 8) | *((char *)a1 + v6)) - 1;
      if (v10 >= 0xEu)
        return 0;
      result = dword_181285434[(__int16)v10];
      break;
    case 0xDE:
      return *(_DWORD *)a1 == 186106078;
    default:
      return 0;
  }
  return result;
}

char *llvm::wasm::sectionTypeToString(llvm::wasm *this)
{
  return off_1E0E76550[(int)this];
}

const char *llvm::XCOFF::getMappingClassString(unsigned int a1)
{
  if (a1 > 0x16)
    return "Unknown";
  else
    return off_1E0E765C0[(char)a1];
}

const char *llvm::XCOFF::getRelocationTypeString(unsigned int a1)
{
  if (a1 > 0x31)
    return "Unknown";
  else
    return off_1E0E76678[(char)a1];
}

void llvm::SimpleBitstreamCursor::Read(llvm::SimpleBitstreamCursor *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int8x8_t *v14;
  uint64_t v15;
  int8x8_t *v16;
  unint64_t v17;
  BOOL v18;
  int8x8_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int64x2_t v35;
  unint64_t v36;
  int8x16_t v37;
  int64x2_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int64x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int64x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int64x2_t v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint32x4_t v50;
  uint64x2_t v51;
  uint64x2_t v52;
  uint16x8_t v53;
  uint32x4_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint32x4_t v57;
  uint64x2_t v58;
  uint64x2_t v59;
  uint64x2_t v60;
  uint32x4_t v61;
  uint64x2_t v62;
  int8x16_t v63;
  int8x8_t v64;
  int64x2_t v65;
  uint64_t v66;
  unint64_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint8x8_t *v74;
  int8x16_t v75;
  unint64_t v76;
  int64x2_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint8x8_t v80;
  uint16x8_t v81;
  uint32x4_t v82;
  uint64x2_t v83;
  uint64x2_t v84;
  uint64x2_t v85;
  uint32x4_t v86;
  uint64x2_t v87;
  int8x16_t v88;
  int8x8_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;

  v5 = (int *)((char *)this + 32);
  v6 = *((_DWORD *)this + 8);
  if (v6 >= a2)
  {
    v8 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v8 >> a2;
    *((_DWORD *)this + 8) = v6 - a2;
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v8 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
    return;
  }
  if (v6)
    v7 = *((_QWORD *)this + 3);
  else
    v7 = 0;
  v9 = a2 - v6;
  v92 = a2 - v6;
  v10 = (_QWORD *)((char *)this + 16);
  v11 = *((_QWORD *)this + 2);
  v12 = *((_QWORD *)this + 1);
  v13 = v12 - v11;
  if (v12 > v11)
  {
    v14 = (int8x8_t *)((char *)this + 24);
    v15 = *(_QWORD *)this;
    v16 = (int8x8_t *)(*(_QWORD *)this + v11);
    if (v12 >= v11 + 8)
    {
      *v14 = *v16;
      v13 = 8;
      goto LABEL_26;
    }
    *v14 = 0;
    if (!v13)
      goto LABEL_26;
    v17 = (v12 - v11);
    if (v13 < 8uLL || ((unint64_t)v14 < v15 + v11 + v17 ? (v18 = v16 >= (int8x8_t *)this + 4) : (v18 = 1), !v18))
    {
      v20 = 0;
      v19 = 0;
      goto LABEL_24;
    }
    if (v17 >= 0x10)
    {
      v20 = v17 - (v13 & 0xF);
      v29 = (int64x2_t)xmmword_181267BA0;
      v30 = (int64x2_t)xmmword_181267BB0;
      v31 = (int64x2_t)xmmword_181267BC0;
      v32 = (int64x2_t)xmmword_181267BD0;
      v33 = 0uLL;
      v34 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
      v35 = vdupq_n_s64(0x10uLL);
      v36 = v20;
      v37 = 0uLL;
      v38 = (int64x2_t)xmmword_1812332B0;
      v39 = 0uLL;
      v40 = 0uLL;
      v41 = (int64x2_t)xmmword_181267BE0;
      v42 = 0uLL;
      v43 = 0uLL;
      v44 = (int64x2_t)xmmword_181233290;
      v45 = 0uLL;
      v46 = 0uLL;
      v47 = (int64x2_t)xmmword_181233120;
      do
      {
        v48 = *(uint8x16_t *)v16->i8;
        v16 += 2;
        v49 = vmovl_u8(*(uint8x8_t *)v48.i8);
        v50 = vmovl_high_u16(v49);
        v51.i64[0] = v50.u32[2];
        v51.i64[1] = v50.u32[3];
        v52 = v51;
        v53 = vmovl_high_u8(v48);
        v54 = vmovl_u16(*(uint16x4_t *)v53.i8);
        v51.i64[0] = v54.u32[0];
        v51.i64[1] = v54.u32[1];
        v55 = v51;
        v51.i64[0] = v50.u32[0];
        v51.i64[1] = v50.u32[1];
        v56 = v51;
        v57 = vmovl_u16(*(uint16x4_t *)v49.i8);
        v51.i64[0] = v57.u32[2];
        v51.i64[1] = v57.u32[3];
        v58 = v51;
        v51.i64[0] = v54.u32[2];
        v51.i64[1] = v54.u32[3];
        v59 = v51;
        v51.i64[0] = v57.u32[0];
        v51.i64[1] = v57.u32[1];
        v60 = v51;
        v61 = vmovl_high_u16(v53);
        v51.i64[0] = v61.u32[0];
        v51.i64[1] = v61.u32[1];
        v62 = v51;
        v51.i64[0] = v61.u32[2];
        v51.i64[1] = v61.u32[3];
        v40 = vorrq_s8((int8x16_t)vshlq_u64(v52, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v38, 3uLL), v34)), v40);
        v42 = vorrq_s8((int8x16_t)vshlq_u64(v55, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v32, 3uLL), v34)), v42);
        v39 = vorrq_s8((int8x16_t)vshlq_u64(v56, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v41, 3uLL), v34)), v39);
        v37 = vorrq_s8((int8x16_t)vshlq_u64(v58, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v44, 3uLL), v34)), v37);
        v43 = vorrq_s8((int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v31, 3uLL), v34)), v43);
        v33 = vorrq_s8((int8x16_t)vshlq_u64(v60, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v47, 3uLL), v34)), v33);
        v45 = vorrq_s8((int8x16_t)vshlq_u64(v62, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v30, 3uLL), v34)), v45);
        v46 = vorrq_s8((int8x16_t)vshlq_u64(v51, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v29, 3uLL), v34)), v46);
        v41 = vaddq_s64(v41, v35);
        v44 = vaddq_s64(v44, v35);
        v47 = vaddq_s64(v47, v35);
        v38 = vaddq_s64(v38, v35);
        v32 = vaddq_s64(v32, v35);
        v31 = vaddq_s64(v31, v35);
        v30 = vaddq_s64(v30, v35);
        v29 = vaddq_s64(v29, v35);
        v36 -= 16;
      }
      while (v36);
      v63 = vorrq_s8(vorrq_s8(vorrq_s8(v33, v42), vorrq_s8(v39, v45)), vorrq_s8(vorrq_s8(v37, v43), vorrq_s8(v40, v46)));
      v64 = vorr_s8(*(int8x8_t *)v63.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
      *v14 = v64;
      if ((v13 & 0xF) == 0)
        goto LABEL_26;
      v19 = v64;
      if ((v13 & 0xF) < 8uLL)
        goto LABEL_24;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v65 = vdupq_n_s64(v20);
    v66 = v20 + v11;
    v67 = v20 + (v13 & 7);
    v20 = v17 - (v13 & 7);
    v68 = vaddq_s64(v65, (int64x2_t)xmmword_1812332B0);
    v69 = vaddq_s64(v65, (int64x2_t)xmmword_181267BE0);
    v70 = vaddq_s64(v65, (int64x2_t)xmmword_181233290);
    v71 = vaddq_s64(v65, (int64x2_t)xmmword_181233120);
    v72 = 0uLL;
    v73 = (int8x16_t)(unint64_t)v19;
    v74 = (uint8x8_t *)(v15 + v66);
    v75 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
    v76 = v67 - v17;
    v77 = vdupq_n_s64(8uLL);
    v78 = 0uLL;
    v79 = 0uLL;
    do
    {
      v80 = *v74++;
      v81 = vmovl_u8(v80);
      v82 = vmovl_high_u16(v81);
      v83.i64[0] = v82.u32[2];
      v83.i64[1] = v82.u32[3];
      v84 = v83;
      v83.i64[0] = v82.u32[0];
      v83.i64[1] = v82.u32[1];
      v85 = v83;
      v86 = vmovl_u16(*(uint16x4_t *)v81.i8);
      v83.i64[0] = v86.u32[2];
      v83.i64[1] = v86.u32[3];
      v87 = v83;
      v83.i64[0] = v86.u32[0];
      v83.i64[1] = v86.u32[1];
      v79 = vorrq_s8((int8x16_t)vshlq_u64(v84, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v68, 3uLL), v75)), v79);
      v78 = vorrq_s8((int8x16_t)vshlq_u64(v85, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v69, 3uLL), v75)), v78);
      v72 = vorrq_s8((int8x16_t)vshlq_u64(v87, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v70, 3uLL), v75)), v72);
      v73 = vorrq_s8((int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v71, 3uLL), v75)), v73);
      v69 = vaddq_s64(v69, v77);
      v70 = vaddq_s64(v70, v77);
      v71 = vaddq_s64(v71, v77);
      v68 = vaddq_s64(v68, v77);
      v76 += 8;
    }
    while (v76);
    v88 = vorrq_s8(vorrq_s8(v73, v78), vorrq_s8(v72, v79));
    v89 = vorr_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL));
    *v14 = v89;
    if ((v13 & 7) != 0)
    {
      v19 = v89;
LABEL_24:
      v25 = v17 - v20;
      v26 = 8 * v20;
      v27 = (unsigned __int8 *)(v15 + v20 + v11);
      do
      {
        v28 = *v27++;
        *(_QWORD *)&v19 |= (unint64_t)v28 << (v26 & 0xF8);
        *v14 = v19;
        v26 += 8;
        --v25;
      }
      while (v25);
    }
LABEL_26:
    *v10 = v11 + v13;
    *v5 = 8 * v13;
    v23 = 8 * v13 - v9;
    if (8 * v13 < v9)
      goto LABEL_27;
LABEL_21:
    v24 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v24 >> v9;
    *((_DWORD *)this + 8) = v23;
    v21 = ((v24 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) << v6) | v7;
    v22 = *(_BYTE *)(a3 + 8) & 0xFE;
    goto LABEL_22;
  }
  v93 = *((_QWORD *)this + 1);
  llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v10, &v93, (uint64_t *)&v91);
  v21 = v91;
  if (!v91)
  {
    v23 = *v5 - v9;
    if (*v5 < v9)
    {
LABEL_27:
      llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v5, (int *)&v92, (uint64_t *)&v90);
      *(_BYTE *)(a3 + 8) |= 1u;
      v21 = v90;
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  v22 = *(_BYTE *)(a3 + 8) | 1;
LABEL_22:
  *(_BYTE *)(a3 + 8) = v22;
LABEL_28:
  *(_QWORD *)a3 = v21;
}

void llvm::BitstreamCursor::advance(llvm::BitstreamCursor *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a2 & 2) == 0)
  {
    while (*((_DWORD *)this + 8) || *((_QWORD *)this + 1) > *((_QWORD *)this + 2))
    {
      llvm::SimpleBitstreamCursor::Read(this, *((_DWORD *)this + 9), (uint64_t)&v15);
      if ((v16 & 1) != 0)
        goto LABEL_15;
      v6 = v15;
      if ((_DWORD)v15 != 2)
      {
        if (!(_DWORD)v15)
          goto LABEL_21;
        if ((_DWORD)v15 != 1)
          goto LABEL_27;
        goto LABEL_19;
      }
      llvm::BitstreamCursor::ReadAbbrevRecord((char **)this, &v15);
      v7 = v15;
      if (v15)
        goto LABEL_16;
    }
    goto LABEL_26;
  }
  if (!*((_DWORD *)this + 8) && *((_QWORD *)this + 1) <= *((_QWORD *)this + 2))
    goto LABEL_26;
  llvm::SimpleBitstreamCursor::Read(this, *((_DWORD *)this + 9), (uint64_t)&v15);
  if ((v16 & 1) != 0)
  {
LABEL_15:
    v7 = v15;
LABEL_16:
    v8 = *(_BYTE *)(a3 + 8) | 1;
    goto LABEL_30;
  }
  v6 = v15;
  if ((_DWORD)v15 == 2)
  {
    v7 = 0x200000003;
    goto LABEL_29;
  }
  if ((_DWORD)v15 != 1)
  {
    if ((_DWORD)v15)
    {
LABEL_27:
      v9 = 3;
      goto LABEL_28;
    }
LABEL_21:
    if ((a2 & 1) != 0)
    {
LABEL_35:
      *(_BYTE *)(a3 + 8) &= ~1u;
      v7 = 1;
      goto LABEL_31;
    }
    if (*((_DWORD *)this + 18))
    {
      v10 = *((_DWORD *)this + 8);
      v11 = v10 >= 0x20;
      v12 = v10 - 32;
      if (v11)
      {
        *((_QWORD *)this + 3) >>= v12;
        v14 = 32;
      }
      else
      {
        v14 = 0;
      }
      *((_DWORD *)this + 8) = v14;
      llvm::BitstreamCursor::popBlockScope(this);
      goto LABEL_35;
    }
LABEL_26:
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = 0;
    return;
  }
LABEL_19:
  llvm::SimpleBitstreamCursor::ReadVBR(this, 8u, (uint64_t)&v15);
  if ((v16 & 1) == 0)
  {
    v6 = v15;
    v9 = 2;
LABEL_28:
    v7 = v9 | (v6 << 32);
LABEL_29:
    v8 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_30:
    *(_BYTE *)(a3 + 8) = v8;
LABEL_31:
    *(_QWORD *)a3 = v7;
    return;
  }
  v13 = v15;
  v15 = 0;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v13;
}

void llvm::createStringError<unsigned int,unsigned int>(unsigned int a1@<W0>, uint64_t a2@<X1>, int *a3@<X2>, int *a4@<X3>, uint64_t *a5@<X8>)
{
  const std::error_category *v10;
  int v11;
  void **v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[2];
  int v26;
  int v27;
  __int16 v28;

  v10 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  v15 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v14 = &unk_1E0E22B10;
  v22 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v14, 0, 0, 0);
  v25[0] = &unk_1E0E20320;
  v25[1] = a2;
  v11 = *a4;
  v26 = *a3;
  v27 = v11;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, (uint64_t)v25);
  v12 = v22;
  v13 = operator new(0x38uLL);
  v28 = 260;
  v25[0] = v12;
  *a5 = llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)v25, a1, (uint64_t)v10);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void llvm::createStringError<unsigned long,unsigned long>(unsigned int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  const std::error_category *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;

  v10 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  v15 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v14 = &unk_1E0E22B10;
  v22 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v14, 0, 0, 0);
  v25[0] = &unk_1E0E203C0;
  v25[1] = a2;
  v11 = *a4;
  v25[2] = *a3;
  v25[3] = v11;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, (uint64_t)v25);
  v12 = v22;
  v13 = operator new(0x38uLL);
  v26 = 260;
  v25[0] = v12;
  *a5 = llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)v25, a1, (uint64_t)v10);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::format_object<unsigned long,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t llvm::format_object<unsigned int,unsigned int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20));
}

void llvm::BitstreamCursor::popBlockScope(llvm::BitstreamCursor *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  char **v14;
  char *v15;
  char *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = (char *)this + 40;
  v3 = (char *)*((_QWORD *)this + 5);
  v4 = *((_QWORD *)this + 8) + 32 * *((unsigned int *)this + 18);
  *((_DWORD *)this + 9) = *(_DWORD *)(v4 - 32);
  if (v3)
  {
    v5 = (char *)*((_QWORD *)this + 6);
    v6 = v3;
    if (v5 != v3)
    {
      do
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v3);
      v6 = *(char **)v2;
    }
    *((_QWORD *)this + 6) = v3;
    operator delete(v6);
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
  }
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)(v4 - 24);
  *((_QWORD *)this + 7) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v4 - 24) = 0;
  *(_QWORD *)(v4 - 16) = 0;
  *(_QWORD *)(v4 - 8) = 0;
  v10 = (*((_DWORD *)this + 18) - 1);
  *((_DWORD *)this + 18) = v10;
  v11 = *((_QWORD *)this + 8) + 32 * v10;
  v13 = (void **)(v11 + 8);
  v12 = *(char **)(v11 + 8);
  if (v12)
  {
    v16 = *(char **)(v11 + 16);
    v14 = (char **)(v11 + 16);
    v15 = v16;
    v17 = v12;
    if (v16 != v12)
    {
      do
      {
        v18 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v15 -= 16;
      }
      while (v15 != v12);
      v17 = *v13;
    }
    *v14 = v12;
    operator delete(v17);
  }
}

void llvm::SimpleBitstreamCursor::ReadVBR(llvm::SimpleBitstreamCursor *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  std::error_code v16;

  v15 = *MEMORY[0x1E0C80C00];
  llvm::SimpleBitstreamCursor::Read(this, a2, (uint64_t)&v13);
  v6 = v14;
  if ((v14 & 1) != 0)
  {
LABEL_8:
    v11 = v13;
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v6 & 1;
    *(_QWORD *)a3 = v11;
  }
  else
  {
    v7 = v13;
    v8 = 1 << (a2 - 1);
    if ((v13 & v8) != 0)
    {
      v9 = (v8 - 1) & v13;
      v10 = a2 - 1;
      while (v10 < 0x20)
      {
        llvm::SimpleBitstreamCursor::Read(this, a2, (uint64_t)&v13);
        v6 = v14;
        if ((v14 & 1) != 0)
          goto LABEL_8;
        v9 |= (((_DWORD)v8 - 1) & v13) << v10;
        v10 += a2 - 1;
        if ((v13 & v8) == 0)
        {
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_DWORD *)a3 = v9;
          return;
        }
      }
      *(_QWORD *)&v16.__val_ = std::generic_category();
      v16.__cat_ = (const std::error_category *)"Unterminated VBR";
      llvm::createStringError((llvm *)0x5C, v16, &v12);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = v7;
    }
  }
}

void std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
LABEL_68:
      abort();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_58:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_58;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_58;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void llvm::BitstreamBlockInfo::BlockInfo::~BlockInfo(llvm::BitstreamBlockInfo::BlockInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = (void *)*((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 55) < 0)
  {
    operator delete(*((void **)this + 4));
    v5 = (char *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  v6 = (char *)*((_QWORD *)this + 2);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)*((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 2) = v5;
  operator delete(v7);
}

void llvm::BitstreamCursor::~BitstreamCursor(llvm::BitstreamCursor *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (char *)*((_QWORD *)this + 8);
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3)
  {
    v4 = &v2[32 * v3];
    do
    {
      v6 = *((_QWORD *)v4 - 3);
      if (v6)
      {
        v7 = *((_QWORD *)v4 - 2);
        v5 = (void *)*((_QWORD *)v4 - 3);
        if (v7 != v6)
        {
          do
          {
            v8 = *(std::__shared_weak_count **)(v7 - 8);
            if (v8)
            {
              p_shared_owners = (unint64_t *)&v8->__shared_owners_;
              do
                v10 = __ldaxr(p_shared_owners);
              while (__stlxr(v10 - 1, p_shared_owners));
              if (!v10)
              {
                ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                std::__shared_weak_count::__release_weak(v8);
              }
            }
            v7 -= 16;
          }
          while (v7 != v6);
          v5 = (void *)*((_QWORD *)v4 - 3);
        }
        *((_QWORD *)v4 - 2) = v6;
        operator delete(v5);
      }
      v4 -= 32;
    }
    while (v4 != v2);
    v2 = (char *)*((_QWORD *)this + 8);
  }
  if (v2 != (char *)this + 80)
    free(v2);
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    v12 = *((_QWORD *)this + 6);
    v13 = (void *)*((_QWORD *)this + 5);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v11;
    operator delete(v13);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *i;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v64;
  int v65;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::assignRemote((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v15 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v64 = *(_DWORD *)(a2 + 8);
        v16 = &v4[32 * v5];
        do
        {
          *(_DWORD *)v15 = *(_DWORD *)v4;
          v18 = (void **)(v15 + 8);
          v19 = *((_QWORD *)v15 + 1);
          if (v19)
          {
            v20 = *((_QWORD *)v15 + 2);
            v17 = (void *)*((_QWORD *)v15 + 1);
            if (v20 != v19)
            {
              do
              {
                v21 = *(std::__shared_weak_count **)(v20 - 8);
                if (v21)
                {
                  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
                  do
                    v23 = __ldaxr(p_shared_owners);
                  while (__stlxr(v23 - 1, p_shared_owners));
                  if (!v23)
                  {
                    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                    std::__shared_weak_count::__release_weak(v21);
                  }
                }
                v20 -= 16;
              }
              while (v20 != v19);
              v17 = *v18;
            }
            *((_QWORD *)v15 + 2) = v19;
            operator delete(v17);
            *v18 = 0;
            *((_QWORD *)v15 + 2) = 0;
            *((_QWORD *)v15 + 3) = 0;
          }
          *(_OWORD *)(v15 + 8) = *(_OWORD *)(v4 + 8);
          *((_QWORD *)v15 + 3) = *((_QWORD *)v4 + 3);
          *((_QWORD *)v4 + 1) = 0;
          *((_QWORD *)v4 + 2) = 0;
          *((_QWORD *)v4 + 3) = 0;
          v4 += 32;
          v15 += 32;
        }
        while (v4 != v16);
        v24 = v15;
        v15 = *(char **)a1;
        v6 = *(unsigned int *)(a1 + 8);
        LODWORD(v5) = v64;
      }
      else
      {
        v24 = *(char **)a1;
      }
      for (i = &v15[32 * v6]; i != v24; i -= 32)
      {
        v38 = *((_QWORD *)i - 3);
        if (v38)
        {
          v39 = *((_QWORD *)i - 2);
          v37 = (void *)*((_QWORD *)i - 3);
          if (v39 != v38)
          {
            do
            {
              v40 = *(std::__shared_weak_count **)(v39 - 8);
              if (v40)
              {
                v41 = (unint64_t *)&v40->__shared_owners_;
                do
                  v42 = __ldaxr(v41);
                while (__stlxr(v42 - 1, v41));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
              }
              v39 -= 16;
            }
            while (v39 != v38);
            v37 = (void *)*((_QWORD *)i - 3);
          }
          *((_QWORD *)i - 2) = v38;
          operator delete(v37);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v43 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v43)
      {
        v44 = *(char **)a2;
        v45 = *(_QWORD *)a2 + 32 * v43;
        do
        {
          v47 = *(_QWORD *)(v45 - 24);
          if (v47)
          {
            v48 = *(_QWORD *)(v45 - 16);
            v46 = *(void **)(v45 - 24);
            if (v48 != v47)
            {
              do
              {
                v49 = *(std::__shared_weak_count **)(v48 - 8);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                v48 -= 16;
              }
              while (v48 != v47);
              v46 = *(void **)(v45 - 24);
            }
            *(_QWORD *)(v45 - 16) = v47;
            operator delete(v46);
          }
          v45 -= 32;
        }
        while ((char *)v45 != v44);
      }
      goto LABEL_100;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v65 = *(_DWORD *)(a2 + 8);
        v25 = &v4[32 * v6];
        v26 = *(char **)a1;
        do
        {
          *(_DWORD *)v26 = *(_DWORD *)v4;
          v28 = (void **)(v26 + 8);
          v29 = *((_QWORD *)v26 + 1);
          if (v29)
          {
            v30 = *((_QWORD *)v26 + 2);
            v27 = (void *)*((_QWORD *)v26 + 1);
            if (v30 != v29)
            {
              do
              {
                v31 = *(std::__shared_weak_count **)(v30 - 8);
                if (v31)
                {
                  v32 = (unint64_t *)&v31->__shared_owners_;
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 - 1, v32));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                    std::__shared_weak_count::__release_weak(v31);
                  }
                }
                v30 -= 16;
              }
              while (v30 != v29);
              v27 = *v28;
            }
            *((_QWORD *)v26 + 2) = v29;
            operator delete(v27);
            *v28 = 0;
            *((_QWORD *)v26 + 2) = 0;
            *((_QWORD *)v26 + 3) = 0;
          }
          *(_OWORD *)(v26 + 8) = *(_OWORD *)(v4 + 8);
          *((_QWORD *)v26 + 3) = *((_QWORD *)v4 + 3);
          *((_QWORD *)v4 + 1) = 0;
          *((_QWORD *)v4 + 2) = 0;
          *((_QWORD *)v4 + 3) = 0;
          v4 += 32;
          v26 += 32;
        }
        while (v4 != v25);
        LODWORD(v5) = v65;
        v34 = *(char **)a2;
        v35 = *(unsigned int *)(a2 + 8);
        if (v6 == v35)
          goto LABEL_86;
      }
      else
      {
        v6 = 0;
        v34 = *(char **)a2;
        v35 = *(unsigned int *)(a2 + 8);
        if (!*(_DWORD *)(a2 + 8))
          goto LABEL_86;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = *(_QWORD *)a1 + 32 * v6;
        do
        {
          v10 = *(_QWORD *)(v8 - 24);
          if (v10)
          {
            v11 = *(_QWORD *)(v8 - 16);
            v9 = *(void **)(v8 - 24);
            if (v11 != v10)
            {
              do
              {
                v12 = *(std::__shared_weak_count **)(v11 - 8);
                if (v12)
                {
                  v13 = (unint64_t *)&v12->__shared_owners_;
                  do
                    v14 = __ldaxr(v13);
                  while (__stlxr(v14 - 1, v13));
                  if (!v14)
                  {
                    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                    std::__shared_weak_count::__release_weak(v12);
                  }
                }
                v11 -= 16;
              }
              while (v11 != v10);
              v9 = *(void **)(v8 - 24);
            }
            *(_QWORD *)(v8 - 16) = v10;
            operator delete(v9);
          }
          v8 -= 32;
        }
        while ((char *)v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow(a1, v5);
      v6 = 0;
      v34 = *(char **)a2;
      v35 = *(unsigned int *)(a2 + 8);
      if (!*(_DWORD *)(a2 + 8))
        goto LABEL_86;
    }
    v52 = &v34[32 * v35];
    v53 = *(_QWORD *)a1 + 32 * v6;
    v54 = &v34[32 * v6];
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v54;
      *(_QWORD *)(v53 + 16) = 0;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 8) = 0;
      *(_OWORD *)(v53 + 8) = *(_OWORD *)(v54 + 8);
      *(_QWORD *)(v53 + 24) = *((_QWORD *)v54 + 3);
      *((_QWORD *)v54 + 1) = 0;
      *((_QWORD *)v54 + 2) = 0;
      *((_QWORD *)v54 + 3) = 0;
      v54 += 32;
      v53 += 32;
    }
    while (v54 != v52);
    v34 = *(char **)a2;
LABEL_86:
    *(_DWORD *)(a1 + 8) = v5;
    v55 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v55)
    {
      v56 = &v34[32 * v55];
      do
      {
        v58 = *((_QWORD *)v56 - 3);
        if (v58)
        {
          v59 = *((_QWORD *)v56 - 2);
          v57 = (void *)*((_QWORD *)v56 - 3);
          if (v59 != v58)
          {
            do
            {
              v60 = *(std::__shared_weak_count **)(v59 - 8);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              v59 -= 16;
            }
            while (v59 != v58);
            v57 = (void *)*((_QWORD *)v56 - 3);
          }
          *((_QWORD *)v56 - 2) = v58;
          operator delete(v57);
        }
        v56 -= 32;
      }
      while (v56 != v34);
    }
LABEL_100:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::assignRemote(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = &v4[32 * v5];
    do
    {
      v8 = *((_QWORD *)v6 - 3);
      if (v8)
      {
        v9 = *((_QWORD *)v6 - 2);
        v7 = (void *)*((_QWORD *)v6 - 3);
        if (v9 != v8)
        {
          do
          {
            v10 = *(std::__shared_weak_count **)(v9 - 8);
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldaxr(p_shared_owners);
              while (__stlxr(v12 - 1, p_shared_owners));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v9 -= 16;
          }
          while (v9 != v8);
          v7 = (void *)*((_QWORD *)v6 - 3);
        }
        *((_QWORD *)v6 - 2) = v8;
        operator delete(v7);
      }
      v6 -= 32;
    }
    while (v6 != v4);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  unint64_t v19;

  v19 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v19);
  v5 = v4;
  v6 = *(char **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = &v6[32 * v7];
    v9 = v4;
    do
    {
      *(_DWORD *)v9 = *(_DWORD *)v6;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 1) = 0;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v6 + 8);
      *((_QWORD *)v9 + 3) = *((_QWORD *)v6 + 3);
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *((_QWORD *)v6 + 3) = 0;
      v6 += 32;
      v9 += 32;
    }
    while (v6 != v8);
    v6 = *(char **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = &v6[32 * v10];
      do
      {
        v13 = *((_QWORD *)v11 - 3);
        if (v13)
        {
          v14 = *((_QWORD *)v11 - 2);
          v12 = (void *)*((_QWORD *)v11 - 3);
          if (v14 != v13)
          {
            do
            {
              v15 = *(std::__shared_weak_count **)(v14 - 8);
              if (v15)
              {
                p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                do
                  v17 = __ldaxr(p_shared_owners);
                while (__stlxr(v17 - 1, p_shared_owners));
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              v14 -= 16;
            }
            while (v14 != v13);
            v12 = (void *)*((_QWORD *)v11 - 3);
          }
          *((_QWORD *)v11 - 2) = v13;
          operator delete(v12);
        }
        v11 -= 32;
      }
      while (v11 != v6);
      v6 = *(char **)a1;
    }
  }
  v18 = v19;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v18;
}

char *std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__push_back_slow_path<std::shared_ptr<llvm::BitCodeAbbrev>>(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    while (v17 != v15)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

void std::__shared_ptr_emplace<llvm::BitCodeAbbrev>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::BitCodeAbbrev>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<llvm::BitCodeAbbrev>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
}

uint64_t llvm::remarks::RemarkStreamer::matchesFilter(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 16))
    return llvm::Regex::match(a1, a2, a3, 0, 0);
  else
    return 1;
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::opt<char [16],llvm::cl::desc,llvm::cl::initializer<llvm::cl::BOOLOrDefault>,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _DWORD **a4, _WORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  _DWORD *v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &unk_1E0E22F08;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23380;
  *(_QWORD *)(a1 + 152) = &unk_1E0E23AB8;
  *(_QWORD *)(a1 + 160) = &unk_1E0E4FA00;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  *(_OWORD *)(a1 + 32) = *a3;
  v15 = *a4;
  *(_DWORD *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v15;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void llvm::BitstreamCursor::EnterSubBlock(llvm::BitstreamCursor *this@<X0>, unsigned int *a2@<X2>, int a3@<W1>, uint64_t *a4@<X8>)
{
  int *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  char *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  void *__p;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  std::error_code v48;
  std::error_code v49;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = (int *)((char *)this + 36);
  v10 = (unint64_t *)((char *)this + 64);
  v9 = *((_QWORD *)this + 8);
  LODWORD(v43) = *((_DWORD *)this + 9);
  v45 = 0;
  v46 = 0;
  __p = 0;
  v11 = *((unsigned int *)this + 18);
  v12 = (char *)&v43;
  if (v11 >= *((_DWORD *)this + 19))
  {
    v38 = v11 + 1;
    v39 = v9 + 32 * v11 > (unint64_t)&v43;
    if (v9 <= (unint64_t)&v43 && v39)
    {
      v40 = (char *)&v43 - v9;
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow((uint64_t)this + 64, v38);
      v9 = *v10;
      v12 = &v40[*v10];
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow((uint64_t)this + 64, v38);
      v9 = *v10;
      v12 = (char *)&v43;
    }
  }
  v13 = v9 + 32 * *((unsigned int *)this + 18);
  *(_DWORD *)v13 = *(_DWORD *)v12;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)(v12 + 8);
  *(_QWORD *)(v13 + 24) = *((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  v14 = *((_DWORD *)this + 18) + 1;
  *((_DWORD *)this + 18) = v14;
  v15 = (char *)__p;
  if (__p)
  {
    v16 = v45;
    v17 = __p;
    if (v45 != __p)
    {
      do
      {
        v18 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v16 -= 16;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v45 = v15;
    operator delete(v17);
    v14 = *((_DWORD *)this + 18);
  }
  v21 = *((_QWORD *)this + 8) + 32 * v14;
  v22 = *(_QWORD *)(v21 - 24);
  *(_QWORD *)(v21 - 24) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v22;
  v23 = *(_QWORD *)(v21 - 16);
  *(_QWORD *)(v21 - 16) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v23;
  v24 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v21 - 8) = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v24;
  v25 = (uint64_t *)*((_QWORD *)this + 42);
  if (v25)
  {
    v27 = *v25;
    v26 = v25[1];
    if (*v25 != v26)
    {
      v28 = v26 - 80;
      if (*(_DWORD *)(v26 - 80) != a3)
      {
        v28 = v27;
        while (*(_DWORD *)v28 != a3)
        {
          v28 += 80;
          if (v28 == v26)
            goto LABEL_20;
        }
      }
      std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<llvm::BitCodeAbbrev> const*>,std::__wrap_iter<std::shared_ptr<llvm::BitCodeAbbrev> const*>>((void **)this + 5, *((_QWORD *)this + 6), *(_QWORD **)(v28 + 8), *(_QWORD **)(v28 + 16), (uint64_t)(*(_QWORD *)(v28 + 16) - *(_QWORD *)(v28 + 8)) >> 4);
    }
  }
LABEL_20:
  llvm::SimpleBitstreamCursor::ReadVBR(this, 4u, (uint64_t)&v43);
  if ((__p & 1) != 0)
  {
    v30 = v43;
    v43 = 0;
    *a4 = v30;
    goto LABEL_42;
  }
  v29 = v43;
  *v8 = v43;
  if (v29 >= 0x21)
  {
    v41 = 32;
    llvm::createStringError<unsigned long,unsigned int>(0x5Cu, (uint64_t)"can't read more than %zu at a time, trying to read %u", &v41, v8, a4);
    goto LABEL_42;
  }
  v31 = *((_DWORD *)this + 8);
  v32 = v31 >= 0x20;
  v33 = v31 - 32;
  if (v32)
  {
    *((_QWORD *)this + 3) >>= v33;
    v34 = 32;
  }
  else
  {
    v34 = 0;
  }
  *((_DWORD *)this + 8) = v34;
  llvm::SimpleBitstreamCursor::Read(this, 0x20u, (uint64_t)&v41);
  if ((v42 & 1) != 0)
  {
    v35 = v41;
    v41 = 0;
    *a4 = v35;
    if ((v42 & 1) == 0)
      goto LABEL_42;
  }
  else
  {
    if (a2)
      *a2 = v41;
    if (*v8)
    {
      if (*((_DWORD *)this + 8) || *((_QWORD *)this + 1) > *((_QWORD *)this + 2))
      {
        *a4 = 0;
        if ((v42 & 1) == 0)
          goto LABEL_42;
      }
      else
      {
        *(_QWORD *)&v49.__val_ = std::generic_category();
        v49.__cat_ = (const std::error_category *)"can't enter sub block: already at end of stream";
        llvm::createStringError((llvm *)0x5C, v49, a4);
        if ((v42 & 1) == 0)
          goto LABEL_42;
      }
    }
    else
    {
      *(_QWORD *)&v48.__val_ = std::generic_category();
      v48.__cat_ = (const std::error_category *)"can't enter sub-block: current code size is 0";
      llvm::createStringError((llvm *)0x5C, v48, a4);
      if ((v42 & 1) == 0)
        goto LABEL_42;
    }
  }
  v36 = v41;
  v41 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
LABEL_42:
  if ((__p & 1) != 0)
  {
    v37 = v43;
    v43 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
}

void llvm::createStringError<unsigned long,unsigned int>(unsigned int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int *a4@<X3>, uint64_t *a5@<X8>)
{
  const std::error_category *v10;
  void **v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *__p[2];
  uint64_t v23;
  _QWORD v24[3];
  int v25;
  __int16 v26;

  v10 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  v14 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v13 = &unk_1E0E22B10;
  v21 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v13, 0, 0, 0);
  v24[0] = &unk_1E0E203A0;
  v24[1] = a2;
  v24[2] = *a3;
  v25 = *a4;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v13, (uint64_t)v24);
  v11 = v21;
  v12 = operator new(0x38uLL);
  v26 = 260;
  v24[0] = v11;
  *a5 = llvm::StringError::StringError((uint64_t)v12, (llvm::Twine *)v24, a1, (uint64_t)v10);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v13);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
}

void llvm::BitstreamCursor::skipRecord(llvm::BitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  unsigned int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  char v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  std::error_code v54;
  std::error_code v55;
  std::error_code v56;

  v53 = *MEMORY[0x1E0C80C00];
  if (a2 != 3)
  {
    v7 = (a2 - 4);
    v8 = *((_QWORD *)this + 5);
    if (v7 >= (*((_QWORD *)this + 6) - v8) >> 4)
    {
      *(_QWORD *)&v55.__val_ = std::generic_category();
      v55.__cat_ = (const std::error_category *)"Invalid abbrev number";
      llvm::createStringError((llvm *)0x5C, v55, (_QWORD *)a3);
      *(_BYTE *)(a3 + 8) |= 1u;
      return;
    }
    v9 = *(_DWORD **)(v8 + 16 * v7);
    v10 = *(uint64_t **)v9;
    v11 = *(unsigned __int8 *)(*(_QWORD *)v9 + 8);
    if ((v11 & 1) != 0)
    {
      v16 = *v10;
      v17 = v9[2];
      if (v17 <= 1)
      {
LABEL_69:
        LOBYTE(v18) = *(_BYTE *)(a3 + 8);
        goto LABEL_70;
      }
    }
    else
    {
      v12 = (v11 >> 1) & 7;
      if (v12 == 5 || v12 == 3)
      {
        *(_QWORD *)&v54.__val_ = std::generic_category();
        v54.__cat_ = (const std::error_category *)"Abbreviation starts with an Array or a Blob";
        llvm::createStringError((llvm *)0x5C, v54, &v46);
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v46;
        return;
      }
      readAbbreviatedField((uint64_t)&v51, this, *v10, v11);
      if ((v52 & 1) != 0)
      {
        v44 = v51;
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v44;
        return;
      }
      LODWORD(v16) = v51;
      v17 = v9[2];
      if (v17 <= 1)
        goto LABEL_69;
    }
    v18 = *(unsigned __int8 *)(a3 + 8);
    v19 = 1;
    while (1)
    {
      v20 = *(_QWORD *)v9 + 16 * v19;
      v21 = *(unsigned __int8 *)(v20 + 8);
      if ((v21 & 1) != 0)
        goto LABEL_23;
      v22 = (v21 >> 1) & 7;
      if (v22 == 3)
        break;
      if (v22 != 5)
      {
        readAbbreviatedField((uint64_t)&v51, this, *(_QWORD *)v20, v21);
        if ((v52 & 1) != 0)
        {
          v31 = v51;
          v51 = 0;
          v18 |= 1u;
          *(_BYTE *)(a3 + 8) = v18;
          *(_QWORD *)a3 = v31;
          v29 = 1;
        }
        else
        {
          v29 = 7;
        }
        goto LABEL_63;
      }
      llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v49);
      if ((v50 & 1) != 0)
      {
LABEL_41:
        v30 = v49;
        v49 = 0;
        goto LABEL_42;
      }
      v23 = *((_DWORD *)this + 8);
      v24 = v23 >= 0x20;
      v25 = v23 - 32;
      if (v24)
      {
        *((_QWORD *)this + 3) >>= v25;
        v32 = 32;
      }
      else
      {
        v32 = 0;
      }
      v33 = v49;
      *((_DWORD *)this + 8) = v32;
      v34 = ((8 * v33 + 24) & 0xFFFFFFFE0) - v32;
      v35 = *((_QWORD *)this + 1);
      v36 = v34 + 8 * *((_QWORD *)this + 2);
      if (v35 >= v36 >> 3)
      {
        *((_QWORD *)this + 2) = (v36 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *((_DWORD *)this + 8) = 0;
        if ((v36 & 0x3F) != 0)
        {
          llvm::SimpleBitstreamCursor::Read(this, v36 & 0x3F, (uint64_t)&v51);
          if ((v52 & 1) != 0)
          {
            v30 = v51;
            if (v51)
              goto LABEL_42;
          }
        }
        v29 = 0;
        if ((v50 & 1) == 0)
          goto LABEL_63;
      }
      else
      {
        *((_QWORD *)this + 2) = v35;
        v29 = 5;
        if ((v50 & 1) == 0)
          goto LABEL_63;
      }
LABEL_61:
      v40 = v49;
      v49 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
LABEL_63:
      if (v29 && v29 != 7)
      {
        if (v29 != 5)
          return;
LABEL_70:
        *(_BYTE *)(a3 + 8) = v18 & 0xFE;
        *(_DWORD *)a3 = v16;
        return;
      }
LABEL_23:
      if (++v19 >= v17)
        goto LABEL_70;
    }
    llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v49);
    if ((v50 & 1) != 0)
      goto LABEL_41;
    v26 = v49;
    v27 = *(_QWORD *)v9 + 16 * ++v19;
    v28 = (*(unsigned __int8 *)(v27 + 8) >> 1) & 7;
    switch(v28)
    {
      case 1:
        v37 = *(_QWORD *)v27 * v49 - *((unsigned int *)this + 8) + 8 * *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *((_DWORD *)this + 8) = 0;
        v38 = v37 & 0x3F;
        if ((v37 & 0x3F) != 0)
        {
LABEL_56:
          llvm::SimpleBitstreamCursor::Read(this, v38, (uint64_t)&v51);
          if ((v52 & 1) != 0)
          {
            v30 = v51;
            if (v51)
              goto LABEL_42;
          }
        }
        break;
      case 4:
        v39 = 8 * *((_QWORD *)this + 2) - *((unsigned int *)this + 8) + (6 * v49);
        *((_QWORD *)this + 2) = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *((_DWORD *)this + 8) = 0;
        v38 = v39 & 0x3F;
        if ((v39 & 0x3F) != 0)
          goto LABEL_56;
        break;
      case 2:
        if ((_DWORD)v49)
        {
          while (1)
          {
            llvm::SimpleBitstreamCursor::ReadVBR64(this, *(_DWORD *)v27, (uint64_t)&v51);
            if ((v52 & 1) != 0)
              break;
            if (!--v26)
              goto LABEL_58;
          }
          v30 = v51;
LABEL_42:
          v18 |= 1u;
          *(_BYTE *)(a3 + 8) = v18;
          *(_QWORD *)a3 = v30;
          v29 = 1;
          if ((v50 & 1) == 0)
            goto LABEL_63;
          goto LABEL_61;
        }
        break;
      default:
        *(_QWORD *)&v56.__val_ = std::generic_category();
        v56.__cat_ = (const std::error_category *)"Array element type can't be an Array or a Blob";
        llvm::createStringError((llvm *)0x5C, v56, &v45);
        v18 |= 1u;
        *(_BYTE *)(a3 + 8) = v18;
        *(_QWORD *)a3 = v45;
        v45 = 0;
        v29 = 1;
        if ((v50 & 1) == 0)
          goto LABEL_63;
        goto LABEL_61;
    }
LABEL_58:
    v29 = 7;
    if ((v50 & 1) == 0)
      goto LABEL_63;
    goto LABEL_61;
  }
  llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v51);
  if ((v52 & 1) == 0)
  {
    v5 = v51;
    llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v49);
    if ((v50 & 1) != 0)
    {
      v15 = v49;
      v49 = 0;
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v15;
      if ((v50 & 1) == 0)
        goto LABEL_74;
    }
    else
    {
      v6 = v49;
      if ((_DWORD)v49)
      {
        while (1)
        {
          llvm::SimpleBitstreamCursor::ReadVBR64(this, 6u, (uint64_t)&v47);
          if ((v48 & 1) != 0)
            break;
          if (!--v6)
            goto LABEL_7;
        }
        v41 = v47;
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v41;
        if ((v50 & 1) == 0)
        {
LABEL_74:
          if ((v52 & 1) == 0)
            return;
          goto LABEL_75;
        }
      }
      else
      {
LABEL_7:
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = v5;
        if ((v50 & 1) == 0)
          goto LABEL_74;
      }
    }
    v42 = v49;
    v49 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    goto LABEL_74;
  }
  v14 = v51;
  v51 = 0;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v14;
LABEL_75:
  v43 = v51;
  v51 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
}

void llvm::SimpleBitstreamCursor::ReadVBR64(llvm::SimpleBitstreamCursor *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  std::error_code v16;

  v15 = *MEMORY[0x1E0C80C00];
  llvm::SimpleBitstreamCursor::Read(this, a2, (uint64_t)&v13);
  v6 = v14;
  if ((v14 & 1) != 0)
  {
LABEL_8:
    v10 = v13;
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v6 & 1;
    *(_QWORD *)a3 = v10;
  }
  else
  {
    v7 = 1 << (a2 - 1);
    if ((v13 & v7) != 0)
    {
      v8 = ((_DWORD)v7 - 1) & v13;
      v9 = a2 - 1;
      while (v9 < 0x40)
      {
        llvm::SimpleBitstreamCursor::Read(this, a2, (uint64_t)&v13);
        v6 = v14;
        if ((v14 & 1) != 0)
          goto LABEL_8;
        v8 |= (unint64_t)(((_DWORD)v7 - 1) & v13) << v9;
        v9 += a2 - 1;
        if ((v13 & v7) == 0)
        {
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_QWORD *)a3 = v8;
          return;
        }
      }
      *(_QWORD *)&v16.__val_ = std::generic_category();
      v16.__cat_ = (const std::error_category *)"Unterminated VBR";
      llvm::createStringError((llvm *)0x5C, v16, &v12);
      *(_BYTE *)(a3 + 8) |= 1u;
      v11 = v12;
    }
    else
    {
      v11 = v13;
      *(_BYTE *)(a3 + 8) &= ~1u;
    }
    *(_QWORD *)a3 = v11;
  }
}

void readAbbreviatedField(uint64_t a1, llvm::SimpleBitstreamCursor *this, unsigned int a3, unsigned int a4)
{
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = (a4 >> 1) & 7;
  if (v5 == 4)
  {
    llvm::SimpleBitstreamCursor::Read(this, 6u, (uint64_t)&v8);
    if ((v9 & 1) != 0)
    {
      v6 = v8;
      v7 = *(_BYTE *)(a1 + 8) | 1;
    }
    else
    {
      v6 = aAbcdefghijklmn_5[v8];
      v7 = *(_BYTE *)(a1 + 8) & 0xFE;
    }
    *(_BYTE *)(a1 + 8) = v7;
  }
  else
  {
    if (v5 == 2)
    {
      llvm::SimpleBitstreamCursor::ReadVBR64(this, a3, a1);
      return;
    }
    llvm::SimpleBitstreamCursor::Read(this, a3, (uint64_t)&v8);
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xFE | v9 & 1;
    v6 = v8;
  }
  *(_QWORD *)a1 = v6;
}

void llvm::BitstreamCursor::readRecord(llvm::SimpleBitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned __int8 **a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  int64x2_t v9;
  int8x16_t v10;
  int v11;
  unint64_t v12;
  char v13;
  void *v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v20;
  uint64_t *v21;
  unsigned int v22;
  int v23;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type v29;
  const std::error_category *v30;
  _QWORD *v31;
  int v32;
  unsigned int i;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  char v41;
  int64x2_t v42;
  int8x16_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  char v49;
  void *v50;
  unint64_t v51;
  void *v52;
  int v53;
  void *v54;
  _QWORD *v55;
  std::string *v56;
  std::string::size_type v57;
  const std::error_category *v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  unsigned __int8 *data_low;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  uint8x8_t *v76;
  _OWORD *v77;
  unsigned __int8 *v78;
  uint8x8_t v79;
  uint16x8_t v80;
  uint32x4_t v81;
  __int128 v82;
  __int128 v83;
  uint32x4_t v84;
  __int128 v85;
  std::string::size_type v86;
  void *v87;
  unint64_t v88;
  void *v89;
  void *v90;
  unint64_t v91;
  void *v92;
  void *v93;
  char v94;
  unsigned __int8 *v95;
  _OWORD *v96;
  uint8x16_t *v97;
  uint8x16_t v98;
  uint16x8_t v99;
  uint32x4_t v100;
  __int128 v101;
  __int128 v102;
  uint32x4_t v103;
  __int128 v104;
  uint16x8_t v105;
  uint32x4_t v106;
  __int128 v107;
  uint32x4_t v108;
  __int128 v109;
  __int128 v110;
  unsigned int v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  char v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  std::string v130;
  void *__p[2];
  uint64_t v132;
  _QWORD *v133;
  char v134;
  _QWORD *v135;
  char v136;
  uint64_t v137;
  std::error_code v138;
  std::error_code v139;
  std::error_code v140;
  std::error_code v141;
  std::error_code v142;
  std::error_code v143;
  std::error_code v144;
  std::error_code v145;
  std::error_code v146;
  std::error_code v147;

  v137 = *MEMORY[0x1E0C80C00];
  if (a2 != 3)
  {
    v17 = (a2 - 4);
    v18 = *((_QWORD *)this + 5);
    if (v17 >= (*((_QWORD *)this + 6) - v18) >> 4)
    {
      *(_QWORD *)&v139.__val_ = std::generic_category();
      v139.__cat_ = (const std::error_category *)"Invalid abbrev number";
      llvm::createStringError((llvm *)0x5C, v139, (_QWORD *)a5);
      *(_BYTE *)(a5 + 8) |= 1u;
      return;
    }
    v20 = *(_DWORD **)(v18 + 16 * v17);
    v21 = *(uint64_t **)v20;
    v22 = *(unsigned __int8 *)(*(_QWORD *)v20 + 8);
    if ((v22 & 1) == 0)
    {
      v23 = (v22 >> 1) & 7;
      if (v23 == 5 || v23 == 3)
      {
        *(_QWORD *)&v138.__val_ = std::generic_category();
        v138.__cat_ = (const std::error_category *)"Abbreviation starts with an Array or a Blob";
        llvm::createStringError((llvm *)0x5C, v138, &v126);
        *(_BYTE *)(a5 + 8) |= 1u;
        v25 = v126;
      }
      else
      {
        readAbbreviatedField((uint64_t)__p, this, *v21, v22);
        if (((uint64_t)__p[1] & 1) == 0)
        {
          LODWORD(v118) = __p[0];
          v32 = v20[2];
          if (v32 != 1)
            goto LABEL_45;
          goto LABEL_36;
        }
        v25 = __p[0];
        *(_BYTE *)(a5 + 8) |= 1u;
      }
      *(_QWORD *)a5 = v25;
      return;
    }
    v118 = *v21;
    v32 = v20[2];
    if (v32 != 1)
    {
LABEL_45:
      v117 = (void *)(a3 + 16);
      for (i = 1; i != v32; ++i)
      {
        v36 = *(_QWORD *)v20 + 16 * i;
        v37 = *(unsigned __int8 *)(v36 + 8);
        if ((v37 & 1) != 0)
        {
          v34 = *(_QWORD *)v36;
          v35 = *(unsigned int *)(a3 + 8);
          if (v35 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v117, v35 + 1, 8);
            v35 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v35) = v34;
          ++*(_DWORD *)(a3 + 8);
          continue;
        }
        v38 = (v37 >> 1) & 7;
        if (v38 != 3)
        {
          if (v38 != 5)
          {
            readAbbreviatedField((uint64_t)__p, this, *(_QWORD *)v36, v37);
            if (((uint64_t)__p[1] & 1) != 0)
            {
              v60 = __p[0];
              *(_BYTE *)(a5 + 8) |= 1u;
              *(_QWORD *)a5 = v60;
              v53 = 1;
            }
            else
            {
              v50 = __p[0];
              v51 = *(unsigned int *)(a3 + 8);
              if (v51 >= *(unsigned int *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v117, v51 + 1, 8);
                v51 = *(unsigned int *)(a3 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v51) = v50;
              ++*(_DWORD *)(a3 + 8);
              if (((uint64_t)__p[1] & 1) != 0)
              {
                v52 = __p[0];
                __p[0] = 0;
                if (v52)
                  (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
              }
              v53 = 7;
            }
            goto LABEL_154;
          }
          llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v130);
          if ((v130.__r_.__value_.__s.__data_[8] & 1) != 0)
          {
            v54 = (void *)v130.__r_.__value_.__r.__words[0];
            v130.__r_.__value_.__r.__words[0] = 0;
          }
          else
          {
            v39 = *((_DWORD *)this + 8);
            v40 = v39 >= 0x20;
            v41 = v39 - 32;
            if (v40)
            {
              *((_QWORD *)this + 3) >>= v41;
              v61 = 32;
            }
            else
            {
              v61 = 0;
            }
            data_low = (unsigned __int8 *)LODWORD(v130.__r_.__value_.__l.__data_);
            *((_DWORD *)this + 8) = v61;
            v63 = 8 * *((_QWORD *)this + 2) - v61;
            v64 = v63 + ((8 * (_QWORD)data_low + 24) & 0xFFFFFFFE0);
            if (*((_QWORD *)this + 1) < v64 >> 3)
            {
              *(_QWORD *)&v143.__val_ = std::generic_category();
              v143.__cat_ = (const std::error_category *)"Blob ends too soon";
              llvm::createStringError((llvm *)0x5C, v143, &v119);
              *(_BYTE *)(a5 + 8) |= 1u;
              *(_QWORD *)a5 = v119;
              v119 = 0;
              v53 = 1;
              if ((v130.__r_.__value_.__s.__data_[8] & 1) == 0)
                goto LABEL_154;
              goto LABEL_152;
            }
            *((_QWORD *)this + 2) = (v64 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *((_DWORD *)this + 8) = 0;
            if ((v64 & 0x3F) == 0
              || (llvm::SimpleBitstreamCursor::Read(this, v64 & 0x3F, (uint64_t)__p), ((uint64_t)__p[1] & 1) == 0)
              || (v54 = __p[0]) == 0)
            {
              v65 = v63 >> 3;
              v66 = *(_QWORD *)this;
              v67 = (unsigned __int8 *)(*(_QWORD *)this + (v63 >> 3));
              if (a4)
              {
                v53 = 0;
                *a4 = v67;
                a4[1] = data_low;
                if ((v130.__r_.__value_.__s.__data_[8] & 1) == 0)
                  goto LABEL_154;
                goto LABEL_152;
              }
              v71 = *(unsigned int *)(a3 + 8);
              if ((unint64_t)&data_low[v71] > *(unsigned int *)(a3 + 12))
              {
                v115 = *(_QWORD *)this;
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v117, (unint64_t)&data_low[v71], 8);
                v66 = v115;
                v71 = *(unsigned int *)(a3 + 8);
              }
              if (!(_DWORD)data_low)
                goto LABEL_151;
              v72 = &data_low[(_QWORD)v67];
              v73 = *(_QWORD *)a3;
              v74 = (unsigned __int8 *)(*(_QWORD *)a3 + 8 * v71);
              if (data_low >= 8
                && (v74 >= v72 || (unint64_t)v67 >= v73 + 8 * (uint64_t)&data_low[v71]))
              {
                if (data_low >= 0x10)
                {
                  v75 = (unsigned __int8 *)(data_low & 0xFFFFFFF0);
                  v95 = v75;
                  v96 = (_OWORD *)(*(_QWORD *)a3 + 8 * v71);
                  v97 = (uint8x16_t *)v67;
                  do
                  {
                    v98 = *v97++;
                    v99 = vmovl_u8(*(uint8x8_t *)v98.i8);
                    v100 = vmovl_u16(*(uint16x4_t *)v99.i8);
                    *(_QWORD *)&v101 = v100.u32[0];
                    *((_QWORD *)&v101 + 1) = v100.u32[1];
                    v102 = v101;
                    v103 = vmovl_high_u16(v99);
                    *(_QWORD *)&v101 = v103.u32[0];
                    *((_QWORD *)&v101 + 1) = v103.u32[1];
                    v104 = v101;
                    v105 = vmovl_high_u8(v98);
                    v106 = vmovl_high_u16(v105);
                    *(_QWORD *)&v101 = v106.u32[0];
                    *((_QWORD *)&v101 + 1) = v106.u32[1];
                    v107 = v101;
                    *(_QWORD *)&v101 = v106.u32[2];
                    *((_QWORD *)&v101 + 1) = v106.u32[3];
                    v96[6] = v107;
                    v96[7] = v101;
                    v108 = vmovl_u16(*(uint16x4_t *)v105.i8);
                    *(_QWORD *)&v101 = v108.u32[0];
                    *((_QWORD *)&v101 + 1) = v108.u32[1];
                    v109 = v101;
                    *(_QWORD *)&v101 = v103.u32[2];
                    *((_QWORD *)&v101 + 1) = v103.u32[3];
                    v110 = v101;
                    *(_QWORD *)&v101 = v108.u32[2];
                    *((_QWORD *)&v101 + 1) = v108.u32[3];
                    v96[4] = v109;
                    v96[5] = v101;
                    v96[2] = v104;
                    v96[3] = v110;
                    *(_QWORD *)&v101 = v100.u32[2];
                    *((_QWORD *)&v101 + 1) = v100.u32[3];
                    *v96 = v102;
                    v96[1] = v101;
                    v96 += 8;
                    v95 -= 16;
                  }
                  while (v95);
                  if (v75 == data_low)
                    goto LABEL_151;
                  if ((data_low & 8) != 0)
                    goto LABEL_115;
                  v67 = &v75[(_QWORD)v67];
                  v74 += 8 * (_QWORD)v75;
                }
                else
                {
                  v75 = 0;
LABEL_115:
                  v74 += 8 * (data_low & 0xFFFFFFF8);
                  v67 += data_low & 0xFFFFFFF8;
                  v76 = (uint8x8_t *)&v75[v65 + v66];
                  v77 = (_OWORD *)(v73 + 8 * v71 + 8 * (_QWORD)v75);
                  v78 = &v75[-(data_low & 0xFFFFFFF8)];
                  do
                  {
                    v79 = *v76++;
                    v80 = vmovl_u8(v79);
                    v81 = vmovl_u16(*(uint16x4_t *)v80.i8);
                    *(_QWORD *)&v82 = v81.u32[0];
                    *((_QWORD *)&v82 + 1) = v81.u32[1];
                    v83 = v82;
                    v84 = vmovl_high_u16(v80);
                    *(_QWORD *)&v82 = v84.u32[0];
                    *((_QWORD *)&v82 + 1) = v84.u32[1];
                    v85 = v82;
                    *(_QWORD *)&v82 = v84.u32[2];
                    *((_QWORD *)&v82 + 1) = v84.u32[3];
                    v77[2] = v85;
                    v77[3] = v82;
                    *(_QWORD *)&v82 = v81.u32[2];
                    *((_QWORD *)&v82 + 1) = v81.u32[3];
                    *v77 = v83;
                    v77[1] = v82;
                    v77 += 4;
                    v78 += 8;
                  }
                  while (v78);
                  if ((unsigned __int8 *)(data_low & 0xFFFFFFF8) == data_low)
                  {
LABEL_151:
                    v53 = 0;
                    *(_DWORD *)(a3 + 8) = v71 + (_DWORD)data_low;
                    if ((v130.__r_.__value_.__s.__data_[8] & 1) == 0)
                      goto LABEL_154;
                    goto LABEL_152;
                  }
                }
              }
              do
              {
                v111 = *v67++;
                *(_QWORD *)v74 = v111;
                v74 += 8;
              }
              while (v67 != v72);
              goto LABEL_151;
            }
          }
          *(_BYTE *)(a5 + 8) |= 1u;
          *(_QWORD *)a5 = v54;
          v53 = 1;
          if ((v130.__r_.__value_.__s.__data_[8] & 1) == 0)
            goto LABEL_154;
LABEL_152:
          v86 = v130.__r_.__value_.__r.__words[0];
          v130.__r_.__value_.__r.__words[0] = 0;
          if (v86)
            goto LABEL_153;
          goto LABEL_154;
        }
        llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v135);
        if ((v136 & 1) != 0)
        {
          v55 = v135;
          v135 = 0;
          v124 = v55;
          llvm::toString(&v124, &v130, v42, v43);
          v56 = std::string::insert(&v130, 0, "Failed to read size: ");
          v57 = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v132 = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          if (v132 >= 0)
            v58 = (const std::error_category *)__p;
          else
            v58 = (const std::error_category *)__p[0];
          *(_QWORD *)&v142.__val_ = std::generic_category();
          v142.__cat_ = v58;
          llvm::createStringError((llvm *)0x5C, v142, &v125);
          *(_BYTE *)(a5 + 8) |= 1u;
          *(_QWORD *)a5 = v125;
          v125 = 0;
          if (SHIBYTE(v132) < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_83:
              v59 = v124;
              if (!v124)
                goto LABEL_120;
LABEL_98:
              (*(void (**)(_QWORD *))(*v59 + 8))(v59);
              goto LABEL_120;
            }
          }
          else if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_83;
          }
          operator delete(v130.__r_.__value_.__l.__data_);
          v59 = v124;
          if (v124)
            goto LABEL_98;
        }
        else
        {
          v44 = (int)v135;
          if (v135 >= (unint64_t)(8 * *((_QWORD *)this + 1)))
          {
            *(_QWORD *)&v144.__val_ = std::generic_category();
            v144.__cat_ = (const std::error_category *)"Size is not plausible";
            llvm::createStringError((llvm *)0x5C, v144, &v123);
            *(_BYTE *)(a5 + 8) |= 1u;
            *(_QWORD *)a5 = v123;
            v123 = 0;
          }
          else
          {
            v45 = *(unsigned int *)(a3 + 8) + (unint64_t)v135;
            if (v45 > *(unsigned int *)(a3 + 12))
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v117, v45, 8);
            if (i + 2 == v32)
            {
              v46 = *(_QWORD *)v20 + 16 * ++i;
              v47 = *(unsigned __int8 *)(v46 + 8);
              if ((v47 & 1) != 0)
              {
                *(_QWORD *)&v146.__val_ = std::generic_category();
                v146.__cat_ = (const std::error_category *)"Array element type has to be an encoding of a type";
                llvm::createStringError((llvm *)0x5C, v146, &v121);
                *(_BYTE *)(a5 + 8) |= 1u;
                *(_QWORD *)a5 = v121;
                v121 = 0;
              }
              else
              {
                v48 = (v47 >> 1) & 7;
                switch(v48)
                {
                  case 1:
                    if (!v44)
                      goto LABEL_142;
                    v116 = *(_BYTE *)(a5 + 8);
                    while (1)
                    {
                      llvm::SimpleBitstreamCursor::Read(this, *(_DWORD *)v46, (uint64_t)__p);
                      if (((uint64_t)__p[1] & 1) != 0)
                        break;
                      v87 = __p[0];
                      v88 = *(unsigned int *)(a3 + 8);
                      if (v88 >= *(unsigned int *)(a3 + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v117, v88 + 1, 8);
                        v88 = *(unsigned int *)(a3 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)a3 + 8 * v88) = v87;
                      ++*(_DWORD *)(a3 + 8);
                      if (((uint64_t)__p[1] & 1) != 0)
                      {
                        v89 = __p[0];
                        __p[0] = 0;
                        if (v89)
                          (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
                      }
                      v53 = 7;
                      if (!--v44)
                        goto LABEL_121;
                    }
LABEL_144:
                    v93 = __p[0];
                    v94 = v116 | 1;
LABEL_158:
                    *(_BYTE *)(a5 + 8) = v94;
                    *(_QWORD *)a5 = v93;
                    goto LABEL_120;
                  case 2:
                    if (!v44)
                    {
LABEL_142:
                      v53 = 7;
                      goto LABEL_121;
                    }
                    v116 = *(_BYTE *)(a5 + 8);
                    while (1)
                    {
                      llvm::SimpleBitstreamCursor::ReadVBR64(this, *(_DWORD *)v46, (uint64_t)__p);
                      if (((uint64_t)__p[1] & 1) != 0)
                        goto LABEL_144;
                      v90 = __p[0];
                      v91 = *(unsigned int *)(a3 + 8);
                      if (v91 >= *(unsigned int *)(a3 + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v117, v91 + 1, 8);
                        v91 = *(unsigned int *)(a3 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)a3 + 8 * v91) = v90;
                      ++*(_DWORD *)(a3 + 8);
                      if (((uint64_t)__p[1] & 1) != 0)
                      {
                        v92 = __p[0];
                        __p[0] = 0;
                        if (v92)
                          (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
                      }
                      v53 = 7;
                      if (!--v44)
                        goto LABEL_121;
                    }
                  case 4:
                    if (!v44)
                      goto LABEL_142;
                    v49 = *(_BYTE *)(a5 + 8);
                    while (1)
                    {
                      llvm::SimpleBitstreamCursor::Read(this, 6u, (uint64_t)__p);
                      if (((uint64_t)__p[1] & 1) != 0)
                        break;
                      v68 = aAbcdefghijklmn_5[LODWORD(__p[0])];
                      v69 = *(unsigned int *)(a3 + 8);
                      if (v69 >= *(unsigned int *)(a3 + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v117, v69 + 1, 8);
                        v69 = *(unsigned int *)(a3 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)a3 + 8 * v69) = v68;
                      ++*(_DWORD *)(a3 + 8);
                      if (((uint64_t)__p[1] & 1) != 0)
                      {
                        v70 = __p[0];
                        __p[0] = 0;
                        if (v70)
                          (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
                      }
                      v53 = 7;
                      if (!--v44)
                        goto LABEL_121;
                    }
                    v93 = __p[0];
                    v94 = v49 | 1;
                    goto LABEL_158;
                }
                *(_QWORD *)&v147.__val_ = std::generic_category();
                v147.__cat_ = (const std::error_category *)"Array element type can't be an Array or a Blob";
                llvm::createStringError((llvm *)0x5C, v147, &v120);
                *(_BYTE *)(a5 + 8) |= 1u;
                *(_QWORD *)a5 = v120;
                v120 = 0;
              }
            }
            else
            {
              *(_QWORD *)&v145.__val_ = std::generic_category();
              v145.__cat_ = (const std::error_category *)"Array op not second to last";
              llvm::createStringError((llvm *)0x5C, v145, &v122);
              *(_BYTE *)(a5 + 8) |= 1u;
              *(_QWORD *)a5 = v122;
              v122 = 0;
            }
          }
        }
LABEL_120:
        v53 = 1;
LABEL_121:
        if ((v136 & 1) != 0)
        {
          v86 = (std::string::size_type)v135;
          v135 = 0;
          if (v86)
LABEL_153:
            (*(void (**)(std::string::size_type))(*(_QWORD *)v86 + 8))(v86);
        }
LABEL_154:
        if (v53 != 7 && v53)
          return;
      }
    }
LABEL_36:
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = v118;
    return;
  }
  llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v135);
  if ((v136 & 1) == 0)
  {
    v8 = (int)v135;
    llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v133);
    if ((v134 & 1) == 0)
    {
      v11 = (int)v133;
      if (v133 >= (unint64_t)(8 * *((_QWORD *)this + 1)))
      {
        *(_QWORD *)&v141.__val_ = std::generic_category();
        v141.__cat_ = (const std::error_category *)"Size is not plausible";
        llvm::createStringError((llvm *)0x5C, v141, &v127);
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v127;
        v127 = 0;
        if ((v134 & 1) == 0)
          goto LABEL_166;
        goto LABEL_164;
      }
      v12 = *(unsigned int *)(a3 + 8) + (unint64_t)v133;
      if (v12 > *(unsigned int *)(a3 + 12))
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12, 8);
      if (v11)
      {
        v13 = *(_BYTE *)(a5 + 8);
        while (1)
        {
          llvm::SimpleBitstreamCursor::ReadVBR64(this, 6u, (uint64_t)__p);
          if (((uint64_t)__p[1] & 1) != 0)
            break;
          v14 = __p[0];
          v15 = *(unsigned int *)(a3 + 8);
          if (v15 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v15 + 1, 8);
            v15 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
          ++*(_DWORD *)(a3 + 8);
          if (((uint64_t)__p[1] & 1) != 0)
          {
            v16 = __p[0];
            __p[0] = 0;
            if (v16)
              (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
          }
          if (!--v11)
            goto LABEL_160;
        }
        v112 = __p[0];
        *(_BYTE *)(a5 + 8) = v13 | 1;
        *(_QWORD *)a5 = v112;
        if ((v134 & 1) != 0)
        {
LABEL_164:
          v113 = v133;
          v133 = 0;
          if (v113)
            (*(void (**)(_QWORD *))(*v113 + 8))(v113);
        }
      }
      else
      {
        v13 = *(_BYTE *)(a5 + 8);
LABEL_160:
        *(_BYTE *)(a5 + 8) = v13 & 0xFE;
        *(_DWORD *)a5 = v8;
        if ((v134 & 1) != 0)
          goto LABEL_164;
      }
LABEL_166:
      if ((v136 & 1) == 0)
        return;
      goto LABEL_167;
    }
    v27 = v133;
    v133 = 0;
    v128 = v27;
    llvm::toString(&v128, &v130, v9, v10);
    v28 = std::string::insert(&v130, 0, "Failed to read size: ");
    v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v132 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (v132 >= 0)
      v30 = (const std::error_category *)__p;
    else
      v30 = (const std::error_category *)__p[0];
    *(_QWORD *)&v140.__val_ = std::generic_category();
    v140.__cat_ = v30;
    llvm::createStringError((llvm *)0x5C, v140, &v129);
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v129;
    v129 = 0;
    if (SHIBYTE(v132) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_32:
        v31 = v128;
        if (!v128)
          goto LABEL_33;
        goto LABEL_41;
      }
    }
    else if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v130.__r_.__value_.__l.__data_);
    v31 = v128;
    if (!v128)
    {
LABEL_33:
      if ((v134 & 1) == 0)
        goto LABEL_166;
      goto LABEL_164;
    }
LABEL_41:
    (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    if ((v134 & 1) == 0)
      goto LABEL_166;
    goto LABEL_164;
  }
  v26 = v135;
  v135 = 0;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v26;
LABEL_167:
  v114 = v135;
  v135 = 0;
  if (v114)
    (*(void (**)(_QWORD *))(*v114 + 8))(v114);
}

void llvm::BitstreamCursor::ReadAbbrevRecord(char **this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;
  char *v5;
  uint64_t v6;
  void *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  std::error_code v50;
  std::error_code v51;
  std::error_code v52;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0x228uLL);
  *(_QWORD *)v5 = &unk_1E0E51CC0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = (uint64_t)(v5 + 24);
  *(_OWORD *)(v5 + 40) = 0u;
  v7 = v5 + 40;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = v5 + 40;
  *((_QWORD *)v5 + 4) = 0x2000000000;
  v39 = v5 + 24;
  v40 = (std::__shared_weak_count *)v5;
  llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)this, 5u, (uint64_t)&v47);
  if ((v48 & 1) != 0)
  {
    v29 = v47;
    v47 = 0;
    *a2 = v29;
    if ((v48 & 1) == 0)
      goto LABEL_60;
    goto LABEL_56;
  }
  v8 = v47;
  if ((_DWORD)v47)
  {
    while (1)
    {
      llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)this, 1u, (uint64_t)&v45);
      if ((v46 & 1) != 0)
      {
        v14 = v45;
        v45 = 0;
LABEL_20:
        *a2 = v14;
        v13 = 1;
        goto LABEL_21;
      }
      if (!v45)
        break;
      llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)this, 8u, (uint64_t)&v43);
      if ((v44 & 1) != 0)
      {
        v14 = v43;
        goto LABEL_20;
      }
      v9 = v43;
      v10 = *((unsigned int *)v5 + 8);
      if (v10 >= *((unsigned int *)v5 + 9))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v7, v10 + 1, 16);
        v10 = *((unsigned int *)v5 + 8);
      }
      v2 |= 1uLL;
      v11 = (unint64_t *)(*((_QWORD *)v5 + 3) + 16 * v10);
      *v11 = v9;
      v11[1] = v2;
      ++*((_DWORD *)v5 + 8);
      if ((v44 & 1) != 0)
      {
        v12 = v43;
        v43 = 0;
        if (v12)
          (*(void (**)(unint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      v13 = 4;
LABEL_21:
      if ((v46 & 1) != 0)
      {
        v18 = v45;
        v45 = 0;
        if (v18)
          (*(void (**)(unint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      if ((v13 | 4) != 4)
        goto LABEL_55;
      if (!--v8)
        goto LABEL_51;
    }
    llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)this, 3u, (uint64_t)&v43);
    if ((v44 & 1) != 0)
    {
      v19 = v43;
      v43 = 0;
      *a2 = v19;
      v13 = 1;
    }
    else
    {
      v15 = v43;
      if (v43 - 1 >= 5)
      {
        *(_QWORD *)&v50.__val_ = std::generic_category();
        v50.__cat_ = (const std::error_category *)"Invalid encoding";
        llvm::createStringError((llvm *)0x5C, v50, a2);
        v13 = 1;
      }
      else
      {
        if ((v43 - 3) >= 3)
        {
          if ((v43 - 1) >= 2)
            llvm::report_fatal_error((llvm *)"Invalid encoding", (const char *)1);
          llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)this, 5u, (uint64_t)&v41);
          if ((v42 & 1) != 0)
          {
            v21 = 0;
            v22 = v41;
            v41 = 0;
            *a2 = v22;
            v13 = 1;
          }
          else
          {
            v20 = v41;
            if (v41)
            {
              if (v41 < 0x21)
              {
                v25 = *((unsigned int *)v5 + 8);
                if (v25 >= *((unsigned int *)v5 + 9))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v7, v25 + 1, 16);
                  v25 = *((unsigned int *)v5 + 8);
                }
                v13 = 0;
                v26 = (unint64_t *)(*((_QWORD *)v5 + 3) + 16 * v25);
                *v26 = v20;
                v26[1] = v36 & 0xFFFFFFFFFFFFFFF0 | (2 * (v15 & 7));
                v36 = v36 & 0xFFFFFFFFFFFFFFF0 | (2 * (v15 & 7));
                ++*((_DWORD *)v5 + 8);
                v21 = 1;
              }
              else
              {
                *(_QWORD *)&v51.__val_ = std::generic_category();
                v51.__cat_ = (const std::error_category *)"Fixed or VBR abbrev record with size > MaxChunkData";
                llvm::createStringError((llvm *)0x5C, v51, a2);
                v21 = 0;
                v13 = 1;
              }
            }
            else
            {
              v23 = *((unsigned int *)v5 + 8);
              if (v23 >= *((unsigned int *)v5 + 9))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v7, v23 + 1, 16);
                v23 = *((unsigned int *)v5 + 8);
              }
              v21 = 0;
              v24 = (_QWORD *)(*((_QWORD *)v5 + 3) + 16 * v23);
              *v24 = 0;
              v24[1] = v37 | 1;
              v37 |= 1uLL;
              ++*((_DWORD *)v5 + 8);
              v13 = 4;
            }
          }
          if ((v42 & 1) != 0)
          {
            v27 = v41;
            v41 = 0;
            if (v27)
              (*(void (**)(unint64_t))(*(_QWORD *)v27 + 8))(v27);
          }
          if ((v21 & 1) == 0)
            goto LABEL_46;
        }
        else
        {
          v16 = *((unsigned int *)v5 + 8);
          if (v16 >= *((unsigned int *)v5 + 9))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v7, v16 + 1, 16);
            v16 = *((unsigned int *)v5 + 8);
          }
          v17 = (_QWORD *)(*((_QWORD *)v5 + 3) + 16 * v16);
          *v17 = 0;
          v17[1] = v38 & 0xFFFFFFFFFFFFFFF0 | (2 * (v15 & 7));
          v38 = v38 & 0xFFFFFFFFFFFFFFF0 | (2 * (v15 & 7));
          ++*((_DWORD *)v5 + 8);
        }
        v13 = 0;
      }
    }
LABEL_46:
    if ((v44 & 1) != 0)
    {
      v28 = v43;
      v43 = 0;
      if (v28)
        (*(void (**)(unint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
    goto LABEL_21;
  }
LABEL_51:
  if (*((_DWORD *)v5 + 8))
  {
    v30 = this[6];
    if (v30 >= this[7])
    {
      v31 = std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__push_back_slow_path<std::shared_ptr<llvm::BitCodeAbbrev>>(this + 5, (uint64_t)&v39);
    }
    else
    {
      *(_QWORD *)v30 = v6;
      *((_QWORD *)v30 + 1) = v40;
      v39 = 0;
      v40 = 0;
      v31 = v30 + 16;
    }
    this[6] = v31;
    *a2 = 0;
    if ((v48 & 1) == 0)
      goto LABEL_60;
    goto LABEL_56;
  }
  *(_QWORD *)&v52.__val_ = std::generic_category();
  v52.__cat_ = (const std::error_category *)"Abbrev record with no operands";
  llvm::createStringError((llvm *)0x5C, v52, a2);
LABEL_55:
  if ((v48 & 1) != 0)
  {
LABEL_56:
    v32 = v47;
    v47 = 0;
    if (v32)
      (*(void (**)(unint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
LABEL_60:
  v33 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void llvm::BitstreamCursor::ReadBlockInfoBlock(llvm::BitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v6;
  _DWORD *v7;
  unsigned int *v8;
  unint64_t *v9;
  int8x8_t *v10;
  int8x16_t v11;
  unsigned int v12;
  unsigned int v13;
  int8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  BOOL v21;
  int8x8_t v22;
  unint64_t v23;
  void *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int8x8_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unint64_t v61;
  unint64_t v62;
  int8x8_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  const std::error_category *v68;
  void **v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  int8x8_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int *v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int8x16_t v95;
  unint64_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int64x2_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int64x2_t v105;
  uint8x16_t v106;
  uint16x8_t v107;
  uint16x8_t v108;
  uint32x4_t v109;
  uint32x4_t v110;
  int8x16_t v111;
  uint64x2_t v112;
  uint64x2_t v113;
  uint64x2_t v114;
  uint64x2_t v115;
  uint64x2_t v116;
  uint64x2_t v117;
  uint64x2_t v118;
  uint64x2_t v119;
  int8x16_t v120;
  uint32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  uint32x4_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int64x2_t v129;
  int8x16_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int8x16_t v133;
  uint64_t v134;
  unint64_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int8x16_t v139;
  uint8x8_t *v140;
  unint64_t v141;
  int8x16_t v142;
  int8x16_t v143;
  uint8x8_t v144;
  uint16x8_t v145;
  uint32x4_t v146;
  uint64x2_t v147;
  uint64x2_t v148;
  uint64x2_t v149;
  uint32x4_t v150;
  uint64x2_t v151;
  int8x16_t v152;
  int64x2_t v153;
  int8x16_t v154;
  const std::error_category *v155;
  void **v156;
  const std::error_category *v157;
  void **v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int64x2_t v168;
  unint64_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  uint8x16_t v180;
  uint16x8_t v181;
  uint16x8_t v182;
  uint32x4_t v183;
  uint32x4_t v184;
  int8x16_t v185;
  uint64x2_t v186;
  uint64x2_t v187;
  uint64x2_t v188;
  uint64x2_t v189;
  uint64x2_t v190;
  uint64x2_t v191;
  uint64x2_t v192;
  uint64x2_t v193;
  int8x16_t v194;
  uint32x4_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  uint32x4_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int64x2_t v203;
  int8x16_t v204;
  int8x8_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int8x16_t v208;
  uint64_t v209;
  unint64_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int8x16_t v214;
  uint8x8_t *v215;
  unint64_t v216;
  int8x16_t v217;
  int8x16_t v218;
  uint8x8_t v219;
  uint16x8_t v220;
  uint32x4_t v221;
  uint64x2_t v222;
  uint64x2_t v223;
  uint64x2_t v224;
  uint32x4_t v225;
  uint64x2_t v226;
  int8x16_t v227;
  int64x2_t v228;
  int8x16_t v229;
  int8x8_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int64x2_t v236;
  unint64_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  uint8x16_t v248;
  uint16x8_t v249;
  uint16x8_t v250;
  uint32x4_t v251;
  uint32x4_t v252;
  int8x16_t v253;
  uint64x2_t v254;
  uint64x2_t v255;
  uint64x2_t v256;
  uint64x2_t v257;
  uint64x2_t v258;
  uint64x2_t v259;
  uint64x2_t v260;
  uint64x2_t v261;
  int8x16_t v262;
  uint32x4_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  uint32x4_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int64x2_t v271;
  int8x16_t v272;
  int64x2_t v273;
  int64x2_t v274;
  int8x16_t v275;
  uint64_t v276;
  unint64_t v277;
  int64x2_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int8x16_t v281;
  uint8x8_t *v282;
  unint64_t v283;
  int8x16_t v284;
  int8x16_t v285;
  uint8x8_t v286;
  uint16x8_t v287;
  uint32x4_t v288;
  uint64x2_t v289;
  uint64x2_t v290;
  uint64x2_t v291;
  uint32x4_t v292;
  uint64x2_t v293;
  int64x2_t v294;
  int8x16_t v295;
  int64x2_t v296;
  int64x2_t v297;
  int64x2_t v298;
  int64x2_t v299;
  int64x2_t v300;
  int64x2_t v301;
  int8x16_t v302;
  unint64_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  int8x16_t v308;
  int64x2_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int64x2_t v312;
  uint8x16_t v313;
  uint16x8_t v314;
  uint16x8_t v315;
  uint32x4_t v316;
  uint32x4_t v317;
  int8x16_t v318;
  uint64x2_t v319;
  uint64x2_t v320;
  uint64x2_t v321;
  uint64x2_t v322;
  uint64x2_t v323;
  uint64x2_t v324;
  uint64x2_t v325;
  uint64x2_t v326;
  int8x16_t v327;
  uint32x4_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  uint32x4_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int64x2_t v336;
  int8x16_t v337;
  int8x8_t v338;
  int64x2_t v339;
  int64x2_t v340;
  int8x16_t v341;
  uint64_t v342;
  unint64_t v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int8x16_t v347;
  uint8x8_t *v348;
  unint64_t v349;
  int8x16_t v350;
  int8x16_t v351;
  uint8x8_t v352;
  uint16x8_t v353;
  uint32x4_t v354;
  uint64x2_t v355;
  uint64x2_t v356;
  uint64x2_t v357;
  uint32x4_t v358;
  uint64x2_t v359;
  int8x16_t v360;
  int64x2_t v361;
  int8x16_t v362;
  int8x8_t v363;
  int v364;
  _OWORD *v365;
  _OWORD *v366;
  char v367;
  void *v368;
  char *v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  int8x16x4_t *v375;
  uint64_t v376;
  char *v377;
  char *v378;
  uint64_t v379;
  unint64_t v380;
  int8x16x4_t *v381;
  uint64_t v382;
  void **v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  __int128 v391;
  char *v392;
  int v393;
  void *v394;
  unint64_t v395;
  uint64_t v396;
  _OWORD *v397;
  int8x16x4_t *v398;
  uint64_t v399;
  __int128 v400;
  __int128 v401;
  unint64_t v402;
  uint64_t v403;
  _OWORD *v404;
  int8x16x4_t *v405;
  uint64_t v406;
  __int128 v407;
  __int128 v408;
  void *v409;
  int v410;
  char *v411;
  char *v412;
  void *v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  char *v417;
  int8x16_t v418;
  void *v419[2];
  void *v420;
  void *v421;
  void *v422;
  unsigned int v423;
  void *__p;
  uint64_t v425;
  uint64_t v426;
  void *v427;
  uint64_t v428;
  _BYTE v429[512];
  __int128 v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  char v434;
  uint64_t v435;
  int v436;
  void **p_p;
  void *v438;
  const char *v439;
  unint64_t v440;
  unint64_t v441;
  __int16 v442;
  uint64_t v443;
  std::error_code v444;
  std::error_code v445;

  v443 = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::EnterSubBlock(this, 0, 0, (uint64_t *)&v427);
  v6 = v427;
  if (v427)
  {
    *(_BYTE *)(a3 + 32) |= 1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  v415 = a2;
  v7 = 0;
  v419[0] = 0;
  v419[1] = 0;
  v8 = (unsigned int *)((char *)this + 32);
  v9 = (unint64_t *)((char *)this + 16);
  v420 = 0;
  v416 = a3;
  v427 = v429;
  v10 = (int8x8_t *)((char *)this + 24);
  v428 = 0x4000000000;
  v11 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
  v418 = v11;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
LABEL_6:
            v12 = *v8;
            if (*v8)
            {
              v13 = *((_DWORD *)this + 9);
              v14 = *(int8x8_t *)((char *)this + 24);
              if (v12 >= v13)
                goto LABEL_27;
              v16 = *((_QWORD *)this + 1);
              v15 = *((_QWORD *)this + 2);
              v17 = v13 - v12;
              LODWORD(v422) = v13 - v12;
              v18 = v16 - v15;
              if (v16 > v15)
                goto LABEL_9;
            }
            else
            {
              v16 = *((_QWORD *)this + 1);
              v15 = *((_QWORD *)this + 2);
              if (v16 <= v15)
                goto LABEL_255;
              v13 = *((_DWORD *)this + 9);
              if (!v13)
              {
                v14 = *v10;
LABEL_27:
                v26 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v13) & *(_QWORD *)&v14;
                *v10 = (int8x8_t)(*(_QWORD *)&v14 >> v13);
                *v8 = v12 - v13;
                if ((_DWORD)v26 == 1)
                  goto LABEL_28;
                goto LABEL_38;
              }
              v14 = 0;
              v17 = *((_DWORD *)this + 9);
              LODWORD(v422) = v17;
              v18 = v16 - v15;
              if (v16 > v15)
              {
LABEL_9:
                v19 = *(_QWORD *)this;
                v20 = (unsigned int *)(*(_QWORD *)this + v15);
                if (v16 >= v15 + 8)
                {
                  *v10 = *(int8x8_t *)v20;
                  v18 = 8;
                  goto LABEL_36;
                }
                *v10 = 0;
                if (!v18)
                  goto LABEL_36;
                if (v18 >= 8uLL && ((unint64_t)v10 < v19 + v15 + v18 ? (v21 = v20 >= v8) : (v21 = 1), v21))
                {
                  if (v18 >= 0x10uLL)
                  {
                    v23 = v18 - (unint64_t)(v18 & 0xF);
                    v163 = (int64x2_t)xmmword_181267BA0;
                    v164 = (int64x2_t)xmmword_181267BB0;
                    v165 = (int64x2_t)xmmword_181267BC0;
                    v166 = 0uLL;
                    v167 = 0uLL;
                    v168 = (int64x2_t)xmmword_181267BD0;
                    v169 = v23;
                    v170 = (int64x2_t)xmmword_181233120;
                    v171 = (int64x2_t)xmmword_181233290;
                    v172 = (int64x2_t)xmmword_181267BE0;
                    v173 = (int64x2_t)xmmword_1812332B0;
                    v174 = 0uLL;
                    v175 = 0uLL;
                    v176 = 0uLL;
                    v177 = 0uLL;
                    v178 = 0uLL;
                    v179 = 0uLL;
                    do
                    {
                      v180 = *(uint8x16_t *)v20;
                      v20 += 4;
                      v181 = vmovl_u8(*(uint8x8_t *)v180.i8);
                      v182 = vmovl_high_u8(v180);
                      v183 = vmovl_u16(*(uint16x4_t *)v182.i8);
                      v184 = vmovl_high_u16(v182);
                      v185 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                      v186 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v173, 3uLL), v185);
                      v187 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v168, 3uLL), v185);
                      v188 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v172, 3uLL), v185);
                      v189 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v171, 3uLL), v185);
                      v190 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v165, 3uLL), v185);
                      v191 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v170, 3uLL), v185);
                      v192 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v164, 3uLL), v185);
                      v193.i64[0] = v184.u32[2];
                      v193.i64[1] = v184.u32[3];
                      v194 = (int8x16_t)vshlq_u64(v193, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v163, 3uLL), v185));
                      v195 = vmovl_u16(*(uint16x4_t *)v181.i8);
                      v193.i64[0] = v184.u32[0];
                      v193.i64[1] = v184.u32[1];
                      v196 = (int8x16_t)vshlq_u64(v193, v192);
                      v193.i64[0] = v195.u32[0];
                      v193.i64[1] = v195.u32[1];
                      v197 = (int8x16_t)vshlq_u64(v193, v191);
                      v193.i64[0] = v183.u32[2];
                      v193.i64[1] = v183.u32[3];
                      v198 = (int8x16_t)vshlq_u64(v193, v190);
                      v199 = vmovl_high_u16(v181);
                      v193.i64[0] = v195.u32[2];
                      v193.i64[1] = v195.u32[3];
                      v200 = (int8x16_t)vshlq_u64(v193, v189);
                      v193.i64[0] = v199.u32[0];
                      v193.i64[1] = v199.u32[1];
                      v201 = (int8x16_t)vshlq_u64(v193, v188);
                      v193.i64[0] = v183.u32[0];
                      v193.i64[1] = v183.u32[1];
                      v202 = (int8x16_t)vshlq_u64(v193, v187);
                      v193.i64[0] = v199.u32[2];
                      v193.i64[1] = v199.u32[3];
                      v175 = vorrq_s8((int8x16_t)vshlq_u64(v193, v186), v175);
                      v176 = vorrq_s8(v202, v176);
                      v174 = vorrq_s8(v201, v174);
                      v167 = vorrq_s8(v200, v167);
                      v177 = vorrq_s8(v198, v177);
                      v166 = vorrq_s8(v197, v166);
                      v178 = vorrq_s8(v196, v178);
                      v179 = vorrq_s8(v194, v179);
                      v203 = vdupq_n_s64(0x10uLL);
                      v172 = vaddq_s64(v172, v203);
                      v171 = vaddq_s64(v171, v203);
                      v170 = vaddq_s64(v170, v203);
                      v173 = vaddq_s64(v173, v203);
                      v168 = vaddq_s64(v168, v203);
                      v165 = vaddq_s64(v165, v203);
                      v164 = vaddq_s64(v164, v203);
                      v163 = vaddq_s64(v163, v203);
                      v169 -= 16;
                    }
                    while (v169);
                    v204 = vorrq_s8(vorrq_s8(vorrq_s8(v166, v176), vorrq_s8(v174, v178)), vorrq_s8(vorrq_s8(v167, v177), vorrq_s8(v175, v179)));
                    v205 = vorr_s8(*(int8x8_t *)v204.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL));
                    *v10 = v205;
                    if ((v18 & 0xF) == 0)
                      goto LABEL_36;
                    v22 = v205;
                    if ((v18 & 0xF) < 8uLL)
                      goto LABEL_34;
                  }
                  else
                  {
                    v22 = 0;
                    v23 = 0;
                  }
                  v206 = vdupq_n_s64(v23);
                  v207 = vaddq_s64(v206, (int64x2_t)xmmword_1812332B0);
                  v208 = (int8x16_t)(unint64_t)v22;
                  v209 = v15 + v23;
                  v210 = v23 + (v18 & 7);
                  v23 = v18 - (unint64_t)(v18 & 7);
                  v211 = vaddq_s64(v206, (int64x2_t)xmmword_181267BE0);
                  v212 = vaddq_s64(v206, (int64x2_t)xmmword_181233290);
                  v213 = vaddq_s64(v206, (int64x2_t)xmmword_181233120);
                  v214 = 0uLL;
                  v215 = (uint8x8_t *)(v19 + v209);
                  v216 = v210 - v18;
                  v217 = 0uLL;
                  v218 = 0uLL;
                  do
                  {
                    v219 = *v215++;
                    v220 = vmovl_u8(v219);
                    v221 = vmovl_high_u16(v220);
                    v222.i64[0] = v221.u32[2];
                    v222.i64[1] = v221.u32[3];
                    v223 = v222;
                    v222.i64[0] = v221.u32[0];
                    v222.i64[1] = v221.u32[1];
                    v224 = v222;
                    v225 = vmovl_u16(*(uint16x4_t *)v220.i8);
                    v222.i64[0] = v225.u32[2];
                    v222.i64[1] = v225.u32[3];
                    v226 = v222;
                    v222.i64[0] = v225.u32[0];
                    v222.i64[1] = v225.u32[1];
                    v227 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                    v218 = vorrq_s8((int8x16_t)vshlq_u64(v223, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v207, 3uLL), v227)), v218);
                    v217 = vorrq_s8((int8x16_t)vshlq_u64(v224, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v211, 3uLL), v227)), v217);
                    v214 = vorrq_s8((int8x16_t)vshlq_u64(v226, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v212, 3uLL), v227)), v214);
                    v228 = vdupq_n_s64(8uLL);
                    v208 = vorrq_s8((int8x16_t)vshlq_u64(v222, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v213, 3uLL), v227)), v208);
                    v211 = vaddq_s64(v211, v228);
                    v212 = vaddq_s64(v212, v228);
                    v213 = vaddq_s64(v213, v228);
                    v207 = vaddq_s64(v207, v228);
                    v216 += 8;
                  }
                  while (v216);
                  v229 = vorrq_s8(vorrq_s8(v208, v217), vorrq_s8(v214, v218));
                  v230 = vorr_s8(*(int8x8_t *)v229.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v229, v229, 8uLL));
                  *v10 = v230;
                  if ((v18 & 7) != 0)
                  {
                    v22 = v230;
                    goto LABEL_34;
                  }
                }
                else
                {
                  v23 = 0;
                  v22 = 0;
LABEL_34:
                  v27 = v18 - v23;
                  v28 = 8 * v23;
                  v29 = (unsigned __int8 *)(v19 + v23 + v15);
                  do
                  {
                    v30 = *v29++;
                    *(_QWORD *)&v22 |= (unint64_t)v30 << (v28 & 0xF8);
                    *v10 = v22;
                    v28 += 8;
                    --v27;
                  }
                  while (v27);
                }
LABEL_36:
                *v9 = v15 + v18;
                *v8 = 8 * v18;
                v25 = 8 * v18 - v17;
                if (8 * v18 < v17)
                  goto LABEL_251;
                goto LABEL_37;
              }
            }
            *(_QWORD *)&v430 = v16;
            llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", (_QWORD *)this + 2, (uint64_t *)&v430, (uint64_t *)&v438);
            v24 = v438;
            if (v438)
              goto LABEL_258;
            v11 = v418;
            v25 = *v8 - v17;
            if (*v8 < v17)
            {
LABEL_251:
              llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)this + 8, (int *)&v422, (uint64_t *)&__p);
              v24 = __p;
              goto LABEL_258;
            }
LABEL_37:
            v31 = *(_QWORD *)v10 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v17);
            *v10 = (int8x8_t)(*(unint64_t *)v10 >> v17);
            *v8 = v25;
            v26 = (v31 << v12) | *(_QWORD *)&v14;
            if ((_DWORD)v26 == 1)
            {
LABEL_28:
              llvm::SimpleBitstreamCursor::ReadVBR(this, 8u, (uint64_t)&v430);
              if ((BYTE8(v430) & 1) != 0)
              {
                v24 = (void *)v430;
                goto LABEL_258;
              }
              v11 = v418;
              goto LABEL_41;
            }
LABEL_38:
            if ((_DWORD)v26 != 2)
              break;
LABEL_53:
            if (!v7)
              goto LABEL_255;
            llvm::BitstreamCursor::ReadAbbrevRecord((char **)this, (unint64_t *)&v430);
            v47 = v430;
            if ((_QWORD)v430)
            {
              *(_BYTE *)(v416 + 32) |= 1u;
              *(_QWORD *)v416 = v47;
              v409 = v427;
              if (v427 != v429)
                goto LABEL_260;
              goto LABEL_261;
            }
            v48 = *((_QWORD *)this + 6) - 16;
            v49 = (_OWORD *)*((_QWORD *)v7 + 2);
            if ((unint64_t)v49 >= *((_QWORD *)v7 + 3))
            {
              v11 = v418;
              *((_QWORD *)v7 + 2) = std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__push_back_slow_path<std::shared_ptr<llvm::BitCodeAbbrev>>((char **)v7 + 1, v48);
              v50 = *((_QWORD *)this + 6);
              v51 = *(std::__shared_weak_count **)(v50 - 8);
              if (!v51)
                goto LABEL_5;
            }
            else
            {
              *v49 = *(_OWORD *)v48;
              *(_QWORD *)v48 = 0;
              *(_QWORD *)(v48 + 8) = 0;
              v11 = v418;
              *((_QWORD *)v7 + 2) = v49 + 1;
              v50 = *((_QWORD *)this + 6);
              v51 = *(std::__shared_weak_count **)(v50 - 8);
              if (!v51)
                goto LABEL_5;
            }
            p_shared_owners = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(p_shared_owners);
            while (__stlxr(v53 - 1, p_shared_owners));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
              v11 = v418;
            }
LABEL_5:
            *((_QWORD *)this + 6) = v50 - 16;
          }
          if (!(_DWORD)v26)
          {
            if (*((_DWORD *)this + 18))
            {
              if (*v8 < 0x20)
              {
                v410 = 0;
              }
              else
              {
                *v10 = (int8x8_t)(*(unint64_t *)v10 >> (*(_BYTE *)v8 - 32));
                v410 = 32;
              }
              *((_DWORD *)this + 8) = v410;
              llvm::BitstreamCursor::popBlockScope(this);
              *(_BYTE *)(v416 + 32) &= ~1u;
              *(_OWORD *)v416 = *(_OWORD *)v419;
              *(_QWORD *)(v416 + 16) = v420;
              v419[0] = 0;
              v419[1] = 0;
              v420 = 0;
              *(_BYTE *)(v416 + 24) = 1;
              v409 = v427;
              if (v427 != v429)
                goto LABEL_260;
              goto LABEL_261;
            }
LABEL_255:
            *(_BYTE *)(v416 + 32) &= ~1u;
            *(_BYTE *)v416 = 0;
            *(_BYTE *)(v416 + 24) = 0;
            v409 = v427;
            if (v427 != v429)
              goto LABEL_260;
            goto LABEL_261;
          }
          v32 = (v26 << 32) | 3;
          if ((_DWORD)v32 == 2)
            break;
          if (HIDWORD(v32) == 2)
            goto LABEL_53;
          LODWORD(v428) = 0;
          llvm::BitstreamCursor::readRecord(this, SHIDWORD(v32), (uint64_t)&v427, 0, (uint64_t)&v438);
          if ((v439 & 1) != 0)
          {
            v367 = 0;
            v368 = v438;
            v438 = 0;
            *(_BYTE *)(v416 + 32) |= 1u;
            *(_QWORD *)v416 = v368;
            v11 = v418;
            goto LABEL_236;
          }
          if ((_DWORD)v438 != 3)
          {
            if ((_DWORD)v438 != 2)
            {
              v11 = v418;
              if ((_DWORD)v438 == 1)
              {
                if (!(_DWORD)v428)
                  goto LABEL_204;
                v364 = *(_DWORD *)v427;
                v365 = v419[1];
                if (v419[0] == v419[1])
                {
LABEL_191:
                  if (v419[1] >= v420)
                  {
                    v11 = v418;
                    v366 = std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__emplace_back_slow_path<>(v419);
                  }
                  else
                  {
                    *((_OWORD *)v419[1] + 3) = 0u;
                    v365[4] = 0u;
                    v365[1] = 0u;
                    v365[2] = 0u;
                    v366 = v365 + 5;
                    *v365 = 0u;
                  }
                  v419[1] = v366;
                  *((_DWORD *)v366 - 20) = v364;
                  v7 = v366 - 5;
                }
                else
                {
                  v7 = (char *)v419[1] - 80;
                  if (*((_DWORD *)v419[1] - 20) != v364)
                  {
                    v7 = v419[0];
                    while (*v7 != v364)
                    {
                      v7 += 20;
                      if (v7 == v419[1])
                        goto LABEL_191;
                    }
                  }
                }
              }
              goto LABEL_235;
            }
            v11 = v418;
            if (!v7)
            {
LABEL_204:
              v367 = 0;
              *(_BYTE *)(v416 + 32) &= ~1u;
              *(_BYTE *)v416 = 0;
              *(_BYTE *)(v416 + 24) = 0;
              goto LABEL_236;
            }
            if (!v415)
              goto LABEL_235;
            v375 = (int8x16x4_t *)v427;
            v376 = v428;
            if (v428 >= 0x17)
            {
              if ((v428 | 7) == 0x17)
                v379 = (v428 & 0xFFFFFFF8) + 8;
              else
                v379 = v428 | 7;
              v377 = (char *)operator new(v379 + 1);
              v11 = v418;
              v431 = v379 - 0x7FFFFFFFFFFFFFFFLL;
              *(_QWORD *)&v430 = v377;
              *((_QWORD *)&v430 + 1) = v376;
            }
            else
            {
              HIBYTE(v431) = v428;
              v377 = (char *)&v430;
              if (!(_DWORD)v428)
              {
                v378 = (char *)&v430;
                goto LABEL_217;
              }
            }
            v380 = (v376 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (v380 >= 0x1F && (v377 >= (char *)v375 + 8 * v376 || v375 >= (int8x16x4_t *)&v377[v380 + 1]))
            {
              v395 = v380 + 1;
              v396 = (v380 + 1) & 0x3FFFFFFFFFFFFFE0;
              v381 = (int8x16x4_t *)((char *)v375 + 8 * v396);
              v378 = &v377[v396];
              v397 = v377 + 16;
              v398 = v375 + 2;
              v399 = v396;
              do
              {
                *(_QWORD *)&v400 = vqtbl4q_s8(v398[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
                *(_QWORD *)&v401 = vqtbl4q_s8(*v398, (int8x16_t)xmmword_18125CFF0).u64[0];
                *((_QWORD *)&v400 + 1) = vqtbl4q_s8(v398[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
                *((_QWORD *)&v401 + 1) = vqtbl4q_s8(v398[1], (int8x16_t)xmmword_18125CFF0).u64[0];
                *(v397 - 1) = v400;
                *v397 = v401;
                v397 += 2;
                v398 += 4;
                v399 -= 32;
              }
              while (v399);
              if (v395 == v396)
                goto LABEL_217;
            }
            else
            {
              v381 = v375;
              v378 = v377;
            }
            do
            {
              v382 = v381->val[0].i64[0];
              v381 = (int8x16x4_t *)((char *)v381 + 8);
              *v378++ = v382;
            }
            while (v381 != (int8x16x4_t *)((char *)v375 + 8 * v376));
LABEL_217:
            *v378 = 0;
            v383 = (void **)(v7 + 8);
            if (*((char *)v7 + 55) < 0)
            {
              operator delete(*v383);
              v11 = v418;
            }
            *(_OWORD *)v383 = v430;
            *((_QWORD *)v7 + 6) = v431;
            goto LABEL_235;
          }
          if (!v7)
          {
            v367 = 0;
            *(_BYTE *)(v416 + 32) &= ~1u;
            *(_BYTE *)v416 = 0;
            *(_BYTE *)(v416 + 24) = 0;
            v11 = v418;
            goto LABEL_236;
          }
          v11 = v418;
          if (!v415)
            goto LABEL_235;
          v369 = (char *)v427;
          v370 = (char *)v427 + 8;
          LODWORD(__p) = *(_QWORD *)v427;
          v371 = v428;
          if (!(_DWORD)v428)
            abort();
          v372 = 8 * v428;
          v373 = v372 - 8;
          if ((unint64_t)(v372 - 8) > 0xB7)
          {
            v384 = v373 >> 3;
            v385 = ((v373 >> 3) & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v384 | 7) != 0x17)
              v385 = v384 | 7;
            v386 = v385 + 1;
            v417 = (char *)v427;
            v414 = 8 * v428;
            v374 = (char *)operator new(v385 + 1);
            v372 = v414;
            v369 = v417;
            v431 = v386 | 0x8000000000000000;
            *(_QWORD *)&v430 = v374;
            *((_QWORD *)&v430 + 1) = v384;
          }
          else
          {
            HIBYTE(v431) = (unint64_t)v373 >> 3;
            v374 = (char *)&v430;
          }
          if ((_DWORD)v371 == 1)
          {
            v387 = v374;
          }
          else
          {
            v388 = (v371 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
            if (v388 >= 0x1F && (v374 >= &v369[8 * v371] || v370 >= &v374[v388 + 1]))
            {
              v402 = v388 + 1;
              v403 = (v388 + 1) & 0x3FFFFFFFFFFFFFE0;
              v370 += 8 * v403;
              v387 = &v374[v403];
              v404 = v374 + 16;
              v405 = (int8x16x4_t *)(v369 + 136);
              v406 = v403;
              do
              {
                *(_QWORD *)&v407 = vqtbl4q_s8(v405[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
                *(_QWORD *)&v408 = vqtbl4q_s8(*v405, (int8x16_t)xmmword_18125CFF0).u64[0];
                *((_QWORD *)&v407 + 1) = vqtbl4q_s8(v405[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
                *((_QWORD *)&v408 + 1) = vqtbl4q_s8(v405[1], (int8x16_t)xmmword_18125CFF0).u64[0];
                *(v404 - 1) = v407;
                *v404 = v408;
                v404 += 2;
                v405 += 4;
                v406 -= 32;
              }
              while (v406);
              if (v402 == v403)
                goto LABEL_230;
            }
            else
            {
              v387 = v374;
            }
            do
            {
              v389 = *(_QWORD *)v370;
              v370 += 8;
              *v387++ = v389;
            }
            while (v370 != &v369[v372]);
          }
LABEL_230:
          *v387 = 0;
          v390 = *((_QWORD *)v7 + 8);
          if (v390 < *((_QWORD *)v7 + 9))
          {
            *(_DWORD *)v390 = (_DWORD)__p;
            v391 = v430;
            *(_QWORD *)(v390 + 24) = v431;
            *(_OWORD *)(v390 + 8) = v391;
            *((_QWORD *)v7 + 8) = v390 + 32;
LABEL_234:
            v11 = v418;
            goto LABEL_235;
          }
          v392 = std::vector<std::pair<unsigned int,std::string>>::__emplace_back_slow_path<unsigned int,std::string>((char **)v7 + 7, &__p, (uint64_t)&v430);
          v393 = SHIBYTE(v431);
          *((_QWORD *)v7 + 8) = v392;
          v11 = v418;
          if (v393 < 0)
          {
            operator delete((void *)v430);
            goto LABEL_234;
          }
LABEL_235:
          v367 = 1;
LABEL_236:
          if ((v439 & 1) != 0)
          {
            v394 = v438;
            v438 = 0;
            if (v394)
            {
              (*(void (**)(void *))(*(_QWORD *)v394 + 8))(v394);
              v11 = v418;
            }
          }
          if ((v367 & 1) == 0)
            goto LABEL_259;
        }
LABEL_41:
        v33 = *v8;
        if (*v8 >= 4)
        {
          v54 = *(_QWORD *)v10 & 0xFLL;
          *v10 = (int8x8_t)(*(unint64_t *)v10 >> 4);
          *v8 = v33 - 4;
          if ((v54 & 8) != 0)
            goto LABEL_94;
          goto LABEL_64;
        }
        if (!v33)
          break;
        v34 = *v10;
        v35 = 4 - v33;
        v423 = 4 - v33;
        v37 = *((_QWORD *)this + 1);
        v36 = *((_QWORD *)this + 2);
        v38 = v37 - v36;
        if (v37 > v36)
          goto LABEL_44;
LABEL_77:
        v68 = std::generic_category();
        __p = 0;
        v425 = 0;
        v426 = 0;
        DWORD2(v430) = 0;
        v434 = 0;
        v435 = 0;
        v436 = 1;
        v432 = 0;
        v433 = 0;
        v431 = 0;
        *(_QWORD *)&v430 = &unk_1E0E22B10;
        p_p = &__p;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v430, 0, 0, 0);
        v438 = &unk_1E0E203C0;
        v439 = "Unexpected end of file reading %u of %u bytes";
        v440 = *v9;
        v441 = v37;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v430, (uint64_t)&v438);
        v69 = p_p;
        v24 = operator new(0x38uLL);
        v442 = 260;
        v438 = v69;
        llvm::StringError::StringError((uint64_t)v24, (llvm::Twine *)&v438, 5, (uint64_t)v68);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v430);
        if (SHIBYTE(v426) < 0)
        {
          operator delete(__p);
          v11 = v418;
          if (v24)
            goto LABEL_258;
        }
        else
        {
          v11 = v418;
          if (v24)
            goto LABEL_258;
        }
      }
      v34.i8[0] = 0;
      v35 = 4;
      v423 = 4;
      v37 = *((_QWORD *)this + 1);
      v36 = *((_QWORD *)this + 2);
      v38 = v37 - v36;
      if (v37 <= v36)
        goto LABEL_77;
LABEL_44:
      v39 = *(_QWORD *)this;
      v40 = (unsigned int *)(*(_QWORD *)this + v36);
      if (v37 >= v36 + 8)
      {
        v42 = *(_QWORD *)v40;
        *v10 = (int8x8_t)v42;
        v38 = 8;
        goto LABEL_90;
      }
      *v10 = 0;
      if (!v38)
      {
        v42 = 0;
        goto LABEL_90;
      }
      if (v38 < 8uLL || (unint64_t)v10 < v39 + v36 + v38 && v40 < v8)
      {
        v41 = 0;
        v42 = 0;
LABEL_50:
        v43 = v38 - v41;
        v44 = 8 * v41;
        v45 = (unsigned __int8 *)(v39 + v41 + v36);
        do
        {
          v46 = *v45++;
          v42 |= (unint64_t)v46 << (v44 & 0xF8);
          *v10 = (int8x8_t)v42;
          v44 += 8;
          --v43;
        }
        while (v43);
        goto LABEL_90;
      }
      if (v38 >= 0x10uLL)
      {
        v41 = v38 - (unint64_t)(v38 & 0xF);
        v231 = (int64x2_t)xmmword_1812332B0;
        v232 = (int64x2_t)xmmword_181267BE0;
        v233 = (int64x2_t)xmmword_181233290;
        v234 = 0uLL;
        v235 = 0uLL;
        v236 = (int64x2_t)xmmword_181233120;
        v237 = v41;
        v238 = (int64x2_t)xmmword_181267BD0;
        v239 = (int64x2_t)xmmword_181267BC0;
        v240 = (int64x2_t)xmmword_181267BB0;
        v241 = (int64x2_t)xmmword_181267BA0;
        v242 = 0uLL;
        v243 = 0uLL;
        v244 = 0uLL;
        v245 = 0uLL;
        v246 = 0uLL;
        v247 = 0uLL;
        do
        {
          v248 = *(uint8x16_t *)v40;
          v40 += 4;
          v249 = vmovl_u8(*(uint8x8_t *)v248.i8);
          v250 = vmovl_high_u8(v248);
          v251 = vmovl_u16(*(uint16x4_t *)v250.i8);
          v252 = vmovl_high_u16(v250);
          v253 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
          v254 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v231, 3uLL), v253);
          v255 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v238, 3uLL), v253);
          v256 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v232, 3uLL), v253);
          v257 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v233, 3uLL), v253);
          v258 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v239, 3uLL), v253);
          v259 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v236, 3uLL), v253);
          v260 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v240, 3uLL), v253);
          v261.i64[0] = v252.u32[2];
          v261.i64[1] = v252.u32[3];
          v262 = (int8x16_t)vshlq_u64(v261, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v241, 3uLL), v253));
          v263 = vmovl_u16(*(uint16x4_t *)v249.i8);
          v261.i64[0] = v252.u32[0];
          v261.i64[1] = v252.u32[1];
          v264 = (int8x16_t)vshlq_u64(v261, v260);
          v261.i64[0] = v263.u32[0];
          v261.i64[1] = v263.u32[1];
          v265 = (int8x16_t)vshlq_u64(v261, v259);
          v261.i64[0] = v251.u32[2];
          v261.i64[1] = v251.u32[3];
          v266 = (int8x16_t)vshlq_u64(v261, v258);
          v267 = vmovl_high_u16(v249);
          v261.i64[0] = v263.u32[2];
          v261.i64[1] = v263.u32[3];
          v268 = (int8x16_t)vshlq_u64(v261, v257);
          v261.i64[0] = v267.u32[0];
          v261.i64[1] = v267.u32[1];
          v269 = (int8x16_t)vshlq_u64(v261, v256);
          v261.i64[0] = v251.u32[0];
          v261.i64[1] = v251.u32[1];
          v270 = (int8x16_t)vshlq_u64(v261, v255);
          v261.i64[0] = v267.u32[2];
          v261.i64[1] = v267.u32[3];
          v243 = vorrq_s8((int8x16_t)vshlq_u64(v261, v254), v243);
          v244 = vorrq_s8(v270, v244);
          v242 = vorrq_s8(v269, v242);
          v235 = vorrq_s8(v268, v235);
          v245 = vorrq_s8(v266, v245);
          v234 = vorrq_s8(v265, v234);
          v246 = vorrq_s8(v264, v246);
          v247 = vorrq_s8(v262, v247);
          v271 = vdupq_n_s64(0x10uLL);
          v232 = vaddq_s64(v232, v271);
          v233 = vaddq_s64(v233, v271);
          v236 = vaddq_s64(v236, v271);
          v231 = vaddq_s64(v231, v271);
          v238 = vaddq_s64(v238, v271);
          v239 = vaddq_s64(v239, v271);
          v240 = vaddq_s64(v240, v271);
          v241 = vaddq_s64(v241, v271);
          v237 -= 16;
        }
        while (v237);
        v272 = vorrq_s8(vorrq_s8(vorrq_s8(v234, v244), vorrq_s8(v242, v246)), vorrq_s8(vorrq_s8(v235, v245), vorrq_s8(v243, v247)));
        *(int8x8_t *)v272.i8 = vorr_s8(*(int8x8_t *)v272.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v272, v272, 8uLL));
        *v10 = *(int8x8_t *)v272.i8;
        v42 = v272.i64[0];
        if ((v38 & 0xF) == 0)
          goto LABEL_90;
        if ((v38 & 0xF) < 8uLL)
          goto LABEL_50;
      }
      else
      {
        v42 = 0;
        v41 = 0;
      }
      v273 = vdupq_n_s64(v41);
      v274 = vaddq_s64(v273, (int64x2_t)xmmword_1812332B0);
      v275 = (int8x16_t)v42;
      v276 = v41 + v36;
      v277 = v41 + (v38 & 7);
      v41 = v38 - (unint64_t)(v38 & 7);
      v278 = vaddq_s64(v273, (int64x2_t)xmmword_181267BE0);
      v279 = vaddq_s64(v273, (int64x2_t)xmmword_181233290);
      v280 = vaddq_s64(v273, (int64x2_t)xmmword_181233120);
      v281 = 0uLL;
      v282 = (uint8x8_t *)(v39 + v276);
      v283 = v277 - v38;
      v284 = 0uLL;
      v285 = 0uLL;
      do
      {
        v286 = *v282++;
        v287 = vmovl_u8(v286);
        v288 = vmovl_high_u16(v287);
        v289.i64[0] = v288.u32[2];
        v289.i64[1] = v288.u32[3];
        v290 = v289;
        v289.i64[0] = v288.u32[0];
        v289.i64[1] = v288.u32[1];
        v291 = v289;
        v292 = vmovl_u16(*(uint16x4_t *)v287.i8);
        v289.i64[0] = v292.u32[2];
        v289.i64[1] = v292.u32[3];
        v293 = v289;
        v289.i64[0] = v292.u32[0];
        v289.i64[1] = v292.u32[1];
        v285 = vorrq_s8((int8x16_t)vshlq_u64(v290, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v274, 3uLL), v11)), v285);
        v284 = vorrq_s8((int8x16_t)vshlq_u64(v291, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v278, 3uLL), v11)), v284);
        v281 = vorrq_s8((int8x16_t)vshlq_u64(v293, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v279, 3uLL), v11)), v281);
        v294 = vdupq_n_s64(8uLL);
        v275 = vorrq_s8((int8x16_t)vshlq_u64(v289, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v280, 3uLL), v11)), v275);
        v278 = vaddq_s64(v278, v294);
        v279 = vaddq_s64(v279, v294);
        v280 = vaddq_s64(v280, v294);
        v274 = vaddq_s64(v274, v294);
        v283 += 8;
      }
      while (v283);
      v295 = vorrq_s8(vorrq_s8(v275, v284), vorrq_s8(v281, v285));
      *(int8x8_t *)v295.i8 = vorr_s8(*(int8x8_t *)v295.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v295, v295, 8uLL));
      *v10 = *(int8x8_t *)v295.i8;
      v42 = v295.i64[0];
      if ((v38 & 7) != 0)
        goto LABEL_50;
LABEL_90:
      *v9 = v36 + v38;
      *v8 = 8 * v38;
      if (8 * v38 >= v35)
        break;
      llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)this + 8, (int *)&v423, (uint64_t *)&v422);
      v11 = v418;
      v24 = v422;
      if (v422)
        goto LABEL_258;
    }
    *v10 = (int8x8_t)(v42 >> v35);
    *v8 = 8 * v38 - v35;
    if (((_DWORD)v42 << v33) & 8 | v34.i8[0] & 8)
      break;
LABEL_64:
    if (*v8 < 0x20)
    {
      *((_DWORD *)this + 8) = 0;
      LODWORD(v422) = 32;
      v57 = *((_QWORD *)this + 1);
      v56 = *((_QWORD *)this + 2);
      v58 = v57 - v56;
      if (v57 > v56)
      {
        v59 = *(_QWORD *)this;
        v60 = (unsigned int *)(*(_QWORD *)this + v56);
        if (v57 >= v56 + 8)
        {
          *v10 = *(int8x8_t *)v60;
          v58 = 8;
          goto LABEL_86;
        }
        *v10 = 0;
        if (!v58)
          goto LABEL_86;
        v61 = (v57 - v56);
        if (v58 < 8uLL || (unint64_t)v10 < v59 + v56 + v61 && v60 < v8)
        {
          v62 = 0;
          v63 = 0;
          goto LABEL_73;
        }
        if (v61 >= 0x10)
        {
          v62 = v61 - (v58 & 0xF);
          v296 = (int64x2_t)xmmword_181267BA0;
          v297 = (int64x2_t)xmmword_181267BB0;
          v298 = (int64x2_t)xmmword_181267BC0;
          v299 = (int64x2_t)xmmword_181267BD0;
          v300 = (int64x2_t)xmmword_1812332B0;
          v301 = (int64x2_t)xmmword_181267BE0;
          v302 = 0uLL;
          v303 = v62;
          v304 = 0uLL;
          v305 = 0uLL;
          v306 = 0uLL;
          v307 = 0uLL;
          v308 = 0uLL;
          v309 = (int64x2_t)xmmword_181233290;
          v310 = 0uLL;
          v311 = 0uLL;
          v312 = (int64x2_t)xmmword_181233120;
          do
          {
            v313 = *(uint8x16_t *)v60;
            v60 += 4;
            v314 = vmovl_u8(*(uint8x8_t *)v313.i8);
            v315 = vmovl_high_u8(v313);
            v316 = vmovl_u16(*(uint16x4_t *)v315.i8);
            v317 = vmovl_high_u16(v315);
            v318 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
            v319 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v300, 3uLL), v318);
            v320 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v299, 3uLL), v318);
            v321 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v301, 3uLL), v318);
            v322 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v309, 3uLL), v318);
            v323 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v298, 3uLL), v318);
            v324 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v312, 3uLL), v318);
            v325 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v297, 3uLL), v318);
            v326.i64[0] = v317.u32[2];
            v326.i64[1] = v317.u32[3];
            v327 = (int8x16_t)vshlq_u64(v326, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v296, 3uLL), v318));
            v328 = vmovl_u16(*(uint16x4_t *)v314.i8);
            v326.i64[0] = v317.u32[0];
            v326.i64[1] = v317.u32[1];
            v329 = (int8x16_t)vshlq_u64(v326, v325);
            v326.i64[0] = v328.u32[0];
            v326.i64[1] = v328.u32[1];
            v330 = (int8x16_t)vshlq_u64(v326, v324);
            v326.i64[0] = v316.u32[2];
            v326.i64[1] = v316.u32[3];
            v331 = (int8x16_t)vshlq_u64(v326, v323);
            v332 = vmovl_high_u16(v314);
            v326.i64[0] = v328.u32[2];
            v326.i64[1] = v328.u32[3];
            v333 = (int8x16_t)vshlq_u64(v326, v322);
            v326.i64[0] = v332.u32[0];
            v326.i64[1] = v332.u32[1];
            v334 = (int8x16_t)vshlq_u64(v326, v321);
            v326.i64[0] = v316.u32[0];
            v326.i64[1] = v316.u32[1];
            v335 = (int8x16_t)vshlq_u64(v326, v320);
            v326.i64[0] = v332.u32[2];
            v326.i64[1] = v332.u32[3];
            v306 = vorrq_s8((int8x16_t)vshlq_u64(v326, v319), v306);
            v307 = vorrq_s8(v335, v307);
            v305 = vorrq_s8(v334, v305);
            v304 = vorrq_s8(v333, v304);
            v308 = vorrq_s8(v331, v308);
            v302 = vorrq_s8(v330, v302);
            v310 = vorrq_s8(v329, v310);
            v311 = vorrq_s8(v327, v311);
            v336 = vdupq_n_s64(0x10uLL);
            v301 = vaddq_s64(v301, v336);
            v309 = vaddq_s64(v309, v336);
            v312 = vaddq_s64(v312, v336);
            v300 = vaddq_s64(v300, v336);
            v299 = vaddq_s64(v299, v336);
            v298 = vaddq_s64(v298, v336);
            v297 = vaddq_s64(v297, v336);
            v296 = vaddq_s64(v296, v336);
            v303 -= 16;
          }
          while (v303);
          v337 = vorrq_s8(vorrq_s8(vorrq_s8(v302, v307), vorrq_s8(v305, v310)), vorrq_s8(vorrq_s8(v304, v308), vorrq_s8(v306, v311)));
          v338 = vorr_s8(*(int8x8_t *)v337.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v337, v337, 8uLL));
          *v10 = v338;
          if ((v58 & 0xF) == 0)
            goto LABEL_86;
          v63 = v338;
          if ((v58 & 0xF) < 8uLL)
            goto LABEL_73;
        }
        else
        {
          v63 = 0;
          v62 = 0;
        }
        v339 = vdupq_n_s64(v62);
        v340 = vaddq_s64(v339, (int64x2_t)xmmword_1812332B0);
        v341 = (int8x16_t)(unint64_t)v63;
        v342 = v62 + v56;
        v343 = v62 + (v58 & 7);
        v62 = v61 - (v58 & 7);
        v344 = vaddq_s64(v339, (int64x2_t)xmmword_181267BE0);
        v345 = vaddq_s64(v339, (int64x2_t)xmmword_181233290);
        v346 = vaddq_s64(v339, (int64x2_t)xmmword_181233120);
        v347 = 0uLL;
        v348 = (uint8x8_t *)(v59 + v342);
        v349 = v343 - v61;
        v350 = 0uLL;
        v351 = 0uLL;
        do
        {
          v352 = *v348++;
          v353 = vmovl_u8(v352);
          v354 = vmovl_high_u16(v353);
          v355.i64[0] = v354.u32[2];
          v355.i64[1] = v354.u32[3];
          v356 = v355;
          v355.i64[0] = v354.u32[0];
          v355.i64[1] = v354.u32[1];
          v357 = v355;
          v358 = vmovl_u16(*(uint16x4_t *)v353.i8);
          v355.i64[0] = v358.u32[2];
          v355.i64[1] = v358.u32[3];
          v359 = v355;
          v355.i64[0] = v358.u32[0];
          v355.i64[1] = v358.u32[1];
          v360 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
          v351 = vorrq_s8((int8x16_t)vshlq_u64(v356, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v340, 3uLL), v360)), v351);
          v350 = vorrq_s8((int8x16_t)vshlq_u64(v357, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v344, 3uLL), v360)), v350);
          v347 = vorrq_s8((int8x16_t)vshlq_u64(v359, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v345, 3uLL), v360)), v347);
          v361 = vdupq_n_s64(8uLL);
          v341 = vorrq_s8((int8x16_t)vshlq_u64(v355, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v346, 3uLL), v360)), v341);
          v344 = vaddq_s64(v344, v361);
          v345 = vaddq_s64(v345, v361);
          v346 = vaddq_s64(v346, v361);
          v340 = vaddq_s64(v340, v361);
          v349 += 8;
        }
        while (v349);
        v362 = vorrq_s8(vorrq_s8(v341, v350), vorrq_s8(v347, v351));
        v363 = vorr_s8(*(int8x8_t *)v362.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v362, v362, 8uLL));
        *v10 = v363;
        if ((v58 & 7) != 0)
        {
          v63 = v363;
LABEL_73:
          v64 = v61 - v62;
          v65 = 8 * v62;
          v66 = (unsigned __int8 *)(v59 + v62 + v56);
          do
          {
            v67 = *v66++;
            *(_QWORD *)&v63 |= (unint64_t)v67 << (v65 & 0xF8);
            *v10 = v63;
            v65 += 8;
            --v64;
          }
          while (v64);
        }
LABEL_86:
        *v9 = v56 + v58;
        v70 = 8 * v58;
        *v8 = v70;
        if (v70 > 0x1F)
          goto LABEL_140;
        goto LABEL_87;
      }
      *(_QWORD *)&v430 = *((_QWORD *)this + 1);
      llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", (_QWORD *)this + 2, (uint64_t *)&v430, (uint64_t *)&v438);
      v24 = v438;
      if (v438)
        goto LABEL_258;
      v70 = *v8;
      if (*v8 > 0x1F)
      {
LABEL_140:
        v55 = (unint64_t)*v10;
        *v10 = (int8x8_t)HIDWORD(*(unint64_t *)v10);
        *v8 = v70 - 32;
        v11 = v418;
        goto LABEL_141;
      }
LABEL_87:
      llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)this + 8, (int *)&v422, (uint64_t *)&__p);
      v24 = __p;
      v11 = v418;
      if (__p)
        goto LABEL_258;
    }
    else
    {
      v55 = *(unint64_t *)v10 >> (*(_BYTE *)v8 - 32);
      *v10 = (int8x8_t)HIDWORD(v55);
      *v8 = 0;
LABEL_141:
      v160 = *((_QWORD *)this + 1);
      v159 = *((_QWORD *)this + 2);
      v161 = *((unsigned int *)this + 8);
      v162 = 8 * v159 - v161 + 32 * v55;
      v438 = (void *)v162;
      if ((_DWORD)v161 || v160 > v159)
      {
        if (v160 >= v162 >> 3)
        {
          *v9 = (v162 >> 3) & 0x1FFFFFFFFFFFFFF8;
          *v8 = 0;
          if ((v162 & 0x3F) == 0)
            goto LABEL_158;
          llvm::SimpleBitstreamCursor::Read(this, v162 & 0x3F, (uint64_t)&v430);
          if ((BYTE8(v430) & 1) == 0)
          {
            v11 = v418;
LABEL_158:
            __p = 0;
            goto LABEL_159;
          }
          __p = (void *)v430;
          v11 = v418;
          if (!(_QWORD)v430)
            goto LABEL_158;
        }
        else
        {
          *(_QWORD *)&v430 = 8 * v159 - v161;
          llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v438, (uint64_t *)&v430, (uint64_t *)&__p);
          v11 = v418;
        }
      }
      else
      {
        *(_QWORD *)&v445.__val_ = std::generic_category();
        v445.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
        llvm::createStringError((llvm *)0x5C, v445, &__p);
        v11 = v418;
      }
LABEL_159:
      v24 = __p;
      if (__p)
        goto LABEL_258;
    }
  }
LABEL_94:
  v71 = 0;
  v72 = *v8;
  while (1)
  {
    while (1)
    {
      if (v71 >= 0x1D)
      {
        *(_QWORD *)&v444.__val_ = std::generic_category();
        v444.__cat_ = (const std::error_category *)"Unterminated VBR";
        llvm::createStringError((llvm *)0x5C, v444, &v421);
        v11 = v418;
        v24 = v421;
        if (!v421)
          goto LABEL_6;
        goto LABEL_258;
      }
      if (v72 < 4)
        break;
      v73 = *(_QWORD *)v10 & 0xFLL;
      *v10 = (int8x8_t)(*(unint64_t *)v10 >> 4);
      *v8 = v72 - 4;
      v72 -= 4;
      v71 += 3;
      if ((v73 & 8) == 0)
        goto LABEL_64;
    }
    if (v72)
    {
      v74 = *v10;
      v76 = *((_QWORD *)this + 1);
      v75 = *((_QWORD *)this + 2);
      v77 = v76 - v75;
      if (v76 <= v75)
        goto LABEL_131;
    }
    else
    {
      v74 = 0;
      v76 = *((_QWORD *)this + 1);
      v75 = *((_QWORD *)this + 2);
      v77 = v76 - v75;
      if (v76 <= v75)
      {
LABEL_131:
        v155 = std::generic_category();
        __p = 0;
        v425 = 0;
        v426 = 0;
        DWORD2(v430) = 0;
        v434 = 0;
        v435 = 0;
        v436 = 1;
        v432 = 0;
        v433 = 0;
        v431 = 0;
        *(_QWORD *)&v430 = &unk_1E0E22B10;
        p_p = &__p;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v430, 0, 0, 0);
        v438 = &unk_1E0E203C0;
        v439 = "Unexpected end of file reading %u of %u bytes";
        v440 = *v9;
        v441 = v76;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v430, (uint64_t)&v438);
        v156 = p_p;
        v24 = operator new(0x38uLL);
        v442 = 260;
        v438 = v156;
        llvm::StringError::StringError((uint64_t)v24, (llvm::Twine *)&v438, 5, (uint64_t)v155);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v430);
        if (SHIBYTE(v426) < 0)
          operator delete(__p);
        v11 = v418;
        if (!v24)
          goto LABEL_6;
        goto LABEL_258;
      }
    }
    v78 = *(_QWORD *)this;
    v79 = (unsigned int *)(*(_QWORD *)this + v75);
    if (v76 >= v75 + 8)
    {
      v81 = *(_QWORD *)v79;
      *v10 = (int8x8_t)v81;
      v77 = 8;
      goto LABEL_118;
    }
    *v10 = 0;
    if (!v77)
    {
      v81 = 0;
      goto LABEL_118;
    }
    if (v77 < 8uLL || ((unint64_t)v10 < v78 + v75 + v77 ? (v80 = v79 >= v8) : (v80 = 1), !v80))
    {
      v82 = 0;
      v81 = 0;
LABEL_114:
      v83 = v77 - v82;
      v84 = 8 * v82;
      v85 = (unsigned __int8 *)(v78 + v82 + v75);
      do
      {
        v86 = *v85++;
        v81 |= (unint64_t)v86 << (v84 & 0xF8);
        *v10 = (int8x8_t)v81;
        v84 += 8;
        --v83;
      }
      while (v83);
      goto LABEL_118;
    }
    if (v77 >= 0x10uLL)
    {
      v82 = v77 - (unint64_t)(v77 & 0xF);
      v89 = (int64x2_t)xmmword_181267BA0;
      v90 = (int64x2_t)xmmword_181267BB0;
      v91 = (int64x2_t)xmmword_181267BC0;
      v92 = (int64x2_t)xmmword_181267BD0;
      v93 = (int64x2_t)xmmword_1812332B0;
      v94 = (int64x2_t)xmmword_181267BE0;
      v95 = 0uLL;
      v96 = v82;
      v97 = 0uLL;
      v98 = 0uLL;
      v99 = 0uLL;
      v100 = 0uLL;
      v101 = 0uLL;
      v102 = (int64x2_t)xmmword_181233290;
      v103 = 0uLL;
      v104 = 0uLL;
      v105 = (int64x2_t)xmmword_181233120;
      do
      {
        v106 = *(uint8x16_t *)v79;
        v79 += 4;
        v107 = vmovl_u8(*(uint8x8_t *)v106.i8);
        v108 = vmovl_high_u8(v106);
        v109 = vmovl_u16(*(uint16x4_t *)v108.i8);
        v110 = vmovl_high_u16(v108);
        v111 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
        v112 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v93, 3uLL), v111);
        v113 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v92, 3uLL), v111);
        v114 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v94, 3uLL), v111);
        v115 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v102, 3uLL), v111);
        v116 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v91, 3uLL), v111);
        v117 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v105, 3uLL), v111);
        v118 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v90, 3uLL), v111);
        v119.i64[0] = v110.u32[2];
        v119.i64[1] = v110.u32[3];
        v120 = (int8x16_t)vshlq_u64(v119, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v89, 3uLL), v111));
        v121 = vmovl_u16(*(uint16x4_t *)v107.i8);
        v119.i64[0] = v110.u32[0];
        v119.i64[1] = v110.u32[1];
        v122 = (int8x16_t)vshlq_u64(v119, v118);
        v119.i64[0] = v121.u32[0];
        v119.i64[1] = v121.u32[1];
        v123 = (int8x16_t)vshlq_u64(v119, v117);
        v119.i64[0] = v109.u32[2];
        v119.i64[1] = v109.u32[3];
        v124 = (int8x16_t)vshlq_u64(v119, v116);
        v125 = vmovl_high_u16(v107);
        v119.i64[0] = v121.u32[2];
        v119.i64[1] = v121.u32[3];
        v126 = (int8x16_t)vshlq_u64(v119, v115);
        v119.i64[0] = v125.u32[0];
        v119.i64[1] = v125.u32[1];
        v127 = (int8x16_t)vshlq_u64(v119, v114);
        v119.i64[0] = v109.u32[0];
        v119.i64[1] = v109.u32[1];
        v128 = (int8x16_t)vshlq_u64(v119, v113);
        v119.i64[0] = v125.u32[2];
        v119.i64[1] = v125.u32[3];
        v99 = vorrq_s8((int8x16_t)vshlq_u64(v119, v112), v99);
        v100 = vorrq_s8(v128, v100);
        v98 = vorrq_s8(v127, v98);
        v97 = vorrq_s8(v126, v97);
        v101 = vorrq_s8(v124, v101);
        v95 = vorrq_s8(v123, v95);
        v103 = vorrq_s8(v122, v103);
        v104 = vorrq_s8(v120, v104);
        v129 = vdupq_n_s64(0x10uLL);
        v94 = vaddq_s64(v94, v129);
        v102 = vaddq_s64(v102, v129);
        v105 = vaddq_s64(v105, v129);
        v93 = vaddq_s64(v93, v129);
        v92 = vaddq_s64(v92, v129);
        v91 = vaddq_s64(v91, v129);
        v90 = vaddq_s64(v90, v129);
        v89 = vaddq_s64(v89, v129);
        v96 -= 16;
      }
      while (v96);
      v130 = vorrq_s8(vorrq_s8(vorrq_s8(v95, v100), vorrq_s8(v98, v103)), vorrq_s8(vorrq_s8(v97, v101), vorrq_s8(v99, v104)));
      *(int8x8_t *)v130.i8 = vorr_s8(*(int8x8_t *)v130.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL));
      *v10 = *(int8x8_t *)v130.i8;
      v81 = v130.i64[0];
      if ((v77 & 0xF) == 0)
        goto LABEL_118;
      if ((v77 & 0xF) < 8uLL)
        goto LABEL_114;
    }
    else
    {
      v81 = 0;
      v82 = 0;
    }
    v131 = vdupq_n_s64(v82);
    v132 = vaddq_s64(v131, (int64x2_t)xmmword_1812332B0);
    v133 = (int8x16_t)v81;
    v134 = v82 + v75;
    v135 = v82 + (v77 & 7);
    v82 = v77 - (unint64_t)(v77 & 7);
    v136 = vaddq_s64(v131, (int64x2_t)xmmword_181267BE0);
    v137 = vaddq_s64(v131, (int64x2_t)xmmword_181233290);
    v138 = vaddq_s64(v131, (int64x2_t)xmmword_181233120);
    v139 = 0uLL;
    v140 = (uint8x8_t *)(v78 + v134);
    v141 = v135 - v77;
    v142 = 0uLL;
    v143 = 0uLL;
    do
    {
      v144 = *v140++;
      v145 = vmovl_u8(v144);
      v146 = vmovl_high_u16(v145);
      v147.i64[0] = v146.u32[2];
      v147.i64[1] = v146.u32[3];
      v148 = v147;
      v147.i64[0] = v146.u32[0];
      v147.i64[1] = v146.u32[1];
      v149 = v147;
      v150 = vmovl_u16(*(uint16x4_t *)v145.i8);
      v147.i64[0] = v150.u32[2];
      v147.i64[1] = v150.u32[3];
      v151 = v147;
      v147.i64[0] = v150.u32[0];
      v147.i64[1] = v150.u32[1];
      v152 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
      v143 = vorrq_s8((int8x16_t)vshlq_u64(v148, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v132, 3uLL), v152)), v143);
      v142 = vorrq_s8((int8x16_t)vshlq_u64(v149, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v136, 3uLL), v152)), v142);
      v139 = vorrq_s8((int8x16_t)vshlq_u64(v151, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v137, 3uLL), v152)), v139);
      v153 = vdupq_n_s64(8uLL);
      v133 = vorrq_s8((int8x16_t)vshlq_u64(v147, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v138, 3uLL), v152)), v133);
      v136 = vaddq_s64(v136, v153);
      v137 = vaddq_s64(v137, v153);
      v138 = vaddq_s64(v138, v153);
      v132 = vaddq_s64(v132, v153);
      v141 += 8;
    }
    while (v141);
    v154 = vorrq_s8(vorrq_s8(v133, v142), vorrq_s8(v139, v143));
    *(int8x8_t *)v154.i8 = vorr_s8(*(int8x8_t *)v154.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v154, v154, 8uLL));
    *v10 = *(int8x8_t *)v154.i8;
    v81 = v154.i64[0];
    if ((v77 & 7) != 0)
      goto LABEL_114;
LABEL_118:
    v87 = 4 - v72;
    *v9 = v75 + v77;
    *v8 = 8 * v77;
    if (8 * v77 < 4 - v72)
      break;
    *v10 = (int8x8_t)(v81 >> v87);
    *v8 = 8 * v77 - (4 - v72);
    v88 = (v81 << v72) & 0xF | *(_QWORD *)&v74;
    v72 = 8 * v77 - (4 - v72);
    v71 += 3;
    if ((v88 & 8) == 0)
      goto LABEL_64;
  }
  v157 = std::generic_category();
  __p = 0;
  v425 = 0;
  v426 = 0;
  DWORD2(v430) = 0;
  v434 = 0;
  v435 = 0;
  v436 = 1;
  v432 = 0;
  v433 = 0;
  v431 = 0;
  *(_QWORD *)&v430 = &unk_1E0E22B10;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v430, 0, 0, 0);
  v438 = &unk_1E0E20320;
  v439 = "Unexpected end of file reading %u of %u bits";
  LODWORD(v440) = *v8;
  HIDWORD(v440) = v87;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v430, (uint64_t)&v438);
  v158 = p_p;
  v24 = operator new(0x38uLL);
  v442 = 260;
  v438 = v158;
  llvm::StringError::StringError((uint64_t)v24, (llvm::Twine *)&v438, 5, (uint64_t)v157);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v430);
  if (SHIBYTE(v426) < 0)
    operator delete(__p);
  v11 = v418;
  if (!v24)
    goto LABEL_6;
LABEL_258:
  *(_BYTE *)(v416 + 32) |= 1u;
  *(_QWORD *)v416 = v24;
LABEL_259:
  v409 = v427;
  if (v427 != v429)
LABEL_260:
    free(v409);
LABEL_261:
  v411 = (char *)v419[0];
  if (v419[0])
  {
    v412 = (char *)v419[1];
    v413 = v419[0];
    if (v419[1] != v419[0])
    {
      do
        llvm::BitstreamBlockInfo::BlockInfo::~BlockInfo((llvm::BitstreamBlockInfo::BlockInfo *)(v412 - 80));
      while (v412 != v411);
      v413 = v419[0];
    }
    v419[1] = v411;
    operator delete(v413);
  }
}

void llvm::createStringError<unsigned long,unsigned long long>(unsigned int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  const std::error_category *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;

  v10 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  v15 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v14 = &unk_1E0E22B10;
  v22 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v14, 0, 0, 0);
  v25[0] = &unk_1E0E203E0;
  v25[1] = a2;
  v11 = *a4;
  v25[2] = *a3;
  v25[3] = v11;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, (uint64_t)v25);
  v12 = v22;
  v13 = operator new(0x38uLL);
  v26 = 260;
  v25[0] = v12;
  *a5 = llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)v25, a1, (uint64_t)v10);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::format_object<unsigned long,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

_OWORD *std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__emplace_back_slow_path<>(void **a1)
{
  char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;

  v2 = (char *)*a1;
  v1 = (char *)a1[1];
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((v1 - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v2) >> 4) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v2) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v2) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v3];
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  v9 = &v7[80 * v6];
  *(_OWORD *)v8 = 0u;
  v10 = v8 + 80;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v1)
      return v10;
    goto LABEL_17;
  }
  v11 = 0;
  do
  {
    v12 = &v8[v11];
    v13 = &v1[v11];
    *((_DWORD *)v12 - 20) = *(_DWORD *)&v1[v11 - 80];
    *((_QWORD *)v12 - 8) = 0;
    *((_QWORD *)v12 - 7) = 0;
    *(_OWORD *)(v12 - 72) = *(_OWORD *)&v1[v11 - 72];
    *((_QWORD *)v12 - 7) = *(_QWORD *)&v1[v11 - 56];
    *((_QWORD *)v13 - 9) = 0;
    *((_QWORD *)v13 - 8) = 0;
    *((_QWORD *)v13 - 7) = 0;
    v14 = *(_OWORD *)&v1[v11 - 48];
    *((_QWORD *)v12 - 4) = *(_QWORD *)&v1[v11 - 32];
    *((_OWORD *)v12 - 3) = v14;
    *((_QWORD *)v13 - 5) = 0;
    *((_QWORD *)v13 - 4) = 0;
    *((_QWORD *)v13 - 6) = 0;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *(_OWORD *)(v12 - 24) = *(_OWORD *)&v1[v11 - 24];
    *((_QWORD *)v12 - 1) = *(_QWORD *)&v1[v11 - 8];
    *((_QWORD *)v13 - 3) = 0;
    *((_QWORD *)v13 - 2) = 0;
    *((_QWORD *)v13 - 1) = 0;
    v11 -= 80;
  }
  while (&v1[v11] != v2);
  v1 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  while (v15 != v1)
    llvm::BitstreamBlockInfo::BlockInfo::~BlockInfo((llvm::BitstreamBlockInfo::BlockInfo *)(v15 - 80));
  if (v1)
LABEL_17:
    operator delete(v1);
  return v10;
}

unint64_t std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<llvm::BitCodeAbbrev> const*>,std::__wrap_iter<std::shared_ptr<llvm::BitCodeAbbrev> const*>>(void **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  __int128 v33;
  void *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v40;
  _OWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = (unint64_t)*a1 + (v6 & 0xFFFFFFFFFFFFFFF0);
  if (a5 < 1)
    return (unint64_t)*a1 + (v6 & 0xFFFFFFFFFFFFFFF0);
  v9 = a3;
  v11 = (unint64_t)a1[1];
  v12 = a1[2];
  if (a5 > (uint64_t)&v12[-v11] >> 4)
  {
    v13 = a5 + ((uint64_t)(v11 - (_QWORD)v5) >> 4);
    if (v13 >> 60)
      abort();
    v14 = v12 - (_BYTE *)v5;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * (v6 >> 4)];
    v25 = &v17[16 * a5];
    v26 = v17;
    do
    {
      v27 = v9[1];
      *(_QWORD *)v26 = *v9;
      *((_QWORD *)v26 + 1) = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v26 += 16;
      v9 += 2;
    }
    while (v26 != v25);
    v30 = *a1;
    v31 = v17;
    if (*a1 != (void *)v7)
    {
      v32 = (_QWORD *)v7;
      v31 = v17;
      do
      {
        v33 = *((_OWORD *)v32 - 1);
        v32 -= 2;
        *((_OWORD *)v31 - 1) = v33;
        v31 -= 16;
        *v32 = 0;
        v32[1] = 0;
      }
      while (v32 != v30);
    }
    v34 = a1[1];
    if (v34 != (void *)v7)
    {
      do
      {
        *(_OWORD *)v25 = *(_OWORD *)v7;
        v25 += 16;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v7 += 16;
      }
      while ((void *)v7 != v34);
      v7 = (unint64_t)a1[1];
    }
    v35 = *a1;
    *a1 = v31;
    a1[1] = v25;
    a1[2] = &v16[16 * v15];
    while ((void *)v7 != v35)
    {
      v36 = *(std::__shared_weak_count **)(v7 - 8);
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v7 -= 16;
    }
    if (v35)
    {
      operator delete(v35);
      return (unint64_t)v17;
    }
    return (unint64_t)v17;
  }
  v18 = (uint64_t)(v11 - v7) >> 4;
  if (v18 >= a5)
  {
    v19 = &a3[2 * a5];
    v21 = a1[1];
  }
  else
  {
    v19 = &a3[2 * v18];
    if (v19 == a4)
    {
      v21 = a1[1];
    }
    else
    {
      v20 = &a3[2 * v18];
      v21 = a1[1];
      do
      {
        v22 = v20[1];
        *v21 = *v20;
        v21[1] = v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v20 += 2;
        v21 += 2;
      }
      while (v20 != a4);
    }
    a1[1] = v21;
    if ((uint64_t)(v11 - v7) < 1)
      return v7;
  }
  v40 = &v21[-2 * a5];
  v41 = v21;
  if ((unint64_t)v40 < v11)
  {
    v42 = &v21[-2 * a5];
    v41 = v21;
    do
    {
      *v41++ = *(_OWORD *)v42;
      *v42 = 0;
      v42[1] = 0;
      v42 += 2;
    }
    while ((unint64_t)v42 < v11);
  }
  a1[1] = v41;
  if (v21 != (_QWORD *)(v7 + 16 * a5))
  {
    do
    {
      v44 = *((_OWORD *)v40 - 1);
      v40 -= 2;
      *v40 = 0;
      v40[1] = 0;
      v45 = (std::__shared_weak_count *)*(v21 - 1);
      *((_OWORD *)v21 - 1) = v44;
      v21 -= 2;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
    while (v40 != (_QWORD *)v7);
  }
  if (v19 != v9)
  {
    v43 = (_QWORD *)v7;
    do
    {
      v49 = *v9;
      v48 = v9[1];
      if (v48)
      {
        v50 = (unint64_t *)(v48 + 8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v52 = (std::__shared_weak_count *)v43[1];
      *v43 = v49;
      v43[1] = v48;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v9 += 2;
      v43 += 2;
    }
    while (v9 != v19);
  }
  return v7;
}

uint64_t llvm::format_object<unsigned long,unsigned int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24));
}

char *std::vector<std::pair<unsigned int,std::string>>::__emplace_back_slow_path<unsigned int,std::string>(char **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  __int128 v17;
  char *v18;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    abort();
  v8 = a1[2] - *a1;
  if (v8 >> 4 > v4)
    v4 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v4;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v3];
  v12 = &v10[32 * v9];
  *(_DWORD *)v11 = *a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v13 = v11 + 32;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v16 = *((_DWORD *)v15 - 8);
      v15 -= 32;
      *((_DWORD *)v11 - 8) = v16;
      v11 -= 32;
      v17 = *(_OWORD *)(v15 + 8);
      *((_QWORD *)v11 + 3) = *((_QWORD *)v15 + 3);
      *(_OWORD *)(v11 + 8) = v17;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v18 = a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v18 != v15)
    {
      if (*(v18 - 1) < 0)
        operator delete(*((void **)v18 - 3));
      v18 -= 32;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void llvm::readWideAPInt(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x800000000;
  if (!a2)
  {
    v11 = 0;
    v9 = v18;
    goto LABEL_16;
  }
  if (a2 < 9)
  {
    v8 = 0;
    v9 = v18;
    v10 = a2;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, a2, 8);
  v8 = v17;
  v9 = v16;
  v10 = a2 - v17;
  if (a2 != v17)
LABEL_7:
    bzero(&v9[v8], 8 * v10);
  v12 = 0;
  LODWORD(v17) = a2;
  do
  {
    v13 = *(_QWORD *)(a1 + v12 * 8);
    v14 = -(uint64_t)(v13 >> 1);
    if (v13 == 1)
      v14 = 0x8000000000000000;
    if ((v13 & 1) != 0)
      v15 = v14;
    else
      v15 = v13 >> 1;
    v9[v12++] = v15;
  }
  while (a2 != v12);
  v11 = a2;
LABEL_16:
  llvm::APInt::APInt(a4, a3, v9, v11);
  if (v16 != v18)
    free(v16);
}

_UNKNOWN **llvm::BitcodeErrorCategory(llvm *this)
{
  unsigned __int8 v1;

    return &llvm::BitcodeErrorCategory(void)::ErrorCategory;
  return &llvm::BitcodeErrorCategory(void)::ErrorCategory;
}

void llvm::getBitcodeModuleList(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;
  __int128 v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  llvm::getBitcodeFileContents((uint64_t)v5, (uint64_t)&v6);
  if ((v8 & 1) != 0)
  {
    v4 = v6;
    *(_BYTE *)(a2 + 24) |= 1u;
  }
  else
  {
    *(_BYTE *)(a2 + 24) &= ~1u;
    v4 = v6;
    *(_OWORD *)(a2 + 8) = v7;
  }
  *(_QWORD *)a2 = v4;
}

void llvm::getBitcodeFileContents(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *i;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unsigned __int8 v39;
  char *v40;
  char *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  __int128 v58;
  char v59;
  __int16 v60;
  unsigned int v61[2];
  char v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  initStream((uint64_t)&v63, *(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  if ((v67 & 1) != 0)
  {
    v48 = v63;
    v63 = 0;
    *(_BYTE *)(a2 + 56) |= 1u;
    *(_QWORD *)a2 = v48;
    goto LABEL_79;
  }
  v4 = 8 * v65 - v66;
  v5 = v4 >> 3;
  if ((v4 >> 3) + 8 < v64)
  {
    v6 = 0;
    v7 = 0;
    v56 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)&v63, 0, (uint64_t)v61);
      if ((v62 & 1) != 0)
      {
        v12 = *(_QWORD *)v61;
        *(_QWORD *)v61 = 0;
      }
      else
      {
        if (v61[0] < 2)
        {
          *(_QWORD *)&v58 = "Malformed block";
          v60 = 259;
          if ((v14 & 1) == 0
          {
            goto LABEL_73;
          }
          goto LABEL_14;
        }
        if (v61[0] == 2)
        {
          switch(v61[1])
          {
            case 8u:
              v54 = v9;
              v55 = v8;
              v53 = v11;
              v17 = v10;
              v18 = v4 & 0xFFFFFFFFFFFFFFF8;
              v19 = -1;
              goto LABEL_17;
            case 0xDu:
              v54 = v9;
              v55 = v8;
              v23 = v65;
              v24 = v66;
              llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v63, (uint64_t *)&v58);
              v25 = v58;
              if ((_QWORD)v58)
                goto LABEL_52;
              llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)&v63, 0, (uint64_t)&v58);
              if ((BYTE8(v58) & 1) != 0)
              {
                v25 = v58;
LABEL_52:
                *(_BYTE *)(a2 + 56) |= 1u;
                *(_QWORD *)a2 = v25;
                v13 = 1;
                goto LABEL_53;
              }
              if ((_QWORD)v58 == 0x800000002)
              {
                v53 = v11;
                v17 = v10;
                v26 = 8 * v23;
                v18 = v4 & 0xFFFFFFFFFFFFFFF8;
                v19 = v26 - ((v4 & 0xFFFFFFFFFFFFFFF8) + v24);
LABEL_17:
                v20 = v65;
                v21 = v66;
                llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v63, (uint64_t *)&v58);
                v22 = v58;
                if ((_QWORD)v58)
                {
                  *(_BYTE *)(a2 + 56) |= 1u;
                  *(_QWORD *)a2 = v22;
                  v13 = 1;
                  v10 = v17;
                  v11 = v53;
LABEL_53:
                  v9 = v54;
                  v8 = v55;
                  goto LABEL_66;
                }
                v29 = 8 * v20 - (v18 + v21);
                v30 = ((8 * v65 - (unint64_t)v66) >> 3) - v5;
                v31 = v63 + v5;
                v32 = *(_QWORD *)(a1 + 16);
                v33 = *(_QWORD *)(a1 + 24);
                v58 = 0uLL;
                if (v7 >= v56)
                {
                  v34 = (v7 - v6) >> 6;
                  v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 58)
                    abort();
                  if ((v56 - v6) >> 5 > v35)
                    v35 = (v56 - v6) >> 5;
                  v36 = 0x3FFFFFFFFFFFFFFLL;
                  if ((unint64_t)(v56 - v6) < 0x7FFFFFFFFFFFFFC0)
                    v36 = v35;
                  v10 = v17;
                  v57 = v36;
                  if (v36)
                  {
                    v50 = v31;
                    v51 = v32;
                    v52 = v19;
                    v11 = v53;
                    if (v36 >> 58)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v37 = v30;
                    v38 = (char *)operator new(v36 << 6);
                    v30 = v37;
                    v32 = v51;
                    v19 = v52;
                    v31 = v50;
                  }
                  else
                  {
                    v38 = 0;
                    v11 = v53;
                  }
                  v40 = &v38[64 * v34];
                  *(_QWORD *)v40 = v31;
                  *((_QWORD *)v40 + 1) = v30;
                  *((_QWORD *)v40 + 2) = v32;
                  *((_QWORD *)v40 + 3) = v33;
                  *((_QWORD *)v40 + 4) = 0;
                  *((_QWORD *)v40 + 5) = 0;
                  *((_QWORD *)v40 + 6) = v19;
                  *((_QWORD *)v40 + 7) = v29;
                  if (v7 == v6)
                  {
                    v46 = &v38[64 * v34];
                    v8 = v55;
                    v42 = v57;
                  }
                  else
                  {
                    v41 = &v38[64 * v34];
                    v8 = v55;
                    v42 = v57;
                    do
                    {
                      v43 = *((_OWORD *)v7 - 4);
                      v44 = *((_OWORD *)v7 - 3);
                      v45 = *((_OWORD *)v7 - 1);
                      v46 = v41 - 64;
                      *((_OWORD *)v41 - 2) = *((_OWORD *)v7 - 2);
                      *((_OWORD *)v41 - 1) = v45;
                      *((_OWORD *)v41 - 4) = v43;
                      *((_OWORD *)v41 - 3) = v44;
                      v7 -= 64;
                      v41 -= 64;
                    }
                    while (v7 != v6);
                  }
                  v56 = &v38[64 * v42];
                  v7 = v40 + 64;
                  if (v6)
                    operator delete(v6);
                  v6 = v46;
                  v9 = v54;
                }
                else
                {
                  *(_QWORD *)v7 = v31;
                  *((_QWORD *)v7 + 1) = v30;
                  *((_QWORD *)v7 + 2) = v32;
                  *((_QWORD *)v7 + 3) = v33;
                  *((_OWORD *)v7 + 2) = v58;
                  *((_QWORD *)v7 + 6) = v19;
                  *((_QWORD *)v7 + 7) = v29;
                  v7 += 64;
                  v10 = v17;
                  v11 = v53;
                  v9 = v54;
                  v8 = v55;
                }
                goto LABEL_65;
              }
              *(_QWORD *)&v58 = "Malformed block";
              v60 = 259;
              v9 = v54;
              v8 = v55;
              if ((v39 & 1) != 0
              {
                goto LABEL_14;
              }
              break;
            case 0x17u:
              readBlobInRecord((llvm::BitstreamCursor *)&v58, (llvm::BitstreamCursor *)&v63, 23);
              if ((v59 & 1) != 0)
              {
                v28 = v58;
                *(_QWORD *)&v58 = 0;
                *(_BYTE *)(a2 + 56) |= 1u;
                *(_QWORD *)a2 = v28;
                v13 = 1;
              }
              else
              {
                for (i = v7; i != v6; i -= 64)
                {
                  if (*((_QWORD *)i - 3))
                    break;
                  *((_OWORD *)i - 2) = v58;
                }
                v13 = 2;
                if (v9 && !v11)
                {
                  v13 = 2;
                  v11 = *((_QWORD *)&v58 + 1);
                  v10 = v58;
                }
              }
              if ((v59 & 1) != 0 && (_QWORD)v58)
                (*(void (**)(_QWORD))(*(_QWORD *)v58 + 8))(v58);
              goto LABEL_66;
            case 0x19u:
              readBlobInRecord((llvm::BitstreamCursor *)&v58, (llvm::BitstreamCursor *)&v63, 25);
              if ((v59 & 1) != 0)
              {
                v12 = v58;
                goto LABEL_12;
              }
              v13 = 2;
              if (!v9)
              {
                v9 = *((_QWORD *)&v58 + 1);
                v8 = v58;
              }
              goto LABEL_66;
            default:
              llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v63, (uint64_t *)&v58);
              v12 = v58;
              if (!(_QWORD)v58)
                goto LABEL_65;
              goto LABEL_12;
          }
LABEL_73:
LABEL_14:
          v15 = operator new(0x38uLL);
          v13 = 1;
          v16 = llvm::StringError::StringError((uint64_t)v15, (llvm::Twine *)&v58, 1, (uint64_t)&llvm::BitcodeErrorCategory(void)::ErrorCategory);
          *(_BYTE *)(a2 + 56) |= 1u;
          *(_QWORD *)a2 = v16;
          goto LABEL_66;
        }
        if (v61[0] != 3)
        {
          v13 = 0;
          goto LABEL_66;
        }
        llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v63, v61[1], (uint64_t)&v58);
        if ((BYTE8(v58) & 1) == 0 || (v12 = v58) == 0)
        {
LABEL_65:
          v13 = 2;
          goto LABEL_66;
        }
      }
LABEL_12:
      *(_BYTE *)(a2 + 56) |= 1u;
      *(_QWORD *)a2 = v12;
      v13 = 1;
LABEL_66:
      if ((v62 & 1) != 0)
      {
        v47 = *(_QWORD *)v61;
        *(_QWORD *)v61 = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      }
      if ((v13 | 2) != 2)
      {
        if (v6)
          operator delete(v6);
        goto LABEL_79;
      }
      v4 = 8 * v65 - v66;
      v5 = v4 >> 3;
      if ((v4 >> 3) + 8 >= v64)
        goto LABEL_78;
    }
  }
  v11 = 0;
  v10 = 0;
  v9 = 0;
  v8 = 0;
  v56 = 0;
  v7 = 0;
  v6 = 0;
LABEL_78:
  *(_BYTE *)(a2 + 56) &= ~1u;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v56;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = v11;
LABEL_79:
  if ((v67 & 1) != 0)
  {
    v49 = v63;
    v63 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  }
  else
  {
    llvm::BitstreamCursor::~BitstreamCursor((llvm::BitstreamCursor *)&v63);
  }
}

void initStream(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  const char *v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  std::error_code v31;
  std::error_code v32;
  std::error_code v33;

  v30 = *MEMORY[0x1E0C80C00];
  if ((a3 & 3) == 0)
  {
    v8 = &a2[a3];
    if (a3 && *a2 == 222 && a2[1] == 192 && a2[2] == 23 && a2[3] == 11)
    {
      if ((a3 & 0xFFFFFFF0) == 0 || (v9 = *((unsigned int *)a2 + 2), v10 = *((unsigned int *)a2 + 3), v10 + v9 > a3))
      {
        v4 = "Invalid bitcode wrapper header";
        goto LABEL_3;
      }
      a2 += v9;
      v8 = &a2[v10];
    }
    *(_QWORD *)&v19 = a2;
    *((_QWORD *)&v19 + 1) = v8 - a2;
    v20 = 0uLL;
    v21 = 0x200000000;
    v22 = 0uLL;
    v23 = 0;
    v24 = &v26;
    v25 = 0x800000000;
    v27 = 0;
    if ((unint64_t)(v8 - a2) <= 3)
    {
      *(_QWORD *)&v32.__val_ = std::generic_category();
      v32.__cat_ = (const std::error_category *)"file too small to contain bitcode header";
      llvm::createStringError((llvm *)0x5C, v32, &v18);
      goto LABEL_28;
    }
    llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v19, 8u, (uint64_t)&v28);
    v11 = v29;
    if ((v29 & 1) == 0)
    {
      if (v28 != 66)
      {
LABEL_25:
        *(_QWORD *)&v33.__val_ = std::generic_category();
        v33.__cat_ = (const std::error_category *)"file doesn't start with bitcode header";
        llvm::createStringError((llvm *)0x5C, v33, &v18);
        if ((v29 & 1) == 0)
          goto LABEL_28;
LABEL_26:
        v14 = v28;
        v28 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_28:
        v15 = v18;
        if (v18)
        {
          *(_BYTE *)(a1 + 344) |= 1u;
          *(_QWORD *)a1 = v15;
LABEL_39:
          llvm::BitstreamCursor::~BitstreamCursor((llvm::BitstreamCursor *)&v19);
          return;
        }
LABEL_36:
        *(_BYTE *)(a1 + 344) &= ~1u;
        *(_QWORD *)(a1 + 32) = v21;
        v16 = v20;
        *(_OWORD *)a1 = v19;
        *(_OWORD *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 36) = HIDWORD(v21);
        *(_OWORD *)(a1 + 40) = v22;
        *(_QWORD *)(a1 + 56) = v23;
        v23 = 0;
        v22 = 0uLL;
        *(_QWORD *)(a1 + 64) = a1 + 80;
        *(_QWORD *)(a1 + 72) = 0x800000000;
        if ((_DWORD)v25)
          llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=(a1 + 64, (uint64_t)&v24);
        *(_QWORD *)(a1 + 336) = v27;
        goto LABEL_39;
      }
      llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v19, 8u, (uint64_t)&v28);
      v11 = v29;
      if ((v29 & 1) == 0)
      {
        if (v28 == 67)
        {
          llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v19, 4u, (uint64_t)&v28);
          v12 = v29;
          if ((v29 & 1) == 0)
          {
            if (v28)
            {
LABEL_21:
              *(_QWORD *)&v31.__val_ = std::generic_category();
              v31.__cat_ = (const std::error_category *)"file doesn't start with bitcode header";
              llvm::createStringError((llvm *)0x5C, v31, &v18);
              v12 = v29;
              goto LABEL_41;
            }
            llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v19, 4u, (uint64_t)&v28);
            v12 = v29;
            if ((v29 & 1) == 0)
            {
              if (v28 != 12)
                goto LABEL_21;
              llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v19, 4u, (uint64_t)&v28);
              v12 = v29;
              if ((v29 & 1) == 0)
              {
                if (v28 != 14)
                  goto LABEL_21;
                llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v19, 4u, (uint64_t)&v28);
                v12 = v29;
                if ((v29 & 1) == 0)
                {
                  if (v28 == 13)
                    goto LABEL_36;
                  goto LABEL_21;
                }
              }
            }
          }
          v17 = v28;
          v28 = 0;
          v18 = v17;
LABEL_41:
          if ((v12 & 1) == 0)
            goto LABEL_28;
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
    v13 = v28;
    v28 = 0;
    v18 = v13;
    if ((v11 & 1) == 0)
      goto LABEL_28;
    goto LABEL_26;
  }
  v4 = "Invalid bitcode signature";
LABEL_3:
  *(_QWORD *)&v19 = v4;
  LOWORD(v21) = 259;
  if ((v5 & 1) == 0)
  {
    {
    }
  }
  v6 = operator new(0x38uLL);
  v7 = llvm::StringError::StringError((uint64_t)v6, (llvm::Twine *)&v19, 1, (uint64_t)&llvm::BitcodeErrorCategory(void)::ErrorCategory);
  *(_BYTE *)(a1 + 344) |= 1u;
  *(_QWORD *)a1 = v7;
}

void llvm::BitstreamCursor::SkipBlock(llvm::BitstreamCursor *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  BOOL v5;
  char v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  std::error_code v17;

  v16 = *MEMORY[0x1E0C80C00];
  llvm::SimpleBitstreamCursor::ReadVBR(this, 4u, (uint64_t)&v14);
  if ((v15 & 1) != 0
    || ((v4 = *((_DWORD *)this + 8), v5 = v4 >= 0x20, v6 = v4 - 32, v5)
      ? (*((_QWORD *)this + 3) >>= v6, v7 = 32)
      : (v7 = 0),
        *((_DWORD *)this + 8) = v7,
        llvm::SimpleBitstreamCursor::Read(this, 0x20u, (uint64_t)&v14),
        (v15 & 1) != 0))
  {
    *a2 = v14;
  }
  else
  {
    v9 = *((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
    v10 = *((unsigned int *)this + 8);
    v11 = 8 * v8 - v10 + 32 * v14;
    v13 = v11;
    if ((_DWORD)v10 || v9 > v8)
    {
      if (v9 >= v11 >> 3)
      {
        *((_QWORD *)this + 2) = (v11 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *((_DWORD *)this + 8) = 0;
        if ((v11 & 0x3F) == 0
          || (llvm::SimpleBitstreamCursor::Read(this, v11 & 0x3F, (uint64_t)&v14), (v15 & 1) == 0)
          || (v12 = v14, *a2 = v14, !v12))
        {
          *a2 = 0;
        }
      }
      else
      {
        v14 = 8 * v8 - v10;
        llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v13, &v14, a2);
      }
    }
    else
    {
      *(_QWORD *)&v17.__val_ = std::generic_category();
      v17.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
      llvm::createStringError((llvm *)0x5C, v17, a2);
    }
  }
}

void readBlobInRecord(llvm::BitstreamCursor *a1, llvm::BitstreamCursor *this, int a3)
{
  void *v5;
  unsigned __int8 v6;
  void *v7;
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  void *v18[2];
  _WORD v19[12];
  void *v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::EnterSubBlock(this, 0, a3, (uint64_t *)v18);
  v5 = v18[0];
  if (v18[0])
  {
    *((_BYTE *)a1 + 16) |= 1u;
    *(_QWORD *)a1 = v5;
  }
  else
  {
    v15 = 0uLL;
    do
    {
      llvm::BitstreamCursor::advance(this, 0, (uint64_t)&v20);
      if ((v21 & 1) == 0)
      {
        switch((int)v20)
        {
          case 0:
            v18[0] = "Malformed block";
            v19[8] = 259;
            if ((v6 & 1) == 0
            {
            }
            v7 = operator new(0x38uLL);
            v8 = llvm::StringError::StringError((uint64_t)v7, (llvm::Twine *)v18, 1, (uint64_t)&llvm::BitcodeErrorCategory(void)::ErrorCategory);
            v9 = 0;
            *((_BYTE *)a1 + 16) |= 1u;
            *(_QWORD *)a1 = v8;
            if ((v21 & 1) != 0)
              goto LABEL_28;
            continue;
          case 1:
            v9 = 0;
            *((_BYTE *)a1 + 16) &= ~1u;
            *(_OWORD *)a1 = v15;
            if ((v21 & 1) != 0)
              goto LABEL_28;
            continue;
          case 2:
            llvm::BitstreamCursor::SkipBlock(this, (uint64_t *)v18);
            v10 = v18[0];
            if (!v18[0])
              goto LABEL_25;
            v9 = 0;
            goto LABEL_12;
          case 3:
            v14 = 0uLL;
            v18[0] = v19;
            v18[1] = (void *)0x100000000;
            llvm::BitstreamCursor::readRecord(this, SHIDWORD(v20), (uint64_t)v18, (unsigned __int8 **)&v14, (uint64_t)&v16);
            v11 = v17;
            if ((v17 & 1) != 0)
            {
              v12 = v16;
              v16 = 0;
              *((_BYTE *)a1 + 16) |= 1u;
              *(_QWORD *)a1 = v12;
            }
            else if ((_DWORD)v16 == 1)
            {
              v15 = v14;
            }
            if (v18[0] != v19)
              free(v18[0]);
            if ((v11 & 1) == 0)
              goto LABEL_25;
            v9 = 0;
            if ((v21 & 1) != 0)
              goto LABEL_28;
            continue;
          default:
LABEL_25:
            v9 = 1;
            if ((v21 & 1) != 0)
              goto LABEL_28;
            continue;
        }
      }
      v9 = 0;
      v10 = v20;
      v20 = 0;
LABEL_12:
      *((_BYTE *)a1 + 16) |= 1u;
      *(_QWORD *)a1 = v10;
      if ((v21 & 1) != 0)
      {
LABEL_28:
        v13 = v20;
        v20 = 0;
        if (v13)
          (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    while ((v9 & 1) != 0);
  }
}

void llvm::BitcodeModule::getModuleImpl(__int128 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void **v23;
  size_t v24;
  _QWORD *v25;
  BOOL v26;
  unint64_t v27;
  __int128 v28;
  void **v29;
  unint64_t v30;
  __int128 *p_dst;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 *v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  int v72;
  void **__src;
  unsigned int v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  uint64_t v79;
  void *__p[2];
  uint64_t v81;
  _QWORD v82[3];
  _QWORD *v83;
  char v84;
  _QWORD v85[3];
  _QWORD *v86;
  char v87;
  _QWORD v88[3];
  _QWORD *v89;
  char v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  _BYTE v119[9];
  _BYTE *v120;
  char v121;
  uint64_t v122;
  __int128 __dst;
  unint64_t v124;
  __int128 *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  char v130;
  _QWORD v131[3];
  _QWORD *v132;
  _QWORD v133[3];
  _QWORD *v134;
  _QWORD v135[3];
  _QWORD *v136;
  char v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v101 = *a1;
  v102 = 0uLL;
  v103 = 0x200000000;
  v104 = 0;
  v106 = 0;
  v105 = 0;
  v107 = &v109;
  v108 = 0x800000000;
  v110 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v81 = 0;
  v13 = *((_QWORD *)a1 + 6);
  if (v13 != -1)
  {
    *(_QWORD *)&v102 = (v13 >> 3) & 0x1FFFFFFFFFFFFFF8;
    LODWORD(v103) = 0;
    if ((v13 & 0x3F) != 0)
    {
      llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v101, v13 & 0x3F, (uint64_t)&v111);
      if ((BYTE8(v111) & 1) != 0)
      {
        v14 = v111;
        if ((_QWORD)v111)
        {
LABEL_11:
          *(_BYTE *)(a7 + 8) |= 1u;
          *(_QWORD *)a7 = v14;
          if (SHIBYTE(v81) < 0)
            goto LABEL_179;
          goto LABEL_180;
        }
      }
    }
    readIdentificationBlock((llvm::BitstreamCursor *)&v111, (llvm::BitstreamCursor *)&v101);
    if ((BYTE8(v112) & 1) != 0)
    {
      v14 = v111;
      if ((_QWORD)v111)
        goto LABEL_11;
    }
    else
    {
      *(_OWORD *)__p = v111;
      v81 = v112;
    }
  }
  v15 = *((_QWORD *)a1 + 7);
  *(_QWORD *)&v102 = (v15 >> 3) & 0x1FFFFFFFFFFFFFF8;
  LODWORD(v103) = 0;
  if ((v15 & 0x3F) != 0)
  {
    llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v101, v15 & 0x3F, (uint64_t)&v111);
    if ((BYTE8(v111) & 1) != 0)
    {
      v14 = v111;
      if ((_QWORD)v111)
        goto LABEL_11;
    }
  }
  v72 = a3;
  v16 = (char *)operator new(0x768uLL);
  v91 = v101;
  v92 = v102;
  v17 = HIDWORD(v103);
  v18 = v104;
  v19 = v105;
  v93 = v103;
  v94 = v104;
  v20 = v106;
  v95 = v105;
  v96 = v106;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v97 = &v99;
  v98 = 0x800000000;
  v75 = a7;
  v74 = a4;
  v76 = a5;
  if ((_DWORD)v108)
  {
    llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)&v97, (uint64_t)&v107);
    v17 = HIDWORD(v93);
    v18 = v94;
    v19 = v95;
    v20 = v96;
    v21 = v98;
  }
  else
  {
    v21 = 0;
  }
  v22 = v110;
  v100 = v110;
  v77 = a1[2];
  v23 = __p;
  if (v81 >= 0)
  {
    v24 = HIBYTE(v81);
  }
  else
  {
    v23 = (void **)__p[0];
    v24 = (size_t)__p[1];
  }
  v25 = v16 + 8;
  v111 = v91;
  v112 = v92;
  v113 = __PAIR64__(v17, v93);
  v114 = v18;
  v115 = v19;
  v116 = v20;
  v95 = 0;
  v96 = 0;
  v94 = 0;
  v117 = (uint64_t *)v119;
  v118 = 0x800000000;
  __src = v23;
  if (v21)
  {
    llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)&v117, (uint64_t)&v97);
    v17 = HIDWORD(v113);
    v18 = v114;
    v19 = v115;
    v20 = v116;
    v26 = (_DWORD)v118 == 0;
    v22 = v100;
  }
  else
  {
    v26 = 1;
  }
  v122 = v22;
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = 0;
  *v25 = 0;
  *((_QWORD *)v16 + 12) = v16 + 112;
  v27 = v113;
  v28 = v112;
  *((_OWORD *)v16 + 2) = v111;
  *((_OWORD *)v16 + 3) = v28;
  *((_QWORD *)v16 + 8) = v27;
  *((_QWORD *)v16 + 9) = v18;
  *((_DWORD *)v16 + 17) = v17;
  *((_QWORD *)v16 + 10) = v19;
  *((_QWORD *)v16 + 11) = v20;
  v115 = 0;
  v116 = 0;
  v114 = 0;
  *((_QWORD *)v16 + 13) = 0x800000000;
  if (!v26)
    llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)(v16 + 96), (uint64_t)&v117);
  *(_OWORD *)(v16 + 376) = v77;
  v16[392] = 0;
  v29 = (void **)(v16 + 400);
  *((_QWORD *)v16 + 50) = 0;
  *(_OWORD *)(v16 + 408) = 0u;
  *((_QWORD *)v16 + 46) = v25;
  llvm::BitstreamCursor::~BitstreamCursor((llvm::BitstreamCursor *)&v111);
  *(_QWORD *)v16 = off_1E0E155F0;
  *(_OWORD *)(v16 + 568) = 0u;
  *((_DWORD *)v16 + 146) = 0;
  *((_OWORD *)v16 + 37) = 0u;
  *((_DWORD *)v16 + 152) = 0;
  *(_OWORD *)(v16 + 616) = 0u;
  *((_QWORD *)v16 + 53) = a2;
  *((_QWORD *)v16 + 54) = 0;
  *(_OWORD *)(v16 + 440) = 0u;
  v16[456] = 0;
  *((_OWORD *)v16 + 29) = 0u;
  *((_OWORD *)v16 + 30) = 0u;
  *((_OWORD *)v16 + 31) = 0u;
  *((_OWORD *)v16 + 32) = 0u;
  *((_OWORD *)v16 + 33) = 0u;
  *((_OWORD *)v16 + 34) = 0u;
  *((_DWORD *)v16 + 140) = 0;
  *((_QWORD *)v16 + 79) = v16 + 648;
  *((_QWORD *)v16 + 80) = 0x400000000;
  *((_QWORD *)v16 + 85) = v16 + 696;
  *((_OWORD *)v16 + 43) = 0u;
  *((_QWORD *)v16 + 88) = 1;
  v30 = *((_QWORD *)v16 + 5);
  v131[0] = off_1E0E50510;
  v131[1] = v16;
  v132 = v131;
  *((_QWORD *)v16 + 91) = 0;
  *(_OWORD *)(v16 + 712) = 0u;
  if (v30 >= 0xFFFFFFFF)
    LODWORD(v30) = -1;
  *((_DWORD *)v16 + 184) = v30;
  *((_QWORD *)v16 + 96) = v16 + 744;
  *((_QWORD *)v16 + 93) = off_1E0E50510;
  *((_QWORD *)v16 + 94) = v16;
  v16[776] = 0;
  v16[784] = 0;
  *(_OWORD *)(v16 + 792) = 0uLL;
  *(_OWORD *)(v16 + 808) = 0uLL;
  *(_OWORD *)(v16 + 820) = 0uLL;
  *((_QWORD *)v16 + 105) = v16 + 856;
  *((_QWORD *)v16 + 106) = 0x4000000000;
  *((_OWORD *)v16 + 92) = 0u;
  *(_OWORD *)(v16 + 1432) = 0u;
  *(_OWORD *)(v16 + 1448) = 0u;
  *(_OWORD *)(v16 + 1400) = 0u;
  *(_OWORD *)(v16 + 1416) = 0u;
  *(_OWORD *)(v16 + 1368) = 0u;
  *(_OWORD *)(v16 + 1384) = 0u;
  *((_QWORD *)v16 + 183) = v16 + 1472;
  v16[1560] = 0;
  *((_DWORD *)v16 + 396) = 0;
  *((_OWORD *)v16 + 98) = 0u;
  *((_DWORD *)v16 + 442) = 0;
  *(_OWORD *)(v16 + 1752) = 0u;
  *((_QWORD *)v16 + 224) = 0;
  *((_OWORD *)v16 + 111) = 0u;
  *((_OWORD *)v16 + 93) = 0u;
  *((_OWORD *)v16 + 94) = 0u;
  *((_OWORD *)v16 + 95) = 0u;
  *((_OWORD *)v16 + 96) = 0u;
  *((_DWORD *)v16 + 388) = 0;
  *(_OWORD *)(v16 + 1620) = 0u;
  *(_OWORD *)(v16 + 1592) = 0u;
  *(_OWORD *)(v16 + 1608) = 0u;
  *(_OWORD *)(v16 + 1699) = 0u;
  *(_OWORD *)(v16 + 1672) = 0u;
  *(_OWORD *)(v16 + 1688) = 0u;
  *(_OWORD *)(v16 + 1640) = 0u;
  *(_OWORD *)(v16 + 1656) = 0u;
  *((_DWORD *)v16 + 436) = 0;
  *((_QWORD *)v16 + 217) = 0;
  *(_OWORD *)(v16 + 1720) = 0u;
  *((_QWORD *)v16 + 225) = v16 + 1824;
  *((_OWORD *)v16 + 113) = xmmword_1812349A0;
  v16[1832] = 0;
  v16[1864] = 0;
  *((_QWORD *)v16 + 236) = 0;
  *((_OWORD *)v16 + 117) = 0uLL;
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v24 >= 0x17)
  {
    v35 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v35 = v24 | 7;
    v36 = v35 + 1;
    p_dst = (__int128 *)operator new(v35 + 1);
    v124 = v36 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    *((_QWORD *)&__dst + 1) = v24;
LABEL_37:
    memmove(p_dst, __src, v24);
    *((_BYTE *)p_dst + v24) = 0;
    if ((v16[423] & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_38;
  }
  HIBYTE(v124) = v24;
  p_dst = &__dst;
  if (v24)
    goto LABEL_37;
  LOBYTE(__dst) = 0;
  if ((v16[423] & 0x80000000) == 0)
    goto LABEL_30;
LABEL_38:
  operator delete(*v29);
LABEL_30:
  *(_OWORD *)v29 = __dst;
  *((_QWORD *)v16 + 52) = v124;
  llvm::BitstreamCursor::~BitstreamCursor((llvm::BitstreamCursor *)&v91);
  v32 = (uint64_t *)operator new(0x2F0uLL);
  v33 = llvm::Module::Module(v32, *((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3), a2);
  llvm::Module::setMaterializer(v33, (uint64_t)v16);
  LOBYTE(v82[0]) = 0;
  v84 = 0;
  if (*(_BYTE *)(a6 + 32))
  {
    v34 = *(_QWORD *)(a6 + 24);
    if (v34)
    {
      if (v34 == a6)
      {
        v83 = v82;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a6 + 24))(a6, v82);
      }
      else
      {
        v83 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
      }
    }
    else
    {
      v83 = 0;
    }
    v84 = 1;
  }
  LOBYTE(v85[0]) = 0;
  v87 = 0;
  if (*(_BYTE *)(a6 + 72))
  {
    v37 = *(_QWORD *)(a6 + 64);
    if (v37)
    {
      if (v37 == a6 + 40)
      {
        v86 = v85;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a6 + 40) + 24))(a6 + 40, v85);
      }
      else
      {
        v86 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
      }
    }
    else
    {
      v86 = 0;
    }
    v87 = 1;
  }
  v38 = v88;
  LOBYTE(v88[0]) = 0;
  v90 = 0;
  if (*(_BYTE *)(a6 + 112))
  {
    v39 = *(_QWORD *)(a6 + 104);
    if (v39)
    {
      if (v39 == a6 + 80)
      {
        v89 = v88;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a6 + 80) + 24))(a6 + 80, v88);
      }
      else
      {
        v89 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
      }
    }
    else
    {
      v89 = 0;
    }
    v90 = 1;
  }
  *((_QWORD *)v16 + 54) = v32;
  v132 = 0;
  v134 = 0;
  v40 = v135;
  LOBYTE(v135[0]) = 0;
  v137 = 0;
  *(_QWORD *)&v111 = off_1E0E503B0;
  *((_QWORD *)&v111 + 1) = v16;
  *((_QWORD *)&v112 + 1) = &v111;
  std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](&v111, v131);
  v41 = (__int128 *)*((_QWORD *)&v112 + 1);
  if (*((__int128 **)&v112 + 1) == &v111)
  {
    v42 = 4;
    v41 = &v111;
  }
  else
  {
    if (!*((_QWORD *)&v112 + 1))
      goto LABEL_61;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_61:
  v43 = v133;
  *(_QWORD *)&v111 = off_1E0E50408;
  *((_QWORD *)&v111 + 1) = v16;
  *((_QWORD *)&v112 + 1) = &v111;
  std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](&v111, v133);
  v44 = (__int128 *)*((_QWORD *)&v112 + 1);
  if (*((__int128 **)&v112 + 1) == &v111)
  {
    v45 = 4;
    v44 = &v111;
  }
  else
  {
    if (!*((_QWORD *)&v112 + 1))
      goto LABEL_66;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_66:
  std::__optional_storage_base<std::function<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false> const&>(v135, (uint64_t)v88);
  if (!v132)
  {
    v125 = 0;
    v46 = (uint64_t)(v16 + 32);
    v47 = v126;
    v48 = v134;
    if (v134)
      goto LABEL_71;
    goto LABEL_74;
  }
  if (v132 == v131)
  {
    v125 = &__dst;
    (*(void (**)(_QWORD *, __int128 *))(v131[0] + 24))(v131, &__dst);
    v46 = (uint64_t)(v16 + 32);
    v47 = v126;
    v48 = v134;
    if (v134)
      goto LABEL_71;
LABEL_74:
    v127 = 0;
    goto LABEL_76;
  }
  v125 = (__int128 *)(*(uint64_t (**)(void))(*v132 + 16))();
  v46 = (uint64_t)(v16 + 32);
  v47 = v126;
  v48 = v134;
  if (!v134)
    goto LABEL_74;
LABEL_71:
  if (v48 == v133)
  {
    v127 = v126;
    (*(void (**)(_QWORD *, _BYTE *))(v133[0] + 24))(v133, v126);
  }
  else
  {
    v127 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v48 + 16))(v48);
  }
LABEL_76:
  v49 = v128;
  v128[0] = 0;
  v130 = 0;
  if (v137)
  {
    if (v136)
    {
      if (v136 == v135)
      {
        v129 = v128;
        (*(void (**)(_QWORD *, _BYTE *))(v135[0] + 24))(v135, v128);
      }
      else
      {
        v129 = (_BYTE *)(*(uint64_t (**)(void))(*v136 + 16))();
      }
    }
    else
    {
      v129 = 0;
    }
    v130 = 1;
  }
  llvm::MetadataLoader::MetadataLoader(&v111, v46, v32, (uint64_t)(v16 + 712), v76, (uint64_t)&__dst);
  if (v16[784])
  {
    llvm::MetadataLoader::operator=((llvm ***)v16 + 97, (llvm ***)&v111);
    v50 = v74;
    llvm::MetadataLoader::~MetadataLoader((llvm ***)&v111);
    if (!v130)
      goto LABEL_92;
  }
  else
  {
    llvm::MetadataLoader::MetadataLoader((_QWORD *)v16 + 97, (uint64_t *)&v111);
    v16[784] = 1;
    v50 = v74;
    llvm::MetadataLoader::~MetadataLoader((llvm ***)&v111);
    if (!v130)
      goto LABEL_92;
  }
  if (v129 == v128)
  {
    v51 = 4;
  }
  else
  {
    if (!v129)
      goto LABEL_92;
    v51 = 5;
    v49 = v129;
  }
  (*(void (**)(_QWORD *))(*v49 + 8 * v51))(v49);
LABEL_92:
  if (v127 == v126)
  {
    v53 = 4;
    v52 = v85;
  }
  else
  {
    v52 = v85;
    if (!v127)
      goto LABEL_97;
    v53 = 5;
    v47 = v127;
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v53))(v47);
LABEL_97:
  v54 = v125;
  if (v125 == &__dst)
  {
    v55 = 4;
    v54 = &__dst;
  }
  else
  {
    if (!v125)
      goto LABEL_102;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_102:
  LOBYTE(v111) = 0;
  LOBYTE(v113) = 0;
  if (v84)
  {
    if (v83)
    {
      if (v83 == v82)
      {
        *((_QWORD *)&v112 + 1) = &v111;
        (*(void (**)(_QWORD *, __int128 *))(v82[0] + 24))(v82, &v111);
      }
      else
      {
        *((_QWORD *)&v112 + 1) = (*(uint64_t (**)(void))(*v83 + 16))();
      }
    }
    else
    {
      *((_QWORD *)&v112 + 1) = 0;
    }
    LOBYTE(v113) = 1;
  }
  v56 = &v114;
  LOBYTE(v114) = 0;
  LOBYTE(v118) = 0;
  if (v87)
  {
    if (v86)
    {
      if (v86 == v85)
      {
        v117 = &v114;
        (*(void (**)(_QWORD *, uint64_t *))(v85[0] + 24))(v85, &v114);
      }
      else
      {
        v117 = (uint64_t *)(*(uint64_t (**)(void))(*v86 + 16))();
      }
    }
    else
    {
      v117 = 0;
    }
    LOBYTE(v118) = 1;
  }
  v57 = v119;
  v119[0] = 0;
  v121 = 0;
  if (v90)
  {
    if (v89)
    {
      if (v89 == v88)
      {
        v120 = v119;
        (*(void (**)(_QWORD *, _BYTE *))(v88[0] + 24))(v88, v119);
      }
      else
      {
        v120 = (_BYTE *)(*(uint64_t (**)(void))(*v89 + 16))();
      }
    }
    else
    {
      v120 = 0;
    }
    v121 = 1;
  }
  if (v121)
  {
    if (v120 == v119)
    {
      v58 = 4;
    }
    else
    {
      if (!v120)
        goto LABEL_129;
      v58 = 5;
      v57 = v120;
    }
    (*(void (**)(_QWORD *))(*v57 + 8 * v58))(v57);
  }
LABEL_129:
  if (!(_BYTE)v118)
    goto LABEL_135;
  if (v117 == &v114)
  {
    v59 = 4;
  }
  else
  {
    if (!v117)
      goto LABEL_135;
    v59 = 5;
    v56 = v117;
  }
  (*(void (**)(uint64_t *))(*v56 + 8 * v59))(v56);
LABEL_135:
  if (!(_BYTE)v113)
    goto LABEL_141;
  v60 = (__int128 *)*((_QWORD *)&v112 + 1);
  if (*((__int128 **)&v112 + 1) == &v111)
  {
    v61 = 4;
    v60 = &v111;
  }
  else
  {
    if (!*((_QWORD *)&v112 + 1))
      goto LABEL_141;
    v61 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_141:
  if (!v137)
    goto LABEL_147;
  if (v136 == v135)
  {
    v62 = 4;
  }
  else
  {
    if (!v136)
      goto LABEL_147;
    v62 = 5;
    v40 = v136;
  }
  (*(void (**)(_QWORD *))(*v40 + 8 * v62))(v40);
LABEL_147:
  if (v134 == v133)
  {
    v63 = 4;
  }
  else
  {
    if (!v134)
      goto LABEL_152;
    v63 = 5;
    v43 = v134;
  }
  (*(void (**)(_QWORD *))(*v43 + 8 * v63))(v43);
LABEL_152:
  v64 = v132;
  if (v132 == v131)
  {
    v65 = 4;
    v64 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_157;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_157:
  if (!v90)
    goto LABEL_163;
  if (v89 == v88)
  {
    v66 = 4;
  }
  else
  {
    if (!v89)
      goto LABEL_163;
    v66 = 5;
    v38 = v89;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v66))(v38);
LABEL_163:
  if (!v87)
    goto LABEL_169;
  if (v86 == v85)
  {
    v67 = 4;
  }
  else
  {
    if (!v86)
      goto LABEL_169;
    v67 = 5;
    v52 = v86;
  }
  (*(void (**)(_QWORD *))(*v52 + 8 * v67))(v52);
LABEL_169:
  if (!v84)
    goto LABEL_175;
  v68 = v83;
  if (v83 == v82)
  {
    v69 = 4;
    v68 = v82;
  }
  else
  {
    if (!v83)
      goto LABEL_175;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_175:
  v70 = v79;
  if (v79)
    goto LABEL_178;
  if (v72)
  {
    llvm::Module::materializeAll((uint64_t)v32, &v111);
    v70 = v111;
    if ((_QWORD)v111)
      goto LABEL_178;
LABEL_182:
    *(_BYTE *)(v75 + 8) &= ~1u;
    *(_QWORD *)v75 = v32;
    if ((SHIBYTE(v81) & 0x80000000) == 0)
      goto LABEL_180;
    goto LABEL_179;
  }
  v70 = v111;
  if (!(_QWORD)v111)
    goto LABEL_182;
LABEL_178:
  *(_BYTE *)(v75 + 8) |= 1u;
  *(_QWORD *)v75 = v70;
  llvm::Module::~Module((llvm::Module *)v32);
  operator delete(v71);
  if (SHIBYTE(v81) < 0)
LABEL_179:
    operator delete(__p[0]);
LABEL_180:
  llvm::BitstreamCursor::~BitstreamCursor((llvm::BitstreamCursor *)&v101);
}

void readIdentificationBlock(llvm::BitstreamCursor *a1, llvm::BitstreamCursor *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  void *v7;
  const char *v8;
  char v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;
  std::string __p;
  uint64_t v25;
  char v26;
  const char *v27;
  char v28;
  const char *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[66];

  v33[64] = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::EnterSubBlock(a2, 0, 13, (uint64_t *)&v31);
  v7 = v31;
  if (v31)
  {
    *((_BYTE *)a1 + 24) |= 1u;
    *(_QWORD *)a1 = v7;
    return;
  }
  v31 = v33;
  v32 = 0x4000000000;
  memset(&__p, 0, sizeof(__p));
  while (1)
  {
    llvm::BitstreamCursor::advance(a2, 0, (uint64_t)&v27);
    if ((v28 & 1) == 0)
      break;
    v8 = v27;
    if (v27)
    {
      *((_BYTE *)a1 + 24) |= 1u;
      *(_QWORD *)a1 = v8;
LABEL_30:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
LABEL_31:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
LABEL_9:
    LODWORD(v32) = 0;
    llvm::BitstreamCursor::readRecord(a2, v3, (uint64_t)&v31, 0, (uint64_t)&v25);
    if ((v26 & 1) != 0)
    {
      v9 = 0;
      v10 = v25;
      v25 = 0;
      *((_BYTE *)a1 + 24) |= 1u;
      *(_QWORD *)a1 = v10;
      if ((v26 & 1) != 0)
        goto LABEL_21;
    }
    else if ((_DWORD)v25 == 1)
    {
      std::string::append[abi:nn180100]<unsigned long long const*,0>(&__p, (unint64_t)v31, (uint64_t *)v31 + v32);
      v9 = 1;
      if ((v26 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      if ((_DWORD)v25 != 2)
      {
        v27 = "Invalid value";
        v30 = 259;
        goto LABEL_19;
      }
      if (*(_DWORD *)v31)
      {
        v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)v31;
        v18[0] = "Incompatible epoch: Bitcode '";
        v18[2] = v4;
        v19 = 2307;
        v20[0] = v18;
        v20[2] = "' vs current: '";
        v21 = 770;
        v2 &= 0xFFFFFFFF00000000;
        v22[0] = v20;
        v22[2] = v2;
        v23 = 2562;
        v27 = (const char *)v22;
        v29 = "'";
        v30 = 770;
LABEL_19:
        {
        }
        v12 = operator new(0x38uLL);
        v13 = llvm::StringError::StringError((uint64_t)v12, (llvm::Twine *)&v27, 1, (uint64_t)&llvm::BitcodeErrorCategory(void)::ErrorCategory);
        v9 = 0;
        *((_BYTE *)a1 + 24) |= 1u;
        *(_QWORD *)a1 = v13;
        if ((v26 & 1) == 0)
          goto LABEL_4;
LABEL_21:
        v14 = v25;
        v25 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        goto LABEL_4;
      }
      v9 = 1;
      if ((v26 & 1) != 0)
        goto LABEL_21;
    }
LABEL_4:
    if ((v9 & 1) == 0)
      goto LABEL_30;
  }
  if ((_DWORD)v27 == 3)
  {
    v3 = HIDWORD(v27);
    goto LABEL_9;
  }
  if ((_DWORD)v27 == 1)
  {
    *((_BYTE *)a1 + 24) &= ~1u;
    *(std::string *)a1 = __p;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_32;
  }
  v27 = "Malformed block";
  v30 = 259;
  {
  }
  v16 = operator new(0x38uLL);
  v17 = llvm::StringError::StringError((uint64_t)v16, (llvm::Twine *)&v27, 1, (uint64_t)&llvm::BitcodeErrorCategory(void)::ErrorCategory);
  *((_BYTE *)a1 + 24) |= 1u;
  *(_QWORD *)a1 = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_32:
  if (v31 != v33)
    free(v31);
}

void `anonymous namespace'::BitcodeReader::materializeForwardReferencedFunctions(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  __int16 v18;

  if (*(_BYTE *)(a2 + 1713))
  {
LABEL_20:
    *(_QWORD *)this = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 1713) = 1;
    while (1)
    {
      v4 = *(_QWORD *)(a2 + 1680);
      if (!v4)
        break;
      v5 = *(void ***)(a2 + 1648);
      v6 = *(_QWORD *)(a2 + 1672);
      v7 = (*(_QWORD **)((char *)v5 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)))[v6 & 0x1FF];
      *(_QWORD *)(a2 + 1680) = v4 - 1;
      *(_QWORD *)(a2 + 1672) = v6 + 1;
      if (v6 + 1 >= 0x400)
      {
        operator delete(*v5);
        *(_QWORD *)(a2 + 1648) += 8;
        *(_QWORD *)(a2 + 1672) -= 512;
      }
      v8 = *(_DWORD *)(a2 + 1632);
      if (v8)
      {
        v9 = *(_QWORD *)(a2 + 1616);
        v10 = v8 - 1;
        v11 = v10 & ((v7 >> 4) ^ (v7 >> 9));
        v12 = *(_QWORD *)(v9 + 32 * v11);
        if (v12 == v7)
        {
LABEL_8:
          if ((*(_BYTE *)(v7 + 35) & 1) == 0)
          {
            v17 = "Never resolved function from blockaddress";
            v18 = 259;
            return;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v7);
          if (*(_QWORD *)this)
            return;
        }
        else
        {
          v13 = 1;
          while (v12 != -4096)
          {
            v14 = v11 + v13++;
            v11 = v14 & v10;
            v12 = *(_QWORD *)(v9 + 32 * v11);
            if (v12 == v7)
              goto LABEL_8;
          }
        }
      }
    }
    v15 = *(_QWORD **)(a2 + 1688);
    v16 = *(_QWORD **)(a2 + 1696);
    if (v15 == v16)
    {
LABEL_19:
      *(_QWORD *)(a2 + 1696) = v15;
      *(_BYTE *)(a2 + 1713) = 0;
      goto LABEL_20;
    }
    while (1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *v15);
      if (*(_QWORD *)this)
        break;
      if (++v15 == v16)
      {
        v15 = *(_QWORD **)(a2 + 1688);
        goto LABEL_19;
      }
    }
  }
}

void llvm::BitcodeModule::getLazyModule(__int128 *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  char v23;
  _BYTE v24[24];
  _BYTE *v25;
  char v26;
  _BYTE v27[24];
  _BYTE *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v21[0] = 0;
  v23 = 0;
  if (*(_BYTE *)(a5 + 32))
  {
    v12 = *(_QWORD *)(a5 + 24);
    if (v12)
    {
      if (v12 == a5)
      {
        v22 = v21;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a5 + 24))(a5, v21);
      }
      else
      {
        v22 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      }
    }
    else
    {
      v22 = 0;
    }
    v23 = 1;
  }
  v13 = v24;
  v24[0] = 0;
  v26 = 0;
  if (*(_BYTE *)(a5 + 72))
  {
    v14 = *(_QWORD *)(a5 + 64);
    if (v14)
    {
      if (v14 == a5 + 40)
      {
        v25 = v24;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a5 + 40) + 24))(a5 + 40, v24);
      }
      else
      {
        v25 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      }
    }
    else
    {
      v25 = 0;
    }
    v26 = 1;
  }
  v15 = v27;
  v27[0] = 0;
  v29 = 0;
  if (*(_BYTE *)(a5 + 112))
  {
    v16 = *(_QWORD *)(a5 + 104);
    if (v16)
    {
      if (v16 == a5 + 80)
      {
        v28 = v27;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a5 + 80) + 24))(a5 + 80, v27);
      }
      else
      {
        v28 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      }
    }
    else
    {
      v28 = 0;
    }
    v29 = 1;
  }
  llvm::BitcodeModule::getModuleImpl(a1, a2, 0, a3, a4, (uint64_t)v21, a6);
  if (v29)
  {
    if (v28 == v27)
    {
      v17 = 4;
    }
    else
    {
      if (!v28)
        goto LABEL_28;
      v17 = 5;
      v15 = v28;
    }
    (*(void (**)(_QWORD *))(*v15 + 8 * v17))(v15);
  }
LABEL_28:
  if (!v26)
    goto LABEL_34;
  if (v25 == v24)
  {
    v18 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_34;
    v18 = 5;
    v13 = v25;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v18))(v13);
LABEL_34:
  if (!v23)
    return;
  v19 = v22;
  if (v22 == v21)
  {
    v20 = 4;
    v19 = v21;
  }
  else
  {
    if (!v22)
      return;
    v20 = 5;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v20))(v19);
}

void llvm::getBitcodeTargetTriple(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _WORD *v3;
  char *v4;
  unsigned __int8 v5;
  void *v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char *v18;
  BOOL v19;
  int8x8_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  char v31;
  char *v32;
  _WORD *v33;
  __int8 v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  int8x8_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  char v45;
  int8x8_t v46;
  unsigned int v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  __int32 v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  int8x8_t v56;
  unsigned int v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  int8x8_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int8x16_t v75;
  unint64_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int64x2_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int64x2_t v85;
  uint8x16_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint32x4_t v89;
  uint32x4_t v90;
  int8x16_t v91;
  uint64x2_t v92;
  uint64x2_t v93;
  uint64x2_t v94;
  uint64x2_t v95;
  uint64x2_t v96;
  uint64x2_t v97;
  uint64x2_t v98;
  uint64x2_t v99;
  int8x16_t v100;
  uint32x4_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  uint32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int64x2_t v109;
  int8x16_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int8x16_t v113;
  unint64_t v114;
  unint64_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int8x16_t v119;
  char *v120;
  unint64_t v121;
  int8x16_t v122;
  int8x16_t v123;
  uint8x8_t v124;
  uint16x8_t v125;
  uint32x4_t v126;
  uint64x2_t v127;
  uint64x2_t v128;
  uint64x2_t v129;
  uint32x4_t v130;
  uint64x2_t v131;
  int8x16_t v132;
  int64x2_t v133;
  int8x16_t v134;
  unsigned int v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  int8x8_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  unsigned int v143;
  void *v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int64x2_t v150;
  unint64_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  uint8x16_t v162;
  uint16x8_t v163;
  uint16x8_t v164;
  uint32x4_t v165;
  uint32x4_t v166;
  int8x16_t v167;
  uint64x2_t v168;
  uint64x2_t v169;
  uint64x2_t v170;
  uint64x2_t v171;
  uint64x2_t v172;
  uint64x2_t v173;
  uint64x2_t v174;
  uint64x2_t v175;
  int8x16_t v176;
  uint32x4_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  uint32x4_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int64x2_t v185;
  int8x16_t v186;
  int64x2_t v187;
  int64x2_t v188;
  int8x16_t v189;
  unint64_t v190;
  unint64_t v191;
  int64x2_t v192;
  int64x2_t v193;
  int64x2_t v194;
  int8x16_t v195;
  char *v196;
  unint64_t v197;
  int8x16_t v198;
  int8x16_t v199;
  uint8x8_t v200;
  uint16x8_t v201;
  uint32x4_t v202;
  uint64x2_t v203;
  uint64x2_t v204;
  uint64x2_t v205;
  uint32x4_t v206;
  uint64x2_t v207;
  int8x16_t v208;
  int64x2_t v209;
  int8x16_t v210;
  const std::error_category *v211;
  unsigned int v212;
  void **v213;
  unint64_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int64x2_t v220;
  unint64_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  uint8x16_t v232;
  uint16x8_t v233;
  uint16x8_t v234;
  uint32x4_t v235;
  uint32x4_t v236;
  int8x16_t v237;
  uint64x2_t v238;
  uint64x2_t v239;
  uint64x2_t v240;
  uint64x2_t v241;
  uint64x2_t v242;
  uint64x2_t v243;
  uint64x2_t v244;
  uint64x2_t v245;
  int8x16_t v246;
  uint32x4_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  uint32x4_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int64x2_t v255;
  int8x16_t v256;
  int8x8_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int8x16_t v260;
  unint64_t v261;
  unint64_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int8x16_t v266;
  char *v267;
  unint64_t v268;
  int8x16_t v269;
  int8x16_t v270;
  uint8x8_t v271;
  uint16x8_t v272;
  uint32x4_t v273;
  uint64x2_t v274;
  uint64x2_t v275;
  uint64x2_t v276;
  uint32x4_t v277;
  uint64x2_t v278;
  int64x2_t v279;
  int8x16_t v280;
  int8x8_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int64x2_t v287;
  int8x16_t v288;
  unint64_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int64x2_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int64x2_t v298;
  uint8x16_t v299;
  uint16x8_t v300;
  uint16x8_t v301;
  uint32x4_t v302;
  uint32x4_t v303;
  int8x16_t v304;
  uint64x2_t v305;
  uint64x2_t v306;
  uint64x2_t v307;
  uint64x2_t v308;
  uint64x2_t v309;
  uint64x2_t v310;
  uint64x2_t v311;
  uint64x2_t v312;
  int8x16_t v313;
  uint32x4_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  uint32x4_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int64x2_t v322;
  int8x16_t v323;
  int8x8_t v324;
  int64x2_t v325;
  int64x2_t v326;
  int8x16_t v327;
  unint64_t v328;
  unint64_t v329;
  int64x2_t v330;
  int64x2_t v331;
  int64x2_t v332;
  int8x16_t v333;
  char *v334;
  unint64_t v335;
  int8x16_t v336;
  int8x16_t v337;
  uint8x8_t v338;
  uint16x8_t v339;
  uint32x4_t v340;
  uint64x2_t v341;
  uint64x2_t v342;
  uint64x2_t v343;
  uint32x4_t v344;
  uint64x2_t v345;
  int8x16_t v346;
  int64x2_t v347;
  int8x16_t v348;
  int8x8_t v349;
  const std::error_category *v350;
  void **v351;
  unsigned int v352;
  unsigned __int8 v353;
  void *v354;
  uint64_t v355;
  void *v356;
  char *v357;
  char *v358;
  int8x16_t v359;
  std::string v360;
  std::string::size_type v361;
  void *v362;
  unsigned int v363;
  void *__p;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  unint64_t v368;
  unint64_t v369;
  int8x8_t v370;
  unsigned int v371;
  unsigned int v372;
  int v373;
  char v374;
  unsigned int v375[2];
  char v376;
  void *v377;
  uint64_t v378;
  _WORD v379[256];
  std::string __str;
  uint64_t v381;
  uint64_t v382;
  char v383;
  uint64_t v384;
  int v385;
  void **p_p;
  void *v387;
  const char *v388;
  unint64_t v389;
  unint64_t v390;
  __int16 v391;
  uint64_t v392;
  std::error_code v393;
  std::error_code v394;

  v392 = *MEMORY[0x1E0C80C00];
  initStream((uint64_t)&v367, *(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  if ((v374 & 1) != 0)
  {
    v357 = v367;
    v367 = 0;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v357;
    goto LABEL_211;
  }
  v3 = v379;
  v4 = "Malformed block";
  v359 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
  do
  {
    llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)&v367, 0, (uint64_t)v375);
    if ((v376 & 1) != 0)
    {
      v9 = *(void **)v375;
      *(_QWORD *)v375 = 0;
LABEL_9:
      *(_BYTE *)(a2 + 24) |= 1u;
      *(_QWORD *)a2 = v9;
LABEL_10:
      v7 = 1;
    }
    else
    {
      switch(v375[0])
      {
        case 0u:
          v377 = v4;
          v379[8] = 259;
          if ((v5 & 1) == 0
          {
          }
          v6 = operator new(0x38uLL);
          v7 = 1;
          v8 = llvm::StringError::StringError((uint64_t)v6, (llvm::Twine *)&v377, 1, (uint64_t)&llvm::BitcodeErrorCategory(void)::ErrorCategory);
          *(_BYTE *)(a2 + 24) |= 1u;
          *(_QWORD *)a2 = v8;
          break;
        case 1u:
          *(_BYTE *)(a2 + 24) &= ~1u;
          *(_BYTE *)(a2 + 23) = 0;
          *(_BYTE *)a2 = 0;
          goto LABEL_10;
        case 2u:
          if (v375[1] == 8)
          {
            llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)&v367, 0, 8, (uint64_t *)&v377);
            v9 = v377;
            if (v377)
              goto LABEL_9;
            v377 = v3;
            v378 = 0x4000000000;
            memset(&v360, 0, sizeof(v360));
            while (1)
            {
              v12 = v371;
              if (v371)
              {
                v13 = v372;
                v14 = v370;
                if (v371 >= v372)
                  goto LABEL_41;
                v16 = v368;
                v15 = v369;
                v17 = v368 - v369;
                if (v368 <= v369)
                  goto LABEL_187;
              }
              else
              {
                v16 = v368;
                v15 = v369;
                if (v368 <= v369)
                  goto LABEL_195;
                v13 = v372;
                if (!v372)
                {
                  v14 = v370;
LABEL_41:
                  v22 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v13) & *(_QWORD *)&v14;
                  v23 = *(_QWORD *)&v14 >> v13;
                  v370 = (int8x8_t)(*(_QWORD *)&v14 >> v13);
                  v24 = v371 - v13;
                  v371 = v24;
                  if ((_DWORD)v22 != 1)
                    goto LABEL_57;
                  goto LABEL_42;
                }
                v14 = 0;
                v17 = v368 - v369;
                if (v368 <= v369)
                {
LABEL_187:
                  v350 = std::generic_category();
                  __p = 0;
                  v365 = 0;
                  v366 = 0;
                  LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
                  v383 = 0;
                  v384 = 0;
                  v385 = 1;
                  v381 = 0;
                  v382 = 0;
                  __str.__r_.__value_.__r.__words[2] = 0;
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                  p_p = &__p;
                  llvm::raw_ostream::SetBufferAndMode((uint64_t)&__str, 0, 0, 0);
                  v387 = &unk_1E0E203C0;
                  v388 = "Unexpected end of file reading %u of %u bytes";
                  v389 = v369;
                  v390 = v16;
                  goto LABEL_189;
                }
              }
              v18 = &v367[v15];
              if (v16 >= v15 + 8)
              {
                v20 = *(int8x8_t *)v18;
                v370 = v20;
                v17 = 8;
              }
              else
              {
                v370 = 0;
                if (v17)
                {
                  if (v17 < 8uLL
                    || (&v370 < (int8x8_t *)&v367[v15 + v17] ? (v19 = v18 >= (char *)&v371) : (v19 = 1), !v19))
                  {
                    v21 = 0;
                    v20 = 0;
LABEL_51:
                    v25 = v17 - v21;
                    v26 = 8 * v21;
                    v27 = &v367[v21 + v15];
                    do
                    {
                      v28 = *v27++;
                      *(_QWORD *)&v20 |= (unint64_t)v28 << (v26 & 0xF8);
                      v370 = v20;
                      v26 += 8;
                      --v25;
                    }
                    while (v25);
                    goto LABEL_55;
                  }
                  if (v17 >= 0x10uLL)
                  {
                    v21 = v17 - (unint64_t)(v17 & 0xF);
                    v145 = (int64x2_t)xmmword_181267BA0;
                    v146 = (int64x2_t)xmmword_181267BB0;
                    v147 = (int64x2_t)xmmword_181267BC0;
                    v148 = 0uLL;
                    v149 = 0uLL;
                    v150 = (int64x2_t)xmmword_181267BD0;
                    v151 = v21;
                    v152 = (int64x2_t)xmmword_181233120;
                    v153 = (int64x2_t)xmmword_181233290;
                    v154 = (int64x2_t)xmmword_181267BE0;
                    v155 = (int64x2_t)xmmword_1812332B0;
                    v156 = 0uLL;
                    v157 = 0uLL;
                    v158 = 0uLL;
                    v159 = 0uLL;
                    v160 = 0uLL;
                    v161 = 0uLL;
                    do
                    {
                      v162 = *(uint8x16_t *)v18;
                      v18 += 16;
                      v163 = vmovl_u8(*(uint8x8_t *)v162.i8);
                      v164 = vmovl_high_u8(v162);
                      v165 = vmovl_u16(*(uint16x4_t *)v164.i8);
                      v166 = vmovl_high_u16(v164);
                      v167 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                      v168 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v155, 3uLL), v167);
                      v169 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v150, 3uLL), v167);
                      v170 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v154, 3uLL), v167);
                      v171 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v153, 3uLL), v167);
                      v172 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v147, 3uLL), v167);
                      v173 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v152, 3uLL), v167);
                      v174 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v146, 3uLL), v167);
                      v175.i64[0] = v166.u32[2];
                      v175.i64[1] = v166.u32[3];
                      v176 = (int8x16_t)vshlq_u64(v175, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v145, 3uLL), v167));
                      v177 = vmovl_u16(*(uint16x4_t *)v163.i8);
                      v175.i64[0] = v166.u32[0];
                      v175.i64[1] = v166.u32[1];
                      v178 = (int8x16_t)vshlq_u64(v175, v174);
                      v175.i64[0] = v177.u32[0];
                      v175.i64[1] = v177.u32[1];
                      v179 = (int8x16_t)vshlq_u64(v175, v173);
                      v175.i64[0] = v165.u32[2];
                      v175.i64[1] = v165.u32[3];
                      v180 = (int8x16_t)vshlq_u64(v175, v172);
                      v181 = vmovl_high_u16(v163);
                      v175.i64[0] = v177.u32[2];
                      v175.i64[1] = v177.u32[3];
                      v182 = (int8x16_t)vshlq_u64(v175, v171);
                      v175.i64[0] = v181.u32[0];
                      v175.i64[1] = v181.u32[1];
                      v183 = (int8x16_t)vshlq_u64(v175, v170);
                      v175.i64[0] = v165.u32[0];
                      v175.i64[1] = v165.u32[1];
                      v184 = (int8x16_t)vshlq_u64(v175, v169);
                      v175.i64[0] = v181.u32[2];
                      v175.i64[1] = v181.u32[3];
                      v157 = vorrq_s8((int8x16_t)vshlq_u64(v175, v168), v157);
                      v158 = vorrq_s8(v184, v158);
                      v156 = vorrq_s8(v183, v156);
                      v149 = vorrq_s8(v182, v149);
                      v159 = vorrq_s8(v180, v159);
                      v148 = vorrq_s8(v179, v148);
                      v160 = vorrq_s8(v178, v160);
                      v161 = vorrq_s8(v176, v161);
                      v185 = vdupq_n_s64(0x10uLL);
                      v154 = vaddq_s64(v154, v185);
                      v153 = vaddq_s64(v153, v185);
                      v152 = vaddq_s64(v152, v185);
                      v155 = vaddq_s64(v155, v185);
                      v150 = vaddq_s64(v150, v185);
                      v147 = vaddq_s64(v147, v185);
                      v146 = vaddq_s64(v146, v185);
                      v145 = vaddq_s64(v145, v185);
                      v151 -= 16;
                    }
                    while (v151);
                    v186 = vorrq_s8(vorrq_s8(vorrq_s8(v148, v158), vorrq_s8(v156, v160)), vorrq_s8(vorrq_s8(v149, v159), vorrq_s8(v157, v161)));
                    v370 = vorr_s8(*(int8x8_t *)v186.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL));
                    v20 = v370;
                    if ((v17 & 0xF) == 0)
                      goto LABEL_55;
                    if ((v17 & 0xF) < 8uLL)
                      goto LABEL_51;
                  }
                  else
                  {
                    v20 = 0;
                    v21 = 0;
                  }
                  v187 = vdupq_n_s64(v21);
                  v188 = vaddq_s64(v187, (int64x2_t)xmmword_1812332B0);
                  v189 = (int8x16_t)(unint64_t)v20;
                  v190 = v15 + v21;
                  v191 = v21 + (v17 & 7);
                  v21 = v17 - (unint64_t)(v17 & 7);
                  v192 = vaddq_s64(v187, (int64x2_t)xmmword_181267BE0);
                  v193 = vaddq_s64(v187, (int64x2_t)xmmword_181233290);
                  v194 = vaddq_s64(v187, (int64x2_t)xmmword_181233120);
                  v195 = 0uLL;
                  v196 = &v367[v190];
                  v197 = v191 - v17;
                  v198 = 0uLL;
                  v199 = 0uLL;
                  do
                  {
                    v200 = *(uint8x8_t *)v196;
                    v196 += 8;
                    v201 = vmovl_u8(v200);
                    v202 = vmovl_high_u16(v201);
                    v203.i64[0] = v202.u32[2];
                    v203.i64[1] = v202.u32[3];
                    v204 = v203;
                    v203.i64[0] = v202.u32[0];
                    v203.i64[1] = v202.u32[1];
                    v205 = v203;
                    v206 = vmovl_u16(*(uint16x4_t *)v201.i8);
                    v203.i64[0] = v206.u32[2];
                    v203.i64[1] = v206.u32[3];
                    v207 = v203;
                    v203.i64[0] = v206.u32[0];
                    v203.i64[1] = v206.u32[1];
                    v208 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                    v199 = vorrq_s8((int8x16_t)vshlq_u64(v204, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v188, 3uLL), v208)), v199);
                    v198 = vorrq_s8((int8x16_t)vshlq_u64(v205, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v192, 3uLL), v208)), v198);
                    v195 = vorrq_s8((int8x16_t)vshlq_u64(v207, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v193, 3uLL), v208)), v195);
                    v209 = vdupq_n_s64(8uLL);
                    v189 = vorrq_s8((int8x16_t)vshlq_u64(v203, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v194, 3uLL), v208)), v189);
                    v192 = vaddq_s64(v192, v209);
                    v193 = vaddq_s64(v193, v209);
                    v194 = vaddq_s64(v194, v209);
                    v188 = vaddq_s64(v188, v209);
                    v197 += 8;
                  }
                  while (v197);
                  v210 = vorrq_s8(vorrq_s8(v189, v198), vorrq_s8(v195, v199));
                  v370 = vorr_s8(*(int8x8_t *)v210.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v210, v210, 8uLL));
                  v20 = v370;
                  if ((v17 & 7) == 0)
                    goto LABEL_55;
                  goto LABEL_51;
                }
                v20 = 0;
              }
LABEL_55:
              v29 = v13 - v371;
              v369 = v15 + v17;
              v371 = 8 * v17;
              v24 = 8 * v17 - (v13 - v12);
              if (8 * v17 < v29)
              {
                v350 = std::generic_category();
                __p = 0;
                v365 = 0;
                v366 = 0;
                LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
                v383 = 0;
                v384 = 0;
                v385 = 1;
                v381 = 0;
                v382 = 0;
                __str.__r_.__value_.__r.__words[2] = 0;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                p_p = &__p;
                llvm::raw_ostream::SetBufferAndMode((uint64_t)&__str, 0, 0, 0);
                v387 = &unk_1E0E20320;
                v388 = "Unexpected end of file reading %u of %u bits";
                v389 = __PAIR64__(v29, v371);
LABEL_189:
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, (uint64_t)&v387);
                v351 = p_p;
                v11 = (uint64_t)operator new(0x38uLL);
                v391 = 260;
                v387 = v351;
                llvm::StringError::StringError(v11, (llvm::Twine *)&v387, 5, (uint64_t)v350);
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__str);
                if (SHIBYTE(v366) < 0)
                  operator delete(__p);
                goto LABEL_198;
              }
              v23 = *(_QWORD *)&v20 >> v29;
              v370 = (int8x8_t)(*(_QWORD *)&v20 >> v29);
              v371 = v24;
              v30 = (*(_QWORD *)&v20 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v29)) << v12;
              v22 = v30 | *(_QWORD *)&v14;
              if ((v30 | v14.i32[0]) == 1)
              {
LABEL_42:
                llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)&v367, 8u, (uint64_t)&__str);
                if ((__str.__r_.__value_.__s.__data_[8] & 1) != 0)
                {
                  v11 = __str.__r_.__value_.__r.__words[0];
                  goto LABEL_198;
                }
                v31 = v371;
                if (v371 >= 4)
                {
                  v45 = v370.i8[0] & 0xF;
                  v46 = (int8x8_t)(*(_QWORD *)&v370 >> 4);
                  *(_QWORD *)&v370 >>= 4;
                  v47 = v371 - 4;
                  v371 -= 4;
                  if ((v45 & 8) != 0)
                    goto LABEL_81;
LABEL_75:
                  v19 = v47 >= 0x20;
                  v48 = v47 - 32;
                  if (v19)
                  {
                    v49 = 0;
                    v50 = *(_QWORD *)&v46 >> v48;
                    v370 = (int8x8_t)HIDWORD(v50);
                    v371 = 0;
                    goto LABEL_154;
                  }
                  v371 = 0;
                  LODWORD(v362) = 32;
                  v135 = v368 - v369;
                  if (v368 <= v369)
                  {
                    __str.__r_.__value_.__r.__words[0] = v368;
                    llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", &v369, (uint64_t *)&__str, (uint64_t *)&v387);
                    v11 = (uint64_t)v387;
                    if (v387)
                      goto LABEL_198;
                    v212 = v371;
                    if (v371 <= 0x1F)
                      goto LABEL_147;
                    goto LABEL_153;
                  }
                  v136 = &v367[v369];
                  if (v368 >= v369 + 8)
                  {
                    v370 = *(int8x8_t *)v136;
                    v135 = 8;
                  }
                  else
                  {
                    v370 = 0;
                    if (v135)
                    {
                      v137 = (v368 - v369);
                      if (v137 < 8 || &v370 < (int8x8_t *)&v367[v369 + v137] && v136 < (char *)&v371)
                      {
                        v138 = 0;
                        v139 = 0;
LABEL_120:
                        v140 = v137 - v138;
                        v141 = 8 * v138;
                        v142 = &v367[v138 + v369];
                        do
                        {
                          v143 = *v142++;
                          *(_QWORD *)&v139 |= (unint64_t)v143 << (v141 & 0xF8);
                          v370 = v139;
                          v141 += 8;
                          --v140;
                        }
                        while (v140);
                        goto LABEL_146;
                      }
                      if (v137 >= 0x10)
                      {
                        v138 = v137 - (v135 & 0xF);
                        v282 = (int64x2_t)xmmword_181267BA0;
                        v283 = (int64x2_t)xmmword_181267BB0;
                        v284 = (int64x2_t)xmmword_181267BC0;
                        v285 = (int64x2_t)xmmword_181267BD0;
                        v286 = (int64x2_t)xmmword_1812332B0;
                        v287 = (int64x2_t)xmmword_181267BE0;
                        v288 = 0uLL;
                        v289 = v138;
                        v290 = 0uLL;
                        v291 = 0uLL;
                        v292 = 0uLL;
                        v293 = 0uLL;
                        v294 = 0uLL;
                        v295 = (int64x2_t)xmmword_181233290;
                        v296 = 0uLL;
                        v297 = 0uLL;
                        v298 = (int64x2_t)xmmword_181233120;
                        do
                        {
                          v299 = *(uint8x16_t *)v136;
                          v136 += 16;
                          v300 = vmovl_u8(*(uint8x8_t *)v299.i8);
                          v301 = vmovl_high_u8(v299);
                          v302 = vmovl_u16(*(uint16x4_t *)v301.i8);
                          v303 = vmovl_high_u16(v301);
                          v304 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v305 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v286, 3uLL), v304);
                          v306 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v285, 3uLL), v304);
                          v307 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v287, 3uLL), v304);
                          v308 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v295, 3uLL), v304);
                          v309 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v284, 3uLL), v304);
                          v310 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v298, 3uLL), v304);
                          v311 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v283, 3uLL), v304);
                          v312.i64[0] = v303.u32[2];
                          v312.i64[1] = v303.u32[3];
                          v313 = (int8x16_t)vshlq_u64(v312, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v282, 3uLL), v304));
                          v314 = vmovl_u16(*(uint16x4_t *)v300.i8);
                          v312.i64[0] = v303.u32[0];
                          v312.i64[1] = v303.u32[1];
                          v315 = (int8x16_t)vshlq_u64(v312, v311);
                          v312.i64[0] = v314.u32[0];
                          v312.i64[1] = v314.u32[1];
                          v316 = (int8x16_t)vshlq_u64(v312, v310);
                          v312.i64[0] = v302.u32[2];
                          v312.i64[1] = v302.u32[3];
                          v317 = (int8x16_t)vshlq_u64(v312, v309);
                          v318 = vmovl_high_u16(v300);
                          v312.i64[0] = v314.u32[2];
                          v312.i64[1] = v314.u32[3];
                          v319 = (int8x16_t)vshlq_u64(v312, v308);
                          v312.i64[0] = v318.u32[0];
                          v312.i64[1] = v318.u32[1];
                          v320 = (int8x16_t)vshlq_u64(v312, v307);
                          v312.i64[0] = v302.u32[0];
                          v312.i64[1] = v302.u32[1];
                          v321 = (int8x16_t)vshlq_u64(v312, v306);
                          v312.i64[0] = v318.u32[2];
                          v312.i64[1] = v318.u32[3];
                          v292 = vorrq_s8((int8x16_t)vshlq_u64(v312, v305), v292);
                          v293 = vorrq_s8(v321, v293);
                          v291 = vorrq_s8(v320, v291);
                          v290 = vorrq_s8(v319, v290);
                          v294 = vorrq_s8(v317, v294);
                          v288 = vorrq_s8(v316, v288);
                          v296 = vorrq_s8(v315, v296);
                          v297 = vorrq_s8(v313, v297);
                          v322 = vdupq_n_s64(0x10uLL);
                          v287 = vaddq_s64(v287, v322);
                          v295 = vaddq_s64(v295, v322);
                          v298 = vaddq_s64(v298, v322);
                          v286 = vaddq_s64(v286, v322);
                          v285 = vaddq_s64(v285, v322);
                          v284 = vaddq_s64(v284, v322);
                          v283 = vaddq_s64(v283, v322);
                          v282 = vaddq_s64(v282, v322);
                          v289 -= 16;
                        }
                        while (v289);
                        v323 = vorrq_s8(vorrq_s8(vorrq_s8(v288, v293), vorrq_s8(v291, v296)), vorrq_s8(vorrq_s8(v290, v294), vorrq_s8(v292, v297)));
                        v324 = vorr_s8(*(int8x8_t *)v323.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v323, v323, 8uLL));
                        v370 = v324;
                        if ((v135 & 0xF) == 0)
                          goto LABEL_146;
                        v139 = v324;
                        if ((v135 & 0xF) < 8uLL)
                          goto LABEL_120;
                      }
                      else
                      {
                        v139 = 0;
                        v138 = 0;
                      }
                      v325 = vdupq_n_s64(v138);
                      v326 = vaddq_s64(v325, (int64x2_t)xmmword_1812332B0);
                      v327 = (int8x16_t)(unint64_t)v139;
                      v328 = v138 + v369;
                      v329 = v138 + (v135 & 7);
                      v138 = v137 - (v135 & 7);
                      v330 = vaddq_s64(v325, (int64x2_t)xmmword_181267BE0);
                      v331 = vaddq_s64(v325, (int64x2_t)xmmword_181233290);
                      v332 = vaddq_s64(v325, (int64x2_t)xmmword_181233120);
                      v333 = 0uLL;
                      v334 = &v367[v328];
                      v335 = v329 - v137;
                      v336 = 0uLL;
                      v337 = 0uLL;
                      do
                      {
                        v338 = *(uint8x8_t *)v334;
                        v334 += 8;
                        v339 = vmovl_u8(v338);
                        v340 = vmovl_high_u16(v339);
                        v341.i64[0] = v340.u32[2];
                        v341.i64[1] = v340.u32[3];
                        v342 = v341;
                        v341.i64[0] = v340.u32[0];
                        v341.i64[1] = v340.u32[1];
                        v343 = v341;
                        v344 = vmovl_u16(*(uint16x4_t *)v339.i8);
                        v341.i64[0] = v344.u32[2];
                        v341.i64[1] = v344.u32[3];
                        v345 = v341;
                        v341.i64[0] = v344.u32[0];
                        v341.i64[1] = v344.u32[1];
                        v346 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                        v337 = vorrq_s8((int8x16_t)vshlq_u64(v342, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v326, 3uLL), v346)), v337);
                        v336 = vorrq_s8((int8x16_t)vshlq_u64(v343, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v330, 3uLL), v346)), v336);
                        v333 = vorrq_s8((int8x16_t)vshlq_u64(v345, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v331, 3uLL), v346)), v333);
                        v347 = vdupq_n_s64(8uLL);
                        v327 = vorrq_s8((int8x16_t)vshlq_u64(v341, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v332, 3uLL), v346)), v327);
                        v330 = vaddq_s64(v330, v347);
                        v331 = vaddq_s64(v331, v347);
                        v332 = vaddq_s64(v332, v347);
                        v326 = vaddq_s64(v326, v347);
                        v335 += 8;
                      }
                      while (v335);
                      v348 = vorrq_s8(vorrq_s8(v327, v336), vorrq_s8(v333, v337));
                      v349 = vorr_s8(*(int8x8_t *)v348.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v348, v348, 8uLL));
                      v370 = v349;
                      if ((v135 & 7) == 0)
                        goto LABEL_146;
                      v139 = v349;
                      goto LABEL_120;
                    }
                  }
LABEL_146:
                  v369 += v135;
                  v212 = 8 * v135;
                  v371 = v212;
                  if (v212 > 0x1F)
                  {
LABEL_153:
                    LODWORD(v50) = v370.i32[0];
                    *(_QWORD *)&v370 >>= 32;
                    v49 = v212 - 32;
                    v371 = v49;
LABEL_154:
                    v214 = 8 * v369 - v49 + 32 * v50;
                    v387 = (void *)v214;
                    if (v49 || v368 > v369)
                    {
                      if (v368 >= v214 >> 3)
                      {
                        v369 = (v214 >> 3) & 0x1FFFFFFFFFFFFFF8;
                        v371 = 0;
                        if ((v214 & 0x3F) == 0
                          || (llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v367, v214 & 0x3F, (uint64_t)&__str), (__str.__r_.__value_.__s.__data_[8] & 1) == 0)|| (v361 = __str.__r_.__value_.__r.__words[0]) == 0)
                        {
                          v361 = 0;
                        }
                      }
                      else
                      {
                        __str.__r_.__value_.__r.__words[0] = 8 * v369 - v49;
                        llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v387, (uint64_t *)&__str, (uint64_t *)&v361);
                      }
                    }
                    else
                    {
                      *(_QWORD *)&v394.__val_ = std::generic_category();
                      v394.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
                      llvm::createStringError((llvm *)0x5C, v394, &v361);
                    }
                    v11 = v361;
                    if (v361)
                      goto LABEL_198;
                  }
                  else
                  {
LABEL_147:
                    llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)&v371, (int *)&v362, (uint64_t *)&__p);
                    v11 = (uint64_t)__p;
                    if (__p)
                      goto LABEL_198;
                  }
                }
                else
                {
                  v32 = v4;
                  v33 = v3;
                  if (v371)
                    v34 = v370.i8[0];
                  else
                    v34 = 0;
                  v35 = 4 - v371;
                  v363 = 4 - v371;
                  v36 = v368 - v369;
                  if (v368 > v369)
                  {
                    v37 = &v367[v369];
                    if (v368 >= v369 + 8)
                    {
                      v370 = *(int8x8_t *)v37;
                      v36 = 8;
                      goto LABEL_127;
                    }
                    v370 = 0;
                    if (!v36)
                      goto LABEL_127;
                    v38 = (v368 - v369);
                    if (v38 >= 8 && (&v370 >= (int8x8_t *)&v367[v369 + v38] || v37 >= (char *)&v371))
                    {
                      if (v38 >= 0x10)
                      {
                        v39 = v38 - (v36 & 0xF);
                        v215 = (int64x2_t)xmmword_1812332B0;
                        v216 = (int64x2_t)xmmword_181267BE0;
                        v217 = (int64x2_t)xmmword_181233290;
                        v218 = 0uLL;
                        v219 = 0uLL;
                        v220 = (int64x2_t)xmmword_181233120;
                        v221 = v39;
                        v222 = (int64x2_t)xmmword_181267BD0;
                        v223 = (int64x2_t)xmmword_181267BC0;
                        v224 = (int64x2_t)xmmword_181267BB0;
                        v225 = (int64x2_t)xmmword_181267BA0;
                        v226 = 0uLL;
                        v227 = 0uLL;
                        v228 = 0uLL;
                        v229 = 0uLL;
                        v230 = 0uLL;
                        v231 = 0uLL;
                        do
                        {
                          v232 = *(uint8x16_t *)v37;
                          v37 += 16;
                          v233 = vmovl_u8(*(uint8x8_t *)v232.i8);
                          v234 = vmovl_high_u8(v232);
                          v235 = vmovl_u16(*(uint16x4_t *)v234.i8);
                          v236 = vmovl_high_u16(v234);
                          v237 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v238 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v215, 3uLL), v237);
                          v239 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v222, 3uLL), v237);
                          v240 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v216, 3uLL), v237);
                          v241 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v217, 3uLL), v237);
                          v242 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v223, 3uLL), v237);
                          v243 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v220, 3uLL), v237);
                          v244 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v224, 3uLL), v237);
                          v245.i64[0] = v236.u32[2];
                          v245.i64[1] = v236.u32[3];
                          v246 = (int8x16_t)vshlq_u64(v245, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v225, 3uLL), v237));
                          v247 = vmovl_u16(*(uint16x4_t *)v233.i8);
                          v245.i64[0] = v236.u32[0];
                          v245.i64[1] = v236.u32[1];
                          v248 = (int8x16_t)vshlq_u64(v245, v244);
                          v245.i64[0] = v247.u32[0];
                          v245.i64[1] = v247.u32[1];
                          v249 = (int8x16_t)vshlq_u64(v245, v243);
                          v245.i64[0] = v235.u32[2];
                          v245.i64[1] = v235.u32[3];
                          v250 = (int8x16_t)vshlq_u64(v245, v242);
                          v251 = vmovl_high_u16(v233);
                          v245.i64[0] = v247.u32[2];
                          v245.i64[1] = v247.u32[3];
                          v252 = (int8x16_t)vshlq_u64(v245, v241);
                          v245.i64[0] = v251.u32[0];
                          v245.i64[1] = v251.u32[1];
                          v253 = (int8x16_t)vshlq_u64(v245, v240);
                          v245.i64[0] = v235.u32[0];
                          v245.i64[1] = v235.u32[1];
                          v254 = (int8x16_t)vshlq_u64(v245, v239);
                          v245.i64[0] = v251.u32[2];
                          v245.i64[1] = v251.u32[3];
                          v227 = vorrq_s8((int8x16_t)vshlq_u64(v245, v238), v227);
                          v228 = vorrq_s8(v254, v228);
                          v226 = vorrq_s8(v253, v226);
                          v219 = vorrq_s8(v252, v219);
                          v229 = vorrq_s8(v250, v229);
                          v218 = vorrq_s8(v249, v218);
                          v230 = vorrq_s8(v248, v230);
                          v231 = vorrq_s8(v246, v231);
                          v255 = vdupq_n_s64(0x10uLL);
                          v216 = vaddq_s64(v216, v255);
                          v217 = vaddq_s64(v217, v255);
                          v220 = vaddq_s64(v220, v255);
                          v215 = vaddq_s64(v215, v255);
                          v222 = vaddq_s64(v222, v255);
                          v223 = vaddq_s64(v223, v255);
                          v224 = vaddq_s64(v224, v255);
                          v225 = vaddq_s64(v225, v255);
                          v221 -= 16;
                        }
                        while (v221);
                        v256 = vorrq_s8(vorrq_s8(vorrq_s8(v218, v228), vorrq_s8(v226, v230)), vorrq_s8(vorrq_s8(v219, v229), vorrq_s8(v227, v231)));
                        v257 = vorr_s8(*(int8x8_t *)v256.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL));
                        v370 = v257;
                        if ((v36 & 0xF) == 0)
                          goto LABEL_127;
                        v40 = v257;
                        if ((v36 & 0xF) < 8uLL)
                          goto LABEL_71;
                      }
                      else
                      {
                        v40 = 0;
                        v39 = 0;
                      }
                      v258 = vdupq_n_s64(v39);
                      v259 = vaddq_s64(v258, (int64x2_t)xmmword_1812332B0);
                      v260 = (int8x16_t)(unint64_t)v40;
                      v261 = v39 + v369;
                      v262 = v39 + (v36 & 7);
                      v39 = v38 - (v36 & 7);
                      v263 = vaddq_s64(v258, (int64x2_t)xmmword_181267BE0);
                      v264 = vaddq_s64(v258, (int64x2_t)xmmword_181233290);
                      v265 = vaddq_s64(v258, (int64x2_t)xmmword_181233120);
                      v266 = 0uLL;
                      v267 = &v367[v261];
                      v268 = v262 - v38;
                      v269 = 0uLL;
                      v270 = 0uLL;
                      do
                      {
                        v271 = *(uint8x8_t *)v267;
                        v267 += 8;
                        v272 = vmovl_u8(v271);
                        v273 = vmovl_high_u16(v272);
                        v274.i64[0] = v273.u32[2];
                        v274.i64[1] = v273.u32[3];
                        v275 = v274;
                        v274.i64[0] = v273.u32[0];
                        v274.i64[1] = v273.u32[1];
                        v276 = v274;
                        v277 = vmovl_u16(*(uint16x4_t *)v272.i8);
                        v274.i64[0] = v277.u32[2];
                        v274.i64[1] = v277.u32[3];
                        v278 = v274;
                        v274.i64[0] = v277.u32[0];
                        v274.i64[1] = v277.u32[1];
                        v270 = vorrq_s8((int8x16_t)vshlq_u64(v275, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v259, 3uLL), v359)), v270);
                        v269 = vorrq_s8((int8x16_t)vshlq_u64(v276, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v263, 3uLL), v359)), v269);
                        v266 = vorrq_s8((int8x16_t)vshlq_u64(v278, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v264, 3uLL), v359)), v266);
                        v279 = vdupq_n_s64(8uLL);
                        v260 = vorrq_s8((int8x16_t)vshlq_u64(v274, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v265, 3uLL), v359)), v260);
                        v263 = vaddq_s64(v263, v279);
                        v264 = vaddq_s64(v264, v279);
                        v265 = vaddq_s64(v265, v279);
                        v259 = vaddq_s64(v259, v279);
                        v268 += 8;
                      }
                      while (v268);
                      v280 = vorrq_s8(vorrq_s8(v260, v269), vorrq_s8(v266, v270));
                      v281 = vorr_s8(*(int8x8_t *)v280.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v280, v280, 8uLL));
                      v370 = v281;
                      if ((v36 & 7) != 0)
                      {
                        v40 = v281;
                        goto LABEL_71;
                      }
                    }
                    else
                    {
                      v39 = 0;
                      v40 = 0;
LABEL_71:
                      v41 = v38 - v39;
                      v42 = 8 * v39;
                      v43 = &v367[v39 + v369];
                      do
                      {
                        v44 = *v43++;
                        *(_QWORD *)&v40 |= (unint64_t)v44 << (v42 & 0xF8);
                        v370 = v40;
                        v42 += 8;
                        --v41;
                      }
                      while (v41);
                    }
LABEL_127:
                    v369 += v36;
                    v371 = 8 * v36;
                    v47 = 8 * v36 - v35;
                    if (8 * v36 < v35)
                      goto LABEL_128;
                    goto LABEL_80;
                  }
                  __str.__r_.__value_.__r.__words[0] = v368;
                  llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", &v369, (uint64_t *)&__str, (uint64_t *)&v387);
                  v11 = (uint64_t)v387;
                  if (v387)
                    goto LABEL_129;
                  v47 = v371 - v35;
                  if (v371 < v35)
                  {
LABEL_128:
                    llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)&v371, (int *)&v363, (uint64_t *)&__p);
                    v11 = (uint64_t)__p;
LABEL_129:
                    v3 = v33;
                    v4 = v32;
                    goto LABEL_130;
                  }
LABEL_80:
                  v51 = v370.i32[0];
                  v46 = (int8x8_t)(*(_QWORD *)&v370 >> v35);
                  *(_QWORD *)&v370 >>= v35;
                  v371 = v47;
                  v3 = v33;
                  v4 = v32;
                  if (!((v51 << v31) & 8 | v34 & 8))
                    goto LABEL_75;
LABEL_81:
                  v52 = 0;
                  v53 = v368;
                  v54 = v369;
                  while (2)
                  {
                    if (v52 >= 0x1D)
                    {
                      *(_QWORD *)&v393.__val_ = std::generic_category();
                      v393.__cat_ = (const std::error_category *)"Unterminated VBR";
                      llvm::createStringError((llvm *)0x5C, v393, &v362);
                      v11 = (uint64_t)v362;
                      if (v362)
                        goto LABEL_198;
                    }
                    else
                    {
                      if (v47 >= 4)
                      {
                        v55 = v46.i8[0] & 0xF;
                        *(_QWORD *)&v46 >>= 4;
                        v370 = v46;
                        v371 = v47 - 4;
                        v47 -= 4;
                        v52 += 3;
                        if ((v55 & 8) == 0)
                          goto LABEL_75;
                        continue;
                      }
                      if (v47)
                        v56 = v46;
                      else
                        v56 = 0;
                      v57 = v368 - v54;
                      if (v368 > v54)
                      {
                        v58 = &v367[v54];
                        if (v368 >= v54 + 8)
                        {
                          v61 = *(int8x8_t *)v58;
                          v370 = v61;
                          v57 = 8;
                          goto LABEL_100;
                        }
                        v370 = 0;
                        if (!v57)
                        {
                          v61 = 0;
                          goto LABEL_100;
                        }
                        v59 = (v368 - v54);
                        if (v59 < 8 || &v370 < (int8x8_t *)&v367[v54 + v59] && v58 < (char *)&v371)
                        {
                          v60 = 0;
                          v61 = 0;
LABEL_95:
                          v62 = v59 - v60;
                          v63 = 8 * v60;
                          v64 = &v367[v60 + v54];
                          do
                          {
                            v65 = *v64++;
                            *(_QWORD *)&v61 |= (unint64_t)v65 << (v63 & 0xF8);
                            v370 = v61;
                            v63 += 8;
                            --v62;
                          }
                          while (v62);
                          goto LABEL_100;
                        }
                        if (v59 >= 0x10)
                        {
                          v60 = v59 - (v57 & 0xF);
                          v69 = (int64x2_t)xmmword_181267BA0;
                          v70 = (int64x2_t)xmmword_181267BB0;
                          v71 = (int64x2_t)xmmword_181267BC0;
                          v72 = (int64x2_t)xmmword_181267BD0;
                          v73 = (int64x2_t)xmmword_1812332B0;
                          v74 = (int64x2_t)xmmword_181267BE0;
                          v75 = 0uLL;
                          v76 = v60;
                          v77 = 0uLL;
                          v78 = 0uLL;
                          v79 = 0uLL;
                          v80 = 0uLL;
                          v81 = 0uLL;
                          v82 = (int64x2_t)xmmword_181233290;
                          v83 = 0uLL;
                          v84 = 0uLL;
                          v85 = (int64x2_t)xmmword_181233120;
                          do
                          {
                            v86 = *(uint8x16_t *)v58;
                            v58 += 16;
                            v87 = vmovl_u8(*(uint8x8_t *)v86.i8);
                            v88 = vmovl_high_u8(v86);
                            v89 = vmovl_u16(*(uint16x4_t *)v88.i8);
                            v90 = vmovl_high_u16(v88);
                            v91 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                            v92 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v73, 3uLL), v91);
                            v93 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v72, 3uLL), v91);
                            v94 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v74, 3uLL), v91);
                            v95 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v82, 3uLL), v91);
                            v96 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v71, 3uLL), v91);
                            v97 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v85, 3uLL), v91);
                            v98 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v70, 3uLL), v91);
                            v99.i64[0] = v90.u32[2];
                            v99.i64[1] = v90.u32[3];
                            v100 = (int8x16_t)vshlq_u64(v99, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v69, 3uLL), v91));
                            v101 = vmovl_u16(*(uint16x4_t *)v87.i8);
                            v99.i64[0] = v90.u32[0];
                            v99.i64[1] = v90.u32[1];
                            v102 = (int8x16_t)vshlq_u64(v99, v98);
                            v99.i64[0] = v101.u32[0];
                            v99.i64[1] = v101.u32[1];
                            v103 = (int8x16_t)vshlq_u64(v99, v97);
                            v99.i64[0] = v89.u32[2];
                            v99.i64[1] = v89.u32[3];
                            v104 = (int8x16_t)vshlq_u64(v99, v96);
                            v105 = vmovl_high_u16(v87);
                            v99.i64[0] = v101.u32[2];
                            v99.i64[1] = v101.u32[3];
                            v106 = (int8x16_t)vshlq_u64(v99, v95);
                            v99.i64[0] = v105.u32[0];
                            v99.i64[1] = v105.u32[1];
                            v107 = (int8x16_t)vshlq_u64(v99, v94);
                            v99.i64[0] = v89.u32[0];
                            v99.i64[1] = v89.u32[1];
                            v108 = (int8x16_t)vshlq_u64(v99, v93);
                            v99.i64[0] = v105.u32[2];
                            v99.i64[1] = v105.u32[3];
                            v79 = vorrq_s8((int8x16_t)vshlq_u64(v99, v92), v79);
                            v80 = vorrq_s8(v108, v80);
                            v78 = vorrq_s8(v107, v78);
                            v77 = vorrq_s8(v106, v77);
                            v81 = vorrq_s8(v104, v81);
                            v75 = vorrq_s8(v103, v75);
                            v83 = vorrq_s8(v102, v83);
                            v84 = vorrq_s8(v100, v84);
                            v109 = vdupq_n_s64(0x10uLL);
                            v74 = vaddq_s64(v74, v109);
                            v82 = vaddq_s64(v82, v109);
                            v85 = vaddq_s64(v85, v109);
                            v73 = vaddq_s64(v73, v109);
                            v72 = vaddq_s64(v72, v109);
                            v71 = vaddq_s64(v71, v109);
                            v70 = vaddq_s64(v70, v109);
                            v69 = vaddq_s64(v69, v109);
                            v76 -= 16;
                          }
                          while (v76);
                          v110 = vorrq_s8(vorrq_s8(vorrq_s8(v75, v80), vorrq_s8(v78, v83)), vorrq_s8(vorrq_s8(v77, v81), vorrq_s8(v79, v84)));
                          v370 = vorr_s8(*(int8x8_t *)v110.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL));
                          v61 = v370;
                          if ((v57 & 0xF) == 0)
                            goto LABEL_100;
                          if ((v57 & 0xF) < 8uLL)
                            goto LABEL_95;
                        }
                        else
                        {
                          v61 = 0;
                          v60 = 0;
                        }
                        v111 = vdupq_n_s64(v60);
                        v112 = vaddq_s64(v111, (int64x2_t)xmmword_1812332B0);
                        v113 = (int8x16_t)(unint64_t)v61;
                        v114 = v54 + v60;
                        v115 = v60 + (v57 & 7);
                        v60 = v59 - (v57 & 7);
                        v116 = vaddq_s64(v111, (int64x2_t)xmmword_181267BE0);
                        v117 = vaddq_s64(v111, (int64x2_t)xmmword_181233290);
                        v118 = vaddq_s64(v111, (int64x2_t)xmmword_181233120);
                        v119 = 0uLL;
                        v120 = &v367[v114];
                        v121 = v115 - v59;
                        v122 = 0uLL;
                        v123 = 0uLL;
                        do
                        {
                          v124 = *(uint8x8_t *)v120;
                          v120 += 8;
                          v125 = vmovl_u8(v124);
                          v126 = vmovl_high_u16(v125);
                          v127.i64[0] = v126.u32[2];
                          v127.i64[1] = v126.u32[3];
                          v128 = v127;
                          v127.i64[0] = v126.u32[0];
                          v127.i64[1] = v126.u32[1];
                          v129 = v127;
                          v130 = vmovl_u16(*(uint16x4_t *)v125.i8);
                          v127.i64[0] = v130.u32[2];
                          v127.i64[1] = v130.u32[3];
                          v131 = v127;
                          v127.i64[0] = v130.u32[0];
                          v127.i64[1] = v130.u32[1];
                          v132 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v123 = vorrq_s8((int8x16_t)vshlq_u64(v128, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v112, 3uLL), v132)), v123);
                          v122 = vorrq_s8((int8x16_t)vshlq_u64(v129, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v116, 3uLL), v132)), v122);
                          v119 = vorrq_s8((int8x16_t)vshlq_u64(v131, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v117, 3uLL), v132)), v119);
                          v133 = vdupq_n_s64(8uLL);
                          v113 = vorrq_s8((int8x16_t)vshlq_u64(v127, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v118, 3uLL), v132)), v113);
                          v116 = vaddq_s64(v116, v133);
                          v117 = vaddq_s64(v117, v133);
                          v118 = vaddq_s64(v118, v133);
                          v112 = vaddq_s64(v112, v133);
                          v121 += 8;
                        }
                        while (v121);
                        v134 = vorrq_s8(vorrq_s8(v113, v122), vorrq_s8(v119, v123));
                        v370 = vorr_s8(*(int8x8_t *)v134.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL));
                        v61 = v370;
                        if ((v57 & 7) != 0)
                          goto LABEL_95;
LABEL_100:
                        v66 = 4 - v47;
                        v54 += v57;
                        v369 = v54;
                        v371 = 8 * v57;
                        v67 = 8 * v57 - (4 - v47);
                        if (8 * v57 < 4 - v47)
                        {
                          v211 = std::generic_category();
                          __p = 0;
                          v365 = 0;
                          v366 = 0;
                          LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
                          v383 = 0;
                          v384 = 0;
                          v385 = 1;
                          v381 = 0;
                          v382 = 0;
                          __str.__r_.__value_.__r.__words[2] = 0;
                          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                          p_p = &__p;
                          llvm::raw_ostream::SetBufferAndMode((uint64_t)&__str, 0, 0, 0);
                          v387 = &unk_1E0E20320;
                          v388 = "Unexpected end of file reading %u of %u bits";
                          v389 = __PAIR64__(v66, v371);
                          goto LABEL_150;
                        }
                        v46 = (int8x8_t)(*(_QWORD *)&v61 >> v66);
                        v370 = (int8x8_t)(*(_QWORD *)&v61 >> v66);
                        v371 = v67;
                        v68 = (*(_QWORD *)&v61 << v47) & 0xFLL | *(_QWORD *)&v56;
                        v47 = v67;
                        v52 += 3;
                        if ((v68 & 8) == 0)
                          goto LABEL_75;
                        continue;
                      }
                      v211 = std::generic_category();
                      __p = 0;
                      v365 = 0;
                      v366 = 0;
                      LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
                      v383 = 0;
                      v384 = 0;
                      v385 = 1;
                      v381 = 0;
                      v382 = 0;
                      __str.__r_.__value_.__r.__words[2] = 0;
                      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                      p_p = &__p;
                      llvm::raw_ostream::SetBufferAndMode((uint64_t)&__str, 0, 0, 0);
                      v387 = &unk_1E0E203C0;
                      v388 = "Unexpected end of file reading %u of %u bytes";
                      v389 = v369;
                      v390 = v53;
LABEL_150:
                      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, (uint64_t)&v387);
                      v213 = p_p;
                      v11 = (uint64_t)operator new(0x38uLL);
                      v391 = 260;
                      v387 = v213;
                      llvm::StringError::StringError(v11, (llvm::Twine *)&v387, 5, (uint64_t)v211);
                      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__str);
                      if (SHIBYTE(v366) < 0)
                        operator delete(__p);
LABEL_130:
                      if (v11)
                      {
LABEL_198:
                        *(_BYTE *)(a2 + 24) |= 1u;
                        *(_QWORD *)a2 = v11;
LABEL_199:
                        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v360.__r_.__value_.__l.__data_);
                        if (v377 != v3)
                          free(v377);
                        goto LABEL_10;
                      }
                    }
                    break;
                  }
                }
              }
              else
              {
LABEL_57:
                if ((_DWORD)v22 == 2)
                {
                  llvm::BitstreamCursor::ReadAbbrevRecord(&v367, (unint64_t *)&__str);
                  v11 = __str.__r_.__value_.__r.__words[0];
                  if (__str.__r_.__value_.__r.__words[0])
                    goto LABEL_198;
                }
                else
                {
                  if (!(_DWORD)v22)
                  {
                    if (v373)
                    {
                      if (v24 < 0x20)
                      {
                        v352 = 0;
                      }
                      else
                      {
                        v370 = (int8x8_t)(v23 >> (v24 - 32));
                        v352 = 32;
                      }
                      v371 = v352;
                      llvm::BitstreamCursor::popBlockScope((llvm::BitstreamCursor *)&v367);
                      *(_BYTE *)(a2 + 24) &= ~1u;
                      *(std::string *)a2 = v360;
                      memset(&v360, 0, sizeof(v360));
                      goto LABEL_199;
                    }
LABEL_195:
                    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
                    LOWORD(v382) = 259;
                    if ((v353 & 1) == 0
                    {
                    }
                    v354 = operator new(0x38uLL);
                    v355 = llvm::StringError::StringError((uint64_t)v354, (llvm::Twine *)&__str, 1, (uint64_t)&llvm::BitcodeErrorCategory(void)::ErrorCategory);
                    *(_BYTE *)(a2 + 24) |= 1u;
                    *(_QWORD *)a2 = v355;
                    goto LABEL_199;
                  }
                  llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)&v367, ((v22 << 32) | 3) >> 32, (uint64_t)&v377, 0, (uint64_t)&v387);
                  if ((v388 & 1) != 0)
                  {
                    v356 = v387;
                    *(_BYTE *)(a2 + 24) |= 1u;
                    *(_QWORD *)a2 = v356;
                    goto LABEL_199;
                  }
                  if ((_DWORD)v387 != 2)
                  {
                    LODWORD(v378) = 0;
                    continue;
                  }
                  memset(&__str, 0, sizeof(__str));
                  std::string::append[abi:nn180100]<unsigned long long const*,0>(&__str, (unint64_t)v377, (uint64_t *)v377 + v378);
                  std::string::operator=(&v360, &__str);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__str.__r_.__value_.__l.__data_);
                    LODWORD(v378) = 0;
                    if ((v388 & 1) == 0)
                      continue;
                  }
                  else
                  {
                    LODWORD(v378) = 0;
                    if ((v388 & 1) == 0)
                      continue;
                  }
                  v144 = v387;
                  v387 = 0;
                  if (v144)
                    (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
                }
              }
            }
          }
          llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v367, (uint64_t *)&v377);
          v9 = v377;
          if (v377)
            goto LABEL_9;
LABEL_186:
          v7 = 2;
          break;
        case 3u:
          llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v367, v375[1], (uint64_t)&v377);
          if ((v378 & 1) == 0)
            goto LABEL_186;
          v9 = v377;
          goto LABEL_9;
        default:
          v7 = 0;
          break;
      }
    }
    if ((v376 & 1) != 0)
    {
      v10 = *(void **)v375;
      *(_QWORD *)v375 = 0;
      if (v10)
        (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  while (v7 != 1);
  if ((v374 & 1) == 0)
  {
    llvm::BitstreamCursor::~BitstreamCursor((llvm::BitstreamCursor *)&v367);
    return;
  }
LABEL_211:
  v358 = v367;
  v367 = 0;
  if (v358)
    (*(void (**)(char *))(*(_QWORD *)v358 + 8))(v358);
}

void `anonymous namespace'::BitcodeErrorCategoryType::~BitcodeErrorCategoryType(std::error_category *this)
{
  void *v1;

  std::error_category::~error_category(this);
  operator delete(v1);
}

const char *`anonymous namespace'::BitcodeErrorCategoryType::name(_anonymous_namespace_::BitcodeErrorCategoryType *this)
{
  return "llvm.bitcode";
}

void `anonymous namespace'::BitcodeErrorCategoryType::message(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "Corrupted bitcode");
}

std::string *std::string::append[abi:nn180100]<unsigned long long const*,0>(std::string *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  unint64_t v12;
  char *p_p;
  char *v14;
  unint64_t v15;
  uint64_t *v16;
  char *v17;
  std::string *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  int8x16x4_t *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  unint64_t v35;
  uint64_t v36;
  int8x16x4_t *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  std::string::size_type v43;
  void *__p;
  std::string::size_type v46;
  int64_t v47;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (uint64_t)a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == (uint64_t *)a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v12 = this->__r_.__value_.__r.__words[2];
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v12);
    v11 = v7 >> 3;
    if (this->__r_.__value_.__r.__words[0] > a2)
      goto LABEL_13;
  }
  else
  {
    if (a3 == (uint64_t *)a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
    v11 = v7 >> 3;
    if ((unint64_t)this > a2)
    {
LABEL_13:
      if (v9 - size < v11)
      {
        std::string::__grow_by(this, v9, size - v9 + v11, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        v18 = this;
        if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_15:
          v19 = (char *)v18 + size;
          v20 = (char *)a3 - a2;
          if (a3 == (uint64_t *)a2)
            goto LABEL_44;
          goto LABEL_19;
        }
      }
      else
      {
        v18 = this;
        if ((v6 & 0x80) == 0)
          goto LABEL_15;
      }
      v18 = (std::string *)this->__r_.__value_.__r.__words[0];
      v19 = (_BYTE *)(this->__r_.__value_.__r.__words[0] + size);
      v20 = (char *)a3 - a2;
      if (a3 == (uint64_t *)a2)
        goto LABEL_44;
LABEL_19:
      v21 = v20 - 8;
      if ((unint64_t)(v20 - 8) >= 0xF8)
      {
        v25 = (unint64_t)v21 >> 3;
        if ((unint64_t)v19 >= ((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8) + a2 + 8
          || (unint64_t)v18->__r_.__value_.__r.__words + size + v25 + 1 <= a2)
        {
          v35 = v25 + 1;
          v36 = (v25 + 1) & 0x3FFFFFFFFFFFFFE0;
          v19 += v36;
          v22 = (uint64_t *)(a2 + 8 * v36);
          v37 = (int8x16x4_t *)(a2 + 128);
          v38 = (_OWORD *)((char *)&v18->__r_.__value_.__r.__words[2] + size);
          v39 = v36;
          do
          {
            *(_QWORD *)&v40 = vqtbl4q_s8(v37[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
            *(_QWORD *)&v41 = vqtbl4q_s8(*v37, (int8x16_t)xmmword_18125CFF0).u64[0];
            *((_QWORD *)&v40 + 1) = vqtbl4q_s8(v37[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
            *((_QWORD *)&v41 + 1) = vqtbl4q_s8(v37[1], (int8x16_t)xmmword_18125CFF0).u64[0];
            *(v38 - 1) = v40;
            *v38 = v41;
            v37 += 4;
            v38 += 2;
            v39 -= 32;
          }
          while (v39);
          if (v35 == v36)
            goto LABEL_44;
        }
        else
        {
          v22 = (uint64_t *)a2;
        }
      }
      else
      {
        v22 = (uint64_t *)a2;
      }
      do
      {
        v42 = *v22++;
        *v19++ = v42;
      }
      while (v22 != a3);
LABEL_44:
      *v19 = 0;
      v43 = v11 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v43;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v43 & 0x7F;
      return this;
    }
  }
  if ((unint64_t)v10->__r_.__value_.__r.__words + size + 1 <= a2)
    goto LABEL_13;
  if (v7 < 0)
    abort();
  if ((unint64_t)v7 <= 0xB7)
  {
    HIBYTE(v47) = (unint64_t)v7 >> 3;
    p_p = (char *)&__p;
    v14 = (char *)a3 - a2;
    if (a3 != (uint64_t *)a2)
      goto LABEL_11;
LABEL_24:
    v17 = p_p;
    goto LABEL_32;
  }
  v23 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v11 | 7) != 0x17)
    v23 = v11 | 7;
  v24 = v23 + 1;
  p_p = (char *)operator new(v23 + 1);
  v46 = v11;
  v47 = v24 | 0x8000000000000000;
  __p = p_p;
  v14 = (char *)a3 - a2;
  if (a3 == (uint64_t *)a2)
    goto LABEL_24;
LABEL_11:
  v15 = (unint64_t)(v14 - 8);
  if (v15 < 0xF8)
  {
    v16 = (uint64_t *)a2;
    v17 = p_p;
    do
    {
LABEL_31:
      v32 = *v16++;
      *v17++ = v32;
    }
    while (v16 != a3);
    goto LABEL_32;
  }
  v26 = (v15 >> 3) + 1;
  v16 = (uint64_t *)(a2 + 8 * (v26 & 0x3FFFFFFFFFFFFFE0));
  v17 = &p_p[v26 & 0x3FFFFFFFFFFFFFE0];
  v27 = p_p + 16;
  v28 = (int8x16x4_t *)(a2 + 128);
  v29 = v26 & 0x3FFFFFFFFFFFFFE0;
  do
  {
    *(_QWORD *)&v30 = vqtbl4q_s8(v28[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
    *(_QWORD *)&v31 = vqtbl4q_s8(*v28, (int8x16_t)xmmword_18125CFF0).u64[0];
    *((_QWORD *)&v30 + 1) = vqtbl4q_s8(v28[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
    *((_QWORD *)&v31 + 1) = vqtbl4q_s8(v28[1], (int8x16_t)xmmword_18125CFF0).u64[0];
    *(v27 - 1) = v30;
    *v27 = v31;
    v27 += 2;
    v28 += 4;
    v29 -= 32;
  }
  while (v29);
  if (v26 != (v26 & 0x3FFFFFFFFFFFFFE0))
    goto LABEL_31;
LABEL_32:
  *v17 = 0;
  if (v47 >= 0)
    v33 = (const std::string::value_type *)&__p;
  else
    v33 = (const std::string::value_type *)__p;
  if (v47 >= 0)
    v34 = HIBYTE(v47);
  else
    v34 = v46;
  std::string::append(this, v33, v34);
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  return this;
}

void `anonymous namespace'::BitcodeReader::~BitcodeReader(_anonymous_namespace_::BitcodeReader *this)
{
  void *v2;
  _anonymous_namespace_::BitcodeReader *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)this = off_1E0E155F0;
  v2 = (void *)*((_QWORD *)this + 234);
  if (v2)
  {
    *((_QWORD *)this + 235) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 1864))
  {
    v3 = (_anonymous_namespace_::BitcodeReader *)*((_QWORD *)this + 232);
    if (v3 == (_anonymous_namespace_::BitcodeReader *)((char *)this + 1832))
    {
      v4 = 4;
      v3 = (_anonymous_namespace_::BitcodeReader *)((char *)this + 1832);
    }
    else
    {
      if (!v3)
        goto LABEL_9;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
LABEL_9:
  v5 = (char *)*((_QWORD *)this + 225);
  if (v5 != (char *)this + 1824)
    free(v5);
  v6 = *((_QWORD *)this + 222);
  if (v6)
  {
    v7 = *((_QWORD *)this + 223);
    v8 = (void *)*((_QWORD *)this + 222);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 222);
    }
    *((_QWORD *)this + 223) = v6;
    operator delete(v8);
  }
  llvm::deallocate_buffer(*((llvm **)this + 219), (void *)(16 * *((unsigned int *)this + 442)));
}

{
}

void `anonymous namespace'::BitcodeReader::materialize(_anonymous_namespace_::BitcodeReader *this@<X0>, llvm::GlobalValue *a2@<X1>, _anonymous_namespace_::BitcodeReader *a3@<X8>)
{
  llvm::GlobalValue *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::GlobalValue *v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  llvm::Function *v20;
  llvm::Function *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::CallBase **v24;
  llvm::DISubprogram *v25;
  llvm::Function *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL4 v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 **v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  const llvm::MDNode *MetadataImpl;
  _QWORD *v47;
  BOOL v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  mlir::BytecodeWriterConfig *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  llvm::MDString **v60;
  llvm::MDString *v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t *DesiredBytecodeVersion;
  uint64_t v67;
  int v68;
  unint64_t v69;
  mlir::BytecodeWriterConfig *v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  _QWORD *String;
  BOOL v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  llvm::GlobalValue *v82;
  uint64_t v83;
  llvm *v84;
  llvm::GlobalValue *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  const char *v89;
  __int16 v90;
  uint64_t v91;
  char v92;
  void *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v4 = a2, *((_BYTE *)a2 + 16)) || (*((_BYTE *)a2 + 35) & 1) == 0)
  {
    *(_QWORD *)a3 = 0;
    return;
  }
  v6 = *((_QWORD *)this + 196);
  v7 = *((unsigned int *)this + 396);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = v6 + 16 * v8;
    v10 = *(llvm::GlobalValue **)v9;
    if (*(llvm::GlobalValue **)v9 == a2)
      goto LABEL_13;
    v11 = 1;
    while (v10 != (llvm::GlobalValue *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(llvm::GlobalValue **)(v6 + 16 * v8);
      if (v10 == a2)
      {
        v9 = v6 + 16 * v8;
        goto LABEL_13;
      }
    }
  }
  v9 = v6 + 16 * v7;
LABEL_13:
  if (*(_QWORD *)(v9 + 8))
    goto LABEL_46;
  while (!*(_QWORD *)(v9 + 8))
  {
    v13 = *((_QWORD *)this + 55);
    v14 = (v13 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *((_QWORD *)this + 6) = v14;
    *((_DWORD *)this + 16) = 0;
    if ((v13 & 0x3F) != 0)
    {
      llvm::SimpleBitstreamCursor::Read((_anonymous_namespace_::BitcodeReader *)((char *)this + 32), v13 & 0x3F, (uint64_t)&v93);
      if ((v94 & 1) != 0)
      {
        v15 = v93;
        *(_QWORD *)a3 = v93;
        if (v15)
          return;
      }
      else
      {
        *(_QWORD *)a3 = 0;
      }
      if (!*((_DWORD *)this + 16) && *((_QWORD *)this + 5) <= *((_QWORD *)this + 6))
      {
LABEL_15:
        v93 = "Could not find function in stream";
        goto LABEL_16;
      }
    }
    else
    {
      *(_QWORD *)a3 = 0;
      if (*((_QWORD *)this + 5) <= v14)
        goto LABEL_15;
    }
    if (*((_BYTE *)this + 1560))
    {
      v93 = &v95;
      v94 = 0x4000000000;
      llvm::BitstreamCursor::advance((_anonymous_namespace_::BitcodeReader *)((char *)this + 32), 0, (uint64_t)&v91);
      if ((v92 & 1) == 0)
      {
        if ((_DWORD)v91 == 2)
        {
          if (HIDWORD(v91) == 12)
          {
            if (!*(_QWORD *)a3)
            {
              *((_QWORD *)this + 55) = 8 * *((_QWORD *)this + 6) - *((unsigned int *)this + 16);
              *(_QWORD *)a3 = 0;
              if ((v92 & 1) == 0)
                goto LABEL_43;
              goto LABEL_41;
            }
LABEL_36:
            if ((v92 & 1) == 0)
            {
LABEL_43:
              if (v93 != &v95)
                free(v93);
              goto LABEL_17;
            }
LABEL_41:
            v18 = v91;
            v91 = 0;
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            goto LABEL_43;
          }
          v17 = "Expect function block";
        }
        else
        {
          v17 = "Expect SubBlock";
        }
        v89 = v17;
        v90 = 259;
        if ((v92 & 1) == 0)
          goto LABEL_43;
        goto LABEL_41;
      }
      v16 = v91;
      v91 = 0;
      *(_QWORD *)a3 = v16;
      goto LABEL_36;
    }
    v93 = "Trying to materialize functions before seeing function blocks";
LABEL_16:
    LOWORD(v97) = 259;
LABEL_17:
    if (*(_QWORD *)a3)
      return;
  }
  *(_QWORD *)a3 = 0;
LABEL_46:
  (*(void (**)(_anonymous_namespace_::BitcodeReader *))(*(_QWORD *)this + 32))(this);
  if (!*(_QWORD *)a3)
  {
    v19 = *(_QWORD *)(v9 + 8);
    *((_QWORD *)this + 6) = (v19 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *((_DWORD *)this + 16) = 0;
    if ((v19 & 0x3F) == 0
      || (llvm::SimpleBitstreamCursor::Read((_anonymous_namespace_::BitcodeReader *)((char *)this + 32), v19 & 0x3F, (uint64_t)&v93), (v94 & 1) == 0))
    {
      *(_QWORD *)a3 = 0;
      goto LABEL_50;
    }
    v54 = v93;
    *(_QWORD *)a3 = v93;
    if (!v54)
    {
LABEL_50:
      if (!*(_QWORD *)a3)
      {
        *((_DWORD *)v4 + 8) &= ~0x1000000u;
        if (*((_BYTE *)this + 1714))
          llvm::stripDebugInfo((llvm **)v4, v20);
        if (*((_DWORD *)this + 386))
        {
          v22 = *((unsigned int *)this + 388);
          if ((_DWORD)v22)
          {
            v23 = 16 * v22;
            v24 = (llvm::CallBase **)*((_QWORD *)this + 192);
            while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v24 += 2;
              v23 -= 16;
              if (!v23)
                goto LABEL_58;
            }
          }
          else
          {
            v24 = (llvm::CallBase **)*((_QWORD *)this + 192);
          }
          v81 = *((_QWORD *)this + 192) + 16 * v22;
          while (v24 != (llvm::CallBase **)v81)
          {
            v82 = v4;
            v83 = *((_QWORD *)*v24 + 1);
            while (v83)
            {
              v84 = *(llvm **)(v83 + 24);
              v83 = *(_QWORD *)(v83 + 8);
              if (v84 && *((_BYTE *)v84 + 16) == 84)
                llvm::UpgradeIntrinsicCall(v84, v24[1], v21);
            }
            v24 += 2;
            v4 = v82;
            if (v24 == (llvm::CallBase **)v81)
              break;
            while (((unint64_t)*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v24 += 2;
              if (v24 == (llvm::CallBase **)v81)
                goto LABEL_58;
            }
          }
        }
LABEL_58:
        v25 = (llvm::DISubprogram *)llvm::MetadataLoader::lookupSubprogramForFunction((_anonymous_namespace_::BitcodeReader *)((char *)this + 776), v4);
        if (v25)
          llvm::Function::setSubprogram(v4, v25);
        if ((llvm::MetadataLoader::isStrippingTBAA((_anonymous_namespace_::BitcodeReader *)((char *)this + 776)) & 1) == 0)
        {
          v85 = v4;
          llvm::instructions((uint64_t)v4, &v93);
          v27 = v93;
          v28 = (_QWORD *)v94;
          v29 = v95;
          v86 = v98;
          v31 = v97 != v93 && v95 != v98;
          v87 = v97;
          if ((_QWORD *)v94 != v97 || v31)
          {
            do
            {
              if (v29)
                v45 = (llvm::Value *)(v29 - 3);
              else
                v45 = 0;
              if ((*((_BYTE *)v45 + 23) & 0x20) != 0)
              {
                MetadataImpl = (const llvm::MDNode *)llvm::Value::getMetadataImpl(v45, 1);
                if (MetadataImpl)
                {
                  if ((llvm::TBAAVerifier::visitTBAAMetadata((llvm::raw_ostream **)this + 215, v45, MetadataImpl) & 1) == 0)
                  {
                    llvm::MetadataLoader::setStripTBAA((uint64_t)this + 776, 1);
                    v34 = *((_QWORD *)v85 + 5);
                    v35 = v34 + 24;
                    for (i = *(_QWORD *)(v34 + 32); i != v35; i = *(_QWORD *)(i + 8))
                    {
                      v37 = i - 56;
                      if (!i)
                        v37 = 0;
                      if ((*(_BYTE *)(v37 + 35) & 1) == 0)
                      {
                        v38 = v37 + 72;
                        v39 = *(_QWORD *)(v37 + 80);
                        if (v39 != v37 + 72)
                        {
                          while (1)
                          {
                            v40 = v39 - 24;
                            if (!v39)
                              v40 = 0;
                            v41 = *(_QWORD *)(v40 + 56);
                            if (v41 != v40 + 48)
                              break;
                            v39 = *(_QWORD *)(v39 + 8);
                            if (v39 == v38)
                              goto LABEL_78;
                          }
LABEL_99:
                          while (v39 != v38)
                          {
                            if (v41)
                              v42 = (unsigned __int8 **)(v41 - 24);
                            else
                              v42 = 0;
                            llvm::Instruction::setMetadata(v42, 1, 0);
                            v41 = *(_QWORD *)(v41 + 8);
                            v43 = v39 - 24;
                            if (!v39)
                              v43 = 0;
                            if (v41 == v43 + 48)
                            {
                              while (1)
                              {
                                v39 = *(_QWORD *)(v39 + 8);
                                if (v39 == v38)
                                  goto LABEL_78;
                                v44 = v39 - 24;
                                if (!v39)
                                  v44 = 0;
                                v41 = *(_QWORD *)(v44 + 56);
                                if (v41 != v44 + 48)
                                  goto LABEL_99;
                              }
                            }
                          }
                        }
                      }
LABEL_78:
                      ;
                    }
                  }
                }
              }
              v29 = (_QWORD *)v29[1];
              v47 = v28 - 3;
              if (!v28)
                v47 = 0;
              if (v29 == v47 + 6)
              {
                v32 = (_QWORD *)v28[1];
                v28 = v27;
                if (v32 != v27)
                {
                  v28 = v32;
                  while (1)
                  {
                    v33 = v28 - 3;
                    if (!v28)
                      v33 = 0;
                    v29 = (_QWORD *)v33[7];
                    if (v29 != v33 + 6)
                      break;
                    v28 = (_QWORD *)v28[1];
                    if (v28 == v27)
                    {
                      v28 = v27;
                      break;
                    }
                  }
                }
              }
              v49 = v87 != v27 && v29 != v86;
            }
            while (v28 != v87 || v49);
          }
          v4 = v85;
        }
        v50 = (char *)v4 + 72;
        v51 = (char *)*((_QWORD *)v4 + 10);
        if (v51 == (char *)v4 + 72)
          goto LABEL_184;
        while (1)
        {
          v52 = v51 - 24;
          if (!v51)
            v52 = 0;
          v53 = (char *)*((_QWORD *)v52 + 7);
          if (v53 != v52 + 48)
            break;
          v51 = (char *)*((_QWORD *)v51 + 1);
          if (v51 == v50)
            goto LABEL_184;
        }
        if (v51 == v50)
        {
LABEL_184:
          llvm::UpgradeFunctionAttributes(v4, v26);
          return;
        }
        v88 = (char *)v4 + 72;
        while (2)
        {
          if (v53)
            v55 = (mlir::BytecodeWriterConfig *)(v53 - 24);
          else
            v55 = 0;
          if ((*((_BYTE *)v55 + 23) & 0x20) == 0
            || (v56 = llvm::Value::getMetadataImpl(v55, 2)) == 0
            || ((v57 = v56, v59 = (_QWORD *)(v56 - 16), v58 = *(_QWORD *)(v56 - 16), (v58 & 2) != 0)
              ? (v60 = *(llvm::MDString ***)(v56 - 32))
              : (v60 = (llvm::MDString **)&v59[-((v58 >> 2) & 0xF)]),
                (v61 = *v60) == 0 || *(_BYTE *)v61))
          {
LABEL_139:
            v62 = *((unsigned __int8 *)v55 + 16) - 33;
            v63 = v62 > 0x33;
            v64 = (1 << v62) & 0x8000000000041;
            if (!v63 && v64 != 0)
            {
              llvm::AttributeFuncs::typeIncompatible(**(_QWORD **)(*((_QWORD *)v55 + 10) + 16), 3, (uint64_t *)&v93);
              DesiredBytecodeVersion = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v55);
              *((_QWORD *)v55 + 9) = llvm::AttributeList::removeAttributesAtIndex((_QWORD *)v55 + 9, DesiredBytecodeVersion, 0, (uint64_t)&v93);
              std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v95, v96);
              v67 = llvm::CallBase::arg_end(v55);
              v68 = *((_DWORD *)v55 + 5);
              if (((v67 - ((_QWORD)v55 - 32 * (v68 & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0)
              {
                v69 = 0;
                v70 = v55;
                do
                {
                  llvm::AttributeFuncs::typeIncompatible(**((_QWORD **)v70 - 4 * (v68 & 0x7FFFFFF)), 3, (uint64_t *)&v93);
                  v71 = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v55);
                  *((_QWORD *)v55 + 9) = llvm::AttributeList::removeAttributesAtIndex((_QWORD *)v55 + 9, v71, ++v69, (uint64_t)&v93);
                  std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v95, v96);
                  v72 = llvm::CallBase::arg_end(v55);
                  v68 = *((_DWORD *)v55 + 5);
                  v70 = (mlir::BytecodeWriterConfig *)((char *)v70 + 32);
                }
                while (v69 < ((unint64_t)(v72 - ((_QWORD)v55 - 32 * (v68 & 0x7FFFFFF))) >> 5));
              }
            }
            goto LABEL_146;
          }
          String = (_QWORD *)llvm::MDString::getString(v61);
          if (v26 != (llvm::Function *)14
            || (*String == 0x775F68636E617262
              ? (v77 = *(_QWORD *)((char *)String + 6) == 0x737468676965775FLL)
              : (v77 = 0),
                !v77))
          {
LABEL_146:
            v53 = (char *)*((_QWORD *)v53 + 1);
            v73 = v51 - 24;
            if (!v51)
              v73 = 0;
            if (v53 == v73 + 48)
            {
              v51 = (char *)*((_QWORD *)v51 + 1);
              v74 = (char *)v4 + 72;
              if (v51 == v88)
                goto LABEL_184;
              while (1)
              {
                v75 = v51 - 24;
                if (!v51)
                  v75 = 0;
                v53 = (char *)*((_QWORD *)v75 + 7);
                if (v53 != v75 + 48)
                  break;
                v51 = (char *)*((_QWORD *)v51 + 1);
                if (v51 == v88)
                  goto LABEL_184;
              }
            }
            else
            {
              v74 = (char *)v4 + 72;
            }
            if (v51 == v74)
              goto LABEL_184;
            continue;
          }
          break;
        }
        v78 = *((unsigned __int8 *)v55 + 16);
        if (v53 && v78 == 30)
        {
          if ((*((_DWORD *)v55 + 5) & 0x7FFFFFF) == 3)
            v79 = 2;
          else
            v79 = 1;
        }
        else if (v53 && v78 == 31)
        {
          v79 = (*((_DWORD *)v55 + 5) >> 1) & 0x3FFFFFF;
        }
        else if (v78 == 84)
        {
          v79 = 1;
        }
        else if (v53 && v78 == 32)
        {
          v79 = (*((_DWORD *)v55 + 5) & 0x7FFFFFF) - 1;
        }
        else
        {
          if (v78 != 85)
            goto LABEL_146;
          v79 = 2;
        }
        if ((*v59 & 2) != 0)
          v80 = *(_DWORD *)(v57 - 24);
        else
          v80 = (*v59 >> 6) & 0xF;
        if (v80 != v79 + 1)
          llvm::Instruction::setMetadata((unsigned __int8 **)v55, 2, 0);
        goto LABEL_139;
      }
    }
  }
}

void `anonymous namespace'::BitcodeReader::materializeModule(_anonymous_namespace_::BitcodeReader *this@<X0>, uint64_t *a2@<X8>)
{
  llvm::Module *v4;
  llvm::Function *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  llvm::CallBase **v22;
  uint64_t v23;
  Value *v24;
  uint64_t v25;
  llvm *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  llvm::Module *v37;
  llvm::Module *v38;
  const char *v39;
  __int16 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 32))(a2);
  if (*a2)
    return;
  *((_BYTE *)this + 1713) = 1;
  v6 = *((_QWORD *)this + 54);
  v7 = v6 + 24;
  v8 = *(_QWORD *)(v6 + 32);
  if (v8 == v6 + 24)
  {
LABEL_9:
    v11 = *((_QWORD *)this + 55);
    v10 = *((_QWORD *)this + 56);
    if (*(_OWORD *)((char *)this + 440) == 0)
      goto LABEL_32;
    v47 = 0;
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    v42 = 0u;
    memset(v43, 0, sizeof(v43));
    v41 = 0u;
    if ((_BYTE)v47)
    {
      v13 = (__int128 *)*((_QWORD *)&v46 + 1);
      if (*((__int128 **)&v46 + 1) == &v45)
      {
        v14 = 4;
        v13 = &v45;
      }
      else
      {
        if (!*((_QWORD *)&v46 + 1))
          goto LABEL_19;
        v14 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
    }
LABEL_19:
    if (!BYTE8(v44))
      goto LABEL_25;
    v15 = (_QWORD *)v44;
    if ((_OWORD *)v44 == (_OWORD *)((char *)v43 + 8))
    {
      v16 = 4;
      v15 = (_QWORD *)v43 + 1;
    }
    else
    {
      if (!(_QWORD)v44)
        goto LABEL_25;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_25:
    if (!LOBYTE(v43[0]))
      goto LABEL_31;
    v17 = (__int128 *)*((_QWORD *)&v42 + 1);
    if (*((__int128 **)&v42 + 1) == &v41)
    {
      v18 = 4;
      v17 = &v41;
    }
    else
    {
      if (!*((_QWORD *)&v42 + 1))
        goto LABEL_31;
      v18 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_31:
    if (*a2)
      return;
LABEL_32:
    if (*((_DWORD *)this + 406))
    {
      v39 = "Never resolved function from blockaddress";
      v40 = 259;
      return;
    }
    v19 = *((_DWORD *)this + 386);
    if (!v19)
      goto LABEL_56;
    v20 = *((unsigned int *)this + 388);
    if ((_DWORD)v20)
    {
      v21 = 16 * v20;
      v22 = (llvm::CallBase **)*((_QWORD *)this + 192);
      while (((unint64_t)*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v22 += 2;
        v21 -= 16;
        if (!v21)
          goto LABEL_55;
      }
    }
    else
    {
      v22 = (llvm::CallBase **)*((_QWORD *)this + 192);
    }
    v23 = *((_QWORD *)this + 192) + 16 * v20;
    if (v22 != (llvm::CallBase **)v23)
    {
LABEL_42:
      v24 = (Value *)*v22;
      v25 = *((_QWORD *)*v22 + 1);
      if (v25)
      {
        do
        {
          v26 = *(llvm **)(v25 + 24);
          if (v26 && *((_BYTE *)v26 + 16) == 84)
            llvm::UpgradeIntrinsicCall(v26, v22[1], v5);
          v25 = *(_QWORD *)(v25 + 8);
        }
        while (v25);
        v24 = (Value *)*v22;
        if (*((_QWORD *)*v22 + 1))
        {
          llvm::Value::replaceAllUsesWith(v24, v22[1]);
          v24 = (Value *)*v22;
        }
      }
      llvm::Function::eraseFromParent((llvm::Function *)v24);
      while (1)
      {
        v22 += 2;
        if (v22 == (llvm::CallBase **)v23)
          break;
        if (((unint64_t)*v22 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v22 != (llvm::CallBase **)v23)
            goto LABEL_42;
          break;
        }
      }
      v19 = *((_DWORD *)this + 386);
    }
LABEL_55:
    if (!v19)
    {
LABEL_56:
      if (!*((_DWORD *)this + 387))
      {
LABEL_71:
        llvm::UpgradeDebugInfo(*((llvm **)this + 54), v4);
        llvm::UpgradeModuleFlags(*((llvm **)this + 54), v37);
        llvm::UpgradeARCRuntime(*((llvm **)this + 54), v38);
        *a2 = 0;
        return;
      }
      v19 = 0;
    }
    v27 = (_QWORD *)((char *)this + 1536);
    v28 = *((unsigned int *)this + 388);
    if (v28 > 4 * v19 && v28 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)v27);
      goto LABEL_71;
    }
    if ((_DWORD)v28)
    {
      v29 = (_QWORD *)*v27;
      v30 = (v28 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v30)
      {
        v31 = v30 + 1;
        v32 = (v30 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v33 = &v29[2 * v32];
        v34 = v29 + 2;
        v35 = v32;
        do
        {
          *(v34 - 2) = -4096;
          *v34 = -4096;
          v34 += 4;
          v35 -= 2;
        }
        while (v35);
        if (v31 == v32)
          goto LABEL_70;
      }
      else
      {
        v33 = (_QWORD *)*v27;
      }
      v36 = &v29[2 * v28];
      do
      {
        *v33 = -4096;
        v33 += 2;
      }
      while (v33 != v36);
    }
LABEL_70:
    *((_QWORD *)this + 193) = 0;
    goto LABEL_71;
  }
  while (1)
  {
    v9 = v8 ? v8 - 56 : 0;
    (*(void (**)(_anonymous_namespace_::BitcodeReader *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
    if (*a2)
      break;
    v8 = *(_QWORD *)(v8 + 8);
    if (v8 == v7)
      goto LABEL_9;
  }
}

void `anonymous namespace'::BitcodeReader::materializeMetadata(_anonymous_namespace_::BitcodeReader *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  const char *v7;
  llvm::Module *v8;
  uint64_t ModuleFlag;
  uint64_t v10;
  llvm::NamedMDNode *inserted;
  unint64_t v12;
  llvm::MDNode **v13;
  uint64_t v14;
  uint64_t v15;
  llvm::MDNode *v16;
  const char *v17;
  char v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)*((_QWORD *)this + 199);
  v5 = (uint64_t *)*((_QWORD *)this + 200);
  if (v4 == v5)
  {
LABEL_8:
    v8 = (llvm::Module *)*((_QWORD *)this + 54);
    v17 = "llvm.linker.options";
    v19 = 259;
    if (llvm::Module::getNamedMetadata(v8, &v17))
      goto LABEL_9;
    ModuleFlag = llvm::Module::getModuleFlag(*((llvm::Module **)this + 54), "Linker Options", 0xEuLL);
    if (!ModuleFlag)
      goto LABEL_9;
    v10 = ModuleFlag;
    inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata(*((_QWORD *)this + 54), (int8x16_t *)"llvm.linker.options", (const unsigned __int8 *)0x13);
    v12 = *(_QWORD *)(v10 - 16);
    if ((v12 & 2) != 0)
    {
      v13 = *(llvm::MDNode ***)(v10 - 32);
      v14 = *(unsigned int *)(v10 - 24);
      if (!*(_DWORD *)(v10 - 24))
      {
LABEL_9:
        *((_QWORD *)this + 200) = *((_QWORD *)this + 199);
        *a2 = 0;
        return;
      }
    }
    else
    {
      v13 = (llvm::MDNode **)(v10 - 16 - 8 * ((v12 >> 2) & 0xF));
      v14 = (v12 >> 6) & 0xF;
      if (!v14)
        goto LABEL_9;
    }
    v15 = 8 * v14;
    do
    {
      v16 = *v13++;
      llvm::NamedMDNode::addOperand(inserted, v16);
      v15 -= 8;
    }
    while (v15);
    goto LABEL_9;
  }
  while (1)
  {
    v6 = *v4;
    *((_QWORD *)this + 6) = ((unint64_t)*v4 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *((_DWORD *)this + 16) = 0;
    if ((v6 & 0x3F) != 0
      && (llvm::SimpleBitstreamCursor::Read((_anonymous_namespace_::BitcodeReader *)((char *)this + 32), v6 & 0x3F, (uint64_t)&v17), (v18 & 1) != 0))
    {
      v7 = v17;
      *a2 = (uint64_t)v17;
      if (v7)
        return;
    }
    else
    {
      *a2 = 0;
    }
    llvm::MetadataLoader::parseMetadata((llvm::BitstreamCursor ***)this + 97, 1, a2);
    if (*a2)
      break;
    if (++v4 == v5)
      goto LABEL_8;
  }
}

uint64_t `anonymous namespace'::BitcodeReader::setStripDebugInfo(uint64_t this)
{
  *(_BYTE *)(this + 1714) = 1;
  return this;
}

_QWORD *`anonymous namespace'::BitcodeReader::getIdentifiedStructTypes@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (_BYTE *)this[234];
  v4 = (_BYTE *)this[235];
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v4 - v3);
    *a2 = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a2[2] = v7;
    this = memcpy(v6, v3, v5);
    a2[1] = v7;
  }
  return this;
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50510;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50510;
  a2[1] = v2;
  return result;
}

void std::__function::__func<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::operator()(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t ****a3@<X2>, llvm::BasicBlock *a4@<X4>, llvm::BasicBlock *a5@<X5>, _anonymous_namespace_::BitcodeReader *a6@<X8>)
{
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_113BitcodeReaderC1EN4llvm15BitstreamCursorENS1_9StringRefES3_RNS1_11LLVMContextEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_113BitcodeReaderC1EN4llvm15BitstreamCursorENS1_9StringRefES3_RNS1_11LLVMContextEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_113BitcodeReaderC1EN4llvm15BitstreamCursorENS1_9StringRefES3_RNS1_11LLVMContextEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_113BitcodeReaderC1EN4llvm15BitstreamCursorENS1_9StringRefES3_RNS1_11LLVMContextEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::target_type()
{
}

void `anonymous namespace'::BitcodeReader::materializeValue(_anonymous_namespace_::BitcodeReader *this, _QWORD *a2, llvm::BasicBlock *a3, uint64_t ***a4, llvm::BasicBlock *a5, llvm::BasicBlock *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  llvm **v9;
  unsigned int v10;
  int v11;
  llvm **v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  llvm::PoisonValue **v20;
  int v21;
  llvm **v22;
  uint64_t v23;
  llvm::PoisonValue **v24;
  uint64_t v25;
  int v26;
  int v27;
  llvm **v28;
  int v29;
  uint64_t v30;
  llvm **v31;
  int v32;
  int v33;
  llvm **v34;
  llvm *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  llvm **v42;
  int v43;
  llvm **v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  BOOL v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  llvm::ConstantExpr *v59;
  llvm::ConstantExpr *v60;
  _QWORD *v61;
  _QWORD *ShuffleVector;
  uint64_t ElementPtr;
  int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  int v67;
  const char *OpcodeName;
  const char *v69;
  char v70;
  char v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  llvm **v75;
  int v76;
  unsigned int v77;
  llvm **v78;
  int v79;
  void *v80;
  unint64_t *v81;
  _QWORD *v82;
  int v84;
  llvm **v85;
  int v86;
  unsigned int v87;
  llvm **v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  llvm::MCSymbolXCOFF *v92;
  unsigned int v93;
  unsigned int v94;
  unint64_t v95;
  int v96;
  char v98;
  uint64_t v99;
  BOOL v100;
  llvm::BlockAddress **v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  llvm::Type **v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  llvm::Instruction *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  llvm::Instruction *v117;
  Value *v118;
  llvm::Type **v119;
  Value *v120;
  llvm::ExtractElementInst *v121;
  llvm::Value *v122;
  llvm::InsertElementInst *v123;
  llvm::Value *v124;
  llvm::Value *v125;
  llvm::Value *v126;
  llvm::Value *v127;
  llvm::Value *v128;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v130;
  llvm::ConstantInt *Int32Ty;
  llvm::Type *v132;
  uint64_t v133;
  llvm::Value *inserted;
  uint64_t v135;
  uint64_t v136;
  llvm::Value *v137;
  llvm::Value *v138;
  llvm **v139;
  int v140;
  BOOL v141;
  unsigned int v142;
  llvm **v143;
  int v144;
  BOOL v145;
  unsigned int v146;
  int v147;
  _anonymous_namespace_::BitcodeReader *v148;
  int v149;
  unsigned int v150;
  uint64_t v151;
  int v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  BOOL v157;
  unsigned int v158;
  _QWORD *v159;
  llvm::ConstantInt *v160;
  _QWORD *v161;
  llvm::Value *v162;
  const char *v163;
  llvm::Twine *v164;
  llvm::BlockAddress *__src[2];
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  void *v174[2];
  __int128 v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  _BYTE v179[48];
  void *v180;
  uint64_t v181;
  _BYTE v182[48];
  void *v183;
  uint64_t v184;
  _DWORD v185[12];
  uint64_t v186;
  llvm **v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  _QWORD v192[2];

  v6 = a2;
  v192[0] = *MEMORY[0x1E0C80C00];
  v173 = (int)a3;
  v7 = a2[89];
  if (((unint64_t)(a2[90] - v7) >> 5) > a3)
  {
    v8 = *(_QWORD *)(v7 + 32 * a3 + 16);
    if (v8)
    {
      if (*(unsigned __int8 *)(v8 + 16) != 255)
      {
        *((_BYTE *)this + 8) &= ~1u;
        *(_QWORD *)this = v8;
        return;
      }
    }
  }
  v9 = (llvm **)&v187;
  v186 = 1;
  LODWORD(v187) = -1;
  v189 = -1;
  v190 = -1;
  v191 = -1;
  v183 = v185;
  v185[0] = (_DWORD)a3;
  v164 = (llvm::Twine *)(a2 + 1);
  v184 = 0xC00000001;
  v10 = 1;
  do
  {
    while (1)
    {
      while (1)
      {
        v16 = *((unsigned int *)v183 + v10 - 1);
        if ((v186 & 1) != 0)
        {
          v11 = 4;
          v12 = (llvm **)&v187;
        }
        else
        {
          v11 = v188;
          if (!v188)
            goto LABEL_16;
          v12 = v187;
        }
        v13 = v11 - 1;
        v14 = v13 & (37 * v16);
        v15 = (int)v12[2 * v14];
        if ((_DWORD)v16 != v15)
          break;
LABEL_8:
        LODWORD(v184) = --v10;
        if (!v10)
          goto LABEL_231;
      }
      v17 = 1;
      while (v15 != -1)
      {
        v18 = v14 + v17++;
        v14 = v18 & v13;
        v15 = (int)v12[2 * v14];
        if ((_DWORD)v16 == v15)
          goto LABEL_8;
      }
LABEL_16:
      v19 = v6[89];
      if (v16 >= ((unint64_t)(v6[90] - v19) >> 5)
        || (v20 = *(llvm::PoisonValue ***)(v19 + 32 * v16 + 16)) == 0)
      {
        v174[0] = "Invalid value ID";
        LOWORD(v176) = 259;
        *((_BYTE *)this + 8) |= 1u;
        *(_QWORD *)this = v172;
        v153 = v183;
        if (v183 != v185)
          goto LABEL_238;
        goto LABEL_239;
      }
      if (*((unsigned __int8 *)v20 + 16) == 255)
        break;
      LODWORD(v174[0]) = *((_DWORD *)v183 + v10 - 1);
      v174[1] = v20;
      if ((v186 & 1) != 0)
      {
        v21 = 4;
        v22 = (llvm **)&v187;
      }
      else
      {
        v21 = v188;
        if (!v188)
        {
          v66 = 0;
          goto LABEL_86;
        }
        v22 = v187;
      }
      v40 = v21 - 1;
      v41 = v40 & (37 * v16);
      v42 = &v22[2 * v41];
      v43 = *(_DWORD *)v42;
      if ((_DWORD)v16 == *(_DWORD *)v42)
        goto LABEL_8;
      v44 = 0;
      v45 = 1;
      while (v43 != -1)
      {
        if (v44)
          v46 = 0;
        else
          v46 = v43 == -2;
        if (v46)
          v44 = v42;
        v47 = v41 + v45++;
        v41 = v47 & v40;
        v42 = &v22[2 * v41];
        v43 = *(_DWORD *)v42;
        if ((_DWORD)v16 == *(_DWORD *)v42)
          goto LABEL_8;
      }
      if (v44)
        v66 = (uint64_t)v44;
      else
        v66 = (uint64_t)v42;
LABEL_86:
      llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucket<unsigned int,llvm::Value *>((uint64_t)&v186, v66, v174, &v174[1]);
      v10 = v184 - 1;
      LODWORD(v184) = v10;
      if (!v10)
        goto LABEL_231;
    }
    v180 = v182;
    v181 = 0x600000000;
    v23 = *((unsigned int *)v20 + 7);
    if (!(_DWORD)v23)
    {
      v177 = v179;
      v178 = 0x600000000;
      goto LABEL_76;
    }
    v24 = v20 + 6;
    v25 = (uint64_t)v20 + 4 * v23 + 48;
    do
    {
      while (1)
      {
        v27 = *(_DWORD *)(v25 - 4);
        v25 -= 4;
        v26 = v27;
        if ((v186 & 1) != 0)
        {
          v29 = 4;
          v28 = (llvm **)&v187;
        }
        else
        {
          v28 = v187;
          v29 = v188;
          if (!v188)
          {
            v30 = 0;
LABEL_27:
            v31 = &v28[2 * v30];
            goto LABEL_30;
          }
        }
        v32 = v29 - 1;
        LODWORD(v30) = (v29 - 1) & (37 * v26);
        v31 = &v28[2 * v30];
        v33 = *(_DWORD *)v31;
        if (v26 != *(_DWORD *)v31)
        {
          v38 = 1;
          while (v33 != -1)
          {
            v39 = v30 + v38++;
            v30 = v39 & v32;
            v33 = (int)v28[2 * v30];
            if (v26 == v33)
              goto LABEL_27;
          }
          v31 = (llvm **)v192;
          if ((v186 & 1) == 0)
          {
            v28 = v187;
            v30 = v188;
            goto LABEL_27;
          }
        }
LABEL_30:
        v34 = (v186 & 1) != 0 ? (llvm **)v192 : &v187[2 * v188];
        if (v31 == v34)
          break;
        v35 = v31[1];
        v36 = v181;
        if (v181 >= (unint64_t)HIDWORD(v181))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v180, v182, v181 + 1, 8);
          v36 = v181;
        }
        *((_QWORD *)v180 + v36) = v35;
        LODWORD(v181) = v181 + 1;
        if ((llvm::PoisonValue **)v25 == v24)
          goto LABEL_59;
      }
      v37 = v184;
      if (v184 >= (unint64_t)HIDWORD(v184))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v183, v185, v184 + 1, 4);
        v37 = v184;
      }
      *((_DWORD *)v183 + v37) = v26;
      LODWORD(v184) = v184 + 1;
    }
    while ((llvm::PoisonValue **)v25 != v24);
LABEL_59:
    v48 = v181;
    v49 = *((_DWORD *)v20 + 7);
    v50 = (char *)v180;
    if ((_DWORD)v181 != v49)
    {
      v67 = 2;
      v6 = a2;
      if (v180 != v182)
        goto LABEL_131;
      goto LABEL_132;
    }
    if (v49)
    {
      v51 = (char *)v180 + 8 * v181 - 8;
      v6 = a2;
      if (v51 > v180)
      {
        v52 = (char *)v180 + 8;
        do
        {
          v53 = *((_QWORD *)v52 - 1);
          *((_QWORD *)v52 - 1) = *(_QWORD *)v51;
          *(_QWORD *)v51 = v53;
          v51 -= 8;
          v54 = v52 >= v51;
          v52 += 8;
        }
        while (!v54);
        v50 = (char *)v180;
      }
      v177 = v179;
      v178 = 0x600000000;
      v55 = 0;
      v56 = 8 * v48;
      do
      {
        v57 = *(_QWORD *)v50;
        if (*(_QWORD *)v50)
          v58 = *(unsigned __int8 *)(*(_QWORD *)v50 + 16) > 0x14u;
        else
          v58 = 1;
        if (!v58)
        {
          if (v55 >= HIDWORD(v178))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, v179, v55 + 1, 8);
            v55 = v178;
          }
          *((_QWORD *)v177 + v55) = v57;
          v55 = v178 + 1;
          LODWORD(v178) = v178 + 1;
        }
        v50 += 8;
        v56 -= 8;
      }
      while (v56);
    }
    else
    {
      v6 = a2;
      v177 = v179;
      v178 = 0x600000000;
    }
LABEL_76:
    v59 = (llvm::ConstantExpr *)*((unsigned __int8 *)v20 + 24);
    if (v59 <= 0xF9)
    {
      if (!byte_1ECD35440)
      {
        if (((_DWORD)v59 - 13) > 0x11)
        {
          if (((_DWORD)v59 - 38) > 0xC)
          {
            if ((_DWORD)v59 != 12 && (_DWORD)v59 != 57 && ((_DWORD)v59 != 34 || !llvm::Type::isScalableTy(v20[5])))
              goto LABEL_77;
          }
          else if (llvm::ConstantExpr::isDesirableCastOp(v59))
          {
            goto LABEL_77;
          }
        }
        else if ((llvm::ConstantExpr::isDesirableBinOp(v59) & 1) != 0)
        {
          goto LABEL_77;
        }
      }
LABEL_82:
      if (!a4)
      {
        __src[0] = (llvm::BlockAddress *)"Value referenced by initializer is an unsupported constant expression of type ";
        LOWORD(v170) = 259;
        OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int8 *)v20 + 24));
        v69 = v163;
        if (*OpcodeName)
        {
          v69 = OpcodeName;
          v70 = 3;
        }
        else
        {
          v70 = 1;
        }
        v71 = v170;
        v163 = v69;
        if (v170 == 1)
        {
          v174[0] = (void *)v69;
          LOBYTE(v176) = v70;
          BYTE1(v176) = 1;
        }
        else if ((_BYTE)v170)
        {
          if (*OpcodeName)
          {
            if (BYTE1(v170) != 1)
              v71 = 2;
            v101 = __src;
            if (BYTE1(v170) == 1)
              v101 = (llvm::BlockAddress **)__src[0];
            v174[0] = v101;
            v174[1] = __src[1];
            *(_QWORD *)&v175 = v69;
            LOBYTE(v176) = v71;
            BYTE1(v176) = v70;
          }
          else
          {
            *(_OWORD *)v174 = *(_OWORD *)__src;
            v175 = v169;
            v176 = v170;
          }
        }
        else
        {
          LOWORD(v176) = 256;
        }
        *((_BYTE *)this + 8) |= 1u;
        *(_QWORD *)this = v171;
        v171 = 0;
        v67 = 1;
        v80 = v177;
        if (v177 != v179)
          goto LABEL_129;
        goto LABEL_130;
      }
      v64 = *((unsigned __int8 *)v20 + 24);
      if ((v64 - 38) > 0xC)
      {
        if (v64 != 12)
        {
          if ((v64 - 13) > 0x11)
          {
            switch(*((_BYTE *)v20 + 24))
            {
              case '"':
                v115 = (uint64_t)v20[5];
                v116 = *(uint64_t **)v180;
                v174[0] = "constexpr";
                LOWORD(v176) = 259;
                v117 = llvm::GetElementPtrInst::Create(v115, v116, (uint64_t *)v180 + 1, v181 - 1, (const char **)v174, a4);
                v73 = (unsigned __int8 *)v117;
                if (*((_BYTE *)v20 + 25))
                  llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v117, 1);
                goto LABEL_99;
              case '#':
              case '$':
              case '%':
              case '&':
              case '\'':
              case '(':
              case ')':
              case '*':
              case '+':
              case ',':
              case '-':
              case '.':
              case '/':
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '7':
              case '8':
              case ':':
              case ';':
              case '<':
LABEL_258:
                __break(1u);
                break;
              case '5':
              case '6':
                v103 = *((unsigned __int8 *)v20 + 25);
                v104 = *(_QWORD *)v180;
                v105 = *((_QWORD *)v180 + 1);
                v174[0] = "constexpr";
                LOWORD(v176) = 259;
                v65 = (unsigned __int8 *)llvm::CmpInst::Create(v64, v103, v104, v105, (const char **)v174, a4);
                goto LABEL_98;
              case '9':
                v118 = *(Value **)v180;
                v119 = (llvm::Type **)*((_QWORD *)v180 + 1);
                v120 = (Value *)*((_QWORD *)v180 + 2);
                v174[0] = "constexpr";
                LOWORD(v176) = 259;
                v65 = (unsigned __int8 *)llvm::SelectInst::Create(v118, v119, v120, (const char **)v174, a4, a6);
                goto LABEL_98;
              case '=':
                v121 = *(llvm::ExtractElementInst **)v180;
                v122 = (llvm::Value *)*((_QWORD *)v180 + 1);
                v174[0] = "constexpr";
                LOWORD(v176) = 259;
                v65 = (unsigned __int8 *)llvm::ExtractElementInst::Create(v121, v122, (llvm::Value *)v174, (const llvm::Twine *)a4, a5);
                goto LABEL_98;
              case '>':
                v123 = *(llvm::InsertElementInst **)v180;
                v124 = (llvm::Value *)*((_QWORD *)v180 + 1);
                v125 = (llvm::Value *)*((_QWORD *)v180 + 2);
                v174[0] = "constexpr";
                LOWORD(v176) = 259;
                v65 = (unsigned __int8 *)llvm::InsertElementInst::Create(v123, v124, v125, (llvm::Value *)v174, (const llvm::Twine *)a4, a6);
                goto LABEL_98;
              case '?':
                v73 = (unsigned __int8 *)llvm::User::operator new((llvm::User *)0x70, 2u);
                v126 = *(llvm::Value **)v180;
                v127 = (llvm::Value *)*((_QWORD *)v180 + 1);
                v128 = (llvm::Value *)*((_QWORD *)v180 + 2);
                v174[0] = "constexpr";
                LOWORD(v176) = 259;
                llvm::ShuffleVectorInst::ShuffleVectorInst((llvm::ShuffleVectorInst *)v73, v126, v127, v128, (const llvm::Twine *)v174, (llvm::BasicBlock *)a4);
                goto LABEL_99;
              default:
                if ((v64 - 254) >= 2)
                {
                  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v20);
                  Int32Ty = (llvm::ConstantInt *)llvm::Type::getInt32Ty(DesiredBytecodeVersion, v130);
                  v133 = llvm::PoisonValue::get(*v20, v132);
                  inserted = (llvm::Value *)v133;
                  if ((_DWORD)v181)
                  {
                    v135 = 0;
                    v159 = v180;
                    v160 = Int32Ty;
                    v136 = 8 * v181;
                    do
                    {
                      v162 = (llvm::Value *)llvm::ConstantInt::get(Int32Ty, v135, 0);
                      v137 = (llvm::Value *)v159[v135];
                      v174[0] = "constexpr.ins";
                      LOWORD(v176) = 259;
                      v73 = (unsigned __int8 *)llvm::User::operator new((llvm::User *)0x48, 3u);
                      v138 = v137;
                      Int32Ty = v160;
                      ++v135;
                      inserted = (llvm::Value *)llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)v73, inserted, v138, v162, (const llvm::Twine *)v174, (llvm::BasicBlock *)a4);
                      v136 -= 8;
                    }
                    while (v136);
                  }
                  else
                  {
                    v73 = (unsigned __int8 *)v133;
                  }
                }
                else
                {
                  v107 = llvm::PoisonValue::get(*v20, (llvm::Type *)a2);
                  v108 = (llvm::Type **)v107;
                  if ((_DWORD)v181)
                  {
                    v109 = 0;
                    v161 = v180;
                    v110 = 8 * v181;
                    do
                    {
                      v111 = v161[v109];
                      LODWORD(__src[0]) = v109;
                      v174[0] = "constexpr.ins";
                      LOWORD(v176) = 259;
                      v73 = (unsigned __int8 *)llvm::User::operator new((llvm::User *)0x68, 2u);
                      v112 = llvm::Instruction::Instruction((llvm::Instruction *)v73, *v108, 65, (llvm::Use *)(v73 - 64), 2, a4);
                      *((_QWORD *)v112 + 9) = (char *)v112 + 88;
                      *((_QWORD *)v112 + 10) = 0x400000000;
                      llvm::InsertValueInst::init((uint64_t)v112, (uint64_t)v108, v111, __src, 1, (const char **)v174);
                      ++v109;
                      v108 = (llvm::Type **)v73;
                      v110 -= 8;
                    }
                    while (v110);
                  }
                  else
                  {
                    v73 = (unsigned __int8 *)v107;
                  }
                }
                goto LABEL_99;
            }
            return;
          }
          v90 = *(_QWORD *)v180;
          v91 = *((_QWORD *)v180 + 1);
          v174[0] = "constexpr";
          LOWORD(v176) = 259;
          v92 = llvm::BinaryOperator::Create(v64, v90, v91, (const char **)v174, (uint64_t)a4);
          v73 = (unsigned __int8 *)v92;
          v93 = *((unsigned __int8 *)v92 + 16);
          HIDWORD(v95) = v93 - 41;
          LODWORD(v95) = v93 - 41;
          v94 = v95 >> 1;
          v58 = v94 > 6;
          v96 = (1 << v94) & 0x47;
          if (!v58 && v96 != 0)
          {
            v98 = *((_BYTE *)v20 + 25);
            if ((v98 & 2) != 0)
            {
              llvm::Instruction::setHasNoSignedWrap((uint64_t)v92, 1);
              v98 = *((_BYTE *)v20 + 25);
            }
            if ((v98 & 1) != 0)
              llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v73, 1);
            v93 = v73[16];
          }
          v58 = v93 > 0x37;
          v99 = (1 << v93) & 0xC1800000000000;
          v100 = v58 || v99 == 0;
          if (!v100 && (*((_BYTE *)v20 + 25) & 1) != 0)
            llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v73, 1);
LABEL_99:
          LODWORD(v174[0]) = v16;
          v174[1] = v73;
          if ((v186 & 1) != 0)
          {
            v74 = 4;
            v75 = (llvm **)&v187;
            v6 = a2;
          }
          else
          {
            v74 = v188;
            v6 = a2;
            if (!v188)
            {
              v102 = 0;
              goto LABEL_163;
            }
            v75 = v187;
          }
          v76 = v74 - 1;
          v77 = v76 & (37 * v16);
          v78 = &v75[2 * v77];
          v79 = *(_DWORD *)v78;
          if ((_DWORD)v16 == *(_DWORD *)v78)
            goto LABEL_104;
          v139 = 0;
          v140 = 1;
          while (v79 != -1)
          {
            if (v139)
              v141 = 0;
            else
              v141 = v79 == -2;
            if (v141)
              v139 = v78;
            v142 = v77 + v140++;
            v77 = v142 & v76;
            v78 = &v75[2 * v77];
            v79 = *(_DWORD *)v78;
            if ((_DWORD)v16 == *(_DWORD *)v78)
              goto LABEL_104;
          }
          if (v139)
            v102 = (uint64_t)v139;
          else
            v102 = (uint64_t)v78;
LABEL_163:
          llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucket<unsigned int,llvm::Value *>((uint64_t)&v186, v102, v174, &v174[1]);
LABEL_104:
          v67 = 0;
          LODWORD(v184) = v184 - 1;
          v80 = v177;
          if (v177 != v179)
            goto LABEL_129;
          goto LABEL_130;
        }
        v72 = *(_QWORD *)v180;
        v174[0] = "constexpr";
        LOWORD(v176) = 259;
        v65 = (unsigned __int8 *)llvm::UnaryOperator::Create(12, v72, (const char **)v174, (uint64_t)a4);
      }
      else
      {
        v174[0] = "constexpr";
        LOWORD(v176) = 259;
        llvm::CastInst::Create(v64);
      }
LABEL_98:
      v73 = v65;
      goto LABEL_99;
    }
LABEL_77:
    if ((_DWORD)v178 != (_DWORD)v181)
      goto LABEL_82;
    v60 = (llvm::ConstantExpr *)*((unsigned __int8 *)v20 + 24);
    if (((_DWORD)v60 - 38) > 0xC)
    {
      if (((_DWORD)v60 - 13) > 0x11)
      {
        switch(*((_BYTE *)v20 + 24))
        {
          case '"':
            LODWORD(v113) = *((_DWORD *)v20 + 8);
            v114 = (_DWORD)v113 != -1;
            if ((_DWORD)v113 == -1)
              v113 = 0;
            else
              v113 = v113;
            ElementPtr = llvm::ConstantExpr::getGetElementPtr((uint64_t)v20[5], *(uint64_t **)v177, (uint64_t)v177 + 8, v178 - 1, *((_BYTE *)v20 + 25) != 0, v113 | (v114 << 32), 0);
            goto LABEL_111;
          case '#':
          case '$':
          case '%':
          case '&':
          case '\'':
          case '(':
          case ')':
          case '*':
          case '+':
          case ',':
          case '-':
          case '.':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
            goto LABEL_258;
          case '5':
          case '6':
            ElementPtr = (uint64_t)llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)*((unsigned __int8 *)v20 + 25), *(mlir::BytecodeWriterConfig **)v177, *((llvm::Constant **)v177 + 1), 0);
            goto LABEL_111;
          case '=':
            ElementPtr = (uint64_t)llvm::ConstantExpr::getExtractElement(*(llvm::ConstantExpr **)v177, *((llvm::Constant **)v177 + 1), 0, (llvm::Type *)a4);
            goto LABEL_111;
          case '>':
            ElementPtr = (uint64_t)llvm::ConstantExpr::getInsertElement(*(llvm::ConstantExpr **)v177, *((llvm::Constant **)v177 + 1), *((llvm::Constant **)v177 + 2), 0, a5);
            goto LABEL_111;
          case '?':
            v174[0] = &v175;
            v174[1] = (void *)0x1000000000;
            llvm::ShuffleVectorInst::getShuffleMask(*((llvm::ConstantDataSequential **)v177 + 2), (uint64_t)v174);
            ShuffleVector = llvm::ConstantExpr::getShuffleVector(*(mlir::BytecodeWriterConfig **)v177, *((mlir::BytecodeWriterConfig **)v177 + 1), (int *)v174[0], LODWORD(v174[1]), 0);
            if (v174[0] != &v175)
              free(v174[0]);
            goto LABEL_112;
          default:
            __asm { BR              X9 }
            return;
        }
      }
      ElementPtr = llvm::ConstantExpr::get(v60, *(mlir::BytecodeWriterConfig **)v177, *((llvm::Constant **)v177 + 1), (llvm::Constant *)*((unsigned __int8 *)v20 + 25), 0, a6);
LABEL_111:
      ShuffleVector = (_QWORD *)ElementPtr;
    }
    else
    {
      llvm::UpgradeBitCastExpr(v60, *(mlir::BytecodeWriterConfig **)v177, *v20, (llvm::Type *)a4);
      ShuffleVector = v61;
      if (!v61)
      {
        llvm::ConstantExpr::getCast((llvm::ConstantExpr *)*((unsigned __int8 *)v20 + 24), *(_QWORD *)v177, *v20, 0);
        goto LABEL_111;
      }
    }
LABEL_112:
    v81 = (unint64_t *)(v6[89] + 32 * v16);
    v82 = (_QWORD *)v81[2];
    if (v82 != ShuffleVector)
    {
      if (v82 != (_QWORD *)-8192 && v82 != (_QWORD *)-4096 && v82 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((_QWORD *)(v6[89] + 32 * v16));
      v81[2] = (unint64_t)ShuffleVector;
      if (ShuffleVector != (_QWORD *)-8192 && ShuffleVector != (_QWORD *)-4096 && ShuffleVector)
        llvm::ValueHandleBase::AddToUseList(v81);
    }
    LODWORD(v174[0]) = v16;
    v174[1] = ShuffleVector;
    if ((v186 & 1) != 0)
    {
      v84 = 4;
      v85 = (llvm **)&v187;
LABEL_127:
      v86 = v84 - 1;
      v87 = v86 & (37 * v16);
      v88 = &v85[2 * v87];
      v89 = *(_DWORD *)v88;
      if ((_DWORD)v16 != *(_DWORD *)v88)
      {
        v143 = 0;
        v144 = 1;
        while (v89 != -1)
        {
          if (v143)
            v145 = 0;
          else
            v145 = v89 == -2;
          if (v145)
            v143 = v88;
          v146 = v87 + v144++;
          v87 = v146 & v86;
          v88 = &v85[2 * v87];
          v89 = *(_DWORD *)v88;
          if ((_DWORD)v16 == *(_DWORD *)v88)
            goto LABEL_128;
        }
        if (v143)
          v106 = (uint64_t)v143;
        else
          v106 = (uint64_t)v88;
        goto LABEL_169;
      }
    }
    else
    {
      v84 = v188;
      if (v188)
      {
        v85 = v187;
        goto LABEL_127;
      }
      v106 = 0;
LABEL_169:
      llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucket<unsigned int,llvm::Value *>((uint64_t)&v186, v106, v174, &v174[1]);
    }
LABEL_128:
    LODWORD(v184) = v184 - 1;
    v67 = 2;
    v80 = v177;
    if (v177 != v179)
LABEL_129:
      free(v80);
LABEL_130:
    v50 = (char *)v180;
    if (v180 != v182)
LABEL_131:
      free(v50);
LABEL_132:
    if ((v67 | 2) != 2)
      goto LABEL_237;
    v10 = v184;
  }
  while ((_DWORD)v184);
LABEL_231:
  if ((v186 & 1) != 0)
  {
    v147 = 4;
    v148 = this;
LABEL_235:
    v149 = v147 - 1;
    v150 = (37 * v173) & v149;
    v151 = (uint64_t)&v9[2 * v150];
    v152 = *(_DWORD *)v151;
    if (v173 != *(_DWORD *)v151)
    {
      v155 = 0;
      v156 = 1;
      while (v152 != -1)
      {
        if (v155)
          v157 = 0;
        else
          v157 = v152 == -2;
        if (v157)
          v155 = v151;
        v158 = v150 + v156++;
        v150 = v158 & v149;
        v151 = (uint64_t)&v9[2 * v150];
        v152 = *(_DWORD *)v151;
        if (v173 == *(_DWORD *)v151)
          goto LABEL_236;
      }
      if (v155)
        v154 = v155;
      else
        v154 = v151;
      goto LABEL_245;
    }
  }
  else
  {
    v147 = v188;
    v148 = this;
    if (v188)
    {
      v9 = v187;
      goto LABEL_235;
    }
    v154 = 0;
LABEL_245:
    v151 = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucket<unsigned int const&>((uint64_t)&v186, v154, &v173);
  }
LABEL_236:
  *((_BYTE *)v148 + 8) &= ~1u;
  *(_QWORD *)v148 = *(_QWORD *)(v151 + 8);
LABEL_237:
  v153 = v183;
  if (v183 != v185)
LABEL_238:
    free(v153);
LABEL_239:
  if ((v186 & 1) == 0)
    llvm::deallocate_buffer((llvm *)v187, (void *)(16 * v188));
}

void llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4 + 1, 4);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = a2;
  ++*(_DWORD *)(a1 + 8);
}

void `anonymous namespace'::BitcodeReaderBase::error(_anonymous_namespace_::BitcodeReaderBase *this, const llvm::Twine *a2, llvm::Twine *a3)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  void **v11;
  std::string::size_type v12;
  unsigned __int8 v13;
  void *v14;
  void *__p[2];
  uint64_t v16;
  __int16 v17;
  std::string::value_type __s[8];
  char v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  llvm::Twine::str(a3, &v23);
  if ((*((char *)a2 + 415) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a2 + 415))
      goto LABEL_16;
LABEL_5:
    std::operator+<char>();
    v5 = std::string::append(&v20, "' Reader: 'LLVM ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v19 = 0;
    __s[0] = 0;
    v7 = std::string::append(&v21, __s, 0);
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v22, "')");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v16 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v16 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if (v16 >= 0)
      v12 = HIBYTE(v16);
    else
      v12 = (std::string::size_type)__p[1];
    std::string::append(&v23, (const std::string::value_type *)v11, v12);
    if (SHIBYTE(v16) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if ((v19 & 0x80000000) == 0)
          goto LABEL_14;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_22;
    }
LABEL_21:
    operator delete(*(void **)__s);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
LABEL_23:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_16;
    }
LABEL_22:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_23;
  }
  if (*((_QWORD *)a2 + 50))
    goto LABEL_5;
LABEL_16:
  v17 = 260;
  __p[0] = &v23;
  {
  }
  v14 = operator new(0x38uLL);
  *(_QWORD *)this = llvm::StringError::StringError((uint64_t)v14, (llvm::Twine *)__p, 1, (uint64_t)&llvm::BitcodeErrorCategory(void)::ErrorCategory);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::operator[](uint64_t a1, uint64_t *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t *v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::InsertIntoBucket<llvm::Function * const&>(a1, 0, a2)+ 1;
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(*(_QWORD *)a1 + 32 * v5);
  v7 = *v6;
  if (*a2 == *v6)
    return v6 + 1;
  v9 = 0;
  v10 = 1;
  while (v7 != -4096)
  {
    if (v9)
      v11 = 0;
    else
      v11 = v7 == -8192;
    if (v11)
      v9 = v6;
    v12 = v5 + v10++;
    v5 = v12 & v4;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 32 * v5);
    v7 = *v6;
    if (*a2 == *v6)
      return v6 + 1;
  }
  if (v9)
    v13 = v9;
  else
    v13 = v6;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::InsertIntoBucket<llvm::Function * const&>(a1, v13, a2)+ 1;
}

void std::deque<llvm::Function *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<llvm::Function *>::__add_back_capacity((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::vector<llvm::BasicBlock *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<mlir::Value>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
}

uint64_t llvm::InsertElementInst::Create(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  llvm::InsertElementInst *v11;

  v11 = (llvm::InsertElementInst *)llvm::User::operator new((llvm::User *)0x48, 3u);
  return llvm::InsertElementInst::InsertElementInst(v11, this, a2, a3, a4, a5);
}

llvm::Instruction *llvm::GetElementPtrInst::Create(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, const char **a5, uint64_t ***a6)
{
  uint64_t v12;
  llvm::Instruction *v13;
  llvm::Type *v14;

  v12 = (a4 + 1);
  v13 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x58, (int)a4 + 1);
  llvm::GetElementPtrInst::getGEPReturnType(a1, a2, (uint64_t)a3, a4);
  llvm::Instruction::Instruction(v13, v14, 34, (llvm::Instruction *)((char *)v13 - 32 * v12), v12, a6);
  *((_QWORD *)v13 + 9) = a1;
  *((_QWORD *)v13 + 10) = llvm::GetElementPtrInst::getIndexedType(a1, (uint64_t)a3, a4);
  llvm::GetElementPtrInst::init(v13, (uint64_t)a2, a3, a4, a5);
  return v13;
}

llvm::Instruction *llvm::SelectInst::Create(Value *this, llvm::Type **a2, Value *a3, const char **a4, uint64_t ***a5, llvm::BasicBlock *a6)
{
  llvm::Instruction *v11;
  llvm::Instruction *v12;

  v11 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 3u);
  v12 = llvm::Instruction::Instruction(v11, *a2, 57, (llvm::Instruction *)((char *)v11 - 96), 3, a5);
  llvm::SelectInst::init((uint64_t)v12, this, (Value *)a2, a3);
  llvm::Value::setName(v11, a4);
  return v11;
}

uint64_t llvm::ExtractElementInst::Create(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  llvm::ExtractElementInst *v9;

  v9 = (llvm::ExtractElementInst *)llvm::User::operator new((llvm::User *)0x48, 2u);
  return llvm::ExtractElementInst::ExtractElementInst(v9, this, a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucket<unsigned int,llvm::Value *>(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v10 = 4;
  else
    v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::grow(a1, v10);
  v13 = a1 + 8;
  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v14 = 4;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v13 = *(_QWORD *)(a1 + 8);
  }
  v11 = *(_DWORD *)a1 & 1;
  v15 = v14 - 1;
  v16 = (37 * *a3) & (v14 - 1);
  a2 = v13 + 16 * v16;
  v17 = *(_DWORD *)a2;
  if (*a3 != *(_DWORD *)a2)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -1)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -2;
      if (v20)
        v18 = a2;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      a2 = v13 + 16 * (v21 & v15);
      v17 = *(_DWORD *)a2;
      if (*a3 == *(_DWORD *)a2)
        goto LABEL_7;
    }
    if (v18)
      a2 = v18;
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*(_DWORD *)a2 != -1)
    --*(_DWORD *)(a1 + 4);
  *(_DWORD *)a2 = *a3;
  *(_QWORD *)(a2 + 8) = *a4;
  return a2;
}

uint64_t llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  llvm *v8;
  int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *buffer;
  int v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  llvm *v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  int *v36;
  int v37;
  int v38;
  int *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int *v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  BOOL v54;
  int v55;
  int v56;
  uint64_t v57;
  _QWORD v58[7];

  v2 = result;
  v58[6] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v6 = *(llvm **)(result + 8);
    v7 = *(unsigned int *)(result + 16);
    if (a2 > 4)
    {
      v22 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(v2 + 8) = buffer;
      *(_QWORD *)(v2 + 16) = v22;
      v24 = *(_DWORD *)v2;
      v8 = (llvm *)((char *)v6 + 16 * v7);
      *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
      if ((v24 & 1) == 0)
      {
        v25 = &buffer[4 * v22];
        v26 = 16 * v22 - 16;
        if (v26 < 0x10)
        {
          v28 = buffer;
          goto LABEL_28;
        }
LABEL_22:
        v27 = (v26 >> 4) + 1;
        v28 = &buffer[4 * (v27 & 0x1FFFFFFFFFFFFFFELL)];
        v29 = buffer + 4;
        v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v29 - 4) = -1;
          *v29 = -1;
          v29 += 8;
          v30 -= 2;
        }
        while (v30);
        if (v27 == (v27 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_29:
          if ((_DWORD)v7)
          {
            v31 = v6;
            do
            {
              v38 = *(_DWORD *)v31;
              if (*(_DWORD *)v31 <= 0xFFFFFFFD)
              {
                if ((*(_BYTE *)v2 & 1) != 0)
                {
                  v33 = 4;
                  v32 = v2 + 8;
                }
                else
                {
                  v32 = *(_QWORD *)(v2 + 8);
                  v33 = *(_DWORD *)(v2 + 16);
                }
                v34 = v33 - 1;
                v35 = (v33 - 1) & (37 * v38);
                v36 = (int *)(v32 + 16 * v35);
                v37 = *v36;
                if (v38 != *v36)
                {
                  v39 = 0;
                  v40 = 1;
                  while (v37 != -1)
                  {
                    if (v39)
                      v41 = 0;
                    else
                      v41 = v37 == -2;
                    if (v41)
                      v39 = v36;
                    v42 = v35 + v40++;
                    v35 = v42 & v34;
                    v36 = (int *)(v32 + 16 * (v42 & v34));
                    v37 = *v36;
                    if (v38 == *v36)
                      goto LABEL_33;
                  }
                  if (v39)
                    v36 = v39;
                }
LABEL_33:
                *v36 = v38;
                *((_QWORD *)v36 + 1) = *((_QWORD *)v31 + 1);
                *(_DWORD *)v2 += 2;
              }
              v31 = (llvm *)((char *)v31 + 16);
            }
            while (v31 != v8);
          }
          llvm::deallocate_buffer(v6, (void *)(16 * v7));
        }
        do
        {
LABEL_28:
          *v28 = -1;
          v28 += 4;
        }
        while (v28 != v25);
        goto LABEL_29;
      }
    }
    else
    {
      v8 = (llvm *)((char *)v6 + 16 * v7);
      *(_QWORD *)result = 1;
    }
    v25 = (_DWORD *)(v2 + 72);
    buffer = (_DWORD *)(v2 + 8);
    v26 = 48;
    goto LABEL_22;
  }
  v9 = &v56;
  if (*(_DWORD *)(result + 8) <= 0xFFFFFFFD)
  {
    v56 = *(_DWORD *)(result + 8);
    v57 = *(_QWORD *)(result + 16);
    v9 = (int *)v58;
    v10 = *(_DWORD *)(result + 24);
    if (v10 > 0xFFFFFFFD)
    {
LABEL_10:
      v11 = *(_DWORD *)(result + 40);
      if (v11 > 0xFFFFFFFD)
        goto LABEL_11;
      goto LABEL_53;
    }
  }
  else
  {
    v10 = *(_DWORD *)(result + 24);
    if (v10 > 0xFFFFFFFD)
      goto LABEL_10;
  }
  *v9 = v10;
  *((_QWORD *)v9 + 1) = *(_QWORD *)(result + 32);
  v9 += 4;
  v11 = *(_DWORD *)(result + 40);
  if (v11 > 0xFFFFFFFD)
  {
LABEL_11:
    v12 = *(_DWORD *)(result + 56);
    if (v12 > 0xFFFFFFFD)
      goto LABEL_12;
    goto LABEL_54;
  }
LABEL_53:
  *v9 = v11;
  *((_QWORD *)v9 + 1) = *(_QWORD *)(result + 48);
  v9 += 4;
  v12 = *(_DWORD *)(result + 56);
  if (v12 > 0xFFFFFFFD)
  {
LABEL_12:
    v13 = *(_DWORD *)result;
    if (a2 < 5)
      goto LABEL_13;
    goto LABEL_55;
  }
LABEL_54:
  *v9 = v12;
  *((_QWORD *)v9 + 1) = *(_QWORD *)(result + 64);
  v9 += 4;
  v13 = *(_DWORD *)result;
  if (a2 < 5)
  {
LABEL_13:
    *(_QWORD *)result = v13 & 1;
    if ((v13 & 1) == 0)
      goto LABEL_14;
LABEL_56:
    v16 = (_DWORD *)(v2 + 72);
    v15 = v2 + 8;
    v17 = 48;
    goto LABEL_16;
  }
LABEL_55:
  *(_DWORD *)result = v13 & 0xFFFFFFFE;
  v43 = a2;
  result = (uint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *(_QWORD *)(v2 + 8) = result;
  *(_QWORD *)(v2 + 16) = v43;
  v44 = *(_DWORD *)v2;
  *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
  if ((v44 & 1) != 0)
    goto LABEL_56;
LABEL_14:
  v14 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v14)
    goto LABEL_59;
  v15 = *(_QWORD *)(v2 + 8);
  v16 = (_DWORD *)(v15 + 16 * v14);
  v17 = (unint64_t)v16 - v15 - 16;
  if (v17 < 0x10)
  {
    v19 = *(_DWORD **)(v2 + 8);
    do
    {
LABEL_58:
      *v19 = -1;
      v19 += 4;
    }
    while (v19 != v16);
    goto LABEL_59;
  }
LABEL_16:
  v18 = (v17 >> 4) + 1;
  v19 = (_DWORD *)(v15 + 16 * (v18 & 0x1FFFFFFFFFFFFFFELL));
  v20 = (_DWORD *)(v15 + 16);
  v21 = v18 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 4) = -1;
    *v20 = -1;
    v20 += 8;
    v21 -= 2;
  }
  while (v21);
  if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_58;
LABEL_59:
  if (&v56 != v9)
  {
    v45 = &v56;
    do
    {
      v52 = *v45;
      if (*v45 <= 0xFFFFFFFD)
      {
        if ((*(_BYTE *)v2 & 1) != 0)
        {
          v47 = 4;
          v46 = v2 + 8;
        }
        else
        {
          v46 = *(_QWORD *)(v2 + 8);
          v47 = *(_DWORD *)(v2 + 16);
        }
        v48 = v47 - 1;
        v49 = (v47 - 1) & (37 * v52);
        v50 = (int *)(v46 + 16 * v49);
        v51 = *v50;
        if (v52 != *v50)
        {
          v53 = 0;
          result = 1;
          while (v51 != -1)
          {
            if (v53)
              v54 = 0;
            else
              v54 = v51 == -2;
            if (v54)
              v53 = v50;
            v55 = v49 + result;
            result = (result + 1);
            v49 = v55 & v48;
            v50 = (int *)(v46 + 16 * (v55 & v48));
            v51 = *v50;
            if (v52 == *v50)
              goto LABEL_63;
          }
          if (v53)
            v50 = v53;
        }
LABEL_63:
        *v50 = v52;
        *((_QWORD *)v50 + 1) = *((_QWORD *)v45 + 1);
        *(_DWORD *)v2 += 2;
      }
      v45 += 4;
    }
    while (v45 != v9);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::InsertIntoBucket<llvm::Function * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 32 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 32 * v11);
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  return a2;
}

void std::deque<llvm::Function *>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  void *v92;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v76 = &v37[8 * v35];
            v43 = v76;
            if ((unint64_t)(v76 - v7) >= 0x20)
            {
              v77 = (v42 >> 3) + 1;
              v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v78];
              v7 += v78;
              v79 = (__int128 *)(v6 + 3);
              v80 = v76 + 16;
              v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v83 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v83;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_74;
      }
LABEL_84:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v92 = operator new(0x1000uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v92);
      return;
    }
    v92 = operator new(0x1000uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v92);
    v44 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v44 + 1);
    v8 = *v44;
    *(_QWORD *)(a1 + 8) = v44 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v45 = (v5 - v9) >> 2;
      if (v5 == v9)
        v45 = 1;
      if (!(v45 >> 61))
      {
        v46 = v45 >> 2;
        v47 = 8 * v45;
        v37 = (char *)operator new(8 * v45);
        v38 = &v37[8 * v46];
        v39 = &v37[v47];
        v48 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v48 & 0xFFFFFFFFFFFFFFF8];
          v49 = v48 - 8;
          if ((unint64_t)(v48 - 8) >= 0x38)
          {
            v84 = &v37[8 * v46];
            v50 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v49 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v50 = &v38[v86];
              v7 += v86;
              v87 = (__int128 *)(v44 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v50 = &v37[8 * v46];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v50 = v91;
            v50 += 8;
          }
          while (v50 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v37;
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v39;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_84;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_84;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v21];
  v27 = &v25[8 * v24];
  v28 = operator new(0x1000uLL);
  v29 = v28;
  if (v21 != v24)
    goto LABEL_23;
  if (v20 >= 1)
  {
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v26 -= 8 * (v30 >> 1);
LABEL_23:
    *(_QWORD *)v26 = v28;
    v31 = v26 + 8;
    if (v18 != v19)
      goto LABEL_49;
    goto LABEL_24;
  }
  if (v18 == v19)
    v51 = 1;
  else
    v51 = v20 >> 2;
  if (v51 >> 61)
    goto LABEL_84;
  v52 = 8 * v51;
  v53 = (char *)operator new(8 * v51);
  v26 = &v53[8 * (v51 >> 2)];
  v27 = &v53[v52];
  operator delete(v25);
  v54 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  v25 = v53;
  *(_QWORD *)v26 = v29;
  v31 = v26 + 8;
  if (v18 != v54)
  {
    while (1)
    {
LABEL_49:
      if (v26 == v25)
      {
        if (v31 >= v27)
        {
          v61 = (v27 - v26) >> 2;
          if (v27 == v26)
            v61 = 1;
          if (v61 >> 61)
            goto LABEL_84;
          v62 = (v61 + 3) >> 2;
          v63 = 8 * v61;
          v64 = (char *)operator new(8 * v61);
          v25 = v64;
          v55 = &v64[8 * v62];
          v65 = v31 - v26;
          v40 = v31 == v26;
          v31 = v55;
          if (!v40)
          {
            v31 = &v55[v65 & 0xFFFFFFFFFFFFFFF8];
            v66 = v65 - 8;
            v67 = &v64[8 * v62];
            v68 = v26;
            if (v66 < 0x38)
              goto LABEL_87;
            v67 = &v64[8 * v62];
            v68 = v26;
            if ((unint64_t)(v67 - v26) < 0x20)
              goto LABEL_87;
            v69 = (v66 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v67 = &v55[v70];
            v68 = &v26[v70];
            v71 = (__int128 *)(v26 + 16);
            v72 = &v64[8 * v62 + 16];
            v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v74 = *v71;
              *((_OWORD *)v72 - 1) = *(v71 - 1);
              *(_OWORD *)v72 = v74;
              v71 += 2;
              v72 += 32;
              v73 -= 4;
            }
            while (v73);
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_87:
              do
              {
                v75 = *(_QWORD *)v68;
                v68 += 8;
                *(_QWORD *)v67 = v75;
                v67 += 8;
              }
              while (v67 != v31);
            }
          }
          v27 = &v64[v63];
          operator delete(v26);
        }
        else
        {
          v57 = (v27 - v31) >> 3;
          if (v57 >= -1)
            v58 = v57 + 1;
          else
            v58 = v57 + 2;
          v59 = &v31[8 * (v58 >> 1)];
          v55 = &v59[-(v31 - v26)];
          v60 = v31 - v26;
          v40 = v31 == v26;
          v31 = v59;
          if (!v40)
            memmove(v55, v26, v60);
          v25 = v26;
        }
      }
      else
      {
        v55 = v26;
      }
      v56 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v55 - 1) = v56;
      v32 = v55 - 8;
      v26 = v32;
      if (v18 == *(_QWORD *)(a1 + 8))
        goto LABEL_25;
    }
  }
LABEL_24:
  v32 = v26;
LABEL_25:
  v33 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v27;
  if (v33)
    operator delete(v33);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucket<unsigned int const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::grow(a1, v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = (37 * *a3) & (v12 - 1);
  a2 = v11 + 16 * v14;
  v15 = *(_DWORD *)a2;
  if (*a3 != *(_DWORD *)a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -1)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -2;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = v11 + 16 * (v19 & v13);
      v15 = *(_DWORD *)a2;
      if (*a3 == *(_DWORD *)a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(_DWORD *)a2 != -1)
    --*(_DWORD *)(a1 + 4);
  *(_DWORD *)a2 = *a3;
  *(_QWORD *)(a2 + 8) = 0;
  return a2;
}

uint64_t std::deque<llvm::Function *>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void `anonymous namespace'::BitcodeReader::parseFunctionBody(_anonymous_namespace_::BitcodeReader *this, llvm::Function *a2, uint64_t a3)
{
  llvm::BitstreamCursor *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int Kind;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  unsigned int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *k;
  llvm::MetadataLoader::MetadataLoaderImpl **v40;
  _anonymous_namespace_::BitcodeReaderBase *v41;
  const llvm::Twine *v42;
  llvm::BitstreamCursor *i;
  llvm::LLVMContext *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  llvm::Instruction *v48;
  llvm::Instruction *v49;
  int v50;
  _BOOL4 v51;
  llvm::LLVMContext *ContainedTypeID;
  unint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t *v57;
  llvm::Type ***v58;
  int v59;
  llvm::Type **v60;
  int v61;
  int v62;
  llvm::LLVMContext *v63;
  BOOL v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  int v68;
  llvm::Type *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  uint64_t *v74;
  llvm::Value *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  llvm::LLVMContext *v83;
  int v84;
  llvm::Type *v85;
  unint64_t v86;
  llvm::Instruction *v87;
  llvm::LandingPadInst *v88;
  uint64_t *v89;
  char *v90;
  unsigned int v91;
  uint64_t *v92;
  llvm::Type **v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  char *v99;
  llvm::Type *TokenTy;
  int v101;
  unsigned __int8 *v102;
  llvm::Instruction *v103;
  unint64_t v104;
  uint64_t v105;
  llvm::Value *v106;
  llvm::Type *v107;
  int v108;
  unsigned __int8 *v109;
  unsigned int v110;
  uint64_t *v111;
  unsigned int v112;
  int m;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t *v123;
  int v124;
  unsigned int v125;
  uint64_t *v126;
  llvm::LLVMContext *v127;
  unsigned int v128;
  llvm::Type *v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  _anonymous_namespace_::BitcodeReaderBase *v133;
  uint64_t v134;
  int v135;
  uint64_t *v136;
  unsigned int v137;
  llvm::LLVMContext *v138;
  llvm::Type *v139;
  llvm::PHINode *v140;
  llvm::Instruction *v141;
  llvm::Type *v142;
  unint64_t v143;
  llvm::Value *v144;
  BOOL v145;
  llvm::BasicBlock *v146;
  unsigned int v147;
  __int16 v148;
  llvm::Instruction *v149;
  llvm::Instruction *v150;
  llvm::Type *v151;
  int v152;
  unsigned __int8 *v153;
  llvm::Instruction *v154;
  unint64_t v155;
  uint64_t v156;
  llvm::Value *v157;
  llvm::Instruction *v158;
  llvm::UnreachableInst *v159;
  char *v160;
  uint64_t v161;
  llvm::Instruction *v162;
  llvm::Instruction *v163;
  char *v164;
  int v165;
  llvm::Type *v166;
  unsigned __int8 *v167;
  unint64_t v168;
  llvm::Type *v169;
  llvm::VAArgInst *v170;
  char *v171;
  llvm::Instruction *v172;
  llvm::Type *Int1Ty;
  llvm::Type **v174;
  unsigned int data;
  int v176;
  llvm::Instruction *v177;
  unint64_t v178;
  unint64_t v179;
  llvm::LLVMContext *v180;
  llvm::PointerType **v181;
  char *v182;
  llvm::InsertElementInst *v183;
  llvm::Type *v184;
  unsigned int v185;
  int v186;
  llvm::Instruction *v187;
  llvm::Instruction *v188;
  uint64_t v189;
  uint64_t v190;
  int DecodedUnaryOpcode;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  llvm::Type **v197;
  unsigned int v198;
  uint64_t v199;
  llvm::Value *v200;
  int v201;
  llvm::Value *v202;
  llvm::ShuffleVectorInst *v203;
  uint64_t v204;
  char *v205;
  int v206;
  llvm::Type *v207;
  unsigned __int8 *v208;
  llvm::Value *v209;
  uint64_t v210;
  llvm::IndirectBrInst *v211;
  llvm::Type *v212;
  uint64_t j;
  unint64_t v214;
  uint64_t v215;
  llvm::Instruction *v216;
  uint64_t v217;
  unsigned __int8 **v218;
  uint64_t *v219;
  int v220;
  unsigned int v221;
  llvm::Instruction *v222;
  llvm::Instruction *v223;
  unint64_t v224;
  unsigned int v225;
  llvm::Type *v226;
  unsigned int v227;
  unsigned __int8 *v228;
  unint64_t v229;
  uint64_t v230;
  llvm::Value *v231;
  llvm::BasicBlock *v232;
  int v233;
  llvm::SwitchInst *v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int *v239;
  uint64_t v240;
  int v241;
  int v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  const llvm::APInt *v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  const llvm::APInt *v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  llvm::BasicBlock *v256;
  llvm::ConstantInt **v257;
  uint64_t v258;
  llvm::ConstantInt *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  int v263;
  unsigned int v264;
  char *v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  llvm::BranchInst *v269;
  llvm::BasicBlock *v270;
  uint64_t v271;
  int v272;
  uint64_t *v273;
  unsigned int v274;
  llvm::LLVMContext *v275;
  llvm::Type *v276;
  llvm::Type **v277;
  unsigned int v278;
  llvm::LLVMContext *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  char *v285;
  _QWORD *v286;
  uint64_t v287;
  BOOL v288;
  char *v289;
  unint64_t v290;
  char *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  char *v302;
  __int128 *v303;
  uint64_t v304;
  __int128 v305;
  uint64_t v306;
  _anonymous_namespace_::BitcodeReader *v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t *v310;
  uint64_t *v311;
  llvm::Value *v312;
  uint64_t v313;
  llvm::LLVMContext *v314;
  int v315;
  llvm::Type *v316;
  uint64_t v317;
  llvm::Type **v318;
  llvm::Value *v319;
  unsigned __int8 v320;
  _QWORD *v321;
  void *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  uint64_t *v327;
  unsigned int v328;
  int n;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  llvm::Type *v334;
  unsigned __int8 *v335;
  unint64_t v336;
  uint64_t v337;
  llvm::Value *v338;
  llvm::BasicBlock *v339;
  unint64_t v340;
  llvm::SwitchInst *v341;
  uint64_t v342;
  unsigned __int8 *FnValueByID;
  llvm::Type *v344;
  unint64_t v345;
  uint64_t v346;
  llvm::BasicBlock *v347;
  uint64_t v348;
  llvm::LLVMContext *v349;
  unint64_t v350;
  uint64_t v351;
  const char *v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  BOOL v356;
  unsigned int v357;
  llvm::Instruction *v358;
  llvm::Instruction *v359;
  const llvm::User *v360;
  const llvm::Value **v361;
  unint64_t v362;
  const llvm::Value **v363;
  unint64_t v364;
  unint64_t v365;
  int v366;
  uint64_t v367;
  char *v368;
  llvm::LLVMContext *v369;
  int v370;
  llvm::Type *v371;
  uint64_t v372;
  mlir::BytecodeWriterConfig *v373;
  uint64_t v374;
  int v375;
  unsigned int v376;
  int v377;
  char *v378;
  unsigned int v379;
  llvm::Type *v380;
  unsigned __int8 *v381;
  uint64_t *v382;
  uint64_t v383;
  llvm::Type *v384;
  llvm::LLVMContext *v385;
  llvm::Value *TypeByID;
  uint64_t v387;
  llvm *DecodedCastOpcode;
  llvm::Instruction **v389;
  int v390;
  llvm::Type **v391;
  llvm::Instruction *v392;
  llvm::Instruction *v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t *v397;
  llvm::Type *v398;
  llvm::Type **v399;
  unsigned int v400;
  _anonymous_namespace_::BitcodeReader *v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unint64_t v405;
  uint64_t *v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  llvm::Value *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  unint64_t v417;
  uint64_t v418;
  char *v419;
  char *v420;
  unsigned int *v421;
  unsigned int *v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unsigned int v426;
  int *v427;
  int v428;
  uint64_t *v429;
  int v430;
  uint64_t v431;
  int v432;
  unsigned int v433;
  unint64_t TypeAtIndex;
  int v435;
  uint64_t v436;
  llvm::Instruction *v437;
  unsigned int v438;
  unsigned int v439;
  int v440;
  int v441;
  unsigned __int8 *MetadataFwdRefOrLoad;
  _BYTE *v443;
  llvm::Type *v444;
  unint64_t v445;
  uint64_t v446;
  llvm::BasicBlock *v447;
  _QWORD *v448;
  int v449;
  uint64_t v450;
  llvm::Value **v451;
  int v452;
  uint64_t v453;
  llvm::BasicBlock *v454;
  llvm::Value **v455;
  uint64_t v456;
  llvm::BasicBlock *v457;
  llvm::LLVMContext *v458;
  unsigned int v459;
  unsigned __int8 *ValueSigned;
  llvm::Value *v461;
  int v462;
  int v463;
  _QWORD *v464;
  _QWORD *v465;
  llvm::LLVMContext *v466;
  llvm::BasicBlock *v467;
  _WORD *v468;
  llvm::Instruction *v469;
  uint64_t v470;
  char *v471;
  uint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  unsigned int DecodedRMWOperation;
  llvm::Type **v476;
  llvm::Type *v477;
  unint64_t v478;
  char *v479;
  unsigned int DecodedBinaryOpcode;
  unsigned int v481;
  unsigned int v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  Value *v486;
  uint64_t v487;
  llvm::Instruction *v488;
  unint64_t v489;
  unint64_t v490;
  uint64_t v491;
  llvm::LLVMContext *v492;
  llvm::BasicBlock *v493;
  llvm::BasicBlock *v494;
  unsigned __int8 *v495;
  _BYTE *v496;
  llvm::Use *v497;
  unint64_t v498;
  llvm::BasicBlock *v499;
  unsigned int v500;
  unsigned int v501;
  unint64_t v502;
  uint64_t v503;
  llvm::BasicBlock *v504;
  llvm::Value *v505;
  uint64_t *v506;
  llvm::CatchSwitchInst *v507;
  llvm::BasicBlock **v508;
  uint64_t v509;
  llvm::BasicBlock *v510;
  uint64_t v511;
  _QWORD *v512;
  unsigned __int8 *Impl;
  uint64_t PersonalityFn;
  __int16 v515;
  llvm::Type *v516;
  llvm::Instruction *v517;
  llvm::Type *v518;
  llvm::Use *v519;
  uint64_t v520;
  llvm::BasicBlock *v521;
  unint64_t v522;
  _QWORD *v523;
  uint64_t v524;
  llvm::Instruction *v525;
  __int16 v526;
  uint64_t v527;
  uint64_t v528;
  llvm::LLVMContext *v529;
  unint64_t v530;
  uint64_t v531;
  llvm::LLVMContext *v532;
  unint64_t v533;
  char v534;
  unint64_t v535;
  uint64_t v536;
  int v537;
  llvm::Type *v538;
  int v539;
  unsigned __int8 *Value;
  llvm::Instruction *v541;
  llvm::Instruction *v542;
  uint64_t v543;
  llvm::Instruction *v544;
  unsigned __int8 v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  llvm::Type *v549;
  unint64_t v550;
  uint64_t v551;
  unsigned __int8 *v552;
  llvm::Value *v553;
  llvm::LLVMContext *v554;
  unint64_t v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  unsigned __int8 *v561;
  char *v562;
  unsigned __int8 v563;
  _QWORD *v564;
  llvm::Instruction *v565;
  llvm::Use *v566;
  unint64_t v567;
  uint64_t v568;
  int v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  llvm::Type *v573;
  unint64_t v574;
  uint64_t v575;
  unsigned __int8 *v576;
  uint64_t *v577;
  uint64_t v578;
  int v579;
  int8x16_t *v580;
  uint64_t v581;
  _DWORD *v582;
  unsigned int v583;
  uint64_t **v584;
  uint64_t v585;
  uint64_t v586;
  BOOL v588;
  uint64_t v589;
  uint64_t *v590;
  llvm::Value *v591;
  uint64_t v592;
  uint64_t v593;
  char v594;
  llvm::Value *v595;
  int v596;
  uint64_t v597;
  const char *v598;
  llvm::Instruction *v599;
  _BYTE *v600;
  int8x16_t *v601;
  unint64_t v602;
  unint64_t v603;
  _QWORD *v604;
  unint64_t v605;
  unint64_t v606;
  unsigned __int8 v607;
  _QWORD *v608;
  llvm *v609;
  _BYTE *v610;
  int8x16_t *v611;
  char *v612;
  unint64_t v613;
  uint64_t v614;
  char *v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  const char *v619;
  int v620;
  llvm::Instruction *v621;
  llvm::Instruction *v622;
  llvm::LLVMContext *v623;
  _QWORD *v624;
  __int16 v625;
  llvm::Instruction *v626;
  _QWORD *v627;
  uint64_t v628;
  unsigned int v629;
  uint64_t v630;
  llvm::Instruction *v631;
  void *v632;
  llvm::Instruction *v633;
  __int16 v634;
  unsigned __int8 v635;
  uint64_t v636;
  const char *v637;
  llvm::Instruction *v638;
  llvm::LLVMContext *v639;
  uint64_t v640;
  unsigned int v641;
  uint64_t v642;
  _DWORD *v643;
  std::string::size_type v644;
  unsigned int v645;
  uint64_t v646;
  int v647;
  std::string::size_type v648;
  int v649;
  uint64_t v650;
  uint64_t v651;
  std::string *v652;
  std::string::size_type size;
  llvm::Instruction *v654;
  char *v655;
  void *v656;
  char *v657;
  char *v658;
  void *v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  char *v663;
  char *v664;
  llvm::Instruction *v665;
  _QWORD *v666;
  llvm::Instruction *v667;
  uint64_t *v668;
  llvm::BasicBlock *v669;
  uint64_t ***v670;
  llvm::BranchInst *v671;
  _QWORD *v672;
  unint64_t v673;
  _QWORD *v674;
  uint64_t v675;
  unint64_t v676;
  llvm::MetadataLoader *v677;
  _QWORD *v678;
  uint64_t v679;
  unint64_t v681;
  unsigned int ii;
  uint64_t v683;
  llvm::Value *v684;
  llvm::Value *v685;
  void *v686;
  llvm::BasicBlock **v687;
  int v688;
  uint64_t v689;
  int v690;
  unsigned int v691;
  uint64_t v692;
  uint64_t *v693;
  int v694;
  BOOL v695;
  unsigned int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  int v700;
  __int16 v701;
  int v702;
  uint64_t v703;
  uint64_t v704;
  llvm::Value *v705;
  uint64_t v706;
  unsigned int v707;
  __int16 v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unsigned int v712[2];
  llvm::Type **v713;
  unsigned int v714[2];
  int v715;
  unsigned int v716;
  llvm::LLVMContext *v717;
  _BOOL4 v718;
  unsigned int v719[2];
  __int16 v720;
  uint64_t *v721;
  uint64_t *v722;
  uint64_t *v723;
  uint64_t *v724;
  uint64_t *v725;
  uint64_t *v726;
  uint64_t *v727;
  uint64_t *v728;
  unint64_t v729;
  unint64_t v730;
  unsigned int v731;
  llvm::BasicBlock *v732;
  llvm::BasicBlock ***v733;
  char *v734;
  llvm::Function *v735;
  _anonymous_namespace_::BitcodeReader *v736;
  llvm::Twine *v737;
  llvm::BitstreamCursor *v738;
  uint64_t v739;
  llvm::BitcodeReaderValueList *v740;
  std::string v741;
  unsigned int v742[2];
  _DWORD *v743;
  unsigned int v744;
  unsigned int v745[2];
  unsigned int v746;
  llvm::LLVMContext *v747;
  llvm::LLVMContext *v748;
  unsigned int VirtualTypeID;
  llvm::Instruction *Inst;
  void *v751;
  char *v752;
  uint64_t v753;
  uint64_t *v754[3];
  llvm::LLVMContext *v755;
  unsigned int v756;
  llvm::BasicBlock *v757;
  llvm::Value *v758;
  uint64_t v759;
  _BYTE v760[16];
  __int16 v761;
  llvm::Value *v762;
  uint64_t v763;
  _BYTE v764[16];
  __int16 v765;
  __int128 __p;
  uint64_t v767[2];
  __int16 v768;
  void *v769;
  llvm *v770;
  uint64_t v771;
  uint64_t v772;
  __int16 v773;
  uint64_t v774;
  uint64_t v775;
  _BYTE v776[72];
  uint64_t v777;
  char v778;
  uint64_t v779;
  char v780;
  void *v781;
  uint64_t v782;
  _WORD v783[256];
  uint64_t v784;
  int64x2_t v785;
  int64x2_t v786;
  int64x2_t v787;
  int64x2_t v788;
  void *v789;
  uint64_t v790;
  _QWORD v791[15];

  v791[12] = *MEMORY[0x1E0C80C00];
  v6 = (llvm::Function *)((char *)a2 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::Function *)((char *)a2 + 32), 0, 12, (uint64_t *)this);
  if (*(_QWORD *)this)
    return;
  if (llvm::MetadataLoader::hasFwdRefs((llvm::Function *)((char *)a2 + 776)))
  {
    v781 = "Invalid function metadata: incoming forward references";
    v783[8] = 259;
    return;
  }
  *((_DWORD *)a2 + 212) = 0;
  v7 = *((_QWORD *)a2 + 90);
  v8 = *((_QWORD *)a2 + 89);
  Kind = mlir::AffineExpr::getKind((llvm::Function *)((char *)a2 + 776));
  v10 = *((_DWORD *)a2 + 152);
  v736 = this;
  v737 = (llvm::Function *)((char *)a2 + 8);
  v738 = v6;
  v731 = Kind;
  if (!v10)
    goto LABEL_1217;
  v11 = *((_QWORD *)a2 + 74);
  v12 = v10 - 1;
  v13 = (v10 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (uint64_t *)(v11 + 16 * v13);
  v15 = *v14;
  if (*v14 != a3)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (uint64_t *)(v11 + 16 * (v19 & v12));
      v15 = *v14;
      if (*v14 == a3)
        goto LABEL_20;
    }
    if (v16)
      v14 = v16;
    v688 = *((_DWORD *)a2 + 150);
    if (4 * v688 + 4 < 3 * v10)
    {
      if (v10 + ~v688 - *((_DWORD *)a2 + 151) > v10 >> 3)
      {
        v20 = *v14;
        ++*((_DWORD *)a2 + 150);
        if (v20 == -4096)
        {
LABEL_19:
          *v14 = a3;
          *((_DWORD *)v14 + 2) = 0;
          goto LABEL_20;
        }
LABEL_18:
        --*((_DWORD *)a2 + 151);
        goto LABEL_19;
      }
LABEL_1218:
      llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)a2 + 592, v10);
      v689 = *((_QWORD *)a2 + 74);
      v690 = *((_DWORD *)a2 + 152) - 1;
      v691 = v690 & ((a3 >> 4) ^ (a3 >> 9));
      v14 = (uint64_t *)(v689 + 16 * v691);
      v692 = *v14;
      if (*v14 == a3)
      {
LABEL_1219:
        ++*((_DWORD *)a2 + 150);
        if (a3 == -4096)
          goto LABEL_19;
      }
      else
      {
        v693 = 0;
        v694 = 1;
        while (v692 != -4096)
        {
          if (v693)
            v695 = 0;
          else
            v695 = v692 == -8192;
          if (v695)
            v693 = v14;
          v696 = v691 + v694++;
          v691 = v696 & v690;
          v14 = (uint64_t *)(v689 + 16 * (v696 & v690));
          v692 = *v14;
          if (*v14 == a3)
            goto LABEL_1219;
        }
        if (v693)
          v14 = v693;
        v697 = *v14;
        ++*((_DWORD *)a2 + 150);
        if (v697 == -4096)
          goto LABEL_19;
      }
      goto LABEL_18;
    }
LABEL_1217:
    v10 *= 2;
    goto LABEL_1218;
  }
LABEL_20:
  v21 = *((_DWORD *)v14 + 2);
  if ((*(_WORD *)(a3 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a3);
    v22 = *(char **)(a3 + 88);
    if ((*(_WORD *)(a3 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)a3);
    v23 = *(char **)(a3 + 88);
  }
  else
  {
    v22 = *(char **)(a3 + 88);
    v23 = v22;
  }
  v734 = (char *)a2 + 840;
  v729 = (unint64_t)(v7 - v8) >> 5;
  v730 = v7 - v8;
  v740 = (llvm::Function *)((char *)a2 + 712);
  v735 = (llvm::Function *)a3;
  v24 = &v23[40 * *(_QWORD *)(a3 + 96)];
  if (v22 != v24)
  {
    v25 = 0;
    v26 = 37 * v21;
    while (1)
    {
      v28 = *((_QWORD *)a2 + 68);
      v29 = *((unsigned int *)a2 + 140);
      if ((_DWORD)v29)
      {
        v30 = v29 - 1;
        v31 = (int *)(v28 + 32 * (((_DWORD)v29 - 1) & v26));
        v32 = *v31;
        if (*v31 == v21)
          goto LABEL_35;
        v33 = 1;
        LODWORD(v34) = v30 & v26;
        while (v32 != -1)
        {
          v35 = v34 + v33++;
          v34 = v35 & v30;
          v32 = *(_DWORD *)(v28 + 32 * v34);
          if (v32 == v21)
          {
            v31 = (int *)(v28 + 32 * v34);
            goto LABEL_35;
          }
        }
      }
      v31 = (int *)(v28 + 32 * v29);
LABEL_35:
      ++v25;
      if (v31 == (int *)(v28 + 32 * v29) || v31[4] <= v25)
      {
        v36 = -1;
        v781 = v22;
        LODWORD(v784) = -1;
        v37 = *((_QWORD *)a2 + 90);
        if (v37 < *((_QWORD *)a2 + 91))
          goto LABEL_40;
LABEL_27:
        v27 = std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__emplace_back_slow_path<llvm::Value *&,unsigned int &>((uint64_t)v740, (uint64_t *)&v781, &v784);
        *((_QWORD *)a2 + 90) = v27;
        v22 += 40;
        if (v22 == v24)
          goto LABEL_47;
      }
      else
      {
        v36 = *(_DWORD *)(*((_QWORD *)v31 + 1) + 4 * v25);
        v781 = v22;
        LODWORD(v784) = v36;
        v37 = *((_QWORD *)a2 + 90);
        if (v37 >= *((_QWORD *)a2 + 91))
          goto LABEL_27;
LABEL_40:
        *(_QWORD *)v37 = 6;
        *(_QWORD *)(v37 + 8) = 0;
        *(_QWORD *)(v37 + 16) = v22;
        if (v22 != (char *)-8192 && v22 != (char *)-4096 && v22)
          llvm::ValueHandleBase::AddToUseList((unint64_t *)v37);
        *(_DWORD *)(v37 + 24) = v36;
        v27 = (char *)(v37 + 32);
        *((_QWORD *)a2 + 90) = v37 + 32;
        v22 += 40;
        if (v22 == v24)
          goto LABEL_47;
      }
    }
  }
  v27 = (char *)*((_QWORD *)a2 + 90);
LABEL_47:
  v732 = 0;
  v38 = (unint64_t)&v27[-*((_QWORD *)a2 + 89)] >> 5;
  v757 = 0;
  v756 = 0;
  v784 = 1;
  v785 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v787 = v785;
  v786 = v785;
  v788 = v785;
  v789 = v791;
  v733 = (llvm::BasicBlock ***)((char *)a2 + 1488);
  v790 = 0x400000000;
  v754[2] = (uint64_t *)a2;
  v755 = 0;
  v754[0] = (uint64_t *)&v757;
  v754[1] = (uint64_t *)&v756;
  k = &v771;
  v728 = (uint64_t *)((char *)a2 + 1616);
  v751 = 0;
  v752 = 0;
  v753 = 0;
  v781 = v783;
  LODWORD(v739) = v38;
  v782 = 0x4000000000;
  v41 = v736;
  v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
  v42 = (llvm::Function *)((char *)a2 + 8);
  i = v738;
  do
  {
    llvm::BitstreamCursor::advance(i, 0, (uint64_t)&v779);
    if ((v780 & 1) != 0)
    {
      v45 = v779;
      v779 = 0;
      *(_QWORD *)v41 = v45;
      goto LABEL_54;
    }
    v44 = (llvm::LLVMContext *)HIDWORD(v779);
    if ((_DWORD)v779 != 2)
    {
      if ((_DWORD)v779 == 1)
      {
        v46 = 7;
        goto LABEL_55;
      }
      if (!(_DWORD)v779)
      {
        v769 = "Malformed block";
        v773 = 259;
LABEL_54:
        v46 = 1;
        goto LABEL_55;
      }
      LODWORD(v782) = 0;
      Inst = 0;
      VirtualTypeID = -1;
      llvm::BitstreamCursor::readRecord(i, SHIDWORD(v779), (uint64_t)&v781, 0, (uint64_t)&v777);
      if ((v778 & 1) != 0)
      {
        v54 = v777;
        v777 = 0;
        *(_QWORD *)v41 = v54;
        goto LABEL_781;
      }
      v50 = v777;
      switch((int)v777)
      {
        case 1:
          if (!(_DWORD)v782 || !*(_QWORD *)v781)
            goto LABEL_354;
          std::vector<llvm::BasicBlock *>::resize((uint64_t)v733, *(_QWORD *)v781);
          v192 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::find(v728, (uint64_t)v735);
          if ((uint64_t *)(*((_QWORD *)a2 + 202) + 32 * *((unsigned int *)a2 + 408)) != v192)
          {
            v193 = v192;
            v194 = v192[2] - v192[1];
            v195 = *((_QWORD *)a2 + 187) - *((_QWORD *)a2 + 186);
            if (v194 >> 3 > (unint64_t)(v195 >> 3))
            {
              v196 = "Invalid ID";
              goto LABEL_821;
            }
            v725 = k;
            if ((v195 & 0x7FFFFFFF8) != 0)
            {
              v489 = 0;
              v490 = ((unint64_t)v194 >> 3);
              v491 = ((unint64_t)v195 >> 3);
              do
              {
                while (1)
                {
                  if (v489 < v490)
                  {
                    v494 = *(llvm::BasicBlock **)(v193[1] + 8 * v489);
                    if (v494)
                      break;
                  }
                  v492 = (llvm::LLVMContext *)*((_QWORD *)a2 + 53);
                  v773 = 257;
                  v493 = (llvm::BasicBlock *)operator new(0x48uLL);
                  *(_QWORD *)(*((_QWORD *)a2 + 186) + 8 * v489++) = llvm::BasicBlock::BasicBlock(v493, v492, (const llvm::Twine *)&v769, v735, 0);
                  if (v491 == v489)
                    goto LABEL_702;
                }
                llvm::BasicBlock::insertInto(v494, v735, 0);
                (*v733)[v489] = *(llvm::BasicBlock **)(v193[1] + 8 * v489);
                ++v489;
              }
              while (v491 != v489);
            }
LABEL_702:
            llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::erase((int32x2_t *)v728, v193);
            v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
            i = v738;
            goto LABEL_703;
          }
          v725 = k;
          v464 = (_QWORD *)*((_QWORD *)a2 + 186);
          v465 = (_QWORD *)*((_QWORD *)a2 + 187);
          for (i = v738; v464 != v465; ++v464)
          {
            v466 = (llvm::LLVMContext *)*((_QWORD *)a2 + 53);
            v773 = 257;
            v467 = (llvm::BasicBlock *)operator new(0x48uLL);
            *v464 = llvm::BasicBlock::BasicBlock(v467, v466, (const llvm::Twine *)&v769, v735, 0);
          }
LABEL_703:
          v757 = **v733;
          v46 = 4;
          k = v725;
          goto LABEL_782;
        case 2:
          LODWORD(v758) = 0;
          *(_QWORD *)&__p = 0;
          v762 = 0;
          v742[0] = 0;
            || (v199 = ((_DWORD)v758 + 1), v782 < v199))
          {
            v769 = "Invalid record";
            v773 = 259;
LABEL_255:
            v46 = 1;
            i = v738;
            goto LABEL_758;
          }
          DecodedBinaryOpcode = getDecodedBinaryOpcode(*((_QWORD *)v781 + v758), *v197);
          if (DecodedBinaryOpcode == -1)
          {
            v769 = "Invalid record";
            v773 = 259;
            v41 = v736;
            goto LABEL_255;
          }
          v481 = DecodedBinaryOpcode;
          v773 = 257;
          Inst = llvm::BinaryOperator::Create(DecodedBinaryOpcode, (uint64_t)v197, (uint64_t)v762, (const char **)&v769, 0);
          VirtualTypeID = v198;
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
          if (v782 <= v199)
          {
            v46 = 9;
            v41 = v736;
            i = v738;
            goto LABEL_758;
          }
          HIDWORD(v483) = v481 - 13;
          LODWORD(v483) = v481 - 13;
          v482 = v483 >> 1;
          if (v482 <= 6 && ((1 << v482) & 0x47) != 0)
          {
            v484 = *((_QWORD *)v781 + v199);
            if ((v484 & 2) != 0)
            {
              llvm::Instruction::setHasNoSignedWrap((uint64_t)Inst, 1);
              v484 = *((_QWORD *)v781 + v199);
            }
            v41 = v736;
            if ((v484 & 1) != 0)
              llvm::Instruction::setHasNoUnsignedWrap((uint64_t)Inst, 1);
            v46 = 9;
            i = v738;
            goto LABEL_758;
          }
          if (v481 > 0x1D)
            goto LABEL_1090;
          if (((1 << v481) & 0xC180000) != 0)
          {
            if ((*((_QWORD *)v781 + v199) & 1) != 0)
              llvm::Instruction::setHasNoUnsignedWrap((uint64_t)Inst, 1);
          }
          else if (v481 == 29)
          {
            if ((*((_QWORD *)v781 + v199) & 1) != 0)
              *((_BYTE *)Inst + 17) |= 2u;
          }
          else
          {
LABEL_1090:
            if (llvm::isa<llvm::FPMathOperator,llvm::Instruction *>((unsigned __int16 **)&Inst))
            {
              v44 = (llvm::LLVMContext *)(*((_QWORD *)v781 + v199) & 0x7E | (*((_QWORD *)v781 + v199) >> 7) & 1 | -(*((_QWORD *)v781 + v199) & 1));
              if ((_DWORD)v44)
                llvm::Instruction::setFastMathFlags((uint64_t)Inst, *((_QWORD *)v781 + v199) & 0x7E | ((*((_QWORD *)v781 + v199) & 0x80) != 0) | -(*((_QWORD *)v781 + v199) & 1));
            }
          }
          v46 = 9;
          v41 = v736;
          v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
          v42 = (llvm::Function *)((char *)a2 + 8);
          i = v738;
          goto LABEL_758;
        case 3:
          v219 = k;
          LODWORD(v758) = 0;
          *(_QWORD *)&__p = 0;
          v742[0] = 0;
          {
            v769 = "Invalid record";
            v773 = 259;
            v46 = 1;
            k = v219;
            goto LABEL_758;
          }
          v385 = (llvm::LLVMContext *)*((_QWORD *)v781 + v758);
          VirtualTypeID = v385;
          v387 = (v220 + 2);
          LODWORD(v758) = v220 + 2;
          DecodedCastOpcode = (llvm *)getDecodedCastOpcode(*((_QWORD *)v781 + v221));
          if ((_DWORD)DecodedCastOpcode == -1 || !TypeByID)
          {
            v769 = "Invalid record";
            v773 = 259;
            v46 = 1;
            goto LABEL_689;
          }
          v390 = (int)DecodedCastOpcode;
          v762 = 0;
          v391 = (llvm::Type **)__p;
          llvm::UpgradeBitCastInst(DecodedCastOpcode, (mlir::BytecodeWriterConfig *)__p, TypeByID, (llvm::Type *)&v762, v389);
          Inst = v392;
          if (v392)
          {
            if (v762)
            {
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v762);
              llvm::Instruction::insertInto(v762, (uint64_t)v757, (uint64_t ***)v757 + 6);
              v393 = Inst;
            }
            else
            {
              v393 = v392;
            }
            i = v738;
            k = v219;
          }
          else
          {
            k = v219;
            if (!llvm::CastInst::castIsValid(v390, *v391, (uint64_t)TypeByID))
            {
              v769 = "Invalid cast";
              v773 = 259;
              v46 = 1;
              i = v738;
              goto LABEL_758;
            }
            v773 = 257;
            llvm::CastInst::Create(v390);
            v393 = v542;
            Inst = v542;
            i = v738;
          }
          if (v782 > v387
            && *((_BYTE *)v393 + 16) == 67
            && (*((_QWORD *)v781 + v387) & 1) != 0)
          {
            llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v393, 1);
            v393 = Inst;
          }
          v164 = (char *)a2 + 840;
          v163 = v393;
          goto LABEL_888;
        case 4:
        case 30:
        case 43:
          v742[0] = 0;
          if ((_DWORD)v777 == 43)
          {
            v51 = *(_QWORD *)v781 != 0;
            v742[0] = 2;
            LODWORD(ContainedTypeID) = *((_DWORD *)v781 + 2);
          }
          else
          {
            v53 = 0;
            v51 = v777 == 30;
            LODWORD(ContainedTypeID) = -1;
          }
          v762 = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          {
            goto LABEL_120;
          }
          if (v53)
          {
            v78 = (uint64_t *)v762;
            v79 = *(_QWORD *)v762;
            if ((*(_DWORD *)(*(_QWORD *)v762 + 8) & 0xFE) == 0x12)
              v79 = **(_QWORD **)(v79 + 16);
            v80 = *(_QWORD *)(v79 + 24);
            if (v80 && v80 != v53)
            {
              v81 = "Explicit gep type does not match pointee type of pointer operand";
              goto LABEL_228;
            }
          }
          else
          {
            v307 = (_anonymous_namespace_::BitcodeReader *)*((_QWORD *)a2 + 68);
            v308 = *((_DWORD *)a2 + 140);
            v78 = (uint64_t *)v762;
            if ((*(_DWORD *)(*(_QWORD *)v762 + 8) & 0xFE) == 0x12)
          }
          v769 = k;
          v770 = (llvm *)0x1000000000;
          if ((_DWORD)v782 == v742[0])
          {
            v309 = 0;
            v310 = k;
          }
          else
          {
            do
            {
              v758 = 0;
              v745[0] = 0;
              {
                *(_QWORD *)&__p = "Invalid record";
                v768 = 259;
                v41 = v736;
                v46 = 1;
                i = v738;
                goto LABEL_583;
              }
              v311 = k;
              v312 = v758;
              v313 = v770;
              if (v770 >= (unint64_t)HIDWORD(v770))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v769, v311, v770 + 1, 8);
                v313 = v770;
              }
              *((_QWORD *)v769 + v313) = v312;
              v309 = (_DWORD)v770 + 1;
              LODWORD(v770) = (_DWORD)v770 + 1;
              k = v311;
            }
            while ((_DWORD)v782 != v742[0]);
            v310 = (uint64_t *)v769;
          }
          v768 = 257;
          v359 = llvm::GetElementPtrInst::Create(v53, v78, v310, v309, (const char **)&__p, 0);
          Inst = v359;
          VirtualTypeID = ContainedTypeID;
          if ((*((_DWORD *)v359 + 5) & 0x7FFFFFF) == 1)
          {
            i = v738;
            goto LABEL_576;
          }
          v361 = (const llvm::Value **)llvm::gep_type_begin(v359, v360);
          v363 = std::next[abi:nn180100]<llvm::generic_gep_type_iterator<llvm::Use const*>,0>(v361, v362, 1);
          v365 = v364;
          v359 = Inst;
          v366 = *((_DWORD *)Inst + 5);
          i = v738;
          if ((v366 & 0x40000000) != 0)
          {
            v368 = (char *)*((_QWORD *)Inst - 1);
            v367 = v366 & 0x7FFFFFF;
          }
          else
          {
            v367 = v366 & 0x7FFFFFF;
            v368 = (char *)Inst - 32 * v367;
          }
          if (v367 == 2)
            goto LABEL_576;
          v718 = v51;
          v419 = &v368[32 * v367];
          v420 = v368 + 64;
          while (1)
          {
            if ((v365 & 4) != 0)
            {
              v423 = 0;
            }
            else
            {
              v421 = *(unsigned int **)v420;
              if ((*(_DWORD *)(**(_QWORD **)v420 + 8) & 0xFE) == 0x12)
                llvm::Constant::getSplatValue((llvm::Constant *)v421, 0);
              v422 = v421 + 6;
              if (v421[8] >= 0x41)
                v422 = *(unsigned int **)v422;
              v423 = *v422;
            }
            v424 = *((_QWORD *)a2 + 68);
            v425 = *((unsigned int *)a2 + 140);
            if ((_DWORD)v425)
            {
              v426 = v425 - 1;
              v427 = (int *)(v424 + 32 * (((_DWORD)v425 - 1) & (37 * VirtualTypeID)));
              v428 = *v427;
              if (*v427 == VirtualTypeID)
                goto LABEL_560;
              v429 = k;
              v430 = 1;
              LODWORD(v431) = v426 & (37 * VirtualTypeID);
              while (1)
              {
                v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
                v42 = (llvm::Function *)((char *)a2 + 8);
                i = v738;
                k = v429;
                if (v428 == -1)
                  break;
                v432 = v431 + v430++;
                v431 = v432 & v426;
                v428 = *(_DWORD *)(v424 + 32 * v431);
                if (v428 == VirtualTypeID)
                {
                  v427 = (int *)(v424 + 32 * v431);
                  v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
                  v42 = (llvm::Function *)((char *)a2 + 8);
                  i = v738;
                  k = v429;
                  goto LABEL_560;
                }
              }
            }
            v427 = (int *)(v424 + 32 * v425);
LABEL_560:
            if (v427 == (int *)(v424 + 32 * v425) || v427[4] <= v423)
              v433 = -1;
            else
              v433 = *(_DWORD *)(*((_QWORD *)v427 + 1) + 4 * v423);
            VirtualTypeID = v433;
            TypeAtIndex = v365 & 0xFFFFFFFFFFFFFFF8;
            if ((v365 & 4) == 0 || !TypeAtIndex)
              TypeAtIndex = llvm::StructType::getTypeAtIndex((llvm::StructType *)TypeAtIndex, *v363);
            v435 = *(unsigned __int8 *)(TypeAtIndex + 8);
            if (TypeAtIndex && v435 == 17 || TypeAtIndex && (v435 & 0xFE) == 0x12)
            {
              v365 = *(_QWORD *)(TypeAtIndex + 24) | 4;
              v363 += 4;
              v420 += 32;
              if (v420 == v419)
                goto LABEL_575;
              continue;
            }
            if (v435 == 16)
              v365 = TypeAtIndex & 0xFFFFFFFFFFFFFFFBLL;
            else
              v365 = 0;
            v363 += 4;
            v420 += 32;
            if (v420 == v419)
            {
LABEL_575:
              v359 = Inst;
              v51 = v718;
LABEL_576:
              v436 = *(_QWORD *)v359;
              if ((*(_DWORD *)(*(_QWORD *)v359 + 8) & 0xFE) == 0x12)
                v436 = **(_QWORD **)(v436 + 16);
              v41 = v736;
              v437 = Inst;
              if ((*(_DWORD *)(*(_QWORD *)Inst + 8) & 0xFE) == 0x12)
              {
                v437 = Inst;
              }
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v437);
              if (v51)
                llvm::Instruction::setHasNoUnsignedWrap((uint64_t)Inst, 1);
              v46 = 9;
LABEL_583:
              v322 = v769;
              if (v769 == k)
                goto LABEL_758;
LABEL_836:
              free(v322);
              goto LABEL_758;
            }
          }
        case 5:
          v742[0] = 0;
          *(_QWORD *)&__p = 0;
          v762 = 0;
          v758 = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          Int1Ty = (llvm::Type *)llvm::Type::getInt1Ty(*((llvm::Type **)a2 + 53), v44);
          {
            v174 = (llvm::Type **)__p;
            data = v741.__r_.__value_.__l.__data_;
            {
              {
                v773 = 257;
                Inst = llvm::SelectInst::Create((Value *)v758, v174, (Value *)v762, (const char **)&v769, 0, 0, v177);
                VirtualTypeID = data;
                llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
                v46 = 9;
                v41 = v736;
                goto LABEL_654;
              }
            }
          }
          v81 = "Invalid record";
LABEL_228:
          v769 = v81;
          v773 = 259;
          v41 = v736;
          goto LABEL_652;
        case 6:
          LODWORD(v758) = 0;
          *(_QWORD *)&__p = 0;
          v762 = 0;
          v742[0] = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          {
            goto LABEL_412;
          }
          if ((*(_DWORD *)(*(_QWORD *)__p + 8) & 0xFE) != 0x12)
          {
            v265 = "Invalid type for value";
            goto LABEL_413;
          }
          v773 = 257;
          v223 = (llvm::Instruction *)llvm::ExtractElementInst::Create((llvm::ExtractElementInst *)__p, v762, (llvm::Value *)&v769, 0, v222);
          Inst = v223;
LABEL_389:
          v164 = (char *)a2 + 840;
          v163 = v223;
          goto LABEL_888;
        case 7:
          v742[0] = 0;
          *(_QWORD *)&__p = 0;
          v762 = 0;
          v758 = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          v745[0] = 0;
          {
            goto LABEL_412;
          }
          v183 = (llvm::InsertElementInst *)__p;
          if ((*(_DWORD *)(*(_QWORD *)__p + 8) & 0xFE) != 0x12)
          {
            v182 = "Invalid type for value";
            goto LABEL_755;
          }
          v184 = *(llvm::Type **)(*(_QWORD *)__p + 24);
          v185 = v741.__r_.__value_.__l.__data_;
          {
            v773 = 257;
            v188 = (llvm::Instruction *)llvm::InsertElementInst::Create(v183, v762, v758, (llvm::Value *)&v769, 0, v187);
            Inst = v188;
            VirtualTypeID = v185;
            goto LABEL_262;
          }
          goto LABEL_650;
        case 8:
          v742[0] = 0;
          *(_QWORD *)&__p = 0;
          v762 = 0;
          v758 = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          {
            goto LABEL_650;
          }
          v200 = (llvm::Value *)__p;
          v201 = (int)v741.__r_.__value_.__l.__data_;
          v745[0] = 0;
          {
            goto LABEL_650;
          }
          if ((*(_DWORD *)(*(_QWORD *)v200 + 8) & 0xFE) != 0x12
            || (v202 = v762, (*(_DWORD *)(*(_QWORD *)v762 + 8) & 0xFE) != 0x12))
          {
            v471 = "Invalid type for value";
            goto LABEL_651;
          }
          v203 = (llvm::ShuffleVectorInst *)llvm::User::operator new((llvm::User *)0x70, 2u);
          v773 = 257;
          Inst = (llvm::Instruction *)llvm::ShuffleVectorInst::ShuffleVectorInst(v203, v200, v202, v758, (const llvm::Twine *)&v769, 0);
          v204 = *(_QWORD *)Inst;
          v188 = Inst;
LABEL_262:
          v205 = (char *)a2 + 840;
          goto LABEL_751;
        case 9:
        case 28:
          LODWORD(v758) = 0;
          *(_QWORD *)&__p = 0;
          v762 = 0;
          v742[0] = 0;
          {
            goto LABEL_754;
          }
          v58 = (llvm::Type ***)__p;
          v59 = (int)v758;
          if (v782 <= v758)
          {
            v182 = "Invalid record: operand number exceeded available operands";
            goto LABEL_755;
          }
          v60 = *v58;
          v61 = *((_DWORD *)*v58 + 2);
          LOBYTE(v62) = v61;
          if ((v61 & 0xFE) == 0x12)
            v62 = *(_DWORD *)(*(_QWORD *)v60[2] + 8);
          v63 = (llvm::LLVMContext *)*((_QWORD *)v781 + v758);
          v64 = v62 < 4u || v62 == 5;
          v65 = v62 & 0xFD;
          v66 = v64 || v65 == 4;
          if (v66 && (v67 = v758 + 1, v782 > (int)v758 + 1))
          {
            LODWORD(v758) = (_DWORD)v758 + 1;
            v68 = *((_QWORD *)v781 + v67) & 0x7E | (*((_QWORD *)v781 + v67) >> 7) & 1 | -(*((_QWORD *)v781 + v67) & 1);
            if ((_DWORD)v782 != v59 + 2)
              goto LABEL_650;
          }
          else
          {
            v68 = 0;
            if ((_DWORD)v782 != (_DWORD)v758 + 1)
              goto LABEL_650;
          }
          if ((v61 & 0xFE) == 0x12)
            v61 = *(_DWORD *)(*(_QWORD *)v60[2] + 8);
          if (v61 < 4u || v61 == 5 || (v61 & 0xFD) == 4)
          {
            v468 = llvm::User::operator new((llvm::User *)0x48, 2u);
            v773 = 257;
            v469 = (llvm::Instruction *)llvm::FCmpInst::FCmpInst(v468, v63, v58, (uint64_t)v762, (const char **)&v769, 0);
          }
          else
          {
            v544 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 2u);
            v773 = 257;
            v469 = llvm::ICmpInst::ICmpInst(v544, v63, (uint64_t *)v58, (uint64_t)v762, (const char **)&v769);
          }
          Inst = v469;
          v470 = *(_QWORD *)v469;
          i = v738;
          if ((*(_DWORD *)(*(_QWORD *)v469 + 8) & 0xFE) == 0x12)
            v470 = **(_QWORD **)(v470 + 16);
          if (((_DWORD)(*v58)[1] & 0xFE) == 0x12)
          if (v68)
            llvm::Instruction::setFastMathFlags((uint64_t)Inst, v68);
          v163 = Inst;
          v164 = (char *)a2 + 840;
          goto LABEL_888;
        case 10:
          if (!(_DWORD)v782)
          {
            v158 = llvm::ReturnInst::Create(*((llvm::ReturnInst **)a2 + 53), 0, 0, v49);
            goto LABEL_593;
          }
          LODWORD(v762) = 0;
          *(_QWORD *)&__p = 0;
          LODWORD(v758) = 0;
          {
            goto LABEL_412;
          }
          v150 = llvm::ReturnInst::Create(*((llvm::ReturnInst **)a2 + 53), (llvm::LLVMContext *)__p, 0, v162);
LABEL_217:
          v163 = v150;
          Inst = v150;
          v164 = (char *)a2 + 840;
LABEL_888:
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v164, (uint64_t)v163);
          v46 = 9;
          goto LABEL_758;
        case 11:
          if ((v782 | 2) != 3)
            goto LABEL_354;
          v266 = *(unsigned int *)v781;
          v267 = *((_QWORD *)a2 + 186);
          v268 = (*((_QWORD *)a2 + 187) - v267) >> 3;
          if (v268 <= v266)
            goto LABEL_447;
          v269 = *(llvm::BranchInst **)(v267 + 8 * v266);
          if (!v269)
            goto LABEL_447;
          if ((_DWORD)v782 == 1)
          {
            Inst = llvm::BranchInst::Create(*(llvm::BranchInst **)(v267 + 8 * v266), 0, v48);
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
            v270 = v757;
            if (v757)
              goto LABEL_760;
            goto LABEL_779;
          }
          v498 = *((unsigned int *)v781 + 2);
          if (v268 <= v498)
            v499 = 0;
          else
            v499 = *(llvm::BasicBlock **)(v267 + 8 * v498);
          v538 = (llvm::Type *)llvm::Type::getInt1Ty(*((llvm::Type **)a2 + 53), v44);
          if (!v499 || !Value)
          {
LABEL_820:
            v196 = "Invalid record";
LABEL_821:
            v769 = v196;
            v773 = 259;
            goto LABEL_822;
          }
          v172 = (llvm::Instruction *)llvm::BranchInst::Create(v269, v499, (llvm::BasicBlock *)Value, 0, v541);
          Inst = v172;
          v171 = (char *)a2 + 840;
LABEL_223:
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v171, (uint64_t)v172);
          goto LABEL_686;
        case 12:
          v224 = *(_QWORD *)v781;
          if (*(_QWORD *)v781 >> 16 == 1205)
          {
            v225 = *((_DWORD *)v781 + 2);
            v227 = *((_DWORD *)v226 + 2);
            v229 = *((unsigned int *)v781 + 6);
            v230 = *((_QWORD *)a2 + 186);
            if (v229 >= (*((_QWORD *)a2 + 187) - v230) >> 3
              || (v231 = (llvm::Value *)v228) == 0
              || (v232 = *(llvm::BasicBlock **)(v230 + 8 * v229)) == 0)
            {
              v769 = "Invalid record";
              v773 = 259;
              v46 = 1;
              v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
              goto LABEL_782;
            }
            v233 = *((_DWORD *)v781 + 8);
            v234 = (llvm::SwitchInst *)llvm::User::operator new((llvm::User *)0x50);
            llvm::SwitchInst::SwitchInst(v234, v231, v232, v233, 0);
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v234);
            v715 = v233;
            if (!v233)
              goto LABEL_685;
            v235 = v227 >> 8;
            v236 = 0;
            v237 = 5;
            v722 = k;
LABEL_291:
            v769 = &v771;
            v770 = (llvm *)0x100000000;
            v238 = v237 + 1;
            v239 = (unsigned int *)v781;
            v240 = *((_QWORD *)v781 + v237);
            if (!(_DWORD)v240)
              goto LABEL_318;
            v241 = v236;
            v242 = 0;
            while (1)
            {
              v243 = v238 + 1;
              v244 = *((_QWORD *)v781 + v238);
              LODWORD(v245) = 1;
              DWORD2(__p) = 1;
              *(_QWORD *)&__p = 0;
              if (v235 >= 0x41)
              {
                v245 = *((_QWORD *)v781 + v243);
                v243 = v238 + 2;
              }
              llvm::readWideAPInt((uint64_t)v781 + 8 * v243, v245, v235, (uint64_t)&v762);
              if (DWORD2(__p) >= 0x41 && (_QWORD)__p)
                operator delete[]((void *)__p);
              *(_QWORD *)&__p = v762;
              DWORD2(__p) = v763;
              v238 = v245 + v243;
              if (v244)
              {
                v247 = llvm::ConstantInt::get(*((llvm::ConstantInt **)a2 + 53), (llvm::LLVMContext *)&__p, v246);
                v248 = v770;
                if (v770 >= (unint64_t)HIDWORD(v770))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v769, &v771, v770 + 1, 8);
                  v248 = v770;
                }
                *((_QWORD *)v769 + v248) = v247;
                LODWORD(v770) = (_DWORD)v770 + 1;
                if (DWORD2(__p) < 0x41)
                  goto LABEL_293;
              }
              else
              {
                if (v235 < 0x41)
                  LODWORD(v249) = 1;
                else
                  v249 = *((_QWORD *)v781 + v238++);
                llvm::readWideAPInt((uint64_t)v781 + 8 * v238, v249, v235, (uint64_t)&v762);
                if ((int)llvm::APInt::compare((llvm::APInt *)&__p, (const llvm::APInt *)&v762) <= 0)
                {
                  do
                  {
                    v251 = llvm::ConstantInt::get(*((llvm::ConstantInt **)a2 + 53), (llvm::LLVMContext *)&__p, v250);
                    v252 = v770;
                    if (v770 >= (unint64_t)HIDWORD(v770))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v769, &v771, v770 + 1, 8);
                      v252 = v770;
                    }
                    *((_QWORD *)v769 + v252) = v251;
                    LODWORD(v770) = (_DWORD)v770 + 1;
                    llvm::APInt::operator++((uint64_t **)&__p);
                  }
                  while ((int)llvm::APInt::compare((llvm::APInt *)&__p, (const llvm::APInt *)&v762) < 1);
                }
                if (v763 >= 0x41 && v762)
                  operator delete[](v762);
                v238 += v249;
                if (DWORD2(__p) < 0x41)
                  goto LABEL_293;
              }
              if ((_QWORD)__p)
                operator delete[]((void *)__p);
LABEL_293:
              if (++v242 == (_DWORD)v240)
              {
                v239 = (unsigned int *)v781;
                v236 = v241;
                k = v722;
LABEL_318:
                v253 = v239[2 * v238];
                v254 = *((_QWORD *)a2 + 186);
                v255 = k;
                if (v253 >= (*((_QWORD *)a2 + 187) - v254) >> 3)
                  v256 = 0;
                else
                  v256 = *(llvm::BasicBlock **)(v254 + 8 * v253);
                v257 = (llvm::ConstantInt **)v769;
                if ((_DWORD)v770)
                {
                  v258 = 8 * v770;
                  do
                  {
                    v259 = *v257++;
                    llvm::SwitchInst::addCase(v234, v259, v256);
                    v258 -= 8;
                  }
                  while (v258);
                  v257 = (llvm::ConstantInt **)v769;
                }
                k = v255;
                if (v257 != (llvm::ConstantInt **)&v771)
                  free(v257);
                v237 = v238 + 1;
                if (++v236 != v715)
                  goto LABEL_291;
LABEL_685:
                Inst = v234;
                v41 = v736;
                v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
                v42 = (llvm::Function *)((char *)a2 + 8);
LABEL_686:
                i = v738;
                v270 = v757;
                if (v757)
                  goto LABEL_760;
                goto LABEL_779;
              }
            }
          }
          if (v782 < 3 || (v782 & 1) == 0)
          {
LABEL_447:
            v769 = "Invalid record";
            v773 = 259;
            v46 = 1;
            goto LABEL_782;
          }
          v336 = *((unsigned int *)v781 + 4);
          v337 = *((_QWORD *)a2 + 186);
          if (v336 >= (*((_QWORD *)a2 + 187) - v337) >> 3)
            goto LABEL_707;
          if (!v334)
            goto LABEL_707;
          v338 = (llvm::Value *)v335;
          if (!v335)
            goto LABEL_707;
          v339 = *(llvm::BasicBlock **)(v337 + 8 * v336);
          if (!v339)
            goto LABEL_707;
          v724 = k;
          v340 = v782 + 0x1FFFFFFFDLL;
          v341 = (llvm::SwitchInst *)llvm::User::operator new((llvm::User *)0x50);
          llvm::SwitchInst::SwitchInst(v341, v338, v339, v340 >> 1, 0);
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v341);
          v41 = v736;
          if ((v340 >> 1))
          {
            v342 = 0;
            do
            {
              if (FnValueByID)
              {
                if (FnValueByID[16] == 16)
                  v344 = (llvm::Type *)FnValueByID;
                else
                  v344 = 0;
              }
              else
              {
                v344 = 0;
              }
              v345 = *((unsigned int *)v781 + 2 * (v342 + 4));
              v346 = *((_QWORD *)a2 + 186);
              if (v345 >= (*((_QWORD *)a2 + 187) - v346) >> 3
                || !v344
                || (v347 = *(llvm::BasicBlock **)(v346 + 8 * v345)) == 0)
              {
                if (v341)
                {
                  llvm::Instruction::~Instruction((llvm::UndefValue **)v341, v344);
                  llvm::User::operator delete(v566);
                }
                v769 = "Invalid record";
                v773 = 259;
                v46 = 1;
                i = v738;
                k = v724;
                goto LABEL_782;
              }
              llvm::SwitchInst::addCase(v341, v344, v347);
              v342 += 2;
            }
            while ((v340 & 0x1FFFFFFFELL) != v342);
          }
          Inst = v341;
          i = v738;
          k = v724;
          v270 = v757;
          if (v757)
            goto LABEL_760;
          goto LABEL_779;
        case 13:
          if (v782 <= 3)
            goto LABEL_354;
          v260 = *((_QWORD *)a2 + 180);
          v261 = (*(_DWORD *)v781 - 1);
          if (v261 >= (*((_QWORD *)a2 + 181) - v260) >> 3)
            v262 = 0;
          else
            v262 = *(_QWORD *)(v260 + 8 * v261);
          v394 = *((unsigned int *)v781 + 4);
          v395 = *((_QWORD *)a2 + 186);
          v396 = (*((_QWORD *)a2 + 187) - v395) >> 3;
          if (v396 <= v394)
            v709 = 0;
          else
            v709 = *(_QWORD *)(v395 + 8 * v394);
          v407 = *((_QWORD *)v781 + 1);
          LODWORD(v741.__r_.__value_.__l.__data_) = 4;
          v408 = *((unsigned int *)v781 + 6);
          if (v396 <= v408)
            v704 = 0;
          else
            v704 = *(_QWORD *)(v395 + 8 * v408);
          if ((v407 & 0x2000) != 0)
          {
            LODWORD(v741.__r_.__value_.__l.__data_) = 5;
            v716 = *((_DWORD *)v781 + 8);
            if (!v410 || (v409 = v410, *(_BYTE *)(v410 + 8) != 14))
            {
              v378 = "Explicit invoke type is not a function type";
              goto LABEL_902;
            }
          }
          else
          {
            v409 = 0;
            v716 = -1;
          }
          v758 = 0;
          v745[0] = 0;
          {
            goto LABEL_541;
          }
          v411 = v758;
          v412 = *(_QWORD *)v758;
          if (!*(_QWORD *)v758 || *(_BYTE *)(v412 + 8) != 15)
          {
            v378 = "Callee is not a pointer";
            goto LABEL_902;
          }
          if (v409)
          {
            v413 = *(_QWORD *)(v412 + 24);
            if (v413 && v413 != v409)
            {
              v378 = "Explicit invoke type does not match pointee type of callee operand";
              goto LABEL_902;
            }
          }
          else
          {
            v553 = v758;
            v716 = v554;
            if (!v555)
              goto LABEL_901;
            v411 = v553;
            v409 = v555;
            if (*(_BYTE *)(v555 + 8) != 14)
              goto LABEL_901;
          }
          v701 = v407;
          v556 = (*(_DWORD *)(v409 + 12) - 1);
          v557 = (int)v741.__r_.__value_.__l.__data_;
          if (v782 < (int)v556 + LODWORD(v741.__r_.__value_.__l.__data_))
            goto LABEL_900;
          v769 = &v771;
          v770 = (llvm *)0x1000000000;
          *(_QWORD *)&__p = v767;
          *((_QWORD *)&__p + 1) = 0x1000000000;
          v698 = (uint64_t)v411;
          if (!(_DWORD)v556)
            goto LABEL_866;
          v558 = 0;
          do
          {
            v559 = v558 + 1;
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v769, (uint64_t)v561);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&__p, v560);
            if (!*((_QWORD *)v769 + v770 - 1))
            {
              LODWORD(v741.__r_.__value_.__l.__data_) = v557 + v558;
              goto LABEL_997;
            }
            ++v558;
          }
          while (v556 != v559);
          v557 += v559;
LABEL_866:
          LODWORD(v741.__r_.__value_.__l.__data_) = v557;
          if (*(_DWORD *)(v409 + 8) < 0x100u)
          {
            if ((_DWORD)v782 != v557)
              goto LABEL_997;
          }
          else if ((_DWORD)v782 != v557)
          {
            while (1)
            {
              *(_QWORD *)v742 = 0;
              v746 = 0;
              {
                break;
              }
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v769, *(uint64_t *)v742);
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&__p, v746);
              if ((_DWORD)v782 == LODWORD(v741.__r_.__value_.__l.__data_))
                goto LABEL_983;
            }
LABEL_997:
            v762 = (llvm::Value *)"Invalid record";
            v765 = 259;
            v41 = v736;
            v42 = (llvm::Function *)((char *)a2 + 8);
            v46 = 1;
            v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
            goto LABEL_1063;
          }
LABEL_983:
          v600 = v751;
          if (v751 == v752)
          {
            v601 = (int8x16_t *)v751;
          }
          else
          {
            llvm::UpgradeOperandBundles((uint64_t *)&v751);
            v601 = (int8x16_t *)v751;
            v600 = v752;
          }
          v765 = 257;
          Inst = (llvm::Instruction *)llvm::InvokeInst::Create(v409, v698, v709, v704, (uint64_t *)v769, v770, v601, 0xAAAAAAAAAAAAAAABLL * ((v600 - (_BYTE *)v601) >> 4), (const char **)&v762, 0);
          std::vector<llvm::OperandBundleDefT<llvm::Value *>>::clear[abi:nn180100]((uint64_t *)&v751);
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
          v631 = Inst;
          *((_WORD *)Inst + 9) = *((_WORD *)Inst + 9) & 0xF003 | (4 * (v701 & 0x3FF));
          *((_QWORD *)v631 + 9) = v262;
          v41 = v736;
          if (*(_QWORD *)v736)
          {
            llvm::Value::deleteValue(Inst);
            v46 = 1;
          }
          else
          {
            v46 = 9;
          }
          v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
          v42 = (llvm::Function *)((char *)a2 + 8);
LABEL_1063:
          i = v738;
          v632 = (void *)__p;
          if ((uint64_t *)__p != v767)
            goto LABEL_1144;
          goto LABEL_835;
        case 15:
          v159 = (llvm::UnreachableInst *)llvm::User::operator new((llvm::User *)0x48, 0);
          Inst = llvm::UnreachableInst::UnreachableInst(v159, *((llvm::LLVMContext **)a2 + 53), 0);
          v160 = (char *)a2 + 840;
          v161 = (uint64_t)v159;
          goto LABEL_594;
        case 16:
          if (!(_DWORD)v782
            || (v707 = *(_DWORD *)v781,
          {
            v90 = "Invalid phi record";
            goto LABEL_780;
          }
          v142 = v140;
          v143 = v782 - 1;
          v758 = 0;
          v773 = 257;
          *(_QWORD *)v714 = v143 >> 1;
          v144 = (llvm::Value *)llvm::PHINode::Create(v140, (llvm::Type *)(v143 >> 1), (const char **)&v769, 0, v141);
          v758 = v144;
          if ((v782 & 1) == 0)
          {
            v145 = llvm::isa<llvm::FPMathOperator,llvm::Instruction *>((unsigned __int16 **)&v758);
            v144 = v758;
            if (!v145)
            {
              llvm::Value::deleteValue(v758);
              v265 = "Invalid phi record";
              goto LABEL_413;
            }
          }
          v721 = k;
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v144);
          v769 = (void *)1;
          v770 = (llvm *)-4096;
          v772 = -4096;
          v774 = -4096;
          v775 = -4096;
          if (v143 < 2)
          {
            v146 = v732;
            goto LABEL_198;
          }
          v444 = v142;
          LODWORD(v142) = 0;
          v146 = v732;
          while (1)
          {
            v445 = *((unsigned int *)v781 + 2 * (2 * (_DWORD)v142 + 2));
            v446 = *((_QWORD *)a2 + 186);
            if (v445 >= (*((_QWORD *)a2 + 187) - v446) >> 3 || (v447 = *(llvm::BasicBlock **)(v446 + 8 * v445)) == 0)
            {
              v732 = v146;
              llvm::Value::deleteValue(v758);
              *(_QWORD *)&__p = "Invalid phi BB";
              v768 = 259;
              v41 = v736;
              v46 = 1;
              goto LABEL_739;
            }
            if ((v769 & 1) != 0)
            {
              v449 = 4;
              v448 = &v770;
            }
            else
            {
              v448 = v770;
              v449 = v771;
              if (!(_DWORD)v771)
              {
                v450 = 0;
                goto LABEL_607;
              }
            }
            v452 = v449 - 1;
            LODWORD(v453) = (v449 - 1) & ((v447 >> 4) ^ (v447 >> 9));
            v451 = (llvm::Value **)&v448[2 * v453];
            v454 = *v451;
            if (*v451 == v447)
              goto LABEL_610;
            v462 = 1;
            while (v454 != (llvm::BasicBlock *)-4096)
            {
              v463 = v453 + v462++;
              v453 = v463 & v452;
              v454 = (llvm::BasicBlock *)v448[2 * v453];
              if (v454 == v447)
              {
                v451 = (llvm::Value **)&v448[2 * v453];
                v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
                v42 = (llvm::Function *)((char *)a2 + 8);
                i = v738;
                goto LABEL_610;
              }
            }
            v451 = (llvm::Value **)v776;
            v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
            v42 = (llvm::Function *)((char *)a2 + 8);
            i = v738;
            if ((v769 & 1) != 0)
              goto LABEL_610;
            v448 = v770;
            v450 = v771;
LABEL_607:
            v451 = (llvm::Value **)&v448[2 * v450];
LABEL_610:
            if ((v769 & 1) != 0)
              v455 = (llvm::Value **)v776;
            else
              v455 = (llvm::Value **)((char *)v770 + 16 * v771);
            if (v451 != v455)
            {
              llvm::PHINode::addIncoming(v758, v451[1], v447);
              v142 = (llvm::Type *)((_DWORD)v142 + 1);
              if (*(llvm::Type **)v714 == v142)
                goto LABEL_198;
              continue;
            }
            *(_QWORD *)&__p = v447;
            *((_QWORD *)&__p + 1) = v757;
            v456 = llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::lookup((uint64_t)&v784, (uint64_t *)&__p);
            if (v456)
            {
              v457 = (llvm::BasicBlock *)v456;
            }
            else
            {
              v457 = v146;
              if (!v146)
              {
                v458 = (llvm::LLVMContext *)*((_QWORD *)a2 + 53);
                *(_QWORD *)&__p = "phi.constexpr";
                v768 = 259;
                v457 = (llvm::BasicBlock *)operator new(0x48uLL);
                v146 = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock(v457, v458, (const llvm::Twine *)&__p, v735, 0);
              }
            }
            v459 = (2 * (_DWORD)v142) | 1;
            if (*((_BYTE *)a2 + 1712))
            else
            v461 = (llvm::Value *)ValueSigned;
            if (!ValueSigned)
            {
              llvm::Value::deleteValue(v758);
              v732 = v146;
              llvm::BasicBlock::eraseFromParent(v146);
              *(_QWORD *)&__p = "Invalid phi record";
              v768 = 259;
              v41 = v736;
              v46 = 1;
              i = v738;
              goto LABEL_739;
            }
            if (v457 == v146)
            {
              if (*((llvm::BasicBlock **)v457 + 6) == (llvm::BasicBlock *)((char *)v457 + 48))
              {
                v146 = v457;
              }
              else
              {
                *(_QWORD *)&__p = v447;
                *((_QWORD *)&__p + 1) = v757;
                v767[0] = (uint64_t)v457;
                llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::try_emplace<llvm::BasicBlock *>((uint64_t)&v784, &__p, v767);
                v146 = 0;
              }
            }
            llvm::PHINode::addIncoming(v758, v461, v447);
            v762 = v447;
            v763 = (uint64_t)v461;
            llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::insert((uint64_t)&v769, &v762, (uint64_t)&__p);
            i = v738;
            v142 = (llvm::Type *)((_DWORD)v142 + 1);
            if (*(llvm::Type **)v714 == v142)
            {
LABEL_198:
              Inst = v758;
              VirtualTypeID = v707;
              v732 = v146;
              if ((v782 & 1) != 0)
              {
                v46 = 9;
                v41 = v736;
              }
              else
              {
                v147 = *((_DWORD *)v781 + 2 * v782 - 2);
                v44 = (llvm::LLVMContext *)(v147 & 0x7E | (v147 >> 7) & 1 | -(v147 & 1));
                v41 = v736;
                if ((_DWORD)v44)
                  llvm::Instruction::setFastMathFlags((uint64_t)v758, v147 & 0x7E | ((v147 & 0x80) != 0) | -(v147 & 1));
                v46 = 9;
              }
LABEL_739:
              k = v721;
              if ((v769 & 1) == 0)
                llvm::deallocate_buffer(v770, (void *)(16 * v771));
              goto LABEL_758;
            }
          }
        case 19:
          if ((v782 & 0xFFFFFFFE) != 4)
            goto LABEL_354;
          v178 = *((_QWORD *)v781 + 3);
          LODWORD(v762) = *(_DWORD *)v781;
          if ((v178 & 0x40) != 0)
          {
            v181 = (llvm::PointerType **)v179;
          }
          else
          {
            LODWORD(v762) = (_DWORD)v180;
            if (!v181)
            {
              v182 = "Missing element type for old-style alloca";
              goto LABEL_755;
            }
          }
          v379 = *((_DWORD *)v781 + 2);
          LOWORD(v758) = 0;
          if (*(_QWORD *)v41)
            goto LABEL_653;
          if (!v181 || !v381)
          {
LABEL_650:
            v471 = "Invalid record";
            goto LABEL_651;
          }
          v382 = k;
          v383 = *((_QWORD *)a2 + 54);
          if ((_DWORD)v782 == 5)
            v384 = (llvm::Type *)*((_QWORD *)v781 + 4);
          else
            v384 = (llvm::Type *)*(unsigned int *)(v383 + 260);
          v769 = &v773;
          v770 = (llvm *)&v773;
          v771 = 4;
          LODWORD(v772) = 0;
          if (BYTE1(v758))
          {
            v545 = v758;
LABEL_891:
            v564 = llvm::User::operator new((llvm::User *)0x50, 1u);
            v768 = 257;
            v565 = (llvm::Instruction *)llvm::AllocaInst::AllocaInst((uint64_t)v564, v181, v384, v381, v545, (const char **)&__p, 0);
            *((_WORD *)v565 + 9) = v178 & 0x80 | (((v178 >> 5) & 1) << 6) | *((_WORD *)v565 + 9) & 0xFF3F;
            Inst = v565;
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
            v46 = 9;
            v41 = v736;
            goto LABEL_892;
          }
          if ((llvm::Type::isSized((uint64_t)v181) & 1) != 0)
          {
            llvm::DataLayout::getPrefTypeAlign((llvm::DataLayout *)(v383 + 256), (llvm::Type *)v181);
            v545 = v563;
            LOWORD(v758) = v563 | 0x100;
            goto LABEL_891;
          }
          *(_QWORD *)&__p = "alloca of unsized type";
          v768 = 259;
          v41 = v736;
          v46 = 1;
LABEL_892:
          k = v382;
          v322 = v770;
          i = v738;
          if (v770 != v769)
            goto LABEL_836;
          goto LABEL_758;
        case 20:
          LODWORD(v758) = 0;
          v762 = 0;
          v742[0] = 0;
          {
            goto LABEL_412;
          }
          v271 = v758;
          v272 = (_DWORD)v758 + 3;
          if ((_DWORD)v782 != (_DWORD)v758 + 2 && (_DWORD)v782 != v272)
            goto LABEL_412;
          v273 = (uint64_t *)v762;
          if (*(_BYTE *)(*(_QWORD *)v762 + 8) != 15)
            goto LABEL_497;
          if ((_DWORD)v782 == v272)
          {
            v274 = (_DWORD)v758 + 1;
            LODWORD(v758) = (_DWORD)v758 + 1;
            v275 = (llvm::LLVMContext *)*((_QWORD *)v781 + v271);
            VirtualTypeID = v275;
          }
          else
          {
            VirtualTypeID = v532;
            if (!v533)
            {
              v471 = "Missing element type for old-style load";
              goto LABEL_651;
            }
            v276 = (llvm::Type *)v533;
            v274 = v271;
          }
          if (*(_QWORD *)v41)
            goto LABEL_653;
          LOWORD(v741.__r_.__value_.__l.__data_) = 0;
          if (*(_QWORD *)v41)
            goto LABEL_653;
          v769 = &v773;
          v770 = (llvm *)&v773;
          v771 = 4;
          LODWORD(v772) = 0;
          if (v741.__r_.__value_.__s.__data_[1])
          {
            v534 = v741.__r_.__value_.__s.__data_[0];
          }
          else
          {
            if ((llvm::Type::isSized((uint64_t)v276) & 1) == 0)
            {
              *(_QWORD *)&__p = "load of unsized type";
              v768 = 259;
              v46 = 1;
              v609 = v770;
              if (v770 == v769)
              {
LABEL_1014:
                v41 = v736;
                v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
                v42 = (llvm::Function *)((char *)a2 + 8);
                i = v738;
                goto LABEL_758;
              }
LABEL_1013:
              free(v609);
              goto LABEL_1014;
            }
            llvm::DataLayout::getABITypeAlign((llvm::DataLayout *)(*((_QWORD *)a2 + 54) + 256), v276);
            v534 = v607;
            LOWORD(v741.__r_.__value_.__l.__data_) = v607 | 0x100;
          }
          v608 = llvm::User::operator new((llvm::User *)0x50, 1u);
          v768 = 257;
          Inst = (llvm::Instruction *)llvm::LoadInst::LoadInst((uint64_t)v608, v276, (uint64_t)v273, (const char **)&__p, *((_QWORD *)v781 + v274 + 1) != 0, v534, 0);
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v608);
          v46 = 9;
          v609 = v770;
          if (v770 == v769)
            goto LABEL_1014;
          goto LABEL_1013;
        case 23:
          if (v782 <= 2)
            goto LABEL_354;
          v165 = *(_DWORD *)v781;
          VirtualTypeID = *((_DWORD *)v781 + 4);
          if (!v166)
            goto LABEL_820;
          if (!v167)
            goto LABEL_820;
          v169 = (llvm::Type *)v168;
          if (!v168)
            goto LABEL_820;
          v170 = (llvm::VAArgInst *)llvm::User::operator new((llvm::User *)0x48, 1u);
          v773 = 257;
          Inst = llvm::VAArgInst::VAArgInst(v170, (llvm::Value *)v167, v169, (const char **)&v769, 0);
          v171 = (char *)a2 + 840;
          v172 = v170;
          goto LABEL_223;
        case 24:
        case 44:
          v742[0] = 0;
          v762 = 0;
          v758 = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          v745[0] = 0;
          {
            goto LABEL_412;
          }
          if (v50 == 44)
          {
            {
              goto LABEL_412;
            }
          }
          else
          {
            v315 = (int)v314;
            v745[0] = v314;
          }
          v317 = v742[0];
          if ((_DWORD)v782 != v742[0] + 2)
            goto LABEL_412;
          v318 = (llvm::Type **)v762;
          v319 = v758;
          if (*(_QWORD *)v41)
            goto LABEL_653;
          LOWORD(v746) = 0;
          if (*(_QWORD *)v41)
            goto LABEL_653;
          v769 = &v773;
          v770 = (llvm *)&v773;
          v771 = 4;
          LODWORD(v772) = 0;
          if (BYTE1(v746))
            goto LABEL_409;
          if ((llvm::Type::isSized((uint64_t)*v318) & 1) != 0)
          {
            llvm::DataLayout::getABITypeAlign((llvm::DataLayout *)(*((_QWORD *)a2 + 54) + 256), *v318);
            LOWORD(v746) = v320 | 0x100;
LABEL_409:
            v321 = llvm::User::operator new((llvm::User *)0x50, 2u);
            Inst = (llvm::Instruction *)llvm::StoreInst::StoreInst((uint64_t)v321, (mlir::BytecodeWriterConfig *)v318, (uint64_t)v319, *((_QWORD *)v781 + (v317 + 1)) != 0, v746, 0);
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v321);
            v46 = 9;
          }
          else
          {
            *(_QWORD *)&__p = "store of unsized type";
            v768 = 259;
            v46 = 1;
          }
          v322 = v770;
          i = v738;
          if (v770 == v769)
            goto LABEL_758;
          goto LABEL_836;
        case 26:
          LODWORD(v758) = 0;
          v762 = 0;
          v742[0] = 0;
          {
            goto LABEL_412;
          }
          v263 = v782;
          v264 = v758;
          if ((_DWORD)v758 == (_DWORD)v782)
          {
            v265 = "EXTRACTVAL: Invalid instruction with 0 indices";
            goto LABEL_413;
          }
          v397 = (uint64_t *)v762;
          v398 = *(llvm::Type **)v762;
          *(_QWORD *)&__p = v767;
          *((_QWORD *)&__p + 1) = 0x400000000;
          VirtualTypeID = v742[0];
          while (1)
          {
            if ((*((_DWORD *)v398 + 2) & 0xFE) != 0x10)
            {
              LODWORD(v758) = v264;
              v769 = "EXTRACTVAL: Invalid type";
              v773 = 259;
              v46 = 1;
              goto LABEL_879;
            }
            v405 = *((_QWORD *)v781 + v264);
            if (HIDWORD(v405))
            {
              LODWORD(v758) = v264;
              v769 = "Invalid value";
              v773 = 259;
              v46 = 1;
              i = v738;
              goto LABEL_879;
            }
            v406 = k;
            if (*((_DWORD *)v398 + 2) == 16)
            {
              if (v405 >= *((unsigned int *)v398 + 3))
              {
                LODWORD(v758) = v264;
                v562 = "EXTRACTVAL: Invalid struct index";
LABEL_878:
                v769 = v562;
                v773 = 259;
                v46 = 1;
                i = v738;
LABEL_879:
                v322 = (void *)__p;
                v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
                if ((uint64_t *)__p == v767)
                  goto LABEL_758;
                goto LABEL_836;
              }
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&__p, *((_QWORD *)v781 + v264));
              v399 = (llvm::Type **)(*((_QWORD *)v398 + 2) + 8 * v405);
              v400 = VirtualTypeID;
              v401 = (_anonymous_namespace_::BitcodeReader *)*((_QWORD *)a2 + 68);
              v402 = *((_DWORD *)a2 + 140);
              v403 = v405;
            }
            else
            {
              if (v405 >= *((_QWORD *)v398 + 4))
              {
                LODWORD(v758) = v264;
                v562 = "EXTRACTVAL: Invalid array index";
                goto LABEL_878;
              }
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&__p, *((_QWORD *)v781 + v264));
              v399 = (llvm::Type **)*((_QWORD *)v398 + 2);
              v400 = VirtualTypeID;
              v401 = (_anonymous_namespace_::BitcodeReader *)*((_QWORD *)a2 + 68);
              v402 = *((_DWORD *)a2 + 140);
              v403 = 0;
            }
            v398 = *v399;
            VirtualTypeID = v404;
            ++v264;
            i = v738;
            k = v406;
            if (v263 == v264)
            {
              LODWORD(v758) = v263;
              v773 = 257;
              Inst = llvm::ExtractValueInst::Create(v397, (unsigned int *)__p, DWORD2(__p), (const char **)&v769, 0);
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
              v46 = 9;
              goto LABEL_879;
            }
          }
        case 27:
          v742[0] = 0;
          v762 = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          {
            goto LABEL_412;
          }
          v758 = 0;
          v745[0] = 0;
          {
            goto LABEL_412;
          }
          v121 = v782;
          v122 = v742[0];
          if (v742[0] == (_DWORD)v782)
          {
            v56 = "INSERTVAL: Invalid instruction with 0 indices";
            goto LABEL_80;
          }
          *(_QWORD *)&__p = v767;
          *((_QWORD *)&__p + 1) = 0x400000000;
          v476 = (llvm::Type **)v762;
          v477 = *(llvm::Type **)v762;
          while ((*((_DWORD *)v477 + 2) & 0xFE) == 0x10)
          {
            v478 = *((_QWORD *)v781 + v122);
            if (HIDWORD(v478))
            {
              v742[0] = v122;
              v479 = "Invalid value";
              goto LABEL_909;
            }
            if (*((_DWORD *)v477 + 2) == 16)
            {
              if (v478 >= *((unsigned int *)v477 + 3))
              {
                v742[0] = v122;
                v479 = "INSERTVAL: Invalid struct index";
                goto LABEL_909;
              }
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&__p, *((_QWORD *)v781 + v122));
              v477 = *(llvm::Type **)(*((_QWORD *)v477 + 2) + 8 * v478);
              if (v121 == ++v122)
                goto LABEL_672;
            }
            else
            {
              if (v478 >= *((_QWORD *)v477 + 4))
              {
                v742[0] = v122;
                v479 = "INSERTVAL: Invalid array index";
                goto LABEL_909;
              }
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&__p, *((_QWORD *)v781 + v122));
              v477 = (llvm::Type *)**((_QWORD **)v477 + 2);
              if (v121 == ++v122)
              {
LABEL_672:
                v742[0] = v121;
                if (v477 != *(llvm::Type **)v758)
                {
                  v479 = "Inserted value type doesn't match aggregate type";
                  goto LABEL_909;
                }
                v773 = 257;
                Inst = llvm::InsertValueInst::Create(v476, (uint64_t)v758, (void *)__p, DWORD2(__p), (const char **)&v769, 0);
                VirtualTypeID = v741.__r_.__value_.__l.__data_;
                llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
                v46 = 9;
LABEL_910:
                v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
                v322 = (void *)__p;
                if ((uint64_t *)__p == v767)
                  goto LABEL_758;
                goto LABEL_836;
              }
            }
          }
          v742[0] = v122;
          v479 = "INSERTVAL: Invalid type";
LABEL_909:
          v769 = v479;
          v773 = 259;
          v46 = 1;
          goto LABEL_910;
        case 29:
          v742[0] = 0;
          *(_QWORD *)&__p = 0;
          v762 = 0;
          v758 = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          v745[0] = 0;
          {
            v769 = "Invalid record";
            v773 = 259;
            v46 = 1;
            goto LABEL_654;
          }
          v485 = k;
          v486 = (Value *)v758;
          v487 = *(_QWORD *)v758;
          if (*(_QWORD *)v758 && (*(_DWORD *)(v487 + 8) & 0xFE) == 0x12)
            v487 = *(_QWORD *)(v487 + 24);
          if (v487 == llvm::Type::getInt1Ty(*((llvm::Type **)a2 + 53), v279))
          {
            v773 = 257;
            Inst = llvm::SelectInst::Create(v486, v277, (Value *)v762, (const char **)&v769, 0, 0, v488);
            VirtualTypeID = v278;
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
            v543 = v742[0];
            if (v782 > v742[0]
              && llvm::isa<llvm::FPMathOperator,llvm::Instruction *>((unsigned __int16 **)&Inst))
            {
              v44 = (llvm::LLVMContext *)(*((_QWORD *)v781 + v543) & 0x7E | (*((_QWORD *)v781 + v543) >> 7) & 1 | -(*((_QWORD *)v781 + v543) & 1));
              if ((_DWORD)v44)
                llvm::Instruction::setFastMathFlags((uint64_t)Inst, *((_QWORD *)v781 + v543) & 0x7E | ((*((_QWORD *)v781 + v543) & 0x80) != 0) | -(*((_QWORD *)v781 + v543) & 1));
            }
            v46 = 9;
            v41 = v736;
          }
          else
          {
            v769 = "Invalid type for value";
            v773 = 259;
            v41 = v736;
            v46 = 1;
          }
          i = v738;
          k = v485;
          goto LABEL_758;
        case 31:
          if (v782 <= 1)
            goto LABEL_354;
          v206 = *(_DWORD *)v781;
          if (!v207)
            goto LABEL_447;
          v209 = (llvm::Value *)v208;
          if (!v208)
            goto LABEL_447;
          v123 = k;
          v210 = (v782 - 2);
          v211 = (llvm::IndirectBrInst *)llvm::User::operator new((llvm::User *)0x50);
          llvm::IndirectBrInst::IndirectBrInst(v211, v209, v210, 0);
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v211);
          if (!(_DWORD)v210)
            goto LABEL_271;
          for (j = 0; j != v210; ++j)
          {
            v214 = *((unsigned int *)v781 + 2 * (j + 2));
            v215 = *((_QWORD *)a2 + 186);
            if (v214 >= (*((_QWORD *)a2 + 187) - v215) >> 3 || (v212 = *(llvm::Type **)(v215 + 8 * v214)) == 0)
            {
              if (v211)
              {
                llvm::Instruction::~Instruction((llvm::UndefValue **)v211, v212);
                llvm::User::operator delete(v497);
              }
              v769 = "Invalid record";
              v773 = 259;
LABEL_711:
              v46 = 1;
              i = v738;
              k = v123;
              goto LABEL_782;
            }
            llvm::IndirectBrInst::addDestination(v211, v212);
          }
LABEL_271:
          Inst = v211;
          i = v738;
LABEL_778:
          k = v123;
          v270 = v757;
          if (v757)
            goto LABEL_760;
          goto LABEL_779;
        case 33:
          Inst = v216;
          if (!v216)
            goto LABEL_354;
          v217 = (uint64_t)v216;
          v748 = v755;
          if (v755)
            llvm::MetadataTracking::track((uint64_t)&v748, (unsigned __int8 *)v755, 1);
          llvm::Instruction::setDebugLoc(v217, (unsigned __int8 **)&v748);
          v44 = v748;
          if (!v748)
            goto LABEL_793;
          v218 = (unsigned __int8 **)&v748;
          goto LABEL_792;
        case 34:
          if (v782 <= 2)
            goto LABEL_354;
          v280 = *((_QWORD *)a2 + 180);
          v281 = (*(_DWORD *)v781 - 1);
          if (v281 >= (*((_QWORD *)a2 + 181) - v280) >> 3)
            v282 = 0;
          else
            v282 = *(_QWORD *)(v280 + 8 * v281);
          v414 = 2;
          LODWORD(v741.__r_.__value_.__l.__data_) = 2;
          v415 = *((_QWORD *)v781 + 1);
          if ((v415 & 0x20000) != 0)
          {
            v414 = 3;
            LODWORD(v741.__r_.__value_.__l.__data_) = 3;
            v416 = *((_DWORD *)v781 + 4) & 0x7E | (*((_DWORD *)v781 + 4) >> 7) & 1 | -(*((_DWORD *)v781 + 4) & 1);
            if (!v416)
            {
              v378 = "Fast math flags indicator set for call with no FMF";
              goto LABEL_902;
            }
          }
          else
          {
            v416 = 0;
          }
          if ((v415 & 0x8000) != 0)
          {
            LODWORD(v741.__r_.__value_.__l.__data_) = v414 + 1;
            v717 = (llvm::LLVMContext *)*((_QWORD *)v781 + v414);
            if (!v417 || *(_BYTE *)(v417 + 8) != 14)
            {
              v378 = "Explicit call type is not a function type";
              goto LABEL_902;
            }
          }
          else
          {
            v417 = 0;
            LODWORD(v717) = -1;
          }
          v710 = v282;
          v418 = v417;
          v758 = 0;
          v745[0] = 0;
          {
LABEL_541:
            v378 = "Invalid record";
            goto LABEL_902;
          }
          v472 = *(_QWORD *)v758;
          if (!*(_QWORD *)v758 || *(_BYTE *)(v472 + 8) != 15)
          {
            v378 = "Callee is not a pointer type";
            goto LABEL_902;
          }
          v705 = v758;
          if (v418)
          {
            v473 = *(_QWORD *)(v472 + 24);
            if (v473 && v473 != v418)
            {
              v378 = "Explicit call type does not match pointee type of callee operand";
              goto LABEL_902;
            }
          }
          else
          {
            if (!v567 || (v418 = v567, *(_BYTE *)(v567 + 8) != 14))
            {
LABEL_901:
              v378 = "Callee is not of pointer to function type";
              goto LABEL_902;
            }
          }
          v702 = v416;
          v568 = (*(_DWORD *)(v418 + 12) - 1);
          v569 = (int)v741.__r_.__value_.__l.__data_;
          if (v782 < (int)v568 + LODWORD(v741.__r_.__value_.__l.__data_))
          {
LABEL_900:
            v769 = "Insufficient operands to call";
            v773 = 259;
            v41 = v736;
            goto LABEL_81;
          }
          v726 = k;
          v769 = &v771;
          v770 = (llvm *)0x1000000000;
          *(_QWORD *)&__p = v767;
          *((_QWORD *)&__p + 1) = 0x1000000000;
          if (!(_DWORD)v568)
            goto LABEL_922;
          v570 = 0;
          do
          {
            v571 = v570 + 1;
            v573 = *(llvm::Type **)(*(_QWORD *)(v418 + 16) + 8 * v570 + 8);
            if (*((_BYTE *)v573 + 8) == 8)
            {
              v574 = *((unsigned int *)v781 + 2 * (v569 + v570));
              v575 = *((_QWORD *)a2 + 186);
              if (v574 >= (*((_QWORD *)a2 + 187) - v575) >> 3)
                v576 = 0;
              else
                v576 = *(unsigned __int8 **)(v575 + 8 * v574);
            }
            else
            {
            }
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v769, (uint64_t)v576);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&__p, v572);
            if (!*((_QWORD *)v769 + v770 - 1))
            {
              LODWORD(v741.__r_.__value_.__l.__data_) = v569 + v570;
              goto LABEL_1019;
            }
            ++v570;
          }
          while (v568 != v571);
          v569 += v571;
LABEL_922:
          LODWORD(v741.__r_.__value_.__l.__data_) = v569;
          if (*(_DWORD *)(v418 + 8) < 0x100u)
          {
            if ((_DWORD)v782 != v569)
              goto LABEL_1019;
          }
          else if ((_DWORD)v782 != v569)
          {
            while (1)
            {
              *(_QWORD *)v742 = 0;
              v746 = 0;
              {
                break;
              }
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v769, *(uint64_t *)v742);
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&__p, v746);
              if ((_DWORD)v782 == LODWORD(v741.__r_.__value_.__l.__data_))
                goto LABEL_1016;
            }
LABEL_1019:
            v612 = "Invalid record";
            goto LABEL_1020;
          }
LABEL_1016:
          v610 = v751;
          if (v751 == v752)
          {
            v611 = (int8x16_t *)v751;
          }
          else
          {
            llvm::UpgradeOperandBundles((uint64_t *)&v751);
            v611 = (int8x16_t *)v751;
            v610 = v752;
          }
          v765 = 257;
          Inst = (llvm::Instruction *)llvm::CallInst::Create(v418, (uint64_t)v705, (uint64_t *)v769, v770, v611, 0xAAAAAAAAAAAAAAABLL * ((v610 - (_BYTE *)v611) >> 4), (const char **)&v762, 0);
          std::vector<llvm::OperandBundleDefT<llvm::Value *>>::clear[abi:nn180100]((uint64_t *)&v751);
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
          v633 = Inst;
          v634 = v415 & 1;
          if ((v415 & 0x4000) != 0)
            v634 = 2;
          if ((v415 & 0x10000) != 0)
            v634 = 3;
          *((_WORD *)Inst + 9) = *((_WORD *)Inst + 9) & 0xF000 | (4 * ((v415 >> 1) & 0x3FF)) | v634;
          *((_QWORD *)v633 + 9) = v710;
          if (*(_QWORD *)v736)
          {
            llvm::Value::deleteValue(Inst);
            v46 = 1;
            goto LABEL_1081;
          }
          if (v702)
          {
            if (!llvm::isa<llvm::FPMathOperator,llvm::Instruction *>((unsigned __int16 **)&Inst))
            {
              v612 = "Fast-math-flags specified for call without floating-point scalar or vector return type";
LABEL_1020:
              v762 = (llvm::Value *)v612;
              v765 = 259;
              v46 = 1;
LABEL_1081:
              if ((uint64_t *)__p != v767)
                free((void *)__p);
              if (v769 != &v771)
                free(v769);
LABEL_1102:
              v41 = v736;
              v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
              v42 = (llvm::Function *)((char *)a2 + 8);
LABEL_1103:
              i = v738;
              k = v726;
              goto LABEL_758;
            }
            llvm::Instruction::setFastMathFlags((uint64_t)Inst, v702);
          }
          v46 = 9;
          goto LABEL_1081;
        case 35:
          if (!Inst || v782 <= 3)
            goto LABEL_354;
          v123 = k;
          v124 = (_DWORD)v782 == 5 && *((_QWORD *)v781 + 4) != 0;
          v438 = *(_DWORD *)v781;
          v439 = *((_DWORD *)v781 + 2);
          v440 = *((_DWORD *)v781 + 4);
          v441 = *((_DWORD *)v781 + 6);
          if (v440)
          {
            MetadataFwdRefOrLoad = llvm::MetadataLoader::getMetadataFwdRefOrLoad(v40, v440 - 1);
            v443 = llvm::dyn_cast_or_null<llvm::MDNode,llvm::Metadata>(MetadataFwdRefOrLoad);
            if (!v443)
            {
              v769 = "Invalid record";
              v773 = 259;
              v41 = v736;
              goto LABEL_711;
            }
          }
          else
          {
            v443 = 0;
          }
          if (!v441)
          {
            v496 = 0;
            k = v123;
LABEL_734:
            if (v443)
            {
              v511 = *((_QWORD *)v443 + 1);
              v512 = (_QWORD *)(v511 & 0xFFFFFFFFFFFFFFF8);
              if ((v511 & 4) != 0)
                v512 = (_QWORD *)*v512;
              Impl = (unsigned __int8 *)llvm::DILocation::getImpl(v512, v438, v439, (uint64_t)v443, (uint64_t)v496, v124, 0, 1);
              llvm::DebugLoc::DebugLoc((unsigned __int8 **)&v769, Impl);
            }
            else
            {
              v769 = 0;
            }
            llvm::DebugLoc::operator=((unsigned __int8 **)&v755, (unsigned __int8 **)&v769);
            if (v769)
              llvm::MetadataTracking::untrack((uint64_t)&v769, (unsigned __int8 *)v769);
            v41 = v736;
            i = v738;
            v525 = Inst;
            v747 = v755;
            if (v755)
              llvm::MetadataTracking::track((uint64_t)&v747, (unsigned __int8 *)v755, 1);
            llvm::Instruction::setDebugLoc((uint64_t)v525, (unsigned __int8 **)&v747);
            v44 = v747;
            if (v747)
            {
              v218 = (unsigned __int8 **)&v747;
LABEL_792:
              llvm::MetadataTracking::untrack((uint64_t)v218, (unsigned __int8 *)v44);
            }
LABEL_793:
            Inst = 0;
            v46 = 4;
            goto LABEL_782;
          }
          v495 = llvm::MetadataLoader::getMetadataFwdRefOrLoad(v40, v441 - 1);
          v496 = llvm::dyn_cast_or_null<llvm::MDNode,llvm::Metadata>(v495);
          k = v123;
          if (v496)
            goto LABEL_734;
LABEL_707:
          v769 = "Invalid record";
          v773 = 259;
          v41 = v736;
LABEL_822:
          v46 = 1;
          i = v738;
          goto LABEL_782;
        case 36:
          if ((_DWORD)v782 != 2)
            goto LABEL_354;
          v123 = k;
          v148 = 4;
          switch(*(_DWORD *)v781)
          {
            case 0:
            case 1:
            case 2:
              v769 = "Invalid record";
              v773 = 259;
              v46 = 1;
              goto LABEL_782;
            case 3:
              goto LABEL_773;
            case 4:
              v148 = 5;
              goto LABEL_773;
            case 5:
              v148 = 6;
              goto LABEL_773;
            default:
              v148 = 7;
LABEL_773:
              v522 = *((_QWORD *)v781 + 1);
              if ((*((_QWORD *)v781 + 1) & 0xFFFFFFFELL) != 0)
              {
                if (*((_QWORD *)a2 + 226) <= v522)
                  LOBYTE(v522) = 1;
                else
                  LOBYTE(v522) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v522);
              }
              v523 = llvm::User::operator new((llvm::User *)0x50, 0);
              Inst = llvm::FenceInst::FenceInst((uint64_t)v523, *((llvm::Type **)a2 + 53), v148, v522, 0);
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v523);
              break;
          }
          goto LABEL_778;
        case 37:
          v125 = v782;
          v742[0] = 0;
          *(_QWORD *)&__p = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          {
            goto LABEL_412;
          }
          v126 = (uint64_t *)__p;
          if (*(_BYTE *)(*(_QWORD *)__p + 8) != 15)
          {
            v378 = "Cmpxchg operand is not a pointer type";
LABEL_902:
            v769 = v378;
            v773 = 259;
            v41 = v736;
            goto LABEL_414;
          }
          v762 = 0;
          v128 = v127;
          v758 = 0;
          v713 = (llvm::Type **)v762;
          {
            v769 = "Invalid record";
            v773 = 259;
            v41 = v736;
            v46 = 1;
            goto LABEL_758;
          }
          v132 = *((_QWORD *)v781 + v742[0] + 1);
          switch((int)v132)
          {
            case 0:
            case 1:
              v769 = "Invalid record";
              v773 = 259;
              v41 = v736;
              v133 = v736;
              goto LABEL_875;
            case 2:
              break;
            case 3:
              LODWORD(v132) = 4;
              break;
            case 4:
              LODWORD(v132) = 5;
              break;
            case 5:
              LODWORD(v132) = 6;
              break;
            default:
              LODWORD(v132) = 7;
              break;
          }
          v616 = *((_QWORD *)v781 + v742[0] + 2);
          v726 = k;
          if ((*((_QWORD *)v781 + v742[0] + 2) & 0xFFFFFFFELL) != 0)
          {
            if (*((_QWORD *)a2 + 226) <= v616)
              LOBYTE(v616) = 1;
            else
              LOBYTE(v616) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v616);
          }
          if (!*(_QWORD *)v736)
          {
            if (v125 > 6)
            {
              v617 = *((_QWORD *)v781 + v131);
              switch((int)v617)
              {
                case 0:
                case 1:
                  v615 = "Invalid record";
                  goto LABEL_1055;
                case 2:
                  goto LABEL_1045;
                case 3:
                  LOWORD(v617) = 4;
                  goto LABEL_1045;
                case 4:
                  LOWORD(v617) = 5;
                  goto LABEL_1045;
                case 5:
                  LOWORD(v617) = 6;
                  goto LABEL_1045;
                default:
                  LOWORD(v617) = 7;
                  goto LABEL_1045;
              }
            }
            LODWORD(v617) = dword_1812861FC[(int)v132 - 2];
LABEL_1045:
            llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(*((_QWORD *)a2 + 54) + 256), (Type *)*v713);
            v769 = (void *)((unint64_t)(v618 + 7) >> 3);
            v770 = (llvm *)(v619 != 0);
            v620 = 63 - __clz(llvm::TypeSize::operator unsigned long long(&v769, v619));
            v621 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x50, 3u);
            v622 = llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(v621, (uint64_t)v126, (uint64_t ***)v713, (uint64_t)v758, v620, v132, v617, v616, 0);
            Inst = v622;
            v624 = v781;
            v625 = *((_WORD *)v622 + 9) & 0xFFFE | (*((_QWORD *)v781 + v130) != 0);
            *((_WORD *)v622 + 9) = v625;
            if (v125 > 7)
            {
              *((_WORD *)v622 + 9) = v625 & 0xFFFD | (2 * (v624[(v130 + 4)] != 0));
              v628 = llvm::Type::getInt1Ty(*((llvm::Type **)a2 + 53), v623);
              v630 = *(_QWORD *)Inst;
              v769 = (void *)__PAIR64__(v629, v128);
              v626 = Inst;
            }
            else
            {
              llvm::Instruction::insertInto(v622, (uint64_t)v757, (uint64_t ***)v757 + 6);
              v745[0] = 0;
              v773 = 257;
              v626 = llvm::ExtractValueInst::Create((uint64_t *)Inst, v745, 1, (const char **)&v769, 0);
              Inst = v626;
            }
            VirtualTypeID = v128;
            goto LABEL_1101;
          }
          goto LABEL_1042;
        case 38:
        case 59:
          v55 = v782;
          LODWORD(v758) = 0;
          *(_QWORD *)&__p = 0;
          v742[0] = 0;
          {
            v56 = "Invalid record";
LABEL_80:
            v769 = v56;
            v773 = 259;
LABEL_81:
            v46 = 1;
            v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
LABEL_758:
            if (v46 != 9)
            {
LABEL_782:
              if ((v778 & 1) != 0)
              {
                v524 = v777;
                v777 = 0;
                if (v524)
                  (*(void (**)(uint64_t))(*(_QWORD *)v524 + 8))(v524);
              }
              goto LABEL_55;
            }
            v270 = v757;
            if (v757)
            {
LABEL_760:
              if (v751 == v752)
              {
                llvm::Instruction::insertInto(Inst, (uint64_t)v270, (uint64_t ***)v270 + 6);
                if (*((unsigned __int8 *)Inst + 16) - 29 <= 0xA)
                {
                  ++v756;
                  v520 = *((_QWORD *)a2 + 186);
                  if (v756 >= (unint64_t)((*((_QWORD *)a2 + 187) - v520) >> 3))
                    v521 = 0;
                  else
                    v521 = *(llvm::BasicBlock **)(v520 + 8 * v756);
                  v757 = v521;
                }
                if (*(_BYTE *)(*(_QWORD *)Inst + 8) == 7)
                {
                  v46 = 0;
                }
                else
                {
                  llvm::BitcodeReaderValueList::assignValue(v740, Inst, v739, VirtualTypeID, v41);
                  v46 = *(_QWORD *)v41 != 0;
                  LODWORD(v739) = v739 + 1;
                }
                goto LABEL_782;
              }
              llvm::Value::deleteValue(Inst);
              v90 = "Operand bundles found with no consumer";
            }
            else
            {
LABEL_779:
              llvm::Value::deleteValue(Inst);
              v90 = "Invalid instruction with no BB";
            }
LABEL_780:
            v769 = v90;
            v773 = 259;
LABEL_781:
            v46 = 1;
            goto LABEL_782;
          }
          v82 = __p;
          if (*(_BYTE *)(*(_QWORD *)__p + 8) != 15)
            goto LABEL_130;
          v762 = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = -1;
          if (v50 == 38)
          {
            v84 = (int)v83;
            LODWORD(v741.__r_.__value_.__l.__data_) = (_DWORD)v83;
            {
LABEL_130:
              v769 = "Invalid record";
              v773 = 259;
              v46 = 1;
              v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
              goto LABEL_758;
            }
          }
          {
            goto LABEL_130;
          }
          v375 = (int)v758;
          v376 = (_DWORD)v758 + 4;
          v377 = (_DWORD)v758 + 5;
          if (v55 != (_DWORD)v758 + 4 && v55 != v377)
          {
            v769 = "Invalid record";
            v773 = 259;
            v42 = (llvm::Function *)((char *)a2 + 8);
            v46 = 1;
            v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
            goto LABEL_758;
          }
          v474 = v781;
          DecodedRMWOperation = getDecodedRMWOperation(*((_QWORD *)v781 + v758));
          if (DecodedRMWOperation >= 0x11)
          {
            v769 = "Invalid record";
            v773 = 259;
LABEL_799:
            v42 = (llvm::Function *)((char *)a2 + 8);
            v46 = 1;
            v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
            i = v738;
            goto LABEL_758;
          }
          v526 = DecodedRMWOperation;
          v527 = v474[v375 + 1];
          v528 = v474[v375 + 2];
          switch((int)v528)
          {
            case 0:
            case 1:
              v769 = "Invalid record";
              v773 = 259;
              v41 = v736;
              goto LABEL_799;
            case 2:
              break;
            case 3:
              LOWORD(v528) = 4;
              break;
            case 4:
              LOWORD(v528) = 5;
              break;
            case 5:
              LOWORD(v528) = 6;
              break;
            default:
              LOWORD(v528) = 7;
              break;
          }
          v593 = v474[v375 + 3];
          v594 = v593;
          if ((v593 & 0xFFFFFFFE) != 0)
          {
            if (*((_QWORD *)a2 + 226) <= (unint64_t)v593)
              v594 = 1;
            else
              v594 = *(_BYTE *)(*((_QWORD *)a2 + 225) + v593);
          }
          *(_QWORD *)v719 = v527;
          v727 = k;
          LOWORD(v745[0]) = 0;
          if (v55 != v377)
            goto LABEL_975;
          if (*(_QWORD *)v736)
          {
            v46 = 1;
            v42 = (llvm::Function *)((char *)a2 + 8);
          }
          else
          {
            if (BYTE1(v745[0]))
            {
              v595 = v762;
              LOBYTE(v596) = v745[0];
            }
            else
            {
LABEL_975:
              v595 = v762;
              llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(*((_QWORD *)a2 + 54) + 256), *(Type **)v762);
              v769 = (void *)((unint64_t)(v597 + 7) >> 3);
              v770 = (llvm *)(v598 != 0);
              v596 = 63 - __clz(llvm::TypeSize::operator unsigned long long(&v769, v598));
            }
            v42 = (llvm::Function *)((char *)a2 + 8);
            v599 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x50, 2u);
            Inst = llvm::AtomicRMWInst::AtomicRMWInst(v599, v526, v82, (uint64_t)v595, v596, v528, v594, 0);
            VirtualTypeID = v741.__r_.__value_.__l.__data_;
            *((_WORD *)Inst + 9) = *((_WORD *)Inst + 9) & 0xFFFE | (*(_QWORD *)v719 != 0);
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v599);
            v46 = 9;
          }
          v41 = v736;
          v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
          i = v738;
          k = v727;
          goto LABEL_758;
        case 39:
          LODWORD(v762) = 0;
          *(_QWORD *)&__p = 0;
          LODWORD(v758) = 0;
          {
            goto LABEL_412;
          }
          v150 = llvm::ResumeInst::Create((llvm::ResumeInst *)__p, 0, v149);
          goto LABEL_217;
        case 40:
        case 47:
          if ((_DWORD)v777 == 47)
          {
            if (v782 <= 2)
              goto LABEL_412;
          }
          else if (v782 <= 3)
          {
LABEL_412:
            v265 = "Invalid record";
LABEL_413:
            v769 = v265;
            v773 = 259;
LABEL_414:
            v46 = 1;
            goto LABEL_758;
          }
          LODWORD(v762) = 1;
          VirtualTypeID = *(_DWORD *)v781;
          if (!v86)
            goto LABEL_754;
          v88 = (llvm::LandingPadInst *)v86;
          if (v50 == 40)
          {
            *(_QWORD *)&__p = 0;
            LODWORD(v758) = 0;
            {
              goto LABEL_754;
            }
            v89 = k;
            if ((*((_WORD *)v735 + 9) & 8) != 0)
            {
              PersonalityFn = llvm::Function::getPersonalityFn(v735);
              if (PersonalityFn != (_QWORD)__p)
              {
                v769 = "Personality function mismatch";
                v773 = 259;
                i = v738;
                goto LABEL_757;
              }
            }
            else
            {
              llvm::Function::setPersonalityFn(v735, (llvm::Constant *)__p);
            }
            v357 = v762;
          }
          else
          {
            v89 = k;
            v357 = 1;
          }
          v515 = *((_QWORD *)v781 + v357) != 0;
          LODWORD(v762) = v357 + 2;
          v516 = (llvm::Type *)*((_QWORD *)v781 + v357 + 1);
          v773 = 257;
          v517 = llvm::LandingPadInst::Create(v88, v516, (const char **)&v769, 0, v87);
          *((_WORD *)v517 + 9) = *((_WORD *)v517 + 9) & 0xFFFE | v515;
          for (k = v89; (_DWORD)v516; LODWORD(v516) = (_DWORD)v516 - 1)
          {
            LODWORD(v762) = (_DWORD)v762 + 1;
            *(_QWORD *)&__p = 0;
            LODWORD(v758) = 0;
            {
              i = v738;
              if (v517)
              {
                llvm::Instruction::~Instruction((llvm::UndefValue **)v517, v518);
                llvm::User::operator delete(v519);
              }
              goto LABEL_754;
            }
            llvm::LandingPadInst::addClause(v517, (llvm::Constant *)__p);
          }
          Inst = v517;
          v205 = (char *)a2 + 840;
          v188 = v517;
LABEL_751:
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v205, (uint64_t)v188);
          v46 = 9;
          goto LABEL_654;
        case 41:
          LODWORD(v762) = 0;
          *(_QWORD *)&__p = 0;
          LODWORD(v758) = 0;
          {
            goto LABEL_412;
          }
          v134 = v762;
          v135 = (_DWORD)v762 + 5;
          if ((_DWORD)v782 != (_DWORD)v762 + 4 && (_DWORD)v782 != v135)
            goto LABEL_412;
          v136 = (uint64_t *)__p;
          if (*(_BYTE *)(*(_QWORD *)__p + 8) != 15)
          {
LABEL_497:
            v182 = "Load operand is not a pointer type";
            goto LABEL_755;
          }
          if ((_DWORD)v782 == v135)
          {
            v137 = (_DWORD)v762 + 1;
            LODWORD(v762) = (_DWORD)v762 + 1;
            v138 = (llvm::LLVMContext *)*((_QWORD *)v781 + v134);
            VirtualTypeID = v138;
          }
          else
          {
            VirtualTypeID = v529;
            if (!v530)
            {
              v471 = "Missing element type for old style atomic load";
LABEL_651:
              v769 = v471;
              v773 = 259;
LABEL_652:
LABEL_653:
              v46 = 1;
LABEL_654:
              i = v738;
              goto LABEL_758;
            }
            v139 = (llvm::Type *)v530;
            v137 = v134;
          }
          if (*(_QWORD *)v41)
            goto LABEL_653;
          v531 = *((_QWORD *)v781 + v137 + 2);
          switch((int)v531)
          {
            case 0:
            case 4:
            case 5:
              goto LABEL_804;
            case 1:
              break;
            case 2:
              LOWORD(v531) = 2;
              break;
            case 3:
              LOWORD(v531) = 4;
              break;
            default:
              LOWORD(v531) = 7;
              break;
          }
          v605 = *((_QWORD *)v781 + v137);
          if (!v605)
          {
            v769 = "Invalid record";
            v773 = 259;
            v41 = v736;
            v46 = 1;
            v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
            i = v738;
            goto LABEL_758;
          }
          v219 = k;
          v606 = *((_QWORD *)v781 + v137 + 3);
          if ((*((_QWORD *)v781 + v137 + 3) & 0xFFFFFFFELL) != 0)
          {
            if (*((_QWORD *)a2 + 226) <= v606)
              LOBYTE(v606) = 1;
            else
              LOBYTE(v606) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v606);
          }
          LOWORD(v742[0]) = 0;
          if (*(_QWORD *)v736)
            goto LABEL_1049;
          if (BYTE1(v742[0]))
          {
            v627 = llvm::User::operator new((llvm::User *)0x50, 1u);
            v773 = 257;
            Inst = (llvm::Instruction *)llvm::LoadInst::LoadInst((uint64_t)v627, v139, (uint64_t)v136, (const char **)&v769, *((_QWORD *)v781 + v137 + 1) != 0, v742[0], v531, v606, 0);
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v627);
            v46 = 9;
          }
          else
          {
            v769 = "Alignment missing from atomic load";
            v773 = 259;
LABEL_1049:
            v46 = 1;
          }
          v41 = v736;
          v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
          v42 = (llvm::Function *)((char *)a2 + 8);
          goto LABEL_689;
        case 42:
        case 45:
          LODWORD(v758) = 0;
          *(_QWORD *)&__p = 0;
          v762 = 0;
          v742[0] = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          {
            goto LABEL_754;
          }
          v57 = (uint64_t *)v762;
          if (*(_BYTE *)(*(_QWORD *)v762 + 8) != 15)
            goto LABEL_754;
          if (v50 == 45)
          {
            {
              goto LABEL_754;
            }
          }
          else
          {
            v370 = (int)v369;
            LODWORD(v741.__r_.__value_.__l.__data_) = (_DWORD)v369;
          }
          v372 = v758;
          if ((_DWORD)v782 != (_DWORD)v758 + 4)
            goto LABEL_754;
          v373 = (mlir::BytecodeWriterConfig *)__p;
          if (*(_QWORD *)v41)
            goto LABEL_653;
          v374 = *((_QWORD *)v781 + (v372 + 2));
          switch((int)v374)
          {
            case 0:
            case 3:
            case 5:
LABEL_804:
              v769 = "Invalid record";
              v773 = 259;
              v41 = v736;
              goto LABEL_652;
            case 1:
              break;
            case 2:
              LOWORD(v374) = 2;
              break;
            case 4:
              LOWORD(v374) = 5;
              break;
            default:
              LOWORD(v374) = 7;
              break;
          }
          v602 = *((_QWORD *)v781 + (v372 + 3));
          v219 = k;
          if ((*((_QWORD *)v781 + (v372 + 3)) & 0xFFFFFFFELL) != 0)
          {
            if (*((_QWORD *)a2 + 226) <= v602)
              LOBYTE(v602) = 1;
            else
              LOBYTE(v602) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v602);
          }
          v603 = *((_QWORD *)v781 + v372);
          if (!v603)
          {
            v769 = "Invalid record";
            v773 = 259;
            v41 = v736;
            v42 = (llvm::Function *)((char *)a2 + 8);
            v46 = 1;
            v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
            goto LABEL_689;
          }
          LOWORD(v745[0]) = 0;
          if (*(_QWORD *)v736)
          {
            v46 = 1;
LABEL_1000:
            v42 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_1001;
          }
          if (BYTE1(v745[0]))
          {
            v604 = llvm::User::operator new((llvm::User *)0x50, 2u);
            Inst = (llvm::Instruction *)llvm::StoreInst::StoreInst((uint64_t)v604, v373, (uint64_t)v57, *((_QWORD *)v781 + (v372 + 1)) != 0, v745[0], v374, v602, 0);
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v604);
            v46 = 9;
            goto LABEL_1000;
          }
          v769 = "Alignment missing from atomic store";
          v773 = 259;
          v42 = (llvm::Function *)((char *)a2 + 8);
          v46 = 1;
LABEL_1001:
          v41 = v736;
          v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
LABEL_689:
          i = v738;
          k = v219;
          goto LABEL_758;
        case 46:
          v91 = v782;
          v742[0] = 0;
          *(_QWORD *)&__p = 0;
          LODWORD(v741.__r_.__value_.__l.__data_) = 0;
          {
            goto LABEL_412;
          }
          v92 = (uint64_t *)__p;
          if (*(_BYTE *)(*(_QWORD *)__p + 8) == 15)
          {
            v762 = 0;
            v745[0] = 0;
            {
              v758 = 0;
              v93 = (llvm::Type **)v762;
              v94 = v745[0];
              {
                v95 = v742[0];
                v96 = v742[0] + 3;
                if (v91 < v742[0] + 3 || (v97 = v742[0] + 6, v91 > v742[0] + 6))
                {
                  v99 = "Invalid record";
LABEL_874:
                  v769 = v99;
                  v773 = 259;
                  v41 = v736;
                  v133 = v736;
                  v42 = (llvm::Function *)((char *)a2 + 8);
LABEL_875:
                  v46 = 1;
                  i = v738;
                  goto LABEL_758;
                }
                v98 = *((_QWORD *)v781 + v742[0] + 1);
                switch((int)v98)
                {
                  case 0:
                  case 1:
                    v99 = "Invalid cmpxchg success ordering";
                    goto LABEL_874;
                  case 2:
                    break;
                  case 3:
                    LOWORD(v98) = 4;
                    break;
                  case 4:
                    LOWORD(v98) = 5;
                    break;
                  case 5:
                    LOWORD(v98) = 6;
                    break;
                  default:
                    LOWORD(v98) = 7;
                    break;
                }
                v613 = *((_QWORD *)v781 + v742[0] + 2);
                v720 = v98;
                v726 = k;
                v711 = *((_QWORD *)v781 + v742[0]);
                if ((*((_QWORD *)v781 + v742[0] + 2) & 0xFFFFFFFELL) != 0)
                {
                  if (*((_QWORD *)a2 + 226) <= v613)
                    LOBYTE(v613) = 1;
                  else
                    LOBYTE(v613) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v613);
                }
                if (!*(_QWORD *)v736)
                {
                  v614 = *((_QWORD *)v781 + v96);
                  if (v614 > 5)
                  {
                    LOWORD(v614) = 7;
                  }
                  else
                  {
                    if (((1 << v614) & 0x33) != 0)
                    {
                      v615 = "Invalid cmpxchg failure ordering";
LABEL_1055:
                      v769 = v615;
                      v773 = 259;
                      v41 = v736;
                      v42 = (llvm::Function *)((char *)a2 + 8);
                      v46 = 1;
                      v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
                      goto LABEL_1103;
                    }
                    if ((_DWORD)v614 != 2)
                      LOWORD(v614) = 4;
                  }
                  v706 = *((_QWORD *)v781 + v95 + 4);
                  LOWORD(v746) = 0;
                  if (v91 != v97)
                    goto LABEL_1099;
                  if (!*(_QWORD *)v736)
                  {
                    if (BYTE1(v746))
                    {
                      v635 = v746;
                      goto LABEL_1100;
                    }
LABEL_1099:
                    llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(*((_QWORD *)a2 + 54) + 256), (Type *)*v93);
                    v769 = (void *)((unint64_t)(v636 + 7) >> 3);
                    v770 = (llvm *)(v637 != 0);
                    v635 = 63 - __clz(llvm::TypeSize::operator unsigned long long(&v769, v637));
                    LOWORD(v746) = v635 | 0x100;
LABEL_1100:
                    v638 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x50, 3u);
                    Inst = llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(v638, (uint64_t)v92, (uint64_t ***)v93, (uint64_t)v758, v635, v720, v614, v613, 0);
                    *((_WORD *)Inst + 9) = *((_WORD *)Inst + 9) & 0xFFFC | (v711 != 0) | (2 * (v706 != 0));
                    v640 = llvm::Type::getInt1Ty(*((llvm::Type **)a2 + 53), v639);
                    v642 = *(_QWORD *)Inst;
                    v769 = (void *)__PAIR64__(v641, v94);
                    v626 = Inst;
LABEL_1101:
                    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)v626);
                    v46 = 9;
                    goto LABEL_1102;
                  }
                }
LABEL_1042:
                v46 = 1;
                goto LABEL_1102;
              }
LABEL_120:
              v769 = "Invalid record";
              v773 = 259;
              v41 = v736;
LABEL_756:
LABEL_757:
              v46 = 1;
              goto LABEL_758;
            }
LABEL_754:
            v182 = "Invalid record";
          }
          else
          {
            v182 = "Cmpxchg operand is not a pointer type";
          }
LABEL_755:
          v769 = v182;
          v773 = 259;
          goto LABEL_756;
        case 48:
          if ((unint64_t)v782 - 1 >= 2)
            goto LABEL_354;
          TokenTy = (llvm::Type *)llvm::Type::getTokenTy(*((llvm::Type **)a2 + 53), v44);
          if (!v102)
            goto LABEL_354;
          if ((_DWORD)v782 == 2)
          {
            v104 = *((unsigned int *)v781 + 2);
            v105 = *((_QWORD *)a2 + 186);
            if (v104 >= (*((_QWORD *)a2 + 187) - v105) >> 3 || (v106 = *(llvm::Value **)(v105 + 8 * v104)) == 0)
            {
LABEL_354:
              v90 = "Invalid record";
              goto LABEL_780;
            }
          }
          else
          {
            v106 = 0;
          }
          v158 = llvm::CleanupReturnInst::Create((llvm::CleanupReturnInst *)v102, v106, 0, v103);
LABEL_593:
          v161 = (uint64_t)v158;
          Inst = v158;
          v160 = (char *)a2 + 840;
LABEL_594:
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v160, v161);
          v270 = v757;
          if (!v757)
            goto LABEL_779;
          goto LABEL_760;
        case 49:
          if ((_DWORD)v782 != 2)
            goto LABEL_354;
          v151 = (llvm::Type *)llvm::Type::getTokenTy(*((llvm::Type **)a2 + 53), v44);
          if (!v153)
            goto LABEL_354;
          v155 = *((unsigned int *)v781 + 2);
          v156 = *((_QWORD *)a2 + 186);
          if (v155 >= (*((_QWORD *)a2 + 187) - v156) >> 3)
            goto LABEL_354;
          v157 = *(llvm::Value **)(v156 + 8 * v155);
          if (!v157)
            goto LABEL_354;
          v158 = (llvm::Instruction *)llvm::CatchReturnInst::Create((llvm::CatchReturnInst *)v153, v157, 0, v154);
          goto LABEL_593;
        case 50:
        case 51:
          if (v782 <= 1)
            goto LABEL_354;
          v69 = (llvm::Type *)llvm::Type::getTokenTy(*((llvm::Type **)a2 + 53), v44);
          v72 = 2;
          LODWORD(v758) = 2;
          v73 = *((_DWORD *)v781 + 2);
          *(_QWORD *)&__p = v767;
          *((_QWORD *)&__p + 1) = 0x200000000;
          if (v73)
          {
            v74 = k;
            do
            {
              v762 = 0;
              v742[0] = 0;
              {
                v769 = "Invalid record";
                v773 = 259;
                v46 = 1;
                k = v74;
                goto LABEL_588;
              }
              v75 = v762;
              v76 = DWORD2(__p);
              if (DWORD2(__p) >= (unint64_t)HIDWORD(__p))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v767, DWORD2(__p) + 1, 8);
                v76 = DWORD2(__p);
              }
              *(_QWORD *)(__p + 8 * v76) = v75;
              v77 = ++DWORD2(__p);
              --v73;
            }
            while (v73);
            v72 = (int)v758;
            k = v74;
          }
          else
          {
            v77 = 0;
          }
          if ((_DWORD)v782 == v72)
          {
            v773 = 257;
            if (v50 == 51)
              v358 = llvm::CleanupPadInst::Create((uint64_t)v71, (uint64_t *)__p, v77, (const char **)&v769, 0);
            else
              v358 = llvm::CatchPadInst::Create((uint64_t)v71, (uint64_t *)__p, v77, (const char **)&v769, 0);
            Inst = v358;
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
            v46 = 9;
          }
          else
          {
            v769 = "Invalid record";
            v773 = 259;
            v46 = 1;
          }
LABEL_588:
          v322 = (void *)__p;
          if ((uint64_t *)__p == v767)
            goto LABEL_758;
          goto LABEL_836;
        case 52:
          if (v782 <= 1)
            goto LABEL_354;
          v107 = (llvm::Type *)llvm::Type::getTokenTy(*((llvm::Type **)a2 + 53), v44);
          v110 = *((_DWORD *)v781 + 2);
          *(_QWORD *)&__p = v767;
          *((_QWORD *)&__p + 1) = 0x200000000;
          if (v110)
          {
            v111 = k;
            v112 = 0;
            for (m = 0; m != v110; ++m)
            {
              v114 = *((unsigned int *)v781 + 2 * (m + 2));
              v115 = *((_QWORD *)a2 + 186);
              if (v114 >= (*((_QWORD *)a2 + 187) - v115) >> 3 || (v116 = *(_QWORD *)(v115 + 8 * v114)) == 0)
              {
                v769 = "Invalid record";
                v773 = 259;
                v46 = 1;
                i = v738;
                k = v111;
                goto LABEL_725;
              }
              if (v112 >= HIDWORD(__p))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v767, v112 + 1, 8);
                v112 = DWORD2(__p);
              }
              *(_QWORD *)(__p + 8 * v112) = v116;
              v112 = ++DWORD2(__p);
            }
            v500 = m + 2;
            k = v111;
          }
          else
          {
            v500 = 2;
          }
          v501 = v500 + 1;
          if ((_DWORD)v782 == v500 + 1)
          {
            v502 = *((unsigned int *)v781 + 2 * v500);
            v503 = *((_QWORD *)a2 + 186);
            if (v502 >= (*((_QWORD *)a2 + 187) - v503) >> 3 || (v504 = *(llvm::BasicBlock **)(v503 + 8 * v502)) == 0)
            {
LABEL_724:
              v769 = "Invalid record";
              v773 = 259;
              v46 = 1;
              i = v738;
              goto LABEL_725;
            }
            v500 = v501;
          }
          else
          {
            v504 = 0;
          }
          if ((_DWORD)v782 != v500)
            goto LABEL_724;
          v505 = (llvm::Value *)v109;
          v506 = k;
          v773 = 257;
          v507 = (llvm::CatchSwitchInst *)llvm::User::operator new((llvm::User *)0x50);
          llvm::CatchSwitchInst::CatchSwitchInst(v507, v505, v504, v110, (const llvm::Twine *)&v769, 0);
          if (DWORD2(__p))
          {
            v508 = (llvm::BasicBlock **)__p;
            v509 = 8 * DWORD2(__p);
            do
            {
              v510 = *v508++;
              llvm::CatchSwitchInst::addHandler(v507, v510);
              v509 -= 8;
            }
            while (v509);
          }
          Inst = v507;
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
          v46 = 9;
          v41 = v736;
          i = v738;
          k = v506;
LABEL_725:
          v322 = (void *)__p;
          if ((uint64_t *)__p != v767)
            goto LABEL_836;
          goto LABEL_758;
        case 55:
          if (!(_DWORD)v782)
            goto LABEL_354;
          v119 = v781;
          v120 = *((_QWORD *)a2 + 222);
          if (*(_QWORD *)v781 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 223) - v120) >> 3))
            goto LABEL_354;
          __p = 0uLL;
          v767[0] = 0;
          LODWORD(v758) = 1;
          if ((_DWORD)v782 == 1)
            goto LABEL_169;
          do
          {
            v762 = 0;
            v742[0] = 0;
            {
              v769 = "Invalid record";
              v773 = 259;
              v46 = 1;
              goto LABEL_742;
            }
            std::vector<llvm::Function *>::push_back[abi:nn180100]((void **)&__p, &v762);
          }
          while ((_DWORD)v782 != (_DWORD)v758);
          v119 = v781;
          v120 = *((_QWORD *)a2 + 222);
LABEL_169:
          std::vector<llvm::OperandBundleDefT<llvm::Value *>>::emplace_back<std::string &,std::vector<llvm::Value *>>((uint64_t)&v751, v120 + 24 * *v119, (uint64_t)&__p);
          v46 = 4;
LABEL_742:
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          goto LABEL_782;
        case 56:
          LODWORD(v762) = 0;
          *(_QWORD *)&__p = 0;
          LODWORD(v758) = 0;
          {
            v769 = "Invalid record";
            v773 = 259;
            v46 = 1;
          }
          else
          {
            v773 = 257;
            Inst = llvm::UnaryOperator::Create(DecodedUnaryOpcode, v190, (const char **)&v769, 0);
            VirtualTypeID = v758;
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
            if (v782 > v189
              && llvm::isa<llvm::FPMathOperator,llvm::Instruction *>((unsigned __int16 **)&Inst))
            {
              v44 = (llvm::LLVMContext *)(*((_QWORD *)v781 + v189) & 0x7E | (*((_QWORD *)v781 + v189) >> 7) & 1 | -(*((_QWORD *)v781 + v189) & 1));
              if ((_DWORD)v44)
                llvm::Instruction::setFastMathFlags((uint64_t)Inst, *((_QWORD *)v781 + v189) & 0x7E | ((*((_QWORD *)v781 + v189) & 0x80) != 0) | -(*((_QWORD *)v781 + v189) & 1));
            }
            v46 = 9;
          }
          goto LABEL_758;
        case 57:
          v117 = *((_QWORD *)a2 + 180);
          v118 = (*(_DWORD *)v781 - 1);
          if (v118 >= (*((_QWORD *)a2 + 181) - v117) >> 3)
            *(_QWORD *)v712 = 0;
          else
            *(_QWORD *)v712 = *(_QWORD *)(v117 + 8 * v118);
          v323 = *((unsigned int *)v781 + 4);
          v324 = *((_QWORD *)a2 + 186);
          if (v323 >= (*((_QWORD *)a2 + 187) - v324) >> 3)
            v703 = 0;
          else
            v703 = *(_QWORD *)(v324 + 8 * v323);
          v325 = *((_QWORD *)v781 + 1);
          v326 = *((_DWORD *)v781 + 6);
          v769 = &v771;
          v770 = (llvm *)0x1000000000;
          if (v326)
          {
            v327 = k;
            v328 = 0;
            for (n = 0; n != v326; ++n)
            {
              v330 = *((unsigned int *)v781 + 2 * (n + 4));
              v331 = *((_QWORD *)a2 + 186);
              if (v330 >= (*((_QWORD *)a2 + 187) - v331) >> 3)
                v332 = 0;
              else
                v332 = *(_QWORD *)(v331 + 8 * v330);
              if (v328 >= HIDWORD(v770))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v769, &v771, v328 + 1, 8);
                v328 = v770;
              }
              *((_QWORD *)v769 + v328) = v332;
              v328 = (_DWORD)v770 + 1;
              LODWORD(v770) = (_DWORD)v770 + 1;
            }
            v333 = n + 4;
            k = v327;
          }
          else
          {
            v333 = 4;
          }
          v746 = v333;
          v708 = v325;
          if ((v325 & 0x8000) != 0)
          {
            v746 = v333 + 1;
            v349 = (llvm::LLVMContext *)*((_QWORD *)v781 + v333);
            if (!v350 || (v348 = v350, *(_BYTE *)(v350 + 8) != 14))
            {
              v352 = "Explicit call type is not a function type";
              goto LABEL_834;
            }
          }
          else
          {
            v348 = 0;
            LODWORD(v349) = -1;
          }
          *(_QWORD *)v745 = 0;
          v744 = 0;
          {
            v352 = "Invalid record";
LABEL_834:
            *(_QWORD *)&__p = v352;
            v768 = 259;
            v41 = v736;
            v46 = 1;
            goto LABEL_835;
          }
          v353 = *(uint64_t **)v745;
          v354 = **(_QWORD **)v745;
          if (!**(_QWORD **)v745 || *(_BYTE *)(v354 + 8) != 15)
          {
            v352 = "Callee is not a pointer type";
            goto LABEL_834;
          }
          if (v348)
          {
            v355 = *(_QWORD *)(v354 + 24);
            if (v355)
              v356 = v355 == v348;
            else
              v356 = 1;
            if (!v356)
            {
              v352 = "Explicit call type does not match pointee type of callee operand";
              goto LABEL_834;
            }
          }
          else
          {
            if (!v535 || (v348 = v535, *(_BYTE *)(v535 + 8) != 14))
            {
              v352 = "Callee is not of pointer to function type";
              goto LABEL_834;
            }
          }
          v699 = (uint64_t)v353;
          v536 = (*(_DWORD *)(v348 + 12) - 1);
          v537 = v746;
          if (v782 < v536 + v746)
          {
            *(_QWORD *)&__p = "Insufficient operands to call";
            v768 = 259;
            v41 = v736;
            v46 = 1;
            v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
            goto LABEL_835;
          }
          v700 = (int)v349;
          *(_QWORD *)&__p = v767;
          *((_QWORD *)&__p + 1) = 0x1000000000;
          v762 = (llvm::Value *)v764;
          v763 = 0x1000000000;
          if ((_DWORD)v536)
          {
            v546 = 0;
            while (1)
            {
              v547 = v546 + 1;
              v549 = *(llvm::Type **)(*(_QWORD *)(v348 + 16) + 8 * v546 + 8);
              if (*((_BYTE *)v549 + 8) == 8)
              {
                v550 = *((unsigned int *)v781 + 2 * (v537 + v546));
                v551 = *((_QWORD *)a2 + 186);
                if (v550 >= (*((_QWORD *)a2 + 187) - v551) >> 3)
                  break;
                v552 = *(unsigned __int8 **)(v551 + 8 * v550);
              }
              else
              {
              }
              if (!v552)
                break;
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&__p, (uint64_t)v552);
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v762, v548);
              ++v546;
              if (v536 == v547)
              {
                v537 += v547;
                goto LABEL_853;
              }
            }
            v746 = v537 + v546;
            goto LABEL_961;
          }
LABEL_853:
          v746 = v537;
          if (*(_DWORD *)(v348 + 8) < 0x100u)
          {
            if ((_DWORD)v782 != v537)
            {
LABEL_961:
              v758 = (llvm::Value *)"Invalid record";
              v761 = 259;
              v41 = v736;
              v46 = 1;
              v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
              i = v738;
              goto LABEL_1141;
            }
          }
          else if ((_DWORD)v782 != v537)
          {
            do
            {
              *(_QWORD *)v742 = 0;
              LODWORD(v741.__r_.__value_.__l.__data_) = 0;
              {
                goto LABEL_961;
              }
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&__p, *(uint64_t *)v742);
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v762, (int)v741.__r_.__value_.__l.__data_);
            }
            while ((_DWORD)v782 != v746);
          }
          v577 = k;
          if (v751 != v752)
            llvm::UpgradeOperandBundles((uint64_t *)&v751);
          v578 = v699;
          if (*(_BYTE *)(v699 + 16) != 24)
            goto LABEL_1136;
          v579 = *(char *)(v699 + 71);
          if (v579 >= 0)
            v580 = (int8x16_t *)(v699 + 48);
          else
            v580 = *(int8x16_t **)(v699 + 48);
          if (v579 >= 0)
            v581 = *(unsigned __int8 *)(v699 + 71);
          else
            v581 = *(_QWORD *)(v699 + 56);
          llvm::InlineAsm::ParseConstraints(v580, v581, v742);
          v582 = *(_DWORD **)v742;
          if (*(_DWORD **)v742 == v743)
          {
LABEL_943:
            v583 = DWORD2(__p) - (_DWORD)v770;
            v584 = (uint64_t **)__p;
            if (DWORD2(__p) > DWORD2(__p) - (int)v770)
            {
              v585 = 0;
              while (1)
              {
                v586 = *(_QWORD *)(__p + 8 * v583 + 8 * v585);
                if (!v586 || *(_BYTE *)(v586 + 16) != 4)
                  break;
                v588 = *(llvm::Function **)(v586 - 64) == v735 && v770 >= v585;
                if (!v588 || *(_QWORD *)(v586 - 32) != *((_QWORD *)v769 + v585))
                  break;
                if ((_DWORD)v770 == (_DWORD)++v585)
                  goto LABEL_957;
              }
              v758 = (llvm::Value *)"callbr argument does not match indirect dest";
              v761 = 259;
              v41 = v736;
              v42 = (llvm::Function *)((char *)a2 + 8);
              std::vector<llvm::InlineAsm::ConstraintInfo>::~vector[abi:nn180100]((void **)v742);
              v46 = 1;
              v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
              goto LABEL_1140;
            }
LABEL_957:
            DWORD2(__p) -= (_DWORD)v770;
            LODWORD(v763) = v583;
            v758 = (llvm::Value *)v760;
            v759 = 0x600000000;
            if (v583)
            {
              v589 = 8 * v583;
              do
              {
                v590 = *v584++;
                llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v758, *v590);
                v589 -= 8;
              }
              while (v589);
              v591 = v758;
              v592 = v759;
            }
            else
            {
              v592 = 0;
              v591 = (llvm::Value *)v760;
            }
            v348 = llvm::FunctionType::get(**(uint64_t ****)(v348 + 16), (uint64_t)v591, v592, *(_DWORD *)(v348 + 8) > 0xFFu);
            if (*(char *)(v699 + 71) < 0)
              std::string::__init_copy_ctor_external(&v741, *(const std::string::value_type **)(v699 + 48), *(_QWORD *)(v699 + 56));
            else
              v741 = *(std::string *)(v699 + 48);
            v643 = v743;
            if (*(_DWORD **)v742 != v743)
            {
              v644 = 0;
              v645 = 0;
              v646 = *(_QWORD *)v742 + 80;
              do
              {
                v647 = *(_DWORD *)(v646 - 80);
                if (!v647 || v647 == 1 && *(_BYTE *)(v646 - 67))
                {
                  if (v645 >= v583)
                    std::string::insert(&v741, v644, "!");
                  ++v645;
                }
                v648 = std::string::find(&v741, 44, v644);
                v644 = v648 + 1;
                if (v648 == -1)
                  break;
                v18 = v646 == (_QWORD)v643;
                v646 += 80;
              }
              while (!v18);
            }
            v649 = *(char *)(v699 + 47);
            if (v649 >= 0)
              v650 = v699 + 24;
            else
              v650 = *(_QWORD *)(v699 + 24);
            if (v649 >= 0)
              v651 = *(unsigned __int8 *)(v699 + 47);
            else
              v651 = *(_QWORD *)(v699 + 32);
            if ((v741.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v652 = &v741;
            else
              v652 = (std::string *)v741.__r_.__value_.__r.__words[0];
            if ((v741.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v741.__r_.__value_.__r.__words[2]);
            else
              size = v741.__r_.__value_.__l.__size_;
            v699 = llvm::InlineAsm::get((llvm::PointerType **)v348, v650, v651, (uint64_t)v652, size, *(_BYTE *)(v699 + 80), *(_BYTE *)(v699 + 81), *(_DWORD *)(v699 + 84), *(_BYTE *)(v699 + 88));
            *(_QWORD *)v745 = v699;
            if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v741.__r_.__value_.__l.__data_);
            if (v758 != (llvm::Value *)v760)
              free(v758);
          }
          else
          {
            while (*v582 != 3)
            {
              v582 += 20;
              if (v582 == v743)
                goto LABEL_943;
            }
          }
          std::vector<llvm::InlineAsm::ConstraintInfo>::~vector[abi:nn180100]((void **)v742);
          v578 = v699;
LABEL_1136:
          v761 = 257;
          Inst = (llvm::Instruction *)llvm::CallBrInst::Create(v348, v578, v703, (uint64_t *)v769, v770, (uint64_t *)__p, DWORD2(__p), v351, (int8x16_t *)v751, 0xAAAAAAAAAAAAAAABLL * ((v752 - (_BYTE *)v751) >> 4), (const char **)&v758, 0);
          std::vector<llvm::OperandBundleDefT<llvm::Value *>>::clear[abi:nn180100]((uint64_t *)&v751);
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)v734, (uint64_t)Inst);
          v654 = Inst;
          *((_WORD *)Inst + 9) = *((_WORD *)Inst + 9) & 0xF003 | (2 * v708) & 0xFFC;
          *((_QWORD *)v654 + 9) = *(_QWORD *)v712;
          v41 = v736;
          if (*(_QWORD *)v736)
          {
            llvm::Value::deleteValue(Inst);
            v46 = 1;
          }
          else
          {
            v46 = 9;
          }
          v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
          v42 = (llvm::Function *)((char *)a2 + 8);
LABEL_1140:
          i = v738;
          k = v577;
LABEL_1141:
          if (v762 != (llvm::Value *)v764)
            free(v762);
          v632 = (void *)__p;
          if ((uint64_t *)__p != v767)
LABEL_1144:
            free(v632);
LABEL_835:
          v322 = v769;
          if (v769 == &v771)
            goto LABEL_758;
          goto LABEL_836;
        case 58:
          LODWORD(v762) = 0;
          *(_QWORD *)&__p = 0;
          LODWORD(v758) = 0;
          {
            goto LABEL_412;
          }
          v223 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 1u);
          v773 = 257;
          Inst = llvm::FreezeInst::FreezeInst(v223, (llvm::Type **)__p, (const char **)&v769, 0);
          VirtualTypeID = v758;
          goto LABEL_389;
        case 60:
          if (!(_DWORD)v782)
            goto LABEL_354;
          v723 = k;
          v283 = (char *)v781;
          v284 = (char *)v781 + 8 * v782;
          v285 = v284;
          break;
        default:
          v90 = "Invalid value";
          goto LABEL_780;
      }
      while (1)
      {
        v287 = *(_QWORD *)(*(_QWORD *)v740 + 32 * *(unsigned int *)v283 + 16);
        if (v287)
          v288 = *(_BYTE *)(v287 + 16) == 0;
        else
          v288 = 0;
        if (!v288)
        {
          v769 = "Invalid record";
          v773 = 259;
          v41 = v736;
          v46 = 1;
          k = v723;
          goto LABEL_782;
        }
        v289 = (char *)*((_QWORD *)a2 + 212);
        v290 = *((_QWORD *)a2 + 213);
        if ((unint64_t)v289 >= v290)
          break;
        *(_QWORD *)v289 = v287;
        v286 = v289 + 8;
LABEL_356:
        *((_QWORD *)a2 + 212) = v286;
        v283 += 8;
        v46 = 4;
        v42 = (llvm::Function *)((char *)a2 + 8);
        if (v283 == v284)
        {
          v41 = v736;
          k = v723;
          goto LABEL_782;
        }
      }
      v291 = (char *)*((_QWORD *)a2 + 211);
      v292 = (v289 - v291) >> 3;
      v293 = v292 + 1;
      if ((unint64_t)(v292 + 1) >> 61)
        abort();
      v294 = v290 - (_QWORD)v291;
      if (v294 >> 2 > v293)
        v293 = v294 >> 2;
      if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8)
        v295 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v295 = v293;
      if (v295)
      {
        if (v295 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v296 = (char *)operator new(8 * v295);
      }
      else
      {
        v296 = 0;
      }
      v297 = &v296[8 * v292];
      *(_QWORD *)v297 = v287;
      v286 = v297 + 8;
      if (v289 == v291)
      {
        v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
LABEL_383:
        *((_QWORD *)a2 + 211) = v297;
        *((_QWORD *)a2 + 212) = v286;
        *((_QWORD *)a2 + 213) = &v296[8 * v295];
        i = v738;
        if (v289)
          operator delete(v289);
        v284 = v285;
        goto LABEL_356;
      }
      v298 = v289 - 8 - v291;
      if (v298 >= 0x58)
      {
        v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
        if ((unint64_t)(v291 - v296) >= 0x20)
        {
          v299 = (v298 >> 3) + 1;
          v300 = 8 * (v299 & 0x3FFFFFFFFFFFFFFCLL);
          v301 = &v289[-v300];
          v297 -= v300;
          v302 = &v296[8 * v292 - 16];
          v303 = (__int128 *)(v289 - 16);
          v304 = v299 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v305 = *v303;
            *((_OWORD *)v302 - 1) = *(v303 - 1);
            *(_OWORD *)v302 = v305;
            v302 -= 32;
            v303 -= 2;
            v304 -= 4;
          }
          while (v304);
          v289 = v301;
          if (v299 == (v299 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_382;
        }
      }
      else
      {
        v40 = (llvm::MetadataLoader::MetadataLoaderImpl **)((char *)a2 + 776);
      }
      do
      {
        v306 = *((_QWORD *)v289 - 1);
        v289 -= 8;
        *((_QWORD *)v297 - 1) = v306;
        v297 -= 8;
      }
      while (v289 != v291);
LABEL_382:
      v289 = (char *)*((_QWORD *)a2 + 211);
      goto LABEL_383;
    }
    switch(HIDWORD(v779))
    {
      case 0xB:
        if (*(_QWORD *)v41)
          goto LABEL_54;
        v739 = (*((_QWORD *)a2 + 90) - *((_QWORD *)a2 + 89)) >> 5;
        v46 = 4;
        break;
      case 0xE:
        goto LABEL_75;
      case 0xF:
        llvm::MetadataLoader::parseMetadata((llvm::BitstreamCursor ***)v40, 0, (uint64_t *)v41);
        goto LABEL_75;
      case 0x10:
        llvm::MetadataLoader::parseMetadataAttachment((uint64_t *)v40, v735, *((_QWORD *)a2 + 105), (uint64_t *)v41);
        goto LABEL_75;
      case 0x12:
        goto LABEL_75;
      default:
        llvm::BitstreamCursor::SkipBlock(i, (uint64_t *)v41);
LABEL_75:
        if (*(_QWORD *)v41)
          v46 = 1;
        else
          v46 = 4;
        break;
    }
LABEL_55:
    if ((v780 & 1) != 0)
    {
      v47 = v779;
      v779 = 0;
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    }
  }
  while (!v46 || v46 == 4);
  if (v46 != 7)
    goto LABEL_1154;
  if (v751 != v752)
  {
    v655 = "Operand bundles found with no consumer";
    goto LABEL_1153;
  }
  v661 = *((_QWORD *)a2 + 90);
  v662 = *(_QWORD *)(v661 - 16);
  if (v662 && *(_BYTE *)(v662 + 16) == 21 && !*(_QWORD *)(v662 + 24))
  {
    v681 = (unint64_t)(v661 - *(_QWORD *)v740) >> 5;
    for (ii = v729; (_DWORD)v681 != ii; ++ii)
    {
      v683 = *(_QWORD *)(*(_QWORD *)v740 + 32 * ii + 16);
      if (v683 && *(_BYTE *)(v683 + 16) == 21 && !*(_QWORD *)(v683 + 24))
      {
        v684 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v683, v44);
        llvm::Value::replaceAllUsesWith((Value *)v683, v684);
        llvm::Value::~Value((llvm::Value *)v683, v685);
        operator delete(v686);
      }
    }
    v655 = "Never resolved value found in function";
LABEL_1153:
    v769 = v655;
    v773 = 259;
LABEL_1154:
    v656 = v781;
    if (v781 == v783)
      goto LABEL_1156;
    goto LABEL_1155;
  }
  if (llvm::MetadataLoader::hasFwdRefs((llvm::MetadataLoader *)v40))
  {
    v655 = "Invalid function metadata: outgoing forward refs";
    goto LABEL_1153;
  }
  if (v732)
    llvm::BasicBlock::eraseFromParent(v732);
  if ((_DWORD)v790)
  {
    v663 = (char *)v789;
    v664 = (char *)v789 + 24 * v790;
    do
    {
      v669 = *(llvm::BasicBlock **)v663;
      v668 = (uint64_t *)*((_QWORD *)v663 + 1);
      v670 = (uint64_t ***)*((_QWORD *)v663 + 2);
      v671 = (llvm::BranchInst *)llvm::User::operator new((llvm::User *)0x48, 1u);
      llvm::BranchInst::BranchInst(v671, (llvm::BasicBlock *)v668, v670);
      v672 = (_QWORD *)*((_QWORD *)v669 + 6);
      if (v672 == (_QWORD *)((char *)v669 + 48))
      {
        v667 = 0;
      }
      else
      {
        v665 = (llvm::Instruction *)(v672 - 3);
        if (v672)
          v666 = v672 - 3;
        else
          v666 = 0;
        if (*((unsigned __int8 *)v666 + 16) - 29 >= 0xB)
          v667 = 0;
        else
          v667 = v665;
      }
      llvm::Instruction::replaceSuccessorWith(v667, (llvm::BasicBlock *)v668, (llvm::BasicBlock *)v670);
      llvm::BasicBlock::replacePhiUsesWith((uint64_t)v668, v669, (llvm::BasicBlock *)v670);
      llvm::BasicBlock::moveBefore((uint64_t *)v670, v668 + 3);
      v663 += 24;
    }
    while (v663 != v664);
  }
  v673 = (v730 >> 5);
  v674 = (_QWORD *)*((_QWORD *)a2 + 90);
  v675 = *((_QWORD *)a2 + 89);
  v676 = ((uint64_t)v674 - v675) >> 5;
  if (v673 <= v676)
  {
    v677 = (llvm::Function *)((char *)a2 + 776);
    if (v673 < v676)
    {
      v678 = (_QWORD *)(v675 + 32 * v673);
      while (v674 != v678)
      {
        v679 = *(v674 - 2);
        v674 -= 4;
        if (v679 != -8192 && v679 != -4096 && v679 != 0)
          llvm::ValueHandleBase::RemoveFromUseList(v674);
      }
      *((_QWORD *)a2 + 90) = v678;
    }
  }
  else
  {
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__append((void **)v740, v673 - v676);
    v677 = (llvm::Function *)((char *)a2 + 776);
  }
  llvm::MetadataLoader::shrinkTo(v677, v731);
  v687 = *v733;
  *((_QWORD *)a2 + 187) = 0;
  *((_QWORD *)a2 + 188) = 0;
  *v733 = 0;
  if (v687)
    operator delete(v687);
  *(_QWORD *)v41 = 0;
  v656 = v781;
  if (v781 != v783)
LABEL_1155:
    free(v656);
LABEL_1156:
  v657 = (char *)v751;
  if (v751)
  {
    v658 = v752;
    v659 = v751;
    if (v752 != v751)
    {
      do
      {
        v660 = (void *)*((_QWORD *)v658 - 3);
        if (v660)
        {
          *((_QWORD *)v658 - 2) = v660;
          operator delete(v660);
        }
        if (*(v658 - 25) < 0)
          operator delete(*((void **)v658 - 6));
        v658 -= 48;
      }
      while (v658 != v657);
      v659 = v751;
    }
    v752 = v657;
    operator delete(v659);
  }
  if (v755)
    llvm::MetadataTracking::untrack((uint64_t)&v755, (unsigned __int8 *)v755);
  if (v789 != v791)
    free(v789);
  if ((v784 & 1) == 0)
    llvm::deallocate_buffer((llvm *)v785.i64[0], (void *)(24 * v785.u32[2]));
}

uint64_t llvm::instructions@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = this + 72;
  v4 = *(_QWORD *)(this + 80);
  if (v4 == this + 72)
  {
    v7 = 0;
LABEL_7:
    *a2 = v3;
    a2[1] = v3;
    a2[2] = v7;
    a2[3] = v3;
    a2[4] = v3;
    a2[5] = 0;
  }
  else
  {
    v5 = v4 - 24;
    if (!v4)
      v5 = 0;
    v6 = v5 + 48;
    v7 = *(_QWORD *)(v5 + 56);
    if (v7 == v6)
    {
      v8 = *(_QWORD *)(v4 + 8);
      v4 = this + 72;
      if (v8 != v3)
      {
        v4 = v8;
        while (1)
        {
          v9 = v4 - 24;
          if (!v4)
            v9 = 0;
          v10 = v9 + 48;
          v7 = *(_QWORD *)(v9 + 56);
          if (v7 != v10)
            break;
          v4 = *(_QWORD *)(v4 + 8);
          if (v4 == v3)
            goto LABEL_7;
        }
      }
    }
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v7;
    a2[3] = v3;
    a2[4] = v3;
    a2[5] = 0;
  }
  return this;
}

void `anonymous namespace'::BitcodeReader::rememberAndSkipFunctionBody(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  const char *v27;
  __int16 v28;

  v4 = *(_QWORD *)(a2 + 1520);
  if (*(_QWORD *)(a2 + 1512) == v4)
  {
    v27 = "Insufficient function protos";
    v28 = 259;
    return;
  }
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(a2 + 1520) = v4 - 8;
  v6 = 8 * *(_QWORD *)(a2 + 48) - *(unsigned int *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 1584);
  if (!v7)
    goto LABEL_25;
  v8 = *(_QWORD *)(a2 + 1568);
  v9 = v7 - 1;
  v10 = (v7 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v11 = (_QWORD *)(v8 + 16 * v10);
  v12 = *v11;
  if (v5 == *v11)
    goto LABEL_20;
  v13 = 0;
  v14 = 1;
  while (v12 != -4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -8192;
    if (v15)
      v13 = v11;
    v16 = v10 + v14++;
    v10 = v16 & v9;
    v11 = (_QWORD *)(v8 + 16 * (v16 & v9));
    v12 = *v11;
    if (v5 == *v11)
      goto LABEL_20;
  }
  if (v13)
    v11 = v13;
  v18 = *(_DWORD *)(a2 + 1576);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *(_DWORD *)(a2 + 1580) > v7 >> 3)
      goto LABEL_17;
  }
  else
  {
LABEL_25:
    v7 *= 2;
  }
  llvm::DenseMap<void *,long long,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,long long>>::grow(a2 + 1568, v7);
  v19 = *(_QWORD *)(a2 + 1568);
  v20 = *(_DWORD *)(a2 + 1584) - 1;
  v21 = v20 & ((v5 >> 4) ^ (v5 >> 9));
  v11 = (_QWORD *)(v19 + 16 * v21);
  v22 = *v11;
  if (v5 == *v11)
  {
LABEL_27:
    ++*(_DWORD *)(a2 + 1576);
    if (v5 == -4096)
      goto LABEL_19;
    goto LABEL_18;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != -4096)
  {
    if (v23)
      v25 = 0;
    else
      v25 = v22 == -8192;
    if (v25)
      v23 = v11;
    v26 = v21 + v24++;
    v21 = v26 & v20;
    v11 = (_QWORD *)(v19 + 16 * (v26 & v20));
    v22 = *v11;
    if (v5 == *v11)
      goto LABEL_27;
  }
  if (v23)
    v11 = v23;
LABEL_17:
  v17 = *v11;
  ++*(_DWORD *)(a2 + 1576);
  if (v17 != -4096)
LABEL_18:
    --*(_DWORD *)(a2 + 1580);
LABEL_19:
  *v11 = v5;
  v11[1] = 0;
LABEL_20:
  v11[1] = v6;
  llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)(a2 + 32), (uint64_t *)this);
  if (!*(_QWORD *)this)
    *(_QWORD *)this = 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,unsigned long long,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned long long>>,llvm::Function *,unsigned long long,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned long long>>::operator[](uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
    return llvm::DenseMapBase<llvm::DenseMap<void *,long long,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,long long>>,void *,long long,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,long long>>::InsertIntoBucket<void *>(a1, 0, a2)+ 1;
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 == *v6)
    return v6 + 1;
  v9 = 0;
  v10 = 1;
  while (v7 != -4096)
  {
    if (v9)
      v11 = 0;
    else
      v11 = v7 == -8192;
    if (v11)
      v9 = v6;
    v12 = v5 + v10++;
    v5 = v12 & v4;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v12 & v4));
    v7 = *v6;
    if (*a2 == *v6)
      return v6 + 1;
  }
  if (v9)
    v13 = v9;
  else
    v13 = v6;
  return llvm::DenseMapBase<llvm::DenseMap<void *,long long,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,long long>>,void *,long long,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,long long>>::InsertIntoBucket<void *>(a1, v13, a2)+ 1;
}

uint64_t `anonymous namespace'::BitcodeReader::getContainedTypeID(_anonymous_namespace_::BitcodeReader *this, unsigned int a2, int a3, unsigned int a4)
{
  unsigned int v4;
  char *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  if (!a2)
  {
LABEL_7:
    v5 = (char *)this + 32 * a2;
    goto LABEL_8;
  }
  v4 = a2 - 1;
  v5 = (char *)this + 32 * ((37 * a3) & (a2 - 1));
  v6 = *(_DWORD *)v5;
  if (*(_DWORD *)v5 != a3)
  {
    v7 = 1;
    LODWORD(v8) = (37 * a3) & v4;
    while (v6 != -1)
    {
      v9 = v8 + v7++;
      v8 = v9 & v4;
      v6 = *((_DWORD *)this + 8 * v8);
      if (v6 == a3)
      {
        v5 = (char *)this + 32 * v8;
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v5 == (char *)this + 32 * a2 || *((_DWORD *)v5 + 4) <= a4)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(*((_QWORD *)v5 + 1) + 4 * a4);
}

char *llvm::BitcodeReaderValueList::push_back(llvm::BitcodeReaderValueList *this, llvm::Value *a2, int a3)
{
  unint64_t v4;
  char *result;
  int v7;
  llvm::Value *v8;

  v8 = a2;
  v7 = a3;
  v4 = *((_QWORD *)this + 1);
  if (v4 >= *((_QWORD *)this + 2))
  {
    result = std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__emplace_back_slow_path<llvm::Value *&,unsigned int &>((uint64_t)this, (uint64_t *)&v8, &v7);
    *((_QWORD *)this + 1) = result;
  }
  else
  {
    *(_QWORD *)v4 = 6;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = a2;
    if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096)
    {
      if (a2)
        llvm::ValueHandleBase::AddToUseList((unint64_t *)v4);
    }
    *(_DWORD *)(v4 + 24) = a3;
    result = (char *)(v4 + 32);
    *((_QWORD *)this + 1) = v4 + 32;
  }
  return result;
}

void `anonymous namespace'::BitcodeReader::parseConstants(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  llvm::SimpleBitstreamCursor *v4;
  llvm::LLVMContext *v5;
  llvm::LLVMContext *v6;
  llvm::PointerType **PtrElementTypeByID;
  unsigned int *v8;
  std::string::size_type *v9;
  int8x8_t *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  int8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  int8x8_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  unint64_t v53;
  int8x8_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  const std::error_category *v59;
  std::string::size_type v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int8x8_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int *v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int8x16_t v89;
  unint64_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int64x2_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int64x2_t v99;
  uint8x16_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint32x4_t v103;
  uint32x4_t v104;
  int8x16_t v105;
  uint64x2_t v106;
  uint64x2_t v107;
  uint64x2_t v108;
  uint64x2_t v109;
  uint64x2_t v110;
  uint64x2_t v111;
  uint64x2_t v112;
  uint64x2_t v113;
  int8x16_t v114;
  uint32x4_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  uint32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int64x2_t v123;
  int8x16_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int8x16_t v127;
  uint64_t v128;
  unint64_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int8x16_t v133;
  uint8x8_t *v134;
  unint64_t v135;
  int8x16_t v136;
  int8x16_t v137;
  uint8x8_t v138;
  uint16x8_t v139;
  uint32x4_t v140;
  uint64x2_t v141;
  uint64x2_t v142;
  uint64x2_t v143;
  uint32x4_t v144;
  uint64x2_t v145;
  int8x16_t v146;
  int64x2_t v147;
  int8x16_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int64x2_t v154;
  unint64_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  uint8x16_t v166;
  uint16x8_t v167;
  uint16x8_t v168;
  uint32x4_t v169;
  uint32x4_t v170;
  int8x16_t v171;
  uint64x2_t v172;
  uint64x2_t v173;
  uint64x2_t v174;
  uint64x2_t v175;
  uint64x2_t v176;
  uint64x2_t v177;
  uint64x2_t v178;
  uint64x2_t v179;
  int8x16_t v180;
  uint32x4_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  uint32x4_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int64x2_t v189;
  int8x16_t v190;
  int64x2_t v191;
  int64x2_t v192;
  int8x16_t v193;
  uint64_t v194;
  unint64_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int64x2_t v198;
  int8x16_t v199;
  uint8x8_t *v200;
  unint64_t v201;
  int8x16_t v202;
  int8x16_t v203;
  uint8x8_t v204;
  uint16x8_t v205;
  uint32x4_t v206;
  uint64x2_t v207;
  uint64x2_t v208;
  uint64x2_t v209;
  uint32x4_t v210;
  uint64x2_t v211;
  int8x16_t v212;
  int64x2_t v213;
  int8x16_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int64x2_t v220;
  unint64_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  uint8x16_t v232;
  uint16x8_t v233;
  uint16x8_t v234;
  uint32x4_t v235;
  uint32x4_t v236;
  int8x16_t v237;
  uint64x2_t v238;
  uint64x2_t v239;
  uint64x2_t v240;
  uint64x2_t v241;
  uint64x2_t v242;
  uint64x2_t v243;
  uint64x2_t v244;
  uint64x2_t v245;
  int8x16_t v246;
  uint32x4_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  uint32x4_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int64x2_t v255;
  int8x16_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int8x16_t v259;
  uint64_t v260;
  unint64_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int8x16_t v265;
  uint8x8_t *v266;
  unint64_t v267;
  int8x16_t v268;
  int8x16_t v269;
  uint8x8_t v270;
  uint16x8_t v271;
  uint32x4_t v272;
  uint64x2_t v273;
  uint64x2_t v274;
  uint64x2_t v275;
  uint32x4_t v276;
  uint64x2_t v277;
  int64x2_t v278;
  int8x16_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int8x16_t v286;
  unint64_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int64x2_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int64x2_t v296;
  uint8x16_t v297;
  uint16x8_t v298;
  uint16x8_t v299;
  uint32x4_t v300;
  uint32x4_t v301;
  int8x16_t v302;
  uint64x2_t v303;
  uint64x2_t v304;
  uint64x2_t v305;
  uint64x2_t v306;
  uint64x2_t v307;
  uint64x2_t v308;
  uint64x2_t v309;
  uint64x2_t v310;
  int8x16_t v311;
  uint32x4_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  uint32x4_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int64x2_t v320;
  int8x16_t v321;
  int8x8_t v322;
  int64x2_t v323;
  int64x2_t v324;
  int8x16_t v325;
  uint64_t v326;
  unint64_t v327;
  int64x2_t v328;
  int64x2_t v329;
  int64x2_t v330;
  int8x16_t v331;
  uint8x8_t *v332;
  unint64_t v333;
  int8x16_t v334;
  int8x16_t v335;
  uint8x8_t v336;
  uint16x8_t v337;
  uint32x4_t v338;
  uint64x2_t v339;
  uint64x2_t v340;
  uint64x2_t v341;
  uint32x4_t v342;
  uint64x2_t v343;
  int8x16_t v344;
  int64x2_t v345;
  int8x16_t v346;
  int8x8_t v347;
  unint64_t v348;
  uint64_t VoidTy;
  llvm::APFloatBase *v350;
  int v351;
  char *v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  int8x16x4_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  unsigned int v360;
  std::string::size_type v361;
  uint64_t v362;
  uint64_t v363;
  unsigned int v364;
  char *v365;
  std::string::size_type v366;
  uint64_t v367;
  const llvm::APInt *v368;
  uint64_t String;
  uint64_t v370;
  unsigned int v371;
  llvm::ConstantFP *v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  unint64_t v378;
  _QWORD *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  int64x2_t *v383;
  char *v384;
  uint64_t v385;
  int32x2_t v386;
  uint64_t v387;
  uint64_t v388;
  __int16 v389;
  uint64_t v390;
  llvm::Type *v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unsigned int v397;
  std::string *p_s;
  std::string::size_type size;
  std::string *v400;
  std::string::size_type v401;
  uint64_t v402;
  int v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  llvm::Type *v408;
  unsigned int v409;
  llvm::Type *v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  std::string *v418;
  std::string::size_type v419;
  std::string *v420;
  std::string::size_type v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  __int16 v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int v431;
  std::string *v432;
  std::string::size_type v433;
  std::string *v434;
  std::string::size_type v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  _BYTE *v445;
  unint64_t v446;
  int8x16x4_t *v447;
  int v448;
  __int16 v449;
  unint64_t v450;
  uint64_t v451;
  llvm::UndefValue *v452;
  int v453;
  int v454;
  int v455;
  int v456;
  std::string::size_type v457;
  uint64_t v458;
  unint64_t v459;
  int v460;
  char v461;
  int v462;
  const char *v463;
  llvm::LLVMContext *v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  unint64_t v468;
  llvm::LLVMContext *ContainedTypeID;
  int v470;
  unsigned int v471;
  llvm::Type *v472;
  uint64_t v473;
  BOOL v474;
  int v475;
  uint64_t v476;
  char *v477;
  char *v478;
  uint64_t v479;
  int8x16x4_t *v480;
  _OWORD *v481;
  uint64_t v482;
  __int128 v483;
  __int128 v484;
  _QWORD *v485;
  uint64_t v486;
  int8x16x4_t *v487;
  unsigned int v488;
  llvm::Type *v489;
  uint64_t v490;
  uint64_t v491;
  std::string::size_type v492;
  void *v493;
  void *v494;
  std::string::size_type v495;
  int v496;
  const llvm::APFloat *v497;
  llvm::ConstantFP *v498;
  llvm::ConstantFP *v499;
  void *v500;
  const llvm::APFloat *v501;
  _QWORD *v502;
  void *v503;
  llvm::ConstantFP *v504;
  void *v505;
  void *v506;
  uint64_t v507;
  int32x2_t v508;
  uint64_t v509;
  uint64_t v510;
  unsigned int v511;
  llvm::Type *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unsigned int v516;
  std::string *v517;
  std::string::size_type v518;
  std::string *v519;
  std::string::size_type v520;
  uint64_t FP;
  uint64_t v522;
  uint64_t v523;
  int v524;
  unsigned int v525;
  unint64_t v526;
  char v527;
  char v528;
  uint64_t v529;
  void *v530;
  unsigned int v531;
  uint64_t v532;
  const std::error_category *v533;
  std::string::size_type v534;
  int v535;
  _anonymous_namespace_::BitcodeReaderBase *v536;
  void *v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  int8x16x4_t *v548;
  unint64_t TypeByID;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  llvm::PointerType **v553;
  uint64_t *__sz;
  unsigned int VirtualTypeID;
  llvm::Constant *Int32Ty;
  unsigned int v557[2];
  llvm::Twine *v558;
  _anonymous_namespace_::BitcodeReader *v559;
  llvm::PointerType **v560;
  unsigned int v561;
  int8x16_t v562;
  void *v563;
  unsigned int v564;
  std::string __p;
  void *v566;
  __int128 v567;
  uint64_t v568;
  uint64_t v569;
  char v570;
  uint64_t v571;
  int v572;
  std::string *p_p;
  void *v574;
  char v575;
  void *v576;
  uint64_t v577;
  _BYTE v578[512];
  std::string __s;
  unint64_t v580;
  __int16 v581;
  uint64_t v582;
  std::error_code v583;
  std::error_code v584;

  v582 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::SimpleBitstreamCursor *)(a2 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 11, (uint64_t *)this);
  if (*(_QWORD *)this)
    return;
  v559 = this;
  v558 = (llvm::Twine *)(a2 + 8);
  v576 = v578;
  v577 = 0x4000000000;
  Int32Ty = (llvm::Constant *)llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 424), v5);
  PtrElementTypeByID = 0;
  *(_QWORD *)v557 = (*(_QWORD *)(a2 + 720) - *(_QWORD *)(a2 + 712)) >> 5;
  v8 = (unsigned int *)(a2 + 64);
  v9 = (std::string::size_type *)(a2 + 48);
  v10 = (int8x8_t *)(a2 + 56);
  __sz = (uint64_t *)(a2 + 616);
  v562 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
LABEL_3:
  v560 = PtrElementTypeByID;
  while (1)
  {
    v12 = *v8;
    if (*v8)
    {
      v13 = *(_DWORD *)(a2 + 68);
      v14 = *(int8x8_t *)(a2 + 56);
      if (v12 >= v13)
        goto LABEL_26;
      v16 = *(_QWORD *)(a2 + 40);
      v15 = *(_QWORD *)(a2 + 48);
      v17 = v16 - v15;
      if (v16 <= v15)
        goto LABEL_566;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 40);
      v15 = *(_QWORD *)(a2 + 48);
      if (v16 <= v15)
        goto LABEL_573;
      v13 = *(_DWORD *)(a2 + 68);
      if (!v13)
      {
        v14 = *v10;
LABEL_26:
        v23 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v13) & *(_QWORD *)&v14;
        *v10 = (int8x8_t)(*(_QWORD *)&v14 >> v13);
        *v8 = v12 - v13;
        if ((_DWORD)v23 == 1)
          goto LABEL_27;
        goto LABEL_36;
      }
      v14 = 0;
      v17 = v16 - v15;
      if (v16 <= v15)
      {
LABEL_566:
        v533 = std::generic_category();
        memset(&__p, 0, sizeof(__p));
        LODWORD(v567) = 0;
        v570 = 0;
        v571 = 0;
        v572 = 1;
        v568 = 0;
        v569 = 0;
        *((_QWORD *)&v567 + 1) = 0;
        v566 = &unk_1E0E22B10;
        p_p = &__p;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v566, 0, 0, 0);
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E203C0;
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)"Unexpected end of file reading %u of %u bytes";
        __s.__r_.__value_.__r.__words[2] = *v9;
        v580 = v16;
        goto LABEL_568;
      }
    }
    v18 = *(_QWORD *)v4;
    v19 = (unsigned int *)(*(_QWORD *)v4 + v15);
    if (v16 >= v15 + 8)
    {
      v21 = *(_QWORD *)v19;
      *v10 = (int8x8_t)v21;
      v17 = 8;
      goto LABEL_34;
    }
    *v10 = 0;
    if (!v17)
    {
      v21 = 0;
      goto LABEL_34;
    }
    if (v17 < 8uLL || ((unint64_t)v10 < v18 + v15 + v17 ? (v20 = v19 >= v8) : (v20 = 1), !v20))
    {
      v22 = 0;
      v21 = 0;
LABEL_30:
      v24 = v17 - v22;
      v25 = 8 * v22;
      v26 = (unsigned __int8 *)(v18 + v22 + v15);
      do
      {
        v27 = *v26++;
        v21 |= (unint64_t)v27 << (v25 & 0xF8);
        *v10 = (int8x8_t)v21;
        v25 += 8;
        --v24;
      }
      while (v24);
      goto LABEL_34;
    }
    if (v17 >= 0x10uLL)
    {
      v22 = v17 - (unint64_t)(v17 & 0xF);
      v149 = (int64x2_t)xmmword_181267BA0;
      v150 = (int64x2_t)xmmword_181267BB0;
      v151 = (int64x2_t)xmmword_181267BC0;
      v152 = 0uLL;
      v153 = 0uLL;
      v154 = (int64x2_t)xmmword_181267BD0;
      v155 = v22;
      v156 = (int64x2_t)xmmword_181233120;
      v157 = (int64x2_t)xmmword_181233290;
      v158 = (int64x2_t)xmmword_181267BE0;
      v159 = (int64x2_t)xmmword_1812332B0;
      v160 = 0uLL;
      v161 = 0uLL;
      v162 = 0uLL;
      v163 = 0uLL;
      v164 = 0uLL;
      v165 = 0uLL;
      do
      {
        v166 = *(uint8x16_t *)v19;
        v19 += 4;
        v167 = vmovl_u8(*(uint8x8_t *)v166.i8);
        v168 = vmovl_high_u8(v166);
        v169 = vmovl_u16(*(uint16x4_t *)v168.i8);
        v170 = vmovl_high_u16(v168);
        v171 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
        v172 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v159, 3uLL), v171);
        v173 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v154, 3uLL), v171);
        v174 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v158, 3uLL), v171);
        v175 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v157, 3uLL), v171);
        v176 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v151, 3uLL), v171);
        v177 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v156, 3uLL), v171);
        v178 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v150, 3uLL), v171);
        v179.i64[0] = v170.u32[2];
        v179.i64[1] = v170.u32[3];
        v180 = (int8x16_t)vshlq_u64(v179, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v149, 3uLL), v171));
        v181 = vmovl_u16(*(uint16x4_t *)v167.i8);
        v179.i64[0] = v170.u32[0];
        v179.i64[1] = v170.u32[1];
        v182 = (int8x16_t)vshlq_u64(v179, v178);
        v179.i64[0] = v181.u32[0];
        v179.i64[1] = v181.u32[1];
        v183 = (int8x16_t)vshlq_u64(v179, v177);
        v179.i64[0] = v169.u32[2];
        v179.i64[1] = v169.u32[3];
        v184 = (int8x16_t)vshlq_u64(v179, v176);
        v185 = vmovl_high_u16(v167);
        v179.i64[0] = v181.u32[2];
        v179.i64[1] = v181.u32[3];
        v186 = (int8x16_t)vshlq_u64(v179, v175);
        v179.i64[0] = v185.u32[0];
        v179.i64[1] = v185.u32[1];
        v187 = (int8x16_t)vshlq_u64(v179, v174);
        v179.i64[0] = v169.u32[0];
        v179.i64[1] = v169.u32[1];
        v188 = (int8x16_t)vshlq_u64(v179, v173);
        v179.i64[0] = v185.u32[2];
        v179.i64[1] = v185.u32[3];
        v161 = vorrq_s8((int8x16_t)vshlq_u64(v179, v172), v161);
        v162 = vorrq_s8(v188, v162);
        v160 = vorrq_s8(v187, v160);
        v153 = vorrq_s8(v186, v153);
        v163 = vorrq_s8(v184, v163);
        v152 = vorrq_s8(v183, v152);
        v164 = vorrq_s8(v182, v164);
        v165 = vorrq_s8(v180, v165);
        v189 = vdupq_n_s64(0x10uLL);
        v158 = vaddq_s64(v158, v189);
        v157 = vaddq_s64(v157, v189);
        v156 = vaddq_s64(v156, v189);
        v159 = vaddq_s64(v159, v189);
        v154 = vaddq_s64(v154, v189);
        v151 = vaddq_s64(v151, v189);
        v150 = vaddq_s64(v150, v189);
        v149 = vaddq_s64(v149, v189);
        v155 -= 16;
      }
      while (v155);
      v190 = vorrq_s8(vorrq_s8(vorrq_s8(v152, v162), vorrq_s8(v160, v164)), vorrq_s8(vorrq_s8(v153, v163), vorrq_s8(v161, v165)));
      *(int8x8_t *)v190.i8 = vorr_s8(*(int8x8_t *)v190.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v190, v190, 8uLL));
      *v10 = *(int8x8_t *)v190.i8;
      v21 = v190.i64[0];
      if ((v17 & 0xF) == 0)
        goto LABEL_34;
      if ((v17 & 0xF) < 8uLL)
        goto LABEL_30;
    }
    else
    {
      v21 = 0;
      v22 = 0;
    }
    v191 = vdupq_n_s64(v22);
    v192 = vaddq_s64(v191, (int64x2_t)xmmword_1812332B0);
    v193 = (int8x16_t)v21;
    v194 = v15 + v22;
    v195 = v22 + (v17 & 7);
    v22 = v17 - (unint64_t)(v17 & 7);
    v196 = vaddq_s64(v191, (int64x2_t)xmmword_181267BE0);
    v197 = vaddq_s64(v191, (int64x2_t)xmmword_181233290);
    v198 = vaddq_s64(v191, (int64x2_t)xmmword_181233120);
    v199 = 0uLL;
    v200 = (uint8x8_t *)(v18 + v194);
    v201 = v195 - v17;
    v202 = 0uLL;
    v203 = 0uLL;
    do
    {
      v204 = *v200++;
      v205 = vmovl_u8(v204);
      v206 = vmovl_high_u16(v205);
      v207.i64[0] = v206.u32[2];
      v207.i64[1] = v206.u32[3];
      v208 = v207;
      v207.i64[0] = v206.u32[0];
      v207.i64[1] = v206.u32[1];
      v209 = v207;
      v210 = vmovl_u16(*(uint16x4_t *)v205.i8);
      v207.i64[0] = v210.u32[2];
      v207.i64[1] = v210.u32[3];
      v211 = v207;
      v207.i64[0] = v210.u32[0];
      v207.i64[1] = v210.u32[1];
      v212 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
      v203 = vorrq_s8((int8x16_t)vshlq_u64(v208, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v192, 3uLL), v212)), v203);
      v202 = vorrq_s8((int8x16_t)vshlq_u64(v209, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v196, 3uLL), v212)), v202);
      v199 = vorrq_s8((int8x16_t)vshlq_u64(v211, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v197, 3uLL), v212)), v199);
      v213 = vdupq_n_s64(8uLL);
      v193 = vorrq_s8((int8x16_t)vshlq_u64(v207, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v198, 3uLL), v212)), v193);
      v196 = vaddq_s64(v196, v213);
      v197 = vaddq_s64(v197, v213);
      v198 = vaddq_s64(v198, v213);
      v192 = vaddq_s64(v192, v213);
      v201 += 8;
    }
    while (v201);
    v214 = vorrq_s8(vorrq_s8(v193, v202), vorrq_s8(v199, v203));
    *(int8x8_t *)v214.i8 = vorr_s8(*(int8x8_t *)v214.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL));
    *v10 = *(int8x8_t *)v214.i8;
    v21 = v214.i64[0];
    if ((v17 & 7) != 0)
      goto LABEL_30;
LABEL_34:
    v28 = v13 - v12;
    *v9 = v15 + v17;
    *v8 = 8 * v17;
    v29 = 8 * v17 - (v13 - v12);
    if (8 * v17 < v28)
      break;
    *v10 = (int8x8_t)(v21 >> v28);
    *v8 = v29;
    v30 = (v21 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v28)) << v12;
    v23 = v30 | *(_QWORD *)&v14;
    if ((v30 | v14.i32[0]) == 1)
    {
LABEL_27:
      llvm::SimpleBitstreamCursor::ReadVBR(v4, 8u, (uint64_t)&v566);
      if ((v567 & 1) != 0)
      {
        v11 = v566;
        goto LABEL_577;
      }
      v31 = *v8;
      if (*v8 >= 4)
      {
        v45 = *(_QWORD *)v10 & 0xFLL;
        *v10 = (int8x8_t)(*(unint64_t *)v10 >> 4);
        *v8 = v31 - 4;
        if ((v45 & 8) == 0)
          goto LABEL_54;
      }
      else
      {
        if (v31)
        {
          v32 = *v10;
          v33 = 4 - v31;
          v564 = 4 - v31;
          v35 = *(_QWORD *)(a2 + 40);
          v34 = *(_QWORD *)(a2 + 48);
          v36 = v35 - v34;
          if (v35 <= v34)
            goto LABEL_67;
        }
        else
        {
          v32.i8[0] = 0;
          v33 = 4;
          v564 = 4;
          v35 = *(_QWORD *)(a2 + 40);
          v34 = *(_QWORD *)(a2 + 48);
          v36 = v35 - v34;
          if (v35 <= v34)
          {
LABEL_67:
            v59 = std::generic_category();
            memset(&__p, 0, sizeof(__p));
            LODWORD(v567) = 0;
            v570 = 0;
            v571 = 0;
            v572 = 1;
            v568 = 0;
            v569 = 0;
            *((_QWORD *)&v567 + 1) = 0;
            v566 = &unk_1E0E22B10;
            p_p = &__p;
            llvm::raw_ostream::SetBufferAndMode((uint64_t)&v566, 0, 0, 0);
            __s.__r_.__value_.__l.__size_ = (std::string::size_type)"Unexpected end of file reading %u of %u bytes";
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E203C0;
            __s.__r_.__value_.__r.__words[2] = *v9;
            v580 = v35;
            goto LABEL_68;
          }
        }
        v37 = *(_QWORD *)v4;
        v38 = (unsigned int *)(*(_QWORD *)v4 + v34);
        if (v35 >= v34 + 8)
        {
          v40 = *(_QWORD *)v38;
          *v10 = (int8x8_t)v40;
          v36 = 8;
        }
        else
        {
          *v10 = 0;
          if (v36)
          {
            if (v36 < 8uLL || (unint64_t)v10 < v37 + v34 + v36 && v38 < v8)
            {
              v39 = 0;
              v40 = 0;
              goto LABEL_48;
            }
            if (v36 >= 0x10uLL)
            {
              v39 = v36 - (unint64_t)(v36 & 0xF);
              v215 = (int64x2_t)xmmword_1812332B0;
              v216 = (int64x2_t)xmmword_181267BE0;
              v217 = (int64x2_t)xmmword_181233290;
              v218 = 0uLL;
              v219 = 0uLL;
              v220 = (int64x2_t)xmmword_181233120;
              v221 = v39;
              v222 = (int64x2_t)xmmword_181267BD0;
              v223 = (int64x2_t)xmmword_181267BC0;
              v224 = (int64x2_t)xmmword_181267BB0;
              v225 = (int64x2_t)xmmword_181267BA0;
              v226 = 0uLL;
              v227 = 0uLL;
              v228 = 0uLL;
              v229 = 0uLL;
              v230 = 0uLL;
              v231 = 0uLL;
              do
              {
                v232 = *(uint8x16_t *)v38;
                v38 += 4;
                v233 = vmovl_u8(*(uint8x8_t *)v232.i8);
                v234 = vmovl_high_u8(v232);
                v235 = vmovl_u16(*(uint16x4_t *)v234.i8);
                v236 = vmovl_high_u16(v234);
                v237 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                v238 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v215, 3uLL), v237);
                v239 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v222, 3uLL), v237);
                v240 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v216, 3uLL), v237);
                v241 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v217, 3uLL), v237);
                v242 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v223, 3uLL), v237);
                v243 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v220, 3uLL), v237);
                v244 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v224, 3uLL), v237);
                v245.i64[0] = v236.u32[2];
                v245.i64[1] = v236.u32[3];
                v246 = (int8x16_t)vshlq_u64(v245, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v225, 3uLL), v237));
                v247 = vmovl_u16(*(uint16x4_t *)v233.i8);
                v245.i64[0] = v236.u32[0];
                v245.i64[1] = v236.u32[1];
                v248 = (int8x16_t)vshlq_u64(v245, v244);
                v245.i64[0] = v247.u32[0];
                v245.i64[1] = v247.u32[1];
                v249 = (int8x16_t)vshlq_u64(v245, v243);
                v245.i64[0] = v235.u32[2];
                v245.i64[1] = v235.u32[3];
                v250 = (int8x16_t)vshlq_u64(v245, v242);
                v251 = vmovl_high_u16(v233);
                v245.i64[0] = v247.u32[2];
                v245.i64[1] = v247.u32[3];
                v252 = (int8x16_t)vshlq_u64(v245, v241);
                v245.i64[0] = v251.u32[0];
                v245.i64[1] = v251.u32[1];
                v253 = (int8x16_t)vshlq_u64(v245, v240);
                v245.i64[0] = v235.u32[0];
                v245.i64[1] = v235.u32[1];
                v254 = (int8x16_t)vshlq_u64(v245, v239);
                v245.i64[0] = v251.u32[2];
                v245.i64[1] = v251.u32[3];
                v227 = vorrq_s8((int8x16_t)vshlq_u64(v245, v238), v227);
                v228 = vorrq_s8(v254, v228);
                v226 = vorrq_s8(v253, v226);
                v219 = vorrq_s8(v252, v219);
                v229 = vorrq_s8(v250, v229);
                v218 = vorrq_s8(v249, v218);
                v230 = vorrq_s8(v248, v230);
                v231 = vorrq_s8(v246, v231);
                v255 = vdupq_n_s64(0x10uLL);
                v216 = vaddq_s64(v216, v255);
                v217 = vaddq_s64(v217, v255);
                v220 = vaddq_s64(v220, v255);
                v215 = vaddq_s64(v215, v255);
                v222 = vaddq_s64(v222, v255);
                v223 = vaddq_s64(v223, v255);
                v224 = vaddq_s64(v224, v255);
                v225 = vaddq_s64(v225, v255);
                v221 -= 16;
              }
              while (v221);
              v256 = vorrq_s8(vorrq_s8(vorrq_s8(v218, v228), vorrq_s8(v226, v230)), vorrq_s8(vorrq_s8(v219, v229), vorrq_s8(v227, v231)));
              *(int8x8_t *)v256.i8 = vorr_s8(*(int8x8_t *)v256.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL));
              *v10 = *(int8x8_t *)v256.i8;
              v40 = v256.i64[0];
              if ((v36 & 0xF) != 0)
              {
                if ((v36 & 0xF) < 8uLL)
                  goto LABEL_48;
                goto LABEL_145;
              }
            }
            else
            {
              v40 = 0;
              v39 = 0;
LABEL_145:
              v257 = vdupq_n_s64(v39);
              v258 = vaddq_s64(v257, (int64x2_t)xmmword_1812332B0);
              v259 = (int8x16_t)v40;
              v260 = v39 + v34;
              v261 = v39 + (v36 & 7);
              v39 = v36 - (unint64_t)(v36 & 7);
              v262 = vaddq_s64(v257, (int64x2_t)xmmword_181267BE0);
              v263 = vaddq_s64(v257, (int64x2_t)xmmword_181233290);
              v264 = vaddq_s64(v257, (int64x2_t)xmmword_181233120);
              v265 = 0uLL;
              v266 = (uint8x8_t *)(v37 + v260);
              v267 = v261 - v36;
              v268 = 0uLL;
              v269 = 0uLL;
              do
              {
                v270 = *v266++;
                v271 = vmovl_u8(v270);
                v272 = vmovl_high_u16(v271);
                v273.i64[0] = v272.u32[2];
                v273.i64[1] = v272.u32[3];
                v274 = v273;
                v273.i64[0] = v272.u32[0];
                v273.i64[1] = v272.u32[1];
                v275 = v273;
                v276 = vmovl_u16(*(uint16x4_t *)v271.i8);
                v273.i64[0] = v276.u32[2];
                v273.i64[1] = v276.u32[3];
                v277 = v273;
                v273.i64[0] = v276.u32[0];
                v273.i64[1] = v276.u32[1];
                v269 = vorrq_s8((int8x16_t)vshlq_u64(v274, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v258, 3uLL), v562)), v269);
                v268 = vorrq_s8((int8x16_t)vshlq_u64(v275, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v262, 3uLL), v562)), v268);
                v265 = vorrq_s8((int8x16_t)vshlq_u64(v277, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v263, 3uLL), v562)), v265);
                v278 = vdupq_n_s64(8uLL);
                v259 = vorrq_s8((int8x16_t)vshlq_u64(v273, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v264, 3uLL), v562)), v259);
                v262 = vaddq_s64(v262, v278);
                v263 = vaddq_s64(v263, v278);
                v264 = vaddq_s64(v264, v278);
                v258 = vaddq_s64(v258, v278);
                v267 += 8;
              }
              while (v267);
              v279 = vorrq_s8(vorrq_s8(v259, v268), vorrq_s8(v265, v269));
              *(int8x8_t *)v279.i8 = vorr_s8(*(int8x8_t *)v279.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v279, v279, 8uLL));
              *v10 = *(int8x8_t *)v279.i8;
              v40 = v279.i64[0];
              if ((v36 & 7) != 0)
              {
LABEL_48:
                v41 = v36 - v39;
                v42 = 8 * v39;
                v43 = (unsigned __int8 *)(v37 + v39 + v34);
                do
                {
                  v44 = *v43++;
                  v40 |= (unint64_t)v44 << (v42 & 0xF8);
                  *v10 = (int8x8_t)v40;
                  v42 += 8;
                  --v41;
                }
                while (v41);
              }
            }
          }
          else
          {
            v40 = 0;
          }
        }
        *v9 = v34 + v36;
        *v8 = 8 * v36;
        if (8 * v36 < v33)
        {
          llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)(a2 + 64), (int *)&v564, (uint64_t *)&v574);
          v11 = v574;
          goto LABEL_6;
        }
        *v10 = (int8x8_t)(v40 >> v33);
        *v8 = 8 * v36 - v33;
        if (!(((_DWORD)v40 << v31) & 8 | v32.i8[0] & 8))
        {
LABEL_54:
          if (*v8 >= 0x20)
          {
            v46 = *(unint64_t *)v10 >> (*(_BYTE *)v8 - 32);
            *v10 = (int8x8_t)HIDWORD(v46);
            *v8 = 0;
            goto LABEL_79;
          }
          *(_DWORD *)(a2 + 64) = 0;
          LODWORD(v574) = 32;
          v48 = *(_QWORD *)(a2 + 40);
          v47 = *(_QWORD *)(a2 + 48);
          v49 = v48 - v47;
          if (v48 <= v47)
          {
            v566 = *(void **)(a2 + 40);
            llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", (_QWORD *)(a2 + 48), (uint64_t *)&v566, (uint64_t *)&__s);
            v11 = (void *)__s.__r_.__value_.__r.__words[0];
            if (__s.__r_.__value_.__r.__words[0])
              goto LABEL_6;
            v61 = *v8;
            if (*v8 > 0x1F)
              goto LABEL_78;
          }
          else
          {
            v50 = *(_QWORD *)v4;
            v51 = (unsigned int *)(*(_QWORD *)v4 + v47);
            if (v48 >= v47 + 8)
            {
              *v10 = *(int8x8_t *)v51;
              v49 = 8;
              goto LABEL_77;
            }
            *v10 = 0;
            if (!v49)
              goto LABEL_77;
            v52 = (v48 - v47);
            if (v49 >= 8uLL && ((unint64_t)v10 >= v50 + v47 + v52 || v51 >= v8))
            {
              if (v52 >= 0x10)
              {
                v53 = v52 - (v49 & 0xF);
                v280 = (int64x2_t)xmmword_181267BA0;
                v281 = (int64x2_t)xmmword_181267BB0;
                v282 = (int64x2_t)xmmword_181267BC0;
                v283 = (int64x2_t)xmmword_181267BD0;
                v284 = (int64x2_t)xmmword_1812332B0;
                v285 = (int64x2_t)xmmword_181267BE0;
                v286 = 0uLL;
                v287 = v53;
                v288 = 0uLL;
                v289 = 0uLL;
                v290 = 0uLL;
                v291 = 0uLL;
                v292 = 0uLL;
                v293 = (int64x2_t)xmmword_181233290;
                v294 = 0uLL;
                v295 = 0uLL;
                v296 = (int64x2_t)xmmword_181233120;
                do
                {
                  v297 = *(uint8x16_t *)v51;
                  v51 += 4;
                  v298 = vmovl_u8(*(uint8x8_t *)v297.i8);
                  v299 = vmovl_high_u8(v297);
                  v300 = vmovl_u16(*(uint16x4_t *)v299.i8);
                  v301 = vmovl_high_u16(v299);
                  v302 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                  v303 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v284, 3uLL), v302);
                  v304 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v283, 3uLL), v302);
                  v305 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v285, 3uLL), v302);
                  v306 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v293, 3uLL), v302);
                  v307 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v282, 3uLL), v302);
                  v308 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v296, 3uLL), v302);
                  v309 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v281, 3uLL), v302);
                  v310.i64[0] = v301.u32[2];
                  v310.i64[1] = v301.u32[3];
                  v311 = (int8x16_t)vshlq_u64(v310, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v280, 3uLL), v302));
                  v312 = vmovl_u16(*(uint16x4_t *)v298.i8);
                  v310.i64[0] = v301.u32[0];
                  v310.i64[1] = v301.u32[1];
                  v313 = (int8x16_t)vshlq_u64(v310, v309);
                  v310.i64[0] = v312.u32[0];
                  v310.i64[1] = v312.u32[1];
                  v314 = (int8x16_t)vshlq_u64(v310, v308);
                  v310.i64[0] = v300.u32[2];
                  v310.i64[1] = v300.u32[3];
                  v315 = (int8x16_t)vshlq_u64(v310, v307);
                  v316 = vmovl_high_u16(v298);
                  v310.i64[0] = v312.u32[2];
                  v310.i64[1] = v312.u32[3];
                  v317 = (int8x16_t)vshlq_u64(v310, v306);
                  v310.i64[0] = v316.u32[0];
                  v310.i64[1] = v316.u32[1];
                  v318 = (int8x16_t)vshlq_u64(v310, v305);
                  v310.i64[0] = v300.u32[0];
                  v310.i64[1] = v300.u32[1];
                  v319 = (int8x16_t)vshlq_u64(v310, v304);
                  v310.i64[0] = v316.u32[2];
                  v310.i64[1] = v316.u32[3];
                  v290 = vorrq_s8((int8x16_t)vshlq_u64(v310, v303), v290);
                  v291 = vorrq_s8(v319, v291);
                  v289 = vorrq_s8(v318, v289);
                  v288 = vorrq_s8(v317, v288);
                  v292 = vorrq_s8(v315, v292);
                  v286 = vorrq_s8(v314, v286);
                  v294 = vorrq_s8(v313, v294);
                  v295 = vorrq_s8(v311, v295);
                  v320 = vdupq_n_s64(0x10uLL);
                  v285 = vaddq_s64(v285, v320);
                  v293 = vaddq_s64(v293, v320);
                  v296 = vaddq_s64(v296, v320);
                  v284 = vaddq_s64(v284, v320);
                  v283 = vaddq_s64(v283, v320);
                  v282 = vaddq_s64(v282, v320);
                  v281 = vaddq_s64(v281, v320);
                  v280 = vaddq_s64(v280, v320);
                  v287 -= 16;
                }
                while (v287);
                v321 = vorrq_s8(vorrq_s8(vorrq_s8(v286, v291), vorrq_s8(v289, v294)), vorrq_s8(vorrq_s8(v288, v292), vorrq_s8(v290, v295)));
                v322 = vorr_s8(*(int8x8_t *)v321.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v321, v321, 8uLL));
                *v10 = v322;
                if ((v49 & 0xF) == 0)
                  goto LABEL_77;
                v54 = v322;
                if ((v49 & 0xF) < 8uLL)
                  goto LABEL_63;
              }
              else
              {
                v54 = 0;
                v53 = 0;
              }
              v323 = vdupq_n_s64(v53);
              v324 = vaddq_s64(v323, (int64x2_t)xmmword_1812332B0);
              v325 = (int8x16_t)(unint64_t)v54;
              v326 = v53 + v47;
              v327 = v53 + (v49 & 7);
              v53 = v52 - (v49 & 7);
              v328 = vaddq_s64(v323, (int64x2_t)xmmword_181267BE0);
              v329 = vaddq_s64(v323, (int64x2_t)xmmword_181233290);
              v330 = vaddq_s64(v323, (int64x2_t)xmmword_181233120);
              v331 = 0uLL;
              v332 = (uint8x8_t *)(v50 + v326);
              v333 = v327 - v52;
              v334 = 0uLL;
              v335 = 0uLL;
              do
              {
                v336 = *v332++;
                v337 = vmovl_u8(v336);
                v338 = vmovl_high_u16(v337);
                v339.i64[0] = v338.u32[2];
                v339.i64[1] = v338.u32[3];
                v340 = v339;
                v339.i64[0] = v338.u32[0];
                v339.i64[1] = v338.u32[1];
                v341 = v339;
                v342 = vmovl_u16(*(uint16x4_t *)v337.i8);
                v339.i64[0] = v342.u32[2];
                v339.i64[1] = v342.u32[3];
                v343 = v339;
                v339.i64[0] = v342.u32[0];
                v339.i64[1] = v342.u32[1];
                v344 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                v335 = vorrq_s8((int8x16_t)vshlq_u64(v340, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v324, 3uLL), v344)), v335);
                v334 = vorrq_s8((int8x16_t)vshlq_u64(v341, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v328, 3uLL), v344)), v334);
                v331 = vorrq_s8((int8x16_t)vshlq_u64(v343, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v329, 3uLL), v344)), v331);
                v345 = vdupq_n_s64(8uLL);
                v325 = vorrq_s8((int8x16_t)vshlq_u64(v339, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v330, 3uLL), v344)), v325);
                v328 = vaddq_s64(v328, v345);
                v329 = vaddq_s64(v329, v345);
                v330 = vaddq_s64(v330, v345);
                v324 = vaddq_s64(v324, v345);
                v333 += 8;
              }
              while (v333);
              v346 = vorrq_s8(vorrq_s8(v325, v334), vorrq_s8(v331, v335));
              v347 = vorr_s8(*(int8x8_t *)v346.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v346, v346, 8uLL));
              *v10 = v347;
              if ((v49 & 7) != 0)
              {
                v54 = v347;
                goto LABEL_63;
              }
            }
            else
            {
              v53 = 0;
              v54 = 0;
LABEL_63:
              v55 = v52 - v53;
              v56 = 8 * v53;
              v57 = (unsigned __int8 *)(v50 + v53 + v47);
              do
              {
                v58 = *v57++;
                *(_QWORD *)&v54 |= (unint64_t)v58 << (v56 & 0xF8);
                *v10 = v54;
                v56 += 8;
                --v55;
              }
              while (v55);
            }
LABEL_77:
            *v9 = v47 + v49;
            v61 = 8 * v49;
            *v8 = v61;
            if (v61 > 0x1F)
            {
LABEL_78:
              v46 = (unint64_t)*v10;
              *v10 = (int8x8_t)HIDWORD(*(unint64_t *)v10);
              *v8 = v61 - 32;
LABEL_79:
              v63 = *(_QWORD *)(a2 + 40);
              v62 = *(_QWORD *)(a2 + 48);
              v64 = *(unsigned int *)(a2 + 64);
              v65 = 8 * v62 - v64 + 32 * v46;
              __s.__r_.__value_.__r.__words[0] = v65;
              if ((_DWORD)v64 || v63 > v62)
              {
                if (v63 >= v65 >> 3)
                {
                  *v9 = (v65 >> 3) & 0x1FFFFFFFFFFFFFF8;
                  *v8 = 0;
                  v6 = (llvm::LLVMContext *)(v65 & 0x3F);
                  if ((v65 & 0x3F) == 0
                    || (llvm::SimpleBitstreamCursor::Read(v4, v6, (uint64_t)&v566), (v567 & 1) == 0)
                    || (__p.__r_.__value_.__r.__words[0] = (std::string::size_type)v566) == 0)
                  {
                    __p.__r_.__value_.__r.__words[0] = 0;
                  }
                }
                else
                {
                  v566 = (void *)(8 * v62 - v64);
                  llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &__s, (uint64_t *)&v566, (uint64_t *)&__p);
                }
              }
              else
              {
                *(_QWORD *)&v583.__val_ = std::generic_category();
                v583.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
                llvm::createStringError((llvm *)0x5C, v583, &__p);
              }
LABEL_5:
              v11 = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_6;
            }
          }
          llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)(a2 + 64), (int *)&v574, (uint64_t *)&__p);
          goto LABEL_5;
        }
      }
      v66 = 0;
      v67 = *v8;
      while (1)
      {
LABEL_93:
        if (v66 >= 0x1D)
        {
          *(_QWORD *)&v584.__val_ = std::generic_category();
          v584.__cat_ = (const std::error_category *)"Unterminated VBR";
          llvm::createStringError((llvm *)0x5C, v584, &v563);
          v11 = v563;
          goto LABEL_6;
        }
        if (v67 < 4)
          break;
        v68 = *(_QWORD *)v10 & 0xFLL;
        *v10 = (int8x8_t)(*(unint64_t *)v10 >> 4);
        *v8 = v67 - 4;
        v67 -= 4;
        v66 += 3;
        if ((v68 & 8) == 0)
          goto LABEL_54;
      }
      if (v67)
      {
        v69 = *v10;
        v35 = *(_QWORD *)(a2 + 40);
        v70 = *(_QWORD *)(a2 + 48);
        v71 = v35 - v70;
        if (v35 <= v70)
          goto LABEL_67;
      }
      else
      {
        v69 = 0;
        v35 = *(_QWORD *)(a2 + 40);
        v70 = *(_QWORD *)(a2 + 48);
        v71 = v35 - v70;
        if (v35 <= v70)
          goto LABEL_67;
      }
      v72 = *(_QWORD *)v4;
      v73 = (unsigned int *)(*(_QWORD *)v4 + v70);
      if (v35 >= v70 + 8)
      {
        v75 = *(_QWORD *)v73;
        *v10 = (int8x8_t)v75;
        v71 = 8;
      }
      else
      {
        *v10 = 0;
        if (v71)
        {
          if (v71 < 8uLL || ((unint64_t)v10 < v72 + v70 + v71 ? (v74 = v73 >= v8) : (v74 = 1), !v74))
          {
            v76 = 0;
            v75 = 0;
            goto LABEL_111;
          }
          if (v71 >= 0x10uLL)
          {
            v76 = v71 - (unint64_t)(v71 & 0xF);
            v83 = (int64x2_t)xmmword_181267BA0;
            v84 = (int64x2_t)xmmword_181267BB0;
            v85 = (int64x2_t)xmmword_181267BC0;
            v86 = (int64x2_t)xmmword_181267BD0;
            v87 = (int64x2_t)xmmword_1812332B0;
            v88 = (int64x2_t)xmmword_181267BE0;
            v89 = 0uLL;
            v90 = v76;
            v91 = 0uLL;
            v92 = 0uLL;
            v93 = 0uLL;
            v94 = 0uLL;
            v95 = 0uLL;
            v96 = (int64x2_t)xmmword_181233290;
            v97 = 0uLL;
            v98 = 0uLL;
            v99 = (int64x2_t)xmmword_181233120;
            do
            {
              v100 = *(uint8x16_t *)v73;
              v73 += 4;
              v101 = vmovl_u8(*(uint8x8_t *)v100.i8);
              v102 = vmovl_high_u8(v100);
              v103 = vmovl_u16(*(uint16x4_t *)v102.i8);
              v104 = vmovl_high_u16(v102);
              v105 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
              v106 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v87, 3uLL), v105);
              v107 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v86, 3uLL), v105);
              v108 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v88, 3uLL), v105);
              v109 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v96, 3uLL), v105);
              v110 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v85, 3uLL), v105);
              v111 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v99, 3uLL), v105);
              v112 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v84, 3uLL), v105);
              v113.i64[0] = v104.u32[2];
              v113.i64[1] = v104.u32[3];
              v114 = (int8x16_t)vshlq_u64(v113, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v83, 3uLL), v105));
              v115 = vmovl_u16(*(uint16x4_t *)v101.i8);
              v113.i64[0] = v104.u32[0];
              v113.i64[1] = v104.u32[1];
              v116 = (int8x16_t)vshlq_u64(v113, v112);
              v113.i64[0] = v115.u32[0];
              v113.i64[1] = v115.u32[1];
              v117 = (int8x16_t)vshlq_u64(v113, v111);
              v113.i64[0] = v103.u32[2];
              v113.i64[1] = v103.u32[3];
              v118 = (int8x16_t)vshlq_u64(v113, v110);
              v119 = vmovl_high_u16(v101);
              v113.i64[0] = v115.u32[2];
              v113.i64[1] = v115.u32[3];
              v120 = (int8x16_t)vshlq_u64(v113, v109);
              v113.i64[0] = v119.u32[0];
              v113.i64[1] = v119.u32[1];
              v121 = (int8x16_t)vshlq_u64(v113, v108);
              v113.i64[0] = v103.u32[0];
              v113.i64[1] = v103.u32[1];
              v122 = (int8x16_t)vshlq_u64(v113, v107);
              v113.i64[0] = v119.u32[2];
              v113.i64[1] = v119.u32[3];
              v93 = vorrq_s8((int8x16_t)vshlq_u64(v113, v106), v93);
              v94 = vorrq_s8(v122, v94);
              v92 = vorrq_s8(v121, v92);
              v91 = vorrq_s8(v120, v91);
              v95 = vorrq_s8(v118, v95);
              v89 = vorrq_s8(v117, v89);
              v97 = vorrq_s8(v116, v97);
              v98 = vorrq_s8(v114, v98);
              v123 = vdupq_n_s64(0x10uLL);
              v88 = vaddq_s64(v88, v123);
              v96 = vaddq_s64(v96, v123);
              v99 = vaddq_s64(v99, v123);
              v87 = vaddq_s64(v87, v123);
              v86 = vaddq_s64(v86, v123);
              v85 = vaddq_s64(v85, v123);
              v84 = vaddq_s64(v84, v123);
              v83 = vaddq_s64(v83, v123);
              v90 -= 16;
            }
            while (v90);
            v124 = vorrq_s8(vorrq_s8(vorrq_s8(v89, v94), vorrq_s8(v92, v97)), vorrq_s8(vorrq_s8(v91, v95), vorrq_s8(v93, v98)));
            *(int8x8_t *)v124.i8 = vorr_s8(*(int8x8_t *)v124.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL));
            *v10 = *(int8x8_t *)v124.i8;
            v75 = v124.i64[0];
            if ((v71 & 0xF) != 0)
            {
              if ((v71 & 0xF) < 8uLL)
                goto LABEL_111;
              goto LABEL_122;
            }
          }
          else
          {
            v75 = 0;
            v76 = 0;
LABEL_122:
            v125 = vdupq_n_s64(v76);
            v126 = vaddq_s64(v125, (int64x2_t)xmmword_1812332B0);
            v127 = (int8x16_t)v75;
            v128 = v76 + v70;
            v129 = v76 + (v71 & 7);
            v76 = v71 - (unint64_t)(v71 & 7);
            v130 = vaddq_s64(v125, (int64x2_t)xmmword_181267BE0);
            v131 = vaddq_s64(v125, (int64x2_t)xmmword_181233290);
            v132 = vaddq_s64(v125, (int64x2_t)xmmword_181233120);
            v133 = 0uLL;
            v134 = (uint8x8_t *)(v72 + v128);
            v135 = v129 - v71;
            v136 = 0uLL;
            v137 = 0uLL;
            do
            {
              v138 = *v134++;
              v139 = vmovl_u8(v138);
              v140 = vmovl_high_u16(v139);
              v141.i64[0] = v140.u32[2];
              v141.i64[1] = v140.u32[3];
              v142 = v141;
              v141.i64[0] = v140.u32[0];
              v141.i64[1] = v140.u32[1];
              v143 = v141;
              v144 = vmovl_u16(*(uint16x4_t *)v139.i8);
              v141.i64[0] = v144.u32[2];
              v141.i64[1] = v144.u32[3];
              v145 = v141;
              v141.i64[0] = v144.u32[0];
              v141.i64[1] = v144.u32[1];
              v146 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
              v137 = vorrq_s8((int8x16_t)vshlq_u64(v142, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v126, 3uLL), v146)), v137);
              v136 = vorrq_s8((int8x16_t)vshlq_u64(v143, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v130, 3uLL), v146)), v136);
              v133 = vorrq_s8((int8x16_t)vshlq_u64(v145, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v131, 3uLL), v146)), v133);
              v147 = vdupq_n_s64(8uLL);
              v127 = vorrq_s8((int8x16_t)vshlq_u64(v141, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v132, 3uLL), v146)), v127);
              v130 = vaddq_s64(v130, v147);
              v131 = vaddq_s64(v131, v147);
              v132 = vaddq_s64(v132, v147);
              v126 = vaddq_s64(v126, v147);
              v135 += 8;
            }
            while (v135);
            v148 = vorrq_s8(vorrq_s8(v127, v136), vorrq_s8(v133, v137));
            *(int8x8_t *)v148.i8 = vorr_s8(*(int8x8_t *)v148.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL));
            *v10 = *(int8x8_t *)v148.i8;
            v75 = v148.i64[0];
            if ((v71 & 7) != 0)
            {
LABEL_111:
              v77 = v71 - v76;
              v78 = 8 * v76;
              v79 = (unsigned __int8 *)(v72 + v76 + v70);
              do
              {
                v80 = *v79++;
                v75 |= (unint64_t)v80 << (v78 & 0xF8);
                *v10 = (int8x8_t)v75;
                v78 += 8;
                --v77;
              }
              while (v77);
            }
          }
        }
        else
        {
          v75 = 0;
        }
      }
      v81 = 4 - v67;
      *v9 = v70 + v71;
      *v8 = 8 * v71;
      if (8 * v71 < 4 - v67)
      {
        v59 = std::generic_category();
        memset(&__p, 0, sizeof(__p));
        LODWORD(v567) = 0;
        v570 = 0;
        v571 = 0;
        v572 = 1;
        v568 = 0;
        v569 = 0;
        *((_QWORD *)&v567 + 1) = 0;
        v566 = &unk_1E0E22B10;
        p_p = &__p;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v566, 0, 0, 0);
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E20320;
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)"Unexpected end of file reading %u of %u bits";
        LODWORD(__s.__r_.__value_.__r.__words[2]) = *v8;
        HIDWORD(__s.__r_.__value_.__r.__words[2]) = v81;
LABEL_68:
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v566, (uint64_t)&__s);
        v60 = (std::string::size_type)p_p;
        v11 = operator new(0x38uLL);
        v581 = 260;
        __s.__r_.__value_.__r.__words[0] = v60;
        llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)&__s, 5, (uint64_t)v59);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v566);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        PtrElementTypeByID = v560;
LABEL_6:
        if (v11)
          goto LABEL_577;
        continue;
      }
      *v10 = (int8x8_t)(v75 >> v81);
      *v8 = 8 * v71 - (4 - v67);
      v82 = (v75 << v67) & 0xF | *(_QWORD *)&v69;
      v67 = 8 * v71 - (4 - v67);
      v66 += 3;
      if ((v82 & 8) == 0)
        goto LABEL_54;
      goto LABEL_93;
    }
LABEL_36:
    if ((_DWORD)v23 != 2)
    {
      if (!(_DWORD)v23)
      {
        if (*(_DWORD *)(a2 + 104))
        {
          if (*v8 < 0x20)
          {
            v535 = 0;
          }
          else
          {
            *v10 = (int8x8_t)(*(unint64_t *)v10 >> (*(_BYTE *)v8 - 32));
            v535 = 32;
          }
          *(_DWORD *)(a2 + 64) = v535;
          llvm::BitstreamCursor::popBlockScope(v4);
          v536 = v559;
          if (v557[0] == ((*(_QWORD *)(a2 + 720) - *(_QWORD *)(a2 + 712)) >> 5))
          {
            *(_QWORD *)v559 = 0;
            v537 = v576;
            if (v576 == v578)
              return;
LABEL_579:
            free(v537);
            return;
          }
          v566 = "Invalid constant reference";
          LOWORD(v569) = 259;
        }
        else
        {
LABEL_573:
          v566 = "Malformed block";
          LOWORD(v569) = 259;
          v536 = v559;
        }
        v537 = v576;
        if (v576 == v578)
          return;
        goto LABEL_579;
      }
      v348 = ((v23 << 32) | 3) >> 32;
      LODWORD(v577) = 0;
      VoidTy = llvm::Type::getVoidTy(*(llvm::Type **)(a2 + 424), v6);
      llvm::BitstreamCursor::readRecord(v4, v348, (uint64_t)&v576, 0, (uint64_t)&v574);
      if ((v575 & 1) != 0)
      {
        v353 = (uint64_t)v574;
        v574 = 0;
        *(_QWORD *)v559 = v353;
        v354 = 1;
      }
      else
      {
        v351 = (int)v574;
        switch((int)v574)
        {
          case 1:
            if (!(_DWORD)v577
              || (v361 = *(_QWORD *)v576,
                  v362 = *(_QWORD *)(a2 + 520),
                  *(_QWORD *)v576 >= (unint64_t)((*(_QWORD *)(a2 + 528) - v362) >> 3))
              || (v363 = *(_QWORD *)(v362 + 8 * v361)) == 0)
            {
              v352 = "Invalid settype record";
              goto LABEL_379;
            }
            if (v363 == VoidTy)
            {
              v352 = "Invalid constant type";
              goto LABEL_379;
            }
            Int32Ty = *(llvm::Constant **)(v362 + 8 * v361);
            v561 = *(_QWORD *)v576;
            v354 = 2;
            VirtualTypeID = v561;
            break;
          case 2:
            v364 = *((unsigned __int8 *)Int32Ty + 8);
            if ((v364 > 0xE || ((1 << v364) & 0x4180) == 0)
              && (v364 != 21 || llvm::TargetExtType::hasProperty(Int32Ty, 1)))
            {
              llvm::Constant::getNullValue(Int32Ty, (Type *)v6);
              goto LABEL_437;
            }
            v365 = "Invalid type for a constant null value";
LABEL_178:
            v566 = v365;
            LOWORD(v569) = 259;
            v354 = 1;
            PtrElementTypeByID = v560;
            break;
          case 4:
            if (*((_BYTE *)Int32Ty + 8) != 13 || !(_DWORD)v577)
            {
              v352 = "Invalid integer const record";
              goto LABEL_379;
            }
            v366 = *(_QWORD *)v576;
            if ((*(_QWORD *)v576 & 1) != 0)
            {
              if (v366 == 1)
                v367 = 0x8000000000000000;
              else
                v367 = -(uint64_t)(v366 >> 1);
            }
            else
            {
              v367 = v366 >> 1;
            }
            v382 = (uint64_t)llvm::ConstantInt::get(Int32Ty, v367, 0);
            goto LABEL_437;
          case 5:
            if (*((_DWORD *)Int32Ty + 2) != 13 || !(_DWORD)v577)
            {
              v352 = "Invalid wide integer const record";
              goto LABEL_379;
            }
            llvm::readWideAPInt((uint64_t)v576, v577, *((_DWORD *)Int32Ty + 2) >> 8, (uint64_t)&v566);
            String = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a2 + 424), (llvm::LLVMContext *)&v566, v368);
            if (v567 >= 0x41 && v566)
            {
              v370 = String;
              operator delete[](v566);
              String = v370;
            }
            goto LABEL_543;
          case 6:
            v371 = v577;
            if (!(_DWORD)v577)
            {
              v352 = "Invalid float const record";
              goto LABEL_379;
            }
            switch(*((_BYTE *)Int32Ty + 8))
            {
              case 0:
                v372 = *(llvm::ConstantFP **)(a2 + 424);
                v373 = llvm::APFloatBase::IEEEhalf(v350);
                goto LABEL_452;
              case 1:
                v372 = *(llvm::ConstantFP **)(a2 + 424);
                v373 = llvm::APFloatBase::BFloat(v350);
LABEL_452:
                v494 = v373;
                v495 = *(unsigned __int16 *)v576;
                v496 = 16;
                goto LABEL_455;
              case 2:
                v372 = *(llvm::ConstantFP **)(a2 + 424);
                v494 = llvm::APFloatBase::IEEEsingle(v350);
                v495 = *(unsigned int *)v576;
                v496 = 32;
                goto LABEL_455;
              case 3:
                v372 = *(llvm::ConstantFP **)(a2 + 424);
                v494 = llvm::APFloatBase::IEEEdouble(v350);
                v495 = *(_QWORD *)v576;
                v496 = 64;
LABEL_455:
                LODWORD(__s.__r_.__value_.__r.__words[1]) = v496;
                __s.__r_.__value_.__r.__words[0] = v495;
                llvm::APFloat::APFloat((llvm::APFloatBase *)&v566, v494, (const llvm::APInt **)&__s);
                v498 = v372;
                goto LABEL_462;
              case 4:
                __s.__r_.__value_.__r.__words[0] = *((unsigned __int16 *)v576 + 4) | (*(_QWORD *)v576 << 16);
                __s.__r_.__value_.__l.__size_ = *((unsigned __int16 *)v576 + 3);
                v499 = *(llvm::ConstantFP **)(a2 + 424);
                v500 = llvm::APFloatBase::x87DoubleExtended(v350);
                llvm::APInt::APInt((uint64_t)&__p, 0x50u, &__s, 2u);
                llvm::APFloat::APFloat((llvm::APFloatBase *)&v566, v500, (const llvm::APInt **)&__p);
                v502 = llvm::ConstantFP::get(v499, (llvm::LLVMContext *)&v566, v501);
                llvm::APFloat::~APFloat((llvm::APFloat *)&v566);
                if (LODWORD(__p.__r_.__value_.__r.__words[1]) < 0x41)
                  goto LABEL_542;
                v503 = (void *)__p.__r_.__value_.__r.__words[0];
                if (!__p.__r_.__value_.__r.__words[0])
                  goto LABEL_542;
                goto LABEL_464;
              case 5:
                v504 = *(llvm::ConstantFP **)(a2 + 424);
                v505 = llvm::APFloatBase::IEEEquad(v350);
                goto LABEL_461;
              case 6:
                v504 = *(llvm::ConstantFP **)(a2 + 424);
                v505 = llvm::APFloatBase::PPCDoubleDouble(v350);
LABEL_461:
                v506 = v505;
                llvm::APInt::APInt((uint64_t)&__s, 0x80u, v576, v371);
                llvm::APFloat::APFloat((llvm::APFloatBase *)&v566, v506, (const llvm::APInt **)&__s);
                v498 = v504;
LABEL_462:
                v502 = llvm::ConstantFP::get(v498, (llvm::LLVMContext *)&v566, v497);
                llvm::APFloat::~APFloat((llvm::APFloat *)&v566);
                if (LODWORD(__s.__r_.__value_.__r.__words[1]) >= 0x41)
                {
                  v503 = (void *)__s.__r_.__value_.__r.__words[0];
                  if (__s.__r_.__value_.__r.__words[0])
LABEL_464:
                    operator delete[](v503);
                }
                break;
              default:
                goto LABEL_357;
            }
            goto LABEL_542;
          case 7:
            if (!(_DWORD)v577)
            {
              v352 = "Invalid aggregate record";
              goto LABEL_379;
            }
            v374 = 0;
            LODWORD(v375) = 0;
            v566 = (char *)&v567 + 8;
            *(_QWORD *)&v567 = 0x1000000000;
            v376 = 8 * v577;
            do
            {
              v377 = *(_DWORD *)((char *)v576 + v374);
              if (v375 >= DWORD1(v567))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v566, (char *)&v567 + 8, v375 + 1, 4);
                LODWORD(v375) = v567;
              }
              v374 += 8;
              *((_DWORD *)v566 + v375) = v377;
              v375 = (v567 + 1);
              LODWORD(v567) = v567 + 1;
            }
            while (v376 != v374);
            v448 = *((_DWORD *)Int32Ty + 2);
            if (v448 == 16)
            {
              v449 = 255;
              goto LABEL_414;
            }
            if (v448 == 17)
            {
              v449 = 254;
LABEL_414:
              LOWORD(__s.__r_.__value_.__l.__data_) = v449;
              HIDWORD(__s.__r_.__value_.__r.__words[0]) = 0;
              __s.__r_.__value_.__l.__size_ = 0;
              goto LABEL_415;
            }
            if ((v448 & 0xFE) == 0x12)
            {
              v449 = 253;
              goto LABEL_414;
            }
            v476 = llvm::UndefValue::get(Int32Ty, Int32Ty);
LABEL_415:
            String = v476;
            v477 = (char *)v566;
            v478 = (char *)&v567 + 8;
LABEL_421:
            if (v477 != v478)
            {
LABEL_504:
              v523 = String;
              free(v477);
              String = v523;
            }
            goto LABEL_543;
          case 8:
          case 9:
            v355 = v577;
            if (!(_DWORD)v577)
            {
              v352 = "Invalid string record";
              goto LABEL_379;
            }
            v356 = (int8x16x4_t *)v576;
            v566 = &v568;
            v567 = xmmword_181236BC0;
            if (v577 < 0x11)
            {
              v358 = 0;
              v359 = &v568;
            }
            else
            {
              v548 = (int8x16x4_t *)v576;
              v357 = v577;
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v566, &v568, v577, 1);
              v356 = v548;
              v355 = v357;
              v359 = (uint64_t *)v566;
              v358 = v567;
            }
            v445 = (char *)v359 + v358;
            v446 = (v355 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (v446 < 7)
            {
              v447 = v356;
              goto LABEL_502;
            }
            if (v445 < (_BYTE *)v356 + 8 * v355)
            {
              v447 = v356;
              if (v356 < (int8x16x4_t *)((char *)v359 + v358 + v446 + 1))
                goto LABEL_502;
            }
            v450 = v446 + 1;
            if (v446 >= 0x1F)
            {
              v451 = v450 & 0x3FFFFFFFFFFFFFE0;
              v480 = v356 + 2;
              v481 = (_OWORD *)((char *)v359 + v358 + 16);
              v482 = v450 & 0x3FFFFFFFFFFFFFE0;
              do
              {
                *(_QWORD *)&v483 = vqtbl4q_s8(v480[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
                *(_QWORD *)&v484 = vqtbl4q_s8(*v480, (int8x16_t)xmmword_18125CFF0).u64[0];
                *((_QWORD *)&v483 + 1) = vqtbl4q_s8(v480[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
                *((_QWORD *)&v484 + 1) = vqtbl4q_s8(v480[1], (int8x16_t)xmmword_18125CFF0).u64[0];
                *(v481 - 1) = v483;
                *v481 = v484;
                v480 += 4;
                v481 += 2;
                v482 -= 32;
              }
              while (v482);
              if (v450 == v451)
                goto LABEL_503;
              if ((v450 & 0x18) == 0)
              {
                v447 = (int8x16x4_t *)((char *)v356 + 8 * v451);
                v445 += v451;
                do
                {
LABEL_502:
                  v522 = v447->val[0].i64[0];
                  v447 = (int8x16x4_t *)((char *)v447 + 8);
                  *v445++ = v522;
                }
                while (v447 != (int8x16x4_t *)((char *)v356 + 8 * v355));
                goto LABEL_503;
              }
            }
            else
            {
              v451 = 0;
            }
            v445 += v450 & 0x3FFFFFFFFFFFFFF8;
            v447 = (int8x16x4_t *)((char *)v356 + 8 * (v450 & 0x3FFFFFFFFFFFFFF8));
            v485 = (uint64_t *)((char *)v359 + v451 + v358);
            v486 = v451 - (v450 & 0x3FFFFFFFFFFFFFF8);
            v487 = (int8x16x4_t *)((char *)v356 + 8 * v451);
            do
            {
              *v485++ = vqtbl4q_s8(*v487++, (int8x16_t)xmmword_18125D000).u64[0];
              v486 += 8;
            }
            while (v486);
            if (v450 != (v450 & 0x3FFFFFFFFFFFFFF8))
              goto LABEL_502;
LABEL_503:
            *(_QWORD *)&v567 = v567 + v355;
            String = llvm::ConstantDataArray::getString(*(llvm::Type **)(a2 + 424), (llvm::Type *)v566, v567, v351 == 9);
            v477 = (char *)v566;
            if (v566 != &v568)
              goto LABEL_504;
            goto LABEL_543;
          case 10:
            if (v577 <= 2)
            {
              v352 = "Invalid binary op constexpr record";
              goto LABEL_379;
            }
            v452 = Int32Ty;
            v453 = *((_DWORD *)Int32Ty + 2);
            v454 = *((_DWORD *)Int32Ty + 2) & 0xFE;
            LOBYTE(v455) = *((_DWORD *)Int32Ty + 2);
            if (v454 == 18)
              v455 = *(_DWORD *)(**((_QWORD **)Int32Ty + 2) + 8);
            if (v455 >= 6u)
            {
              if ((v455 & 0xFD) == 4)
              {
                v456 = 1;
                goto LABEL_409;
              }
            }
            else
            {
              v456 = 1;
              if (((0x2Fu >> v455) & 1) != 0 || (v455 & 0xFD) == 4)
                goto LABEL_409;
            }
            if (v454 == 18)
              v453 = *(unsigned __int8 *)(**((_QWORD **)Int32Ty + 2) + 8);
            if (v453 == 13)
            {
              v456 = 0;
LABEL_409:
              switch(*(_DWORD *)v576)
              {
                case 0:
                  v474 = v456 == 0;
                  v475 = 13;
                  goto LABEL_513;
                case 1:
                  v474 = v456 == 0;
                  v475 = 15;
                  goto LABEL_513;
                case 2:
                  v474 = v456 == 0;
                  v475 = 17;
                  goto LABEL_513;
                case 3:
                  if ((v456 & 1) != 0)
                    goto LABEL_358;
                  v524 = 19;
                  break;
                case 4:
                  v474 = v456 == 0;
                  v475 = 20;
                  goto LABEL_513;
                case 5:
                  if ((v456 & 1) != 0)
                    goto LABEL_358;
                  v524 = 22;
                  break;
                case 6:
                  v474 = v456 == 0;
                  v475 = 23;
LABEL_513:
                  if (v474)
                    v524 = v475;
                  else
                    v524 = v475 + 1;
                  break;
                case 7:
                  if ((v456 & 1) != 0)
                    goto LABEL_358;
                  v524 = 25;
                  break;
                case 8:
                  if ((v456 & 1) != 0)
                    goto LABEL_358;
                  v524 = 26;
                  break;
                case 9:
                  if ((v456 & 1) != 0)
                    goto LABEL_358;
                  v524 = 27;
                  break;
                case 0xA:
                  if ((v456 & 1) != 0)
                    goto LABEL_358;
                  v524 = 28;
                  break;
                case 0xB:
                  if ((v456 & 1) != 0)
                    goto LABEL_358;
                  v524 = 29;
                  break;
                case 0xC:
                  if (v456)
                    goto LABEL_358;
                  v524 = 30;
                  break;
                default:
                  goto LABEL_358;
              }
              if (v577 < 4)
              {
LABEL_521:
                v527 = 0;
              }
              else
              {
                HIDWORD(v526) = v524 - 13;
                LODWORD(v526) = v524 - 13;
                v525 = v526 >> 1;
                if (v525 < 7 && ((0x47u >> v525) & 1) != 0)
                {
                  v528 = 3;
                }
                else
                {
                  if ((v524 - 19) >= 9 || ((0x183u >> (v524 - 19)) & 1) == 0)
                    goto LABEL_521;
                  v528 = 1;
                }
                v527 = v528 & *((_BYTE *)v576 + 24);
              }
              v508 = vmovn_s64(*(int64x2_t *)((char *)v576 + 8));
              v529 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 56, 3);
              v510 = llvm::Value::Value(v529, Int32Ty, 255);
              String = v510;
              *(_BYTE *)(v510 + 24) = v524;
              *(_BYTE *)(v510 + 25) = v527;
              goto LABEL_538;
            }
LABEL_358:
            v382 = llvm::UndefValue::get(v452, v6);
LABEL_437:
            String = v382;
LABEL_543:
            llvm::BitcodeReaderValueList::assignValue((llvm::BitcodeReaderValueList *)(a2 + 712), (llvm::Value *)String, v557[0], VirtualTypeID, v559);
            v354 = *(_QWORD *)v559 != 0;
            if (*(_QWORD *)v559)
              v531 = v557[0];
            else
              v531 = v557[0] + 1;
            v557[0] = v531;
LABEL_547:
            PtrElementTypeByID = v560;
            break;
          case 11:
            if (v577 <= 2)
              goto LABEL_200;
            v457 = *(_QWORD *)v576;
            if (*(_QWORD *)v576 >= 0xD)
              goto LABEL_357;
            {
LABEL_200:
              v352 = "Invalid cast constexpr record";
              goto LABEL_379;
            }
            LOWORD(v566) = (v457 + 38);
            HIDWORD(v566) = 0;
            *(_QWORD *)&v567 = 0;
            LODWORD(__s.__r_.__value_.__l.__data_) = *((_QWORD *)v576 + 2);
            goto LABEL_437;
          case 12:
          case 20:
          case 24:
            if (v577 <= 1)
            {
              v352 = "Constant GEP record must have at least two elements";
              goto LABEL_379;
            }
            if ((_DWORD)v574 != 24 && (v577 & 1) == 0)
            {
              v360 = 0;
              TypeByID = 0;
LABEL_330:
              LOBYTE(v546) = v351 == 20;
              LODWORD(v541) = -1;
              v444 = v576;
              goto LABEL_382;
            }
            if (v351 != 24)
            {
              v360 = 1;
              goto LABEL_330;
            }
            v444 = v576;
            v546 = *((_DWORD *)v576 + 2) & 1;
            v541 = *((_QWORD *)v576 + 1) >> 1;
            v360 = 2;
LABEL_382:
            v566 = (char *)&v567 + 8;
            *(_QWORD *)&v567 = 0x1000000000;
            if ((_DWORD)v577 == v360)
              goto LABEL_383;
            v464 = (llvm::LLVMContext *)v444[v360];
            do
            {
              {
                v463 = "Invalid getelementptr constexpr record";
                goto LABEL_445;
              }
              v465 = *((_QWORD *)v576 + v360 + 1);
              v466 = v567;
              if (v567 >= (unint64_t)DWORD1(v567))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v566, (char *)&v567 + 8, v567 + 1, 4);
                v466 = v567;
              }
              *((_DWORD *)v566 + v466) = v465;
              v360 += 2;
              v467 = v567 + 1;
              LODWORD(v567) = v567 + 1;
            }
            while (v360 != (_DWORD)v577);
            if (!v467)
            {
LABEL_383:
              v463 = "Invalid gep with no operands";
              goto LABEL_445;
            }
            if ((*(_DWORD *)(v468 + 8) & 0xFE) == 0x12)
            {
              LODWORD(v464) = (_DWORD)ContainedTypeID;
              if (!v468)
                goto LABEL_444;
              v470 = *(unsigned __int8 *)(v468 + 8);
            }
            else
            {
              v470 = *(_DWORD *)(v468 + 8);
            }
            if (v470 != 15)
            {
LABEL_444:
              v463 = "GEP base operand must be pointer or vector of pointer";
              goto LABEL_445;
            }
            if (TypeByID)
            {
              v491 = *(_QWORD *)(v468 + 24);
              if (v491)
              {
                v492 = TypeByID;
                if (v491 != TypeByID)
                {
                  v463 = "Explicit gep operator type does not match pointee type of pointer operand";
                  goto LABEL_445;
                }
              }
              else
              {
                v492 = TypeByID;
              }
            }
            else
            {
              if (!v492)
              {
                v463 = "Missing element type for old-style constant GEP";
LABEL_445:
                __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v463;
                v581 = 259;
                String = 0;
                v354 = 1;
                v493 = v566;
                if (v566 == (char *)&v567 + 8)
                  goto LABEL_448;
                goto LABEL_446;
              }
            }
            __s.__r_.__value_.__s.__data_[0] = 34;
            __s.__r_.__value_.__s.__data_[1] = v546;
            HIDWORD(__s.__r_.__value_.__r.__words[0]) = v541;
            __s.__r_.__value_.__l.__size_ = v492;
            v354 = 5;
            v493 = v566;
            if (v566 == (char *)&v567 + 8)
              goto LABEL_448;
LABEL_446:
            v443 = String;
            free(v493);
LABEL_447:
            String = v443;
LABEL_448:
            if (v354 != 5)
              goto LABEL_547;
            goto LABEL_543;
          case 13:
            if (v577 <= 2)
            {
              v352 = "Invalid select constexpr record";
              goto LABEL_379;
            }
            v385 = *((_QWORD *)v576 + 2);
            v386 = vmovn_s64(*(int64x2_t *)v576);
            v458 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 60, 3);
            v388 = llvm::Value::Value(v458, Int32Ty, 255);
            String = v388;
            v389 = 57;
            goto LABEL_360;
          case 14:
            if (v577 <= 2)
              goto LABEL_325;
            if (!v378 || (*(_DWORD *)(v378 + 8) & 0xFE) != 0x12)
              goto LABEL_325;
            v379 = v576;
            v380 = (char *)v576 + 16;
            if ((_DWORD)v577 != 4)
              goto LABEL_209;
            {
LABEL_325:
              v352 = "Invalid extractelement constexpr record";
              goto LABEL_379;
            }
            v379 = v576;
            v380 = (char *)v576 + 24;
LABEL_209:
            v381 = *(_QWORD *)v380;
            LOWORD(v566) = 61;
            HIDWORD(v566) = 0;
            *(_QWORD *)&v567 = 0;
            LODWORD(__s.__r_.__value_.__l.__data_) = v379[1];
            HIDWORD(__s.__r_.__value_.__r.__words[0]) = v381;
            goto LABEL_437;
          case 15:
            if (v577 < 3 || (*((_DWORD *)Int32Ty + 2) & 0xFE) != 0x12 || !Int32Ty)
              goto LABEL_346;
            v383 = (int64x2_t *)v576;
            v384 = (char *)v576 + 16;
            if ((_DWORD)v577 != 4)
              goto LABEL_216;
            {
LABEL_346:
              v352 = "Invalid insertelement constexpr record";
              goto LABEL_379;
            }
            v383 = (int64x2_t *)v576;
            v384 = (char *)v576 + 24;
LABEL_216:
            v385 = *(_QWORD *)v384;
            v386 = vmovn_s64(*v383);
            v387 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 60, 3);
            v388 = llvm::Value::Value(v387, Int32Ty, 255);
            String = v388;
            v389 = 62;
            goto LABEL_360;
          case 16:
            if (v577 >= 3 && (*((_DWORD *)Int32Ty + 2) & 0xFE) == 0x12 && Int32Ty)
            {
              v385 = *((_QWORD *)v576 + 2);
              v386 = vmovn_s64(*(int64x2_t *)v576);
              v390 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 60, 3);
              v391 = Int32Ty;
              goto LABEL_251;
            }
            v352 = "Invalid shufflevector constexpr record";
            goto LABEL_379;
          case 17:
            if (v577 <= 3)
            {
              v352 = "Invalid cmp constexpt record";
              goto LABEL_379;
            }
            if (!v459)
            {
              v352 = "Invalid cmp constexpr record";
              goto LABEL_379;
            }
            v460 = *(_DWORD *)(v459 + 8);
            if ((v460 & 0xFE) == 0x12)
              v460 = *(_DWORD *)(**(_QWORD **)(v459 + 16) + 8);
            if (v460 < 6u && ((0x2Fu >> v460) & 1) != 0)
            {
              v461 = 54;
            }
            else if ((v460 & 0xFD) == 4)
            {
              v461 = 54;
            }
            else
            {
              v461 = 53;
            }
            v507 = *((_QWORD *)v576 + 3);
            v508 = vmovn_s64(*(int64x2_t *)((char *)v576 + 8));
            v509 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 56, 3);
            v510 = llvm::Value::Value(v509, Int32Ty, 255);
            String = v510;
            *(_BYTE *)(v510 + 24) = v461;
            *(_BYTE *)(v510 + 25) = v507;
LABEL_538:
            *(_QWORD *)(v510 + 28) = 2;
            *(_QWORD *)(v510 + 40) = 0;
            *(int32x2_t *)(v510 + 48) = v508;
            goto LABEL_543;
          case 18:
            if (v577 <= 1)
              goto LABEL_324;
            memset(&__s, 0, sizeof(__s));
            memset(&__p, 0, sizeof(__p));
            v392 = *((_QWORD *)v576 + 1);
            v393 = (v392 + 2);
            if (v393 >= v577
              || v577 < v392 + *((_QWORD *)v576 + v393) + 3)
            {
              goto LABEL_319;
            }
            v538 = *(_QWORD *)v576;
            v543 = *((_QWORD *)v576 + v393);
            v550 = *((_QWORD *)v576 + 1);
            if ((_DWORD)v392)
            {
              v394 = 0;
              v395 = *((_QWORD *)v576 + 1);
              do
                std::string::push_back(&__s, *((_QWORD *)v576 + (v394++ + 2)));
              while (v395 != v394);
            }
            if ((_DWORD)v543)
            {
              v396 = v543;
              v397 = v550 + 3;
              do
              {
                std::string::push_back(&__p, *((_QWORD *)v576 + v397++));
                --v396;
              }
              while (v396);
            }
            llvm::UpgradeInlineAsmString(&__s);
            if (!PtrElementTypeByID)
              goto LABEL_434;
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_s = &__s;
            else
              p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            else
              size = __s.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v400 = &__p;
            else
              v400 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v401 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v401 = __p.__r_.__value_.__l.__size_;
            v402 = llvm::InlineAsm::get(PtrElementTypeByID, (uint64_t)p_s, size, (uint64_t)v400, v401, v538 & 1, v538 > 1, 0, 0);
            goto LABEL_493;
          case 19:
            v403 = *((_DWORD *)Int32Ty + 2);
            if (!v404 || v577 < 4 || (v403 & 0xFE) != 0x12 || (*(_DWORD *)(v404 + 8) & 0xFE) != 0x12)
            {
              v352 = "Invalid shufflevector constexpr record";
              goto LABEL_379;
            }
            v385 = *((_QWORD *)v576 + 3);
            v386 = vmovn_s64(*(int64x2_t *)((char *)v576 + 8));
            v390 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 60, 3);
            v391 = Int32Ty;
LABEL_251:
            v388 = llvm::Value::Value(v390, v391, 255);
            String = v388;
            v389 = 63;
LABEL_360:
            *(_WORD *)(v388 + 24) = v389;
            *(_QWORD *)(v388 + 28) = 3;
            *(_QWORD *)(v388 + 40) = 0;
            *(int32x2_t *)(v388 + 48) = v386;
            *(_DWORD *)(v388 + 56) = v385;
            goto LABEL_543;
          case 21:
            if (v577 > 2
            {
              v406 = *((_QWORD *)v576 + 1);
              v405 = *((_QWORD *)v576 + 2);
              v407 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 52, 3);
              String = llvm::Value::Value(v407, Int32Ty, 255);
              *(_WORD *)(String + 24) = 250;
              *(_DWORD *)(String + 28) = 1;
              *(_DWORD *)(String + 32) = v405;
              *(_QWORD *)(String + 40) = 0;
              *(_DWORD *)(String + 48) = v406;
              goto LABEL_543;
            }
            v352 = "Invalid blockaddress record";
            goto LABEL_379;
          case 22:
            if (!(_DWORD)v577)
            {
              v352 = "Invalid data record";
              goto LABEL_379;
            }
            v408 = (llvm::Type *)*((_QWORD *)Int32Ty + 3);
            if (llvm::Type::isIntegerTy(v408, 8))
            {
              llvm::SmallVector<unsigned char,16u>::SmallVector<unsigned long long *,void>((uint64_t)&v566, (unint64_t)v576, (uint64_t *)v576 + v577);
              v410 = *(llvm::Type **)(a2 + 424);
              if ((*((_DWORD *)Int32Ty + 2) & 0xFE) == 0x12)
                v411 = llvm::ConstantDataVector::get(v410, (llvm::LLVMContext *)v566, (llvm::Type *)v567);
              else
                v411 = llvm::ConstantDataArray::get<llvm::SmallVector<unsigned char,16u>>(v410, (llvm::Type **)&v566, v409);
              String = v411;
              v478 = (char *)&v568;
              v477 = (char *)v566;
              goto LABEL_421;
            }
            if (llvm::Type::isIntegerTy(v408, 16))
            {
              llvm::SmallVector<unsigned short,16u>::SmallVector<unsigned long long *,void>((uint64_t)&v566, (int32x4_t *)v576, (int32x4_t *)((char *)v576 + 8 * v577));
              v472 = *(llvm::Type **)(a2 + 424);
              if ((*((_DWORD *)Int32Ty + 2) & 0xFE) == 0x12)
                v473 = llvm::ConstantDataVector::get(v472, (llvm::LLVMContext *)v566, (llvm::Type *)v567);
              else
                v473 = llvm::ConstantDataArray::get<llvm::SmallVector<unsigned short,16u>>(v472, (uint64_t)&v566, v471);
              String = v473;
              v477 = (char *)v566;
              if (v566 != &v568)
                goto LABEL_504;
            }
            else
            {
              if (llvm::Type::isIntegerTy(v408, 32))
              {
                llvm::SmallVector<unsigned int,16u>::SmallVector<unsigned long long *,void>(&v566, (int32x4_t *)v576, (int32x4_t *)((char *)v576 + 8 * v577));
                v489 = *(llvm::Type **)(a2 + 424);
                if ((*((_DWORD *)Int32Ty + 2) & 0xFE) == 0x12)
                  v490 = llvm::ConstantDataVector::get(v489, (llvm::LLVMContext *)v566, (llvm::Type *)v567);
                else
                  v490 = llvm::ConstantDataArray::get<llvm::SmallVector<unsigned int,16u>>(v489, (uint64_t)&v566, v488);
              }
              else
              {
                if (!llvm::Type::isIntegerTy(v408, 64))
                {
                  switch(*((_BYTE *)v408 + 8))
                  {
                    case 0:
                    case 1:
                      llvm::SmallVector<unsigned short,16u>::SmallVector<unsigned long long *,void>((uint64_t)&v566, (int32x4_t *)v576, (int32x4_t *)((char *)v576 + 8 * v577));
                      if ((*((_DWORD *)Int32Ty + 2) & 0xFE) == 0x12)
                        FP = llvm::ConstantDataVector::getFP(v408, (llvm::Type *)v566, (llvm::Type *)v567);
                      else
                        FP = llvm::ConstantDataArray::getFP(v408, (llvm::Type *)v566, (llvm::Type *)v567);
                      v502 = (_QWORD *)FP;
                      v530 = v566;
                      if (v566 == &v568)
                        goto LABEL_542;
                      goto LABEL_541;
                    case 2:
                      llvm::SmallVector<unsigned int,16u>::SmallVector<unsigned long long *,void>(&v566, (int32x4_t *)v576, (int32x4_t *)((char *)v576 + 8 * v577));
                      if ((*((_DWORD *)Int32Ty + 2) & 0xFE) == 0x12)
                        v490 = llvm::ConstantDataVector::getFP(v408, (llvm::Type *)v566, (llvm::Type *)v567);
                      else
                        v490 = llvm::ConstantDataArray::getFP(v408, (llvm::Type *)v566, (llvm::Type *)v567);
                      goto LABEL_540;
                    case 3:
                      llvm::SmallVector<unsigned long long,16u>::SmallVector<unsigned long long *,void>(&v566, v576, (_BYTE *)v576 + 8 * v577);
                      if ((*((_DWORD *)Int32Ty + 2) & 0xFE) == 0x12)
                        v490 = llvm::ConstantDataVector::getFP(v408, (llvm::Type *)v566, (llvm::Type *)v567);
                      else
                        v490 = llvm::ConstantDataArray::getFP(v408, (llvm::Type *)v566, (llvm::Type *)v567);
                      goto LABEL_540;
                    default:
                      v365 = "Invalid type for value";
                      goto LABEL_178;
                  }
                }
                llvm::SmallVector<unsigned long long,16u>::SmallVector<unsigned long long *,void>(&v566, v576, (_BYTE *)v576 + 8 * v577);
                v512 = *(llvm::Type **)(a2 + 424);
                if ((*((_DWORD *)Int32Ty + 2) & 0xFE) == 0x12)
                  v490 = llvm::ConstantDataVector::get(v512, (llvm::LLVMContext *)v566, (llvm::Type *)v567);
                else
                  v490 = llvm::ConstantDataArray::get<llvm::SmallVector<unsigned long long,16u>>(v512, (uint64_t)&v566, v511);
              }
LABEL_540:
              v502 = (_QWORD *)v490;
              v530 = v566;
              if (v566 != (char *)&v567 + 8)
LABEL_541:
                free(v530);
LABEL_542:
              String = (uint64_t)v502;
            }
            goto LABEL_543;
          case 23:
            if (v577 <= 1)
              goto LABEL_324;
            memset(&__s, 0, sizeof(__s));
            memset(&__p, 0, sizeof(__p));
            v412 = *((_QWORD *)v576 + 1);
            v413 = (v412 + 2);
            if (v413 >= v577
              || v577 < v412 + *((_QWORD *)v576 + v413) + 3)
            {
              goto LABEL_319;
            }
            v539 = *(_QWORD *)v576;
            v544 = *((_QWORD *)v576 + v413);
            v551 = *((_QWORD *)v576 + 1);
            if ((_DWORD)v412)
            {
              v414 = 0;
              v415 = *((_QWORD *)v576 + 1);
              do
                std::string::push_back(&__s, *((_QWORD *)v576 + (v414++ + 2)));
              while (v415 != v414);
            }
            if ((_DWORD)v544)
            {
              v416 = v544;
              v417 = v551 + 3;
              do
              {
                std::string::push_back(&__p, *((_QWORD *)v576 + v417++));
                --v416;
              }
              while (v416);
            }
            llvm::UpgradeInlineAsmString(&__s);
            if (!PtrElementTypeByID)
              goto LABEL_434;
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v418 = &__s;
            else
              v418 = (std::string *)__s.__r_.__value_.__r.__words[0];
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v419 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            else
              v419 = __s.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v420 = &__p;
            else
              v420 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v421 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v421 = __p.__r_.__value_.__l.__size_;
            v402 = llvm::InlineAsm::get(PtrElementTypeByID, (uint64_t)v418, v419, (uint64_t)v420, v421, v539 & 1, (v539 & 2) != 0, v539 >> 2, 0);
            goto LABEL_493;
          case 25:
            if (v577 <= 1)
            {
              v352 = "Invalid unary op constexpr record";
              goto LABEL_379;
            }
            v462 = *((_DWORD *)Int32Ty + 2);
            if ((v462 & 0xFE) == 0x12)
              v462 = *(_DWORD *)(**((_QWORD **)Int32Ty + 2) + 8);
            if (v462 >= 4u && v462 != 5 && (v462 & 0xFD) != 4 || *(_DWORD *)v576)
            {
              v452 = Int32Ty;
              goto LABEL_358;
            }
            v422 = *((_QWORD *)v576 + 1);
            v479 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 52, 3);
            v424 = llvm::Value::Value(v479, Int32Ty, 255);
            String = v424;
            v425 = 12;
            goto LABEL_417;
          case 26:
            v382 = llvm::PoisonValue::get(Int32Ty, v6);
            goto LABEL_437;
          case 27:
            if (v577 > 1
            {
              v422 = *((_QWORD *)v576 + 1);
              v423 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 52, 3);
              v424 = llvm::Value::Value(v423, Int32Ty, 255);
              String = v424;
              v425 = 251;
              goto LABEL_417;
            }
            v352 = "Invalid dso_local record";
            goto LABEL_379;
          case 28:
            if (v577 <= 1)
              goto LABEL_324;
            memset(&__s, 0, sizeof(__s));
            memset(&__p, 0, sizeof(__p));
            v426 = *((_QWORD *)v576 + 1);
            v427 = (v426 + 2);
            if (v427 >= v577
              || v577 < v426 + *((_QWORD *)v576 + v427) + 3)
            {
              goto LABEL_319;
            }
            v540 = *(_QWORD *)v576;
            v545 = *((_QWORD *)v576 + v427);
            v552 = *((_QWORD *)v576 + 1);
            if ((_DWORD)v426)
            {
              v428 = 0;
              v429 = *((_QWORD *)v576 + 1);
              do
                std::string::push_back(&__s, *((_QWORD *)v576 + (v428++ + 2)));
              while (v429 != v428);
            }
            if ((_DWORD)v545)
            {
              v430 = v545;
              v431 = v552 + 3;
              do
              {
                std::string::push_back(&__p, *((_QWORD *)v576 + v431++));
                --v430;
              }
              while (v430);
            }
            llvm::UpgradeInlineAsmString(&__s);
            if (!PtrElementTypeByID)
            {
LABEL_434:
              v441 = "Missing element type for old-style inlineasm";
              goto LABEL_320;
            }
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v432 = &__s;
            else
              v432 = (std::string *)__s.__r_.__value_.__r.__words[0];
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v433 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            else
              v433 = __s.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v434 = &__p;
            else
              v434 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v435 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v435 = __p.__r_.__value_.__l.__size_;
            v402 = llvm::InlineAsm::get(PtrElementTypeByID, (uint64_t)v432, v433, (uint64_t)v434, v435, v540 & 1, (v540 & 2) != 0, (v540 >> 2) & 1, (v540 & 8) != 0);
            goto LABEL_493;
          case 29:
            if (v577 <= 1
            {
              v352 = "Invalid no_cfi record";
              goto LABEL_379;
            }
            v422 = *((_QWORD *)v576 + 1);
            v436 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 52, 3);
            v424 = llvm::Value::Value(v436, Int32Ty, 255);
            String = v424;
            v425 = 252;
LABEL_417:
            *(_WORD *)(v424 + 24) = v425;
            *(_QWORD *)(v424 + 28) = 1;
            *(_QWORD *)(v424 + 40) = 0;
            *(_DWORD *)(v424 + 48) = v422;
            goto LABEL_543;
          case 30:
            if (v577 <= 2
            {
LABEL_324:
              v352 = "Invalid inlineasm record";
LABEL_379:
              v566 = v352;
              LOWORD(v569) = 259;
              v354 = 1;
              break;
            }
            memset(&__s, 0, sizeof(__s));
            memset(&__p, 0, sizeof(__p));
            v438 = *((_QWORD *)v576 + 2);
            v439 = (v438 + 3);
            if (v439 < v577
              && (v553 = (llvm::PointerType **)v437,
                  v440 = *((_QWORD *)v576 + v439),
                  v577 >= (int)v438 + (int)v440 + 4))
            {
              v542 = *((_QWORD *)v576 + 1);
              v547 = *((_QWORD *)v576 + 2);
              if ((_DWORD)v438)
              {
                v513 = 0;
                v514 = *((_QWORD *)v576 + 2);
                do
                  std::string::push_back(&__s, *((_QWORD *)v576 + (v513++ + 3)));
                while (v514 != v513);
              }
              if ((_DWORD)v440)
              {
                v515 = v440;
                v516 = v547 + 4;
                do
                {
                  std::string::push_back(&__p, *((_QWORD *)v576 + v516++));
                  --v515;
                }
                while (v515);
              }
              llvm::UpgradeInlineAsmString(&__s);
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v517 = &__s;
              else
                v517 = (std::string *)__s.__r_.__value_.__r.__words[0];
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v518 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
              else
                v518 = __s.__r_.__value_.__l.__size_;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v519 = &__p;
              else
                v519 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v520 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v520 = __p.__r_.__value_.__l.__size_;
              v402 = llvm::InlineAsm::get(v553, (uint64_t)v517, v518, (uint64_t)v519, v520, v542 & 1, (v542 & 2) != 0, (v542 >> 2) & 1, (v542 & 8) != 0);
LABEL_493:
              String = v402;
              v354 = 5;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_321:
                v442 = String;
                operator delete(__p.__r_.__value_.__l.__data_);
                String = v442;
              }
            }
            else
            {
LABEL_319:
              v441 = "Invalid inlineasm record";
LABEL_320:
              v566 = v441;
              LOWORD(v569) = 259;
              String = 0;
              v354 = 1;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_321;
            }
            if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_448;
            v443 = String;
            operator delete(__s.__r_.__value_.__l.__data_);
            goto LABEL_447;
          default:
LABEL_357:
            v452 = Int32Ty;
            goto LABEL_358;
        }
      }
      if ((v575 & 1) != 0)
      {
        v532 = (uint64_t)v574;
        v574 = 0;
        if (v532)
          (*(void (**)(uint64_t))(*(_QWORD *)v532 + 8))(v532);
      }
      if ((v354 | 2) != 2)
        goto LABEL_578;
      goto LABEL_3;
    }
    llvm::BitstreamCursor::ReadAbbrevRecord((char **)v4, (unint64_t *)&v566);
    v11 = v566;
    if (v566)
      goto LABEL_577;
  }
  v533 = std::generic_category();
  memset(&__p, 0, sizeof(__p));
  LODWORD(v567) = 0;
  v570 = 0;
  v571 = 0;
  v572 = 1;
  v568 = 0;
  v569 = 0;
  *((_QWORD *)&v567 + 1) = 0;
  v566 = &unk_1E0E22B10;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v566, 0, 0, 0);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E20320;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)"Unexpected end of file reading %u of %u bits";
  LODWORD(__s.__r_.__value_.__r.__words[2]) = *v8;
  HIDWORD(__s.__r_.__value_.__r.__words[2]) = v28;
LABEL_568:
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v566, (uint64_t)&__s);
  v534 = (std::string::size_type)p_p;
  v11 = operator new(0x38uLL);
  v581 = 260;
  __s.__r_.__value_.__r.__words[0] = v534;
  llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)&__s, 5, (uint64_t)v533);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v566);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_577:
  *(_QWORD *)v559 = v11;
LABEL_578:
  v537 = v576;
  if (v576 != v578)
    goto LABEL_579;
}

void `anonymous namespace'::BitcodeReader::parseValueSymbolTable(_anonymous_namespace_::BitcodeReader *this, uint64_t a2, llvm::BitstreamCursor *a3)
{
  llvm::SimpleBitstreamCursor *v6;
  const char *v7;
  int v8;
  unsigned int *v9;
  unint64_t *v10;
  int8x8_t *v11;
  uint64_t *v12;
  int v13;
  void *v14;
  unsigned int *v15;
  int8x8_t *v16;
  const char *v17;
  unsigned int v18;
  unsigned int v19;
  int8x8_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  const char *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  int8x8_t v40;
  unsigned int v41;
  unint64_t v42;
  const char *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unint64_t v47;
  int8x8_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  int8x8_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int8x8_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int8x16_t v82;
  unint64_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int64x2_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int64x2_t v92;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint32x4_t v96;
  uint32x4_t v97;
  int8x16_t v98;
  uint64x2_t v99;
  uint64x2_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  uint64x2_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  int8x16_t v107;
  uint32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int64x2_t v116;
  int8x16_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int8x16_t v120;
  uint64_t v121;
  unint64_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int8x16_t v126;
  uint8x8_t *v127;
  unint64_t v128;
  int8x16_t v129;
  int8x16_t v130;
  uint8x8_t v131;
  uint16x8_t v132;
  uint32x4_t v133;
  uint64x2_t v134;
  uint64x2_t v135;
  uint64x2_t v136;
  uint32x4_t v137;
  uint64x2_t v138;
  int8x16_t v139;
  int64x2_t v140;
  int8x16_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _anonymous_namespace_::BitcodeReader *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int64x2_t v162;
  unint64_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  uint8x16_t v174;
  uint16x8_t v175;
  uint16x8_t v176;
  uint32x4_t v177;
  uint32x4_t v178;
  int8x16_t v179;
  uint64x2_t v180;
  uint64x2_t v181;
  uint64x2_t v182;
  uint64x2_t v183;
  uint64x2_t v184;
  uint64x2_t v185;
  uint64x2_t v186;
  uint64x2_t v187;
  int8x16_t v188;
  uint32x4_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  uint32x4_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int64x2_t v197;
  int8x16_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int8x16_t v201;
  uint64_t v202;
  unint64_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int8x16_t v207;
  uint8x8_t *v208;
  unint64_t v209;
  int8x16_t v210;
  int8x16_t v211;
  uint8x8_t v212;
  uint16x8_t v213;
  uint32x4_t v214;
  uint64x2_t v215;
  uint64x2_t v216;
  uint64x2_t v217;
  uint32x4_t v218;
  uint64x2_t v219;
  int8x16_t v220;
  int64x2_t v221;
  int8x16_t v222;
  char *v223;
  char *v224;
  const std::error_category *v225;
  void **v226;
  _anonymous_namespace_::BitcodeReaderBase *v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int64x2_t v233;
  unint64_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  uint8x16_t v245;
  uint16x8_t v246;
  uint16x8_t v247;
  uint32x4_t v248;
  uint32x4_t v249;
  int8x16_t v250;
  uint64x2_t v251;
  uint64x2_t v252;
  uint64x2_t v253;
  uint64x2_t v254;
  uint64x2_t v255;
  uint64x2_t v256;
  uint64x2_t v257;
  uint64x2_t v258;
  int8x16_t v259;
  uint32x4_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  uint32x4_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int64x2_t v268;
  int8x16_t v269;
  int8x8_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int8x16_t v273;
  unint64_t v274;
  unint64_t v275;
  int64x2_t v276;
  int64x2_t v277;
  int64x2_t v278;
  int8x16_t v279;
  uint8x8_t *v280;
  unint64_t v281;
  int8x16_t v282;
  int8x16_t v283;
  uint8x8_t v284;
  uint16x8_t v285;
  uint32x4_t v286;
  uint64x2_t v287;
  uint64x2_t v288;
  uint64x2_t v289;
  uint32x4_t v290;
  uint64x2_t v291;
  int64x2_t v292;
  int8x16_t v293;
  int8x8_t v294;
  int8x16x4_t *v295;
  _OWORD *v296;
  uint64_t v297;
  __int128 v298;
  __int128 v299;
  int8x16x4_t *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  const char *v304;
  unint64_t v305;
  uint64_t v306;
  llvm::Value *v307;
  char *v308;
  const char *v309;
  unsigned int v310;
  unsigned int v311;
  int8x8_t v312;
  unint64_t v313;
  unint64_t v314;
  unsigned int v315;
  uint64_t v316;
  unsigned int *v317;
  BOOL v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  char *v327;
  unint64_t v328;
  uint64_t v329;
  unsigned __int8 *v330;
  unsigned int v331;
  unsigned int v332;
  unint64_t v333;
  unsigned int v334;
  int8x8_t v335;
  unsigned int v336;
  unint64_t v337;
  void *v338;
  unsigned int v339;
  uint64_t v340;
  unsigned int *v341;
  unint64_t v342;
  int8x8_t v343;
  unint64_t v344;
  uint64_t v345;
  unsigned __int8 *v346;
  unsigned int v347;
  uint64_t v348;
  unint64_t v349;
  unsigned int v350;
  int8x8_t v351;
  char v352;
  unsigned int v353;
  int8x8_t v354;
  unsigned int v355;
  char v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unsigned int v360;
  uint64_t v361;
  unsigned int *v362;
  unint64_t v363;
  BOOL v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unsigned __int8 *v369;
  unsigned int v370;
  unsigned int v371;
  unsigned int v372;
  int v373;
  uint64_t v374;
  int64x2_t v375;
  int64x2_t v376;
  int64x2_t v377;
  int64x2_t v378;
  int64x2_t v379;
  int64x2_t v380;
  int8x16_t v381;
  unint64_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int64x2_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int64x2_t v391;
  uint8x16_t v392;
  uint16x8_t v393;
  uint16x8_t v394;
  uint32x4_t v395;
  uint32x4_t v396;
  int8x16_t v397;
  uint64x2_t v398;
  uint64x2_t v399;
  uint64x2_t v400;
  uint64x2_t v401;
  uint64x2_t v402;
  uint64x2_t v403;
  uint64x2_t v404;
  uint64x2_t v405;
  int8x16_t v406;
  uint32x4_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  uint32x4_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int64x2_t v415;
  int8x16_t v416;
  int64x2_t v417;
  int64x2_t v418;
  int8x16_t v419;
  uint64_t v420;
  unint64_t v421;
  int64x2_t v422;
  int64x2_t v423;
  int64x2_t v424;
  int8x16_t v425;
  uint8x8_t *v426;
  unint64_t v427;
  int8x16_t v428;
  int8x16_t v429;
  uint8x8_t v430;
  uint16x8_t v431;
  uint32x4_t v432;
  uint64x2_t v433;
  uint64x2_t v434;
  uint64x2_t v435;
  uint32x4_t v436;
  uint64x2_t v437;
  int8x16_t v438;
  int64x2_t v439;
  int8x16_t v440;
  unint64_t v441;
  unint64_t v442;
  unsigned int v443;
  uint64_t v444;
  unsigned int *v445;
  unint64_t v446;
  unint64_t v447;
  int8x8_t v448;
  unint64_t v449;
  uint64_t v450;
  unsigned __int8 *v451;
  unsigned int v452;
  char *v453;
  unsigned int v454;
  int64x2_t v455;
  int64x2_t v456;
  int64x2_t v457;
  int8x16_t v458;
  int8x16_t v459;
  int64x2_t v460;
  unint64_t v461;
  int64x2_t v462;
  int64x2_t v463;
  int64x2_t v464;
  int64x2_t v465;
  int8x16_t v466;
  int8x16_t v467;
  int8x16_t v468;
  int8x16_t v469;
  int8x16_t v470;
  int8x16_t v471;
  uint8x16_t v472;
  uint16x8_t v473;
  uint16x8_t v474;
  uint32x4_t v475;
  uint32x4_t v476;
  int8x16_t v477;
  uint64x2_t v478;
  uint64x2_t v479;
  uint64x2_t v480;
  uint64x2_t v481;
  uint64x2_t v482;
  uint64x2_t v483;
  uint64x2_t v484;
  uint64x2_t v485;
  int8x16_t v486;
  uint32x4_t v487;
  int8x16_t v488;
  int8x16_t v489;
  int8x16_t v490;
  uint32x4_t v491;
  int8x16_t v492;
  int8x16_t v493;
  int8x16_t v494;
  int64x2_t v495;
  int8x16_t v496;
  int64x2_t v497;
  int64x2_t v498;
  int8x16_t v499;
  uint64_t v500;
  unint64_t v501;
  int64x2_t v502;
  int64x2_t v503;
  int64x2_t v504;
  int8x16_t v505;
  uint8x8_t *v506;
  unint64_t v507;
  int8x16_t v508;
  int8x16_t v509;
  uint8x8_t v510;
  uint16x8_t v511;
  uint32x4_t v512;
  uint64x2_t v513;
  uint64x2_t v514;
  uint64x2_t v515;
  uint32x4_t v516;
  uint64x2_t v517;
  int8x16_t v518;
  int64x2_t v519;
  int8x16_t v520;
  const std::error_category *v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  const char *v525;
  int64x2_t v526;
  int64x2_t v527;
  int64x2_t v528;
  int8x16_t v529;
  int8x16_t v530;
  int64x2_t v531;
  unint64_t v532;
  int64x2_t v533;
  int64x2_t v534;
  int64x2_t v535;
  int64x2_t v536;
  int8x16_t v537;
  int8x16_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int8x16_t v542;
  uint8x16_t v543;
  uint16x8_t v544;
  uint16x8_t v545;
  uint32x4_t v546;
  uint32x4_t v547;
  int8x16_t v548;
  uint64x2_t v549;
  uint64x2_t v550;
  uint64x2_t v551;
  uint64x2_t v552;
  uint64x2_t v553;
  uint64x2_t v554;
  uint64x2_t v555;
  uint64x2_t v556;
  int8x16_t v557;
  uint32x4_t v558;
  int8x16_t v559;
  int8x16_t v560;
  int8x16_t v561;
  uint32x4_t v562;
  int8x16_t v563;
  int8x16_t v564;
  int8x16_t v565;
  int64x2_t v566;
  int8x16_t v567;
  int8x8_t v568;
  int64x2_t v569;
  int64x2_t v570;
  int8x16_t v571;
  unint64_t v572;
  unint64_t v573;
  int64x2_t v574;
  int64x2_t v575;
  int64x2_t v576;
  int8x16_t v577;
  uint8x8_t *v578;
  unint64_t v579;
  int8x16_t v580;
  int8x16_t v581;
  uint8x8_t v582;
  uint16x8_t v583;
  uint32x4_t v584;
  uint64x2_t v585;
  uint64x2_t v586;
  uint64x2_t v587;
  uint32x4_t v588;
  uint64x2_t v589;
  int64x2_t v590;
  int8x16_t v591;
  int8x8_t v592;
  int64x2_t v593;
  int64x2_t v594;
  int64x2_t v595;
  int64x2_t v596;
  int64x2_t v597;
  int64x2_t v598;
  int8x16_t v599;
  unint64_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int64x2_t v606;
  int8x16_t v607;
  int8x16_t v608;
  int64x2_t v609;
  uint8x16_t v610;
  uint16x8_t v611;
  uint16x8_t v612;
  uint32x4_t v613;
  uint32x4_t v614;
  int8x16_t v615;
  uint64x2_t v616;
  uint64x2_t v617;
  uint64x2_t v618;
  uint64x2_t v619;
  uint64x2_t v620;
  uint64x2_t v621;
  uint64x2_t v622;
  uint64x2_t v623;
  int8x16_t v624;
  uint32x4_t v625;
  int8x16_t v626;
  int8x16_t v627;
  int8x16_t v628;
  uint32x4_t v629;
  int8x16_t v630;
  int8x16_t v631;
  int8x16_t v632;
  int64x2_t v633;
  int8x16_t v634;
  int8x8_t v635;
  int64x2_t v636;
  int64x2_t v637;
  int8x16_t v638;
  uint64_t v639;
  unint64_t v640;
  int64x2_t v641;
  int64x2_t v642;
  int64x2_t v643;
  int8x16_t v644;
  uint8x8_t *v645;
  unint64_t v646;
  int8x16_t v647;
  int8x16_t v648;
  uint8x8_t v649;
  uint16x8_t v650;
  uint32x4_t v651;
  uint64x2_t v652;
  uint64x2_t v653;
  uint64x2_t v654;
  uint32x4_t v655;
  uint64x2_t v656;
  int8x16_t v657;
  int64x2_t v658;
  int8x16_t v659;
  int8x8_t v660;
  const std::error_category *v661;
  void **v662;
  int v663;
  const std::error_category *v664;
  const char *v665;
  int v666;
  void *v667;
  unint64_t v668;
  void *v669;
  char *v670;
  llvm::Twine *v671;
  unsigned int v672;
  int8x16_t v673;
  const llvm::Twine *v674;
  const char *v675;
  unint64_t v676;
  _anonymous_namespace_::BitcodeReader *v677;
  _anonymous_namespace_::BitcodeReader *v678;
  int8x16_t v679;
  unint64_t *v680;
  void *v681;
  uint64_t v682;
  uint64_t v683;
  const char *v684;
  unsigned int v685;
  void *__p;
  uint64_t v687;
  uint64_t v688;
  void *v689;
  __int128 v690;
  uint64_t v691;
  uint64_t v692;
  char v693;
  uint64_t v694;
  int v695;
  void **v696;
  void *v697;
  uint64_t v698;
  _BYTE v699[512];
  char *v700;
  const char *v701;
  unint64_t v702;
  unint64_t v703;
  uint64_t v704;
  char v705;
  uint64_t v706;
  int v707;
  void **p_p;
  const char *v709;
  const char *v710;
  unint64_t v711;
  unint64_t v712;
  __int16 v713;
  uint64_t v714;
  std::error_code v715;
  std::error_code v716;
  std::error_code v717;
  std::error_code v718;

  v714 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v7 = 0;
LABEL_7:
    v12 = (uint64_t *)(a2 + 32);
    v13 = *(_DWORD *)(a2 + 68);
    llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, (uint64_t *)this);
    if (*(_QWORD *)this)
      return;
    v671 = (llvm::Twine *)(a2 + 8);
    v676 = (unint64_t)v7;
    v697 = v699;
    v698 = 0x4000000000;
    v14 = (void *)(*(_QWORD *)(a2 + 432) + 208);
    LOWORD(v692) = 260;
    v689 = v14;
    llvm::Triple::Triple((llvm::Triple *)&v681, (const llvm::Twine *)&v689);
    v689 = &v691;
    v15 = (unsigned int *)(a2 + 64);
    v680 = (unint64_t *)(a2 + 48);
    v16 = (int8x8_t *)(a2 + 56);
    v690 = xmmword_181236BB0;
    v679 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
    v678 = this;
    while (1)
    {
      v18 = *v15;
      if (*v15)
      {
        v19 = *(_DWORD *)(a2 + 68);
        v20 = *(int8x8_t *)(a2 + 56);
        if (v18 < v19)
        {
          v22 = *(_QWORD *)(a2 + 40);
          v21 = *(_QWORD *)(a2 + 48);
          v23 = v22 - v21;
          if (v22 <= v21)
            goto LABEL_370;
          goto LABEL_17;
        }
      }
      else
      {
        v22 = *(_QWORD *)(a2 + 40);
        v21 = *(_QWORD *)(a2 + 48);
        if (v22 <= v21)
          goto LABEL_378;
        v19 = *(_DWORD *)(a2 + 68);
        if (v19)
        {
          v20 = 0;
          v23 = v22 - v21;
          if (v22 <= v21)
          {
LABEL_370:
            v661 = std::generic_category();
            __p = 0;
            v687 = 0;
            v688 = 0;
            LODWORD(v701) = 0;
            v705 = 0;
            v706 = 0;
            v707 = 1;
            v703 = 0;
            v704 = 0;
            v702 = 0;
            v700 = (char *)&unk_1E0E22B10;
            p_p = &__p;
            llvm::raw_ostream::SetBufferAndMode((uint64_t)&v700, 0, 0, 0);
            v709 = (const char *)&unk_1E0E203C0;
            v710 = "Unexpected end of file reading %u of %u bytes";
            v711 = *v680;
            v712 = v22;
LABEL_372:
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v700, (uint64_t)&v709);
            v662 = p_p;
            v17 = (const char *)operator new(0x38uLL);
            v713 = 260;
            v709 = (const char *)v662;
            llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)&v709, 5, (uint64_t)v661);
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v700);
            if ((SHIBYTE(v688) & 0x80000000) == 0)
              goto LABEL_373;
            operator delete(__p);
            *(_QWORD *)this = v17;
LABEL_405:
            if (v689 != &v691)
              free(v689);
            if (SHIBYTE(v683) < 0)
              operator delete(v681);
            if (v697 != v699)
              free(v697);
            return;
          }
LABEL_17:
          v24 = *v12;
          v25 = (unsigned int *)(*v12 + v21);
          if (v22 >= v21 + 8)
          {
            v27 = *(_QWORD *)v25;
            *v16 = (int8x8_t)v27;
            v23 = 8;
          }
          else
          {
            *v16 = 0;
            if (v23)
            {
              if (v23 < 8uLL || ((unint64_t)v16 < v24 + v21 + v23 ? (v26 = v25 >= v15) : (v26 = 1), !v26))
              {
                v28 = 0;
                v27 = 0;
                goto LABEL_42;
              }
              if (v23 >= 0x10uLL)
              {
                v28 = v23 - (unint64_t)(v23 & 0xF);
                v157 = (int64x2_t)xmmword_181267BA0;
                v158 = (int64x2_t)xmmword_181267BB0;
                v159 = (int64x2_t)xmmword_181267BC0;
                v160 = 0uLL;
                v161 = 0uLL;
                v162 = (int64x2_t)xmmword_181267BD0;
                v163 = v28;
                v164 = (int64x2_t)xmmword_181233120;
                v165 = (int64x2_t)xmmword_181233290;
                v166 = (int64x2_t)xmmword_181267BE0;
                v167 = (int64x2_t)xmmword_1812332B0;
                v168 = 0uLL;
                v169 = 0uLL;
                v170 = 0uLL;
                v171 = 0uLL;
                v172 = 0uLL;
                v173 = 0uLL;
                do
                {
                  v174 = *(uint8x16_t *)v25;
                  v25 += 4;
                  v175 = vmovl_u8(*(uint8x8_t *)v174.i8);
                  v176 = vmovl_high_u8(v174);
                  v177 = vmovl_u16(*(uint16x4_t *)v176.i8);
                  v178 = vmovl_high_u16(v176);
                  v179 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                  v180 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v167, 3uLL), v179);
                  v181 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v162, 3uLL), v179);
                  v182 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v166, 3uLL), v179);
                  v183 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v165, 3uLL), v179);
                  v184 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v159, 3uLL), v179);
                  v185 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v164, 3uLL), v179);
                  v186 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v158, 3uLL), v179);
                  v187.i64[0] = v178.u32[2];
                  v187.i64[1] = v178.u32[3];
                  v188 = (int8x16_t)vshlq_u64(v187, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v157, 3uLL), v179));
                  v189 = vmovl_u16(*(uint16x4_t *)v175.i8);
                  v187.i64[0] = v178.u32[0];
                  v187.i64[1] = v178.u32[1];
                  v190 = (int8x16_t)vshlq_u64(v187, v186);
                  v187.i64[0] = v189.u32[0];
                  v187.i64[1] = v189.u32[1];
                  v191 = (int8x16_t)vshlq_u64(v187, v185);
                  v187.i64[0] = v177.u32[2];
                  v187.i64[1] = v177.u32[3];
                  v192 = (int8x16_t)vshlq_u64(v187, v184);
                  v193 = vmovl_high_u16(v175);
                  v187.i64[0] = v189.u32[2];
                  v187.i64[1] = v189.u32[3];
                  v194 = (int8x16_t)vshlq_u64(v187, v183);
                  v187.i64[0] = v193.u32[0];
                  v187.i64[1] = v193.u32[1];
                  v195 = (int8x16_t)vshlq_u64(v187, v182);
                  v187.i64[0] = v177.u32[0];
                  v187.i64[1] = v177.u32[1];
                  v196 = (int8x16_t)vshlq_u64(v187, v181);
                  v187.i64[0] = v193.u32[2];
                  v187.i64[1] = v193.u32[3];
                  v169 = vorrq_s8((int8x16_t)vshlq_u64(v187, v180), v169);
                  v170 = vorrq_s8(v196, v170);
                  v168 = vorrq_s8(v195, v168);
                  v161 = vorrq_s8(v194, v161);
                  v171 = vorrq_s8(v192, v171);
                  v160 = vorrq_s8(v191, v160);
                  v172 = vorrq_s8(v190, v172);
                  v173 = vorrq_s8(v188, v173);
                  v197 = vdupq_n_s64(0x10uLL);
                  v166 = vaddq_s64(v166, v197);
                  v165 = vaddq_s64(v165, v197);
                  v164 = vaddq_s64(v164, v197);
                  v167 = vaddq_s64(v167, v197);
                  v162 = vaddq_s64(v162, v197);
                  v159 = vaddq_s64(v159, v197);
                  v158 = vaddq_s64(v158, v197);
                  v157 = vaddq_s64(v157, v197);
                  v163 -= 16;
                }
                while (v163);
                v198 = vorrq_s8(vorrq_s8(vorrq_s8(v160, v170), vorrq_s8(v168, v172)), vorrq_s8(vorrq_s8(v161, v171), vorrq_s8(v169, v173)));
                *(int8x8_t *)v198.i8 = vorr_s8(*(int8x8_t *)v198.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL));
                *v16 = *(int8x8_t *)v198.i8;
                v27 = v198.i64[0];
                if ((v23 & 0xF) != 0)
                {
                  if ((v23 & 0xF) < 8uLL)
                    goto LABEL_42;
                  goto LABEL_140;
                }
              }
              else
              {
                v27 = 0;
                v28 = 0;
LABEL_140:
                v199 = vdupq_n_s64(v28);
                v200 = vaddq_s64(v199, (int64x2_t)xmmword_1812332B0);
                v201 = (int8x16_t)v27;
                v202 = v21 + v28;
                v203 = v28 + (v23 & 7);
                v28 = v23 - (unint64_t)(v23 & 7);
                v204 = vaddq_s64(v199, (int64x2_t)xmmword_181267BE0);
                v205 = vaddq_s64(v199, (int64x2_t)xmmword_181233290);
                v206 = vaddq_s64(v199, (int64x2_t)xmmword_181233120);
                v207 = 0uLL;
                v208 = (uint8x8_t *)(v24 + v202);
                v209 = v203 - v23;
                v210 = 0uLL;
                v211 = 0uLL;
                do
                {
                  v212 = *v208++;
                  v213 = vmovl_u8(v212);
                  v214 = vmovl_high_u16(v213);
                  v215.i64[0] = v214.u32[2];
                  v215.i64[1] = v214.u32[3];
                  v216 = v215;
                  v215.i64[0] = v214.u32[0];
                  v215.i64[1] = v214.u32[1];
                  v217 = v215;
                  v218 = vmovl_u16(*(uint16x4_t *)v213.i8);
                  v215.i64[0] = v218.u32[2];
                  v215.i64[1] = v218.u32[3];
                  v219 = v215;
                  v215.i64[0] = v218.u32[0];
                  v215.i64[1] = v218.u32[1];
                  v220 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                  v211 = vorrq_s8((int8x16_t)vshlq_u64(v216, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v200, 3uLL), v220)), v211);
                  v210 = vorrq_s8((int8x16_t)vshlq_u64(v217, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v204, 3uLL), v220)), v210);
                  v207 = vorrq_s8((int8x16_t)vshlq_u64(v219, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v205, 3uLL), v220)), v207);
                  v221 = vdupq_n_s64(8uLL);
                  v201 = vorrq_s8((int8x16_t)vshlq_u64(v215, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v206, 3uLL), v220)), v201);
                  v204 = vaddq_s64(v204, v221);
                  v205 = vaddq_s64(v205, v221);
                  v206 = vaddq_s64(v206, v221);
                  v200 = vaddq_s64(v200, v221);
                  v209 += 8;
                }
                while (v209);
                v222 = vorrq_s8(vorrq_s8(v201, v210), vorrq_s8(v207, v211));
                *(int8x8_t *)v222.i8 = vorr_s8(*(int8x8_t *)v222.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL));
                *v16 = *(int8x8_t *)v222.i8;
                v27 = v222.i64[0];
                if ((v23 & 7) != 0)
                {
LABEL_42:
                  v32 = v23 - v28;
                  v33 = 8 * v28;
                  v34 = (unsigned __int8 *)(v24 + v28 + v21);
                  do
                  {
                    v35 = *v34++;
                    v27 |= (unint64_t)v35 << (v33 & 0xF8);
                    *v16 = (int8x8_t)v27;
                    v33 += 8;
                    --v32;
                  }
                  while (v32);
                }
              }
            }
            else
            {
              v27 = 0;
            }
          }
          v36 = v19 - v18;
          *v680 = v21 + v23;
          *v15 = 8 * v23;
          v37 = 8 * v23 - (v19 - v18);
          if (8 * v23 < v36)
          {
            v661 = std::generic_category();
            __p = 0;
            v687 = 0;
            v688 = 0;
            LODWORD(v701) = 0;
            v705 = 0;
            v706 = 0;
            v707 = 1;
            v703 = 0;
            v704 = 0;
            v702 = 0;
            v700 = (char *)&unk_1E0E22B10;
            p_p = &__p;
            llvm::raw_ostream::SetBufferAndMode((uint64_t)&v700, 0, 0, 0);
            v709 = (const char *)&unk_1E0E20320;
            v710 = "Unexpected end of file reading %u of %u bits";
            LODWORD(v711) = *v15;
            HIDWORD(v711) = v36;
            goto LABEL_372;
          }
          *v16 = (int8x8_t)(v27 >> v36);
          *v15 = v37;
          v38 = (v27 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v36)) << v18;
          v29 = v38 | *(_QWORD *)&v20;
          if ((v38 | v20.i32[0]) != 1)
            goto LABEL_48;
          goto LABEL_30;
        }
        v20 = *v16;
      }
      v29 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v19) & *(_QWORD *)&v20;
      *v16 = (int8x8_t)(*(_QWORD *)&v20 >> v19);
      *v15 = v18 - v19;
      if ((_DWORD)v29 == 1)
      {
LABEL_30:
        llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)(a2 + 32), 8u, (uint64_t)&v700);
        if ((v701 & 1) != 0)
        {
          *(_QWORD *)this = v700;
          goto LABEL_405;
        }
        v39 = *v15;
        if (*v15 >= 4)
        {
          v53 = *(_QWORD *)v16 & 0xFLL;
          *v16 = (int8x8_t)(*(unint64_t *)v16 >> 4);
          *v15 = v39 - 4;
          this = v678;
          if ((v53 & 8) != 0)
            goto LABEL_71;
LABEL_69:
          if (*v15 < 0x20)
          {
            v57 = 0;
          }
          else
          {
            *v16 = (int8x8_t)(*(unint64_t *)v16 >> (*(_BYTE *)v15 - 32));
            v57 = 32;
          }
          *v15 = v57;
          llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)(a2 + 32), 0x20u, (uint64_t)&v700);
          if ((v701 & 1) != 0)
          {
            v17 = v700;
            if (v700)
              goto LABEL_373;
          }
          else
          {
            v143 = *(_QWORD *)(a2 + 40);
            v142 = *(_QWORD *)(a2 + 48);
            v144 = *(unsigned int *)(a2 + 64);
            v145 = 8 * v142 - v144 + 32 * v700;
            v709 = (const char *)v145;
            if ((_DWORD)v144 || v143 > v142)
            {
              if (v143 >= v145 >> 3)
              {
                *v680 = (v145 >> 3) & 0x1FFFFFFFFFFFFFF8;
                *v15 = 0;
                if ((v145 & 0x3F) == 0
                  || (llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)(a2 + 32), v145 & 0x3F, (uint64_t)&v700), (v701 & 1) == 0)|| (__p = v700) == 0)
                {
                  __p = 0;
                }
                v17 = (const char *)__p;
                if (__p)
                  goto LABEL_373;
              }
              else
              {
                v700 = (char *)(8 * v142 - v144);
                llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v709, (uint64_t *)&v700, (uint64_t *)&__p);
                v17 = (const char *)__p;
                if (__p)
                  goto LABEL_373;
              }
            }
            else
            {
              *(_QWORD *)&v715.__val_ = std::generic_category();
              v715.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
              llvm::createStringError((llvm *)0x5C, v715, &__p);
              v17 = (const char *)__p;
              if (__p)
                goto LABEL_373;
            }
          }
        }
        else
        {
          if (v39)
          {
            v40 = *v16;
            v41 = 4 - v39;
            v685 = 4 - v39;
            v43 = *(const char **)(a2 + 40);
            v42 = *(_QWORD *)(a2 + 48);
            v44 = (_DWORD)v43 - v42;
            if ((unint64_t)v43 > v42)
              goto LABEL_54;
          }
          else
          {
            v40 = 0;
            v41 = 4;
            v685 = 4;
            v43 = *(const char **)(a2 + 40);
            v42 = *(_QWORD *)(a2 + 48);
            v44 = (_DWORD)v43 - v42;
            if ((unint64_t)v43 > v42)
            {
LABEL_54:
              v45 = *v12;
              v46 = (unsigned int *)(*v12 + v42);
              if ((unint64_t)v43 >= v42 + 8)
              {
                *v16 = *(int8x8_t *)v46;
                v44 = 8;
                goto LABEL_115;
              }
              *v16 = 0;
              if (!v44)
                goto LABEL_115;
              if (v44 >= 8uLL && ((unint64_t)v16 >= v45 + v42 + v44 || v46 >= v15))
              {
                if (v44 >= 0x10uLL)
                {
                  v47 = v44 - (unint64_t)(v44 & 0xF);
                  v228 = (int64x2_t)xmmword_1812332B0;
                  v229 = (int64x2_t)xmmword_181267BE0;
                  v230 = (int64x2_t)xmmword_181233290;
                  v231 = 0uLL;
                  v232 = 0uLL;
                  v233 = (int64x2_t)xmmword_181233120;
                  v234 = v47;
                  v235 = (int64x2_t)xmmword_181267BD0;
                  v236 = (int64x2_t)xmmword_181267BC0;
                  v237 = (int64x2_t)xmmword_181267BB0;
                  v238 = (int64x2_t)xmmword_181267BA0;
                  v239 = 0uLL;
                  v240 = 0uLL;
                  v241 = 0uLL;
                  v242 = 0uLL;
                  v243 = 0uLL;
                  v244 = 0uLL;
                  do
                  {
                    v245 = *(uint8x16_t *)v46;
                    v46 += 4;
                    v246 = vmovl_u8(*(uint8x8_t *)v245.i8);
                    v247 = vmovl_high_u8(v245);
                    v248 = vmovl_u16(*(uint16x4_t *)v247.i8);
                    v249 = vmovl_high_u16(v247);
                    v250 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                    v251 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v228, 3uLL), v250);
                    v252 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v235, 3uLL), v250);
                    v253 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v229, 3uLL), v250);
                    v254 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v230, 3uLL), v250);
                    v255 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v236, 3uLL), v250);
                    v256 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v233, 3uLL), v250);
                    v257 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v237, 3uLL), v250);
                    v258.i64[0] = v249.u32[2];
                    v258.i64[1] = v249.u32[3];
                    v259 = (int8x16_t)vshlq_u64(v258, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v238, 3uLL), v250));
                    v260 = vmovl_u16(*(uint16x4_t *)v246.i8);
                    v258.i64[0] = v249.u32[0];
                    v258.i64[1] = v249.u32[1];
                    v261 = (int8x16_t)vshlq_u64(v258, v257);
                    v258.i64[0] = v260.u32[0];
                    v258.i64[1] = v260.u32[1];
                    v262 = (int8x16_t)vshlq_u64(v258, v256);
                    v258.i64[0] = v248.u32[2];
                    v258.i64[1] = v248.u32[3];
                    v263 = (int8x16_t)vshlq_u64(v258, v255);
                    v264 = vmovl_high_u16(v246);
                    v258.i64[0] = v260.u32[2];
                    v258.i64[1] = v260.u32[3];
                    v265 = (int8x16_t)vshlq_u64(v258, v254);
                    v258.i64[0] = v264.u32[0];
                    v258.i64[1] = v264.u32[1];
                    v266 = (int8x16_t)vshlq_u64(v258, v253);
                    v258.i64[0] = v248.u32[0];
                    v258.i64[1] = v248.u32[1];
                    v267 = (int8x16_t)vshlq_u64(v258, v252);
                    v258.i64[0] = v264.u32[2];
                    v258.i64[1] = v264.u32[3];
                    v240 = vorrq_s8((int8x16_t)vshlq_u64(v258, v251), v240);
                    v241 = vorrq_s8(v267, v241);
                    v239 = vorrq_s8(v266, v239);
                    v232 = vorrq_s8(v265, v232);
                    v242 = vorrq_s8(v263, v242);
                    v231 = vorrq_s8(v262, v231);
                    v243 = vorrq_s8(v261, v243);
                    v244 = vorrq_s8(v259, v244);
                    v268 = vdupq_n_s64(0x10uLL);
                    v229 = vaddq_s64(v229, v268);
                    v230 = vaddq_s64(v230, v268);
                    v233 = vaddq_s64(v233, v268);
                    v228 = vaddq_s64(v228, v268);
                    v235 = vaddq_s64(v235, v268);
                    v236 = vaddq_s64(v236, v268);
                    v237 = vaddq_s64(v237, v268);
                    v238 = vaddq_s64(v238, v268);
                    v234 -= 16;
                  }
                  while (v234);
                  v269 = vorrq_s8(vorrq_s8(vorrq_s8(v231, v241), vorrq_s8(v239, v243)), vorrq_s8(vorrq_s8(v232, v242), vorrq_s8(v240, v244)));
                  v270 = vorr_s8(*(int8x8_t *)v269.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL));
                  *v16 = v270;
                  if ((v44 & 0xF) == 0)
                    goto LABEL_115;
                  v48 = v270;
                  if ((v44 & 0xF) < 8uLL)
                    goto LABEL_60;
                }
                else
                {
                  v48 = 0;
                  v47 = 0;
                }
                v271 = vdupq_n_s64(v47);
                v272 = vaddq_s64(v271, (int64x2_t)xmmword_1812332B0);
                v273 = (int8x16_t)(unint64_t)v48;
                v274 = v47 + v42;
                v275 = v47 + (v44 & 7);
                v47 = v44 - (unint64_t)(v44 & 7);
                v276 = vaddq_s64(v271, (int64x2_t)xmmword_181267BE0);
                v277 = vaddq_s64(v271, (int64x2_t)xmmword_181233290);
                v278 = vaddq_s64(v271, (int64x2_t)xmmword_181233120);
                v279 = 0uLL;
                v280 = (uint8x8_t *)(v45 + v274);
                v281 = v275 - v44;
                v282 = 0uLL;
                v283 = 0uLL;
                do
                {
                  v284 = *v280++;
                  v285 = vmovl_u8(v284);
                  v286 = vmovl_high_u16(v285);
                  v287.i64[0] = v286.u32[2];
                  v287.i64[1] = v286.u32[3];
                  v288 = v287;
                  v287.i64[0] = v286.u32[0];
                  v287.i64[1] = v286.u32[1];
                  v289 = v287;
                  v290 = vmovl_u16(*(uint16x4_t *)v285.i8);
                  v287.i64[0] = v290.u32[2];
                  v287.i64[1] = v290.u32[3];
                  v291 = v287;
                  v287.i64[0] = v290.u32[0];
                  v287.i64[1] = v290.u32[1];
                  v283 = vorrq_s8((int8x16_t)vshlq_u64(v288, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v272, 3uLL), v679)), v283);
                  v282 = vorrq_s8((int8x16_t)vshlq_u64(v289, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v276, 3uLL), v679)), v282);
                  v279 = vorrq_s8((int8x16_t)vshlq_u64(v291, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v277, 3uLL), v679)), v279);
                  v292 = vdupq_n_s64(8uLL);
                  v273 = vorrq_s8((int8x16_t)vshlq_u64(v287, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v278, 3uLL), v679)), v273);
                  v276 = vaddq_s64(v276, v292);
                  v277 = vaddq_s64(v277, v292);
                  v278 = vaddq_s64(v278, v292);
                  v272 = vaddq_s64(v272, v292);
                  v281 += 8;
                }
                while (v281);
                v293 = vorrq_s8(vorrq_s8(v273, v282), vorrq_s8(v279, v283));
                v294 = vorr_s8(*(int8x8_t *)v293.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v293, v293, 8uLL));
                *v16 = v294;
                if ((v44 & 7) != 0)
                {
                  v48 = v294;
                  goto LABEL_60;
                }
              }
              else
              {
                v47 = 0;
                v48 = 0;
LABEL_60:
                v49 = v44 - v47;
                v50 = 8 * v47;
                v51 = (unsigned __int8 *)(v45 + v47 + v42);
                do
                {
                  v52 = *v51++;
                  *(_QWORD *)&v48 |= (unint64_t)v52 << (v50 & 0xF8);
                  *v16 = v48;
                  v50 += 8;
                  --v49;
                }
                while (v49);
              }
LABEL_115:
              *v680 = v42 + v44;
              *v15 = 8 * v44;
              v54 = 8 * v44 - v41;
              if (8 * v44 < v41)
                goto LABEL_116;
              goto LABEL_68;
            }
          }
          v700 = (char *)v43;
          llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v680, (uint64_t *)&v700, (uint64_t *)&v709);
          v17 = v709;
          if (v709)
            goto LABEL_161;
          v54 = *v15 - v41;
          if (*v15 < v41)
          {
LABEL_116:
            llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)(a2 + 64), (int *)&v685, (uint64_t *)&__p);
            v17 = (const char *)__p;
            goto LABEL_161;
          }
LABEL_68:
          v55 = *v16;
          *v16 = (int8x8_t)(*(unint64_t *)v16 >> v41);
          *v15 = v54;
          v56 = (*(_QWORD *)&v55 << v39) & 0xFLL | *(_QWORD *)&v40;
          this = v678;
          if ((v56 & 8) == 0)
            goto LABEL_69;
LABEL_71:
          v58 = 0;
          v59 = *v15;
          while (2)
          {
            if (v58 >= 0x1D)
            {
              *(_QWORD *)&v716.__val_ = std::generic_category();
              v716.__cat_ = (const std::error_category *)"Unterminated VBR";
              llvm::createStringError((llvm *)0x5C, v716, &v684);
              v17 = v684;
              if (v684)
                goto LABEL_373;
            }
            else
            {
              if (v59 >= 4)
              {
                v60 = *(_QWORD *)v16 & 0xFLL;
                *v16 = (int8x8_t)(*(unint64_t *)v16 >> 4);
                *v15 = v59 - 4;
                v59 -= 4;
                v58 += 3;
                if ((v60 & 8) == 0)
                  goto LABEL_69;
                continue;
              }
              if (v59)
              {
                v61 = *v16;
                v63 = *(_QWORD *)(a2 + 40);
                v62 = *(_QWORD *)(a2 + 48);
                v64 = v63 - v62;
                if (v63 <= v62)
                  goto LABEL_151;
LABEL_79:
                v65 = *v12;
                v66 = (unsigned int *)(*v12 + v62);
                if (v63 >= v62 + 8)
                {
                  v68 = *(_QWORD *)v66;
                  *v16 = (int8x8_t)v68;
                  v64 = 8;
                  goto LABEL_95;
                }
                *v16 = 0;
                if (!v64)
                {
                  v68 = 0;
                  goto LABEL_95;
                }
                if (v64 < 8uLL || ((unint64_t)v16 < v65 + v62 + v64 ? (v67 = v66 >= v15) : (v67 = 1), !v67))
                {
                  v69 = 0;
                  v68 = 0;
LABEL_91:
                  v70 = v64 - v69;
                  v71 = 8 * v69;
                  v72 = (unsigned __int8 *)(v65 + v69 + v62);
                  do
                  {
                    v73 = *v72++;
                    v68 |= (unint64_t)v73 << (v71 & 0xF8);
                    *v16 = (int8x8_t)v68;
                    v71 += 8;
                    --v70;
                  }
                  while (v70);
                  goto LABEL_95;
                }
                if (v64 >= 0x10uLL)
                {
                  v69 = v64 - (unint64_t)(v64 & 0xF);
                  v76 = (int64x2_t)xmmword_181267BA0;
                  v77 = (int64x2_t)xmmword_181267BB0;
                  v78 = (int64x2_t)xmmword_181267BC0;
                  v79 = (int64x2_t)xmmword_181267BD0;
                  v80 = (int64x2_t)xmmword_1812332B0;
                  v81 = (int64x2_t)xmmword_181267BE0;
                  v82 = 0uLL;
                  v83 = v69;
                  v84 = 0uLL;
                  v85 = 0uLL;
                  v86 = 0uLL;
                  v87 = 0uLL;
                  v88 = 0uLL;
                  v89 = (int64x2_t)xmmword_181233290;
                  v90 = 0uLL;
                  v91 = 0uLL;
                  v92 = (int64x2_t)xmmword_181233120;
                  do
                  {
                    v93 = *(uint8x16_t *)v66;
                    v66 += 4;
                    v94 = vmovl_u8(*(uint8x8_t *)v93.i8);
                    v95 = vmovl_high_u8(v93);
                    v96 = vmovl_u16(*(uint16x4_t *)v95.i8);
                    v97 = vmovl_high_u16(v95);
                    v98 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                    v99 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v80, 3uLL), v98);
                    v100 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v79, 3uLL), v98);
                    v101 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v81, 3uLL), v98);
                    v102 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v89, 3uLL), v98);
                    v103 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v78, 3uLL), v98);
                    v104 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v92, 3uLL), v98);
                    v105 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v77, 3uLL), v98);
                    v106.i64[0] = v97.u32[2];
                    v106.i64[1] = v97.u32[3];
                    v107 = (int8x16_t)vshlq_u64(v106, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v76, 3uLL), v98));
                    v108 = vmovl_u16(*(uint16x4_t *)v94.i8);
                    v106.i64[0] = v97.u32[0];
                    v106.i64[1] = v97.u32[1];
                    v109 = (int8x16_t)vshlq_u64(v106, v105);
                    v106.i64[0] = v108.u32[0];
                    v106.i64[1] = v108.u32[1];
                    v110 = (int8x16_t)vshlq_u64(v106, v104);
                    v106.i64[0] = v96.u32[2];
                    v106.i64[1] = v96.u32[3];
                    v111 = (int8x16_t)vshlq_u64(v106, v103);
                    v112 = vmovl_high_u16(v94);
                    v106.i64[0] = v108.u32[2];
                    v106.i64[1] = v108.u32[3];
                    v113 = (int8x16_t)vshlq_u64(v106, v102);
                    v106.i64[0] = v112.u32[0];
                    v106.i64[1] = v112.u32[1];
                    v114 = (int8x16_t)vshlq_u64(v106, v101);
                    v106.i64[0] = v96.u32[0];
                    v106.i64[1] = v96.u32[1];
                    v115 = (int8x16_t)vshlq_u64(v106, v100);
                    v106.i64[0] = v112.u32[2];
                    v106.i64[1] = v112.u32[3];
                    v86 = vorrq_s8((int8x16_t)vshlq_u64(v106, v99), v86);
                    v87 = vorrq_s8(v115, v87);
                    v85 = vorrq_s8(v114, v85);
                    v84 = vorrq_s8(v113, v84);
                    v88 = vorrq_s8(v111, v88);
                    v82 = vorrq_s8(v110, v82);
                    v90 = vorrq_s8(v109, v90);
                    v91 = vorrq_s8(v107, v91);
                    v116 = vdupq_n_s64(0x10uLL);
                    v81 = vaddq_s64(v81, v116);
                    v89 = vaddq_s64(v89, v116);
                    v92 = vaddq_s64(v92, v116);
                    v80 = vaddq_s64(v80, v116);
                    v79 = vaddq_s64(v79, v116);
                    v78 = vaddq_s64(v78, v116);
                    v77 = vaddq_s64(v77, v116);
                    v76 = vaddq_s64(v76, v116);
                    v83 -= 16;
                  }
                  while (v83);
                  v117 = vorrq_s8(vorrq_s8(vorrq_s8(v82, v87), vorrq_s8(v85, v90)), vorrq_s8(vorrq_s8(v84, v88), vorrq_s8(v86, v91)));
                  *(int8x8_t *)v117.i8 = vorr_s8(*(int8x8_t *)v117.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v117, v117, 8uLL));
                  *v16 = *(int8x8_t *)v117.i8;
                  v68 = v117.i64[0];
                  if ((v64 & 0xF) == 0)
                    goto LABEL_95;
                  if ((v64 & 0xF) < 8uLL)
                    goto LABEL_91;
                }
                else
                {
                  v68 = 0;
                  v69 = 0;
                }
                v118 = vdupq_n_s64(v69);
                v119 = vaddq_s64(v118, (int64x2_t)xmmword_1812332B0);
                v120 = (int8x16_t)v68;
                v121 = v69 + v62;
                v122 = v69 + (v64 & 7);
                v69 = v64 - (unint64_t)(v64 & 7);
                v123 = vaddq_s64(v118, (int64x2_t)xmmword_181267BE0);
                v124 = vaddq_s64(v118, (int64x2_t)xmmword_181233290);
                v125 = vaddq_s64(v118, (int64x2_t)xmmword_181233120);
                v126 = 0uLL;
                v127 = (uint8x8_t *)(v65 + v121);
                v128 = v122 - v64;
                v129 = 0uLL;
                v130 = 0uLL;
                do
                {
                  v131 = *v127++;
                  v132 = vmovl_u8(v131);
                  v133 = vmovl_high_u16(v132);
                  v134.i64[0] = v133.u32[2];
                  v134.i64[1] = v133.u32[3];
                  v135 = v134;
                  v134.i64[0] = v133.u32[0];
                  v134.i64[1] = v133.u32[1];
                  v136 = v134;
                  v137 = vmovl_u16(*(uint16x4_t *)v132.i8);
                  v134.i64[0] = v137.u32[2];
                  v134.i64[1] = v137.u32[3];
                  v138 = v134;
                  v134.i64[0] = v137.u32[0];
                  v134.i64[1] = v137.u32[1];
                  v139 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                  v130 = vorrq_s8((int8x16_t)vshlq_u64(v135, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v119, 3uLL), v139)), v130);
                  v129 = vorrq_s8((int8x16_t)vshlq_u64(v136, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v123, 3uLL), v139)), v129);
                  v126 = vorrq_s8((int8x16_t)vshlq_u64(v138, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v124, 3uLL), v139)), v126);
                  v140 = vdupq_n_s64(8uLL);
                  v120 = vorrq_s8((int8x16_t)vshlq_u64(v134, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v125, 3uLL), v139)), v120);
                  v123 = vaddq_s64(v123, v140);
                  v124 = vaddq_s64(v124, v140);
                  v125 = vaddq_s64(v125, v140);
                  v119 = vaddq_s64(v119, v140);
                  v128 += 8;
                }
                while (v128);
                v141 = vorrq_s8(vorrq_s8(v120, v129), vorrq_s8(v126, v130));
                *(int8x8_t *)v141.i8 = vorr_s8(*(int8x8_t *)v141.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL));
                *v16 = *(int8x8_t *)v141.i8;
                v68 = v141.i64[0];
                if ((v64 & 7) != 0)
                  goto LABEL_91;
LABEL_95:
                v74 = 4 - v59;
                *v680 = v62 + v64;
                *v15 = 8 * v64;
                if (8 * v64 < 4 - v59)
                {
                  v225 = std::generic_category();
                  __p = 0;
                  v687 = 0;
                  v688 = 0;
                  LODWORD(v701) = 0;
                  v705 = 0;
                  v706 = 0;
                  v707 = 1;
                  v703 = 0;
                  v704 = 0;
                  v702 = 0;
                  v700 = (char *)&unk_1E0E22B10;
                  p_p = &__p;
                  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v700, 0, 0, 0);
                  v709 = (const char *)&unk_1E0E20320;
                  v710 = "Unexpected end of file reading %u of %u bits";
                  LODWORD(v711) = *v15;
                  HIDWORD(v711) = v74;
                  goto LABEL_159;
                }
                *v16 = (int8x8_t)(v68 >> v74);
                *v15 = 8 * v64 - (4 - v59);
                v75 = (v68 << v59) & 0xF | *(_QWORD *)&v61;
                v59 = 8 * v64 - (4 - v59);
                v58 += 3;
                if ((v75 & 8) == 0)
                  goto LABEL_69;
                continue;
              }
              v61 = 0;
              v63 = *(_QWORD *)(a2 + 40);
              v62 = *(_QWORD *)(a2 + 48);
              v64 = v63 - v62;
              if (v63 > v62)
                goto LABEL_79;
LABEL_151:
              v225 = std::generic_category();
              __p = 0;
              v687 = 0;
              v688 = 0;
              LODWORD(v701) = 0;
              v705 = 0;
              v706 = 0;
              v707 = 1;
              v703 = 0;
              v704 = 0;
              v702 = 0;
              v700 = (char *)&unk_1E0E22B10;
              p_p = &__p;
              llvm::raw_ostream::SetBufferAndMode((uint64_t)&v700, 0, 0, 0);
              v709 = (const char *)&unk_1E0E203C0;
              v710 = "Unexpected end of file reading %u of %u bytes";
              v711 = *v680;
              v712 = v63;
LABEL_159:
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v700, (uint64_t)&v709);
              v226 = p_p;
              v17 = (const char *)operator new(0x38uLL);
              v713 = 260;
              v709 = (const char *)v226;
              llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)&v709, 5, (uint64_t)v225);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v700);
              if (SHIBYTE(v688) < 0)
                operator delete(__p);
LABEL_161:
              this = v678;
              if (v17)
              {
LABEL_373:
                *(_QWORD *)this = v17;
                goto LABEL_405;
              }
            }
            break;
          }
        }
      }
      else
      {
LABEL_48:
        if ((_DWORD)v29 == 2)
        {
          llvm::BitstreamCursor::ReadAbbrevRecord((char **)(a2 + 32), (unint64_t *)&v700);
          v17 = v700;
          if (v700)
            goto LABEL_373;
        }
        else
        {
          if (!(_DWORD)v29)
          {
            if (*(_DWORD *)(a2 + 104))
            {
              if (*v15 < 0x20)
              {
                v663 = 0;
              }
              else
              {
                *v16 = (int8x8_t)(*(unint64_t *)v16 >> (*(_BYTE *)v15 - 32));
                v663 = 32;
              }
              *v15 = v663;
              llvm::BitstreamCursor::popBlockScope((llvm::BitstreamCursor *)(a2 + 32));
              if (!a3
                || (*v680 = (v676 >> 3) & 0x1FFFFFFFFFFFFFF8, *v15 = 0, (v676 & 0x3F) == 0)
                || (llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)(a2 + 32), v676 & 0x3F, (uint64_t)&v700), (v701 & 1) == 0)|| (v670 = v700, *(_QWORD *)this = v700, !v670))
              {
                *(_QWORD *)this = 0;
              }
              goto LABEL_405;
            }
LABEL_378:
            v700 = "Malformed block";
            LOWORD(v704) = 259;
            goto LABEL_405;
          }
          LODWORD(v698) = 0;
          llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)(a2 + 32), ((v29 << 32) | 3) >> 32, (uint64_t)&v697, 0, (uint64_t)&v709);
          if ((v710 & 1) != 0)
          {
            v30 = 0;
            v31 = v709;
            v709 = 0;
            *(_QWORD *)this = v31;
            if ((v710 & 1) != 0)
              goto LABEL_191;
            goto LABEL_193;
          }
          if ((_DWORD)v709 == 3)
          {
            if ((v701 & 1) != 0)
            {
              v224 = v700;
              *(_QWORD *)this = v700;
              if (v224)
              {
                v30 = 0;
                if ((v710 & 1) != 0)
                  goto LABEL_191;
                goto LABEL_193;
              }
            }
            else
            {
              *(_QWORD *)this = 0;
              if (v700 && !v700[16])
              {
                v30 = 1;
                if ((v710 & 1) != 0)
                  goto LABEL_191;
                goto LABEL_193;
              }
            }
            goto LABEL_149;
          }
          if ((_DWORD)v709 != 2)
          {
            if ((_DWORD)v709 == 1)
            {
              if ((v701 & 1) != 0)
              {
                v223 = v700;
                *(_QWORD *)this = v700;
                v30 = v223 == 0;
                if ((v710 & 1) != 0)
                  goto LABEL_191;
              }
              else
              {
                *(_QWORD *)this = 0;
                v30 = 1;
                if ((v710 & 1) != 0)
                  goto LABEL_191;
              }
              goto LABEL_193;
            }
LABEL_149:
            v30 = 1;
            if ((v710 & 1) != 0)
              goto LABEL_191;
            goto LABEL_193;
          }
          v146 = this;
          v147 = v698;
          if (!(_DWORD)v698)
          {
            v700 = "Invalid bbentry record";
            LOWORD(v704) = 259;
            this = v146;
            v227 = v146;
            goto LABEL_189;
          }
          v148 = (char *)v697;
          v149 = (v698 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          v150 = v690;
          if (*((_QWORD *)&v690 + 1) < (unint64_t)(v690 + v149))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v689, &v691, v690 + v149, 1);
            v150 = v690;
          }
          if ((_DWORD)v147 != 1)
          {
            v151 = v148 + 8;
            v152 = (char *)v689;
            v153 = (char *)v689 + v150;
            v154 = (v147 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
            if (v154 >= 7 && (v153 >= &v148[8 * v147] || v151 >= (char *)v689 + v150 + v154 + 1))
            {
              v155 = v154 + 1;
              if (v154 >= 0x1F)
              {
                v156 = v155 & 0x3FFFFFFFFFFFFFE0;
                v295 = (int8x16x4_t *)(v148 + 136);
                v296 = (char *)v689 + v150 + 16;
                v297 = v155 & 0x3FFFFFFFFFFFFFE0;
                do
                {
                  *(_QWORD *)&v298 = vqtbl4q_s8(v295[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
                  *(_QWORD *)&v299 = vqtbl4q_s8(*v295, (int8x16_t)xmmword_18125CFF0).u64[0];
                  *((_QWORD *)&v298 + 1) = vqtbl4q_s8(v295[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
                  *((_QWORD *)&v299 + 1) = vqtbl4q_s8(v295[1], (int8x16_t)xmmword_18125CFF0).u64[0];
                  *(v296 - 1) = v298;
                  *v296 = v299;
                  v295 += 4;
                  v296 += 2;
                  v297 -= 32;
                }
                while (v297);
                if (v155 == v156)
                  goto LABEL_184;
                if ((v155 & 0x18) != 0)
                  goto LABEL_178;
                v151 += 8 * v156;
                v153 += v156;
              }
              else
              {
                v156 = 0;
LABEL_178:
                v153 += v155 & 0x3FFFFFFFFFFFFFF8;
                v151 += 8 * (v155 & 0x3FFFFFFFFFFFFFF8);
                v300 = (int8x16x4_t *)&v148[8 * v156 + 8];
                v301 = &v152[v150 + v156];
                v302 = v156 - (v155 & 0x3FFFFFFFFFFFFFF8);
                do
                {
                  *(_QWORD *)v301 = vqtbl4q_s8(*v300, (int8x16_t)xmmword_18125D000).u64[0];
                  v301 += 8;
                  ++v300;
                  v302 += 8;
                }
                while (v302);
                if (v155 == (v155 & 0x3FFFFFFFFFFFFFF8))
                {
LABEL_184:
                  v150 = v690;
                  goto LABEL_185;
                }
              }
            }
            do
            {
              v303 = *(_QWORD *)v151;
              v151 += 8;
              *v153++ = v303;
            }
            while (v151 != &v148[8 * v147]);
            goto LABEL_184;
          }
LABEL_185:
          v304 = (const char *)(v150 + v149);
          *(_QWORD *)&v690 = v150 + v149;
          v305 = *(unsigned int *)v697;
          v306 = *(_QWORD *)(a2 + 1488);
          this = v146;
          if (v305 < (*(_QWORD *)(a2 + 1496) - v306) >> 3)
          {
            v307 = *(llvm::Value **)(v306 + 8 * v305);
            if (v307)
            {
              LOWORD(v704) = 261;
              v700 = (char *)v689;
              v701 = v304;
              llvm::Value::setName(v307, (const char **)&v700);
              *(_QWORD *)&v690 = 0;
              v30 = 1;
              goto LABEL_190;
            }
          }
          v700 = "Invalid bbentry record";
          LOWORD(v704) = 259;
          v227 = v146;
LABEL_189:
          v30 = 0;
LABEL_190:
          if ((v710 & 1) != 0)
          {
LABEL_191:
            v308 = (char *)v709;
            v709 = 0;
            if (v308)
              (*(void (**)(char *))(*(_QWORD *)v308 + 8))(v308);
          }
LABEL_193:
          if (!v30)
            goto LABEL_405;
        }
      }
    }
  }
  v6 = (llvm::SimpleBitstreamCursor *)(a2 + 32);
  jumpToValueSymbolTable((uint64_t)&v709, a3, a2 + 32);
  if ((v710 & 1) != 0)
  {
    *(_QWORD *)this = v709;
    return;
  }
  v7 = v709;
  if (!*(_BYTE *)(a2 + 392))
    goto LABEL_7;
  v8 = *(_DWORD *)(a2 + 68);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, (uint64_t *)this);
  if (*(_QWORD *)this)
    return;
  v675 = v7;
  v674 = (const llvm::Twine *)(a2 + 8);
  v672 = v8 + 8;
  v697 = v699;
  v9 = (unsigned int *)(a2 + 64);
  v698 = 0x4000000000;
  v10 = (unint64_t *)(a2 + 48);
  v11 = (int8x8_t *)(a2 + 56);
  v673 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
  v677 = this;
  do
  {
    while (1)
    {
LABEL_197:
      while (1)
      {
        v310 = *v9;
        if (!*v9)
          break;
        v311 = *(_DWORD *)(a2 + 68);
        v312 = *(int8x8_t *)(a2 + 56);
        if (v310 < v311)
        {
          v314 = *(_QWORD *)(a2 + 40);
          v313 = *(_QWORD *)(a2 + 48);
          v315 = v314 - v313;
          if (v314 <= v313)
            goto LABEL_380;
          goto LABEL_204;
        }
LABEL_216:
        v321 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v311) & *(_QWORD *)&v312;
        v322 = *(_QWORD *)&v312 >> v311;
        *v11 = (int8x8_t)(*(_QWORD *)&v312 >> v311);
        v323 = v310 - v311;
        *v9 = v323;
        if ((_DWORD)v321 == 1)
          goto LABEL_217;
LABEL_234:
        if ((_DWORD)v321 == 2)
        {
          llvm::BitstreamCursor::ReadAbbrevRecord((char **)(a2 + 32), (unint64_t *)&v689);
          v309 = (const char *)v689;
          if (v689)
            goto LABEL_390;
        }
        else
        {
          if (!(_DWORD)v321)
          {
            if (*(_DWORD *)(a2 + 104))
            {
              if (v323 < 0x20)
              {
                v666 = 0;
              }
              else
              {
                *v11 = (int8x8_t)(v322 >> (v323 - 32));
                v666 = 32;
              }
              *v9 = v666;
              llvm::BitstreamCursor::popBlockScope((llvm::BitstreamCursor *)(a2 + 32));
              *(_QWORD *)this = 0;
              v667 = v697;
              v668 = (unint64_t)v675;
              if (v697 != v699)
                goto LABEL_392;
            }
            else
            {
LABEL_387:
              v689 = "Malformed block";
              LOWORD(v692) = 259;
              v667 = v697;
              v668 = (unint64_t)v675;
              if (v697 != v699)
                goto LABEL_392;
            }
            goto LABEL_393;
          }
          LODWORD(v698) = 0;
          llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)(a2 + 32), ((v321 << 32) | 3) >> 32, (uint64_t)&v697, 0, (uint64_t)&v700);
          if ((v701 & 1) != 0)
          {
            v326 = 0;
            v327 = v700;
            v700 = 0;
            *(_QWORD *)this = v327;
            if ((v701 & 1) != 0)
              goto LABEL_306;
          }
          else if ((_DWORD)v700 == 3)
          {
            v324 = *(_QWORD *)(a2 + 712);
            if (((unint64_t)(*(_QWORD *)(a2 + 720) - v324) >> 5) > *(_QWORD *)v697
              && (v325 = *(_QWORD *)(v324 + 32 * *(_QWORD *)v697 + 16)) != 0)
            {
              v326 = 1;
              if ((v701 & 1) != 0)
                goto LABEL_306;
            }
            else
            {
              v689 = "Invalid value reference in symbol table";
              LOWORD(v692) = 259;
              v326 = 0;
              if ((v701 & 1) != 0)
              {
LABEL_306:
                v453 = v700;
                v700 = 0;
                if (v453)
                  (*(void (**)(char *))(*(_QWORD *)v453 + 8))(v453);
              }
            }
          }
          else
          {
            v326 = 1;
            if ((v701 & 1) != 0)
              goto LABEL_306;
          }
          if ((v326 & 1) == 0)
            goto LABEL_391;
        }
      }
      v314 = *(_QWORD *)(a2 + 40);
      v313 = *(_QWORD *)(a2 + 48);
      if (v314 <= v313)
        goto LABEL_387;
      v311 = *(_DWORD *)(a2 + 68);
      if (!v311)
      {
        v312 = *v11;
        goto LABEL_216;
      }
      v312 = 0;
      v315 = v314 - v313;
      if (v314 <= v313)
      {
LABEL_380:
        v664 = std::generic_category();
        v681 = 0;
        v682 = 0;
        v683 = 0;
        LODWORD(v690) = 0;
        v693 = 0;
        v694 = 0;
        v695 = 1;
        v691 = 0;
        v692 = 0;
        *((_QWORD *)&v690 + 1) = 0;
        v689 = &unk_1E0E22B10;
        v696 = &v681;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v689, 0, 0, 0);
        v700 = (char *)&unk_1E0E203C0;
        v701 = "Unexpected end of file reading %u of %u bytes";
        v702 = *v10;
        v703 = v314;
        goto LABEL_382;
      }
LABEL_204:
      v316 = *(_QWORD *)v6;
      v317 = (unsigned int *)(*(_QWORD *)v6 + v313);
      if (v314 >= v313 + 8)
      {
        v319 = *(_QWORD *)v317;
        *v11 = (int8x8_t)v319;
        v315 = 8;
        goto LABEL_232;
      }
      *v11 = 0;
      if (!v315)
      {
        v319 = 0;
        goto LABEL_232;
      }
      if (v315 < 8uLL || ((unint64_t)v11 < v316 + v313 + v315 ? (v318 = v317 >= v9) : (v318 = 1), !v318))
      {
        v320 = 0;
        v319 = 0;
LABEL_228:
        v328 = v315 - v320;
        v329 = 8 * v320;
        v330 = (unsigned __int8 *)(v316 + v320 + v313);
        do
        {
          v331 = *v330++;
          v319 |= (unint64_t)v331 << (v329 & 0xF8);
          *v11 = (int8x8_t)v319;
          v329 += 8;
          --v328;
        }
        while (v328);
        goto LABEL_232;
      }
      if (v315 >= 0x10uLL)
      {
        v320 = v315 - (unint64_t)(v315 & 0xF);
        v455 = (int64x2_t)xmmword_181267BA0;
        v456 = (int64x2_t)xmmword_181267BB0;
        v457 = (int64x2_t)xmmword_181267BC0;
        v458 = 0uLL;
        v459 = 0uLL;
        v460 = (int64x2_t)xmmword_181267BD0;
        v461 = v320;
        v462 = (int64x2_t)xmmword_181233120;
        v463 = (int64x2_t)xmmword_181233290;
        v464 = (int64x2_t)xmmword_181267BE0;
        v465 = (int64x2_t)xmmword_1812332B0;
        v466 = 0uLL;
        v467 = 0uLL;
        v468 = 0uLL;
        v469 = 0uLL;
        v470 = 0uLL;
        v471 = 0uLL;
        do
        {
          v472 = *(uint8x16_t *)v317;
          v317 += 4;
          v473 = vmovl_u8(*(uint8x8_t *)v472.i8);
          v474 = vmovl_high_u8(v472);
          v475 = vmovl_u16(*(uint16x4_t *)v474.i8);
          v476 = vmovl_high_u16(v474);
          v477 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
          v478 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v465, 3uLL), v477);
          v479 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v460, 3uLL), v477);
          v480 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v464, 3uLL), v477);
          v481 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v463, 3uLL), v477);
          v482 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v457, 3uLL), v477);
          v483 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v462, 3uLL), v477);
          v484 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v456, 3uLL), v477);
          v485.i64[0] = v476.u32[2];
          v485.i64[1] = v476.u32[3];
          v486 = (int8x16_t)vshlq_u64(v485, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v455, 3uLL), v477));
          v487 = vmovl_u16(*(uint16x4_t *)v473.i8);
          v485.i64[0] = v476.u32[0];
          v485.i64[1] = v476.u32[1];
          v488 = (int8x16_t)vshlq_u64(v485, v484);
          v485.i64[0] = v487.u32[0];
          v485.i64[1] = v487.u32[1];
          v489 = (int8x16_t)vshlq_u64(v485, v483);
          v485.i64[0] = v475.u32[2];
          v485.i64[1] = v475.u32[3];
          v490 = (int8x16_t)vshlq_u64(v485, v482);
          v491 = vmovl_high_u16(v473);
          v485.i64[0] = v487.u32[2];
          v485.i64[1] = v487.u32[3];
          v492 = (int8x16_t)vshlq_u64(v485, v481);
          v485.i64[0] = v491.u32[0];
          v485.i64[1] = v491.u32[1];
          v493 = (int8x16_t)vshlq_u64(v485, v480);
          v485.i64[0] = v475.u32[0];
          v485.i64[1] = v475.u32[1];
          v494 = (int8x16_t)vshlq_u64(v485, v479);
          v485.i64[0] = v491.u32[2];
          v485.i64[1] = v491.u32[3];
          v467 = vorrq_s8((int8x16_t)vshlq_u64(v485, v478), v467);
          v468 = vorrq_s8(v494, v468);
          v466 = vorrq_s8(v493, v466);
          v459 = vorrq_s8(v492, v459);
          v469 = vorrq_s8(v490, v469);
          v458 = vorrq_s8(v489, v458);
          v470 = vorrq_s8(v488, v470);
          v471 = vorrq_s8(v486, v471);
          v495 = vdupq_n_s64(0x10uLL);
          v464 = vaddq_s64(v464, v495);
          v463 = vaddq_s64(v463, v495);
          v462 = vaddq_s64(v462, v495);
          v465 = vaddq_s64(v465, v495);
          v460 = vaddq_s64(v460, v495);
          v457 = vaddq_s64(v457, v495);
          v456 = vaddq_s64(v456, v495);
          v455 = vaddq_s64(v455, v495);
          v461 -= 16;
        }
        while (v461);
        v496 = vorrq_s8(vorrq_s8(vorrq_s8(v458, v468), vorrq_s8(v466, v470)), vorrq_s8(vorrq_s8(v459, v469), vorrq_s8(v467, v471)));
        *(int8x8_t *)v496.i8 = vorr_s8(*(int8x8_t *)v496.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v496, v496, 8uLL));
        *v11 = *(int8x8_t *)v496.i8;
        v319 = v496.i64[0];
        if ((v315 & 0xF) == 0)
          goto LABEL_232;
        if ((v315 & 0xF) < 8uLL)
          goto LABEL_228;
      }
      else
      {
        v319 = 0;
        v320 = 0;
      }
      v497 = vdupq_n_s64(v320);
      v498 = vaddq_s64(v497, (int64x2_t)xmmword_1812332B0);
      v499 = (int8x16_t)v319;
      v500 = v313 + v320;
      v501 = v320 + (v315 & 7);
      v320 = v315 - (unint64_t)(v315 & 7);
      v502 = vaddq_s64(v497, (int64x2_t)xmmword_181267BE0);
      v503 = vaddq_s64(v497, (int64x2_t)xmmword_181233290);
      v504 = vaddq_s64(v497, (int64x2_t)xmmword_181233120);
      v505 = 0uLL;
      v506 = (uint8x8_t *)(v316 + v500);
      v507 = v501 - v315;
      v508 = 0uLL;
      v509 = 0uLL;
      do
      {
        v510 = *v506++;
        v511 = vmovl_u8(v510);
        v512 = vmovl_high_u16(v511);
        v513.i64[0] = v512.u32[2];
        v513.i64[1] = v512.u32[3];
        v514 = v513;
        v513.i64[0] = v512.u32[0];
        v513.i64[1] = v512.u32[1];
        v515 = v513;
        v516 = vmovl_u16(*(uint16x4_t *)v511.i8);
        v513.i64[0] = v516.u32[2];
        v513.i64[1] = v516.u32[3];
        v517 = v513;
        v513.i64[0] = v516.u32[0];
        v513.i64[1] = v516.u32[1];
        v518 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
        v509 = vorrq_s8((int8x16_t)vshlq_u64(v514, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v498, 3uLL), v518)), v509);
        v508 = vorrq_s8((int8x16_t)vshlq_u64(v515, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v502, 3uLL), v518)), v508);
        v505 = vorrq_s8((int8x16_t)vshlq_u64(v517, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v503, 3uLL), v518)), v505);
        v519 = vdupq_n_s64(8uLL);
        v499 = vorrq_s8((int8x16_t)vshlq_u64(v513, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v504, 3uLL), v518)), v499);
        v502 = vaddq_s64(v502, v519);
        v503 = vaddq_s64(v503, v519);
        v504 = vaddq_s64(v504, v519);
        v498 = vaddq_s64(v498, v519);
        v507 += 8;
      }
      while (v507);
      v520 = vorrq_s8(vorrq_s8(v499, v508), vorrq_s8(v505, v509));
      *(int8x8_t *)v520.i8 = vorr_s8(*(int8x8_t *)v520.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v520, v520, 8uLL));
      *v11 = *(int8x8_t *)v520.i8;
      v319 = v520.i64[0];
      if ((v315 & 7) != 0)
        goto LABEL_228;
LABEL_232:
      v332 = v311 - v310;
      *v10 = v313 + v315;
      *v9 = 8 * v315;
      v323 = 8 * v315 - (v311 - v310);
      if (8 * v315 < v332)
      {
        v664 = std::generic_category();
        v681 = 0;
        v682 = 0;
        v683 = 0;
        LODWORD(v690) = 0;
        v693 = 0;
        v694 = 0;
        v695 = 1;
        v691 = 0;
        v692 = 0;
        *((_QWORD *)&v690 + 1) = 0;
        v689 = &unk_1E0E22B10;
        v696 = &v681;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v689, 0, 0, 0);
        v700 = (char *)&unk_1E0E20320;
        v701 = "Unexpected end of file reading %u of %u bits";
        LODWORD(v702) = *v9;
        HIDWORD(v702) = v332;
LABEL_382:
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v689, (uint64_t)&v700);
        v665 = (const char *)v696;
        v309 = (const char *)operator new(0x38uLL);
        LOWORD(v704) = 260;
        v700 = (char *)v665;
        llvm::StringError::StringError((uint64_t)v309, (llvm::Twine *)&v700, 5, (uint64_t)v664);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v689);
        if (SHIBYTE(v683) < 0)
          operator delete(v681);
        goto LABEL_390;
      }
      v322 = v319 >> v332;
      *v11 = (int8x8_t)(v319 >> v332);
      *v9 = v323;
      v333 = (v319 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v332)) << v310;
      v321 = v333 | *(_QWORD *)&v312;
      if ((v333 | v312.i32[0]) != 1)
        goto LABEL_234;
LABEL_217:
      llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)(a2 + 32), 8u, (uint64_t)&v689);
      if ((v690 & 1) != 0)
      {
        v309 = (const char *)v689;
        goto LABEL_390;
      }
      v334 = *v9;
      if (*v9 < 4)
        break;
      v348 = *(_QWORD *)v11 & 0xFLL;
      v349 = *(unint64_t *)v11 >> 4;
      *v11 = (int8x8_t)v349;
      v350 = v334 - 4;
      *v9 = v334 - 4;
      if ((v348 & 8) != 0)
        goto LABEL_260;
LABEL_257:
      v26 = v350 >= 0x20;
      v352 = v350 - 32;
      if (v26)
      {
        v353 = 0;
        v354 = (int8x8_t)(v349 >> v352);
        *v11 = (int8x8_t)HIDWORD(*(_QWORD *)&v354);
        *v9 = 0;
        goto LABEL_336;
      }
      *(_DWORD *)(a2 + 64) = 0;
      LODWORD(__p) = 32;
      v442 = *(_QWORD *)(a2 + 40);
      v441 = *(_QWORD *)(a2 + 48);
      v443 = v442 - v441;
      if (v442 > v441)
      {
        v444 = *(_QWORD *)v6;
        v445 = (unsigned int *)(*(_QWORD *)v6 + v441);
        if (v442 >= v441 + 8)
        {
          *v11 = *(int8x8_t *)v445;
          v443 = 8;
        }
        else
        {
          *v11 = 0;
          if (v443)
          {
            v446 = (v442 - v441);
            if (v443 >= 8uLL && ((unint64_t)v11 >= v444 + v441 + v446 || v445 >= v9))
            {
              if (v446 >= 0x10)
              {
                v447 = v446 - (v443 & 0xF);
                v593 = (int64x2_t)xmmword_181267BA0;
                v594 = (int64x2_t)xmmword_181267BB0;
                v595 = (int64x2_t)xmmword_181267BC0;
                v596 = (int64x2_t)xmmword_181267BD0;
                v597 = (int64x2_t)xmmword_1812332B0;
                v598 = (int64x2_t)xmmword_181267BE0;
                v599 = 0uLL;
                v600 = v447;
                v601 = 0uLL;
                v602 = 0uLL;
                v603 = 0uLL;
                v604 = 0uLL;
                v605 = 0uLL;
                v606 = (int64x2_t)xmmword_181233290;
                v607 = 0uLL;
                v608 = 0uLL;
                v609 = (int64x2_t)xmmword_181233120;
                do
                {
                  v610 = *(uint8x16_t *)v445;
                  v445 += 4;
                  v611 = vmovl_u8(*(uint8x8_t *)v610.i8);
                  v612 = vmovl_high_u8(v610);
                  v613 = vmovl_u16(*(uint16x4_t *)v612.i8);
                  v614 = vmovl_high_u16(v612);
                  v615 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                  v616 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v597, 3uLL), v615);
                  v617 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v596, 3uLL), v615);
                  v618 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v598, 3uLL), v615);
                  v619 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v606, 3uLL), v615);
                  v620 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v595, 3uLL), v615);
                  v621 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v609, 3uLL), v615);
                  v622 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v594, 3uLL), v615);
                  v623.i64[0] = v614.u32[2];
                  v623.i64[1] = v614.u32[3];
                  v624 = (int8x16_t)vshlq_u64(v623, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v593, 3uLL), v615));
                  v625 = vmovl_u16(*(uint16x4_t *)v611.i8);
                  v623.i64[0] = v614.u32[0];
                  v623.i64[1] = v614.u32[1];
                  v626 = (int8x16_t)vshlq_u64(v623, v622);
                  v623.i64[0] = v625.u32[0];
                  v623.i64[1] = v625.u32[1];
                  v627 = (int8x16_t)vshlq_u64(v623, v621);
                  v623.i64[0] = v613.u32[2];
                  v623.i64[1] = v613.u32[3];
                  v628 = (int8x16_t)vshlq_u64(v623, v620);
                  v629 = vmovl_high_u16(v611);
                  v623.i64[0] = v625.u32[2];
                  v623.i64[1] = v625.u32[3];
                  v630 = (int8x16_t)vshlq_u64(v623, v619);
                  v623.i64[0] = v629.u32[0];
                  v623.i64[1] = v629.u32[1];
                  v631 = (int8x16_t)vshlq_u64(v623, v618);
                  v623.i64[0] = v613.u32[0];
                  v623.i64[1] = v613.u32[1];
                  v632 = (int8x16_t)vshlq_u64(v623, v617);
                  v623.i64[0] = v629.u32[2];
                  v623.i64[1] = v629.u32[3];
                  v603 = vorrq_s8((int8x16_t)vshlq_u64(v623, v616), v603);
                  v604 = vorrq_s8(v632, v604);
                  v602 = vorrq_s8(v631, v602);
                  v601 = vorrq_s8(v630, v601);
                  v605 = vorrq_s8(v628, v605);
                  v599 = vorrq_s8(v627, v599);
                  v607 = vorrq_s8(v626, v607);
                  v608 = vorrq_s8(v624, v608);
                  v633 = vdupq_n_s64(0x10uLL);
                  v598 = vaddq_s64(v598, v633);
                  v606 = vaddq_s64(v606, v633);
                  v609 = vaddq_s64(v609, v633);
                  v597 = vaddq_s64(v597, v633);
                  v596 = vaddq_s64(v596, v633);
                  v595 = vaddq_s64(v595, v633);
                  v594 = vaddq_s64(v594, v633);
                  v593 = vaddq_s64(v593, v633);
                  v600 -= 16;
                }
                while (v600);
                v634 = vorrq_s8(vorrq_s8(vorrq_s8(v599, v604), vorrq_s8(v602, v607)), vorrq_s8(vorrq_s8(v601, v605), vorrq_s8(v603, v608)));
                v635 = vorr_s8(*(int8x8_t *)v634.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v634, v634, 8uLL));
                *v11 = v635;
                if ((v443 & 0xF) == 0)
                  goto LABEL_330;
                v448 = v635;
                if ((v443 & 0xF) < 8uLL)
                  goto LABEL_302;
              }
              else
              {
                v448 = 0;
                v447 = 0;
              }
              v636 = vdupq_n_s64(v447);
              v637 = vaddq_s64(v636, (int64x2_t)xmmword_1812332B0);
              v638 = (int8x16_t)(unint64_t)v448;
              v639 = v447 + v441;
              v640 = v447 + (v443 & 7);
              v447 = v446 - (v443 & 7);
              v641 = vaddq_s64(v636, (int64x2_t)xmmword_181267BE0);
              v642 = vaddq_s64(v636, (int64x2_t)xmmword_181233290);
              v643 = vaddq_s64(v636, (int64x2_t)xmmword_181233120);
              v644 = 0uLL;
              v645 = (uint8x8_t *)(v444 + v639);
              v646 = v640 - v446;
              v647 = 0uLL;
              v648 = 0uLL;
              do
              {
                v649 = *v645++;
                v650 = vmovl_u8(v649);
                v651 = vmovl_high_u16(v650);
                v652.i64[0] = v651.u32[2];
                v652.i64[1] = v651.u32[3];
                v653 = v652;
                v652.i64[0] = v651.u32[0];
                v652.i64[1] = v651.u32[1];
                v654 = v652;
                v655 = vmovl_u16(*(uint16x4_t *)v650.i8);
                v652.i64[0] = v655.u32[2];
                v652.i64[1] = v655.u32[3];
                v656 = v652;
                v652.i64[0] = v655.u32[0];
                v652.i64[1] = v655.u32[1];
                v657 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                v648 = vorrq_s8((int8x16_t)vshlq_u64(v653, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v637, 3uLL), v657)), v648);
                v647 = vorrq_s8((int8x16_t)vshlq_u64(v654, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v641, 3uLL), v657)), v647);
                v644 = vorrq_s8((int8x16_t)vshlq_u64(v656, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v642, 3uLL), v657)), v644);
                v658 = vdupq_n_s64(8uLL);
                v638 = vorrq_s8((int8x16_t)vshlq_u64(v652, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v643, 3uLL), v657)), v638);
                v641 = vaddq_s64(v641, v658);
                v642 = vaddq_s64(v642, v658);
                v643 = vaddq_s64(v643, v658);
                v637 = vaddq_s64(v637, v658);
                v646 += 8;
              }
              while (v646);
              v659 = vorrq_s8(vorrq_s8(v638, v647), vorrq_s8(v644, v648));
              v660 = vorr_s8(*(int8x8_t *)v659.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v659, v659, 8uLL));
              *v11 = v660;
              if ((v443 & 7) != 0)
              {
                v448 = v660;
                goto LABEL_302;
              }
            }
            else
            {
              v447 = 0;
              v448 = 0;
LABEL_302:
              v449 = v446 - v447;
              v450 = 8 * v447;
              v451 = (unsigned __int8 *)(v444 + v447 + v441);
              do
              {
                v452 = *v451++;
                *(_QWORD *)&v448 |= (unint64_t)v452 << (v450 & 0xF8);
                *v11 = v448;
                v450 += 8;
                --v449;
              }
              while (v449);
            }
          }
        }
LABEL_330:
        *v10 = v441 + v443;
        v454 = 8 * v443;
        *v9 = v454;
        goto LABEL_331;
      }
      v689 = *(void **)(a2 + 40);
      llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", (_QWORD *)(a2 + 48), (uint64_t *)&v689, (uint64_t *)&v700);
      v309 = v700;
      if (v700)
      {
LABEL_333:
        if (v309)
          goto LABEL_390;
      }
      else
      {
        v454 = *v9;
LABEL_331:
        if (v454 <= 0x1F)
        {
          llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)(a2 + 64), (int *)&__p, (uint64_t *)&v681);
          v309 = (const char *)v681;
          goto LABEL_333;
        }
        v354 = *v11;
        *v11 = (int8x8_t)HIDWORD(*(unint64_t *)v11);
        v353 = v454 - 32;
        *v9 = v353;
LABEL_336:
        v523 = *(_QWORD *)(a2 + 40);
        v522 = *(_QWORD *)(a2 + 48);
        v524 = 8 * v522 - v353 + 32 * v354.u32[0];
        v700 = (char *)v524;
        if (v353 || v523 > v522)
        {
          if (v523 >= v524 >> 3)
          {
            *v10 = (v524 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *v9 = 0;
            if ((v524 & 0x3F) == 0
              || (llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)(a2 + 32), v524 & 0x3F, (uint64_t)&v689), (v690 & 1) == 0)|| (v684 = (const char *)v689) == 0)
            {
              v684 = 0;
            }
          }
          else
          {
            v689 = (void *)(8 * v522 - v353);
            llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v700, (uint64_t *)&v689, (uint64_t *)&v684);
          }
        }
        else
        {
          *(_QWORD *)&v718.__val_ = std::generic_category();
          v718.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
          llvm::createStringError((llvm *)0x5C, v718, &v684);
        }
        v309 = v684;
        if (v684)
          goto LABEL_390;
      }
    }
    if (!v334)
    {
      v335.i8[0] = 0;
      v336 = 4;
      v685 = 4;
      v338 = *(void **)(a2 + 40);
      v337 = *(_QWORD *)(a2 + 48);
      v339 = (_DWORD)v338 - v337;
      if ((unint64_t)v338 <= v337)
        goto LABEL_254;
LABEL_240:
      v340 = *(_QWORD *)v6;
      v341 = (unsigned int *)(*(_QWORD *)v6 + v337);
      if ((unint64_t)v338 >= v337 + 8)
      {
        *v11 = *(int8x8_t *)v341;
        v339 = 8;
        goto LABEL_311;
      }
      *v11 = 0;
      if (!v339)
        goto LABEL_311;
      if (v339 < 8uLL || (unint64_t)v11 < v340 + v337 + v339 && v341 < v9)
      {
        v342 = 0;
        v343 = 0;
        goto LABEL_246;
      }
      if (v339 >= 0x10uLL)
      {
        v342 = v339 - (unint64_t)(v339 & 0xF);
        v526 = (int64x2_t)xmmword_1812332B0;
        v527 = (int64x2_t)xmmword_181267BE0;
        v528 = (int64x2_t)xmmword_181233290;
        v529 = 0uLL;
        v530 = 0uLL;
        v531 = (int64x2_t)xmmword_181233120;
        v532 = v342;
        v533 = (int64x2_t)xmmword_181267BD0;
        v534 = (int64x2_t)xmmword_181267BC0;
        v535 = (int64x2_t)xmmword_181267BB0;
        v536 = (int64x2_t)xmmword_181267BA0;
        v537 = 0uLL;
        v538 = 0uLL;
        v539 = 0uLL;
        v540 = 0uLL;
        v541 = 0uLL;
        v542 = 0uLL;
        do
        {
          v543 = *(uint8x16_t *)v341;
          v341 += 4;
          v544 = vmovl_u8(*(uint8x8_t *)v543.i8);
          v545 = vmovl_high_u8(v543);
          v546 = vmovl_u16(*(uint16x4_t *)v545.i8);
          v547 = vmovl_high_u16(v545);
          v548 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
          v549 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v526, 3uLL), v548);
          v550 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v533, 3uLL), v548);
          v551 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v527, 3uLL), v548);
          v552 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v528, 3uLL), v548);
          v553 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v534, 3uLL), v548);
          v554 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v531, 3uLL), v548);
          v555 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v535, 3uLL), v548);
          v556.i64[0] = v547.u32[2];
          v556.i64[1] = v547.u32[3];
          v557 = (int8x16_t)vshlq_u64(v556, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v536, 3uLL), v548));
          v558 = vmovl_u16(*(uint16x4_t *)v544.i8);
          v556.i64[0] = v547.u32[0];
          v556.i64[1] = v547.u32[1];
          v559 = (int8x16_t)vshlq_u64(v556, v555);
          v556.i64[0] = v558.u32[0];
          v556.i64[1] = v558.u32[1];
          v560 = (int8x16_t)vshlq_u64(v556, v554);
          v556.i64[0] = v546.u32[2];
          v556.i64[1] = v546.u32[3];
          v561 = (int8x16_t)vshlq_u64(v556, v553);
          v562 = vmovl_high_u16(v544);
          v556.i64[0] = v558.u32[2];
          v556.i64[1] = v558.u32[3];
          v563 = (int8x16_t)vshlq_u64(v556, v552);
          v556.i64[0] = v562.u32[0];
          v556.i64[1] = v562.u32[1];
          v564 = (int8x16_t)vshlq_u64(v556, v551);
          v556.i64[0] = v546.u32[0];
          v556.i64[1] = v546.u32[1];
          v565 = (int8x16_t)vshlq_u64(v556, v550);
          v556.i64[0] = v562.u32[2];
          v556.i64[1] = v562.u32[3];
          v538 = vorrq_s8((int8x16_t)vshlq_u64(v556, v549), v538);
          v539 = vorrq_s8(v565, v539);
          v537 = vorrq_s8(v564, v537);
          v530 = vorrq_s8(v563, v530);
          v540 = vorrq_s8(v561, v540);
          v529 = vorrq_s8(v560, v529);
          v541 = vorrq_s8(v559, v541);
          v542 = vorrq_s8(v557, v542);
          v566 = vdupq_n_s64(0x10uLL);
          v527 = vaddq_s64(v527, v566);
          v528 = vaddq_s64(v528, v566);
          v531 = vaddq_s64(v531, v566);
          v526 = vaddq_s64(v526, v566);
          v533 = vaddq_s64(v533, v566);
          v534 = vaddq_s64(v534, v566);
          v535 = vaddq_s64(v535, v566);
          v536 = vaddq_s64(v536, v566);
          v532 -= 16;
        }
        while (v532);
        v567 = vorrq_s8(vorrq_s8(vorrq_s8(v529, v539), vorrq_s8(v537, v541)), vorrq_s8(vorrq_s8(v530, v540), vorrq_s8(v538, v542)));
        v568 = vorr_s8(*(int8x8_t *)v567.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v567, v567, 8uLL));
        *v11 = v568;
        if ((v339 & 0xF) == 0)
          goto LABEL_311;
        v343 = v568;
        if ((v339 & 0xF) < 8uLL)
          goto LABEL_246;
      }
      else
      {
        v343 = 0;
        v342 = 0;
      }
      v569 = vdupq_n_s64(v342);
      v570 = vaddq_s64(v569, (int64x2_t)xmmword_1812332B0);
      v571 = (int8x16_t)(unint64_t)v343;
      v572 = v342 + v337;
      v573 = v342 + (v339 & 7);
      v342 = v339 - (unint64_t)(v339 & 7);
      v574 = vaddq_s64(v569, (int64x2_t)xmmword_181267BE0);
      v575 = vaddq_s64(v569, (int64x2_t)xmmword_181233290);
      v576 = vaddq_s64(v569, (int64x2_t)xmmword_181233120);
      v577 = 0uLL;
      v578 = (uint8x8_t *)(v340 + v572);
      v579 = v573 - v339;
      v580 = 0uLL;
      v581 = 0uLL;
      do
      {
        v582 = *v578++;
        v583 = vmovl_u8(v582);
        v584 = vmovl_high_u16(v583);
        v585.i64[0] = v584.u32[2];
        v585.i64[1] = v584.u32[3];
        v586 = v585;
        v585.i64[0] = v584.u32[0];
        v585.i64[1] = v584.u32[1];
        v587 = v585;
        v588 = vmovl_u16(*(uint16x4_t *)v583.i8);
        v585.i64[0] = v588.u32[2];
        v585.i64[1] = v588.u32[3];
        v589 = v585;
        v585.i64[0] = v588.u32[0];
        v585.i64[1] = v588.u32[1];
        v581 = vorrq_s8((int8x16_t)vshlq_u64(v586, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v570, 3uLL), v673)), v581);
        v580 = vorrq_s8((int8x16_t)vshlq_u64(v587, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v574, 3uLL), v673)), v580);
        v577 = vorrq_s8((int8x16_t)vshlq_u64(v589, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v575, 3uLL), v673)), v577);
        v590 = vdupq_n_s64(8uLL);
        v571 = vorrq_s8((int8x16_t)vshlq_u64(v585, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v576, 3uLL), v673)), v571);
        v574 = vaddq_s64(v574, v590);
        v575 = vaddq_s64(v575, v590);
        v576 = vaddq_s64(v576, v590);
        v570 = vaddq_s64(v570, v590);
        v579 += 8;
      }
      while (v579);
      v591 = vorrq_s8(vorrq_s8(v571, v580), vorrq_s8(v577, v581));
      v592 = vorr_s8(*(int8x8_t *)v591.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v591, v591, 8uLL));
      *v11 = v592;
      if ((v339 & 7) != 0)
      {
        v343 = v592;
LABEL_246:
        v344 = v339 - v342;
        v345 = 8 * v342;
        v346 = (unsigned __int8 *)(v340 + v342 + v337);
        do
        {
          v347 = *v346++;
          *(_QWORD *)&v343 |= (unint64_t)v347 << (v345 & 0xF8);
          *v11 = v343;
          v345 += 8;
          --v344;
        }
        while (v344);
      }
LABEL_311:
      *v10 = v337 + v339;
      *v9 = 8 * v339;
      v350 = 8 * v339 - v336;
      if (8 * v339 < v336)
      {
LABEL_312:
        llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)(a2 + 64), (int *)&v685, (uint64_t *)&v681);
        v309 = (const char *)v681;
        goto LABEL_313;
      }
      goto LABEL_256;
    }
    v335 = *v11;
    v336 = 4 - v334;
    v685 = 4 - v334;
    v338 = *(void **)(a2 + 40);
    v337 = *(_QWORD *)(a2 + 48);
    v339 = (_DWORD)v338 - v337;
    if ((unint64_t)v338 > v337)
      goto LABEL_240;
LABEL_254:
    v689 = v338;
    llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", (_QWORD *)(a2 + 48), (uint64_t *)&v689, (uint64_t *)&v700);
    v309 = v700;
    if (!v700)
    {
      v350 = *v9 - v336;
      if (*v9 < v336)
        goto LABEL_312;
LABEL_256:
      v351 = *v11;
      v349 = *(unint64_t *)v11 >> v336;
      *v11 = (int8x8_t)v349;
      *v9 = v350;
      this = v677;
      if (!((v351.i32[0] << v334) & 8 | v335.i8[0] & 8))
        goto LABEL_257;
LABEL_260:
      v355 = 0;
      while (1)
      {
        while (1)
        {
          if (v355 >= 0x1D)
          {
            *(_QWORD *)&v717.__val_ = std::generic_category();
            v717.__cat_ = (const std::error_category *)"Unterminated VBR";
            llvm::createStringError((llvm *)0x5C, v717, &__p);
            v309 = (const char *)__p;
            if (!__p)
              goto LABEL_197;
            goto LABEL_390;
          }
          if (v350 < 4)
            break;
          v356 = v349 & 0xF;
          v349 >>= 4;
          *v11 = (int8x8_t)v349;
          *v9 = v350 - 4;
          v350 -= 4;
          v355 += 3;
          if ((v356 & 8) == 0)
            goto LABEL_257;
        }
        if (v350)
          v357 = v349;
        else
          v357 = 0;
        v359 = *(_QWORD *)(a2 + 40);
        v358 = *(_QWORD *)(a2 + 48);
        v360 = v359 - v358;
        if (v359 <= v358)
        {
          v521 = std::generic_category();
          v681 = 0;
          v682 = 0;
          v683 = 0;
          LODWORD(v690) = 0;
          v693 = 0;
          v694 = 0;
          v695 = 1;
          v691 = 0;
          v692 = 0;
          *((_QWORD *)&v690 + 1) = 0;
          v689 = &unk_1E0E22B10;
          v696 = &v681;
          llvm::raw_ostream::SetBufferAndMode((uint64_t)&v689, 0, 0, 0);
          v700 = (char *)&unk_1E0E203C0;
          v701 = "Unexpected end of file reading %u of %u bytes";
          v702 = *v10;
          v703 = v359;
          goto LABEL_348;
        }
        v361 = *(_QWORD *)v6;
        v362 = (unsigned int *)(*(_QWORD *)v6 + v358);
        if (v359 >= v358 + 8)
        {
          v365 = *(_QWORD *)v362;
          *v11 = (int8x8_t)v365;
          v360 = 8;
          goto LABEL_284;
        }
        *v11 = 0;
        if (!v360)
        {
          v365 = 0;
          goto LABEL_284;
        }
        v363 = (v359 - v358);
        if (v363 < 8 || ((unint64_t)v11 < v361 + v358 + v363 ? (v364 = v362 >= v9) : (v364 = 1), !v364))
        {
          v366 = 0;
          v365 = 0;
LABEL_280:
          v367 = v363 - v366;
          v368 = 8 * v366;
          v369 = (unsigned __int8 *)(v361 + v366 + v358);
          do
          {
            v370 = *v369++;
            v365 |= (unint64_t)v370 << (v368 & 0xF8);
            *v11 = (int8x8_t)v365;
            v368 += 8;
            --v367;
          }
          while (v367);
          goto LABEL_284;
        }
        if (v363 >= 0x10)
        {
          v366 = v363 - (v360 & 0xF);
          v375 = (int64x2_t)xmmword_181267BA0;
          v376 = (int64x2_t)xmmword_181267BB0;
          v377 = (int64x2_t)xmmword_181267BC0;
          v378 = (int64x2_t)xmmword_181267BD0;
          v379 = (int64x2_t)xmmword_1812332B0;
          v380 = (int64x2_t)xmmword_181267BE0;
          v381 = 0uLL;
          v382 = v366;
          v383 = 0uLL;
          v384 = 0uLL;
          v385 = 0uLL;
          v386 = 0uLL;
          v387 = 0uLL;
          v388 = (int64x2_t)xmmword_181233290;
          v389 = 0uLL;
          v390 = 0uLL;
          v391 = (int64x2_t)xmmword_181233120;
          do
          {
            v392 = *(uint8x16_t *)v362;
            v362 += 4;
            v393 = vmovl_u8(*(uint8x8_t *)v392.i8);
            v394 = vmovl_high_u8(v392);
            v395 = vmovl_u16(*(uint16x4_t *)v394.i8);
            v396 = vmovl_high_u16(v394);
            v397 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
            v398 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v379, 3uLL), v397);
            v399 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v378, 3uLL), v397);
            v400 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v380, 3uLL), v397);
            v401 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v388, 3uLL), v397);
            v402 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v377, 3uLL), v397);
            v403 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v391, 3uLL), v397);
            v404 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v376, 3uLL), v397);
            v405.i64[0] = v396.u32[2];
            v405.i64[1] = v396.u32[3];
            v406 = (int8x16_t)vshlq_u64(v405, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v375, 3uLL), v397));
            v407 = vmovl_u16(*(uint16x4_t *)v393.i8);
            v405.i64[0] = v396.u32[0];
            v405.i64[1] = v396.u32[1];
            v408 = (int8x16_t)vshlq_u64(v405, v404);
            v405.i64[0] = v407.u32[0];
            v405.i64[1] = v407.u32[1];
            v409 = (int8x16_t)vshlq_u64(v405, v403);
            v405.i64[0] = v395.u32[2];
            v405.i64[1] = v395.u32[3];
            v410 = (int8x16_t)vshlq_u64(v405, v402);
            v411 = vmovl_high_u16(v393);
            v405.i64[0] = v407.u32[2];
            v405.i64[1] = v407.u32[3];
            v412 = (int8x16_t)vshlq_u64(v405, v401);
            v405.i64[0] = v411.u32[0];
            v405.i64[1] = v411.u32[1];
            v413 = (int8x16_t)vshlq_u64(v405, v400);
            v405.i64[0] = v395.u32[0];
            v405.i64[1] = v395.u32[1];
            v414 = (int8x16_t)vshlq_u64(v405, v399);
            v405.i64[0] = v411.u32[2];
            v405.i64[1] = v411.u32[3];
            v385 = vorrq_s8((int8x16_t)vshlq_u64(v405, v398), v385);
            v386 = vorrq_s8(v414, v386);
            v384 = vorrq_s8(v413, v384);
            v383 = vorrq_s8(v412, v383);
            v387 = vorrq_s8(v410, v387);
            v381 = vorrq_s8(v409, v381);
            v389 = vorrq_s8(v408, v389);
            v390 = vorrq_s8(v406, v390);
            v415 = vdupq_n_s64(0x10uLL);
            v380 = vaddq_s64(v380, v415);
            v388 = vaddq_s64(v388, v415);
            v391 = vaddq_s64(v391, v415);
            v379 = vaddq_s64(v379, v415);
            v378 = vaddq_s64(v378, v415);
            v377 = vaddq_s64(v377, v415);
            v376 = vaddq_s64(v376, v415);
            v375 = vaddq_s64(v375, v415);
            v382 -= 16;
          }
          while (v382);
          v416 = vorrq_s8(vorrq_s8(vorrq_s8(v381, v386), vorrq_s8(v384, v389)), vorrq_s8(vorrq_s8(v383, v387), vorrq_s8(v385, v390)));
          *(int8x8_t *)v416.i8 = vorr_s8(*(int8x8_t *)v416.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v416, v416, 8uLL));
          *v11 = *(int8x8_t *)v416.i8;
          v365 = v416.i64[0];
          if ((v360 & 0xF) == 0)
            goto LABEL_284;
          if ((v360 & 0xF) < 8uLL)
            goto LABEL_280;
        }
        else
        {
          v365 = 0;
          v366 = 0;
        }
        v417 = vdupq_n_s64(v366);
        v418 = vaddq_s64(v417, (int64x2_t)xmmword_1812332B0);
        v419 = (int8x16_t)v365;
        v420 = v366 + v358;
        v421 = v366 + (v360 & 7);
        v366 = v363 - (v360 & 7);
        v422 = vaddq_s64(v417, (int64x2_t)xmmword_181267BE0);
        v423 = vaddq_s64(v417, (int64x2_t)xmmword_181233290);
        v424 = vaddq_s64(v417, (int64x2_t)xmmword_181233120);
        v425 = 0uLL;
        v426 = (uint8x8_t *)(v361 + v420);
        v427 = v421 - v363;
        v428 = 0uLL;
        v429 = 0uLL;
        do
        {
          v430 = *v426++;
          v431 = vmovl_u8(v430);
          v432 = vmovl_high_u16(v431);
          v433.i64[0] = v432.u32[2];
          v433.i64[1] = v432.u32[3];
          v434 = v433;
          v433.i64[0] = v432.u32[0];
          v433.i64[1] = v432.u32[1];
          v435 = v433;
          v436 = vmovl_u16(*(uint16x4_t *)v431.i8);
          v433.i64[0] = v436.u32[2];
          v433.i64[1] = v436.u32[3];
          v437 = v433;
          v433.i64[0] = v436.u32[0];
          v433.i64[1] = v436.u32[1];
          v438 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
          v429 = vorrq_s8((int8x16_t)vshlq_u64(v434, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v418, 3uLL), v438)), v429);
          v428 = vorrq_s8((int8x16_t)vshlq_u64(v435, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v422, 3uLL), v438)), v428);
          v425 = vorrq_s8((int8x16_t)vshlq_u64(v437, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v423, 3uLL), v438)), v425);
          v439 = vdupq_n_s64(8uLL);
          v419 = vorrq_s8((int8x16_t)vshlq_u64(v433, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v424, 3uLL), v438)), v419);
          v422 = vaddq_s64(v422, v439);
          v423 = vaddq_s64(v423, v439);
          v424 = vaddq_s64(v424, v439);
          v418 = vaddq_s64(v418, v439);
          v427 += 8;
        }
        while (v427);
        v440 = vorrq_s8(vorrq_s8(v419, v428), vorrq_s8(v425, v429));
        *(int8x8_t *)v440.i8 = vorr_s8(*(int8x8_t *)v440.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v440, v440, 8uLL));
        *v11 = *(int8x8_t *)v440.i8;
        v365 = v440.i64[0];
        if ((v360 & 7) != 0)
          goto LABEL_280;
LABEL_284:
        v371 = 4 - v350;
        *v10 = v358 + v360;
        v372 = 8 * v360;
        *v9 = 8 * v360;
        v373 = 8 * v360 - (4 - v350);
        if (v372 < 4 - v350)
        {
          v521 = std::generic_category();
          v681 = 0;
          v682 = 0;
          v683 = 0;
          LODWORD(v690) = 0;
          v693 = 0;
          v694 = 0;
          v695 = 1;
          v691 = 0;
          v692 = 0;
          *((_QWORD *)&v690 + 1) = 0;
          v689 = &unk_1E0E22B10;
          v696 = &v681;
          llvm::raw_ostream::SetBufferAndMode((uint64_t)&v689, 0, 0, 0);
          v700 = (char *)&unk_1E0E20320;
          v701 = "Unexpected end of file reading %u of %u bits";
          LODWORD(v702) = *v9;
          HIDWORD(v702) = v371;
LABEL_348:
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v689, (uint64_t)&v700);
          v525 = (const char *)v696;
          v309 = (const char *)operator new(0x38uLL);
          LOWORD(v704) = 260;
          v700 = (char *)v525;
          llvm::StringError::StringError((uint64_t)v309, (llvm::Twine *)&v700, 5, (uint64_t)v521);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v689);
          if (SHIBYTE(v683) < 0)
            operator delete(v681);
          goto LABEL_314;
        }
        v349 = v365 >> v371;
        *v11 = (int8x8_t)(v365 >> v371);
        *v9 = v373;
        v374 = (v365 << v350) & 0xF | v357;
        v350 = v373;
        v355 += 3;
        if ((v374 & 8) == 0)
          goto LABEL_257;
      }
    }
LABEL_313:
    this = v677;
LABEL_314:
    ;
  }
  while (!v309);
LABEL_390:
  *(_QWORD *)this = v309;
LABEL_391:
  v667 = v697;
  v668 = (unint64_t)v675;
  if (v697 != v699)
LABEL_392:
    free(v667);
LABEL_393:
  if (!*(_QWORD *)this)
  {
    *v10 = (v668 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *v9 = 0;
    if ((v668 & 0x3F) != 0 && (llvm::SimpleBitstreamCursor::Read(v6, v668 & 0x3F, (uint64_t)&v697), (v698 & 1) != 0))
    {
      v669 = v697;
      *(_QWORD *)this = v697;
      if (!v669)
        *(_QWORD *)this = 0;
    }
    else
    {
      *(_QWORD *)this = 0;
    }
  }
}

void `anonymous namespace'::BitcodeReader::parseUseLists(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  _anonymous_namespace_::BitcodeReader *v3;
  llvm::SimpleBitstreamCursor *v4;
  unsigned int *v5;
  unint64_t *v6;
  int8x8_t *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  int8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  char v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  int8x8_t v34;
  unsigned int v35;
  unint64_t v36;
  const char *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  int8x8_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  uint64_t v47;
  int8x8_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  void *v53;
  unsigned int v54;
  int v55;
  void *v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  unsigned int v69;
  int8x8_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int8x8_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int8x16_t v97;
  unint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int64x2_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int64x2_t v107;
  uint8x16_t v108;
  uint16x8_t v109;
  uint16x8_t v110;
  uint32x4_t v111;
  uint32x4_t v112;
  int8x16_t v113;
  uint64x2_t v114;
  uint64x2_t v115;
  uint64x2_t v116;
  uint64x2_t v117;
  uint64x2_t v118;
  uint64x2_t v119;
  uint64x2_t v120;
  uint64x2_t v121;
  int8x16_t v122;
  uint32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  uint32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int64x2_t v131;
  int8x16_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int8x16_t v135;
  uint64_t v136;
  unint64_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int8x16_t v141;
  uint8x8_t *v142;
  unint64_t v143;
  int8x16_t v144;
  int8x16_t v145;
  uint8x8_t v146;
  uint16x8_t v147;
  uint32x4_t v148;
  uint64x2_t v149;
  uint64x2_t v150;
  uint64x2_t v151;
  uint32x4_t v152;
  uint64x2_t v153;
  int8x16_t v154;
  int64x2_t v155;
  int8x16_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int *v161;
  unint64_t v162;
  unint64_t v163;
  int8x8_t v164;
  unint64_t v165;
  uint64_t v166;
  unsigned __int8 *v167;
  unsigned int v168;
  unsigned int v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int64x2_t v179;
  unint64_t v180;
  int64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  uint8x16_t v191;
  uint16x8_t v192;
  uint16x8_t v193;
  uint32x4_t v194;
  uint32x4_t v195;
  int8x16_t v196;
  uint64x2_t v197;
  uint64x2_t v198;
  uint64x2_t v199;
  uint64x2_t v200;
  uint64x2_t v201;
  uint64x2_t v202;
  uint64x2_t v203;
  uint64x2_t v204;
  int8x16_t v205;
  uint32x4_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  uint32x4_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int64x2_t v214;
  int8x16_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int8x16_t v218;
  uint64_t v219;
  unint64_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int8x16_t v224;
  uint8x8_t *v225;
  unint64_t v226;
  int8x16_t v227;
  int8x16_t v228;
  uint8x8_t v229;
  uint16x8_t v230;
  uint32x4_t v231;
  uint64x2_t v232;
  uint64x2_t v233;
  uint64x2_t v234;
  uint32x4_t v235;
  uint64x2_t v236;
  int8x16_t v237;
  int64x2_t v238;
  int8x16_t v239;
  BOOL v240;
  unint64_t *v241;
  const std::error_category *v242;
  void **v243;
  const std::error_category *v244;
  void **v245;
  BOOL v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  int v255;
  _QWORD *v256;
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  _QWORD *v262;
  int v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  void **v272;
  void **v273;
  int v274;
  _QWORD *v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  _QWORD *v281;
  int v282;
  int v283;
  int v284;
  int v285;
  uint64_t v286;
  void **v287;
  int v288;
  int v289;
  uint64_t *v290;
  uint64_t v291;
  void *v292;
  int64x2_t v293;
  int64x2_t v294;
  int64x2_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int64x2_t v298;
  unint64_t v299;
  int64x2_t v300;
  int64x2_t v301;
  int64x2_t v302;
  int64x2_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  int8x16_t v308;
  int8x16_t v309;
  uint8x16_t v310;
  uint16x8_t v311;
  uint16x8_t v312;
  uint32x4_t v313;
  uint32x4_t v314;
  int8x16_t v315;
  uint64x2_t v316;
  uint64x2_t v317;
  uint64x2_t v318;
  uint64x2_t v319;
  uint64x2_t v320;
  uint64x2_t v321;
  uint64x2_t v322;
  uint64x2_t v323;
  int8x16_t v324;
  uint32x4_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  uint32x4_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int64x2_t v333;
  int8x16_t v334;
  int8x8_t v335;
  int64x2_t v336;
  int64x2_t v337;
  int8x16_t v338;
  unint64_t v339;
  unint64_t v340;
  int64x2_t v341;
  int64x2_t v342;
  int64x2_t v343;
  int8x16_t v344;
  uint8x8_t *v345;
  unint64_t v346;
  int8x16_t v347;
  int8x16_t v348;
  uint8x8_t v349;
  uint16x8_t v350;
  uint32x4_t v351;
  uint64x2_t v352;
  uint64x2_t v353;
  uint64x2_t v354;
  uint32x4_t v355;
  uint64x2_t v356;
  int64x2_t v357;
  int8x16_t v358;
  int8x8_t v359;
  int64x2_t v360;
  int64x2_t v361;
  int64x2_t v362;
  int64x2_t v363;
  int64x2_t v364;
  int64x2_t v365;
  int8x16_t v366;
  unint64_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  int8x16_t v372;
  int64x2_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int64x2_t v376;
  uint8x16_t v377;
  uint16x8_t v378;
  uint16x8_t v379;
  uint32x4_t v380;
  uint32x4_t v381;
  int8x16_t v382;
  uint64x2_t v383;
  uint64x2_t v384;
  uint64x2_t v385;
  uint64x2_t v386;
  uint64x2_t v387;
  uint64x2_t v388;
  uint64x2_t v389;
  uint64x2_t v390;
  int8x16_t v391;
  uint32x4_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  uint32x4_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int64x2_t v400;
  int8x16_t v401;
  int8x8_t v402;
  int64x2_t v403;
  int64x2_t v404;
  int8x16_t v405;
  uint64_t v406;
  unint64_t v407;
  int64x2_t v408;
  int64x2_t v409;
  int64x2_t v410;
  int8x16_t v411;
  uint8x8_t *v412;
  unint64_t v413;
  int8x16_t v414;
  int8x16_t v415;
  uint8x8_t v416;
  uint16x8_t v417;
  uint32x4_t v418;
  uint64x2_t v419;
  uint64x2_t v420;
  uint64x2_t v421;
  uint32x4_t v422;
  uint64x2_t v423;
  int8x16_t v424;
  int64x2_t v425;
  int8x16_t v426;
  int8x8_t v427;
  const std::error_category *v428;
  void **v429;
  void *v430;
  const std::error_category *v431;
  void **v432;
  int v433;
  llvm::Twine *v434;
  _anonymous_namespace_::BitcodeReader *v435;
  _QWORD *v436;
  int8x16_t v437;
  void *v438;
  unsigned int v439;
  const char *v440;
  llvm *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  void **v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  void *v461;
  uint64_t v462;
  _BYTE v463[512];
  void *v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  std::error_code v485;
  std::error_code v486;

  v3 = this;
  v484 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::SimpleBitstreamCursor *)(a2 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 18, (uint64_t *)this);
  if (*(_QWORD *)v3)
    return;
  v434 = (llvm::Twine *)(a2 + 8);
  v461 = v463;
  v5 = (unsigned int *)(a2 + 64);
  v6 = (unint64_t *)(a2 + 48);
  v462 = 0x4000000000;
  v7 = (int8x8_t *)(a2 + 56);
  v435 = v3;
  v436 = (_QWORD *)(a2 + 48);
  v437 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
  while (1)
  {
LABEL_4:
    v9 = *v5;
    if (*v5)
    {
      v10 = *(_DWORD *)(a2 + 68);
      v11 = *(int8x8_t *)(a2 + 56);
      if (v9 < v10)
      {
        v13 = *(_QWORD *)(a2 + 40);
        v12 = *(_QWORD *)(a2 + 48);
        v14 = v13 - v12;
        if (v13 <= v12)
          goto LABEL_286;
        goto LABEL_11;
      }
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 40);
      v12 = *(_QWORD *)(a2 + 48);
      if (v13 <= v12)
        goto LABEL_295;
      v10 = *(_DWORD *)(a2 + 68);
      if (v10)
      {
        v11 = 0;
        v14 = v13 - v12;
        if (v13 <= v12)
        {
LABEL_286:
          v428 = std::generic_category();
          v481 = 0;
          v482 = 0;
          v483 = 0;
          LODWORD(v441) = 0;
          LOBYTE(v445) = 0;
          v446 = 0;
          LODWORD(v447) = 1;
          v443 = 0;
          v444 = 0;
          v442 = 0;
          v440 = (const char *)&unk_1E0E22B10;
          v448 = &v481;
          llvm::raw_ostream::SetBufferAndMode((uint64_t)&v440, 0, 0, 0);
          *(_QWORD *)&v465 = "Unexpected end of file reading %u of %u bytes";
          v464 = &unk_1E0E203C0;
          *((_QWORD *)&v465 + 1) = *v6;
          *(_QWORD *)&v466 = v13;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v440, (uint64_t)&v464);
          v429 = v448;
          v8 = operator new(0x38uLL);
          WORD4(v466) = 260;
          v464 = v429;
          llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)&v464, 5, (uint64_t)v428);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v440);
          if ((SHIBYTE(v483) & 0x80000000) == 0)
            goto LABEL_287;
          goto LABEL_290;
        }
LABEL_11:
        v15 = *(_QWORD *)v4;
        v16 = (unsigned int *)(*(_QWORD *)v4 + v12);
        if (v13 >= v12 + 8)
        {
          v18 = *(_QWORD *)v16;
          *v7 = (int8x8_t)v18;
          v14 = 8;
        }
        else
        {
          *v7 = 0;
          if (v14)
          {
            if (v14 < 8uLL || ((unint64_t)v7 < v15 + v12 + v14 ? (v17 = v16 >= v5) : (v17 = 1), !v17))
            {
              v19 = 0;
              v18 = 0;
LABEL_33:
              v26 = v14 - v19;
              v27 = 8 * v19;
              v28 = (unsigned __int8 *)(v15 + v19 + v12);
              do
              {
                v29 = *v28++;
                v18 |= (unint64_t)v29 << (v27 & 0xF8);
                *v7 = (int8x8_t)v18;
                v27 += 8;
                --v26;
              }
              while (v26);
              goto LABEL_37;
            }
            if (v14 >= 0x10uLL)
            {
              v19 = v14 - (unint64_t)(v14 & 0xF);
              v174 = (int64x2_t)xmmword_181267BA0;
              v175 = (int64x2_t)xmmword_181267BB0;
              v176 = (int64x2_t)xmmword_181267BC0;
              v177 = 0uLL;
              v178 = 0uLL;
              v179 = (int64x2_t)xmmword_181267BD0;
              v180 = v19;
              v181 = (int64x2_t)xmmword_181233120;
              v182 = (int64x2_t)xmmword_181233290;
              v183 = (int64x2_t)xmmword_181267BE0;
              v184 = (int64x2_t)xmmword_1812332B0;
              v185 = 0uLL;
              v186 = 0uLL;
              v187 = 0uLL;
              v188 = 0uLL;
              v189 = 0uLL;
              v190 = 0uLL;
              do
              {
                v191 = *(uint8x16_t *)v16;
                v16 += 4;
                v192 = vmovl_u8(*(uint8x8_t *)v191.i8);
                v193 = vmovl_high_u8(v191);
                v194 = vmovl_u16(*(uint16x4_t *)v193.i8);
                v195 = vmovl_high_u16(v193);
                v196 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                v197 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v184, 3uLL), v196);
                v198 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v179, 3uLL), v196);
                v199 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v183, 3uLL), v196);
                v200 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v182, 3uLL), v196);
                v201 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v176, 3uLL), v196);
                v202 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v181, 3uLL), v196);
                v203 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v175, 3uLL), v196);
                v204.i64[0] = v195.u32[2];
                v204.i64[1] = v195.u32[3];
                v205 = (int8x16_t)vshlq_u64(v204, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v174, 3uLL), v196));
                v206 = vmovl_u16(*(uint16x4_t *)v192.i8);
                v204.i64[0] = v195.u32[0];
                v204.i64[1] = v195.u32[1];
                v207 = (int8x16_t)vshlq_u64(v204, v203);
                v204.i64[0] = v206.u32[0];
                v204.i64[1] = v206.u32[1];
                v208 = (int8x16_t)vshlq_u64(v204, v202);
                v204.i64[0] = v194.u32[2];
                v204.i64[1] = v194.u32[3];
                v209 = (int8x16_t)vshlq_u64(v204, v201);
                v210 = vmovl_high_u16(v192);
                v204.i64[0] = v206.u32[2];
                v204.i64[1] = v206.u32[3];
                v211 = (int8x16_t)vshlq_u64(v204, v200);
                v204.i64[0] = v210.u32[0];
                v204.i64[1] = v210.u32[1];
                v212 = (int8x16_t)vshlq_u64(v204, v199);
                v204.i64[0] = v194.u32[0];
                v204.i64[1] = v194.u32[1];
                v213 = (int8x16_t)vshlq_u64(v204, v198);
                v204.i64[0] = v210.u32[2];
                v204.i64[1] = v210.u32[3];
                v186 = vorrq_s8((int8x16_t)vshlq_u64(v204, v197), v186);
                v187 = vorrq_s8(v213, v187);
                v185 = vorrq_s8(v212, v185);
                v178 = vorrq_s8(v211, v178);
                v188 = vorrq_s8(v209, v188);
                v177 = vorrq_s8(v208, v177);
                v189 = vorrq_s8(v207, v189);
                v190 = vorrq_s8(v205, v190);
                v214 = vdupq_n_s64(0x10uLL);
                v183 = vaddq_s64(v183, v214);
                v182 = vaddq_s64(v182, v214);
                v181 = vaddq_s64(v181, v214);
                v184 = vaddq_s64(v184, v214);
                v179 = vaddq_s64(v179, v214);
                v176 = vaddq_s64(v176, v214);
                v175 = vaddq_s64(v175, v214);
                v174 = vaddq_s64(v174, v214);
                v180 -= 16;
              }
              while (v180);
              v215 = vorrq_s8(vorrq_s8(vorrq_s8(v177, v187), vorrq_s8(v185, v189)), vorrq_s8(vorrq_s8(v178, v188), vorrq_s8(v186, v190)));
              *(int8x8_t *)v215.i8 = vorr_s8(*(int8x8_t *)v215.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v215, v215, 8uLL));
              *v7 = *(int8x8_t *)v215.i8;
              v18 = v215.i64[0];
              if ((v14 & 0xF) == 0)
                goto LABEL_37;
              if ((v14 & 0xF) < 8uLL)
                goto LABEL_33;
            }
            else
            {
              v18 = 0;
              v19 = 0;
            }
            v216 = vdupq_n_s64(v19);
            v217 = vaddq_s64(v216, (int64x2_t)xmmword_1812332B0);
            v218 = (int8x16_t)v18;
            v219 = v12 + v19;
            v220 = v19 + (v14 & 7);
            v19 = v14 - (unint64_t)(v14 & 7);
            v221 = vaddq_s64(v216, (int64x2_t)xmmword_181267BE0);
            v222 = vaddq_s64(v216, (int64x2_t)xmmword_181233290);
            v223 = vaddq_s64(v216, (int64x2_t)xmmword_181233120);
            v224 = 0uLL;
            v225 = (uint8x8_t *)(v15 + v219);
            v226 = v220 - v14;
            v227 = 0uLL;
            v228 = 0uLL;
            do
            {
              v229 = *v225++;
              v230 = vmovl_u8(v229);
              v231 = vmovl_high_u16(v230);
              v232.i64[0] = v231.u32[2];
              v232.i64[1] = v231.u32[3];
              v233 = v232;
              v232.i64[0] = v231.u32[0];
              v232.i64[1] = v231.u32[1];
              v234 = v232;
              v235 = vmovl_u16(*(uint16x4_t *)v230.i8);
              v232.i64[0] = v235.u32[2];
              v232.i64[1] = v235.u32[3];
              v236 = v232;
              v232.i64[0] = v235.u32[0];
              v232.i64[1] = v235.u32[1];
              v237 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
              v228 = vorrq_s8((int8x16_t)vshlq_u64(v233, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v217, 3uLL), v237)), v228);
              v227 = vorrq_s8((int8x16_t)vshlq_u64(v234, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v221, 3uLL), v237)), v227);
              v224 = vorrq_s8((int8x16_t)vshlq_u64(v236, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v222, 3uLL), v237)), v224);
              v238 = vdupq_n_s64(8uLL);
              v218 = vorrq_s8((int8x16_t)vshlq_u64(v232, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v223, 3uLL), v237)), v218);
              v221 = vaddq_s64(v221, v238);
              v222 = vaddq_s64(v222, v238);
              v223 = vaddq_s64(v223, v238);
              v217 = vaddq_s64(v217, v238);
              v226 += 8;
            }
            while (v226);
            v239 = vorrq_s8(vorrq_s8(v218, v227), vorrq_s8(v224, v228));
            *(int8x8_t *)v239.i8 = vorr_s8(*(int8x8_t *)v239.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL));
            *v7 = *(int8x8_t *)v239.i8;
            v18 = v239.i64[0];
            if ((v14 & 7) == 0)
              goto LABEL_37;
            goto LABEL_33;
          }
          v18 = 0;
        }
LABEL_37:
        v30 = v10 - v9;
        *v6 = v12 + v14;
        *v5 = 8 * v14;
        v31 = 8 * v14 - (v10 - v9);
        if (8 * v14 >= v30)
        {
          *v7 = (int8x8_t)(v18 >> v30);
          *v5 = v31;
          v32 = (v18 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v30)) << v9;
          v20 = v32 | *(_QWORD *)&v11;
          if ((v32 | v11.i32[0]) != 1)
            goto LABEL_39;
LABEL_24:
          llvm::SimpleBitstreamCursor::ReadVBR(v4, 8u, (uint64_t)&v440);
          if ((v441 & 1) != 0)
          {
            *(_QWORD *)v3 = v440;
            goto LABEL_298;
          }
          v33 = *v5;
          if (*v5 >= 4)
          {
            v47 = *(_QWORD *)v7 & 0xFLL;
            *v7 = (int8x8_t)(*(unint64_t *)v7 >> 4);
            *v5 = v33 - 4;
            v6 = (unint64_t *)(a2 + 48);
            if ((v47 & 8) == 0)
              goto LABEL_91;
LABEL_93:
            v73 = 0;
            v74 = *v5;
            while (1)
            {
              while (1)
              {
                if (v73 >= 0x1D)
                {
                  *(_QWORD *)&v485.__val_ = std::generic_category();
                  v485.__cat_ = (const std::error_category *)"Unterminated VBR";
                  llvm::createStringError((llvm *)0x5C, v485, &v438);
                  v8 = v438;
                  if (!v438)
                    goto LABEL_4;
                  goto LABEL_287;
                }
                if (v74 < 4)
                  break;
                v75 = *(_QWORD *)v7 & 0xFLL;
                *v7 = (int8x8_t)(*(unint64_t *)v7 >> 4);
                *v5 = v74 - 4;
                v74 -= 4;
                v73 += 3;
                if ((v75 & 8) == 0)
                  goto LABEL_91;
              }
              if (v74)
              {
                v76 = *v7;
                v78 = *(_QWORD *)(a2 + 40);
                v77 = *(_QWORD *)(a2 + 48);
                v79 = v78 - v77;
                if (v78 <= v77)
                  goto LABEL_166;
              }
              else
              {
                v76 = 0;
                v78 = *(_QWORD *)(a2 + 40);
                v77 = *(_QWORD *)(a2 + 48);
                v79 = v78 - v77;
                if (v78 <= v77)
                {
LABEL_166:
                  v241 = v6;
                  v242 = std::generic_category();
                  v481 = 0;
                  v482 = 0;
                  v483 = 0;
                  LODWORD(v441) = 0;
                  LOBYTE(v445) = 0;
                  v446 = 0;
                  LODWORD(v447) = 1;
                  v443 = 0;
                  v444 = 0;
                  v442 = 0;
                  v440 = (const char *)&unk_1E0E22B10;
                  v448 = &v481;
                  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v440, 0, 0, 0);
                  *(_QWORD *)&v465 = "Unexpected end of file reading %u of %u bytes";
                  v464 = &unk_1E0E203C0;
                  *((_QWORD *)&v465 + 1) = *v241;
                  *(_QWORD *)&v466 = v78;
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v440, (uint64_t)&v464);
                  v243 = v448;
                  v8 = operator new(0x38uLL);
                  WORD4(v466) = 260;
                  v464 = v243;
                  llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)&v464, 5, (uint64_t)v242);
                  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v440);
                  if (SHIBYTE(v483) < 0)
                    operator delete(v481);
                  v6 = (unint64_t *)(a2 + 48);
                  if (!v8)
                    goto LABEL_4;
                  goto LABEL_287;
                }
              }
              v80 = *(_QWORD *)v4;
              v81 = (unsigned int *)(*(_QWORD *)v4 + v77);
              if (v78 >= v77 + 8)
              {
                v83 = *(_QWORD *)v81;
                *v7 = (int8x8_t)v83;
                v79 = 8;
                goto LABEL_117;
              }
              *v7 = 0;
              if (!v79)
              {
                v83 = 0;
                goto LABEL_117;
              }
              if (v79 < 8uLL || ((unint64_t)v7 < v80 + v77 + v79 ? (v82 = v81 >= v5) : (v82 = 1), !v82))
              {
                v84 = 0;
                v83 = 0;
LABEL_113:
                v85 = v79 - v84;
                v86 = 8 * v84;
                v87 = (unsigned __int8 *)(v80 + v84 + v77);
                do
                {
                  v88 = *v87++;
                  v83 |= (unint64_t)v88 << (v86 & 0xF8);
                  *v7 = (int8x8_t)v83;
                  v86 += 8;
                  --v85;
                }
                while (v85);
                goto LABEL_117;
              }
              if (v79 >= 0x10uLL)
              {
                v84 = v79 - (unint64_t)(v79 & 0xF);
                v91 = (int64x2_t)xmmword_181267BA0;
                v92 = (int64x2_t)xmmword_181267BB0;
                v93 = (int64x2_t)xmmword_181267BC0;
                v94 = (int64x2_t)xmmword_181267BD0;
                v95 = (int64x2_t)xmmword_1812332B0;
                v96 = (int64x2_t)xmmword_181267BE0;
                v97 = 0uLL;
                v98 = v84;
                v99 = 0uLL;
                v100 = 0uLL;
                v101 = 0uLL;
                v102 = 0uLL;
                v103 = 0uLL;
                v104 = (int64x2_t)xmmword_181233290;
                v105 = 0uLL;
                v106 = 0uLL;
                v107 = (int64x2_t)xmmword_181233120;
                do
                {
                  v108 = *(uint8x16_t *)v81;
                  v81 += 4;
                  v109 = vmovl_u8(*(uint8x8_t *)v108.i8);
                  v110 = vmovl_high_u8(v108);
                  v111 = vmovl_u16(*(uint16x4_t *)v110.i8);
                  v112 = vmovl_high_u16(v110);
                  v113 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                  v114 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v95, 3uLL), v113);
                  v115 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v94, 3uLL), v113);
                  v116 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v96, 3uLL), v113);
                  v117 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v104, 3uLL), v113);
                  v118 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v93, 3uLL), v113);
                  v119 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v107, 3uLL), v113);
                  v120 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v92, 3uLL), v113);
                  v121.i64[0] = v112.u32[2];
                  v121.i64[1] = v112.u32[3];
                  v122 = (int8x16_t)vshlq_u64(v121, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v91, 3uLL), v113));
                  v123 = vmovl_u16(*(uint16x4_t *)v109.i8);
                  v121.i64[0] = v112.u32[0];
                  v121.i64[1] = v112.u32[1];
                  v124 = (int8x16_t)vshlq_u64(v121, v120);
                  v121.i64[0] = v123.u32[0];
                  v121.i64[1] = v123.u32[1];
                  v125 = (int8x16_t)vshlq_u64(v121, v119);
                  v121.i64[0] = v111.u32[2];
                  v121.i64[1] = v111.u32[3];
                  v126 = (int8x16_t)vshlq_u64(v121, v118);
                  v127 = vmovl_high_u16(v109);
                  v121.i64[0] = v123.u32[2];
                  v121.i64[1] = v123.u32[3];
                  v128 = (int8x16_t)vshlq_u64(v121, v117);
                  v121.i64[0] = v127.u32[0];
                  v121.i64[1] = v127.u32[1];
                  v129 = (int8x16_t)vshlq_u64(v121, v116);
                  v121.i64[0] = v111.u32[0];
                  v121.i64[1] = v111.u32[1];
                  v130 = (int8x16_t)vshlq_u64(v121, v115);
                  v121.i64[0] = v127.u32[2];
                  v121.i64[1] = v127.u32[3];
                  v101 = vorrq_s8((int8x16_t)vshlq_u64(v121, v114), v101);
                  v102 = vorrq_s8(v130, v102);
                  v100 = vorrq_s8(v129, v100);
                  v99 = vorrq_s8(v128, v99);
                  v103 = vorrq_s8(v126, v103);
                  v97 = vorrq_s8(v125, v97);
                  v105 = vorrq_s8(v124, v105);
                  v106 = vorrq_s8(v122, v106);
                  v131 = vdupq_n_s64(0x10uLL);
                  v96 = vaddq_s64(v96, v131);
                  v104 = vaddq_s64(v104, v131);
                  v107 = vaddq_s64(v107, v131);
                  v95 = vaddq_s64(v95, v131);
                  v94 = vaddq_s64(v94, v131);
                  v93 = vaddq_s64(v93, v131);
                  v92 = vaddq_s64(v92, v131);
                  v91 = vaddq_s64(v91, v131);
                  v98 -= 16;
                }
                while (v98);
                v132 = vorrq_s8(vorrq_s8(vorrq_s8(v97, v102), vorrq_s8(v100, v105)), vorrq_s8(vorrq_s8(v99, v103), vorrq_s8(v101, v106)));
                *(int8x8_t *)v132.i8 = vorr_s8(*(int8x8_t *)v132.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL));
                *v7 = *(int8x8_t *)v132.i8;
                v83 = v132.i64[0];
                if ((v79 & 0xF) == 0)
                  goto LABEL_117;
                if ((v79 & 0xF) < 8uLL)
                  goto LABEL_113;
              }
              else
              {
                v83 = 0;
                v84 = 0;
              }
              v133 = vdupq_n_s64(v84);
              v134 = vaddq_s64(v133, (int64x2_t)xmmword_1812332B0);
              v135 = (int8x16_t)v83;
              v136 = v84 + v77;
              v137 = v84 + (v79 & 7);
              v84 = v79 - (unint64_t)(v79 & 7);
              v138 = vaddq_s64(v133, (int64x2_t)xmmword_181267BE0);
              v139 = vaddq_s64(v133, (int64x2_t)xmmword_181233290);
              v140 = vaddq_s64(v133, (int64x2_t)xmmword_181233120);
              v141 = 0uLL;
              v142 = (uint8x8_t *)(v80 + v136);
              v143 = v137 - v79;
              v144 = 0uLL;
              v145 = 0uLL;
              do
              {
                v146 = *v142++;
                v147 = vmovl_u8(v146);
                v148 = vmovl_high_u16(v147);
                v149.i64[0] = v148.u32[2];
                v149.i64[1] = v148.u32[3];
                v150 = v149;
                v149.i64[0] = v148.u32[0];
                v149.i64[1] = v148.u32[1];
                v151 = v149;
                v152 = vmovl_u16(*(uint16x4_t *)v147.i8);
                v149.i64[0] = v152.u32[2];
                v149.i64[1] = v152.u32[3];
                v153 = v149;
                v149.i64[0] = v152.u32[0];
                v149.i64[1] = v152.u32[1];
                v154 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                v145 = vorrq_s8((int8x16_t)vshlq_u64(v150, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v134, 3uLL), v154)), v145);
                v144 = vorrq_s8((int8x16_t)vshlq_u64(v151, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v138, 3uLL), v154)), v144);
                v141 = vorrq_s8((int8x16_t)vshlq_u64(v153, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v139, 3uLL), v154)), v141);
                v155 = vdupq_n_s64(8uLL);
                v135 = vorrq_s8((int8x16_t)vshlq_u64(v149, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v140, 3uLL), v154)), v135);
                v138 = vaddq_s64(v138, v155);
                v139 = vaddq_s64(v139, v155);
                v140 = vaddq_s64(v140, v155);
                v134 = vaddq_s64(v134, v155);
                v143 += 8;
              }
              while (v143);
              v156 = vorrq_s8(vorrq_s8(v135, v144), vorrq_s8(v141, v145));
              *(int8x8_t *)v156.i8 = vorr_s8(*(int8x8_t *)v156.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL));
              *v7 = *(int8x8_t *)v156.i8;
              v83 = v156.i64[0];
              if ((v79 & 7) != 0)
                goto LABEL_113;
LABEL_117:
              v89 = 4 - v74;
              *v6 = v77 + v79;
              *v5 = 8 * v79;
              if (8 * v79 < 4 - v74)
              {
                v244 = std::generic_category();
                v481 = 0;
                v482 = 0;
                v483 = 0;
                LODWORD(v441) = 0;
                LOBYTE(v445) = 0;
                v446 = 0;
                LODWORD(v447) = 1;
                v443 = 0;
                v444 = 0;
                v442 = 0;
                v440 = (const char *)&unk_1E0E22B10;
                v448 = &v481;
                llvm::raw_ostream::SetBufferAndMode((uint64_t)&v440, 0, 0, 0);
                *(_QWORD *)&v465 = "Unexpected end of file reading %u of %u bits";
                v464 = &unk_1E0E20320;
                DWORD2(v465) = *v5;
                HIDWORD(v465) = v89;
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v440, (uint64_t)&v464);
                v245 = v448;
                v8 = operator new(0x38uLL);
                WORD4(v466) = 260;
                v464 = v245;
                llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)&v464, 5, (uint64_t)v244);
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v440);
                if (SHIBYTE(v483) < 0)
                  operator delete(v481);
                v6 = (unint64_t *)(a2 + 48);
                if (!v8)
                  goto LABEL_4;
LABEL_287:
                *(_QWORD *)v3 = v8;
                v430 = v461;
                if (v461 != v463)
                  goto LABEL_299;
                return;
              }
              *v7 = (int8x8_t)(v83 >> v89);
              *v5 = 8 * v79 - (4 - v74);
              v90 = (v83 << v74) & 0xF | *(_QWORD *)&v76;
              v74 = 8 * v79 - (4 - v74);
              v73 += 3;
              if ((v90 & 8) == 0)
                goto LABEL_91;
            }
          }
          if (v33)
          {
            v34 = *v7;
            v35 = 4 - v33;
            v439 = 4 - v33;
            v37 = *(const char **)(a2 + 40);
            v36 = *(_QWORD *)(a2 + 48);
            v38 = (_DWORD)v37 - v36;
            if ((unint64_t)v37 > v36)
              goto LABEL_45;
          }
          else
          {
            v34 = 0;
            v35 = 4;
            v439 = 4;
            v37 = *(const char **)(a2 + 40);
            v36 = *(_QWORD *)(a2 + 48);
            v38 = (_DWORD)v37 - v36;
            if ((unint64_t)v37 > v36)
            {
LABEL_45:
              v39 = *(_QWORD *)v4;
              v40 = (unsigned int *)(*(_QWORD *)v4 + v36);
              if ((unint64_t)v37 >= v36 + 8)
              {
                *v7 = *(int8x8_t *)v40;
                v38 = 8;
                goto LABEL_86;
              }
              *v7 = 0;
              if (!v38)
                goto LABEL_86;
              if (v38 < 8uLL || (unint64_t)v7 < v39 + v36 + v38 && v40 < v5)
              {
                v41 = 0;
                v42 = 0;
                goto LABEL_51;
              }
              if (v38 >= 0x10uLL)
              {
                v41 = v38 - (unint64_t)(v38 & 0xF);
                v293 = (int64x2_t)xmmword_1812332B0;
                v294 = (int64x2_t)xmmword_181267BE0;
                v295 = (int64x2_t)xmmword_181233290;
                v296 = 0uLL;
                v297 = 0uLL;
                v298 = (int64x2_t)xmmword_181233120;
                v299 = v41;
                v300 = (int64x2_t)xmmword_181267BD0;
                v301 = (int64x2_t)xmmword_181267BC0;
                v302 = (int64x2_t)xmmword_181267BB0;
                v303 = (int64x2_t)xmmword_181267BA0;
                v304 = 0uLL;
                v305 = 0uLL;
                v306 = 0uLL;
                v307 = 0uLL;
                v308 = 0uLL;
                v309 = 0uLL;
                do
                {
                  v310 = *(uint8x16_t *)v40;
                  v40 += 4;
                  v311 = vmovl_u8(*(uint8x8_t *)v310.i8);
                  v312 = vmovl_high_u8(v310);
                  v313 = vmovl_u16(*(uint16x4_t *)v312.i8);
                  v314 = vmovl_high_u16(v312);
                  v315 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                  v316 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v293, 3uLL), v315);
                  v317 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v300, 3uLL), v315);
                  v318 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v294, 3uLL), v315);
                  v319 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v295, 3uLL), v315);
                  v320 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v301, 3uLL), v315);
                  v321 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v298, 3uLL), v315);
                  v322 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v302, 3uLL), v315);
                  v323.i64[0] = v314.u32[2];
                  v323.i64[1] = v314.u32[3];
                  v324 = (int8x16_t)vshlq_u64(v323, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v303, 3uLL), v315));
                  v325 = vmovl_u16(*(uint16x4_t *)v311.i8);
                  v323.i64[0] = v314.u32[0];
                  v323.i64[1] = v314.u32[1];
                  v326 = (int8x16_t)vshlq_u64(v323, v322);
                  v323.i64[0] = v325.u32[0];
                  v323.i64[1] = v325.u32[1];
                  v327 = (int8x16_t)vshlq_u64(v323, v321);
                  v323.i64[0] = v313.u32[2];
                  v323.i64[1] = v313.u32[3];
                  v328 = (int8x16_t)vshlq_u64(v323, v320);
                  v329 = vmovl_high_u16(v311);
                  v323.i64[0] = v325.u32[2];
                  v323.i64[1] = v325.u32[3];
                  v330 = (int8x16_t)vshlq_u64(v323, v319);
                  v323.i64[0] = v329.u32[0];
                  v323.i64[1] = v329.u32[1];
                  v331 = (int8x16_t)vshlq_u64(v323, v318);
                  v323.i64[0] = v313.u32[0];
                  v323.i64[1] = v313.u32[1];
                  v332 = (int8x16_t)vshlq_u64(v323, v317);
                  v323.i64[0] = v329.u32[2];
                  v323.i64[1] = v329.u32[3];
                  v305 = vorrq_s8((int8x16_t)vshlq_u64(v323, v316), v305);
                  v306 = vorrq_s8(v332, v306);
                  v304 = vorrq_s8(v331, v304);
                  v297 = vorrq_s8(v330, v297);
                  v307 = vorrq_s8(v328, v307);
                  v296 = vorrq_s8(v327, v296);
                  v308 = vorrq_s8(v326, v308);
                  v309 = vorrq_s8(v324, v309);
                  v333 = vdupq_n_s64(0x10uLL);
                  v294 = vaddq_s64(v294, v333);
                  v295 = vaddq_s64(v295, v333);
                  v298 = vaddq_s64(v298, v333);
                  v293 = vaddq_s64(v293, v333);
                  v300 = vaddq_s64(v300, v333);
                  v301 = vaddq_s64(v301, v333);
                  v302 = vaddq_s64(v302, v333);
                  v303 = vaddq_s64(v303, v333);
                  v299 -= 16;
                }
                while (v299);
                v334 = vorrq_s8(vorrq_s8(vorrq_s8(v296, v306), vorrq_s8(v304, v308)), vorrq_s8(vorrq_s8(v297, v307), vorrq_s8(v305, v309)));
                v335 = vorr_s8(*(int8x8_t *)v334.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v334, v334, 8uLL));
                *v7 = v335;
                if ((v38 & 0xF) == 0)
                  goto LABEL_86;
                v42 = v335;
                if ((v38 & 0xF) < 8uLL)
                  goto LABEL_51;
              }
              else
              {
                v42 = 0;
                v41 = 0;
              }
              v336 = vdupq_n_s64(v41);
              v337 = vaddq_s64(v336, (int64x2_t)xmmword_1812332B0);
              v338 = (int8x16_t)(unint64_t)v42;
              v339 = v41 + v36;
              v340 = v41 + (v38 & 7);
              v41 = v38 - (unint64_t)(v38 & 7);
              v341 = vaddq_s64(v336, (int64x2_t)xmmword_181267BE0);
              v342 = vaddq_s64(v336, (int64x2_t)xmmword_181233290);
              v343 = vaddq_s64(v336, (int64x2_t)xmmword_181233120);
              v344 = 0uLL;
              v345 = (uint8x8_t *)(v39 + v339);
              v346 = v340 - v38;
              v347 = 0uLL;
              v348 = 0uLL;
              do
              {
                v349 = *v345++;
                v350 = vmovl_u8(v349);
                v351 = vmovl_high_u16(v350);
                v352.i64[0] = v351.u32[2];
                v352.i64[1] = v351.u32[3];
                v353 = v352;
                v352.i64[0] = v351.u32[0];
                v352.i64[1] = v351.u32[1];
                v354 = v352;
                v355 = vmovl_u16(*(uint16x4_t *)v350.i8);
                v352.i64[0] = v355.u32[2];
                v352.i64[1] = v355.u32[3];
                v356 = v352;
                v352.i64[0] = v355.u32[0];
                v352.i64[1] = v355.u32[1];
                v348 = vorrq_s8((int8x16_t)vshlq_u64(v353, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v337, 3uLL), v437)), v348);
                v347 = vorrq_s8((int8x16_t)vshlq_u64(v354, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v341, 3uLL), v437)), v347);
                v344 = vorrq_s8((int8x16_t)vshlq_u64(v356, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v342, 3uLL), v437)), v344);
                v357 = vdupq_n_s64(8uLL);
                v338 = vorrq_s8((int8x16_t)vshlq_u64(v352, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v343, 3uLL), v437)), v338);
                v341 = vaddq_s64(v341, v357);
                v342 = vaddq_s64(v342, v357);
                v343 = vaddq_s64(v343, v357);
                v337 = vaddq_s64(v337, v357);
                v346 += 8;
              }
              while (v346);
              v358 = vorrq_s8(vorrq_s8(v338, v347), vorrq_s8(v344, v348));
              v359 = vorr_s8(*(int8x8_t *)v358.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v358, v358, 8uLL));
              *v7 = v359;
              if ((v38 & 7) != 0)
              {
                v42 = v359;
LABEL_51:
                v43 = v38 - v41;
                v44 = 8 * v41;
                v45 = (unsigned __int8 *)(v39 + v41 + v36);
                do
                {
                  v46 = *v45++;
                  *(_QWORD *)&v42 |= (unint64_t)v46 << (v44 & 0xF8);
                  *v7 = v42;
                  v44 += 8;
                  --v43;
                }
                while (v43);
              }
LABEL_86:
              *v436 = v36 + v38;
              *v5 = 8 * v38;
              v69 = 8 * v38 - v35;
              if (8 * v38 < v35)
              {
LABEL_87:
                llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)(a2 + 64), (int *)&v439, (uint64_t *)&v481);
                v8 = v481;
                v3 = v435;
                v6 = (unint64_t *)(a2 + 48);
                if (!v481)
                  continue;
                goto LABEL_287;
              }
LABEL_90:
              v70 = *v7;
              *v7 = (int8x8_t)(*(unint64_t *)v7 >> v35);
              *v5 = v69;
              v71 = (*(_QWORD *)&v70 << v33) & 0xFLL | *(_QWORD *)&v34;
              v3 = v435;
              v6 = (unint64_t *)(a2 + 48);
              if ((v71 & 8) == 0)
              {
LABEL_91:
                if (*v5 >= 0x20)
                {
                  v72 = *(unint64_t *)v7 >> (*(_BYTE *)v5 - 32);
                  *v7 = (int8x8_t)HIDWORD(v72);
                  *v5 = 0;
LABEL_143:
                  v171 = *(_QWORD *)(a2 + 40);
                  v170 = *(_QWORD *)(a2 + 48);
                  v172 = *(unsigned int *)(a2 + 64);
                  v173 = 8 * v170 - v172 + 32 * v72;
                  v464 = (void *)v173;
                  if ((_DWORD)v172 || v171 > v170)
                  {
                    if (v171 >= v173 >> 3)
                    {
                      *v6 = (v173 >> 3) & 0x1FFFFFFFFFFFFFF8;
                      *v5 = 0;
                      if ((v173 & 0x3F) == 0
                        || (llvm::SimpleBitstreamCursor::Read(v4, v173 & 0x3F, (uint64_t)&v440),
                            (v441 & 1) == 0)
                        || (v481 = (void *)v440) == 0)
                      {
                        v481 = 0;
                      }
                    }
                    else
                    {
                      v440 = (const char *)(8 * v170 - v172);
                      llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v464, (uint64_t *)&v440, (uint64_t *)&v481);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v486.__val_ = std::generic_category();
                    v486.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
                    llvm::createStringError((llvm *)0x5C, v486, &v481);
                  }
                  goto LABEL_173;
                }
                *(_DWORD *)(a2 + 64) = 0;
                LODWORD(v438) = 32;
                v158 = *(_QWORD *)(a2 + 40);
                v157 = *(_QWORD *)(a2 + 48);
                v159 = v158 - v157;
                if (v158 <= v157)
                {
                  v440 = *(const char **)(a2 + 40);
                  llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v6, (uint64_t *)&v440, (uint64_t *)&v464);
                  v8 = v464;
                  if (v464)
                    goto LABEL_174;
                  v169 = *v5;
                  if (*v5 <= 0x1F)
                    goto LABEL_172;
                  goto LABEL_142;
                }
                v160 = *(_QWORD *)v4;
                v161 = (unsigned int *)(*(_QWORD *)v4 + v157);
                if (v158 >= v157 + 8)
                {
                  *v7 = *(int8x8_t *)v161;
                  v159 = 8;
                  goto LABEL_171;
                }
                *v7 = 0;
                if (!v159)
                  goto LABEL_171;
                v162 = (v158 - v157);
                if (v159 < 8uLL || (unint64_t)v7 < v160 + v157 + v162 && v161 < v5)
                {
                  v163 = 0;
                  v164 = 0;
                  goto LABEL_135;
                }
                if (v162 >= 0x10)
                {
                  v163 = v162 - (v159 & 0xF);
                  v360 = (int64x2_t)xmmword_181267BA0;
                  v361 = (int64x2_t)xmmword_181267BB0;
                  v362 = (int64x2_t)xmmword_181267BC0;
                  v363 = (int64x2_t)xmmword_181267BD0;
                  v364 = (int64x2_t)xmmword_1812332B0;
                  v365 = (int64x2_t)xmmword_181267BE0;
                  v366 = 0uLL;
                  v367 = v163;
                  v368 = 0uLL;
                  v369 = 0uLL;
                  v370 = 0uLL;
                  v371 = 0uLL;
                  v372 = 0uLL;
                  v373 = (int64x2_t)xmmword_181233290;
                  v374 = 0uLL;
                  v375 = 0uLL;
                  v376 = (int64x2_t)xmmword_181233120;
                  do
                  {
                    v377 = *(uint8x16_t *)v161;
                    v161 += 4;
                    v378 = vmovl_u8(*(uint8x8_t *)v377.i8);
                    v379 = vmovl_high_u8(v377);
                    v380 = vmovl_u16(*(uint16x4_t *)v379.i8);
                    v381 = vmovl_high_u16(v379);
                    v382 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                    v383 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v364, 3uLL), v382);
                    v384 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v363, 3uLL), v382);
                    v385 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v365, 3uLL), v382);
                    v386 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v373, 3uLL), v382);
                    v387 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v362, 3uLL), v382);
                    v388 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v376, 3uLL), v382);
                    v389 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v361, 3uLL), v382);
                    v390.i64[0] = v381.u32[2];
                    v390.i64[1] = v381.u32[3];
                    v391 = (int8x16_t)vshlq_u64(v390, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v360, 3uLL), v382));
                    v392 = vmovl_u16(*(uint16x4_t *)v378.i8);
                    v390.i64[0] = v381.u32[0];
                    v390.i64[1] = v381.u32[1];
                    v393 = (int8x16_t)vshlq_u64(v390, v389);
                    v390.i64[0] = v392.u32[0];
                    v390.i64[1] = v392.u32[1];
                    v394 = (int8x16_t)vshlq_u64(v390, v388);
                    v390.i64[0] = v380.u32[2];
                    v390.i64[1] = v380.u32[3];
                    v395 = (int8x16_t)vshlq_u64(v390, v387);
                    v396 = vmovl_high_u16(v378);
                    v390.i64[0] = v392.u32[2];
                    v390.i64[1] = v392.u32[3];
                    v397 = (int8x16_t)vshlq_u64(v390, v386);
                    v390.i64[0] = v396.u32[0];
                    v390.i64[1] = v396.u32[1];
                    v398 = (int8x16_t)vshlq_u64(v390, v385);
                    v390.i64[0] = v380.u32[0];
                    v390.i64[1] = v380.u32[1];
                    v399 = (int8x16_t)vshlq_u64(v390, v384);
                    v390.i64[0] = v396.u32[2];
                    v390.i64[1] = v396.u32[3];
                    v370 = vorrq_s8((int8x16_t)vshlq_u64(v390, v383), v370);
                    v371 = vorrq_s8(v399, v371);
                    v369 = vorrq_s8(v398, v369);
                    v368 = vorrq_s8(v397, v368);
                    v372 = vorrq_s8(v395, v372);
                    v366 = vorrq_s8(v394, v366);
                    v374 = vorrq_s8(v393, v374);
                    v375 = vorrq_s8(v391, v375);
                    v400 = vdupq_n_s64(0x10uLL);
                    v365 = vaddq_s64(v365, v400);
                    v373 = vaddq_s64(v373, v400);
                    v376 = vaddq_s64(v376, v400);
                    v364 = vaddq_s64(v364, v400);
                    v363 = vaddq_s64(v363, v400);
                    v362 = vaddq_s64(v362, v400);
                    v361 = vaddq_s64(v361, v400);
                    v360 = vaddq_s64(v360, v400);
                    v367 -= 16;
                  }
                  while (v367);
                  v401 = vorrq_s8(vorrq_s8(vorrq_s8(v366, v371), vorrq_s8(v369, v374)), vorrq_s8(vorrq_s8(v368, v372), vorrq_s8(v370, v375)));
                  v402 = vorr_s8(*(int8x8_t *)v401.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v401, v401, 8uLL));
                  *v7 = v402;
                  if ((v159 & 0xF) == 0)
                    goto LABEL_171;
                  v164 = v402;
                  if ((v159 & 0xF) < 8uLL)
                    goto LABEL_135;
                }
                else
                {
                  v164 = 0;
                  v163 = 0;
                }
                v403 = vdupq_n_s64(v163);
                v404 = vaddq_s64(v403, (int64x2_t)xmmword_1812332B0);
                v405 = (int8x16_t)(unint64_t)v164;
                v406 = v163 + v157;
                v407 = v163 + (v159 & 7);
                v163 = v162 - (v159 & 7);
                v408 = vaddq_s64(v403, (int64x2_t)xmmword_181267BE0);
                v409 = vaddq_s64(v403, (int64x2_t)xmmword_181233290);
                v410 = vaddq_s64(v403, (int64x2_t)xmmword_181233120);
                v411 = 0uLL;
                v412 = (uint8x8_t *)(v160 + v406);
                v413 = v407 - v162;
                v414 = 0uLL;
                v415 = 0uLL;
                do
                {
                  v416 = *v412++;
                  v417 = vmovl_u8(v416);
                  v418 = vmovl_high_u16(v417);
                  v419.i64[0] = v418.u32[2];
                  v419.i64[1] = v418.u32[3];
                  v420 = v419;
                  v419.i64[0] = v418.u32[0];
                  v419.i64[1] = v418.u32[1];
                  v421 = v419;
                  v422 = vmovl_u16(*(uint16x4_t *)v417.i8);
                  v419.i64[0] = v422.u32[2];
                  v419.i64[1] = v422.u32[3];
                  v423 = v419;
                  v419.i64[0] = v422.u32[0];
                  v419.i64[1] = v422.u32[1];
                  v424 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                  v415 = vorrq_s8((int8x16_t)vshlq_u64(v420, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v404, 3uLL), v424)), v415);
                  v414 = vorrq_s8((int8x16_t)vshlq_u64(v421, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v408, 3uLL), v424)), v414);
                  v411 = vorrq_s8((int8x16_t)vshlq_u64(v423, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v409, 3uLL), v424)), v411);
                  v425 = vdupq_n_s64(8uLL);
                  v405 = vorrq_s8((int8x16_t)vshlq_u64(v419, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v410, 3uLL), v424)), v405);
                  v408 = vaddq_s64(v408, v425);
                  v409 = vaddq_s64(v409, v425);
                  v410 = vaddq_s64(v410, v425);
                  v404 = vaddq_s64(v404, v425);
                  v413 += 8;
                }
                while (v413);
                v426 = vorrq_s8(vorrq_s8(v405, v414), vorrq_s8(v411, v415));
                v427 = vorr_s8(*(int8x8_t *)v426.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v426, v426, 8uLL));
                *v7 = v427;
                if ((v159 & 7) != 0)
                {
                  v164 = v427;
LABEL_135:
                  v165 = v162 - v163;
                  v166 = 8 * v163;
                  v167 = (unsigned __int8 *)(v160 + v163 + v157);
                  do
                  {
                    v168 = *v167++;
                    *(_QWORD *)&v164 |= (unint64_t)v168 << (v166 & 0xF8);
                    *v7 = v164;
                    v166 += 8;
                    --v165;
                  }
                  while (v165);
                }
LABEL_171:
                *v6 = v157 + v159;
                v169 = 8 * v159;
                *v5 = v169;
                if (v169 <= 0x1F)
                {
LABEL_172:
                  llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)(a2 + 64), (int *)&v438, (uint64_t *)&v481);
LABEL_173:
                  v8 = v481;
LABEL_174:
                  if (!v8)
                    continue;
                  goto LABEL_287;
                }
LABEL_142:
                v72 = (unint64_t)*v7;
                *v7 = (int8x8_t)HIDWORD(*(unint64_t *)v7);
                *v5 = v169 - 32;
                goto LABEL_143;
              }
              goto LABEL_93;
            }
          }
          v48 = v34;
          v440 = v37;
          llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v436, (uint64_t *)&v440, (uint64_t *)&v464);
          v8 = v464;
          if (v464)
          {
            v3 = v435;
            goto LABEL_287;
          }
          v34 = v48;
          v69 = *v5 - v35;
          if (*v5 < v35)
            goto LABEL_87;
          goto LABEL_90;
        }
        v431 = std::generic_category();
        v481 = 0;
        v482 = 0;
        v483 = 0;
        LODWORD(v441) = 0;
        LOBYTE(v445) = 0;
        v446 = 0;
        LODWORD(v447) = 1;
        v443 = 0;
        v444 = 0;
        v442 = 0;
        v440 = (const char *)&unk_1E0E22B10;
        v448 = &v481;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v440, 0, 0, 0);
        *(_QWORD *)&v465 = "Unexpected end of file reading %u of %u bits";
        v464 = &unk_1E0E20320;
        DWORD2(v465) = *v5;
        HIDWORD(v465) = v30;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v440, (uint64_t)&v464);
        v432 = v448;
        v8 = operator new(0x38uLL);
        WORD4(v466) = 260;
        v464 = v432;
        llvm::StringError::StringError((uint64_t)v8, (llvm::Twine *)&v464, 5, (uint64_t)v431);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v440);
        if ((SHIBYTE(v483) & 0x80000000) == 0)
          goto LABEL_287;
LABEL_290:
        operator delete(v481);
        *(_QWORD *)v3 = v8;
        v430 = v461;
        if (v461 != v463)
          goto LABEL_299;
        return;
      }
      v11 = *v7;
    }
    v20 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v10) & *(_QWORD *)&v11;
    *v7 = (int8x8_t)(*(_QWORD *)&v11 >> v10);
    *v5 = v9 - v10;
    if ((_DWORD)v20 == 1)
      goto LABEL_24;
LABEL_39:
    if ((_DWORD)v20 == 2)
    {
      llvm::BitstreamCursor::ReadAbbrevRecord((char **)v4, (unint64_t *)&v440);
      v8 = (void *)v440;
      if (!v440)
        continue;
      goto LABEL_287;
    }
    if (!(_DWORD)v20)
      break;
    LODWORD(v462) = 0;
    llvm::BitstreamCursor::readRecord(v4, ((v20 << 32) | 3) >> 32, (uint64_t)&v461, 0, (uint64_t)&v481);
    if ((v482 & 1) != 0)
    {
      v24 = 0;
      v25 = v481;
      v481 = 0;
      *(_QWORD *)v3 = v25;
      goto LABEL_263;
    }
    if ((_DWORD)v481 == 1)
    {
      if (v462 <= 2)
        goto LABEL_84;
      v49 = *((unsigned int *)v461 + 2 * v462 - 2);
      v22 = v462 - 1;
      LODWORD(v462) = v462 - 1;
      v23 = (uint64_t *)(*(_QWORD *)(a2 + 712) + 32 * v49 + 16);
    }
    else
    {
      if ((_DWORD)v481 != 2)
        goto LABEL_262;
      if (v462 <= 2)
      {
LABEL_84:
        v440 = "Invalid record";
        LOWORD(v444) = 259;
        v24 = 0;
        goto LABEL_263;
      }
      v21 = *((unsigned int *)v461 + 2 * v462 - 2);
      v22 = v462 - 1;
      LODWORD(v462) = v462 - 1;
      v23 = (uint64_t *)(*(_QWORD *)(a2 + 1488) + 8 * v21);
    }
    v50 = *v23;
    v440 = (const char *)1;
    v441 = (llvm *)-4096;
    v443 = -4096;
    v445 = -4096;
    v447 = -4096;
    v449 = -4096;
    v450 = -4096;
    v451 = -4096;
    v452 = -4096;
    v453 = -4096;
    v454 = -4096;
    v455 = -4096;
    v456 = -4096;
    v457 = -4096;
    v458 = -4096;
    v459 = -4096;
    v460 = -4096;
    v53 = *(void **)(v50 + 8);
    v51 = (uint64_t *)(v50 + 8);
    v52 = v53;
    if (v53)
    {
      v54 = 0;
      while (1)
      {
        v61 = v54++;
        v22 = v462;
        v62 = v440;
        if (v462 < v54)
          goto LABEL_161;
        v63 = *((_QWORD *)v461 + v61);
        v464 = v52;
        if ((v440 & 1) != 0)
        {
          v55 = 16;
          v56 = &v441;
        }
        else
        {
          v55 = v442;
          if (!(_DWORD)v442)
          {
            v64 = 0;
LABEL_71:
            v59 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::InsertIntoBucket<llvm::Use const*>((uint64_t)&v440, v64, &v464);
            goto LABEL_65;
          }
          v56 = v441;
        }
        v57 = v55 - 1;
        v58 = v57 & ((v52 >> 4) ^ (v52 >> 9));
        v59 = (uint64_t)v56 + 16 * v58;
        v60 = *(_QWORD *)v59;
        if (v52 != *(void **)v59)
        {
          v65 = 0;
          v66 = 1;
          while (v60 != -4096)
          {
            if (v65)
              v67 = 0;
            else
              v67 = v60 == -8192;
            if (v67)
              v65 = v59;
            v68 = v58 + v66++;
            v58 = v68 & v57;
            v59 = (uint64_t)v56 + 16 * v58;
            v60 = *(_QWORD *)v59;
            if (v52 == *(void **)v59)
              goto LABEL_65;
          }
          if (v65)
            v64 = v65;
          else
            v64 = v59;
          goto LABEL_71;
        }
LABEL_65:
        *(_DWORD *)(v59 + 8) = v63;
        v52 = (void *)*((_QWORD *)v52 + 1);
        if (!v52)
        {
          LOBYTE(v62) = (_BYTE)v440;
          v246 = (_DWORD)v462 == v440 >> 1 && v462 >= v54;
          v6 = (unint64_t *)(a2 + 48);
          if (!v246)
            goto LABEL_165;
          goto LABEL_185;
        }
      }
    }
    v54 = 0;
    v62 = 1;
LABEL_161:
    v240 = v22 == v62 >> 1 && v22 >= v54;
    v6 = (unint64_t *)(a2 + 48);
    if (!v240)
    {
LABEL_165:
      v3 = v435;
      goto LABEL_260;
    }
LABEL_185:
    v247 = (_QWORD *)*v51;
    v3 = v435;
    if (!*v51)
      goto LABEL_260;
    v248 = v247[1];
    if (!v248)
      goto LABEL_260;
    v480 = 0;
    v478 = 0u;
    v479 = 0u;
    v476 = 0u;
    v477 = 0u;
    v474 = 0u;
    v475 = 0u;
    v472 = 0u;
    v473 = 0u;
    v470 = 0u;
    v471 = 0u;
    v468 = 0u;
    v469 = 0u;
    v466 = 0u;
    v467 = 0u;
    v465 = 0u;
    v247[1] = 0;
    v464 = v247;
    v249 = *(_QWORD *)(v248 + 8);
    if (!v249)
    {
      *v51 = v248;
      v250 = 1;
      goto LABEL_228;
    }
    v250 = 1;
    do
    {
      v252 = v248;
      v248 = v249;
      *(_QWORD *)(v252 + 8) = 0;
      if (v250)
      {
        v251 = 0;
        while (1)
        {
          v253 = (uint64_t)*(&v464 + v251);
          if (!v253)
            goto LABEL_190;
          v438 = 0;
          v254 = (uint64_t *)&v438;
          v255 = v442;
          while (v252)
          {
            if ((v440 & 1) != 0)
            {
              v257 = 16;
              v256 = &v441;
            }
            else
            {
              if (!v255)
                goto LABEL_199;
              v256 = v441;
              v257 = v255;
            }
            v258 = v257 - 1;
            v259 = (v257 - 1) & ((v252 >> 4) ^ (v252 >> 9));
            v260 = v256[2 * v259];
            if (v260 == v252)
            {
LABEL_206:
              v261 = v256[2 * v259 + 1];
              if ((v440 & 1) == 0)
                goto LABEL_207;
            }
            else
            {
              v264 = 1;
              while (v260 != -4096)
              {
                v265 = v259 + v264++;
                v259 = v265 & v258;
                v260 = v256[2 * v259];
                if (v260 == v252)
                  goto LABEL_206;
              }
              v261 = 0;
              if ((v440 & 1) == 0)
              {
LABEL_207:
                if (!v255)
                  goto LABEL_199;
                v262 = v441;
                v263 = v255;
                goto LABEL_215;
              }
            }
            v263 = 16;
            v262 = &v441;
LABEL_215:
            v266 = v263 - 1;
            v267 = (v263 - 1) & ((v253 >> 4) ^ (v253 >> 9));
            v268 = v262[2 * v267];
            if (v268 != v253)
            {
              v269 = 1;
              while (v268 != -4096)
              {
                v270 = v267 + v269++;
                v267 = v270 & v266;
                v268 = v262[2 * v267];
                if (v268 == v253)
                  goto LABEL_216;
              }
              goto LABEL_199;
            }
LABEL_216:
            if (v261 >= LODWORD(v262[2 * v267 + 1]))
            {
LABEL_199:
              *v254 = v253;
              v254 = (uint64_t *)(v253 + 8);
              v253 = *(_QWORD *)(v253 + 8);
              if (!v253)
                goto LABEL_196;
            }
            else
            {
              *v254 = v252;
              v254 = (uint64_t *)(v252 + 8);
              v252 = *(_QWORD *)(v252 + 8);
            }
          }
          v252 = v253;
LABEL_196:
          *v254 = v252;
          v252 = (uint64_t)v438;
          *(&v464 + v251++) = 0;
          if (v251 == v250)
          {
            LODWORD(v251) = v250;
            goto LABEL_190;
          }
        }
      }
      LODWORD(v251) = 0;
LABEL_190:
      if ((_DWORD)v251 == v250)
        ++v250;
      *(&v464 + v251) = (void *)v252;
      v249 = *(_QWORD *)(v248 + 8);
    }
    while (v249);
    *v51 = v248;
    if (!v250)
      goto LABEL_258;
LABEL_228:
    v271 = 0;
    while (2)
    {
      v272 = (void **)*(&v464 + v271);
      if (!v272)
        goto LABEL_231;
      v438 = 0;
      v273 = &v438;
      v274 = v442;
      while (2)
      {
        if (v248)
        {
          if ((v440 & 1) == 0)
          {
            if (v274)
            {
              v275 = v441;
              v276 = v274;
              goto LABEL_240;
            }
LABEL_234:
            *v273 = v272;
            v273 = v272 + 1;
            v272 = (void **)v272[1];
            if (!v272)
              goto LABEL_230;
            continue;
          }
          v276 = 16;
          v275 = &v441;
LABEL_240:
          v277 = v276 - 1;
          v278 = (v276 - 1) & ((v248 >> 4) ^ (v248 >> 9));
          v279 = v275[2 * v278];
          if (v279 == v248)
          {
LABEL_241:
            v280 = v275[2 * v278 + 1];
            if ((v440 & 1) == 0)
              goto LABEL_242;
LABEL_249:
            v282 = 16;
            v281 = &v441;
          }
          else
          {
            v283 = 1;
            while (v279 != -4096)
            {
              v284 = v278 + v283++;
              v278 = v284 & v277;
              v279 = v275[2 * v278];
              if (v279 == v248)
                goto LABEL_241;
            }
            v280 = 0;
            if ((v440 & 1) != 0)
              goto LABEL_249;
LABEL_242:
            if (!v274)
              goto LABEL_234;
            v281 = v441;
            v282 = v274;
          }
          v285 = v282 - 1;
          v286 = (v282 - 1) & ((v272 >> 4) ^ (v272 >> 9));
          v287 = (void **)v281[2 * v286];
          if (v287 == v272)
          {
LABEL_251:
            if (v280 < LODWORD(v281[2 * v286 + 1]))
            {
              *v273 = (void *)v248;
              v273 = (void **)(v248 + 8);
              v248 = *(_QWORD *)(v248 + 8);
              continue;
            }
          }
          else
          {
            v288 = 1;
            while (v287 != (void **)-4096)
            {
              v289 = v286 + v288++;
              v286 = v289 & v285;
              v287 = (void **)v281[2 * v286];
              if (v287 == v272)
                goto LABEL_251;
            }
          }
          goto LABEL_234;
        }
        break;
      }
      v248 = (uint64_t)v272;
LABEL_230:
      *v273 = (void *)v248;
      v248 = (uint64_t)v438;
      *v51 = (uint64_t)v438;
LABEL_231:
      if (++v271 != v250)
        continue;
      break;
    }
    if (v248)
    {
      do
      {
LABEL_258:
        v291 = *(_QWORD *)(v248 + 8);
        v290 = (uint64_t *)(v248 + 8);
        v290[1] = (uint64_t)v51;
        v51 = v290;
        v248 = v291;
      }
      while (v291);
    }
    LOBYTE(v62) = (_BYTE)v440;
LABEL_260:
    if ((v62 & 1) == 0)
      llvm::deallocate_buffer(v441, (void *)(16 * v442));
LABEL_262:
    v24 = 1;
LABEL_263:
    if ((v482 & 1) != 0)
    {
      v292 = v481;
      v481 = 0;
      if (v292)
        (*(void (**)(void *))(*(_QWORD *)v292 + 8))(v292);
    }
    if ((v24 & 1) == 0)
    {
LABEL_298:
      v430 = v461;
      if (v461 != v463)
        goto LABEL_299;
      return;
    }
  }
  if (!*(_DWORD *)(a2 + 104))
  {
LABEL_295:
    v440 = "Malformed block";
    LOWORD(v444) = 259;
    v430 = v461;
    if (v461 != v463)
      goto LABEL_299;
    return;
  }
  if (*v5 < 0x20)
  {
    v433 = 0;
  }
  else
  {
    *v7 = (int8x8_t)(*(unint64_t *)v7 >> (*(_BYTE *)v5 - 32));
    v433 = 32;
  }
  *v5 = v433;
  llvm::BitstreamCursor::popBlockScope(v4);
  *(_QWORD *)v3 = 0;
  v430 = v461;
  if (v461 != v463)
LABEL_299:
    free(v430);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    v4 = ((_DWORD)v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    result = (uint64_t *)(v2 + 32 * v4);
    v6 = *result;
    if (*result == a2)
      return result;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 32 * v4);
      if (v6 == a2)
        return (uint64_t *)(v2 + 32 * v4);
    }
  }
  return (uint64_t *)(v2 + 32 * v3);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::erase(int32x2_t *a1, _QWORD *a2)
{
  void *v4;
  int32x2_t result;

  v4 = (void *)a2[1];
  if (v4)
  {
    a2[2] = v4;
    operator delete(v4);
  }
  *a2 = -8192;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void std::vector<llvm::Function *>::push_back[abi:nn180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = v5 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      abort();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_28;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

uint64_t `anonymous namespace'::BitcodeReader::parseFunctionBody(llvm::Function *)::$_1::operator()(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v1 = **a1;
  if (!v1 || (v2 = *(_QWORD *)(v1 + 48), v2 == v1 + 48))
  {
    v4 = *(_DWORD *)a1[1];
    if (v4
      && (v5 = *(_QWORD *)(a1[2][186] + 8 * (v4 - 1))) != 0
      && (v6 = *(_QWORD *)(v5 + 48), v6 != v5 + 48))
    {
      if (v6)
        return v6 - 24;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  else if (v2)
  {
    return v2 - 24;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Instruction::setDebugLoc(uint64_t result, unsigned __int8 **a2)
{
  unsigned __int8 **v2;

  v2 = (unsigned __int8 **)(result + 48);
  if ((unsigned __int8 **)(result + 48) != a2)
  {
    if (*v2)
      result = llvm::MetadataTracking::untrack(result + 48, *v2);
    *v2 = *a2;
    if (*a2)
    {
      result = llvm::MetadataTracking::retrack((uint64_t)a2, *a2, (uint64_t)v2);
      *a2 = 0;
    }
  }
  return result;
}

_BYTE *llvm::dyn_cast_or_null<llvm::MDNode,llvm::Metadata>(_BYTE *result)
{
  if (result)
  {
    switch(*result)
    {
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
        return result;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

unsigned __int8 **llvm::DebugLoc::operator=(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (a2 != a1)
  {
    if (*a1)
      llvm::MetadataTracking::untrack((uint64_t)a1, *a1);
    *a1 = *a2;
    if (*a2)
    {
      llvm::MetadataTracking::retrack((uint64_t)a2, *a2, (uint64_t)a1);
      *a2 = 0;
    }
  }
  return a1;
}

BOOL `anonymous namespace'::BitcodeReader::getValueTypePair(uint64_t a1, uint64_t *a2, _DWORD *a3, unsigned int a4, unint64_t *a5, int *a6, llvm::BasicBlock *a7)
{
  uint64_t v7;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::BitcodeReaderValueList *v17;
  int v18;
  unsigned int v19;
  llvm::Type *v20;
  llvm::LLVMContext *v21;
  unint64_t TypeByID;
  llvm::MetadataAsValue *v23;
  unsigned __int8 *MetadataFwdRefOrLoad;
  llvm::Metadata *v25;
  unint64_t ValueFwdRef;

  v7 = *a3;
  if (*((_DWORD *)a2 + 2) == (_DWORD)v7)
    return 1;
  v13 = v7 + 1;
  v14 = *a2;
  v15 = *(_QWORD *)(*a2 + 8 * v7);
  *a3 = v7 + 1;
  if (*(_BYTE *)(a1 + 1712))
    v16 = a4 - v15;
  else
    v16 = v15;
  if (v16 < a4)
  {
    v17 = (llvm::BitcodeReaderValueList *)(a1 + 712);
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 712) + 32 * v16 + 24);
    *a6 = v18;
    v19 = v16;
    v20 = 0;
LABEL_13:
    ValueFwdRef = llvm::BitcodeReaderValueList::getValueFwdRef(v17, v19, v20, v18, a7);
    goto LABEL_14;
  }
  if (*((_DWORD *)a2 + 2) == v13)
    return 1;
  *a3 = v7 + 2;
  v21 = *(llvm::LLVMContext **)(v14 + 8 * v13);
  *a6 = (int)v21;
  v20 = (llvm::Type *)TypeByID;
  v18 = *a6;
  if (!TypeByID || *(_BYTE *)(TypeByID + 8) != 9)
  {
    v17 = (llvm::BitcodeReaderValueList *)(a1 + 712);
    v19 = v16;
    goto LABEL_13;
  }
  v23 = *(llvm::MetadataAsValue **)TypeByID;
  MetadataFwdRefOrLoad = llvm::MetadataLoader::getMetadataFwdRefOrLoad((llvm::MetadataLoader::MetadataLoaderImpl **)(a1 + 776), v16);
  ValueFwdRef = (unint64_t)llvm::MetadataAsValue::get(v23, (llvm::LLVMContext *)MetadataFwdRefOrLoad, v25);
LABEL_14:
  *a5 = ValueFwdRef;
  return ValueFwdRef == 0;
}

uint64_t getDecodedUnaryOpcode(int a1, llvm::Type *a2)
{
  int v2;
  BOOL v3;
  int v4;
  uint64_t v7;

  LOBYTE(v2) = *((_DWORD *)a2 + 2);
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  v3 = v2 < 4u || v2 == 5;
  v4 = v2 & 0xFD;
  if (v3 || v4 == 4)
  {
    if (a1)
      return 0xFFFFFFFFLL;
    return 12;
  }
  v7 = 0xFFFFFFFFLL;
  if (a1)
    return v7;
  return 0xFFFFFFFFLL;
}

BOOL llvm::isa<llvm::FPMathOperator,llvm::Instruction *>(unsigned __int16 **a1)
{
  unsigned __int16 *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  int v6;
  BOOL v7;

  v1 = *a1;
  v2 = *((unsigned __int8 *)*a1 + 16);
  v3 = v2 - 28;
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return 0;
    v3 = v1[9];
  }
  if (v3 > 0x39)
    return 0;
  if (((1 << v3) & 0x40000001255000) != 0)
    return 1;
  if (((1 << v3) & 0x380000000000000) == 0)
    return 0;
  do
  {
    v5 = *(_QWORD *)v1;
    v6 = *(unsigned __int8 *)(*(_QWORD *)v1 + 8);
    v1 = (unsigned __int16 *)(*(_QWORD *)v1 + 24);
    if (v5)
      v7 = v6 == 17;
    else
      v7 = 0;
  }
  while (v7);
  if ((v6 & 0xFE) == 0x12)
    v6 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 8);
  if (v6 < 6u && ((0x2Fu >> v6) & 1) != 0)
    return 1;
  return (v6 & 0xFD) == 4;
}

uint64_t `anonymous namespace'::BitcodeReader::popValue(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int a5, llvm::Type *a6, int a7, _QWORD *a8, llvm::BasicBlock *a9)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v13;
  unsigned int v14;
  llvm::MetadataAsValue *v15;
  unsigned __int8 *MetadataFwdRefOrLoad;
  llvm::Metadata *v17;
  unsigned __int8 *v18;
  unint64_t ValueFwdRef;

  v10 = *a4;
  if ((_DWORD)v10 == a3)
  {
    *a8 = 0;
    return 1;
  }
  v13 = *(_QWORD *)(a2 + 8 * v10);
  if (*(_BYTE *)(a1 + 1712))
    v14 = a5 - v13;
  else
    v14 = v13;
  if (a6 && *((_BYTE *)a6 + 8) == 9)
  {
    v15 = *(llvm::MetadataAsValue **)a6;
    MetadataFwdRefOrLoad = llvm::MetadataLoader::getMetadataFwdRefOrLoad((llvm::MetadataLoader::MetadataLoaderImpl **)(a1 + 776), v14);
    v18 = llvm::MetadataAsValue::get(v15, (llvm::LLVMContext *)MetadataFwdRefOrLoad, v17);
    *a8 = v18;
    if (!v18)
      return 1;
  }
  else
  {
    ValueFwdRef = llvm::BitcodeReaderValueList::getValueFwdRef((llvm::BitcodeReaderValueList *)(a1 + 712), v14, a6, a7, a9);
    *a8 = ValueFwdRef;
    if (!ValueFwdRef)
      return 1;
  }
  result = 0;
  ++*a4;
  return result;
}

uint64_t getDecodedBinaryOpcode(unsigned int a1, llvm::Type *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t result;

  v2 = *((_DWORD *)a2 + 2);
  v3 = *((_DWORD *)a2 + 2) & 0xFE;
  LOBYTE(v4) = *((_DWORD *)a2 + 2);
  if (v3 == 18)
    v4 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  if (v4 >= 6u)
  {
    if ((v4 & 0xFD) == 4)
    {
      v5 = 1;
      goto LABEL_9;
    }
LABEL_11:
    if (v3 == 18)
      v2 = *(unsigned __int8 *)(**((_QWORD **)a2 + 2) + 8);
    if (v2 != 13)
      return 0xFFFFFFFFLL;
    v5 = 0;
    goto LABEL_15;
  }
  v5 = 1;
  if (((0x2Fu >> v4) & 1) == 0 && (v4 & 0xFD) != 4)
    goto LABEL_11;
LABEL_9:
  if (a1 > 0xC)
    return 0xFFFFFFFFLL;
LABEL_15:
  switch(a1)
  {
    case 0u:
      if (v5)
        result = 14;
      else
        result = 13;
      break;
    case 1u:
      if (v5)
        result = 16;
      else
        result = 15;
      break;
    case 2u:
      if (v5)
        result = 18;
      else
        result = 17;
      break;
    case 3u:
      if (v5)
        result = 0xFFFFFFFFLL;
      else
        result = 19;
      break;
    case 4u:
      if (v5)
        result = 21;
      else
        result = 20;
      break;
    case 5u:
      if (v5)
        result = 0xFFFFFFFFLL;
      else
        result = 22;
      break;
    case 6u:
      if (v5)
        result = 24;
      else
        result = 23;
      break;
    case 7u:
      if (v5)
        result = 0xFFFFFFFFLL;
      else
        result = 25;
      break;
    case 8u:
      if (v5)
        result = 0xFFFFFFFFLL;
      else
        result = 26;
      break;
    case 9u:
      if (v5)
        result = 0xFFFFFFFFLL;
      else
        result = 27;
      break;
    case 0xAu:
      if (v5)
        result = 0xFFFFFFFFLL;
      else
        result = 28;
      break;
    case 0xBu:
      if (v5)
        result = 0xFFFFFFFFLL;
      else
        result = 29;
      break;
    case 0xCu:
      if (v5)
        result = 0xFFFFFFFFLL;
      else
        result = 30;
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t `anonymous namespace'::BitcodeReader::getTypeByID(_anonymous_namespace_::BitcodeReader *this, llvm::LLVMContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  char *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;

  v2 = a2;
  v3 = *((_QWORD *)this + 65);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 66) - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
  {
    v6 = llvm::StructType::create(*((llvm::StructType **)this + 53), a2);
    v4 = v6;
    v7 = (unint64_t *)*((_QWORD *)this + 235);
    v8 = *((_QWORD *)this + 236);
    if ((unint64_t)v7 < v8)
    {
      *v7 = v6;
      v9 = (uint64_t)(v7 + 1);
LABEL_26:
      *((_QWORD *)this + 235) = v9;
      *(_QWORD *)(*((_QWORD *)this + 65) + 8 * v2) = v4;
      return v4;
    }
    v10 = (char *)*((_QWORD *)this + 234);
    v11 = ((char *)v7 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (char *)operator new(8 * v14);
      v16 = (unint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v4;
      v9 = (uint64_t)(v16 + 1);
      v18 = (char *)((char *)v7 - v10);
      if (v7 == (unint64_t *)v10)
        goto LABEL_24;
    }
    else
    {
      v15 = 0;
      v16 = (unint64_t *)(8 * v11);
      v17 = 0;
      *(_QWORD *)(8 * v11) = v4;
      v9 = 8 * v11 + 8;
      v18 = (char *)((char *)v7 - v10);
      if (v7 == (unint64_t *)v10)
      {
LABEL_24:
        *((_QWORD *)this + 234) = v16;
        *((_QWORD *)this + 235) = v9;
        *((_QWORD *)this + 236) = v17;
        if (v7)
          operator delete(v7);
        goto LABEL_26;
      }
    }
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_32;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_32;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
    v16 = (unint64_t *)((char *)v16 - v21);
    v23 = &v15[8 * v11 - 16];
    v24 = v7 - 2;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 4;
      v25 -= 4;
    }
    while (v25);
    v7 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      do
      {
        v27 = *--v7;
        *--v16 = v27;
      }
      while (v7 != (unint64_t *)v10);
    }
    v7 = (unint64_t *)*((_QWORD *)this + 234);
    goto LABEL_24;
  }
  return v4;
}

uint64_t getDecodedCastOpcode(unsigned int a1)
{
  if (a1 >= 0xD)
    return 0xFFFFFFFFLL;
  else
    return a1 + 38;
}

llvm::Instruction *llvm::GetElementPtrInst::Create(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, const char **a5, llvm::Instruction *a6)
{
  uint64_t v12;
  llvm::Instruction *v13;
  llvm::Type *v14;

  v12 = (a4 + 1);
  v13 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x58, (int)a4 + 1);
  llvm::GetElementPtrInst::getGEPReturnType(a1, a2, (uint64_t)a3, a4);
  llvm::Instruction::Instruction(v13, v14, 34, (llvm::Instruction *)((char *)v13 - 32 * v12), v12, a6);
  *((_QWORD *)v13 + 9) = a1;
  *((_QWORD *)v13 + 10) = llvm::GetElementPtrInst::getIndexedType(a1, (uint64_t)a3, a4);
  llvm::GetElementPtrInst::init(v13, (uint64_t)a2, a3, a4, a5);
  return v13;
}

const llvm::Value **std::next[abi:nn180100]<llvm::generic_gep_type_iterator<llvm::Use const*>,0>(const llvm::Value **a1, unint64_t a2, uint64_t a3)
{
  const llvm::Value **v3;
  uint64_t v4;
  const llvm::Value **v5;
  unint64_t TypeAtIndex;
  int v7;

  v3 = a1;
  if (a3 >= 1)
  {
    v4 = a3 + 1;
    v5 = a1;
    do
    {
      while (1)
      {
        TypeAtIndex = a2 & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 4) == 0 || !TypeAtIndex)
          TypeAtIndex = llvm::StructType::getTypeAtIndex((llvm::StructType *)TypeAtIndex, *v5);
        v7 = *(unsigned __int8 *)(TypeAtIndex + 8);
        if ((!TypeAtIndex || v7 != 17) && (!TypeAtIndex || (v7 & 0xFE) != 0x12))
          break;
        a2 = *(_QWORD *)(TypeAtIndex + 24) | 4;
        v5 += 4;
        v3 += 4;
        if (--v4 <= 1)
          return v3;
      }
      if (v7 == 16)
        a2 = TypeAtIndex & 0xFFFFFFFFFFFFFFFBLL;
      else
        a2 = 0;
      v5 += 4;
      v3 += 4;
      --v4;
    }
    while (v4 > 1);
  }
  return v3;
}

uint64_t llvm::gep_type_begin(llvm *this, const llvm::User *a2)
{
  int v3;

  llvm::GEPOperator::getSourceElementType(this);
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x40000000) != 0)
    return *((_QWORD *)this - 1) + 32;
  else
    return (uint64_t)this - 32 * (v3 & 0x7FFFFFF) + 32;
}

uint64_t `anonymous namespace'::BitcodeReader::getVirtualTypeID(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char *inserted;
  int v36;
  char *v37;
  int v38;
  BOOL v39;
  int v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  unsigned int v45;
  __int128 v46;
  uint64_t v47;

  if (a4)
    v8 = *(unsigned int *)a3;
  else
    v8 = 0xFFFFFFFFLL;
  *(_QWORD *)&v46 = a2;
  *((_QWORD *)&v46 + 1) = v8;
  *(_QWORD *)&v43 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)(a1 + 568), (uint64_t)&v46, (uint64_t *)&v43)&& (_QWORD)v43 != *(_QWORD *)(a1 + 568) + 24 * *(unsigned int *)(a1 + 584))
  {
    return *(unsigned int *)(v43 + 16);
  }
  v10 = *(char **)(a1 + 528);
  v11 = *(char **)(a1 + 520);
  v12 = (v10 - v11) >> 3;
  v45 = v12;
  v13 = *(_QWORD *)(a1 + 536);
  if ((unint64_t)v10 < v13)
  {
    *(_QWORD *)v10 = a2;
    v14 = (uint64_t)(v10 + 8);
    goto LABEL_29;
  }
  v15 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    abort();
  v16 = v13 - (_QWORD)v11;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v18 = operator new(8 * v17);
    v19 = &v18[8 * v12];
    v20 = &v18[8 * v17];
    *v19 = a2;
    v14 = (uint64_t)(v19 + 1);
    v21 = (char *)(v10 - v11);
    if (v10 == v11)
      goto LABEL_27;
    goto LABEL_20;
  }
  v18 = 0;
  v19 = (_QWORD *)(8 * v12);
  v20 = 0;
  *(_QWORD *)(8 * v12) = a2;
  v14 = 8 * v12 + 8;
  v21 = (char *)(v10 - v11);
  if (v10 != v11)
  {
LABEL_20:
    v22 = (unint64_t)(v21 - 8);
    if (v22 < 0x58)
      goto LABEL_55;
    if (v10 - v18 - ((v10 - v11) & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_55;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v25 = &v10[-v24];
    v19 = (_QWORD *)((char *)v19 - v24);
    v26 = &v18[8 * v12 - 16];
    v27 = v10 - 16;
    v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 4;
    }
    while (v28);
    v10 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_55:
      do
      {
        v30 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *--v19 = v30;
      }
      while (v10 != v11);
    }
    v10 = *(char **)(a1 + 520);
  }
LABEL_27:
  *(_QWORD *)(a1 + 520) = v19;
  *(_QWORD *)(a1 + 528) = v14;
  *(_QWORD *)(a1 + 536) = v20;
  if (v10)
    operator delete(v10);
LABEL_29:
  *(_QWORD *)(a1 + 528) = v14;
  if (a4)
  {
    v31 = *(_DWORD *)(a1 + 560);
    if (v31)
    {
      v32 = *(_QWORD *)(a1 + 544);
      v33 = v31 - 1;
      v34 = (37 * (_DWORD)v12) & v33;
      inserted = (char *)(v32 + 32 * v34);
      v36 = *(_DWORD *)inserted;
      if (*(_DWORD *)inserted == (_DWORD)v12)
      {
LABEL_43:
        llvm::SmallVectorImpl<unsigned int>::insert<unsigned int const*,void>((uint64_t)(inserted + 8), *((_QWORD *)inserted + 1) + 4 * *((unsigned int *)inserted + 4), a3, &a3[4 * a4]);
        LODWORD(v12) = v45;
        goto LABEL_44;
      }
      v37 = 0;
      v38 = 1;
      while (v36 != -1)
      {
        if (v37)
          v39 = 0;
        else
          v39 = v36 == -2;
        if (v39)
          v37 = inserted;
        v40 = v34 + v38++;
        v34 = v40 & v33;
        inserted = (char *)(v32 + 32 * v34);
        v36 = *(_DWORD *)inserted;
        if (*(_DWORD *)inserted == (_DWORD)v12)
          goto LABEL_43;
      }
      if (v37)
        v41 = v37;
      else
        v41 = inserted;
    }
    else
    {
      v41 = 0;
    }
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::InsertIntoBucket<unsigned int const&>(a1 + 544, v41, &v45);
    goto LABEL_43;
  }
LABEL_44:
  v43 = v46;
  v44 = v12;
  v47 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)(a1 + 568), (uint64_t)&v43, &v47) & 1) == 0)
  {
    v42 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned int>>(a1 + 568, (uint64_t)&v43, (uint64_t)&v43, v47);
    *(_QWORD *)v42 = v43;
    *(_DWORD *)(v42 + 8) = DWORD2(v43);
    *(_DWORD *)(v42 + 16) = v44;
  }
  return v45;
}

llvm::Instruction *llvm::InsertValueInst::Create(llvm::Type **a1, uint64_t a2, void *a3, uint64_t a4, const char **a5, llvm::Instruction *a6)
{
  llvm::Instruction *v12;
  llvm::Instruction *v13;

  v12 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x68, 2u);
  v13 = llvm::Instruction::Instruction(v12, *a1, 65, (llvm::Instruction *)((char *)v12 - 64), 2, a6);
  *((_QWORD *)v13 + 9) = (char *)v13 + 88;
  *((_QWORD *)v13 + 10) = 0x400000000;
  llvm::InsertValueInst::init((uint64_t)v13, (uint64_t)a1, a2, a3, a4, a5);
  return v12;
}

llvm::Instruction *llvm::SelectInst::Create(Value *this, llvm::Type **a2, Value *a3, const char **a4, const llvm::Twine *a5, llvm::Instruction *a6, llvm::Instruction *a7)
{
  llvm::Instruction *v13;
  llvm::Instruction *v14;

  v13 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 3u);
  v14 = llvm::Instruction::Instruction(v13, *a2, 57, (llvm::Instruction *)((char *)v13 - 96), 3, a5);
  llvm::SelectInst::init((uint64_t)v14, this, (Value *)a2, a3);
  llvm::Value::setName(v13, a4);
  if (a6)
    llvm::Instruction::copyMetadata((unsigned __int8 **)v13, (uint64_t)a6, 0, 0);
  return v13;
}

uint64_t llvm::ExtractElementInst::Create(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  llvm::ExtractElementInst *v9;

  v9 = (llvm::ExtractElementInst *)llvm::User::operator new((llvm::User *)0x48, 2u);
  return llvm::ExtractElementInst::ExtractElementInst(v9, this, a2, a3, a4);
}

uint64_t llvm::InsertElementInst::Create(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  llvm::InsertElementInst *v11;

  v11 = (llvm::InsertElementInst *)llvm::User::operator new((llvm::User *)0x48, 3u);
  return llvm::InsertElementInst::InsertElementInst(v11, this, a2, a3, a4, a5);
}

_WORD *llvm::FCmpInst::FCmpInst(_WORD *a1, llvm::LLVMContext *a2, llvm::Type ***a3, uint64_t a4, const char **a5, Value *a6)
{
  __int16 v10;
  llvm::Type **v12;
  int v13;
  llvm::ScalableVectorType *Int1Ty;
  llvm::Type *v15;
  BOOL v16;
  llvm::Type *v17;

  v10 = (__int16)a2;
  v12 = *a3;
  v13 = (_DWORD)(*a3)[1] & 0xFE;
  Int1Ty = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(**a3, a2);
  v15 = Int1Ty;
  if (v12)
    v16 = v13 == 18;
  else
    v16 = 0;
  if (v16)
  {
    llvm::VectorType::get(Int1Ty, (llvm::Type *)(*((unsigned int *)v12 + 8) | ((unint64_t)(*((_BYTE *)v12 + 8) == 19) << 32)));
    v15 = v17;
  }
  return llvm::CmpInst::CmpInst(a1, v15, 54, v10, (uint64_t)a3, a4, a5, 0, a6);
}

llvm::ReturnInst *llvm::ReturnInst::Create(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::Value *a3, llvm::Instruction *a4)
{
  llvm::ReturnInst *v7;

  v7 = (llvm::ReturnInst *)llvm::User::operator new((llvm::User *)0x48, a2 != 0);
  return llvm::ReturnInst::ReturnInst(v7, this, a2, a3);
}

llvm::BranchInst *llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  llvm::BranchInst *v5;

  v5 = (llvm::BranchInst *)llvm::User::operator new((llvm::User *)0x48, 1u);
  return llvm::BranchInst::BranchInst(v5, this, a2);
}

unsigned __int8 *`anonymous namespace'::BitcodeReader::getValue(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, llvm::Type *a6, int a7, llvm::BasicBlock *a8)
{
  unsigned int v9;
  llvm::MetadataAsValue *v10;
  unsigned __int8 *MetadataFwdRefOrLoad;
  llvm::Metadata *v12;

  if (a3 == a4)
    return 0;
  if (*(_BYTE *)(a1 + 1712))
    v9 = a5 - *(_QWORD *)(a2 + 8 * a4);
  else
    v9 = *(_QWORD *)(a2 + 8 * a4);
  if (!a6 || *((_BYTE *)a6 + 8) != 9)
    return (unsigned __int8 *)llvm::BitcodeReaderValueList::getValueFwdRef((llvm::BitcodeReaderValueList *)(a1 + 712), v9, a6, a7, a8);
  v10 = *(llvm::MetadataAsValue **)a6;
  MetadataFwdRefOrLoad = llvm::MetadataLoader::getMetadataFwdRefOrLoad((llvm::MetadataLoader::MetadataLoaderImpl **)(a1 + 776), v9);
  return llvm::MetadataAsValue::get(v10, (llvm::LLVMContext *)MetadataFwdRefOrLoad, v12);
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  llvm::BranchInst *v9;

  v9 = (llvm::BranchInst *)llvm::User::operator new((llvm::User *)0x48, 3u);
  return llvm::BranchInst::BranchInst(v9, this, a2, a3, a4);
}

llvm::CleanupReturnInst *llvm::CleanupReturnInst::Create(llvm::CleanupReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  unsigned int v7;
  llvm::CleanupReturnInst *v8;

  if (a2)
    v7 = 2;
  else
    v7 = 1;
  v8 = (llvm::CleanupReturnInst *)llvm::User::operator new((llvm::User *)0x48, v7);
  return llvm::CleanupReturnInst::CleanupReturnInst(v8, this, a2, v7, a3);
}

uint64_t llvm::CatchReturnInst::Create(llvm::CatchReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  llvm::CatchReturnInst *v7;

  v7 = (llvm::CatchReturnInst *)llvm::User::operator new((llvm::User *)0x48, 2u);
  return llvm::CatchReturnInst::CatchReturnInst(v7, this, a2, a3);
}

llvm::Instruction *llvm::CleanupPadInst::Create(uint64_t a1, uint64_t *a2, uint64_t a3, const char **a4, llvm::Instruction *a5)
{
  unsigned int v10;
  llvm::Instruction *v11;

  v10 = a3 + 1;
  v11 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, (int)a3 + 1);
  return llvm::FuncletPadInst::FuncletPadInst(v11, 51, a1, a2, a3, v10, a4, a5);
}

llvm::Instruction *llvm::CatchPadInst::Create(uint64_t a1, uint64_t *a2, uint64_t a3, const char **a4, llvm::Instruction *a5)
{
  unsigned int v10;
  llvm::Instruction *v11;

  v10 = a3 + 1;
  v11 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, (int)a3 + 1);
  return llvm::FuncletPadInst::FuncletPadInst(v11, 52, a1, a2, a3, v10, a4, a5);
}

unsigned __int8 *`anonymous namespace'::BitcodeReader::getFnValueByID(llvm::MetadataLoader::MetadataLoaderImpl **this, unsigned int a2, llvm::Type *a3, int a4, llvm::BasicBlock *a5)
{
  llvm::MetadataAsValue *v5;
  unsigned __int8 *MetadataFwdRefOrLoad;
  llvm::Metadata *v7;

  if (!a3 || *((_BYTE *)a3 + 8) != 9)
    return (unsigned __int8 *)llvm::BitcodeReaderValueList::getValueFwdRef((llvm::BitcodeReaderValueList *)(this + 89), a2, a3, a4, a5);
  v5 = *(llvm::MetadataAsValue **)a3;
  MetadataFwdRefOrLoad = llvm::MetadataLoader::getMetadataFwdRefOrLoad(this + 97, a2);
  return llvm::MetadataAsValue::get(v5, (llvm::LLVMContext *)MetadataFwdRefOrLoad, v7);
}

char *llvm::InvokeInst::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int8x16_t *a7, uint64_t a8, const char **a9, llvm::Instruction *a10)
{
  unint64_t v16;
  int v17;
  int8x16_t *v18;
  int v19;
  int v20;
  unint64_t v21;
  int8x16_t *v22;
  uint64_t v23;
  signed int v24;
  char *v25;
  llvm::Instruction *v26;
  int v27;

  if (!a8)
  {
    v17 = 0;
    goto LABEL_9;
  }
  v16 = 48 * a8 - 48;
  if (v16 < 0x30)
  {
    v17 = 0;
    v18 = a7;
    do
    {
LABEL_8:
      v17 += (unint64_t)(v18[2].i64[0] - v18[1].i64[1]) >> 3;
      v18 += 3;
    }
    while (v18 != &a7[3 * a8]);
    goto LABEL_9;
  }
  v19 = 0;
  v20 = 0;
  v21 = v16 / 0x30 + 1;
  v18 = &a7[3 * (v21 & 0xFFFFFFFFFFFFFFELL)];
  v22 = a7 + 5;
  v23 = v21 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    v19 += (unint64_t)(v22[-3].i64[0] - v22[-4].i64[1]) >> 3;
    v20 += (unint64_t)(v22->i64[0] - v22[-1].i64[1]) >> 3;
    v22 += 6;
    v23 -= 2;
  }
  while (v23);
  v17 = v20 + v19;
  if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v24 = a6 + v17 + 3;
  v25 = llvm::User::operator new((llvm::User *)0x58, v24, 16 * (int)a8);
  v26 = llvm::Instruction::Instruction((llvm::Instruction *)v25, **(llvm::Type ***)(a1 + 16), 5, (llvm::Use *)&v25[-32 * v24], v24, a10);
  *((_QWORD *)v26 + 9) = 0;
  llvm::InvokeInst::init(v26, a1, a2, a3, a4, a5, a6, v27, a7, a8, a9);
  return v25;
}

void std::vector<llvm::OperandBundleDefT<llvm::Value *>>::clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

void `anonymous namespace'::BitcodeReader::propagateAttributeTypes(_anonymous_namespace_::BitcodeReaderBase *a1, uint64_t a2, llvm::CallBase *this, uint64_t a4)
{
  llvm::LLVMContext *v8;
  llvm::Type *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int *v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  llvm::LLVMContext *TypeByID;
  llvm::Type *v33;
  unint64_t v34;
  llvm::LLVMContext *v35;
  llvm::Type *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  const llvm::Twine *v48;
  const char *v49;
  int8x16_t *v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int v54;
  int8x16_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t ParamElementType;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int *v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  char *v76;
  void *v77;
  int IntrinsicID;
  int v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  int *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *__p;
  char *v95;
  unsigned int v96;
  _QWORD v97[4];
  __int16 v98;
  uint64_t *v99;

  v99 = (uint64_t *)*((_QWORD *)this + 9);
  LODWORD(__p) = 0;
  if (((llvm::CallBase::arg_end(this) - ((_QWORD)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0)
  {
    while (1)
    {
      if (!llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v99, (int)__p + 1, 73)
        || (v97[0] = llvm::AttributeList::getAttributeAtIndex((uint64_t *)&v99, (int)__p + 1, 73),
            llvm::Attribute::getValueAsInt((llvm::Attribute *)v97)))
      {
        if ((llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v99, (int)__p + 1, 77) & 1) == 0)
          goto LABEL_41;
        goto LABEL_9;
      }
      v22 = *(unsigned int *)(a4 + 4 * __p);
      v23 = *(_QWORD *)(a2 + 520);
      if (v22 >= (*(_QWORD *)(a2 + 528) - v23) >> 3 || *(_BYTE *)(*(_QWORD *)(v23 + 8 * v22) + 8) != 15)
      {
LABEL_55:
        v48 = (const llvm::Twine *)(a2 + 8);
        v49 = "Missing element type for typed attribute upgrade";
        goto LABEL_137;
      }
      v24 = *(_QWORD *)(a2 + 544);
      v25 = *(unsigned int *)(a2 + 560);
      if (!(_DWORD)v25)
        goto LABEL_26;
      v26 = v25 - 1;
      v27 = (int *)(v24 + 32 * (((_DWORD)v25 - 1) & (37 * v22)));
      v28 = *v27;
      if (*v27 != (_DWORD)v22)
        break;
LABEL_27:
      if (v27 == (int *)(v24 + 32 * v25) || !v27[4])
      {
        if (!TypeByID)
          goto LABEL_55;
      }
      else
      {
        if (!TypeByID)
          goto LABEL_55;
      }
      v34 = llvm::Attribute::getWithByValType(*(llvm::Attribute **)(a2 + 424), TypeByID, v33);
      v99 = llvm::AttributeList::addParamAttribute(&v99, *(uint64_t **)(a2 + 424), &__p, 1, v34);
      if ((llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v99, (int)__p + 1, 77) & 1) == 0)
        goto LABEL_41;
LABEL_9:
      v97[0] = llvm::AttributeList::getAttributeAtIndex((uint64_t *)&v99, (int)__p + 1, 77);
      if (llvm::Attribute::getValueAsInt((llvm::Attribute *)v97))
        goto LABEL_41;
      v12 = *(unsigned int *)(a4 + 4 * __p);
      v13 = *(_QWORD *)(a2 + 520);
      if (v12 >= (*(_QWORD *)(a2 + 528) - v13) >> 3 || *(_BYTE *)(*(_QWORD *)(v13 + 8 * v12) + 8) != 15)
        goto LABEL_55;
      v14 = *(_QWORD *)(a2 + 544);
      v15 = *(unsigned int *)(a2 + 560);
      if ((_DWORD)v15)
      {
        v16 = v15 - 1;
        v17 = (int *)(v14 + 32 * (((_DWORD)v15 - 1) & (37 * v12)));
        v18 = *v17;
        if (*v17 == (_DWORD)v12)
          goto LABEL_35;
        v19 = 1;
        LODWORD(v20) = v16 & (37 * v12);
        while (v18 != -1)
        {
          v21 = v20 + v19++;
          v20 = v21 & v16;
          v18 = *(_DWORD *)(v14 + 32 * v20);
          if (v18 == (_DWORD)v12)
          {
            v17 = (int *)(v14 + 32 * v20);
            goto LABEL_35;
          }
        }
      }
      v17 = (int *)(v14 + 32 * v15);
LABEL_35:
      if (v17 == (int *)(v14 + 32 * v15) || !v17[4])
      {
        if (!v35)
          goto LABEL_55;
      }
      else
      {
        if (!v35)
          goto LABEL_55;
      }
      v37 = llvm::Attribute::getWithStructRetType(*(llvm::Attribute **)(a2 + 424), v35, v36);
      v99 = llvm::AttributeList::addParamAttribute(&v99, *(uint64_t **)(a2 + 424), &__p, 1, v37);
LABEL_41:
      if ((llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v99, (int)__p + 1, 75) & 1) == 0)
        goto LABEL_5;
      v97[0] = llvm::AttributeList::getAttributeAtIndex((uint64_t *)&v99, (int)__p + 1, 75);
      if (llvm::Attribute::getValueAsInt((llvm::Attribute *)v97))
        goto LABEL_5;
      v38 = *(unsigned int *)(a4 + 4 * __p);
      v39 = *(_QWORD *)(a2 + 520);
      if (v38 >= (*(_QWORD *)(a2 + 528) - v39) >> 3 || *(_BYTE *)(*(_QWORD *)(v39 + 8 * v38) + 8) != 15)
        goto LABEL_55;
      v40 = *(_QWORD *)(a2 + 544);
      v41 = *(unsigned int *)(a2 + 560);
      if ((_DWORD)v41)
      {
        v42 = v41 - 1;
        v43 = (int *)(v40 + 32 * (((_DWORD)v41 - 1) & (37 * v38)));
        v44 = *v43;
        if (*v43 == (_DWORD)v38)
          goto LABEL_52;
        v45 = 1;
        LODWORD(v46) = v42 & (37 * v38);
        while (v44 != -1)
        {
          v47 = v46 + v45++;
          v46 = v47 & v42;
          v44 = *(_DWORD *)(v40 + 32 * v46);
          if (v44 == (_DWORD)v38)
          {
            v43 = (int *)(v40 + 32 * v46);
            goto LABEL_52;
          }
        }
      }
      v43 = (int *)(v40 + 32 * v41);
LABEL_52:
      if (v43 == (int *)(v40 + 32 * v41) || !v43[4])
      {
        if (!v8)
          goto LABEL_55;
      }
      else
      {
        if (!v8)
          goto LABEL_55;
      }
      v10 = llvm::Attribute::getWithInAllocaType(*(llvm::Attribute **)(a2 + 424), v8, v9);
      v99 = llvm::AttributeList::addParamAttribute(&v99, *(uint64_t **)(a2 + 424), &__p, 1, v10);
LABEL_5:
      LODWORD(__p) = (_DWORD)__p + 1;
      v11 = (int)__p;
      if (v11 == ((unint64_t)(llvm::CallBase::arg_end(this)
                                                  - ((_QWORD)this
                                                   - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) >> 5))
        goto LABEL_56;
    }
    v29 = 1;
    LODWORD(v30) = v26 & (37 * v22);
    while (v28 != -1)
    {
      v31 = v30 + v29++;
      v30 = v31 & v26;
      v28 = *(_DWORD *)(v24 + 32 * v30);
      if (v28 == (_DWORD)v22)
      {
        v27 = (int *)(v24 + 32 * v30);
        goto LABEL_27;
      }
    }
LABEL_26:
    v27 = (int *)(v24 + 32 * v25);
    goto LABEL_27;
  }
LABEL_56:
  v50 = (int8x16_t *)*((_QWORD *)this - 4);
  if (v50[1].i8[0] != 24)
    goto LABEL_97;
  v96 = 0;
  v53 = (int8x16_t *)v50[3].i64[0];
  v51 = v50 + 3;
  v52 = v53;
  v54 = v51[1].i8[7];
  if (v54 >= 0)
    v55 = v51;
  else
    v55 = v52;
  v56 = v51->i64[1];
  if (v54 >= 0)
    v57 = v54;
  else
    v57 = v56;
  llvm::InlineAsm::ParseConstraints(v55, v57, &__p);
  v58 = (char *)__p;
  v59 = v95;
  if (__p != v95)
  {
    while (1)
    {
      if (*(_DWORD *)v58)
      {
        if (*(_DWORD *)v58 != 1 || !v58[13])
          goto LABEL_68;
        v63 = v96;
      }
      else
      {
        v63 = v96;
        if (!v58[13])
          goto LABEL_67;
      }
      ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v99, v63);
      v63 = v96;
      if (!ParamElementType)
      {
        v65 = *(unsigned int *)(a4 + 4 * v96);
        v66 = *(_QWORD *)(a2 + 520);
        if (v65 >= (*(_QWORD *)(a2 + 528) - v66) >> 3 || *(_BYTE *)(*(_QWORD *)(v66 + 8 * v65) + 8) != 15)
        {
LABEL_87:
          v97[0] = "Missing element type for inline asm upgrade";
          v98 = 259;
          v75 = 0;
          v58 = (char *)__p;
          if (__p)
            goto LABEL_92;
          goto LABEL_96;
        }
        v67 = *(_QWORD *)(a2 + 544);
        v68 = *(unsigned int *)(a2 + 560);
        if ((_DWORD)v68)
        {
          v69 = v68 - 1;
          v70 = (int *)(v67 + 32 * (((_DWORD)v68 - 1) & (37 * v65)));
          v71 = *v70;
          if (*v70 != (_DWORD)v65)
          {
            v72 = 1;
            LODWORD(v73) = v69 & (37 * v65);
            while (v71 != -1)
            {
              v74 = v73 + v72++;
              v73 = v74 & v69;
              v71 = *(_DWORD *)(v67 + 32 * v73);
              if (v71 == (_DWORD)v65)
              {
                v70 = (int *)(v67 + 32 * v73);
                goto LABEL_84;
              }
            }
            goto LABEL_83;
          }
        }
        else
        {
LABEL_83:
          v70 = (int *)(v67 + 32 * v68);
        }
LABEL_84:
        if (v70 == (int *)(v67 + 32 * v68) || !v70[4])
        {
          if (!v60)
            goto LABEL_87;
        }
        else
        {
          if (!v60)
            goto LABEL_87;
        }
        v61 = *(uint64_t **)(a2 + 424);
        v62 = llvm::Attribute::get(v61, 74, v60);
        v99 = llvm::AttributeList::addParamAttribute(&v99, v61, &v96, 1, v62);
        v63 = v96;
      }
LABEL_67:
      v96 = v63 + 1;
LABEL_68:
      v58 += 80;
      if (v58 == v59)
      {
        v75 = 1;
        v58 = (char *)__p;
        if (__p)
          goto LABEL_92;
        goto LABEL_96;
      }
    }
  }
  v75 = 1;
  if (__p)
  {
LABEL_92:
    v76 = v95;
    v77 = v58;
    if (v95 != v58)
    {
      do
        llvm::InlineAsm::ConstraintInfo::~ConstraintInfo((llvm::InlineAsm::ConstraintInfo *)(v76 - 80));
      while (v76 != v58);
      v77 = __p;
    }
    v95 = v58;
    operator delete(v77);
  }
LABEL_96:
  if (v75)
  {
LABEL_97:
    IntrinsicID = llvm::CallBase::getIntrinsicID(this);
    if (IntrinsicID > 984)
    {
      if (IntrinsicID <= 2773)
      {
        if (IntrinsicID != 985 && IntrinsicID != 2768)
          goto LABEL_119;
      }
      else if (IntrinsicID != 2774 && IntrinsicID != 3176 && IntrinsicID != 3174)
      {
        goto LABEL_119;
      }
    }
    else if (IntrinsicID > 507)
    {
      if (IntrinsicID != 508 && IntrinsicID != 983)
        goto LABEL_119;
    }
    else if ((IntrinsicID - 265) >= 2 && IntrinsicID != 505)
    {
      goto LABEL_119;
    }
    v79 = llvm::CallBase::getIntrinsicID(this);
    v80 = 1;
    if (v79 > 3173)
    {
      if (v79 != 3174 && v79 != 3176)
      {
LABEL_120:
        v80 = 0;
        LODWORD(__p) = 0;
        if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v99, 0))
          goto LABEL_121;
        goto LABEL_119;
      }
    }
    else if (v79 != 983 && v79 != 985)
    {
      goto LABEL_120;
    }
    LODWORD(__p) = 1;
    if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v99, 1))
    {
LABEL_121:
      v81 = *(unsigned int *)(a4 + 4 * v80);
      v82 = *(_QWORD *)(a2 + 520);
      if (v81 >= (*(_QWORD *)(a2 + 528) - v82) >> 3 || *(_BYTE *)(*(_QWORD *)(v82 + 8 * v81) + 8) != 15)
      {
LABEL_136:
        v48 = (const llvm::Twine *)(a2 + 8);
        v49 = "Missing element type for elementtype upgrade";
LABEL_137:
        v97[0] = v49;
        v98 = 259;
        return;
      }
      v83 = *(_QWORD *)(a2 + 544);
      v84 = *(unsigned int *)(a2 + 560);
      if ((_DWORD)v84)
      {
        v85 = v84 - 1;
        v86 = (int *)(v83 + 32 * (((_DWORD)v84 - 1) & (37 * v81)));
        v87 = *v86;
        if (*v86 == (_DWORD)v81)
        {
LABEL_130:
          if (v86 == (int *)(v83 + 32 * v84) || !v86[4])
            v91 = 0xFFFFFFFFLL;
          else
            v91 = **((unsigned int **)v86 + 1);
          if (v92)
          {
            v93 = llvm::Attribute::get(*(uint64_t **)(a2 + 424), 74, v92);
            v99 = llvm::AttributeList::addParamAttribute(&v99, *(uint64_t **)(a2 + 424), &__p, 1, v93);
            goto LABEL_119;
          }
          goto LABEL_136;
        }
        v88 = 1;
        LODWORD(v89) = v85 & (37 * v81);
        while (v87 != -1)
        {
          v90 = v89 + v88++;
          v89 = v90 & v85;
          v87 = *(_DWORD *)(v83 + 32 * v89);
          if (v87 == (_DWORD)v81)
          {
            v86 = (int *)(v83 + 32 * v89);
            goto LABEL_130;
          }
        }
      }
      v86 = (int *)(v83 + 32 * v84);
      goto LABEL_130;
    }
LABEL_119:
    *((_QWORD *)this + 9) = v99;
    *(_QWORD *)a1 = 0;
  }
}

llvm::ResumeInst *llvm::ResumeInst::Create(llvm::ResumeInst *this, llvm::Value *a2, llvm::Instruction *a3)
{
  llvm::ResumeInst *v5;

  v5 = (llvm::ResumeInst *)llvm::User::operator new((llvm::User *)0x48, 1u);
  return llvm::ResumeInst::ResumeInst(v5, this, a2);
}

void **std::vector<llvm::InlineAsm::ConstraintInfo>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        llvm::InlineAsm::ConstraintInfo::~ConstraintInfo((llvm::InlineAsm::ConstraintInfo *)(v3 - 80));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *llvm::CallBrInst::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t *a6, uint64_t a7, uint64_t a8, int8x16_t *a9, uint64_t a10, const char **a11, llvm::Instruction *a12)
{
  unint64_t v16;
  int v17;
  int8x16_t *v18;
  int v19;
  int v20;
  unint64_t v21;
  int8x16_t *v22;
  uint64_t v23;
  signed int v24;
  char *v25;
  llvm::Instruction *v26;

  if (!a10)
  {
    v17 = 0;
    goto LABEL_9;
  }
  v16 = 48 * a10 - 48;
  if (v16 < 0x30)
  {
    v17 = 0;
    v18 = a9;
    do
    {
LABEL_8:
      v17 += (unint64_t)(v18[2].i64[0] - v18[1].i64[1]) >> 3;
      v18 += 3;
    }
    while (v18 != &a9[3 * a10]);
    goto LABEL_9;
  }
  v19 = 0;
  v20 = 0;
  v21 = v16 / 0x30 + 1;
  v18 = &a9[3 * (v21 & 0xFFFFFFFFFFFFFFELL)];
  v22 = a9 + 5;
  v23 = v21 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    v19 += (unint64_t)(v22[-3].i64[0] - v22[-4].i64[1]) >> 3;
    v20 += (unint64_t)(v22->i64[0] - v22[-1].i64[1]) >> 3;
    v22 += 6;
    v23 -= 2;
  }
  while (v23);
  v17 = v20 + v19;
  if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v24 = a5 + a7 + v17 + 2;
  v25 = llvm::User::operator new((llvm::User *)0x60, v24, 16 * (int)a10);
  v26 = llvm::Instruction::Instruction((llvm::Instruction *)v25, **(llvm::Type ***)(a1 + 16), 11, (llvm::Use *)&v25[-32 * v24], v24, a12);
  *((_QWORD *)v26 + 9) = 0;
  llvm::CallBrInst::init(v26, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11);
  return v25;
}

unsigned int *llvm::PHINode::Create(llvm::PHINode *this, llvm::Type *a2, const char **a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  int v7;
  unsigned int *v9;
  llvm::Instruction *v10;

  v7 = (int)a2;
  v9 = llvm::User::operator new((llvm::User *)0x50);
  v10 = llvm::Instruction::Instruction((llvm::Instruction *)v9, this, 55, 0, 0, a4);
  *((_DWORD *)v10 + 18) = v7;
  llvm::Value::setName(v10, a3);
  llvm::User::allocHungoffUses((llvm::User *)v9, v9[18], 1);
  return v9;
}

void llvm::PHINode::addIncoming(llvm::PHINode *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;

  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFF) == *((_DWORD *)this + 18))
  {
    llvm::PHINode::growOperands(this);
    v6 = *((_DWORD *)this + 5);
  }
  v7 = (v6 + 1) & 0x7FFFFFF;
  *((_DWORD *)this + 5) = v6 & 0xF8000000 | (v6 + 1) & 0x7FFFFFF;
  v8 = (v7 - 1);
  if ((v6 & 0x40000000) != 0)
  {
    v9 = (char *)*((_QWORD *)this - 1);
    v10 = &v9[32 * v8];
    if (!*(_QWORD *)v10)
      goto LABEL_9;
  }
  else
  {
    v9 = (char *)this - 32 * v7;
    v10 = &v9[32 * v8];
    if (!*(_QWORD *)v10)
      goto LABEL_9;
  }
  **((_QWORD **)v10 + 2) = *((_QWORD *)v10 + 1);
  v11 = *((_QWORD *)v10 + 1);
  if (v11)
    *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
LABEL_9:
  *(_QWORD *)v10 = a2;
  if (a2)
  {
    v14 = *((_QWORD *)a2 + 1);
    v13 = (char **)((char *)a2 + 8);
    v12 = v14;
    v15 = &v9[32 * v8];
    *((_QWORD *)v15 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v15 + 8;
    *((_QWORD *)v15 + 2) = v13;
    *v13 = v10;
  }
  v16 = *((_DWORD *)this + 5);
  v17 = v16 & 0x7FFFFFF;
  if ((v16 & 0x40000000) != 0)
    v18 = (char *)*((_QWORD *)this - 1);
  else
    v18 = (char *)this - 32 * v17;
  *(_QWORD *)&v18[32 * *((unsigned int *)this + 18) + 8 * (v17 - 1)] = a3;
}

uint64_t llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::lookup(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(a1, a2, &v5))
  {
    v3 = v5;
    if ((*(_DWORD *)a1 & 1) == 0)
    {
LABEL_9:
      if (v3 == *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16))
        return 0;
      return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 24 * *(unsigned int *)(v3 + 16) + 16);
    }
  }
  else
  {
    if ((*(_DWORD *)a1 & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
      goto LABEL_9;
    }
    v3 = a1 + 104;
  }
  if (v3 != a1 + 104)
    return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 24 * *(unsigned int *)(v3 + 16) + 16);
  return 0;
}

unsigned __int8 *`anonymous namespace'::BitcodeReader::getValueSigned(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, llvm::Type *a6, int a7, llvm::BasicBlock *a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  llvm::MetadataAsValue *v13;
  unsigned __int8 *MetadataFwdRefOrLoad;
  llvm::Metadata *v15;

  if (a3 == a4)
    return 0;
  v9 = *(_QWORD *)(a2 + 8 * a4);
  LODWORD(v10) = 0;
  if (v9 != 1)
    v10 = -(uint64_t)(v9 >> 1);
  if ((v9 & 1) != 0)
    LODWORD(v11) = v10;
  else
    v11 = v9 >> 1;
  if (*(_BYTE *)(a1 + 1712))
    v12 = a5 - v11;
  else
    v12 = v11;
  if (!a6 || *((_BYTE *)a6 + 8) != 9)
    return (unsigned __int8 *)llvm::BitcodeReaderValueList::getValueFwdRef((llvm::BitcodeReaderValueList *)(a1 + 712), v12, a6, a7, a8);
  v13 = *(llvm::MetadataAsValue **)a6;
  MetadataFwdRefOrLoad = llvm::MetadataLoader::getMetadataFwdRefOrLoad((llvm::MetadataLoader::MetadataLoaderImpl **)(a1 + 776), v12);
  return llvm::MetadataAsValue::get(v13, (llvm::LLVMContext *)MetadataFwdRefOrLoad, v15);
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::insert@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v7 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 4;
    v9 = a1 + 8;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 16);
    if (!v8)
    {
      result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::InsertIntoBucket<llvm::BasicBlock *,llvm::Value *>(a1, 0, a2, a2 + 1);
      if ((*(_BYTE *)a1 & 1) != 0)
      {
LABEL_25:
        v15 = 4;
        goto LABEL_26;
      }
LABEL_11:
      v7 = *(_QWORD *)(a1 + 8);
      v15 = *(unsigned int *)(a1 + 16);
LABEL_26:
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v7 + 16 * v15;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    v9 = *(_QWORD *)(a1 + 8);
  }
  v10 = v8 - 1;
  v11 = ((*a2 >> 4) ^ (*a2 >> 9)) & v10;
  result = (_QWORD *)(v9 + 16 * v11);
  v13 = *result;
  if (*a2 != *result)
  {
    v16 = 0;
    v17 = 1;
    while (v13 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v13 == -8192;
      if (v18)
        v16 = result;
      v19 = v11 + v17++;
      v11 = v19 & v10;
      result = (_QWORD *)(v9 + 16 * v11);
      v13 = *result;
      if (*a2 == *result)
        goto LABEL_6;
    }
    if (v16)
      v20 = v16;
    else
      v20 = result;
    result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::InsertIntoBucket<llvm::BasicBlock *,llvm::Value *>(a1, v20, a2, a2 + 1);
    if ((*(_BYTE *)a1 & 1) != 0)
      goto LABEL_25;
    goto LABEL_11;
  }
LABEL_6:
  if ((v6 & 1) != 0)
  {
    v14 = 4;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v14 = *(unsigned int *)(a1 + 16);
  }
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7 + 16 * v14;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void `anonymous namespace'::BitcodeReader::parseAlignmentValue(_anonymous_namespace_::BitcodeReaderBase *a1, uint64_t a2, unint64_t a3, _WORD *a4)
{
  __int16 v4;
  const char *v5;
  __int16 v6;

  if (a3 < 0x22)
  {
    if (a3)
      v4 = (a3 - 1) | 0x100;
    else
      v4 = 0;
    *a4 = v4;
    *(_QWORD *)a1 = 0;
  }
  else
  {
    v5 = "Invalid alignment value";
    v6 = 259;
  }
}

void `anonymous namespace'::BitcodeReader::typeCheckLoadStoreInst(_anonymous_namespace_::BitcodeReader *this, llvm::Type *a2, llvm::Type *a3, uint64_t a4)
{
  llvm::Type *v6;
  BOOL v7;
  const llvm::Twine *v8;
  const char *v9;
  const char *v10;
  __int16 v11;

  if (*(_BYTE *)(a4 + 8) == 15)
  {
    v6 = *(llvm::Type **)(a4 + 24);
    if (v6)
      v7 = v6 == a3;
    else
      v7 = 1;
    if (v7)
    {
      if (llvm::PointerType::isLoadableOrStorableType(a3, a2))
      {
        *(_QWORD *)this = 0;
        return;
      }
      v8 = (llvm::Type *)((char *)a2 + 8);
      v9 = "Cannot load/store from pointer";
    }
    else
    {
      v8 = (llvm::Type *)((char *)a2 + 8);
      v9 = "Explicit load/store type does not match pointee type of pointer operand";
    }
  }
  else
  {
    v8 = (llvm::Type *)((char *)a2 + 8);
    v9 = "Load/Store operand is not a pointer type";
  }
  v10 = v9;
  v11 = 259;
}

uint64_t getDecodedRMWOperation(uint64_t result)
{
  if (result >= 0x11)
    return 17;
  else
    return result;
}

llvm::VAArgInst *llvm::VAArgInst::VAArgInst(llvm::VAArgInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v8 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)llvm::Instruction::Instruction(this, a3, 60, (llvm::VAArgInst *)((char *)this - 32), 1, a5) - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v9 = *((_QWORD *)this - 3);
    if (v9)
      *(_QWORD *)(v9 + 16) = *((_QWORD *)this - 2);
  }
  *v8 = a2;
  if (a2)
  {
    v12 = *((_QWORD *)a2 + 1);
    v11 = (_QWORD *)((char *)a2 + 8);
    v10 = v12;
    *((_QWORD *)this - 3) = v12;
    if (v12)
      *(_QWORD *)(v10 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v11;
    *v11 = v8;
  }
  llvm::Value::setName(this, a4);
  return this;
}

std::string *std::vector<llvm::OperandBundleDefT<llvm::Value *>>::emplace_back<std::string &,std::vector<llvm::Value *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  std::string *v6;
  uint64_t v7;
  __int128 v8;
  std::string::size_type v9;
  std::string v11;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5 >= *(_QWORD *)(a1 + 16))
  {
    v6 = std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__emplace_back_slow_path<std::string &,std::vector<llvm::Value *>>((std::string **)a1, a2, (__int128 *)a3);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v11 = *(std::string *)a2;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = *(_OWORD *)a3;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v9 = v11.__r_.__value_.__r.__words[2];
    *(_OWORD *)v5 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = v9;
    *(_OWORD *)(v5 + 24) = v8;
    v6 = (std::string *)(v5 + 48);
    *(_QWORD *)(v5 + 40) = v7;
  }
  *(_QWORD *)(a1 + 8) = v6;
  return v6 - 2;
}

char *std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__emplace_back_slow_path<llvm::Value *&,unsigned int &>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  char *v19;
  unint64_t v20;
  char *v22;
  uint64_t v23;

  v3 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v5 = (uint64_t)&v4[-*(_QWORD *)a1] >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    abort();
  v10 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  if (v11)
  {
    if (v11 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v12 = (char *)operator new(32 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[32 * v5];
  v14 = *a2;
  *(_QWORD *)v13 = 6;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = v14;
  if (v14 != -8192 && v14 != -4096 && v14)
  {
    llvm::ValueHandleBase::AddToUseList((unint64_t *)v13);
    v3 = *(char **)a1;
    v4 = *(char **)(a1 + 8);
  }
  v15 = &v12[32 * v11];
  *((_DWORD *)v13 + 6) = *a3;
  v16 = v13 + 32;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
  }
  else
  {
    v17 = 0;
    do
    {
      *(_QWORD *)&v13[v17 - 32] = 6;
      v18 = (unint64_t *)&v13[v17 - 32];
      v19 = &v4[v17];
      v20 = *(_QWORD *)&v4[v17 - 16];
      v18[1] = 0;
      v18[2] = v20;
      if (v20 != -8192 && v20 != -4096 && v20 != 0)
        llvm::ValueHandleBase::AddToExistingUseList(v18, *((_QWORD *)v19 - 4) & 0xFFFFFFFFFFFFFFF8);
      *(_DWORD *)&v13[v17 - 8] = *((_DWORD *)v19 - 2);
      v17 -= 32;
    }
    while (&v4[v17] != v3);
    v3 = *(char **)a1;
    v22 = *(char **)(a1 + 8);
    *(_QWORD *)a1 = &v13[v17];
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    while (v22 != v3)
    {
      v23 = *((_QWORD *)v22 - 2);
      v22 -= 32;
      if (v23 != -8192 && v23 != -4096 && v23 != 0)
        llvm::ValueHandleBase::RemoveFromUseList(v22);
    }
  }
  if (v3)
    operator delete(v3);
  return v13 + 32;
}

unint64_t `anonymous namespace'::BitcodeReader::getPtrElementTypeByID(_anonymous_namespace_::BitcodeReader *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v12;

  v2 = *((_QWORD *)this + 65);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 66) - v2) >> 3)
    || *(_BYTE *)(*(_QWORD *)(v2 + 8 * a2) + 8) != 15)
  {
    return 0;
  }
  v3 = *((_QWORD *)this + 68);
  v4 = *((unsigned int *)this + 140);
  if ((_DWORD)v4)
  {
    v5 = v4 - 1;
    v6 = (int *)(v3 + 32 * (((_DWORD)v4 - 1) & (37 * a2)));
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_11;
    v8 = 1;
    LODWORD(v9) = v5 & (37 * a2);
    while (v7 != -1)
    {
      v10 = v9 + v8++;
      v9 = v10 & v5;
      v7 = *(_DWORD *)(v3 + 32 * v9);
      if (v7 == a2)
      {
        v6 = (int *)(v3 + 32 * v9);
        goto LABEL_11;
      }
    }
  }
  v6 = (int *)(v3 + 32 * v4);
LABEL_11:
  if (v6 == (int *)(v3 + 32 * v4) || !v6[4])
    v12 = 0xFFFFFFFFLL;
  else
    v12 = **((unsigned int **)v6 + 1);
}

uint64_t `anonymous namespace'::BitcodeConstant::create(uint64_t *a1, llvm::Type *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  _DWORD *v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  int v22;

  v9 = 4 * a5;
  v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 4 * a5 + 48, 3);
  result = llvm::Value::Value(v10, a2, 255);
  *(_WORD *)(result + 24) = *(_WORD *)a3;
  v12 = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = v12;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a3 + 8);
  if (a5)
  {
    v13 = (_DWORD *)(result + 48);
    v14 = (a5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v14 < 7)
    {
      v15 = (int *)a4;
      do
      {
LABEL_8:
        v22 = *v15++;
        *v13++ = v22;
      }
      while (v15 != (int *)(a4 + v9));
      return result;
    }
    v15 = (int *)a4;
    if ((unint64_t)(result - a4 + 48) < 0x20)
      goto LABEL_8;
    v16 = v14 + 1;
    v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    v13 = (_DWORD *)((char *)v13 + v17);
    v15 = (int *)(a4 + v17);
    v18 = (__int128 *)(a4 + 16);
    v19 = (_OWORD *)(result + 64);
    v20 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v21 = *v18;
      *(v19 - 1) = *(v18 - 1);
      *v19 = v21;
      v18 += 2;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_8;
  }
  return result;
}

uint64_t llvm::SmallVector<unsigned char,16u>::SmallVector<unsigned long long *,void>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int8x16x4_t *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  int8x16x4_t *v23;
  uint64_t v24;

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_181236BC0;
  v6 = (char *)a3 - a2;
  v7 = (uint64_t)((uint64_t)a3 - a2) >> 3;
  if ((unint64_t)a3 - a2 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), (uint64_t)((uint64_t)a3 - a2) >> 3, 1);
    v8 = *(_QWORD *)(a1 + 8);
    if ((uint64_t *)a2 == a3)
      goto LABEL_23;
LABEL_5:
    v9 = *(_QWORD *)a1;
    v10 = (_BYTE *)(*(_QWORD *)a1 + v8);
    v11 = (unint64_t)(v6 - 8);
    if ((unint64_t)(v6 - 8) < 0x38)
    {
      v12 = (uint64_t *)a2;
      goto LABEL_21;
    }
    v13 = v11 >> 3;
    if ((unint64_t)v10 < (v11 & 0xFFFFFFFFFFFFFFF8) + a2 + 8 && v8 + v13 + v9 + 1 > a2)
    {
      v12 = (uint64_t *)a2;
      goto LABEL_21;
    }
    v14 = v13 + 1;
    if (v11 >= 0xF8)
    {
      v15 = v14 & 0x3FFFFFFFFFFFFFE0;
      v16 = (int8x16x4_t *)(a2 + 128);
      v17 = (_OWORD *)(v8 + v9 + 16);
      v18 = v14 & 0x3FFFFFFFFFFFFFE0;
      do
      {
        *(_QWORD *)&v19 = vqtbl4q_s8(v16[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
        *(_QWORD *)&v20 = vqtbl4q_s8(*v16, (int8x16_t)xmmword_18125CFF0).u64[0];
        *((_QWORD *)&v19 + 1) = vqtbl4q_s8(v16[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
        *((_QWORD *)&v20 + 1) = vqtbl4q_s8(v16[1], (int8x16_t)xmmword_18125CFF0).u64[0];
        *(v17 - 1) = v19;
        *v17 = v20;
        v16 += 4;
        v17 += 2;
        v18 -= 32;
      }
      while (v18);
      if (v14 == v15)
        goto LABEL_22;
      if ((v14 & 0x18) == 0)
      {
        v12 = (uint64_t *)(a2 + 8 * v15);
        v10 += v15;
        do
        {
LABEL_21:
          v24 = *v12++;
          *v10++ = v24;
        }
        while (v12 != a3);
LABEL_22:
        v8 = *(_QWORD *)(a1 + 8);
        goto LABEL_23;
      }
    }
    else
    {
      v15 = 0;
    }
    v10 += v14 & 0x3FFFFFFFFFFFFFF8;
    v12 = (uint64_t *)(a2 + 8 * (v14 & 0x3FFFFFFFFFFFFFF8));
    v21 = (_QWORD *)(v9 + v15 + v8);
    v22 = v15 - (v14 & 0x3FFFFFFFFFFFFFF8);
    v23 = (int8x16x4_t *)(a2 + 8 * v15);
    do
    {
      *v21++ = vqtbl4q_s8(*v23++, (int8x16_t)xmmword_18125D000).u64[0];
      v22 += 8;
    }
    while (v22);
    if (v14 == (v14 & 0x3FFFFFFFFFFFFFF8))
      goto LABEL_22;
    goto LABEL_21;
  }
  v8 = 0;
  if ((uint64_t *)a2 != a3)
    goto LABEL_5;
LABEL_23:
  *(_QWORD *)(a1 + 8) = v8 + v7;
  return a1;
}

uint64_t llvm::ConstantDataArray::get<llvm::SmallVector<unsigned char,16u>>(llvm::Type *a1, llvm::Type **a2, unsigned int a3)
{
  llvm::Type *v3;
  llvm::Type *v4;
  llvm::ArrayType *IntNTy;
  llvm::ConstantAggregateZero *v6;

  v3 = *a2;
  v4 = a2[1];
  IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(a1, (llvm::LLVMContext *)8, a3);
  llvm::ArrayType::get(IntNTy, v4);
  return llvm::ConstantDataSequential::getImpl(v3, v4, v6);
}

uint64_t llvm::SmallVector<unsigned short,16u>::SmallVector<unsigned long long *,void>(uint64_t a1, int32x4_t *a2, int32x4_t *a3)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  int32x4_t *v11;
  unint64_t v12;
  int32x4_t *v13;
  int16x8_t *v14;
  uint64_t v15;
  int16x8_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_181236BC0;
  v6 = (char *)a3 - (char *)a2;
  v7 = ((char *)a3 - (char *)a2) >> 3;
  if ((unint64_t)((char *)a3 - (char *)a2) < 0x81)
  {
    v8 = 0;
    if (a2 == a3)
      goto LABEL_11;
  }
  else
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), ((char *)a3 - (char *)a2) >> 3, 2);
    v8 = *(_QWORD *)(a1 + 8);
    if (a2 == a3)
      goto LABEL_11;
  }
  v9 = *(_QWORD *)a1 + 2 * v8;
  if ((unint64_t)(v6 - 8) < 0x78)
  {
    v10 = (_WORD *)(*(_QWORD *)a1 + 2 * v8);
    v11 = a2;
    do
    {
LABEL_10:
      v17 = v11->i64[0];
      v11 = (int32x4_t *)((char *)v11 + 8);
      *v10++ = v17;
    }
    while (v11 != a3);
    goto LABEL_11;
  }
  v12 = ((unint64_t)(v6 - 8) >> 3) + 1;
  v10 = (_WORD *)(v9 + 2 * (v12 & 0x3FFFFFFFFFFFFFF0));
  v11 = (int32x4_t *)((char *)a2 + 8 * (v12 & 0x3FFFFFFFFFFFFFF0));
  v13 = a2 + 4;
  v14 = (int16x8_t *)(v9 + 16);
  v15 = v12 & 0x3FFFFFFFFFFFFFF0;
  do
  {
    v16 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v13, v13[1]), (int16x8_t)vuzp1q_s32(v13[2], v13[3]));
    v14[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v13[-4], v13[-3]), (int16x8_t)vuzp1q_s32(v13[-2], v13[-1]));
    *v14 = v16;
    v13 += 8;
    v14 += 2;
    v15 -= 16;
  }
  while (v15);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFF0))
    goto LABEL_10;
LABEL_11:
  *(_QWORD *)(a1 + 8) = v8 + v7;
  return a1;
}

uint64_t llvm::ConstantDataArray::get<llvm::SmallVector<unsigned short,16u>>(llvm::Type *a1, uint64_t a2, unsigned int a3)
{
  llvm::Type *v3;
  llvm::Type *v4;
  llvm::ArrayType *IntNTy;
  llvm::ConstantAggregateZero *v6;

  v3 = *(llvm::Type **)a2;
  v4 = *(llvm::Type **)(a2 + 8);
  IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(a1, (llvm::LLVMContext *)0x10, a3);
  llvm::ArrayType::get(IntNTy, v4);
  return llvm::ConstantDataSequential::getImpl(v3, (llvm::Type *)(2 * (_QWORD)v4), v6);
}

_QWORD *llvm::SmallVector<unsigned int,16u>::SmallVector<unsigned long long *,void>(_QWORD *a1, int32x4_t *a2, int32x4_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int32x4_t *v11;
  unint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;

  *a1 = a1 + 2;
  a1[1] = 0x1000000000;
  v6 = (char *)a3 - (char *)a2;
  if ((unint64_t)((char *)a3 - (char *)a2) >= 0x81)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 3, 4);
    v7 = *((unsigned int *)a1 + 2);
    v8 = *((_DWORD *)a1 + 2);
    if (a2 == a3)
      goto LABEL_12;
LABEL_5:
    v9 = *a1 + 4 * v7;
    if ((unint64_t)(v6 - 8) >= 0x38)
    {
      v12 = ((unint64_t)(v6 - 8) >> 3) + 1;
      v10 = (_DWORD *)(v9 + 4 * (v12 & 0x3FFFFFFFFFFFFFF8));
      v11 = (int32x4_t *)((char *)a2 + 8 * (v12 & 0x3FFFFFFFFFFFFFF8));
      v13 = a2 + 2;
      v14 = (int32x4_t *)(v9 + 16);
      v15 = v12 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v17 = v13[-2];
        v16 = v13[-1];
        v19 = *v13;
        v18 = v13[1];
        v13 += 4;
        v14[-1] = vuzp1q_s32(v17, v16);
        *v14 = vuzp1q_s32(v19, v18);
        v14 += 2;
        v15 -= 8;
      }
      while (v15);
      if (v12 == (v12 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_11;
    }
    else
    {
      v10 = (_DWORD *)(*a1 + 4 * v7);
      v11 = a2;
    }
    do
    {
      v20 = v11->i64[0];
      v11 = (int32x4_t *)((char *)v11 + 8);
      *v10++ = v20;
    }
    while (v11 != a3);
LABEL_11:
    v8 = *((_DWORD *)a1 + 2);
    goto LABEL_12;
  }
  v7 = 0;
  v8 = 0;
  if (a2 != a3)
    goto LABEL_5;
LABEL_12:
  *((_DWORD *)a1 + 2) = v8 + ((unint64_t)v6 >> 3);
  return a1;
}

uint64_t llvm::ConstantDataArray::get<llvm::SmallVector<unsigned int,16u>>(llvm::Type *a1, uint64_t a2, unsigned int a3)
{
  llvm::Type *v3;
  llvm::Type *v4;
  llvm::ArrayType *IntNTy;
  llvm::ConstantAggregateZero *v6;

  v3 = *(llvm::Type **)a2;
  v4 = (llvm::Type *)*(unsigned int *)(a2 + 8);
  IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(a1, (llvm::LLVMContext *)0x20, a3);
  llvm::ArrayType::get(IntNTy, v4);
  return llvm::ConstantDataSequential::getImpl(v3, (llvm::Type *)(4 * (_QWORD)v4), v6);
}

_QWORD *llvm::SmallVector<unsigned long long,16u>::SmallVector<unsigned long long *,void>(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v6;
  unsigned int v7;

  *a1 = a1 + 2;
  a1[1] = 0x1000000000;
  v6 = a3 - a2;
  if ((unint64_t)(a3 - a2) >= 0x81)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 3, 8);
    v7 = *((_DWORD *)a1 + 2);
    if (a2 == a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if (a2 != a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 3);
  return a1;
}

uint64_t llvm::ConstantDataArray::get<llvm::SmallVector<unsigned long long,16u>>(llvm::Type *a1, uint64_t a2, unsigned int a3)
{
  llvm::Type *v3;
  llvm::Type *v4;
  llvm::ArrayType *IntNTy;
  llvm::ConstantAggregateZero *v6;

  v3 = *(llvm::Type **)a2;
  v4 = (llvm::Type *)*(unsigned int *)(a2 + 8);
  IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(a1, (llvm::LLVMContext *)0x40, a3);
  llvm::ArrayType::get(IntNTy, v4);
  return llvm::ConstantDataSequential::getImpl(v3, (llvm::Type *)(8 * (_QWORD)v4), v6);
}

void jumpToValueSymbolTable(uint64_t a1, llvm::BitstreamCursor *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  char v8;
  unsigned __int8 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(unsigned int *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = (4 * (_QWORD)a2) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a3 + 32) = 0;
  if (((32 * (_BYTE)a2) & 0x20) != 0)
  {
    llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)a3, (32 * (_BYTE)a2) & 0x20, (uint64_t)&v15);
    if ((v16 & 1) != 0)
    {
      v7 = v15;
      if (v15)
      {
        v8 = *(_BYTE *)(a1 + 8) | 1;
LABEL_17:
        *(_BYTE *)(a1 + 8) = v8;
        *(_QWORD *)a1 = v7;
        return;
      }
    }
  }
  llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)a3, 0, (uint64_t)&v18);
  if ((v19 & 1) != 0)
  {
    v14 = v18;
    v18 = 0;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v14;
    v18 = 0;
    return;
  }
  if ((_DWORD)v18 == 2 && HIDWORD(v18) == 14)
  {
    v7 = (const char *)(8 * v5 - v6);
    v8 = *(_BYTE *)(a1 + 8) & 0xFE;
    goto LABEL_17;
  }
  v15 = "Expected value symbol table subblock";
  v17 = 259;
  {
  }
  v11 = operator new(0x38uLL);
  v12 = llvm::StringError::StringError((uint64_t)v11, (llvm::Twine *)&v15, 1, (uint64_t)&llvm::BitcodeErrorCategory(void)::ErrorCategory);
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v12;
  if ((v19 & 1) != 0)
  {
    v13 = v18;
    v18 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

void `anonymous namespace'::BitcodeReader::recordValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int8x16x4_t *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  int8x16x4_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  const char *v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 **v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  int8x16_t *Name;
  const unsigned __int8 *v52;
  const void **inserted;
  uint64_t v55;
  uint64_t v56;
  const char *v57[4];
  __int16 v58;
  uint64_t v59;
  void *__s;
  __int128 v61;
  _QWORD v62[18];

  v62[16] = *MEMORY[0x1E0C80C00];
  __s = v62;
  v61 = xmmword_181236BB0;
  v7 = *(unsigned int *)(a3 + 8);
  if (v7 < a4)
  {
    v57[0] = "Invalid record";
    v58 = 259;
    *(_BYTE *)(a1 + 8) |= 1u;
    v8 = __s;
    *(_QWORD *)a1 = v59;
    if (v8 == v62)
      return;
    goto LABEL_32;
  }
  v11 = *(_QWORD **)a3;
  v12 = (uint64_t *)(*(_QWORD *)a3 + 8 * a4);
  v13 = *(_QWORD *)a3 + 8 * v7;
  v14 = (v13 - (uint64_t)v12) >> 3;
  if ((unint64_t)(v13 - (_QWORD)v12) >= 0x401)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__s, v62, (v13 - (uint64_t)v12) >> 3, 1);
    v15 = v61;
    if ((_DWORD)v7 == a4)
      goto LABEL_24;
LABEL_8:
    v16 = (char *)__s;
    v17 = (char *)__s + v15;
    v18 = a4;
    v19 = 8 * v7 - v18 * 8 - 8;
    if (v19 >= 0x38)
    {
      v20 = v19 >> 3;
      if (v17 >= (char *)&v11[v7] || v12 >= (uint64_t *)((char *)__s + v15 + v20 + 1))
      {
        v21 = v20 + 1;
        if (v19 < 0xF8)
        {
          v22 = 0;
          goto LABEL_17;
        }
        v22 = v21 & 0x3FFFFFFFFFFFFFE0;
        v23 = (int8x16x4_t *)&v11[v18 + 16];
        v24 = (char *)__s + v15 + 16;
        v25 = v21 & 0x3FFFFFFFFFFFFFE0;
        do
        {
          *(_QWORD *)&v26 = vqtbl4q_s8(v23[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
          *(_QWORD *)&v27 = vqtbl4q_s8(*v23, (int8x16_t)xmmword_18125CFF0).u64[0];
          *((_QWORD *)&v26 + 1) = vqtbl4q_s8(v23[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
          *((_QWORD *)&v27 + 1) = vqtbl4q_s8(v23[1], (int8x16_t)xmmword_18125CFF0).u64[0];
          *(v24 - 1) = v26;
          *v24 = v27;
          v23 += 4;
          v24 += 2;
          v25 -= 32;
        }
        while (v25);
        if (v21 == v22)
          goto LABEL_23;
        if ((v21 & 0x18) != 0)
        {
LABEL_17:
          v17 += v21 & 0x3FFFFFFFFFFFFFF8;
          v12 += v21 & 0x3FFFFFFFFFFFFFF8;
          v28 = (int8x16x4_t *)&v11[v22 + v18];
          v29 = &v16[v22 + v15];
          v30 = v22 - (v21 & 0x3FFFFFFFFFFFFFF8);
          do
          {
            *(_QWORD *)v29 = vqtbl4q_s8(*v28, (int8x16_t)xmmword_18125D000).u64[0];
            v29 += 8;
            ++v28;
            v30 += 8;
          }
          while (v30);
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFF8))
            goto LABEL_23;
          goto LABEL_22;
        }
        v12 += v22;
        v17 += v22;
      }
    }
    do
    {
LABEL_22:
      v31 = *v12++;
      *v17++ = v31;
    }
    while (v12 != (uint64_t *)v13);
LABEL_23:
    v15 = v61;
    goto LABEL_24;
  }
  v15 = 0;
  if ((_DWORD)v7 != a4)
    goto LABEL_8;
LABEL_24:
  v32 = (const char *)(v15 + v14);
  *(_QWORD *)&v61 = v32;
  v33 = *(_QWORD *)(a2 + 712);
  if (((unint64_t)(*(_QWORD *)(a2 + 720) - v33) >> 5) <= **(_QWORD **)a3
    || (v34 = *(unsigned __int8 **)(v33 + 32 * **(_QWORD **)a3 + 16)) == 0)
  {
    v57[0] = "Invalid record";
    v58 = 259;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v56;
    v8 = __s;
    if (__s == v62)
      return;
    goto LABEL_32;
  }
  v35 = (const char *)__s;
  if (v32)
  {
    v36 = memchr(__s, 0, (size_t)v32);
    if (v36)
    {
      if (v36 - v35 != -1)
      {
        v57[0] = "Invalid value name";
        v58 = 259;
        *(_BYTE *)(a1 + 8) |= 1u;
        *(_QWORD *)a1 = v55;
        v8 = __s;
        if (__s == v62)
          return;
        goto LABEL_32;
      }
    }
  }
  v58 = 261;
  v57[0] = v35;
  v57[1] = v32;
  llvm::Value::setName((llvm::Value *)v34, v57);
  v37 = v34[16];
  if (v37 > 3 || v37 == 1)
    goto LABEL_51;
  v39 = *(_QWORD *)(a2 + 816);
  v40 = *(unsigned int *)(a2 + 832);
  if ((_DWORD)v40)
  {
    LODWORD(v41) = (v40 - 1) & ((v34 >> 4) ^ (v34 >> 9));
    v42 = (unsigned __int8 **)(v39 + 8 * v41);
    v43 = *v42;
    if (*v42 == v34)
      goto LABEL_45;
    v44 = 1;
    while (v43 != (unsigned __int8 *)-4096)
    {
      v45 = v41 + v44++;
      v41 = v45 & (v40 - 1);
      v43 = *(unsigned __int8 **)(v39 + 8 * v41);
      if (v43 == v34)
      {
        v42 = (unsigned __int8 **)(v39 + 8 * v41);
        goto LABEL_45;
      }
    }
  }
  v42 = (unsigned __int8 **)(v39 + 8 * v40);
LABEL_45:
  if (v42 != (unsigned __int8 **)(v39 + 8 * v40))
  {
    v46 = *(_DWORD *)(a5 + 44);
    v47 = v46 > 9;
    v48 = (1 << v46) & 0x324;
    if (v47 || v48 == 0)
    {
      v50 = *(_QWORD *)(a2 + 432);
      Name = (int8x16_t *)llvm::Value::getName((llvm::Value *)v34);
      inserted = (const void **)llvm::Module::getOrInsertComdat(v50, Name, v52);
      llvm::GlobalObject::setComdat((llvm::GlobalObject *)v34, inserted);
    }
  }
LABEL_51:
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = v34;
  v8 = __s;
  if (__s == v62)
    return;
LABEL_32:
  free(v8);
}

_QWORD *`anonymous namespace'::BitcodeReader::setDeferredFunctionInfo(_QWORD *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v5 = result;
  v6 = 32 * *(_QWORD *)(a4 + 8) - 32;
  v7 = v6 + a2;
  v8 = *((_DWORD *)result + 396);
  if (!v8)
    goto LABEL_23;
  v9 = result[196];
  v10 = v8 - 1;
  v11 = (v8 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v12 = (_QWORD *)(v9 + 16 * v11);
  v13 = *v12;
  if (*v12 == a3)
    goto LABEL_17;
  v14 = 0;
  v15 = 1;
  while (v13 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v13 == -8192;
    if (v16)
      v14 = v12;
    v17 = v11 + v15++;
    v11 = v17 & v10;
    v12 = (_QWORD *)(v9 + 16 * (v17 & v10));
    v13 = *v12;
    if (*v12 == a3)
      goto LABEL_17;
  }
  if (v14)
    v12 = v14;
  v19 = *((_DWORD *)result + 394);
  if (4 * v19 + 4 < 3 * v8)
  {
    if (v8 + ~v19 - *((_DWORD *)result + 395) > v8 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_23:
    v8 *= 2;
  }
  result = llvm::DenseMap<void *,long long,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,long long>>::grow((uint64_t)(result + 196), v8);
  v20 = v5[196];
  v21 = *((_DWORD *)v5 + 396) - 1;
  v22 = v21 & ((a3 >> 4) ^ (a3 >> 9));
  v12 = (_QWORD *)(v20 + 16 * v22);
  v23 = *v12;
  if (*v12 == a3)
  {
LABEL_25:
    ++*((_DWORD *)v5 + 394);
    if (a3 == -4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v24 = 0;
  v25 = 1;
  while (v23 != -4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == -8192;
    if (v26)
      v24 = v12;
    v27 = v22 + v25++;
    v22 = v27 & v21;
    v12 = (_QWORD *)(v20 + 16 * (v27 & v21));
    v23 = *v12;
    if (*v12 == a3)
      goto LABEL_25;
  }
  if (v24)
    v12 = v24;
LABEL_14:
  v18 = *v12;
  ++*((_DWORD *)v5 + 394);
  if (v18 != -4096)
LABEL_15:
    --*((_DWORD *)v5 + 395);
LABEL_16:
  *v12 = a3;
  v12[1] = 0;
LABEL_17:
  v12[1] = v7;
  if (v6 > v5[56])
    v5[56] = v6;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::InsertIntoBucket<llvm::Use const*>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::grow(a1, v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 16;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = v11 + 16 * v14;
  v15 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = v11 + 16 * (v19 & v13);
      v15 = *(_QWORD *)a2;
      if (*a3 == *(_QWORD *)a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(_QWORD *)a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *(_QWORD *)a2 = *a3;
  *(_DWORD *)(a2 + 8) = 0;
  return a2;
}

int *llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  _QWORD v30[31];

  v30[30] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v26 = a2;
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v26;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v27 = (char *)(16 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v27[(_QWORD)v6]);
    llvm::deallocate_buffer((llvm *)v6, v27);
  }
  v8 = &v28;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 8);
    v29 = *(_DWORD *)(a1 + 16);
    v8 = v30;
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v10 = *(_QWORD *)(a1 + 40);
      if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_31;
    }
  }
  *v8 = v9;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 32);
  v8 += 2;
  v10 = *(_QWORD *)(a1 + 40);
  if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v11 = *(_QWORD *)(a1 + 56);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  *v8 = v10;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 48);
  v8 += 2;
  v11 = *(_QWORD *)(a1 + 56);
  if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    v12 = *(_QWORD *)(a1 + 72);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  *v8 = v11;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 64);
  v8 += 2;
  v12 = *(_QWORD *)(a1 + 72);
  if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_13:
    v13 = *(_QWORD *)(a1 + 88);
    if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  *v8 = v12;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 80);
  v8 += 2;
  v13 = *(_QWORD *)(a1 + 88);
  if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_14:
    v14 = *(_QWORD *)(a1 + 104);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  *v8 = v13;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 96);
  v8 += 2;
  v14 = *(_QWORD *)(a1 + 104);
  if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_15:
    v15 = *(_QWORD *)(a1 + 120);
    if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  *v8 = v14;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 112);
  v8 += 2;
  v15 = *(_QWORD *)(a1 + 120);
  if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_16:
    v16 = *(_QWORD *)(a1 + 136);
    if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  *v8 = v15;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 128);
  v8 += 2;
  v16 = *(_QWORD *)(a1 + 136);
  if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_17:
    v17 = *(_QWORD *)(a1 + 152);
    if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  *v8 = v16;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 144);
  v8 += 2;
  v17 = *(_QWORD *)(a1 + 152);
  if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_18:
    v18 = *(_QWORD *)(a1 + 168);
    if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  *v8 = v17;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 160);
  v8 += 2;
  v18 = *(_QWORD *)(a1 + 168);
  if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_19:
    v19 = *(_QWORD *)(a1 + 184);
    if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  *v8 = v18;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 176);
  v8 += 2;
  v19 = *(_QWORD *)(a1 + 184);
  if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_20:
    v20 = *(_QWORD *)(a1 + 200);
    if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  *v8 = v19;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 192);
  v8 += 2;
  v20 = *(_QWORD *)(a1 + 200);
  if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_21:
    v21 = *(_QWORD *)(a1 + 216);
    if ((v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  *v8 = v20;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 208);
  v8 += 2;
  v21 = *(_QWORD *)(a1 + 216);
  if ((v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_22:
    v22 = *(_QWORD *)(a1 + 232);
    if ((v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  *v8 = v21;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 224);
  v8 += 2;
  v22 = *(_QWORD *)(a1 + 232);
  if ((v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_23:
    v23 = *(_QWORD *)(a1 + 248);
    if ((v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_24;
LABEL_44:
    *v8 = v23;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 256);
    v8 += 2;
    if (a2 < 0x11)
      return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets((int *)a1, &v28, v8);
    goto LABEL_25;
  }
LABEL_43:
  *v8 = v22;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a1 + 240);
  v8 += 2;
  v23 = *(_QWORD *)(a1 + 248);
  if ((v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
    goto LABEL_44;
LABEL_24:
  if (a2 >= 0x11)
  {
LABEL_25:
    *(_DWORD *)a1 &= ~1u;
    v24 = a2;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v24;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets((int *)a1, &v28, v8);
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int *v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 66;
    v5 = result + 2;
    v7 = 240;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_11;
    v5 = (int *)*((_QWORD *)result + 1);
    v6 = &v5[4 * v4];
    v7 = (char *)v6 - (char *)v5 - 16;
    if (v7 < 0x10)
    {
      v9 = (int *)*((_QWORD *)result + 1);
      do
      {
LABEL_10:
        *(_QWORD *)v9 = -4096;
        v9 += 4;
      }
      while (v9 != v6);
      goto LABEL_11;
    }
  }
  v8 = (v7 >> 4) + 1;
  v9 = &v5[4 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
  v10 = v5 + 4;
  v11 = v8 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = -4096;
    *v10 = -4096;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  while (a2 != a3)
  {
    v18 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v13 = 16;
        v12 = result + 2;
      }
      else
      {
        v12 = (int *)*((_QWORD *)result + 1);
        v13 = result[4];
      }
      v14 = v13 - 1;
      v15 = (v13 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v16 = (uint64_t *)&v12[4 * v15];
      v17 = *v16;
      if (v18 != *v16)
      {
        v19 = 0;
        v20 = 1;
        while (v17 != -4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v17 == -8192;
          if (v21)
            v19 = v16;
          v22 = v15 + v20++;
          v15 = v22 & v14;
          v16 = (uint64_t *)&v12[4 * (v22 & v14)];
          v17 = *v16;
          if (v18 == *v16)
            goto LABEL_15;
        }
        if (v19)
          v16 = v19;
      }
LABEL_15:
      *v16 = v18;
      *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::insert<unsigned int const*,void>(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  int v42;
  char *__srca;

  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 2;
  v10 = *(unsigned int *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 8);
  v12 = a4 - __src;
  v13 = (a4 - __src) >> 2;
  v14 = v13 + v10;
  if (*(_QWORD *)a1 + 4 * v10 != a2)
  {
    if (v14 > v9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v14, 4);
      v7 = *(_QWORD *)a1;
      v10 = *(unsigned int *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 8);
    }
    v15 = (char *)(v7 + 4 * v10);
    __srca = (char *)(v7 + 4 * v8);
    v16 = v15 - __srca;
    v17 = (v15 - __srca) >> 2;
    if (v17 < v13)
    {
      v18 = v11 + (v12 >> 2);
      *(_DWORD *)(a1 + 8) = v18;
      if (v8 == v10)
      {
        v19 = __src;
        v21 = v7 + 4 * v8;
        v20 = a4;
        goto LABEL_35;
      }
      v21 = v7 + 4 * v8;
      memcpy((void *)(v7 + 4 * v18 - 4 * v17), __srca, v16);
      if (v16 < 0x20 || (unint64_t)(__srca - __src) < 0x20)
      {
        v28 = (char *)(v7 + 4 * v8);
        v29 = (v15 - __srca) >> 2;
        v19 = __src;
        v20 = a4;
      }
      else
      {
        v27 = 4 * (v17 & 0xFFFFFFFFFFFFFFF8);
        v28 = &__srca[v27];
        v29 = (v16 >> 2) & 7;
        v19 = &__src[v27];
        v30 = (__int128 *)(__src + 16);
        v31 = (_OWORD *)(v7 + 4 * v8 + 16);
        v32 = v17 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 8;
        }
        while (v32);
        v20 = a4;
        if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_35:
          if (v19 != v20)
            memcpy(v15, v19, v20 - v19);
          return v21;
        }
      }
      do
      {
        v42 = *(_DWORD *)v19;
        v19 += 4;
        *(_DWORD *)v28 = v42;
        v28 += 4;
        --v29;
      }
      while (v29);
      goto LABEL_35;
    }
    v22 = 4 * v13;
    v23 = v10;
    if (v13 + v10 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v13 + v10, 4);
      v23 = *(unsigned int *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 8);
    }
    v24 = &v15[-v22];
    if (a4 == __src)
      goto LABEL_29;
    v25 = (_DWORD *)(*(_QWORD *)a1 + 4 * v23);
    if (v12 - 4 >= 0x3C)
    {
      v34 = 4 * v23 + *(_QWORD *)a1;
      v26 = &v15[-v22];
      if ((v12 & 0xFFFFFFFFFFFFFFFCLL) - v7 - 4 * v10 + v34 >= 0x20)
      {
        v35 = ((v12 - 4) >> 2) + 1;
        v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        v25 = (_DWORD *)((char *)v25 + v36);
        v26 = &v24[v36];
        v37 = (__int128 *)(4 * v10 - 4 * v13 + v7 + 16);
        v38 = (_OWORD *)(v34 + 16);
        v39 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 8;
        }
        while (v39);
        if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_28;
      }
    }
    else
    {
      v26 = &v15[-v22];
    }
    do
    {
      v41 = *(_DWORD *)v26;
      v26 += 4;
      *v25++ = v41;
    }
    while (v26 != v15);
LABEL_28:
    v11 = *(_DWORD *)(a1 + 8);
LABEL_29:
    *(_DWORD *)(a1 + 8) = v11 + (v22 >> 2);
    v21 = v7 + 4 * v8;
    if (v24 != __srca)
      memmove(&__srca[v22], __srca, &v15[-v22] - __srca);
    if (a4 != __src)
      memmove(__srca, __src, v12);
    return v21;
  }
  if (v14 > v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v14, 4);
    v11 = *(_DWORD *)(a1 + 8);
    v7 = *(_QWORD *)a1;
  }
  if (__src != a4)
  {
    memcpy((void *)(v7 + 4 * v11), __src, v12);
    v11 = *(_DWORD *)(a1 + 8);
    v7 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 8) = v11 + (v12 >> 2);
  return v7 + 4 * v8;
}

char *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::InsertIntoBucket<unsigned int const&>(uint64_t a1, char *a2, _DWORD *a3)
{
  int v5;
  uint64_t v6;
  int v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _DWORD *buffer;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  char *v24;
  int v25;
  BOOL v26;
  int v27;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v8 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    v8 = *(_DWORD *)(a1 + 16);
  }
  v9 = *(int **)a1;
  v10 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  buffer = llvm::allocate_buffer(32 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v9)
  {
    v15 = (char *)(32 * v6);
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::moveFromOldBuckets(a1, v9, (int *)&v15[(_QWORD)v9]);
    llvm::deallocate_buffer((llvm *)v9, v15);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = buffer;
    if (((v16 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_35;
    v18 = ((v16 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v17 = &buffer[8 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    v19 = buffer + 8;
    v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 8) = -1;
      *v19 = -1;
      v19 += 16;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_35:
      do
      {
        *v17 = -1;
        v17 += 8;
      }
      while (v17 != &buffer[8 * v16]);
    }
    v21 = v16 - 1;
    v22 = (37 * *a3) & v21;
    a2 = (char *)&buffer[8 * v22];
    v23 = *(_DWORD *)a2;
    if (*a3 != *(_DWORD *)a2)
    {
      v24 = 0;
      v25 = 1;
      while (v23 != -1)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v23 == -2;
        if (v26)
          v24 = a2;
        v27 = v22 + v25++;
        v22 = v27 & v21;
        a2 = (char *)&buffer[8 * v22];
        v23 = *(_DWORD *)a2;
        if (*a3 == *(_DWORD *)a2)
          goto LABEL_3;
      }
      if (v24)
        a2 = v24;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a2 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = *a3;
  *((_QWORD *)a2 + 1) = a2 + 24;
  *((_QWORD *)a2 + 2) = 0x100000000;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::moveFromOldBuckets(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = (v6 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0xFFFFFFFFFFFFFFELL;
      v11 = &v7[8 * v10];
      v12 = v7 + 8;
      v13 = v10;
      do
      {
        *(v12 - 8) = -1;
        *v12 = -1;
        v12 += 16;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_DWORD **)a1;
    }
    v14 = &v7[8 * v6];
    do
    {
      *v11 = -1;
      v11 += 8;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        v16 = *(_DWORD *)(a1 + 16) - 1;
        v17 = v16 & (37 * v15);
        v18 = *(_QWORD *)a1 + 32 * v17;
        v19 = *(_DWORD *)v18;
        if (v15 != *(_DWORD *)v18)
        {
          v21 = 0;
          v22 = 1;
          while (v19 != -1)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v19 == -2;
            if (v23)
              v21 = v18;
            v24 = v17 + v22++;
            v17 = v24 & v16;
            v18 = *(_QWORD *)a1 + 32 * v17;
            v19 = *(_DWORD *)v18;
            if (v15 == *(_DWORD *)v18)
              goto LABEL_15;
          }
          if (v21)
            v18 = v21;
        }
LABEL_15:
        *(_DWORD *)v18 = v15;
        *(_QWORD *)(v18 + 8) = v18 + 24;
        *(_QWORD *)(v18 + 16) = 0x100000000;
        if (v4[4])
          llvm::SmallVectorImpl<unsigned int>::operator=(v18 + 8, (uint64_t)(v4 + 2));
        ++*(_DWORD *)(a1 + 8);
        v20 = (int *)*((_QWORD *)v4 + 1);
        if (v20 != v4 + 6)
          free(v20);
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096 || *(_DWORD *)(a4 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  _QWORD *v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181283AA0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181283AA0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            v22 = *(_DWORD *)(v21 + 8);
            if ((*(_QWORD *)v21 != -4096 || v22 != -1) && (*(_QWORD *)v21 != -8192 || v22 != -2))
            {
              v30 = 0;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)a1, v21, (uint64_t *)&v30);
              v25 = v30;
              *v30 = *(_QWORD *)v21;
              *((_DWORD *)v25 + 2) = *(_DWORD *)(v21 + 8);
              *((_DWORD *)v25 + 4) = *(_DWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_181283AA0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_32:
      v29 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181283AA0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v29);
      return result;
    }
    v26 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL));
    v27 = v26 & 0x1FFFFFFFFFFFFFFELL;
    v28 = result;
    do
    {
      *v28 = xmmword_181283AA0;
      *(_OWORD *)((char *)v28 + 24) = xmmword_181283AA0;
      v28 += 3;
      v27 -= 2;
    }
    while (v27);
    if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_32;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      result = 0;
      *a3 = 0;
      return result;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
     + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
  v11 = v4 - 1;
  v12 = (v4 - 1) & v10;
  v13 = (_QWORD *)(v3 + 24 * v12);
  v15 = *v13;
  v14 = v13[1];
  if (v5 == *v13 && v6 == v14)
  {
    result = 1;
    *a3 = v13;
  }
  else
  {
    v17 = 0;
    v18 = 1;
    result = 1;
    while (v15 != -4096 || v14 != -4096)
    {
      if (v17)
        v20 = 0;
      else
        v20 = v14 == -8192;
      if (v20 && v15 == -8192)
        v17 = v13;
      v22 = v12 + v18++;
      v12 = v22 & v11;
      v13 = (_QWORD *)(v3 + 24 * (v22 & v11));
      v15 = *v13;
      v14 = v13[1];
      if (v5 == *v13 && v6 == v14)
      {
        *a3 = v13;
        return result;
      }
    }
    result = 0;
    if (v17)
      v13 = v17;
    *a3 = v13;
  }
  return result;
}

uint64_t llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::try_emplace<llvm::BasicBlock *>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;

  v20 = *a2;
  LODWORD(v21) = 0;
  v19 = 0;
  if ((llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(a1, (uint64_t *)&v20, &v19) & 1) != 0)return *(_QWORD *)(a1 + 104) + 24 * *((unsigned int *)v19 + 4);
  v7 = llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::InsertIntoBucketImpl<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>((_DWORD *)a1, (uint64_t)&v20, (uint64_t *)&v20, v19);
  *(_OWORD *)v7 = v20;
  *((_DWORD *)v7 + 4) = v21;
  v8 = (_QWORD *)(a1 + 104);
  v9 = *(unsigned int *)(a1 + 112);
  *((_DWORD *)v7 + 4) = v9;
  if (v9 >= *(_DWORD *)(a1 + 116))
  {
    v20 = *a2;
    v21 = *a3;
    v12 = v9 + 1;
    v13 = *v8 + 24 * (unint64_t)v9 > (unint64_t)&v20;
    if (*v8 <= (unint64_t)&v20 && v13)
    {
      v18 = (char *)&v20 - *v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, (void *)(a1 + 120), v12, 24);
      v14 = *(_QWORD *)(a1 + 104);
      v15 = &v18[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, (void *)(a1 + 120), v12, 24);
      v14 = *(_QWORD *)(a1 + 104);
      v15 = (char *)&v20;
    }
    v16 = v14 + 24 * *(unsigned int *)(a1 + 112);
    v17 = *(_OWORD *)v15;
    *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 + 2);
    *(_OWORD *)v16 = v17;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 104) + 24 * v9;
    *(_OWORD *)v10 = *a2;
    *(_QWORD *)(v10 + 16) = *a3;
  }
  v11 = *(_DWORD *)(a1 + 112) + 1;
  *(_DWORD *)(a1 + 112) = v11;
  return *v8 + 24 * v11 - 24;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::InsertIntoBucketImpl<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(_DWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    *a1 += 2;
    if (*a4 != -4096)
      goto LABEL_11;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::grow((uint64_t)a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>((uint64_t)a1, a3, &v9);
  a4 = v9;
  *a1 += 2;
  if (*a4 != -4096)
    goto LABEL_11;
LABEL_7:
  if (a4[1] == -4096)
    return a4;
LABEL_11:
  --a1[1];
  return a4;
}

uint64_t llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  llvm *v8;
  int64x2_t *v9;
  uint64_t v10;
  llvm *v11;
  int64x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t *v16;
  int64x2_t *v17;
  int64x2_t *buffer;
  int v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int64x2_t *v32;
  unint64_t v33;
  unint64_t v34;
  int64x2_t *v35;
  int64x2_t v36;
  uint64_t v37;
  int64x2_t v38;
  int64x2_t *v39;
  _QWORD *v40;
  uint64_t v41;
  int64x2_t v42;
  llvm *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int64x2_t v47;
  int v48;
  _QWORD v49[11];

  v2 = result;
  v49[10] = *MEMORY[0x1E0C80C00];
  v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
  v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
  if ((v5 + 1) > 0x40)
    v6 = v5 + 1;
  else
    v6 = 64;
  if (a2 >= 5)
    v7 = v6;
  else
    v7 = a2;
  if ((*(_BYTE *)result & 1) == 0)
  {
    v9 = (int64x2_t *)(result + 8);
    v8 = *(llvm **)(result + 8);
    v10 = *(unsigned int *)(result + 16);
    if (v7 > 4)
    {
      buffer = (int64x2_t *)llvm::allocate_buffer(8 * (v7 + 2 * v7), (std::align_val_t)8uLL);
      *(_QWORD *)(v2 + 8) = buffer;
      *(_QWORD *)(v2 + 16) = v7;
      v19 = *(_DWORD *)v2;
      v11 = (llvm *)((char *)v8 + 24 * v10);
      *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
      if ((v19 & 1) != 0)
      {
        v12 = (int64x2_t *)(v2 + 104);
        v13 = 72;
      }
      else
      {
        v12 = (int64x2_t *)((char *)buffer + 24 * v7);
        v9 = buffer;
        v13 = 24 * v7 - 24;
        if (v13 < 0x18)
        {
          v21 = buffer;
          goto LABEL_61;
        }
      }
    }
    else
    {
      v11 = (llvm *)((char *)v8 + 24 * v10);
      *(_QWORD *)result = 1;
      v12 = (int64x2_t *)(result + 104);
      v13 = 72;
    }
    v20 = v13 / 0x18 + 1;
    v21 = (int64x2_t *)((char *)v9 + 24 * (v20 & 0x1FFFFFFFFFFFFFFELL));
    v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v23 = v20 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *v9 = v22;
      *(int64x2_t *)((char *)v9 + 24) = v22;
      v9 += 3;
      v23 -= 2;
    }
    while (v23);
    if (v20 == (v20 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_63:
      if ((_DWORD)v10)
      {
        v43 = v8;
        do
        {
          v45 = *((_QWORD *)v43 + 1);
          if ((*(_QWORD *)v43 != -4096 || v45 != -4096) && (*(_QWORD *)v43 != -8192 || v45 != -8192))
          {
            v47.i64[0] = 0;
            llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(v2, (uint64_t *)v43, &v47);
            v44 = v47.i64[0];
            *(_QWORD *)v47.i64[0] = *(_QWORD *)v43;
            *(_QWORD *)(v44 + 8) = *((_QWORD *)v43 + 1);
            *(_DWORD *)(v44 + 16) = *((_DWORD *)v43 + 4);
            *(_DWORD *)v2 += 2;
          }
          v43 = (llvm *)((char *)v43 + 24);
        }
        while (v43 != v11);
      }
      llvm::deallocate_buffer(v8, (void *)(24 * v10));
    }
LABEL_61:
    v42 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v21 = v42;
      v21 = (int64x2_t *)((char *)v21 + 24);
    }
    while (v21 != v12);
    goto LABEL_63;
  }
  v15 = *(_QWORD *)(result + 8);
  v14 = *(_QWORD *)(result + 16);
  v16 = (int64x2_t *)(result + 8);
  if (v15 == -4096 && v14 == -4096)
  {
    v17 = &v47;
  }
  else
  {
    v17 = &v47;
    if (v15 != -8192 || v14 != -8192)
    {
      v47 = *v16;
      v48 = *(_DWORD *)(result + 24);
      v17 = (int64x2_t *)v49;
    }
  }
  v25 = *(_QWORD *)(result + 32);
  v24 = *(_QWORD *)(result + 40);
  if ((v25 != -4096 || v24 != -4096) && (v25 != -8192 || v24 != -8192))
  {
    *v17 = *(int64x2_t *)(result + 32);
    v17[1].i32[0] = *(_DWORD *)(result + 48);
    v17 = (int64x2_t *)((char *)v17 + 24);
  }
  v27 = *(_QWORD *)(result + 56);
  v26 = *(_QWORD *)(result + 64);
  if ((v27 != -4096 || v26 != -4096) && (v27 != -8192 || v26 != -8192))
  {
    *v17 = *(int64x2_t *)(result + 56);
    v17[1].i32[0] = *(_DWORD *)(result + 72);
    v17 = (int64x2_t *)((char *)v17 + 24);
  }
  v29 = *(_QWORD *)(result + 80);
  v28 = *(_QWORD *)(result + 88);
  if ((v29 != -4096 || v28 != -4096) && (v29 != -8192 || v28 != -8192))
  {
    *v17 = *(int64x2_t *)(result + 80);
    v17[1].i32[0] = *(_DWORD *)(result + 96);
    v17 = (int64x2_t *)((char *)v17 + 24);
  }
  v30 = *(_DWORD *)result;
  if (v7 >= 5)
  {
    *(_DWORD *)result = v30 & 0xFFFFFFFE;
    result = (uint64_t)llvm::allocate_buffer(8 * (v7 + 2 * v7), (std::align_val_t)8uLL);
    *(_QWORD *)(v2 + 8) = result;
    *(_QWORD *)(v2 + 16) = v7;
    v30 = *(_DWORD *)v2;
  }
  *(_QWORD *)v2 = v30 & 1;
  if ((v30 & 1) != 0)
  {
    v32 = (int64x2_t *)(v2 + 104);
    v33 = 72;
  }
  else
  {
    v31 = *(_DWORD *)(v2 + 16);
    if (!v31)
      goto LABEL_50;
    v16 = *(int64x2_t **)(v2 + 8);
    v32 = (int64x2_t *)((char *)v16 + 24 * v31);
    v33 = (char *)v32 - (char *)v16 - 24;
    if (v33 < 0x18)
    {
      v35 = *(int64x2_t **)(v2 + 8);
LABEL_48:
      v38 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v35 = v38;
        v35 = (int64x2_t *)((char *)v35 + 24);
      }
      while (v35 != v32);
      goto LABEL_50;
    }
  }
  v34 = v33 / 0x18 + 1;
  v35 = (int64x2_t *)((char *)v16 + 24 * (v34 & 0x1FFFFFFFFFFFFFFELL));
  v36 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v37 = v34 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *v16 = v36;
    *(int64x2_t *)((char *)v16 + 24) = v36;
    v16 += 3;
    v37 -= 2;
  }
  while (v37);
  if (v34 != (v34 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_48;
LABEL_50:
  if (&v47 != v17)
  {
    v39 = &v47;
    do
    {
      v41 = v39->i64[1];
      if ((v39->i64[0] != -4096 || v41 != -4096) && (v39->i64[0] != -8192 || v41 != -8192))
      {
        v46 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(v2, v39->i64, &v46);
        v40 = v46;
        *v46 = v39->i64[0];
        v40[1] = v39->i64[1];
        *((_DWORD *)v40 + 4) = v39[1].i32[0];
        *(_DWORD *)v2 += 2;
      }
      v39 = (int64x2_t *)((char *)v39 + 24);
    }
    while (v39 != v17);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::InsertIntoBucket<llvm::BasicBlock *,llvm::Value *>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v10 = 4;
  else
    v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<llvm::BasicBlock *,llvm::DPMarker *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DPMarker *>>::grow(a1, v10);
  v13 = a1 + 8;
  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v14 = 4;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v13 = *(_QWORD *)(a1 + 8);
  }
  v11 = *(_DWORD *)a1 & 1;
  v15 = v14 - 1;
  v16 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v14 - 1);
  a2 = (_QWORD *)(v13 + 16 * v16);
  v17 = *a2;
  if (*a3 != *a2)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = a2;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      a2 = (_QWORD *)(v13 + 16 * (v21 & v15));
      v17 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v18)
      a2 = v18;
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  a2[1] = *a4;
  return a2;
}

std::string *std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__emplace_back_slow_path<std::string &,std::vector<llvm::Value *>>(std::string **a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::pointer data;
  std::string v22;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(48 * v8);
    v10 = (std::string *)&v9[48 * v3];
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_10;
  }
  else
  {
    v9 = 0;
    v10 = (std::string *)(16 * (((char *)a1[1] - (char *)*a1) >> 4));
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_10:
      v22 = *(std::string *)a2;
      goto LABEL_13;
    }
  }
  std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_13:
  v11 = (std::string *)&v9[48 * v8];
  v12 = *((_QWORD *)a3 + 2);
  v13 = &v9[48 * v3];
  v14 = *a3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *v10 = v22;
  *(_OWORD *)(v13 + 24) = v14;
  *((_QWORD *)v13 + 5) = v12;
  v15 = v10 + 2;
  v16 = *a1;
  v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = v10;
    a1[1] = v15;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = *(_OWORD *)&v17[-2].__r_.__value_.__l.__data_;
      v10[-2].__r_.__value_.__r.__words[2] = v17[-2].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v18;
      v17[-2].__r_.__value_.__l.__size_ = 0;
      v17[-2].__r_.__value_.__r.__words[2] = 0;
      v17[-2].__r_.__value_.__r.__words[0] = 0;
      v10[-1].__r_.__value_.__l.__size_ = 0;
      v10[-1].__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = *(_OWORD *)&v17[-1].__r_.__value_.__l.__data_;
      v10[-1].__r_.__value_.__r.__words[2] = v17[-1].__r_.__value_.__r.__words[2];
      v10 -= 2;
      v17[-1].__r_.__value_.__r.__words[0] = 0;
      v17[-1].__r_.__value_.__l.__size_ = 0;
      v17[-1].__r_.__value_.__r.__words[2] = 0;
      v17 -= 2;
    }
    while (v17 != v16);
    v17 = *a1;
    v19 = a1[1];
    *a1 = v10;
    a1[1] = v15;
    a1[2] = v11;
    while (v19 != v17)
    {
      data = v19[-1].__r_.__value_.__l.__data_;
      if (data)
      {
        v19[-1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        operator delete(data);
      }
      if (SHIBYTE(v19[-2].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19[-2].__r_.__value_.__l.__data_);
      v19 -= 2;
    }
  }
  if (v17)
    operator delete(v17);
  return v15;
}

void std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__append(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  char *v23;
  uint64_t v24;

  v4 = a1[1];
  v5 = a1[2];
  if (a2 <= (v5 - (_BYTE *)v4) >> 5)
  {
    if (a2)
    {
      v11 = &v4[4 * a2];
      do
      {
        v4[1] = 0;
        v4[2] = 0;
        *v4 = 6;
        *((_DWORD *)v4 + 6) = 0;
        v4 += 4;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = ((char *)v4 - (_BYTE *)*a1) >> 5;
    v7 = v6 + a2;
    if ((v6 + a2) >> 59)
      abort();
    v8 = v5 - (_BYTE *)*a1;
    if (v8 >> 4 > v7)
      v7 = v8 >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 >> 59)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[32 * v6];
    v13 = &v12[32 * a2];
    v14 = v12;
    do
    {
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = 6;
      *((_DWORD *)v14 + 6) = 0;
      v14 += 32;
    }
    while (v14 != v13);
    v15 = &v10[32 * v9];
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
    }
    else
    {
      v18 = 0;
      do
      {
        *(_QWORD *)&v12[v18 - 32] = 6;
        v19 = (unint64_t *)&v12[v18 - 32];
        v20 = &v16[v18];
        v21 = *(_QWORD *)&v16[v18 - 16];
        v19[1] = 0;
        v19[2] = v21;
        if (v21 != -8192 && v21 != -4096 && v21 != 0)
          llvm::ValueHandleBase::AddToExistingUseList(v19, *((_QWORD *)v20 - 4) & 0xFFFFFFFFFFFFFFF8);
        *(_DWORD *)&v12[v18 - 8] = *((_DWORD *)v20 - 2);
        v18 -= 32;
      }
      while (&v16[v18] != v17);
      v16 = (char *)*a1;
      v23 = (char *)a1[1];
      *a1 = &v12[v18];
      a1[1] = v13;
      a1[2] = v15;
      while (v23 != v16)
      {
        v24 = *((_QWORD *)v23 - 2);
        v23 -= 32;
        if (v24 != -8192 && v24 != -4096 && v24 != 0)
          llvm::ValueHandleBase::RemoveFromUseList(v23);
      }
    }
    if (v16)
      operator delete(v16);
  }
}

void `anonymous namespace'::BitcodeReader::parseModule(uint64_t *a1, std::string::size_type a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::size_type v8;
  std::string::size_type v10;
  uint64_t v11;
  llvm::Twine *v12;
  llvm::BitstreamCursor *v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::BasicBlock *v20;
  llvm::BasicBlock *v21;
  int v22;
  char *v23;
  unint64_t v24;
  std::string::size_type v25;
  const char *v26;
  unint64_t v27;
  std::string::size_type v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::BasicBlock *v48;
  llvm::BasicBlock *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::BasicBlock *v52;
  llvm::BasicBlock *v53;
  llvm::BitstreamCursor *v54;
  void *v55;
  unsigned int v56;
  unsigned int v57;
  int8x8_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int *v64;
  BOOL v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  int8x8_t *v71;
  llvm::LLVMContext *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  void *v76;
  unint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  int v83;
  int8x8_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  char v92;
  unsigned int v93;
  int8x8_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  int *v99;
  unint64_t v100;
  unint64_t v101;
  int8x8_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  unsigned int v106;
  uint64_t v107;
  int *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned int v114;
  unsigned int v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int8x16_t v122;
  unint64_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int64x2_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int64x2_t v132;
  uint8x16_t v133;
  uint16x8_t v134;
  uint16x8_t v135;
  uint32x4_t v136;
  uint32x4_t v137;
  int8x16_t v138;
  uint64x2_t v139;
  uint64x2_t v140;
  uint64x2_t v141;
  uint64x2_t v142;
  uint64x2_t v143;
  uint64x2_t v144;
  uint64x2_t v145;
  uint64x2_t v146;
  int8x16_t v147;
  uint32x4_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  uint32x4_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int64x2_t v156;
  int8x16_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int8x16_t v160;
  uint64_t v161;
  unint64_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int8x16_t v166;
  uint8x8_t *v167;
  unint64_t v168;
  int8x16_t v169;
  int8x16_t v170;
  uint8x8_t v171;
  uint16x8_t v172;
  uint32x4_t v173;
  uint64x2_t v174;
  uint64x2_t v175;
  uint64x2_t v176;
  uint32x4_t v177;
  uint64x2_t v178;
  int8x16_t v179;
  int64x2_t v180;
  int8x16_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unsigned int v185;
  char v186;
  unint64_t v187;
  unint64_t v188;
  unsigned int v189;
  uint64_t v190;
  int *v191;
  unint64_t v192;
  BOOL v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unsigned __int8 *v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int8x16_t v210;
  unint64_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int64x2_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int64x2_t v220;
  uint8x16_t v221;
  uint16x8_t v222;
  uint16x8_t v223;
  uint32x4_t v224;
  uint32x4_t v225;
  int8x16_t v226;
  uint64x2_t v227;
  uint64x2_t v228;
  uint64x2_t v229;
  uint64x2_t v230;
  uint64x2_t v231;
  uint64x2_t v232;
  uint64x2_t v233;
  uint64x2_t v234;
  int8x16_t v235;
  uint32x4_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  uint32x4_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int64x2_t v244;
  int8x16_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int8x16_t v248;
  uint64_t v249;
  unint64_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int8x16_t v254;
  uint8x8_t *v255;
  unint64_t v256;
  int8x16_t v257;
  int8x16_t v258;
  uint8x8_t v259;
  uint16x8_t v260;
  uint32x4_t v261;
  uint64x2_t v262;
  uint64x2_t v263;
  uint64x2_t v264;
  uint32x4_t v265;
  uint64x2_t v266;
  int8x16_t v267;
  int64x2_t v268;
  int8x16_t v269;
  const std::error_category *v270;
  void **v271;
  int *v272;
  uint64_t **VoidTy;
  char *v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  int64_t v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int *v281;
  llvm::Type *v282;
  int v283;
  unsigned int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  std::string::size_type v289;
  uint64_t v290;
  std::string::size_type size;
  unint64_t v292;
  std::string::size_type v293;
  _BYTE *v294;
  unint64_t v295;
  uint64_t *v296;
  int v297;
  char *v298;
  uint64_t v299;
  int64x2_t v300;
  int64x2_t v301;
  int64x2_t v302;
  int64x2_t v303;
  int64x2_t v304;
  int64x2_t v305;
  int8x16_t v306;
  unint64_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int64x2_t v313;
  int8x16_t v314;
  int8x16_t v315;
  int64x2_t v316;
  uint8x16_t v317;
  uint16x8_t v318;
  uint16x8_t v319;
  uint32x4_t v320;
  uint32x4_t v321;
  int8x16_t v322;
  uint64x2_t v323;
  uint64x2_t v324;
  uint64x2_t v325;
  uint64x2_t v326;
  uint64x2_t v327;
  uint64x2_t v328;
  uint64x2_t v329;
  uint64x2_t v330;
  int8x16_t v331;
  uint32x4_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  uint32x4_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  int64x2_t v340;
  int8x16_t v341;
  int64x2_t v342;
  int64x2_t v343;
  int8x16_t v344;
  uint64_t v345;
  unint64_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int8x16_t v350;
  uint8x8_t *v351;
  unint64_t v352;
  int8x16_t v353;
  int8x16_t v354;
  uint8x8_t v355;
  uint16x8_t v356;
  uint32x4_t v357;
  uint64x2_t v358;
  uint64x2_t v359;
  uint64x2_t v360;
  uint32x4_t v361;
  uint64x2_t v362;
  int8x16_t v363;
  int64x2_t v364;
  int8x16_t v365;
  llvm::VectorType *v366;
  llvm::Type *v367;
  llvm::ScalableVectorType *v368;
  uint64_t v369;
  llvm::ArrayType *v370;
  llvm::Type *v371;
  llvm::ArrayType *v372;
  int v373;
  uint64_t v374;
  uint64_t **v375;
  uint64_t v376;
  llvm::PointerType *v377;
  llvm::Type *v378;
  llvm::PointerType **v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  std::string::size_type v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t *v391;
  int32x4_t *v392;
  unint64_t v393;
  char *v394;
  char *v395;
  unint64_t v396;
  uint64_t v397;
  unsigned int v398;
  llvm::FunctionType *v399;
  llvm::Type *v400;
  llvm::FunctionType *v401;
  uint64_t v402;
  unsigned int v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  int64x2_t v407;
  int64x2_t v408;
  int64x2_t v409;
  int64x2_t v410;
  int64x2_t v411;
  int64x2_t v412;
  int8x16_t v413;
  unint64_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int64x2_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int64x2_t v423;
  uint8x16_t v424;
  uint16x8_t v425;
  uint16x8_t v426;
  uint32x4_t v427;
  uint32x4_t v428;
  int8x16_t v429;
  uint64x2_t v430;
  uint64x2_t v431;
  uint64x2_t v432;
  uint64x2_t v433;
  uint64x2_t v434;
  uint64x2_t v435;
  uint64x2_t v436;
  uint64x2_t v437;
  int8x16_t v438;
  uint32x4_t v439;
  int8x16_t v440;
  int8x16_t v441;
  int8x16_t v442;
  uint32x4_t v443;
  int8x16_t v444;
  int8x16_t v445;
  int8x16_t v446;
  int64x2_t v447;
  int8x16_t v448;
  int8x8_t v449;
  int64x2_t v450;
  int64x2_t v451;
  int8x16_t v452;
  uint64_t v453;
  unint64_t v454;
  int64x2_t v455;
  int64x2_t v456;
  int64x2_t v457;
  int8x16_t v458;
  uint8x8_t *v459;
  unint64_t v460;
  int8x16_t v461;
  int8x16_t v462;
  uint8x8_t v463;
  uint16x8_t v464;
  uint32x4_t v465;
  uint64x2_t v466;
  uint64x2_t v467;
  uint64x2_t v468;
  uint32x4_t v469;
  uint64x2_t v470;
  int8x16_t v471;
  int64x2_t v472;
  int8x16_t v473;
  int8x8_t v474;
  std::string::size_type v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t *v478;
  int32x4_t *v479;
  unint64_t v480;
  char *v481;
  std::string::size_type v482;
  unint64_t v483;
  uint64_t *v484;
  int32x4_t *v485;
  unint64_t v486;
  char *v487;
  int v488;
  unsigned int v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  unint64_t v493;
  std::string::size_type v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t *v500;
  int32x4_t *v501;
  unint64_t v502;
  char *v503;
  unint64_t v504;
  uint64_t v505;
  int32x4_t *v506;
  int32x4_t *v507;
  uint64_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  uint64_t v513;
  int8x16x4_t *v514;
  _OWORD *v515;
  uint64_t v516;
  __int128 v517;
  __int128 v518;
  _QWORD *v519;
  uint64_t v520;
  int8x16x4_t *v521;
  int v522;
  uint64_t v523;
  uint64_t **v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unsigned int v529;
  unint64_t v530;
  uint64_t v531;
  int32x4_t *v532;
  int32x4_t *v533;
  uint64_t v534;
  int32x4_t v535;
  int32x4_t v536;
  int32x4_t v537;
  int32x4_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  int32x4_t *v542;
  int32x4_t *v543;
  uint64_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int32x4_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  int32x4_t *v552;
  int32x4_t *v553;
  uint64_t v554;
  int32x4_t v555;
  int32x4_t v556;
  int32x4_t v557;
  int32x4_t v558;
  uint64_t v559;
  unsigned int v560;
  uint64_t v561;
  void *v562;
  int v563;
  int v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  char *inserted;
  int v569;
  char *v570;
  int v571;
  BOOL v572;
  int v573;
  char *v574;
  void **v575;
  void *v576;
  char *v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  void *v581;
  unsigned int v582;
  unsigned int v583;
  int8x8_t v584;
  _QWORD *v585;
  unint64_t v586;
  unint64_t v587;
  unsigned int v588;
  uint64_t v589;
  int *v590;
  BOOL v591;
  unint64_t v592;
  unint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unsigned int v596;
  uint64_t *v597;
  int v598;
  int v599;
  int v600;
  void *v601;
  unint64_t v602;
  uint64_t v603;
  unsigned __int8 *v604;
  unsigned int v605;
  unint64_t v606;
  int *v607;
  unsigned int v608;
  int8x8_t v609;
  unsigned int v610;
  unint64_t v611;
  unint64_t v612;
  unsigned int v613;
  uint64_t v614;
  int *v615;
  unint64_t v616;
  int8x8_t v617;
  unint64_t v618;
  uint64_t v619;
  unsigned __int8 *v620;
  unsigned int v621;
  uint64_t v622;
  unint64_t v623;
  unsigned int v624;
  uint64_t v625;
  unsigned int v626;
  int v627;
  unsigned int v628;
  unint64_t TypeByID;
  std::string::size_type v630;
  uint64_t v631;
  size_t v632;
  uint64_t v633;
  unsigned int v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  __int16 v640;
  size_t v641;
  uint64_t v642;
  unsigned int v643;
  unsigned int v644;
  unint64_t v645;
  __int16 v646;
  uint64_t v647;
  uint64_t v648;
  char v649;
  unsigned int v650;
  char v651;
  unint64_t v652;
  unsigned int v653;
  unint64_t v654;
  unint64_t v655;
  unsigned int v656;
  uint64_t v657;
  int *v658;
  unint64_t v659;
  BOOL v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  uint64_t v664;
  unsigned __int8 *v665;
  unsigned int v666;
  unsigned int v667;
  uint64_t v668;
  int64x2_t v669;
  int64x2_t v670;
  int64x2_t v671;
  int64x2_t v672;
  int64x2_t v673;
  int64x2_t v674;
  int8x16_t v675;
  unint64_t v676;
  int8x16_t v677;
  int8x16_t v678;
  int8x16_t v679;
  int8x16_t v680;
  int8x16_t v681;
  int64x2_t v682;
  int8x16_t v683;
  int8x16_t v684;
  int64x2_t v685;
  uint8x16_t v686;
  uint16x8_t v687;
  uint16x8_t v688;
  uint32x4_t v689;
  uint32x4_t v690;
  int8x16_t v691;
  uint64x2_t v692;
  uint64x2_t v693;
  uint64x2_t v694;
  uint64x2_t v695;
  uint64x2_t v696;
  uint64x2_t v697;
  uint64x2_t v698;
  uint64x2_t v699;
  int8x16_t v700;
  uint32x4_t v701;
  int8x16_t v702;
  int8x16_t v703;
  int8x16_t v704;
  uint32x4_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int8x16_t v708;
  int64x2_t v709;
  int8x16_t v710;
  int64x2_t v711;
  int64x2_t v712;
  int8x16_t v713;
  uint64_t v714;
  unint64_t v715;
  int64x2_t v716;
  int64x2_t v717;
  int64x2_t v718;
  int8x16_t v719;
  uint8x8_t *v720;
  unint64_t v721;
  int8x16_t v722;
  int8x16_t v723;
  uint8x8_t v724;
  uint16x8_t v725;
  uint32x4_t v726;
  uint64x2_t v727;
  uint64x2_t v728;
  uint64x2_t v729;
  uint32x4_t v730;
  uint64x2_t v731;
  int8x16_t v732;
  int64x2_t v733;
  int8x16_t v734;
  int v735;
  unint64_t v736;
  unint64_t v737;
  uint64_t v738;
  unint64_t v739;
  int64x2_t v740;
  int64x2_t v741;
  int64x2_t v742;
  int64x2_t v743;
  int64x2_t v744;
  int64x2_t v745;
  int8x16_t v746;
  unint64_t v747;
  int8x16_t v748;
  int8x16_t v749;
  int8x16_t v750;
  int8x16_t v751;
  int8x16_t v752;
  int64x2_t v753;
  int8x16_t v754;
  int8x16_t v755;
  int64x2_t v756;
  uint8x16_t v757;
  uint16x8_t v758;
  uint16x8_t v759;
  uint32x4_t v760;
  uint32x4_t v761;
  int8x16_t v762;
  uint64x2_t v763;
  uint64x2_t v764;
  uint64x2_t v765;
  uint64x2_t v766;
  uint64x2_t v767;
  uint64x2_t v768;
  uint64x2_t v769;
  uint64x2_t v770;
  int8x16_t v771;
  uint32x4_t v772;
  int8x16_t v773;
  int8x16_t v774;
  int8x16_t v775;
  uint32x4_t v776;
  int8x16_t v777;
  int8x16_t v778;
  int8x16_t v779;
  int64x2_t v780;
  int8x16_t v781;
  int64x2_t v782;
  int64x2_t v783;
  int8x16_t v784;
  uint64_t v785;
  unint64_t v786;
  int64x2_t v787;
  int64x2_t v788;
  int64x2_t v789;
  int8x16_t v790;
  uint8x8_t *v791;
  unint64_t v792;
  int8x16_t v793;
  int8x16_t v794;
  uint8x8_t v795;
  uint16x8_t v796;
  uint32x4_t v797;
  uint64x2_t v798;
  uint64x2_t v799;
  uint64x2_t v800;
  uint32x4_t v801;
  uint64x2_t v802;
  int8x16_t v803;
  int64x2_t v804;
  int8x16_t v805;
  const std::error_category *v806;
  void **v807;
  llvm::AttrBuilder *v808;
  uint64_t *v809;
  uint64_t *v810;
  uint64_t **v811;
  uint64_t **v812;
  unsigned int v813;
  uint64_t *v814;
  uint64_t v815;
  uint64_t *v816;
  int64x2_t v817;
  int64x2_t v818;
  int64x2_t v819;
  int64x2_t v820;
  int64x2_t v821;
  int64x2_t v822;
  int8x16_t v823;
  unint64_t v824;
  int8x16_t v825;
  int8x16_t v826;
  int8x16_t v827;
  int8x16_t v828;
  int8x16_t v829;
  int64x2_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int64x2_t v833;
  uint8x16_t v834;
  uint16x8_t v835;
  uint16x8_t v836;
  uint32x4_t v837;
  uint32x4_t v838;
  int8x16_t v839;
  uint64x2_t v840;
  uint64x2_t v841;
  uint64x2_t v842;
  uint64x2_t v843;
  uint64x2_t v844;
  uint64x2_t v845;
  uint64x2_t v846;
  uint64x2_t v847;
  int8x16_t v848;
  uint32x4_t v849;
  int8x16_t v850;
  int8x16_t v851;
  int8x16_t v852;
  uint32x4_t v853;
  int8x16_t v854;
  int8x16_t v855;
  int8x16_t v856;
  int64x2_t v857;
  int8x16_t v858;
  int8x8_t v859;
  int64x2_t v860;
  int64x2_t v861;
  int8x16_t v862;
  uint64_t v863;
  unint64_t v864;
  int64x2_t v865;
  int64x2_t v866;
  int64x2_t v867;
  int8x16_t v868;
  uint8x8_t *v869;
  unint64_t v870;
  int8x16_t v871;
  int8x16_t v872;
  uint8x8_t v873;
  uint16x8_t v874;
  uint32x4_t v875;
  uint64x2_t v876;
  uint64x2_t v877;
  uint64x2_t v878;
  uint32x4_t v879;
  uint64x2_t v880;
  int8x16_t v881;
  int64x2_t v882;
  int8x16_t v883;
  int8x8_t v884;
  void *v885;
  void *v886;
  unsigned int v887;
  unsigned int v888;
  int8x8_t v889;
  _QWORD *v890;
  unint64_t v891;
  unint64_t v892;
  unsigned int v893;
  uint64_t v894;
  int *v895;
  BOOL v896;
  unint64_t v897;
  unint64_t v898;
  unint64_t v899;
  unint64_t v900;
  unsigned int v901;
  uint64_t *v902;
  int v903;
  unsigned int v904;
  unint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  unsigned int v909;
  int v910;
  uint64_t v911;
  unint64_t v912;
  unint64_t v913;
  unint64_t v914;
  __int16 v915;
  unint64_t v916;
  unint64_t v917;
  __int16 v918;
  unsigned int v919;
  uint64_t *v920;
  uint64_t v921;
  char v922;
  void *v923;
  unint64_t v924;
  uint64_t v925;
  unsigned __int8 *v926;
  unsigned int v927;
  unint64_t v928;
  int *v929;
  unsigned int v930;
  int8x8_t v931;
  unsigned int v932;
  unint64_t v933;
  unint64_t v934;
  unsigned int v935;
  uint64_t v936;
  int *v937;
  unint64_t v938;
  int8x8_t v939;
  unint64_t v940;
  uint64_t v941;
  unsigned __int8 *v942;
  unsigned int v943;
  uint64_t v944;
  unint64_t v945;
  unsigned int v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  _QWORD *v951;
  unsigned int *v952;
  uint64_t **v953;
  unsigned int v954;
  _QWORD *v955;
  uint64_t v956;
  uint64_t *v957;
  uint64_t v958;
  uint64_t v959;
  unsigned int v960;
  uint64_t v961;
  uint64_t v962;
  char v963;
  unsigned int v964;
  char v965;
  unint64_t v966;
  unsigned int v967;
  unint64_t v968;
  unint64_t v969;
  unsigned int v970;
  uint64_t v971;
  int *v972;
  unint64_t v973;
  BOOL v974;
  unint64_t v975;
  unint64_t v976;
  unint64_t v977;
  uint64_t v978;
  unsigned __int8 *v979;
  unsigned int v980;
  unsigned int v981;
  uint64_t v982;
  int64x2_t v983;
  int64x2_t v984;
  int64x2_t v985;
  int64x2_t v986;
  int64x2_t v987;
  int64x2_t v988;
  int8x16_t v989;
  unint64_t v990;
  int8x16_t v991;
  int8x16_t v992;
  int8x16_t v993;
  int8x16_t v994;
  int8x16_t v995;
  int64x2_t v996;
  int8x16_t v997;
  int8x16_t v998;
  int64x2_t v999;
  uint8x16_t v1000;
  uint16x8_t v1001;
  uint16x8_t v1002;
  uint32x4_t v1003;
  uint32x4_t v1004;
  int8x16_t v1005;
  uint64x2_t v1006;
  uint64x2_t v1007;
  uint64x2_t v1008;
  uint64x2_t v1009;
  uint64x2_t v1010;
  uint64x2_t v1011;
  uint64x2_t v1012;
  uint64x2_t v1013;
  int8x16_t v1014;
  uint32x4_t v1015;
  int8x16_t v1016;
  int8x16_t v1017;
  int8x16_t v1018;
  uint32x4_t v1019;
  int8x16_t v1020;
  int8x16_t v1021;
  int8x16_t v1022;
  int64x2_t v1023;
  int8x16_t v1024;
  int64x2_t v1025;
  int64x2_t v1026;
  int8x16_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  int64x2_t v1030;
  int64x2_t v1031;
  int64x2_t v1032;
  int8x16_t v1033;
  uint8x8_t *v1034;
  unint64_t v1035;
  int8x16_t v1036;
  int8x16_t v1037;
  uint8x8_t v1038;
  uint16x8_t v1039;
  uint32x4_t v1040;
  uint64x2_t v1041;
  uint64x2_t v1042;
  uint64x2_t v1043;
  uint32x4_t v1044;
  uint64x2_t v1045;
  int8x16_t v1046;
  int64x2_t v1047;
  int8x16_t v1048;
  int v1049;
  unint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  unint64_t v1053;
  uint64_t *v1054;
  uint64_t *v1055;
  uint64_t **v1056;
  unint64_t v1057;
  _QWORD *v1058;
  int64x2_t v1059;
  int64x2_t v1060;
  int64x2_t v1061;
  int64x2_t v1062;
  int64x2_t v1063;
  int64x2_t v1064;
  int8x16_t v1065;
  unint64_t v1066;
  int8x16_t v1067;
  int8x16_t v1068;
  int8x16_t v1069;
  int8x16_t v1070;
  int8x16_t v1071;
  int64x2_t v1072;
  int8x16_t v1073;
  int8x16_t v1074;
  int64x2_t v1075;
  uint8x16_t v1076;
  uint16x8_t v1077;
  uint16x8_t v1078;
  uint32x4_t v1079;
  uint32x4_t v1080;
  int8x16_t v1081;
  uint64x2_t v1082;
  uint64x2_t v1083;
  uint64x2_t v1084;
  uint64x2_t v1085;
  uint64x2_t v1086;
  uint64x2_t v1087;
  uint64x2_t v1088;
  uint64x2_t v1089;
  int8x16_t v1090;
  uint32x4_t v1091;
  int8x16_t v1092;
  int8x16_t v1093;
  int8x16_t v1094;
  uint32x4_t v1095;
  int8x16_t v1096;
  int8x16_t v1097;
  int8x16_t v1098;
  int64x2_t v1099;
  int8x16_t v1100;
  int64x2_t v1101;
  int64x2_t v1102;
  int8x16_t v1103;
  uint64_t v1104;
  unint64_t v1105;
  int64x2_t v1106;
  int64x2_t v1107;
  int64x2_t v1108;
  int8x16_t v1109;
  uint8x8_t *v1110;
  unint64_t v1111;
  int8x16_t v1112;
  int8x16_t v1113;
  uint8x8_t v1114;
  uint16x8_t v1115;
  uint32x4_t v1116;
  uint64x2_t v1117;
  uint64x2_t v1118;
  uint64x2_t v1119;
  uint32x4_t v1120;
  uint64x2_t v1121;
  int8x16_t v1122;
  int64x2_t v1123;
  int8x16_t v1124;
  uint64_t *v1125;
  uint64_t *v1126;
  uint64_t **v1127;
  unint64_t v1128;
  char *v1129;
  uint64_t v1130;
  unint64_t v1131;
  uint64_t v1132;
  unint64_t v1133;
  char *v1134;
  const std::error_category *v1135;
  void **v1136;
  char *v1137;
  uint64_t v1138;
  unint64_t v1139;
  uint64_t v1140;
  char *v1141;
  uint64_t **v1142;
  unint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t **v1146;
  char *v1147;
  uint64_t **v1148;
  uint64_t v1149;
  __int128 v1150;
  uint64_t *v1151;
  uint64_t **v1152;
  unint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t **v1156;
  char *v1157;
  uint64_t **v1158;
  uint64_t v1159;
  __int128 v1160;
  uint64_t *v1161;
  void *v1162;
  int64x2_t v1163;
  int64x2_t v1164;
  int64x2_t v1165;
  int8x16_t v1166;
  int8x16_t v1167;
  int64x2_t v1168;
  unint64_t v1169;
  int64x2_t v1170;
  int64x2_t v1171;
  int64x2_t v1172;
  int64x2_t v1173;
  int8x16_t v1174;
  int8x16_t v1175;
  int8x16_t v1176;
  int8x16_t v1177;
  int8x16_t v1178;
  int8x16_t v1179;
  uint8x16_t v1180;
  uint16x8_t v1181;
  uint16x8_t v1182;
  uint32x4_t v1183;
  uint32x4_t v1184;
  int8x16_t v1185;
  uint64x2_t v1186;
  uint64x2_t v1187;
  uint64x2_t v1188;
  uint64x2_t v1189;
  uint64x2_t v1190;
  uint64x2_t v1191;
  uint64x2_t v1192;
  uint64x2_t v1193;
  int8x16_t v1194;
  uint32x4_t v1195;
  int8x16_t v1196;
  int8x16_t v1197;
  int8x16_t v1198;
  uint32x4_t v1199;
  int8x16_t v1200;
  int8x16_t v1201;
  int8x16_t v1202;
  int64x2_t v1203;
  int8x16_t v1204;
  int8x8_t v1205;
  int64x2_t v1206;
  int64x2_t v1207;
  int8x16_t v1208;
  uint64_t v1209;
  unint64_t v1210;
  int64x2_t v1211;
  int64x2_t v1212;
  int64x2_t v1213;
  int8x16_t v1214;
  uint8x8_t *v1215;
  unint64_t v1216;
  int8x16_t v1217;
  int8x16_t v1218;
  uint8x8_t v1219;
  uint16x8_t v1220;
  uint32x4_t v1221;
  uint64x2_t v1222;
  uint64x2_t v1223;
  uint64x2_t v1224;
  uint32x4_t v1225;
  uint64x2_t v1226;
  int64x2_t v1227;
  int8x16_t v1228;
  int8x8_t v1229;
  unint64_t v1230;
  _DWORD *v1231;
  unint64_t v1232;
  int v1233;
  std::string::size_type v1234;
  std::string *v1235;
  unint64_t v1236;
  __int128 v1237;
  const char *v1238;
  uint64_t v1239;
  char *v1240;
  unint64_t v1241;
  std::string::size_type v1242;
  const char *v1243;
  int v1244;
  unint64_t v1245;
  llvm::PointerType **v1246;
  unint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  unsigned int v1251;
  int *v1252;
  int v1253;
  int v1254;
  uint64_t v1255;
  int v1256;
  std::string **v1257;
  int8x16x4_t *v1258;
  uint64_t v1259;
  std::string::size_type v1260;
  std::string **v1261;
  int8x16_t *v1262;
  std::string *v1263;
  size_t v1264;
  unint64_t v1265;
  __int128 v1266;
  uint64_t *v1267;
  uint64_t v1268;
  unint64_t v1269;
  uint64_t v1270;
  _BYTE *v1271;
  uint64_t *v1272;
  unint64_t v1273;
  std::string::size_type v1274;
  _BYTE *v1275;
  unint64_t v1276;
  int8x16x4_t *v1277;
  std::string *v1278;
  unint64_t v1279;
  uint64_t v1280;
  const char *v1281;
  int v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t *v1285;
  unint64_t v1286;
  _QWORD *v1287;
  std::string *p_dst;
  std::string::size_type v1289;
  uint64_t v1290;
  std::string *p_s;
  unsigned int *v1292;
  unint64_t v1293;
  std::string::size_type v1294;
  const char *v1295;
  unsigned int v1296;
  unsigned int v1297;
  int8x8_t v1298;
  _QWORD *v1299;
  unint64_t v1300;
  unsigned int v1301;
  uint64_t v1302;
  int *v1303;
  BOOL v1304;
  unint64_t v1305;
  unint64_t v1306;
  unint64_t v1307;
  unint64_t v1308;
  unsigned int v1309;
  uint64_t *v1310;
  int8x16_t *v1311;
  unint64_t v1312;
  uint64_t v1313;
  std::string::size_type v1314;
  std::string **v1315;
  int8x16_t *v1316;
  char v1317;
  void *v1318;
  unint64_t v1319;
  uint64_t v1320;
  unsigned __int8 *v1321;
  unsigned int v1322;
  unint64_t v1323;
  int *v1324;
  unsigned int v1325;
  int8x8_t v1326;
  unsigned int v1327;
  unint64_t v1328;
  unint64_t v1329;
  unsigned int v1330;
  uint64_t v1331;
  int *v1332;
  unint64_t v1333;
  int8x8_t v1334;
  unint64_t v1335;
  uint64_t v1336;
  unsigned __int8 *v1337;
  unsigned int v1338;
  uint64_t v1339;
  unint64_t v1340;
  unsigned int v1341;
  std::string::size_type v1342;
  _BYTE *v1343;
  unint64_t v1344;
  uint64_t *v1345;
  unint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  char v1350;
  unsigned int v1351;
  char v1352;
  unint64_t v1353;
  unsigned int v1354;
  unint64_t v1355;
  unint64_t v1356;
  unsigned int v1357;
  uint64_t v1358;
  int *v1359;
  unint64_t v1360;
  BOOL v1361;
  unint64_t v1362;
  unint64_t v1363;
  unint64_t v1364;
  uint64_t v1365;
  unsigned __int8 *v1366;
  unsigned int v1367;
  unsigned int v1368;
  uint64_t v1369;
  int64x2_t v1370;
  int64x2_t v1371;
  int64x2_t v1372;
  int64x2_t v1373;
  int64x2_t v1374;
  int64x2_t v1375;
  int8x16_t v1376;
  unint64_t v1377;
  int8x16_t v1378;
  int8x16_t v1379;
  int8x16_t v1380;
  int8x16_t v1381;
  int8x16_t v1382;
  int64x2_t v1383;
  int8x16_t v1384;
  int8x16_t v1385;
  int64x2_t v1386;
  uint8x16_t v1387;
  uint16x8_t v1388;
  uint16x8_t v1389;
  uint32x4_t v1390;
  uint32x4_t v1391;
  int8x16_t v1392;
  uint64x2_t v1393;
  uint64x2_t v1394;
  uint64x2_t v1395;
  uint64x2_t v1396;
  uint64x2_t v1397;
  uint64x2_t v1398;
  uint64x2_t v1399;
  uint64x2_t v1400;
  int8x16_t v1401;
  uint32x4_t v1402;
  int8x16_t v1403;
  int8x16_t v1404;
  int8x16_t v1405;
  uint32x4_t v1406;
  int8x16_t v1407;
  int8x16_t v1408;
  int8x16_t v1409;
  int64x2_t v1410;
  int8x16_t v1411;
  int64x2_t v1412;
  int64x2_t v1413;
  int8x16_t v1414;
  uint64_t v1415;
  unint64_t v1416;
  int64x2_t v1417;
  int64x2_t v1418;
  int64x2_t v1419;
  int8x16_t v1420;
  uint8x8_t *v1421;
  unint64_t v1422;
  int8x16_t v1423;
  int8x16_t v1424;
  uint8x8_t v1425;
  uint16x8_t v1426;
  uint32x4_t v1427;
  uint64x2_t v1428;
  uint64x2_t v1429;
  uint64x2_t v1430;
  uint32x4_t v1431;
  uint64x2_t v1432;
  int8x16_t v1433;
  int64x2_t v1434;
  int8x16_t v1435;
  int v1436;
  unint64_t v1437;
  unint64_t v1438;
  uint64_t v1439;
  unint64_t v1440;
  int64x2_t v1441;
  int64x2_t v1442;
  int64x2_t v1443;
  int8x16_t v1444;
  int8x16_t v1445;
  int64x2_t v1446;
  unint64_t v1447;
  int64x2_t v1448;
  int64x2_t v1449;
  int64x2_t v1450;
  int64x2_t v1451;
  int8x16_t v1452;
  int8x16_t v1453;
  int8x16_t v1454;
  int8x16_t v1455;
  int8x16_t v1456;
  int8x16_t v1457;
  uint8x16_t v1458;
  uint16x8_t v1459;
  uint16x8_t v1460;
  uint32x4_t v1461;
  uint32x4_t v1462;
  int8x16_t v1463;
  uint64x2_t v1464;
  uint64x2_t v1465;
  uint64x2_t v1466;
  uint64x2_t v1467;
  uint64x2_t v1468;
  uint64x2_t v1469;
  uint64x2_t v1470;
  uint64x2_t v1471;
  int8x16_t v1472;
  uint32x4_t v1473;
  int8x16_t v1474;
  int8x16_t v1475;
  int8x16_t v1476;
  uint32x4_t v1477;
  int8x16_t v1478;
  int8x16_t v1479;
  int8x16_t v1480;
  int64x2_t v1481;
  int8x16_t v1482;
  int64x2_t v1483;
  int64x2_t v1484;
  int8x16_t v1485;
  uint64_t v1486;
  unint64_t v1487;
  int64x2_t v1488;
  int64x2_t v1489;
  int64x2_t v1490;
  int8x16_t v1491;
  uint8x8_t *v1492;
  unint64_t v1493;
  int8x16_t v1494;
  int8x16_t v1495;
  uint8x8_t v1496;
  uint16x8_t v1497;
  uint32x4_t v1498;
  uint64x2_t v1499;
  uint64x2_t v1500;
  uint64x2_t v1501;
  uint32x4_t v1502;
  uint64x2_t v1503;
  int8x16_t v1504;
  int64x2_t v1505;
  int8x16_t v1506;
  const std::error_category *v1507;
  void **v1508;
  int8x16x4_t *v1509;
  _OWORD *v1510;
  uint64_t v1511;
  __int128 v1512;
  __int128 v1513;
  _QWORD *v1514;
  uint64_t v1515;
  int8x16x4_t *v1516;
  int64x2_t v1517;
  int64x2_t v1518;
  int64x2_t v1519;
  int64x2_t v1520;
  int64x2_t v1521;
  int64x2_t v1522;
  int8x16_t v1523;
  unint64_t v1524;
  int8x16_t v1525;
  int8x16_t v1526;
  int8x16_t v1527;
  int8x16_t v1528;
  int8x16_t v1529;
  int64x2_t v1530;
  int8x16_t v1531;
  int8x16_t v1532;
  int64x2_t v1533;
  uint8x16_t v1534;
  uint16x8_t v1535;
  uint16x8_t v1536;
  uint32x4_t v1537;
  uint32x4_t v1538;
  int8x16_t v1539;
  uint64x2_t v1540;
  uint64x2_t v1541;
  uint64x2_t v1542;
  uint64x2_t v1543;
  uint64x2_t v1544;
  uint64x2_t v1545;
  uint64x2_t v1546;
  uint64x2_t v1547;
  int8x16_t v1548;
  uint32x4_t v1549;
  int8x16_t v1550;
  int8x16_t v1551;
  int8x16_t v1552;
  uint32x4_t v1553;
  int8x16_t v1554;
  int8x16_t v1555;
  int8x16_t v1556;
  int64x2_t v1557;
  int8x16_t v1558;
  int8x8_t v1559;
  int64x2_t v1560;
  int64x2_t v1561;
  int8x16_t v1562;
  uint64_t v1563;
  unint64_t v1564;
  int64x2_t v1565;
  int64x2_t v1566;
  int64x2_t v1567;
  int8x16_t v1568;
  uint8x8_t *v1569;
  unint64_t v1570;
  int8x16_t v1571;
  int8x16_t v1572;
  uint8x8_t v1573;
  uint16x8_t v1574;
  uint32x4_t v1575;
  uint64x2_t v1576;
  uint64x2_t v1577;
  uint64x2_t v1578;
  uint32x4_t v1579;
  uint64x2_t v1580;
  int8x16_t v1581;
  int64x2_t v1582;
  int8x16_t v1583;
  int8x8_t v1584;
  uint64_t v1585;
  char v1586;
  uint64_t v1587;
  void *v1588;
  unint64_t v1589;
  uint64_t v1590;
  _QWORD *v1591;
  unint64_t v1592;
  uint64_t v1593;
  unsigned int v1594;
  unsigned int v1595;
  int8x8_t v1596;
  unint64_t v1597;
  unsigned int v1598;
  uint64_t v1599;
  int *v1600;
  BOOL v1601;
  unint64_t v1602;
  unint64_t v1603;
  unint64_t v1604;
  unsigned int v1605;
  uint64_t *v1606;
  std::string *v1607;
  std::string *v1608;
  char v1609;
  void *v1610;
  unint64_t v1611;
  uint64_t v1612;
  unsigned __int8 *v1613;
  unsigned int v1614;
  unint64_t v1615;
  int *v1616;
  unsigned int v1617;
  int8x8_t v1618;
  unsigned int v1619;
  unint64_t v1620;
  unint64_t v1621;
  unsigned int v1622;
  uint64_t v1623;
  int *v1624;
  unint64_t v1625;
  int8x8_t v1626;
  unint64_t v1627;
  uint64_t v1628;
  unsigned __int8 *v1629;
  unsigned int v1630;
  uint64_t v1631;
  unint64_t v1632;
  unsigned int v1633;
  void *v1634;
  uint64_t v1635;
  uint64_t v1636;
  char v1637;
  unsigned int v1638;
  char v1639;
  unint64_t v1640;
  unsigned int v1641;
  unint64_t v1642;
  unint64_t v1643;
  unsigned int v1644;
  uint64_t v1645;
  int *v1646;
  unint64_t v1647;
  BOOL v1648;
  unint64_t v1649;
  unint64_t v1650;
  unint64_t v1651;
  uint64_t v1652;
  unsigned __int8 *v1653;
  unsigned int v1654;
  unsigned int v1655;
  uint64_t v1656;
  int64x2_t v1657;
  int64x2_t v1658;
  int64x2_t v1659;
  int64x2_t v1660;
  int64x2_t v1661;
  int64x2_t v1662;
  int8x16_t v1663;
  unint64_t v1664;
  int8x16_t v1665;
  int8x16_t v1666;
  int8x16_t v1667;
  int8x16_t v1668;
  int8x16_t v1669;
  int64x2_t v1670;
  int8x16_t v1671;
  int8x16_t v1672;
  int64x2_t v1673;
  uint8x16_t v1674;
  uint16x8_t v1675;
  uint16x8_t v1676;
  uint32x4_t v1677;
  uint32x4_t v1678;
  int8x16_t v1679;
  uint64x2_t v1680;
  uint64x2_t v1681;
  uint64x2_t v1682;
  uint64x2_t v1683;
  uint64x2_t v1684;
  uint64x2_t v1685;
  uint64x2_t v1686;
  uint64x2_t v1687;
  int8x16_t v1688;
  uint32x4_t v1689;
  int8x16_t v1690;
  int8x16_t v1691;
  int8x16_t v1692;
  uint32x4_t v1693;
  int8x16_t v1694;
  int8x16_t v1695;
  int8x16_t v1696;
  int64x2_t v1697;
  int8x16_t v1698;
  int64x2_t v1699;
  int64x2_t v1700;
  int8x16_t v1701;
  uint64_t v1702;
  unint64_t v1703;
  int64x2_t v1704;
  int64x2_t v1705;
  int64x2_t v1706;
  int8x16_t v1707;
  uint8x8_t *v1708;
  unint64_t v1709;
  int8x16_t v1710;
  int8x16_t v1711;
  uint8x8_t v1712;
  uint16x8_t v1713;
  uint32x4_t v1714;
  uint64x2_t v1715;
  uint64x2_t v1716;
  uint64x2_t v1717;
  uint32x4_t v1718;
  uint64x2_t v1719;
  int8x16_t v1720;
  int64x2_t v1721;
  int8x16_t v1722;
  int v1723;
  unint64_t v1724;
  unint64_t v1725;
  uint64_t v1726;
  unint64_t v1727;
  int64x2_t v1728;
  int64x2_t v1729;
  int64x2_t v1730;
  int64x2_t v1731;
  int64x2_t v1732;
  int64x2_t v1733;
  int8x16_t v1734;
  unint64_t v1735;
  int8x16_t v1736;
  int8x16_t v1737;
  int8x16_t v1738;
  int8x16_t v1739;
  int8x16_t v1740;
  int64x2_t v1741;
  int8x16_t v1742;
  int8x16_t v1743;
  int64x2_t v1744;
  uint8x16_t v1745;
  uint16x8_t v1746;
  uint16x8_t v1747;
  uint32x4_t v1748;
  uint32x4_t v1749;
  int8x16_t v1750;
  uint64x2_t v1751;
  uint64x2_t v1752;
  uint64x2_t v1753;
  uint64x2_t v1754;
  uint64x2_t v1755;
  uint64x2_t v1756;
  uint64x2_t v1757;
  uint64x2_t v1758;
  int8x16_t v1759;
  uint32x4_t v1760;
  int8x16_t v1761;
  int8x16_t v1762;
  int8x16_t v1763;
  uint32x4_t v1764;
  int8x16_t v1765;
  int8x16_t v1766;
  int8x16_t v1767;
  int64x2_t v1768;
  int8x16_t v1769;
  int64x2_t v1770;
  int64x2_t v1771;
  int8x16_t v1772;
  uint64_t v1773;
  unint64_t v1774;
  int64x2_t v1775;
  int64x2_t v1776;
  int64x2_t v1777;
  int8x16_t v1778;
  uint8x8_t *v1779;
  unint64_t v1780;
  int8x16_t v1781;
  int8x16_t v1782;
  uint8x8_t v1783;
  uint16x8_t v1784;
  uint32x4_t v1785;
  uint64x2_t v1786;
  uint64x2_t v1787;
  uint64x2_t v1788;
  uint32x4_t v1789;
  uint64x2_t v1790;
  int8x16_t v1791;
  int64x2_t v1792;
  int8x16_t v1793;
  const std::error_category *v1794;
  void **v1795;
  int64x2_t v1796;
  int64x2_t v1797;
  int64x2_t v1798;
  int64x2_t v1799;
  int64x2_t v1800;
  int64x2_t v1801;
  int8x16_t v1802;
  unint64_t v1803;
  int8x16_t v1804;
  int8x16_t v1805;
  int8x16_t v1806;
  int8x16_t v1807;
  int8x16_t v1808;
  int64x2_t v1809;
  int8x16_t v1810;
  int8x16_t v1811;
  int64x2_t v1812;
  uint8x16_t v1813;
  uint16x8_t v1814;
  uint16x8_t v1815;
  uint32x4_t v1816;
  uint32x4_t v1817;
  int8x16_t v1818;
  uint64x2_t v1819;
  uint64x2_t v1820;
  uint64x2_t v1821;
  uint64x2_t v1822;
  uint64x2_t v1823;
  uint64x2_t v1824;
  uint64x2_t v1825;
  uint64x2_t v1826;
  int8x16_t v1827;
  uint32x4_t v1828;
  int8x16_t v1829;
  int8x16_t v1830;
  int8x16_t v1831;
  uint32x4_t v1832;
  int8x16_t v1833;
  int8x16_t v1834;
  int8x16_t v1835;
  int64x2_t v1836;
  int8x16_t v1837;
  int8x8_t v1838;
  int64x2_t v1839;
  int64x2_t v1840;
  int8x16_t v1841;
  uint64_t v1842;
  unint64_t v1843;
  int64x2_t v1844;
  int64x2_t v1845;
  int64x2_t v1846;
  int8x16_t v1847;
  uint8x8_t *v1848;
  unint64_t v1849;
  int8x16_t v1850;
  int8x16_t v1851;
  uint8x8_t v1852;
  uint16x8_t v1853;
  uint32x4_t v1854;
  uint64x2_t v1855;
  uint64x2_t v1856;
  uint64x2_t v1857;
  uint32x4_t v1858;
  uint64x2_t v1859;
  int8x16_t v1860;
  int64x2_t v1861;
  int8x16_t v1862;
  int8x8_t v1863;
  llvm::Type *v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t *v1869;
  _OWORD *v1870;
  uint64_t *v1871;
  uint64_t v1872;
  __int128 v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  unint64_t v1877;
  void **v1878;
  const std::error_category *v1879;
  void **v1880;
  void *v1881;
  char *v1882;
  uint64_t v1883;
  unint64_t v1884;
  uint64_t v1885;
  unint64_t v1886;
  char *v1887;
  uint64_t v1888;
  unint64_t v1889;
  unint64_t v1890;
  int v1891;
  uint64_t v1892;
  uint64_t v1893;
  unsigned int v1894;
  int *v1895;
  int v1896;
  uint64_t v1897;
  int v1898;
  uint64_t v1899;
  int v1900;
  int8x16x4_t *v1901;
  _OWORD *v1902;
  uint64_t v1903;
  __int128 v1904;
  __int128 v1905;
  _QWORD *v1906;
  uint64_t v1907;
  int8x16x4_t *v1908;
  unint64_t v1909;
  void *v1910;
  const std::error_category *v1911;
  int *v1912;
  void **v1913;
  void *v1914;
  const std::error_category *v1915;
  void **v1916;
  void *v1917;
  uint64_t v1918;
  int v1919;
  llvm::GlobalValue *v1920;
  uint64_t v1921;
  uint64_t v1922;
  int v1923;
  uint64_t v1924;
  int v1925;
  unsigned int v1926;
  uint64_t v1927;
  int v1928;
  int v1929;
  uint64_t *v1930;
  unint64_t v1931;
  const char *v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t *v1935;
  char *v1936;
  uint64_t *v1937;
  uint64_t v1938;
  __int128 v1939;
  uint64_t v1940;
  uint64_t i;
  int v1942;
  char v1943;
  int v1944;
  int v1945;
  const char *v1946;
  int v1947;
  unint64_t v1948;
  uint64_t v1949;
  int v1950;
  uint64_t v1951;
  int v1952;
  unsigned int v1953;
  uint64_t v1954;
  int v1955;
  unint64_t v1956;
  int v1957;
  char *v1958;
  unint64_t v1959;
  uint64_t v1960;
  llvm::GlobalValue *v1961;
  char *v1962;
  uint64_t v1963;
  unint64_t v1964;
  uint64_t v1965;
  unint64_t v1966;
  char *v1967;
  char *v1968;
  char *v1969;
  char *v1970;
  uint64_t v1971;
  uint64_t v1972;
  std::string::size_type v1973;
  uint64_t v1974;
  void *v1975;
  uint64_t v1976;
  uint64_t v1977;
  unint64_t v1978;
  void **v1979;
  unint64_t v1980;
  unint64_t v1981;
  unint64_t v1982;
  unsigned int v1983;
  uint64_t v1984;
  unint64_t v1985;
  uint64_t v1986;
  char v1987;
  const char *v1988;
  int v1989;
  char v1990;
  char v1991;
  mlir::BytecodeWriterConfig *v1992;
  uint64_t v1993;
  mlir::BytecodeWriterConfig *v1994;
  std::string::size_type v1995;
  std::string *v1996;
  int v1997;
  int v1998;
  char hasExternalWeakLinkage;
  int v2000;
  unsigned int v2001;
  unsigned int v2002;
  int v2003;
  int v2004;
  uint64_t v2005;
  unsigned int v2006;
  int v2007;
  char v2008;
  unsigned int *v2009;
  unsigned int v2010;
  uint64_t v2011;
  unsigned int v2012;
  unsigned int v2013;
  uint64_t v2014;
  unsigned int *v2015;
  unsigned int *v2016;
  __int16 v2017;
  int VirtualTypeID;
  mlir::BytecodeWriterConfig *v2019;
  unint64_t v2020;
  mlir::BytecodeWriterConfig *v2021;
  int v2022;
  char *v2023;
  unint64_t v2024;
  uint64_t v2025;
  mlir::BytecodeWriterConfig *v2026;
  uint64_t v2027;
  char *v2028;
  unint64_t v2029;
  _QWORD *v2030;
  char *v2031;
  uint64_t v2032;
  unint64_t v2033;
  uint64_t v2034;
  unint64_t v2035;
  char *v2036;
  char *v2037;
  char *v2038;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  unint64_t v2042;
  std::string::size_type v2043;
  int v2044;
  uint64_t v2045;
  void *v2046;
  int v2047;
  unsigned int *v2048;
  int v2049;
  unsigned int v2050;
  BOOL v2051;
  unsigned int v2052;
  unsigned int v2053;
  char v2054;
  uint64_t v2055;
  unint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  std::string *v2059;
  uint64_t v2060;
  std::string *v2061;
  uint64_t v2062;
  int v2063;
  uint64_t v2064;
  unint64_t v2065;
  int v2066;
  uint64_t v2067;
  uint64_t v2068;
  unsigned int v2069;
  int *v2070;
  int v2071;
  uint64_t v2072;
  int v2073;
  uint64_t v2074;
  int v2075;
  int *v2076;
  unsigned int v2077;
  uint64_t v2078;
  unsigned int v2079;
  int *v2080;
  int v2081;
  llvm::LLVMContext *v2082;
  llvm::Type *v2083;
  int v2084;
  uint64_t v2085;
  int v2086;
  char hasParamAttribute;
  unsigned int ContainedTypeID;
  llvm::LLVMContext *PtrElementTypeByID;
  llvm::Type *v2090;
  unint64_t v2091;
  unint64_t v2092;
  unsigned int *v2093;
  uint64_t v2094;
  unint64_t v2095;
  uint64_t v2096;
  _DWORD *v2097;
  uint64_t v2098;
  int v2099;
  _BYTE *v2100;
  uint64_t v2101;
  unsigned int v2102;
  char v2103;
  unint64_t v2104;
  uint64_t v2105;
  unint64_t v2106;
  uint64_t v2107;
  __int128 *v2108;
  __int128 v2109;
  unsigned int v2110;
  int v2111;
  unsigned int v2112;
  int v2113;
  unsigned int v2114;
  int v2115;
  unsigned int v2116;
  int v2117;
  uint64_t v2118;
  uint64_t v2119;
  const char *v2120;
  unsigned int v2121;
  unsigned int v2122;
  int v2123;
  uint64_t v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  int v2128;
  BOOL v2129;
  unsigned int v2130;
  uint64_t v2131;
  int v2132;
  unsigned int v2133;
  unsigned int *v2134;
  uint64_t v2135;
  int v2136;
  BOOL v2137;
  unsigned int v2138;
  std::string::size_type *v2139;
  uint64_t v2140;
  uint64_t v2141;
  unsigned __int8 v2142;
  unsigned int v2143;
  unint64_t v2144;
  uint64_t v2145;
  unint64_t v2146;
  unsigned int v2147;
  unint64_t v2148;
  uint64_t v2149;
  int v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  std::string::size_type v2154;
  int v2155;
  unint64_t v2156;
  unsigned int v2157;
  unsigned int v2158;
  unint64_t v2159;
  unint64_t v2160;
  unint64_t v2161;
  uint64_t v2162;
  unsigned int *v2163;
  unint64_t v2164;
  uint64_t v2165;
  void *v2166;
  uint64_t v2167;
  uint64_t v2168;
  void **v2169;
  void **v2170;
  int8x16_t v2171;
  void **v2172;
  uint64_t v2173;
  int64x2_t *v2174;
  void **v2175;
  llvm::BitcodeReaderValueList *v2176;
  uint64_t v2177;
  uint64_t v2178;
  unsigned int v2179;
  unsigned int v2180;
  unsigned int v2181;
  unsigned int v2182;
  unsigned int v2183;
  llvm::BitstreamCursor ***v2184;
  _QWORD *v2185;
  uint64_t v2186;
  _anonymous_namespace_::BitcodeReaderBase *v2187;
  llvm::Twine *v2188;
  llvm::BitstreamCursor *v2189;
  unint64_t *v2190;
  int *v2191;
  int8x8_t *v2192;
  _QWORD v2193[4];
  std::string v2194;
  char v2195;
  uint64_t v2196[4];
  __int16 v2197;
  unsigned int v2198;
  int v2199;
  uint64_t v2200;
  char v2201;
  void *v2202;
  uint64_t v2203;
  _BYTE v2204[512];
  void *v2205;
  __int128 v2206;
  unint64_t v2207;
  __int16 v2208;
  void *v2209;
  __int128 v2210;
  unint64_t v2211;
  uint64_t v2212;
  char v2213;
  uint64_t v2214;
  int v2215;
  void **v2216;
  void *__p;
  uint64_t v2218;
  _QWORD v2219[2];
  __int16 v2220;
  unsigned int v2221[2];
  char v2222;
  std::string __dst;
  std::string *v2224;
  uint64_t v2225;
  char v2226;
  uint64_t v2227;
  int v2228;
  void **p_p;
  std::string __s;
  std::string *v2231;
  __int16 v2232;
  uint64_t v2233;
  std::error_code v2234;
  std::error_code v2235;
  std::error_code v2236;
  std::error_code v2237;
  std::error_code v2238;
  std::error_code v2239;
  std::error_code v2240;
  std::error_code v2241;
  std::error_code v2242;
  std::error_code v2243;

  v8 = a2;
  v2233 = *MEMORY[0x1E0C80C00];
  std::__optional_storage_base<std::function<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::function<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>>(a2 + 1832, a5 + 40);
  if (a3)
  {
    *(_QWORD *)(v8 + 48) = (a3 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_DWORD *)(v8 + 64) = 0;
    if ((a3 & 0x3F) != 0
      && (llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)(v8 + 32), a3 & 0x3F, (uint64_t)&__s),
          (__s.__r_.__value_.__s.__data_[8] & 1) != 0))
    {
      v10 = __s.__r_.__value_.__r.__words[0];
      *a1 = __s.__r_.__value_.__r.__words[0];
      if (v10)
        return;
    }
    else
    {
      *a1 = 0;
    }
  }
  else
  {
    llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(v8 + 32), 0, 8, a1);
    if (*a1)
      return;
  }
  v2202 = v2204;
  v2203 = 0x4000000000;
  v2195 = 0;
  v11 = *(_QWORD *)(v8 + 432);
  if (*(char *)(v11 + 495) < 0)
    std::string::__init_copy_ctor_external(&v2194, *(const std::string::value_type **)(v11 + 472), *(_QWORD *)(v11 + 480));
  else
    v2194 = *(std::string *)(v11 + 472);
  v2193[0] = &v2195;
  v2193[1] = &v2194;
  v12 = (llvm::Twine *)(v8 + 8);
  v13 = (llvm::BitstreamCursor *)(v8 + 32);
  v2193[2] = v8;
  v2193[3] = a5;
  v14 = (int *)(v8 + 64);
  v2190 = (unint64_t *)(v8 + 48);
  v2192 = (int8x8_t *)(v8 + 56);
  v2166 = (void *)(v8 + 1824);
  v2167 = v8 + 1800;
  v2175 = (void **)(v8 + 1776);
  v2169 = (void **)(v8 + 1512);
  v2184 = (llvm::BitstreamCursor ***)(v8 + 776);
  v2172 = (void **)(v8 + 520);
  v2185 = (_QWORD *)(v8 + 1472);
  v2165 = v8 + 592;
  v2178 = v8 + 472;
  v2176 = (llvm::BitcodeReaderValueList *)(v8 + 712);
  v2177 = v8 + 496;
  v2173 = v8 + 544;
  v2174 = (int64x2_t *)(v8 + 816);
  v2170 = (void **)(v8 + 1416);
  v2168 = v8 + 1568;
  v2186 = v8;
  v2187 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
  v2188 = (llvm::Twine *)(v8 + 8);
  v2189 = (llvm::BitstreamCursor *)(v8 + 32);
  v2191 = (int *)(v8 + 64);
  v2171 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
  while (2)
  {
    llvm::BitstreamCursor::advance(v13, 0, (uint64_t)&v2200);
    if ((v2201 & 1) != 0)
    {
      v15 = v2200;
      v2200 = 0;
      *a1 = v15;
      goto LABEL_19;
    }
    switch((_DWORD)v2200)
    {
      case 2:
        switch(HIDWORD(v2200))
        {
          case 0:
            goto LABEL_1890;
          case 9:
            llvm::BitstreamCursor::EnterSubBlock(v13, 0, 9, a1);
            if (*a1)
              goto LABEL_19;
            if (*(_QWORD *)(v8 + 1440) != *(_QWORD *)(v8 + 1448))
              goto LABEL_73;
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__r.__words[2];
            __s.__r_.__value_.__l.__size_ = 0x4000000000;
            v2209 = (char *)&v2210 + 8;
            *(_QWORD *)&v2210 = 0x800000000;
            while (1)
            {
              v887 = *v14;
              if (*v14)
              {
                v888 = *(_DWORD *)(v8 + 68);
                v889 = *(int8x8_t *)(v8 + 56);
                v890 = v2192;
                if (v887 >= v888)
                  goto LABEL_775;
                v892 = *(_QWORD *)(v8 + 40);
                v891 = *(_QWORD *)(v8 + 48);
                v888 -= v887;
                v2221[0] = v888;
                v893 = v892 - v891;
                if (v892 <= v891)
                  goto LABEL_1627;
              }
              else
              {
                v892 = *(_QWORD *)(v8 + 40);
                v891 = *(_QWORD *)(v8 + 48);
                v890 = v2192;
                if (v892 <= v891)
                  goto LABEL_1724;
                v888 = *(_DWORD *)(v8 + 68);
                if (!v888)
                {
                  v889 = *v2192;
LABEL_775:
                  v899 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v888) & *(_QWORD *)&v889;
                  v900 = *(_QWORD *)&v889 >> v888;
                  *v890 = *(_QWORD *)&v889 >> v888;
                  v901 = v887 - v888;
                  *v14 = v887 - v888;
                  if ((_DWORD)v899 != 1)
                    goto LABEL_942;
                  goto LABEL_776;
                }
                v889 = 0;
                v2221[0] = *(_DWORD *)(v8 + 68);
                v893 = v892 - v891;
                if (v892 <= v891)
                {
LABEL_1627:
                  v1915 = std::generic_category();
                  v2218 = 0;
                  __p = 0;
                  v2219[0] = 0;
                  LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
                  v2226 = 0;
                  v2227 = 0;
                  v2228 = 1;
                  v2224 = 0;
                  v2225 = 0;
                  __dst.__r_.__value_.__r.__words[2] = 0;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                  p_p = &__p;
                  llvm::raw_ostream::SetBufferAndMode((uint64_t)&__dst, 0, 0, 0);
                  *(_QWORD *)&v2206 = "Unexpected end of file reading %u of %u bytes";
                  v2205 = &unk_1E0E203C0;
                  *((_QWORD *)&v2206 + 1) = *v2190;
                  v2207 = v892;
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__dst, (uint64_t)&v2205);
                  v1916 = p_p;
                  v1917 = operator new(0x38uLL);
                  v2208 = 260;
                  v2205 = v1916;
                  llvm::StringError::StringError((uint64_t)v1917, (llvm::Twine *)&v2205, 5, (uint64_t)v1915);
                  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
                  if (SHIBYTE(v2219[0]) < 0)
                    operator delete(__p);
                  a1 = (uint64_t *)v2187;
                  v14 = v2191;
                  *(_QWORD *)v2187 = v1917;
                  goto LABEL_1886;
                }
              }
              v894 = *(_QWORD *)v13;
              v895 = (int *)(*(_QWORD *)v13 + v891);
              if (v892 >= v891 + 8)
              {
                v897 = *(_QWORD *)v895;
                *v890 = v897;
                v893 = 8;
              }
              else
              {
                *v890 = 0;
                if (v893)
                {
                  if (v893 < 8uLL
                    || ((unint64_t)v890 < v894 + v891 + v893 ? (v896 = v895 >= v14) : (v896 = 1), !v896))
                  {
                    v898 = 0;
                    v897 = 0;
LABEL_936:
                    v924 = v893 - v898;
                    v925 = 8 * v898;
                    v926 = (unsigned __int8 *)(v894 + v898 + v891);
                    do
                    {
                      v927 = *v926++;
                      v890 = v2192;
                      v897 |= (unint64_t)v927 << (v925 & 0xF8);
                      *v2192 = (int8x8_t)v897;
                      v925 += 8;
                      --v924;
                    }
                    while (v924);
                    goto LABEL_940;
                  }
                  if (v893 >= 0x10uLL)
                  {
                    v898 = v893 - (unint64_t)(v893 & 0xF);
                    v1059 = (int64x2_t)xmmword_181267BA0;
                    v1060 = (int64x2_t)xmmword_181267BB0;
                    v1061 = (int64x2_t)xmmword_181267BC0;
                    v1062 = (int64x2_t)xmmword_181267BD0;
                    v1063 = (int64x2_t)xmmword_1812332B0;
                    v1064 = (int64x2_t)xmmword_181267BE0;
                    v1065 = 0uLL;
                    v1066 = v898;
                    v1067 = 0uLL;
                    v1068 = 0uLL;
                    v1069 = 0uLL;
                    v1070 = 0uLL;
                    v1071 = 0uLL;
                    v1072 = (int64x2_t)xmmword_181233290;
                    v1073 = 0uLL;
                    v1074 = 0uLL;
                    v1075 = (int64x2_t)xmmword_181233120;
                    do
                    {
                      v1076 = *(uint8x16_t *)v895;
                      v895 += 4;
                      v1077 = vmovl_u8(*(uint8x8_t *)v1076.i8);
                      v1078 = vmovl_high_u8(v1076);
                      v1079 = vmovl_u16(*(uint16x4_t *)v1078.i8);
                      v1080 = vmovl_high_u16(v1078);
                      v1081 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                      v1082 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1063, 3uLL), v1081);
                      v1083 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1062, 3uLL), v1081);
                      v1084 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1064, 3uLL), v1081);
                      v1085 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1072, 3uLL), v1081);
                      v1086 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1061, 3uLL), v1081);
                      v1087 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1075, 3uLL), v1081);
                      v1088 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1060, 3uLL), v1081);
                      v1089.i64[0] = v1080.u32[2];
                      v1089.i64[1] = v1080.u32[3];
                      v1090 = (int8x16_t)vshlq_u64(v1089, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1059, 3uLL), v1081));
                      v1091 = vmovl_u16(*(uint16x4_t *)v1077.i8);
                      v1089.i64[0] = v1080.u32[0];
                      v1089.i64[1] = v1080.u32[1];
                      v1092 = (int8x16_t)vshlq_u64(v1089, v1088);
                      v1089.i64[0] = v1091.u32[0];
                      v1089.i64[1] = v1091.u32[1];
                      v1093 = (int8x16_t)vshlq_u64(v1089, v1087);
                      v1089.i64[0] = v1079.u32[2];
                      v1089.i64[1] = v1079.u32[3];
                      v1094 = (int8x16_t)vshlq_u64(v1089, v1086);
                      v1095 = vmovl_high_u16(v1077);
                      v1089.i64[0] = v1091.u32[2];
                      v1089.i64[1] = v1091.u32[3];
                      v1096 = (int8x16_t)vshlq_u64(v1089, v1085);
                      v1089.i64[0] = v1095.u32[0];
                      v1089.i64[1] = v1095.u32[1];
                      v1097 = (int8x16_t)vshlq_u64(v1089, v1084);
                      v1089.i64[0] = v1079.u32[0];
                      v1089.i64[1] = v1079.u32[1];
                      v1098 = (int8x16_t)vshlq_u64(v1089, v1083);
                      v1089.i64[0] = v1095.u32[2];
                      v1089.i64[1] = v1095.u32[3];
                      v1069 = vorrq_s8((int8x16_t)vshlq_u64(v1089, v1082), v1069);
                      v1070 = vorrq_s8(v1098, v1070);
                      v1068 = vorrq_s8(v1097, v1068);
                      v1067 = vorrq_s8(v1096, v1067);
                      v1071 = vorrq_s8(v1094, v1071);
                      v1065 = vorrq_s8(v1093, v1065);
                      v1073 = vorrq_s8(v1092, v1073);
                      v1074 = vorrq_s8(v1090, v1074);
                      v1099 = vdupq_n_s64(0x10uLL);
                      v1064 = vaddq_s64(v1064, v1099);
                      v1072 = vaddq_s64(v1072, v1099);
                      v1075 = vaddq_s64(v1075, v1099);
                      v1063 = vaddq_s64(v1063, v1099);
                      v1062 = vaddq_s64(v1062, v1099);
                      v1061 = vaddq_s64(v1061, v1099);
                      v1060 = vaddq_s64(v1060, v1099);
                      v1059 = vaddq_s64(v1059, v1099);
                      v1066 -= 16;
                    }
                    while (v1066);
                    v1100 = vorrq_s8(vorrq_s8(vorrq_s8(v1065, v1070), vorrq_s8(v1068, v1073)), vorrq_s8(vorrq_s8(v1067, v1071), vorrq_s8(v1069, v1074)));
                    *(int8x8_t *)v1100.i8 = vorr_s8(*(int8x8_t *)v1100.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1100, v1100, 8uLL));
                    v890 = v2192;
                    *v2192 = *(int8x8_t *)v1100.i8;
                    v897 = v1100.i64[0];
                    if ((v893 & 0xF) == 0)
                      goto LABEL_940;
                    if ((v893 & 0xF) < 8uLL)
                      goto LABEL_936;
                  }
                  else
                  {
                    v897 = 0;
                    v898 = 0;
                  }
                  v1101 = vdupq_n_s64(v898);
                  v1102 = vaddq_s64(v1101, (int64x2_t)xmmword_1812332B0);
                  v1103 = (int8x16_t)v897;
                  v1104 = v891 + v898;
                  v1105 = v898 + (v893 & 7);
                  v898 = v893 - (unint64_t)(v893 & 7);
                  v1106 = vaddq_s64(v1101, (int64x2_t)xmmword_181267BE0);
                  v1107 = vaddq_s64(v1101, (int64x2_t)xmmword_181233290);
                  v1108 = vaddq_s64(v1101, (int64x2_t)xmmword_181233120);
                  v1109 = 0uLL;
                  v1110 = (uint8x8_t *)(v894 + v1104);
                  v1111 = v1105 - v893;
                  v1112 = 0uLL;
                  v1113 = 0uLL;
                  do
                  {
                    v1114 = *v1110++;
                    v1115 = vmovl_u8(v1114);
                    v1116 = vmovl_high_u16(v1115);
                    v1117.i64[0] = v1116.u32[2];
                    v1117.i64[1] = v1116.u32[3];
                    v1118 = v1117;
                    v1117.i64[0] = v1116.u32[0];
                    v1117.i64[1] = v1116.u32[1];
                    v1119 = v1117;
                    v1120 = vmovl_u16(*(uint16x4_t *)v1115.i8);
                    v1117.i64[0] = v1120.u32[2];
                    v1117.i64[1] = v1120.u32[3];
                    v1121 = v1117;
                    v1117.i64[0] = v1120.u32[0];
                    v1117.i64[1] = v1120.u32[1];
                    v1122 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                    v1113 = vorrq_s8((int8x16_t)vshlq_u64(v1118, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1102, 3uLL), v1122)), v1113);
                    v1112 = vorrq_s8((int8x16_t)vshlq_u64(v1119, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1106, 3uLL), v1122)), v1112);
                    v1109 = vorrq_s8((int8x16_t)vshlq_u64(v1121, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1107, 3uLL), v1122)), v1109);
                    v1123 = vdupq_n_s64(8uLL);
                    v1103 = vorrq_s8((int8x16_t)vshlq_u64(v1117, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1108, 3uLL), v1122)), v1103);
                    v1106 = vaddq_s64(v1106, v1123);
                    v1107 = vaddq_s64(v1107, v1123);
                    v1108 = vaddq_s64(v1108, v1123);
                    v1102 = vaddq_s64(v1102, v1123);
                    v1111 += 8;
                  }
                  while (v1111);
                  v1124 = vorrq_s8(vorrq_s8(v1103, v1112), vorrq_s8(v1109, v1113));
                  *(int8x8_t *)v1124.i8 = vorr_s8(*(int8x8_t *)v1124.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1124, v1124, 8uLL));
                  v890 = v2192;
                  *v2192 = *(int8x8_t *)v1124.i8;
                  v897 = v1124.i64[0];
                  if ((v893 & 7) == 0)
                    goto LABEL_940;
                  goto LABEL_936;
                }
                v897 = 0;
              }
LABEL_940:
              *v2190 = v891 + v893;
              *v14 = 8 * v893;
              v901 = 8 * v893 - v888;
              if (8 * v893 < v888)
              {
                llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v14, (int *)v2221, v2196);
                *a1 = v2196[0];
                goto LABEL_1886;
              }
              v900 = v897 >> v888;
              *v890 = v897 >> v888;
              *v14 = v901;
              v928 = (v897 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v888)) << v887;
              v899 = v928 | *(_QWORD *)&v889;
              if ((v928 | v889.i32[0]) == 1)
              {
LABEL_776:
                llvm::SimpleBitstreamCursor::ReadVBR(v13, 8u, (uint64_t)&__dst);
                if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
                {
                  *a1 = __dst.__r_.__value_.__r.__words[0];
                  goto LABEL_1886;
                }
                v902 = (uint64_t *)v2192;
                v929 = v14;
                v930 = *v14;
                if (v930 >= 4)
                {
                  v944 = *(_QWORD *)v2192 & 0xFLL;
                  v945 = *(unint64_t *)v2192 >> 4;
                  *v2192 = (int8x8_t)v945;
                  v946 = v930 - 4;
                  *v929 = v930 - 4;
                  v14 = v929;
                  if ((v944 & 8) != 0)
                    goto LABEL_987;
LABEL_984:
                  v65 = v946 >= 0x20;
                  v963 = v946 - 32;
                  if (v65)
                  {
                    *v902 = v945 >> v963;
                    v1049 = 32;
                  }
                  else
                  {
                    v1049 = 0;
                  }
                  *v14 = v1049;
                  llvm::SimpleBitstreamCursor::Read(v13, 0x20u, (uint64_t)&__dst);
                  if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
                  {
                    v886 = (void *)__dst.__r_.__value_.__r.__words[0];
                    if (__dst.__r_.__value_.__r.__words[0])
                      goto LABEL_1620;
                  }
                  else
                  {
                    v1051 = *(_QWORD *)(v8 + 40);
                    v1050 = *(_QWORD *)(v8 + 48);
                    v1052 = *(unsigned int *)(v8 + 64);
                    v1053 = 8 * v1050 - v1052 + 32 * LODWORD(__dst.__r_.__value_.__l.__data_);
                    v2205 = (void *)v1053;
                    if ((_DWORD)v1052 || v1051 > v1050)
                    {
                      if (v1051 >= v1053 >> 3)
                      {
                        *v2190 = (v1053 >> 3) & 0x1FFFFFFFFFFFFFF8;
                        *v14 = 0;
                        if ((v1053 & 0x3F) == 0
                          || (llvm::SimpleBitstreamCursor::Read(v13, v1053 & 0x3F, (uint64_t)&__dst),
                              (__dst.__r_.__value_.__s.__data_[8] & 1) == 0)
                          || (__p = (void *)__dst.__r_.__value_.__r.__words[0]) == 0)
                        {
                          __p = 0;
                        }
                        v886 = __p;
                        if (__p)
                          goto LABEL_1620;
                      }
                      else
                      {
                        __dst.__r_.__value_.__r.__words[0] = 8 * v1050 - v1052;
                        llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v2205, (uint64_t *)&__dst, (uint64_t *)&__p);
                        v886 = __p;
                        if (__p)
                          goto LABEL_1620;
                      }
                    }
                    else
                    {
                      *(_QWORD *)&v2238.__val_ = std::generic_category();
                      v2238.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
                      llvm::createStringError((llvm *)0x5C, v2238, &__p);
                      v886 = __p;
                      if (__p)
                        goto LABEL_1620;
                    }
                  }
                }
                else if (v930)
                {
                  v931 = *v2192;
                  v932 = 4 - v930;
                  LODWORD(v2196[0]) = 4 - v930;
                  v934 = *(_QWORD *)(v8 + 40);
                  v933 = *(_QWORD *)(v8 + 48);
                  v935 = v934 - v933;
                  if (v934 > v933)
                    goto LABEL_948;
LABEL_960:
                  __dst.__r_.__value_.__r.__words[0] = v934;
                  llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v2190, (uint64_t *)&__dst, (uint64_t *)&v2205);
                  v886 = v2205;
                  if (v2205)
                  {
                    v12 = v2188;
                    v13 = v2189;
                    v14 = v2191;
                    goto LABEL_1620;
                  }
                  v902 = (uint64_t *)v2192;
                  v946 = *v2191 - v932;
                  if (*v2191 < v932)
                    goto LABEL_980;
LABEL_983:
                  v961 = *v902;
                  v945 = (unint64_t)*v902 >> v932;
                  *v902 = v945;
                  *v2191 = v946;
                  v962 = v961 << v930;
                  v14 = v2191;
                  LOBYTE(v962) = v962 & 0xF | v931.i8[0];
                  v12 = v2188;
                  v13 = v2189;
                  if ((v962 & 8) == 0)
                    goto LABEL_984;
LABEL_987:
                  v964 = 0;
                  while (2)
                  {
                    if (v964 >= 0x1D)
                    {
                      *(_QWORD *)&v2239.__val_ = std::generic_category();
                      v2239.__cat_ = (const std::error_category *)"Unterminated VBR";
                      llvm::createStringError((llvm *)0x5C, v2239, v2221);
                      v886 = *(void **)v2221;
                      if (*(_QWORD *)v2221)
                        goto LABEL_1620;
                    }
                    else
                    {
                      if (v946 >= 4)
                      {
                        v965 = v945 & 0xF;
                        v945 >>= 4;
                        *v902 = v945;
                        *v14 = v946 - 4;
                        v946 -= 4;
                        v964 += 3;
                        if ((v965 & 8) == 0)
                          goto LABEL_984;
                        continue;
                      }
                      if (v946)
                        v966 = v945;
                      else
                        v966 = 0;
                      v967 = 4 - v946;
                      v2199 = 4 - v946;
                      v969 = *(_QWORD *)(v8 + 40);
                      v968 = *(_QWORD *)(v8 + 48);
                      v970 = v969 - v968;
                      if (v969 <= v968)
                      {
                        v1135 = std::generic_category();
                        v2218 = 0;
                        __p = 0;
                        v2219[0] = 0;
                        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
                        v2226 = 0;
                        v2227 = 0;
                        v2228 = 1;
                        v2224 = 0;
                        v2225 = 0;
                        __dst.__r_.__value_.__r.__words[2] = 0;
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                        p_p = &__p;
                        llvm::raw_ostream::SetBufferAndMode((uint64_t)&__dst, 0, 0, 0);
                        *(_QWORD *)&v2206 = "Unexpected end of file reading %u of %u bytes";
                        v2205 = &unk_1E0E203C0;
                        *((_QWORD *)&v2206 + 1) = *v2190;
                        v2207 = v969;
                        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__dst, (uint64_t)&v2205);
                        v1136 = p_p;
                        v886 = operator new(0x38uLL);
                        v2208 = 260;
                        v2205 = v1136;
                        llvm::StringError::StringError((uint64_t)v886, (llvm::Twine *)&v2205, 5, (uint64_t)v1135);
                        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
                        if (SHIBYTE(v2219[0]) < 0)
                          operator delete(__p);
                        a1 = (uint64_t *)v2187;
                        v14 = v2191;
                        if (v886)
                        {
LABEL_1620:
                          *a1 = (uint64_t)v886;
                          goto LABEL_1886;
                        }
                      }
                      else
                      {
                        v971 = *(_QWORD *)v13;
                        v972 = (int *)(*(_QWORD *)v13 + v968);
                        if (v969 >= v968 + 8)
                        {
                          v975 = *(_QWORD *)v972;
                          *v902 = v975;
                          v970 = 8;
                          goto LABEL_1011;
                        }
                        *v902 = 0;
                        if (!v970)
                        {
                          v975 = 0;
                          goto LABEL_1011;
                        }
                        v973 = (v969 - v968);
                        if (v973 < 8
                          || ((unint64_t)v902 < v971 + v968 + v973 ? (v974 = v972 >= v14) : (v974 = 1), !v974))
                        {
                          v976 = 0;
                          v975 = 0;
                          goto LABEL_1007;
                        }
                        if (v973 < 0x10)
                        {
                          v975 = 0;
                          v976 = 0;
LABEL_1018:
                          v1025 = vdupq_n_s64(v976);
                          v1026 = vaddq_s64(v1025, (int64x2_t)xmmword_1812332B0);
                          v1027 = (int8x16_t)v975;
                          v1028 = v976 + v968;
                          v1029 = v976 + (v970 & 7);
                          v976 = v973 - (v970 & 7);
                          v1030 = vaddq_s64(v1025, (int64x2_t)xmmword_181267BE0);
                          v1031 = vaddq_s64(v1025, (int64x2_t)xmmword_181233290);
                          v1032 = vaddq_s64(v1025, (int64x2_t)xmmword_181233120);
                          v1033 = 0uLL;
                          v1034 = (uint8x8_t *)(v971 + v1028);
                          v1035 = v1029 - v973;
                          v1036 = 0uLL;
                          v1037 = 0uLL;
                          do
                          {
                            v1038 = *v1034++;
                            v1039 = vmovl_u8(v1038);
                            v1040 = vmovl_high_u16(v1039);
                            v1041.i64[0] = v1040.u32[2];
                            v1041.i64[1] = v1040.u32[3];
                            v1042 = v1041;
                            v1041.i64[0] = v1040.u32[0];
                            v1041.i64[1] = v1040.u32[1];
                            v1043 = v1041;
                            v1044 = vmovl_u16(*(uint16x4_t *)v1039.i8);
                            v1041.i64[0] = v1044.u32[2];
                            v1041.i64[1] = v1044.u32[3];
                            v1045 = v1041;
                            v1041.i64[0] = v1044.u32[0];
                            v1041.i64[1] = v1044.u32[1];
                            v1046 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                            v1037 = vorrq_s8((int8x16_t)vshlq_u64(v1042, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1026, 3uLL), v1046)), v1037);
                            v1036 = vorrq_s8((int8x16_t)vshlq_u64(v1043, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1030, 3uLL), v1046)), v1036);
                            v1033 = vorrq_s8((int8x16_t)vshlq_u64(v1045, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1031, 3uLL), v1046)), v1033);
                            v1047 = vdupq_n_s64(8uLL);
                            v1027 = vorrq_s8((int8x16_t)vshlq_u64(v1041, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1032, 3uLL), v1046)), v1027);
                            v1030 = vaddq_s64(v1030, v1047);
                            v1031 = vaddq_s64(v1031, v1047);
                            v1032 = vaddq_s64(v1032, v1047);
                            v1026 = vaddq_s64(v1026, v1047);
                            v1035 += 8;
                          }
                          while (v1035);
                          v1048 = vorrq_s8(vorrq_s8(v1027, v1036), vorrq_s8(v1033, v1037));
                          *(int8x8_t *)v1048.i8 = vorr_s8(*(int8x8_t *)v1048.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1048, v1048, 8uLL));
                          *v2192 = *(int8x8_t *)v1048.i8;
                          v975 = v1048.i64[0];
                          if ((v970 & 7) == 0)
                            goto LABEL_1021;
                          goto LABEL_1007;
                        }
                        v976 = v973 - (v970 & 0xF);
                        v983 = (int64x2_t)xmmword_181267BA0;
                        v984 = (int64x2_t)xmmword_181267BB0;
                        v985 = (int64x2_t)xmmword_181267BC0;
                        v986 = (int64x2_t)xmmword_181267BD0;
                        v987 = (int64x2_t)xmmword_1812332B0;
                        v988 = (int64x2_t)xmmword_181267BE0;
                        v989 = 0uLL;
                        v990 = v976;
                        v991 = 0uLL;
                        v992 = 0uLL;
                        v993 = 0uLL;
                        v994 = 0uLL;
                        v995 = 0uLL;
                        v996 = (int64x2_t)xmmword_181233290;
                        v997 = 0uLL;
                        v998 = 0uLL;
                        v999 = (int64x2_t)xmmword_181233120;
                        do
                        {
                          v1000 = *(uint8x16_t *)v972;
                          v972 += 4;
                          v1001 = vmovl_u8(*(uint8x8_t *)v1000.i8);
                          v1002 = vmovl_high_u8(v1000);
                          v1003 = vmovl_u16(*(uint16x4_t *)v1002.i8);
                          v1004 = vmovl_high_u16(v1002);
                          v1005 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v1006 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v987, 3uLL), v1005);
                          v1007 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v986, 3uLL), v1005);
                          v1008 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v988, 3uLL), v1005);
                          v1009 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v996, 3uLL), v1005);
                          v1010 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v985, 3uLL), v1005);
                          v1011 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v999, 3uLL), v1005);
                          v1012 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v984, 3uLL), v1005);
                          v1013.i64[0] = v1004.u32[2];
                          v1013.i64[1] = v1004.u32[3];
                          v1014 = (int8x16_t)vshlq_u64(v1013, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v983, 3uLL), v1005));
                          v1015 = vmovl_u16(*(uint16x4_t *)v1001.i8);
                          v1013.i64[0] = v1004.u32[0];
                          v1013.i64[1] = v1004.u32[1];
                          v1016 = (int8x16_t)vshlq_u64(v1013, v1012);
                          v1013.i64[0] = v1015.u32[0];
                          v1013.i64[1] = v1015.u32[1];
                          v1017 = (int8x16_t)vshlq_u64(v1013, v1011);
                          v1013.i64[0] = v1003.u32[2];
                          v1013.i64[1] = v1003.u32[3];
                          v1018 = (int8x16_t)vshlq_u64(v1013, v1010);
                          v1019 = vmovl_high_u16(v1001);
                          v1013.i64[0] = v1015.u32[2];
                          v1013.i64[1] = v1015.u32[3];
                          v1020 = (int8x16_t)vshlq_u64(v1013, v1009);
                          v1013.i64[0] = v1019.u32[0];
                          v1013.i64[1] = v1019.u32[1];
                          v1021 = (int8x16_t)vshlq_u64(v1013, v1008);
                          v1013.i64[0] = v1003.u32[0];
                          v1013.i64[1] = v1003.u32[1];
                          v1022 = (int8x16_t)vshlq_u64(v1013, v1007);
                          v1013.i64[0] = v1019.u32[2];
                          v1013.i64[1] = v1019.u32[3];
                          v993 = vorrq_s8((int8x16_t)vshlq_u64(v1013, v1006), v993);
                          v994 = vorrq_s8(v1022, v994);
                          v992 = vorrq_s8(v1021, v992);
                          v991 = vorrq_s8(v1020, v991);
                          v995 = vorrq_s8(v1018, v995);
                          v989 = vorrq_s8(v1017, v989);
                          v997 = vorrq_s8(v1016, v997);
                          v998 = vorrq_s8(v1014, v998);
                          v1023 = vdupq_n_s64(0x10uLL);
                          v988 = vaddq_s64(v988, v1023);
                          v996 = vaddq_s64(v996, v1023);
                          v999 = vaddq_s64(v999, v1023);
                          v987 = vaddq_s64(v987, v1023);
                          v986 = vaddq_s64(v986, v1023);
                          v985 = vaddq_s64(v985, v1023);
                          v984 = vaddq_s64(v984, v1023);
                          v983 = vaddq_s64(v983, v1023);
                          v990 -= 16;
                        }
                        while (v990);
                        v1024 = vorrq_s8(vorrq_s8(vorrq_s8(v989, v994), vorrq_s8(v992, v997)), vorrq_s8(vorrq_s8(v991, v995), vorrq_s8(v993, v998)));
                        *(int8x8_t *)v1024.i8 = vorr_s8(*(int8x8_t *)v1024.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1024, v1024, 8uLL));
                        *v2192 = *(int8x8_t *)v1024.i8;
                        v975 = v1024.i64[0];
                        if ((v970 & 0xF) == 0)
                        {
LABEL_1021:
                          v902 = (uint64_t *)v2192;
                          goto LABEL_1011;
                        }
                        if ((v970 & 0xF) >= 8uLL)
                          goto LABEL_1018;
LABEL_1007:
                        v977 = v973 - v976;
                        v978 = 8 * v976;
                        v979 = (unsigned __int8 *)(v971 + v976 + v968);
                        do
                        {
                          v980 = *v979++;
                          v975 |= (unint64_t)v980 << (v978 & 0xF8);
                          *v2192 = (int8x8_t)v975;
                          v978 += 8;
                          --v977;
                        }
                        while (v977);
                        v902 = (uint64_t *)v2192;
LABEL_1011:
                        *v2190 = v968 + v970;
                        *v14 = 8 * v970;
                        v981 = 8 * v970 - v967;
                        if (8 * v970 >= v967)
                        {
                          v945 = v975 >> v967;
                          *v902 = v945;
                          *v14 = v981;
                          v982 = (v975 << v946) & 0xF | v966;
                          v946 = v981;
                          v964 += 3;
                          if ((v982 & 8) == 0)
                            goto LABEL_984;
                          continue;
                        }
                        llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v14, &v2199, v2196);
                        v886 = (void *)v2196[0];
                        if (v2196[0])
                          goto LABEL_1620;
                      }
                    }
                    break;
                  }
                }
                else
                {
                  v931.i8[0] = 0;
                  v932 = 4;
                  LODWORD(v2196[0]) = 4;
                  v934 = *(_QWORD *)(v8 + 40);
                  v933 = *(_QWORD *)(v8 + 48);
                  v935 = v934 - v933;
                  if (v934 <= v933)
                    goto LABEL_960;
LABEL_948:
                  v936 = *(_QWORD *)v2189;
                  v937 = (int *)(*(_QWORD *)v2189 + v933);
                  if (v934 >= v933 + 8)
                  {
                    *v2192 = *(int8x8_t *)v937;
                    v935 = 8;
                    goto LABEL_979;
                  }
                  *v2192 = 0;
                  if (!v935)
                    goto LABEL_979;
                  if (v935 < 8uLL || (unint64_t)v2192 < v936 + v933 + v935 && v937 < v2191)
                  {
                    v938 = 0;
                    v939 = 0;
                    goto LABEL_954;
                  }
                  if (v935 >= 0x10uLL)
                  {
                    v938 = v935 - (unint64_t)(v935 & 0xF);
                    v1163 = (int64x2_t)xmmword_1812332B0;
                    v1164 = (int64x2_t)xmmword_181267BE0;
                    v1165 = (int64x2_t)xmmword_181233290;
                    v1166 = 0uLL;
                    v1167 = 0uLL;
                    v1168 = (int64x2_t)xmmword_181233120;
                    v1169 = v938;
                    v1170 = (int64x2_t)xmmword_181267BD0;
                    v1171 = (int64x2_t)xmmword_181267BC0;
                    v1172 = (int64x2_t)xmmword_181267BB0;
                    v1173 = (int64x2_t)xmmword_181267BA0;
                    v1174 = 0uLL;
                    v1175 = 0uLL;
                    v1176 = 0uLL;
                    v1177 = 0uLL;
                    v1178 = 0uLL;
                    v1179 = 0uLL;
                    do
                    {
                      v1180 = *(uint8x16_t *)v937;
                      v937 += 4;
                      v1181 = vmovl_u8(*(uint8x8_t *)v1180.i8);
                      v1182 = vmovl_high_u8(v1180);
                      v1183 = vmovl_u16(*(uint16x4_t *)v1182.i8);
                      v1184 = vmovl_high_u16(v1182);
                      v1185 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                      v1186 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1163, 3uLL), v1185);
                      v1187 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1170, 3uLL), v1185);
                      v1188 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1164, 3uLL), v1185);
                      v1189 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1165, 3uLL), v1185);
                      v1190 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1171, 3uLL), v1185);
                      v1191 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1168, 3uLL), v1185);
                      v1192 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1172, 3uLL), v1185);
                      v1193.i64[0] = v1184.u32[2];
                      v1193.i64[1] = v1184.u32[3];
                      v1194 = (int8x16_t)vshlq_u64(v1193, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1173, 3uLL), v1185));
                      v1195 = vmovl_u16(*(uint16x4_t *)v1181.i8);
                      v1193.i64[0] = v1184.u32[0];
                      v1193.i64[1] = v1184.u32[1];
                      v1196 = (int8x16_t)vshlq_u64(v1193, v1192);
                      v1193.i64[0] = v1195.u32[0];
                      v1193.i64[1] = v1195.u32[1];
                      v1197 = (int8x16_t)vshlq_u64(v1193, v1191);
                      v1193.i64[0] = v1183.u32[2];
                      v1193.i64[1] = v1183.u32[3];
                      v1198 = (int8x16_t)vshlq_u64(v1193, v1190);
                      v1199 = vmovl_high_u16(v1181);
                      v1193.i64[0] = v1195.u32[2];
                      v1193.i64[1] = v1195.u32[3];
                      v1200 = (int8x16_t)vshlq_u64(v1193, v1189);
                      v1193.i64[0] = v1199.u32[0];
                      v1193.i64[1] = v1199.u32[1];
                      v1201 = (int8x16_t)vshlq_u64(v1193, v1188);
                      v1193.i64[0] = v1183.u32[0];
                      v1193.i64[1] = v1183.u32[1];
                      v1202 = (int8x16_t)vshlq_u64(v1193, v1187);
                      v1193.i64[0] = v1199.u32[2];
                      v1193.i64[1] = v1199.u32[3];
                      v1175 = vorrq_s8((int8x16_t)vshlq_u64(v1193, v1186), v1175);
                      v1176 = vorrq_s8(v1202, v1176);
                      v1174 = vorrq_s8(v1201, v1174);
                      v1167 = vorrq_s8(v1200, v1167);
                      v1177 = vorrq_s8(v1198, v1177);
                      v1166 = vorrq_s8(v1197, v1166);
                      v1178 = vorrq_s8(v1196, v1178);
                      v1179 = vorrq_s8(v1194, v1179);
                      v1203 = vdupq_n_s64(0x10uLL);
                      v1164 = vaddq_s64(v1164, v1203);
                      v1165 = vaddq_s64(v1165, v1203);
                      v1168 = vaddq_s64(v1168, v1203);
                      v1163 = vaddq_s64(v1163, v1203);
                      v1170 = vaddq_s64(v1170, v1203);
                      v1171 = vaddq_s64(v1171, v1203);
                      v1172 = vaddq_s64(v1172, v1203);
                      v1173 = vaddq_s64(v1173, v1203);
                      v1169 -= 16;
                    }
                    while (v1169);
                    v1204 = vorrq_s8(vorrq_s8(vorrq_s8(v1166, v1176), vorrq_s8(v1174, v1178)), vorrq_s8(vorrq_s8(v1167, v1177), vorrq_s8(v1175, v1179)));
                    v1205 = vorr_s8(*(int8x8_t *)v1204.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1204, v1204, 8uLL));
                    *v2192 = v1205;
                    if ((v935 & 0xF) == 0)
                      goto LABEL_979;
                    v939 = v1205;
                    if ((v935 & 0xF) < 8uLL)
                      goto LABEL_954;
                  }
                  else
                  {
                    v939 = 0;
                    v938 = 0;
                  }
                  v1206 = vdupq_n_s64(v938);
                  v1207 = vaddq_s64(v1206, (int64x2_t)xmmword_1812332B0);
                  v1208 = (int8x16_t)(unint64_t)v939;
                  v1209 = v938 + v933;
                  v1210 = v938 + (v935 & 7);
                  v938 = v935 - (unint64_t)(v935 & 7);
                  v1211 = vaddq_s64(v1206, (int64x2_t)xmmword_181267BE0);
                  v1212 = vaddq_s64(v1206, (int64x2_t)xmmword_181233290);
                  v1213 = vaddq_s64(v1206, (int64x2_t)xmmword_181233120);
                  v1214 = 0uLL;
                  v1215 = (uint8x8_t *)(v936 + v1209);
                  v1216 = v1210 - v935;
                  v1217 = 0uLL;
                  v1218 = 0uLL;
                  do
                  {
                    v1219 = *v1215++;
                    v1220 = vmovl_u8(v1219);
                    v1221 = vmovl_high_u16(v1220);
                    v1222.i64[0] = v1221.u32[2];
                    v1222.i64[1] = v1221.u32[3];
                    v1223 = v1222;
                    v1222.i64[0] = v1221.u32[0];
                    v1222.i64[1] = v1221.u32[1];
                    v1224 = v1222;
                    v1225 = vmovl_u16(*(uint16x4_t *)v1220.i8);
                    v1222.i64[0] = v1225.u32[2];
                    v1222.i64[1] = v1225.u32[3];
                    v1226 = v1222;
                    v1222.i64[0] = v1225.u32[0];
                    v1222.i64[1] = v1225.u32[1];
                    v1218 = vorrq_s8((int8x16_t)vshlq_u64(v1223, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1207, 3uLL), v2171)), v1218);
                    v1217 = vorrq_s8((int8x16_t)vshlq_u64(v1224, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1211, 3uLL), v2171)), v1217);
                    v1214 = vorrq_s8((int8x16_t)vshlq_u64(v1226, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1212, 3uLL), v2171)), v1214);
                    v1227 = vdupq_n_s64(8uLL);
                    v1208 = vorrq_s8((int8x16_t)vshlq_u64(v1222, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1213, 3uLL), v2171)), v1208);
                    v1211 = vaddq_s64(v1211, v1227);
                    v1212 = vaddq_s64(v1212, v1227);
                    v1213 = vaddq_s64(v1213, v1227);
                    v1207 = vaddq_s64(v1207, v1227);
                    v1216 += 8;
                  }
                  while (v1216);
                  v1228 = vorrq_s8(vorrq_s8(v1208, v1217), vorrq_s8(v1214, v1218));
                  v1229 = vorr_s8(*(int8x8_t *)v1228.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1228, v1228, 8uLL));
                  *v2192 = v1229;
                  if ((v935 & 7) != 0)
                  {
                    v939 = v1229;
LABEL_954:
                    v940 = v935 - v938;
                    v941 = 8 * v938;
                    v942 = (unsigned __int8 *)(v936 + v938 + v933);
                    do
                    {
                      v943 = *v942++;
                      *(_QWORD *)&v939 |= (unint64_t)v943 << (v941 & 0xF8);
                      *v2192 = v939;
                      v941 += 8;
                      --v940;
                    }
                    while (v940);
                  }
LABEL_979:
                  *v2190 = v933 + v935;
                  *v2191 = 8 * v935;
                  v946 = 8 * v935 - v932;
                  if (8 * v935 >= v932)
                    goto LABEL_983;
LABEL_980:
                  v14 = v2191;
                  llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v2191, (int *)v2196, (uint64_t *)&__p);
                  v886 = __p;
                  v12 = v2188;
                  v13 = v2189;
                  if (__p)
                    goto LABEL_1620;
                }
              }
              else
              {
LABEL_942:
                if ((_DWORD)v899 != 2)
                {
                  if (!(_DWORD)v899)
                  {
                    if (*(_DWORD *)(v8 + 104))
                    {
                      if (v901 < 0x20)
                      {
                        v1947 = 0;
                      }
                      else
                      {
                        *v890 = v900 >> (v901 - 32);
                        v1947 = 32;
                      }
                      *v14 = v1947;
                      llvm::BitstreamCursor::popBlockScope(v13);
                      *a1 = 0;
                    }
                    else
                    {
LABEL_1724:
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
                      LOWORD(v2225) = 259;
                    }
                    goto LABEL_1886;
                  }
                  LODWORD(__s.__r_.__value_.__r.__words[1]) = 0;
                  llvm::BitstreamCursor::readRecord(v13, ((v899 << 32) | 3) >> 32, (uint64_t)&__s, 0, (uint64_t)&v2205);
                  if ((v2206 & 1) != 0)
                  {
                    v922 = 0;
                    v923 = v2205;
                    v2205 = 0;
                    *a1 = (uint64_t)v923;
                    goto LABEL_1106;
                  }
                  if ((_DWORD)v2205 != 2)
                  {
                    if ((_DWORD)v2205 == 1)
                    {
                      v903 = __s.__r_.__value_.__r.__words[1];
                      if ((__s.__r_.__value_.__s.__data_[8] & 1) != 0)
                      {
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid parameter attribute record";
                        LOWORD(v2225) = 259;
                        v922 = 0;
                        v13 = v2189;
                      }
                      else
                      {
                        if (LODWORD(__s.__r_.__value_.__r.__words[1]))
                        {
                          v904 = 0;
                          do
                          {
                            __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(v8 + 424);
                            __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v2224;
                            __dst.__r_.__value_.__r.__words[2] = 0x800000000;
                            v905 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v904 | 1));
                            v906 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * v904);
                            if ((v905 & 0xFFFF0000) != 0)
                              llvm::AttrBuilder::addAlignmentAttr((uint64_t **)&__dst, __clz(WORD1(v905)) ^ 0x13F);
                            v907 = (unsigned __int16)v905 | ((HIDWORD(v905) & 0xFFFFF) << 21);
                            if (v906 == 0xFFFFFFFFLL)
                            {
                              if ((v905 & 0x200) != 0)
                                v908 = (unsigned __int16)v905 & 0xFDFF | ((HIDWORD(v905) & 0xFFFFF) << 21) & 0x1FFFFE0FDFFLL;
                              else
                                v908 = (unsigned __int16)v905 | ((HIDWORD(v905) & 0xFFFFF) << 21);
                              v8 = v2186;
                              if ((v908 & 0x400) != 0)
                              {
                                if ((v905 & 0x200) != 0)
                                  v909 = 0;
                                else
                                  v909 = 21;
                                v907 = v908 & 0x1FFFFE0FBFFLL;
LABEL_801:
                                llvm::AttrBuilder::addMemoryAttr((uint64_t **)&__dst, v909);
                                if (v907)
                                {
LABEL_802:
                                  v910 = 0;
                                  while (1)
                                  {
                                    v911 = 0;
                                    switch(v910)
                                    {
                                      case 3:
                                        v912 = v907 & 0x1000;
                                        if ((v907 & 0x1000) != 0)
                                          goto LABEL_916;
                                        goto LABEL_804;
                                      case 4:
                                        v912 = v907 & 0x20000000000;
                                        if ((v907 & 0x20000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 5:
                                        v912 = v907 & 0x10000000000;
                                        if ((v907 & 0x10000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 6:
                                        v912 = v907 & 0x400000000000;
                                        if ((v907 & 0x400000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 11:
                                        v912 = v907 & 0x2000000000000000;
                                        if ((v907 & 0x2000000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 12:
                                        v912 = v907 & 8;
                                        if ((v907 & 8) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 13:
                                        v912 = v907 & 0x2000000;
                                        if ((v907 & 0x2000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 14:
                                        v912 = v907 & 0x200000000000;
                                        if ((v907 & 0x200000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 15:
                                        v912 = v907 & 0x200000000;
                                        if ((v907 & 0x200000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 17:
                                        v912 = v907 & 0x1000000;
                                        if ((v907 & 0x1000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 18:
                                        v912 = v907 & 0x100;
                                        if ((v907 & 0x100) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 19:
                                        v912 = v907 & 0x40;
                                        if ((v907 & 0x40) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 20:
                                        v912 = v907 & 0x4000000000;
                                        if ((v907 & 0x4000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 22:
                                        v912 = v907 & 0x200000;
                                        if ((v907 & 0x200000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 23:
                                        v912 = v907 & 0x200000000000000;
                                        if ((v907 & 0x200000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 24:
                                        v912 = v907 & 0x400000000;
                                        if ((v907 & 0x400000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 25:
                                        v912 = v907 & 0x8000000000000000;
                                        if (v907 >= 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 26:
                                        v912 = v907 & 0x800000;
                                        if ((v907 & 0x800000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 27:
                                        v912 = v907 & 0x800;
                                        if ((v907 & 0x800) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 30:
                                        v912 = v907 & 0x1000000000000;
                                        if ((v907 & 0x1000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 31:
                                        v912 = v907 & 0x400000;
                                        if ((v907 & 0x400000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 32:
                                        v912 = v907 & 4;
                                        if ((v907 & 4) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 37:
                                        v912 = v907 & 0x20;
                                        if ((v907 & 0x20) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 38:
                                        v912 = v907 & 0x80000000;
                                        if ((v907 & 0x80000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 39:
                                        v912 = v907 & 0x100000000000;
                                        if ((v907 & 0x100000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 41:
                                        v912 = v907 & 0x400000000000000;
                                        if ((v907 & 0x400000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 43:
                                        v912 = v907 & 0x2000;
                                        if ((v907 & 0x2000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 44:
                                        v912 = v907 & 0x40000000000;
                                        if ((v907 & 0x40000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 46:
                                        v912 = v907 & 0x200;
                                        if ((v907 & 0x200) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 47:
                                        v912 = v907 & 0x400;
                                        if ((v907 & 0x400) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 48:
                                        v912 = v907 & 0x8000000000;
                                        if ((v907 & 0x8000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 49:
                                        v912 = v907 & 0x20000000;
                                        if ((v907 & 0x20000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 50:
                                        v912 = v907 & 2;
                                        if ((v907 & 2) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 51:
                                        v912 = v907 & 0x800000000000;
                                        if ((v907 & 0x800000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 52:
                                        v912 = v907 & 0x100000000;
                                        if ((v907 & 0x100000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 53:
                                        v912 = v907 & 0x100000000000000;
                                        if ((v907 & 0x100000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 55:
                                        v912 = v907 & 0x2000000000;
                                        if ((v907 & 0x2000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 56:
                                        v912 = v907 & 0x1000000000;
                                        if ((v907 & 0x1000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 57:
                                        v912 = v907 & 0x800000000000000;
                                        if ((v907 & 0x800000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 59:
                                        v912 = v907 & 0x40000000000000;
                                        if ((v907 & 0x40000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 60:
                                        v912 = v907 & 0x1000000000000000;
                                        if ((v907 & 0x1000000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 61:
                                        v912 = v907 & 0x4000;
                                        if ((v907 & 0x4000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 62:
                                        v912 = (unsigned __int16)v907 & 0x8000;
                                        if ((v907 & 0x8000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 63:
                                        v912 = v907 & 0x800000000;
                                        if ((v907 & 0x800000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 64:
                                        v912 = v907 & 0x80000000000000;
                                        if ((v907 & 0x80000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 66:
                                        v912 = v907 & 0x10000000000000;
                                        if ((v907 & 0x10000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 67:
                                        v912 = v907 & 0x8000000000000;
                                        if ((v907 & 0x8000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 68:
                                        v912 = v907 & 0x4000000000000000;
                                        if ((v907 & 0x4000000000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 70:
                                        v911 = 0x20000000000000;
                                        goto LABEL_915;
                                      case 71:
                                        v912 = v907 & 1;
                                        if ((v907 & 1) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 73:
                                        v912 = v907 & 0x80;
                                        if ((v907 & 0x80) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 75:
                                        v912 = v907 & 0x80000000000;
                                        if ((v907 & 0x80000000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 77:
                                        v912 = v907 & 0x10;
                                        if ((v907 & 0x10) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 78:
                                        v912 = v907 & 0x1F0000;
                                        if ((v907 & 0x1F0000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 85:
                                        v912 = v907 & 0x1C000000;
                                        if ((v907 & 0x1C000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 86:
                                        v912 = v907 & 0x40000000;
                                        if ((v907 & 0x40000000) == 0)
                                          goto LABEL_804;
                                        goto LABEL_916;
                                      case 88:
                                        goto LABEL_930;
                                      default:
LABEL_915:
                                        v912 = v911 & v907;
                                        if (!v912)
                                          goto LABEL_804;
LABEL_916:
                                        if (v910 == 85)
                                        {
                                          v916 = (v912 >> 26) - 1;
                                          v917 = __clz((1 << v916)) ^ 0x13F;
                                          if (v916 <= 0x1F)
                                            v918 = v917;
                                          else
                                            v918 = 0;
                                          llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&__dst, v918);
                                          v910 = 86;
                                        }
                                        else if (v910 == 78)
                                        {
                                          v913 = (v912 >> 16) - 1;
                                          v914 = __clz((1 << v913)) ^ 0x13F;
                                          if (v913 <= 0x1F)
                                            v915 = v914;
                                          else
                                            v915 = 0;
                                          llvm::AttrBuilder::addAlignmentAttr((uint64_t **)&__dst, v915);
                                          v910 = 79;
                                        }
                                        else if ((v910 - 72) > 5)
                                        {
                                          llvm::AttrBuilder::addAttribute((uint64_t **)&__dst, v910);
LABEL_804:
                                          ++v910;
                                        }
                                        else
                                        {
                                          llvm::AttrBuilder::addTypeAttr((uint64_t **)&__dst, v910++, 0);
                                        }
                                        break;
                                    }
                                  }
                                }
                                goto LABEL_930;
                              }
                              if ((v905 & 0x200) != 0)
                              {
                                v909 = 0;
                                v907 = (unsigned __int16)v905 & 0xFDFF | ((HIDWORD(v905) & 0xFFFFF) << 21) & 0x1FFFFE0FDFFLL;
                                goto LABEL_801;
                              }
                            }
                            else
                            {
                              v8 = v2186;
                            }
                            if (v907)
                              goto LABEL_802;
LABEL_930:
                            v919 = v904;
                            v920 = llvm::AttributeList::get(*(uint64_t **)(v8 + 424), *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * v904), (uint64_t)&__dst);
                            v921 = v2210;
                            if (v2210 >= (unint64_t)DWORD1(v2210))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2209, (char *)&v2210 + 8, v2210 + 1, 8);
                              v921 = v2210;
                            }
                            *((_QWORD *)v2209 + v921) = v920;
                            LODWORD(v2210) = v2210 + 1;
                            if ((std::string **)__dst.__r_.__value_.__l.__size_ != &v2224)
                              free((void *)__dst.__r_.__value_.__l.__size_);
                            v904 = v919 + 2;
                          }
                          while (v919 + 2 != v903);
                        }
                        v1054 = llvm::AttributeList::get(*(uint64_t **)(v8 + 424), (uint64_t *)v2209, (uint64_t *)v2210);
                        v1055 = v1054;
                        v1056 = *(uint64_t ***)(v8 + 1448);
                        v1057 = *(_QWORD *)(v8 + 1456);
                        if ((unint64_t)v1056 < v1057)
                        {
                          *v1056 = v1054;
                          v1058 = v1056 + 1;
                          a1 = (uint64_t *)v2187;
                          v13 = v2189;
                          v14 = v2191;
                          goto LABEL_1105;
                        }
                        v1137 = *(char **)(v8 + 1440);
                        v1138 = ((char *)v1056 - v1137) >> 3;
                        v1139 = v1138 + 1;
                        if ((unint64_t)(v1138 + 1) >> 61)
                          goto LABEL_2157;
                        v1140 = v1057 - (_QWORD)v1137;
                        if (v1140 >> 2 > v1139)
                          v1139 = v1140 >> 2;
                        if ((unint64_t)v1140 >= 0x7FFFFFFFFFFFFFF8)
                          v1139 = 0x1FFFFFFFFFFFFFFFLL;
                        v2159 = v1139;
                        if (v1139)
                        {
                          if (v1139 >> 61)
                            goto LABEL_2158;
                          v1141 = (char *)operator new(8 * v1139);
                        }
                        else
                        {
                          v1141 = 0;
                        }
                        v1152 = (uint64_t **)&v1141[8 * v1138];
                        *v1152 = v1055;
                        v1058 = v1152 + 1;
                        if (v1056 == (uint64_t **)v1137)
                        {
                          v8 = v2186;
                          v14 = v2191;
                        }
                        else
                        {
                          v1153 = (char *)(v1056 - 1) - v1137;
                          v14 = v2191;
                          if (v1153 < 0x58)
                          {
                            v8 = v2186;
                            goto LABEL_1101;
                          }
                          v8 = v2186;
                          if ((unint64_t)(v1137 - v1141) < 0x20)
                            goto LABEL_2162;
                          v1154 = (v1153 >> 3) + 1;
                          v1155 = 8 * (v1154 & 0x3FFFFFFFFFFFFFFCLL);
                          v1156 = &v1056[v1155 / 0xFFFFFFFFFFFFFFF8];
                          v1152 = (uint64_t **)((char *)v1152 - v1155);
                          v1157 = &v1141[8 * v1138 - 16];
                          v1158 = v1056 - 2;
                          v1159 = v1154 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v1160 = *(_OWORD *)v1158;
                            *((_OWORD *)v1157 - 1) = *((_OWORD *)v1158 - 1);
                            *(_OWORD *)v1157 = v1160;
                            v1157 -= 32;
                            v1158 -= 4;
                            v1159 -= 4;
                          }
                          while (v1159);
                          v1056 = v1156;
                          if (v1154 != (v1154 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_2162:
                            do
                            {
LABEL_1101:
                              v1161 = *--v1056;
                              *--v1152 = v1161;
                            }
                            while (v1056 != (uint64_t **)v1137);
                          }
                          v1056 = *(uint64_t ***)(v8 + 1440);
                        }
                        *(_QWORD *)(v8 + 1440) = v1152;
                        *(_QWORD *)(v8 + 1448) = v1058;
                        *(_QWORD *)(v8 + 1456) = &v1141[8 * v2159];
                        a1 = (uint64_t *)v2187;
                        v13 = v2189;
                        if (v1056)
                          operator delete(v1056);
LABEL_1105:
                        *(_QWORD *)(v8 + 1448) = v1058;
                        LODWORD(v2210) = 0;
                        v922 = 1;
                        v12 = v2188;
                      }
                    }
                    else
                    {
                      v922 = 1;
                    }
LABEL_1106:
                    if ((v2206 & 1) != 0)
                    {
                      v1162 = v2205;
                      v2205 = 0;
                      if (v1162)
                        (*(void (**)(void *))(*(_QWORD *)v1162 + 8))(v1162);
                    }
                    if ((v922 & 1) != 0)
                      continue;
LABEL_1886:
                    v1910 = v2209;
                    if (v2209 == (char *)&v2210 + 8)
                      goto LABEL_1888;
LABEL_1887:
                    free(v1910);
                    goto LABEL_1888;
                  }
                  v947 = LODWORD(__s.__r_.__value_.__r.__words[1]);
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]))
                  {
                    v948 = a4;
                    v949 = 0;
                    do
                    {
                      v950 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * v949);
                      v951 = v2185;
LABEL_965:
                      v952 = (unsigned int *)*v951;
                      v953 = (uint64_t **)v951;
                      if (*v951)
                      {
                        do
                        {
                          v951 = v952;
                          v954 = v952[8];
                          if (v954 > v950)
                            goto LABEL_965;
                          if (v954 >= v950)
                            goto LABEL_973;
                          v952 = (unsigned int *)v951[1];
                        }
                        while (v952);
                        v953 = (uint64_t **)(v951 + 1);
                      }
                      v955 = v951;
                      v951 = operator new(0x30uLL);
                      *((_DWORD *)v951 + 8) = v950;
                      v951[5] = 0;
                      *v951 = 0;
                      v951[1] = 0;
                      v951[2] = v955;
                      *v953 = v951;
                      v956 = **(_QWORD **)(v2186 + 1464);
                      v957 = v951;
                      if (v956)
                      {
                        *(_QWORD *)(v2186 + 1464) = v956;
                        v957 = *v953;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2186 + 1472), v957);
                      ++*(_QWORD *)(v2186 + 1480);
                      v13 = v2189;
LABEL_973:
                      v958 = v951[5];
                      v959 = v2210;
                      if (v2210 >= (unint64_t)DWORD1(v2210))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2209, (char *)&v2210 + 8, v2210 + 1, 8);
                        v959 = v2210;
                      }
                      *((_QWORD *)v2209 + v959) = v958;
                      v960 = v2210 + 1;
                      LODWORD(v2210) = v2210 + 1;
                      ++v949;
                    }
                    while (v949 != v947);
                    a4 = v948;
                    v8 = v2186;
                  }
                  else
                  {
                    v960 = v2210;
                  }
                  v1125 = llvm::AttributeList::get(*(uint64_t **)(v8 + 424), (uint64_t *)v2209, (uint64_t *)v960);
                  v1126 = v1125;
                  v1127 = *(uint64_t ***)(v8 + 1448);
                  v1128 = *(_QWORD *)(v8 + 1456);
                  if ((unint64_t)v1127 < v1128)
                  {
                    *v1127 = v1125;
                    v1058 = v1127 + 1;
                    a1 = (uint64_t *)v2187;
                    v14 = v2191;
                    goto LABEL_1105;
                  }
                  v1129 = *(char **)(v8 + 1440);
                  v1130 = ((char *)v1127 - v1129) >> 3;
                  v1131 = v1130 + 1;
                  if ((unint64_t)(v1130 + 1) >> 61)
                    goto LABEL_2157;
                  v1132 = v1128 - (_QWORD)v1129;
                  if (v1132 >> 2 > v1131)
                    v1131 = v1132 >> 2;
                  if ((unint64_t)v1132 >= 0x7FFFFFFFFFFFFFF8)
                    v1131 = 0x1FFFFFFFFFFFFFFFLL;
                  v2181 = a4;
                  if (v1131)
                  {
                    if (v1131 >> 61)
                      goto LABEL_2158;
                    v1133 = v1131;
                    v1134 = (char *)operator new(8 * v1131);
                  }
                  else
                  {
                    v1133 = 0;
                    v1134 = 0;
                  }
                  v1142 = (uint64_t **)&v1134[8 * v1130];
                  *v1142 = v1126;
                  v1058 = v1142 + 1;
                  if (v1127 == (uint64_t **)v1129)
                  {
                    v8 = v2186;
                    v14 = v2191;
                  }
                  else
                  {
                    v1143 = (char *)(v1127 - 1) - v1129;
                    v14 = v2191;
                    if (v1143 < 0x58)
                    {
                      v8 = v2186;
                      goto LABEL_1085;
                    }
                    v8 = v2186;
                    if ((unint64_t)(v1129 - v1134) < 0x20)
                      goto LABEL_2163;
                    v1144 = (v1143 >> 3) + 1;
                    v1145 = 8 * (v1144 & 0x3FFFFFFFFFFFFFFCLL);
                    v1146 = &v1127[v1145 / 0xFFFFFFFFFFFFFFF8];
                    v1142 = (uint64_t **)((char *)v1142 - v1145);
                    v1147 = &v1134[8 * v1130 - 16];
                    v1148 = v1127 - 2;
                    v1149 = v1144 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v1150 = *(_OWORD *)v1148;
                      *((_OWORD *)v1147 - 1) = *((_OWORD *)v1148 - 1);
                      *(_OWORD *)v1147 = v1150;
                      v1147 -= 32;
                      v1148 -= 4;
                      v1149 -= 4;
                    }
                    while (v1149);
                    v1127 = v1146;
                    if (v1144 != (v1144 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_2163:
                      do
                      {
LABEL_1085:
                        v1151 = *--v1127;
                        *--v1142 = v1151;
                      }
                      while (v1127 != (uint64_t **)v1129);
                    }
                    v1127 = *(uint64_t ***)(v8 + 1440);
                  }
                  *(_QWORD *)(v8 + 1440) = v1142;
                  *(_QWORD *)(v8 + 1448) = v1058;
                  *(_QWORD *)(v8 + 1456) = &v1134[8 * v1133];
                  a1 = (uint64_t *)v2187;
                  v13 = v2189;
                  if (v1127)
                    operator delete(v1127);
                  a4 = v2181;
                  goto LABEL_1105;
                }
                llvm::BitstreamCursor::ReadAbbrevRecord((char **)v13, (unint64_t *)&__dst);
                v886 = (void *)__dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                  goto LABEL_1620;
              }
            }
          case 0xA:
            llvm::BitstreamCursor::EnterSubBlock(v13, 0, 10, a1);
            if (*a1)
              goto LABEL_19;
            if (*(_QWORD *)(v8 + 1480))
              goto LABEL_73;
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__r.__words[2];
            __s.__r_.__value_.__l.__size_ = 0x4000000000;
            while (1)
            {
LABEL_512:
              v582 = *v14;
              if (*v14)
              {
                v583 = *(_DWORD *)(v8 + 68);
                v584 = *(int8x8_t *)(v8 + 56);
                v585 = v2192;
                if (v582 < v583)
                {
                  v587 = *(_QWORD *)(v8 + 40);
                  v586 = *(_QWORD *)(v8 + 48);
                  v583 -= v582;
                  LODWORD(v2196[0]) = v583;
                  v588 = v587 - v586;
                  if (v587 <= v586)
                    goto LABEL_1579;
                  goto LABEL_519;
                }
              }
              else
              {
                v587 = *(_QWORD *)(v8 + 40);
                v586 = *(_QWORD *)(v8 + 48);
                v585 = v2192;
                if (v587 <= v586)
                  goto LABEL_1719;
                v583 = *(_DWORD *)(v8 + 68);
                if (v583)
                {
                  v584 = 0;
                  LODWORD(v2196[0]) = *(_DWORD *)(v8 + 68);
                  v588 = v587 - v586;
                  if (v587 <= v586)
                    goto LABEL_1579;
LABEL_519:
                  v589 = *(_QWORD *)v13;
                  v590 = (int *)(*(_QWORD *)v13 + v586);
                  if (v587 >= v586 + 8)
                  {
                    v592 = *(_QWORD *)v590;
                    *v585 = v592;
                    v588 = 8;
                  }
                  else
                  {
                    *v585 = 0;
                    if (v588)
                    {
                      if (v588 < 8uLL
                        || ((unint64_t)v585 < v589 + v586 + v588 ? (v591 = v590 >= v14) : (v591 = 1), !v591))
                      {
                        v593 = 0;
                        v592 = 0;
                        goto LABEL_540;
                      }
                      if (v588 >= 0x10uLL)
                      {
                        v593 = v588 - (unint64_t)(v588 & 0xF);
                        v740 = (int64x2_t)xmmword_181267BA0;
                        v741 = (int64x2_t)xmmword_181267BB0;
                        v742 = (int64x2_t)xmmword_181267BC0;
                        v743 = (int64x2_t)xmmword_181267BD0;
                        v744 = (int64x2_t)xmmword_1812332B0;
                        v745 = (int64x2_t)xmmword_181267BE0;
                        v746 = 0uLL;
                        v747 = v593;
                        v748 = 0uLL;
                        v749 = 0uLL;
                        v750 = 0uLL;
                        v751 = 0uLL;
                        v752 = 0uLL;
                        v753 = (int64x2_t)xmmword_181233290;
                        v754 = 0uLL;
                        v755 = 0uLL;
                        v756 = (int64x2_t)xmmword_181233120;
                        do
                        {
                          v757 = *(uint8x16_t *)v590;
                          v590 += 4;
                          v758 = vmovl_u8(*(uint8x8_t *)v757.i8);
                          v759 = vmovl_high_u8(v757);
                          v760 = vmovl_u16(*(uint16x4_t *)v759.i8);
                          v761 = vmovl_high_u16(v759);
                          v762 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v763 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v744, 3uLL), v762);
                          v764 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v743, 3uLL), v762);
                          v765 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v745, 3uLL), v762);
                          v766 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v753, 3uLL), v762);
                          v767 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v742, 3uLL), v762);
                          v768 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v756, 3uLL), v762);
                          v769 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v741, 3uLL), v762);
                          v770.i64[0] = v761.u32[2];
                          v770.i64[1] = v761.u32[3];
                          v771 = (int8x16_t)vshlq_u64(v770, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v740, 3uLL), v762));
                          v772 = vmovl_u16(*(uint16x4_t *)v758.i8);
                          v770.i64[0] = v761.u32[0];
                          v770.i64[1] = v761.u32[1];
                          v773 = (int8x16_t)vshlq_u64(v770, v769);
                          v770.i64[0] = v772.u32[0];
                          v770.i64[1] = v772.u32[1];
                          v774 = (int8x16_t)vshlq_u64(v770, v768);
                          v770.i64[0] = v760.u32[2];
                          v770.i64[1] = v760.u32[3];
                          v775 = (int8x16_t)vshlq_u64(v770, v767);
                          v776 = vmovl_high_u16(v758);
                          v770.i64[0] = v772.u32[2];
                          v770.i64[1] = v772.u32[3];
                          v777 = (int8x16_t)vshlq_u64(v770, v766);
                          v770.i64[0] = v776.u32[0];
                          v770.i64[1] = v776.u32[1];
                          v778 = (int8x16_t)vshlq_u64(v770, v765);
                          v770.i64[0] = v760.u32[0];
                          v770.i64[1] = v760.u32[1];
                          v779 = (int8x16_t)vshlq_u64(v770, v764);
                          v770.i64[0] = v776.u32[2];
                          v770.i64[1] = v776.u32[3];
                          v750 = vorrq_s8((int8x16_t)vshlq_u64(v770, v763), v750);
                          v751 = vorrq_s8(v779, v751);
                          v749 = vorrq_s8(v778, v749);
                          v748 = vorrq_s8(v777, v748);
                          v752 = vorrq_s8(v775, v752);
                          v746 = vorrq_s8(v774, v746);
                          v754 = vorrq_s8(v773, v754);
                          v755 = vorrq_s8(v771, v755);
                          v780 = vdupq_n_s64(0x10uLL);
                          v745 = vaddq_s64(v745, v780);
                          v753 = vaddq_s64(v753, v780);
                          v756 = vaddq_s64(v756, v780);
                          v744 = vaddq_s64(v744, v780);
                          v743 = vaddq_s64(v743, v780);
                          v742 = vaddq_s64(v742, v780);
                          v741 = vaddq_s64(v741, v780);
                          v740 = vaddq_s64(v740, v780);
                          v747 -= 16;
                        }
                        while (v747);
                        v781 = vorrq_s8(vorrq_s8(vorrq_s8(v746, v751), vorrq_s8(v749, v754)), vorrq_s8(vorrq_s8(v748, v752), vorrq_s8(v750, v755)));
                        *(int8x8_t *)v781.i8 = vorr_s8(*(int8x8_t *)v781.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v781, v781, 8uLL));
                        v585 = v2192;
                        *v2192 = *(int8x8_t *)v781.i8;
                        v592 = v781.i64[0];
                        if ((v588 & 0xF) != 0)
                        {
                          if ((v588 & 0xF) < 8uLL)
                            goto LABEL_540;
                          goto LABEL_697;
                        }
                      }
                      else
                      {
                        v592 = 0;
                        v593 = 0;
LABEL_697:
                        v782 = vdupq_n_s64(v593);
                        v783 = vaddq_s64(v782, (int64x2_t)xmmword_1812332B0);
                        v784 = (int8x16_t)v592;
                        v785 = v586 + v593;
                        v786 = v593 + (v588 & 7);
                        v593 = v588 - (unint64_t)(v588 & 7);
                        v787 = vaddq_s64(v782, (int64x2_t)xmmword_181267BE0);
                        v788 = vaddq_s64(v782, (int64x2_t)xmmword_181233290);
                        v789 = vaddq_s64(v782, (int64x2_t)xmmword_181233120);
                        v790 = 0uLL;
                        v791 = (uint8x8_t *)(v589 + v785);
                        v792 = v786 - v588;
                        v793 = 0uLL;
                        v794 = 0uLL;
                        do
                        {
                          v795 = *v791++;
                          v796 = vmovl_u8(v795);
                          v797 = vmovl_high_u16(v796);
                          v798.i64[0] = v797.u32[2];
                          v798.i64[1] = v797.u32[3];
                          v799 = v798;
                          v798.i64[0] = v797.u32[0];
                          v798.i64[1] = v797.u32[1];
                          v800 = v798;
                          v801 = vmovl_u16(*(uint16x4_t *)v796.i8);
                          v798.i64[0] = v801.u32[2];
                          v798.i64[1] = v801.u32[3];
                          v802 = v798;
                          v798.i64[0] = v801.u32[0];
                          v798.i64[1] = v801.u32[1];
                          v803 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v794 = vorrq_s8((int8x16_t)vshlq_u64(v799, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v783, 3uLL), v803)), v794);
                          v793 = vorrq_s8((int8x16_t)vshlq_u64(v800, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v787, 3uLL), v803)), v793);
                          v790 = vorrq_s8((int8x16_t)vshlq_u64(v802, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v788, 3uLL), v803)), v790);
                          v804 = vdupq_n_s64(8uLL);
                          v784 = vorrq_s8((int8x16_t)vshlq_u64(v798, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v789, 3uLL), v803)), v784);
                          v787 = vaddq_s64(v787, v804);
                          v788 = vaddq_s64(v788, v804);
                          v789 = vaddq_s64(v789, v804);
                          v783 = vaddq_s64(v783, v804);
                          v792 += 8;
                        }
                        while (v792);
                        v805 = vorrq_s8(vorrq_s8(v784, v793), vorrq_s8(v790, v794));
                        *(int8x8_t *)v805.i8 = vorr_s8(*(int8x8_t *)v805.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v805, v805, 8uLL));
                        v585 = v2192;
                        *v2192 = *(int8x8_t *)v805.i8;
                        v592 = v805.i64[0];
                        if ((v588 & 7) != 0)
                        {
LABEL_540:
                          v602 = v588 - v593;
                          v603 = 8 * v593;
                          v604 = (unsigned __int8 *)(v589 + v593 + v586);
                          do
                          {
                            v605 = *v604++;
                            v585 = v2192;
                            v592 |= (unint64_t)v605 << (v603 & 0xF8);
                            *v2192 = (int8x8_t)v592;
                            v603 += 8;
                            --v602;
                          }
                          while (v602);
                        }
                      }
                    }
                    else
                    {
                      v592 = 0;
                    }
                  }
                  *v2190 = v586 + v588;
                  *v14 = 8 * v588;
                  v596 = 8 * v588 - v583;
                  if (8 * v588 < v583)
                    goto LABEL_1582;
                  v595 = v592 >> v583;
                  *v585 = v592 >> v583;
                  *v14 = v596;
                  v606 = (v592 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v583)) << v582;
                  v594 = v606 | *(_QWORD *)&v584;
                  if ((v606 | v584.i32[0]) == 1)
                  {
LABEL_532:
                    llvm::SimpleBitstreamCursor::ReadVBR(v13, 8u, (uint64_t)&__dst);
                    if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
                    {
LABEL_1619:
                      *a1 = __dst.__r_.__value_.__r.__words[0];
                      goto LABEL_1888;
                    }
                    v597 = (uint64_t *)v2192;
                    v607 = v14;
                    v608 = *v14;
                    if (v608 >= 4)
                    {
                      v622 = *(_QWORD *)v2192 & 0xFLL;
                      v623 = *(unint64_t *)v2192 >> 4;
                      *v2192 = (int8x8_t)v623;
                      v624 = v608 - 4;
                      *v607 = v608 - 4;
                      v14 = v607;
                      if ((v622 & 8) == 0)
                        goto LABEL_643;
                      goto LABEL_646;
                    }
                    if (v608)
                    {
                      v609 = *v2192;
                      v610 = 4 - v608;
                      LODWORD(__p) = 4 - v608;
                      v612 = *(_QWORD *)(v8 + 40);
                      v611 = *(_QWORD *)(v8 + 48);
                      v613 = v612 - v611;
                      if (v612 > v611)
                        goto LABEL_552;
LABEL_564:
                      __dst.__r_.__value_.__r.__words[0] = v612;
                      llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v2190, (uint64_t *)&__dst, (uint64_t *)&v2209);
                      v581 = v2209;
                      if (v2209)
                      {
                        v12 = v2188;
                        v13 = v2189;
                        v14 = v2191;
                        goto LABEL_1726;
                      }
                      v597 = (uint64_t *)v2192;
                      v624 = *v2191 - v610;
                      if (*v2191 >= v610)
                      {
LABEL_642:
                        v647 = *v597;
                        v623 = (unint64_t)*v597 >> v610;
                        *v597 = v623;
                        *v2191 = v624;
                        v648 = v647 << v608;
                        v14 = v2191;
                        LOBYTE(v648) = v648 & 0xF | v609.i8[0];
                        v12 = v2188;
                        v13 = v2189;
                        if ((v648 & 8) == 0)
                        {
LABEL_643:
                          v65 = v624 >= 0x20;
                          v649 = v624 - 32;
                          if (v65)
                          {
                            *v597 = v623 >> v649;
                            v735 = 32;
                          }
                          else
                          {
                            v735 = 0;
                          }
                          *v14 = v735;
                          llvm::SimpleBitstreamCursor::Read(v13, 0x20u, (uint64_t)&__dst);
                          if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
                          {
                            v581 = (void *)__dst.__r_.__value_.__r.__words[0];
                            if (!__dst.__r_.__value_.__r.__words[0])
                              continue;
                          }
                          else
                          {
                            v737 = *(_QWORD *)(v8 + 40);
                            v736 = *(_QWORD *)(v8 + 48);
                            v738 = *(unsigned int *)(v8 + 64);
                            v739 = 8 * v736 - v738 + 32 * LODWORD(__dst.__r_.__value_.__l.__data_);
                            v2209 = (void *)v739;
                            if ((_DWORD)v738 || v737 > v736)
                            {
                              if (v737 >= v739 >> 3)
                              {
                                *v2190 = (v739 >> 3) & 0x1FFFFFFFFFFFFFF8;
                                *v14 = 0;
                                if ((v739 & 0x3F) == 0
                                  || (llvm::SimpleBitstreamCursor::Read(v13, v739 & 0x3F, (uint64_t)&__dst),
                                      (__dst.__r_.__value_.__s.__data_[8] & 1) == 0)
                                  || (v2205 = (void *)__dst.__r_.__value_.__r.__words[0]) == 0)
                                {
                                  v2205 = 0;
                                }
                                v581 = v2205;
                                if (!v2205)
                                  continue;
                              }
                              else
                              {
                                __dst.__r_.__value_.__r.__words[0] = 8 * v736 - v738;
                                llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v2209, (uint64_t *)&__dst, (uint64_t *)&v2205);
                                v581 = v2205;
                                if (!v2205)
                                  continue;
                              }
                            }
                            else
                            {
                              *(_QWORD *)&v2236.__val_ = std::generic_category();
                              v2236.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
                              llvm::createStringError((llvm *)0x5C, v2236, &v2205);
                              v581 = v2205;
                              if (!v2205)
                                continue;
                            }
                          }
                          goto LABEL_1726;
                        }
LABEL_646:
                        v650 = 0;
                        while (1)
                        {
LABEL_648:
                          if (v650 >= 0x1D)
                          {
                            *(_QWORD *)&v2237.__val_ = std::generic_category();
                            v2237.__cat_ = (const std::error_category *)"Unterminated VBR";
                            llvm::createStringError((llvm *)0x5C, v2237, v2196);
                            v581 = (void *)v2196[0];
                            if (!v2196[0])
                              goto LABEL_512;
                            goto LABEL_1726;
                          }
                          if (v624 < 4)
                            break;
                          v651 = v623 & 0xF;
                          v623 >>= 4;
                          *v597 = v623;
                          *v14 = v624 - 4;
                          v624 -= 4;
                          v650 += 3;
                          if ((v651 & 8) == 0)
                            goto LABEL_643;
                        }
                        if (v624)
                          v652 = v623;
                        else
                          v652 = 0;
                        v653 = 4 - v624;
                        v2221[0] = 4 - v624;
                        v655 = *(_QWORD *)(v8 + 40);
                        v654 = *(_QWORD *)(v8 + 48);
                        v656 = v655 - v654;
                        if (v655 <= v654)
                        {
                          v806 = std::generic_category();
                          v2206 = 0uLL;
                          v2205 = 0;
                          LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
                          v2226 = 0;
                          v2227 = 0;
                          v2228 = 1;
                          v2224 = 0;
                          v2225 = 0;
                          __dst.__r_.__value_.__r.__words[2] = 0;
                          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                          p_p = &v2205;
                          llvm::raw_ostream::SetBufferAndMode((uint64_t)&__dst, 0, 0, 0);
                          *(_QWORD *)&v2210 = "Unexpected end of file reading %u of %u bytes";
                          v2209 = &unk_1E0E203C0;
                          *((_QWORD *)&v2210 + 1) = *v2190;
                          v2211 = v655;
                          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__dst, (uint64_t)&v2209);
                          v807 = p_p;
                          v581 = operator new(0x38uLL);
                          LOWORD(v2212) = 260;
                          v2209 = v807;
                          llvm::StringError::StringError((uint64_t)v581, (llvm::Twine *)&v2209, 5, (uint64_t)v806);
                          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
                          if (SHIBYTE(v2206) < 0)
                            operator delete(v2205);
                          a1 = (uint64_t *)v2187;
                          v14 = v2191;
                          if (!v581)
                            continue;
LABEL_1726:
                          *a1 = (uint64_t)v581;
                          goto LABEL_1888;
                        }
                        v657 = *(_QWORD *)v13;
                        v658 = (int *)(*(_QWORD *)v13 + v654);
                        if (v655 >= v654 + 8)
                        {
                          v661 = *(_QWORD *)v658;
                          *v597 = v661;
                          v656 = 8;
                        }
                        else
                        {
                          *v597 = 0;
                          if (v656)
                          {
                            v659 = (v655 - v654);
                            if (v659 < 8
                              || ((unint64_t)v597 < v657 + v654 + v659 ? (v660 = v658 >= v14) : (v660 = 1), !v660))
                            {
                              v662 = 0;
                              v661 = 0;
                              goto LABEL_666;
                            }
                            if (v659 < 0x10)
                            {
                              v661 = 0;
                              v662 = 0;
                              goto LABEL_677;
                            }
                            v662 = v659 - (v656 & 0xF);
                            v669 = (int64x2_t)xmmword_181267BA0;
                            v670 = (int64x2_t)xmmword_181267BB0;
                            v671 = (int64x2_t)xmmword_181267BC0;
                            v672 = (int64x2_t)xmmword_181267BD0;
                            v673 = (int64x2_t)xmmword_1812332B0;
                            v674 = (int64x2_t)xmmword_181267BE0;
                            v675 = 0uLL;
                            v676 = v662;
                            v677 = 0uLL;
                            v678 = 0uLL;
                            v679 = 0uLL;
                            v680 = 0uLL;
                            v681 = 0uLL;
                            v682 = (int64x2_t)xmmword_181233290;
                            v683 = 0uLL;
                            v684 = 0uLL;
                            v685 = (int64x2_t)xmmword_181233120;
                            do
                            {
                              v686 = *(uint8x16_t *)v658;
                              v658 += 4;
                              v687 = vmovl_u8(*(uint8x8_t *)v686.i8);
                              v688 = vmovl_high_u8(v686);
                              v689 = vmovl_u16(*(uint16x4_t *)v688.i8);
                              v690 = vmovl_high_u16(v688);
                              v691 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                              v692 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v673, 3uLL), v691);
                              v693 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v672, 3uLL), v691);
                              v694 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v674, 3uLL), v691);
                              v695 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v682, 3uLL), v691);
                              v696 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v671, 3uLL), v691);
                              v697 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v685, 3uLL), v691);
                              v698 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v670, 3uLL), v691);
                              v699.i64[0] = v690.u32[2];
                              v699.i64[1] = v690.u32[3];
                              v700 = (int8x16_t)vshlq_u64(v699, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v669, 3uLL), v691));
                              v701 = vmovl_u16(*(uint16x4_t *)v687.i8);
                              v699.i64[0] = v690.u32[0];
                              v699.i64[1] = v690.u32[1];
                              v702 = (int8x16_t)vshlq_u64(v699, v698);
                              v699.i64[0] = v701.u32[0];
                              v699.i64[1] = v701.u32[1];
                              v703 = (int8x16_t)vshlq_u64(v699, v697);
                              v699.i64[0] = v689.u32[2];
                              v699.i64[1] = v689.u32[3];
                              v704 = (int8x16_t)vshlq_u64(v699, v696);
                              v705 = vmovl_high_u16(v687);
                              v699.i64[0] = v701.u32[2];
                              v699.i64[1] = v701.u32[3];
                              v706 = (int8x16_t)vshlq_u64(v699, v695);
                              v699.i64[0] = v705.u32[0];
                              v699.i64[1] = v705.u32[1];
                              v707 = (int8x16_t)vshlq_u64(v699, v694);
                              v699.i64[0] = v689.u32[0];
                              v699.i64[1] = v689.u32[1];
                              v708 = (int8x16_t)vshlq_u64(v699, v693);
                              v699.i64[0] = v705.u32[2];
                              v699.i64[1] = v705.u32[3];
                              v679 = vorrq_s8((int8x16_t)vshlq_u64(v699, v692), v679);
                              v680 = vorrq_s8(v708, v680);
                              v678 = vorrq_s8(v707, v678);
                              v677 = vorrq_s8(v706, v677);
                              v681 = vorrq_s8(v704, v681);
                              v675 = vorrq_s8(v703, v675);
                              v683 = vorrq_s8(v702, v683);
                              v684 = vorrq_s8(v700, v684);
                              v709 = vdupq_n_s64(0x10uLL);
                              v674 = vaddq_s64(v674, v709);
                              v682 = vaddq_s64(v682, v709);
                              v685 = vaddq_s64(v685, v709);
                              v673 = vaddq_s64(v673, v709);
                              v672 = vaddq_s64(v672, v709);
                              v671 = vaddq_s64(v671, v709);
                              v670 = vaddq_s64(v670, v709);
                              v669 = vaddq_s64(v669, v709);
                              v676 -= 16;
                            }
                            while (v676);
                            v710 = vorrq_s8(vorrq_s8(vorrq_s8(v675, v680), vorrq_s8(v678, v683)), vorrq_s8(vorrq_s8(v677, v681), vorrq_s8(v679, v684)));
                            *(int8x8_t *)v710.i8 = vorr_s8(*(int8x8_t *)v710.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v710, v710, 8uLL));
                            *v2192 = *(int8x8_t *)v710.i8;
                            v661 = v710.i64[0];
                            if ((v656 & 0xF) == 0)
                              goto LABEL_680;
                            if ((v656 & 0xF) < 8uLL)
                              goto LABEL_666;
LABEL_677:
                            v711 = vdupq_n_s64(v662);
                            v712 = vaddq_s64(v711, (int64x2_t)xmmword_1812332B0);
                            v713 = (int8x16_t)v661;
                            v714 = v662 + v654;
                            v715 = v662 + (v656 & 7);
                            v662 = v659 - (v656 & 7);
                            v716 = vaddq_s64(v711, (int64x2_t)xmmword_181267BE0);
                            v717 = vaddq_s64(v711, (int64x2_t)xmmword_181233290);
                            v718 = vaddq_s64(v711, (int64x2_t)xmmword_181233120);
                            v719 = 0uLL;
                            v720 = (uint8x8_t *)(v657 + v714);
                            v721 = v715 - v659;
                            v722 = 0uLL;
                            v723 = 0uLL;
                            do
                            {
                              v724 = *v720++;
                              v725 = vmovl_u8(v724);
                              v726 = vmovl_high_u16(v725);
                              v727.i64[0] = v726.u32[2];
                              v727.i64[1] = v726.u32[3];
                              v728 = v727;
                              v727.i64[0] = v726.u32[0];
                              v727.i64[1] = v726.u32[1];
                              v729 = v727;
                              v730 = vmovl_u16(*(uint16x4_t *)v725.i8);
                              v727.i64[0] = v730.u32[2];
                              v727.i64[1] = v730.u32[3];
                              v731 = v727;
                              v727.i64[0] = v730.u32[0];
                              v727.i64[1] = v730.u32[1];
                              v732 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                              v723 = vorrq_s8((int8x16_t)vshlq_u64(v728, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v712, 3uLL), v732)), v723);
                              v722 = vorrq_s8((int8x16_t)vshlq_u64(v729, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v716, 3uLL), v732)), v722);
                              v719 = vorrq_s8((int8x16_t)vshlq_u64(v731, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v717, 3uLL), v732)), v719);
                              v733 = vdupq_n_s64(8uLL);
                              v713 = vorrq_s8((int8x16_t)vshlq_u64(v727, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v718, 3uLL), v732)), v713);
                              v716 = vaddq_s64(v716, v733);
                              v717 = vaddq_s64(v717, v733);
                              v718 = vaddq_s64(v718, v733);
                              v712 = vaddq_s64(v712, v733);
                              v721 += 8;
                            }
                            while (v721);
                            v734 = vorrq_s8(vorrq_s8(v713, v722), vorrq_s8(v719, v723));
                            *(int8x8_t *)v734.i8 = vorr_s8(*(int8x8_t *)v734.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v734, v734, 8uLL));
                            *v2192 = *(int8x8_t *)v734.i8;
                            v661 = v734.i64[0];
                            if ((v656 & 7) != 0)
                            {
LABEL_666:
                              v663 = v659 - v662;
                              v664 = 8 * v662;
                              v665 = (unsigned __int8 *)(v657 + v662 + v654);
                              do
                              {
                                v666 = *v665++;
                                v661 |= (unint64_t)v666 << (v664 & 0xF8);
                                *v2192 = (int8x8_t)v661;
                                v664 += 8;
                                --v663;
                              }
                              while (v663);
                              v597 = (uint64_t *)v2192;
                            }
                            else
                            {
LABEL_680:
                              v597 = (uint64_t *)v2192;
                            }
                          }
                          else
                          {
                            v661 = 0;
                          }
                        }
                        *v2190 = v654 + v656;
                        *v14 = 8 * v656;
                        v667 = 8 * v656 - v653;
                        if (8 * v656 < v653)
                        {
                          llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v14, (int *)v2221, (uint64_t *)&__p);
                          v581 = __p;
                          if (!__p)
                            continue;
                          goto LABEL_1726;
                        }
                        v623 = v661 >> v653;
                        *v597 = v623;
                        *v14 = v667;
                        v668 = (v661 << v624) & 0xF | v652;
                        v624 = v667;
                        v650 += 3;
                        if ((v668 & 8) == 0)
                          goto LABEL_643;
                        goto LABEL_648;
                      }
LABEL_639:
                      v14 = v2191;
                      llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v2191, (int *)&__p, (uint64_t *)&v2205);
                      v581 = v2205;
                      v12 = v2188;
                      v13 = v2189;
                      if (!v2205)
                        continue;
                      goto LABEL_1726;
                    }
                    v609.i8[0] = 0;
                    v610 = 4;
                    LODWORD(__p) = 4;
                    v612 = *(_QWORD *)(v8 + 40);
                    v611 = *(_QWORD *)(v8 + 48);
                    v613 = v612 - v611;
                    if (v612 <= v611)
                      goto LABEL_564;
LABEL_552:
                    v614 = *(_QWORD *)v2189;
                    v615 = (int *)(*(_QWORD *)v2189 + v611);
                    if (v612 >= v611 + 8)
                    {
                      *v2192 = *(int8x8_t *)v615;
                      v613 = 8;
                      goto LABEL_638;
                    }
                    *v2192 = 0;
                    if (!v613)
                      goto LABEL_638;
                    if (v613 >= 8uLL && ((unint64_t)v2192 >= v614 + v611 + v613 || v615 >= v2191))
                    {
                      if (v613 >= 0x10uLL)
                      {
                        v616 = v613 - (unint64_t)(v613 & 0xF);
                        v817 = (int64x2_t)xmmword_181267BA0;
                        v818 = (int64x2_t)xmmword_181267BB0;
                        v819 = (int64x2_t)xmmword_181267BC0;
                        v820 = (int64x2_t)xmmword_181267BD0;
                        v821 = (int64x2_t)xmmword_1812332B0;
                        v822 = (int64x2_t)xmmword_181267BE0;
                        v823 = 0uLL;
                        v824 = v616;
                        v825 = 0uLL;
                        v826 = 0uLL;
                        v827 = 0uLL;
                        v828 = 0uLL;
                        v829 = 0uLL;
                        v830 = (int64x2_t)xmmword_181233290;
                        v831 = 0uLL;
                        v832 = 0uLL;
                        v833 = (int64x2_t)xmmword_181233120;
                        do
                        {
                          v834 = *(uint8x16_t *)v615;
                          v615 += 4;
                          v835 = vmovl_u8(*(uint8x8_t *)v834.i8);
                          v836 = vmovl_high_u8(v834);
                          v837 = vmovl_u16(*(uint16x4_t *)v836.i8);
                          v838 = vmovl_high_u16(v836);
                          v839 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v840 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v821, 3uLL), v839);
                          v841 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v820, 3uLL), v839);
                          v842 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v822, 3uLL), v839);
                          v843 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v830, 3uLL), v839);
                          v844 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v819, 3uLL), v839);
                          v845 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v833, 3uLL), v839);
                          v846 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v818, 3uLL), v839);
                          v847.i64[0] = v838.u32[2];
                          v847.i64[1] = v838.u32[3];
                          v848 = (int8x16_t)vshlq_u64(v847, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v817, 3uLL), v839));
                          v849 = vmovl_u16(*(uint16x4_t *)v835.i8);
                          v847.i64[0] = v838.u32[0];
                          v847.i64[1] = v838.u32[1];
                          v850 = (int8x16_t)vshlq_u64(v847, v846);
                          v847.i64[0] = v849.u32[0];
                          v847.i64[1] = v849.u32[1];
                          v851 = (int8x16_t)vshlq_u64(v847, v845);
                          v847.i64[0] = v837.u32[2];
                          v847.i64[1] = v837.u32[3];
                          v852 = (int8x16_t)vshlq_u64(v847, v844);
                          v853 = vmovl_high_u16(v835);
                          v847.i64[0] = v849.u32[2];
                          v847.i64[1] = v849.u32[3];
                          v854 = (int8x16_t)vshlq_u64(v847, v843);
                          v847.i64[0] = v853.u32[0];
                          v847.i64[1] = v853.u32[1];
                          v855 = (int8x16_t)vshlq_u64(v847, v842);
                          v847.i64[0] = v837.u32[0];
                          v847.i64[1] = v837.u32[1];
                          v856 = (int8x16_t)vshlq_u64(v847, v841);
                          v847.i64[0] = v853.u32[2];
                          v847.i64[1] = v853.u32[3];
                          v827 = vorrq_s8((int8x16_t)vshlq_u64(v847, v840), v827);
                          v828 = vorrq_s8(v856, v828);
                          v826 = vorrq_s8(v855, v826);
                          v825 = vorrq_s8(v854, v825);
                          v829 = vorrq_s8(v852, v829);
                          v823 = vorrq_s8(v851, v823);
                          v831 = vorrq_s8(v850, v831);
                          v832 = vorrq_s8(v848, v832);
                          v857 = vdupq_n_s64(0x10uLL);
                          v822 = vaddq_s64(v822, v857);
                          v830 = vaddq_s64(v830, v857);
                          v833 = vaddq_s64(v833, v857);
                          v821 = vaddq_s64(v821, v857);
                          v820 = vaddq_s64(v820, v857);
                          v819 = vaddq_s64(v819, v857);
                          v818 = vaddq_s64(v818, v857);
                          v817 = vaddq_s64(v817, v857);
                          v824 -= 16;
                        }
                        while (v824);
                        v858 = vorrq_s8(vorrq_s8(vorrq_s8(v823, v828), vorrq_s8(v826, v831)), vorrq_s8(vorrq_s8(v825, v829), vorrq_s8(v827, v832)));
                        v859 = vorr_s8(*(int8x8_t *)v858.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v858, v858, 8uLL));
                        *v2192 = v859;
                        if ((v613 & 0xF) == 0)
                          goto LABEL_638;
                        v617 = v859;
                        if ((v613 & 0xF) < 8uLL)
                          goto LABEL_558;
                      }
                      else
                      {
                        v617 = 0;
                        v616 = 0;
                      }
                      v860 = vdupq_n_s64(v616);
                      v861 = vaddq_s64(v860, (int64x2_t)xmmword_1812332B0);
                      v862 = (int8x16_t)(unint64_t)v617;
                      v863 = v616 + v611;
                      v864 = v616 + (v613 & 7);
                      v616 = v613 - (unint64_t)(v613 & 7);
                      v865 = vaddq_s64(v860, (int64x2_t)xmmword_181267BE0);
                      v866 = vaddq_s64(v860, (int64x2_t)xmmword_181233290);
                      v867 = vaddq_s64(v860, (int64x2_t)xmmword_181233120);
                      v868 = 0uLL;
                      v869 = (uint8x8_t *)(v614 + v863);
                      v870 = v864 - v613;
                      v871 = 0uLL;
                      v872 = 0uLL;
                      do
                      {
                        v873 = *v869++;
                        v874 = vmovl_u8(v873);
                        v875 = vmovl_high_u16(v874);
                        v876.i64[0] = v875.u32[2];
                        v876.i64[1] = v875.u32[3];
                        v877 = v876;
                        v876.i64[0] = v875.u32[0];
                        v876.i64[1] = v875.u32[1];
                        v878 = v876;
                        v879 = vmovl_u16(*(uint16x4_t *)v874.i8);
                        v876.i64[0] = v879.u32[2];
                        v876.i64[1] = v879.u32[3];
                        v880 = v876;
                        v876.i64[0] = v879.u32[0];
                        v876.i64[1] = v879.u32[1];
                        v881 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                        v872 = vorrq_s8((int8x16_t)vshlq_u64(v877, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v861, 3uLL), v881)), v872);
                        v871 = vorrq_s8((int8x16_t)vshlq_u64(v878, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v865, 3uLL), v881)), v871);
                        v868 = vorrq_s8((int8x16_t)vshlq_u64(v880, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v866, 3uLL), v881)), v868);
                        v882 = vdupq_n_s64(8uLL);
                        v862 = vorrq_s8((int8x16_t)vshlq_u64(v876, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v867, 3uLL), v881)), v862);
                        v865 = vaddq_s64(v865, v882);
                        v866 = vaddq_s64(v866, v882);
                        v867 = vaddq_s64(v867, v882);
                        v861 = vaddq_s64(v861, v882);
                        v870 += 8;
                      }
                      while (v870);
                      v883 = vorrq_s8(vorrq_s8(v862, v871), vorrq_s8(v868, v872));
                      v884 = vorr_s8(*(int8x8_t *)v883.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v883, v883, 8uLL));
                      *v2192 = v884;
                      if ((v613 & 7) != 0)
                      {
                        v617 = v884;
                        goto LABEL_558;
                      }
                    }
                    else
                    {
                      v616 = 0;
                      v617 = 0;
LABEL_558:
                      v618 = v613 - v616;
                      v619 = 8 * v616;
                      v620 = (unsigned __int8 *)(v614 + v616 + v611);
                      do
                      {
                        v621 = *v620++;
                        *(_QWORD *)&v617 |= (unint64_t)v621 << (v619 & 0xF8);
                        *v2192 = v617;
                        v619 += 8;
                        --v618;
                      }
                      while (v618);
                    }
LABEL_638:
                    *v2190 = v611 + v613;
                    *v2191 = 8 * v613;
                    v624 = 8 * v613 - v610;
                    if (8 * v613 >= v610)
                      goto LABEL_642;
                    goto LABEL_639;
                  }
                  goto LABEL_546;
                }
                v584 = *v2192;
              }
              v594 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v583) & *(_QWORD *)&v584;
              v595 = *(_QWORD *)&v584 >> v583;
              *v585 = *(_QWORD *)&v584 >> v583;
              v596 = v582 - v583;
              *v14 = v582 - v583;
              if ((_DWORD)v594 == 1)
                goto LABEL_532;
LABEL_546:
              if ((_DWORD)v594 == 2)
              {
                llvm::BitstreamCursor::ReadAbbrevRecord((char **)v13, (unint64_t *)&__dst);
                v581 = (void *)__dst.__r_.__value_.__r.__words[0];
                if (!__dst.__r_.__value_.__r.__words[0])
                  continue;
                goto LABEL_1726;
              }
              if (!(_DWORD)v594)
              {
                if (*(_DWORD *)(v8 + 104))
                {
                  v1943 = v596 - 32;
                  if (v596 >= 0x20)
                    goto LABEL_1711;
LABEL_1717:
                  v1944 = 0;
                  goto LABEL_1718;
                }
                goto LABEL_1719;
              }
              LODWORD(__s.__r_.__value_.__r.__words[1]) = 0;
              llvm::BitstreamCursor::readRecord(v13, ((v594 << 32) | 3) >> 32, (uint64_t)&__s, 0, (uint64_t)&__p);
              if ((v2218 & 1) != 0)
              {
                LOBYTE(v600) = 0;
                v601 = __p;
                __p = 0;
                *a1 = (uint64_t)v601;
                goto LABEL_750;
              }
              if ((_DWORD)__p != 3)
                goto LABEL_749;
              v598 = __s.__r_.__value_.__r.__words[1];
              v599 = LODWORD(__s.__r_.__value_.__r.__words[1]) - 2;
              if (LODWORD(__s.__r_.__value_.__r.__words[1]) <= 2)
              {
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid grp record";
                LOWORD(v2225) = 259;
                LOBYTE(v600) = 0;
                v13 = v2189;
                goto LABEL_750;
              }
              v2180 = a4;
              v625 = *(_QWORD *)__s.__r_.__value_.__l.__data_;
              v2149 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8);
              __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(v8 + 424);
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v2224;
              __dst.__r_.__value_.__r.__words[2] = 0x800000000;
              v626 = 2;
              v2153 = 63;
              v2158 = v625;
              v627 = __s.__r_.__value_.__r.__words[1];
              while (2)
              {
                v630 = __s.__r_.__value_.__r.__words[0];
                v631 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * v626);
                switch(v631)
                {
                  case 0:
                    LODWORD(v2205) = 0;
                    v628 = v626 + 1;
                    v636 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 1));
                    if (v2149 == 0xFFFFFFFFLL)
                    {
                      v637 = 0;
                      switch(v636)
                      {
                        case 20:
                          goto LABEL_632;
                        case 21:
                          v638 = 21;
                          goto LABEL_634;
                        case 45:
                          v637 = v2153 & 3;
LABEL_632:
                          v2153 = v637;
                          goto LABEL_570;
                        case 49:
                          v2153 &= 0xCu;
                          goto LABEL_570;
                        case 50:
                          v2153 &= 0xFu;
                          goto LABEL_570;
                        case 52:
                          v638 = 42;
LABEL_634:
                          v2153 &= v638;
                          goto LABEL_570;
                        default:
                          break;
                      }
                    }
                    a1 = (uint64_t *)v2187;
                    v14 = v2191;
                    if (*(_QWORD *)v2187)
                      goto LABEL_743;
                    switch((int)v2205)
                    {
                      case 'I':
                        llvm::AttrBuilder::addByValAttr((uint64_t **)&__dst, 0);
                        goto LABEL_618;
                      case 'K':
                        llvm::AttrBuilder::addInAllocaAttr((uint64_t **)&__dst, 0);
                        goto LABEL_618;
                      case 'M':
                        llvm::AttrBuilder::addStructRetAttr((uint64_t **)&__dst, 0);
                        goto LABEL_618;
                      case 'V':
                        llvm::AttrBuilder::addUWTableAttr((uint64_t **)&__dst, 2);
                        goto LABEL_618;
                      default:
                        if (((_DWORD)v2205 - 1) > 0x46)
                        {
                          v2209 = "Not an enum attribute";
                          LOWORD(v2212) = 259;
LABEL_743:
                          v600 = 0;
LABEL_744:
                          v12 = v2188;
                          v13 = v2189;
                          goto LABEL_745;
                        }
                        llvm::AttrBuilder::addAttribute((uint64_t **)&__dst, (int)v2205);
LABEL_618:
                        v598 = v627;
                        break;
                    }
                    goto LABEL_570;
                  case 1:
                    LODWORD(v2205) = 0;
                    v628 = v626 + 1;
                    v14 = v2191;
                    if (*(_QWORD *)v2187)
                      goto LABEL_741;
                    if (((_DWORD)v2205 - 78) >= 0xA)
                    {
                      v2209 = "Not an int attribute";
                      LOWORD(v2212) = 259;
LABEL_741:
                      v600 = 0;
                      a1 = (uint64_t *)v2187;
                      goto LABEL_744;
                    }
                    switch((int)v2205)
                    {
                      case 'N':
                        v628 = v626 + 2;
                        v639 = __clz(*(unsigned int *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2))) ^ 0x13F;
                        if (*(_DWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)))
                          v640 = v639;
                        else
                          v640 = 0;
                        llvm::AttrBuilder::addAlignmentAttr((uint64_t **)&__dst, v640);
                        break;
                      case 'O':
                        v628 = v626 + 2;
                        llvm::AttrBuilder::addAllocKindAttr((uint64_t **)&__dst, *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)));
                        break;
                      case 'P':
                        v628 = v626 + 2;
                        llvm::AttrBuilder::addAllocSizeAttrFromRawRepr((uint64_t **)&__dst, *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)));
                        break;
                      case 'Q':
                        v628 = v626 + 2;
                        llvm::AttrBuilder::addDereferenceableAttr((uint64_t **)&__dst, *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)));
                        break;
                      case 'R':
                        v628 = v626 + 2;
                        llvm::AttrBuilder::addDereferenceableOrNullAttr((uint64_t **)&__dst, *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)));
                        break;
                      case 'S':
                        v628 = v626 + 2;
                        llvm::AttrBuilder::addMemoryAttr((uint64_t **)&__dst, *(_DWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)));
                        break;
                      case 'T':
                        v628 = v626 + 2;
                        llvm::AttrBuilder::addNoFPClassAttr((uint64_t **)&__dst, *(_DWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)) & 0x3FF);
                        break;
                      case 'U':
                        v628 = v626 + 2;
                        v645 = __clz(*(unsigned int *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2))) ^ 0x13F;
                        if (*(_DWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)))
                          v646 = v645;
                        else
                          v646 = 0;
                        llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&__dst, v646);
                        break;
                      case 'V':
                        v628 = v626 + 2;
                        llvm::AttrBuilder::addUWTableAttr((uint64_t **)&__dst, *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)));
                        break;
                      case 'W':
                        v628 = v626 + 2;
                        llvm::AttrBuilder::addVScaleRangeAttrFromRawRepr((uint64_t **)&__dst, *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2)));
                        break;
                      default:
                        goto LABEL_569;
                    }
                    goto LABEL_569;
                  case 3:
                  case 4:
                    v632 = 0;
                    v2209 = &v2211;
                    v2210 = xmmword_181236C00;
                    v2205 = &v2207;
                    v2206 = xmmword_181236C00;
                    v628 = v626 + 1;
                    if (v626 + 1 == v598 || (v633 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * v628)) == 0)
                    {
                      v634 = v626;
                      if (v631 != 4)
                        goto LABEL_604;
                    }
                    else
                    {
                      v632 = 0;
                      do
                      {
                        if (v632 + 1 > *((_QWORD *)&v2210 + 1))
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v2209, &v2211, v632 + 1, 1);
                          v598 = v627;
                          v632 = v2210;
                        }
                        *((_BYTE *)v2209 + v632) = v633;
                        v632 = v2210 + 1;
                        *(_QWORD *)&v2210 = v2210 + 1;
                        v630 = __s.__r_.__value_.__r.__words[0];
                        v634 = v626 + 1;
                        if (v599 == v626)
                          break;
                        v633 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * (v626 + 2));
                        ++v626;
                      }
                      while (v633);
                      v628 = v634 + 1;
                      if (v631 != 4)
                      {
LABEL_604:
                        v641 = v2206;
                        goto LABEL_609;
                      }
                    }
                    v628 = v634 + 2;
                    v641 = v2206;
                    if (v634 + 2 != v598)
                    {
                      v642 = *(_QWORD *)(v630 + 8 * v628);
                      if (v642)
                      {
                        v643 = v634 + 3;
                        do
                        {
                          if (v641 + 1 > *((_QWORD *)&v2206 + 1))
                          {
                            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v2205, &v2207, v641 + 1, 1);
                            v598 = v627;
                            v641 = v2206;
                          }
                          *((_BYTE *)v2205 + v641) = v642;
                          v641 = v2206 + 1;
                          *(_QWORD *)&v2206 = v2206 + 1;
                          v644 = v643 + 1;
                          if (v598 == v643)
                            break;
                          v642 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * v643++);
                        }
                        while (v642);
                        v632 = v2210;
                        v628 = v644 - 1;
                      }
                    }
LABEL_609:
                    llvm::AttrBuilder::addAttribute((uint64_t **)&__dst, (unsigned __int8 *)v2209, v632, (unsigned __int8 *)v2205, v641);
                    if (v2205 != &v2207)
                      free(v2205);
                    if (v2209 != &v2211)
                      free(v2209);
                    goto LABEL_569;
                  case 5:
                  case 6:
                    LODWORD(v2205) = 0;
                    v628 = v626 + 1;
                    if (*(_QWORD *)v2187)
                      goto LABEL_729;
                    v635 = (int)v2205;
                    if (((_DWORD)v2205 - 72) < 6)
                    {
                      if (v631 == 6)
                      {
                        v628 = v626 + 2;
                      }
                      else
                      {
                        TypeByID = 0;
                      }
                      llvm::AttrBuilder::addTypeAttr((uint64_t **)&__dst, v635, TypeByID);
LABEL_569:
                      v598 = v627;
LABEL_570:
                      v626 = v628 + 1;
                      v12 = v2188;
                      if (v626 == v598)
                      {
                        v808 = (llvm::AttrBuilder *)v2153;
                        if (v2153 != 63)
                          llvm::AttrBuilder::addMemoryAttr((uint64_t **)&__dst, v2153);
                        llvm::UpgradeAttributes((uint64_t **)&__dst, v808);
                        v809 = llvm::AttributeList::get(*(uint64_t **)(v8 + 424), v2149, (uint64_t)&__dst);
                        v810 = *(uint64_t **)(v8 + 1472);
                        v811 = (uint64_t **)v2185;
                        v812 = (uint64_t **)v2185;
                        v13 = v2189;
                        a4 = v2180;
                        if (v810)
                        {
                          do
                          {
                            while (1)
                            {
                              v811 = (uint64_t **)v810;
                              v813 = *((_DWORD *)v810 + 8);
                              if (v813 <= v2158)
                                break;
                              v810 = *v811;
                              v812 = v811;
                              if (!*v811)
                                goto LABEL_722;
                            }
                            if (v813 >= v2158)
                              goto LABEL_725;
                            v810 = v811[1];
                          }
                          while (v810);
                          v812 = v811 + 1;
                        }
LABEL_722:
                        v814 = (uint64_t *)v811;
                        v811 = (uint64_t **)operator new(0x30uLL);
                        *((_DWORD *)v811 + 8) = v2158;
                        v811[5] = 0;
                        *v811 = 0;
                        v811[1] = 0;
                        v811[2] = v814;
                        v8 = v2186;
                        *v812 = (uint64_t *)v811;
                        v815 = **(_QWORD **)(v2186 + 1464);
                        v816 = (uint64_t *)v811;
                        if (v815)
                        {
                          *(_QWORD *)(v2186 + 1464) = v815;
                          v816 = *v812;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2186 + 1472), v816);
                        ++*(_QWORD *)(v2186 + 1480);
LABEL_725:
                        v811[5] = v809;
                        v600 = 1;
                        a1 = (uint64_t *)v2187;
                        v14 = v2191;
                        goto LABEL_746;
                      }
                      continue;
                    }
                    v2209 = "Not a type attribute";
                    LOWORD(v2212) = 259;
LABEL_729:
                    v600 = 0;
                    a1 = (uint64_t *)v2187;
                    v12 = v2188;
LABEL_739:
                    v13 = v2189;
                    v14 = v2191;
LABEL_745:
                    a4 = v2180;
LABEL_746:
                    if ((std::string **)__dst.__r_.__value_.__l.__size_ != &v2224)
                      free((void *)__dst.__r_.__value_.__l.__size_);
                    if (v600)
LABEL_749:
                      LOBYTE(v600) = 1;
LABEL_750:
                    if ((v2218 & 1) != 0)
                    {
                      v885 = __p;
                      __p = 0;
                      if (v885)
                        (*(void (**)(void *))(*(_QWORD *)v885 + 8))(v885);
                    }
                    if ((v600 & 1) == 0)
                    {
LABEL_1888:
                      if ((std::string::size_type *)__s.__r_.__value_.__l.__data_ != &__s.__r_.__value_.__r.__words[2])
                        free(__s.__r_.__value_.__l.__data_);
                      goto LABEL_1890;
                    }
                    break;
                  default:
                    v2209 = "Invalid attribute group entry";
                    LOWORD(v2212) = 259;
                    a1 = (uint64_t *)v2187;
                    v600 = 0;
                    goto LABEL_739;
                }
                break;
              }
            }
          case 0xB:
            if (*a1)
              goto LABEL_19;
            goto LABEL_1890;
          case 0xC:
            if (*a1)
              goto LABEL_19;
            if (*(_BYTE *)(v8 + 1560))
            {
              v54 = *(llvm::BitstreamCursor **)(v8 + 464);
              if (!v54)
                goto LABEL_1397;
            }
            else
            {
              v1589 = *(_QWORD *)(v8 + 1512);
              v1590 = *(_QWORD *)(v8 + 1520);
              if (v1589 != v1590)
              {
                v1591 = (_QWORD *)(v1590 - 8);
                if ((unint64_t)v1591 > v1589)
                {
                  v1592 = v1589 + 8;
                  do
                  {
                    v1593 = *(_QWORD *)(v1592 - 8);
                    *(_QWORD *)(v1592 - 8) = *v1591;
                    *v1591-- = v1593;
                    v65 = v1592 >= (unint64_t)v1591;
                    v1592 += 8;
                  }
                  while (!v65);
                }
              }
              if (*a1)
                goto LABEL_19;
              *(_BYTE *)(v8 + 1560) = 1;
              v54 = *(llvm::BitstreamCursor **)(v8 + 464);
              if (!v54)
                goto LABEL_1397;
            }
            if (*(_BYTE *)(v8 + 456))
            {
LABEL_50:
              llvm::BitstreamCursor::SkipBlock(v13, a1);
              goto LABEL_1890;
            }
            if (*a1)
              goto LABEL_19;
            *(_BYTE *)(v8 + 456) = 1;
LABEL_1397:
            if (*a1)
              goto LABEL_19;
            if (*(_BYTE *)(v8 + 456))
            {
              *(_QWORD *)(v8 + 440) = 8 * *(_QWORD *)(v8 + 48) - *(unsigned int *)(v8 + 64);
              goto LABEL_24;
            }
            v16 = 2;
            goto LABEL_20;
          case 0xE:
            if (*(_BYTE *)(v8 + 456))
              goto LABEL_50;
            if (*a1)
              goto LABEL_19;
            *(_BYTE *)(v8 + 456) = 1;
            v16 = 2;
            goto LABEL_20;
          case 0xF:
            if (!(_DWORD)a4)
            {
              llvm::MetadataLoader::parseMetadata(v2184, 1, a1);
LABEL_1890:
              if (*a1)
                v16 = 1;
              else
                v16 = 2;
              goto LABEL_20;
            }
            v41 = a4;
            v42 = 8 * *(_QWORD *)(v8 + 48) - *(unsigned int *)(v8 + 64);
            v43 = *(uint64_t **)(v8 + 1600);
            v44 = *(_QWORD *)(v8 + 1608);
            if ((unint64_t)v43 < v44)
            {
              *v43 = v42;
              v45 = (uint64_t)(v43 + 1);
              a4 = v41;
              a1 = (uint64_t *)v2187;
LABEL_1561:
              v13 = v2189;
              *(_QWORD *)(v8 + 1600) = v45;
              llvm::BitstreamCursor::SkipBlock(v2189, a1);
              if (*a1)
              {
                v16 = 1;
              }
              else
              {
                *a1 = 0;
                v16 = 2;
              }
              v14 = v2191;
              goto LABEL_20;
            }
            v1267 = *(uint64_t **)(v8 + 1592);
            v1268 = v43 - v1267;
            v1269 = v1268 + 1;
            if ((unint64_t)(v1268 + 1) >> 61)
              goto LABEL_2157;
            v1270 = v44 - (_QWORD)v1267;
            if (v1270 >> 2 > v1269)
              v1269 = v1270 >> 2;
            if ((unint64_t)v1270 >= 0x7FFFFFFFFFFFFFF8)
              v1269 = 0x1FFFFFFFFFFFFFFFLL;
            v2161 = v1269;
            if (v1269)
            {
              if (v1269 >> 61)
                goto LABEL_2158;
              v1271 = operator new(8 * v1269);
              v1272 = (uint64_t *)&v1271[8 * v1268];
              *v1272 = v42;
              v45 = (uint64_t)(v1272 + 1);
              if (v43 != v1267)
                goto LABEL_1178;
            }
            else
            {
              v1271 = 0;
              v1272 = (uint64_t *)(8 * v1268);
              *(_QWORD *)(8 * v1268) = v42;
              v45 = 8 * v1268 + 8;
              if (v43 != v1267)
              {
LABEL_1178:
                v1273 = (char *)(v43 - 1) - (char *)v1267;
                a4 = v41;
                if (v1273 >= 0x58)
                {
                  v8 = v2186;
                  a1 = (uint64_t *)v2187;
                  if ((unint64_t)((char *)v1267 - v1271) >= 0x20)
                  {
                    v1867 = (v1273 >> 3) + 1;
                    v1868 = 8 * (v1867 & 0x3FFFFFFFFFFFFFFCLL);
                    v1869 = &v43[v1868 / 0xFFFFFFFFFFFFFFF8];
                    v1272 = (uint64_t *)((char *)v1272 - v1868);
                    v1870 = &v1271[8 * v1268 - 16];
                    v1871 = v43 - 2;
                    v1872 = v1867 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v1873 = *(_OWORD *)v1871;
                      *(v1870 - 1) = *((_OWORD *)v1871 - 1);
                      *v1870 = v1873;
                      v1870 -= 2;
                      v1871 -= 4;
                      v1872 -= 4;
                    }
                    while (v1872);
                    v43 = v1869;
                    if (v1867 == (v1867 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_1558;
                  }
                }
                else
                {
                  v8 = v2186;
                  a1 = (uint64_t *)v2187;
                }
                do
                {
                  v1874 = *--v43;
                  *--v1272 = v1874;
                }
                while (v43 != v1267);
LABEL_1558:
                *(_QWORD *)(v8 + 1592) = v1272;
                *(_QWORD *)(v8 + 1600) = v45;
                *(_QWORD *)(v8 + 1608) = &v1271[8 * v2161];
                if (v1267)
                  operator delete(v1267);
                v12 = v2188;
                goto LABEL_1561;
              }
            }
            a4 = v41;
            v8 = v2186;
            a1 = (uint64_t *)v2187;
            goto LABEL_1558;
          case 0x11:
            llvm::BitstreamCursor::EnterSubBlock(v13, 0, 17, a1);
            if (*a1)
              goto LABEL_19;
            if (*(_QWORD *)(v8 + 520) != *(_QWORD *)(v8 + 528))
              goto LABEL_73;
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__r.__words[2];
            __s.__r_.__value_.__l.__size_ = 0x4000000000;
            v2198 = 0;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2224;
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_181236C00;
LABEL_78:
            while (2)
            {
              while (2)
              {
                while (2)
                {
                  v56 = *v14;
                  if (*v14)
                  {
                    v57 = *(_DWORD *)(v8 + 68);
                    v58 = *(int8x8_t *)(v8 + 56);
                    v59 = v2192;
                    if (v56 < v57)
                    {
                      v61 = *(_QWORD *)(v8 + 40);
                      v60 = *(_QWORD *)(v8 + 48);
                      v62 = v61 - v60;
                      if (v61 <= v60)
                        goto LABEL_1621;
                      goto LABEL_85;
                    }
                  }
                  else
                  {
                    v61 = *(_QWORD *)(v8 + 40);
                    v60 = *(_QWORD *)(v8 + 48);
                    v59 = v2192;
                    if (v61 <= v60)
                      goto LABEL_1876;
                    v57 = *(_DWORD *)(v8 + 68);
                    if (v57)
                    {
                      v58 = 0;
                      v62 = v61 - v60;
                      if (v61 <= v60)
                      {
LABEL_1621:
                        v1911 = std::generic_category();
                        v2218 = 0;
                        __p = 0;
                        v2219[0] = 0;
                        LODWORD(v2210) = 0;
                        v2213 = 0;
                        v2214 = 0;
                        v2215 = 1;
                        v2211 = 0;
                        v2212 = 0;
                        *((_QWORD *)&v2210 + 1) = 0;
                        v2209 = &unk_1E0E22B10;
                        v2216 = &__p;
                        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v2209, 0, 0, 0);
                        *(_QWORD *)&v2206 = "Unexpected end of file reading %u of %u bytes";
                        v2205 = &unk_1E0E203C0;
                        *((_QWORD *)&v2206 + 1) = *v2190;
                        v2207 = v61;
                        goto LABEL_1623;
                      }
LABEL_85:
                      v63 = *(_QWORD *)v13;
                      v64 = (int *)(*(_QWORD *)v13 + v60);
                      if (v61 >= v60 + 8)
                      {
                        v66 = *(_QWORD *)v64;
                        *v59 = v66;
                        v62 = 8;
                      }
                      else
                      {
                        *v59 = 0;
                        if (v62)
                        {
                          if (v62 < 8uLL
                            || ((unint64_t)v59 < v63 + v60 + v62 ? (v65 = v64 >= v14) : (v65 = 1), !v65))
                          {
                            v67 = 0;
                            v66 = 0;
LABEL_107:
                            v77 = v62 - v67;
                            v78 = 8 * v67;
                            v79 = (unsigned __int8 *)(v63 + v67 + v60);
                            do
                            {
                              v80 = *v79++;
                              v59 = v2192;
                              v66 |= (unint64_t)v80 << (v78 & 0xF8);
                              *v2192 = (int8x8_t)v66;
                              v78 += 8;
                              --v77;
                            }
                            while (v77);
                            goto LABEL_111;
                          }
                          if (v62 >= 0x10uLL)
                          {
                            v67 = v62 - (unint64_t)(v62 & 0xF);
                            v116 = (int64x2_t)xmmword_181267BA0;
                            v117 = (int64x2_t)xmmword_181267BB0;
                            v118 = (int64x2_t)xmmword_181267BC0;
                            v119 = (int64x2_t)xmmword_181267BD0;
                            v120 = (int64x2_t)xmmword_1812332B0;
                            v121 = (int64x2_t)xmmword_181267BE0;
                            v122 = 0uLL;
                            v123 = v67;
                            v124 = 0uLL;
                            v125 = 0uLL;
                            v126 = 0uLL;
                            v127 = 0uLL;
                            v128 = 0uLL;
                            v129 = (int64x2_t)xmmword_181233290;
                            v130 = 0uLL;
                            v131 = 0uLL;
                            v132 = (int64x2_t)xmmword_181233120;
                            do
                            {
                              v133 = *(uint8x16_t *)v64;
                              v64 += 4;
                              v134 = vmovl_u8(*(uint8x8_t *)v133.i8);
                              v135 = vmovl_high_u8(v133);
                              v136 = vmovl_u16(*(uint16x4_t *)v135.i8);
                              v137 = vmovl_high_u16(v135);
                              v138 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                              v139 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v120, 3uLL), v138);
                              v140 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v119, 3uLL), v138);
                              v141 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v121, 3uLL), v138);
                              v142 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v129, 3uLL), v138);
                              v143 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v118, 3uLL), v138);
                              v144 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v132, 3uLL), v138);
                              v145 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v117, 3uLL), v138);
                              v146.i64[0] = v137.u32[2];
                              v146.i64[1] = v137.u32[3];
                              v147 = (int8x16_t)vshlq_u64(v146, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v116, 3uLL), v138));
                              v148 = vmovl_u16(*(uint16x4_t *)v134.i8);
                              v146.i64[0] = v137.u32[0];
                              v146.i64[1] = v137.u32[1];
                              v149 = (int8x16_t)vshlq_u64(v146, v145);
                              v146.i64[0] = v148.u32[0];
                              v146.i64[1] = v148.u32[1];
                              v150 = (int8x16_t)vshlq_u64(v146, v144);
                              v146.i64[0] = v136.u32[2];
                              v146.i64[1] = v136.u32[3];
                              v151 = (int8x16_t)vshlq_u64(v146, v143);
                              v152 = vmovl_high_u16(v134);
                              v146.i64[0] = v148.u32[2];
                              v146.i64[1] = v148.u32[3];
                              v153 = (int8x16_t)vshlq_u64(v146, v142);
                              v146.i64[0] = v152.u32[0];
                              v146.i64[1] = v152.u32[1];
                              v154 = (int8x16_t)vshlq_u64(v146, v141);
                              v146.i64[0] = v136.u32[0];
                              v146.i64[1] = v136.u32[1];
                              v155 = (int8x16_t)vshlq_u64(v146, v140);
                              v146.i64[0] = v152.u32[2];
                              v146.i64[1] = v152.u32[3];
                              v126 = vorrq_s8((int8x16_t)vshlq_u64(v146, v139), v126);
                              v127 = vorrq_s8(v155, v127);
                              v125 = vorrq_s8(v154, v125);
                              v124 = vorrq_s8(v153, v124);
                              v128 = vorrq_s8(v151, v128);
                              v122 = vorrq_s8(v150, v122);
                              v130 = vorrq_s8(v149, v130);
                              v131 = vorrq_s8(v147, v131);
                              v156 = vdupq_n_s64(0x10uLL);
                              v121 = vaddq_s64(v121, v156);
                              v129 = vaddq_s64(v129, v156);
                              v132 = vaddq_s64(v132, v156);
                              v120 = vaddq_s64(v120, v156);
                              v119 = vaddq_s64(v119, v156);
                              v118 = vaddq_s64(v118, v156);
                              v117 = vaddq_s64(v117, v156);
                              v116 = vaddq_s64(v116, v156);
                              v123 -= 16;
                            }
                            while (v123);
                            v157 = vorrq_s8(vorrq_s8(vorrq_s8(v122, v127), vorrq_s8(v125, v130)), vorrq_s8(vorrq_s8(v124, v128), vorrq_s8(v126, v131)));
                            *(int8x8_t *)v157.i8 = vorr_s8(*(int8x8_t *)v157.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL));
                            v59 = v2192;
                            *v2192 = *(int8x8_t *)v157.i8;
                            v66 = v157.i64[0];
                            if ((v62 & 0xF) == 0)
                              goto LABEL_111;
                            if ((v62 & 0xF) < 8uLL)
                              goto LABEL_107;
                          }
                          else
                          {
                            v66 = 0;
                            v67 = 0;
                          }
                          v158 = vdupq_n_s64(v67);
                          v159 = vaddq_s64(v158, (int64x2_t)xmmword_1812332B0);
                          v160 = (int8x16_t)v66;
                          v161 = v60 + v67;
                          v162 = v67 + (v62 & 7);
                          v67 = v62 - (unint64_t)(v62 & 7);
                          v163 = vaddq_s64(v158, (int64x2_t)xmmword_181267BE0);
                          v164 = vaddq_s64(v158, (int64x2_t)xmmword_181233290);
                          v165 = vaddq_s64(v158, (int64x2_t)xmmword_181233120);
                          v166 = 0uLL;
                          v167 = (uint8x8_t *)(v63 + v161);
                          v168 = v162 - v62;
                          v169 = 0uLL;
                          v170 = 0uLL;
                          do
                          {
                            v171 = *v167++;
                            v172 = vmovl_u8(v171);
                            v173 = vmovl_high_u16(v172);
                            v174.i64[0] = v173.u32[2];
                            v174.i64[1] = v173.u32[3];
                            v175 = v174;
                            v174.i64[0] = v173.u32[0];
                            v174.i64[1] = v173.u32[1];
                            v176 = v174;
                            v177 = vmovl_u16(*(uint16x4_t *)v172.i8);
                            v174.i64[0] = v177.u32[2];
                            v174.i64[1] = v177.u32[3];
                            v178 = v174;
                            v174.i64[0] = v177.u32[0];
                            v174.i64[1] = v177.u32[1];
                            v179 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                            v170 = vorrq_s8((int8x16_t)vshlq_u64(v175, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v159, 3uLL), v179)), v170);
                            v169 = vorrq_s8((int8x16_t)vshlq_u64(v176, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v163, 3uLL), v179)), v169);
                            v166 = vorrq_s8((int8x16_t)vshlq_u64(v178, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v164, 3uLL), v179)), v166);
                            v180 = vdupq_n_s64(8uLL);
                            v160 = vorrq_s8((int8x16_t)vshlq_u64(v174, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v165, 3uLL), v179)), v160);
                            v163 = vaddq_s64(v163, v180);
                            v164 = vaddq_s64(v164, v180);
                            v165 = vaddq_s64(v165, v180);
                            v159 = vaddq_s64(v159, v180);
                            v168 += 8;
                          }
                          while (v168);
                          v181 = vorrq_s8(vorrq_s8(v160, v169), vorrq_s8(v166, v170));
                          *(int8x8_t *)v181.i8 = vorr_s8(*(int8x8_t *)v181.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v181, v181, 8uLL));
                          v59 = v2192;
                          *v2192 = *(int8x8_t *)v181.i8;
                          v66 = v181.i64[0];
                          if ((v62 & 7) == 0)
                            goto LABEL_111;
                          goto LABEL_107;
                        }
                        v66 = 0;
                      }
LABEL_111:
                      v81 = v57 - v56;
                      *v2190 = v60 + v62;
                      *v14 = 8 * v62;
                      v70 = 8 * v62 - (v57 - v56);
                      if (8 * v62 >= v81)
                      {
                        v69 = v66 >> v81;
                        *v59 = v66 >> v81;
                        *v14 = v70;
                        v82 = (v66 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v81)) << v56;
                        v68 = v82 | *(_QWORD *)&v58;
                        if ((v82 | v58.i32[0]) != 1)
                          goto LABEL_113;
LABEL_98:
                        llvm::SimpleBitstreamCursor::ReadVBR(v13, 8u, (uint64_t)&v2209);
                        if ((v2210 & 1) != 0)
                        {
                          *a1 = (uint64_t)v2209;
                          v1910 = (void *)__dst.__r_.__value_.__r.__words[0];
                          if ((std::string **)__dst.__r_.__value_.__l.__data_ == &v2224)
                            goto LABEL_1888;
                          goto LABEL_1887;
                        }
                        v71 = v2192;
                        v83 = *v14;
                        if (*v14 >= 4)
                        {
                          v89 = *(_QWORD *)v2192 & 0xFLL;
                          v90 = *(unint64_t *)v2192 >> 4;
                          *v2192 = (int8x8_t)v90;
                          v91 = v83 - 4;
                          *v14 = v83 - 4;
                          if ((v89 & 8) != 0)
                          {
LABEL_176:
                            v185 = 0;
                            do
                            {
                              while (1)
                              {
                                if (v185 >= 0x1D)
                                {
                                  *(_QWORD *)&v2235.__val_ = std::generic_category();
                                  v2235.__cat_ = (const std::error_category *)"Unterminated VBR";
                                  llvm::createStringError((llvm *)0x5C, v2235, v2221);
                                  v55 = *(void **)v2221;
                                  if (!*(_QWORD *)v2221)
                                    goto LABEL_78;
                                  goto LABEL_1617;
                                }
                                if (v91 < 4)
                                  break;
                                v186 = v90 & 0xF;
                                v90 >>= 4;
                                *v71 = (int8x8_t)v90;
                                *v14 = v91 - 4;
                                v91 -= 4;
                                v185 += 3;
                                if ((v186 & 8) == 0)
                                  goto LABEL_121;
                              }
                              if (v91)
                                v187 = v90;
                              else
                                v187 = 0;
                              v87 = *(_QWORD *)(v8 + 40);
                              v188 = *(_QWORD *)(v8 + 48);
                              v189 = v87 - v188;
                              if (v87 <= v188)
                                goto LABEL_211;
                              v190 = *(_QWORD *)v13;
                              v191 = (int *)(*(_QWORD *)v13 + v188);
                              if (v87 >= v188 + 8)
                              {
                                v194 = *(_QWORD *)v191;
                                *v71 = (int8x8_t)v194;
                                v189 = 8;
                                goto LABEL_200;
                              }
                              *v71 = 0;
                              if (!v189)
                              {
                                v194 = 0;
                                goto LABEL_200;
                              }
                              v192 = (v87 - v188);
                              if (v192 < 8
                                || ((unint64_t)v71 < v190 + v188 + v192 ? (v193 = v191 >= v14) : (v193 = 1), !v193))
                              {
                                v195 = 0;
                                v194 = 0;
LABEL_196:
                                v196 = v192 - v195;
                                v197 = 8 * v195;
                                v198 = (unsigned __int8 *)(v190 + v195 + v188);
                                do
                                {
                                  v199 = *v198++;
                                  v71 = v2192;
                                  v194 |= (unint64_t)v199 << (v197 & 0xF8);
                                  *v2192 = (int8x8_t)v194;
                                  v197 += 8;
                                  --v196;
                                }
                                while (v196);
                                goto LABEL_200;
                              }
                              if (v192 >= 0x10)
                              {
                                v195 = v192 - (v189 & 0xF);
                                v204 = (int64x2_t)xmmword_181267BA0;
                                v205 = (int64x2_t)xmmword_181267BB0;
                                v206 = (int64x2_t)xmmword_181267BC0;
                                v207 = (int64x2_t)xmmword_181267BD0;
                                v208 = (int64x2_t)xmmword_1812332B0;
                                v209 = (int64x2_t)xmmword_181267BE0;
                                v210 = 0uLL;
                                v211 = v195;
                                v212 = 0uLL;
                                v213 = 0uLL;
                                v214 = 0uLL;
                                v215 = 0uLL;
                                v216 = 0uLL;
                                v217 = (int64x2_t)xmmword_181233290;
                                v218 = 0uLL;
                                v219 = 0uLL;
                                v220 = (int64x2_t)xmmword_181233120;
                                do
                                {
                                  v221 = *(uint8x16_t *)v191;
                                  v191 += 4;
                                  v222 = vmovl_u8(*(uint8x8_t *)v221.i8);
                                  v223 = vmovl_high_u8(v221);
                                  v224 = vmovl_u16(*(uint16x4_t *)v223.i8);
                                  v225 = vmovl_high_u16(v223);
                                  v226 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                                  v227 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v208, 3uLL), v226);
                                  v228 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v207, 3uLL), v226);
                                  v229 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v209, 3uLL), v226);
                                  v230 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v217, 3uLL), v226);
                                  v231 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v206, 3uLL), v226);
                                  v232 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v220, 3uLL), v226);
                                  v233 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v205, 3uLL), v226);
                                  v234.i64[0] = v225.u32[2];
                                  v234.i64[1] = v225.u32[3];
                                  v235 = (int8x16_t)vshlq_u64(v234, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v204, 3uLL), v226));
                                  v236 = vmovl_u16(*(uint16x4_t *)v222.i8);
                                  v234.i64[0] = v225.u32[0];
                                  v234.i64[1] = v225.u32[1];
                                  v237 = (int8x16_t)vshlq_u64(v234, v233);
                                  v234.i64[0] = v236.u32[0];
                                  v234.i64[1] = v236.u32[1];
                                  v238 = (int8x16_t)vshlq_u64(v234, v232);
                                  v234.i64[0] = v224.u32[2];
                                  v234.i64[1] = v224.u32[3];
                                  v239 = (int8x16_t)vshlq_u64(v234, v231);
                                  v240 = vmovl_high_u16(v222);
                                  v234.i64[0] = v236.u32[2];
                                  v234.i64[1] = v236.u32[3];
                                  v241 = (int8x16_t)vshlq_u64(v234, v230);
                                  v234.i64[0] = v240.u32[0];
                                  v234.i64[1] = v240.u32[1];
                                  v242 = (int8x16_t)vshlq_u64(v234, v229);
                                  v234.i64[0] = v224.u32[0];
                                  v234.i64[1] = v224.u32[1];
                                  v243 = (int8x16_t)vshlq_u64(v234, v228);
                                  v234.i64[0] = v240.u32[2];
                                  v234.i64[1] = v240.u32[3];
                                  v214 = vorrq_s8((int8x16_t)vshlq_u64(v234, v227), v214);
                                  v215 = vorrq_s8(v243, v215);
                                  v213 = vorrq_s8(v242, v213);
                                  v212 = vorrq_s8(v241, v212);
                                  v216 = vorrq_s8(v239, v216);
                                  v210 = vorrq_s8(v238, v210);
                                  v218 = vorrq_s8(v237, v218);
                                  v219 = vorrq_s8(v235, v219);
                                  v244 = vdupq_n_s64(0x10uLL);
                                  v209 = vaddq_s64(v209, v244);
                                  v217 = vaddq_s64(v217, v244);
                                  v220 = vaddq_s64(v220, v244);
                                  v208 = vaddq_s64(v208, v244);
                                  v207 = vaddq_s64(v207, v244);
                                  v206 = vaddq_s64(v206, v244);
                                  v205 = vaddq_s64(v205, v244);
                                  v204 = vaddq_s64(v204, v244);
                                  v211 -= 16;
                                }
                                while (v211);
                                v245 = vorrq_s8(vorrq_s8(vorrq_s8(v210, v215), vorrq_s8(v213, v218)), vorrq_s8(vorrq_s8(v212, v216), vorrq_s8(v214, v219)));
                                *(int8x8_t *)v245.i8 = vorr_s8(*(int8x8_t *)v245.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v245, v245, 8uLL));
                                v71 = v2192;
                                *v2192 = *(int8x8_t *)v245.i8;
                                v194 = v245.i64[0];
                                if ((v189 & 0xF) == 0)
                                  goto LABEL_200;
                                if ((v189 & 0xF) < 8uLL)
                                  goto LABEL_196;
                              }
                              else
                              {
                                v194 = 0;
                                v195 = 0;
                              }
                              v246 = vdupq_n_s64(v195);
                              v247 = vaddq_s64(v246, (int64x2_t)xmmword_1812332B0);
                              v248 = (int8x16_t)v194;
                              v249 = v195 + v188;
                              v250 = v195 + (v189 & 7);
                              v195 = v192 - (v189 & 7);
                              v251 = vaddq_s64(v246, (int64x2_t)xmmword_181267BE0);
                              v252 = vaddq_s64(v246, (int64x2_t)xmmword_181233290);
                              v253 = vaddq_s64(v246, (int64x2_t)xmmword_181233120);
                              v254 = 0uLL;
                              v255 = (uint8x8_t *)(v190 + v249);
                              v256 = v250 - v192;
                              v257 = 0uLL;
                              v258 = 0uLL;
                              do
                              {
                                v259 = *v255++;
                                v260 = vmovl_u8(v259);
                                v261 = vmovl_high_u16(v260);
                                v262.i64[0] = v261.u32[2];
                                v262.i64[1] = v261.u32[3];
                                v263 = v262;
                                v262.i64[0] = v261.u32[0];
                                v262.i64[1] = v261.u32[1];
                                v264 = v262;
                                v265 = vmovl_u16(*(uint16x4_t *)v260.i8);
                                v262.i64[0] = v265.u32[2];
                                v262.i64[1] = v265.u32[3];
                                v266 = v262;
                                v262.i64[0] = v265.u32[0];
                                v262.i64[1] = v265.u32[1];
                                v267 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                                v258 = vorrq_s8((int8x16_t)vshlq_u64(v263, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v247, 3uLL), v267)), v258);
                                v257 = vorrq_s8((int8x16_t)vshlq_u64(v264, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v251, 3uLL), v267)), v257);
                                v254 = vorrq_s8((int8x16_t)vshlq_u64(v266, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v252, 3uLL), v267)), v254);
                                v268 = vdupq_n_s64(8uLL);
                                v248 = vorrq_s8((int8x16_t)vshlq_u64(v262, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v253, 3uLL), v267)), v248);
                                v251 = vaddq_s64(v251, v268);
                                v252 = vaddq_s64(v252, v268);
                                v253 = vaddq_s64(v253, v268);
                                v247 = vaddq_s64(v247, v268);
                                v256 += 8;
                              }
                              while (v256);
                              v269 = vorrq_s8(vorrq_s8(v248, v257), vorrq_s8(v254, v258));
                              *(int8x8_t *)v269.i8 = vorr_s8(*(int8x8_t *)v269.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL));
                              v71 = v2192;
                              *v2192 = *(int8x8_t *)v269.i8;
                              v194 = v269.i64[0];
                              if ((v189 & 7) != 0)
                                goto LABEL_196;
LABEL_200:
                              v200 = 4 - v91;
                              *v2190 = v188 + v189;
                              v201 = 8 * v189;
                              *v14 = 8 * v189;
                              v202 = 8 * v189 - (4 - v91);
                              if (v201 < 4 - v91)
                              {
                                v272 = v14;
                                v270 = std::generic_category();
                                v2218 = 0;
                                __p = 0;
                                v2219[0] = 0;
                                LODWORD(v2210) = 0;
                                v2213 = 0;
                                v2214 = 0;
                                v2215 = 1;
                                v2211 = 0;
                                v2212 = 0;
                                *((_QWORD *)&v2210 + 1) = 0;
                                v2209 = &unk_1E0E22B10;
                                v2216 = &__p;
                                llvm::raw_ostream::SetBufferAndMode((uint64_t)&v2209, 0, 0, 0);
                                *(_QWORD *)&v2206 = "Unexpected end of file reading %u of %u bits";
                                v2205 = &unk_1E0E20320;
                                DWORD2(v2206) = *v272;
                                HIDWORD(v2206) = v200;
LABEL_212:
                                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v2209, (uint64_t)&v2205);
                                v271 = v2216;
                                v55 = operator new(0x38uLL);
                                v2208 = 260;
                                v2205 = v271;
                                llvm::StringError::StringError((uint64_t)v55, (llvm::Twine *)&v2205, 5, (uint64_t)v270);
                                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v2209);
                                if (SHIBYTE(v2219[0]) < 0)
                                  operator delete(__p);
                                a1 = (uint64_t *)v2187;
                                v14 = v2191;
LABEL_215:
                                if (!v55)
                                  goto LABEL_78;
LABEL_1617:
                                *a1 = (uint64_t)v55;
                                v1910 = (void *)__dst.__r_.__value_.__r.__words[0];
                                if ((std::string **)__dst.__r_.__value_.__l.__data_ == &v2224)
                                  goto LABEL_1888;
                                goto LABEL_1887;
                              }
                              v90 = v194 >> v200;
                              *v71 = (int8x8_t)(v194 >> v200);
                              *v14 = v202;
                              v203 = (v194 << v91) & 0xF | v187;
                              v91 = v202;
                              v185 += 3;
                            }
                            while ((v203 & 8) != 0);
                          }
LABEL_121:
                          v65 = v91 >= 0x20;
                          v92 = v91 - 32;
                          if (v65)
                          {
                            v93 = 0;
                            v94 = (int8x8_t)(v90 >> v92);
                            *v71 = (int8x8_t)HIDWORD(*(_QWORD *)&v94);
                            *v14 = 0;
                            goto LABEL_160;
                          }
                          *(_DWORD *)(v8 + 64) = 0;
                          LODWORD(v2196[0]) = 32;
                          v96 = *(_QWORD *)(v8 + 40);
                          v95 = *(_QWORD *)(v8 + 48);
                          v97 = v96 - v95;
                          if (v96 <= v95)
                          {
                            v2209 = *(void **)(v8 + 40);
                            llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v2190, (uint64_t *)&v2209, (uint64_t *)&v2205);
                            v55 = v2205;
                            if (v2205)
                              goto LABEL_215;
                            v115 = *v14;
                            v71 = v2192;
                            goto LABEL_157;
                          }
                          v98 = *(_QWORD *)v13;
                          v99 = (int *)(*(_QWORD *)v13 + v95);
                          if (v96 >= v95 + 8)
                          {
                            *v71 = *(int8x8_t *)v99;
                            v97 = 8;
                          }
                          else
                          {
                            *v71 = 0;
                            if (v97)
                            {
                              v100 = (v96 - v95);
                              if (v97 < 8uLL || (unint64_t)v71 < v98 + v95 + v100 && v99 < v14)
                              {
                                v101 = 0;
                                v102 = 0;
LABEL_131:
                                v103 = v100 - v101;
                                v104 = 8 * v101;
                                v105 = (unsigned __int8 *)(v98 + v101 + v95);
                                do
                                {
                                  v106 = *v105++;
                                  *(_QWORD *)&v102 |= (unint64_t)v106 << (v104 & 0xF8);
                                  *v71 = v102;
                                  v104 += 8;
                                  --v103;
                                }
                                while (v103);
                                goto LABEL_156;
                              }
                              if (v100 >= 0x10)
                              {
                                v101 = v100 - (v97 & 0xF);
                                v407 = (int64x2_t)xmmword_181267BA0;
                                v408 = (int64x2_t)xmmword_181267BB0;
                                v409 = (int64x2_t)xmmword_181267BC0;
                                v410 = (int64x2_t)xmmword_181267BD0;
                                v411 = (int64x2_t)xmmword_1812332B0;
                                v412 = (int64x2_t)xmmword_181267BE0;
                                v413 = 0uLL;
                                v414 = v101;
                                v415 = 0uLL;
                                v416 = 0uLL;
                                v417 = 0uLL;
                                v418 = 0uLL;
                                v419 = 0uLL;
                                v420 = (int64x2_t)xmmword_181233290;
                                v421 = 0uLL;
                                v422 = 0uLL;
                                v423 = (int64x2_t)xmmword_181233120;
                                do
                                {
                                  v424 = *(uint8x16_t *)v99;
                                  v99 += 4;
                                  v425 = vmovl_u8(*(uint8x8_t *)v424.i8);
                                  v426 = vmovl_high_u8(v424);
                                  v427 = vmovl_u16(*(uint16x4_t *)v426.i8);
                                  v428 = vmovl_high_u16(v426);
                                  v429 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                                  v430 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v411, 3uLL), v429);
                                  v431 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v410, 3uLL), v429);
                                  v432 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v412, 3uLL), v429);
                                  v433 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v420, 3uLL), v429);
                                  v434 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v409, 3uLL), v429);
                                  v435 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v423, 3uLL), v429);
                                  v436 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v408, 3uLL), v429);
                                  v437.i64[0] = v428.u32[2];
                                  v437.i64[1] = v428.u32[3];
                                  v438 = (int8x16_t)vshlq_u64(v437, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v407, 3uLL), v429));
                                  v439 = vmovl_u16(*(uint16x4_t *)v425.i8);
                                  v437.i64[0] = v428.u32[0];
                                  v437.i64[1] = v428.u32[1];
                                  v440 = (int8x16_t)vshlq_u64(v437, v436);
                                  v437.i64[0] = v439.u32[0];
                                  v437.i64[1] = v439.u32[1];
                                  v441 = (int8x16_t)vshlq_u64(v437, v435);
                                  v437.i64[0] = v427.u32[2];
                                  v437.i64[1] = v427.u32[3];
                                  v442 = (int8x16_t)vshlq_u64(v437, v434);
                                  v443 = vmovl_high_u16(v425);
                                  v437.i64[0] = v439.u32[2];
                                  v437.i64[1] = v439.u32[3];
                                  v444 = (int8x16_t)vshlq_u64(v437, v433);
                                  v437.i64[0] = v443.u32[0];
                                  v437.i64[1] = v443.u32[1];
                                  v445 = (int8x16_t)vshlq_u64(v437, v432);
                                  v437.i64[0] = v427.u32[0];
                                  v437.i64[1] = v427.u32[1];
                                  v446 = (int8x16_t)vshlq_u64(v437, v431);
                                  v437.i64[0] = v443.u32[2];
                                  v437.i64[1] = v443.u32[3];
                                  v417 = vorrq_s8((int8x16_t)vshlq_u64(v437, v430), v417);
                                  v418 = vorrq_s8(v446, v418);
                                  v416 = vorrq_s8(v445, v416);
                                  v415 = vorrq_s8(v444, v415);
                                  v419 = vorrq_s8(v442, v419);
                                  v413 = vorrq_s8(v441, v413);
                                  v421 = vorrq_s8(v440, v421);
                                  v422 = vorrq_s8(v438, v422);
                                  v447 = vdupq_n_s64(0x10uLL);
                                  v412 = vaddq_s64(v412, v447);
                                  v420 = vaddq_s64(v420, v447);
                                  v423 = vaddq_s64(v423, v447);
                                  v411 = vaddq_s64(v411, v447);
                                  v410 = vaddq_s64(v410, v447);
                                  v409 = vaddq_s64(v409, v447);
                                  v408 = vaddq_s64(v408, v447);
                                  v407 = vaddq_s64(v407, v447);
                                  v414 -= 16;
                                }
                                while (v414);
                                v448 = vorrq_s8(vorrq_s8(vorrq_s8(v413, v418), vorrq_s8(v416, v421)), vorrq_s8(vorrq_s8(v415, v419), vorrq_s8(v417, v422)));
                                v449 = vorr_s8(*(int8x8_t *)v448.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v448, v448, 8uLL));
                                *v71 = v449;
                                if ((v97 & 0xF) == 0)
                                  goto LABEL_156;
                                v102 = v449;
                                if ((v97 & 0xF) < 8uLL)
                                  goto LABEL_131;
                              }
                              else
                              {
                                v102 = 0;
                                v101 = 0;
                              }
                              v450 = vdupq_n_s64(v101);
                              v451 = vaddq_s64(v450, (int64x2_t)xmmword_1812332B0);
                              v452 = (int8x16_t)(unint64_t)v102;
                              v453 = v101 + v95;
                              v454 = v101 + (v97 & 7);
                              v101 = v100 - (v97 & 7);
                              v455 = vaddq_s64(v450, (int64x2_t)xmmword_181267BE0);
                              v456 = vaddq_s64(v450, (int64x2_t)xmmword_181233290);
                              v457 = vaddq_s64(v450, (int64x2_t)xmmword_181233120);
                              v458 = 0uLL;
                              v459 = (uint8x8_t *)(v98 + v453);
                              v460 = v454 - v100;
                              v461 = 0uLL;
                              v462 = 0uLL;
                              do
                              {
                                v463 = *v459++;
                                v464 = vmovl_u8(v463);
                                v465 = vmovl_high_u16(v464);
                                v466.i64[0] = v465.u32[2];
                                v466.i64[1] = v465.u32[3];
                                v467 = v466;
                                v466.i64[0] = v465.u32[0];
                                v466.i64[1] = v465.u32[1];
                                v468 = v466;
                                v469 = vmovl_u16(*(uint16x4_t *)v464.i8);
                                v466.i64[0] = v469.u32[2];
                                v466.i64[1] = v469.u32[3];
                                v470 = v466;
                                v466.i64[0] = v469.u32[0];
                                v466.i64[1] = v469.u32[1];
                                v471 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                                v462 = vorrq_s8((int8x16_t)vshlq_u64(v467, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v451, 3uLL), v471)), v462);
                                v461 = vorrq_s8((int8x16_t)vshlq_u64(v468, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v455, 3uLL), v471)), v461);
                                v458 = vorrq_s8((int8x16_t)vshlq_u64(v470, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v456, 3uLL), v471)), v458);
                                v472 = vdupq_n_s64(8uLL);
                                v452 = vorrq_s8((int8x16_t)vshlq_u64(v466, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v457, 3uLL), v471)), v452);
                                v455 = vaddq_s64(v455, v472);
                                v456 = vaddq_s64(v456, v472);
                                v457 = vaddq_s64(v457, v472);
                                v451 = vaddq_s64(v451, v472);
                                v460 += 8;
                              }
                              while (v460);
                              v473 = vorrq_s8(vorrq_s8(v452, v461), vorrq_s8(v458, v462));
                              v474 = vorr_s8(*(int8x8_t *)v473.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v473, v473, 8uLL));
                              *v71 = v474;
                              if ((v97 & 7) == 0)
                                goto LABEL_156;
                              v102 = v474;
                              goto LABEL_131;
                            }
                          }
LABEL_156:
                          *v2190 = v95 + v97;
                          v115 = 8 * v97;
                          *v14 = v115;
LABEL_157:
                          if (v115 <= 0x1F)
                          {
                            llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v14, (int *)v2196, (uint64_t *)&__p);
                            goto LABEL_169;
                          }
                          v94 = *v71;
                          *v71 = (int8x8_t)HIDWORD(*(unint64_t *)v71);
                          v93 = v115 - 32;
                          *v14 = v93;
LABEL_160:
                          v183 = *(_QWORD *)(v8 + 40);
                          v182 = *(_QWORD *)(v8 + 48);
                          v184 = 8 * v182 - v93 + 32 * v94.u32[0];
                          v2205 = (void *)v184;
                          if (v93 || v183 > v182)
                          {
                            if (v183 >= v184 >> 3)
                            {
                              *v2190 = (v184 >> 3) & 0x1FFFFFFFFFFFFFF8;
                              *v14 = 0;
                              if ((v184 & 0x3F) == 0
                                || (llvm::SimpleBitstreamCursor::Read(v13, v184 & 0x3F, (uint64_t)&v2209),
                                    (v2210 & 1) == 0)
                                || (__p = v2209) == 0)
                              {
                                __p = 0;
                              }
                            }
                            else
                            {
                              v2209 = (void *)(8 * v182 - v93);
                              llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v2205, (uint64_t *)&v2209, (uint64_t *)&__p);
                            }
                          }
                          else
                          {
                            *(_QWORD *)&v2234.__val_ = std::generic_category();
                            v2234.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
                            llvm::createStringError((llvm *)0x5C, v2234, &__p);
                          }
LABEL_169:
                          v55 = __p;
                          if (!__p)
                            continue;
                          goto LABEL_1617;
                        }
                        if (v83)
                        {
                          v84 = *v2192;
                          v85 = 4 - v83;
                          v2199 = 4 - v83;
                          v87 = *(_QWORD *)(v8 + 40);
                          v86 = *(_QWORD *)(v8 + 48);
                          v88 = v87 - v86;
                          if (v87 <= v86)
                            goto LABEL_211;
                        }
                        else
                        {
                          v84.i8[0] = 0;
                          v85 = 4;
                          v2199 = 4;
                          v87 = *(_QWORD *)(v8 + 40);
                          v86 = *(_QWORD *)(v8 + 48);
                          v88 = v87 - v86;
                          if (v87 <= v86)
                          {
LABEL_211:
                            v270 = std::generic_category();
                            v2218 = 0;
                            __p = 0;
                            v2219[0] = 0;
                            LODWORD(v2210) = 0;
                            v2213 = 0;
                            v2214 = 0;
                            v2215 = 1;
                            v2211 = 0;
                            v2212 = 0;
                            *((_QWORD *)&v2210 + 1) = 0;
                            v2209 = &unk_1E0E22B10;
                            v2216 = &__p;
                            llvm::raw_ostream::SetBufferAndMode((uint64_t)&v2209, 0, 0, 0);
                            *(_QWORD *)&v2206 = "Unexpected end of file reading %u of %u bytes";
                            v2205 = &unk_1E0E203C0;
                            *((_QWORD *)&v2206 + 1) = *v2190;
                            v2207 = v87;
                            goto LABEL_212;
                          }
                        }
                        v107 = *(_QWORD *)v13;
                        v108 = (int *)(*(_QWORD *)v13 + v86);
                        a1 = (uint64_t *)v2187;
                        if (v87 >= v86 + 8)
                        {
                          v110 = *(_QWORD *)v108;
                          *v2192 = (int8x8_t)v110;
                          v88 = 8;
                          goto LABEL_172;
                        }
                        *v2192 = 0;
                        if (!v88)
                        {
                          v110 = 0;
                          goto LABEL_172;
                        }
                        if (v88 < 8uLL || (unint64_t)v2192 < v107 + v86 + v88 && v108 < v14)
                        {
                          v109 = 0;
                          v110 = 0;
                          goto LABEL_141;
                        }
                        if (v88 >= 0x10uLL)
                        {
                          v109 = v88 - (unint64_t)(v88 & 0xF);
                          v300 = (int64x2_t)xmmword_181267BA0;
                          v301 = (int64x2_t)xmmword_181267BB0;
                          v302 = (int64x2_t)xmmword_181267BC0;
                          v303 = (int64x2_t)xmmword_181267BD0;
                          v304 = (int64x2_t)xmmword_1812332B0;
                          v305 = (int64x2_t)xmmword_181267BE0;
                          v306 = 0uLL;
                          v307 = v109;
                          v308 = 0uLL;
                          v309 = 0uLL;
                          v310 = 0uLL;
                          v311 = 0uLL;
                          v312 = 0uLL;
                          v313 = (int64x2_t)xmmword_181233290;
                          v314 = 0uLL;
                          v315 = 0uLL;
                          v316 = (int64x2_t)xmmword_181233120;
                          do
                          {
                            v317 = *(uint8x16_t *)v108;
                            v108 += 4;
                            v318 = vmovl_u8(*(uint8x8_t *)v317.i8);
                            v319 = vmovl_high_u8(v317);
                            v320 = vmovl_u16(*(uint16x4_t *)v319.i8);
                            v321 = vmovl_high_u16(v319);
                            v322 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                            v323 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v304, 3uLL), v322);
                            v324 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v303, 3uLL), v322);
                            v325 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v305, 3uLL), v322);
                            v326 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v313, 3uLL), v322);
                            v327 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v302, 3uLL), v322);
                            v328 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v316, 3uLL), v322);
                            v329 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v301, 3uLL), v322);
                            v330.i64[0] = v321.u32[2];
                            v330.i64[1] = v321.u32[3];
                            v331 = (int8x16_t)vshlq_u64(v330, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v300, 3uLL), v322));
                            v332 = vmovl_u16(*(uint16x4_t *)v318.i8);
                            v330.i64[0] = v321.u32[0];
                            v330.i64[1] = v321.u32[1];
                            v333 = (int8x16_t)vshlq_u64(v330, v329);
                            v330.i64[0] = v332.u32[0];
                            v330.i64[1] = v332.u32[1];
                            v334 = (int8x16_t)vshlq_u64(v330, v328);
                            v330.i64[0] = v320.u32[2];
                            v330.i64[1] = v320.u32[3];
                            v335 = (int8x16_t)vshlq_u64(v330, v327);
                            v336 = vmovl_high_u16(v318);
                            v330.i64[0] = v332.u32[2];
                            v330.i64[1] = v332.u32[3];
                            v337 = (int8x16_t)vshlq_u64(v330, v326);
                            v330.i64[0] = v336.u32[0];
                            v330.i64[1] = v336.u32[1];
                            v338 = (int8x16_t)vshlq_u64(v330, v325);
                            v330.i64[0] = v320.u32[0];
                            v330.i64[1] = v320.u32[1];
                            v339 = (int8x16_t)vshlq_u64(v330, v324);
                            v330.i64[0] = v336.u32[2];
                            v330.i64[1] = v336.u32[3];
                            v310 = vorrq_s8((int8x16_t)vshlq_u64(v330, v323), v310);
                            v311 = vorrq_s8(v339, v311);
                            v309 = vorrq_s8(v338, v309);
                            v308 = vorrq_s8(v337, v308);
                            v312 = vorrq_s8(v335, v312);
                            v306 = vorrq_s8(v334, v306);
                            v314 = vorrq_s8(v333, v314);
                            v315 = vorrq_s8(v331, v315);
                            v340 = vdupq_n_s64(0x10uLL);
                            v305 = vaddq_s64(v305, v340);
                            v313 = vaddq_s64(v313, v340);
                            v316 = vaddq_s64(v316, v340);
                            v304 = vaddq_s64(v304, v340);
                            v303 = vaddq_s64(v303, v340);
                            v302 = vaddq_s64(v302, v340);
                            v301 = vaddq_s64(v301, v340);
                            v300 = vaddq_s64(v300, v340);
                            v307 -= 16;
                          }
                          while (v307);
                          v341 = vorrq_s8(vorrq_s8(vorrq_s8(v306, v311), vorrq_s8(v309, v314)), vorrq_s8(vorrq_s8(v308, v312), vorrq_s8(v310, v315)));
                          *(int8x8_t *)v341.i8 = vorr_s8(*(int8x8_t *)v341.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v341, v341, 8uLL));
                          v71 = v2192;
                          *v2192 = *(int8x8_t *)v341.i8;
                          v110 = v341.i64[0];
                          if ((v88 & 0xF) == 0)
                            goto LABEL_172;
                          if ((v88 & 0xF) < 8uLL)
                          {
LABEL_141:
                            v111 = v88 - v109;
                            v112 = 8 * v109;
                            v113 = (unsigned __int8 *)(v107 + v109 + v86);
                            do
                            {
                              v114 = *v113++;
                              v71 = v2192;
                              v110 |= (unint64_t)v114 << (v112 & 0xF8);
                              *v2192 = (int8x8_t)v110;
                              v112 += 8;
                              --v111;
                            }
                            while (v111);
                            goto LABEL_172;
                          }
                        }
                        else
                        {
                          v110 = 0;
                          v109 = 0;
                        }
                        v342 = vdupq_n_s64(v109);
                        v343 = vaddq_s64(v342, (int64x2_t)xmmword_1812332B0);
                        v344 = (int8x16_t)v110;
                        v345 = v109 + v86;
                        v346 = v109 + (v88 & 7);
                        v109 = v88 - (unint64_t)(v88 & 7);
                        v347 = vaddq_s64(v342, (int64x2_t)xmmword_181267BE0);
                        v348 = vaddq_s64(v342, (int64x2_t)xmmword_181233290);
                        v349 = vaddq_s64(v342, (int64x2_t)xmmword_181233120);
                        v350 = 0uLL;
                        v351 = (uint8x8_t *)(v107 + v345);
                        v352 = v346 - v88;
                        v353 = 0uLL;
                        v354 = 0uLL;
                        do
                        {
                          v355 = *v351++;
                          v356 = vmovl_u8(v355);
                          v357 = vmovl_high_u16(v356);
                          v358.i64[0] = v357.u32[2];
                          v358.i64[1] = v357.u32[3];
                          v359 = v358;
                          v358.i64[0] = v357.u32[0];
                          v358.i64[1] = v357.u32[1];
                          v360 = v358;
                          v361 = vmovl_u16(*(uint16x4_t *)v356.i8);
                          v358.i64[0] = v361.u32[2];
                          v358.i64[1] = v361.u32[3];
                          v362 = v358;
                          v358.i64[0] = v361.u32[0];
                          v358.i64[1] = v361.u32[1];
                          v363 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v354 = vorrq_s8((int8x16_t)vshlq_u64(v359, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v343, 3uLL), v363)), v354);
                          v353 = vorrq_s8((int8x16_t)vshlq_u64(v360, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v347, 3uLL), v363)), v353);
                          v350 = vorrq_s8((int8x16_t)vshlq_u64(v362, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v348, 3uLL), v363)), v350);
                          v364 = vdupq_n_s64(8uLL);
                          v344 = vorrq_s8((int8x16_t)vshlq_u64(v358, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v349, 3uLL), v363)), v344);
                          v347 = vaddq_s64(v347, v364);
                          v348 = vaddq_s64(v348, v364);
                          v349 = vaddq_s64(v349, v364);
                          v343 = vaddq_s64(v343, v364);
                          v352 += 8;
                        }
                        while (v352);
                        v365 = vorrq_s8(vorrq_s8(v344, v353), vorrq_s8(v350, v354));
                        *(int8x8_t *)v365.i8 = vorr_s8(*(int8x8_t *)v365.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v365, v365, 8uLL));
                        v71 = v2192;
                        *v2192 = *(int8x8_t *)v365.i8;
                        v110 = v365.i64[0];
                        if ((v88 & 7) != 0)
                          goto LABEL_141;
LABEL_172:
                        *v2190 = v86 + v88;
                        *v14 = 8 * v88;
                        v91 = 8 * v88 - v85;
                        if (8 * v88 < v85)
                        {
                          llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v14, &v2199, v2196);
                          v55 = (void *)v2196[0];
                          if (!v2196[0])
                            continue;
                          goto LABEL_1617;
                        }
                        v90 = v110 >> v85;
                        *v71 = (int8x8_t)v90;
                        *v14 = v91;
                        if (((_DWORD)v110 << v83) & 8 | v84.i8[0] & 8)
                          goto LABEL_176;
                        goto LABEL_121;
                      }
                      v1912 = v14;
                      v1911 = std::generic_category();
                      v2218 = 0;
                      __p = 0;
                      v2219[0] = 0;
                      LODWORD(v2210) = 0;
                      v2213 = 0;
                      v2214 = 0;
                      v2215 = 1;
                      v2211 = 0;
                      v2212 = 0;
                      *((_QWORD *)&v2210 + 1) = 0;
                      v2209 = &unk_1E0E22B10;
                      v2216 = &__p;
                      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v2209, 0, 0, 0);
                      *(_QWORD *)&v2206 = "Unexpected end of file reading %u of %u bits";
                      v2205 = &unk_1E0E20320;
                      DWORD2(v2206) = *v1912;
                      HIDWORD(v2206) = v81;
LABEL_1623:
                      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v2209, (uint64_t)&v2205);
                      v1913 = v2216;
                      v1914 = operator new(0x38uLL);
                      v2208 = 260;
                      v2205 = v1913;
                      llvm::StringError::StringError((uint64_t)v1914, (llvm::Twine *)&v2205, 5, (uint64_t)v1911);
                      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v2209);
                      if (SHIBYTE(v2219[0]) < 0)
                        operator delete(__p);
                      a1 = (uint64_t *)v2187;
                      v14 = v2191;
                      *(_QWORD *)v2187 = v1914;
                      v1910 = (void *)__dst.__r_.__value_.__r.__words[0];
                      if ((std::string **)__dst.__r_.__value_.__l.__data_ == &v2224)
                        goto LABEL_1888;
                      goto LABEL_1887;
                    }
                    v58 = *v2192;
                  }
                  break;
                }
                v68 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v57) & *(_QWORD *)&v58;
                v69 = *(_QWORD *)&v58 >> v57;
                *v59 = *(_QWORD *)&v58 >> v57;
                v70 = v56 - v57;
                *v14 = v70;
                if ((_DWORD)v68 == 1)
                  goto LABEL_98;
LABEL_113:
                if ((_DWORD)v68 == 2)
                {
                  llvm::BitstreamCursor::ReadAbbrevRecord((char **)v13, (unint64_t *)&v2209);
                  v55 = v2209;
                  if (!v2209)
                    continue;
                  goto LABEL_1617;
                }
                break;
              }
              if (!(_DWORD)v68)
              {
                if (*(_DWORD *)(v8 + 104))
                {
                  if (v70 < 0x20)
                  {
                    v1942 = 0;
                  }
                  else
                  {
                    *v59 = v69 >> (v70 - 32);
                    v1942 = 32;
                  }
                  *(_DWORD *)(v8 + 64) = v1942;
                  llvm::BitstreamCursor::popBlockScope(v13);
                  if (v2198 == (uint64_t)(*(_QWORD *)(v8 + 528) - *(_QWORD *)(v8 + 520)) >> 3)
                  {
                    *a1 = 0;
                    v1910 = (void *)__dst.__r_.__value_.__r.__words[0];
                    if ((std::string **)__dst.__r_.__value_.__l.__data_ == &v2224)
                      goto LABEL_1888;
                    goto LABEL_1887;
                  }
                }
LABEL_1876:
                v2209 = "Malformed block";
                LOWORD(v2212) = 259;
                goto LABEL_1877;
              }
              LODWORD(__s.__r_.__value_.__r.__words[1]) = 0;
              v2205 = (char *)&v2206 + 8;
              *(_QWORD *)&v2206 = 0xC00000000;
              llvm::BitstreamCursor::readRecord(v13, ((v68 << 32) | 3) >> 32, (uint64_t)&__s, 0, (uint64_t)v2221);
              if ((v2222 & 1) != 0)
              {
                v76 = *(void **)v2221;
                *(_QWORD *)v2221 = 0;
                *a1 = (uint64_t)v76;
                goto LABEL_463;
              }
              switch(v2221[0])
              {
                case 1u:
                  if (!LODWORD(__s.__r_.__value_.__r.__words[1]))
                  {
                    v274 = "Invalid numentry record";
                    goto LABEL_461;
                  }
                  v73 = *(_QWORD *)(v8 + 520);
                  v74 = (*(_QWORD *)(v8 + 528) - v73) >> 3;
                  if (*(_QWORD *)__s.__r_.__value_.__l.__data_ <= v74)
                  {
                    if (*(_QWORD *)__s.__r_.__value_.__l.__data_ < v74)
                      *(_QWORD *)(v8 + 528) = v73 + 8 * *(_QWORD *)__s.__r_.__value_.__l.__data_;
                    v75 = 2;
                  }
                  else
                  {
                    std::vector<mlir::Value>::__append(v2172, *(_QWORD *)__s.__r_.__value_.__l.__data_ - v74);
                    v75 = 2;
                  }
                  goto LABEL_464;
                case 2u:
                  VoidTy = (uint64_t **)llvm::Type::getVoidTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 3u:
                  VoidTy = (uint64_t **)llvm::Type::getFloatTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 4u:
                  VoidTy = (uint64_t **)llvm::Type::getDoubleTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 5u:
                  VoidTy = (uint64_t **)llvm::Type::getLabelTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 6u:
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) != 1)
                  {
                    v274 = "Invalid opaque type record";
                    goto LABEL_461;
                  }
                  v288 = *(_QWORD *)(v8 + 520);
                  if (v2198 >= (unint64_t)((*(_QWORD *)(v8 + 528) - v288) >> 3))
                    goto LABEL_460;
                  VoidTy = *(uint64_t ***)(v288 + 8 * v2198);
                  if (VoidTy)
                  {
                    llvm::StructType::setName(*(_QWORD *)(v288 + 8 * v2198), (int8x16_t *)__dst.__r_.__value_.__l.__data_, (const unsigned __int8 *)__dst.__r_.__value_.__l.__size_);
                    *((_QWORD *)*v2172 + v2198) = 0;
                  }
                  else
                  {
                  }
                  __dst.__r_.__value_.__l.__size_ = 0;
                  goto LABEL_457;
                case 7u:
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]))
                  {
                    if (!((unint64_t)(*(_QWORD *)__s.__r_.__value_.__l.__data_ - 1) >> 23))
                    {
                      VoidTy = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)(v8 + 424), *(llvm::LLVMContext **)__s.__r_.__value_.__l.__data_);
                      goto LABEL_457;
                    }
                    v274 = "Bitwidth for integer type out of range";
                  }
                  else
                  {
                    v274 = "Invalid integer record";
                  }
                  goto LABEL_461;
                case 8u:
                  if (!LODWORD(__s.__r_.__value_.__r.__words[1]))
                  {
                    v274 = "Invalid pointer record";
                    goto LABEL_461;
                  }
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) == 2)
                  {
                    v281 = (unsigned int *)__s.__r_.__value_.__r.__words[0];
                    v282 = (llvm::Type *)*(unsigned int *)(__s.__r_.__value_.__r.__words[0] + 8);
                  }
                  else
                  {
                    v282 = 0;
                    v281 = (unsigned int *)__s.__r_.__value_.__r.__words[0];
                  }
                  if (!v377)
                    goto LABEL_321;
                  v379 = (llvm::PointerType **)v377;
                  if (!llvm::PointerType::isValidElementType(v377, v378))
                    goto LABEL_321;
                  v380 = *(_DWORD *)__s.__r_.__value_.__l.__data_;
                  v381 = v2206;
                  if (v2206 >= (unint64_t)DWORD1(v2206))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2205, (char *)&v2206 + 8, v2206 + 1, 4);
                    v381 = v2206;
                  }
                  *((_DWORD *)v2205 + v381) = v380;
                  LODWORD(v2206) = v2206 + 1;
                  VoidTy = (uint64_t **)llvm::PointerType::get(v379, v282);
                  goto LABEL_419;
                case 9u:
                  v297 = __s.__r_.__value_.__r.__words[1];
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) <= 2)
                    goto LABEL_275;
                  v2209 = (char *)&v2210 + 8;
                  *(_QWORD *)&v2210 = 0x800000000;
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) != 3)
                  {
                    v403 = 3;
                    do
                    {
                      if (!v404)
                        break;
                      v405 = v404;
                      v406 = v2210;
                      if (v2210 >= (unint64_t)DWORD1(v2210))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2209, (char *)&v2210 + 8, v2210 + 1, 8);
                        v406 = v2210;
                      }
                      *((_QWORD *)v2209 + v406) = v405;
                      LODWORD(v2210) = v2210 + 1;
                      ++v403;
                    }
                    while (v297 != v403);
                  }
                  if (!VoidTy
                    || (v376 = LODWORD(__s.__r_.__value_.__r.__words[1]),
                        (unint64_t)LODWORD(__s.__r_.__value_.__r.__words[1]) - 3 > v2210))
                  {
                    __p = "Invalid type";
                    v2220 = 259;
                    a1 = (uint64_t *)v2187;
                    v12 = v2188;
                    LOBYTE(v278) = 0;
                    v75 = 1;
                    goto LABEL_454;
                  }
                  v475 = __s.__r_.__value_.__r.__words[0];
                  v278 = 8 * LODWORD(__s.__r_.__value_.__r.__words[1]) - 16;
                  v476 = v2206;
                  v477 = v2206 + (v278 >> 3);
                  if (v477 > DWORD1(v2206))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2205, (char *)&v2206 + 8, v477, 4);
                    v476 = v2206;
                  }
                  if ((_DWORD)v376 == 2)
                    goto LABEL_449;
                  v478 = (uint64_t *)(v475 + 16);
                  v479 = (int32x4_t *)((char *)v2205 + 4 * v476);
                  v480 = (v376 + 0x1FFFFFFFFFFFFFFDLL) & 0x1FFFFFFFFFFFFFFFLL;
                  if (v480 >= 7)
                  {
                    v530 = v480 + 1;
                    v531 = (v480 + 1) & 0x3FFFFFFFFFFFFFF8;
                    v481 = &v479->i8[4 * v531];
                    v478 += v531;
                    v532 = (int32x4_t *)(v475 + 48);
                    v533 = v479 + 1;
                    v534 = v531;
                    do
                    {
                      v536 = v532[-2];
                      v535 = v532[-1];
                      v538 = *v532;
                      v537 = v532[1];
                      v532 += 4;
                      v533[-1] = vuzp1q_s32(v536, v535);
                      *v533 = vuzp1q_s32(v538, v537);
                      v533 += 2;
                      v534 -= 8;
                    }
                    while (v534);
                    if (v530 == v531)
                      goto LABEL_448;
                  }
                  else
                  {
                    v481 = (char *)v479;
                  }
                  do
                  {
                    v539 = *v478++;
                    *(_DWORD *)v481 = v539;
                    v481 += 4;
                  }
                  while (v478 != (uint64_t *)(v475 + 8 * v376));
                  goto LABEL_448;
                case 0xAu:
                  VoidTy = (uint64_t **)llvm::Type::getHalfTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 0xBu:
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) <= 1)
                  {
                    v274 = "Invalid array type record";
                    goto LABEL_461;
                  }
                  if (!v370)
                    goto LABEL_321;
                  v372 = v370;
                  if (!llvm::ArrayType::isValidElementType(v370, v371))
                    goto LABEL_321;
                  v373 = *(_DWORD *)(__s.__r_.__value_.__r.__words[0] + 8);
                  v374 = v2206;
                  if (v2206 >= (unint64_t)DWORD1(v2206))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2205, (char *)&v2206 + 8, v2206 + 1, 4);
                    v374 = v2206;
                  }
                  *((_DWORD *)v2205 + v374) = v373;
                  LODWORD(v2206) = v2206 + 1;
                  llvm::ArrayType::get(v372, *(llvm::Type **)__s.__r_.__value_.__l.__data_);
                  VoidTy = v375;
                  goto LABEL_419;
                case 0xCu:
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) <= 1)
                  {
                    v274 = "Invalid vector type record";
                    goto LABEL_461;
                  }
                  if (!*(_QWORD *)__s.__r_.__value_.__l.__data_)
                  {
                    v274 = "Invalid vector length";
                    goto LABEL_461;
                  }
                  if (!v366 || (v368 = v366, !llvm::VectorType::isValidElementType(v366, v367)))
                  {
LABEL_321:
                    v274 = "Invalid type";
                    goto LABEL_461;
                  }
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) < 3)
                    v369 = 0;
                  else
                    v369 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 16);
                  v522 = *(_DWORD *)(__s.__r_.__value_.__r.__words[0] + 8);
                  v523 = v2206;
                  if (v2206 >= (unint64_t)DWORD1(v2206))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2205, (char *)&v2206 + 8, v2206 + 1, 4);
                    v523 = v2206;
                  }
                  *((_DWORD *)v2205 + v523) = v522;
                  LODWORD(v2206) = v2206 + 1;
                  llvm::VectorType::get(v368, (llvm::Type *)(*(unsigned int *)__s.__r_.__value_.__l.__data_ | ((unint64_t)(v369 != 0) << 32)));
                  VoidTy = v524;
                  v8 = v2186;
LABEL_419:
                  a1 = (uint64_t *)v2187;
                  goto LABEL_457;
                case 0xDu:
                  VoidTy = (uint64_t **)llvm::Type::getX86_FP80Ty(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 0xEu:
                  VoidTy = (uint64_t **)llvm::Type::getFP128Ty(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 0xFu:
                  VoidTy = (uint64_t **)llvm::Type::getPPC_FP128Ty(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 0x10u:
                  VoidTy = (uint64_t **)llvm::Type::getMetadataTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 0x11u:
                  VoidTy = (uint64_t **)llvm::Type::getX86_MMXTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 0x12u:
                  v283 = __s.__r_.__value_.__r.__words[1];
                  if (!LODWORD(__s.__r_.__value_.__r.__words[1]))
                  {
                    v298 = "Invalid anon struct record";
                    goto LABEL_367;
                  }
                  v2209 = (char *)&v2210 + 8;
                  *(_QWORD *)&v2210 = 0x800000000;
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) == 1)
                  {
                    v284 = 0;
                    v285 = 1;
                  }
                  else
                  {
                    v382 = 1;
                    do
                    {
                      v284 = v2210;
                      if (!v383)
                        break;
                      v384 = v383;
                      if (v2210 >= DWORD1(v2210))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2209, (char *)&v2210 + 8, v2210 + 1, 8);
                        v284 = v2210;
                      }
                      *((_QWORD *)v2209 + v284) = v384;
                      v284 = v2210 + 1;
                      LODWORD(v2210) = v2210 + 1;
                      ++v382;
                    }
                    while (v283 != (_DWORD)v382);
                    v285 = LODWORD(__s.__r_.__value_.__r.__words[1]);
                  }
                  v385 = v284;
                  v386 = v285 - 1;
                  if (v285 - 1 != v284)
                  {
                    v395 = "Invalid type";
                    goto LABEL_395;
                  }
                  v387 = __s.__r_.__value_.__r.__words[0];
                  v388 = 8 * v285 - 8;
                  v389 = v2206;
                  v390 = v2206 + (v388 >> 3);
                  if (v390 > DWORD1(v2206))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2205, (char *)&v2206 + 8, v390, 4);
                    v388 = 8 * v285 - 8;
                    v386 = v285 - 1;
                    v389 = v2206;
                  }
                  if (v285 == 1)
                    goto LABEL_404;
                  v391 = (uint64_t *)(v387 + 8);
                  v392 = (int32x4_t *)((char *)v2205 + 4 * v389);
                  v393 = (v285 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
                  if (v393 < 7)
                  {
                    v394 = (char *)v392;
                    do
                    {
LABEL_402:
                      v513 = *v391++;
                      *(_DWORD *)v394 = v513;
                      v394 += 4;
                    }
                    while (v391 != (uint64_t *)(v387 + 8 * v285));
                    goto LABEL_403;
                  }
                  v504 = v393 + 1;
                  v505 = (v393 + 1) & 0x3FFFFFFFFFFFFFF8;
                  v394 = &v392->i8[4 * v505];
                  v391 += v505;
                  v506 = (int32x4_t *)(v387 + 40);
                  v507 = v392 + 1;
                  v508 = v505;
                  do
                  {
                    v510 = v506[-2];
                    v509 = v506[-1];
                    v512 = *v506;
                    v511 = v506[1];
                    v506 += 4;
                    v507[-1] = vuzp1q_s32(v510, v509);
                    *v507 = vuzp1q_s32(v512, v511);
                    v507 += 2;
                    v508 -= 8;
                  }
                  while (v508);
                  if (v504 != v505)
                    goto LABEL_402;
LABEL_403:
                  LODWORD(v389) = v2206;
LABEL_404:
                  LODWORD(v2206) = v389 + ((unint64_t)v388 >> 3);
                  VoidTy = (uint64_t **)llvm::StructType::get(*(uint64_t **)(v8 + 424), (uint64_t *)v2209, v2210, *(_QWORD *)__s.__r_.__value_.__l.__data_ != 0);
                  v75 = 5;
LABEL_439:
                  v12 = v2188;
                  goto LABEL_440;
                case 0x13u:
                  v289 = __s.__r_.__value_.__r.__words[0];
                  v290 = LODWORD(__s.__r_.__value_.__r.__words[1]);
                  size = __dst.__r_.__value_.__l.__size_;
                  v292 = __dst.__r_.__value_.__l.__size_ + LODWORD(__s.__r_.__value_.__r.__words[1]);
                  if (__dst.__r_.__value_.__r.__words[2] < v292)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, &v2224, v292, 1);
                    size = __dst.__r_.__value_.__l.__size_;
                  }
                  if (!(_DWORD)v290)
                    goto LABEL_506;
                  v293 = __dst.__r_.__value_.__r.__words[0];
                  v294 = (_BYTE *)(__dst.__r_.__value_.__r.__words[0] + size);
                  v295 = (v290 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                  if (v295 < 7)
                  {
                    v296 = (uint64_t *)v289;
                    goto LABEL_504;
                  }
                  if ((unint64_t)v294 < v289 + 8 * (v290 - 1) + 8)
                  {
                    v296 = (uint64_t *)v289;
                    if (v289 < __dst.__r_.__value_.__r.__words[0] + size + v295 + 1)
                      goto LABEL_504;
                  }
                  v396 = v295 + 1;
                  if (v295 >= 0x1F)
                  {
                    v397 = v396 & 0x3FFFFFFFFFFFFFE0;
                    v514 = (int8x16x4_t *)(v289 + 128);
                    v515 = (_OWORD *)(__dst.__r_.__value_.__r.__words[0] + size + 16);
                    v516 = v396 & 0x3FFFFFFFFFFFFFE0;
                    do
                    {
                      *(_QWORD *)&v517 = vqtbl4q_s8(v514[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
                      *(_QWORD *)&v518 = vqtbl4q_s8(*v514, (int8x16_t)xmmword_18125CFF0).u64[0];
                      *((_QWORD *)&v517 + 1) = vqtbl4q_s8(v514[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
                      *((_QWORD *)&v518 + 1) = vqtbl4q_s8(v514[1], (int8x16_t)xmmword_18125CFF0).u64[0];
                      *(v515 - 1) = v517;
                      *v515 = v518;
                      v514 += 4;
                      v515 += 2;
                      v516 -= 32;
                    }
                    while (v516);
                    if (v396 == v397)
                      goto LABEL_505;
                    if ((v396 & 0x18) == 0)
                    {
                      v296 = (uint64_t *)(v289 + 8 * v397);
                      v294 += v397;
                      do
                      {
LABEL_504:
                        v580 = *v296++;
                        *v294++ = v580;
                      }
                      while (v296 != (uint64_t *)(v289 + 8 * v290));
                      goto LABEL_505;
                    }
                  }
                  else
                  {
                    v397 = 0;
                  }
                  v294 += v396 & 0x3FFFFFFFFFFFFFF8;
                  v296 = (uint64_t *)(v289 + 8 * (v396 & 0x3FFFFFFFFFFFFFF8));
                  v519 = (_QWORD *)(v293 + size + v397);
                  v520 = v397 - (v396 & 0x3FFFFFFFFFFFFFF8);
                  v521 = (int8x16x4_t *)(v289 + 8 * v397);
                  do
                  {
                    *v519++ = vqtbl4q_s8(*v521++, (int8x16_t)xmmword_18125D000).u64[0];
                    v520 += 8;
                  }
                  while (v520);
                  if (v396 != (v396 & 0x3FFFFFFFFFFFFFF8))
                    goto LABEL_504;
LABEL_505:
                  size = __dst.__r_.__value_.__l.__size_;
LABEL_506:
                  __dst.__r_.__value_.__l.__size_ = size + v290;
                  v75 = 2;
                  a1 = (uint64_t *)v2187;
                  goto LABEL_464;
                case 0x14u:
                  if (!LODWORD(__s.__r_.__value_.__r.__words[1]))
                  {
                    v274 = "Invalid named struct record";
                    goto LABEL_461;
                  }
                  v299 = *(_QWORD *)(v8 + 520);
                  if (v2198 >= (unint64_t)((*(_QWORD *)(v8 + 528) - v299) >> 3))
                    goto LABEL_460;
                  VoidTy = *(uint64_t ***)(v299 + 8 * v2198);
                  if (VoidTy)
                  {
                    llvm::StructType::setName(*(_QWORD *)(v299 + 8 * v2198), (int8x16_t *)__dst.__r_.__value_.__l.__data_, (const unsigned __int8 *)__dst.__r_.__value_.__l.__size_);
                    *((_QWORD *)*v2172 + v2198) = 0;
                  }
                  else
                  {
                  }
                  __dst.__r_.__value_.__l.__size_ = 0;
                  v2209 = (char *)&v2210 + 8;
                  *(_QWORD *)&v2210 = 0x800000000;
                  v488 = __s.__r_.__value_.__r.__words[1];
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) == 1)
                  {
                    v489 = 0;
                    v490 = 1;
                  }
                  else
                  {
                    v491 = 1;
                    do
                    {
                      v489 = v2210;
                      if (!v492)
                        break;
                      v493 = v492;
                      if (v2210 >= DWORD1(v2210))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2209, (char *)&v2210 + 8, v2210 + 1, 8);
                        v489 = v2210;
                      }
                      *((_QWORD *)v2209 + v489) = v493;
                      v489 = v2210 + 1;
                      LODWORD(v2210) = v2210 + 1;
                      ++v491;
                    }
                    while (v488 != (_DWORD)v491);
                    v490 = LODWORD(__s.__r_.__value_.__r.__words[1]);
                  }
                  v385 = v489;
                  v386 = v490 - 1;
                  if (v490 - 1 != v489)
                  {
                    v395 = "Invalid named struct record";
LABEL_395:
                    __p = v395;
                    v2220 = 259;
                    VoidTy = 0;
                    v75 = 1;
LABEL_440:
                    if (v2209 != (char *)&v2210 + 8)
                      free(v2209);
                    v572 = v386 == v385;
                    a1 = (uint64_t *)v2187;
                    if (v572)
                      goto LABEL_457;
                    goto LABEL_464;
                  }
                  llvm::StructType::setBody((uint64_t)VoidTy, (uint64_t *)v2209, v489, *(_QWORD *)__s.__r_.__value_.__l.__data_ != 0);
                  v494 = __s.__r_.__value_.__r.__words[0];
                  v495 = LODWORD(__s.__r_.__value_.__r.__words[1]);
                  v496 = 8 * LODWORD(__s.__r_.__value_.__r.__words[1]);
                  v497 = v496 - 8;
                  v498 = v2206;
                  v499 = v2206 + ((v496 - 8) >> 3);
                  if (v499 > DWORD1(v2206))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2205, (char *)&v2206 + 8, v499, 4);
                    v497 = v496 - 8;
                    v498 = v2206;
                  }
                  if ((_DWORD)v495 == 1)
                    goto LABEL_438;
                  v500 = (uint64_t *)(v494 + 8);
                  v501 = (int32x4_t *)((char *)v2205 + 4 * v498);
                  v502 = (v495 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
                  if (v502 >= 7)
                  {
                    v540 = v502 + 1;
                    v541 = (v502 + 1) & 0x3FFFFFFFFFFFFFF8;
                    v503 = &v501->i8[4 * v541];
                    v500 += v541;
                    v542 = (int32x4_t *)(v494 + 40);
                    v543 = v501 + 1;
                    v544 = v541;
                    do
                    {
                      v546 = v542[-2];
                      v545 = v542[-1];
                      v548 = *v542;
                      v547 = v542[1];
                      v542 += 4;
                      v543[-1] = vuzp1q_s32(v546, v545);
                      *v543 = vuzp1q_s32(v548, v547);
                      v543 += 2;
                      v544 -= 8;
                    }
                    while (v544);
                    if (v540 == v541)
                      goto LABEL_437;
                  }
                  else
                  {
                    v503 = (char *)v501;
                  }
                  do
                  {
                    v549 = *v500++;
                    *(_DWORD *)v503 = v549;
                    v503 += 4;
                  }
                  while (v500 != (uint64_t *)(v494 + v496));
LABEL_437:
                  LODWORD(v498) = v2206;
LABEL_438:
                  LODWORD(v2206) = v498 + (v497 >> 3);
                  v75 = 5;
                  v8 = v2186;
                  goto LABEL_439;
                case 0x15u:
                  v286 = __s.__r_.__value_.__r.__words[1];
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) <= 1)
                  {
LABEL_275:
                    v298 = "Invalid function record";
                    goto LABEL_367;
                  }
                  v2209 = (char *)&v2210 + 8;
                  *(_QWORD *)&v2210 = 0x800000000;
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) == 2)
                    goto LABEL_254;
                  v398 = 2;
                  while (1)
                  {
                    if (!v399)
                    {
LABEL_254:
                      if (!VoidTy
                        || (v287 = LODWORD(__s.__r_.__value_.__r.__words[1]),
                            (unint64_t)LODWORD(__s.__r_.__value_.__r.__words[1]) - 2 > v2210))
                      {
                        __p = "Invalid type";
                        v2220 = 259;
                        a1 = (uint64_t *)v2187;
                        v12 = v2188;
                        goto LABEL_398;
                      }
                      v482 = __s.__r_.__value_.__r.__words[0];
                      v278 = 8 * LODWORD(__s.__r_.__value_.__r.__words[1]) - 8;
                      v476 = v2206;
                      v483 = v2206 + (v278 >> 3);
                      if (v483 > DWORD1(v2206))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2205, (char *)&v2206 + 8, v483, 4);
                        v476 = v2206;
                      }
                      if ((_DWORD)v287 != 1)
                      {
                        v484 = (uint64_t *)(v482 + 8);
                        v485 = (int32x4_t *)((char *)v2205 + 4 * v476);
                        v486 = (v287 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
                        if (v486 < 7)
                        {
                          v487 = (char *)v485;
                          goto LABEL_447;
                        }
                        v550 = v486 + 1;
                        v551 = (v486 + 1) & 0x3FFFFFFFFFFFFFF8;
                        v487 = &v485->i8[4 * v551];
                        v484 += v551;
                        v552 = (int32x4_t *)(v482 + 40);
                        v553 = v485 + 1;
                        v554 = v551;
                        do
                        {
                          v556 = v552[-2];
                          v555 = v552[-1];
                          v558 = *v552;
                          v557 = v552[1];
                          v552 += 4;
                          v553[-1] = vuzp1q_s32(v556, v555);
                          *v553 = vuzp1q_s32(v558, v557);
                          v553 += 2;
                          v554 -= 8;
                        }
                        while (v554);
                        if (v550 != v551)
                        {
                          do
                          {
LABEL_447:
                            v559 = *v484++;
                            *(_DWORD *)v487 = v559;
                            v487 += 4;
                          }
                          while (v484 != (uint64_t *)(v482 + 8 * v287));
                        }
LABEL_448:
                        LODWORD(v476) = v2206;
                      }
LABEL_449:
                      LODWORD(v2206) = v476 + ((unint64_t)v278 >> 3);
                      VoidTy = (uint64_t **)llvm::FunctionType::get(VoidTy, (uint64_t)v2209, v2210, *(_QWORD *)__s.__r_.__value_.__l.__data_ != 0);
                      v75 = 5;
                      LOBYTE(v278) = 1;
                      a1 = (uint64_t *)v2187;
                      v12 = v2188;
                      goto LABEL_454;
                    }
                    v401 = v399;
                    if (!llvm::FunctionType::isValidArgumentType(v399, v400))
                      break;
                    v402 = v2210;
                    if (v2210 >= (unint64_t)DWORD1(v2210))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2209, (char *)&v2210 + 8, v2210 + 1, 8);
                      v402 = v2210;
                    }
                    *((_QWORD *)v2209 + v402) = v401;
                    LODWORD(v2210) = v2210 + 1;
                    if (v286 == ++v398)
                      goto LABEL_254;
                  }
                  __p = "Invalid function argument type";
                  v2220 = 259;
                  a1 = (uint64_t *)v2187;
                  VoidTy = 0;
LABEL_398:
                  LOBYTE(v278) = 0;
                  v75 = 1;
LABEL_454:
                  if (v2209 != (char *)&v2210 + 8)
                    free(v2209);
                  if ((v278 & 1) == 0)
                    goto LABEL_464;
LABEL_457:
                  v560 = v2198;
                  v561 = *(_QWORD *)(v8 + 520);
                  if (v2198 >= (unint64_t)((*(_QWORD *)(v8 + 528) - v561) >> 3))
                  {
LABEL_460:
                    v274 = "Invalid TYPE table";
LABEL_461:
                    v2209 = v274;
                    LOWORD(v2212) = 259;
LABEL_462:
LABEL_463:
                    v75 = 1;
                    goto LABEL_464;
                  }
                  if (*(_QWORD *)(v561 + 8 * v2198))
                  {
                    v274 = "Invalid TYPE table: Only named structs can be forward referenced";
                    goto LABEL_461;
                  }
                  *(_QWORD *)(v561 + 8 * v2198) = VoidTy;
                  if (!(_DWORD)v2206)
                    goto LABEL_502;
                  v564 = *(_DWORD *)(v8 + 560);
                  if (!v564)
                  {
                    v574 = 0;
                    goto LABEL_484;
                  }
                  v565 = *(_QWORD *)(v8 + 544);
                  v566 = v564 - 1;
                  v567 = v566 & (37 * v560);
                  inserted = (char *)(v565 + 32 * v567);
                  v569 = *(_DWORD *)inserted;
                  if (v560 != *(_DWORD *)inserted)
                  {
                    v570 = 0;
                    v571 = 1;
                    while (v569 != -1)
                    {
                      if (v570)
                        v572 = 0;
                      else
                        v572 = v569 == -2;
                      if (v572)
                        v570 = inserted;
                      v573 = v567 + v571++;
                      v567 = v573 & v566;
                      inserted = (char *)(v565 + 32 * v567);
                      v569 = *(_DWORD *)inserted;
                      v8 = v2186;
                      a1 = (uint64_t *)v2187;
                      if (v560 == *(_DWORD *)inserted)
                        goto LABEL_485;
                    }
                    if (v570)
                      v574 = v570;
                    else
                      v574 = inserted;
                    v8 = v2186;
                    a1 = (uint64_t *)v2187;
LABEL_484:
                    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::InsertIntoBucket<unsigned int const&>(v2173, v574, &v2198);
                  }
LABEL_485:
                  v575 = (void **)(inserted + 8);
                  if (inserted + 8 == (char *)&v2205)
                    goto LABEL_502;
                  v576 = v2205;
                  if (v2205 == (char *)&v2206 + 8)
                  {
                    v578 = v2206;
                    v579 = *((unsigned int *)inserted + 4);
                    if (v579 >= v2206)
                    {
                      if ((_DWORD)v2206)
                        memmove(*v575, (char *)&v2206 + 8, 4 * v2206);
                    }
                    else
                    {
                      if (*((_DWORD *)inserted + 5) < v2206)
                      {
                        *((_DWORD *)inserted + 4) = 0;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(inserted + 8), inserted + 24, v578, 4);
                        goto LABEL_497;
                      }
                      if ((_DWORD)v579)
                        memmove(*v575, (char *)&v2206 + 8, 4 * v579);
                      else
LABEL_497:
                        v579 = 0;
                      if (v579 != v2206)
                        memcpy((char *)*v575 + 4 * v579, (char *)v2205 + 4 * v579, 4 * v2206 - 4 * v579);
                    }
                    *((_DWORD *)inserted + 4) = v578;
                    a1 = (uint64_t *)v2187;
                    goto LABEL_501;
                  }
                  v577 = (char *)*((_QWORD *)inserted + 1);
                  if (v577 != inserted + 24)
                  {
                    free(v577);
                    v576 = v2205;
                  }
                  *((_QWORD *)inserted + 1) = v576;
                  *((_QWORD *)inserted + 2) = v2206;
                  v2205 = (char *)&v2206 + 8;
                  DWORD1(v2206) = 0;
LABEL_501:
                  LODWORD(v2206) = 0;
LABEL_502:
                  v75 = 0;
                  ++v2198;
                  v12 = v2188;
LABEL_464:
                  if ((v2222 & 1) != 0)
                  {
                    v562 = *(void **)v2221;
                    *(_QWORD *)v2221 = 0;
                    if (v562)
                      (*(void (**)(void *))(*(_QWORD *)v562 + 8))(v562);
                  }
                  v14 = v2191;
                  if (v2205 != (char *)&v2206 + 8)
                    free(v2205);
                  v563 = v75 | 2;
                  v13 = v2189;
                  if (v563 != 2)
                  {
LABEL_1877:
                    v1910 = (void *)__dst.__r_.__value_.__r.__words[0];
                    if ((std::string **)__dst.__r_.__value_.__l.__data_ == &v2224)
                      goto LABEL_1888;
                    goto LABEL_1887;
                  }
                  continue;
                case 0x16u:
                  VoidTy = (uint64_t **)llvm::Type::getTokenTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 0x17u:
                  VoidTy = (uint64_t **)llvm::Type::getBFloatTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 0x18u:
                  VoidTy = (uint64_t **)llvm::Type::getX86_AMXTy(*(llvm::Type **)(v8 + 424), v72);
                  goto LABEL_457;
                case 0x19u:
                  if (LODWORD(__s.__r_.__value_.__r.__words[1]) != 1)
                  {
                    v274 = "Invalid opaque pointer record";
                    goto LABEL_461;
                  }
                  if (llvm::LLVMContext::supportsTypedPointers(*(llvm::LLVMContextImpl ***)(v8 + 424)))
                  {
                    v274 = "Opaque pointers are only supported in -opaque-pointers mode";
                    goto LABEL_461;
                  }
                  VoidTy = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)(v8 + 424), (llvm::LLVMContext *)*(unsigned int *)__s.__r_.__value_.__l.__data_);
                  goto LABEL_457;
                case 0x1Au:
                  v275 = __s.__r_.__value_.__r.__words[1];
                  if (!LODWORD(__s.__r_.__value_.__r.__words[1]))
                  {
                    v274 = "Invalid target extension type record";
                    goto LABEL_461;
                  }
                  if (v2198 >= (unint64_t)((uint64_t)(*(_QWORD *)(v8 + 528) - *(_QWORD *)(v8 + 520)) >> 3))
                    goto LABEL_460;
                  v276 = *(_QWORD *)__s.__r_.__value_.__l.__data_;
                  if (*(_QWORD *)__s.__r_.__value_.__l.__data_ < (unint64_t)LODWORD(__s.__r_.__value_.__r.__words[1]))
                  {
                    v2209 = (char *)&v2210 + 8;
                    *(_QWORD *)&v2210 = 0x400000000;
                    __p = v2219;
                    v2218 = 0x800000000;
                    if (!(_DWORD)v276)
                    {
                      v280 = 0;
                      goto LABEL_420;
                    }
                    v277 = 0;
                    while (1)
                    {
                      if (!v278)
                        break;
                      v279 = v2210;
                      if (v2210 >= (unint64_t)DWORD1(v2210))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2209, (char *)&v2210 + 8, v2210 + 1, 8);
                        v279 = v2210;
                      }
                      *((_QWORD *)v2209 + v279) = v278;
                      v280 = v2210 + 1;
                      LODWORD(v2210) = v2210 + 1;
                      v277 += 8;
                      if (8 * v276 == v277)
                      {
                        v275 = __s.__r_.__value_.__r.__words[1];
LABEL_420:
                        v525 = (v276 + 1);
                        if (v525 >= v275)
                        {
                          v529 = v2218;
LABEL_451:
                          VoidTy = (uint64_t **)llvm::TargetExtType::get(*(_QWORD *)(v8 + 424), (uint64_t)__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (uint64_t)v2209, v280, (uint64_t)__p, v529);
                          __dst.__r_.__value_.__l.__size_ = 0;
                          v75 = 5;
                          LOBYTE(v278) = 1;
                          a1 = (uint64_t *)v2187;
                        }
                        else
                        {
                          v526 = v275;
                          while (1)
                          {
                            v527 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * v525);
                            if (HIDWORD(v527))
                              break;
                            v528 = v2218;
                            if (v2218 >= (unint64_t)HIDWORD(v2218))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v2219, v2218 + 1, 4);
                              v528 = v2218;
                            }
                            *((_DWORD *)__p + v528) = v527;
                            v529 = v2218 + 1;
                            LODWORD(v2218) = v2218 + 1;
                            if (v526 == ++v525)
                            {
                              v280 = v2210;
                              v8 = v2186;
                              goto LABEL_451;
                            }
                          }
                          v2196[0] = (uint64_t)"Integer parameter too large";
                          v2197 = 259;
                          a1 = (uint64_t *)v2187;
                          VoidTy = 0;
                          LOBYTE(v278) = 0;
                          v75 = 1;
                          v8 = v2186;
                        }
LABEL_452:
                        if (__p != v2219)
                          free(__p);
                        goto LABEL_454;
                      }
                    }
                    v2196[0] = (uint64_t)"Invalid type";
                    v2197 = 259;
                    a1 = (uint64_t *)v2187;
                    VoidTy = 0;
                    v75 = 1;
                    goto LABEL_452;
                  }
                  v298 = "Too many type parameters";
LABEL_367:
                  v2209 = v298;
                  LOWORD(v2212) = 259;
                  a1 = (uint64_t *)v2187;
                  goto LABEL_462;
                default:
                  v274 = "Invalid value";
                  goto LABEL_461;
              }
            }
          case 0x12:
            goto LABEL_1890;
          case 0x15:
            llvm::BitstreamCursor::EnterSubBlock(v13, 0, 21, a1);
            if (*a1)
              goto LABEL_19;
            if (*(_QWORD *)(v8 + 1776) != *(_QWORD *)(v8 + 1784))
            {
LABEL_73:
              v40 = "Invalid multiple blocks";
              goto LABEL_74;
            }
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__r.__words[2];
            __s.__r_.__value_.__l.__size_ = 0x4000000000;
            while (1)
            {
              v1594 = *v14;
              if (*v14)
              {
                v1595 = *(_DWORD *)(v8 + 68);
                v1596 = *(int8x8_t *)(v8 + 56);
                v585 = v2192;
                if (v1594 < v1595)
                {
                  v587 = *(_QWORD *)(v8 + 40);
                  v1597 = *(_QWORD *)(v8 + 48);
                  v1595 -= v1594;
                  LODWORD(v2196[0]) = v1595;
                  v1598 = v587 - v1597;
                  if (v587 <= v1597)
                    goto LABEL_1579;
                  goto LABEL_1409;
                }
              }
              else
              {
                v587 = *(_QWORD *)(v8 + 40);
                v1597 = *(_QWORD *)(v8 + 48);
                v585 = v2192;
                if (v587 <= v1597)
                  goto LABEL_1719;
                v1595 = *(_DWORD *)(v8 + 68);
                if (v1595)
                {
                  v1596 = 0;
                  LODWORD(v2196[0]) = *(_DWORD *)(v8 + 68);
                  v1598 = v587 - v1597;
                  if (v587 <= v1597)
                  {
LABEL_1579:
                    v1879 = std::generic_category();
                    v2206 = 0uLL;
                    v2205 = 0;
                    LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
                    v2226 = 0;
                    v2227 = 0;
                    v2228 = 1;
                    v2224 = 0;
                    v2225 = 0;
                    __dst.__r_.__value_.__r.__words[2] = 0;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                    p_p = &v2205;
                    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__dst, 0, 0, 0);
                    *(_QWORD *)&v2210 = "Unexpected end of file reading %u of %u bytes";
                    v2209 = &unk_1E0E203C0;
                    *((_QWORD *)&v2210 + 1) = *v2190;
                    v2211 = v587;
                    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__dst, (uint64_t)&v2209);
                    v1880 = p_p;
                    v1881 = operator new(0x38uLL);
                    LOWORD(v2212) = 260;
                    v2209 = v1880;
                    llvm::StringError::StringError((uint64_t)v1881, (llvm::Twine *)&v2209, 5, (uint64_t)v1879);
                    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
                    if (SHIBYTE(v2206) < 0)
                      operator delete(v2205);
                    a1 = (uint64_t *)v2187;
                    v14 = v2191;
                    *(_QWORD *)v2187 = v1881;
                    goto LABEL_1888;
                  }
LABEL_1409:
                  v1599 = *(_QWORD *)v13;
                  v1600 = (int *)(*(_QWORD *)v13 + v1597);
                  if (v587 >= v1597 + 8)
                  {
                    v1602 = *(_QWORD *)v1600;
                    *v585 = v1602;
                    v1598 = 8;
                  }
                  else
                  {
                    *v585 = 0;
                    if (v1598)
                    {
                      if (v1598 < 8uLL
                        || ((unint64_t)v585 < v1599 + v1597 + v1598 ? (v1601 = v1600 >= v14) : (v1601 = 1), !v1601))
                      {
                        v1603 = 0;
                        v1602 = 0;
                        goto LABEL_1431;
                      }
                      if (v1598 >= 0x10uLL)
                      {
                        v1603 = v1598 - (unint64_t)(v1598 & 0xF);
                        v1728 = (int64x2_t)xmmword_181267BA0;
                        v1729 = (int64x2_t)xmmword_181267BB0;
                        v1730 = (int64x2_t)xmmword_181267BC0;
                        v1731 = (int64x2_t)xmmword_181267BD0;
                        v1732 = (int64x2_t)xmmword_1812332B0;
                        v1733 = (int64x2_t)xmmword_181267BE0;
                        v1734 = 0uLL;
                        v1735 = v1603;
                        v1736 = 0uLL;
                        v1737 = 0uLL;
                        v1738 = 0uLL;
                        v1739 = 0uLL;
                        v1740 = 0uLL;
                        v1741 = (int64x2_t)xmmword_181233290;
                        v1742 = 0uLL;
                        v1743 = 0uLL;
                        v1744 = (int64x2_t)xmmword_181233120;
                        do
                        {
                          v1745 = *(uint8x16_t *)v1600;
                          v1600 += 4;
                          v1746 = vmovl_u8(*(uint8x8_t *)v1745.i8);
                          v1747 = vmovl_high_u8(v1745);
                          v1748 = vmovl_u16(*(uint16x4_t *)v1747.i8);
                          v1749 = vmovl_high_u16(v1747);
                          v1750 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v1751 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1732, 3uLL), v1750);
                          v1752 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1731, 3uLL), v1750);
                          v1753 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1733, 3uLL), v1750);
                          v1754 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1741, 3uLL), v1750);
                          v1755 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1730, 3uLL), v1750);
                          v1756 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1744, 3uLL), v1750);
                          v1757 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1729, 3uLL), v1750);
                          v1758.i64[0] = v1749.u32[2];
                          v1758.i64[1] = v1749.u32[3];
                          v1759 = (int8x16_t)vshlq_u64(v1758, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1728, 3uLL), v1750));
                          v1760 = vmovl_u16(*(uint16x4_t *)v1746.i8);
                          v1758.i64[0] = v1749.u32[0];
                          v1758.i64[1] = v1749.u32[1];
                          v1761 = (int8x16_t)vshlq_u64(v1758, v1757);
                          v1758.i64[0] = v1760.u32[0];
                          v1758.i64[1] = v1760.u32[1];
                          v1762 = (int8x16_t)vshlq_u64(v1758, v1756);
                          v1758.i64[0] = v1748.u32[2];
                          v1758.i64[1] = v1748.u32[3];
                          v1763 = (int8x16_t)vshlq_u64(v1758, v1755);
                          v1764 = vmovl_high_u16(v1746);
                          v1758.i64[0] = v1760.u32[2];
                          v1758.i64[1] = v1760.u32[3];
                          v1765 = (int8x16_t)vshlq_u64(v1758, v1754);
                          v1758.i64[0] = v1764.u32[0];
                          v1758.i64[1] = v1764.u32[1];
                          v1766 = (int8x16_t)vshlq_u64(v1758, v1753);
                          v1758.i64[0] = v1748.u32[0];
                          v1758.i64[1] = v1748.u32[1];
                          v1767 = (int8x16_t)vshlq_u64(v1758, v1752);
                          v1758.i64[0] = v1764.u32[2];
                          v1758.i64[1] = v1764.u32[3];
                          v1738 = vorrq_s8((int8x16_t)vshlq_u64(v1758, v1751), v1738);
                          v1739 = vorrq_s8(v1767, v1739);
                          v1737 = vorrq_s8(v1766, v1737);
                          v1736 = vorrq_s8(v1765, v1736);
                          v1740 = vorrq_s8(v1763, v1740);
                          v1734 = vorrq_s8(v1762, v1734);
                          v1742 = vorrq_s8(v1761, v1742);
                          v1743 = vorrq_s8(v1759, v1743);
                          v1768 = vdupq_n_s64(0x10uLL);
                          v1733 = vaddq_s64(v1733, v1768);
                          v1741 = vaddq_s64(v1741, v1768);
                          v1744 = vaddq_s64(v1744, v1768);
                          v1732 = vaddq_s64(v1732, v1768);
                          v1731 = vaddq_s64(v1731, v1768);
                          v1730 = vaddq_s64(v1730, v1768);
                          v1729 = vaddq_s64(v1729, v1768);
                          v1728 = vaddq_s64(v1728, v1768);
                          v1735 -= 16;
                        }
                        while (v1735);
                        v1769 = vorrq_s8(vorrq_s8(vorrq_s8(v1734, v1739), vorrq_s8(v1737, v1742)), vorrq_s8(vorrq_s8(v1736, v1740), vorrq_s8(v1738, v1743)));
                        *(int8x8_t *)v1769.i8 = vorr_s8(*(int8x8_t *)v1769.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1769, v1769, 8uLL));
                        v585 = v2192;
                        *v2192 = *(int8x8_t *)v1769.i8;
                        v1602 = v1769.i64[0];
                        if ((v1598 & 0xF) != 0)
                        {
                          if ((v1598 & 0xF) < 8uLL)
                            goto LABEL_1431;
                          goto LABEL_1522;
                        }
                      }
                      else
                      {
                        v1602 = 0;
                        v1603 = 0;
LABEL_1522:
                        v1770 = vdupq_n_s64(v1603);
                        v1771 = vaddq_s64(v1770, (int64x2_t)xmmword_1812332B0);
                        v1772 = (int8x16_t)v1602;
                        v1773 = v1597 + v1603;
                        v1774 = v1603 + (v1598 & 7);
                        v1603 = v1598 - (unint64_t)(v1598 & 7);
                        v1775 = vaddq_s64(v1770, (int64x2_t)xmmword_181267BE0);
                        v1776 = vaddq_s64(v1770, (int64x2_t)xmmword_181233290);
                        v1777 = vaddq_s64(v1770, (int64x2_t)xmmword_181233120);
                        v1778 = 0uLL;
                        v1779 = (uint8x8_t *)(v1599 + v1773);
                        v1780 = v1774 - v1598;
                        v1781 = 0uLL;
                        v1782 = 0uLL;
                        do
                        {
                          v1783 = *v1779++;
                          v1784 = vmovl_u8(v1783);
                          v1785 = vmovl_high_u16(v1784);
                          v1786.i64[0] = v1785.u32[2];
                          v1786.i64[1] = v1785.u32[3];
                          v1787 = v1786;
                          v1786.i64[0] = v1785.u32[0];
                          v1786.i64[1] = v1785.u32[1];
                          v1788 = v1786;
                          v1789 = vmovl_u16(*(uint16x4_t *)v1784.i8);
                          v1786.i64[0] = v1789.u32[2];
                          v1786.i64[1] = v1789.u32[3];
                          v1790 = v1786;
                          v1786.i64[0] = v1789.u32[0];
                          v1786.i64[1] = v1789.u32[1];
                          v1791 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v1782 = vorrq_s8((int8x16_t)vshlq_u64(v1787, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1771, 3uLL), v1791)), v1782);
                          v1781 = vorrq_s8((int8x16_t)vshlq_u64(v1788, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1775, 3uLL), v1791)), v1781);
                          v1778 = vorrq_s8((int8x16_t)vshlq_u64(v1790, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1776, 3uLL), v1791)), v1778);
                          v1792 = vdupq_n_s64(8uLL);
                          v1772 = vorrq_s8((int8x16_t)vshlq_u64(v1786, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1777, 3uLL), v1791)), v1772);
                          v1775 = vaddq_s64(v1775, v1792);
                          v1776 = vaddq_s64(v1776, v1792);
                          v1777 = vaddq_s64(v1777, v1792);
                          v1771 = vaddq_s64(v1771, v1792);
                          v1780 += 8;
                        }
                        while (v1780);
                        v1793 = vorrq_s8(vorrq_s8(v1772, v1781), vorrq_s8(v1778, v1782));
                        *(int8x8_t *)v1793.i8 = vorr_s8(*(int8x8_t *)v1793.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1793, v1793, 8uLL));
                        v585 = v2192;
                        *v2192 = *(int8x8_t *)v1793.i8;
                        v1602 = v1793.i64[0];
                        if ((v1598 & 7) != 0)
                        {
LABEL_1431:
                          v1611 = v1598 - v1603;
                          v1612 = 8 * v1603;
                          v1613 = (unsigned __int8 *)(v1599 + v1603 + v1597);
                          do
                          {
                            v1614 = *v1613++;
                            v585 = v2192;
                            v1602 |= (unint64_t)v1614 << (v1612 & 0xF8);
                            *v2192 = (int8x8_t)v1602;
                            v1612 += 8;
                            --v1611;
                          }
                          while (v1611);
                        }
                      }
                    }
                    else
                    {
                      v1602 = 0;
                    }
                  }
                  *v2190 = v1597 + v1598;
                  *v14 = 8 * v1598;
                  v1605 = 8 * v1598 - v1595;
                  if (8 * v1598 < v1595)
                  {
LABEL_1582:
                    llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v14, (int *)v2196, (uint64_t *)&__p);
                    *a1 = (uint64_t)__p;
                    goto LABEL_1888;
                  }
                  v595 = v1602 >> v1595;
                  *v585 = v1602 >> v1595;
                  *v14 = v1605;
                  v1615 = (v1602 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v1595)) << v1594;
                  v1604 = v1615 | *(_QWORD *)&v1596;
                  if ((v1615 | v1596.i32[0]) != 1)
                    goto LABEL_1437;
                  goto LABEL_1422;
                }
                v1596 = *v2192;
              }
              v1604 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v1595) & *(_QWORD *)&v1596;
              v595 = *(_QWORD *)&v1596 >> v1595;
              *v585 = *(_QWORD *)&v1596 >> v1595;
              v1605 = v1594 - v1595;
              *v14 = v1594 - v1595;
              if ((_DWORD)v1604 == 1)
              {
LABEL_1422:
                llvm::SimpleBitstreamCursor::ReadVBR(v13, 8u, (uint64_t)&__dst);
                if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
                {
                  v581 = (void *)__dst.__r_.__value_.__r.__words[0];
                  goto LABEL_1726;
                }
                v1606 = (uint64_t *)v2192;
                v1616 = v14;
                v1617 = *v14;
                if (v1617 >= 4)
                {
                  v1631 = *(_QWORD *)v2192 & 0xFLL;
                  v1632 = *(unint64_t *)v2192 >> 4;
                  *v2192 = (int8x8_t)v1632;
                  v1633 = v1617 - 4;
                  *v1616 = v1617 - 4;
                  v14 = v1616;
                  if ((v1631 & 8) == 0)
                    goto LABEL_1472;
LABEL_1475:
                  v1638 = 0;
                  while (2)
                  {
                    if (v1638 >= 0x1D)
                    {
                      *(_QWORD *)&v2243.__val_ = std::generic_category();
                      v2243.__cat_ = (const std::error_category *)"Unterminated VBR";
                      llvm::createStringError((llvm *)0x5C, v2243, v2196);
                      v581 = (void *)v2196[0];
                      if (v2196[0])
                        goto LABEL_1726;
                    }
                    else
                    {
                      if (v1633 >= 4)
                      {
                        v1639 = v1632 & 0xF;
                        v1632 >>= 4;
                        *v1606 = v1632;
                        *v14 = v1633 - 4;
                        v1633 -= 4;
                        v1638 += 3;
                        if ((v1639 & 8) == 0)
                          goto LABEL_1472;
                        continue;
                      }
                      if (v1633)
                        v1640 = v1632;
                      else
                        v1640 = 0;
                      v1641 = 4 - v1633;
                      v2199 = 4 - v1633;
                      v1643 = *(_QWORD *)(v8 + 40);
                      v1642 = *(_QWORD *)(v8 + 48);
                      v1644 = v1643 - v1642;
                      if (v1643 <= v1642)
                      {
                        v1794 = std::generic_category();
                        v2206 = 0uLL;
                        v2205 = 0;
                        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
                        v2226 = 0;
                        v2227 = 0;
                        v2228 = 1;
                        v2224 = 0;
                        v2225 = 0;
                        __dst.__r_.__value_.__r.__words[2] = 0;
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                        p_p = &v2205;
                        llvm::raw_ostream::SetBufferAndMode((uint64_t)&__dst, 0, 0, 0);
                        *(_QWORD *)&v2210 = "Unexpected end of file reading %u of %u bytes";
                        v2209 = &unk_1E0E203C0;
                        *((_QWORD *)&v2210 + 1) = *v2190;
                        v2211 = v1643;
                        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__dst, (uint64_t)&v2209);
                        v1795 = p_p;
                        v581 = operator new(0x38uLL);
                        LOWORD(v2212) = 260;
                        v2209 = v1795;
                        llvm::StringError::StringError((uint64_t)v581, (llvm::Twine *)&v2209, 5, (uint64_t)v1794);
                        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
                        if (SHIBYTE(v2206) < 0)
                          operator delete(v2205);
                        a1 = (uint64_t *)v2187;
                        v14 = v2191;
                        if (v581)
                          goto LABEL_1726;
                      }
                      else
                      {
                        v1645 = *(_QWORD *)v13;
                        v1646 = (int *)(*(_QWORD *)v13 + v1642);
                        if (v1643 >= v1642 + 8)
                        {
                          v1649 = *(_QWORD *)v1646;
                          *v1606 = v1649;
                          v1644 = 8;
                          goto LABEL_1499;
                        }
                        *v1606 = 0;
                        if (!v1644)
                        {
                          v1649 = 0;
                          goto LABEL_1499;
                        }
                        v1647 = (v1643 - v1642);
                        if (v1647 < 8
                          || ((unint64_t)v1606 < v1645 + v1642 + v1647 ? (v1648 = v1646 >= v14) : (v1648 = 1),
                              !v1648))
                        {
                          v1650 = 0;
                          v1649 = 0;
                          goto LABEL_1495;
                        }
                        if (v1647 < 0x10)
                        {
                          v1649 = 0;
                          v1650 = 0;
LABEL_1506:
                          v1699 = vdupq_n_s64(v1650);
                          v1700 = vaddq_s64(v1699, (int64x2_t)xmmword_1812332B0);
                          v1701 = (int8x16_t)v1649;
                          v1702 = v1650 + v1642;
                          v1703 = v1650 + (v1644 & 7);
                          v1650 = v1647 - (v1644 & 7);
                          v1704 = vaddq_s64(v1699, (int64x2_t)xmmword_181267BE0);
                          v1705 = vaddq_s64(v1699, (int64x2_t)xmmword_181233290);
                          v1706 = vaddq_s64(v1699, (int64x2_t)xmmword_181233120);
                          v1707 = 0uLL;
                          v1708 = (uint8x8_t *)(v1645 + v1702);
                          v1709 = v1703 - v1647;
                          v1710 = 0uLL;
                          v1711 = 0uLL;
                          do
                          {
                            v1712 = *v1708++;
                            v1713 = vmovl_u8(v1712);
                            v1714 = vmovl_high_u16(v1713);
                            v1715.i64[0] = v1714.u32[2];
                            v1715.i64[1] = v1714.u32[3];
                            v1716 = v1715;
                            v1715.i64[0] = v1714.u32[0];
                            v1715.i64[1] = v1714.u32[1];
                            v1717 = v1715;
                            v1718 = vmovl_u16(*(uint16x4_t *)v1713.i8);
                            v1715.i64[0] = v1718.u32[2];
                            v1715.i64[1] = v1718.u32[3];
                            v1719 = v1715;
                            v1715.i64[0] = v1718.u32[0];
                            v1715.i64[1] = v1718.u32[1];
                            v1720 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                            v1711 = vorrq_s8((int8x16_t)vshlq_u64(v1716, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1700, 3uLL), v1720)), v1711);
                            v1710 = vorrq_s8((int8x16_t)vshlq_u64(v1717, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1704, 3uLL), v1720)), v1710);
                            v1707 = vorrq_s8((int8x16_t)vshlq_u64(v1719, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1705, 3uLL), v1720)), v1707);
                            v1721 = vdupq_n_s64(8uLL);
                            v1701 = vorrq_s8((int8x16_t)vshlq_u64(v1715, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1706, 3uLL), v1720)), v1701);
                            v1704 = vaddq_s64(v1704, v1721);
                            v1705 = vaddq_s64(v1705, v1721);
                            v1706 = vaddq_s64(v1706, v1721);
                            v1700 = vaddq_s64(v1700, v1721);
                            v1709 += 8;
                          }
                          while (v1709);
                          v1722 = vorrq_s8(vorrq_s8(v1701, v1710), vorrq_s8(v1707, v1711));
                          *(int8x8_t *)v1722.i8 = vorr_s8(*(int8x8_t *)v1722.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1722, v1722, 8uLL));
                          *v2192 = *(int8x8_t *)v1722.i8;
                          v1649 = v1722.i64[0];
                          if ((v1644 & 7) == 0)
                            goto LABEL_1509;
                          goto LABEL_1495;
                        }
                        v1650 = v1647 - (v1644 & 0xF);
                        v1657 = (int64x2_t)xmmword_181267BA0;
                        v1658 = (int64x2_t)xmmword_181267BB0;
                        v1659 = (int64x2_t)xmmword_181267BC0;
                        v1660 = (int64x2_t)xmmword_181267BD0;
                        v1661 = (int64x2_t)xmmword_1812332B0;
                        v1662 = (int64x2_t)xmmword_181267BE0;
                        v1663 = 0uLL;
                        v1664 = v1650;
                        v1665 = 0uLL;
                        v1666 = 0uLL;
                        v1667 = 0uLL;
                        v1668 = 0uLL;
                        v1669 = 0uLL;
                        v1670 = (int64x2_t)xmmword_181233290;
                        v1671 = 0uLL;
                        v1672 = 0uLL;
                        v1673 = (int64x2_t)xmmword_181233120;
                        do
                        {
                          v1674 = *(uint8x16_t *)v1646;
                          v1646 += 4;
                          v1675 = vmovl_u8(*(uint8x8_t *)v1674.i8);
                          v1676 = vmovl_high_u8(v1674);
                          v1677 = vmovl_u16(*(uint16x4_t *)v1676.i8);
                          v1678 = vmovl_high_u16(v1676);
                          v1679 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v1680 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1661, 3uLL), v1679);
                          v1681 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1660, 3uLL), v1679);
                          v1682 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1662, 3uLL), v1679);
                          v1683 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1670, 3uLL), v1679);
                          v1684 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1659, 3uLL), v1679);
                          v1685 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1673, 3uLL), v1679);
                          v1686 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1658, 3uLL), v1679);
                          v1687.i64[0] = v1678.u32[2];
                          v1687.i64[1] = v1678.u32[3];
                          v1688 = (int8x16_t)vshlq_u64(v1687, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1657, 3uLL), v1679));
                          v1689 = vmovl_u16(*(uint16x4_t *)v1675.i8);
                          v1687.i64[0] = v1678.u32[0];
                          v1687.i64[1] = v1678.u32[1];
                          v1690 = (int8x16_t)vshlq_u64(v1687, v1686);
                          v1687.i64[0] = v1689.u32[0];
                          v1687.i64[1] = v1689.u32[1];
                          v1691 = (int8x16_t)vshlq_u64(v1687, v1685);
                          v1687.i64[0] = v1677.u32[2];
                          v1687.i64[1] = v1677.u32[3];
                          v1692 = (int8x16_t)vshlq_u64(v1687, v1684);
                          v1693 = vmovl_high_u16(v1675);
                          v1687.i64[0] = v1689.u32[2];
                          v1687.i64[1] = v1689.u32[3];
                          v1694 = (int8x16_t)vshlq_u64(v1687, v1683);
                          v1687.i64[0] = v1693.u32[0];
                          v1687.i64[1] = v1693.u32[1];
                          v1695 = (int8x16_t)vshlq_u64(v1687, v1682);
                          v1687.i64[0] = v1677.u32[0];
                          v1687.i64[1] = v1677.u32[1];
                          v1696 = (int8x16_t)vshlq_u64(v1687, v1681);
                          v1687.i64[0] = v1693.u32[2];
                          v1687.i64[1] = v1693.u32[3];
                          v1667 = vorrq_s8((int8x16_t)vshlq_u64(v1687, v1680), v1667);
                          v1668 = vorrq_s8(v1696, v1668);
                          v1666 = vorrq_s8(v1695, v1666);
                          v1665 = vorrq_s8(v1694, v1665);
                          v1669 = vorrq_s8(v1692, v1669);
                          v1663 = vorrq_s8(v1691, v1663);
                          v1671 = vorrq_s8(v1690, v1671);
                          v1672 = vorrq_s8(v1688, v1672);
                          v1697 = vdupq_n_s64(0x10uLL);
                          v1662 = vaddq_s64(v1662, v1697);
                          v1670 = vaddq_s64(v1670, v1697);
                          v1673 = vaddq_s64(v1673, v1697);
                          v1661 = vaddq_s64(v1661, v1697);
                          v1660 = vaddq_s64(v1660, v1697);
                          v1659 = vaddq_s64(v1659, v1697);
                          v1658 = vaddq_s64(v1658, v1697);
                          v1657 = vaddq_s64(v1657, v1697);
                          v1664 -= 16;
                        }
                        while (v1664);
                        v1698 = vorrq_s8(vorrq_s8(vorrq_s8(v1663, v1668), vorrq_s8(v1666, v1671)), vorrq_s8(vorrq_s8(v1665, v1669), vorrq_s8(v1667, v1672)));
                        *(int8x8_t *)v1698.i8 = vorr_s8(*(int8x8_t *)v1698.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1698, v1698, 8uLL));
                        *v2192 = *(int8x8_t *)v1698.i8;
                        v1649 = v1698.i64[0];
                        if ((v1644 & 0xF) == 0)
                        {
LABEL_1509:
                          v1606 = (uint64_t *)v2192;
                          goto LABEL_1499;
                        }
                        if ((v1644 & 0xF) >= 8uLL)
                          goto LABEL_1506;
LABEL_1495:
                        v1651 = v1647 - v1650;
                        v1652 = 8 * v1650;
                        v1653 = (unsigned __int8 *)(v1645 + v1650 + v1642);
                        do
                        {
                          v1654 = *v1653++;
                          v1649 |= (unint64_t)v1654 << (v1652 & 0xF8);
                          *v2192 = (int8x8_t)v1649;
                          v1652 += 8;
                          --v1651;
                        }
                        while (v1651);
                        v1606 = (uint64_t *)v2192;
LABEL_1499:
                        *v2190 = v1642 + v1644;
                        *v14 = 8 * v1644;
                        v1655 = 8 * v1644 - v1641;
                        if (8 * v1644 >= v1641)
                        {
                          v1632 = v1649 >> v1641;
                          *v1606 = v1632;
                          *v14 = v1655;
                          v1656 = (v1649 << v1633) & 0xF | v1640;
                          v1633 = v1655;
                          v1638 += 3;
                          if ((v1656 & 8) == 0)
                            goto LABEL_1472;
                          continue;
                        }
                        llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v14, &v2199, (uint64_t *)&__p);
                        v581 = __p;
                        if (__p)
                          goto LABEL_1726;
                      }
                    }
                    break;
                  }
                }
                else if (v1617)
                {
                  v1618 = *v2192;
                  v1619 = 4 - v1617;
                  LODWORD(__p) = 4 - v1617;
                  v1621 = *(_QWORD *)(v8 + 40);
                  v1620 = *(_QWORD *)(v8 + 48);
                  v1622 = v1621 - v1620;
                  if (v1621 > v1620)
                    goto LABEL_1443;
LABEL_1460:
                  __dst.__r_.__value_.__r.__words[0] = v1621;
                  llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v2190, (uint64_t *)&__dst, (uint64_t *)&v2209);
                  v581 = v2209;
                  if (v2209)
                  {
                    v12 = v2188;
                    v13 = v2189;
                    v14 = v2191;
                    goto LABEL_1726;
                  }
                  v1606 = (uint64_t *)v2192;
                  v1633 = *v2191 - v1619;
                  if (*v2191 >= v1619)
                    goto LABEL_1471;
LABEL_1468:
                  v14 = v2191;
                  llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v2191, (int *)&__p, (uint64_t *)&v2205);
                  v581 = v2205;
                  v12 = v2188;
                  v13 = v2189;
                  if (v2205)
                    goto LABEL_1726;
                }
                else
                {
                  v1618.i8[0] = 0;
                  v1619 = 4;
                  LODWORD(__p) = 4;
                  v1621 = *(_QWORD *)(v8 + 40);
                  v1620 = *(_QWORD *)(v8 + 48);
                  v1622 = v1621 - v1620;
                  if (v1621 <= v1620)
                    goto LABEL_1460;
LABEL_1443:
                  v1623 = *(_QWORD *)v2189;
                  v1624 = (int *)(*(_QWORD *)v2189 + v1620);
                  if (v1621 >= v1620 + 8)
                  {
                    *v2192 = *(int8x8_t *)v1624;
                    v1622 = 8;
                    goto LABEL_1467;
                  }
                  *v2192 = 0;
                  if (!v1622)
                    goto LABEL_1467;
                  if (v1622 < 8uLL || (unint64_t)v2192 < v1623 + v1620 + v1622 && v1624 < v2191)
                  {
                    v1625 = 0;
                    v1626 = 0;
                    goto LABEL_1449;
                  }
                  if (v1622 >= 0x10uLL)
                  {
                    v1625 = v1622 - (unint64_t)(v1622 & 0xF);
                    v1796 = (int64x2_t)xmmword_181267BA0;
                    v1797 = (int64x2_t)xmmword_181267BB0;
                    v1798 = (int64x2_t)xmmword_181267BC0;
                    v1799 = (int64x2_t)xmmword_181267BD0;
                    v1800 = (int64x2_t)xmmword_1812332B0;
                    v1801 = (int64x2_t)xmmword_181267BE0;
                    v1802 = 0uLL;
                    v1803 = v1625;
                    v1804 = 0uLL;
                    v1805 = 0uLL;
                    v1806 = 0uLL;
                    v1807 = 0uLL;
                    v1808 = 0uLL;
                    v1809 = (int64x2_t)xmmword_181233290;
                    v1810 = 0uLL;
                    v1811 = 0uLL;
                    v1812 = (int64x2_t)xmmword_181233120;
                    do
                    {
                      v1813 = *(uint8x16_t *)v1624;
                      v1624 += 4;
                      v1814 = vmovl_u8(*(uint8x8_t *)v1813.i8);
                      v1815 = vmovl_high_u8(v1813);
                      v1816 = vmovl_u16(*(uint16x4_t *)v1815.i8);
                      v1817 = vmovl_high_u16(v1815);
                      v1818 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                      v1819 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1800, 3uLL), v1818);
                      v1820 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1799, 3uLL), v1818);
                      v1821 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1801, 3uLL), v1818);
                      v1822 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1809, 3uLL), v1818);
                      v1823 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1798, 3uLL), v1818);
                      v1824 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1812, 3uLL), v1818);
                      v1825 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1797, 3uLL), v1818);
                      v1826.i64[0] = v1817.u32[2];
                      v1826.i64[1] = v1817.u32[3];
                      v1827 = (int8x16_t)vshlq_u64(v1826, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1796, 3uLL), v1818));
                      v1828 = vmovl_u16(*(uint16x4_t *)v1814.i8);
                      v1826.i64[0] = v1817.u32[0];
                      v1826.i64[1] = v1817.u32[1];
                      v1829 = (int8x16_t)vshlq_u64(v1826, v1825);
                      v1826.i64[0] = v1828.u32[0];
                      v1826.i64[1] = v1828.u32[1];
                      v1830 = (int8x16_t)vshlq_u64(v1826, v1824);
                      v1826.i64[0] = v1816.u32[2];
                      v1826.i64[1] = v1816.u32[3];
                      v1831 = (int8x16_t)vshlq_u64(v1826, v1823);
                      v1832 = vmovl_high_u16(v1814);
                      v1826.i64[0] = v1828.u32[2];
                      v1826.i64[1] = v1828.u32[3];
                      v1833 = (int8x16_t)vshlq_u64(v1826, v1822);
                      v1826.i64[0] = v1832.u32[0];
                      v1826.i64[1] = v1832.u32[1];
                      v1834 = (int8x16_t)vshlq_u64(v1826, v1821);
                      v1826.i64[0] = v1816.u32[0];
                      v1826.i64[1] = v1816.u32[1];
                      v1835 = (int8x16_t)vshlq_u64(v1826, v1820);
                      v1826.i64[0] = v1832.u32[2];
                      v1826.i64[1] = v1832.u32[3];
                      v1806 = vorrq_s8((int8x16_t)vshlq_u64(v1826, v1819), v1806);
                      v1807 = vorrq_s8(v1835, v1807);
                      v1805 = vorrq_s8(v1834, v1805);
                      v1804 = vorrq_s8(v1833, v1804);
                      v1808 = vorrq_s8(v1831, v1808);
                      v1802 = vorrq_s8(v1830, v1802);
                      v1810 = vorrq_s8(v1829, v1810);
                      v1811 = vorrq_s8(v1827, v1811);
                      v1836 = vdupq_n_s64(0x10uLL);
                      v1801 = vaddq_s64(v1801, v1836);
                      v1809 = vaddq_s64(v1809, v1836);
                      v1812 = vaddq_s64(v1812, v1836);
                      v1800 = vaddq_s64(v1800, v1836);
                      v1799 = vaddq_s64(v1799, v1836);
                      v1798 = vaddq_s64(v1798, v1836);
                      v1797 = vaddq_s64(v1797, v1836);
                      v1796 = vaddq_s64(v1796, v1836);
                      v1803 -= 16;
                    }
                    while (v1803);
                    v1837 = vorrq_s8(vorrq_s8(vorrq_s8(v1802, v1807), vorrq_s8(v1805, v1810)), vorrq_s8(vorrq_s8(v1804, v1808), vorrq_s8(v1806, v1811)));
                    v1838 = vorr_s8(*(int8x8_t *)v1837.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1837, v1837, 8uLL));
                    *v2192 = v1838;
                    if ((v1622 & 0xF) == 0)
                      goto LABEL_1467;
                    v1626 = v1838;
                    if ((v1622 & 0xF) < 8uLL)
                      goto LABEL_1449;
                  }
                  else
                  {
                    v1626 = 0;
                    v1625 = 0;
                  }
                  v1839 = vdupq_n_s64(v1625);
                  v1840 = vaddq_s64(v1839, (int64x2_t)xmmword_1812332B0);
                  v1841 = (int8x16_t)(unint64_t)v1626;
                  v1842 = v1625 + v1620;
                  v1843 = v1625 + (v1622 & 7);
                  v1625 = v1622 - (unint64_t)(v1622 & 7);
                  v1844 = vaddq_s64(v1839, (int64x2_t)xmmword_181267BE0);
                  v1845 = vaddq_s64(v1839, (int64x2_t)xmmword_181233290);
                  v1846 = vaddq_s64(v1839, (int64x2_t)xmmword_181233120);
                  v1847 = 0uLL;
                  v1848 = (uint8x8_t *)(v1623 + v1842);
                  v1849 = v1843 - v1622;
                  v1850 = 0uLL;
                  v1851 = 0uLL;
                  do
                  {
                    v1852 = *v1848++;
                    v1853 = vmovl_u8(v1852);
                    v1854 = vmovl_high_u16(v1853);
                    v1855.i64[0] = v1854.u32[2];
                    v1855.i64[1] = v1854.u32[3];
                    v1856 = v1855;
                    v1855.i64[0] = v1854.u32[0];
                    v1855.i64[1] = v1854.u32[1];
                    v1857 = v1855;
                    v1858 = vmovl_u16(*(uint16x4_t *)v1853.i8);
                    v1855.i64[0] = v1858.u32[2];
                    v1855.i64[1] = v1858.u32[3];
                    v1859 = v1855;
                    v1855.i64[0] = v1858.u32[0];
                    v1855.i64[1] = v1858.u32[1];
                    v1860 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                    v1851 = vorrq_s8((int8x16_t)vshlq_u64(v1856, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1840, 3uLL), v1860)), v1851);
                    v1850 = vorrq_s8((int8x16_t)vshlq_u64(v1857, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1844, 3uLL), v1860)), v1850);
                    v1847 = vorrq_s8((int8x16_t)vshlq_u64(v1859, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1845, 3uLL), v1860)), v1847);
                    v1861 = vdupq_n_s64(8uLL);
                    v1841 = vorrq_s8((int8x16_t)vshlq_u64(v1855, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1846, 3uLL), v1860)), v1841);
                    v1844 = vaddq_s64(v1844, v1861);
                    v1845 = vaddq_s64(v1845, v1861);
                    v1846 = vaddq_s64(v1846, v1861);
                    v1840 = vaddq_s64(v1840, v1861);
                    v1849 += 8;
                  }
                  while (v1849);
                  v1862 = vorrq_s8(vorrq_s8(v1841, v1850), vorrq_s8(v1847, v1851));
                  v1863 = vorr_s8(*(int8x8_t *)v1862.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1862, v1862, 8uLL));
                  *v2192 = v1863;
                  if ((v1622 & 7) != 0)
                  {
                    v1626 = v1863;
LABEL_1449:
                    v1627 = v1622 - v1625;
                    v1628 = 8 * v1625;
                    v1629 = (unsigned __int8 *)(v1623 + v1625 + v1620);
                    do
                    {
                      v1630 = *v1629++;
                      *(_QWORD *)&v1626 |= (unint64_t)v1630 << (v1628 & 0xF8);
                      *v2192 = v1626;
                      v1628 += 8;
                      --v1627;
                    }
                    while (v1627);
                  }
LABEL_1467:
                  *v2190 = v1620 + v1622;
                  *v2191 = 8 * v1622;
                  v1633 = 8 * v1622 - v1619;
                  if (8 * v1622 < v1619)
                    goto LABEL_1468;
LABEL_1471:
                  v1635 = *v1606;
                  v1632 = (unint64_t)*v1606 >> v1619;
                  *v1606 = v1632;
                  *v2191 = v1633;
                  v1636 = v1635 << v1617;
                  v14 = v2191;
                  LOBYTE(v1636) = v1636 & 0xF | v1618.i8[0];
                  v12 = v2188;
                  v13 = v2189;
                  if ((v1636 & 8) != 0)
                    goto LABEL_1475;
LABEL_1472:
                  v65 = v1633 >= 0x20;
                  v1637 = v1633 - 32;
                  if (v65)
                  {
                    *v1606 = v1632 >> v1637;
                    v1723 = 32;
                  }
                  else
                  {
                    v1723 = 0;
                  }
                  *v14 = v1723;
                  llvm::SimpleBitstreamCursor::Read(v13, 0x20u, (uint64_t)&__dst);
                  if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
                    goto LABEL_1453;
                  v1725 = *(_QWORD *)(v8 + 40);
                  v1724 = *(_QWORD *)(v8 + 48);
                  v1726 = *(unsigned int *)(v8 + 64);
                  v1727 = 8 * v1724 - v1726 + 32 * LODWORD(__dst.__r_.__value_.__l.__data_);
                  v2209 = (void *)v1727;
                  if ((_DWORD)v1726 || v1725 > v1724)
                  {
                    if (v1725 >= v1727 >> 3)
                    {
                      *v2190 = (v1727 >> 3) & 0x1FFFFFFFFFFFFFF8;
                      *v14 = 0;
                      if ((v1727 & 0x3F) == 0
                        || (llvm::SimpleBitstreamCursor::Read(v13, v1727 & 0x3F, (uint64_t)&__dst),
                            (__dst.__r_.__value_.__s.__data_[8] & 1) == 0)
                        || (*(_QWORD *)v2221 = __dst.__r_.__value_.__r.__words[0]) == 0)
                      {
                        *(_QWORD *)v2221 = 0;
                      }
                    }
                    else
                    {
                      __dst.__r_.__value_.__r.__words[0] = 8 * v1724 - v1726;
                      llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v2209, (uint64_t *)&__dst, (uint64_t *)v2221);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v2242.__val_ = std::generic_category();
                    v2242.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
                    llvm::createStringError((llvm *)0x5C, v2242, v2221);
                  }
                  v581 = *(void **)v2221;
                  if (*(_QWORD *)v2221)
                    goto LABEL_1726;
                }
              }
              else
              {
LABEL_1437:
                if ((_DWORD)v1604 == 2)
                {
                  llvm::BitstreamCursor::ReadAbbrevRecord((char **)v13, (unint64_t *)&__dst);
LABEL_1453:
                  v581 = (void *)__dst.__r_.__value_.__r.__words[0];
                  if (__dst.__r_.__value_.__r.__words[0])
                    goto LABEL_1726;
                }
                else
                {
                  if (!(_DWORD)v1604)
                  {
                    if (*(_DWORD *)(v8 + 104))
                    {
                      v1943 = v1605 - 32;
                      if (v1605 < 0x20)
                        goto LABEL_1717;
LABEL_1711:
                      *v585 = v595 >> v1943;
                      v1944 = 32;
LABEL_1718:
                      *v14 = v1944;
                      llvm::BitstreamCursor::popBlockScope(v13);
                      *a1 = 0;
                      goto LABEL_1888;
                    }
LABEL_1719:
                    v1946 = "Malformed block";
LABEL_1720:
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1946;
                    LOWORD(v2225) = 259;
                    goto LABEL_1888;
                  }
                  llvm::BitstreamCursor::readRecord(v13, ((v1604 << 32) | 3) >> 32, (uint64_t)&__s, 0, (uint64_t)&v2209);
                  if ((v2210 & 1) != 0)
                  {
                    v1609 = 0;
                    v1610 = v2209;
                    v2209 = 0;
                    *a1 = (uint64_t)v1610;
                    if ((v2210 & 1) != 0)
                      goto LABEL_1464;
                  }
                  else if ((_DWORD)v2209 == 1)
                  {
                    v1607 = *(std::string **)(v8 + 1784);
                    if ((unint64_t)v1607 >= *(_QWORD *)(v8 + 1792))
                    {
                      v1608 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<>(v2175);
                    }
                    else
                    {
                      v1607->__r_.__value_.__r.__words[0] = 0;
                      v1607->__r_.__value_.__l.__size_ = 0;
                      v1608 = v1607 + 1;
                      v1607->__r_.__value_.__r.__words[2] = 0;
                    }
                    *(_QWORD *)(v8 + 1784) = v1608;
                    std::string::append[abi:nn180100]<unsigned long long const*,0>(v1608 - 1, __s.__r_.__value_.__r.__words[0], (uint64_t *)(__s.__r_.__value_.__r.__words[0] + 8 * LODWORD(__s.__r_.__value_.__r.__words[1])));
                    LODWORD(__s.__r_.__value_.__r.__words[1]) = 0;
                    v1609 = 1;
                    if ((v2210 & 1) != 0)
                    {
LABEL_1464:
                      v1634 = v2209;
                      v2209 = 0;
                      if (v1634)
                        (*(void (**)(void *))(*(_QWORD *)v1634 + 8))(v1634);
                    }
                  }
                  else
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid operand bundle record";
                    LOWORD(v2225) = 259;
                    v1609 = 0;
                    if ((v2210 & 1) != 0)
                      goto LABEL_1464;
                  }
                  if ((v1609 & 1) == 0)
                    goto LABEL_1888;
                }
              }
            }
          case 0x16:
            llvm::MetadataLoader::parseMetadataKinds(v2184, a1);
            goto LABEL_1890;
          case 0x1A:
            llvm::BitstreamCursor::EnterSubBlock(v13, 0, 26, a1);
            if (*a1)
              goto LABEL_19;
            if (*(_QWORD *)(v8 + 1808))
            {
              v40 = "Invalid multiple synchronization scope names blocks";
LABEL_74:
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
              v2232 = 259;
              goto LABEL_1890;
            }
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__r.__words[2];
            __s.__r_.__value_.__l.__size_ = 0x4000000000;
LABEL_1220:
            while (2)
            {
              v1296 = *v14;
              if (*v14)
              {
                v1297 = *(_DWORD *)(v8 + 68);
                v1298 = *(int8x8_t *)(v8 + 56);
                v1299 = v2192;
                if (v1296 < v1297)
                {
                  v587 = *(_QWORD *)(v8 + 40);
                  v1300 = *(_QWORD *)(v8 + 48);
                  v1297 -= v1296;
                  LODWORD(v2196[0]) = v1297;
                  v1301 = v587 - v1300;
                  if (v587 <= v1300)
                    goto LABEL_1579;
                  goto LABEL_1227;
                }
              }
              else
              {
                v587 = *(_QWORD *)(v8 + 40);
                v1300 = *(_QWORD *)(v8 + 48);
                v1299 = v2192;
                if (v587 <= v1300)
                  goto LABEL_1719;
                v1297 = *(_DWORD *)(v8 + 68);
                if (v1297)
                {
                  v1298 = 0;
                  LODWORD(v2196[0]) = *(_DWORD *)(v8 + 68);
                  v1301 = v587 - v1300;
                  if (v587 <= v1300)
                    goto LABEL_1579;
LABEL_1227:
                  v1302 = *(_QWORD *)v13;
                  v1303 = (int *)(*(_QWORD *)v13 + v1300);
                  if (v587 >= v1300 + 8)
                  {
                    v1305 = *(_QWORD *)v1303;
                    *v1299 = v1305;
                    v1301 = 8;
                    goto LABEL_1253;
                  }
                  *v1299 = 0;
                  if (!v1301)
                  {
                    v1305 = 0;
                    goto LABEL_1253;
                  }
                  if (v1301 < 8uLL
                    || ((unint64_t)v1299 < v1302 + v1300 + v1301 ? (v1304 = v1303 >= v14) : (v1304 = 1), !v1304))
                  {
                    v1306 = 0;
                    v1305 = 0;
                    goto LABEL_1249;
                  }
                  if (v1301 >= 0x10uLL)
                  {
                    v1306 = v1301 - (unint64_t)(v1301 & 0xF);
                    v1441 = (int64x2_t)xmmword_181267BA0;
                    v1442 = (int64x2_t)xmmword_181267BB0;
                    v1443 = (int64x2_t)xmmword_181267BC0;
                    v1444 = 0uLL;
                    v1445 = 0uLL;
                    v1446 = (int64x2_t)xmmword_181267BD0;
                    v1447 = v1306;
                    v1448 = (int64x2_t)xmmword_181233120;
                    v1449 = (int64x2_t)xmmword_181233290;
                    v1450 = (int64x2_t)xmmword_181267BE0;
                    v1451 = (int64x2_t)xmmword_1812332B0;
                    v1452 = 0uLL;
                    v1453 = 0uLL;
                    v1454 = 0uLL;
                    v1455 = 0uLL;
                    v1456 = 0uLL;
                    v1457 = 0uLL;
                    do
                    {
                      v1458 = *(uint8x16_t *)v1303;
                      v1303 += 4;
                      v1459 = vmovl_u8(*(uint8x8_t *)v1458.i8);
                      v1460 = vmovl_high_u8(v1458);
                      v1461 = vmovl_u16(*(uint16x4_t *)v1460.i8);
                      v1462 = vmovl_high_u16(v1460);
                      v1463 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                      v1464 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1451, 3uLL), v1463);
                      v1465 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1446, 3uLL), v1463);
                      v1466 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1450, 3uLL), v1463);
                      v1467 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1449, 3uLL), v1463);
                      v1468 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1443, 3uLL), v1463);
                      v1469 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1448, 3uLL), v1463);
                      v1470 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1442, 3uLL), v1463);
                      v1471.i64[0] = v1462.u32[2];
                      v1471.i64[1] = v1462.u32[3];
                      v1472 = (int8x16_t)vshlq_u64(v1471, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1441, 3uLL), v1463));
                      v1473 = vmovl_u16(*(uint16x4_t *)v1459.i8);
                      v1471.i64[0] = v1462.u32[0];
                      v1471.i64[1] = v1462.u32[1];
                      v1474 = (int8x16_t)vshlq_u64(v1471, v1470);
                      v1471.i64[0] = v1473.u32[0];
                      v1471.i64[1] = v1473.u32[1];
                      v1475 = (int8x16_t)vshlq_u64(v1471, v1469);
                      v1471.i64[0] = v1461.u32[2];
                      v1471.i64[1] = v1461.u32[3];
                      v1476 = (int8x16_t)vshlq_u64(v1471, v1468);
                      v1477 = vmovl_high_u16(v1459);
                      v1471.i64[0] = v1473.u32[2];
                      v1471.i64[1] = v1473.u32[3];
                      v1478 = (int8x16_t)vshlq_u64(v1471, v1467);
                      v1471.i64[0] = v1477.u32[0];
                      v1471.i64[1] = v1477.u32[1];
                      v1479 = (int8x16_t)vshlq_u64(v1471, v1466);
                      v1471.i64[0] = v1461.u32[0];
                      v1471.i64[1] = v1461.u32[1];
                      v1480 = (int8x16_t)vshlq_u64(v1471, v1465);
                      v1471.i64[0] = v1477.u32[2];
                      v1471.i64[1] = v1477.u32[3];
                      v1453 = vorrq_s8((int8x16_t)vshlq_u64(v1471, v1464), v1453);
                      v1454 = vorrq_s8(v1480, v1454);
                      v1452 = vorrq_s8(v1479, v1452);
                      v1445 = vorrq_s8(v1478, v1445);
                      v1455 = vorrq_s8(v1476, v1455);
                      v1444 = vorrq_s8(v1475, v1444);
                      v1456 = vorrq_s8(v1474, v1456);
                      v1457 = vorrq_s8(v1472, v1457);
                      v1481 = vdupq_n_s64(0x10uLL);
                      v1450 = vaddq_s64(v1450, v1481);
                      v1449 = vaddq_s64(v1449, v1481);
                      v1448 = vaddq_s64(v1448, v1481);
                      v1451 = vaddq_s64(v1451, v1481);
                      v1446 = vaddq_s64(v1446, v1481);
                      v1443 = vaddq_s64(v1443, v1481);
                      v1442 = vaddq_s64(v1442, v1481);
                      v1441 = vaddq_s64(v1441, v1481);
                      v1447 -= 16;
                    }
                    while (v1447);
                    v1482 = vorrq_s8(vorrq_s8(vorrq_s8(v1444, v1454), vorrq_s8(v1452, v1456)), vorrq_s8(vorrq_s8(v1445, v1455), vorrq_s8(v1453, v1457)));
                    *(int8x8_t *)v1482.i8 = vorr_s8(*(int8x8_t *)v1482.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1482, v1482, 8uLL));
                    v1299 = v2192;
                    *v2192 = *(int8x8_t *)v1482.i8;
                    v1305 = v1482.i64[0];
                    if ((v1301 & 0xF) == 0)
                      goto LABEL_1253;
                    if ((v1301 & 0xF) < 8uLL)
                    {
LABEL_1249:
                      v1319 = v1301 - v1306;
                      v1320 = 8 * v1306;
                      v1321 = (unsigned __int8 *)(v1302 + v1306 + v1300);
                      do
                      {
                        v1322 = *v1321++;
                        v1299 = v2192;
                        v1305 |= (unint64_t)v1322 << (v1320 & 0xF8);
                        *v2192 = (int8x8_t)v1305;
                        v1320 += 8;
                        --v1319;
                      }
                      while (v1319);
                      goto LABEL_1253;
                    }
                  }
                  else
                  {
                    v1305 = 0;
                    v1306 = 0;
                  }
                  v1483 = vdupq_n_s64(v1306);
                  v1484 = vaddq_s64(v1483, (int64x2_t)xmmword_1812332B0);
                  v1485 = (int8x16_t)v1305;
                  v1486 = v1300 + v1306;
                  v1487 = v1306 + (v1301 & 7);
                  v1306 = v1301 - (unint64_t)(v1301 & 7);
                  v1488 = vaddq_s64(v1483, (int64x2_t)xmmword_181267BE0);
                  v1489 = vaddq_s64(v1483, (int64x2_t)xmmword_181233290);
                  v1490 = vaddq_s64(v1483, (int64x2_t)xmmword_181233120);
                  v1491 = 0uLL;
                  v1492 = (uint8x8_t *)(v1302 + v1486);
                  v1493 = v1487 - v1301;
                  v1494 = 0uLL;
                  v1495 = 0uLL;
                  do
                  {
                    v1496 = *v1492++;
                    v1497 = vmovl_u8(v1496);
                    v1498 = vmovl_high_u16(v1497);
                    v1499.i64[0] = v1498.u32[2];
                    v1499.i64[1] = v1498.u32[3];
                    v1500 = v1499;
                    v1499.i64[0] = v1498.u32[0];
                    v1499.i64[1] = v1498.u32[1];
                    v1501 = v1499;
                    v1502 = vmovl_u16(*(uint16x4_t *)v1497.i8);
                    v1499.i64[0] = v1502.u32[2];
                    v1499.i64[1] = v1502.u32[3];
                    v1503 = v1499;
                    v1499.i64[0] = v1502.u32[0];
                    v1499.i64[1] = v1502.u32[1];
                    v1504 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                    v1495 = vorrq_s8((int8x16_t)vshlq_u64(v1500, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1484, 3uLL), v1504)), v1495);
                    v1494 = vorrq_s8((int8x16_t)vshlq_u64(v1501, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1488, 3uLL), v1504)), v1494);
                    v1491 = vorrq_s8((int8x16_t)vshlq_u64(v1503, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1489, 3uLL), v1504)), v1491);
                    v1505 = vdupq_n_s64(8uLL);
                    v1485 = vorrq_s8((int8x16_t)vshlq_u64(v1499, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1490, 3uLL), v1504)), v1485);
                    v1488 = vaddq_s64(v1488, v1505);
                    v1489 = vaddq_s64(v1489, v1505);
                    v1490 = vaddq_s64(v1490, v1505);
                    v1484 = vaddq_s64(v1484, v1505);
                    v1493 += 8;
                  }
                  while (v1493);
                  v1506 = vorrq_s8(vorrq_s8(v1485, v1494), vorrq_s8(v1491, v1495));
                  *(int8x8_t *)v1506.i8 = vorr_s8(*(int8x8_t *)v1506.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1506, v1506, 8uLL));
                  v1299 = v2192;
                  *v2192 = *(int8x8_t *)v1506.i8;
                  v1305 = v1506.i64[0];
                  if ((v1301 & 7) != 0)
                    goto LABEL_1249;
LABEL_1253:
                  *v2190 = v1300 + v1301;
                  *v14 = 8 * v1301;
                  v1309 = 8 * v1301 - v1297;
                  if (8 * v1301 < v1297)
                    goto LABEL_1582;
                  v1308 = v1305 >> v1297;
                  *v1299 = v1305 >> v1297;
                  *v14 = v1309;
                  v1323 = (v1305 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v1297)) << v1296;
                  v1307 = v1323 | *(_QWORD *)&v1298;
                  if ((v1323 | v1298.i32[0]) != 1)
                  {
LABEL_1255:
                    if ((_DWORD)v1307 == 2)
                    {
                      llvm::BitstreamCursor::ReadAbbrevRecord((char **)v13, (unint64_t *)&__dst);
                      v581 = (void *)__dst.__r_.__value_.__r.__words[0];
                      if (__dst.__r_.__value_.__r.__words[0])
                        goto LABEL_1726;
                      continue;
                    }
                    if (!(_DWORD)v1307)
                    {
                      if (!*(_DWORD *)(v8 + 104))
                        goto LABEL_1719;
                      if (v1309 < 0x20)
                      {
                        v1945 = 0;
                      }
                      else
                      {
                        *v1299 = v1308 >> (v1309 - 32);
                        v1945 = 32;
                      }
                      *(_DWORD *)(v8 + 64) = v1945;
                      llvm::BitstreamCursor::popBlockScope(v13);
                      if (*(_QWORD *)(v8 + 1808))
                      {
                        *a1 = 0;
                        goto LABEL_1888;
                      }
                      v1946 = "Invalid empty synchronization scope names block";
                      goto LABEL_1720;
                    }
                    llvm::BitstreamCursor::readRecord(v13, ((v1307 << 32) | 3) >> 32, (uint64_t)&__s, 0, (uint64_t)&v2209);
                    if ((v2210 & 1) != 0)
                    {
                      v1317 = 0;
                      v1318 = v2209;
                      v2209 = 0;
                      *a1 = (uint64_t)v1318;
                      if ((v2210 & 1) == 0)
                        goto LABEL_1388;
                      goto LABEL_1386;
                    }
                    if ((_DWORD)v2209 != 1)
                    {
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid sync scope record";
                      LOWORD(v2225) = 259;
                      v1317 = 0;
                      if ((v2210 & 1) == 0)
                        goto LABEL_1388;
                      goto LABEL_1386;
                    }
                    v1311 = (int8x16_t *)&v2224;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2224;
                    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_181236BC0;
                    v1312 = __s.__r_.__value_.__r.__words[0];
                    v1313 = LODWORD(__s.__r_.__value_.__r.__words[1]);
                    if (LODWORD(__s.__r_.__value_.__r.__words[1]) < 0x11)
                    {
                      v1314 = 0;
                      v1342 = 0;
                      v1315 = &v2224;
                      v1316 = (int8x16_t *)&xmmword_18125D000;
                      if (!LODWORD(__s.__r_.__value_.__r.__words[1]))
                        goto LABEL_1381;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, &v2224, LODWORD(__s.__r_.__value_.__r.__words[1]), 1);
                      v1314 = __dst.__r_.__value_.__l.__size_;
                      v1315 = (std::string **)__dst.__r_.__value_.__r.__words[0];
                      v1316 = (int8x16_t *)&xmmword_18125D000;
                    }
                    v1343 = (char *)v1315 + v1314;
                    v1344 = (v1313 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                    if (v1344 < 7)
                    {
                      v1345 = (uint64_t *)v1312;
                      goto LABEL_1379;
                    }
                    if ((unint64_t)v1343 < v1312 + 8 * (v1313 - 1) + 8)
                    {
                      v1345 = (uint64_t *)v1312;
                      if (v1312 < (unint64_t)v1315 + v1314 + v1344 + 1)
                        goto LABEL_1379;
                    }
                    v1346 = v1344 + 1;
                    if (v1344 >= 0x1F)
                    {
                      v1347 = v1346 & 0x3FFFFFFFFFFFFFE0;
                      v1509 = (int8x16x4_t *)(v1312 + 128);
                      v1510 = (_OWORD *)((char *)v1315 + v1314 + 16);
                      v1511 = v1346 & 0x3FFFFFFFFFFFFFE0;
                      do
                      {
                        *(_QWORD *)&v1512 = vqtbl4q_s8(v1509[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
                        *(_QWORD *)&v1513 = vqtbl4q_s8(*v1509, (int8x16_t)xmmword_18125CFF0).u64[0];
                        *((_QWORD *)&v1512 + 1) = vqtbl4q_s8(v1509[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
                        *((_QWORD *)&v1513 + 1) = vqtbl4q_s8(v1509[1], (int8x16_t)xmmword_18125CFF0).u64[0];
                        *(v1510 - 1) = v1512;
                        *v1510 = v1513;
                        v1509 += 4;
                        v1510 += 2;
                        v1511 -= 32;
                      }
                      while (v1511);
                      if (v1346 == v1347)
                        goto LABEL_1380;
                      if ((v1346 & 0x18) == 0)
                      {
                        v1345 = (uint64_t *)(v1312 + 8 * v1347);
                        v1343 += v1347;
                        do
                        {
LABEL_1379:
                          v1585 = *v1345++;
                          *v1343++ = v1585;
                        }
                        while (v1345 != (uint64_t *)(v1312 + 8 * v1313));
LABEL_1380:
                        v1342 = __dst.__r_.__value_.__l.__size_;
                        v1311 = (int8x16_t *)__dst.__r_.__value_.__r.__words[0];
LABEL_1381:
                        __dst.__r_.__value_.__l.__size_ = v1342 + v1313;
                        v1586 = llvm::LLVMContext::getOrInsertSyncScopeID(*(uint64_t **)(v8 + 424), v1311, (const unsigned __int8 *)(v1342 + v1313));
                        v1587 = *(_QWORD *)(v8 + 1808);
                        if ((unint64_t)(v1587 + 1) > *(_QWORD *)(v8 + 1816))
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod(v2167, v2166, v1587 + 1, 1);
                          v1587 = *(_QWORD *)(v8 + 1808);
                        }
                        *(_BYTE *)(*(_QWORD *)(v8 + 1800) + v1587) = v1586;
                        ++*(_QWORD *)(v8 + 1808);
                        LODWORD(__s.__r_.__value_.__r.__words[1]) = 0;
                        v14 = v2191;
                        if ((std::string **)__dst.__r_.__value_.__l.__data_ != &v2224)
                          free(__dst.__r_.__value_.__l.__data_);
                        v1317 = 1;
                        if ((v2210 & 1) == 0)
                        {
LABEL_1388:
                          if ((v1317 & 1) == 0)
                            goto LABEL_1888;
                          continue;
                        }
LABEL_1386:
                        v1588 = v2209;
                        v2209 = 0;
                        if (v1588)
                          (*(void (**)(void *))(*(_QWORD *)v1588 + 8))(v1588);
                        goto LABEL_1388;
                      }
                    }
                    else
                    {
                      v1347 = 0;
                    }
                    v1343 += v1346 & 0x3FFFFFFFFFFFFFF8;
                    v1345 = (uint64_t *)(v1312 + 8 * (v1346 & 0x3FFFFFFFFFFFFFF8));
                    v1514 = (std::string **)((char *)v1315 + v1314 + v1347);
                    v1515 = v1347 - (v1346 & 0x3FFFFFFFFFFFFFF8);
                    v1516 = (int8x16x4_t *)(v1312 + 8 * v1347);
                    do
                    {
                      *v1514++ = vqtbl4q_s8(*v1516++, *v1316).u64[0];
                      v1515 += 8;
                    }
                    while (v1515);
                    if (v1346 == (v1346 & 0x3FFFFFFFFFFFFFF8))
                      goto LABEL_1380;
                    goto LABEL_1379;
                  }
LABEL_1240:
                  llvm::SimpleBitstreamCursor::ReadVBR(v13, 8u, (uint64_t)&__dst);
                  if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
                    goto LABEL_1619;
                  v1310 = (uint64_t *)v2192;
                  v1324 = v14;
                  v1325 = *v14;
                  if (v1325 >= 4)
                  {
                    v1339 = *(_QWORD *)v2192 & 0xFLL;
                    v1340 = *(unint64_t *)v2192 >> 4;
                    *v2192 = (int8x8_t)v1340;
                    v1341 = v1325 - 4;
                    *v1324 = v1325 - 4;
                    v14 = v1324;
                    if ((v1339 & 8) == 0)
                      goto LABEL_1290;
LABEL_1293:
                    v1351 = 0;
                    while (1)
                    {
                      while (1)
                      {
                        if (v1351 >= 0x1D)
                        {
                          *(_QWORD *)&v2241.__val_ = std::generic_category();
                          v2241.__cat_ = (const std::error_category *)"Unterminated VBR";
                          llvm::createStringError((llvm *)0x5C, v2241, v2196);
                          v581 = (void *)v2196[0];
                          if (v2196[0])
                            goto LABEL_1726;
                          goto LABEL_1220;
                        }
                        if (v1341 < 4)
                          break;
                        v1352 = v1340 & 0xF;
                        v1340 >>= 4;
                        *v1310 = v1340;
                        *v14 = v1341 - 4;
                        v1341 -= 4;
                        v1351 += 3;
                        if ((v1352 & 8) == 0)
                          goto LABEL_1290;
                      }
                      if (v1341)
                        v1353 = v1340;
                      else
                        v1353 = 0;
                      v1354 = 4 - v1341;
                      v2221[0] = 4 - v1341;
                      v1356 = *(_QWORD *)(v8 + 40);
                      v1355 = *(_QWORD *)(v8 + 48);
                      v1357 = v1356 - v1355;
                      if (v1356 <= v1355)
                      {
                        v1507 = std::generic_category();
                        v2206 = 0uLL;
                        v2205 = 0;
                        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
                        v2226 = 0;
                        v2227 = 0;
                        v2228 = 1;
                        v2224 = 0;
                        v2225 = 0;
                        __dst.__r_.__value_.__r.__words[2] = 0;
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E0E22B10;
                        p_p = &v2205;
                        llvm::raw_ostream::SetBufferAndMode((uint64_t)&__dst, 0, 0, 0);
                        *(_QWORD *)&v2210 = "Unexpected end of file reading %u of %u bytes";
                        v2209 = &unk_1E0E203C0;
                        *((_QWORD *)&v2210 + 1) = *v2190;
                        v2211 = v1356;
                        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__dst, (uint64_t)&v2209);
                        v1508 = p_p;
                        v581 = operator new(0x38uLL);
                        LOWORD(v2212) = 260;
                        v2209 = v1508;
                        llvm::StringError::StringError((uint64_t)v581, (llvm::Twine *)&v2209, 5, (uint64_t)v1507);
                        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__dst);
                        if (SHIBYTE(v2206) < 0)
                          operator delete(v2205);
                        a1 = (uint64_t *)v2187;
                        v14 = v2191;
                        if (v581)
                          goto LABEL_1726;
                        goto LABEL_1220;
                      }
                      v1358 = *(_QWORD *)v13;
                      v1359 = (int *)(*(_QWORD *)v13 + v1355);
                      if (v1356 >= v1355 + 8)
                      {
                        v1362 = *(_QWORD *)v1359;
                        *v1310 = v1362;
                        v1357 = 8;
                      }
                      else
                      {
                        *v1310 = 0;
                        if (v1357)
                        {
                          v1360 = (v1356 - v1355);
                          if (v1360 < 8
                            || ((unint64_t)v1310 < v1358 + v1355 + v1360 ? (v1361 = v1359 >= v14) : (v1361 = 1),
                                !v1361))
                          {
                            v1363 = 0;
                            v1362 = 0;
LABEL_1313:
                            v1364 = v1360 - v1363;
                            v1365 = 8 * v1363;
                            v1366 = (unsigned __int8 *)(v1358 + v1363 + v1355);
                            do
                            {
                              v1367 = *v1366++;
                              v1362 |= (unint64_t)v1367 << (v1365 & 0xF8);
                              *v2192 = (int8x8_t)v1362;
                              v1365 += 8;
                              --v1364;
                            }
                            while (v1364);
                            v1310 = (uint64_t *)v2192;
                            goto LABEL_1317;
                          }
                          if (v1360 >= 0x10)
                          {
                            v1363 = v1360 - (v1357 & 0xF);
                            v1370 = (int64x2_t)xmmword_181267BA0;
                            v1371 = (int64x2_t)xmmword_181267BB0;
                            v1372 = (int64x2_t)xmmword_181267BC0;
                            v1373 = (int64x2_t)xmmword_181267BD0;
                            v1374 = (int64x2_t)xmmword_1812332B0;
                            v1375 = (int64x2_t)xmmword_181267BE0;
                            v1376 = 0uLL;
                            v1377 = v1363;
                            v1378 = 0uLL;
                            v1379 = 0uLL;
                            v1380 = 0uLL;
                            v1381 = 0uLL;
                            v1382 = 0uLL;
                            v1383 = (int64x2_t)xmmword_181233290;
                            v1384 = 0uLL;
                            v1385 = 0uLL;
                            v1386 = (int64x2_t)xmmword_181233120;
                            do
                            {
                              v1387 = *(uint8x16_t *)v1359;
                              v1359 += 4;
                              v1388 = vmovl_u8(*(uint8x8_t *)v1387.i8);
                              v1389 = vmovl_high_u8(v1387);
                              v1390 = vmovl_u16(*(uint16x4_t *)v1389.i8);
                              v1391 = vmovl_high_u16(v1389);
                              v1392 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                              v1393 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1374, 3uLL), v1392);
                              v1394 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1373, 3uLL), v1392);
                              v1395 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1375, 3uLL), v1392);
                              v1396 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1383, 3uLL), v1392);
                              v1397 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1372, 3uLL), v1392);
                              v1398 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1386, 3uLL), v1392);
                              v1399 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1371, 3uLL), v1392);
                              v1400.i64[0] = v1391.u32[2];
                              v1400.i64[1] = v1391.u32[3];
                              v1401 = (int8x16_t)vshlq_u64(v1400, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1370, 3uLL), v1392));
                              v1402 = vmovl_u16(*(uint16x4_t *)v1388.i8);
                              v1400.i64[0] = v1391.u32[0];
                              v1400.i64[1] = v1391.u32[1];
                              v1403 = (int8x16_t)vshlq_u64(v1400, v1399);
                              v1400.i64[0] = v1402.u32[0];
                              v1400.i64[1] = v1402.u32[1];
                              v1404 = (int8x16_t)vshlq_u64(v1400, v1398);
                              v1400.i64[0] = v1390.u32[2];
                              v1400.i64[1] = v1390.u32[3];
                              v1405 = (int8x16_t)vshlq_u64(v1400, v1397);
                              v1406 = vmovl_high_u16(v1388);
                              v1400.i64[0] = v1402.u32[2];
                              v1400.i64[1] = v1402.u32[3];
                              v1407 = (int8x16_t)vshlq_u64(v1400, v1396);
                              v1400.i64[0] = v1406.u32[0];
                              v1400.i64[1] = v1406.u32[1];
                              v1408 = (int8x16_t)vshlq_u64(v1400, v1395);
                              v1400.i64[0] = v1390.u32[0];
                              v1400.i64[1] = v1390.u32[1];
                              v1409 = (int8x16_t)vshlq_u64(v1400, v1394);
                              v1400.i64[0] = v1406.u32[2];
                              v1400.i64[1] = v1406.u32[3];
                              v1380 = vorrq_s8((int8x16_t)vshlq_u64(v1400, v1393), v1380);
                              v1381 = vorrq_s8(v1409, v1381);
                              v1379 = vorrq_s8(v1408, v1379);
                              v1378 = vorrq_s8(v1407, v1378);
                              v1382 = vorrq_s8(v1405, v1382);
                              v1376 = vorrq_s8(v1404, v1376);
                              v1384 = vorrq_s8(v1403, v1384);
                              v1385 = vorrq_s8(v1401, v1385);
                              v1410 = vdupq_n_s64(0x10uLL);
                              v1375 = vaddq_s64(v1375, v1410);
                              v1383 = vaddq_s64(v1383, v1410);
                              v1386 = vaddq_s64(v1386, v1410);
                              v1374 = vaddq_s64(v1374, v1410);
                              v1373 = vaddq_s64(v1373, v1410);
                              v1372 = vaddq_s64(v1372, v1410);
                              v1371 = vaddq_s64(v1371, v1410);
                              v1370 = vaddq_s64(v1370, v1410);
                              v1377 -= 16;
                            }
                            while (v1377);
                            v1411 = vorrq_s8(vorrq_s8(vorrq_s8(v1376, v1381), vorrq_s8(v1379, v1384)), vorrq_s8(vorrq_s8(v1378, v1382), vorrq_s8(v1380, v1385)));
                            *(int8x8_t *)v1411.i8 = vorr_s8(*(int8x8_t *)v1411.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1411, v1411, 8uLL));
                            *v2192 = *(int8x8_t *)v1411.i8;
                            v1362 = v1411.i64[0];
                            if ((v1357 & 0xF) != 0)
                            {
                              if ((v1357 & 0xF) < 8uLL)
                                goto LABEL_1313;
                              goto LABEL_1324;
                            }
                          }
                          else
                          {
                            v1362 = 0;
                            v1363 = 0;
LABEL_1324:
                            v1412 = vdupq_n_s64(v1363);
                            v1413 = vaddq_s64(v1412, (int64x2_t)xmmword_1812332B0);
                            v1414 = (int8x16_t)v1362;
                            v1415 = v1363 + v1355;
                            v1416 = v1363 + (v1357 & 7);
                            v1363 = v1360 - (v1357 & 7);
                            v1417 = vaddq_s64(v1412, (int64x2_t)xmmword_181267BE0);
                            v1418 = vaddq_s64(v1412, (int64x2_t)xmmword_181233290);
                            v1419 = vaddq_s64(v1412, (int64x2_t)xmmword_181233120);
                            v1420 = 0uLL;
                            v1421 = (uint8x8_t *)(v1358 + v1415);
                            v1422 = v1416 - v1360;
                            v1423 = 0uLL;
                            v1424 = 0uLL;
                            do
                            {
                              v1425 = *v1421++;
                              v1426 = vmovl_u8(v1425);
                              v1427 = vmovl_high_u16(v1426);
                              v1428.i64[0] = v1427.u32[2];
                              v1428.i64[1] = v1427.u32[3];
                              v1429 = v1428;
                              v1428.i64[0] = v1427.u32[0];
                              v1428.i64[1] = v1427.u32[1];
                              v1430 = v1428;
                              v1431 = vmovl_u16(*(uint16x4_t *)v1426.i8);
                              v1428.i64[0] = v1431.u32[2];
                              v1428.i64[1] = v1431.u32[3];
                              v1432 = v1428;
                              v1428.i64[0] = v1431.u32[0];
                              v1428.i64[1] = v1431.u32[1];
                              v1433 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                              v1424 = vorrq_s8((int8x16_t)vshlq_u64(v1429, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1413, 3uLL), v1433)), v1424);
                              v1423 = vorrq_s8((int8x16_t)vshlq_u64(v1430, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1417, 3uLL), v1433)), v1423);
                              v1420 = vorrq_s8((int8x16_t)vshlq_u64(v1432, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1418, 3uLL), v1433)), v1420);
                              v1434 = vdupq_n_s64(8uLL);
                              v1414 = vorrq_s8((int8x16_t)vshlq_u64(v1428, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1419, 3uLL), v1433)), v1414);
                              v1417 = vaddq_s64(v1417, v1434);
                              v1418 = vaddq_s64(v1418, v1434);
                              v1419 = vaddq_s64(v1419, v1434);
                              v1413 = vaddq_s64(v1413, v1434);
                              v1422 += 8;
                            }
                            while (v1422);
                            v1435 = vorrq_s8(vorrq_s8(v1414, v1423), vorrq_s8(v1420, v1424));
                            *(int8x8_t *)v1435.i8 = vorr_s8(*(int8x8_t *)v1435.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1435, v1435, 8uLL));
                            *v2192 = *(int8x8_t *)v1435.i8;
                            v1362 = v1435.i64[0];
                            if ((v1357 & 7) != 0)
                              goto LABEL_1313;
                          }
                          v1310 = (uint64_t *)v2192;
                          goto LABEL_1317;
                        }
                        v1362 = 0;
                      }
LABEL_1317:
                      *v2190 = v1355 + v1357;
                      *v14 = 8 * v1357;
                      v1368 = 8 * v1357 - v1354;
                      if (8 * v1357 < v1354)
                      {
                        llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v14, (int *)v2221, (uint64_t *)&__p);
                        v581 = __p;
                        if (__p)
                          goto LABEL_1726;
                        goto LABEL_1220;
                      }
                      v1340 = v1362 >> v1354;
                      *v1310 = v1340;
                      *v14 = v1368;
                      v1369 = (v1362 << v1341) & 0xF | v1353;
                      v1341 = v1368;
                      v1351 += 3;
                      if ((v1369 & 8) == 0)
                        goto LABEL_1290;
                    }
                  }
                  if (v1325)
                  {
                    v1326 = *v2192;
                    v1327 = 4 - v1325;
                    LODWORD(__p) = 4 - v1325;
                    v1329 = *(_QWORD *)(v8 + 40);
                    v1328 = *(_QWORD *)(v8 + 48);
                    v1330 = v1329 - v1328;
                    if (v1329 > v1328)
                      goto LABEL_1261;
                  }
                  else
                  {
                    v1326.i8[0] = 0;
                    v1327 = 4;
                    LODWORD(__p) = 4;
                    v1329 = *(_QWORD *)(v8 + 40);
                    v1328 = *(_QWORD *)(v8 + 48);
                    v1330 = v1329 - v1328;
                    if (v1329 > v1328)
                    {
LABEL_1261:
                      v1331 = *(_QWORD *)v2189;
                      v1332 = (int *)(*(_QWORD *)v2189 + v1328);
                      if (v1329 >= v1328 + 8)
                      {
                        *v2192 = *(int8x8_t *)v1332;
                        v1330 = 8;
                        goto LABEL_1281;
                      }
                      *v2192 = 0;
                      if (!v1330)
                        goto LABEL_1281;
                      if (v1330 < 8uLL || (unint64_t)v2192 < v1331 + v1328 + v1330 && v1332 < v2191)
                      {
                        v1333 = 0;
                        v1334 = 0;
                        goto LABEL_1267;
                      }
                      if (v1330 >= 0x10uLL)
                      {
                        v1333 = v1330 - (unint64_t)(v1330 & 0xF);
                        v1517 = (int64x2_t)xmmword_181267BA0;
                        v1518 = (int64x2_t)xmmword_181267BB0;
                        v1519 = (int64x2_t)xmmword_181267BC0;
                        v1520 = (int64x2_t)xmmword_181267BD0;
                        v1521 = (int64x2_t)xmmword_1812332B0;
                        v1522 = (int64x2_t)xmmword_181267BE0;
                        v1523 = 0uLL;
                        v1524 = v1333;
                        v1525 = 0uLL;
                        v1526 = 0uLL;
                        v1527 = 0uLL;
                        v1528 = 0uLL;
                        v1529 = 0uLL;
                        v1530 = (int64x2_t)xmmword_181233290;
                        v1531 = 0uLL;
                        v1532 = 0uLL;
                        v1533 = (int64x2_t)xmmword_181233120;
                        do
                        {
                          v1534 = *(uint8x16_t *)v1332;
                          v1332 += 4;
                          v1535 = vmovl_u8(*(uint8x8_t *)v1534.i8);
                          v1536 = vmovl_high_u8(v1534);
                          v1537 = vmovl_u16(*(uint16x4_t *)v1536.i8);
                          v1538 = vmovl_high_u16(v1536);
                          v1539 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                          v1540 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1521, 3uLL), v1539);
                          v1541 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1520, 3uLL), v1539);
                          v1542 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1522, 3uLL), v1539);
                          v1543 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1530, 3uLL), v1539);
                          v1544 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1519, 3uLL), v1539);
                          v1545 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1533, 3uLL), v1539);
                          v1546 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1518, 3uLL), v1539);
                          v1547.i64[0] = v1538.u32[2];
                          v1547.i64[1] = v1538.u32[3];
                          v1548 = (int8x16_t)vshlq_u64(v1547, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1517, 3uLL), v1539));
                          v1549 = vmovl_u16(*(uint16x4_t *)v1535.i8);
                          v1547.i64[0] = v1538.u32[0];
                          v1547.i64[1] = v1538.u32[1];
                          v1550 = (int8x16_t)vshlq_u64(v1547, v1546);
                          v1547.i64[0] = v1549.u32[0];
                          v1547.i64[1] = v1549.u32[1];
                          v1551 = (int8x16_t)vshlq_u64(v1547, v1545);
                          v1547.i64[0] = v1537.u32[2];
                          v1547.i64[1] = v1537.u32[3];
                          v1552 = (int8x16_t)vshlq_u64(v1547, v1544);
                          v1553 = vmovl_high_u16(v1535);
                          v1547.i64[0] = v1549.u32[2];
                          v1547.i64[1] = v1549.u32[3];
                          v1554 = (int8x16_t)vshlq_u64(v1547, v1543);
                          v1547.i64[0] = v1553.u32[0];
                          v1547.i64[1] = v1553.u32[1];
                          v1555 = (int8x16_t)vshlq_u64(v1547, v1542);
                          v1547.i64[0] = v1537.u32[0];
                          v1547.i64[1] = v1537.u32[1];
                          v1556 = (int8x16_t)vshlq_u64(v1547, v1541);
                          v1547.i64[0] = v1553.u32[2];
                          v1547.i64[1] = v1553.u32[3];
                          v1527 = vorrq_s8((int8x16_t)vshlq_u64(v1547, v1540), v1527);
                          v1528 = vorrq_s8(v1556, v1528);
                          v1526 = vorrq_s8(v1555, v1526);
                          v1525 = vorrq_s8(v1554, v1525);
                          v1529 = vorrq_s8(v1552, v1529);
                          v1523 = vorrq_s8(v1551, v1523);
                          v1531 = vorrq_s8(v1550, v1531);
                          v1532 = vorrq_s8(v1548, v1532);
                          v1557 = vdupq_n_s64(0x10uLL);
                          v1522 = vaddq_s64(v1522, v1557);
                          v1530 = vaddq_s64(v1530, v1557);
                          v1533 = vaddq_s64(v1533, v1557);
                          v1521 = vaddq_s64(v1521, v1557);
                          v1520 = vaddq_s64(v1520, v1557);
                          v1519 = vaddq_s64(v1519, v1557);
                          v1518 = vaddq_s64(v1518, v1557);
                          v1517 = vaddq_s64(v1517, v1557);
                          v1524 -= 16;
                        }
                        while (v1524);
                        v1558 = vorrq_s8(vorrq_s8(vorrq_s8(v1523, v1528), vorrq_s8(v1526, v1531)), vorrq_s8(vorrq_s8(v1525, v1529), vorrq_s8(v1527, v1532)));
                        v1559 = vorr_s8(*(int8x8_t *)v1558.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1558, v1558, 8uLL));
                        *v2192 = v1559;
                        if ((v1330 & 0xF) == 0)
                          goto LABEL_1281;
                        v1334 = v1559;
                        if ((v1330 & 0xF) < 8uLL)
                          goto LABEL_1267;
                      }
                      else
                      {
                        v1334 = 0;
                        v1333 = 0;
                      }
                      v1560 = vdupq_n_s64(v1333);
                      v1561 = vaddq_s64(v1560, (int64x2_t)xmmword_1812332B0);
                      v1562 = (int8x16_t)(unint64_t)v1334;
                      v1563 = v1333 + v1328;
                      v1564 = v1333 + (v1330 & 7);
                      v1333 = v1330 - (unint64_t)(v1330 & 7);
                      v1565 = vaddq_s64(v1560, (int64x2_t)xmmword_181267BE0);
                      v1566 = vaddq_s64(v1560, (int64x2_t)xmmword_181233290);
                      v1567 = vaddq_s64(v1560, (int64x2_t)xmmword_181233120);
                      v1568 = 0uLL;
                      v1569 = (uint8x8_t *)(v1331 + v1563);
                      v1570 = v1564 - v1330;
                      v1571 = 0uLL;
                      v1572 = 0uLL;
                      do
                      {
                        v1573 = *v1569++;
                        v1574 = vmovl_u8(v1573);
                        v1575 = vmovl_high_u16(v1574);
                        v1576.i64[0] = v1575.u32[2];
                        v1576.i64[1] = v1575.u32[3];
                        v1577 = v1576;
                        v1576.i64[0] = v1575.u32[0];
                        v1576.i64[1] = v1575.u32[1];
                        v1578 = v1576;
                        v1579 = vmovl_u16(*(uint16x4_t *)v1574.i8);
                        v1576.i64[0] = v1579.u32[2];
                        v1576.i64[1] = v1579.u32[3];
                        v1580 = v1576;
                        v1576.i64[0] = v1579.u32[0];
                        v1576.i64[1] = v1579.u32[1];
                        v1581 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                        v1572 = vorrq_s8((int8x16_t)vshlq_u64(v1577, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1561, 3uLL), v1581)), v1572);
                        v1571 = vorrq_s8((int8x16_t)vshlq_u64(v1578, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1565, 3uLL), v1581)), v1571);
                        v1568 = vorrq_s8((int8x16_t)vshlq_u64(v1580, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1566, 3uLL), v1581)), v1568);
                        v1582 = vdupq_n_s64(8uLL);
                        v1562 = vorrq_s8((int8x16_t)vshlq_u64(v1576, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v1567, 3uLL), v1581)), v1562);
                        v1565 = vaddq_s64(v1565, v1582);
                        v1566 = vaddq_s64(v1566, v1582);
                        v1567 = vaddq_s64(v1567, v1582);
                        v1561 = vaddq_s64(v1561, v1582);
                        v1570 += 8;
                      }
                      while (v1570);
                      v1583 = vorrq_s8(vorrq_s8(v1562, v1571), vorrq_s8(v1568, v1572));
                      v1584 = vorr_s8(*(int8x8_t *)v1583.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1583, v1583, 8uLL));
                      *v2192 = v1584;
                      if ((v1330 & 7) != 0)
                      {
                        v1334 = v1584;
LABEL_1267:
                        v1335 = v1330 - v1333;
                        v1336 = 8 * v1333;
                        v1337 = (unsigned __int8 *)(v1331 + v1333 + v1328);
                        do
                        {
                          v1338 = *v1337++;
                          *(_QWORD *)&v1334 |= (unint64_t)v1338 << (v1336 & 0xF8);
                          *v2192 = v1334;
                          v1336 += 8;
                          --v1335;
                        }
                        while (v1335);
                      }
LABEL_1281:
                      *v2190 = v1328 + v1330;
                      *v2191 = 8 * v1330;
                      v1341 = 8 * v1330 - v1327;
                      if (8 * v1330 < v1327)
                        goto LABEL_1282;
                      goto LABEL_1289;
                    }
                  }
                  __dst.__r_.__value_.__r.__words[0] = v1329;
                  llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v2190, (uint64_t *)&__dst, (uint64_t *)&v2209);
                  v581 = v2209;
                  if (v2209)
                  {
                    v12 = v2188;
                    v13 = v2189;
                    v14 = v2191;
                    goto LABEL_1726;
                  }
                  v1310 = (uint64_t *)v2192;
                  v1341 = *v2191 - v1327;
                  if (*v2191 < v1327)
                  {
LABEL_1282:
                    v14 = v2191;
                    llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", v2191, (int *)&__p, (uint64_t *)&v2205);
                    v581 = v2205;
                    v12 = v2188;
                    v13 = v2189;
                    if (v2205)
                      goto LABEL_1726;
                    continue;
                  }
LABEL_1289:
                  v1348 = *v1310;
                  v1340 = (unint64_t)*v1310 >> v1327;
                  *v1310 = v1340;
                  *v2191 = v1341;
                  v1349 = v1348 << v1325;
                  v14 = v2191;
                  LOBYTE(v1349) = v1349 & 0xF | v1326.i8[0];
                  v12 = v2188;
                  v13 = v2189;
                  if ((v1349 & 8) == 0)
                  {
LABEL_1290:
                    v65 = v1341 >= 0x20;
                    v1350 = v1341 - 32;
                    if (v65)
                    {
                      *v1310 = v1340 >> v1350;
                      v1436 = 32;
                    }
                    else
                    {
                      v1436 = 0;
                    }
                    *v14 = v1436;
                    llvm::SimpleBitstreamCursor::Read(v13, 0x20u, (uint64_t)&__dst);
                    if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
                    {
                      v581 = (void *)__dst.__r_.__value_.__r.__words[0];
                      if (__dst.__r_.__value_.__r.__words[0])
                        goto LABEL_1726;
                    }
                    else
                    {
                      v1438 = *(_QWORD *)(v8 + 40);
                      v1437 = *(_QWORD *)(v8 + 48);
                      v1439 = *(unsigned int *)(v8 + 64);
                      v1440 = 8 * v1437 - v1439 + 32 * LODWORD(__dst.__r_.__value_.__l.__data_);
                      v2209 = (void *)v1440;
                      if ((_DWORD)v1439 || v1438 > v1437)
                      {
                        if (v1438 >= v1440 >> 3)
                        {
                          *v2190 = (v1440 >> 3) & 0x1FFFFFFFFFFFFFF8;
                          *v14 = 0;
                          if ((v1440 & 0x3F) == 0
                            || (llvm::SimpleBitstreamCursor::Read(v13, v1440 & 0x3F, (uint64_t)&__dst),
                                (__dst.__r_.__value_.__s.__data_[8] & 1) == 0)
                            || (v2205 = (void *)__dst.__r_.__value_.__r.__words[0]) == 0)
                          {
                            v2205 = 0;
                          }
                          v581 = v2205;
                          if (v2205)
                            goto LABEL_1726;
                        }
                        else
                        {
                          __dst.__r_.__value_.__r.__words[0] = 8 * v1437 - v1439;
                          llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v2209, (uint64_t *)&__dst, (uint64_t *)&v2205);
                          v581 = v2205;
                          if (v2205)
                            goto LABEL_1726;
                        }
                      }
                      else
                      {
                        *(_QWORD *)&v2240.__val_ = std::generic_category();
                        v2240.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
                        llvm::createStringError((llvm *)0x5C, v2240, &v2205);
                        v581 = v2205;
                        if (v2205)
                          goto LABEL_1726;
                      }
                    }
                    continue;
                  }
                  goto LABEL_1293;
                }
                v1298 = *v2192;
              }
              break;
            }
            v1307 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v1297) & *(_QWORD *)&v1298;
            v1308 = *(_QWORD *)&v1298 >> v1297;
            *v1299 = *(_QWORD *)&v1298 >> v1297;
            v1309 = v1296 - v1297;
            *v14 = v1296 - v1297;
            if ((_DWORD)v1307 != 1)
              goto LABEL_1255;
            goto LABEL_1240;
          default:
            goto LABEL_50;
        }
      case 1:
        if (!*a1)
LABEL_24:
        goto LABEL_19;
      case 0:
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Malformed block";
        v2232 = 259;
LABEL_19:
        v16 = 1;
        goto LABEL_20;
    }
    llvm::BitstreamCursor::readRecord(v13, SHIDWORD(v2200), (uint64_t)&v2202, 0, (uint64_t)&v2205);
    if ((v2206 & 1) != 0)
    {
      v39 = v2205;
      v2205 = 0;
LABEL_44:
      *a1 = (uint64_t)v39;
      v16 = 1;
      goto LABEL_1964;
    }
    v22 = (int)v2205;
    switch((int)v2205)
    {
      case 1:
        if ((_DWORD)v2203)
        {
          v1239 = *(_QWORD *)v2202;
          if (*(_QWORD *)v2202 < 3)
          {
            *(_BYTE *)(v8 + 392) = (_DWORD)v1239 == 2;
            v2164 = v1239 | v2164 & 0xFFFFFFFF00000000;
            *(_BYTE *)(v8 + 1712) = v1239 != 0;
            goto LABEL_1962;
          }
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid value";
          v2232 = 259;
          v39 = v2209;
        }
        else
        {
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid version record";
          v2232 = 259;
          v39 = (void *)__dst.__r_.__value_.__r.__words[0];
        }
        v14 = v2191;
        v2164 = 0;
        goto LABEL_44;
      case 2:
        if (v2195)
        {
          v1238 = "target triple too late in module";
LABEL_1191:
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v1238;
          v2232 = 259;
          v16 = 1;
          goto LABEL_1963;
        }
        memset(&__dst, 0, sizeof(__dst));
        std::string::append[abi:nn180100]<unsigned long long const*,0>(&__dst, (unint64_t)v2202, (uint64_t *)v2202 + v2203);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_dst = &__dst;
        else
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1289 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v1289 = __dst.__r_.__value_.__l.__size_;
        if (v1289 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_2157;
        v1290 = *(_QWORD *)(v8 + 432);
        if (v1289 >= 0x17)
        {
          v1875 = (v1289 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1289 | 7) != 0x17)
            v1875 = v1289 | 7;
          v1876 = v1875 + 1;
          p_s = (std::string *)operator new(v1875 + 1);
          v1877 = v1876 | 0x8000000000000000;
          v12 = v2188;
          __s.__r_.__value_.__r.__words[2] = v1877;
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
          __s.__r_.__value_.__l.__size_ = v1289;
        }
        else
        {
          *((_BYTE *)&__s.__r_.__value_.__s + 23) = v1289;
          p_s = &__s;
          if (!v1289)
            goto LABEL_1575;
        }
        memmove(p_s, p_dst, v1289);
LABEL_1575:
        p_s->__r_.__value_.__s.__data_[v1289] = 0;
        v1878 = (void **)(v1290 + 208);
        if (*(char *)(v1290 + 231) < 0)
          operator delete(*v1878);
        *(_OWORD *)v1878 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
        *(_QWORD *)(v1290 + 224) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
        a1 = (uint64_t *)v2187;
        v13 = v2189;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_1962;
      case 3:
        if (v2195)
        {
          v1238 = "datalayout too late in module";
          goto LABEL_1191;
        }
        std::string::append[abi:nn180100]<unsigned long long const*,0>(&v2194, (unint64_t)v2202, (uint64_t *)v2202 + v2203);
        goto LABEL_1962;
      case 4:
        memset(&__s, 0, sizeof(__s));
        std::string::append[abi:nn180100]<unsigned long long const*,0>(&__s, (unint64_t)v2202, (uint64_t *)v2202 + v2203);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1263 = &__s;
        else
          v1263 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1264 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v1264 = __s.__r_.__value_.__l.__size_;
        llvm::Module::setModuleInlineAsm(*(_QWORD *)(v8 + 432), v1263, v1264);
        goto LABEL_1569;
      case 5:
        memset(&__s, 0, sizeof(__s));
        std::string::append[abi:nn180100]<unsigned long long const*,0>(&__s, (unint64_t)v2202, (uint64_t *)v2202 + v2203);
        v1265 = *(_QWORD *)(v8 + 480);
        if (v1265 >= *(_QWORD *)(v8 + 488))
        {
          v1278 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v2178, (uint64_t)&__s);
        }
        else
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(v8 + 480), __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            v1266 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
            *(_QWORD *)(v1265 + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
            *(_OWORD *)v1265 = v1266;
          }
          v1278 = (std::string *)(v1265 + 24);
        }
        *(_QWORD *)(v8 + 480) = v1278;
        goto LABEL_1569;
      case 6:
        memset(&__s, 0, sizeof(__s));
        std::string::append[abi:nn180100]<unsigned long long const*,0>(&__s, (unint64_t)v2202, (uint64_t *)v2202 + v2203);
        goto LABEL_1569;
      case 7:
        v2182 = a4;
        v1240 = (char *)v2202;
        v1241 = v2203;
        if (*(_BYTE *)(v8 + 392))
        {
          v1242 = *((_QWORD *)v2202 + 1);
          v14 = v2191;
          if (v1242 + *(_QWORD *)v2202 <= *(_QWORD *)(v8 + 384))
          {
            v1243 = (const char *)(*(_QWORD *)(v8 + 376) + *(_QWORD *)v2202);
            v1241 = v2203 - 2;
            v1240 = (char *)v2202 + 16;
            if (v1241 > 5)
            {
LABEL_1145:
              v2154 = (std::string::size_type)v1243;
              v2160 = v1241;
              LODWORD(__p) = *(_DWORD *)v1240;
              v1244 = (int)__p;
              if (v1245)
              {
                v1246 = (llvm::PointerType **)v1245;
                v1247 = *((_QWORD *)v1240 + 1);
                if ((v1247 & 2) != 0)
                {
                  v2146 = (v1247 >> 2);
                  v14 = v2191;
                  goto LABEL_1818;
                }
                v1248 = *(unsigned int *)(v1245 + 8);
                if (*(_DWORD *)(v1245 + 8) == 15)
                {
                  v1249 = *(_QWORD *)(v8 + 544);
                  v1250 = *(unsigned int *)(v8 + 560);
                  if ((_DWORD)v1250)
                  {
                    v1251 = v1250 - 1;
                    v1252 = (int *)(v1249 + 32 * (((_DWORD)v1250 - 1) & (37 * v1244)));
                    v1253 = *v1252;
                    if (*v1252 == v1244)
                    {
LABEL_1778:
                      if (v1252 == (int *)(v1249 + 32 * v1250))
                      {
                        v1971 = 0xFFFFFFFFLL;
                        v14 = v2191;
                      }
                      else
                      {
                        v14 = v2191;
                        if (v1252[4])
                          v1971 = **((unsigned int **)v1252 + 1);
                        else
                          v1971 = 0xFFFFFFFFLL;
                      }
                      LODWORD(__p) = v1971;
                      if (!v1981)
                      {
                        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Missing element type for old-style global";
                        v2232 = 259;
                        a1 = (uint64_t *)v2187;
                        goto LABEL_1961;
                      }
                      v1246 = (llvm::PointerType **)v1981;
                      v2146 = v1248 >> 8;
                      a1 = (uint64_t *)v2187;
LABEL_1818:
                      v2144 = *((_QWORD *)v1240 + 3);
                      if ((v2144 - 1) > 0x12)
                        v2150 = 0;
                      else
                        v2150 = dword_181286214[(int)v2144 - 1];
                      v1982 = *((_QWORD *)v1240 + 4);
                      if (v1982 <= 0x21)
                      {
                        if (v1982)
                          v1983 = (v1982 - 1) | 0x100;
                        else
                          v1983 = 0;
                        v2142 = v1983;
                        v2143 = v1983 >> 8;
                        *a1 = 0;
                      }
                      else
                      {
                        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid alignment value";
                        v2232 = 259;
                        if (*a1)
                          goto LABEL_1961;
                        v2143 = 0;
                        v2142 = 0;
                      }
                      memset(&__dst, 0, sizeof(__dst));
                      v1984 = *((_QWORD *)v1240 + 5);
                      if (v1984)
                      {
                        v1985 = v1984 - 1;
                        v1986 = *(_QWORD *)(v8 + 472);
                        if (v1985 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v8 + 480) - v1986) >> 3))
                        {
                          v1988 = "Invalid ID";
LABEL_1938:
                          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v1988;
                          v2232 = 259;
LABEL_1959:
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_1961:
                          v12 = v2188;
                          v13 = v2189;
                          a4 = v2182;
                          if (*a1)
                            goto LABEL_1814;
                          goto LABEL_1962;
                        }
                        std::string::operator=(&__dst, (const std::string *)(v1986 + 24 * v1985));
                      }
                      if (v2160 < 7)
                      {
                        v2141 = 0;
                      }
                      else
                      {
                        if ((v2150 - 7) >= 2)
                        {
                          v1989 = *((_DWORD *)v1240 + 12);
                          if (v1989 == 2)
                            v1987 = 2;
                          else
                            v1987 = v1989 == 1;
                        }
                        else
                        {
                          v1987 = 0;
                        }
                        LOBYTE(v2141) = v1987;
                        if (v2160 >= 8)
                        {
                          if (*((_DWORD *)v1240 + 14) >= 5u)
                            v1990 = 1;
                          else
                            v1990 = *((_DWORD *)v1240 + 14);
                          if (v2160 == 8)
                          {
                            BYTE4(v2141) = 0;
                          }
                          else
                          {
                            v2007 = *((_DWORD *)v1240 + 16);
                            if (v2007 == 2)
                              v2008 = 1;
                            else
                              v2008 = 2 * (v2007 == 1);
                            BYTE4(v2141) = v2008;
                            if (v2160 != 9)
                            {
                              v1991 = *((_QWORD *)v1240 + 9) != 0;
LABEL_1849:
                              v1992 = (mlir::BytecodeWriterConfig *)llvm::User::operator new((llvm::User *)0x58, 1u);
                              v1993 = *(_QWORD *)(v2186 + 432);
                              v2232 = 261;
                              __s.__r_.__value_.__r.__words[0] = v2154;
                              __s.__r_.__value_.__l.__size_ = v1242;
                              v1994 = v1992;
                              llvm::GlobalVariable::GlobalVariable((uint64_t)v1992, v1993, v1246, v1247 & 1, v2150, 0, (const char **)&__s.__r_.__value_.__l.__data_, 0, v1990, v2146 | 0x100000000, v1991);
                              if (v2143)
                                llvm::GlobalObject::setAlignment((uint64_t)v1994, v2142);
                              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v1995 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                              else
                                v1995 = __dst.__r_.__value_.__l.__size_;
                              a1 = (uint64_t *)v2187;
                              if (v1995)
                              {
                                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v1996 = &__dst;
                                else
                                  v1996 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                                llvm::GlobalObject::setSection(v1994, v1996, v1995);
                              }
                              v1997 = *((_DWORD *)v1994 + 8) & 0xF;
                              v1998 = *((_DWORD *)v1994 + 8) & 0xFFFFFFCF | (16 * (v2141 & 3));
                              *((_DWORD *)v1994 + 8) = v1998;
                              v8 = v2186;
                              v14 = v2191;
                              if ((v1997 - 7) < 2
                                || 16 * (v2141 & 3)
                                && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v1994),
                                    v1998 = *((_DWORD *)v1994 + 8),
                                    (hasExternalWeakLinkage & 1) == 0))
                              {
                                v1998 |= 0x4000u;
                              }
                              v2000 = v1998 & 0xF;
                              v2001 = v1998 & 0xFFFFFF3F | ((BYTE4(v2141) & 3) << 6);
                              *((_DWORD *)v1994 + 8) = v2001;
                              v2002 = v2000 - 7;
                              if (v2160 < 0xB)
                              {
                                if (v2002 < 2)
                                  goto LABEL_1905;
                                if ((_DWORD)v2144 == 5)
                                {
                                  v2004 = 256;
                                }
                                else
                                {
                                  if ((_DWORD)v2144 != 6)
                                    goto LABEL_1905;
                                  v2004 = 512;
                                }
                              }
                              else
                              {
                                if (v2002 < 2)
                                  goto LABEL_1905;
                                v2003 = *((_DWORD *)v1240 + 20);
                                if (v2003 == 2)
                                  v2004 = 512;
                                else
                                  v2004 = (v2003 == 1) << 8;
                              }
                              *((_DWORD *)v1994 + 8) = v2004 | v2001 & 0xFFFFFCFF;
LABEL_1905:
                              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v1994;
                              LODWORD(v2209) = VirtualTypeID;
                              v2019 = v1994;
                              v2020 = *(_QWORD *)(v2186 + 720);
                              v2021 = v2019;
                              if (v2020 >= *(_QWORD *)(v2186 + 728))
                              {
                                v2023 = std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__emplace_back_slow_path<llvm::Value *&,unsigned int &>((uint64_t)v2176, (uint64_t *)&__s, &v2209);
                              }
                              else
                              {
                                v2022 = VirtualTypeID;
                                *(_QWORD *)v2020 = 6;
                                *(_QWORD *)(v2020 + 8) = 0;
                                *(_QWORD *)(v2020 + 16) = v2019;
                                if (v2019 != (mlir::BytecodeWriterConfig *)-8192
                                  && v2019 != (mlir::BytecodeWriterConfig *)-4096
                                  && v2019)
                                {
                                  llvm::ValueHandleBase::AddToUseList((unint64_t *)v2020);
                                }
                                *(_DWORD *)(v2020 + 24) = v2022;
                                v2023 = (char *)(v2020 + 32);
                              }
                              v2024 = v2160;
                              *(_QWORD *)(v2186 + 720) = v2023;
                              v2025 = *((_QWORD *)v1240 + 2);
                              v2026 = v2021;
                              if (!(_DWORD)v2025)
                              {
LABEL_1934:
                                if (v2024 < 0xC)
                                {
                                  if (v2144 <= 0xB && ((1 << v2144) & 0xC12) != 0)
                                  {
                                    v2209 = v2026;
                                    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v2174, (uint64_t *)&v2209, (uint64_t)&__s);
                                  }
                                }
                                else
                                {
                                  v2039 = *((_QWORD *)v1240 + 11);
                                  if ((_DWORD)v2039)
                                  {
                                    v2040 = *(_QWORD *)(v8 + 792);
                                    if (*((_QWORD *)v1240 + 11) > (unint64_t)((*(_QWORD *)(v8 + 800) - v2040) >> 3))
                                    {
                                      v1988 = "Invalid global variable comdat ID";
                                      goto LABEL_1938;
                                    }
                                    llvm::GlobalObject::setComdat(v2026, *(const void ***)(v2040 + 8 * (v2039 - 1)));
                                  }
                                  if (v2024 >= 0xD)
                                  {
                                    v2041 = *(_QWORD *)(v8 + 1440);
                                    v2042 = (*((_DWORD *)v1240 + 24) - 1);
                                    v2043 = v2042 >= (*(_QWORD *)(v8 + 1448) - v2041) >> 3
                                          ? 0
                                          : *(_QWORD *)(v2041 + 8 * v2042);
                                    __s.__r_.__value_.__r.__words[0] = v2043;
                                    *((_QWORD *)v2026 + 9) = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&__s);
                                    if (v2024 >= 0xE)
                                      *((_DWORD *)v2026 + 8) = *((_DWORD *)v2026 + 8) & 0xFFFFBFFF | ((*((_DWORD *)v1240 + 26) == 1) << 14);
                                  }
                                }
                                v2044 = *((_DWORD *)v2026 + 8);
                                if ((v2044 & 0xFu) - 7 >= 2)
                                {
                                  if ((v2044 & 0x30) == 0
                                    || (llvm::GlobalValue::hasExternalWeakLinkage(v2026) & 1) != 0)
                                  {
                                    goto LABEL_1954;
                                  }
                                  v2044 = *((_DWORD *)v2026 + 8);
                                }
                                *((_DWORD *)v2026 + 8) = v2044 | 0x4000;
LABEL_1954:
                                if (v2024 >= 0x10)
                                {
                                  llvm::GlobalValue::setPartition(v2026, (_BYTE *)(*(_QWORD *)(v8 + 376) + *((_QWORD *)v1240 + 14)), *((_QWORD *)v1240 + 15));
                                  if (v2024 != 16)
                                  {
                                    v2045 = *((_QWORD *)v1240 + 16);
                                    if (v2045)
                                      llvm::GlobalValue::setSanitizerMetadata(v2026, v2045 & 0xF);
                                  }
                                }
                                *a1 = 0;
                                goto LABEL_1959;
                              }
                              v2027 = (v2025 - 1);
                              v2028 = *(char **)(v2186 + 1376);
                              v2029 = *(_QWORD *)(v2186 + 1384);
                              if ((unint64_t)v2028 < v2029)
                              {
                                *(_QWORD *)v2028 = v2021;
                                *((_QWORD *)v2028 + 1) = v2027;
                                v2026 = v2021;
                                v2030 = v2028 + 16;
LABEL_1933:
                                v2024 = v2160;
                                *(_QWORD *)(v8 + 1376) = v2030;
                                a1 = (uint64_t *)v2187;
                                goto LABEL_1934;
                              }
                              v2031 = *(char **)(v2186 + 1368);
                              v2032 = (v2028 - v2031) >> 4;
                              v2033 = v2032 + 1;
                              if (!((unint64_t)(v2032 + 1) >> 60))
                              {
                                v2034 = v2029 - (_QWORD)v2031;
                                if (v2034 >> 3 > v2033)
                                  v2033 = v2034 >> 3;
                                if ((unint64_t)v2034 >= 0x7FFFFFFFFFFFFFF0)
                                  v2035 = 0xFFFFFFFFFFFFFFFLL;
                                else
                                  v2035 = v2033;
                                if (!v2035)
                                {
                                  v2036 = 0;
                                  goto LABEL_1925;
                                }
                                if (!(v2035 >> 60))
                                {
                                  v2036 = (char *)operator new(16 * v2035);
LABEL_1925:
                                  v2037 = &v2036[16 * v2032];
                                  *(_QWORD *)v2037 = v2021;
                                  *((_QWORD *)v2037 + 1) = v2027;
                                  v2038 = v2037;
                                  if (v2028 == v2031)
                                  {
                                    v8 = v2186;
                                  }
                                  else
                                  {
                                    v8 = v2186;
                                    do
                                    {
                                      *((_OWORD *)v2038 - 1) = *((_OWORD *)v2028 - 1);
                                      v2038 -= 16;
                                      v2028 -= 16;
                                    }
                                    while (v2028 != v2031);
                                    v2028 = *(char **)(v2186 + 1368);
                                  }
                                  v2026 = v2021;
                                  *(_QWORD *)(v8 + 1368) = v2038;
                                  v2030 = v2037 + 16;
                                  *(_QWORD *)(v8 + 1376) = v2037 + 16;
                                  *(_QWORD *)(v8 + 1384) = &v2036[16 * v2035];
                                  if (v2028)
                                    operator delete(v2028);
                                  v14 = v2191;
                                  goto LABEL_1933;
                                }
LABEL_2158:
                                std::__throw_bad_array_new_length[abi:nn180100]();
                              }
                              goto LABEL_2157;
                            }
                          }
LABEL_1848:
                          v1991 = 0;
                          goto LABEL_1849;
                        }
                        BYTE4(v2141) = 0;
                      }
                      v1990 = 0;
                      goto LABEL_1848;
                    }
                    v1254 = 1;
                    LODWORD(v1255) = v1251 & (37 * v1244);
                    while (1)
                    {
                      v8 = v2186;
                      if (v1253 == -1)
                        break;
                      v1256 = v1255 + v1254++;
                      v1255 = v1256 & v1251;
                      v1253 = *(_DWORD *)(v1249 + 32 * v1255);
                      if (v1253 == v1244)
                      {
                        v1252 = (int *)(v1249 + 32 * v1255);
                        v8 = v2186;
                        goto LABEL_1778;
                      }
                    }
                  }
                  v1252 = (int *)(v1249 + 32 * v1250);
                  goto LABEL_1778;
                }
                __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid type for value";
                v2232 = 259;
                a1 = (uint64_t *)v2187;
              }
              else
              {
                __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
                v2232 = 259;
              }
              v14 = v2191;
              goto LABEL_1961;
            }
          }
        }
        else
        {
          v1242 = 0;
          v1243 = "";
          v14 = v2191;
          if (v2203 > 5uLL)
            goto LABEL_1145;
        }
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
        v2232 = 259;
        v12 = v2188;
        v13 = v2189;
        a4 = v2182;
        if (*a1)
          goto LABEL_1814;
        goto LABEL_1962;
      case 8:
        if (*a1)
        {
          v16 = 1;
          goto LABEL_1963;
        }
        v1292 = (unsigned int *)v2202;
        v1293 = v2203;
        if (*(_BYTE *)(v8 + 392))
        {
          v1294 = *((_QWORD *)v2202 + 1);
          if (v1294 + *(_QWORD *)v2202 > *(_QWORD *)(v8 + 384))
            goto LABEL_1596;
          v1295 = (const char *)(*(_QWORD *)(v8 + 376) + *(_QWORD *)v2202);
          v1293 = v2203 - 2;
          v1292 = (unsigned int *)((char *)v2202 + 16);
        }
        else
        {
          v1294 = 0;
          v1295 = "";
        }
        if (v1293 <= 7)
        {
LABEL_1596:
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
          v2232 = 259;
          a1 = (uint64_t *)v2187;
LABEL_1811:
          goto LABEL_1812;
        }
        v2156 = v1293;
        v2163 = v1292;
        v2221[0] = *v1292;
        LODWORD(v1888) = v2221[0];
        if (!v1889)
        {
          v1932 = "Invalid record";
LABEL_1810:
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v1932;
          v2232 = 259;
          a1 = (uint64_t *)v2187;
          v12 = v2188;
          goto LABEL_1811;
        }
        v1890 = v1889;
        v1891 = *(unsigned __int8 *)(v1889 + 8);
        if (v1891 != 15)
          goto LABEL_1804;
        v1892 = *(_QWORD *)(v8 + 544);
        v1893 = *(unsigned int *)(v8 + 560);
        if (!(_DWORD)v1893)
          goto LABEL_1797;
        v1894 = v1893 - 1;
        v1895 = (int *)(v1892 + 32 * (((_DWORD)v1893 - 1) & (37 * v1888)));
        v1896 = *v1895;
        if (*v1895 != (_DWORD)v1888)
        {
          v1897 = a4;
          v1898 = 1;
          LODWORD(v1899) = v1894 & (37 * v1888);
          while (1)
          {
            a4 = v1897;
            v8 = v2186;
            v13 = v2189;
            if (v1896 == -1)
              break;
            v1900 = v1899 + v1898++;
            v1899 = v1900 & v1894;
            v1896 = *(_DWORD *)(v1892 + 32 * v1899);
            if (v1896 == (_DWORD)v1888)
            {
              v1895 = (int *)(v1892 + 32 * v1899);
              a4 = v1897;
              v8 = v2186;
              v13 = v2189;
              goto LABEL_1798;
            }
          }
LABEL_1797:
          v1895 = (int *)(v1892 + 32 * v1893);
        }
LABEL_1798:
        if (v1895 == (int *)(v1892 + 32 * v1893) || !v1895[4])
          v1888 = 0xFFFFFFFFLL;
        else
          v1888 = **((unsigned int **)v1895 + 1);
        v2221[0] = v1888;
        if (!v1980)
        {
          v1932 = "Missing element type for old-style function";
          goto LABEL_1810;
        }
        v1890 = v1980;
        v1891 = *(unsigned __int8 *)(v1980 + 8);
LABEL_1804:
        if (v1891 != 14)
        {
          v1932 = "Invalid type for value";
          goto LABEL_1810;
        }
        if ((*((_QWORD *)v2163 + 1) & 0xFFFFFC00) != 0)
        {
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid calling convention ID";
          v2232 = 259;
          a1 = (uint64_t *)v2187;
          v12 = v2188;
          goto LABEL_1807;
        }
        v2005 = *(_QWORD *)(v8 + 432);
        v2151 = *((_QWORD *)v2163 + 1);
        if (v2156 < 0x11)
          v2006 = *(_DWORD *)(v2005 + 268);
        else
          v2006 = v2163[32];
        v2147 = v2006;
        v2232 = 261;
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v1295;
        __s.__r_.__value_.__l.__size_ = v1294;
        v2009 = llvm::User::operator new((llvm::User *)0x80);
        __p = (void *)llvm::Function::Function(v2009, v1890, 0, v2147, &__s, v2005);
        v2010 = *(_DWORD *)(v8 + 608);
        if (v2010)
        {
          v2011 = *(_QWORD *)(v8 + 592);
          v2012 = v2010 - 1;
          v2013 = (v2010 - 1) & ((v2009 >> 4) ^ (v2009 >> 9));
          v2014 = v2011 + 16 * v2013;
          v2015 = *(unsigned int **)v2014;
          a1 = (uint64_t *)v2187;
          if (v2009 == *(unsigned int **)v2014)
          {
LABEL_1902:
            v2016 = v2163;
            v2017 = v2151;
            goto LABEL_1974;
          }
          v2127 = 0;
          v2128 = 1;
          while (v2015 != (unsigned int *)-4096)
          {
            if (v2127)
              v2129 = 0;
            else
              v2129 = v2015 == (unsigned int *)-8192;
            if (v2129)
              v2127 = v2014;
            v2130 = v2013 + v2128++;
            v2013 = v2130 & v2012;
            v2014 = v2011 + 16 * (v2130 & v2012);
            v2015 = *(unsigned int **)v2014;
            if (v2009 == *(unsigned int **)v2014)
            {
              v8 = v2186;
              a1 = (uint64_t *)v2187;
              goto LABEL_1902;
            }
          }
          if (v2127)
            v2014 = v2127;
          v8 = v2186;
        }
        else
        {
          v2014 = 0;
        }
        a1 = (uint64_t *)v2187;
        v2047 = *(_DWORD *)(v8 + 600);
        if (4 * v2047 + 4 >= 3 * v2010)
        {
          v2010 *= 2;
        }
        else if (v2010 + ~v2047 - *(_DWORD *)(v8 + 604) > v2010 >> 3)
        {
          goto LABEL_1970;
        }
        llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v2165, v2010);
        v2131 = *(_QWORD *)(v2186 + 592);
        v2132 = *(_DWORD *)(v2186 + 608) - 1;
        v2133 = v2132 & ((v2009 >> 4) ^ (v2009 >> 9));
        v2014 = v2131 + 16 * v2133;
        v2134 = *(unsigned int **)v2014;
        if (v2009 != *(unsigned int **)v2014)
        {
          v2135 = 0;
          v2136 = 1;
          while (v2134 != (unsigned int *)-4096)
          {
            if (v2135)
              v2137 = 0;
            else
              v2137 = v2134 == (unsigned int *)-8192;
            if (v2137)
              v2135 = v2014;
            v2138 = v2133 + v2136++;
            v2133 = v2138 & v2132;
            v2014 = v2131 + 16 * (v2138 & v2132);
            v2134 = *(unsigned int **)v2014;
            if (v2009 == *(unsigned int **)v2014)
              goto LABEL_2139;
          }
          if (v2135)
            v2014 = v2135;
          v8 = v2186;
          a1 = (uint64_t *)v2187;
LABEL_1970:
          v2048 = *(unsigned int **)v2014;
          goto LABEL_1971;
        }
LABEL_2139:
        v2048 = v2009;
        v8 = v2186;
        a1 = (uint64_t *)v2187;
LABEL_1971:
        ++*(_DWORD *)(v8 + 600);
        v2016 = v2163;
        v2017 = v2151;
        if (v2048 != (unsigned int *)-4096)
          --*(_DWORD *)(v8 + 604);
        *(_QWORD *)v2014 = v2009;
        *(_DWORD *)(v2014 + 8) = 0;
        v2009 = (unsigned int *)__p;
LABEL_1974:
        *(_DWORD *)(v2014 + 8) = v1888;
        *((_WORD *)v2009 + 9) = *((_WORD *)v2009 + 9) & 0xC00F | (16 * v2017);
        v2145 = *((_QWORD *)v2016 + 2);
        v2148 = *((_QWORD *)v2016 + 3);
        if ((v2148 - 1) > 0x12)
          v2049 = 0;
        else
          v2049 = dword_181286214[(int)v2148 - 1];
        v13 = v2189;
        v2050 = v2009[8];
        v2051 = (v2049 - 7) >= 2;
        if ((v2049 - 7) >= 2)
          v2052 = v2009[8];
        else
          v2052 = v2050 & 0xFFFFFCC0;
        v2053 = v2052 & 0xFFFFFFF0 | v2049;
        v2009[8] = v2053;
        if (!v2051)
          goto LABEL_1985;
        if ((v2050 & 0x30) != 0)
        {
          v2054 = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v2009);
          v2016 = v2163;
          if ((v2054 & 1) == 0)
          {
            v2053 = v2009[8];
LABEL_1985:
            v2009[8] = v2053 | 0x4000;
          }
        }
        v2055 = *(_QWORD *)(v8 + 1440);
        v2056 = v2016[8] - 1;
        if (v2056 >= (*(_QWORD *)(v8 + 1448) - v2055) >> 3)
          v2057 = 0;
        else
          v2057 = *(_QWORD *)(v2055 + 8 * v2056);
        *((_QWORD *)v2009 + 14) = v2057;
        if (!*(_BYTE *)(v8 + 1864))
          goto LABEL_2001;
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E0E50460;
        __s.__r_.__value_.__l.__size_ = v8;
        v2231 = &__s;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E0E504B8;
        __dst.__r_.__value_.__l.__size_ = v8;
        v2224 = &__dst;
        v2209 = v2009;
        LODWORD(v2196[0]) = v1888;
        v2058 = *(_QWORD *)(v8 + 1856);
        if (!v2058)
        {
          v2139 = (std::string::size_type *)std::__throw_bad_function_call[abi:nn180100]();
          return;
        }
        (*(void (**)(uint64_t, void **, uint64_t *, std::string *, std::string *))(*(_QWORD *)v2058 + 48))(v2058, &v2209, v2196, &__s, &__dst);
        v2059 = v2224;
        if (v2224 == &__dst)
        {
          v2059 = &__dst;
          v2060 = 4;
        }
        else
        {
          if (!v2224)
            goto LABEL_1996;
          v2060 = 5;
        }
        (*(void (**)(void))(v2059->__r_.__value_.__r.__words[0] + 8 * v2060))();
LABEL_1996:
        v2061 = v2231;
        if (v2231 == &__s)
        {
          v2061 = &__s;
          v2062 = 4;
        }
        else
        {
          v2016 = v2163;
          if (!v2231)
            goto LABEL_2001;
          v2062 = 5;
        }
        (*(void (**)(void))(v2061->__r_.__value_.__r.__words[0] + 8 * v2062))();
        v2016 = v2163;
LABEL_2001:
        if (!*((_QWORD *)v2009 + 12))
          goto LABEL_2046;
        v2063 = 0;
        while (2)
        {
          v2064 = 0;
          __dst.__r_.__value_.__r.__words[0] = 0x4D00000049;
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = 75;
          v2152 = (v2063 + 1);
          do
          {
            v2066 = *((_DWORD *)&__dst.__r_.__value_.__l.__data_ + v2064);
            if (!llvm::Function::hasParamAttribute((uint64_t)v2009, v2063, v2066))
              goto LABEL_2007;
            __s.__r_.__value_.__r.__words[0] = llvm::Function::getParamAttribute((uint64_t)v2009, v2063, v2066);
            if (llvm::Attribute::getValueAsInt((llvm::Attribute *)&__s))
              goto LABEL_2007;
            llvm::Function::removeParamAttr((uint64_t)v2009, v2063, v2066);
            v2067 = *(_QWORD *)(v8 + 544);
            v2068 = *(unsigned int *)(v8 + 560);
            if (!(_DWORD)v2068)
              goto LABEL_2016;
            v2069 = v2068 - 1;
            v2070 = (int *)(v2067 + 32 * (((_DWORD)v2068 - 1) & (37 * v2221[0])));
            v2071 = *v2070;
            v14 = v2191;
            if (*v2070 != v2221[0])
            {
              v2072 = a4;
              v2073 = 1;
              LODWORD(v2074) = v2069 & (37 * v2221[0]);
              while (1)
              {
                a4 = v2072;
                v8 = v2186;
                a1 = (uint64_t *)v2187;
                if (v2071 == -1)
                  break;
                v2075 = v2074 + v2073++;
                v2074 = v2075 & v2069;
                v2071 = *(_DWORD *)(v2067 + 32 * v2074);
                if (v2071 == v2221[0])
                {
                  v2070 = (int *)(v2067 + 32 * v2074);
                  a4 = v2072;
                  v8 = v2186;
                  a1 = (uint64_t *)v2187;
                  goto LABEL_2017;
                }
              }
LABEL_2016:
              v2070 = (int *)(v2067 + 32 * v2068);
LABEL_2017:
              v14 = v2191;
            }
            v2076 = (int *)(v2067 + 32 * v2068);
            if (v2070 == v2076 || v2070[4] <= v2152)
              v2077 = -1;
            else
              v2077 = *(_DWORD *)(*((_QWORD *)v2070 + 1) + 4 * v2152);
            v2078 = *(_QWORD *)(v8 + 520);
            if (v2077 >= (unint64_t)((*(_QWORD *)(v8 + 528) - v2078) >> 3)
              || *(_BYTE *)(*(_QWORD *)(v2078 + 8 * v2077) + 8) != 15)
            {
              goto LABEL_2040;
            }
            if (!(_DWORD)v2068)
              goto LABEL_2034;
            v2079 = v2068 - 1;
            v2080 = (int *)(v2067 + 32 * ((37 * v2077) & v2079));
            v2081 = *v2080;
            if (*v2080 != v2077)
            {
              v2084 = 1;
              LODWORD(v2085) = (37 * v2077) & v2079;
              while (v2081 != -1)
              {
                v2086 = v2085 + v2084++;
                v2085 = v2086 & v2079;
                v2081 = *(_DWORD *)(v2067 + 32 * v2085);
                if (v2081 == v2077)
                {
                  v2080 = (int *)(v2067 + 32 * v2085);
                  v8 = v2186;
                  a1 = (uint64_t *)v2187;
                  v14 = v2191;
                  if (v2080 != v2076)
                    goto LABEL_2027;
                  goto LABEL_2034;
                }
              }
              v8 = v2186;
              a1 = (uint64_t *)v2187;
              v14 = v2191;
              if (v2082)
                goto LABEL_2035;
LABEL_2040:
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Missing param element type for attribute upgrade";
              v2232 = 259;
              v12 = v2188;
              v13 = v2189;
              goto LABEL_1813;
            }
            if (v2080 == v2076)
            {
LABEL_2034:
              if (!v2082)
                goto LABEL_2040;
              goto LABEL_2035;
            }
LABEL_2027:
            if (!v2080[4])
              goto LABEL_2034;
            if (!v2082)
              goto LABEL_2040;
LABEL_2035:
            if (v2066 == 77)
            {
              v2065 = llvm::Attribute::getWithStructRetType(*(llvm::Attribute **)(v8 + 424), v2082, v2083);
            }
            else if (v2066 == 75)
            {
              v2065 = llvm::Attribute::getWithInAllocaType(*(llvm::Attribute **)(v8 + 424), v2082, v2083);
            }
            else
            {
              v2065 = llvm::Attribute::getWithByValType(*(llvm::Attribute **)(v8 + 424), v2082, v2083);
            }
            v2009 = (unsigned int *)__p;
            llvm::Function::addParamAttr((uint64_t)__p, v2063, v2065);
LABEL_2007:
            ++v2064;
          }
          while (v2064 != 3);
          ++v2063;
          if (*((_QWORD *)v2009 + 12) != v2152)
            continue;
          break;
        }
        v13 = v2189;
        v2016 = v2163;
        if (!(_DWORD)v2152
          || (*((_WORD *)v2009 + 9) & 0x3FF0) != 0x530
          || (hasParamAttribute = llvm::Function::hasParamAttribute((uint64_t)v2009, 0, 73),
              v2016 = v2163,
              (hasParamAttribute & 1) != 0))
        {
LABEL_2046:
          v2092 = *((_QWORD *)v2016 + 5);
          if (v2092 < 0x22)
          {
            *a1 = 0;
            v12 = v2188;
            v14 = v2191;
            if (v2092)
              llvm::GlobalObject::setAlignment((uint64_t)__p, v2092 - 1);
          }
          else
          {
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid alignment value";
            v2232 = 259;
            v12 = v2188;
            v14 = v2191;
            if (*a1)
              goto LABEL_1813;
          }
          v2093 = v2163;
          v2094 = *((_QWORD *)v2163 + 6);
          if (v2094)
          {
            v2095 = v2094 - 1;
            v2096 = *(_QWORD *)(v8 + 472);
            if (v2095 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v8 + 480) - v2096) >> 3))
            {
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid ID";
              v2232 = 259;
              goto LABEL_1813;
            }
            v2097 = __p;
            v2098 = v2096 + 24 * v2095;
            v2099 = *(char *)(v2098 + 23);
            if (v2099 >= 0)
              v2100 = (_BYTE *)v2098;
            else
              v2100 = *(_BYTE **)v2098;
            if (v2099 >= 0)
              v2101 = *(unsigned __int8 *)(v2098 + 23);
            else
              v2101 = *(_QWORD *)(v2098 + 8);
            llvm::GlobalObject::setSection((mlir::BytecodeWriterConfig *)__p, v2100, v2101);
            v2093 = v2163;
          }
          else
          {
            v2097 = __p;
          }
          if ((v2097[8] & 0xFu) - 7 >= 2)
          {
            v2102 = v2093[14];
            if (v2102 == 2)
              v2103 = 2;
            else
              v2103 = v2102 == 1;
            llvm::GlobalValue::setVisibility((uint64_t)v2097, v2103);
            v2093 = v2163;
          }
          v2104 = v2156;
          if (v2156 < 9)
            goto LABEL_2080;
          v2105 = *((_QWORD *)v2093 + 8);
          if (v2105)
          {
            v2106 = v2105 - 1;
            v2107 = *(_QWORD *)(v8 + 496);
            if (v2106 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v8 + 504) - v2107) >> 3))
            {
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid ID";
              v2232 = 259;
              goto LABEL_1811;
            }
            v2108 = (__int128 *)(v2107 + 24 * v2106);
            if (*((char *)v2108 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v2108, *((_QWORD *)v2108 + 1));
            }
            else
            {
              v2109 = *v2108;
              __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v2108 + 2);
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v2109;
            }
            llvm::Function::setGC((uint64_t)v2097, (uint64_t)&__dst);
            v8 = v2186;
            v12 = v2188;
            v2104 = v2156;
            v2093 = v2163;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              v2104 = v2156;
              v2093 = v2163;
            }
          }
          if (v2104 < 0xA)
          {
LABEL_2080:
            v2111 = 0;
          }
          else
          {
            v2110 = v2093[18];
            if (v2110 == 2)
              v2111 = 64;
            else
              v2111 = (v2110 == 1) << 7;
          }
          v2112 = 0;
          v2113 = v2097[8];
          v2114 = v2113 & 0xFFFFFF3F | v2111;
          v2097[8] = v2114;
          v2209 = v2097;
          v2210 = 0uLL;
          if (v2104 < 0xB || (v2112 = v2093[20], DWORD2(v2210) = v2112, v2104 == 11))
          {
            if ((v2113 & 0xFu) - 7 < 2)
            {
LABEL_2099:
              v2121 = 0;
              if (v2148 <= 0xB && ((1 << v2148) & 0xC12) != 0)
              {
                v2196[0] = (uint64_t)v2097;
                llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v2174, v2196, (uint64_t)&__s);
                v2121 = 0;
                v2122 = 0;
              }
              else
              {
                v2122 = 0;
              }
              goto LABEL_2102;
            }
            if ((_DWORD)v2148 == 5)
            {
              v2115 = 256;
            }
            else
            {
              if ((_DWORD)v2148 != 6)
              {
LABEL_2098:
                v8 = v2186;
                v12 = v2188;
                goto LABEL_2099;
              }
              v2115 = 512;
            }
            v2097[8] = v2115 | v2114 & 0xFFFFFCFF;
            goto LABEL_2098;
          }
          if ((v2113 & 0xFu) - 7 >= 2)
          {
            v2116 = v2093[22];
            if (v2116 == 2)
              v2117 = 512;
            else
              v2117 = (v2116 == 1) << 8;
            v2097[8] = v2117 | v2114 & 0xFFFFFCFF;
          }
          if (v2104 < 0xD)
            goto LABEL_2098;
          v2118 = *((_QWORD *)v2163 + 12);
          if ((_DWORD)v2118)
          {
            v2119 = *(_QWORD *)(v2186 + 792);
            if (*((_QWORD *)v2163 + 12) > (unint64_t)((*(_QWORD *)(v2186 + 800) - v2119) >> 3))
            {
              v2120 = "Invalid function comdat ID";
              goto LABEL_2124;
            }
            llvm::GlobalObject::setComdat((llvm::GlobalObject *)v2097, *(const void ***)(v2119 + 8 * (v2118 - 1)));
          }
          if (v2156 < 0xE)
          {
            v2121 = 0;
          }
          else
          {
            v2121 = v2163[26];
            DWORD1(v2210) = v2121;
            if (v2156 != 14)
            {
              v2122 = v2163[28];
              LODWORD(v2210) = v2122;
              if (v2156 > 0xF)
              {
                v2097[8] = v2097[8] & 0xFFFFBFFF | ((v2163[30] == 1) << 14);
                inferDSOLocal((uint64_t)v2097);
                if (v2156 >= 0x13)
                {
                  v2124 = *(_QWORD *)(v2186 + 376);
                  if (v2124)
                  {
                    v2126 = *((_QWORD *)v2163 + 17);
                    v2125 = *((_QWORD *)v2163 + 18);
                    if ((unint64_t)(v2125 + v2126) <= *(_QWORD *)(v2186 + 384))
                      llvm::GlobalValue::setPartition((mlir::BytecodeWriterConfig *)v2097, (_BYTE *)(v2124 + v2126), v2125);
                  }
                }
                v8 = v2186;
                v12 = v2188;
                goto LABEL_2103;
              }
              goto LABEL_2122;
            }
          }
          v2122 = 0;
LABEL_2122:
          v8 = v2186;
          v12 = v2188;
LABEL_2102:
          inferDSOLocal((uint64_t)v2097);
LABEL_2103:
          llvm::BitcodeReaderValueList::push_back(v2176, (llvm::Value *)v2097, v2123);
          if (v2122 || v2121 || v2112)
          if (!v2145)
          {
            v2097[8] |= 0x1000000u;
            std::vector<llvm::Function *>::push_back[abi:nn180100](v2169, &__p);
            *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,unsigned long long,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned long long>>,llvm::Function *,unsigned long long,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned long long>>::operator[](v2168, (uint64_t *)&__p) = 0;
          }
          a1 = (uint64_t *)v2187;
          *(_QWORD *)v2187 = 0;
          goto LABEL_1807;
        }
        if (PtrElementTypeByID)
        {
          v8 = v2186;
          v2091 = llvm::Attribute::getWithByValType(*(llvm::Attribute **)(v2186 + 424), PtrElementTypeByID, v2090);
          llvm::Function::addParamAttr((uint64_t)__p, 0, v2091);
          a1 = (uint64_t *)v2187;
          v13 = v2189;
          v2016 = v2163;
          goto LABEL_2046;
        }
        v2120 = "Missing param element type for x86_intrcc upgrade";
LABEL_2124:
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v2120;
        v2232 = 259;
        a1 = (uint64_t *)v2187;
        v12 = v2188;
        v8 = v2186;
LABEL_1807:
        v13 = v2189;
LABEL_1812:
        v14 = v2191;
LABEL_1813:
        if (*a1)
        {
LABEL_1814:
          v16 = 1;
          goto LABEL_1964;
        }
LABEL_1962:
        v16 = 0;
        LODWORD(v2203) = 0;
LABEL_1963:
        v14 = v2191;
LABEL_1964:
        if ((v2206 & 1) != 0)
        {
          v2046 = v2205;
          v2205 = 0;
          if (v2046)
            (*(void (**)(void *))(*(_QWORD *)v2046 + 8))(v2046);
        }
LABEL_20:
        if ((v2201 & 1) != 0)
        {
          v17 = v2200;
          v2200 = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        if ((v16 | 2) == 2)
          continue;
        if (SHIBYTE(v2194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v2194.__r_.__value_.__l.__data_);
        if (v2202 != v2204)
          free(v2202);
        return;
      case 9:
      case 14:
      case 18:
        v23 = (char *)v2202;
        v24 = v2203;
        if (*(_BYTE *)(v8 + 392))
        {
          v25 = *((_QWORD *)v2202 + 1);
          if (v25 + *(_QWORD *)v2202 <= *(_QWORD *)(v8 + 384))
          {
            v26 = (const char *)(*(_QWORD *)(v8 + 376) + *(_QWORD *)v2202);
            v24 = v2203 - 2;
            v23 = (char *)v2202 + 16;
            v27 = 3;
            if ((_DWORD)v2205 != 9)
              v27 = 4;
            if (v24 >= v27)
              goto LABEL_34;
          }
        }
        else
        {
          v25 = 0;
          v26 = "";
          v1230 = 3;
          if ((_DWORD)v2205 != 9)
            v1230 = 4;
          if (v2203 >= v1230)
          {
LABEL_34:
            v2179 = a4;
            v28 = (std::string::size_type)v26;
            LODWORD(v2209) = *(_DWORD *)v23;
            v29 = (int)v2209;
            if (v30)
            {
              if (v22 != 9)
              {
                v1864 = (llvm::Type *)*((unsigned int *)v23 + 2);
                v1865 = 2;
                v1866 = *((_QWORD *)v23 + 3);
                v2155 = v1866;
                v2162 = *((_QWORD *)v23 + 2);
                if (v22 == 14)
                  goto LABEL_1638;
                goto LABEL_1637;
              }
              if (*(_DWORD *)(v30 + 8) == 15)
              {
                v2157 = *(_DWORD *)(v30 + 8);
                v31 = *(_QWORD *)(v8 + 544);
                v32 = *(unsigned int *)(v8 + 560);
                if ((_DWORD)v32)
                {
                  v33 = v32 - 1;
                  v34 = (int *)(v31 + 32 * (((_DWORD)v32 - 1) & (37 * v29)));
                  v35 = *v34;
                  if (*v34 != v29)
                  {
                    v36 = 1;
                    LODWORD(v37) = v33 & (37 * v29);
                    do
                    {
                      v8 = v2186;
                      if (v35 == -1)
                        goto LABEL_1630;
                      v38 = v37 + v36++;
                      v37 = v38 & v33;
                      v35 = *(_DWORD *)(v31 + 32 * v37);
                    }
                    while (v35 != v29);
                    v34 = (int *)(v31 + 32 * v37);
                    v8 = v2186;
                  }
                }
                else
                {
LABEL_1630:
                  v34 = (int *)(v31 + 32 * v32);
                }
                if (v34 == (int *)(v31 + 32 * v32) || !v34[4])
                  v1918 = 0xFFFFFFFFLL;
                else
                  v1918 = **((unsigned int **)v34 + 1);
                LODWORD(v2209) = v1918;
                if (v30)
                {
                  v1864 = (llvm::Type *)(v2157 >> 8);
                  v1865 = 1;
                  v1866 = *((_QWORD *)v23 + 2);
                  v2155 = v1866;
                  v2162 = *((_QWORD *)v23 + 1);
LABEL_1637:
                  if (v22 != 9)
                  {
                    if ((v1866 - 1) > 0x12)
                      LOBYTE(v1923) = 0;
                    else
                      v1923 = dword_181286214[(int)v1866 - 1];
                    v2232 = 261;
                    __s.__r_.__value_.__r.__words[0] = v28;
                    __s.__r_.__value_.__l.__size_ = v25;
                    v1920 = (llvm::GlobalValue *)llvm::GlobalIFunc::create((llvm::PointerType **)v30, v1864, v1923, (const char **)&__s.__r_.__value_.__l.__data_, 0, *(_QWORD *)(v8 + 432));
                    v1921 = v1865 + 2;
                    a4 = v2179;
                    if (v24 == v1865 + 2)
                      goto LABEL_1642;
                    goto LABEL_1647;
                  }
LABEL_1638:
                  if ((v1866 - 1) > 0x12)
                    LOBYTE(v1919) = 0;
                  else
                    v1919 = dword_181286214[(int)v1866 - 1];
                  v2232 = 261;
                  __s.__r_.__value_.__r.__words[0] = v28;
                  __s.__r_.__value_.__l.__size_ = v25;
                  v1920 = (llvm::GlobalValue *)llvm::GlobalAlias::create((llvm::PointerType **)v30, v1864, v1919, (const char **)&__s.__r_.__value_.__l.__data_, *(_QWORD *)(v8 + 432));
                  v1921 = v1865 + 2;
                  a4 = v2179;
                  if (v24 == v1865 + 2)
                  {
LABEL_1642:
                    v1922 = v1921;
                    goto LABEL_1654;
                  }
LABEL_1647:
                  v1922 = v1865 + 3;
                  if ((*((_DWORD *)v1920 + 8) & 0xFu) - 7 >= 2)
                  {
                    v1924 = *(_QWORD *)&v23[8 * v1921];
                    v1925 = (_DWORD)v1924 == 2 ? 32 : 16 * ((_DWORD)v1924 == 1);
                    *((_DWORD *)v1920 + 8) = v1925 | *((_DWORD *)v1920 + 8) & 0xFFFFFFCF;
                    if (v1925)
                    {
                      if ((llvm::GlobalValue::hasExternalWeakLinkage(v1920) & 1) == 0)
                        *((_DWORD *)v1920 + 8) |= 0x4000u;
                    }
                  }
LABEL_1654:
                  if (v22 != 14 && v22 != 9)
                    goto LABEL_1741;
                  if (v24 != v1922)
                  {
                    v1926 = *((_DWORD *)v1920 + 8);
                    if ((v1926 & 0xF) - 7 >= 2)
                    {
                      v1927 = *(_QWORD *)&v23[8 * v1922];
                      if ((_DWORD)v1927 == 2)
                        v1928 = 512;
                      else
                        v1928 = ((_DWORD)v1927 == 1) << 8;
                      v1926 = v1928 | v1926 & 0xFFFFFCFF;
                      *((_DWORD *)v1920 + 8) = v1926;
                    }
                    ++v1922;
                    goto LABEL_1730;
                  }
                  v1926 = *((_DWORD *)v1920 + 8);
                  if ((v1926 & 0xF) - 7 >= 2)
                  {
                    if (v2155 == 5)
                    {
                      v1929 = 256;
                    }
                    else
                    {
                      if (v2155 != 6)
                        goto LABEL_1730;
                      v1929 = 512;
                    }
                    v1926 = v1929 | v1926 & 0xFFFFFCFF;
                    *((_DWORD *)v1920 + 8) = v1926;
                  }
LABEL_1730:
                  if (v24 == v1922)
                  {
                    v1948 = v24;
                  }
                  else
                  {
                    v1948 = v1922 + 1;
                    v1949 = *(_QWORD *)&v23[8 * v1922];
                    if (v1949 >= 5)
                      v1950 = 1024;
                    else
                      v1950 = (_DWORD)v1949 << 10;
                    v1926 = v1950 | v1926 & 0xFFFFE3FF;
                    *((_DWORD *)v1920 + 8) = v1926;
                    ++v1922;
                  }
                  if (v24 != v1948)
                  {
                    ++v1922;
                    v1951 = *(_QWORD *)&v23[8 * v1948];
                    if ((_DWORD)v1951 == 2)
                      v1952 = 64;
                    else
                      v1952 = ((_DWORD)v1951 == 1) << 7;
                    *((_DWORD *)v1920 + 8) = v1952 | v1926 & 0xFFFFFF3F;
                  }
LABEL_1741:
                  if (v24 == v1922)
                  {
                    v1953 = *((_DWORD *)v1920 + 8);
                    if ((v1953 & 0xF) - 7 < 2)
                      goto LABEL_1748;
                  }
                  else
                  {
                    v1954 = *(_QWORD *)&v23[8 * v1922++];
                    v1953 = *((_DWORD *)v1920 + 8) & 0xFFFFBFFF | (((_DWORD)v1954 == 1) << 14);
                    *((_DWORD *)v1920 + 8) = v1953;
                    if ((v1953 & 0xF) - 7 < 2)
                      goto LABEL_1748;
                  }
                  if ((v1953 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v1920) & 1) != 0)
                  {
LABEL_1749:
                    if (v24 > v1922 + 1)
                      llvm::GlobalValue::setPartition(v1920, (_BYTE *)(*(_QWORD *)(v8 + 376) + *(_QWORD *)&v23[8 * v1922]), *(_QWORD *)&v23[8 * v1922 + 8]);
                    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v1920;
                    LODWORD(__dst.__r_.__value_.__l.__data_) = v1955;
                    v1956 = *(_QWORD *)(v8 + 720);
                    v12 = v2188;
                    if (v1956 >= *(_QWORD *)(v8 + 728))
                    {
                      *(_QWORD *)(v8 + 720) = std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__emplace_back_slow_path<llvm::Value *&,unsigned int &>((uint64_t)v2176, (uint64_t *)&__s, &__dst);
                      v1958 = *(char **)(v8 + 1400);
                      v1959 = *(_QWORD *)(v8 + 1408);
                      v13 = v2189;
                      if ((unint64_t)v1958 >= v1959)
                        goto LABEL_1757;
                    }
                    else
                    {
                      v1957 = v1955;
                      *(_QWORD *)v1956 = 6;
                      *(_QWORD *)(v1956 + 8) = 0;
                      *(_QWORD *)(v1956 + 16) = v1920;
                      if (v1920 != (llvm::GlobalValue *)-8192 && v1920 != (llvm::GlobalValue *)-4096 && v1920)
                        llvm::ValueHandleBase::AddToUseList((unint64_t *)v1956);
                      *(_DWORD *)(v1956 + 24) = v1957;
                      *(_QWORD *)(v8 + 720) = v1956 + 32;
                      v1958 = *(char **)(v8 + 1400);
                      v1959 = *(_QWORD *)(v8 + 1408);
                      v13 = v2189;
                      if ((unint64_t)v1958 >= v1959)
                      {
LABEL_1757:
                        v1960 = a4;
                        v1961 = v1920;
                        v1962 = *(char **)(v8 + 1392);
                        v1963 = (v1958 - v1962) >> 4;
                        v1964 = v1963 + 1;
                        if (!((unint64_t)(v1963 + 1) >> 60))
                        {
                          v1965 = v1959 - (_QWORD)v1962;
                          if (v1965 >> 3 > v1964)
                            v1964 = v1965 >> 3;
                          if ((unint64_t)v1965 >= 0x7FFFFFFFFFFFFFF0)
                            v1966 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v1966 = v1964;
                          if (v1966)
                          {
                            if (v1966 >> 60)
                              goto LABEL_2158;
                            v1967 = (char *)operator new(16 * v1966);
                          }
                          else
                          {
                            v1967 = 0;
                          }
                          v1968 = &v1967[16 * v1963];
                          *(_QWORD *)v1968 = v1961;
                          *((_DWORD *)v1968 + 2) = v2162;
                          v1969 = v1968;
                          if (v1958 == v1962)
                          {
                            v8 = v2186;
                            a4 = v1960;
                          }
                          else
                          {
                            v8 = v2186;
                            a4 = v1960;
                            do
                            {
                              *((_OWORD *)v1969 - 1) = *((_OWORD *)v1958 - 1);
                              v1969 -= 16;
                              v1958 -= 16;
                            }
                            while (v1958 != v1962);
                            v1958 = *(char **)(v2186 + 1392);
                          }
                          v12 = v2188;
                          *(_QWORD *)(v8 + 1392) = v1969;
                          v1970 = v1968 + 16;
                          *(_QWORD *)(v8 + 1400) = v1968 + 16;
                          *(_QWORD *)(v8 + 1408) = &v1967[16 * v1966];
                          if (v1958)
                            operator delete(v1958);
                          *(_QWORD *)(v8 + 1400) = v1970;
                          a1 = (uint64_t *)v2187;
                          *(_QWORD *)v2187 = 0;
                          goto LABEL_1962;
                        }
LABEL_2157:
                        abort();
                      }
                    }
                    *(_QWORD *)v1958 = v1920;
                    *((_DWORD *)v1958 + 2) = v2162;
                    *(_QWORD *)(v8 + 1400) = v1958 + 16;
                    a1 = (uint64_t *)v2187;
                    *(_QWORD *)v2187 = 0;
                    goto LABEL_1962;
                  }
                  v1953 = *((_DWORD *)v1920 + 8);
LABEL_1748:
                  *((_DWORD *)v1920 + 8) = v1953 | 0x4000;
                  goto LABEL_1749;
                }
                v1281 = "Missing element type for old-style indirect symbol";
              }
              else
              {
                v1281 = "Invalid type for value";
              }
            }
            else
            {
              v1281 = "Invalid record";
            }
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v1281;
            v2232 = 259;
            a1 = (uint64_t *)v2187;
            v12 = v2188;
            v13 = v2189;
            v14 = v2191;
            a4 = v2179;
            if (*(_QWORD *)v2187)
              goto LABEL_1814;
            goto LABEL_1962;
          }
        }
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
        v2232 = 259;
        a1 = (uint64_t *)v2187;
        v12 = v2188;
        v13 = v2189;
        v14 = v2191;
        if (*(_QWORD *)v2187)
          goto LABEL_1814;
        goto LABEL_1962;
      case 11:
        memset(&__s, 0, sizeof(__s));
        std::string::append[abi:nn180100]<unsigned long long const*,0>(&__s, (unint64_t)v2202, (uint64_t *)v2202 + v2203);
        v1236 = *(_QWORD *)(v8 + 504);
        if (v1236 >= *(_QWORD *)(v8 + 512))
        {
          *(_QWORD *)(v8 + 504) = std::vector<std::string>::__push_back_slow_path<std::string const&>(v2177, (uint64_t)&__s);
        }
        else
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(v8 + 504), __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            v1237 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
            *(_QWORD *)(v1236 + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
            *(_OWORD *)v1236 = v1237;
          }
          *(_QWORD *)(v8 + 504) = v1236 + 24;
        }
LABEL_1569:
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        goto LABEL_1962;
      case 12:
        v1231 = v2202;
        v1232 = v2203;
        v1233 = *(unsigned __int8 *)(v8 + 392);
        if (*(_BYTE *)(v8 + 392))
        {
          v1234 = *((_QWORD *)v2202 + 1);
          if (v1234 + *(_QWORD *)v2202 > *(_QWORD *)(v8 + 384))
            goto LABEL_1129;
          v1235 = (std::string *)(*(_QWORD *)(v8 + 376) + *(_QWORD *)v2202);
          v1232 = v2203 - 2;
          v1231 = (char *)v2202 + 16;
          if (v2203 == 2)
            goto LABEL_1129;
        }
        else
        {
          v1234 = 0;
          v1235 = (std::string *)"";
          if (!(_DWORD)v2203)
          {
LABEL_1129:
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
            v2232 = 259;
            a1 = (uint64_t *)v2187;
            v14 = v2191;
            goto LABEL_1813;
          }
        }
        if ((*v1231 - 2) >= 4)
          v1282 = 0;
        else
          v1282 = *v1231 - 1;
        memset(&__dst, 0, sizeof(__dst));
        if (v1233)
          goto LABEL_1197;
        if (v1232 <= 1)
        {
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid record";
          v2232 = 259;
          a1 = (uint64_t *)v2187;
          v13 = v2189;
          v14 = v2191;
          goto LABEL_1691;
        }
        v1909 = v1231[2];
        v14 = v2191;
        if (v1909 > v1232 - 2)
        {
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Comdat name size too large";
          v2232 = 259;
          a1 = (uint64_t *)v2187;
          v13 = v2189;
          goto LABEL_1691;
        }
        std::string::reserve(&__dst, v1231[2]);
        if (v1909)
        {
          for (i = 0; i != v1909; ++i)
            std::string::push_back(&__dst, *(_QWORD *)&v1231[2 * (i + 2)]);
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1235 = &__dst;
        else
          v1235 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1234 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v1234 = __dst.__r_.__value_.__l.__size_;
        v8 = v2186;
LABEL_1197:
        v1283 = llvm::Module::getOrInsertComdat(*(_QWORD *)(v8 + 432), (int8x16_t *)v1235, (const unsigned __int8 *)v1234);
        v1284 = v1283;
        *(_DWORD *)(v1283 + 8) = v1282;
        v1285 = *(uint64_t **)(v8 + 800);
        v1286 = *(_QWORD *)(v8 + 808);
        if ((unint64_t)v1285 < v1286)
        {
          *v1285 = v1283;
          v1287 = v1285 + 1;
          a1 = (uint64_t *)v2187;
          v13 = v2189;
          v14 = v2191;
LABEL_1690:
          *(_QWORD *)(v8 + 800) = v1287;
          *a1 = 0;
          v12 = v2188;
LABEL_1691:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_1813;
        }
        v1882 = *(char **)(v8 + 792);
        v1883 = ((char *)v1285 - v1882) >> 3;
        v1884 = v1883 + 1;
        if ((unint64_t)(v1883 + 1) >> 61)
          goto LABEL_2157;
        v1885 = v1286 - (_QWORD)v1882;
        if (v1885 >> 2 > v1884)
          v1884 = v1885 >> 2;
        if ((unint64_t)v1885 >= 0x7FFFFFFFFFFFFFF8)
          v1884 = 0x1FFFFFFFFFFFFFFFLL;
        v2183 = a4;
        if (v1884)
        {
          if (v1884 >> 61)
            goto LABEL_2158;
          v1886 = v1884;
          v1887 = (char *)operator new(8 * v1884);
        }
        else
        {
          v1886 = 0;
          v1887 = 0;
        }
        v1930 = (uint64_t *)&v1887[8 * v1883];
        *v1930 = v1284;
        v1287 = v1930 + 1;
        if (v1285 == (uint64_t *)v1882)
        {
          v8 = v2186;
          v14 = v2191;
LABEL_1687:
          *(_QWORD *)(v8 + 792) = v1930;
          *(_QWORD *)(v8 + 800) = v1287;
          *(_QWORD *)(v8 + 808) = &v1887[8 * v1886];
          a1 = (uint64_t *)v2187;
          v13 = v2189;
          if (v1285)
            operator delete(v1285);
          a4 = v2183;
          goto LABEL_1690;
        }
        v1931 = (char *)(v1285 - 1) - v1882;
        v14 = v2191;
        if (v1931 >= 0x58)
        {
          v8 = v2186;
          if ((unint64_t)(v1882 - v1887) >= 0x20)
          {
            v1933 = (v1931 >> 3) + 1;
            v1934 = 8 * (v1933 & 0x3FFFFFFFFFFFFFFCLL);
            v1935 = &v1285[v1934 / 0xFFFFFFFFFFFFFFF8];
            v1930 = (uint64_t *)((char *)v1930 - v1934);
            v1936 = &v1887[8 * v1883 - 16];
            v1937 = v1285 - 2;
            v1938 = v1933 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1939 = *(_OWORD *)v1937;
              *((_OWORD *)v1936 - 1) = *((_OWORD *)v1937 - 1);
              *(_OWORD *)v1936 = v1939;
              v1936 -= 32;
              v1937 -= 4;
              v1938 -= 4;
            }
            while (v1938);
            v1285 = v1935;
            if (v1933 == (v1933 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_1686;
          }
        }
        else
        {
          v8 = v2186;
        }
        do
        {
          v1940 = *--v1285;
          *--v1930 = v1940;
        }
        while (v1285 != (uint64_t *)v1882);
LABEL_1686:
        v1285 = *(uint64_t **)(v8 + 792);
        goto LABEL_1687;
      case 13:
        if ((_DWORD)v2203)
        {
          *(_QWORD *)(v8 + 464) = *(_QWORD *)v2202 - 1;
          goto LABEL_1962;
        }
        v1238 = "Invalid record";
        goto LABEL_1191;
      case 16:
        v1257 = &v2231;
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2231;
        *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = xmmword_181236BB0;
        v1258 = (int8x16x4_t *)v2202;
        v1259 = v2203;
        if (v2203 < 0x81)
        {
          v1260 = 0;
          v1274 = 0;
          v1261 = &v2231;
          v1262 = (int8x16_t *)&xmmword_18125D000;
          if (!(_DWORD)v2203)
            goto LABEL_1785;
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__s, &v2231, v2203, 1);
          v1260 = __s.__r_.__value_.__l.__size_;
          v1261 = (std::string **)__s.__r_.__value_.__r.__words[0];
          v1262 = (int8x16_t *)&xmmword_18125D000;
        }
        v1275 = (char *)v1261 + v1260;
        v1276 = (v1259 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v1276 < 7)
        {
          v1277 = v1258;
          goto LABEL_1783;
        }
        if (v1275 < (_BYTE *)v1258 + 8 * v1259)
        {
          v1277 = v1258;
          if (v1258 < (int8x16x4_t *)((char *)v1261 + v1260 + v1276 + 1))
            goto LABEL_1783;
        }
        v1279 = v1276 + 1;
        if (v1276 >= 0x1F)
        {
          v1280 = v1279 & 0x3FFFFFFFFFFFFFE0;
          v1901 = v1258 + 2;
          v1902 = (_OWORD *)((char *)v1261 + v1260 + 16);
          v1903 = v1279 & 0x3FFFFFFFFFFFFFE0;
          do
          {
            *(_QWORD *)&v1904 = vqtbl4q_s8(v1901[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
            *(_QWORD *)&v1905 = vqtbl4q_s8(*v1901, (int8x16_t)xmmword_18125CFF0).u64[0];
            *((_QWORD *)&v1904 + 1) = vqtbl4q_s8(v1901[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
            *((_QWORD *)&v1905 + 1) = vqtbl4q_s8(v1901[1], (int8x16_t)xmmword_18125CFF0).u64[0];
            *(v1902 - 1) = v1904;
            *v1902 = v1905;
            v1901 += 4;
            v1902 += 2;
            v1903 -= 32;
          }
          while (v1903);
          if (v1279 == v1280)
            goto LABEL_1784;
          if ((v1279 & 0x18) == 0)
          {
            v1277 = (int8x16x4_t *)((char *)v1258 + 8 * v1280);
            v1275 += v1280;
            do
            {
LABEL_1783:
              v1972 = v1277->val[0].i64[0];
              v1277 = (int8x16x4_t *)((char *)v1277 + 8);
              *v1275++ = v1972;
            }
            while (v1277 != (int8x16x4_t *)((char *)v1258 + 8 * v1259));
            goto LABEL_1784;
          }
        }
        else
        {
          v1280 = 0;
        }
        v1275 += v1279 & 0x3FFFFFFFFFFFFFF8;
        v1277 = (int8x16x4_t *)((char *)v1258 + 8 * (v1279 & 0x3FFFFFFFFFFFFFF8));
        v1906 = (std::string **)((char *)v1261 + v1260 + v1280);
        v1907 = v1280 - (v1279 & 0x3FFFFFFFFFFFFFF8);
        v1908 = (int8x16x4_t *)((char *)v1258 + 8 * v1280);
        do
        {
          *v1906++ = vqtbl4q_s8(*v1908++, *v1262).u64[0];
          v1907 += 8;
        }
        while (v1907);
        if (v1279 != (v1279 & 0x3FFFFFFFFFFFFFF8))
          goto LABEL_1783;
LABEL_1784:
        v1274 = __s.__r_.__value_.__l.__size_;
        v1257 = (std::string **)__s.__r_.__value_.__r.__words[0];
LABEL_1785:
        v1973 = v1274 + v1259;
        __s.__r_.__value_.__l.__size_ = v1274 + v1259;
        if (v1274 + v1259 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_2157;
        v1974 = *(_QWORD *)(v8 + 432);
        if (v1973 >= 0x17)
        {
          v1976 = (v1973 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1973 | 7) != 0x17)
            v1976 = v1973 | 7;
          v1977 = v1976 + 1;
          v1975 = operator new(v1976 + 1);
          v1978 = v1977 | 0x8000000000000000;
          v13 = v2189;
          __dst.__r_.__value_.__r.__words[2] = v1978;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1975;
          __dst.__r_.__value_.__l.__size_ = v1973;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v1274 + v1259;
          v1975 = &__dst;
          if (!v1973)
            goto LABEL_1793;
        }
        memmove(v1975, v1257, v1973);
LABEL_1793:
        v12 = v2188;
        *((_BYTE *)v1975 + v1973) = 0;
        v1979 = (void **)(v1974 + 184);
        if (*(char *)(v1974 + 207) < 0)
          operator delete(*v1979);
        *(_OWORD *)v1979 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(_QWORD *)(v1974 + 200) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
        a1 = (uint64_t *)v2187;
        if ((std::string **)__s.__r_.__value_.__l.__data_ != &v2231)
          free(__s.__r_.__value_.__l.__data_);
        goto LABEL_1962;
      default:
        goto LABEL_1962;
    }
  }
}

void `anonymous namespace'::BitcodeReader::parseModule(unsigned long long,BOOL,llvm::ParserCallbacks)::$_0::operator()(std::string::size_type *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  int v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void *v33;
  unint64_t v34;
  char v35;
  std::string::size_type v36;
  std::string::size_type v37;
  _anonymous_namespace_::BitcodeReader *v38;
  _QWORD v39[2];
  _QWORD v40[2];
  std::string __str;
  char v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (**(_BYTE **)a2)
  {
    *a1 = 0;
    return;
  }
  v4 = *(_QWORD *)(a2 + 16);
  **(_BYTE **)a2 = 1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = *(uint64_t **)(a2 + 8);
  else
    v7 = *(uint64_t **)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v4 + 432);
  v12 = *(uint64_t ***)(v9 + 208);
  v10 = v9 + 208;
  v11 = v12;
  v13 = *(char *)(v10 + 23);
  if (v13 >= 0)
    v14 = (uint64_t **)v10;
  else
    v14 = v11;
  v15 = *(_QWORD *)(v10 + 8);
  if (v13 >= 0)
    v16 = v13;
  else
    v16 = v15;
  llvm::UpgradeDataLayoutString(v7, v8, v14, v16, &__str);
  v17 = *(_QWORD *)(a2 + 8);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  v18 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v17 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  *(_OWORD *)v17 = v18;
  v19 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v19 + 32))
  {
    v20 = *(_QWORD *)(v4 + 432);
    v23 = *(_QWORD *)(v20 + 208);
    v21 = v20 + 208;
    v22 = v23;
    v24 = *(char *)(v21 + 23);
    if (v24 >= 0)
      v22 = v21;
    v25 = *(_QWORD *)(v21 + 8);
    if (v24 >= 0)
      v25 = v24;
    v26 = *(uint64_t ***)(a2 + 8);
    LODWORD(v27) = *((char *)v26 + 23);
    v28 = (int)v27 < 0;
    v29 = v26[1];
    if ((int)v27 < 0)
      v26 = (uint64_t **)*v26;
    v27 = (uint64_t *)v27;
    if (v28)
      v27 = v29;
    v40[0] = v22;
    v40[1] = v25;
    v39[0] = v26;
    v39[1] = v27;
    v30 = *(_QWORD *)(v19 + 24);
    if (!v30)
    {
      v38 = (_anonymous_namespace_::BitcodeReader *)std::__throw_bad_function_call[abi:nn180100]();
      return;
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v30 + 48))(&__str, v30, v40, v39);
    if (v42)
    {
      std::string::operator=(*(std::string **)(a2 + 8), &__str);
      if (v42)
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  v31 = *(_QWORD *)(a2 + 8);
  v32 = *(char *)(v31 + 23);
  if (v32 >= 0)
    v33 = *(const void **)(a2 + 8);
  else
    v33 = *(const void **)v31;
  if (v32 >= 0)
    v34 = *(unsigned __int8 *)(v31 + 23);
  else
    v34 = *(_QWORD *)(v31 + 8);
  llvm::DataLayout::parse(v33, v34, (uint64_t)&__str);
  if ((v43 & 1) != 0)
  {
    v37 = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = 0;
    *a1 = v37;
  }
  else
  {
    llvm::Module::setDataLayout(*(llvm::Module **)(v4 + 432), (const llvm::DataLayout *)&__str);
    v35 = v43;
    *a1 = 0;
    if ((v35 & 1) == 0)
    {
      llvm::DataLayout::~DataLayout((llvm::DataLayout *)&__str);
      return;
    }
  }
  v36 = __str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = 0;
  if (v36)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v36 + 8))(v36);
}

void `anonymous namespace'::BitcodeReader::globalCleanup(_anonymous_namespace_::BitcodeReader *this, uint64_t a2, uint64_t a3, uint64_t a4, llvm::BasicBlock *a5, llvm::BasicBlock *a6)
{
  llvm::GlobalVariable *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  llvm::Function **v15;
  llvm::Function *v16;
  llvm::Function *v17;
  llvm::Function **v18;
  llvm::Function *v19;
  llvm::Function *v20;
  llvm::Function *v21;
  llvm::Function **v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  llvm::Function *v30;
  llvm::Function **v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  llvm *v40;
  llvm *v41;
  llvm *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  llvm **v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  llvm::Function *v58[4];
  __int16 v59;

  if (*(_QWORD *)this)
    return;
  if (*(_QWORD *)(a2 + 1368) != *(_QWORD *)(a2 + 1376) || *(_QWORD *)(a2 + 1392) != *(_QWORD *)(a2 + 1400))
  {
    v58[0] = (llvm::Function *)"Malformed global initializer set";
    v59 = 259;
    return;
  }
  v9 = *(_QWORD *)(a2 + 432);
  v10 = v9 + 24;
  v11 = *(_QWORD *)(v9 + 32);
  if (v11 != v9 + 24)
  {
    while (1)
    {
      if (v11)
        v17 = (llvm::Function *)(v11 - 56);
      else
        v17 = 0;
      llvm::MetadataLoader::upgradeDebugIntrinsics((llvm::MetadataLoader::MetadataLoaderImpl **)(a2 + 776), v17);
      v58[0] = 0;
      if (!llvm::UpgradeIntrinsicFunction(v17, v58, v18))
        goto LABEL_10;
      v20 = v58[0];
      v19 = (llvm::Function *)*(unsigned int *)(a2 + 1552);
      if (!(_DWORD)v19)
        goto LABEL_33;
      v12 = *(_QWORD *)(a2 + 1536);
      v13 = (_DWORD)v19 - 1;
      v14 = ((_DWORD)v19 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v15 = (llvm::Function **)(v12 + 16 * v14);
      v16 = *v15;
      if (v17 != *v15)
        break;
LABEL_9:
      v15[1] = v20;
LABEL_10:
      llvm::UpgradeFunctionAttributes(v17, v19);
      v11 = *(_QWORD *)(v11 + 8);
      if (v11 == v10)
      {
        v9 = *(_QWORD *)(a2 + 432);
        goto LABEL_50;
      }
    }
    v22 = 0;
    v23 = 1;
    while (v16 != (llvm::Function *)-4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v16 == (llvm::Function *)-8192;
      if (v24)
        v22 = v15;
      v25 = v14 + v23++;
      v14 = v25 & v13;
      v15 = (llvm::Function **)(v12 + 16 * (v25 & v13));
      v16 = *v15;
      if (v17 == *v15)
        goto LABEL_9;
    }
    if (v22)
      v15 = v22;
    v26 = *(_DWORD *)(a2 + 1544);
    if (4 * v26 + 4 < (3 * (_DWORD)v19))
    {
      if ((int)v19 + ~v26 - *(_DWORD *)(a2 + 1548) > v19 >> 3)
        goto LABEL_18;
    }
    else
    {
LABEL_33:
      LODWORD(v19) = 2 * (_DWORD)v19;
    }
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a2 + 1536, (int)v19);
    v27 = *(_QWORD *)(a2 + 1536);
    v28 = *(_DWORD *)(a2 + 1552) - 1;
    v29 = v28 & ((v17 >> 4) ^ (v17 >> 9));
    v15 = (llvm::Function **)(v27 + 16 * v29);
    v30 = *v15;
    if (v17 == *v15)
    {
LABEL_35:
      ++*(_DWORD *)(a2 + 1544);
      if (v17 == (llvm::Function *)-4096)
        goto LABEL_20;
      goto LABEL_19;
    }
    v31 = 0;
    v32 = 1;
    while (v30 != (llvm::Function *)-4096)
    {
      if (v31)
        v33 = 0;
      else
        v33 = v30 == (llvm::Function *)-8192;
      if (v33)
        v31 = v15;
      v34 = v29 + v32++;
      v29 = v34 & v28;
      v15 = (llvm::Function **)(v27 + 16 * (v34 & v28));
      v30 = *v15;
      if (v17 == *v15)
        goto LABEL_35;
    }
    if (v31)
      v15 = v31;
LABEL_18:
    v21 = *v15;
    ++*(_DWORD *)(a2 + 1544);
    if (v21 == (llvm::Function *)-4096)
    {
LABEL_20:
      *v15 = v17;
      v15[1] = 0;
      goto LABEL_9;
    }
LABEL_19:
    --*(_DWORD *)(a2 + 1548);
    goto LABEL_20;
  }
LABEL_50:
  v35 = v9 + 8;
  v36 = *(_QWORD *)(v9 + 16);
  if (v36 == v9 + 8)
  {
    v37 = 0;
    goto LABEL_78;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  do
  {
    if (v36)
      v40 = (llvm *)(v36 - 56);
    else
      v40 = 0;
    v41 = (llvm *)llvm::UpgradeGlobalVariable(v40, v8);
    if (v41)
    {
      v42 = v41;
      if (v38 < v39)
      {
        *(_QWORD *)v38 = v40;
        *((_QWORD *)v38 + 1) = v41;
        v38 += 16;
        goto LABEL_53;
      }
      v43 = (v38 - v37) >> 4;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60)
        abort();
      if ((v39 - v37) >> 3 > v44)
        v44 = (v39 - v37) >> 3;
      if ((unint64_t)(v39 - v37) >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      if (v44 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v45 = 16 * v44;
      v46 = (char *)operator new(16 * v44);
      v47 = (llvm **)&v46[16 * v43];
      *v47 = v40;
      v47[1] = v42;
      if (v38 == v37)
      {
        v49 = &v46[16 * v43];
        v39 = &v46[v45];
        v38 = (char *)(v47 + 2);
        if (!v37)
          goto LABEL_70;
      }
      else
      {
        v48 = &v46[16 * v43];
        do
        {
          v49 = v48 - 16;
          *((_OWORD *)v48 - 1) = *((_OWORD *)v38 - 1);
          v38 -= 16;
          v48 -= 16;
        }
        while (v38 != v37);
        v39 = &v46[v45];
        v38 = (char *)(v47 + 2);
        if (!v37)
          goto LABEL_70;
      }
      operator delete(v37);
LABEL_70:
      v37 = v49;
    }
LABEL_53:
    v36 = *(_QWORD *)(v36 + 8);
  }
  while (v36 != v35);
  if (v37 != v38)
  {
    v50 = v37;
    do
    {
      llvm::GlobalVariable::eraseFromParent(*(llvm::GlobalVariable **)v50);
      v51 = *(_QWORD *)(a2 + 432);
      v52 = *((_QWORD *)v50 + 1);
      llvm::SymbolTableListTraits<llvm::GlobalVariable>::addNodeToList((llvm::ValueSymbolTable *)(v51 + 8), v52);
      v53 = *(_QWORD *)(v51 + 8);
      *(_QWORD *)(v52 + 56) = v53;
      *(_QWORD *)(v52 + 64) = v51 + 8;
      v52 += 56;
      *(_QWORD *)(v53 + 8) = v52;
      *(_QWORD *)(v51 + 8) = v52;
      v50 += 16;
    }
    while (v50 != v38);
  }
LABEL_78:
  v54 = (_QWORD *)(a2 + 1368);
  v55 = *(void **)(a2 + 1368);
  v56 = a2 + 1392;
  v54[1] = 0;
  v54[2] = 0;
  *v54 = 0;
  if (v55)
    operator delete(v55);
  v57 = *(void **)v56;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 16) = 0;
  *(_QWORD *)v56 = 0;
  if (v57)
    operator delete(v57);
  *(_QWORD *)this = 0;
  if (v37)
    operator delete(v37);
}

void `anonymous namespace'::BitcodeReaderBase::readBlockInfo(_anonymous_namespace_::BitcodeReaderBase *this, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  __int128 v14;
  const char *v15;
  __int16 v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)(a2 + 3), 0, (uint64_t)__p);
  if ((v20 & 1) != 0)
  {
    v9 = __p[0];
    __p[0] = 0;
    *(_QWORD *)this = v9;
    if ((v20 & 1) == 0)
      goto LABEL_11;
LABEL_18:
    v13 = __p[0];
    __p[0] = 0;
    if (v13)
      (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
    return;
  }
  if (!v19)
  {
    v15 = "Malformed block";
    v16 = 259;
    if ((v20 & 1) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
  v4 = *(_OWORD *)__p;
  v5 = v18;
  __p[1] = 0;
  v18 = 0;
  __p[0] = 0;
  v6 = *a2;
  if (*a2)
  {
    v14 = v4;
    v7 = a2[1];
    v8 = (void *)*a2;
    if (v7 != v6)
    {
      do
        llvm::BitstreamBlockInfo::BlockInfo::~BlockInfo((llvm::BitstreamBlockInfo::BlockInfo *)(v7 - 80));
      while (v7 != v6);
      v8 = (void *)*a2;
    }
    a2[1] = v6;
    operator delete(v8);
    v4 = v14;
  }
  *(_OWORD *)a2 = v4;
  a2[2] = v5;
  *(_QWORD *)this = 0;
  if ((v20 & 1) != 0)
    goto LABEL_18;
LABEL_11:
  if (v19)
  {
    v10 = (char *)__p[0];
    if (__p[0])
    {
      v11 = (char *)__p[1];
      v12 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          llvm::BitstreamBlockInfo::BlockInfo::~BlockInfo((llvm::BitstreamBlockInfo::BlockInfo *)(v11 - 80));
        while (v11 != v10);
        v12 = __p[0];
      }
      __p[1] = v10;
      operator delete(v12);
    }
  }
}

void `anonymous namespace'::BitcodeReader::resolveGlobalAndIndirectSymbolInits(_anonymous_namespace_::BitcodeReader *this, _QWORD *a2, uint64_t a3, uint64_t a4, llvm::BasicBlock *a5, llvm::BasicBlock *a6)
{
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  llvm::Function **v11;
  _QWORD *v12;
  _OWORD *v13;
  llvm::BasicBlock *v14;
  llvm::Constant *v15;
  _OWORD *v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  llvm::BasicBlock *v27;
  _QWORD *v28;
  int v29;
  llvm::Constant **v31;
  uint64_t v32;
  llvm::Constant ***v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  llvm::Function **v46;
  __int128 v47;
  char *v48;
  int v49;
  llvm::BasicBlock *v50;
  llvm::Constant *v51;
  int v52;
  llvm::BasicBlock *v53;
  llvm::Function **v54;
  int v55;
  llvm::BasicBlock *v56;
  char *v57;
  unint64_t v58;
  _BYTE *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  char *v65;
  char *v66;
  __int128 v67;
  const llvm::Twine *v68;
  char *v69;
  llvm::Function **__p;
  unsigned int *v72;
  llvm::Constant *v73;
  char v74;
  __int16 v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t *)a2[171];
  v8 = (uint64_t *)a2[172];
  *(_OWORD *)(a2 + 171) = 0u;
  a2[173] = 0;
  v9 = (unsigned int *)a2[174];
  v10 = (unsigned int *)a2[175];
  *((_OWORD *)a2 + 87) = 0u;
  a2[176] = 0;
  __p = (llvm::Function **)a2[177];
  v72 = v9;
  a2[177] = 0;
  v11 = (llvm::Function **)a2[178];
  a2[179] = 0;
  a2[178] = 0;
  if (v7 != v8)
  {
    v12 = a2 + 172;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v14 = (llvm::BasicBlock *)*((unsigned int *)v8 - 2);
          v8 -= 2;
          if (v14 >= ((a2[90] - a2[89]) >> 5))
            break;
          v15 = v73;
          if ((v74 & 1) != 0)
          {
LABEL_105:
            v46 = __p;
            *(_QWORD *)this = v15;
            if (!__p)
              goto LABEL_100;
            goto LABEL_99;
          }
          llvm::GlobalVariable::setInitializer(*v8, v73);
          if (v7 == v8)
            goto LABEL_25;
        }
        v16 = (_OWORD *)a2[172];
        v17 = a2[173];
        if ((unint64_t)v16 >= v17)
          break;
        *v16 = *(_OWORD *)v8;
        v13 = v16 + 1;
LABEL_4:
        *v12 = v13;
        if (v7 == v8)
          goto LABEL_25;
      }
      v18 = (_OWORD *)a2[171];
      v19 = v16 - v18;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60)
LABEL_113:
        abort();
      v21 = v17 - (_QWORD)v18;
      if (v21 >> 3 > v20)
        v20 = v21 >> 3;
      v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v20;
      if (!v22)
        break;
      if (v22 >> 60)
LABEL_114:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v23 = (char *)operator new(16 * v22);
      v24 = &v23[16 * v19];
      *(_OWORD *)v24 = *(_OWORD *)v8;
      v25 = (uint64_t)v24;
      if (v16 != v18)
        goto LABEL_21;
LABEL_23:
      a2[171] = v25;
      v13 = v24 + 16;
      a2[172] = v24 + 16;
      a2[173] = &v23[16 * v22];
      v9 = v72;
      if (!v16)
        goto LABEL_4;
      operator delete(v16);
      *v12 = v13;
      if (v7 == v8)
        goto LABEL_25;
    }
    v23 = 0;
    v24 = (char *)(16 * v19);
    *(_OWORD *)(16 * v19) = *(_OWORD *)v8;
    v25 = 16 * v19;
    if (v16 == v18)
      goto LABEL_23;
    do
    {
LABEL_21:
      *(_OWORD *)(v25 - 16) = *(v16 - 1);
      v25 -= 16;
      --v16;
    }
    while (v16 != v18);
    v16 = (_OWORD *)a2[171];
    goto LABEL_23;
  }
LABEL_25:
  if (v9 == v10)
  {
LABEL_63:
    v46 = __p;
    if (__p == v11)
    {
LABEL_98:
      *(_QWORD *)this = 0;
      v9 = v72;
      if (!v46)
        goto LABEL_100;
      goto LABEL_99;
    }
    while (1)
    {
      v49 = *((_DWORD *)v11 - 4);
      if (v49)
      {
        v50 = (llvm::BasicBlock *)(v49 - 1);
        if (v50 < ((a2[90] - a2[89]) >> 5))
        {
          v51 = v73;
          if ((v74 & 1) != 0)
            goto LABEL_107;
          llvm::Function::setPersonalityFn(*(v11 - 3), v73);
          *((_DWORD *)v11 - 4) = 0;
        }
      }
      v52 = *((_DWORD *)v11 - 3);
      if (v52)
      {
        v53 = (llvm::BasicBlock *)(v52 - 1);
        if (v53 < ((a2[90] - a2[89]) >> 5))
        {
          v51 = v73;
          if ((v74 & 1) != 0)
            goto LABEL_107;
          llvm::Function::setPrefixData(*(v11 - 3), v73);
          v52 = 0;
          *((_DWORD *)v11 - 3) = 0;
        }
      }
      v54 = v11 - 3;
      v55 = *((_DWORD *)v11 - 2);
      if (!v55)
        goto LABEL_80;
      v56 = (llvm::BasicBlock *)(v55 - 1);
      if (v56 < ((a2[90] - a2[89]) >> 5))
        break;
LABEL_81:
      v57 = (char *)a2[178];
      v58 = a2[179];
      if ((unint64_t)v57 < v58)
      {
        v47 = *(_OWORD *)v54;
        *((_QWORD *)v57 + 2) = *(v11 - 1);
        *(_OWORD *)v57 = v47;
        v48 = v57 + 24;
      }
      else
      {
        v59 = (_BYTE *)a2[177];
        v60 = 0xAAAAAAAAAAAAAAABLL * ((v57 - v59) >> 3) + 1;
        if (v60 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (_QWORD)v59) >> 3);
        if (2 * v61 > v60)
          v60 = 2 * v61;
        if (v61 >= 0x555555555555555)
          v62 = 0xAAAAAAAAAAAAAAALL;
        else
          v62 = v60;
        if (v62)
        {
          if (v62 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_114;
          v63 = (char *)operator new(24 * v62);
        }
        else
        {
          v63 = 0;
        }
        v64 = *(_OWORD *)v54;
        v65 = &v63[8 * ((v57 - v59) >> 3)];
        *((_QWORD *)v65 + 2) = v54[2];
        *(_OWORD *)v65 = v64;
        v66 = v65;
        if (v57 != v59)
        {
          do
          {
            v67 = *(_OWORD *)(v57 - 24);
            *((_QWORD *)v66 - 1) = *((_QWORD *)v57 - 1);
            *(_OWORD *)(v66 - 24) = v67;
            v66 -= 24;
            v57 -= 24;
          }
          while (v57 != v59);
          v57 = (char *)a2[177];
        }
        a2[177] = v66;
        v48 = v65 + 24;
        a2[178] = v65 + 24;
        a2[179] = &v63[24 * v62];
        if (v57)
          operator delete(v57);
        v46 = __p;
      }
      a2[178] = v48;
LABEL_67:
      v11 = v54;
      if (v46 == v54)
        goto LABEL_98;
    }
    v51 = v73;
    if ((v74 & 1) != 0)
    {
LABEL_107:
      *(_QWORD *)this = v51;
      v9 = v72;
      if (!v46)
        goto LABEL_100;
LABEL_99:
      operator delete(v46);
      goto LABEL_100;
    }
    llvm::Function::setPrologueData(*(v11 - 3), v73);
    *((_DWORD *)v11 - 2) = 0;
    v52 = *((_DWORD *)v11 - 3);
LABEL_80:
    if (!(*((_DWORD *)v11 - 4) | v52))
      goto LABEL_67;
    goto LABEL_81;
  }
  while (1)
  {
    v27 = (llvm::BasicBlock *)*(v10 - 2);
    v10 -= 4;
    if (v27 >= ((a2[90] - a2[89]) >> 5))
    {
      v36 = (_OWORD *)a2[175];
      v37 = a2[176];
      if ((unint64_t)v36 < v37)
      {
        *v36 = *(_OWORD *)v10;
        v26 = v36 + 1;
LABEL_28:
        a2[175] = v26;
        goto LABEL_29;
      }
      v38 = (_OWORD *)a2[174];
      v39 = v36 - v38;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60)
        goto LABEL_113;
      v41 = v37 - (_QWORD)v38;
      if (v41 >> 3 > v40)
        v40 = v41 >> 3;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        if (v42 >> 60)
          goto LABEL_114;
        v43 = (char *)operator new(16 * v42);
        v44 = &v43[16 * v39];
        *(_OWORD *)v44 = *(_OWORD *)v10;
        v45 = (uint64_t)v44;
        if (v36 == v38)
          goto LABEL_61;
      }
      else
      {
        v43 = 0;
        v44 = (char *)(16 * v39);
        *(_OWORD *)(16 * v39) = *(_OWORD *)v10;
        v45 = 16 * v39;
        if (v36 == v38)
          goto LABEL_61;
      }
      do
      {
        *(_OWORD *)(v45 - 16) = *(v36 - 1);
        v45 -= 16;
        --v36;
      }
      while (v36 != v38);
      v36 = (_OWORD *)a2[174];
LABEL_61:
      a2[174] = v45;
      v26 = v44 + 16;
      a2[175] = v44 + 16;
      a2[176] = &v43[16 * v42];
      v9 = v72;
      if (v36)
        operator delete(v36);
      goto LABEL_28;
    }
    v15 = v73;
    if ((v74 & 1) != 0)
      goto LABEL_105;
    v28 = *(_QWORD **)v10;
    v29 = *(unsigned __int8 *)(*(_QWORD *)v10 + 16);
    if (*(_QWORD *)v10 && v29 == 1)
      break;
    if (!v28 || v29 != 2)
    {
      v68 = (const llvm::Twine *)(a2 + 1);
      v69 = "Expected an alias or an ifunc";
      goto LABEL_111;
    }
    v31 = (llvm::Constant **)(v28 - 4);
    if (*(v28 - 4))
    {
      *(_QWORD *)*(v28 - 2) = *(v28 - 3);
      v32 = *(v28 - 3);
      if (v32)
        *(_QWORD *)(v32 + 16) = *(v28 - 2);
    }
    *v31 = v15;
    if (v15)
    {
      v35 = *((_QWORD *)v15 + 1);
      v33 = (llvm::Constant ***)((char *)v15 + 8);
      v34 = v35;
      *(v28 - 3) = v35;
      if (v35)
        *(_QWORD *)(v34 + 16) = v28 - 3;
      *(v28 - 2) = v33;
      *v33 = v31;
    }
LABEL_29:
    if (v9 == v10)
      goto LABEL_63;
  }
  if (*(_QWORD *)v73 == *v28)
  {
    llvm::GlobalAlias::setAliasee((uint64_t)v28, v73);
    goto LABEL_29;
  }
  v68 = (const llvm::Twine *)(a2 + 1);
  v69 = "Alias and aliasee types don't match";
LABEL_111:
  v73 = (llvm::Constant *)v69;
  v75 = 259;
  v46 = __p;
  if (__p)
    goto LABEL_99;
LABEL_100:
  if (v9)
    operator delete(v9);
  if (v7)
    operator delete(v7);
}

void llvm::Module::setModuleInlineAsm(uint64_t a1, const void *a2, size_t a3)
{
  __int128 *p_dst;
  std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 __dst;
  unint64_t v13;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v13 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v13) = a3;
    p_dst = &__dst;
    if (!a3)
    {
      LOBYTE(__dst) = 0;
      v7 = (std::string *)(a1 + 88);
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_13:
      operator delete(v7->__r_.__value_.__l.__data_);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = __dst;
      v7->__r_.__value_.__r.__words[2] = v13;
      v8 = *(char *)(a1 + 111);
      if ((v8 & 0x80000000) == 0)
        goto LABEL_6;
LABEL_14:
      v11 = *(_QWORD *)(a1 + 96);
      if (v11 && *(_BYTE *)(v7->__r_.__value_.__r.__words[0] + v11 - 1) != 10)
        goto LABEL_17;
      return;
    }
  }
  memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  v7 = (std::string *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    goto LABEL_13;
LABEL_5:
  *(_OWORD *)&v7->__r_.__value_.__l.__data_ = __dst;
  v7->__r_.__value_.__r.__words[2] = v13;
  v8 = *(char *)(a1 + 111);
  if (v8 < 0)
    goto LABEL_14;
LABEL_6:
  if ((_BYTE)v8 && v7->__r_.__value_.__s.__data_[v8 - 1] != 10)
LABEL_17:
    std::string::push_back(v7, 10);
}

uint64_t std::__optional_storage_base<std::function<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::function<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (!*(_BYTE *)(result + 32))
      return result;
    result = *(_QWORD *)(result + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (result == v3)
    {
      v4 = 4;
      result = v3;
    }
    else
    {
      if (!result)
        goto LABEL_15;
      v4 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
LABEL_15:
    v7 = *(_QWORD *)(a2 + 24);
    if (v7)
    {
      if (v7 == a2)
      {
        *(_QWORD *)(v3 + 24) = v3;
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v3);
      }
      else
      {
        *(_QWORD *)(v3 + 24) = v7;
        *(_QWORD *)(a2 + 24) = 0;
      }
    }
    else
    {
      *(_QWORD *)(v3 + 24) = 0;
    }
    return result;
  }
  if (*(_BYTE *)(result + 32))
  {
    result = *(_QWORD *)(result + 24);
    if (result == v3)
    {
      v5 = 4;
      result = v3;
    }
    else
    {
      if (!result)
      {
LABEL_21:
        *(_BYTE *)(v3 + 32) = 0;
        return result;
      }
      v5 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v5))();
    goto LABEL_21;
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      *(_QWORD *)(result + 24) = result;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), result);
      *(_BYTE *)(v3 + 32) = 1;
    }
    else
    {
      *(_QWORD *)(result + 24) = v6;
      *(_QWORD *)(a2 + 24) = 0;
      *(_BYTE *)(result + 32) = 1;
    }
  }
  else
  {
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

void `anonymous namespace'::BitcodeReader::parseAttrKind(_anonymous_namespace_::BitcodeReaderBase *a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4;
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;

  v9 = a3;
  v4 = 78;
  switch(a3)
  {
    case 1:
      goto LABEL_89;
    case 2:
      *a4 = 3;
      *(_QWORD *)a1 = 0;
      break;
    case 3:
      *a4 = 73;
      *(_QWORD *)a1 = 0;
      break;
    case 4:
      *a4 = 13;
      *(_QWORD *)a1 = 0;
      break;
    case 5:
      *a4 = 12;
      *(_QWORD *)a1 = 0;
      break;
    case 6:
      *a4 = 15;
      *(_QWORD *)a1 = 0;
      break;
    case 7:
      *a4 = 17;
      *(_QWORD *)a1 = 0;
      break;
    case 8:
      *a4 = 18;
      *(_QWORD *)a1 = 0;
      break;
    case 9:
      *a4 = 19;
      *(_QWORD *)a1 = 0;
      break;
    case 10:
      *a4 = 20;
      *(_QWORD *)a1 = 0;
      break;
    case 11:
      *a4 = 22;
      *(_QWORD *)a1 = 0;
      break;
    case 12:
      *a4 = 24;
      *(_QWORD *)a1 = 0;
      break;
    case 13:
      *a4 = 26;
      *(_QWORD *)a1 = 0;
      break;
    case 14:
      *a4 = 27;
      *(_QWORD *)a1 = 0;
      break;
    case 15:
      *a4 = 38;
      *(_QWORD *)a1 = 0;
      break;
    case 16:
      *a4 = 31;
      *(_QWORD *)a1 = 0;
      break;
    case 17:
      *a4 = 32;
      *(_QWORD *)a1 = 0;
      break;
    case 18:
      *a4 = 37;
      *(_QWORD *)a1 = 0;
      break;
    case 19:
      *a4 = 43;
      *(_QWORD *)a1 = 0;
      break;
    case 20:
      *a4 = 46;
      *(_QWORD *)a1 = 0;
      break;
    case 21:
      *a4 = 47;
      *(_QWORD *)a1 = 0;
      break;
    case 22:
      *a4 = 48;
      *(_QWORD *)a1 = 0;
      break;
    case 23:
      *a4 = 49;
      *(_QWORD *)a1 = 0;
      break;
    case 24:
      *a4 = 50;
      *(_QWORD *)a1 = 0;
      break;
    case 25:
      *a4 = 85;
      *(_QWORD *)a1 = 0;
      break;
    case 26:
      *a4 = 61;
      *(_QWORD *)a1 = 0;
      break;
    case 27:
      *a4 = 62;
      *(_QWORD *)a1 = 0;
      break;
    case 28:
      *a4 = 63;
      *(_QWORD *)a1 = 0;
      break;
    case 29:
      *a4 = 77;
      *(_QWORD *)a1 = 0;
      break;
    case 30:
      *a4 = 52;
      *(_QWORD *)a1 = 0;
      break;
    case 31:
      *a4 = 56;
      *(_QWORD *)a1 = 0;
      break;
    case 32:
      *a4 = 55;
      *(_QWORD *)a1 = 0;
      break;
    case 33:
      *a4 = 86;
      *(_QWORD *)a1 = 0;
      break;
    case 34:
      *a4 = 71;
      *(_QWORD *)a1 = 0;
      break;
    case 35:
      *a4 = 4;
      *(_QWORD *)a1 = 0;
      break;
    case 36:
      *a4 = 5;
      *(_QWORD *)a1 = 0;
      break;
    case 37:
      *a4 = 44;
      *(_QWORD *)a1 = 0;
      break;
    case 38:
      *a4 = 75;
      *(_QWORD *)a1 = 0;
      break;
    case 39:
      *a4 = 39;
      *(_QWORD *)a1 = 0;
      break;
    case 40:
      *a4 = 14;
      *(_QWORD *)a1 = 0;
      break;
    case 41:
      *a4 = 81;
      *(_QWORD *)a1 = 0;
      break;
    case 42:
      *a4 = 82;
      *(_QWORD *)a1 = 0;
      break;
    case 43:
      *a4 = 6;
      *(_QWORD *)a1 = 0;
      break;
    case 44:
      *a4 = 51;
      *(_QWORD *)a1 = 0;
      break;
    case 46:
      *a4 = 67;
      *(_QWORD *)a1 = 0;
      break;
    case 47:
      *a4 = 66;
      *(_QWORD *)a1 = 0;
      break;
    case 48:
      *a4 = 30;
      *(_QWORD *)a1 = 0;
      break;
    case 51:
      *a4 = 80;
      *(_QWORD *)a1 = 0;
      break;
    case 52:
      *a4 = 70;
      *(_QWORD *)a1 = 0;
      break;
    case 53:
      *a4 = 59;
      *(_QWORD *)a1 = 0;
      break;
    case 54:
      *a4 = 64;
      *(_QWORD *)a1 = 0;
      break;
    case 55:
      *a4 = 53;
      *(_QWORD *)a1 = 0;
      break;
    case 56:
      *a4 = 23;
      *(_QWORD *)a1 = 0;
      break;
    case 57:
      *a4 = 41;
      *(_QWORD *)a1 = 0;
      break;
    case 58:
      *a4 = 57;
      *(_QWORD *)a1 = 0;
      break;
    case 59:
      *a4 = 60;
      *(_QWORD *)a1 = 0;
      break;
    case 60:
      *a4 = 11;
      *(_QWORD *)a1 = 0;
      break;
    case 61:
      *a4 = 68;
      *(_QWORD *)a1 = 0;
      break;
    case 62:
      *a4 = 25;
      *(_QWORD *)a1 = 0;
      break;
    case 63:
      *a4 = 35;
      *(_QWORD *)a1 = 0;
      break;
    case 64:
      *a4 = 54;
      *(_QWORD *)a1 = 0;
      break;
    case 65:
      *a4 = 76;
      *(_QWORD *)a1 = 0;
      break;
    case 66:
      *a4 = 28;
      *(_QWORD *)a1 = 0;
      break;
    case 67:
      *a4 = 40;
      *(_QWORD *)a1 = 0;
      break;
    case 68:
      *a4 = 36;
      *(_QWORD *)a1 = 0;
      break;
    case 69:
      *a4 = 72;
      *(_QWORD *)a1 = 0;
      break;
    case 70:
      *a4 = 16;
      *(_QWORD *)a1 = 0;
      break;
    case 71:
      *a4 = 21;
      *(_QWORD *)a1 = 0;
      break;
    case 72:
      *a4 = 10;
      *(_QWORD *)a1 = 0;
      break;
    case 73:
      *a4 = 29;
      *(_QWORD *)a1 = 0;
      break;
    case 74:
      *a4 = 87;
      *(_QWORD *)a1 = 0;
      break;
    case 75:
      *a4 = 65;
      *(_QWORD *)a1 = 0;
      break;
    case 76:
      *a4 = 34;
      *(_QWORD *)a1 = 0;
      break;
    case 77:
      *a4 = 74;
      *(_QWORD *)a1 = 0;
      break;
    case 78:
      *a4 = 8;
      *(_QWORD *)a1 = 0;
      break;
    case 79:
      *a4 = 33;
      *(_QWORD *)a1 = 0;
      break;
    case 80:
      *a4 = 1;
      *(_QWORD *)a1 = 0;
      break;
    case 81:
      *a4 = 2;
      *(_QWORD *)a1 = 0;
      break;
    case 82:
      *a4 = 79;
      *(_QWORD *)a1 = 0;
      break;
    case 83:
      *a4 = 45;
      *(_QWORD *)a1 = 0;
      break;
    case 84:
      *a4 = 9;
      *(_QWORD *)a1 = 0;
      break;
    case 85:
      *a4 = 58;
      *(_QWORD *)a1 = 0;
      break;
    case 86:
      *a4 = 83;
      *(_QWORD *)a1 = 0;
      break;
    case 87:
      *a4 = 84;
      *(_QWORD *)a1 = 0;
      break;
    case 88:
      *a4 = 42;
      *(_QWORD *)a1 = 0;
      break;
    case 89:
      *a4 = 69;
      *(_QWORD *)a1 = 0;
      break;
    case 90:
      v4 = 7;
LABEL_89:
      *a4 = v4;
      *(_QWORD *)a1 = 0;
      break;
    default:
      *a4 = 0;
      v5[0] = "Unknown attribute kind (";
      v5[2] = &v9;
      v6 = 3331;
      v7[0] = v5;
      v7[2] = ")";
      v8 = 770;
      break;
  }
}

unint64_t `anonymous namespace'::BitcodeReader::createIdentifiedStructType(_QWORD *a1, uint64_t *a2, int8x16_t *a3, const unsigned __int8 *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;

  v5 = llvm::StructType::create(a2, a3, a4);
  v6 = v5;
  v7 = (unint64_t *)a1[235];
  v8 = v7;
  v9 = a1[236];
  if ((unint64_t)v7 < v9)
  {
    *v7 = v5;
    v10 = (uint64_t)(v7 + 1);
    goto LABEL_23;
  }
  v11 = (char *)a1[234];
  v12 = ((char *)v7 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    abort();
  v14 = v9 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = (unint64_t *)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v6;
    v10 = (uint64_t)(v17 + 1);
    v19 = (char *)((char *)v7 - v11);
    if (v7 == (unint64_t *)v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (unint64_t *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v6;
  v10 = 8 * v12 + 8;
  v19 = (char *)((char *)v7 - v11);
  if (v7 != (unint64_t *)v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v7[v22 / 0xFFFFFFFFFFFFFFF8];
    v17 = (unint64_t *)((char *)v17 - v22);
    v23 = &v16[8 * v12 - 16];
    v24 = v7 - 2;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 4;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *--v8;
        *--v17 = v27;
      }
      while (v8 != (unint64_t *)v11);
    }
    v8 = (unint64_t *)a1[234];
  }
LABEL_21:
  a1[234] = v17;
  a1[235] = v10;
  a1[236] = v18;
  if (v8)
    operator delete(v8);
LABEL_23:
  a1[235] = v10;
  return v6;
}

void std::vector<`anonymous namespace'::BitcodeReader::FunctionOperandInfo>::push_back[abi:nn180100](void **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
    v7 = v5 + 24;
LABEL_3:
    a1[1] = v7;
    return;
  }
  v8 = (char *)*a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
  v10 = v9 + 1;
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[24 * v9];
  *(_OWORD *)v14 = *a2;
  *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
  v7 = v14 + 24;
  if (v5 != v8)
  {
    do
    {
      v15 = *(_OWORD *)(v5 - 24);
      *((_QWORD *)v14 - 1) = *((_QWORD *)v5 - 1);
      *(_OWORD *)(v14 - 24) = v15;
      v14 -= 24;
      v5 -= 24;
    }
    while (v5 != v8);
    v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[24 * v12];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v7;
}

_QWORD *std::vector<std::string>::__emplace_back_slow_path<>(void **a1)
{
  void **v1;
  void **v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  __int128 v11;
  void **v12;

  v2 = (void **)*a1;
  v1 = (void **)a1[1];
  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  v10 = v8 + 24;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v11 = *(_OWORD *)(v1 - 3);
      *((_QWORD *)v8 - 1) = *(v1 - 1);
      *(_OWORD *)(v8 - 24) = v11;
      v8 -= 24;
      *(v1 - 2) = 0;
      *(v1 - 1) = 0;
      *(v1 - 3) = 0;
      v1 -= 3;
    }
    while (v1 != v2);
    v1 = (void **)*a1;
    v12 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v12 != v1)
    {
      if (*((char *)v12 - 1) < 0)
        operator delete(*(v12 - 3));
      v12 -= 3;
    }
  }
  if (v1)
    operator delete(v1);
  return v10;
}

uint64_t llvm::GlobalValue::setVisibility(uint64_t this, char a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = this;
  v3 = *(_DWORD *)(this + 32) & 0xF;
  v4 = *(_DWORD *)(this + 32) & 0xFFFFFFCF | (16 * (a2 & 3));
  *(_DWORD *)(this + 32) = v4;
  if ((v3 - 7) < 2)
    goto LABEL_5;
  if (16 * (a2 & 3))
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD *)(v2 + 32);
LABEL_5:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return this;
}

uint64_t inferDSOLocal(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 32);
  if ((v2 & 0xFu) - 7 < 2)
    goto LABEL_5;
  if ((v2 & 0x30) != 0)
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) == 0)
    {
      v2 = *(_DWORD *)(v1 + 32);
LABEL_5:
      *(_DWORD *)(v1 + 32) = v2 | 0x4000;
    }
  }
  return this;
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50460;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50460;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_113BitcodeReader21callValueTypeCallbackEPN4llvm5ValueEjE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_113BitcodeReader21callValueTypeCallbackEPN4llvm5ValueEjE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_113BitcodeReader21callValueTypeCallbackEPN4llvm5ValueEjE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_113BitcodeReader21callValueTypeCallbackEPN4llvm5ValueEjE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E504B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E504B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 544);
  v5 = *(unsigned int *)(v3 + 560);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v8 = (int *)(v4 + 32 * v5);
    goto LABEL_8;
  }
  v6 = *a2;
  v7 = v5 - 1;
  v8 = (int *)(v4 + 32 * (((_DWORD)v5 - 1) & (37 * *a2)));
  v9 = *v8;
  if (*v8 != *a2)
  {
    v10 = 1;
    LODWORD(v11) = v7 & (37 * v6);
    while (v9 != -1)
    {
      v12 = v11 + v10++;
      v11 = v12 & v7;
      v9 = *(_DWORD *)(v4 + 32 * v11);
      if (v9 == v6)
      {
        v8 = (int *)(v4 + 32 * v11);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 == (int *)(v4 + 32 * v5))
    return 0xFFFFFFFFLL;
  v13 = *a3;
  if (v8[4] <= v13)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(*((_QWORD *)v8 + 1) + 4 * v13);
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_113BitcodeReader21callValueTypeCallbackEPN4llvm5ValueEjE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_113BitcodeReader21callValueTypeCallbackEPN4llvm5ValueEjE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_113BitcodeReader21callValueTypeCallbackEPN4llvm5ValueEjE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_113BitcodeReader21callValueTypeCallbackEPN4llvm5ValueEjE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E503B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E503B0;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_113BitcodeReader16parseBitcodeIntoEPN4llvm6ModuleEbbNS1_15ParserCallbacksEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_113BitcodeReader16parseBitcodeIntoEPN4llvm6ModuleEbbNS1_15ParserCallbacksEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_113BitcodeReader16parseBitcodeIntoEPN4llvm6ModuleEbbNS1_15ParserCallbacksEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_113BitcodeReader16parseBitcodeIntoEPN4llvm6ModuleEbbNS1_15ParserCallbacksEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E50408;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E50408;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 544);
  v5 = *(unsigned int *)(v3 + 560);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v8 = (int *)(v4 + 32 * v5);
    goto LABEL_8;
  }
  v6 = *a2;
  v7 = v5 - 1;
  v8 = (int *)(v4 + 32 * (((_DWORD)v5 - 1) & (37 * *a2)));
  v9 = *v8;
  if (*v8 != *a2)
  {
    v10 = 1;
    LODWORD(v11) = v7 & (37 * v6);
    while (v9 != -1)
    {
      v12 = v11 + v10++;
      v11 = v12 & v7;
      v9 = *(_DWORD *)(v4 + 32 * v11);
      if (v9 == v6)
      {
        v8 = (int *)(v4 + 32 * v11);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 == (int *)(v4 + 32 * v5))
    return 0xFFFFFFFFLL;
  v13 = *a3;
  if (v8[4] <= v13)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(*((_QWORD *)v8 + 1) + 4 * v13);
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_113BitcodeReader16parseBitcodeIntoEPN4llvm6ModuleEbbNS1_15ParserCallbacksEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_113BitcodeReader16parseBitcodeIntoEPN4llvm6ModuleEbbNS1_15ParserCallbacksEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_113BitcodeReader16parseBitcodeIntoEPN4llvm6ModuleEbbNS1_15ParserCallbacksEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_113BitcodeReader16parseBitcodeIntoEPN4llvm6ModuleEbbNS1_15ParserCallbacksEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::target_type()
{
}

_QWORD *std::__optional_storage_base<std::function<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v2 = result;
  v8 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)result + 32) != *(unsigned __int8 *)(a2 + 32))
  {
    if (!*((_BYTE *)result + 32))
    {
      result = *(_QWORD **)(a2 + 24);
      if (result)
      {
        if (result == (_QWORD *)a2)
        {
          v2[3] = v2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v2);
        }
        else
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
          v2[3] = result;
        }
      }
      else
      {
        v2[3] = 0;
      }
      *((_BYTE *)v2 + 32) = 1;
      return result;
    }
    result = (_QWORD *)result[3];
    if (result == v2)
    {
      v4 = 4;
      result = v2;
    }
    else
    {
      if (!result)
      {
LABEL_16:
        *((_BYTE *)v2 + 32) = 0;
        return result;
      }
      v4 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    goto LABEL_16;
  }
  if (!*((_BYTE *)result + 32))
    return result;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](v6, v2);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_27;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_27:
    v22 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    v10[6] = *(uint64_t **)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    *v6 = (uint64_t *)v10;
    v23 = (uint64_t *)**a1;
    v24 = (uint64_t *)v10;
    if (v23)
    {
      *a1 = v23;
      v24 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(llvm::MetadataLoader::MetadataLoaderImpl *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  llvm::BitstreamCursor *v7;
  int v8;
  __int128 v9;
  _BYTE *v10;
  llvm::MetadataLoader::MetadataLoaderImpl *v11;
  uint64_t v12;
  llvm *v13;
  llvm::MetadataLoader::MetadataLoaderImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int8x16x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  llvm *v23;
  _BYTE *v24;
  int *v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  int8x16x4_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  size_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  int8x16x4_t *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  uint64_t v93;
  int8x16x4_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t inserted;
  llvm::NamedMDNode *v98;
  uint64_t v99;
  char v100;
  llvm::MetadataLoader::MetadataLoaderImpl *v101;
  void *v102;
  llvm::MDNode *v103;
  unsigned __int8 *MetadataFwdRef;
  _UNKNOWN **v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  char *v110;
  llvm::MetadataLoader::MetadataLoaderImpl *v111;
  llvm::MetadataLoader::MetadataLoaderImpl *v112;
  uint64_t v113;
  void *v114;
  __int128 v115;
  uint64_t v116;
  __int16 v117;
  void *v118;
  uint64_t v119;
  _BYTE v120[512];
  llvm::MetadataLoader::MetadataLoaderImpl *v121;
  char v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 25);
  v7 = (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328);
  v8 = *(_DWORD *)(v6 + 32);
  v9 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)((char *)this + 328) = *(_OWORD *)v6;
  *(_OWORD *)((char *)this + 344) = v9;
  *((_DWORD *)this + 90) = v8;
  *((_DWORD *)this + 91) = *(_DWORD *)(v6 + 36);
  if ((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328) != (llvm::MetadataLoader::MetadataLoaderImpl *)v6)
    std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((uint64_t)this + 368, *(_QWORD **)(v6 + 40), *(_QWORD **)(v6 + 48), (uint64_t)(*(_QWORD *)(v6 + 48) - *(_QWORD *)(v6 + 40)) >> 4);
  llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)this + 392, (uint64_t *)(v6 + 64));
  *((_QWORD *)this + 83) = *(_QWORD *)(v6 + 336);
  v10 = v120;
  v118 = v120;
  v119 = 0x4000000000;
  *((_QWORD *)this + 90) = 0;
LABEL_5:
  while (2)
  {
    v12 = 8 * *((_QWORD *)this + 43) - *((unsigned int *)this + 90);
    while (1)
    {
      llvm::BitstreamCursor::advance(v7, 1, (uint64_t)&v114);
      if ((v115 & 1) != 0)
      {
        v14 = (llvm::MetadataLoader::MetadataLoaderImpl *)v114;
LABEL_13:
        if (v14)
        {
          *(_BYTE *)(a2 + 8) |= 1u;
          *(_QWORD *)a2 = v14;
          goto LABEL_147;
        }
        if (v2 <= 3)
          goto LABEL_17;
        goto LABEL_5;
      }
      if ((_DWORD)v114 != 2)
        break;
      llvm::BitstreamCursor::SkipBlock(v7, (uint64_t *)&v121);
      v14 = v121;
      if ((v115 & 1) != 0)
      {
        v13 = (llvm *)v114;
        v114 = 0;
        if (v13)
          v13 = (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v13 + 8))(v13);
      }
      if (v14)
        goto LABEL_13;
    }
    LODWORD(v2) = (_DWORD)v114;
    v3 = (unint64_t)v114 >> 32;
LABEL_17:
    switch((int)v2)
    {
      case 0:
      case 2:
        v114 = "Malformed block";
        v117 = 259;
        v105 = llvm::BitcodeErrorCategory(v13);
        v106 = operator new(0x38uLL);
        v107 = llvm::StringError::StringError((uint64_t)v106, (llvm::Twine *)&v114, 1, (uint64_t)v105);
        *(_BYTE *)(a2 + 8) |= 1u;
        *(_QWORD *)a2 = v107;
        goto LABEL_147;
      case 1:
        *(_BYTE *)(a2 + 8) &= ~1u;
        *(_BYTE *)a2 = 1;
        goto LABEL_147;
      case 3:
        v15 = *((_QWORD *)this + 43);
        v16 = *((unsigned int *)this + 90);
        llvm::BitstreamCursor::skipRecord(v7, v3, (uint64_t)&v114);
        if ((v115 & 1) != 0)
        {
          v11 = (llvm::MetadataLoader::MetadataLoaderImpl *)v114;
          LODWORD(v2) = 3;
          if (!v114)
            continue;
          goto LABEL_145;
        }
        LODWORD(v2) = 3;
        v17 = 8 * v15 - v16;
        switch((int)v114)
        {
          case 1:
          case 2:
          case 3:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 37:
          case 40:
          case 41:
          case 44:
          case 45:
          case 47:
            *((_QWORD *)this + 85) = *((_QWORD *)this + 84);
            *((_QWORD *)this + 88) = *((_QWORD *)this + 87);
            *(_BYTE *)(a2 + 8) &= ~1u;
            *(_BYTE *)a2 = 0;
            goto LABEL_147;
          case 4:
            *((_QWORD *)this + 43) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *((_DWORD *)this + 90) = 0;
            if ((v17 & 0x3F) != 0)
            {
              llvm::SimpleBitstreamCursor::Read(v7, v17 & 0x3F, (uint64_t)&v114);
              if ((v115 & 1) != 0)
              {
                v11 = (llvm::MetadataLoader::MetadataLoaderImpl *)v114;
                if (v114)
                  goto LABEL_145;
              }
            }
            LODWORD(v119) = 0;
            llvm::BitstreamCursor::readRecord(v7, v3, (uint64_t)&v118, 0, (uint64_t)&v114);
            if ((v115 & 1) != 0)
              goto LABEL_142;
            v18 = (int8x16x4_t *)v118;
            v19 = v119;
            v114 = &v116;
            v115 = xmmword_1812349A0;
            if (v119 < 9)
            {
              v20 = 0;
              v37 = 0;
              v22 = (int8x16_t)xmmword_18125CFF0;
              v21 = (int8x16_t)xmmword_18125D000;
              if (!(_DWORD)v119)
                goto LABEL_124;
            }
            else
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v114, &v116, v119, 1);
              v20 = v115;
              v22 = (int8x16_t)xmmword_18125CFF0;
              v21 = (int8x16_t)xmmword_18125D000;
            }
            v38 = (char *)v114;
            v39 = (char *)v114 + v20;
            v40 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (v40 < 7)
            {
              v41 = v18;
              goto LABEL_122;
            }
            if (v39 < (char *)v18 + 8 * v19)
            {
              v41 = v18;
              if (v18 < (int8x16x4_t *)((char *)v114 + v20 + v40 + 1))
                goto LABEL_122;
            }
            v42 = v40 + 1;
            if (v40 >= 0x1F)
            {
              v43 = v42 & 0x3FFFFFFFFFFFFFE0;
              v87 = v18 + 2;
              v88 = (char *)v114 + v20 + 16;
              v89 = v42 & 0x3FFFFFFFFFFFFFE0;
              do
              {
                *(_QWORD *)&v90 = vqtbl4q_s8(v87[-2], v22).u64[0];
                *(_QWORD *)&v91 = vqtbl4q_s8(*v87, v22).u64[0];
                *((_QWORD *)&v90 + 1) = vqtbl4q_s8(v87[-1], v22).u64[0];
                *((_QWORD *)&v91 + 1) = vqtbl4q_s8(v87[1], v22).u64[0];
                *(v88 - 1) = v90;
                *v88 = v91;
                v87 += 4;
                v88 += 2;
                v89 -= 32;
              }
              while (v89);
              if (v42 == v43)
                goto LABEL_123;
              if ((v42 & 0x18) != 0)
                goto LABEL_117;
              v41 = (int8x16x4_t *)((char *)v18 + 8 * v43);
              v39 += v43;
              do
              {
LABEL_122:
                v95 = v41->val[0].i64[0];
                v41 = (int8x16x4_t *)((char *)v41 + 8);
                *v39++ = v95;
              }
              while (v41 != (int8x16x4_t *)((char *)v18 + 8 * v19));
              goto LABEL_123;
            }
            v43 = 0;
LABEL_117:
            v39 += v42 & 0x3FFFFFFFFFFFFFF8;
            v41 = (int8x16x4_t *)((char *)v18 + 8 * (v42 & 0x3FFFFFFFFFFFFFF8));
            v92 = &v38[v20 + v43];
            v93 = v43 - (v42 & 0x3FFFFFFFFFFFFFF8);
            v94 = (int8x16x4_t *)((char *)v18 + 8 * v43);
            do
            {
              *(_QWORD *)v92 = vqtbl4q_s8(*v94, v21).u64[0];
              v92 += 8;
              ++v94;
              v93 += 8;
            }
            while (v93);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFF8))
              goto LABEL_122;
LABEL_123:
            v37 = v115;
LABEL_124:
            *(_QWORD *)&v115 = v37 + v19;
            llvm::SimpleBitstreamCursor::Read(v7, *((_DWORD *)this + 91), (uint64_t)&v121);
            if ((v122 & 1) != 0
              || (LODWORD(v119) = 0,
                  llvm::BitstreamCursor::readRecord(v7, (int)v121, (uint64_t)&v118, 0, (uint64_t)&v121),
                  (v122 & 1) != 0))
            {
              v100 = 0;
              v101 = v121;
              *(_BYTE *)(a2 + 8) |= 1u;
              *(_QWORD *)a2 = v101;
              v102 = v114;
              if (v114 == &v116)
                goto LABEL_130;
            }
            else
            {
              v96 = v119;
              inserted = llvm::Module::getOrInsertNamedMetadata(*((_QWORD *)this + 27), (int8x16_t *)v114, (const unsigned __int8 *)v115);
              if ((_DWORD)v96)
              {
                v98 = (llvm::NamedMDNode *)inserted;
                v99 = 0;
                do
                {
                  v103 = (llvm::MDNode *)MetadataFwdRef;
                  if (MetadataFwdRef)
                  {
                    switch(*MetadataFwdRef)
                    {
                      case 5u:
                      case 6u:
                      case 7u:
                      case 8u:
                      case 9u:
                      case 0xAu:
                      case 0xBu:
                      case 0xCu:
                      case 0xDu:
                      case 0xEu:
                      case 0xFu:
                      case 0x10u:
                      case 0x11u:
                      case 0x12u:
                      case 0x13u:
                      case 0x14u:
                      case 0x15u:
                      case 0x16u:
                      case 0x17u:
                      case 0x18u:
                      case 0x19u:
                      case 0x1Au:
                      case 0x1Bu:
                      case 0x1Cu:
                      case 0x1Du:
                      case 0x1Eu:
                      case 0x1Fu:
                      case 0x20u:
                      case 0x21u:
                      case 0x22u:
                      case 0x23u:
                        break;
                      default:
                        v103 = 0;
                        break;
                    }
                  }
                  v99 += 8;
                  llvm::NamedMDNode::addOperand(v98, v103);
                }
                while (8 * v96 != v99);
              }
              v100 = 1;
              v102 = v114;
              if (v114 == &v116)
              {
LABEL_130:
                LODWORD(v2) = 3;
                if ((v100 & 1) == 0)
                  goto LABEL_147;
                continue;
              }
            }
            free(v102);
            goto LABEL_130;
          case 35:
            *((_QWORD *)this + 43) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *((_DWORD *)this + 90) = 0;
            if ((v17 & 0x3F) != 0)
            {
              llvm::SimpleBitstreamCursor::Read(v7, v17 & 0x3F, (uint64_t)&v114);
              if ((v115 & 1) != 0)
              {
                v11 = (llvm::MetadataLoader::MetadataLoaderImpl *)v114;
                if (v114)
                  goto LABEL_145;
              }
            }
            v114 = 0;
            *(_QWORD *)&v115 = 0;
            LODWORD(v119) = 0;
            llvm::BitstreamCursor::readRecord(v7, v3, (uint64_t)&v118, (unsigned __int8 **)&v114, (uint64_t)&v121);
            if ((v122 & 1) != 0)
            {
              v11 = v121;
              goto LABEL_145;
            }
            v24 = v10;
            v25 = (int *)v118;
            v26 = *(unsigned int *)v118;
            v27 = (_BYTE *)*((_QWORD *)this + 84);
            if (v26 > (uint64_t)(*((_QWORD *)this + 86) - (_QWORD)v27) >> 4)
            {
              v28 = (_BYTE *)*((_QWORD *)this + 85);
              v29 = 16 * v26;
              v23 = (llvm *)operator new(16 * v26);
              v30 = (char *)v23 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF0);
              v31 = v30;
              if (v28 != v27)
              {
                v32 = (char *)v23 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF0);
                do
                {
                  v31 = v32 - 16;
                  *((_OWORD *)v32 - 1) = *((_OWORD *)v28 - 1);
                  v28 -= 16;
                  v32 -= 16;
                }
                while (v28 != v27);
              }
              *((_QWORD *)this + 84) = v31;
              *((_QWORD *)this + 85) = v30;
              *((_QWORD *)this + 86) = (char *)v23 + v29;
              if (v27)
              {
                operator delete(v27);
                v25 = (int *)v118;
              }
            }
            v121 = this;
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings(v23, v25, v119, (const char *)v114, v115, (uint64_t (*)(uint64_t, const char *, unint64_t))llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(void)::$_0>, (uint64_t)&v121, &v113);
            v33 = v113;
            if (!v113)
            {
              LODWORD(v2) = 3;
              v10 = v24;
              continue;
            }
            *(_BYTE *)(a2 + 8) |= 1u;
            *(_QWORD *)a2 = v33;
            v10 = v24;
            goto LABEL_147;
          case 36:
            LODWORD(v2) = 3;
            if (!*((_QWORD *)this + 90))
            {
              *((_QWORD *)this + 90) = v12;
              LODWORD(v2) = 3;
            }
            continue;
          case 38:
            *((_QWORD *)this + 43) = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *((_DWORD *)this + 90) = 0;
            if ((v17 & 0x3F) != 0)
            {
              llvm::SimpleBitstreamCursor::Read(v7, v17 & 0x3F, (uint64_t)&v114);
              if ((v115 & 1) != 0)
              {
                v11 = (llvm::MetadataLoader::MetadataLoaderImpl *)v114;
                if (v114)
                  goto LABEL_145;
              }
            }
            LODWORD(v119) = 0;
            llvm::BitstreamCursor::readRecord(v7, v3, (uint64_t)&v118, 0, (uint64_t)&v114);
            if ((v115 & 1) != 0)
              goto LABEL_142;
            if ((_DWORD)v119 != 2)
            {
              v114 = "Invalid record";
              v117 = 259;
              error((const llvm::Twine *)&v112, (llvm::Twine *)&v114);
              *(_BYTE *)(a2 + 8) |= 1u;
              v11 = v112;
              goto LABEL_146;
            }
            v34 = 8 * *((_QWORD *)this + 43) - *((unsigned int *)this + 90);
            v35 = *(_QWORD *)v118 + (*((_QWORD *)v118 + 1) << 32) + v34;
            *((_QWORD *)this + 43) = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *((_DWORD *)this + 90) = 0;
            if ((v35 & 0x3F) != 0)
            {
              llvm::SimpleBitstreamCursor::Read(v7, v35 & 0x3F, (uint64_t)&v114);
              if ((v115 & 1) != 0)
              {
                v11 = (llvm::MetadataLoader::MetadataLoaderImpl *)v114;
                if (v114)
                  goto LABEL_145;
              }
            }
            do
            {
              llvm::BitstreamCursor::advance(v7, 1, (uint64_t)&v114);
              if ((v115 & 1) != 0)
              {
                v44 = 1;
                v2 = (unint64_t)v114;
                goto LABEL_66;
              }
              v2 = (unint64_t)v114;
              if ((_DWORD)v114 != 2)
              {
                v44 = 0;
                goto LABEL_66;
              }
              llvm::BitstreamCursor::SkipBlock(v7, (uint64_t *)&v121);
              v2 = (unint64_t)v121;
              if ((v115 & 1) != 0)
              {
                v36 = v114;
                v114 = 0;
                if (v36)
                  (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
              }
            }
            while (!v2);
            v44 = 1;
LABEL_66:
            if (!v44)
            {
              v3 = HIDWORD(v2);
              LODWORD(v119) = 0;
              llvm::BitstreamCursor::readRecord(v7, SHIDWORD(v2), (uint64_t)&v118, 0, (uint64_t)&v114);
              if ((v115 & 1) == 0)
              {
                v45 = v119;
                v46 = (_BYTE *)*((_QWORD *)this + 87);
                v109 = v10;
                if (v119 <= (unint64_t)((uint64_t)(*((_QWORD *)this + 89) - (_QWORD)v46) >> 3))
                {
                  v53 = v34;
LABEL_80:
                  if (!(_DWORD)v45)
                    continue;
                  v108 = a2;
                  v64 = (char *)v118;
                  v65 = (char *)v118 + 8 * v45;
                  v66 = (char *)*((_QWORD *)this + 88);
                  v110 = v65;
                  while (1)
                  {
                    while (1)
                    {
                      v53 += *(_QWORD *)v64;
                      v67 = *((_QWORD *)this + 89);
                      if ((unint64_t)v66 >= v67)
                        break;
                      *(_QWORD *)v66 = v53;
                      v66 += 8;
                      *((_QWORD *)this + 88) = v66;
                      v64 += 8;
                      if (v64 == v65)
                        goto LABEL_112;
                    }
                    v68 = (char *)*((_QWORD *)this + 87);
                    v69 = (v66 - v68) >> 3;
                    v70 = v69 + 1;
                    if ((unint64_t)(v69 + 1) >> 61)
                      abort();
                    v71 = v67 - (_QWORD)v68;
                    if (v71 >> 2 > v70)
                      v70 = v71 >> 2;
                    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                      v72 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v72 = v70;
                    if (v72)
                    {
                      if (v72 >> 61)
                        std::__throw_bad_array_new_length[abi:nn180100]();
                      v73 = v53;
                      v74 = operator new(8 * v72);
                      v53 = v73;
                      v75 = (uint64_t *)&v74[8 * v69];
                      *v75 = v73;
                      v76 = (uint64_t)(v75 + 1);
                      if (v66 == v68)
                        goto LABEL_98;
                    }
                    else
                    {
                      v74 = 0;
                      v75 = (uint64_t *)(8 * v69);
                      *(_QWORD *)(8 * v69) = v53;
                      v76 = 8 * v69 + 8;
                      if (v66 == v68)
                        goto LABEL_98;
                    }
                    v77 = v66 - 8 - v68;
                    if (v77 >= 0x168)
                    {
                      if (&v74[v66 - v68 - 8 - (v77 & 0xFFFFFFFFFFFFFFF8)] > &v74[v66 - v68 - 8])
                      {
                        v78 = v66;
                      }
                      else if (&v66[-(v77 & 0xFFFFFFFFFFFFFFF8) - 8] > v66 - 8)
                      {
                        v78 = v66;
                      }
                      else if ((unint64_t)(v68 - v74) >= 0x20)
                      {
                        v81 = (v77 >> 3) + 1;
                        v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
                        v78 = &v66[-v82];
                        v75 = (uint64_t *)((char *)v75 - v82);
                        v83 = &v74[8 * v69 - 16];
                        v84 = v66 - 16;
                        v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v86 = *(_OWORD *)v84;
                          *(v83 - 1) = *((_OWORD *)v84 - 1);
                          *v83 = v86;
                          v83 -= 2;
                          v84 -= 32;
                          v85 -= 4;
                        }
                        while (v85);
                        if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_98;
                      }
                      else
                      {
                        v78 = v66;
                      }
                    }
                    else
                    {
                      v78 = v66;
                    }
                    do
                    {
                      v79 = *((_QWORD *)v78 - 1);
                      v78 -= 8;
                      *--v75 = v79;
                    }
                    while (v78 != v68);
LABEL_98:
                    *((_QWORD *)this + 87) = v75;
                    *((_QWORD *)this + 88) = v76;
                    *((_QWORD *)this + 89) = &v74[8 * v72];
                    if (v68)
                    {
                      v80 = v53;
                      operator delete(v68);
                      v53 = v80;
                    }
                    v65 = v110;
                    LODWORD(v3) = HIDWORD(v2);
                    *((_QWORD *)this + 88) = v76;
                    v64 += 8;
                    v66 = (char *)v76;
                    if (v64 == v110)
                    {
LABEL_112:
                      a2 = v108;
                      v10 = v109;
                      goto LABEL_5;
                    }
                  }
                }
                v47 = (_BYTE *)*((_QWORD *)this + 88);
                v48 = 8 * v119;
                v49 = (char *)operator new(v48);
                v50 = v47 - v46;
                v51 = &v49[(v47 - v46) & 0xFFFFFFFFFFFFFFF8];
                v52 = v51;
                v53 = v34;
                if (v47 != v46)
                {
                  v54 = v47 - 8 - v46;
                  if (v54 < 0x58)
                  {
                    v52 = &v49[(v47 - v46) & 0xFFFFFFFFFFFFFFF8];
                    do
                    {
LABEL_77:
                      v63 = *((_QWORD *)v47 - 1);
                      v47 -= 8;
                      *((_QWORD *)v52 - 1) = v63;
                      v52 -= 8;
                    }
                    while (v47 != v46);
                    goto LABEL_78;
                  }
                  v52 = &v49[(v47 - v46) & 0xFFFFFFFFFFFFFFF8];
                  if ((unint64_t)(&v47[-(v50 & 0xFFFFFFFFFFFFFFF8)] - v49) < 0x20)
                    goto LABEL_77;
                  v55 = v50 >> 3;
                  v56 = (v54 >> 3) + 1;
                  v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
                  v58 = &v47[-v57];
                  v52 = &v51[-v57];
                  v59 = &v49[8 * v55 - 16];
                  v60 = (__int128 *)(v47 - 16);
                  v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v62 = *v60;
                    *((_OWORD *)v59 - 1) = *(v60 - 1);
                    *(_OWORD *)v59 = v62;
                    v59 -= 32;
                    v60 -= 2;
                    v61 -= 4;
                  }
                  while (v61);
                  v47 = v58;
                  if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_77;
                }
LABEL_78:
                *((_QWORD *)this + 87) = v52;
                *((_QWORD *)this + 88) = v51;
                *((_QWORD *)this + 89) = &v49[v48];
                v10 = v109;
                if (v46)
                {
                  operator delete(v46);
                  v53 = v34;
                  v45 = v119;
                }
                goto LABEL_80;
              }
LABEL_142:
              v11 = (llvm::MetadataLoader::MetadataLoaderImpl *)v114;
LABEL_145:
              *(_BYTE *)(a2 + 8) |= 1u;
LABEL_146:
              *(_QWORD *)a2 = v11;
              goto LABEL_147;
            }
            *(_BYTE *)(a2 + 8) |= 1u;
            *(_QWORD *)a2 = v2;
LABEL_147:
            if (v118 != v10)
              free(v118);
            return;
          case 39:
            v114 = "Corrupted Metadata block";
            v117 = 259;
            error((const llvm::Twine *)&v111, (llvm::Twine *)&v114);
            *(_BYTE *)(a2 + 8) |= 1u;
            v11 = v111;
            goto LABEL_146;
          default:
            continue;
        }
      default:
        continue;
    }
  }
}

uint64_t error(const llvm::Twine *a1, llvm::Twine *a2)
{
  _UNKNOWN **v4;
  void *v5;
  uint64_t result;

  v4 = llvm::BitcodeErrorCategory(a1);
  v5 = operator new(0x38uLL);
  result = llvm::StringError::StringError((uint64_t)v5, a2, 1, (uint64_t)v4);
  *(_QWORD *)a1 = result;
  return result;
}

void llvm::SimpleBitstreamCursor::JumpToBit(llvm::SimpleBitstreamCursor *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 2) = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *((_DWORD *)this + 8) = 0;
  v4 = a2 & 0x3F;
  if (v4 && (llvm::SimpleBitstreamCursor::Read(this, v4, (uint64_t)&v5), (v6 & 1) != 0))
    *a3 = v5;
  else
    *a3 = 0;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings(llvm *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, unint64_t a5@<X4>, uint64_t (*a6)(uint64_t, const char *, unint64_t)@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  int v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  _UNKNOWN **v13;
  void *v14;
  llvm::Twine *v15;
  const char *v18;
  unint64_t v19;
  BOOL v20;
  const char *v21;
  const char *v22;
  const char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  char v29;
  __int16 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a3 != 2)
  {
    v12 = "Invalid record: metadata strings layout";
    goto LABEL_7;
  }
  v9 = *a2;
  if (!*a2)
  {
    v12 = "Invalid record: metadata strings with no strings";
    goto LABEL_7;
  }
  v10 = a2[2];
  v11 = a5 - v10;
  if (a5 < v10)
  {
    v12 = "Invalid record: metadata strings corrupt offset";
LABEL_7:
    v23 = v12;
    LOWORD(v27) = 259;
    v13 = llvm::BitcodeErrorCategory(a1);
    v14 = operator new(0x38uLL);
    v15 = (llvm::Twine *)&v23;
    goto LABEL_8;
  }
  v23 = a4;
  v24 = v10;
  v25 = 0;
  v26 = 0;
  v18 = &a4[v10];
  v27 = 0;
  while (v27 || v24 > v25)
  {
    llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)&v23, 6u, (uint64_t)&v28);
    if ((v29 & 1) != 0)
    {
      v21 = v28;
      *a8 = (uint64_t)v28;
      if (v21)
        return;
      v19 = 0;
    }
    else
    {
      v19 = v28;
      *a8 = 0;
      v20 = v11 >= v19;
      v11 -= v19;
      if (!v20)
      {
        v22 = "Invalid record: metadata strings truncated chars";
        goto LABEL_21;
      }
    }
    a1 = (llvm *)a6(a7, v18, v19);
    v18 += v19;
    if (!--v9)
    {
      *a8 = 0;
      return;
    }
  }
  v22 = "Invalid record: metadata strings bad length";
LABEL_21:
  v28 = v22;
  v30 = 259;
  v13 = llvm::BitcodeErrorCategory(a1);
  v14 = operator new(0x38uLL);
  v15 = (llvm::Twine *)&v28;
LABEL_8:
  *a8 = llvm::StringError::StringError((uint64_t)v14, v15, 1, (uint64_t)v13);
}

void llvm::MetadataLoader::MetadataLoaderImpl::loadGlobalDeclAttachments(llvm::MetadataLoader::MetadataLoaderImpl *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  llvm::MDNode *v15;
  void *v16;
  llvm::MDNode *v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint8x16_t *v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  const std::error_category *v28;
  void **v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  int8x8_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  char v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint8x16_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int8x16_t v78;
  unint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int64x2_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int64x2_t v88;
  uint8x16_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  int8x16_t v94;
  uint64x2_t v95;
  uint64x2_t v96;
  uint64x2_t v97;
  uint64x2_t v98;
  uint64x2_t v99;
  uint64x2_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  int8x16_t v103;
  uint32x4_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  uint32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int64x2_t v112;
  int8x16_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int8x16_t v116;
  unint64_t v117;
  unint64_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int8x16_t v122;
  uint8x8_t *v123;
  unint64_t v124;
  int8x16_t v125;
  int8x16_t v126;
  uint8x8_t v127;
  uint16x8_t v128;
  uint32x4_t v129;
  uint64x2_t v130;
  uint64x2_t v131;
  uint64x2_t v132;
  uint32x4_t v133;
  uint64x2_t v134;
  int8x16_t v135;
  int64x2_t v136;
  int8x16_t v137;
  unint64_t v138;
  const std::error_category *v139;
  void **v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  uint8x16_t v157;
  uint16x8_t v158;
  uint16x8_t v159;
  uint32x4_t v160;
  uint32x4_t v161;
  int8x16_t v162;
  uint64x2_t v163;
  uint64x2_t v164;
  uint64x2_t v165;
  uint64x2_t v166;
  uint64x2_t v167;
  uint64x2_t v168;
  uint64x2_t v169;
  uint64x2_t v170;
  int8x16_t v171;
  uint32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  uint32x4_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int64x2_t v180;
  int8x16_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int8x16_t v184;
  uint64_t v185;
  unint64_t v186;
  int64x2_t v187;
  int64x2_t v188;
  int64x2_t v189;
  int8x16_t v190;
  uint8x8_t *v191;
  int8x16_t v192;
  int8x16_t v193;
  uint8x8_t v194;
  uint16x8_t v195;
  uint32x4_t v196;
  uint64x2_t v197;
  uint64x2_t v198;
  uint64x2_t v199;
  uint32x4_t v200;
  uint64x2_t v201;
  int8x16_t v202;
  int64x2_t v203;
  int8x16_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  llvm::MDNode *v208;
  char v209;
  _UNKNOWN **v210;
  void *v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int64x2_t v217;
  unint64_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  uint8x16_t v229;
  uint16x8_t v230;
  uint16x8_t v231;
  uint32x4_t v232;
  uint32x4_t v233;
  int8x16_t v234;
  uint64x2_t v235;
  uint64x2_t v236;
  uint64x2_t v237;
  uint64x2_t v238;
  uint64x2_t v239;
  uint64x2_t v240;
  uint64x2_t v241;
  uint64x2_t v242;
  int8x16_t v243;
  uint32x4_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  uint32x4_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int64x2_t v252;
  int8x16_t v253;
  int8x8_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int8x16_t v257;
  uint64_t v258;
  unint64_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int8x16_t v263;
  uint8x8_t *v264;
  unint64_t v265;
  int8x16_t v266;
  int8x16_t v267;
  uint8x8_t v268;
  uint16x8_t v269;
  uint32x4_t v270;
  uint64x2_t v271;
  uint64x2_t v272;
  uint64x2_t v273;
  uint32x4_t v274;
  uint64x2_t v275;
  int64x2_t v276;
  int8x16_t v277;
  int8x8_t v278;
  uint64_t v279;
  unsigned __int8 *v280;
  unsigned int v281;
  BOOL v282;
  uint64_t v283;
  uint64_t v284;
  _UNKNOWN **v285;
  void *v286;
  uint64_t v287;
  int v288;
  void *v289;
  int8x16_t v290;
  uint64_t v291;
  llvm::MDNode *v292;
  llvm::MDNode *v293;
  llvm::MDNode *v294;
  unsigned int v295;
  void *__p;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  _BYTE v301[512];
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  int64_t v305;
  int64_t v306;
  int64_t v307;
  _QWORD v308[2];
  _QWORD v309[34];
  llvm::MDNode *v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  int v317;
  void **p_p;
  llvm::MDNode *v319;
  const char *v320;
  uint64_t v321;
  unint64_t v322;
  __int16 v323;
  uint64_t v324;
  std::error_code v325;
  std::error_code v326;

  v324 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 90))
  {
    a2[8] &= ~1u;
    *a2 = 1;
    return;
  }
  v4 = (__int128 *)*((_QWORD *)this + 25);
  v6 = *v4;
  v5 = v4[1];
  v304 = *((_QWORD *)v4 + 4);
  v302 = v6;
  v303 = v5;
  HIDWORD(v304) = *((_DWORD *)v4 + 9);
  v307 = 0;
  v306 = 0;
  v305 = 0;
  v7 = (char *)*((_QWORD *)v4 + 5);
  v8 = (char *)*((_QWORD *)v4 + 6);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    if (v9 < 0)
      abort();
    v10 = v9 >> 4;
    v9 = (int64_t)operator new(v9);
    v305 = v9;
    v306 = v9;
    v307 = v9 + 16 * v10;
    do
    {
      *(_QWORD *)v9 = *(_QWORD *)v7;
      v11 = *((_QWORD *)v7 + 1);
      *(_QWORD *)(v9 + 8) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v7 += 16;
      v9 += 16;
    }
    while (v7 != v8);
    v306 = v9;
  }
  v308[0] = v309;
  v308[1] = 0x800000000;
  if (*((_DWORD *)v4 + 18))
    v9 = llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)v308, (uint64_t *)v4 + 8);
  v309[32] = *((_QWORD *)v4 + 42);
  v299 = v301;
  v300 = 0x4000000000;
  v14 = *((_QWORD *)this + 90);
  *(_QWORD *)&v303 = (v14 >> 3) & 0x1FFFFFFFFFFFFFF8;
  LODWORD(v304) = 0;
  if ((v14 & 0x3F) != 0)
  {
    llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v302, v14 & 0x3F, (uint64_t)&v310);
    if ((v311 & 1) != 0)
    {
      v15 = v310;
      if (v310)
      {
        a2[8] |= 1u;
        *(_QWORD *)a2 = v15;
        v16 = v299;
        if (v299 != v301)
          goto LABEL_194;
        goto LABEL_195;
      }
    }
  }
  v289 = &unk_1E0E203C0;
  v290 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
LABEL_20:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        while (2)
        {
          v18 = v304;
          if ((_DWORD)v304)
          {
            v19 = HIDWORD(v304);
            v20 = *((_QWORD *)&v303 + 1);
            if (v304 < HIDWORD(v304))
            {
              v21 = v303;
              v22 = *((_QWORD *)&v302 + 1);
              v19 = HIDWORD(v304) - v304;
              LODWORD(v293) = HIDWORD(v304) - v304;
              v23 = DWORD2(v302) - v303;
              if (*((_QWORD *)&v302 + 1) <= (unint64_t)v303)
                goto LABEL_36;
              goto LABEL_23;
            }
LABEL_40:
            v30 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v19) & v20;
            *((_QWORD *)&v303 + 1) = v20 >> v19;
            LODWORD(v304) = v304 - v19;
            if ((_DWORD)v30 != 1)
              goto LABEL_50;
            break;
          }
          v22 = *((_QWORD *)&v302 + 1);
          v21 = v303;
          if (*((_QWORD *)&v302 + 1) <= (unint64_t)v303)
          {
            v36 = 0;
            goto LABEL_148;
          }
          v19 = HIDWORD(v304);
          if (!HIDWORD(v304))
          {
            v20 = *((_QWORD *)&v303 + 1);
            goto LABEL_40;
          }
          v20 = 0;
          LODWORD(v293) = HIDWORD(v304);
          v23 = DWORD2(v302) - v303;
          if (*((_QWORD *)&v302 + 1) <= (unint64_t)v303)
          {
LABEL_36:
            v28 = std::generic_category();
            __p = 0;
            v297 = 0;
            v298 = 0;
            v311 = 0;
            v315 = 0;
            v316 = 0;
            v317 = 1;
            v313 = 0;
            v314 = 0;
            v312 = 0;
            v310 = (llvm::MDNode *)&unk_1E0E22B10;
            p_p = &__p;
            llvm::raw_ostream::SetBufferAndMode((uint64_t)&v310, 0, 0, 0);
            v319 = (llvm::MDNode *)&unk_1E0E203C0;
            v320 = "Unexpected end of file reading %u of %u bytes";
            v321 = v303;
            v322 = v22;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v310, (uint64_t)&v319);
            v29 = p_p;
            v17 = (llvm::MDNode *)operator new(0x38uLL);
            v323 = 260;
            v319 = (llvm::MDNode *)v29;
            llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)&v319, 5, (uint64_t)v28);
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v310);
            if (SHIBYTE(v298) < 0)
              operator delete(__p);
            goto LABEL_150;
          }
LABEL_23:
          v24 = (uint8x16_t *)(v302 + v21);
          if (v22 >= v21 + 8)
          {
            v26 = v24->i64[0];
            *((_QWORD *)&v303 + 1) = v26;
            v23 = 8;
            goto LABEL_48;
          }
          *((_QWORD *)&v303 + 1) = 0;
          if (!v23)
          {
            v26 = 0;
            goto LABEL_48;
          }
          if (v23 < 8uLL
            || ((unint64_t)&v303 + 8 < (unint64_t)v302 + v21 + v23
              ? (v25 = v24 >= (uint8x16_t *)&v304)
              : (v25 = 1),
                !v25))
          {
            v27 = 0;
            v26 = 0;
            goto LABEL_44;
          }
          if (v23 >= 0x10uLL)
          {
            v27 = v23 - (unint64_t)(v23 & 0xF);
            v141 = (int64x2_t)xmmword_181267BA0;
            v142 = (int64x2_t)xmmword_181267BB0;
            v143 = (int64x2_t)xmmword_181267BC0;
            v144 = 0uLL;
            v145 = 0uLL;
            v146 = (int64x2_t)xmmword_181267BD0;
            v9 = v27;
            v147 = (int64x2_t)xmmword_181233120;
            v148 = (int64x2_t)xmmword_181233290;
            v149 = (int64x2_t)xmmword_181267BE0;
            v150 = (int64x2_t)xmmword_1812332B0;
            v151 = 0uLL;
            v152 = 0uLL;
            v153 = 0uLL;
            v154 = 0uLL;
            v155 = 0uLL;
            v156 = 0uLL;
            do
            {
              v157 = *v24++;
              v158 = vmovl_u8(*(uint8x8_t *)v157.i8);
              v159 = vmovl_high_u8(v157);
              v160 = vmovl_u16(*(uint16x4_t *)v159.i8);
              v161 = vmovl_high_u16(v159);
              v162 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
              v163 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v150, 3uLL), v162);
              v164 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v146, 3uLL), v162);
              v165 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v149, 3uLL), v162);
              v166 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v148, 3uLL), v162);
              v167 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v143, 3uLL), v162);
              v168 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v147, 3uLL), v162);
              v169 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v142, 3uLL), v162);
              v170.i64[0] = v161.u32[2];
              v170.i64[1] = v161.u32[3];
              v171 = (int8x16_t)vshlq_u64(v170, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v141, 3uLL), v162));
              v172 = vmovl_u16(*(uint16x4_t *)v158.i8);
              v170.i64[0] = v161.u32[0];
              v170.i64[1] = v161.u32[1];
              v173 = (int8x16_t)vshlq_u64(v170, v169);
              v170.i64[0] = v172.u32[0];
              v170.i64[1] = v172.u32[1];
              v174 = (int8x16_t)vshlq_u64(v170, v168);
              v170.i64[0] = v160.u32[2];
              v170.i64[1] = v160.u32[3];
              v175 = (int8x16_t)vshlq_u64(v170, v167);
              v176 = vmovl_high_u16(v158);
              v170.i64[0] = v172.u32[2];
              v170.i64[1] = v172.u32[3];
              v177 = (int8x16_t)vshlq_u64(v170, v166);
              v170.i64[0] = v176.u32[0];
              v170.i64[1] = v176.u32[1];
              v178 = (int8x16_t)vshlq_u64(v170, v165);
              v170.i64[0] = v160.u32[0];
              v170.i64[1] = v160.u32[1];
              v179 = (int8x16_t)vshlq_u64(v170, v164);
              v170.i64[0] = v176.u32[2];
              v170.i64[1] = v176.u32[3];
              v152 = vorrq_s8((int8x16_t)vshlq_u64(v170, v163), v152);
              v153 = vorrq_s8(v179, v153);
              v151 = vorrq_s8(v178, v151);
              v145 = vorrq_s8(v177, v145);
              v154 = vorrq_s8(v175, v154);
              v144 = vorrq_s8(v174, v144);
              v155 = vorrq_s8(v173, v155);
              v156 = vorrq_s8(v171, v156);
              v180 = vdupq_n_s64(0x10uLL);
              v149 = vaddq_s64(v149, v180);
              v148 = vaddq_s64(v148, v180);
              v147 = vaddq_s64(v147, v180);
              v150 = vaddq_s64(v150, v180);
              v146 = vaddq_s64(v146, v180);
              v143 = vaddq_s64(v143, v180);
              v142 = vaddq_s64(v142, v180);
              v141 = vaddq_s64(v141, v180);
              v9 -= 16;
            }
            while (v9);
            v181 = vorrq_s8(vorrq_s8(vorrq_s8(v144, v153), vorrq_s8(v151, v155)), vorrq_s8(vorrq_s8(v145, v154), vorrq_s8(v152, v156)));
            *((int8x8_t *)&v303 + 1) = vorr_s8(*(int8x8_t *)v181.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v181, v181, 8uLL));
            v26 = *((_QWORD *)&v303 + 1);
            if ((v23 & 0xF) == 0)
              goto LABEL_48;
            if ((v23 & 0xF) < 8uLL)
            {
LABEL_44:
              v31 = v23 - v27;
              v32 = 8 * v27;
              v33 = (unsigned __int8 *)(v302 + v27 + v21);
              do
              {
                v34 = *v33++;
                v9 = v32 & 0xFFFFFFF8;
                v26 |= (unint64_t)v34 << (v32 & 0xF8);
                *((_QWORD *)&v303 + 1) = v26;
                v32 += 8;
                --v31;
              }
              while (v31);
              goto LABEL_48;
            }
          }
          else
          {
            v26 = 0;
            v27 = 0;
          }
          v182 = vdupq_n_s64(v27);
          v183 = vaddq_s64(v182, (int64x2_t)xmmword_1812332B0);
          v184 = (int8x16_t)v26;
          v185 = v21 + v27;
          v186 = v27 + (v23 & 7);
          v27 = v23 - (unint64_t)(v23 & 7);
          v187 = vaddq_s64(v182, (int64x2_t)xmmword_181267BE0);
          v188 = vaddq_s64(v182, (int64x2_t)xmmword_181233290);
          v189 = vaddq_s64(v182, (int64x2_t)xmmword_181233120);
          v190 = 0uLL;
          v191 = (uint8x8_t *)(v302 + v185);
          v9 = v186 - v23;
          v192 = 0uLL;
          v193 = 0uLL;
          do
          {
            v194 = *v191++;
            v195 = vmovl_u8(v194);
            v196 = vmovl_high_u16(v195);
            v197.i64[0] = v196.u32[2];
            v197.i64[1] = v196.u32[3];
            v198 = v197;
            v197.i64[0] = v196.u32[0];
            v197.i64[1] = v196.u32[1];
            v199 = v197;
            v200 = vmovl_u16(*(uint16x4_t *)v195.i8);
            v197.i64[0] = v200.u32[2];
            v197.i64[1] = v200.u32[3];
            v201 = v197;
            v197.i64[0] = v200.u32[0];
            v197.i64[1] = v200.u32[1];
            v202 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
            v193 = vorrq_s8((int8x16_t)vshlq_u64(v198, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v183, 3uLL), v202)), v193);
            v192 = vorrq_s8((int8x16_t)vshlq_u64(v199, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v187, 3uLL), v202)), v192);
            v190 = vorrq_s8((int8x16_t)vshlq_u64(v201, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v188, 3uLL), v202)), v190);
            v203 = vdupq_n_s64(8uLL);
            v184 = vorrq_s8((int8x16_t)vshlq_u64(v197, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v189, 3uLL), v202)), v184);
            v187 = vaddq_s64(v187, v203);
            v188 = vaddq_s64(v188, v203);
            v189 = vaddq_s64(v189, v203);
            v183 = vaddq_s64(v183, v203);
            v9 += 8;
          }
          while (v9);
          v204 = vorrq_s8(vorrq_s8(v184, v192), vorrq_s8(v190, v193));
          *((int8x8_t *)&v303 + 1) = vorr_s8(*(int8x8_t *)v204.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL));
          v26 = *((_QWORD *)&v303 + 1);
          if ((v23 & 7) != 0)
            goto LABEL_44;
LABEL_48:
          *(_QWORD *)&v303 = v21 + v23;
          LODWORD(v304) = 8 * v23;
          if (8 * v23 < v19)
          {
            llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)&v304, (int *)&v293, (uint64_t *)&v294);
            v17 = v294;
            goto LABEL_150;
          }
          *((_QWORD *)&v303 + 1) = v26 >> v19;
          LODWORD(v304) = 8 * v23 - v19;
          v35 = (v26 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v19)) << v18;
          v30 = v35 | v20;
          if ((v35 | v20) != 1)
          {
LABEL_50:
            if ((_DWORD)v30 == 2)
            {
              llvm::BitstreamCursor::ReadAbbrevRecord((char **)&v302, (unint64_t *)&v310);
              v17 = v310;
              if (v310)
                goto LABEL_150;
              continue;
            }
            if ((_DWORD)v30)
              v36 = (v30 << 32) | 3;
            else
              v36 = 1;
LABEL_148:
            v289 = (void *)HIDWORD(v36);
            goto LABEL_151;
          }
          break;
        }
        llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)&v302, 8u, (uint64_t)&v310);
        if ((v311 & 1) != 0)
        {
          v17 = v310;
          goto LABEL_150;
        }
        v37 = v304;
        if (v304 < 4)
        {
          if ((_DWORD)v304)
            v38 = BYTE8(v303);
          else
            v38 = 0;
          v39 = 4 - v304;
          LODWORD(v294) = 4 - v304;
          v40 = DWORD2(v302) - v303;
          if (*((_QWORD *)&v302 + 1) <= (unint64_t)v303)
          {
            v310 = (llvm::MDNode *)*((_QWORD *)&v302 + 1);
            llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", &v303, (uint64_t *)&v310, (uint64_t *)&v319);
            v17 = v319;
            if (v319)
              goto LABEL_114;
            v50 = v304 - v39;
            if (v304 < v39)
            {
LABEL_118:
              llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)&v304, (int *)&v294, (uint64_t *)&__p);
              v17 = (llvm::MDNode *)__p;
              if (__p)
                goto LABEL_150;
              continue;
            }
            goto LABEL_71;
          }
          v41 = (uint64_t *)(v302 + v303);
          if (*((_QWORD *)&v302 + 1) >= (unint64_t)(v303 + 8))
          {
            *((_QWORD *)&v303 + 1) = *v41;
            v40 = 8;
            goto LABEL_117;
          }
          *((_QWORD *)&v303 + 1) = 0;
          if (!v40)
            goto LABEL_117;
          v42 = (DWORD2(v302) - v303);
          if (v42 < 8 || (unint64_t)&v303 + 8 < (unint64_t)v302 + (_QWORD)v303 + v42 && v41 < &v304)
          {
            v43 = 0;
            v44 = 0;
            goto LABEL_64;
          }
          if (v42 >= 0x10)
          {
            v43 = v42 - (v40 & 0xF);
            v212 = (int64x2_t)xmmword_1812332B0;
            v213 = (int64x2_t)xmmword_181267BE0;
            v214 = (int64x2_t)xmmword_181233290;
            v215 = 0uLL;
            v216 = 0uLL;
            v217 = (int64x2_t)xmmword_181233120;
            v218 = v43;
            v219 = (int64x2_t)xmmword_181267BD0;
            v220 = (int64x2_t)xmmword_181267BC0;
            v221 = (int64x2_t)xmmword_181267BB0;
            v222 = (int64x2_t)xmmword_181267BA0;
            v223 = 0uLL;
            v224 = 0uLL;
            v225 = 0uLL;
            v226 = 0uLL;
            v227 = 0uLL;
            v228 = 0uLL;
            do
            {
              v229 = *(uint8x16_t *)v41;
              v41 += 2;
              v230 = vmovl_u8(*(uint8x8_t *)v229.i8);
              v231 = vmovl_high_u8(v229);
              v232 = vmovl_u16(*(uint16x4_t *)v231.i8);
              v233 = vmovl_high_u16(v231);
              v234 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
              v235 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v212, 3uLL), v234);
              v236 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v219, 3uLL), v234);
              v237 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v213, 3uLL), v234);
              v238 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v214, 3uLL), v234);
              v239 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v220, 3uLL), v234);
              v240 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v217, 3uLL), v234);
              v241 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v221, 3uLL), v234);
              v242.i64[0] = v233.u32[2];
              v242.i64[1] = v233.u32[3];
              v243 = (int8x16_t)vshlq_u64(v242, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v222, 3uLL), v234));
              v244 = vmovl_u16(*(uint16x4_t *)v230.i8);
              v242.i64[0] = v233.u32[0];
              v242.i64[1] = v233.u32[1];
              v245 = (int8x16_t)vshlq_u64(v242, v241);
              v242.i64[0] = v244.u32[0];
              v242.i64[1] = v244.u32[1];
              v246 = (int8x16_t)vshlq_u64(v242, v240);
              v242.i64[0] = v232.u32[2];
              v242.i64[1] = v232.u32[3];
              v247 = (int8x16_t)vshlq_u64(v242, v239);
              v248 = vmovl_high_u16(v230);
              v242.i64[0] = v244.u32[2];
              v242.i64[1] = v244.u32[3];
              v249 = (int8x16_t)vshlq_u64(v242, v238);
              v242.i64[0] = v248.u32[0];
              v242.i64[1] = v248.u32[1];
              v250 = (int8x16_t)vshlq_u64(v242, v237);
              v242.i64[0] = v232.u32[0];
              v242.i64[1] = v232.u32[1];
              v251 = (int8x16_t)vshlq_u64(v242, v236);
              v242.i64[0] = v248.u32[2];
              v242.i64[1] = v248.u32[3];
              v224 = vorrq_s8((int8x16_t)vshlq_u64(v242, v235), v224);
              v225 = vorrq_s8(v251, v225);
              v223 = vorrq_s8(v250, v223);
              v216 = vorrq_s8(v249, v216);
              v226 = vorrq_s8(v247, v226);
              v215 = vorrq_s8(v246, v215);
              v227 = vorrq_s8(v245, v227);
              v228 = vorrq_s8(v243, v228);
              v252 = vdupq_n_s64(0x10uLL);
              v213 = vaddq_s64(v213, v252);
              v214 = vaddq_s64(v214, v252);
              v217 = vaddq_s64(v217, v252);
              v212 = vaddq_s64(v212, v252);
              v219 = vaddq_s64(v219, v252);
              v220 = vaddq_s64(v220, v252);
              v221 = vaddq_s64(v221, v252);
              v222 = vaddq_s64(v222, v252);
              v218 -= 16;
            }
            while (v218);
            v253 = vorrq_s8(vorrq_s8(vorrq_s8(v215, v225), vorrq_s8(v223, v227)), vorrq_s8(vorrq_s8(v216, v226), vorrq_s8(v224, v228)));
            v254 = vorr_s8(*(int8x8_t *)v253.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v253, v253, 8uLL));
            *((int8x8_t *)&v303 + 1) = v254;
            if ((v40 & 0xF) == 0)
              goto LABEL_117;
            v44 = v254;
            if ((v40 & 0xF) < 8uLL)
              goto LABEL_64;
          }
          else
          {
            v44 = 0;
            v43 = 0;
          }
          v255 = vdupq_n_s64(v43);
          v256 = vaddq_s64(v255, (int64x2_t)xmmword_1812332B0);
          v257 = (int8x16_t)(unint64_t)v44;
          v258 = v43 + v303;
          v259 = v43 + (v40 & 7);
          v43 = v42 - (v40 & 7);
          v260 = vaddq_s64(v255, (int64x2_t)xmmword_181267BE0);
          v261 = vaddq_s64(v255, (int64x2_t)xmmword_181233290);
          v262 = vaddq_s64(v255, (int64x2_t)xmmword_181233120);
          v263 = 0uLL;
          v264 = (uint8x8_t *)(v302 + v258);
          v265 = v259 - v42;
          v266 = 0uLL;
          v267 = 0uLL;
          do
          {
            v268 = *v264++;
            v269 = vmovl_u8(v268);
            v270 = vmovl_high_u16(v269);
            v271.i64[0] = v270.u32[2];
            v271.i64[1] = v270.u32[3];
            v272 = v271;
            v271.i64[0] = v270.u32[0];
            v271.i64[1] = v270.u32[1];
            v273 = v271;
            v274 = vmovl_u16(*(uint16x4_t *)v269.i8);
            v271.i64[0] = v274.u32[2];
            v271.i64[1] = v274.u32[3];
            v275 = v271;
            v271.i64[0] = v274.u32[0];
            v271.i64[1] = v274.u32[1];
            v267 = vorrq_s8((int8x16_t)vshlq_u64(v272, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v256, 3uLL), v290)), v267);
            v266 = vorrq_s8((int8x16_t)vshlq_u64(v273, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v260, 3uLL), v290)), v266);
            v263 = vorrq_s8((int8x16_t)vshlq_u64(v275, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v261, 3uLL), v290)), v263);
            v276 = vdupq_n_s64(8uLL);
            v257 = vorrq_s8((int8x16_t)vshlq_u64(v271, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v262, 3uLL), v290)), v257);
            v260 = vaddq_s64(v260, v276);
            v261 = vaddq_s64(v261, v276);
            v262 = vaddq_s64(v262, v276);
            v256 = vaddq_s64(v256, v276);
            v265 += 8;
          }
          while (v265);
          v277 = vorrq_s8(vorrq_s8(v257, v266), vorrq_s8(v263, v267));
          v278 = vorr_s8(*(int8x8_t *)v277.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v277, v277, 8uLL));
          *((int8x8_t *)&v303 + 1) = v278;
          if ((v40 & 7) != 0)
          {
            v44 = v278;
LABEL_64:
            v45 = v42 - v43;
            v46 = 8 * v43;
            v47 = (unsigned __int8 *)(v302 + v43 + v303);
            do
            {
              v48 = *v47++;
              *(_QWORD *)&v44 |= (unint64_t)v48 << (v46 & 0xF8);
              *((int8x8_t *)&v303 + 1) = v44;
              v46 += 8;
              --v45;
            }
            while (v45);
          }
LABEL_117:
          *(_QWORD *)&v303 = v303 + v40;
          LODWORD(v304) = 8 * v40;
          v50 = 8 * v40 - v39;
          if (8 * v40 < v39)
            goto LABEL_118;
LABEL_71:
          v51 = DWORD2(v303);
          *((_QWORD *)&v303 + 1) >>= v39;
          LODWORD(v304) = v50;
          if (!((v51 << v37) & 8 | v38 & 8))
          {
LABEL_72:
            if (v304 < 0x20)
            {
              v52 = 0;
            }
            else
            {
              *((_QWORD *)&v303 + 1) >>= v304 - 32;
              v52 = 32;
            }
            LODWORD(v304) = v52;
            llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v302, 0x20u, (uint64_t)&v310);
            if ((v311 & 1) == 0)
            {
              v138 = 8 * v303 - v304 + 32 * v310;
              v319 = (llvm::MDNode *)v138;
              if ((_DWORD)v304 || *((_QWORD *)&v302 + 1) > (unint64_t)v303)
              {
                if (*((_QWORD *)&v302 + 1) >= v138 >> 3)
                {
                  *(_QWORD *)&v303 = (v138 >> 3) & 0x1FFFFFFFFFFFFFF8;
                  LODWORD(v304) = 0;
                  if ((v138 & 0x3F) != 0)
                  {
                    llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v302, v138 & 0x3F, (uint64_t)&v310);
                    if ((v311 & 1) != 0)
                    {
                      v292 = v310;
                      if (v310)
                      {
                        v17 = v292;
                        goto LABEL_150;
                      }
                    }
                  }
                  v292 = 0;
                }
                else
                {
                  v310 = (llvm::MDNode *)(8 * v303 - v304);
                  llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v319, (uint64_t *)&v310, (uint64_t *)&v292);
                  v17 = v292;
                  if (v292)
                    goto LABEL_150;
                }
              }
              else
              {
                *(_QWORD *)&v325.__val_ = std::generic_category();
                v325.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
                llvm::createStringError((llvm *)0x5C, v325, &v292);
                v17 = v292;
                if (v292)
                  goto LABEL_150;
              }
              continue;
            }
            v17 = v310;
LABEL_114:
            if (v17)
              goto LABEL_150;
            continue;
          }
          goto LABEL_74;
        }
        break;
      }
      v49 = BYTE8(v303) & 0xF;
      *((_QWORD *)&v303 + 1) >>= 4;
      LODWORD(v304) = v304 - 4;
      if ((v49 & 8) == 0)
        goto LABEL_72;
LABEL_74:
      v53 = 0;
      v54 = *((_QWORD *)&v302 + 1);
      v55 = v304;
      v56 = *((_QWORD *)&v303 + 1);
      v57 = v303;
      while (1)
      {
        while (1)
        {
          if (v53 >= 0x1D)
          {
            *(_QWORD *)&v326.__val_ = std::generic_category();
            v326.__cat_ = (const std::error_category *)"Unterminated VBR";
            llvm::createStringError((llvm *)0x5C, v326, &v293);
            v17 = v293;
            if (!v293)
              goto LABEL_20;
            goto LABEL_150;
          }
          if (v55 < 4)
            break;
          v58 = v56 & 0xF;
          v56 >>= 4;
          *((_QWORD *)&v303 + 1) = v56;
          LODWORD(v304) = v55 - 4;
          v55 -= 4;
          v53 += 3;
          if ((v58 & 8) == 0)
            goto LABEL_72;
        }
        if (v55)
          v59 = v56;
        else
          v59 = 0;
        v60 = 4 - v55;
        v295 = 4 - v55;
        v61 = DWORD2(v302) - v57;
        if (*((_QWORD *)&v302 + 1) <= v57)
        {
          v139 = std::generic_category();
          __p = 0;
          v297 = 0;
          v298 = 0;
          v311 = 0;
          v315 = 0;
          v316 = 0;
          v317 = 1;
          v313 = 0;
          v314 = 0;
          v312 = 0;
          v310 = (llvm::MDNode *)&unk_1E0E22B10;
          p_p = &__p;
          llvm::raw_ostream::SetBufferAndMode((uint64_t)&v310, 0, 0, 0);
          v319 = (llvm::MDNode *)&unk_1E0E203C0;
          v320 = "Unexpected end of file reading %u of %u bytes";
          v321 = v303;
          v322 = v54;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v310, (uint64_t)&v319);
          v140 = p_p;
          v17 = (llvm::MDNode *)operator new(0x38uLL);
          v323 = 260;
          v319 = (llvm::MDNode *)v140;
          llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)&v319, 5, (uint64_t)v139);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v310);
          if (SHIBYTE(v298) < 0)
            operator delete(__p);
          goto LABEL_114;
        }
        v62 = (uint8x16_t *)(v302 + v57);
        if (*((_QWORD *)&v302 + 1) >= v57 + 8)
        {
          v65 = v62->i64[0];
          *((_QWORD *)&v303 + 1) = v65;
          v61 = 8;
          goto LABEL_93;
        }
        *((_QWORD *)&v303 + 1) = 0;
        if (!v61)
        {
          v65 = 0;
          goto LABEL_93;
        }
        v63 = (DWORD2(v302) - v57);
        if (v63 < 8 || (unint64_t)&v303 + 8 < (unint64_t)v302 + v57 + v63 && v62 < (uint8x16_t *)&v304)
        {
          v64 = 0;
          v65 = 0;
LABEL_88:
          v66 = v63 - v64;
          v67 = 8 * v64;
          v68 = (unsigned __int8 *)(v302 + v64 + v57);
          do
          {
            v69 = *v68++;
            v65 |= (unint64_t)v69 << (v67 & 0xF8);
            *((_QWORD *)&v303 + 1) = v65;
            v67 += 8;
            --v66;
          }
          while (v66);
          goto LABEL_93;
        }
        if (v63 >= 0x10)
        {
          v64 = v63 - (v61 & 0xF);
          v72 = (int64x2_t)xmmword_181267BA0;
          v73 = (int64x2_t)xmmword_181267BB0;
          v74 = (int64x2_t)xmmword_181267BC0;
          v75 = (int64x2_t)xmmword_181267BD0;
          v76 = (int64x2_t)xmmword_1812332B0;
          v77 = (int64x2_t)xmmword_181267BE0;
          v78 = 0uLL;
          v79 = v64;
          v80 = 0uLL;
          v81 = 0uLL;
          v82 = 0uLL;
          v83 = 0uLL;
          v84 = 0uLL;
          v85 = (int64x2_t)xmmword_181233290;
          v86 = 0uLL;
          v87 = 0uLL;
          v88 = (int64x2_t)xmmword_181233120;
          do
          {
            v89 = *v62++;
            v90 = vmovl_u8(*(uint8x8_t *)v89.i8);
            v91 = vmovl_high_u8(v89);
            v92 = vmovl_u16(*(uint16x4_t *)v91.i8);
            v93 = vmovl_high_u16(v91);
            v94 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
            v95 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v76, 3uLL), v94);
            v96 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v75, 3uLL), v94);
            v97 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v77, 3uLL), v94);
            v98 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v85, 3uLL), v94);
            v99 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v74, 3uLL), v94);
            v100 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v88, 3uLL), v94);
            v101 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v73, 3uLL), v94);
            v102.i64[0] = v93.u32[2];
            v102.i64[1] = v93.u32[3];
            v103 = (int8x16_t)vshlq_u64(v102, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v72, 3uLL), v94));
            v104 = vmovl_u16(*(uint16x4_t *)v90.i8);
            v102.i64[0] = v93.u32[0];
            v102.i64[1] = v93.u32[1];
            v105 = (int8x16_t)vshlq_u64(v102, v101);
            v102.i64[0] = v104.u32[0];
            v102.i64[1] = v104.u32[1];
            v106 = (int8x16_t)vshlq_u64(v102, v100);
            v102.i64[0] = v92.u32[2];
            v102.i64[1] = v92.u32[3];
            v107 = (int8x16_t)vshlq_u64(v102, v99);
            v108 = vmovl_high_u16(v90);
            v102.i64[0] = v104.u32[2];
            v102.i64[1] = v104.u32[3];
            v109 = (int8x16_t)vshlq_u64(v102, v98);
            v102.i64[0] = v108.u32[0];
            v102.i64[1] = v108.u32[1];
            v110 = (int8x16_t)vshlq_u64(v102, v97);
            v102.i64[0] = v92.u32[0];
            v102.i64[1] = v92.u32[1];
            v111 = (int8x16_t)vshlq_u64(v102, v96);
            v102.i64[0] = v108.u32[2];
            v102.i64[1] = v108.u32[3];
            v82 = vorrq_s8((int8x16_t)vshlq_u64(v102, v95), v82);
            v83 = vorrq_s8(v111, v83);
            v81 = vorrq_s8(v110, v81);
            v80 = vorrq_s8(v109, v80);
            v84 = vorrq_s8(v107, v84);
            v78 = vorrq_s8(v106, v78);
            v86 = vorrq_s8(v105, v86);
            v87 = vorrq_s8(v103, v87);
            v112 = vdupq_n_s64(0x10uLL);
            v77 = vaddq_s64(v77, v112);
            v85 = vaddq_s64(v85, v112);
            v88 = vaddq_s64(v88, v112);
            v76 = vaddq_s64(v76, v112);
            v75 = vaddq_s64(v75, v112);
            v74 = vaddq_s64(v74, v112);
            v73 = vaddq_s64(v73, v112);
            v72 = vaddq_s64(v72, v112);
            v79 -= 16;
          }
          while (v79);
          v113 = vorrq_s8(vorrq_s8(vorrq_s8(v78, v83), vorrq_s8(v81, v86)), vorrq_s8(vorrq_s8(v80, v84), vorrq_s8(v82, v87)));
          *((int8x8_t *)&v303 + 1) = vorr_s8(*(int8x8_t *)v113.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL));
          v65 = *((_QWORD *)&v303 + 1);
          if ((v61 & 0xF) == 0)
            goto LABEL_93;
          if ((v61 & 0xF) < 8uLL)
            goto LABEL_88;
        }
        else
        {
          v65 = 0;
          v64 = 0;
        }
        v114 = vdupq_n_s64(v64);
        v115 = vaddq_s64(v114, (int64x2_t)xmmword_1812332B0);
        v116 = (int8x16_t)v65;
        v117 = v57 + v64;
        v118 = v64 + (v61 & 7);
        v64 = v63 - (v61 & 7);
        v119 = vaddq_s64(v114, (int64x2_t)xmmword_181267BE0);
        v120 = vaddq_s64(v114, (int64x2_t)xmmword_181233290);
        v121 = vaddq_s64(v114, (int64x2_t)xmmword_181233120);
        v122 = 0uLL;
        v123 = (uint8x8_t *)(v302 + v117);
        v124 = v118 - v63;
        v125 = 0uLL;
        v126 = 0uLL;
        do
        {
          v127 = *v123++;
          v128 = vmovl_u8(v127);
          v129 = vmovl_high_u16(v128);
          v130.i64[0] = v129.u32[2];
          v130.i64[1] = v129.u32[3];
          v131 = v130;
          v130.i64[0] = v129.u32[0];
          v130.i64[1] = v129.u32[1];
          v132 = v130;
          v133 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v130.i64[0] = v133.u32[2];
          v130.i64[1] = v133.u32[3];
          v134 = v130;
          v130.i64[0] = v133.u32[0];
          v130.i64[1] = v133.u32[1];
          v135 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
          v126 = vorrq_s8((int8x16_t)vshlq_u64(v131, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v115, 3uLL), v135)), v126);
          v125 = vorrq_s8((int8x16_t)vshlq_u64(v132, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v119, 3uLL), v135)), v125);
          v122 = vorrq_s8((int8x16_t)vshlq_u64(v134, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v120, 3uLL), v135)), v122);
          v136 = vdupq_n_s64(8uLL);
          v116 = vorrq_s8((int8x16_t)vshlq_u64(v130, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v121, 3uLL), v135)), v116);
          v119 = vaddq_s64(v119, v136);
          v120 = vaddq_s64(v120, v136);
          v121 = vaddq_s64(v121, v136);
          v115 = vaddq_s64(v115, v136);
          v124 += 8;
        }
        while (v124);
        v137 = vorrq_s8(vorrq_s8(v116, v125), vorrq_s8(v122, v126));
        *((int8x8_t *)&v303 + 1) = vorr_s8(*(int8x8_t *)v137.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL));
        v65 = *((_QWORD *)&v303 + 1);
        if ((v61 & 7) != 0)
          goto LABEL_88;
LABEL_93:
        v57 += v61;
        *(_QWORD *)&v303 = v57;
        LODWORD(v304) = 8 * v61;
        v25 = 8 * v61 >= v60;
        v70 = 8 * v61 - v60;
        if (!v25)
          break;
        v56 = v65 >> v60;
        *((_QWORD *)&v303 + 1) = v56;
        LODWORD(v304) = v70;
        v71 = (v65 << v55) & 0xF | v59;
        v55 = v70;
        v53 += 3;
        if ((v71 & 8) == 0)
          goto LABEL_72;
      }
      llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)&v304, (int *)&v295, (uint64_t *)&v294);
      v17 = v294;
      if (!v294)
        continue;
      break;
    }
LABEL_150:
    LODWORD(v36) = v288;
    if (!v17)
    {
LABEL_151:
      switch((_DWORD)v36)
      {
        case 2:
          goto LABEL_190;
        case 1:
          a2[8] &= ~1u;
          *a2 = 1;
          goto LABEL_193;
        case 0:
LABEL_190:
          v310 = (llvm::MDNode *)"Malformed block";
          LOWORD(v314) = 259;
          v285 = llvm::BitcodeErrorCategory((llvm *)v9);
          v286 = operator new(0x38uLL);
          v287 = llvm::StringError::StringError((uint64_t)v286, (llvm::Twine *)&v310, 1, (uint64_t)v285);
          a2[8] |= 1u;
          *(_QWORD *)a2 = v287;
          v16 = v299;
          if (v299 != v301)
            goto LABEL_194;
          goto LABEL_195;
      }
      v288 = v36;
      v205 = v303;
      v206 = v304;
      llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v302, (int)v289, (uint64_t)&v319);
      if ((v320 & 1) != 0)
      {
        v209 = 0;
        v208 = v319;
        v319 = 0;
        goto LABEL_161;
      }
      if ((_DWORD)v319 != 36)
      {
        v209 = 0;
        a2[8] &= ~1u;
        *a2 = 1;
        goto LABEL_163;
      }
      v207 = 8 * v205 - v206;
      *(_QWORD *)&v303 = (v207 >> 3) & 0x1FFFFFFFFFFFFFF8;
      LODWORD(v304) = 0;
      if ((v207 & 0x3F) != 0)
      {
        llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v302, v207 & 0x3F, (uint64_t)&v310);
        if ((v311 & 1) != 0)
        {
          v208 = v310;
          if (v310)
            goto LABEL_159;
        }
      }
      LODWORD(v300) = 0;
      llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)&v302, (int)v289, (uint64_t)&v299, 0, (uint64_t)&v310);
      if ((v311 & 1) != 0)
      {
        v209 = 0;
        v208 = v310;
        goto LABEL_161;
      }
      if ((v300 & 1) == 0)
      {
        v310 = (llvm::MDNode *)"Invalid record";
        LOWORD(v314) = 259;
        v210 = llvm::BitcodeErrorCategory((llvm *)v9);
        v211 = operator new(0x38uLL);
        v9 = llvm::StringError::StringError((uint64_t)v211, (llvm::Twine *)&v310, 1, (uint64_t)v210);
        v209 = 0;
        a2[8] |= 1u;
        *(_QWORD *)a2 = v9;
        goto LABEL_163;
      }
      v279 = **((_QWORD **)this + 24);
      if (((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 24) + 8) - v279) >> 5) > *(_QWORD *)v299)
      {
        v280 = *(unsigned __int8 **)(v279 + 32 * *(_QWORD *)v299 + 16);
        v281 = v280[16];
        v282 = v281 > 3 || v281 == 1;
        if (v282
          || (v283 = v303,
              v284 = v304,
              v9 = (int64_t)llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(this, (llvm::Value *)v280, (uint64_t)v299 + 8, (int)v300 - 1, &v310), (v208 = v310) == 0)&& (llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)&v302, 8 * v283 - v284, &v310), (v208 = v310) == 0))
        {
          v209 = 1;
          goto LABEL_163;
        }
LABEL_159:
        v209 = 0;
LABEL_161:
        a2[8] |= 1u;
        *(_QWORD *)a2 = v208;
        goto LABEL_163;
      }
      v310 = (llvm::MDNode *)"Invalid record";
      LOWORD(v314) = 259;
      v9 = error((const llvm::Twine *)&v291, (llvm::Twine *)&v310);
      v209 = 0;
      a2[8] |= 1u;
      *(_QWORD *)a2 = v291;
      v291 = 0;
LABEL_163:
      if ((v320 & 1) != 0)
      {
        v9 = (int64_t)v319;
        v319 = 0;
        if (v9)
          v9 = (*(uint64_t (**)(int64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      if ((v209 & 1) == 0)
      {
LABEL_193:
        v16 = v299;
        if (v299 != v301)
          goto LABEL_194;
        goto LABEL_195;
      }
      continue;
    }
    break;
  }
  a2[8] |= 1u;
  *(_QWORD *)a2 = v17;
  v16 = v299;
  if (v299 != v301)
LABEL_194:
    free(v16);
LABEL_195:
  llvm::BitstreamCursor::~BitstreamCursor((llvm::BitstreamCursor *)&v302);
}

llvm::MDNode *llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment@<X0>(llvm::MDNode *result@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, llvm::MDNode **a5@<X8>)
{
  llvm::MDNode *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  _UNKNOWN **v20;
  void *v21;
  const char *v22;
  __int16 v23;

  if (!a4)
  {
LABEL_14:
    *a5 = 0;
    return result;
  }
  v9 = result;
  v10 = 0;
  while (1)
  {
    v11 = *((_QWORD *)v9 + 127);
    v12 = *((unsigned int *)v9 + 258);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(a3 + 8 * v10);
      LODWORD(v14) = (v12 - 1) & (37 * v13);
      v15 = (int *)(v11 + 8 * v14);
      v16 = *v15;
      if (*v15 == (_DWORD)v13)
        goto LABEL_10;
      v17 = 1;
      while (v16 != -1)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v12 - 1);
        v16 = *(_DWORD *)(v11 + 8 * v14);
        if (v16 == (_DWORD)v13)
        {
          v15 = (int *)(v11 + 8 * v14);
          goto LABEL_10;
        }
      }
    }
    v15 = (int *)(v11 + 8 * v12);
LABEL_10:
    if (v15 == (int *)(v11 + 8 * v12))
      break;
    result = (llvm::MDNode *)llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(v9, *(_QWORD *)(a3 + 8 * (v10 | 1)));
    if (!result || *(unsigned __int8 *)result - 5 >= 0x1F)
    {
      v19 = "Invalid metadata attachment: expect fwd ref to MDNode";
      goto LABEL_17;
    }
    result = (llvm::MDNode *)llvm::Value::addMetadata(a2, v15[1], result);
    v10 += 2;
    if (v10 == a4)
      goto LABEL_14;
  }
  v19 = "Invalid ID";
LABEL_17:
  v22 = v19;
  v23 = 259;
  v20 = llvm::BitcodeErrorCategory(result);
  v21 = operator new(0x38uLL);
  result = (llvm::MDNode *)llvm::StringError::StringError((uint64_t)v21, (llvm::Twine *)&v22, 1, (uint64_t)v20);
  *a5 = result;
  return result;
}

_BYTE *llvm::MetadataLoader::MetadataLoaderImpl::callMDTypeCallback(_BYTE *result, uint64_t a2, int a3)
{
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!result[320])
    return result;
  v5 = result;
  v6 = (_BYTE *)*((_QWORD *)result + 31);
  if (v6)
  {
    if (v6 == v5 + 224)
    {
      v17 = v16;
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v16);
      v7 = (_BYTE *)*((_QWORD *)v5 + 35);
      if (!v7)
        goto LABEL_11;
    }
    else
    {
      v17 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6);
      v7 = (_BYTE *)*((_QWORD *)v5 + 35);
      if (!v7)
      {
LABEL_11:
        v15 = 0;
        v13 = a2;
        v12 = a3;
        v8 = *((_QWORD *)v5 + 39);
        if (v8)
          goto LABEL_12;
LABEL_24:
        std::__throw_bad_function_call[abi:nn180100]();
      }
    }
  }
  else
  {
    v17 = 0;
    v7 = (_BYTE *)*((_QWORD *)v5 + 35);
    if (!v7)
      goto LABEL_11;
  }
  if (v7 != v5 + 256)
  {
    v15 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 16))(v7);
    v13 = a2;
    v12 = a3;
    v8 = *((_QWORD *)v5 + 39);
    if (v8)
      goto LABEL_12;
    goto LABEL_24;
  }
  v15 = v14;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v7 + 24))(v7, v14);
  v13 = a2;
  v12 = a3;
  v8 = *((_QWORD *)v5 + 39);
  if (!v8)
    goto LABEL_24;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t *, int *, _BYTE *, _BYTE *))(*(_QWORD *)v8 + 48))(v8, &v13, &v12, v16, v14);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_16;
  }
  if (v15)
  {
    v10 = 5;
LABEL_16:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(llvm::BitstreamCursor **this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  _UNKNOWN **v6;
  void *v7;
  llvm *v8;
  void *v9;
  int v10;
  _WORD *v11;
  void *v12;
  uint64_t v13;
  int8x16_t v14;
  llvm::BitstreamCursor *v15;
  int8x8_t *v16;
  int8x8_t *v17;
  const char *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int8x8_t *v27;
  BOOL v28;
  int8x8_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  int8x16_t v39;
  unint64_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  int8x16_t v61;
  uint64x2_t v62;
  uint64x2_t v63;
  uint64x2_t v64;
  uint64x2_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint64x2_t v69;
  int8x16_t v70;
  uint32x4_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  uint32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int64x2_t v79;
  int8x16_t v80;
  int8x8_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int8x16_t v84;
  unint64_t v85;
  unint64_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int8x16_t v90;
  uint8x8_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int8x16_t v94;
  uint8x8_t v95;
  uint16x8_t v96;
  uint32x4_t v97;
  uint64x2_t v98;
  uint64x2_t v99;
  uint64x2_t v100;
  uint32x4_t v101;
  uint64x2_t v102;
  int64x2_t v103;
  int8x16_t v104;
  int8x8_t v105;
  llvm::Twine *v106;
  int v107;
  const char *v108;
  uint64_t v109;
  _UNKNOWN **v110;
  void *v111;
  const char *v112;
  const char *v113;
  llvm::Twine *v114;
  char *v115;
  int8x16_t v116;
  int v117;
  _OWORD v118[3];
  const char *v119;
  unsigned int v120;
  const char *v121;
  unint64_t v122;
  __int16 v123;
  char *v124;
  char v125;
  char *v126;
  uint64_t v127;
  _WORD v128[256];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0 && *((_DWORD *)this + 6) >= 2u)
  {
    v126 = "Invalid metadata: fwd refs into function blocks";
    v128[8] = 259;
    v6 = llvm::BitcodeErrorCategory((llvm *)this);
    v7 = operator new(0x38uLL);
    *a3 = llvm::StringError::StringError((uint64_t)v7, (llvm::Twine *)&v126, 1, (uint64_t)v6);
    return;
  }
  llvm::BitstreamCursor::EnterSubBlock(this[25], 0, 15, a3);
  if (!*a3)
  {
    v10 = a2;
    v11 = v128;
    v126 = (char *)v128;
    v127 = 0x4000000000;
    memset(v118, 0, sizeof(v118));
    if (v10 && *((_BYTE *)this + 1072) && !*((_DWORD *)this + 2) && !byte_1ECD355C0)
    {
      llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock((llvm::MetadataLoader::MetadataLoaderImpl *)this, (uint64_t)&v121);
      if ((v122 & 1) != 0)
      {
LABEL_86:
        v112 = v121;
        v121 = 0;
        *a3 = (uint64_t)v112;
        if ((v122 & 1) != 0)
        {
          v113 = v121;
          v121 = 0;
          if (v113)
            (*(void (**)(const char *))(*(_QWORD *)v113 + 8))(v113);
        }
        goto LABEL_83;
      }
      if ((_BYTE)v121)
      {
        llvm::MetadataLoader::MetadataLoaderImpl::loadGlobalDeclAttachments((llvm::MetadataLoader::MetadataLoaderImpl *)this, &v124);
        llvm::Expected<BOOL>::operator=(&v121, &v124);
        if ((v125 & 1) != 0)
        {
          v13 = (uint64_t)v124;
          v124 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        if ((v122 & 1) == 0)
          llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders((uint64_t)this, (llvm::MDNode *)v118, v12);
        goto LABEL_86;
      }
    }
    v117 = *((_DWORD *)this + 2);
    v114 = (llvm::Twine *)a3;
    v115 = &byte_181267000;
    v14 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
    v116 = v14;
LABEL_18:
    v15 = this[25];
    v16 = (int8x8_t *)((char *)v15 + 32);
    v17 = (int8x8_t *)((char *)v15 + 24);
    while (1)
    {
      v19 = v16->i32[0];
      if (v16->i32[0])
      {
        v20 = *((_DWORD *)v15 + 9);
        if (v19 >= v20)
          goto LABEL_39;
        v21 = *((_QWORD *)v15 + 2);
        v22 = *((_QWORD *)v15 + 3);
        v23 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
        v24 = v20 - v19;
        v120 = v20 - v19;
        v25 = (_DWORD)v23 - v21;
        if ((unint64_t)v23 > v21)
          goto LABEL_23;
      }
      else
      {
        v23 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
        v21 = *((_QWORD *)v15 + 2);
        if ((unint64_t)v23 <= v21)
          goto LABEL_68;
        v20 = *((_DWORD *)v15 + 9);
        if (!v20)
        {
LABEL_39:
          v32 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v20) & *(_QWORD *)v17;
          *v17 = (int8x8_t)(*(unint64_t *)v17 >> v20);
          v16->i32[0] = v19 - v20;
          if ((_DWORD)v32 == 1)
            goto LABEL_40;
          goto LABEL_48;
        }
        v22 = 0;
        v24 = *((_DWORD *)v15 + 9);
        v120 = v24;
        v25 = (_DWORD)v23 - v21;
        if ((unint64_t)v23 > v21)
        {
LABEL_23:
          v26 = *(_QWORD *)v15;
          v27 = (int8x8_t *)(*(_QWORD *)v15 + v21);
          if ((unint64_t)v23 >= v21 + 8)
          {
            *v17 = *v27;
            v25 = 8;
            goto LABEL_46;
          }
          *v17 = 0;
          if (!v25)
            goto LABEL_46;
          if (v25 >= 8uLL && ((unint64_t)v17 < v26 + v21 + v25 ? (v28 = v27 >= v16) : (v28 = 1), v28))
          {
            if (v25 >= 0x10uLL)
            {
              v30 = v25 - (unint64_t)(v25 & 0xF);
              v39 = 0uLL;
              v40 = v30;
              v41 = (int64x2_t)xmmword_181233120;
              v42 = (int64x2_t)xmmword_181233290;
              v43 = 0uLL;
              v44 = (int64x2_t)xmmword_181267BE0;
              v45 = (int64x2_t)xmmword_1812332B0;
              v46 = (int64x2_t)xmmword_181267BD0;
              v47 = (int64x2_t)xmmword_181267BC0;
              v48 = (int64x2_t)xmmword_181267BB0;
              v49 = (int64x2_t)xmmword_181267BA0;
              v50 = 0uLL;
              v51 = 0uLL;
              v52 = 0uLL;
              v53 = 0uLL;
              v54 = 0uLL;
              v55 = 0uLL;
              do
              {
                v56 = *(uint8x16_t *)v27->i8;
                v27 += 2;
                v57 = vmovl_u8(*(uint8x8_t *)v56.i8);
                v58 = vmovl_high_u8(v56);
                v59 = vmovl_u16(*(uint16x4_t *)v58.i8);
                v60 = vmovl_high_u16(v58);
                v61 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                v62 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v45, 3uLL), v61);
                v63 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v46, 3uLL), v61);
                v64 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v44, 3uLL), v61);
                v65 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v42, 3uLL), v61);
                v66 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v47, 3uLL), v61);
                v67 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v41, 3uLL), v61);
                v68 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v48, 3uLL), v61);
                v69.i64[0] = v60.u32[2];
                v69.i64[1] = v60.u32[3];
                v70 = (int8x16_t)vshlq_u64(v69, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v49, 3uLL), v61));
                v71 = vmovl_u16(*(uint16x4_t *)v57.i8);
                v69.i64[0] = v60.u32[0];
                v69.i64[1] = v60.u32[1];
                v72 = (int8x16_t)vshlq_u64(v69, v68);
                v69.i64[0] = v71.u32[0];
                v69.i64[1] = v71.u32[1];
                v73 = (int8x16_t)vshlq_u64(v69, v67);
                v69.i64[0] = v59.u32[2];
                v69.i64[1] = v59.u32[3];
                v74 = (int8x16_t)vshlq_u64(v69, v66);
                v75 = vmovl_high_u16(v57);
                v69.i64[0] = v71.u32[2];
                v69.i64[1] = v71.u32[3];
                v76 = (int8x16_t)vshlq_u64(v69, v65);
                v69.i64[0] = v75.u32[0];
                v69.i64[1] = v75.u32[1];
                v77 = (int8x16_t)vshlq_u64(v69, v64);
                v69.i64[0] = v59.u32[0];
                v69.i64[1] = v59.u32[1];
                v78 = (int8x16_t)vshlq_u64(v69, v63);
                v69.i64[0] = v75.u32[2];
                v69.i64[1] = v75.u32[3];
                v51 = vorrq_s8((int8x16_t)vshlq_u64(v69, v62), v51);
                v52 = vorrq_s8(v78, v52);
                v50 = vorrq_s8(v77, v50);
                v43 = vorrq_s8(v76, v43);
                v53 = vorrq_s8(v74, v53);
                v39 = vorrq_s8(v73, v39);
                v54 = vorrq_s8(v72, v54);
                v55 = vorrq_s8(v70, v55);
                v79 = vdupq_n_s64(0x10uLL);
                v44 = vaddq_s64(v44, v79);
                v42 = vaddq_s64(v42, v79);
                v41 = vaddq_s64(v41, v79);
                v45 = vaddq_s64(v45, v79);
                v46 = vaddq_s64(v46, v79);
                v47 = vaddq_s64(v47, v79);
                v48 = vaddq_s64(v48, v79);
                v49 = vaddq_s64(v49, v79);
                v40 -= 16;
              }
              while (v40);
              v80 = vorrq_s8(vorrq_s8(vorrq_s8(v39, v52), vorrq_s8(v50, v54)), vorrq_s8(vorrq_s8(v43, v53), vorrq_s8(v51, v55)));
              v81 = vorr_s8(*(int8x8_t *)v80.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL));
              *v17 = v81;
              if ((v25 & 0xF) == 0)
                goto LABEL_46;
              v29 = v81;
              if ((v25 & 0xF) < 8uLL)
                goto LABEL_44;
            }
            else
            {
              v29 = 0;
              v30 = 0;
            }
            v82 = vdupq_n_s64(v30);
            v83 = vaddq_s64(v82, (int64x2_t)xmmword_1812332B0);
            v84 = (int8x16_t)(unint64_t)v29;
            v85 = v21 + v30;
            v86 = v30 + (v25 & 7);
            v30 = v25 - (unint64_t)(v25 & 7);
            v87 = vaddq_s64(v82, (int64x2_t)xmmword_181267BE0);
            v88 = vaddq_s64(v82, (int64x2_t)xmmword_181233290);
            v89 = vaddq_s64(v82, (int64x2_t)xmmword_181233120);
            v90 = 0uLL;
            v91 = (uint8x8_t *)(v26 + v85);
            v92 = v86 - v25;
            v93 = 0uLL;
            v94 = 0uLL;
            do
            {
              v95 = *v91++;
              v96 = vmovl_u8(v95);
              v97 = vmovl_high_u16(v96);
              v98.i64[0] = v97.u32[2];
              v98.i64[1] = v97.u32[3];
              v99 = v98;
              v98.i64[0] = v97.u32[0];
              v98.i64[1] = v97.u32[1];
              v100 = v98;
              v101 = vmovl_u16(*(uint16x4_t *)v96.i8);
              v98.i64[0] = v101.u32[2];
              v98.i64[1] = v101.u32[3];
              v102 = v98;
              v98.i64[0] = v101.u32[0];
              v98.i64[1] = v101.u32[1];
              v94 = vorrq_s8((int8x16_t)vshlq_u64(v99, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v83, 3uLL), v14)), v94);
              v93 = vorrq_s8((int8x16_t)vshlq_u64(v100, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v87, 3uLL), v14)), v93);
              v90 = vorrq_s8((int8x16_t)vshlq_u64(v102, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v88, 3uLL), v14)), v90);
              v103 = vdupq_n_s64(8uLL);
              v84 = vorrq_s8((int8x16_t)vshlq_u64(v98, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v89, 3uLL), v14)), v84);
              v87 = vaddq_s64(v87, v103);
              v88 = vaddq_s64(v88, v103);
              v89 = vaddq_s64(v89, v103);
              v83 = vaddq_s64(v83, v103);
              v92 += 8;
            }
            while (v92);
            v104 = vorrq_s8(vorrq_s8(v84, v93), vorrq_s8(v90, v94));
            v105 = vorr_s8(*(int8x8_t *)v104.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL));
            *v17 = v105;
            if ((v25 & 7) != 0)
            {
              v29 = v105;
              goto LABEL_44;
            }
          }
          else
          {
            v30 = 0;
            v29 = 0;
LABEL_44:
            v33 = v25 - v30;
            v34 = 8 * v30;
            v35 = (unsigned __int8 *)(v26 + v30 + v21);
            do
            {
              v36 = *v35++;
              *(_QWORD *)&v29 |= (unint64_t)v36 << (v34 & 0xF8);
              *v17 = v29;
              v34 += 8;
              --v33;
            }
            while (v33);
          }
LABEL_46:
          *((_QWORD *)v15 + 2) = v21 + v25;
          v16->i32[0] = 8 * v25;
          v31 = 8 * v25 - v24;
          if (8 * v25 < v24)
            goto LABEL_61;
          goto LABEL_47;
        }
      }
      v121 = (const char *)v23;
      llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", (_QWORD *)v15 + 2, (uint64_t *)&v121, (uint64_t *)&v124);
      v18 = v124;
      if (v124)
        goto LABEL_62;
      v31 = v16->i32[0] - v24;
      if (v16->i32[0] < v24)
      {
LABEL_61:
        llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)v15 + 8, (int *)&v120, (uint64_t *)&v119);
        v18 = v119;
LABEL_62:
        v106 = v114;
        *(_QWORD *)v114 = v18;
        if (v18)
          goto LABEL_83;
LABEL_63:
        if ((_DWORD)v11 == 2)
        {
LABEL_80:
          v121 = "Malformed block";
          v123 = 259;
          v110 = llvm::BitcodeErrorCategory(v8);
          v111 = operator new(0x38uLL);
          *(_QWORD *)v106 = llvm::StringError::StringError((uint64_t)v111, (llvm::Twine *)&v121, 1, (uint64_t)v110);
          goto LABEL_83;
        }
LABEL_74:
        if ((_DWORD)v11 == 1)
          llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders((uint64_t)this, (llvm::MDNode *)v118, v9);
        if (!(_DWORD)v11)
          goto LABEL_80;
        LODWORD(v127) = 0;
        v121 = 0;
        v122 = 0;
        llvm::BitstreamCursor::readRecord(this[25], (int)v115, (uint64_t)&v126, (unsigned __int8 **)&v121, (uint64_t)&v124);
        if ((v125 & 1) == 0)
        {
          llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(v106, (uint64_t)this, (unsigned int *)&v126, (int)v124, (uint64_t)v118, v121, v122, (uint64_t)&v117);
          v109 = *(_QWORD *)v106;
          if ((v125 & 1) != 0)
          {
            v8 = (llvm *)v124;
            v124 = 0;
            if (v8)
              v8 = (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v8 + 8))(v8);
          }
          v14 = v116;
          if (v109)
            goto LABEL_83;
          goto LABEL_18;
        }
        *(_QWORD *)v106 = v124;
LABEL_83:
        std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100]((uint64_t)v118);
        if (v126 != (char *)v128)
          free(v126);
        return;
      }
LABEL_47:
      v37 = *(_QWORD *)v17 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v24);
      *v17 = (int8x8_t)(*(unint64_t *)v17 >> v24);
      v16->i32[0] = v31;
      v32 = (v37 << v19) | v22;
      if ((_DWORD)v32 == 1)
      {
LABEL_40:
        llvm::SimpleBitstreamCursor::ReadVBR(v15, 8u, (uint64_t)&v121);
        if ((v122 & 1) != 0)
        {
          v108 = v121;
          v106 = v114;
          *(_QWORD *)v114 = v121;
          if (v108)
            goto LABEL_83;
          goto LABEL_63;
        }
        goto LABEL_51;
      }
LABEL_48:
      if ((_DWORD)v32 == 2)
      {
        llvm::BitstreamCursor::ReadAbbrevRecord((char **)v15, (unint64_t *)&v121);
        v14 = v116;
        v18 = v121;
        if (v121)
          goto LABEL_62;
      }
      else
      {
        if (!(_DWORD)v32)
        {
          if (*((_DWORD *)v15 + 18))
          {
            if (v16->i32[0] < 0x20u)
            {
              v107 = 0;
            }
            else
            {
              *v17 = (int8x8_t)(*(unint64_t *)v17 >> (v16->i8[0] - 32));
              v107 = 32;
            }
            *((_DWORD *)v15 + 8) = v107;
            llvm::BitstreamCursor::popBlockScope(v15);
            v38 = 1;
          }
          else
          {
LABEL_68:
            v38 = 0;
          }
LABEL_73:
          v115 = (char *)HIDWORD(v38);
          v106 = v114;
          *(_QWORD *)v114 = 0;
          LODWORD(v11) = v38;
          if ((_DWORD)v38 == 2)
            goto LABEL_80;
          goto LABEL_74;
        }
        v38 = (v32 << 32) | 3;
        if ((_DWORD)v38 != 2)
          goto LABEL_73;
LABEL_51:
        llvm::BitstreamCursor::SkipBlock(v15, (uint64_t *)&v121);
        v14 = v116;
        v18 = v121;
        if (v121)
          goto LABEL_62;
      }
    }
  }
}

void `anonymous namespace'::BitcodeReaderMetadataList::resize(_anonymous_namespace_::BitcodeReaderMetadataList *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;

  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2 != a2)
  {
    v5 = a2;
    if (v2 <= a2)
    {
      if (*((_DWORD *)this + 3) < a2)
      {
        llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::grow((uint64_t)this, a2);
        v2 = *((unsigned int *)this + 2);
      }
      if (v5 != v2)
        bzero((void *)(*(_QWORD *)this + 8 * v2), 8 * (v5 - v2));
    }
    else
    {
      v6 = 8 * v2;
      v7 = 8 * a2 - v6;
      v8 = (unsigned __int8 **)(v6 + *(_QWORD *)this - 8);
      do
      {
        if (*v8)
          llvm::MetadataTracking::untrack((uint64_t)v8, *v8);
        --v8;
        v7 += 8;
      }
      while (v7);
    }
    *((_DWORD *)this + 2) = a2;
  }
}

_BYTE *llvm::Expected<BOOL>::operator=(_BYTE *a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  if (a1 == a2)
    return a1;
  v4 = a1[8];
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = a1[8];
    }
  }
  v6 = a2[8];
  a1[8] = v4 & 0xFE | v6 & 1;
  if ((v6 & 1) == 0)
  {
    *a1 = *a2;
    return a1;
  }
  v8 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v8;
  return a1;
}

void llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders(uint64_t a1, llvm::MDNode *a2, void *a3)
{
  uint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  int v23;
  _DWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  char *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  void *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  llvm::Metadata *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::MDNode *v93;
  unsigned int *v94;
  unsigned int v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  llvm::MDNode *v105;
  llvm::MDNode *v106;
  uint64_t v107;
  llvm::ReplaceableMetadataImpl *v108;
  int v109;
  int v110;
  uint64_t v111;
  _QWORD *v112;
  unsigned int v113;
  uint64_t v114;
  _QWORD *v115;
  llvm::MDNode *v116;
  unsigned int v117;
  unsigned int *v118;
  _QWORD *v119;
  _DWORD *v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD *v123;
  uint64_t v124;
  llvm::MDNode *v125;
  _DWORD *v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  unsigned __int8 *v140;
  _QWORD *v141;
  uint64_t v142;
  void *__b;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;

  v3 = (uint64_t)a2;
  __b = 0;
  v144 = 0;
  v5 = (unsigned int *)(a1 + 32);
  v6 = a1 + 36;
  v145 = 0;
  while (1)
  {
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 8);
      if (*(_QWORD *)(v3 + 16) != v7)
      {
        v8 = *(_QWORD *)(v3 + 32);
        v9 = (_QWORD *)(v7 + 8 * (v8 >> 8));
        v10 = *v9 + 16 * v8;
        v11 = *(_QWORD *)(v7 + (((*(_QWORD *)(v3 + 40) + v8) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (*(_BYTE *)(v3 + 40) + v8);
        while (v10 != v11)
        {
          v12 = *(unsigned int *)(v10 + 4);
          if (*(_DWORD *)(a1 + 8) > v12 && (v13 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v12)) != 0)
          {
            if (*v13 - 5 > 0x1E || (v13[1] & 0x7F) != 2)
              goto LABEL_36;
            a2 = (llvm::MDNode *)v145;
            if (!v145)
              goto LABEL_61;
            v14 = (v145 - 1) & (37 * v12);
            v15 = (char *)__b + 4 * v14;
            v16 = *v15;
            if ((_DWORD)v12 == *v15)
              goto LABEL_36;
            v17 = 0;
            v18 = 1;
            while (v16 != -1)
            {
              if (v17)
                v19 = 0;
              else
                v19 = v16 == -2;
              if (v19)
                v17 = v15;
              v20 = v14 + v18++;
              v14 = v20 & (v145 - 1);
              v15 = (char *)__b + 4 * v14;
              v16 = *v15;
              if ((_DWORD)v12 == *v15)
                goto LABEL_36;
            }
            v29 = (char *)(v17 ? v17 : v15);
            if (4 * (int)v144 + 4 < 3 * v145)
            {
              if (v145 + ~(_DWORD)v144 - HIDWORD(v144) > v145 >> 3)
                goto LABEL_33;
            }
            else
            {
LABEL_61:
              LODWORD(a2) = 2 * v145;
            }
            llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow((uint64_t)&__b, (int)a2);
            if (!v145)
            {
LABEL_73:
              v29 = 0;
              goto LABEL_33;
            }
            v37 = v145 - 1;
            v38 = (v145 - 1) & (37 * v12);
            v29 = (char *)__b + 4 * v38;
            v39 = *(_DWORD *)v29;
            if ((_DWORD)v12 != *(_DWORD *)v29)
            {
              v33 = 0;
              v40 = 1;
              while (v39 != -1)
              {
                if (v33)
                  v41 = 0;
                else
                  v41 = v39 == -2;
                if (v41)
                  v33 = v29;
                v42 = v38 + v40++;
                v38 = v42 & v37;
                v29 = (char *)__b + 4 * (v42 & v37);
                v39 = *(_DWORD *)v29;
                if ((_DWORD)v12 == *(_DWORD *)v29)
                  goto LABEL_33;
              }
LABEL_74:
              if (v33)
                v29 = v33;
            }
          }
          else
          {
            a2 = (llvm::MDNode *)v145;
            if (!v145)
              goto LABEL_45;
            v21 = (v145 - 1) & (37 * v12);
            v22 = (char *)__b + 4 * v21;
            v23 = *v22;
            if ((_DWORD)v12 == *v22)
              goto LABEL_36;
            v24 = 0;
            v25 = 1;
            while (v23 != -1)
            {
              if (v24)
                v26 = 0;
              else
                v26 = v23 == -2;
              if (v26)
                v24 = v22;
              v27 = v21 + v25++;
              v21 = v27 & (v145 - 1);
              v22 = (char *)__b + 4 * v21;
              v23 = *v22;
              if ((_DWORD)v12 == *v22)
                goto LABEL_36;
            }
            v29 = (char *)(v24 ? v24 : v22);
            if (4 * (int)v144 + 4 < 3 * v145)
            {
              if (v145 + ~(_DWORD)v144 - HIDWORD(v144) > v145 >> 3)
                goto LABEL_33;
            }
            else
            {
LABEL_45:
              LODWORD(a2) = 2 * v145;
            }
            llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow((uint64_t)&__b, (int)a2);
            if (!v145)
              goto LABEL_73;
            v30 = v145 - 1;
            v31 = (v145 - 1) & (37 * v12);
            v29 = (char *)__b + 4 * v31;
            v32 = *(_DWORD *)v29;
            if ((_DWORD)v12 != *(_DWORD *)v29)
            {
              v33 = 0;
              v34 = 1;
              while (v32 != -1)
              {
                if (v33)
                  v35 = 0;
                else
                  v35 = v32 == -2;
                if (v35)
                  v33 = v29;
                v36 = v31 + v34++;
                v31 = v36 & v30;
                v29 = (char *)__b + 4 * (v36 & v30);
                v32 = *(_DWORD *)v29;
                if ((_DWORD)v12 == *(_DWORD *)v29)
                  goto LABEL_33;
              }
              goto LABEL_74;
            }
          }
LABEL_33:
          LODWORD(v144) = v144 + 1;
          if (*(_DWORD *)v29 != -1)
            --HIDWORD(v144);
          *(_DWORD *)v29 = v12;
LABEL_36:
          v10 += 16;
          if (v10 - *v9 == 4096)
          {
            v28 = v9[1];
            ++v9;
            v10 = v28;
          }
        }
      }
      v43 = v144;
      if ((_DWORD)v144)
        break;
      if (*(_DWORD *)(a1 + 24) <= 1u)
      {
        v57 = (unsigned int *)(a1 + 120);
        v56 = *(_DWORD *)(a1 + 120);
        if (v56 <= 1)
        {
          if (v56)
          {
            v58 = (_QWORD *)(a1 + 144);
            v59 = a1 + 144;
            v60 = (_QWORD *)(a1 + 128);
            goto LABEL_133;
          }
          v58 = (_QWORD *)(*(_QWORD *)(a1 + 128) + 16 * *(unsigned int *)(a1 + 136));
          v59 = (uint64_t)v58;
          v60 = (_QWORD *)(a1 + 128);
LABEL_121:
          v61 = *(_QWORD *)(a1 + 128) + 16 * *(unsigned int *)(a1 + 136);
          if (v58 != (_QWORD *)v61)
            goto LABEL_136;
          goto LABEL_122;
        }
        v60 = (_QWORD *)(a1 + 128);
        if ((v56 & 1) != 0)
        {
          v59 = a1 + 144;
        }
        else
        {
          v62 = *(unsigned int *)(a1 + 136);
          v59 = *(_QWORD *)(a1 + 128) + 16 * v62;
          if (!(_DWORD)v62)
            goto LABEL_122;
          v60 = *(_QWORD **)(a1 + 128);
        }
        v58 = v60;
        do
        {
          if ((*v58 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_132;
          v58 += 2;
        }
        while (v58 != (_QWORD *)v59);
        v58 = (_QWORD *)v59;
LABEL_132:
        v60 = (_QWORD *)(a1 + 128);
        if ((v56 & 1) == 0)
          goto LABEL_121;
LABEL_133:
        v61 = a1 + 144;
        if (v58 == (_QWORD *)(a1 + 144))
        {
LABEL_122:
          if (v56 <= 1)
            goto LABEL_161;
          goto LABEL_162;
        }
LABEL_136:
        while (2)
        {
          if ((*(_BYTE *)(a1 + 96) & 1) != 0)
          {
            v63 = 1;
            v64 = a1 + 104;
LABEL_140:
            v65 = v63 - 1;
            v66 = ((*v58 >> 4) ^ (*v58 >> 9)) & v65;
            v67 = (_QWORD *)(v64 + 16 * v66);
            v68 = *v67;
            if (*v58 != *v67)
            {
              v71 = 0;
              v72 = 1;
              while (v68 != -4096)
              {
                if (v71)
                  v73 = 0;
                else
                  v73 = v68 == -8192;
                if (v73)
                  v71 = v67;
                v74 = v66 + v72++;
                v66 = v74 & v65;
                v67 = (_QWORD *)(v64 + 16 * v66);
                v68 = *v67;
                if (*v58 == *v67)
                  goto LABEL_141;
              }
              if (v71)
                v70 = v71;
              else
                v70 = v67;
              goto LABEL_147;
            }
          }
          else
          {
            v63 = *(_DWORD *)(a1 + 112);
            if (v63)
            {
              v64 = *(_QWORD *)(a1 + 104);
              goto LABEL_140;
            }
            v70 = 0;
LABEL_147:
            llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucket<llvm::MDString * const&,llvm::DICompositeType * const&>(a1 + 96, v70, v58, v58 + 1);
          }
LABEL_141:
          v69 = v58 + 2;
          v58 = (_QWORD *)v59;
          if (v69 != (_QWORD *)v59)
          {
            v58 = v69;
            do
            {
              if ((*v58 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_135;
              v58 += 2;
            }
            while (v58 != (_QWORD *)v59);
            v58 = (_QWORD *)v59;
          }
LABEL_135:
          if (v58 == (_QWORD *)v61)
          {
            v56 = *v57;
            if (*v57 > 1)
              goto LABEL_162;
LABEL_161:
            if (*(_DWORD *)(a1 + 124))
            {
LABEL_162:
              if ((v56 & 1) != 0)
              {
                v77 = (char *)(a1 + 144);
                v78 = a1 + 144 - (_QWORD)v60 - 16;
                if (v78 < 0x10)
                  goto LABEL_167;
LABEL_170:
                v80 = (v78 >> 4) + 1;
                v79 = (char *)&v60[2 * (v80 & 0x1FFFFFFFFFFFFFFELL)];
                v81 = v60 + 2;
                v82 = v80 & 0x1FFFFFFFFFFFFFFELL;
                do
                {
                  *(v81 - 2) = -4096;
                  *v81 = -4096;
                  v81 += 4;
                  v82 -= 2;
                }
                while (v82);
                if (v80 != (v80 & 0x1FFFFFFFFFFFFFFELL))
                {
                  do
                  {
LABEL_173:
                    *(_QWORD *)v79 = -4096;
                    v79 += 16;
                  }
                  while (v79 != v77);
                }
                LODWORD(v76) = *v57 & 1;
              }
              else
              {
                v75 = (2 * v56) & 0xFFFFFFFC;
                v76 = *(unsigned int *)(a1 + 136);
                if (v75 < v76 && v76 >= 0x41)
                {
                  llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::shrink_and_clear((char *)(a1 + 120));
                  goto LABEL_176;
                }
                if ((_DWORD)v76)
                {
                  v60 = (_QWORD *)*v60;
                  v77 = (char *)&v60[2 * v76];
                  v78 = v77 - (char *)v60 - 16;
                  if (v78 >= 0x10)
                    goto LABEL_170;
LABEL_167:
                  v79 = (char *)v60;
                  goto LABEL_173;
                }
              }
              *(_DWORD *)(a1 + 120) = v76;
              *(_DWORD *)(a1 + 124) = 0;
            }
LABEL_176:
            v83 = *(unsigned int *)(a1 + 152);
            if ((_DWORD)v83)
            {
              v84 = 16 * v83;
              v85 = (uint64_t *)(*(_QWORD *)(a1 + 144) + 8);
              do
              {
                v86 = *v85;
                v88 = *(_QWORD *)(v86 + 8);
                if ((v88 & 4) != 0)
                  llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v88 & 0xFFFFFFFFFFFFFFF8), v87);
                v85 += 2;
                v84 -= 16;
              }
              while (v84);
              v89 = *(unsigned int *)(a1 + 152);
              if ((_DWORD)v89)
              {
                v90 = *(_QWORD *)(a1 + 144);
                v91 = 16 * v89;
                do
                {
                  v92 = v90 + v91;
                  v93 = *(llvm::MDNode **)(v90 + v91 - 8);
                  *(_QWORD *)(v90 + v91 - 8) = 0;
                  if (v93)
                    llvm::MDNode::deleteTemporary(v93, a2);
                  a2 = *(llvm::MDNode **)(v92 - 16);
                  if (a2)
                    llvm::MetadataTracking::untrack(v92 - 16, (unsigned __int8 *)a2);
                  v91 -= 16;
                }
                while (v91);
              }
            }
            v94 = (unsigned int *)(a1 + 72);
            *(_DWORD *)(a1 + 152) = 0;
            v95 = *(_DWORD *)(a1 + 72);
            if (v95 <= 1)
            {
              if (v95)
              {
                v96 = (_QWORD *)(a1 + 96);
                v97 = a1 + 96;
                v98 = (_QWORD *)(a1 + 80);
                goto LABEL_203;
              }
              v96 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 16 * *(unsigned int *)(a1 + 88));
              v97 = (uint64_t)v96;
              v98 = (_QWORD *)(a1 + 80);
LABEL_191:
              v99 = *(_QWORD *)(a1 + 80) + 16 * *(unsigned int *)(a1 + 88);
              if (v96 != (_QWORD *)v99)
                goto LABEL_206;
              goto LABEL_192;
            }
            v98 = (_QWORD *)(a1 + 80);
            if ((v95 & 1) != 0)
            {
              v97 = a1 + 96;
            }
            else
            {
              v100 = *(unsigned int *)(a1 + 88);
              v97 = *(_QWORD *)(a1 + 80) + 16 * v100;
              if (!(_DWORD)v100)
                goto LABEL_192;
              v98 = *(_QWORD **)(a1 + 80);
            }
            v96 = v98;
            do
            {
              if ((*v96 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_202;
              v96 += 2;
            }
            while (v96 != (_QWORD *)v97);
            v96 = (_QWORD *)v97;
LABEL_202:
            v98 = (_QWORD *)(a1 + 80);
            if ((v95 & 1) == 0)
              goto LABEL_191;
LABEL_203:
            v99 = a1 + 96;
            if (v96 != (_QWORD *)(a1 + 96))
            {
LABEL_206:
              while (2)
              {
                a2 = (llvm::MDNode *)*v96;
                if ((*(_BYTE *)(a1 + 96) & 1) != 0)
                {
                  v101 = 1;
                  v102 = a1 + 104;
LABEL_210:
                  v103 = v101 - 1;
                  v104 = (v101 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                  v105 = *(llvm::MDNode **)(v102 + 16 * v104);
                  if (v105 != a2)
                  {
                    v109 = 1;
                    while (v105 != (llvm::MDNode *)-4096)
                    {
                      v110 = v104 + v109++;
                      v104 = v110 & v103;
                      v105 = *(llvm::MDNode **)(v102 + 16 * v104);
                      if (v105 == a2)
                        goto LABEL_211;
                    }
                    goto LABEL_218;
                  }
LABEL_211:
                  v106 = *(llvm::MDNode **)(v102 + 16 * v104 + 8);
                  if (!v106)
                    goto LABEL_218;
                  v107 = *(_QWORD *)(v96[1] + 8);
                  if ((v107 & 4) != 0)
                  {
                    v108 = (llvm::ReplaceableMetadataImpl *)(v107 & 0xFFFFFFFFFFFFFFF8);
                    a2 = v106;
                    goto LABEL_220;
                  }
                }
                else
                {
                  v101 = *(_DWORD *)(a1 + 112);
                  if (v101)
                  {
                    v102 = *(_QWORD *)(a1 + 104);
                    goto LABEL_210;
                  }
LABEL_218:
                  v111 = *(_QWORD *)(v96[1] + 8);
                  if ((v111 & 4) != 0)
                  {
                    v108 = (llvm::ReplaceableMetadataImpl *)(v111 & 0xFFFFFFFFFFFFFFF8);
LABEL_220:
                    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v108, a2);
                  }
                }
                v112 = v96 + 2;
                v96 = (_QWORD *)v97;
                if (v112 != (_QWORD *)v97)
                {
                  v96 = v112;
                  do
                  {
                    if ((*v96 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      goto LABEL_205;
                    v96 += 2;
                  }
                  while (v96 != (_QWORD *)v97);
                  v96 = (_QWORD *)v97;
                }
LABEL_205:
                if (v96 == (_QWORD *)v99)
                {
                  v95 = *v94;
                  if (*v94 <= 1)
                    goto LABEL_227;
                  goto LABEL_228;
                }
                continue;
              }
            }
LABEL_192:
            if (v95 <= 1)
            {
LABEL_227:
              if (!*(_DWORD *)(a1 + 76))
                goto LABEL_243;
            }
LABEL_228:
            if ((v95 & 1) != 0)
            {
              v115 = (_QWORD *)(a1 + 96);
              goto LABEL_237;
            }
            v113 = (2 * v95) & 0xFFFFFFFC;
            v114 = *(unsigned int *)(a1 + 88);
            if (v113 < v114 && v114 >= 0x41)
            {
              llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::shrink_and_clear(a1 + 72, a2);
              goto LABEL_243;
            }
            if (!(_DWORD)v114)
              goto LABEL_242;
            v98 = (_QWORD *)*v98;
            v115 = &v98[2 * v114];
LABEL_237:
            while (2)
            {
              if (*v98 == -8192)
              {
LABEL_235:
                *v98 = -4096;
              }
              else if (*v98 != -4096)
              {
                v116 = (llvm::MDNode *)v98[1];
                v98[1] = 0;
                if (v116)
                  llvm::MDNode::deleteTemporary(v116, a2);
                goto LABEL_235;
              }
              v98 += 2;
              if (v98 == v115)
              {
                LODWORD(v114) = *v94 & 1;
LABEL_242:
                *(_DWORD *)(a1 + 72) = v114;
                *(_DWORD *)(a1 + 76) = 0;
LABEL_243:
                v118 = (unsigned int *)(a1 + 48);
                v117 = *(_DWORD *)(a1 + 48);
                if (v117 >= 2)
                {
                  v119 = (_QWORD *)(a1 + 56);
                  if ((v117 & 1) != 0)
                  {
                    v122 = (_DWORD *)(a1 + 60);
                    v120 = (_DWORD *)(a1 + 56);
                  }
                  else
                  {
                    v120 = *(_DWORD **)(a1 + 56);
                    v121 = *(unsigned int *)(a1 + 64);
                    v122 = &v120[v121];
                    if (!(_DWORD)v121)
                      goto LABEL_268;
                  }
                  v123 = v120;
                  do
                  {
                    if (*v123 < 0xFFFFFFFE)
                      goto LABEL_252;
                    ++v123;
                  }
                  while (v123 != v122);
                  v123 = v122;
LABEL_252:
                  if ((v117 & 1) != 0)
                  {
                    v124 = a1 + 60;
                    if (v123 != (_DWORD *)(a1 + 60))
                      goto LABEL_258;
                    goto LABEL_268;
                  }
                  v124 = *(_QWORD *)(a1 + 56) + 4 * *(unsigned int *)(a1 + 64);
                  if (v123 == (_DWORD *)v124)
                    goto LABEL_268;
                  do
                  {
LABEL_258:
                    v125 = *(llvm::MDNode **)(*(_QWORD *)a1 + 8 * *v123);
                    if (v125 && *(unsigned __int8 *)v125 - 5 <= 0x1E)
                      llvm::MDNode::resolveCycles(v125);
                    v126 = v123 + 1;
                    v123 = v122;
                    if (v126 != v122)
                    {
                      v123 = v126;
                      do
                      {
                        if (*v123 < 0xFFFFFFFE)
                          goto LABEL_257;
                        ++v123;
                      }
                      while (v123 != v122);
                      v123 = v122;
                    }
LABEL_257:
                    ;
                  }
                  while (v123 != (_DWORD *)v124);
                  v117 = *v118;
                  if (*v118 > 1 || *(_DWORD *)(a1 + 52))
                  {
LABEL_268:
                    if ((v117 & 1) != 0)
                    {
                      v128 = 1;
                      goto LABEL_277;
                    }
                    v127 = (2 * v117) & 0xFFFFFFFC;
                    v128 = *(unsigned int *)(a1 + 64);
                    if (v127 < v128 && v128 >= 0x41)
                    {
                      llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::shrink_and_clear((unsigned int *)(a1 + 48));
                      goto LABEL_279;
                    }
                    if ((_DWORD)v128)
                    {
                      v119 = (_QWORD *)*v119;
LABEL_277:
                      memset(v119, 255, 4 * v128);
                      LODWORD(v128) = *v118 & 1;
                    }
                    *(_DWORD *)(a1 + 48) = v128;
                    *(_DWORD *)(a1 + 52) = 0;
                  }
                }
LABEL_279:
                if (!*(_QWORD *)(v3 + 40))
LABEL_292:
                  llvm::deallocate_buffer((llvm *)__b, (void *)(4 * v145));
                v129 = *(_QWORD *)(v3 + 32);
                while (2)
                {
                  v130 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + ((v129 >> 5) & 0x7FFFFFFFFFFFFF8));
                  v131 = v130 + 16 * v129;
                  v132 = *(unsigned int *)(v131 + 4);
                  if (*(_DWORD *)(a1 + 8) <= v132)
                  {
                    v133 = 0;
                    v138 = v130 + 16 * v129;
                    v139 = *(_QWORD **)(v138 + 8);
                    v135 = (uint64_t *)(v138 + 8);
                    v136 = v139;
                    if (!v139)
                      goto LABEL_290;
                  }
                  else
                  {
                    v133 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v132);
                    v134 = v130 + 16 * v129;
                    v137 = *(_QWORD **)(v134 + 8);
                    v135 = (uint64_t *)(v134 + 8);
                    v136 = v137;
                    if (!v137)
                      goto LABEL_290;
                  }
                  *v136 = v133;
                  v140 = *(unsigned __int8 **)*v135;
                  if (v140)
                    llvm::MetadataTracking::track(*v135, v140, 1);
                  v146 = v131;
                  llvm::MetadataTracking::untrack((uint64_t)&v146, (unsigned __int8 *)v131);
                  v129 = *(_QWORD *)(v3 + 32);
                  v141 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + ((v129 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v129
                                    + 8);
                  if (v141)
                    *v141 = 0;
LABEL_290:
                  v142 = *(_QWORD *)(v3 + 40) - 1;
                  *(_QWORD *)(v3 + 32) = ++v129;
                  *(_QWORD *)(v3 + 40) = v142;
                  if (v129 >= 0x200)
                  {
                    operator delete(**(void ***)(v3 + 8));
                    *(_QWORD *)(v3 + 8) += 8;
                    v142 = *(_QWORD *)(v3 + 40);
                    v129 = *(_QWORD *)(v3 + 32) - 256;
                    *(_QWORD *)(v3 + 32) = v129;
                  }
                  if (!v142)
                    goto LABEL_292;
                  continue;
                }
              }
              continue;
            }
          }
          continue;
        }
      }
LABEL_102:
      if (HIDWORD(v144))
      {
        v48 = v145;
        if (v145 > 0x40)
        {
          v51 = (void *)(4 * v145);
LABEL_105:
          llvm::deallocate_buffer((llvm *)__b, v51);
        }
LABEL_106:
        if (v48)
          memset(__b, 255, 4 * v48);
        v144 = 0;
      }
      v52 = *(_DWORD *)(a1 + 24);
      if (v52 >= 2)
        goto LABEL_112;
    }
    if (v145)
    {
      v44 = 4 * v145;
      v45 = (unsigned int *)__b;
      while (*v45 >= 0xFFFFFFFE)
      {
        ++v45;
        v44 -= 4;
        if (!v44)
          goto LABEL_93;
      }
    }
    else
    {
      v45 = (unsigned int *)__b;
    }
    v46 = (unsigned int *)((char *)__b + 4 * v145);
    if (v45 != v46)
    {
      do
      {
        v47 = *v45++;
        llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(a1, v47, v3);
        if (v45 == v46)
          break;
        while (*v45 >= 0xFFFFFFFE)
        {
          if (++v45 == v46)
            goto LABEL_92;
        }
      }
      while (v45 != v46);
LABEL_92:
      v43 = v144;
    }
LABEL_93:
    if (!v43)
      goto LABEL_102;
    v48 = v145;
    if (v145 <= 4 * v43 || v145 < 0x41)
      goto LABEL_106;
    v49 = 1 << (33 - __clz(v43 - 1));
    if (v49 <= 64)
      v50 = 64;
    else
      v50 = v49;
    v51 = (void *)(4 * v145);
    if (v50 != v145)
      goto LABEL_105;
    v144 = 0;
    memset(__b, 255, (size_t)v51);
    v52 = *(_DWORD *)(a1 + 24);
    if (v52 >= 2)
    {
      do
      {
LABEL_112:
        v53 = (unsigned int *)v6;
        v54 = v5;
        if ((v52 & 1) != 0)
          goto LABEL_115;
        v54 = *(unsigned int **)(a1 + 32);
        v55 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v55)
        {
          v53 = &v54[v55];
          do
          {
LABEL_115:
            if (*v54 < 0xFFFFFFFE)
              goto LABEL_111;
            ++v54;
          }
          while (v54 != v53);
          v54 = v53;
        }
LABEL_111:
        llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(a1, *v54, v3);
        v52 = *(_DWORD *)(a1 + 24);
      }
      while (v52 > 1);
    }
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeDebugInfo(llvm::MetadataLoader::MetadataLoaderImpl *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  llvm::MDNode **v8;
  uint64_t v9;
  llvm::Metadata *v10;
  uint64_t v11;
  llvm::MDNode *v12;

  v4 = *((_QWORD *)this + 91);
  v5 = *((_QWORD *)this + 92);
  if (v4 == v5)
  {
    *((_QWORD *)this + 92) = v4;
    llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUVariables(this);
    if (!a2)
      return;
    goto LABEL_3;
  }
  do
  {
    v6 = *(_BYTE **)(v4 + 8);
    if (v6 && *v6 == 5)
    {
      v7 = *((_QWORD *)v6 - 2);
      if ((v7 & 2) != 0)
      {
        v8 = (llvm::MDNode **)*((_QWORD *)v6 - 4);
        v9 = *((unsigned int *)v6 - 6);
        if (!v9)
          goto LABEL_4;
      }
      else
      {
        v8 = (llvm::MDNode **)&v6[-8 * ((v7 >> 2) & 0xF) - 16];
        v9 = (v7 >> 6) & 0xF;
        if (!v9)
          goto LABEL_4;
      }
      v10 = *(llvm::Metadata **)v4;
      v11 = 8 * v9;
      do
      {
        v12 = *v8;
        if (*v8)
        {
          if (*(_BYTE *)v12 == 18)
            llvm::MDNode::replaceOperandWith(v12, 5u, v10);
        }
        ++v8;
        v11 -= 8;
      }
      while (v11);
    }
LABEL_4:
    v4 += 16;
  }
  while (v4 != v5);
  *((_QWORD *)this + 92) = *((_QWORD *)this + 91);
  llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUVariables(this);
  if (a2)
LABEL_3:
    llvm::MetadataLoader::MetadataLoaderImpl::upgradeCULocals(this);
}

BOOL llvm::BitstreamCursor::ReadBlockEnd(llvm::BitstreamCursor *this)
{
  int v1;
  unsigned int v2;
  BOOL v3;
  char v4;
  int v5;

  v1 = *((_DWORD *)this + 18);
  if (v1)
  {
    v2 = *((_DWORD *)this + 8);
    v3 = v2 >= 0x20;
    v4 = v2 - 32;
    if (v3)
    {
      *((_QWORD *)this + 3) >>= v4;
      v5 = 32;
    }
    else
    {
      v5 = 0;
    }
    *((_DWORD *)this + 8) = v5;
    llvm::BitstreamCursor::popBlockScope(this);
  }
  return v1 == 0;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::Twine *a1, uint64_t a2, unsigned int *a3, int a4, uint64_t a5, const char *a6, unint64_t a7, uint64_t a8)
{
  llvm::Twine *v8;
  unsigned int *v9;
  int *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  llvm::ValueAsMetadata *ValueFwdRef;
  llvm::Value *v22;
  llvm::Metadata *v23;
  int *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  llvm::Metadata *Impl;
  void *v37;
  int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int8 *v41;
  int v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  llvm::UndefValue *v52;
  int v53;
  llvm::BitcodeReaderValueList *v54;
  uint64_t v55;
  llvm::ValueAsMetadata *v56;
  llvm::Type *v57;
  llvm::UndefValue **v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  int *v67;
  unsigned int v68;
  int v70;
  unsigned __int8 *v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  _QWORD *v81;
  unsigned int v82;
  int *v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  int *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int *v92;
  uint64_t v93;
  _BOOL4 v94;
  unsigned __int8 v95;
  _BOOL4 v96;
  int *v97;
  unint64_t v98;
  unsigned int v99;
  int v100;
  unsigned __int8 *v101;
  unsigned int v102;
  int *v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  int *v107;
  int v108;
  int v109;
  unsigned __int8 *v110;
  int *v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  _QWORD *v119;
  int v120;
  unsigned __int8 *v121;
  int *v122;
  uint64_t v123;
  _QWORD *v124;
  int v125;
  unsigned __int8 *v126;
  unsigned int v127;
  int v128;
  unsigned __int8 *v129;
  int *v130;
  uint64_t v131;
  uint64_t *v132;
  int v133;
  unsigned __int8 *v134;
  int *v135;
  uint64_t v136;
  _QWORD *v137;
  int v138;
  int v139;
  unsigned __int8 *v140;
  unsigned int v141;
  int *v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  int v146;
  unsigned __int8 *v147;
  unsigned int v148;
  int *v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  BOOL v153;
  _BOOL4 v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int *v157;
  unint64_t v158;
  void *v159;
  int *v160;
  uint64_t v161;
  _QWORD *v162;
  int v163;
  unsigned __int8 *v164;
  unsigned int v165;
  const char *v166;
  unsigned int v167;
  unsigned int v168;
  int *v169;
  uint64_t v170;
  int v171;
  unsigned __int8 *v172;
  int *v173;
  uint64_t v174;
  _QWORD *v175;
  int v176;
  int v177;
  int v178;
  unsigned __int8 *v179;
  int *v180;
  uint64_t v181;
  _QWORD *v182;
  int v183;
  int v184;
  int v185;
  unsigned __int8 *v186;
  uint64_t v187;
  unsigned int v188;
  int *v190;
  int v191;
  void *v192;
  _QWORD *v193;
  int v194;
  unsigned __int8 *v195;
  int *v196;
  _QWORD *v197;
  int v198;
  unsigned __int8 *v199;
  unsigned int v200;
  int *v201;
  int v202;
  unsigned __int8 *v203;
  unsigned int v204;
  int *v205;
  _QWORD *v206;
  int v207;
  unsigned __int8 *v208;
  _QWORD *v209;
  int *v210;
  int v211;
  unsigned __int8 *v212;
  unint64_t v213;
  unsigned int *v214;
  uint64_t v215;
  unsigned __int8 *v216;
  unsigned __int8 *v217;
  int v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  int *v225;
  uint64_t v226;
  BOOL v227;
  int8x16_t *v228;
  const unsigned __int8 *v229;
  llvm::Metadata *v231;
  uint64_t v232;
  unsigned int *v233;
  char *v234;
  unint64_t v235;
  int *v236;
  char v237;
  int v238;
  int *v239;
  uint64_t v240;
  _QWORD *v241;
  int v242;
  unsigned __int8 *v243;
  BOOL v244;
  unint64_t v245;
  uint64_t v246;
  int v247;
  unsigned __int8 *v248;
  int v249;
  unsigned __int8 *v250;
  int v251;
  unsigned __int8 *v252;
  int *v253;
  unint64_t v254;
  _QWORD *v255;
  int v256;
  unsigned __int8 *v257;
  _QWORD *v258;
  int v259;
  unsigned __int8 *v260;
  llvm::Type *v261;
  int v262;
  unsigned __int8 *v263;
  _QWORD *v264;
  int v265;
  int v266;
  unsigned __int8 *v267;
  int v268;
  int v269;
  llvm::Metadata *v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  unsigned __int8 *v275;
  int v276;
  llvm::MDNode *v277;
  const char *v278;
  uint64_t v279;
  unsigned __int8 *v280;
  _OWORD *v281;
  int8x16x4_t *v282;
  uint64_t v283;
  __int128 v284;
  __int128 v285;
  int v286;
  int v287;
  unsigned __int8 *v288;
  int v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  unsigned __int8 *v293;
  unsigned __int8 *v294;
  unsigned __int8 *v295;
  int v296;
  unsigned __int8 *v297;
  unsigned __int8 *v298;
  unsigned __int8 *v299;
  int v300;
  unsigned __int8 *v301;
  int v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  int v305;
  int v306;
  unsigned __int8 *v307;
  int v308;
  unsigned __int8 *v309;
  int v310;
  unsigned __int8 *v311;
  int v312;
  unsigned __int8 *v313;
  llvm::Metadata *v314;
  int *v315;
  llvm::Metadata *v316;
  int v317;
  int v318;
  int v319;
  int v320;
  unsigned __int8 *v321;
  int v322;
  int v323;
  int v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  int v330;
  int v331;
  int v332;
  unsigned __int8 *v333;
  unsigned int v334;
  uint64_t v335;
  int v336;
  int v337;
  uint64_t v338;
  unsigned __int8 *v339;
  unsigned __int8 *v340;
  int v341;
  uint64_t v342;
  unsigned __int8 *v343;
  int v344;
  uint64_t v345;
  const char *v346;
  uint64_t v347;
  unsigned __int8 *v348;
  int v349;
  unsigned __int8 *v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  unint64_t v354;
  uint64_t *v355;
  int v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  int v360;
  int v361;
  int v362;
  _BOOL4 v363;
  _BOOL4 v364;
  _BOOL4 v365;
  uint64_t v366;
  int v367;
  unsigned __int8 *v368;
  int v369;
  unsigned __int8 *v370;
  int v371;
  unsigned __int8 *v372;
  int v373;
  unsigned __int8 *v374;
  int v375;
  unsigned __int8 *v376;
  int v377;
  unsigned __int8 *v378;
  int v379;
  unsigned __int8 *v380;
  _QWORD *v381;
  uint64_t v382;
  int v383;
  int v384;
  unsigned __int8 *v385;
  uint64_t v386;
  unsigned __int8 *v387;
  int v388;
  unsigned int v389;
  _QWORD *v390;
  uint64_t v391;
  int v392;
  int v393;
  _QWORD *v394;
  uint64_t v395;
  int v396;
  llvm::Metadata *v397;
  int v398;
  int v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  llvm::Metadata *v404;
  int v405;
  _BOOL4 v406;
  int v407;
  unsigned __int8 *v408;
  int v409;
  int v410;
  unsigned __int8 *v411;
  _QWORD *v412;
  int v413;
  int v414;
  uint64_t v415;
  int v416;
  _QWORD *v417;
  int v418;
  int v419;
  uint64_t v420;
  int v421;
  llvm::Metadata *v422;
  int *v423;
  int v424;
  unsigned __int8 *v425;
  int v426;
  uint64_t v427;
  unsigned __int8 *v428;
  int v429;
  unsigned __int8 *v430;
  uint64_t v431;
  unsigned __int8 *v432;
  int v433;
  int v434;
  unsigned __int8 *v435;
  uint64_t v436;
  unsigned __int8 *v437;
  llvm::Metadata *v438;
  unsigned int v439;
  int v440;
  char v441;
  char *v442;
  void *v443;
  int8x16x4_t *v444;
  _OWORD *v445;
  uint64_t v446;
  __int128 v447;
  __int128 v448;
  _QWORD *v449;
  uint64_t v450;
  int8x16x4_t *v451;
  uint64_t v452;
  int v453;
  int v454;
  int v455;
  _BOOL4 v456;
  unsigned __int8 *v457;
  llvm::Metadata *v458;
  int v459;
  unsigned __int8 *v460;
  llvm::Metadata *v461;
  int *v462;
  uint64_t v463;
  int v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  int v470;
  unsigned __int8 *v471;
  unint64_t v472;
  llvm::Metadata *v473;
  unsigned int v474;
  unsigned __int8 *v475;
  uint64_t v476;
  int v477;
  unsigned __int8 *v478;
  int v479;
  unsigned __int8 *v480;
  int v481;
  unsigned __int8 *v482;
  _QWORD *v483;
  int *v484;
  int v485;
  int v486;
  unsigned __int8 *v487;
  unsigned __int8 *v488;
  int v489;
  unsigned __int8 *v490;
  int v491;
  unsigned __int8 *v492;
  int v493;
  _BYTE *String;
  size_t v495;
  _BYTE *v496;
  unint64_t v497;
  char *v498;
  BOOL v499;
  int v500;
  unsigned __int8 *v501;
  uint64_t v502;
  uint64_t v503;
  unsigned __int8 *v504;
  unsigned __int8 *v505;
  unsigned __int8 *v506;
  int v507;
  unsigned __int8 *v508;
  int *v509;
  char v510;
  char v511;
  unsigned __int8 *v512;
  char v513;
  int v514;
  unsigned __int8 *v515;
  int v516;
  unsigned __int8 *v517;
  int v518;
  unsigned __int8 *v519;
  int v520;
  unsigned __int8 *v521;
  int v522;
  _QWORD *v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  int v527;
  unsigned __int8 *v528;
  int *v529;
  uint64_t v530;
  unsigned __int8 *v531;
  unsigned __int8 *v532;
  uint64_t v533;
  unsigned __int8 *v534;
  uint64_t v535;
  unsigned __int8 *v536;
  uint64_t v537;
  uint64_t v538;
  unsigned __int8 *v539;
  llvm::Metadata *v540;
  uint64_t *v541;
  int *v542;
  int v543;
  _QWORD *v544;
  int *v545;
  int v546;
  unsigned __int8 *v547;
  unsigned __int8 *v548;
  int v549;
  unsigned __int8 *v550;
  unsigned __int8 *v551;
  int v552;
  int v553;
  unsigned __int8 *v554;
  uint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  int v560;
  unsigned __int8 *v561;
  unsigned __int8 *v562;
  int v563;
  int v564;
  unsigned __int8 *v565;
  int v566;
  int v567;
  int v568;
  unsigned __int8 *v569;
  int v570;
  unsigned __int8 *v571;
  int v572;
  unsigned __int8 *v573;
  int v574;
  int v575;
  int v576;
  unsigned __int8 *v577;
  uint64_t v578;
  unsigned __int8 *v579;
  int v580;
  int v581;
  unsigned __int8 *v582;
  int *v583;
  int v584;
  llvm::Metadata *v585;
  int v586;
  llvm::Metadata *v587;
  int v588;
  _BOOL4 v589;
  int v590;
  int v591;
  int v592;
  unsigned __int8 *v593;
  llvm::Metadata *v594;
  int *v595;
  int v596;
  unsigned __int8 *v597;
  int v598;
  uint64_t v599;
  unsigned __int8 *v600;
  int v601;
  unsigned __int8 *v602;
  int v603;
  unsigned __int8 *v604;
  int v605;
  unsigned __int8 *v606;
  int v607;
  unsigned __int8 *v608;
  uint64_t v609;
  unsigned __int8 *v610;
  int v611;
  _BOOL4 v612;
  unsigned __int8 *v613;
  int v614;
  int v615;
  int v616;
  unsigned __int8 *v617;
  uint64_t v618;
  unsigned __int8 *v619;
  llvm::Metadata *v620;
  int *v621;
  uint64_t v622;
  int v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  int v629;
  unsigned __int8 *v630;
  unsigned int v631;
  int v632;
  uint64_t v633;
  llvm::Metadata *v634;
  unsigned int v635;
  int v636;
  char v637;
  _QWORD *v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  int v643;
  _QWORD *v644;
  int v645;
  unsigned __int8 *v646;
  int v647;
  unsigned __int8 *v648;
  int *v649;
  int v650;
  int v651;
  int v652;
  int v653;
  uint64_t v654;
  unsigned __int8 *v655;
  int *v656;
  uint64_t v657;
  uint64_t v658;
  unsigned __int8 *v659;
  uint64_t v660;
  unsigned __int8 *v661;
  uint64_t v662;
  unsigned __int8 *v663;
  uint64_t v664;
  uint64_t v665;
  unsigned __int8 *v666;
  uint64_t v667;
  uint64_t v668;
  unsigned __int8 *v669;
  llvm::MDNode *v670;
  uint64_t v671;
  unsigned __int8 *v672;
  uint64_t v673;
  unsigned __int8 *v674;
  uint64_t v675;
  uint64_t v676;
  unsigned __int8 *v677;
  llvm::Metadata *v678;
  llvm::ValueAsMetadata *v679;
  llvm::Value *v680;
  unint64_t v681;
  uint64_t v682;
  int v683;
  llvm::Value *v684;
  int v685;
  unsigned __int8 *v686;
  char *v687;
  char *v688;
  int v689;
  unsigned __int8 *v690;
  int *v691;
  int v692;
  int v693;
  unsigned __int8 *v694;
  int v695;
  unsigned __int8 *v696;
  int v697;
  int v698;
  int v699;
  int v700;
  uint64_t v701;
  unsigned __int8 *v702;
  int *v703;
  uint64_t v704;
  uint64_t v705;
  unsigned __int8 *v706;
  _BOOL4 v707;
  uint64_t v708;
  unsigned __int8 *v709;
  uint64_t v710;
  unsigned __int8 *v711;
  uint64_t v712;
  uint64_t v713;
  unsigned __int8 *v714;
  uint64_t v715;
  uint64_t v716;
  unsigned __int8 *v717;
  llvm::DISubprogram *v718;
  _BOOL4 v719;
  uint64_t v720;
  int v721;
  int v722;
  int v723;
  int v724;
  int v725;
  unsigned __int8 *v726;
  llvm::Metadata *v727;
  int *v728;
  uint64_t v729;
  uint64_t v730;
  int v731;
  unsigned __int8 *v732;
  int v733;
  unsigned __int8 *v734;
  int v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  int v741;
  int v742;
  int v743;
  unsigned __int8 *v744;
  int v745;
  int v746;
  int v747;
  unsigned __int8 *v748;
  int v749;
  unsigned __int8 *v750;
  llvm::Metadata *v751;
  int *v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  unsigned __int8 *v756;
  int *v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  char v761;
  char v762;
  uint64_t v763;
  uint64_t v764;
  int v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t inserted;
  llvm::NamedMDNode *v769;
  uint64_t v770;
  uint64_t v771;
  unsigned __int8 *MetadataFwdRef;
  char v773;
  unsigned int *v774;
  uint64_t v775;
  int v776;
  int *v777;
  int v778;
  int v779;
  int v780;
  int v781;
  int v782;
  uint64_t *v783;
  uint64_t v784;
  unsigned __int8 *v785;
  llvm::Metadata *v786;
  int *v787;
  uint64_t v788;
  uint64_t v789;
  int v790;
  unsigned __int8 *v791;
  int v792;
  unsigned __int8 *v793;
  unsigned int v794;
  _anonymous_namespace_::BitcodeReaderMetadataList *v795;
  uint64_t v796;
  _QWORD *v797;
  uint64_t *v798;
  int *v799;
  int v800;
  int v801;
  int v802;
  int v803;
  unsigned __int8 *v804;
  int v805;
  int v806;
  unsigned __int8 *v807;
  llvm::Metadata *v808;
  int *v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  unsigned __int8 *v813;
  uint64_t v814;
  int v815;
  int v816;
  int v817;
  int v818;
  int v819;
  unsigned __int8 *v820;
  llvm::Metadata *v821;
  int *v822;
  uint64_t v823;
  uint64_t v824;
  int v825;
  unsigned __int8 *v826;
  uint64_t v827;
  _QWORD *v828;
  llvm::MDNode *v829;
  llvm::MDNode *v830;
  int v831;
  int v832;
  unsigned int v833;
  int v834;
  unsigned __int8 *v835;
  unsigned __int8 *v836;
  unsigned __int8 *v837;
  unsigned __int8 *v838;
  int v839;
  unsigned __int8 *v840;
  unsigned __int8 *v841;
  unsigned __int8 *v842;
  uint64_t v843;
  unsigned __int8 *v844;
  unsigned __int8 *v845;
  unsigned __int8 *v846;
  uint64_t v847;
  char *v848;
  int v849;
  uint64_t v850;
  unsigned int v851;
  uint64_t v852;
  uint64_t v853;
  unsigned int v854;
  uint64_t v855;
  int v856;
  uint64_t v857;
  char **v858;
  int v859;
  int v860;
  int v861;
  _anonymous_namespace_::BitcodeReaderMetadataList *v862;
  llvm::Metadata *v863;
  unsigned int v864;
  uint64_t v865;
  __int128 v866;
  __int128 v867;
  llvm::Metadata *v868;
  llvm::Metadata *v869;
  _BYTE v870[5];
  uint64_t v871;
  unsigned __int8 *v872;
  unsigned __int8 *v873;
  unsigned __int8 *v874;
  unsigned __int8 *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  llvm::Metadata *v879;
  uint64_t v880;
  uint64_t v881;
  llvm::Metadata *v882;
  unsigned __int8 *v883;
  llvm::Metadata *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  BOOL v888;
  int v889;
  unsigned __int8 *v890;
  unsigned __int8 *v891;
  uint64_t v892;
  uint64_t v893;
  int v894;
  int v895;
  uint64_t v896;
  unsigned int *v897;
  unsigned __int8 *v898;
  uint64_t v899;
  unsigned __int8 *v900;
  unsigned __int8 *v901;
  unsigned __int8 *v902;
  unsigned __int8 *v903;
  llvm::Twine *v904;
  unsigned __int8 *v905;
  unsigned __int8 *v906;
  unsigned __int8 *v907;
  unint64_t v908;
  unsigned __int8 *v909;
  unsigned __int8 *v910;
  int v911;
  unsigned __int8 *v912;
  uint64_t v913;
  llvm::Metadata *v914;
  unsigned __int8 *v915;
  unsigned __int8 *v916;
  uint64_t v917;
  unsigned __int8 *v918;
  int v919;
  int v920;
  llvm::Metadata *v921;
  llvm::Metadata *v922;
  unsigned int v923;
  int v924;
  int v925;
  _BOOL4 v926;
  unsigned int v927;
  uint64_t v928;
  unsigned __int8 *v929;
  _BOOL4 v930;
  unsigned __int8 *v931;
  unsigned __int8 *v932;
  unsigned __int8 v933;
  uint64_t v934;
  uint64_t *v935;
  unsigned __int8 *v936;
  unsigned __int8 *v937;
  unsigned __int8 *v938;
  unsigned __int8 *v939;
  unsigned __int8 *v940;
  uint64_t v941;
  unsigned __int8 *v942;
  int v943;
  _BOOL4 v944;
  llvm::Metadata *v945;
  unsigned __int8 *v946;
  unsigned __int8 *v947;
  unsigned __int8 *v948;
  unsigned __int8 *v949;
  uint64_t v950;
  uint64_t v951;
  unsigned int v952;
  int v953;
  _QWORD *v954;
  uint64_t v955;
  unsigned __int8 *v956;
  unsigned __int8 *v957;
  unsigned __int8 *v958;
  unsigned __int8 *v959;
  unsigned __int8 *v960;
  uint64_t v961;
  unsigned __int8 *v962;
  unsigned __int8 *v963;
  unsigned __int8 *v964;
  unsigned int v965;
  uint64_t v966;
  int v967;
  int v968;
  unsigned __int8 *v969;
  unsigned __int8 *v970;
  int v971;
  uint64_t *v972;
  unsigned int v973;
  unsigned __int8 *v974;
  uint64_t v975;
  uint64_t *v976;
  int v977;
  unsigned __int8 *v978;
  uint64_t v979;
  unsigned __int8 *v980;
  unsigned __int8 *v981;
  _QWORD *v982;
  int v983;
  uint64_t v984;
  void *__p;
  unsigned int v986;
  unsigned int *v987;
  unsigned int v988;
  uint64_t v989[4];
  unsigned __int8 v990;
  llvm::ValueAsMetadata *v991;
  __int128 v992;
  uint64_t v993;
  __int16 v994;
  __int128 v995;
  _QWORD v996[2];
  __int16 v997;
  uint64_t v998;
  char v999;
  uint64_t v1000;

  v8 = a1;
  v1000 = *MEMORY[0x1E0C80C00];
  v990 = 0;
  v989[0] = a2;
  v989[1] = (uint64_t)&v990;
  v989[2] = a8;
  v989[3] = a5;
  v9 = (unsigned int *)a8;
  switch(a4)
  {
    case 1:
      v12 = *(int **)a3;
      v13 = a3[2];
      if (v13 >= 0x17)
      {
        if ((v13 | 7) == 0x17)
          v222 = (v13 & 0xFFFFFFF8) + 8;
        else
          v222 = v13 | 7;
        v14 = (__int128 *)operator new(v222 + 1);
        *((_QWORD *)&v995 + 1) = v13;
        v996[0] = v222 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v995 = v14;
      }
      else
      {
        HIBYTE(v996[0]) = a3[2];
        v14 = &v995;
        if (!(_DWORD)v13)
        {
          v15 = &v995;
          goto LABEL_223;
        }
      }
      v223 = (v13 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v223 >= 0x1F && ((v224 = v223 + 1, v14 >= (__int128 *)&v12[2 * v13]) || v12 >= (int *)((char *)v14 + v224)))
      {
        v225 = &v12[2 * (v224 & 0x3FFFFFFFFFFFFFE0)];
        v15 = (__int128 *)((char *)v14 + (v224 & 0x3FFFFFFFFFFFFFE0));
        v281 = v14 + 1;
        v282 = (int8x16x4_t *)(v12 + 32);
        v283 = v224 & 0x3FFFFFFFFFFFFFE0;
        do
        {
          *(_QWORD *)&v284 = vqtbl4q_s8(v282[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
          *(_QWORD *)&v285 = vqtbl4q_s8(*v282, (int8x16_t)xmmword_18125CFF0).u64[0];
          *((_QWORD *)&v284 + 1) = vqtbl4q_s8(v282[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
          *((_QWORD *)&v285 + 1) = vqtbl4q_s8(v282[1], (int8x16_t)xmmword_18125CFF0).u64[0];
          *(v281 - 1) = v284;
          *v281 = v285;
          v281 += 2;
          v282 += 4;
          v283 -= 32;
        }
        while (v283);
        if (v224 == (v224 & 0x3FFFFFFFFFFFFFE0))
        {
LABEL_223:
          v227 = 0;
          *(_BYTE *)v15 = 0;
          if (v996[0] >= 0)
            v228 = (int8x16_t *)&v995;
          else
            v228 = (int8x16_t *)v995;
          if (v996[0] >= 0)
            v229 = (const unsigned __int8 *)HIBYTE(v996[0]);
          else
            v229 = (const unsigned __int8 *)*((_QWORD *)&v995 + 1);
          if ((unint64_t)v229 >= 0x10)
            v227 = v228->i64[0] == 0x6365762E6D766C6CLL && v228->i64[1] == 0x2E72657A69726F74;
          *(_BYTE *)(a2 + 1041) |= v227;
          v231 = (llvm::Metadata *)llvm::MDString::get(*(_QWORD **)(a2 + 208), v228, v229);
          ++*v9;
          if (SHIBYTE(v996[0]) < 0)
            operator delete((void *)v995);
          goto LABEL_1142;
        }
      }
      else
      {
        v225 = v12;
        v15 = v14;
      }
      do
      {
        v226 = *(_QWORD *)v225;
        v225 += 2;
        *(_BYTE *)v15 = v226;
        v15 = (__int128 *)((char *)v15 + 1);
      }
      while (v225 != &v12[2 * v13]);
      goto LABEL_223;
    case 2:
      if (a3[2] != 2)
        goto LABEL_311;
      v16 = **(_DWORD **)a3;
      LODWORD(v995) = v16;
      v17 = *(_QWORD *)(a2 + 248);
      if (!v17)
        goto LABEL_1230;
      v18 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 48))(v17, &v995);
      if (!v18)
        goto LABEL_311;
      v19 = v18[8];
      if (v19 == 9 || v19 == 7)
        goto LABEL_311;
      ValueFwdRef = (llvm::ValueAsMetadata *)getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), *(_DWORD *)(*(_QWORD *)a3 + 8), (llvm::Type *)v18, v16);
      if (ValueFwdRef)
      {
        *(_QWORD *)&v995 = llvm::ValueAsMetadata::get(ValueFwdRef, v22);
        llvm::MetadataLoader::MetadataLoaderImpl::callMDTypeCallback((_BYTE *)a2, (uint64_t)&v995, v16);
        v23 = (llvm::Metadata *)v995;
        goto LABEL_1140;
      }
      v166 = "Invalid value reference from metadata";
      goto LABEL_312;
    case 3:
      goto LABEL_17;
    case 4:
      v24 = *(int **)a3;
      v25 = a3[2];
      v991 = (llvm::ValueAsMetadata *)&v993;
      v992 = xmmword_1812349A0;
      if (v25 < 9)
      {
        v26 = 0;
        v232 = 0;
        if (!(_DWORD)v25)
          goto LABEL_1088;
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v991, &v993, v25, 1);
        v26 = v992;
      }
      v233 = (unsigned int *)v991;
      v234 = (char *)v991 + v26;
      v235 = (v25 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v235 < 7)
      {
        v236 = v24;
        goto LABEL_1086;
      }
      v244 = v234 >= (char *)&v24[2 * v25] || v24 >= (int *)((char *)v991 + v26 + v235 + 1);
      v236 = v24;
      if (!v244)
        goto LABEL_1086;
      v245 = v235 + 1;
      if (v235 >= 0x1F)
      {
        v246 = v245 & 0x3FFFFFFFFFFFFFE0;
        v444 = (int8x16x4_t *)(v24 + 32);
        v445 = (_OWORD *)((char *)v991 + v26 + 16);
        v446 = v245 & 0x3FFFFFFFFFFFFFE0;
        do
        {
          *(_QWORD *)&v447 = vqtbl4q_s8(v444[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
          *(_QWORD *)&v448 = vqtbl4q_s8(*v444, (int8x16_t)xmmword_18125CFF0).u64[0];
          *((_QWORD *)&v447 + 1) = vqtbl4q_s8(v444[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
          *((_QWORD *)&v448 + 1) = vqtbl4q_s8(v444[1], (int8x16_t)xmmword_18125CFF0).u64[0];
          *(v445 - 1) = v447;
          *v445 = v448;
          v444 += 4;
          v445 += 2;
          v446 -= 32;
        }
        while (v446);
        if (v245 == v246)
          goto LABEL_1087;
        if ((v245 & 0x18) == 0)
        {
          v236 = &v24[2 * v246];
          v234 += v246;
          do
          {
LABEL_1086:
            v764 = *(_QWORD *)v236;
            v236 += 2;
            *v234++ = v764;
          }
          while (v236 != &v24[2 * v25]);
          goto LABEL_1087;
        }
      }
      else
      {
        v246 = 0;
      }
      v234 += v245 & 0x3FFFFFFFFFFFFFF8;
      v236 = &v24[2 * (v245 & 0x3FFFFFFFFFFFFFF8)];
      v449 = (_QWORD *)((char *)v233 + v26 + v246);
      v450 = v246 - (v245 & 0x3FFFFFFFFFFFFFF8);
      v451 = (int8x16x4_t *)&v24[2 * v246];
      do
      {
        *v449++ = vqtbl4q_s8(*v451++, (int8x16_t)xmmword_18125D000).u64[0];
        v450 += 8;
      }
      while (v450);
      if (v245 != (v245 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_1086;
LABEL_1087:
      v232 = v992;
LABEL_1088:
      *(_QWORD *)&v992 = v232 + v25;
      a3[2] = 0;
      llvm::SimpleBitstreamCursor::Read(*(llvm::SimpleBitstreamCursor **)(a2 + 200), *(_DWORD *)(*(_QWORD *)(a2 + 200) + 36), (uint64_t)&v995);
      if ((BYTE8(v995) & 1) != 0)
      {
        v766 = v995;
        *(_QWORD *)v8 = v995;
        if (v766)
          goto LABEL_1102;
        v765 = 4;
      }
      else
      {
        v765 = v995;
        *(_QWORD *)v8 = 0;
      }
      llvm::BitstreamCursor::readRecord(*(llvm::SimpleBitstreamCursor **)(a2 + 200), v765, (uint64_t)a3, 0, (uint64_t)&v998);
      if ((v999 & 1) != 0)
      {
        *(_QWORD *)v8 = v998;
      }
      else
      {
        if ((_DWORD)v998 == 10)
        {
          v767 = a3[2];
          inserted = llvm::Module::getOrInsertNamedMetadata(*(_QWORD *)(a2 + 216), (int8x16_t *)v991, (const unsigned __int8 *)v992);
          if ((_DWORD)v767)
          {
            v769 = (llvm::NamedMDNode *)inserted;
            v770 = 0;
            v771 = 8 * v767;
            while (1)
            {
              if (!MetadataFwdRef || *MetadataFwdRef - 5 >= 0x1F)
                break;
              v770 += 8;
              llvm::NamedMDNode::addOperand(v769, (llvm::MDNode *)MetadataFwdRef);
              if (v771 == v770)
                goto LABEL_1099;
            }
            *(_QWORD *)&v995 = "Invalid named metadata: expect fwd ref to MDNode";
            v997 = 259;
            error(v8, (llvm::Twine *)&v995);
            v773 = 0;
            v774 = (unsigned int *)v991;
            if (v991 == (llvm::ValueAsMetadata *)&v993)
            {
LABEL_1104:
              if ((v773 & 1) != 0)
                goto LABEL_1142;
              return;
            }
          }
          else
          {
LABEL_1099:
            v773 = 1;
            v774 = (unsigned int *)v991;
            if (v991 == (llvm::ValueAsMetadata *)&v993)
              goto LABEL_1104;
          }
LABEL_1103:
          free(v774);
          goto LABEL_1104;
        }
        *(_QWORD *)&v995 = "METADATA_NAME not followed by METADATA_NAMED_NODE";
        v997 = 259;
        error(v8, (llvm::Twine *)&v995);
        if ((v999 & 1) != 0)
        {
          v775 = v998;
          v998 = 0;
          if (v775)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v775 + 8))(v775);
            v773 = 0;
            v774 = (unsigned int *)v991;
            if (v991 == (llvm::ValueAsMetadata *)&v993)
              goto LABEL_1104;
            goto LABEL_1103;
          }
        }
      }
LABEL_1102:
      v773 = 0;
      v774 = (unsigned int *)v991;
      if (v991 == (llvm::ValueAsMetadata *)&v993)
        goto LABEL_1104;
      goto LABEL_1103;
    case 5:
      v990 = 1;
LABEL_17:
      *(_QWORD *)&v995 = v996;
      *((_QWORD *)&v995 + 1) = 0x800000000;
      v27 = a3[2];
      if (v27 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v995, v996, v27, 8);
        LODWORD(v27) = a3[2];
      }
      if (!(_DWORD)v27)
        goto LABEL_26;
      v28 = *(int **)a3;
      v29 = 8 * v27;
      do
      {
        if (*v28)
        {
          v31 = DWORD2(v995);
          if (DWORD2(v995) < (unint64_t)HIDWORD(v995))
            goto LABEL_22;
        }
        else
        {
          v30 = 0;
          v31 = DWORD2(v995);
          if (DWORD2(v995) < (unint64_t)HIDWORD(v995))
            goto LABEL_22;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v995, v996, v31 + 1, 8);
        v31 = DWORD2(v995);
LABEL_22:
        *(_QWORD *)(v995 + 8 * v31) = v30;
        ++DWORD2(v995);
        v28 += 2;
        v29 -= 8;
      }
      while (v29);
LABEL_26:
      v32 = v990;
      v33 = *(_QWORD *)(a2 + 208);
      v34 = (_QWORD *)v995;
      v35 = DWORD2(v995);
LABEL_27:
      Impl = (llvm::Metadata *)llvm::MDTuple::getImpl(v33, v34, v35, v32, 1);
LABEL_28:
      ++*v9;
      v37 = (void *)v995;
      if ((_QWORD *)v995 != v996)
LABEL_29:
        free(v37);
LABEL_1142:
      *(_QWORD *)v8 = 0;
      return;
    case 6:
      llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(a2, a3, (uint64_t *)a1);
      if (!*(_QWORD *)v8)
        goto LABEL_1142;
      return;
    case 7:
      if ((unint64_t)a3[2] - 5 >= 2)
        goto LABEL_311;
      v38 = *(int **)a3;
      v990 = **(_QWORD **)a3 != 0;
      v39 = v38[2];
      v40 = v38[4];
      v42 = *(_DWORD *)(*(_QWORD *)a3 + 32);
      if (v42)
      else
        v43 = 0;
      v286 = a3[2] == 6 && *(_QWORD *)(*(_QWORD *)a3 + 40) != 0;
      v74 = llvm::DILocation::getImpl(*(_QWORD **)(a2 + 208), v39, v40, (uint64_t)v41, (uint64_t)v43, v286, v990, 1);
      goto LABEL_1139;
    case 8:
      v44 = a3[2];
      if ((v44 & 1) != 0)
        goto LABEL_311;
      *(_QWORD *)&v995 = v996;
      *((_QWORD *)&v995 + 1) = 0x800000000;
      if (!v44)
      {
        v48 = 0;
        v34 = v996;
LABEL_456:
        v33 = *(_QWORD *)(a2 + 208);
        v35 = v48;
        v32 = 0;
        goto LABEL_27;
      }
      v45 = 0;
      while (1)
      {
        while (1)
        {
          v49 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v45);
          LODWORD(v991) = v49;
          v50 = *(_QWORD *)(a2 + 248);
          if (!v50)
          {
LABEL_1230:
            v862 = (_anonymous_namespace_::BitcodeReaderMetadataList *)std::__throw_bad_function_call[abi:nn180100]();
            return;
          }
          v51 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, llvm::ValueAsMetadata **))(*(_QWORD *)v50 + 48))(v50, &v991);
          if (!v51)
          {
            v346 = "Invalid record";
LABEL_851:
            v991 = (llvm::ValueAsMetadata *)v346;
            v994 = 259;
            error(v8, (llvm::Twine *)&v991);
            v159 = (void *)v995;
            if ((_QWORD *)v995 == v996)
              return;
LABEL_852:
            free(v159);
            return;
          }
          v52 = (llvm::UndefValue *)v51;
          v53 = v51[8];
          if (v53 != 7)
            break;
          v59 = DWORD2(v995);
          if (DWORD2(v995) >= (unint64_t)HIDWORD(v995))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v995, v996, DWORD2(v995) + 1, 8);
            v59 = DWORD2(v995);
          }
          *(_QWORD *)(v995 + 8 * v59) = 0;
          v48 = ++DWORD2(v995);
          v45 += 2;
          if (v44 == v45)
          {
LABEL_455:
            v34 = (_QWORD *)v995;
            goto LABEL_456;
          }
        }
        if (v53 == 9)
        {
          v47 = DWORD2(v995);
          if (DWORD2(v995) >= (unint64_t)HIDWORD(v995))
            goto LABEL_50;
        }
        else
        {
          v54 = *(llvm::BitcodeReaderValueList **)(a2 + 192);
          v55 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v45 + 1));
          v56 = (llvm::ValueAsMetadata *)llvm::BitcodeReaderValueList::getValueFwdRef(v54, v55, (llvm::Type *)v51, v49, 0);
          if (!v56
            && (((*((_QWORD *)v54 + 1) - *(_QWORD *)v54) >> 5) <= v55
             || (v58 = *(llvm::UndefValue ***)(*(_QWORD *)v54 + 32 * v55 + 16)) == 0
             || *v58 != v52
             || (v56 = (llvm::ValueAsMetadata *)llvm::UndefValue::get(v52, v57)) == 0))
          {
            v346 = "Invalid value reference from old metadata";
            goto LABEL_851;
          }
          v991 = 0;
          v991 = llvm::ValueAsMetadata::get(v56, v57);
          llvm::MetadataLoader::MetadataLoaderImpl::callMDTypeCallback((_BYTE *)a2, (uint64_t)&v991, v49);
          v46 = (unsigned __int8 *)v991;
          v47 = DWORD2(v995);
          if (DWORD2(v995) >= (unint64_t)HIDWORD(v995))
          {
LABEL_50:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v995, v996, v47 + 1, 8);
            v47 = DWORD2(v995);
          }
        }
        *(_QWORD *)(v995 + 8 * v47) = v46;
        v48 = ++DWORD2(v995);
        v45 += 2;
        if (v44 == v45)
          goto LABEL_455;
      }
    case 9:
      v60 = a3[2];
      if ((v60 & 1) != 0)
        goto LABEL_311;
      v991 = (llvm::ValueAsMetadata *)a2;
      *(_QWORD *)&v992 = a8;
      if (v60 != 2)
        goto LABEL_64;
      v61 = **(_DWORD **)a3;
      LODWORD(v995) = v61;
      v62 = *(_QWORD *)(a2 + 248);
      if (!v62)
        goto LABEL_1230;
      v63 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v62 + 48))(v62, &v995);
      if (!v63 || ((v64 = v63[8], v64 != 9) ? (v65 = v64 == 7) : (v65 = 1), v65))
      {
LABEL_64:
        goto LABEL_1142;
      }
      v679 = (llvm::ValueAsMetadata *)llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), *(_DWORD *)(*(_QWORD *)a3 + 8), (llvm::Type *)v63, v61, 0);
      if (v679)
      {
        v74 = (uint64_t)llvm::ValueAsMetadata::get(v679, v680);
        goto LABEL_1139;
      }
      v166 = "Invalid value reference from old fn metadata";
      goto LABEL_312;
    case 12:
      v66 = a3[2];
      if (v66 <= 3)
        goto LABEL_311;
      v67 = *(int **)a3;
      v990 = **(_QWORD **)a3 != 0;
      v68 = v67[2];
      if (HIWORD(v68) || v67[4] != 0)
        goto LABEL_311;
      v70 = v67[6];
      if (v70)
      {
        v66 = a3[2];
      }
      else
      {
        v71 = 0;
      }
      *(_QWORD *)&v995 = v996;
      *((_QWORD *)&v995 + 1) = 0x800000000;
      if (v66 == 4)
      {
        v472 = 0;
        goto LABEL_581;
      }
      LODWORD(v472) = 0;
      v474 = 4;
      while (1)
      {
        v476 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v474);
        if ((_DWORD)v476)
        {
          LODWORD(v472) = DWORD2(v995);
          if (DWORD2(v995) >= HIDWORD(v995))
          {
LABEL_588:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v995, v996, v472 + 1, 8);
            LODWORD(v472) = DWORD2(v995);
          }
        }
        else
        {
          v475 = 0;
          if (v472 >= HIDWORD(v995))
            goto LABEL_588;
        }
        *(_QWORD *)(v995 + 8 * v472) = v475;
        v472 = ++DWORD2(v995);
        if (v66 == ++v474)
        {
LABEL_581:
          v473 = (llvm::Metadata *)llvm::GenericDINode::getImpl(*(_QWORD *)(a2 + 208), v68, (uint64_t)v71, (_QWORD *)v995, (_QWORD *)v472, v990, 1);
          ++*v9;
          v37 = (void *)v995;
          if ((_QWORD *)v995 != v996)
            goto LABEL_29;
          goto LABEL_1142;
        }
      }
    case 13:
      v72 = *(int **)a3;
      v73 = **(_QWORD **)a3 >> 1;
      switch(v73)
      {
        case 2:
          v258 = *(_QWORD **)(a2 + 208);
          v259 = v72[2];
          if (v259)
          {
            v72 = *(int **)a3;
          }
          else
          {
            v260 = 0;
          }
          v479 = v72[4];
          if (v479)
          {
            v72 = *(int **)a3;
          }
          else
          {
            v480 = 0;
          }
          v518 = v72[6];
          if (v518)
          {
            v72 = *(int **)a3;
          }
          else
          {
            v519 = 0;
          }
          v527 = v72[8];
          if (v527)
          else
            v528 = 0;
          v74 = (uint64_t)llvm::DISubrange::getImpl(v258, (uint64_t)v260, (uint64_t)v480, (uint64_t)v519, (uint64_t)v528, 0, 1);
          goto LABEL_1139;
        case 1:
          v261 = *(llvm::Type **)(a2 + 208);
          v262 = v72[2];
          if (v262)
          {
            v72 = *(int **)a3;
          }
          else
          {
            v263 = 0;
          }
          v74 = (uint64_t)llvm::DISubrange::getImpl(v261, (llvm::LLVMContext *)v263, -(*((_QWORD *)v72 + 2) & 1) ^ (*((_QWORD *)v72 + 2) >> 1), 0, 1);
          goto LABEL_1139;
        case 0:
          v74 = (uint64_t)llvm::DISubrange::getImpl(*(llvm::Type **)(a2 + 208), *((llvm::LLVMContext **)v72 + 1), -(*((_QWORD *)v72 + 2) & 1) ^ (*((_QWORD *)v72 + 2) >> 1), 0, 1);
          goto LABEL_1139;
      }
      v166 = "Invalid record: Unsupported version of DISubrange";
      goto LABEL_312;
    case 14:
      v75 = a3[2];
      if (v75 <= 2)
        goto LABEL_311;
      v76 = *(int **)a3;
      v78 = **(_QWORD **)a3;
      v77 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v79 = **(_QWORD **)a3 & 1;
      v990 = **(_BYTE **)a3 & 1;
      if ((v78 & 4) != 0)
      {
        llvm::readWideAPInt((uint64_t)(v76 + 6), v75 - 3, v77, (uint64_t)&v991);
        v80 = (unsigned int *)v991;
        *(_QWORD *)&v995 = v991;
        DWORD2(v995) = v992;
        v81 = *(_QWORD **)(a2 + 208);
        if (!v990)
        {
          v986 = v992;
          if (v992 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v995);
          else
            __p = v991;
          goto LABEL_932;
        }
        v988 = v992;
        if (v992 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v987, (const void **)&v995);
          goto LABEL_429;
        }
      }
      else
      {
        v80 = (unsigned int *)(-(uint64_t)(v77 & 1) ^ (v77 >> 1));
        *(_QWORD *)&v995 = v80;
        DWORD2(v995) = 64;
        v81 = *(_QWORD **)(a2 + 208);
        if (!(_DWORD)v79)
        {
          v986 = 64;
          __p = (void *)(-(uint64_t)(v77 & 1) ^ (v77 >> 1));
LABEL_932:
          v685 = *(_DWORD *)(*(_QWORD *)a3 + 16);
          if (v685)
          else
            v686 = 0;
          v687 = llvm::DIEnumerator::getImpl(v81, (llvm::APInt *)&__p, (v78 >> 1) & 1, (uint64_t)v686, 0, 1);
          if (v986 >= 0x41)
          {
            v443 = __p;
            if (__p)
LABEL_937:
              operator delete[](v443);
          }
LABEL_938:
          ++*v9;
          if (DWORD2(v995) >= 0x41 && (_QWORD)v995)
            operator delete[]((void *)v995);
          goto LABEL_1142;
        }
        v988 = 64;
      }
      v987 = v80;
LABEL_429:
      v349 = *(_DWORD *)(*(_QWORD *)a3 + 16);
      if (v349)
      else
        v350 = 0;
      v442 = llvm::DIEnumerator::getImpl(v81, (llvm::APInt *)&v987, (v78 >> 1) & 1, (uint64_t)v350, 1, 1);
      if (v988 >= 0x41)
      {
        v443 = v987;
        if (v987)
          goto LABEL_937;
      }
      goto LABEL_938;
    case 15:
      v82 = a3[2];
      if (v82 - 8 <= 0xFFFFFFFD)
        goto LABEL_311;
      v83 = *(int **)a3;
      v84 = **(_QWORD **)a3;
      v990 = v84 != 0;
      if (v82 < 7)
        v85 = 0;
      else
        v85 = v83[12];
      v264 = *(_QWORD **)(a2 + 208);
      v265 = v83[2];
      v266 = v83[4];
      if (v84)
      {
        if (v266)
        {
          v83 = *(int **)a3;
        }
        else
        {
          v267 = 0;
        }
        v74 = llvm::DIBasicType::getImpl(v264, v265, (uint64_t)v267, *((_QWORD *)v83 + 3), v83[8], v83[10], v85, 1, 1);
      }
      else
      {
        if (v266)
        {
          v83 = *(int **)a3;
        }
        else
        {
          v304 = 0;
        }
        v74 = llvm::DIBasicType::getImpl(v264, v265, (uint64_t)v304, *((_QWORD *)v83 + 3), v83[8], v83[10], v85, 0, 1);
      }
      goto LABEL_1139;
    case 16:
      v86 = a3[2];
      if (v86 - 5 >= 2)
      {
        if (v86 != 3)
          goto LABEL_311;
        v237 = 0;
        LODWORD(v89) = 0;
        v238 = 0;
        v88 = **(_QWORD **)a3 != 0;
        v990 = **(_QWORD **)a3 != 0;
      }
      else
      {
        v87 = *(int **)a3;
        v88 = **(_QWORD **)a3 != 0;
        v990 = **(_QWORD **)a3 != 0;
        v89 = *((_QWORD *)v87 + 3);
        if (v89)
        {
          v90 = *((_QWORD *)v87 + 4);
          if (v90)
          {
            if ((_DWORD)v90)
            {
              v88 = v990;
            }
            else
            {
              v974 = 0;
            }
            v238 = v89 & 0xFFFFFF00;
            LODWORD(v89) = v89;
            v237 = 1;
          }
          else
          {
            v237 = 0;
            LODWORD(v89) = 0;
            v238 = 0;
          }
        }
        else
        {
          v237 = 0;
          v238 = 0;
        }
      }
      v544 = *(_QWORD **)(a2 + 208);
      v545 = *(int **)a3;
      v546 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      if (v88)
      {
        if (v546)
        {
          v545 = *(int **)a3;
        }
        else
        {
          v547 = 0;
        }
        v549 = v545[4];
        if (v549)
        else
          v550 = 0;
        v551 = v974;
        v552 = v238 | v89;
        if (a3[2] >= 6 && (v553 = *(_DWORD *)(*(_QWORD *)a3 + 40)) != 0)
        {
          v551 = v974;
          v555 = (uint64_t)v554;
        }
        else
        {
          v555 = 0;
        }
        LODWORD(v995) = v552;
        *((_QWORD *)&v995 + 1) = v551;
        LOBYTE(v996[0]) = v237;
        *(_DWORD *)((char *)v996 + 1) = (_DWORD)v991;
        HIDWORD(v996[0]) = *(_DWORD *)((char *)&v991 + 3);
        v556 = v544;
        v557 = (uint64_t)v547;
        v558 = (uint64_t)v550;
        v559 = 1;
      }
      else
      {
        if (v546)
        {
          v545 = *(int **)a3;
        }
        else
        {
          v548 = 0;
        }
        v560 = v545[4];
        if (v560)
        else
          v561 = 0;
        v562 = v974;
        v563 = v238 | v89;
        if (a3[2] >= 6 && (v564 = *(_DWORD *)(*(_QWORD *)a3 + 40)) != 0)
        {
          v562 = v974;
          v555 = (uint64_t)v565;
        }
        else
        {
          v555 = 0;
        }
        LODWORD(v995) = v563;
        *((_QWORD *)&v995 + 1) = v562;
        LOBYTE(v996[0]) = v237;
        *(_DWORD *)((char *)v996 + 1) = (_DWORD)v991;
        HIDWORD(v996[0]) = *(_DWORD *)((char *)&v991 + 3);
        v556 = v544;
        v557 = (uint64_t)v548;
        v558 = (uint64_t)v561;
        v559 = 0;
      }
      v74 = llvm::DIFile::getImpl(v556, v557, v558, &v995, v555, v559, 1);
      goto LABEL_1139;
    case 17:
      v91 = a3[2];
      if (v91 - 16 <= 0xFFFFFFFB)
        goto LABEL_311;
      v92 = *(int **)a3;
      if (v91 < 0xD)
      {
        v933 = 0;
        v942 = 0;
        v96 = 0;
        v94 = 0;
        v95 = 0;
        v927 = a3[2];
        v923 = v927;
      }
      else
      {
        v93 = *((_QWORD *)v92 + 12);
        v94 = v93 != 0;
        v923 = (v93 - 1) >> 8;
        if (v93)
          v95 = v93 - 1;
        else
          v95 = 0;
        if (v91 == 13)
        {
          v933 = 0;
          v942 = 0;
          v96 = 0;
          v927 = 13;
        }
        else
        {
          v351 = *((_QWORD *)v92 + 13);
          v96 = v351 != 0;
          v927 = v351 >> 8;
          v933 = v351;
          if (v91 >= 0xF && (v352 = *((_QWORD *)v92 + 14)) != 0 && (_DWORD)v352)
          {
            v92 = *(int **)a3;
          }
          else
          {
            v942 = 0;
          }
        }
      }
      v452 = *(_QWORD *)v92;
      v990 = *(_QWORD *)v92 != 0;
      v453 = v92[4];
      v982 = *(_QWORD **)(a2 + 208);
      v968 = v92[2];
      v953 = v92[20];
      if (v452)
      {
        if (v453)
        {
          v92 = *(int **)a3;
        }
        else
        {
          v898 = 0;
        }
        v454 = v92[6];
        if (v454)
        {
          v92 = *(int **)a3;
        }
        else
        {
          v907 = 0;
        }
        v919 = v92[8];
        v455 = v92[10];
        v456 = v96;
        if (v455)
        else
          v457 = 0;
        v459 = *(_DWORD *)(*(_QWORD *)a3 + 48);
        v913 = (uint64_t)v458;
        if (v459)
        else
          v460 = 0;
        v462 = *(int **)a3;
        v463 = *(_QWORD *)(*(_QWORD *)a3 + 56);
        v464 = v462[16];
        v465 = *((_QWORD *)v462 + 9);
        v466 = 0x100000000;
        if (v94)
          v467 = 0x100000000;
        else
          v467 = 0;
        v468 = v95 | ((unint64_t)(v923 & 0xFFFFFF) << 8) | v467;
        if (!v456)
          v466 = 0;
        v469 = v466 | v933 | ((*(_QWORD *)&v927 & 0xFFFFFFLL) << 8);
        v470 = v462[22];
        if (v470)
        else
          v471 = 0;
        v74 = llvm::DIDerivedType::getImpl(v982, v968, (uint64_t)v898, (uint64_t)v907, v919, v913, (uint64_t)v461, v463, v464, v465, v468, v469, v953, (uint64_t)v868, (uint64_t)v942, 1, 1);
      }
      else
      {
        if (v453)
        {
          v92 = *(int **)a3;
        }
        else
        {
          v906 = 0;
        }
        v580 = v92[6];
        if (v580)
        {
          v92 = *(int **)a3;
        }
        else
        {
          v900 = 0;
        }
        v920 = v92[8];
        v601 = v92[10];
        if (v601)
        else
          v602 = 0;
        v611 = *(_DWORD *)(*(_QWORD *)a3 + 48);
        v612 = v94;
        if (v611)
        else
          v613 = 0;
        v621 = *(int **)a3;
        v622 = *(_QWORD *)(*(_QWORD *)a3 + 56);
        v623 = v621[16];
        v624 = *((_QWORD *)v621 + 9);
        v625 = 0x100000000;
        if (v612)
          v626 = 0x100000000;
        else
          v626 = 0;
        v627 = v95 | ((unint64_t)(v923 & 0xFFFFFF) << 8) | v626;
        if (!v96)
          v625 = 0;
        v628 = v625 | v933 | ((*(_QWORD *)&v927 & 0xFFFFFFLL) << 8);
        v629 = v621[22];
        if (v629)
        else
          v630 = 0;
        v74 = llvm::DIDerivedType::getImpl(v982, v968, (uint64_t)v906, (uint64_t)v900, v920, (uint64_t)v914, (uint64_t)v620, v622, v623, v624, v627, v628, v953, (uint64_t)v869, (uint64_t)v942, 0, 1);
      }
      goto LABEL_1139;
    case 18:
      if (a3[2] - 23 <= 0xFFFFFFF8)
        goto LABEL_311;
      v97 = *(int **)a3;
      v98 = **(_QWORD **)a3;
      v990 = v98 & 1;
      v99 = v97[2];
      v100 = v97[4];
      if (v100)
      {
        v97 = *(int **)a3;
      }
      else
      {
        v101 = 0;
      }
      v287 = v97[6];
      if (v287)
      {
        v97 = *(int **)a3;
      }
      else
      {
        v288 = 0;
      }
      v305 = v97[8];
      v306 = v97[10];
      if (v306)
      else
        v307 = 0;
      v315 = *(int **)a3;
      if (HIDWORD(*(_QWORD *)(*(_QWORD *)a3 + 64)))
        goto LABEL_387;
      v316 = v314;
      v911 = v99;
      v928 = *(_QWORD *)(*(_QWORD *)a3 + 64);
      v917 = *((_QWORD *)v315 + 7);
      v965 = v315[20];
      v924 = v315[24];
      v317 = v315[30];
      if (v317)
      else
        v978 = 0;
      v904 = v8;
      v908 = v98;
      v897 = v9;
      v899 = (uint64_t)v288;
      v893 = (uint64_t)v316;
      v889 = v305;
      v885 = (uint64_t)v101;
      if (*(_BYTE *)(a2 + 1072) && !byte_1ECD35500 && v978 && v99 <= 0x17 && ((1 << v99) & 0x880014) != 0)
      {
        v493 = v965 | 4;
        if (!v101)
        {
          v502 = 0;
          v503 = 0;
          v504 = 0;
          v505 = 0;
          v506 = 0;
          v501 = 0;
          v736 = 0;
          v737 = 0;
          v738 = 0;
          v739 = 0;
          v633 = v917;
          goto LABEL_1216;
        }
        v965 |= 4u;
        String = (_BYTE *)llvm::MDString::getString((llvm::MDString *)v101);
        if ((!v495
           || (v496 = String, v497 = v495, (v498 = (char *)memchr(String, 60, v495)) == 0)
           || v498 - v496 == -1
           || v497 >= 5 && (*(_DWORD *)v496 == 1314149215 ? (v499 = v496[4] == 124) : (v499 = 0), v499))
          && (v500 = *(_DWORD *)(*(_QWORD *)a3 + 112)) != 0)
        {
          v502 = 0;
          v503 = 0;
          v504 = 0;
          v505 = 0;
          v101 = 0;
          v506 = 0;
        }
        else
        {
          v502 = 0;
          v503 = 0;
          v504 = 0;
          v505 = 0;
          v101 = 0;
          v506 = 0;
          v501 = 0;
        }
        v736 = 0;
        v737 = 0;
        v738 = 0;
        v739 = 0;
        v633 = v917;
LABEL_1215:
        v493 = v965;
LABEL_1216:
        v973 = v493;
        v941 = v737;
        v950 = v736;
        v961 = v738;
        v878 = v503;
        v871 = v503;
        v865 = v633;
        v843 = v739;
        v844 = v501;
        v845 = v506;
        v846 = v504;
        v847 = v502;
        v848 = llvm::DICompositeType::buildODRType(*(llvm::LLVMContext **)(a2 + 208), (uint64_t)v978, v911, v885, v899, v889, v893, v739, v865, v928, v738, v493, v737, v924, v736, (uint64_t)v501, (uint64_t)v506, (uint64_t)v101, (uint64_t)v505,
                 (uint64_t)v504,
                 v871,
                 v502);
        v849 = v889;
        v850 = v899;
        v851 = v928;
        v737 = v941;
        v852 = v885;
        v853 = v917;
        v502 = v847;
        v854 = v973;
        v855 = v893;
        v504 = v846;
        v506 = v845;
        v856 = v924;
        v501 = v844;
        v857 = v843;
        v858 = (char **)v848;
        v859 = v911;
        v736 = v950;
        v738 = v961;
        v503 = v878;
        v860 = 1;
        if (v848)
          goto LABEL_1220;
LABEL_1219:
        v858 = llvm::DICompositeType::getImpl(*(_QWORD **)(a2 + 208), v859, v852, v850, v849, v855, v857, v853, v851, v738, v854, v737, v856, v736, (uint64_t)v501, (uint64_t)v978, (unint64_t)v506, (uint64_t)v101, (uint64_t)v505,
                 (uint64_t)v504,
                 v503,
                 v502,
                 v990,
                 1);
LABEL_1220:
        v8 = v904;
        v9 = v897;
        if (v908 <= 1 && v860)
        v794 = *v897;
        v795 = (_anonymous_namespace_::BitcodeReaderMetadataList *)a2;
        v23 = (llvm::Metadata *)v858;
        goto LABEL_1141;
      }
      v507 = *(_DWORD *)(*(_QWORD *)a3 + 48);
      if (v507)
      else
        v508 = 0;
      v583 = *(int **)a3;
      v955 = *(_QWORD *)(*(_QWORD *)a3 + 72);
      v584 = *(_DWORD *)(*(_QWORD *)a3 + 88);
      if (v584)
      {
        v583 = *(int **)a3;
      }
      else
      {
        v936 = 0;
      }
      v605 = v583[26];
      if (v605)
      else
        v606 = 0;
      v614 = *(_DWORD *)(*(_QWORD *)a3 + 112);
      if (v614)
      else
        v501 = 0;
      v631 = a3[2];
      if (v631 < 0x11)
      {
        v504 = 0;
        v505 = 0;
        v506 = 0;
        v101 = 0;
        v503 = 0;
        v502 = 0;
        v633 = v917;
        goto LABEL_1214;
      }
      v875 = v501;
      v632 = *(_DWORD *)(*(_QWORD *)a3 + 128);
      if (v632)
      {
        v631 = a3[2];
      }
      else
      {
        v506 = 0;
      }
      if (v631 < 0x12)
      {
        v101 = 0;
        v505 = 0;
        v504 = 0;
        v633 = v917;
        v501 = v875;
      }
      else
      {
        v873 = v506;
        v697 = *(_DWORD *)(*(_QWORD *)a3 + 136);
        if (v697)
        {
          v631 = a3[2];
        }
        else
        {
          v883 = 0;
        }
        v501 = v875;
        if (v631 < 0x14)
        {
          v505 = 0;
          v504 = 0;
          v633 = v917;
        }
        else
        {
          v777 = *(int **)a3;
          v778 = *(_DWORD *)(*(_QWORD *)a3 + 144);
          if (v778)
          {
            v777 = *(int **)a3;
          }
          else
          {
            v505 = 0;
          }
          v832 = v777[38];
          if (v832)
          else
            v504 = 0;
          v633 = v917;
          v501 = v875;
        }
        v506 = v873;
        v101 = v883;
      }
      v833 = a3[2];
      if (v833 < 0x15)
      {
        v503 = 0;
      }
      else
      {
        v834 = *(_DWORD *)(*(_QWORD *)a3 + 160);
        if (v834)
        {
          v835 = v505;
          v836 = v506;
          v837 = v504;
          v504 = v837;
          v506 = v836;
          v505 = v835;
          v501 = v875;
          v503 = (uint64_t)v838;
          v833 = a3[2];
        }
        else
        {
          v503 = 0;
        }
        if (v833 >= 0x16)
        {
          v839 = *(_DWORD *)(*(_QWORD *)a3 + 168);
          if (v839)
          {
            v840 = v506;
            v841 = v504;
            v504 = v841;
            v506 = v840;
            v501 = v875;
            v502 = (uint64_t)v842;
            goto LABEL_1214;
          }
        }
      }
      v502 = 0;
LABEL_1214:
      v736 = (uint64_t)v945;
      v738 = v955;
      v737 = (uint64_t)v936;
      v739 = (uint64_t)v879;
      if (!v978)
      {
        v859 = v911;
        v860 = 0;
        v852 = v885;
        v853 = v633;
        v850 = v899;
        v849 = v889;
        v855 = v893;
        v851 = v928;
        v856 = v924;
        v854 = v965;
        v857 = (uint64_t)v879;
        goto LABEL_1219;
      }
      goto LABEL_1215;
    case 19:
      v102 = a3[2];
      if (v102 - 5 <= 0xFFFFFFFD)
        goto LABEL_311;
      v103 = *(int **)a3;
      v104 = **(_QWORD **)a3;
      if (v102 < 4)
        v105 = 0;
      else
        v105 = *((_BYTE *)v103 + 24);
      v990 = v104 & 1;
      v268 = v103[2];
      v269 = v103[4];
      if (v269)
      else
        v270 = 0;
      if (v104 <= 1)
      v74 = llvm::DISubroutineType::getImpl(*(uint64_t **)(a2 + 208), v268, v105, (uint64_t)v270, v990, 1);
      goto LABEL_1139;
    case 20:
      if (a3[2] - 23 <= 0xFFFFFFF6)
        goto LABEL_311;
      v990 = 1;
      v106 = *(_QWORD *)(a2 + 208);
      v107 = *(int **)a3;
      v108 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      v109 = *(_DWORD *)(*(_QWORD *)a3 + 16);
      if (v109)
      {
        v107 = *(int **)a3;
      }
      else
      {
        v110 = 0;
      }
      v289 = v107[6];
      if (v289)
      {
        v107 = *(int **)a3;
      }
      else
      {
        v290 = 0;
      }
      v308 = v107[10];
      v934 = *((_QWORD *)v107 + 4);
      if (v308)
      {
        v107 = *(int **)a3;
      }
      else
      {
        v309 = 0;
      }
      v318 = v107[12];
      v319 = v107[14];
      if (v319)
      {
        v107 = *(int **)a3;
      }
      else
      {
        v929 = 0;
      }
      v925 = v107[16];
      v323 = v107[18];
      if (v323)
      {
        v107 = *(int **)a3;
      }
      else
      {
        v918 = 0;
      }
      v330 = v107[20];
      if (v330)
      {
        v107 = *(int **)a3;
      }
      else
      {
        v912 = 0;
      }
      v331 = v107[24];
      if (v331)
      {
        v107 = *(int **)a3;
      }
      else
      {
        v905 = 0;
      }
      v332 = v107[26];
      if (v332)
      else
        v333 = 0;
      v334 = a3[2];
      v966 = (uint64_t)v290;
      v979 = (uint64_t)v110;
      v951 = (uint64_t)v309;
      v943 = v318;
      if (v334 >= 0x10)
      {
        v336 = *(_DWORD *)(*(_QWORD *)a3 + 120);
        if (!v336)
        {
          v335 = 0;
          goto LABEL_637;
        }
        v337 = v108;
        v338 = v106;
        v339 = v333;
        v333 = v339;
        v106 = v338;
        v108 = v337;
        v335 = (uint64_t)v340;
        v334 = a3[2];
      }
      else
      {
        v335 = 0;
      }
      if (v334 < 0xF)
      {
        v341 = v108;
        v342 = v106;
        v343 = 0;
        v344 = 0;
        v345 = 0;
LABEL_639:
        v510 = 0;
        v511 = 0;
        v512 = 0;
        v513 = 1;
        goto LABEL_950;
      }
LABEL_637:
      v509 = *(int **)a3;
      v345 = *(_QWORD *)(*(_QWORD *)a3 + 112);
      if (v334 < 0x11)
      {
        v341 = v108;
        v342 = v106;
        v343 = 0;
        v344 = 0;
        goto LABEL_639;
      }
      v513 = *((_QWORD *)v509 + 16) != 0;
      if (v334 == 17)
      {
        v341 = v108;
        v342 = v106;
        v343 = 0;
        v344 = 0;
        v510 = 0;
      }
      else
      {
        v510 = *((_QWORD *)v509 + 17) != 0;
        if (v334 >= 0x13)
        {
          v344 = v509[36];
          if (v334 != 19)
          {
            v511 = *((_QWORD *)v509 + 19) != 0;
            if (v334 >= 0x15)
            {
              v888 = *((_QWORD *)v509 + 16) != 0;
              v892 = *(_QWORD *)(*(_QWORD *)a3 + 112);
              v896 = v335;
              v903 = v333;
              v341 = v108;
              v342 = v106;
              v831 = v509[40];
              if (v831)
              {
                v334 = a3[2];
              }
              else
              {
                v343 = 0;
              }
              if (v334 >= 0x16 && (v861 = *(_DWORD *)(*(_QWORD *)a3 + 168)) != 0)
              else
                v512 = 0;
              v333 = v903;
              v345 = v892;
              v335 = v896;
              v513 = v888;
LABEL_950:
              *(_QWORD *)&v867 = v905;
              *((_QWORD *)&v867 + 1) = v333;
              *(_QWORD *)&v866 = v918;
              *((_QWORD *)&v866 + 1) = v912;
              v688 = llvm::DICompileUnit::getImpl(v342, v341, v979, v966, v934 != 0, v951, v943, (uint64_t)v929, v925, v866, v867, v335, v345, v513, v510, v344, v511, (uint64_t)v343, (uint64_t)v512,
                       1);
              ++*v9;
              v689 = *(_DWORD *)(*(_QWORD *)a3 + 88);
              if (v689)
              {
                if (v690)
                {
                  *(_QWORD *)&v995 = v688;
                  *((_QWORD *)&v995 + 1) = v690;
                  std::vector<std::pair<llvm::DICompileUnit *,llvm::Metadata *>>::push_back[abi:nn180100]((char **)(a2 + 728), &v995);
                }
              }
              goto LABEL_1142;
            }
            v341 = v108;
            v342 = v106;
            v343 = 0;
LABEL_949:
            v512 = 0;
            goto LABEL_950;
          }
          v341 = v108;
          v342 = v106;
          v343 = 0;
        }
        else
        {
          v341 = v108;
          v342 = v106;
          v343 = 0;
          v344 = 0;
        }
      }
      v511 = 0;
      goto LABEL_949;
    case 21:
      if (a3[2] - 22 <= 0xFFFFFFFB)
        goto LABEL_311;
      v111 = *(int **)a3;
      v112 = **(_QWORD **)a3;
      if ((v112 & 4) != 0)
      {
        v113 = v111[22];
        if ((v113 & 0x200000) != 0)
          v114 = v113 & 0x3FDFFFFF;
        else
          v114 = v111[22];
        if ((v113 & 0x200000) != 0)
          v115 = v111[18] | 0x100;
        else
          v115 = v111[18];
        v116 = **(_QWORD **)a3;
      }
      else
      {
        v271 = v111[26];
        if ((v271 & 0x200000) != 0)
          v114 = v271 & 0x3FDFFFFF;
        else
          v114 = v111[26];
        v115 = llvm::DISubprogram::toSPFlags((llvm::DISubprogram *)(*((_QWORD *)v111 + 7) != 0), *((_QWORD *)v111 + 8) != 0, *((_QWORD *)v111 + 14) != 0, v111[22], (v271 & 0x200000u) >> 21);
        v111 = *(int **)a3;
        v116 = **(_QWORD **)a3;
      }
      v272 = v116 & 1 | ((v115 & 8) != 0);
      v990 = v116 & 1 | ((v115 & 8) != 0);
      if ((v112 & 4) != 0 || (v116 & 2) == 0)
      {
        if ((v112 & 4) != 0 && (v116 & 2) == 0)
          goto LABEL_311;
        v273 = a3[2];
        if ((v112 & 4) != 0)
        {
          v967 = v114;
          v944 = 0;
          v361 = 0;
          v362 = 0;
          v926 = v273 > 0x12;
          v930 = v273 > 0x13;
          v363 = 1;
          v364 = 1;
          goto LABEL_453;
        }
      }
      else
      {
        v273 = a3[2];
        if (v273 <= 0x12)
          goto LABEL_311;
      }
      v967 = v114;
      v926 = 0;
      v930 = 0;
      v365 = v273 > 0x12;
      v361 = 2;
      if (v273 <= 0x12)
        v362 = 2;
      else
        v362 = 3;
      if ((v116 & 2) != 0)
        v365 = 0;
      v944 = v365;
      v363 = v273 > 0x13;
      v364 = v273 > 0x14;
LABEL_453:
      v952 = v115;
      v366 = *(_QWORD *)&v111[2 * (v362 | 0xC)];
      if ((_DWORD)v366)
      {
        v272 = v990;
      }
      else
      {
        v981 = 0;
      }
      v935 = *(uint64_t **)(a2 + 208);
      v514 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      if (v272)
      {
        if (v514)
        else
          v515 = 0;
        v649 = *(int **)a3;
        v650 = *(_DWORD *)(*(_QWORD *)a3 + 16);
        if (v650)
        {
          v649 = *(int **)a3;
        }
        else
        {
          v915 = 0;
        }
        v651 = v649[6];
        if (v651)
        {
          v649 = *(int **)a3;
        }
        else
        {
          v909 = 0;
        }
        v652 = v649[8];
        if (v652)
        {
          v649 = *(int **)a3;
        }
        else
        {
          v901 = 0;
        }
        v894 = v649[10];
        v653 = v649[12];
        if (v653)
        {
          v649 = *(int **)a3;
        }
        else
        {
          v890 = 0;
        }
        v886 = *(_QWORD *)&v649[2 * (v361 + 7)];
        v654 = *(_QWORD *)&v649[2 * (v361 | 8)];
        if ((_DWORD)v654)
        else
          v655 = 0;
        v656 = *(int **)a3;
        if (v363)
          v880 = *(_QWORD *)&v656[2 * (v362 | 0x10)];
        else
          LODWORD(v880) = 0;
        v876 = *(_QWORD *)&v656[2 * (v361 + 10)];
        v657 = *(_QWORD *)&v656[2 * (v362 + 13)];
        if ((_DWORD)v657)
        {
          v656 = *(int **)a3;
        }
        else
        {
          v872 = 0;
        }
        v658 = *(_QWORD *)&v656[2 * (v362 + 14)];
        if ((_DWORD)v658)
        {
          v656 = *(int **)a3;
        }
        else
        {
          v659 = 0;
        }
        v660 = *(_QWORD *)&v656[2 * (v362 + 15)];
        if ((_DWORD)v660)
        else
          v661 = 0;
        if (v364 && (v662 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v362 + 17)), (_DWORD)v662))
        else
          v663 = 0;
        v664 = v116 << 62;
        if (v926 && (v665 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v362 + 18)), (_DWORD)v665))
        else
          v666 = 0;
        v667 = (unint64_t)v981 & (v664 >> 63);
        if (v930 && (v668 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v362 + 19)), (_DWORD)v668))
        else
          v669 = 0;
        v670 = llvm::DISubprogram::getImpl(v935, v921, (uint64_t)v915, v909, v901, v894, v890, v886, (uint64_t)v882, __SPAIR64__(v880, v876), __SPAIR64__(v952, v967), v667, (uint64_t)v872, (uint64_t)v659, (uint64_t)v661, (uint64_t)v663, (uint64_t)v666, (uint64_t)v669, 1,
                 1);
      }
      else
      {
        if (v514)
        else
          v521 = 0;
        v691 = *(int **)a3;
        v692 = *(_DWORD *)(*(_QWORD *)a3 + 16);
        if (v692)
        {
          v691 = *(int **)a3;
        }
        else
        {
          v916 = 0;
        }
        v698 = v691[6];
        if (v698)
        {
          v691 = *(int **)a3;
        }
        else
        {
          v910 = 0;
        }
        v699 = v691[8];
        if (v699)
        {
          v691 = *(int **)a3;
        }
        else
        {
          v902 = 0;
        }
        v895 = v691[10];
        v700 = v691[12];
        if (v700)
        {
          v691 = *(int **)a3;
        }
        else
        {
          v891 = 0;
        }
        v887 = *(_QWORD *)&v691[2 * (v361 + 7)];
        v701 = *(_QWORD *)&v691[2 * (v361 | 8)];
        if ((_DWORD)v701)
        else
          v702 = 0;
        v703 = *(int **)a3;
        if (v363)
          v881 = *(_QWORD *)&v703[2 * (v362 | 0x10)];
        else
          LODWORD(v881) = 0;
        v877 = *(_QWORD *)&v703[2 * (v361 + 10)];
        v704 = *(_QWORD *)&v703[2 * (v362 + 13)];
        if ((_DWORD)v704)
        {
          v703 = *(int **)a3;
        }
        else
        {
          v874 = 0;
        }
        v705 = *(_QWORD *)&v703[2 * (v362 + 14)];
        if ((_DWORD)v705)
        {
          v703 = *(int **)a3;
        }
        else
        {
          v706 = 0;
        }
        v707 = v364;
        v708 = *(_QWORD *)&v703[2 * (v362 + 15)];
        if ((_DWORD)v708)
        else
          v709 = 0;
        if (v707 && (v710 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v362 + 17)), (_DWORD)v710))
        else
          v711 = 0;
        v712 = v116 << 62;
        if (v926 && (v713 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v362 + 18)), (_DWORD)v713))
        else
          v714 = 0;
        v715 = (unint64_t)v981 & (v712 >> 63);
        if (v930 && (v716 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v362 + 19)), (_DWORD)v716))
        else
          v717 = 0;
        v670 = llvm::DISubprogram::getImpl(v935, v922, (uint64_t)v916, v910, v902, v895, v891, v887, (uint64_t)v884, __SPAIR64__(v881, v877), __SPAIR64__(v952, v967), v715, (uint64_t)v874, (uint64_t)v706, (uint64_t)v709, (uint64_t)v711, (uint64_t)v714, (uint64_t)v717, 0,
                 1);
      }
      v718 = v670;
      ++*v9;
      v719 = v944;
      if (!v981)
        v719 = 0;
      if (v719 && *v981 == 1)
      {
        v720 = *(_BYTE *)(*((_QWORD *)v981 + 16) + 16) ? 0 : *((_QWORD *)v981 + 16);
        *(_QWORD *)&v995 = v720;
        if (v720)
        {
          if ((*(_BYTE *)(v720 + 35) & 1) != 0)
          {
            *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::operator[](a2 + 752, &v995) = v718;
          }
          else if (*(_QWORD *)(v720 + 72) != v720 + 72)
          {
            llvm::Function::setSubprogram((llvm::Function *)v720, v718);
          }
        }
      }
      goto LABEL_1142;
    case 22:
      if (a3[2] != 5)
        goto LABEL_311;
      v117 = *(int **)a3;
      v118 = **(_QWORD **)a3;
      v990 = v118 != 0;
      v119 = *(_QWORD **)(a2 + 208);
      v120 = v117[2];
      if (v118)
      {
        if (v120)
        {
          v117 = *(int **)a3;
        }
        else
        {
          v121 = 0;
        }
        v367 = v117[4];
        if (v367)
        {
          v117 = *(int **)a3;
        }
        else
        {
          v368 = 0;
        }
        v388 = v117[6];
        v389 = v117[8];
        v390 = v119;
        v391 = (uint64_t)v121;
        v392 = 1;
      }
      else
      {
        if (v120)
        {
          v117 = *(int **)a3;
        }
        else
        {
          v291 = 0;
        }
        v566 = v117[4];
        if (v566)
        {
          v117 = *(int **)a3;
        }
        else
        {
          v368 = 0;
        }
        v388 = v117[6];
        v389 = v117[8];
        v390 = v119;
        v391 = (uint64_t)v291;
        v392 = 0;
      }
      v74 = (uint64_t)llvm::DILexicalBlock::getImpl(v390, v391, (uint64_t)v368, v388, v389, v392, 1);
      goto LABEL_1139;
    case 23:
      if (a3[2] != 4)
        goto LABEL_311;
      v122 = *(int **)a3;
      v123 = **(_QWORD **)a3;
      v990 = v123 != 0;
      v124 = *(_QWORD **)(a2 + 208);
      v125 = v122[2];
      if (v123)
      {
        if (v125)
        {
          v122 = *(int **)a3;
        }
        else
        {
          v126 = 0;
        }
        v369 = v122[4];
        if (v369)
        {
          v122 = *(int **)a3;
        }
        else
        {
          v370 = 0;
        }
        v393 = v122[6];
        v394 = v124;
        v395 = (uint64_t)v126;
        v396 = 1;
      }
      else
      {
        if (v125)
        {
          v122 = *(int **)a3;
        }
        else
        {
          v292 = 0;
        }
        v567 = v122[4];
        if (v567)
        {
          v122 = *(int **)a3;
        }
        else
        {
          v370 = 0;
        }
        v393 = v122[6];
        v394 = v124;
        v395 = (uint64_t)v292;
        v396 = 0;
      }
      v74 = llvm::DILexicalBlockFile::getImpl(v394, v395, (uint64_t)v370, v393, v396, 1);
      goto LABEL_1139;
    case 24:
      v127 = a3[2];
      if (v127 == 5)
      {
        v128 = *(_DWORD *)(*(_QWORD *)a3 + 24);
        if (v128)
        {
LABEL_125:
          goto LABEL_271;
        }
      }
      else
      {
        if (v127 != 3)
          goto LABEL_311;
        v128 = *(_DWORD *)(*(_QWORD *)a3 + 16);
        if (v128)
          goto LABEL_125;
      }
      v129 = 0;
LABEL_271:
      v253 = *(int **)a3;
      v254 = **(_QWORD **)a3;
      v990 = **(_BYTE **)a3 & 1;
      v255 = *(_QWORD **)(a2 + 208);
      v256 = v253[2];
      if ((v254 & 1) != 0)
      {
        if (v256)
        else
          v257 = 0;
        v357 = (v254 >> 1) & 1;
        v358 = v255;
        v359 = (uint64_t)v129;
        v360 = 1;
      }
      else
      {
        if (v256)
        else
          v257 = 0;
        v357 = (v254 >> 1) & 1;
        v358 = v255;
        v359 = (uint64_t)v129;
        v360 = 0;
      }
      v74 = llvm::DINamespace::getImpl(v358, (uint64_t)v257, v359, v357, v360, 1);
      goto LABEL_1139;
    case 25:
      if (a3[2] - 5 <= 0xFFFFFFFD)
        goto LABEL_311;
      v130 = *(int **)a3;
      v131 = **(_QWORD **)a3;
      v990 = v131 != 0;
      v132 = *(uint64_t **)(a2 + 208);
      v133 = v130[2];
      if (v131)
      {
        if (v133)
        {
          v130 = *(int **)a3;
        }
        else
        {
          v134 = 0;
        }
        v371 = v130[4];
        if (v371)
        else
          v372 = 0;
        v399 = a3[2] == 4
            && (v398 = *(_DWORD *)(*(_QWORD *)a3 + 24)) != 0
        v400 = v132;
        v401 = (uint64_t)v134;
        v402 = (uint64_t)v397;
        v403 = 1;
      }
      else
      {
        if (v133)
        {
          v130 = *(int **)a3;
        }
        else
        {
          v293 = 0;
        }
        v568 = v130[4];
        if (v568)
        else
          v569 = 0;
        v399 = a3[2] == 4
            && (v586 = *(_DWORD *)(*(_QWORD *)a3 + 24)) != 0
        v400 = v132;
        v401 = (uint64_t)v293;
        v402 = (uint64_t)v585;
        v403 = 0;
      }
      v74 = llvm::DITemplateTypeParameter::getImpl(v400, v401, v402, v399, v403, 1);
      goto LABEL_1139;
    case 26:
      if (a3[2] - 7 <= 0xFFFFFFFD)
        goto LABEL_311;
      v135 = *(int **)a3;
      v136 = **(_QWORD **)a3;
      v990 = v136 != 0;
      v137 = *(_QWORD **)(a2 + 208);
      v138 = v135[2];
      v139 = v135[4];
      if (v136)
      {
        if (v139)
        {
          v135 = *(int **)a3;
        }
        else
        {
          v140 = 0;
        }
        v373 = v135[6];
        if (v373)
        else
          v374 = 0;
        if (a3[2] == 6)
        {
          v405 = *(_DWORD *)(*(_QWORD *)a3 + 32);
          if (!v405)
          {
            v406 = 0;
            goto LABEL_854;
          }
          if (a3[2] == 6)
          {
LABEL_854:
            v407 = *(_DWORD *)(*(_QWORD *)a3 + 40);
            if (!v407)
              goto LABEL_855;
            goto LABEL_506;
          }
        }
        else
        {
          v406 = 0;
        }
        v407 = *(_DWORD *)(*(_QWORD *)a3 + 32);
        if (!v407)
        {
LABEL_855:
          v408 = 0;
          goto LABEL_856;
        }
LABEL_506:
LABEL_856:
        v638 = v137;
        v639 = v138;
        v640 = (uint64_t)v140;
        v641 = (uint64_t)v404;
        v642 = v406;
        v643 = 1;
        goto LABEL_960;
      }
      if (v139)
      {
        v135 = *(int **)a3;
      }
      else
      {
        v294 = 0;
      }
      v570 = v135[6];
      if (v570)
      else
        v571 = 0;
      if (a3[2] == 6)
      {
        v588 = *(_DWORD *)(*(_QWORD *)a3 + 32);
        if (!v588)
        {
          v589 = 0;
          goto LABEL_957;
        }
        if (a3[2] == 6)
        {
LABEL_957:
          v590 = *(_DWORD *)(*(_QWORD *)a3 + 40);
          if (!v590)
            goto LABEL_958;
          goto LABEL_779;
        }
      }
      else
      {
        v589 = 0;
      }
      v590 = *(_DWORD *)(*(_QWORD *)a3 + 32);
      if (!v590)
      {
LABEL_958:
        v408 = 0;
LABEL_959:
        v638 = v137;
        v639 = v138;
        v640 = (uint64_t)v294;
        v641 = (uint64_t)v587;
        v642 = v589;
        v643 = 0;
LABEL_960:
        v74 = llvm::DITemplateValueParameter::getImpl(v638, v639, v640, v641, v642, (uint64_t)v408, v643, 1);
LABEL_1139:
        v23 = (llvm::Metadata *)v74;
LABEL_1140:
        v794 = *v9;
        v795 = (_anonymous_namespace_::BitcodeReaderMetadataList *)a2;
LABEL_1141:
        ++*v9;
        goto LABEL_1142;
      }
LABEL_779:
      goto LABEL_959;
    case 27:
      v141 = a3[2];
      if (v141 - 14 <= 0xFFFFFFFC)
        goto LABEL_311;
      v142 = *(int **)a3;
      v143 = **(_QWORD **)a3;
      v144 = v143 & 1;
      v990 = **(_BYTE **)a3 & 1;
      v145 = v143 >> 1;
      if ((_DWORD)v145)
      {
        if ((_DWORD)v145 == 1)
        {
          v355 = *(uint64_t **)(a2 + 208);
          v356 = v142[2];
          if (v144)
          {
            if (v356)
            {
              v142 = *(int **)a3;
            }
            else
            {
              v980 = 0;
            }
            v740 = v142[4];
            if (v740)
            {
              v142 = *(int **)a3;
            }
            else
            {
              v970 = 0;
            }
            v742 = v142[6];
            if (v742)
            {
              v142 = *(int **)a3;
            }
            else
            {
              v958 = 0;
            }
            v745 = v142[8];
            if (v745)
            {
              v142 = *(int **)a3;
            }
            else
            {
              v744 = 0;
            }
            v746 = v142[10];
            v749 = v142[12];
            if (v749)
            else
              v750 = 0;
            v757 = *(int **)a3;
            v758 = *(_QWORD *)(*(_QWORD *)a3 + 56);
            v759 = *(_QWORD *)(*(_QWORD *)a3 + 64);
            v760 = *(_DWORD *)(*(_QWORD *)a3 + 80);
            if (v760)
            {
              v757 = *(int **)a3;
            }
            else
            {
              v756 = 0;
            }
            v761 = v759 != 0;
            v762 = v758 != 0;
            v763 = *((_QWORD *)v757 + 11);
            v870[4] = 1;
            *(_DWORD *)v870 = 1;
          }
          else
          {
            if (v356)
            {
              v142 = *(int **)a3;
            }
            else
            {
              v980 = 0;
            }
            v735 = v142[4];
            if (v735)
            {
              v142 = *(int **)a3;
            }
            else
            {
              v970 = 0;
            }
            v741 = v142[6];
            if (v741)
            {
              v142 = *(int **)a3;
            }
            else
            {
              v958 = 0;
            }
            v743 = v142[8];
            if (v743)
            {
              v142 = *(int **)a3;
            }
            else
            {
              v744 = 0;
            }
            v746 = v142[10];
            v747 = v142[12];
            if (v747)
            else
              v748 = 0;
            v752 = *(int **)a3;
            v753 = *(_QWORD *)(*(_QWORD *)a3 + 56);
            v754 = *(_QWORD *)(*(_QWORD *)a3 + 64);
            v755 = *(_DWORD *)(*(_QWORD *)a3 + 80);
            if (v755)
            {
              v752 = *(int **)a3;
            }
            else
            {
              v756 = 0;
            }
            v761 = v754 != 0;
            v762 = v753 != 0;
            v763 = *((_QWORD *)v752 + 11);
            v870[4] = 1;
            *(_DWORD *)v870 = 0;
          }
          v74 = llvm::DIGlobalVariable::getImpl(v355, (uint64_t)v980, (uint64_t)v970, (uint64_t)v958, (uint64_t)v744, v746, (uint64_t)v751, v762, v761, (uint64_t)v756, 0, v763, 0, *(int *)v870, v870[4]);
        }
        else
        {
          if ((_DWORD)v145 != 2)
          {
LABEL_311:
            v166 = "Invalid record";
            goto LABEL_312;
          }
          if (v141 >= 0xD && (v146 = v142[24]) != 0)
          {
            v144 = v990;
          }
          else
          {
            v147 = 0;
          }
          v541 = *(uint64_t **)(a2 + 208);
          v542 = *(int **)a3;
          v543 = *(_DWORD *)(*(_QWORD *)a3 + 8);
          if (v144)
          {
            if (v543)
            {
              v542 = *(int **)a3;
            }
            else
            {
              v969 = 0;
            }
            v721 = v542[4];
            if (v721)
            {
              v542 = *(int **)a3;
            }
            else
            {
              v957 = 0;
            }
            v722 = v542[6];
            if (v722)
            {
              v542 = *(int **)a3;
            }
            else
            {
              v946 = 0;
            }
            v723 = v542[8];
            v984 = (uint64_t)v147;
            if (v723)
            {
              v542 = *(int **)a3;
            }
            else
            {
              v937 = 0;
            }
            v724 = v542[10];
            v725 = v542[12];
            if (v725)
            else
              v726 = 0;
            v728 = *(int **)a3;
            v729 = *(_QWORD *)(*(_QWORD *)a3 + 56);
            v730 = *(_QWORD *)(*(_QWORD *)a3 + 64);
            v731 = *(_DWORD *)(*(_QWORD *)a3 + 72);
            if (v731)
            {
              v728 = *(int **)a3;
            }
            else
            {
              v732 = 0;
            }
            v733 = v728[20];
            if (v733)
            {
              v728 = *(int **)a3;
            }
            else
            {
              v734 = 0;
            }
            v74 = llvm::DIGlobalVariable::getImpl(v541, (uint64_t)v969, (uint64_t)v957, (uint64_t)v946, (uint64_t)v937, v724, (uint64_t)v727, v729 != 0, v730 != 0, (uint64_t)v732, (uint64_t)v734, *((_QWORD *)v728 + 11), v984, 1, 1);
          }
          else
          {
            if (v543)
            {
              v542 = *(int **)a3;
            }
            else
            {
              v956 = 0;
            }
            v776 = v542[4];
            if (v776)
            {
              v542 = *(int **)a3;
            }
            else
            {
              v947 = 0;
            }
            v779 = v542[6];
            if (v779)
            {
              v542 = *(int **)a3;
            }
            else
            {
              v938 = 0;
            }
            v780 = v542[8];
            if (v780)
            {
              v542 = *(int **)a3;
            }
            else
            {
              v931 = 0;
            }
            v781 = v542[10];
            v782 = v542[12];
            v971 = v781;
            v783 = v541;
            v784 = (uint64_t)v147;
            if (v782)
            else
              v785 = 0;
            v787 = *(int **)a3;
            v788 = *(_QWORD *)(*(_QWORD *)a3 + 56);
            v789 = *(_QWORD *)(*(_QWORD *)a3 + 64);
            v790 = *(_DWORD *)(*(_QWORD *)a3 + 72);
            if (v790)
            {
              v787 = *(int **)a3;
            }
            else
            {
              v791 = 0;
            }
            v792 = v787[20];
            if (v792)
            {
              v787 = *(int **)a3;
            }
            else
            {
              v793 = 0;
            }
            v74 = llvm::DIGlobalVariable::getImpl(v783, (uint64_t)v956, (uint64_t)v947, (uint64_t)v938, (uint64_t)v931, v971, (uint64_t)v786, v788 != 0, v789 != 0, (uint64_t)v791, (uint64_t)v793, *((_QWORD *)v787 + 11), v784, 0, 1);
          }
        }
        goto LABEL_1139;
      }
      *(_BYTE *)(a2 + 1042) = 1;
      v353 = v142[18];
      if (v353)
      {
        v141 = a3[2];
      }
      else
      {
        v354 = 0;
      }
      if (v141 < 0xC)
      {
        LODWORD(v681) = 0;
      }
      else
      {
        v681 = *(_QWORD *)(*(_QWORD *)a3 + 88);
        if (HIDWORD(v681))
          goto LABEL_387;
      }
      v983 = v681;
      if (!v354 || *(_BYTE *)v354 != 1)
        goto LABEL_1149;
      v682 = *(_QWORD *)(v354 + 128);
      v683 = *(unsigned __int8 *)(v682 + 16);
      if (v682 && v683 == 3)
      {
        v354 = 0;
        v684 = (llvm::Value *)v682;
      }
      else
      {
        v354 = 0;
        v684 = 0;
        if (v682 && v683 == 16)
        {
          v796 = *(_QWORD *)(a2 + 208);
          *(_QWORD *)&v995 = 16;
          v797 = (_QWORD *)(v682 + 24);
          if (*(_DWORD *)(v682 + 32) >= 0x41u)
            v797 = (_QWORD *)*v797;
          *((_QWORD *)&v995 + 1) = *v797;
          v996[0] = 159;
          v354 = (unint64_t)llvm::DIExpression::getImpl(v796, &v995, (void *)3, 0, 1);
LABEL_1149:
          v684 = 0;
        }
      }
      v798 = *(uint64_t **)(a2 + 208);
      v799 = *(int **)a3;
      v800 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      if (v990)
      {
        if (v800)
        {
          v799 = *(int **)a3;
        }
        else
        {
          v959 = 0;
        }
        v801 = v799[4];
        if (v801)
        {
          v799 = *(int **)a3;
        }
        else
        {
          v948 = 0;
        }
        v802 = v799[6];
        if (v802)
        {
          v799 = *(int **)a3;
        }
        else
        {
          v939 = 0;
        }
        v803 = v799[8];
        v972 = v798;
        if (v803)
        {
          v799 = *(int **)a3;
        }
        else
        {
          v804 = 0;
        }
        v805 = v799[10];
        v806 = v799[12];
        if (v806)
        else
          v807 = 0;
        v809 = *(int **)a3;
        v810 = *(_QWORD *)(*(_QWORD *)a3 + 56);
        v811 = *((_QWORD *)v809 + 8);
        v812 = v809[20];
        if (v812)
        else
          v813 = 0;
        v814 = llvm::DIGlobalVariable::getImpl(v972, (uint64_t)v959, (uint64_t)v948, (uint64_t)v939, (uint64_t)v804, v805, (uint64_t)v808, v810 != 0, v811 != 0, (uint64_t)v813, 0, v983, 0, 1, 1);
      }
      else
      {
        if (v800)
        {
          v799 = *(int **)a3;
        }
        else
        {
          v960 = 0;
        }
        v815 = v799[4];
        if (v815)
        {
          v799 = *(int **)a3;
        }
        else
        {
          v949 = 0;
        }
        v816 = v799[6];
        if (v816)
        {
          v799 = *(int **)a3;
        }
        else
        {
          v940 = 0;
        }
        v817 = v799[8];
        if (v817)
        {
          v799 = *(int **)a3;
        }
        else
        {
          v932 = 0;
        }
        v818 = v799[10];
        v819 = v799[12];
        if (v819)
        else
          v820 = 0;
        v822 = *(int **)a3;
        v823 = *(_QWORD *)(*(_QWORD *)a3 + 56);
        v824 = *((_QWORD *)v822 + 8);
        v825 = v822[20];
        if (v825)
        else
          v826 = 0;
        v814 = llvm::DIGlobalVariable::getImpl(v798, (uint64_t)v960, (uint64_t)v949, (uint64_t)v940, (uint64_t)v932, v818, (uint64_t)v821, v823 != 0, v824 != 0, (uint64_t)v826, 0, v983, 0, 0, 1);
      }
      v827 = v814;
      if (!((unint64_t)v684 | v354))
        goto LABEL_1195;
      v828 = *(_QWORD **)(a2 + 208);
      v829 = (llvm::MDNode *)v354;
      if (!v354)
        v829 = llvm::DIExpression::getImpl(*(_QWORD *)(a2 + 208), 0, 0, 0, 1);
      v830 = llvm::DIGlobalVariableExpression::getImpl(v828, v827, (uint64_t)v829, 1, 1);
      if (v684)
        llvm::GlobalVariable::addDebugInfo(v684, v830);
      if (!v354)
LABEL_1195:
        v830 = (llvm::MDNode *)v827;
      v794 = *v9;
      v795 = (_anonymous_namespace_::BitcodeReaderMetadataList *)a2;
      v23 = v830;
      goto LABEL_1141;
    case 28:
      v148 = a3[2];
      if (v148 - 11 <= 0xFFFFFFFC)
        goto LABEL_311;
      v149 = *(int **)a3;
      v150 = **(_QWORD **)a3;
      v151 = v150 & 1;
      v990 = **(_BYTE **)a3 & 1;
      if ((v150 & 2) != 0)
      {
        v152 = *((_QWORD *)v149 + 8);
        if (HIDWORD(v152))
        {
LABEL_387:
          v166 = "Alignment value is too large";
          goto LABEL_312;
        }
        v975 = *((_QWORD *)v149 + 7);
        if (v148 >= 0xA && (v274 = v149[18]) != 0)
        {
          v154 = 0;
          v151 = v990;
        }
        else
        {
          v154 = 0;
          v962 = 0;
        }
      }
      else
      {
        LODWORD(v152) = 0;
        v153 = v148 > 8;
        v154 = v148 > 8;
        v155 = 14;
        if (v153)
          v155 = 16;
        v962 = 0;
        v975 = *(_QWORD *)&v149[v155];
      }
      v954 = *(_QWORD **)(a2 + 208);
      v529 = *(int **)a3;
      v530 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (v154 + 1));
      if (v151)
      {
        if ((_DWORD)v530)
        {
          v529 = *(int **)a3;
        }
        else
        {
          v531 = 0;
        }
        v533 = *(_QWORD *)&v529[2 * (v154 | 2)];
        if ((_DWORD)v533)
        {
          v529 = *(int **)a3;
        }
        else
        {
          v534 = 0;
        }
        v535 = *(_QWORD *)&v529[2 * (v154 + 3)];
        if ((_DWORD)v535)
        {
          v529 = *(int **)a3;
        }
        else
        {
          v536 = 0;
        }
        v537 = *(_QWORD *)&v529[2 * (v154 | 4)];
        v538 = *(_QWORD *)&v529[2 * (v154 + 5)];
        if ((_DWORD)v538)
        else
          v539 = 0;
        v74 = (uint64_t)llvm::DILocalVariable::getImpl(v954, (uint64_t)v531, (uint64_t)v534, (uint64_t)v536, v537, (uint64_t)v540, *(_QWORD *)(*(_QWORD *)a3 + 8 * (v154 | 6u)), v975, v152, (uint64_t)v962, 1, 1);
      }
      else
      {
        if ((_DWORD)v530)
        {
          v529 = *(int **)a3;
        }
        else
        {
          v532 = 0;
        }
        v671 = *(_QWORD *)&v529[2 * (v154 | 2)];
        if ((_DWORD)v671)
        {
          v529 = *(int **)a3;
        }
        else
        {
          v672 = 0;
        }
        v673 = *(_QWORD *)&v529[2 * (v154 + 3)];
        if ((_DWORD)v673)
        {
          v529 = *(int **)a3;
        }
        else
        {
          v674 = 0;
        }
        v675 = *(_QWORD *)&v529[2 * (v154 | 4)];
        v676 = *(_QWORD *)&v529[2 * (v154 + 5)];
        if ((_DWORD)v676)
        else
          v677 = 0;
        v74 = (uint64_t)llvm::DILocalVariable::getImpl(v954, (uint64_t)v532, (uint64_t)v672, (uint64_t)v674, v675, (uint64_t)v678, *(_QWORD *)(*(_QWORD *)a3 + 8 * (v154 | 6u)), v975, v152, (uint64_t)v962, 0, 1);
      }
      goto LABEL_1139;
    case 29:
      v156 = a3[2];
      if (!(_DWORD)v156)
        goto LABEL_311;
      v157 = (unsigned int *)(*(_QWORD *)a3 + 8);
      v158 = **(_QWORD **)a3;
      v990 = **(_BYTE **)a3 & 1;
      v991 = (llvm::ValueAsMetadata *)v157;
      *(_QWORD *)&v992 = v156 - 1;
      *(_QWORD *)&v995 = v996;
      *((_QWORD *)&v995 + 1) = 0x600000000;
      llvm::MetadataLoader::MetadataLoaderImpl::upgradeDIExpression((llvm *)a2, v158 >> 1, &v991, (uint64_t)&v995, (uint64_t *)a1);
      if (*(_QWORD *)v8)
      {
        v159 = (void *)v995;
        if ((_QWORD *)v995 != v996)
          goto LABEL_852;
        return;
      }
      v277 = llvm::DIExpression::getImpl(*(_QWORD *)(a2 + 208), v991, (void *)v992, v990, 1);
      ++*v9;
      v37 = (void *)v995;
      if ((_QWORD *)v995 != v996)
        goto LABEL_29;
      goto LABEL_1142;
    case 30:
      if (a3[2] != 8)
        goto LABEL_311;
      v160 = *(int **)a3;
      v161 = **(_QWORD **)a3;
      v990 = v161 != 0;
      v162 = *(_QWORD **)(a2 + 208);
      v163 = v160[2];
      if (v161)
      {
        if (v163)
        {
          v160 = *(int **)a3;
        }
        else
        {
          v164 = 0;
        }
        v375 = v160[4];
        if (v375)
        {
          v160 = *(int **)a3;
        }
        else
        {
          v376 = 0;
        }
        v409 = v160[6];
        v410 = v160[8];
        if (v410)
        {
          v160 = *(int **)a3;
        }
        else
        {
          v411 = 0;
        }
        v429 = v160[10];
        if (v429)
        {
          v160 = *(int **)a3;
        }
        else
        {
          v430 = 0;
        }
        v433 = v160[12];
        v434 = v160[14];
        if (v434)
        else
          v435 = 0;
        v74 = (uint64_t)llvm::DIObjCProperty::getImpl(v162, (uint64_t)v164, (uint64_t)v376, v409, (uint64_t)v411, (uint64_t)v430, v433, (uint64_t)v438, 1, 1);
      }
      else
      {
        if (v163)
        {
          v160 = *(int **)a3;
        }
        else
        {
          v295 = 0;
        }
        v572 = v160[4];
        if (v572)
        {
          v160 = *(int **)a3;
        }
        else
        {
          v573 = 0;
        }
        v591 = v160[6];
        v592 = v160[8];
        if (v592)
        {
          v160 = *(int **)a3;
        }
        else
        {
          v593 = 0;
        }
        v607 = v160[10];
        if (v607)
        {
          v160 = *(int **)a3;
        }
        else
        {
          v608 = 0;
        }
        v615 = v160[12];
        v616 = v160[14];
        if (v616)
        else
          v617 = 0;
        v74 = (uint64_t)llvm::DIObjCProperty::getImpl(v162, (uint64_t)v295, (uint64_t)v573, v591, (uint64_t)v593, (uint64_t)v608, v615, (uint64_t)v634, 0, 1);
      }
      goto LABEL_1139;
    case 31:
      v165 = a3[2];
      if (v165 - 9 <= 0xFFFFFFFC)
      {
        v166 = "Invalid DIImportedEntity record";
        goto LABEL_312;
      }
      v239 = *(int **)a3;
      v240 = **(_QWORD **)a3;
      v990 = v240 != 0;
      v241 = *(_QWORD **)(a2 + 208);
      v977 = v239[2];
      v242 = v239[4];
      if (v240)
      {
        if (v242)
        {
          v239 = *(int **)a3;
        }
        else
        {
          v963 = 0;
        }
        v384 = v239[6];
        if (v384)
        else
          v385 = 0;
        v423 = *(int **)a3;
        if (v165 < 7)
        {
          v425 = 0;
          v426 = 0;
        }
        else
        {
          v424 = v423[12];
          if (v424)
          {
            v423 = *(int **)a3;
          }
          else
          {
            v425 = 0;
          }
          v426 = v423[8];
        }
        v644 = v241;
        v645 = v423[10];
        if (v645)
        else
          v646 = 0;
        if (v165 >= 8 && (v647 = *(_DWORD *)(*(_QWORD *)a3 + 56)) != 0)
        else
          v648 = 0;
        v74 = (uint64_t)llvm::DIImportedEntity::getImpl(v644, v977, (uint64_t)v963, (uint64_t)v422, (uint64_t)v425, v426, (uint64_t)v646, (uint64_t)v648, 1, 1);
      }
      else
      {
        if (v242)
        {
          v239 = *(int **)a3;
        }
        else
        {
          v964 = 0;
        }
        v576 = v239[6];
        if (v576)
        else
          v577 = 0;
        v595 = *(int **)a3;
        if (v165 < 7)
        {
          v597 = 0;
          v598 = 0;
        }
        else
        {
          v596 = v595[12];
          if (v596)
          {
            v595 = *(int **)a3;
          }
          else
          {
            v597 = 0;
          }
          v598 = v595[8];
        }
        v693 = v595[10];
        if (v693)
        else
          v694 = 0;
        if (v165 >= 8 && (v695 = *(_DWORD *)(*(_QWORD *)a3 + 56)) != 0)
        else
          v696 = 0;
        v74 = (uint64_t)llvm::DIImportedEntity::getImpl(v241, v977, (uint64_t)v964, (uint64_t)v594, (uint64_t)v597, v598, (uint64_t)v694, (uint64_t)v696, 0, 1);
      }
      goto LABEL_1139;
    case 32:
      v167 = a3[2];
      if (v167 - 10 <= 0xFFFFFFFA)
        goto LABEL_311;
      if (v167 <= 7)
        v168 = 1;
      else
        v168 = 2;
      v169 = *(int **)a3;
      v170 = **(_QWORD **)a3;
      v990 = v170 != 0;
      v976 = *(uint64_t **)(a2 + 208);
      if (v170)
      {
        if (v167 >= 8 && (v171 = v169[2]) != 0)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v172 = 0;
        }
        v279 = *(_QWORD *)&v169[2 * v168];
        if ((_DWORD)v279)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v280 = 0;
        }
        v386 = *(_QWORD *)&v169[2 * v168 + 2];
        if ((_DWORD)v386)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v387 = 0;
        }
        v427 = *(_QWORD *)&v169[2 * v168 + 4];
        if ((_DWORD)v427)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v428 = 0;
        }
        v431 = *(_QWORD *)&v169[2 * v168 + 6];
        if ((_DWORD)v431)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v432 = 0;
        }
        v436 = *(_QWORD *)&v169[2 * (v168 | 4)];
        if ((_DWORD)v436)
        else
          v437 = 0;
        v439 = a3[2];
        if (v439 >= 8)
        {
          v440 = *(_DWORD *)(*(_QWORD *)a3 + 56);
          v441 = v439 != 8 && *(_QWORD *)(*(_QWORD *)a3 + 64) != 0;
        }
        else
        {
          v440 = 0;
          v441 = 0;
        }
        v74 = llvm::DIModule::getImpl(v976, (uint64_t)v172, (uint64_t)v280, (uint64_t)v387, (uint64_t)v428, (uint64_t)v432, (uint64_t)v437, v440, v441, 1, 1);
      }
      else
      {
        if (v167 >= 8 && (v296 = v169[2]) != 0)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v297 = 0;
        }
        v347 = *(_QWORD *)&v169[2 * v168];
        if ((_DWORD)v347)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v348 = 0;
        }
        v578 = *(_QWORD *)&v169[2 * v168 + 2];
        if ((_DWORD)v578)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v579 = 0;
        }
        v599 = *(_QWORD *)&v169[2 * v168 + 4];
        if ((_DWORD)v599)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v600 = 0;
        }
        v609 = *(_QWORD *)&v169[2 * v168 + 6];
        if ((_DWORD)v609)
        {
          v169 = *(int **)a3;
        }
        else
        {
          v610 = 0;
        }
        v618 = *(_QWORD *)&v169[2 * (v168 | 4)];
        if ((_DWORD)v618)
        else
          v619 = 0;
        v635 = a3[2];
        if (v635 >= 8)
        {
          v636 = *(_DWORD *)(*(_QWORD *)a3 + 56);
          v637 = v635 != 8 && *(_QWORD *)(*(_QWORD *)a3 + 64) != 0;
        }
        else
        {
          v636 = 0;
          v637 = 0;
        }
        v74 = llvm::DIModule::getImpl(v976, (uint64_t)v297, (uint64_t)v348, (uint64_t)v579, (uint64_t)v600, (uint64_t)v610, (uint64_t)v619, v636, v637, 0, 1);
      }
      goto LABEL_1139;
    case 33:
      if (a3[2] != 5)
        goto LABEL_311;
      v173 = *(int **)a3;
      v174 = **(_QWORD **)a3;
      v990 = v174 != 0;
      v175 = *(_QWORD **)(a2 + 208);
      v176 = v173[2];
      v177 = v173[4];
      v178 = v173[6];
      if (v174)
      {
        if (v178)
        {
          v173 = *(int **)a3;
        }
        else
        {
          v179 = 0;
        }
        v377 = v173[8];
        if (v377)
        else
          v378 = 0;
        v412 = v175;
        v413 = v176;
        v414 = v177;
        v415 = (uint64_t)v179;
        v416 = 1;
      }
      else
      {
        if (v178)
        {
          v173 = *(int **)a3;
        }
        else
        {
          v298 = 0;
        }
        v574 = v173[8];
        if (v574)
        else
          v378 = 0;
        v412 = v175;
        v413 = v176;
        v414 = v177;
        v415 = (uint64_t)v298;
        v416 = 0;
      }
      v74 = llvm::DIMacro::getImpl(v412, v413, v414, v415, (uint64_t)v378, v416, 1);
      goto LABEL_1139;
    case 34:
      if (a3[2] != 5)
        goto LABEL_311;
      v180 = *(int **)a3;
      v181 = **(_QWORD **)a3;
      v990 = v181 != 0;
      v182 = *(_QWORD **)(a2 + 208);
      v183 = v180[2];
      v184 = v180[4];
      v185 = v180[6];
      if (v181)
      {
        if (v185)
        {
          v180 = *(int **)a3;
        }
        else
        {
          v186 = 0;
        }
        v379 = v180[8];
        if (v379)
        else
          v380 = 0;
        v417 = v182;
        v418 = v183;
        v419 = v184;
        v420 = (uint64_t)v186;
        v421 = 1;
      }
      else
      {
        if (v185)
        {
          v180 = *(int **)a3;
        }
        else
        {
          v299 = 0;
        }
        v575 = v180[8];
        if (v575)
        else
          v380 = 0;
        v417 = v182;
        v418 = v183;
        v419 = v184;
        v420 = (uint64_t)v299;
        v421 = 0;
      }
      v74 = llvm::DIMacroFile::getImpl(v417, v418, v419, v420, (uint64_t)v380, v421, 1);
      goto LABEL_1139;
    case 35:
      *(_QWORD *)&v995 = a2;
      *((_QWORD *)&v995 + 1) = a8;
      if (!*(_QWORD *)v8)
        goto LABEL_1142;
      return;
    case 36:
      if ((a3[2] & 1) == 0)
        goto LABEL_311;
      v187 = **(_QWORD **)(a2 + 192);
      if (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 192) + 8) - v187) >> 5) <= **(_QWORD **)a3)
        goto LABEL_311;
      v188 = *(unsigned __int8 *)(*(_QWORD *)(v187 + 32 * **(_QWORD **)a3 + 16) + 16);
      if (v188 > 3 || v188 == 1)
        goto LABEL_1142;
      llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(a2);
      if (!*(_QWORD *)v8)
        goto LABEL_1142;
      return;
    case 37:
      if (a3[2] != 3)
        goto LABEL_311;
      v190 = *(int **)a3;
      v990 = **(_QWORD **)a3 != 0;
      v191 = v190[4];
      if (!v191
      {
        v192 = llvm::DIExpression::getImpl(*(_QWORD *)(a2 + 208), 0, 0, 0, 1);
      }
      v193 = *(_QWORD **)(a2 + 208);
      v194 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      if (v990)
      {
        if (v194)
        else
          v195 = 0;
        v381 = v193;
        v382 = (uint64_t)v192;
        v383 = 1;
      }
      else
      {
        if (v194)
        else
          v195 = 0;
        v381 = v193;
        v382 = (uint64_t)v192;
        v383 = 0;
      }
      v74 = (uint64_t)llvm::DIGlobalVariableExpression::getImpl(v381, (uint64_t)v195, v382, v383, 1);
      goto LABEL_1139;
    case 40:
      if (a3[2] != 5)
        goto LABEL_311;
      v196 = *(int **)a3;
      v990 = **(_QWORD **)a3 & 1;
      v197 = *(_QWORD **)(a2 + 208);
      v198 = v196[2];
      if (v990)
      {
        if (v198)
        {
          v196 = *(int **)a3;
        }
        else
        {
          v275 = 0;
        }
        v481 = v196[4];
        if (v481)
        {
          v196 = *(int **)a3;
        }
        else
        {
          v482 = 0;
        }
        v520 = v196[6];
        if (v520)
        {
          v196 = *(int **)a3;
        }
        else
        {
          v517 = 0;
        }
        v522 = v196[8];
        v523 = v197;
        v524 = (uint64_t)v275;
        v525 = (uint64_t)v482;
        v526 = 1;
      }
      else
      {
        if (v198)
        {
          v196 = *(int **)a3;
        }
        else
        {
          v199 = 0;
        }
        v477 = v196[4];
        if (v477)
        {
          v196 = *(int **)a3;
        }
        else
        {
          v478 = 0;
        }
        v516 = v196[6];
        if (v516)
        {
          v196 = *(int **)a3;
        }
        else
        {
          v517 = 0;
        }
        v522 = v196[8];
        v523 = v197;
        v524 = (uint64_t)v199;
        v525 = (uint64_t)v478;
        v526 = 0;
      }
      v74 = llvm::DILabel::getImpl(v523, v524, v525, (uint64_t)v517, v522, v526, 1);
      goto LABEL_1139;
    case 41:
      v200 = a3[2];
      if (v200 - 10 <= 0xFFFFFFFD)
        goto LABEL_311;
      v201 = *(int **)a3;
      v202 = **(_QWORD **)a3 != 0;
      v990 = **(_QWORD **)a3 != 0;
      if (v200 == 8)
      {
        v203 = 0;
        v204 = 5;
      }
      else
      {
        v276 = v201[10];
        if (v276)
        {
          v204 = 6;
          v202 = v990;
        }
        else
        {
          v203 = 0;
          v204 = 6;
        }
      }
      v483 = *(_QWORD **)(a2 + 208);
      v484 = *(int **)a3;
      v485 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      v486 = *(_DWORD *)(*(_QWORD *)a3 + 16);
      if (v202)
      {
        if (v486)
        {
          v484 = *(int **)a3;
        }
        else
        {
          v487 = 0;
        }
        v489 = v484[6];
        if (v489)
        {
          v484 = *(int **)a3;
        }
        else
        {
          v490 = 0;
        }
        v491 = v484[8];
        if (v491)
        {
          v484 = *(int **)a3;
        }
        else
        {
          v492 = 0;
        }
        v74 = (uint64_t)llvm::DIStringType::getImpl(v483, v485, (uint64_t)v487, (uint64_t)v490, (uint64_t)v492, (uint64_t)v203, *(_QWORD *)&v484[2 * v204], *(_QWORD *)&v484[2 * v204 + 2], *(_QWORD *)&v484[2 * v204 + 4], 1, 1);
      }
      else
      {
        if (v486)
        {
          v484 = *(int **)a3;
        }
        else
        {
          v488 = 0;
        }
        v581 = v484[6];
        if (v581)
        {
          v484 = *(int **)a3;
        }
        else
        {
          v582 = 0;
        }
        v603 = v484[8];
        if (v603)
        {
          v484 = *(int **)a3;
        }
        else
        {
          v604 = 0;
        }
        v74 = (uint64_t)llvm::DIStringType::getImpl(v483, v485, (uint64_t)v488, (uint64_t)v582, (uint64_t)v604, (uint64_t)v203, *(_QWORD *)&v484[2 * v204], *(_QWORD *)&v484[2 * v204 + 2], *(_QWORD *)&v484[2 * v204 + 4], 0, 1);
      }
      goto LABEL_1139;
    case 44:
      v205 = *(int **)a3;
      v990 = **(_QWORD **)a3 & 1;
      v206 = *(_QWORD **)(a2 + 208);
      v207 = v205[2];
      if (v990)
      {
        if (v207)
        {
          v205 = *(int **)a3;
        }
        else
        {
          v243 = 0;
        }
        v302 = v205[4];
        if (v302)
        {
          v205 = *(int **)a3;
        }
        else
        {
          v303 = 0;
        }
        v312 = v205[6];
        if (v312)
        {
          v205 = *(int **)a3;
        }
        else
        {
          v313 = 0;
        }
        v322 = v205[8];
        if (v322)
        {
          v205 = *(int **)a3;
        }
        else
        {
          v321 = 0;
        }
        v324 = v205[10];
        v325 = v206;
        v326 = (uint64_t)v243;
        v327 = (uint64_t)v303;
        v328 = (uint64_t)v313;
        v329 = 1;
      }
      else
      {
        if (v207)
        {
          v205 = *(int **)a3;
        }
        else
        {
          v208 = 0;
        }
        v300 = v205[4];
        if (v300)
        {
          v205 = *(int **)a3;
        }
        else
        {
          v301 = 0;
        }
        v310 = v205[6];
        if (v310)
        {
          v205 = *(int **)a3;
        }
        else
        {
          v311 = 0;
        }
        v320 = v205[8];
        if (v320)
        {
          v205 = *(int **)a3;
        }
        else
        {
          v321 = 0;
        }
        v324 = v205[10];
        v325 = v206;
        v326 = (uint64_t)v208;
        v327 = (uint64_t)v301;
        v328 = (uint64_t)v311;
        v329 = 0;
      }
      v74 = llvm::DICommonBlock::getImpl(v325, v326, v327, v328, (uint64_t)v321, v324, v329, 1);
      goto LABEL_1139;
    case 45:
      v209 = *(_QWORD **)(a2 + 208);
      v210 = *(int **)a3;
      v211 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      if (v211)
      {
        v210 = *(int **)a3;
      }
      else
      {
        v212 = 0;
      }
      v247 = v210[4];
      if (v247)
      {
        v210 = *(int **)a3;
      }
      else
      {
        v248 = 0;
      }
      v249 = v210[6];
      if (v249)
      {
        v210 = *(int **)a3;
      }
      else
      {
        v250 = 0;
      }
      v251 = v210[8];
      if (v251)
      else
        v252 = 0;
      v74 = (uint64_t)llvm::DIGenericSubrange::getImpl(v209, (uint64_t)v212, (uint64_t)v248, (uint64_t)v250, (uint64_t)v252, 0, 1);
      goto LABEL_1139;
    case 46:
      *(_QWORD *)&v995 = v996;
      *((_QWORD *)&v995 + 1) = 0x400000000;
      v213 = a3[2];
      if (v213 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v995, v996, v213, 8);
        LODWORD(v213) = a3[2];
      }
      if ((_DWORD)v213)
      {
        v214 = *(unsigned int **)a3;
        v215 = 8 * v213;
        do
        {
          v217 = v216;
          v218 = *v216;
          if ((v218 - 5) <= 0x1E)
          {
            if ((v216[1] & 0x7F) == 2)
              v278 = "Invalid record: DIArgList should not contain forward refs";
            else
LABEL_317:
              v278 = "Invalid record";
            v991 = (llvm::ValueAsMetadata *)v278;
            v994 = 259;
            error(v8, (llvm::Twine *)&v991);
            v159 = (void *)v995;
            if ((_QWORD *)v995 == v996)
              return;
            goto LABEL_852;
          }
          if ((v218 - 1) >= 2)
            goto LABEL_317;
          v219 = DWORD2(v995);
          if (DWORD2(v995) >= (unint64_t)HIDWORD(v995))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v995, v996, DWORD2(v995) + 1, 8);
            v219 = DWORD2(v995);
          }
          *(_QWORD *)(v995 + 8 * v219) = v217;
          v220 = ++DWORD2(v995);
          v214 += 2;
          v215 -= 8;
        }
        while (v215);
      }
      else
      {
        v220 = DWORD2(v995);
      }
      Impl = (llvm::Metadata *)llvm::DIArgList::get(*(uint64_t **)(a2 + 208), (_QWORD *)v995, v220);
      goto LABEL_28;
    case 47:
      if (a3[2] == 1)
      {
        v221 = **(_QWORD **)a3;
        v990 = **(_BYTE **)a3 & 1;
        if ((v221 & 1) != 0)
        {
          v74 = (uint64_t)llvm::DIAssignID::getImpl(*(_QWORD *)(a2 + 208), 1);
          goto LABEL_1139;
        }
        v166 = "Invalid DIAssignID record. Must be distinct";
      }
      else
      {
        v166 = "Invalid DIAssignID record.";
      }
LABEL_312:
      *(_QWORD *)&v995 = v166;
      v997 = 259;
      error(v8, (llvm::Twine *)&v995);
      return;
    default:
      goto LABEL_1142;
  }
}

void `anonymous namespace'::BitcodeReaderMetadataList::assignValue(_anonymous_namespace_::BitcodeReaderMetadataList *this, llvm::Metadata *a2, unsigned int a3)
{
  unsigned __int8 *v3;
  _DWORD *v5;
  int v6;
  char *v7;
  int v8;
  unsigned int v9;
  char *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 **v16;
  llvm::MDNode *v17;
  uint64_t v18;
  int v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Metadata **v28;
  char *v29;
  char *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned __int8 *v37;

  v3 = (unsigned __int8 *)a2;
  v36 = a3;
  if (*(unsigned __int8 *)a2 - 5 <= 0x1E && ((*((_BYTE *)a2 + 1) & 0x7F) == 2 || *((_DWORD *)a2 - 2)))
  {
    v5 = (_DWORD *)((char *)this + 48);
    if ((*((_BYTE *)this + 48) & 1) != 0)
    {
      v7 = (char *)this + 56;
      v6 = 1;
    }
    else
    {
      v6 = *((_DWORD *)this + 16);
      if (!v6)
      {
        v29 = 0;
LABEL_33:
        llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucket<unsigned int const&,llvm::detail::DenseSetEmpty&>(v5, v29, &v36);
        a3 = v36;
        goto LABEL_9;
      }
      v7 = (char *)*((_QWORD *)this + 7);
    }
    v8 = v6 - 1;
    v9 = v8 & (37 * a3);
    v10 = &v7[4 * v9];
    v11 = *(_DWORD *)v10;
    if (*(_DWORD *)v10 == a3)
      goto LABEL_9;
    v30 = 0;
    v31 = 1;
    while (v11 != -1)
    {
      if (v30)
        v32 = 0;
      else
        v32 = v11 == -2;
      if (v32)
        v30 = v10;
      v33 = v9 + v31++;
      v9 = v33 & v8;
      v10 = &v7[4 * v9];
      v11 = *(_DWORD *)v10;
      if (*(_DWORD *)v10 == a3)
        goto LABEL_9;
    }
    if (v30)
      v29 = v30;
    else
      v29 = v10;
    goto LABEL_33;
  }
LABEL_9:
  v12 = *((unsigned int *)this + 2);
  if (a3 != (_DWORD)v12)
  {
    v14 = a3 + 1;
    if (a3 < v12 || (_DWORD)v12 == (_DWORD)v14)
    {
      v16 = (unsigned __int8 **)(*(_QWORD *)this + 8 * a3);
      v17 = (llvm::MDNode *)*v16;
      if (!*v16)
      {
LABEL_39:
        *v16 = v3;
        llvm::MetadataTracking::track((uint64_t)v16, v3, 1);
        return;
      }
    }
    else
    {
      if (v12 <= v14)
      {
        if (*((_DWORD *)this + 3) < v14)
        {
          llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::grow((uint64_t)this, a3 + 1);
          v12 = *((unsigned int *)this + 2);
        }
        if (v14 != v12)
          bzero((void *)(*(_QWORD *)this + 8 * v12), 8 * (v14 - v12));
      }
      else
      {
        v26 = 8 * v12;
        v27 = 8 * v14 - v26;
        v28 = (llvm::Metadata **)(v26 + *(_QWORD *)this - 8);
        do
        {
          a2 = *v28;
          if (*v28)
            llvm::MetadataTracking::untrack((uint64_t)v28, (unsigned __int8 *)a2);
          --v28;
          v27 += 8;
        }
        while (v27);
      }
      *((_DWORD *)this + 2) = v14;
      v16 = (unsigned __int8 **)(*(_QWORD *)this + 8 * v36);
      v17 = (llvm::MDNode *)*v16;
      if (!*v16)
        goto LABEL_39;
    }
    v18 = *((_QWORD *)v17 + 1);
    if ((v18 & 4) != 0)
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v18 & 0xFFFFFFFFFFFFFFF8), (llvm::Metadata *)v3);
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v20 = (char *)this + 32;
      v19 = 1;
    }
    else
    {
      v19 = *((_DWORD *)this + 10);
      if (!v19)
      {
LABEL_26:
        llvm::MDNode::deleteTemporary(v17, a2);
        return;
      }
      v20 = (char *)*((_QWORD *)this + 4);
    }
    v21 = v19 - 1;
    LODWORD(v22) = (37 * v36) & (v19 - 1);
    v23 = &v20[4 * v22];
    v24 = *(_DWORD *)v23;
    if (v36 == *(_DWORD *)v23)
    {
LABEL_25:
      *(_DWORD *)v23 = -2;
      v25 = *((_DWORD *)this + 7) + 1;
      *((_DWORD *)this + 6) -= 2;
      *((_DWORD *)this + 7) = v25;
    }
    else
    {
      v34 = 1;
      while (v24 != -1)
      {
        v35 = v22 + v34++;
        v22 = v35 & v21;
        v24 = *(_DWORD *)&v20[4 * v22];
        if (v36 == v24)
        {
          v23 = &v20[4 * v22];
          goto LABEL_25;
        }
      }
    }
    goto LABEL_26;
  }
  v37 = v3;
  if (a3 >= *((_DWORD *)this + 3))
  {
    llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::Metadata *&>((uint64_t)this, &v37);
  }
  else
  {
    v13 = (unsigned __int8 **)(*(_QWORD *)this + 8 * a3);
    *v13 = v3;
    llvm::MetadataTracking::track((uint64_t)v13, v3, 1);
    ++*((_DWORD *)this + 2);
  }
}

unsigned __int8 *llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(llvm::MetadataLoader::MetadataLoaderImpl *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  void *v9;
  llvm::Metadata *v10;
  _OWORD v11[3];

  v4 = *((_QWORD *)this + 84);
  v5 = (*((_QWORD *)this + 85) - v4) >> 4;
  v6 = *((_DWORD *)this + 2);
  if (v5 <= a2)
  {
    if (v6 > a2)
    {
      v7 = *(_QWORD *)(*(_QWORD *)this + 8 * a2);
      if (v7)
        return (unsigned __int8 *)v7;
    }
    if (v5 + ((uint64_t)(*((_QWORD *)this + 88) - *((_QWORD *)this + 87)) >> 3) > a2)
    {
      memset(v11, 0, sizeof(v11));
      llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata((uint64_t)this, a2, (uint64_t)v11);
      llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders((uint64_t)this, (llvm::MDNode *)v11, v9);
    }
  }
  else
  {
    if (v6 > a2)
    {
      v7 = *(_QWORD *)(*(_QWORD *)this + 8 * a2);
      if (v7)
        return (unsigned __int8 *)v7;
    }
    v10 = (llvm::Metadata *)llvm::MDString::get(*((_QWORD **)this + 26), *(int8x16_t **)(v4 + 16 * a2), *(const unsigned __int8 **)(v4 + 16 * a2 + 8));
    return (unsigned __int8 *)v10;
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(uint64_t a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t MetadataFwdRef;
  void *v9;
  uint64_t *v10;
  unsigned int *v11;
  unint64_t *v12;
  int8x8_t *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  int8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int8x8_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  unint64_t v56;
  unint64_t v57;
  int8x8_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  const std::error_category *v63;
  void **v64;
  void *v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  int8x8_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  BOOL v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int64x2_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int64x2_t v103;
  uint8x16_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint32x4_t v107;
  uint32x4_t v108;
  int8x16_t v109;
  uint64x2_t v110;
  uint64x2_t v111;
  uint64x2_t v112;
  uint64x2_t v113;
  uint64x2_t v114;
  uint64x2_t v115;
  uint64x2_t v116;
  uint64x2_t v117;
  int8x16_t v118;
  uint32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  uint32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int64x2_t v127;
  int8x16_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int8x16_t v131;
  uint64_t v132;
  unint64_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int8x16_t v137;
  uint8x8_t *v138;
  int8x16_t v139;
  int8x16_t v140;
  uint8x8_t v141;
  uint16x8_t v142;
  uint32x4_t v143;
  uint64x2_t v144;
  uint64x2_t v145;
  uint64x2_t v146;
  uint32x4_t v147;
  uint64x2_t v148;
  int8x16_t v149;
  int64x2_t v150;
  int8x16_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  uint8x16_t v168;
  uint16x8_t v169;
  uint16x8_t v170;
  uint32x4_t v171;
  uint32x4_t v172;
  int8x16_t v173;
  uint64x2_t v174;
  uint64x2_t v175;
  uint64x2_t v176;
  uint64x2_t v177;
  uint64x2_t v178;
  uint64x2_t v179;
  uint64x2_t v180;
  uint64x2_t v181;
  int8x16_t v182;
  uint32x4_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  uint32x4_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int64x2_t v191;
  int8x16_t v192;
  int64x2_t v193;
  int64x2_t v194;
  int8x16_t v195;
  unint64_t v196;
  unint64_t v197;
  int64x2_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int8x16_t v201;
  uint8x8_t *v202;
  int8x16_t v203;
  int8x16_t v204;
  uint8x8_t v205;
  uint16x8_t v206;
  uint32x4_t v207;
  uint64x2_t v208;
  uint64x2_t v209;
  uint64x2_t v210;
  uint32x4_t v211;
  uint64x2_t v212;
  int8x16_t v213;
  int64x2_t v214;
  int8x16_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  uint8x16_t v232;
  uint16x8_t v233;
  uint16x8_t v234;
  uint32x4_t v235;
  uint32x4_t v236;
  int8x16_t v237;
  uint64x2_t v238;
  uint64x2_t v239;
  uint64x2_t v240;
  uint64x2_t v241;
  uint64x2_t v242;
  uint64x2_t v243;
  uint64x2_t v244;
  uint64x2_t v245;
  int8x16_t v246;
  uint32x4_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  uint32x4_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int64x2_t v255;
  int8x16_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int8x16_t v259;
  uint64_t v260;
  unint64_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int8x16_t v265;
  uint8x8_t *v266;
  int8x16_t v267;
  int8x16_t v268;
  uint8x8_t v269;
  uint16x8_t v270;
  uint32x4_t v271;
  uint64x2_t v272;
  uint64x2_t v273;
  uint64x2_t v274;
  uint32x4_t v275;
  uint64x2_t v276;
  int64x2_t v277;
  int8x16_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int8x16_t v285;
  unint64_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int64x2_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int64x2_t v295;
  uint8x16_t v296;
  uint16x8_t v297;
  uint16x8_t v298;
  uint32x4_t v299;
  uint32x4_t v300;
  int8x16_t v301;
  uint64x2_t v302;
  uint64x2_t v303;
  uint64x2_t v304;
  uint64x2_t v305;
  uint64x2_t v306;
  uint64x2_t v307;
  uint64x2_t v308;
  uint64x2_t v309;
  int8x16_t v310;
  uint32x4_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  uint32x4_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int64x2_t v319;
  int8x16_t v320;
  int8x8_t v321;
  int64x2_t v322;
  int64x2_t v323;
  int8x16_t v324;
  uint64_t v325;
  unint64_t v326;
  int64x2_t v327;
  int64x2_t v328;
  int64x2_t v329;
  int8x16_t v330;
  uint8x8_t *v331;
  unint64_t v332;
  int8x16_t v333;
  int8x16_t v334;
  uint8x8_t v335;
  uint16x8_t v336;
  uint32x4_t v337;
  uint64x2_t v338;
  uint64x2_t v339;
  uint64x2_t v340;
  uint32x4_t v341;
  uint64x2_t v342;
  int8x16_t v343;
  int64x2_t v344;
  int8x16_t v345;
  int8x8_t v346;
  int v347;
  int v348;
  int v349;
  uint64_t v350;
  _UNKNOWN **v351;
  void *v352;
  unsigned __int8 **v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int *v359;
  int v360;
  int v361;
  int v362;
  unint64_t v363;
  void *v364;
  int v365;
  llvm *v366;
  llvm::MDNode *v367;
  _UNKNOWN **v368;
  void *v369;
  _UNKNOWN **v370;
  void *v371;
  const std::error_category *v372;
  void **v373;
  _UNKNOWN **v374;
  void *v375;
  uint64_t v376;
  int v377;
  void *v378;
  uint64_t *v379;
  int v380[2];
  int8x16_t v381;
  _OWORD v382[3];
  const char *v383;
  void *v384;
  void *v385;
  unsigned int v386;
  void *__p;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  uint64_t v391;
  _BYTE v392[512];
  const char *v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char v398;
  uint64_t v399;
  int v400;
  void **p_p;
  void *v402;
  const char *v403;
  unint64_t v404;
  unint64_t v405;
  __int16 v406;
  uint64_t v407;
  std::error_code v408;
  std::error_code v409;

  v6 = a1;
  v407 = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::EnterSubBlock(*(llvm::BitstreamCursor **)(a1 + 200), 0, 16, a4);
  if (!*a4)
  {
    v376 = a3;
    v379 = a4;
    v390 = v392;
    v391 = 0x4000000000;
    memset(v382, 0, sizeof(v382));
    v378 = &unk_1E0E20320;
    *(_QWORD *)v380 = v6;
    v381 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
    while (1)
    {
      v10 = *(uint64_t **)(v6 + 200);
      v11 = (unsigned int *)(v10 + 4);
      v12 = (unint64_t *)(v10 + 2);
      v13 = (int8x8_t *)(v10 + 3);
      while (1)
      {
        while (1)
        {
LABEL_6:
          while (1)
          {
            v15 = *v11;
            if (*v11)
              break;
            v19 = v10[1];
            v18 = v10[2];
            if (v19 <= v18)
              goto LABEL_165;
            v16 = *((_DWORD *)v10 + 9);
            if (!v16)
            {
              v17 = *v13;
              goto LABEL_25;
            }
            v17 = 0;
            v20 = v19 - v18;
            if (v19 <= v18)
            {
LABEL_216:
              v372 = std::generic_category();
              __p = 0;
              v388 = 0;
              v389 = 0;
              v394 = 0;
              v398 = 0;
              v399 = 0;
              v400 = 1;
              v396 = 0;
              v397 = 0;
              v395 = 0;
              v393 = (const char *)&unk_1E0E22B10;
              p_p = &__p;
              llvm::raw_ostream::SetBufferAndMode((uint64_t)&v393, 0, 0, 0);
              v402 = &unk_1E0E203C0;
              v403 = "Unexpected end of file reading %u of %u bytes";
              v404 = *v12;
              v405 = v19;
              goto LABEL_218;
            }
LABEL_13:
            v21 = *v10;
            v22 = (unsigned int *)(*v10 + v18);
            if (v19 >= v18 + 8)
            {
              v24 = *(_QWORD *)v22;
              *v13 = (int8x8_t)v24;
              v20 = 8;
              goto LABEL_33;
            }
            *v13 = 0;
            if (!v20)
            {
              v24 = 0;
              goto LABEL_33;
            }
            if (v20 < 8uLL || ((unint64_t)v13 < v21 + v18 + v20 ? (v23 = v22 >= v11) : (v23 = 1), !v23))
            {
              v25 = 0;
              v24 = 0;
LABEL_29:
              v27 = v20 - v25;
              v28 = 8 * v25;
              v29 = (unsigned __int8 *)(v21 + v25 + v18);
              do
              {
                v30 = *v29++;
                MetadataFwdRef = v28 & 0xFFFFFFF8;
                v24 |= (unint64_t)v30 << (v28 & 0xF8);
                *v13 = (int8x8_t)v24;
                v28 += 8;
                --v27;
              }
              while (v27);
              goto LABEL_33;
            }
            if (v20 >= 0x10uLL)
            {
              v25 = v20 - (unint64_t)(v20 & 0xF);
              v152 = (int64x2_t)xmmword_181267BA0;
              v153 = (int64x2_t)xmmword_181267BB0;
              v154 = (int64x2_t)xmmword_181267BC0;
              v155 = 0uLL;
              v156 = 0uLL;
              v157 = (int64x2_t)xmmword_181267BD0;
              MetadataFwdRef = v25;
              v158 = (int64x2_t)xmmword_181233120;
              v159 = (int64x2_t)xmmword_181233290;
              v160 = (int64x2_t)xmmword_181267BE0;
              v161 = (int64x2_t)xmmword_1812332B0;
              v162 = 0uLL;
              v163 = 0uLL;
              v164 = 0uLL;
              v165 = 0uLL;
              v166 = 0uLL;
              v167 = 0uLL;
              do
              {
                v168 = *(uint8x16_t *)v22;
                v22 += 4;
                v169 = vmovl_u8(*(uint8x8_t *)v168.i8);
                v170 = vmovl_high_u8(v168);
                v171 = vmovl_u16(*(uint16x4_t *)v170.i8);
                v172 = vmovl_high_u16(v170);
                v173 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
                v174 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v161, 3uLL), v173);
                v175 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v157, 3uLL), v173);
                v176 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v160, 3uLL), v173);
                v177 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v159, 3uLL), v173);
                v178 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v154, 3uLL), v173);
                v179 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v158, 3uLL), v173);
                v180 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v153, 3uLL), v173);
                v181.i64[0] = v172.u32[2];
                v181.i64[1] = v172.u32[3];
                v182 = (int8x16_t)vshlq_u64(v181, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v152, 3uLL), v173));
                v183 = vmovl_u16(*(uint16x4_t *)v169.i8);
                v181.i64[0] = v172.u32[0];
                v181.i64[1] = v172.u32[1];
                v184 = (int8x16_t)vshlq_u64(v181, v180);
                v181.i64[0] = v183.u32[0];
                v181.i64[1] = v183.u32[1];
                v185 = (int8x16_t)vshlq_u64(v181, v179);
                v181.i64[0] = v171.u32[2];
                v181.i64[1] = v171.u32[3];
                v186 = (int8x16_t)vshlq_u64(v181, v178);
                v187 = vmovl_high_u16(v169);
                v181.i64[0] = v183.u32[2];
                v181.i64[1] = v183.u32[3];
                v188 = (int8x16_t)vshlq_u64(v181, v177);
                v181.i64[0] = v187.u32[0];
                v181.i64[1] = v187.u32[1];
                v189 = (int8x16_t)vshlq_u64(v181, v176);
                v181.i64[0] = v171.u32[0];
                v181.i64[1] = v171.u32[1];
                v190 = (int8x16_t)vshlq_u64(v181, v175);
                v181.i64[0] = v187.u32[2];
                v181.i64[1] = v187.u32[3];
                v163 = vorrq_s8((int8x16_t)vshlq_u64(v181, v174), v163);
                v164 = vorrq_s8(v190, v164);
                v162 = vorrq_s8(v189, v162);
                v156 = vorrq_s8(v188, v156);
                v165 = vorrq_s8(v186, v165);
                v155 = vorrq_s8(v185, v155);
                v166 = vorrq_s8(v184, v166);
                v167 = vorrq_s8(v182, v167);
                v191 = vdupq_n_s64(0x10uLL);
                v160 = vaddq_s64(v160, v191);
                v159 = vaddq_s64(v159, v191);
                v158 = vaddq_s64(v158, v191);
                v161 = vaddq_s64(v161, v191);
                v157 = vaddq_s64(v157, v191);
                v154 = vaddq_s64(v154, v191);
                v153 = vaddq_s64(v153, v191);
                v152 = vaddq_s64(v152, v191);
                MetadataFwdRef -= 16;
              }
              while (MetadataFwdRef);
              v192 = vorrq_s8(vorrq_s8(vorrq_s8(v155, v164), vorrq_s8(v162, v166)), vorrq_s8(vorrq_s8(v156, v165), vorrq_s8(v163, v167)));
              *(int8x8_t *)v192.i8 = vorr_s8(*(int8x8_t *)v192.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v192, v192, 8uLL));
              *v13 = *(int8x8_t *)v192.i8;
              v24 = v192.i64[0];
              if ((v20 & 0xF) == 0)
                goto LABEL_33;
              if ((v20 & 0xF) < 8uLL)
                goto LABEL_29;
            }
            else
            {
              v24 = 0;
              v25 = 0;
            }
            v193 = vdupq_n_s64(v25);
            v194 = vaddq_s64(v193, (int64x2_t)xmmword_1812332B0);
            v195 = (int8x16_t)v24;
            v196 = v18 + v25;
            v197 = v25 + (v20 & 7);
            v25 = v20 - (unint64_t)(v20 & 7);
            v198 = vaddq_s64(v193, (int64x2_t)xmmword_181267BE0);
            v199 = vaddq_s64(v193, (int64x2_t)xmmword_181233290);
            v200 = vaddq_s64(v193, (int64x2_t)xmmword_181233120);
            v201 = 0uLL;
            v202 = (uint8x8_t *)(v21 + v196);
            MetadataFwdRef = v197 - v20;
            v203 = 0uLL;
            v204 = 0uLL;
            do
            {
              v205 = *v202++;
              v206 = vmovl_u8(v205);
              v207 = vmovl_high_u16(v206);
              v208.i64[0] = v207.u32[2];
              v208.i64[1] = v207.u32[3];
              v209 = v208;
              v208.i64[0] = v207.u32[0];
              v208.i64[1] = v207.u32[1];
              v210 = v208;
              v211 = vmovl_u16(*(uint16x4_t *)v206.i8);
              v208.i64[0] = v211.u32[2];
              v208.i64[1] = v211.u32[3];
              v212 = v208;
              v208.i64[0] = v211.u32[0];
              v208.i64[1] = v211.u32[1];
              v213 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
              v204 = vorrq_s8((int8x16_t)vshlq_u64(v209, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v194, 3uLL), v213)), v204);
              v203 = vorrq_s8((int8x16_t)vshlq_u64(v210, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v198, 3uLL), v213)), v203);
              v201 = vorrq_s8((int8x16_t)vshlq_u64(v212, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v199, 3uLL), v213)), v201);
              v214 = vdupq_n_s64(8uLL);
              v195 = vorrq_s8((int8x16_t)vshlq_u64(v208, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v200, 3uLL), v213)), v195);
              v198 = vaddq_s64(v198, v214);
              v199 = vaddq_s64(v199, v214);
              v200 = vaddq_s64(v200, v214);
              v194 = vaddq_s64(v194, v214);
              MetadataFwdRef += 8;
            }
            while (MetadataFwdRef);
            v215 = vorrq_s8(vorrq_s8(v195, v203), vorrq_s8(v201, v204));
            *(int8x8_t *)v215.i8 = vorr_s8(*(int8x8_t *)v215.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v215, v215, 8uLL));
            *v13 = *(int8x8_t *)v215.i8;
            v24 = v215.i64[0];
            if ((v20 & 7) != 0)
              goto LABEL_29;
LABEL_33:
            v31 = v16 - v15;
            *v12 = v18 + v20;
            *v11 = 8 * v20;
            v32 = 8 * v20 - (v16 - v15);
            if (8 * v20 < v31)
            {
              v372 = std::generic_category();
              __p = 0;
              v388 = 0;
              v389 = 0;
              v394 = 0;
              v398 = 0;
              v399 = 0;
              v400 = 1;
              v396 = 0;
              v397 = 0;
              v395 = 0;
              v393 = (const char *)&unk_1E0E22B10;
              p_p = &__p;
              llvm::raw_ostream::SetBufferAndMode((uint64_t)&v393, 0, 0, 0);
              v402 = &unk_1E0E20320;
              v403 = "Unexpected end of file reading %u of %u bits";
              LODWORD(v404) = *v11;
              HIDWORD(v404) = v31;
LABEL_218:
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v393, (uint64_t)&v402);
              v373 = p_p;
              v14 = operator new(0x38uLL);
              v406 = 260;
              v402 = v373;
              llvm::StringError::StringError((uint64_t)v14, (llvm::Twine *)&v402, 5, (uint64_t)v372);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v393);
              if (SHIBYTE(v389) < 0)
                operator delete(__p);
LABEL_220:
              *v379 = (uint64_t)v14;
              goto LABEL_221;
            }
            *v13 = (int8x8_t)(v24 >> v31);
            *v11 = v32;
            v33 = (v24 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v31)) << v15;
            v26 = v33 | *(_QWORD *)&v17;
            if ((v33 | v17.i32[0]) == 1)
              goto LABEL_26;
LABEL_35:
            if ((_DWORD)v26 != 2)
            {
              if ((_DWORD)v26)
              {
                v34 = (v26 << 32) | 3;
              }
              else if (*((_DWORD *)v10 + 18))
              {
                if (*v11 < 0x20)
                {
                  v347 = 0;
                }
                else
                {
                  *v13 = (int8x8_t)(*(unint64_t *)v13 >> (*(_BYTE *)v11 - 32));
                  v347 = 32;
                }
                *((_DWORD *)v10 + 8) = v347;
                llvm::BitstreamCursor::popBlockScope((llvm::BitstreamCursor *)v10);
                v34 = 1;
              }
              else
              {
LABEL_165:
                v34 = 0;
              }
              v378 = (void *)HIDWORD(v34);
              *a4 = 0;
              v377 = v34;
              goto LABEL_172;
            }
            llvm::BitstreamCursor::ReadAbbrevRecord((char **)v10, (unint64_t *)&v393);
            v14 = (void *)v393;
            if (v393)
              goto LABEL_220;
          }
          v16 = *((_DWORD *)v10 + 9);
          v17 = (int8x8_t)v10[3];
          if (v15 < v16)
          {
            v19 = v10[1];
            v18 = v10[2];
            v20 = v19 - v18;
            if (v19 <= v18)
              goto LABEL_216;
            goto LABEL_13;
          }
LABEL_25:
          v26 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v16) & *(_QWORD *)&v17;
          *v13 = (int8x8_t)(*(_QWORD *)&v17 >> v16);
          *v11 = v15 - v16;
          if ((_DWORD)v26 != 1)
            goto LABEL_35;
LABEL_26:
          llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)v10, 8u, (uint64_t)&v393);
          if ((v394 & 1) != 0)
          {
            v65 = (void *)v393;
            goto LABEL_167;
          }
          v35 = *v11;
          if (*v11 >= 4)
          {
            v49 = *(_QWORD *)v13 & 0xFLL;
            *v13 = (int8x8_t)(*(unint64_t *)v13 >> 4);
            *v11 = v35 - 4;
            if ((v49 & 8) != 0)
              goto LABEL_92;
            goto LABEL_51;
          }
          if (v35)
          {
            v36 = *v13;
            v37 = 4 - v35;
            v386 = 4 - v35;
            v39 = v10[1];
            v38 = v10[2];
            v40 = v39 - v38;
            if (v39 <= v38)
              goto LABEL_64;
          }
          else
          {
            v36.i8[0] = 0;
            v37 = 4;
            v386 = 4;
            v39 = v10[1];
            v38 = v10[2];
            v40 = v39 - v38;
            if (v39 <= v38)
            {
LABEL_64:
              v63 = std::generic_category();
              __p = 0;
              v388 = 0;
              v389 = 0;
              v394 = 0;
              v398 = 0;
              v399 = 0;
              v400 = 1;
              v396 = 0;
              v397 = 0;
              v395 = 0;
              v393 = (const char *)&unk_1E0E22B10;
              p_p = &__p;
              llvm::raw_ostream::SetBufferAndMode((uint64_t)&v393, 0, 0, 0);
              v403 = "Unexpected end of file reading %u of %u bytes";
              v402 = &unk_1E0E203C0;
              v404 = *v12;
              v405 = v39;
LABEL_65:
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v393, (uint64_t)&v402);
              v64 = p_p;
              v65 = operator new(0x38uLL);
              v406 = 260;
              v402 = v64;
              llvm::StringError::StringError((uint64_t)v65, (llvm::Twine *)&v402, 5, (uint64_t)v63);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v393);
              if (SHIBYTE(v389) < 0)
                operator delete(__p);
              v6 = *(_QWORD *)v380;
              goto LABEL_68;
            }
          }
          v41 = *v10;
          v42 = (unsigned int *)(*v10 + v38);
          if (v39 >= v38 + 8)
          {
            v44 = *(_QWORD *)v42;
            *v13 = (int8x8_t)v44;
            v40 = 8;
            goto LABEL_88;
          }
          *v13 = 0;
          if (!v40)
          {
            v44 = 0;
            goto LABEL_88;
          }
          if (v40 < 8uLL || (unint64_t)v13 < v41 + v38 + v40 && v42 < v11)
          {
            v43 = 0;
            v44 = 0;
LABEL_47:
            v45 = v40 - v43;
            v46 = 8 * v43;
            v47 = (unsigned __int8 *)(v41 + v43 + v38);
            do
            {
              v48 = *v47++;
              MetadataFwdRef = v46 & 0xFFFFFFF8;
              v44 |= (unint64_t)v48 << (v46 & 0xF8);
              *v13 = (int8x8_t)v44;
              v46 += 8;
              --v45;
            }
            while (v45);
            goto LABEL_88;
          }
          if (v40 >= 0x10uLL)
          {
            v43 = v40 - (unint64_t)(v40 & 0xF);
            v216 = (int64x2_t)xmmword_181267BD0;
            v217 = (int64x2_t)xmmword_1812332B0;
            v218 = (int64x2_t)xmmword_181267BE0;
            v219 = (int64x2_t)xmmword_181233290;
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = (int64x2_t)xmmword_181233120;
            MetadataFwdRef = v43;
            v223 = (int64x2_t)xmmword_181267BC0;
            v224 = (int64x2_t)xmmword_181267BB0;
            v225 = (int64x2_t)xmmword_181267BA0;
            v226 = 0uLL;
            v227 = 0uLL;
            v228 = 0uLL;
            v229 = 0uLL;
            v230 = 0uLL;
            v231 = 0uLL;
            do
            {
              v232 = *(uint8x16_t *)v42;
              v42 += 4;
              v233 = vmovl_u8(*(uint8x8_t *)v232.i8);
              v234 = vmovl_high_u8(v232);
              v235 = vmovl_u16(*(uint16x4_t *)v234.i8);
              v236 = vmovl_high_u16(v234);
              v237 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
              v238 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v217, 3uLL), v237);
              v239 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v216, 3uLL), v237);
              v240 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v218, 3uLL), v237);
              v241 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v219, 3uLL), v237);
              v242 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v223, 3uLL), v237);
              v243 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v222, 3uLL), v237);
              v244 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v224, 3uLL), v237);
              v245.i64[0] = v236.u32[2];
              v245.i64[1] = v236.u32[3];
              v246 = (int8x16_t)vshlq_u64(v245, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v225, 3uLL), v237));
              v247 = vmovl_u16(*(uint16x4_t *)v233.i8);
              v245.i64[0] = v236.u32[0];
              v245.i64[1] = v236.u32[1];
              v248 = (int8x16_t)vshlq_u64(v245, v244);
              v245.i64[0] = v247.u32[0];
              v245.i64[1] = v247.u32[1];
              v249 = (int8x16_t)vshlq_u64(v245, v243);
              v245.i64[0] = v235.u32[2];
              v245.i64[1] = v235.u32[3];
              v250 = (int8x16_t)vshlq_u64(v245, v242);
              v251 = vmovl_high_u16(v233);
              v245.i64[0] = v247.u32[2];
              v245.i64[1] = v247.u32[3];
              v252 = (int8x16_t)vshlq_u64(v245, v241);
              v245.i64[0] = v251.u32[0];
              v245.i64[1] = v251.u32[1];
              v253 = (int8x16_t)vshlq_u64(v245, v240);
              v245.i64[0] = v235.u32[0];
              v245.i64[1] = v235.u32[1];
              v254 = (int8x16_t)vshlq_u64(v245, v239);
              v245.i64[0] = v251.u32[2];
              v245.i64[1] = v251.u32[3];
              v227 = vorrq_s8((int8x16_t)vshlq_u64(v245, v238), v227);
              v228 = vorrq_s8(v254, v228);
              v226 = vorrq_s8(v253, v226);
              v221 = vorrq_s8(v252, v221);
              v229 = vorrq_s8(v250, v229);
              v220 = vorrq_s8(v249, v220);
              v230 = vorrq_s8(v248, v230);
              v231 = vorrq_s8(v246, v231);
              v255 = vdupq_n_s64(0x10uLL);
              v218 = vaddq_s64(v218, v255);
              v219 = vaddq_s64(v219, v255);
              v222 = vaddq_s64(v222, v255);
              v217 = vaddq_s64(v217, v255);
              v216 = vaddq_s64(v216, v255);
              v223 = vaddq_s64(v223, v255);
              v224 = vaddq_s64(v224, v255);
              v225 = vaddq_s64(v225, v255);
              MetadataFwdRef -= 16;
            }
            while (MetadataFwdRef);
            v256 = vorrq_s8(vorrq_s8(vorrq_s8(v220, v228), vorrq_s8(v226, v230)), vorrq_s8(vorrq_s8(v221, v229), vorrq_s8(v227, v231)));
            *(int8x8_t *)v256.i8 = vorr_s8(*(int8x8_t *)v256.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL));
            *v13 = *(int8x8_t *)v256.i8;
            v44 = v256.i64[0];
            if ((v40 & 0xF) == 0)
              goto LABEL_88;
            if ((v40 & 0xF) < 8uLL)
              goto LABEL_47;
          }
          else
          {
            v44 = 0;
            v43 = 0;
          }
          v257 = vdupq_n_s64(v43);
          v258 = vaddq_s64(v257, (int64x2_t)xmmword_1812332B0);
          v259 = (int8x16_t)v44;
          v260 = v43 + v38;
          v261 = v43 + (v40 & 7);
          v43 = v40 - (unint64_t)(v40 & 7);
          v262 = vaddq_s64(v257, (int64x2_t)xmmword_181267BE0);
          v263 = vaddq_s64(v257, (int64x2_t)xmmword_181233290);
          v264 = vaddq_s64(v257, (int64x2_t)xmmword_181233120);
          v265 = 0uLL;
          v266 = (uint8x8_t *)(v41 + v260);
          MetadataFwdRef = v261 - v40;
          v267 = 0uLL;
          v268 = 0uLL;
          do
          {
            v269 = *v266++;
            v270 = vmovl_u8(v269);
            v271 = vmovl_high_u16(v270);
            v272.i64[0] = v271.u32[2];
            v272.i64[1] = v271.u32[3];
            v273 = v272;
            v272.i64[0] = v271.u32[0];
            v272.i64[1] = v271.u32[1];
            v274 = v272;
            v275 = vmovl_u16(*(uint16x4_t *)v270.i8);
            v272.i64[0] = v275.u32[2];
            v272.i64[1] = v275.u32[3];
            v276 = v272;
            v272.i64[0] = v275.u32[0];
            v272.i64[1] = v275.u32[1];
            v268 = vorrq_s8((int8x16_t)vshlq_u64(v273, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v258, 3uLL), v381)), v268);
            v267 = vorrq_s8((int8x16_t)vshlq_u64(v274, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v262, 3uLL), v381)), v267);
            v265 = vorrq_s8((int8x16_t)vshlq_u64(v276, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v263, 3uLL), v381)), v265);
            v277 = vdupq_n_s64(8uLL);
            v259 = vorrq_s8((int8x16_t)vshlq_u64(v272, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v264, 3uLL), v381)), v259);
            v262 = vaddq_s64(v262, v277);
            v263 = vaddq_s64(v263, v277);
            v264 = vaddq_s64(v264, v277);
            v258 = vaddq_s64(v258, v277);
            MetadataFwdRef += 8;
          }
          while (MetadataFwdRef);
          v278 = vorrq_s8(vorrq_s8(v259, v267), vorrq_s8(v265, v268));
          *(int8x8_t *)v278.i8 = vorr_s8(*(int8x8_t *)v278.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v278, v278, 8uLL));
          *v13 = *(int8x8_t *)v278.i8;
          v44 = v278.i64[0];
          if ((v40 & 7) != 0)
            goto LABEL_47;
LABEL_88:
          *v12 = v38 + v40;
          *v11 = 8 * v40;
          if (8 * v40 >= v37)
            break;
          llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)v10 + 8, (int *)&v386, (uint64_t *)&v385);
          v65 = v385;
          if (v385)
            goto LABEL_167;
        }
        *v13 = (int8x8_t)(v44 >> v37);
        *v11 = 8 * v40 - v37;
        if (((_DWORD)v44 << v35) & 8 | v36.i8[0] & 8)
          break;
LABEL_51:
        if (*v11 >= 0x20)
        {
          v50 = *(unint64_t *)v13 >> (*(_BYTE *)v11 - 32);
          *v13 = (int8x8_t)HIDWORD(v50);
          *v11 = 0;
          goto LABEL_74;
        }
        *((_DWORD *)v10 + 8) = 0;
        LODWORD(v385) = 32;
        v52 = v10[1];
        v51 = v10[2];
        v53 = v52 - v51;
        if (v52 <= v51)
        {
          v393 = (const char *)v10[1];
          llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v10 + 2, (uint64_t *)&v393, (uint64_t *)&v402);
          v65 = v402;
          if (!v402)
          {
            v66 = *v11;
            if (*v11 <= 0x1F)
              goto LABEL_86;
            goto LABEL_73;
          }
LABEL_68:
          if (v65)
            goto LABEL_167;
        }
        else
        {
          v54 = *v10;
          v55 = (unsigned int *)(*v10 + v51);
          if (v52 >= v51 + 8)
          {
            *v13 = *(int8x8_t *)v55;
            v53 = 8;
            goto LABEL_85;
          }
          *v13 = 0;
          if (!v53)
            goto LABEL_85;
          v56 = (v52 - v51);
          if (v53 < 8uLL || (unint64_t)v13 < v54 + v51 + v56 && v55 < v11)
          {
            v57 = 0;
            v58 = 0;
            goto LABEL_60;
          }
          if (v56 >= 0x10)
          {
            v57 = v56 - (v53 & 0xF);
            v279 = (int64x2_t)xmmword_181267BA0;
            v280 = (int64x2_t)xmmword_181267BB0;
            v281 = (int64x2_t)xmmword_181267BC0;
            v282 = (int64x2_t)xmmword_181267BD0;
            v283 = (int64x2_t)xmmword_1812332B0;
            v284 = (int64x2_t)xmmword_181267BE0;
            v285 = 0uLL;
            v286 = v57;
            v287 = 0uLL;
            v288 = 0uLL;
            v289 = 0uLL;
            v290 = 0uLL;
            v291 = 0uLL;
            v292 = (int64x2_t)xmmword_181233290;
            v293 = 0uLL;
            v294 = 0uLL;
            v295 = (int64x2_t)xmmword_181233120;
            do
            {
              v296 = *(uint8x16_t *)v55;
              v55 += 4;
              v297 = vmovl_u8(*(uint8x8_t *)v296.i8);
              v298 = vmovl_high_u8(v296);
              v299 = vmovl_u16(*(uint16x4_t *)v298.i8);
              v300 = vmovl_high_u16(v298);
              v301 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
              v302 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v283, 3uLL), v301);
              v303 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v282, 3uLL), v301);
              v304 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v284, 3uLL), v301);
              v305 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v292, 3uLL), v301);
              v306 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v281, 3uLL), v301);
              v307 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v295, 3uLL), v301);
              v308 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v280, 3uLL), v301);
              v309.i64[0] = v300.u32[2];
              v309.i64[1] = v300.u32[3];
              v310 = (int8x16_t)vshlq_u64(v309, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v279, 3uLL), v301));
              v311 = vmovl_u16(*(uint16x4_t *)v297.i8);
              v309.i64[0] = v300.u32[0];
              v309.i64[1] = v300.u32[1];
              v312 = (int8x16_t)vshlq_u64(v309, v308);
              v309.i64[0] = v311.u32[0];
              v309.i64[1] = v311.u32[1];
              v313 = (int8x16_t)vshlq_u64(v309, v307);
              v309.i64[0] = v299.u32[2];
              v309.i64[1] = v299.u32[3];
              v314 = (int8x16_t)vshlq_u64(v309, v306);
              v315 = vmovl_high_u16(v297);
              v309.i64[0] = v311.u32[2];
              v309.i64[1] = v311.u32[3];
              v316 = (int8x16_t)vshlq_u64(v309, v305);
              v309.i64[0] = v315.u32[0];
              v309.i64[1] = v315.u32[1];
              v317 = (int8x16_t)vshlq_u64(v309, v304);
              v309.i64[0] = v299.u32[0];
              v309.i64[1] = v299.u32[1];
              v318 = (int8x16_t)vshlq_u64(v309, v303);
              v309.i64[0] = v315.u32[2];
              v309.i64[1] = v315.u32[3];
              v289 = vorrq_s8((int8x16_t)vshlq_u64(v309, v302), v289);
              v290 = vorrq_s8(v318, v290);
              v288 = vorrq_s8(v317, v288);
              v287 = vorrq_s8(v316, v287);
              v291 = vorrq_s8(v314, v291);
              v285 = vorrq_s8(v313, v285);
              v293 = vorrq_s8(v312, v293);
              v294 = vorrq_s8(v310, v294);
              v319 = vdupq_n_s64(0x10uLL);
              v284 = vaddq_s64(v284, v319);
              v292 = vaddq_s64(v292, v319);
              v295 = vaddq_s64(v295, v319);
              v283 = vaddq_s64(v283, v319);
              v282 = vaddq_s64(v282, v319);
              v281 = vaddq_s64(v281, v319);
              v280 = vaddq_s64(v280, v319);
              v279 = vaddq_s64(v279, v319);
              v286 -= 16;
            }
            while (v286);
            v320 = vorrq_s8(vorrq_s8(vorrq_s8(v285, v290), vorrq_s8(v288, v293)), vorrq_s8(vorrq_s8(v287, v291), vorrq_s8(v289, v294)));
            v321 = vorr_s8(*(int8x8_t *)v320.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v320, v320, 8uLL));
            *v13 = v321;
            if ((v53 & 0xF) == 0)
              goto LABEL_85;
            v58 = v321;
            if ((v53 & 0xF) < 8uLL)
              goto LABEL_60;
          }
          else
          {
            v58 = 0;
            v57 = 0;
          }
          v322 = vdupq_n_s64(v57);
          v323 = vaddq_s64(v322, (int64x2_t)xmmword_1812332B0);
          v324 = (int8x16_t)(unint64_t)v58;
          v325 = v57 + v51;
          v326 = v57 + (v53 & 7);
          v57 = v56 - (v53 & 7);
          v327 = vaddq_s64(v322, (int64x2_t)xmmword_181267BE0);
          v328 = vaddq_s64(v322, (int64x2_t)xmmword_181233290);
          v329 = vaddq_s64(v322, (int64x2_t)xmmword_181233120);
          v330 = 0uLL;
          v331 = (uint8x8_t *)(v54 + v325);
          v332 = v326 - v56;
          v333 = 0uLL;
          v334 = 0uLL;
          do
          {
            v335 = *v331++;
            v336 = vmovl_u8(v335);
            v337 = vmovl_high_u16(v336);
            v338.i64[0] = v337.u32[2];
            v338.i64[1] = v337.u32[3];
            v339 = v338;
            v338.i64[0] = v337.u32[0];
            v338.i64[1] = v337.u32[1];
            v340 = v338;
            v341 = vmovl_u16(*(uint16x4_t *)v336.i8);
            v338.i64[0] = v341.u32[2];
            v338.i64[1] = v341.u32[3];
            v342 = v338;
            v338.i64[0] = v341.u32[0];
            v338.i64[1] = v341.u32[1];
            v343 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
            v334 = vorrq_s8((int8x16_t)vshlq_u64(v339, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v323, 3uLL), v343)), v334);
            v333 = vorrq_s8((int8x16_t)vshlq_u64(v340, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v327, 3uLL), v343)), v333);
            v330 = vorrq_s8((int8x16_t)vshlq_u64(v342, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v328, 3uLL), v343)), v330);
            v344 = vdupq_n_s64(8uLL);
            v324 = vorrq_s8((int8x16_t)vshlq_u64(v338, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v329, 3uLL), v343)), v324);
            v327 = vaddq_s64(v327, v344);
            v328 = vaddq_s64(v328, v344);
            v329 = vaddq_s64(v329, v344);
            v323 = vaddq_s64(v323, v344);
            v332 += 8;
          }
          while (v332);
          v345 = vorrq_s8(vorrq_s8(v324, v333), vorrq_s8(v330, v334));
          v346 = vorr_s8(*(int8x8_t *)v345.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v345, v345, 8uLL));
          *v13 = v346;
          if ((v53 & 7) != 0)
          {
            v58 = v346;
LABEL_60:
            v59 = v56 - v57;
            v60 = 8 * v57;
            v61 = (unsigned __int8 *)(v54 + v57 + v51);
            do
            {
              v62 = *v61++;
              *(_QWORD *)&v58 |= (unint64_t)v62 << (v60 & 0xF8);
              *v13 = v58;
              v60 += 8;
              --v59;
            }
            while (v59);
          }
LABEL_85:
          *v12 = v51 + v53;
          v66 = 8 * v53;
          *v11 = v66;
          if (v66 <= 0x1F)
          {
LABEL_86:
            llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)v10 + 8, (int *)&v385, (uint64_t *)&__p);
            v65 = __p;
            goto LABEL_68;
          }
LABEL_73:
          v50 = (unint64_t)*v13;
          *v13 = (int8x8_t)HIDWORD(*(unint64_t *)v13);
          *v11 = v66 - 32;
LABEL_74:
          v68 = v10[1];
          v67 = v10[2];
          v69 = *((unsigned int *)v10 + 8);
          v70 = 8 * v67 - v69 + 32 * v50;
          v402 = (void *)v70;
          if ((_DWORD)v69 || v68 > v67)
          {
            if (v68 >= v70 >> 3)
            {
              *v12 = (v70 >> 3) & 0x1FFFFFFFFFFFFFF8;
              *v11 = 0;
              if ((v70 & 0x3F) != 0)
              {
                llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)v10, v70 & 0x3F, (uint64_t)&v393);
                if ((v394 & 1) != 0)
                {
                  v383 = v393;
                  if (v393)
                  {
                    v65 = (void *)v383;
                    goto LABEL_167;
                  }
                }
              }
              v383 = 0;
            }
            else
            {
              v393 = (const char *)(8 * v67 - v69);
              llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v402, (uint64_t *)&v393, (uint64_t *)&v383);
              v65 = (void *)v383;
              if (v383)
                goto LABEL_167;
            }
          }
          else
          {
            *(_QWORD *)&v408.__val_ = std::generic_category();
            v408.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
            llvm::createStringError((llvm *)0x5C, v408, &v383);
            v65 = (void *)v383;
            if (v383)
              goto LABEL_167;
          }
        }
      }
LABEL_92:
      v71 = 0;
      v72 = *v11;
      while (v71 < 0x1D)
      {
        if (v72 >= 4)
        {
          v73 = *(_QWORD *)v13 & 0xFLL;
          *v13 = (int8x8_t)(*(unint64_t *)v13 >> 4);
          *v11 = v72 - 4;
          v72 -= 4;
          v71 += 3;
          if ((v73 & 8) == 0)
            goto LABEL_51;
        }
        else
        {
          if (v72)
          {
            v74 = *v13;
            v39 = v10[1];
            v75 = v10[2];
            v76 = v39 - v75;
            if (v39 <= v75)
              goto LABEL_64;
          }
          else
          {
            v74 = 0;
            v39 = v10[1];
            v75 = v10[2];
            v76 = v39 - v75;
            if (v39 <= v75)
              goto LABEL_64;
          }
          v77 = *v10;
          v78 = (unsigned int *)(*v10 + v75);
          if (v39 >= v75 + 8)
          {
            v80 = *(_QWORD *)v78;
            *v13 = (int8x8_t)v80;
            v76 = 8;
            goto LABEL_116;
          }
          *v13 = 0;
          if (!v76)
          {
            v80 = 0;
            goto LABEL_116;
          }
          if (v76 < 8uLL || ((unint64_t)v13 < v77 + v75 + v76 ? (v79 = v78 >= v11) : (v79 = 1), !v79))
          {
            v81 = 0;
            v80 = 0;
LABEL_112:
            v82 = v76 - v81;
            v83 = 8 * v81;
            v84 = (unsigned __int8 *)(v77 + v81 + v75);
            do
            {
              v85 = *v84++;
              MetadataFwdRef = v83 & 0xFFFFFFF8;
              v80 |= (unint64_t)v85 << (v83 & 0xF8);
              *v13 = (int8x8_t)v80;
              v83 += 8;
              --v82;
            }
            while (v82);
            goto LABEL_116;
          }
          if (v76 >= 0x10uLL)
          {
            v81 = v76 - (unint64_t)(v76 & 0xF);
            v88 = (int64x2_t)xmmword_181267BA0;
            v89 = (int64x2_t)xmmword_181267BB0;
            v90 = (int64x2_t)xmmword_181267BC0;
            v91 = (int64x2_t)xmmword_181267BD0;
            v92 = (int64x2_t)xmmword_1812332B0;
            v93 = (int64x2_t)xmmword_181267BE0;
            v94 = 0uLL;
            MetadataFwdRef = v81;
            v95 = 0uLL;
            v96 = 0uLL;
            v97 = 0uLL;
            v98 = 0uLL;
            v99 = 0uLL;
            v100 = (int64x2_t)xmmword_181233290;
            v101 = 0uLL;
            v102 = 0uLL;
            v103 = (int64x2_t)xmmword_181233120;
            do
            {
              v104 = *(uint8x16_t *)v78;
              v78 += 4;
              v105 = vmovl_u8(*(uint8x8_t *)v104.i8);
              v106 = vmovl_high_u8(v104);
              v107 = vmovl_u16(*(uint16x4_t *)v106.i8);
              v108 = vmovl_high_u16(v106);
              v109 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
              v110 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v92, 3uLL), v109);
              v111 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v91, 3uLL), v109);
              v112 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v93, 3uLL), v109);
              v113 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v100, 3uLL), v109);
              v114 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v90, 3uLL), v109);
              v115 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v103, 3uLL), v109);
              v116 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v89, 3uLL), v109);
              v117.i64[0] = v108.u32[2];
              v117.i64[1] = v108.u32[3];
              v118 = (int8x16_t)vshlq_u64(v117, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v88, 3uLL), v109));
              v119 = vmovl_u16(*(uint16x4_t *)v105.i8);
              v117.i64[0] = v108.u32[0];
              v117.i64[1] = v108.u32[1];
              v120 = (int8x16_t)vshlq_u64(v117, v116);
              v117.i64[0] = v119.u32[0];
              v117.i64[1] = v119.u32[1];
              v121 = (int8x16_t)vshlq_u64(v117, v115);
              v117.i64[0] = v107.u32[2];
              v117.i64[1] = v107.u32[3];
              v122 = (int8x16_t)vshlq_u64(v117, v114);
              v123 = vmovl_high_u16(v105);
              v117.i64[0] = v119.u32[2];
              v117.i64[1] = v119.u32[3];
              v124 = (int8x16_t)vshlq_u64(v117, v113);
              v117.i64[0] = v123.u32[0];
              v117.i64[1] = v123.u32[1];
              v125 = (int8x16_t)vshlq_u64(v117, v112);
              v117.i64[0] = v107.u32[0];
              v117.i64[1] = v107.u32[1];
              v126 = (int8x16_t)vshlq_u64(v117, v111);
              v117.i64[0] = v123.u32[2];
              v117.i64[1] = v123.u32[3];
              v97 = vorrq_s8((int8x16_t)vshlq_u64(v117, v110), v97);
              v98 = vorrq_s8(v126, v98);
              v96 = vorrq_s8(v125, v96);
              v95 = vorrq_s8(v124, v95);
              v99 = vorrq_s8(v122, v99);
              v94 = vorrq_s8(v121, v94);
              v101 = vorrq_s8(v120, v101);
              v102 = vorrq_s8(v118, v102);
              v127 = vdupq_n_s64(0x10uLL);
              v93 = vaddq_s64(v93, v127);
              v100 = vaddq_s64(v100, v127);
              v103 = vaddq_s64(v103, v127);
              v92 = vaddq_s64(v92, v127);
              v91 = vaddq_s64(v91, v127);
              v90 = vaddq_s64(v90, v127);
              v89 = vaddq_s64(v89, v127);
              v88 = vaddq_s64(v88, v127);
              MetadataFwdRef -= 16;
            }
            while (MetadataFwdRef);
            v128 = vorrq_s8(vorrq_s8(vorrq_s8(v94, v98), vorrq_s8(v96, v101)), vorrq_s8(vorrq_s8(v95, v99), vorrq_s8(v97, v102)));
            *(int8x8_t *)v128.i8 = vorr_s8(*(int8x8_t *)v128.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL));
            *v13 = *(int8x8_t *)v128.i8;
            v80 = v128.i64[0];
            if ((v76 & 0xF) == 0)
              goto LABEL_116;
            if ((v76 & 0xF) < 8uLL)
              goto LABEL_112;
          }
          else
          {
            v80 = 0;
            v81 = 0;
          }
          v129 = vdupq_n_s64(v81);
          v130 = vaddq_s64(v129, (int64x2_t)xmmword_1812332B0);
          v131 = (int8x16_t)v80;
          v132 = v81 + v75;
          v133 = v81 + (v76 & 7);
          v81 = v76 - (unint64_t)(v76 & 7);
          v134 = vaddq_s64(v129, (int64x2_t)xmmword_181267BE0);
          v135 = vaddq_s64(v129, (int64x2_t)xmmword_181233290);
          v136 = vaddq_s64(v129, (int64x2_t)xmmword_181233120);
          v137 = 0uLL;
          v138 = (uint8x8_t *)(v77 + v132);
          MetadataFwdRef = v133 - v76;
          v139 = 0uLL;
          v140 = 0uLL;
          do
          {
            v141 = *v138++;
            v142 = vmovl_u8(v141);
            v143 = vmovl_high_u16(v142);
            v144.i64[0] = v143.u32[2];
            v144.i64[1] = v143.u32[3];
            v145 = v144;
            v144.i64[0] = v143.u32[0];
            v144.i64[1] = v143.u32[1];
            v146 = v144;
            v147 = vmovl_u16(*(uint16x4_t *)v142.i8);
            v144.i64[0] = v147.u32[2];
            v144.i64[1] = v147.u32[3];
            v148 = v144;
            v144.i64[0] = v147.u32[0];
            v144.i64[1] = v147.u32[1];
            v149 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
            v140 = vorrq_s8((int8x16_t)vshlq_u64(v145, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v130, 3uLL), v149)), v140);
            v139 = vorrq_s8((int8x16_t)vshlq_u64(v146, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v134, 3uLL), v149)), v139);
            v137 = vorrq_s8((int8x16_t)vshlq_u64(v148, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v135, 3uLL), v149)), v137);
            v150 = vdupq_n_s64(8uLL);
            v131 = vorrq_s8((int8x16_t)vshlq_u64(v144, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v136, 3uLL), v149)), v131);
            v134 = vaddq_s64(v134, v150);
            v135 = vaddq_s64(v135, v150);
            v136 = vaddq_s64(v136, v150);
            v130 = vaddq_s64(v130, v150);
            MetadataFwdRef += 8;
          }
          while (MetadataFwdRef);
          v151 = vorrq_s8(vorrq_s8(v131, v139), vorrq_s8(v137, v140));
          *(int8x8_t *)v151.i8 = vorr_s8(*(int8x8_t *)v151.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL));
          *v13 = *(int8x8_t *)v151.i8;
          v80 = v151.i64[0];
          if ((v76 & 7) != 0)
            goto LABEL_112;
LABEL_116:
          v86 = 4 - v72;
          *v12 = v75 + v76;
          *v11 = 8 * v76;
          if (8 * v76 < 4 - v72)
          {
            v63 = std::generic_category();
            __p = 0;
            v388 = 0;
            v389 = 0;
            v394 = 0;
            v398 = 0;
            v399 = 0;
            v400 = 1;
            v396 = 0;
            v397 = 0;
            v395 = 0;
            v393 = (const char *)&unk_1E0E22B10;
            p_p = &__p;
            llvm::raw_ostream::SetBufferAndMode((uint64_t)&v393, 0, 0, 0);
            v402 = &unk_1E0E20320;
            v403 = "Unexpected end of file reading %u of %u bits";
            LODWORD(v404) = *v11;
            HIDWORD(v404) = v86;
            goto LABEL_65;
          }
          *v13 = (int8x8_t)(v80 >> v86);
          *v11 = 8 * v76 - (4 - v72);
          v87 = (v80 << v72) & 0xF | *(_QWORD *)&v74;
          v72 = 8 * v76 - (4 - v72);
          v71 += 3;
          if ((v87 & 8) == 0)
            goto LABEL_51;
        }
      }
      *(_QWORD *)&v409.__val_ = std::generic_category();
      v409.__cat_ = (const std::error_category *)"Unterminated VBR";
      llvm::createStringError((llvm *)0x5C, v409, &v384);
      v65 = v384;
      if (!v384)
        goto LABEL_6;
LABEL_167:
      *a4 = (uint64_t)v65;
      if (v65)
      {
LABEL_221:
        std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100]((uint64_t)v382);
        if (v390 != v392)
          free(v390);
        return;
      }
LABEL_172:
      switch(v377)
      {
        case 2:
          goto LABEL_224;
        case 1:
          llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders(v6, (llvm::MDNode *)v382, v9);
        case 0:
LABEL_224:
          v393 = "Malformed block";
          LOWORD(v397) = 259;
          v374 = llvm::BitcodeErrorCategory((llvm *)MetadataFwdRef);
          v375 = operator new(0x38uLL);
          *a4 = llvm::StringError::StringError((uint64_t)v375, (llvm::Twine *)&v393, 1, (uint64_t)v374);
          goto LABEL_221;
      }
      LODWORD(v391) = 0;
      llvm::BitstreamCursor::readRecord(*(llvm::SimpleBitstreamCursor **)(v6 + 200), (int)v378, (uint64_t)&v390, 0, (uint64_t)&v402);
      if ((v403 & 1) != 0)
      {
        v350 = (uint64_t)v402;
        v402 = 0;
        *a4 = v350;
        v349 = 1;
        goto LABEL_186;
      }
      if ((_DWORD)v402 != 11)
        goto LABEL_185;
      v348 = v391;
      if (!(_DWORD)v391)
      {
        v393 = "Invalid record";
        LOWORD(v397) = 259;
        v351 = llvm::BitcodeErrorCategory((llvm *)MetadataFwdRef);
        v352 = operator new(0x38uLL);
        v349 = 1;
        MetadataFwdRef = llvm::StringError::StringError((uint64_t)v352, (llvm::Twine *)&v393, 1, (uint64_t)v351);
        *a4 = MetadataFwdRef;
        goto LABEL_186;
      }
      v9 = v390;
      if ((v391 & 1) == 0)
      {
        MetadataFwdRef = (uint64_t)llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment((llvm::MDNode *)v6, a2, (uint64_t)v390, v391, (llvm::MDNode **)a4);
        if (*a4)
          v349 = 1;
        else
          v349 = 2;
        goto LABEL_186;
      }
      if ((_DWORD)v391 == 1)
        goto LABEL_185;
      v353 = *(unsigned __int8 ***)(v376 + 8 * *(_QWORD *)v390);
      v354 = 1;
      while (2)
      {
        v355 = *(_QWORD *)(v6 + 1016);
        v356 = *(unsigned int *)(v6 + 1032);
        if ((_DWORD)v356)
        {
          v357 = *((_QWORD *)v390 + v354);
          LODWORD(v358) = (v356 - 1) & (37 * v357);
          v359 = (int *)(v355 + 8 * v358);
          v360 = *v359;
          if (*v359 != (_DWORD)v357)
          {
            v361 = 1;
            while (v360 != -1)
            {
              v362 = v358 + v361++;
              v358 = v362 & (v356 - 1);
              v360 = *(_DWORD *)(v355 + 8 * v358);
              if (v360 == (_DWORD)v357)
              {
                v359 = (int *)(v355 + 8 * v358);
                goto LABEL_199;
              }
            }
            goto LABEL_198;
          }
        }
        else
        {
LABEL_198:
          v359 = (int *)(v355 + 8 * v356);
        }
LABEL_199:
        if (v359 == (int *)(v355 + 8 * v356))
        {
          v393 = "Invalid ID";
          LOWORD(v397) = 259;
          v368 = llvm::BitcodeErrorCategory((llvm *)MetadataFwdRef);
          v369 = operator new(0x38uLL);
          v349 = 1;
          MetadataFwdRef = llvm::StringError::StringError((uint64_t)v369, (llvm::Twine *)&v393, 1, (uint64_t)v368);
          *a4 = MetadataFwdRef;
          goto LABEL_186;
        }
        if (v359[1] == 1 && *(_BYTE *)(v6 + 1040))
          goto LABEL_191;
        v363 = *((_QWORD *)v390 + v354 + 1);
        if (v363 < ((uint64_t)(*(_QWORD *)(v6 + 704) - *(_QWORD *)(v6 + 696)) >> 3)
                  + ((uint64_t)(*(_QWORD *)(v6 + 680) - *(_QWORD *)(v6 + 672)) >> 4)
          && (*(_DWORD *)(v6 + 8) <= v363 || !*(_QWORD *)(*(_QWORD *)v6 + 8 * v363)))
        {
          llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(v6, *((_QWORD *)v390 + v354 + 1), (uint64_t)v382);
          llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders(v6, (llvm::MDNode *)v382, v364);
        }
        v365 = *(unsigned __int8 *)MetadataFwdRef;
        if ((v365 - 5) < 0x1F)
        {
          v366 = (llvm *)MetadataFwdRef;
          if (!*(_BYTE *)(v6 + 1041))
            goto LABEL_210;
          v367 = (llvm::MDNode *)v359[1];
          if ((_DWORD)v367 == 18)
          {
            v366 = llvm::upgradeInstructionLoopAttachment((llvm *)MetadataFwdRef, v367);
LABEL_210:
            v367 = (llvm::MDNode *)v359[1];
          }
          if ((_DWORD)v367 == 1)
          {
            v366 = llvm::UpgradeTBAANode(v366, v367);
            LODWORD(v367) = v359[1];
          }
          llvm::Instruction::setMetadata(v353, (int)v367, v366);
LABEL_191:
          v349 = 0;
          v354 += 2;
          if (v354 == v348)
            goto LABEL_186;
          continue;
        }
        break;
      }
      if (v365 != 2)
      {
        v393 = "Invalid metadata attachment";
        LOWORD(v397) = 259;
        v370 = llvm::BitcodeErrorCategory((llvm *)MetadataFwdRef);
        v371 = operator new(0x38uLL);
        v349 = 1;
        MetadataFwdRef = llvm::StringError::StringError((uint64_t)v371, (llvm::Twine *)&v393, 1, (uint64_t)v370);
        *a4 = MetadataFwdRef;
        goto LABEL_186;
      }
LABEL_185:
      v349 = 0;
LABEL_186:
      if ((v403 & 1) != 0)
      {
        MetadataFwdRef = (uint64_t)v402;
        v402 = 0;
        if (MetadataFwdRef)
          MetadataFwdRef = (*(uint64_t (**)(uint64_t))(*(_QWORD *)MetadataFwdRef + 8))(MetadataFwdRef);
      }
      if ((v349 | 2) != 2)
        goto LABEL_221;
    }
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;
  int8x16_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string v19;
  std::string *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  const char *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  void *v31[2];
  _QWORD v32[65];

  v32[64] = *MEMORY[0x1E0C80C00];
  v26 = a2;
  if (*(_DWORD *)(a1 + 8) > a2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    if (v5)
    {
      if ((*(_BYTE *)(v5 + 1) & 0x7F) != 2)
        return;
    }
  }
  v31[0] = v32;
  v31[1] = (void *)0x4000000000;
  v24 = 0;
  v25 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 696) + 8 * (a2 - ((uint64_t)(*(_QWORD *)(a1 + 680) - *(_QWORD *)(a1 + 672)) >> 4)));
  *(_QWORD *)(a1 + 344) = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a1 + 360) = 0;
  if ((v6 & 0x3F) != 0)
  {
    llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)(a1 + 328), v6 & 0x3F, (uint64_t)&v29);
    if ((v30 & 1) != 0)
    {
      if (v29)
      {
        v22[0] = (uint64_t)"lazyLoadOneMetadata failed jumping: ";
        v23 = 259;
        v18 = v29;
        v9 = &v18;
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)(a1 + 328), 0, (uint64_t)&v29);
    if ((v30 & 1) != 0)
    {
      v10 = v29;
LABEL_15:
      v22[0] = (uint64_t)"lazyLoadOneMetadata failed advanceSkippingSubblocks: ";
      v23 = 259;
      v17 = v10;
      v9 = &v17;
LABEL_27:
      llvm::toString((_QWORD **)v9, &v19, v7, v8);
      v21 = 260;
      v20 = &v19;
      llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)&v29);
      llvm::report_fatal_error((llvm::Twine *)&v29, 1);
    }
    if ((_DWORD)v29 != 2)
      break;
    llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)(a1 + 328), v22);
    v10 = v22[0];
    if ((v30 & 1) != 0)
    {
      v11 = v29;
      v29 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    if (v10)
      goto LABEL_15;
  }
  llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)(a1 + 328), SHIDWORD(v29), (uint64_t)v31, (unsigned __int8 **)&v24, (uint64_t)&v27);
  if ((v28 & 1) != 0)
  {
    v22[0] = (uint64_t)"Can't lazyload MD: ";
    v23 = 259;
    v13 = v27;
    v27 = 0;
    v14 = v13;
    v9 = &v14;
    goto LABEL_27;
  }
  llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata((llvm::Twine *)&v16, a1, (unsigned int *)v31, v27, a3, v24, v25, (uint64_t)&v26);
  if (v16)
  {
    v22[0] = (uint64_t)"Can't lazyload MD, parseOneMetadata: ";
    v23 = 259;
    v15 = v16;
    v16 = 0;
    v9 = &v15;
    goto LABEL_27;
  }
  if ((v28 & 1) != 0)
  {
    v12 = v27;
    v27 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (v31[0] != v32)
    free(v31[0]);
}

unsigned __int8 *`anonymous namespace'::BitcodeReaderMetadataList::getMetadataFwdRef(_anonymous_namespace_::BitcodeReaderMetadataList *this, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *Impl;
  int v9;
  char *v10;
  int v11;
  unsigned int v12;
  char *v13;
  int v14;
  unsigned __int8 **v15;
  char *v16;
  char *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;

  v21 = a2;
  if (*((_DWORD *)this + 46) <= a2)
    return 0;
  v4 = *((_DWORD *)this + 2);
  v5 = a2 + 1;
  if (v4 > a2 || v4 == (_DWORD)v5)
  {
    Impl = *(unsigned __int8 **)(*(_QWORD *)this + 8 * a2);
    if (Impl)
      return Impl;
  }
  else
  {
    if (*((_DWORD *)this + 3) <= a2)
    {
      llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::grow((uint64_t)this, a2 + 1);
      v4 = *((_DWORD *)this + 2);
    }
    if (v4 != (_DWORD)v5)
      bzero((void *)(*(_QWORD *)this + 8 * v4), 8 * (v5 - v4));
    *((_DWORD *)this + 2) = v5;
    Impl = *(unsigned __int8 **)(*(_QWORD *)this + 8 * a2);
    if (Impl)
      return Impl;
  }
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v10 = (char *)this + 32;
    v9 = 1;
  }
  else
  {
    v9 = *((_DWORD *)this + 10);
    if (!v9)
    {
      v16 = 0;
      goto LABEL_25;
    }
    v10 = (char *)*((_QWORD *)this + 4);
  }
  v11 = v9 - 1;
  v12 = v11 & (37 * a2);
  v13 = &v10[4 * v12];
  v14 = *(_DWORD *)v13;
  if (*(_DWORD *)v13 == a2)
    goto LABEL_20;
  v17 = 0;
  v18 = 1;
  while (v14 != -1)
  {
    if (v17)
      v19 = 0;
    else
      v19 = v14 == -2;
    if (v19)
      v17 = v13;
    v20 = v12 + v18++;
    v12 = v20 & v11;
    v13 = &v10[4 * v12];
    v14 = *(_DWORD *)v13;
    if (*(_DWORD *)v13 == a2)
      goto LABEL_20;
  }
  if (v17)
    v16 = v17;
  else
    v16 = v13;
LABEL_25:
  llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucket<unsigned int const&,llvm::detail::DenseSetEmpty&>((_DWORD *)this + 6, v16, &v21);
LABEL_20:
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(*((_QWORD *)this + 22), 0, 0, 2, 1);
  v15 = (unsigned __int8 **)(*(_QWORD *)this + 8 * v21);
  if (*v15)
    llvm::MetadataTracking::untrack((uint64_t)v15, *v15);
  *v15 = Impl;
  if (!Impl)
    return Impl;
  llvm::MetadataTracking::track((uint64_t)v15, Impl, 1);
  return Impl;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _UNKNOWN **v5;
  void *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  int8x16x4_t *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int8x16x4_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  llvm *MDKindID;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  _DWORD *v34;
  int v35;
  _UNKNOWN **v36;
  void *v37;
  void *v38;
  _DWORD *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  _DWORD *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  _DWORD *v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  _QWORD v54[4];
  __int16 v55;
  void *v56;
  __int128 v57;
  _QWORD v58[2];

  v58[1] = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  if (v4 <= 1)
  {
    v54[0] = "Invalid record";
    v55 = 259;
    v5 = llvm::BitcodeErrorCategory((llvm *)a1);
    v6 = operator new(0x38uLL);
    *a3 = llvm::StringError::StringError((uint64_t)v6, (llvm::Twine *)v54, 1, (uint64_t)v5);
    return;
  }
  v8 = *(_QWORD **)a2;
  v10 = (uint64_t *)(*(_QWORD *)a2 + 8);
  v9 = **(_QWORD **)a2;
  v56 = v58;
  v57 = xmmword_1812349A0;
  v11 = 8 * v4 - 8;
  v12 = v11 >> 3;
  if (v11 < 0x41)
  {
    v13 = 0;
    v14 = v58;
    v15 = (char *)v58;
    v16 = (v4 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v16 < 7)
      goto LABEL_23;
LABEL_7:
    if (v15 < (char *)&v8[v16 + 2] && v10 < (_QWORD *)((char *)v14 + v13 + v16 + 1))
      goto LABEL_23;
    v18 = v16 + 1;
    if (v16 >= 0x1F)
    {
      v19 = v18 & 0x3FFFFFFFFFFFFFE0;
      v20 = (int8x16x4_t *)(v8 + 17);
      v21 = (_OWORD *)((char *)v14 + v13 + 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFE0;
      do
      {
        *(_QWORD *)&v23 = vqtbl4q_s8(v20[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
        *(_QWORD *)&v24 = vqtbl4q_s8(*v20, (int8x16_t)xmmword_18125CFF0).u64[0];
        *((_QWORD *)&v23 + 1) = vqtbl4q_s8(v20[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
        *((_QWORD *)&v24 + 1) = vqtbl4q_s8(v20[1], (int8x16_t)xmmword_18125CFF0).u64[0];
        *(v21 - 1) = v23;
        *v21 = v24;
        v20 += 4;
        v21 += 2;
        v22 -= 32;
      }
      while (v22);
      if (v18 == v19)
        goto LABEL_24;
      if ((v18 & 0x18) == 0)
      {
        v10 += v19;
        v15 += v19;
        goto LABEL_23;
      }
    }
    else
    {
      v19 = 0;
    }
    v15 += v18 & 0x3FFFFFFFFFFFFFF8;
    v10 += v18 & 0x3FFFFFFFFFFFFFF8;
    v25 = (int8x16x4_t *)&v8[v19 + 1];
    v26 = (_QWORD *)((char *)v14 + v19 + v13);
    v27 = v19 - (v18 & 0x3FFFFFFFFFFFFFF8);
    do
    {
      *v26++ = vqtbl4q_s8(*v25++, (int8x16_t)xmmword_18125D000).u64[0];
      v27 += 8;
    }
    while (v27);
    if (v18 == (v18 & 0x3FFFFFFFFFFFFFF8))
      goto LABEL_24;
    goto LABEL_23;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v56, v58, v11 >> 3, 1);
  v14 = v56;
  v13 = v57;
  v15 = (char *)v56 + v57;
  v16 = (v4 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  if (v16 >= 7)
    goto LABEL_7;
  do
  {
LABEL_23:
    v28 = *v10++;
    *v15++ = v28;
  }
  while (v10 != &v8[v4]);
LABEL_24:
  *(_QWORD *)&v57 = v57 + v12;
  MDKindID = (llvm *)llvm::Module::getMDKindID(*(uint64_t ***)(a1 + 216), (int8x16_t *)v56, (const unsigned __int8 *)v57);
  v30 = (int)MDKindID;
  v31 = *(_DWORD *)(a1 + 1032);
  if (!v31)
    goto LABEL_48;
  v32 = *(_QWORD *)(a1 + 1016);
  v33 = (v31 - 1) & (37 * v9);
  v34 = (_DWORD *)(v32 + 8 * v33);
  v35 = *v34;
  if (*v34 == (_DWORD)v9)
  {
LABEL_26:
    v54[0] = "Conflicting METADATA_KIND records";
    v55 = 259;
    v36 = llvm::BitcodeErrorCategory(MDKindID);
    v37 = operator new(0x38uLL);
    *a3 = llvm::StringError::StringError((uint64_t)v37, (llvm::Twine *)v54, 1, (uint64_t)v36);
    v38 = v56;
    if (v56 == v58)
      return;
    goto LABEL_27;
  }
  v39 = 0;
  v40 = 1;
  while (v35 != -1)
  {
    if (v39)
      v41 = 0;
    else
      v41 = v35 == -2;
    if (v41)
      v39 = v34;
    v42 = v33 + v40++;
    v33 = v42 & (v31 - 1);
    v34 = (_DWORD *)(v32 + 8 * v33);
    v35 = *v34;
    if (*v34 == (_DWORD)v9)
      goto LABEL_26;
  }
  v43 = v39 ? v39 : v34;
  v44 = *(_DWORD *)(a1 + 1024);
  if (4 * v44 + 4 < 3 * v31)
  {
    if (v31 + ~v44 - *(_DWORD *)(a1 + 1028) > v31 >> 3)
      goto LABEL_31;
  }
  else
  {
LABEL_48:
    v31 *= 2;
  }
  llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(a1 + 1016, v31);
  v45 = *(_DWORD *)(a1 + 1032);
  if (v45)
  {
    v46 = *(_QWORD *)(a1 + 1016);
    v47 = v45 - 1;
    v48 = (v45 - 1) & (37 * v9);
    v43 = (_DWORD *)(v46 + 8 * v48);
    v49 = *v43;
    if (*v43 != (_DWORD)v9)
    {
      v50 = 0;
      v51 = 1;
      while (v49 != -1)
      {
        if (v50)
          v52 = 0;
        else
          v52 = v49 == -2;
        if (v52)
          v50 = v43;
        v53 = v48 + v51++;
        v48 = v53 & v47;
        v43 = (_DWORD *)(v46 + 8 * (v53 & v47));
        v49 = *v43;
        if (*v43 == (_DWORD)v9)
          goto LABEL_31;
      }
      if (v50)
        v43 = v50;
    }
  }
  else
  {
    v43 = 0;
  }
LABEL_31:
  ++*(_DWORD *)(a1 + 1024);
  if (*v43 != -1)
    --*(_DWORD *)(a1 + 1028);
  *v43 = v9;
  v43[1] = v30;
  *a3 = 0;
  v38 = v56;
  if (v56 != v58)
LABEL_27:
    free(v38);
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(llvm::BitstreamCursor **this@<X0>, uint64_t *a2@<X8>)
{
  int v2;
  llvm::MetadataLoader::MetadataLoaderImpl *v3;
  llvm *v5;
  uint64_t *v6;
  unsigned int *v7;
  unint64_t *v8;
  int8x8_t *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  int8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int8x8_t v30;
  unsigned int v31;
  unint64_t v32;
  const char *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unint64_t v37;
  int8x8_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  int8x8_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int8x8_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int8x16_t v71;
  unint64_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int64x2_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int64x2_t v81;
  uint8x16_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  int8x16_t v87;
  uint64x2_t v88;
  uint64x2_t v89;
  uint64x2_t v90;
  uint64x2_t v91;
  uint64x2_t v92;
  uint64x2_t v93;
  uint64x2_t v94;
  uint64x2_t v95;
  int8x16_t v96;
  uint32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  uint32x4_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int64x2_t v105;
  int8x16_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int8x16_t v109;
  uint64_t v110;
  unint64_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int8x16_t v115;
  uint8x8_t *v116;
  unint64_t v117;
  int8x16_t v118;
  int8x16_t v119;
  uint8x8_t v120;
  uint16x8_t v121;
  uint32x4_t v122;
  uint64x2_t v123;
  uint64x2_t v124;
  uint64x2_t v125;
  uint32x4_t v126;
  uint64x2_t v127;
  int8x16_t v128;
  int64x2_t v129;
  int8x16_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  const std::error_category *v135;
  void **v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  uint8x16_t v153;
  uint16x8_t v154;
  uint16x8_t v155;
  uint32x4_t v156;
  uint32x4_t v157;
  int8x16_t v158;
  uint64x2_t v159;
  uint64x2_t v160;
  uint64x2_t v161;
  uint64x2_t v162;
  uint64x2_t v163;
  uint64x2_t v164;
  uint64x2_t v165;
  uint64x2_t v166;
  int8x16_t v167;
  uint32x4_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  uint32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int64x2_t v176;
  int8x16_t v177;
  int64x2_t v178;
  int64x2_t v179;
  int8x16_t v180;
  uint64_t v181;
  unint64_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  int8x16_t v186;
  uint8x8_t *v187;
  int8x16_t v188;
  int8x16_t v189;
  uint8x8_t v190;
  uint16x8_t v191;
  uint32x4_t v192;
  uint64x2_t v193;
  uint64x2_t v194;
  uint64x2_t v195;
  uint32x4_t v196;
  uint64x2_t v197;
  int8x16_t v198;
  int64x2_t v199;
  int8x16_t v200;
  int64x2_t v201;
  int64x2_t v202;
  int64x2_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int64x2_t v206;
  unint64_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  uint8x16_t v218;
  uint16x8_t v219;
  uint16x8_t v220;
  uint32x4_t v221;
  uint32x4_t v222;
  int8x16_t v223;
  uint64x2_t v224;
  uint64x2_t v225;
  uint64x2_t v226;
  uint64x2_t v227;
  uint64x2_t v228;
  uint64x2_t v229;
  uint64x2_t v230;
  uint64x2_t v231;
  int8x16_t v232;
  uint32x4_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  uint32x4_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int64x2_t v241;
  int8x16_t v242;
  int8x8_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int8x16_t v246;
  unint64_t v247;
  unint64_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int8x16_t v252;
  uint8x8_t *v253;
  unint64_t v254;
  int8x16_t v255;
  int8x16_t v256;
  uint8x8_t v257;
  uint16x8_t v258;
  uint32x4_t v259;
  uint64x2_t v260;
  uint64x2_t v261;
  uint64x2_t v262;
  uint32x4_t v263;
  uint64x2_t v264;
  int64x2_t v265;
  int8x16_t v266;
  int8x8_t v267;
  const std::error_category *v268;
  void **v269;
  uint64_t *v270;
  int v271;
  const char *v272;
  uint64_t v273;
  _UNKNOWN **v274;
  void *v275;
  void *v276;
  int8x16_t v277;
  llvm::MetadataLoader::MetadataLoaderImpl *v278;
  uint64_t *v279;
  void *v280;
  int v281;
  const char *v282;
  void *v283;
  void *v284;
  unsigned int v285;
  void *__p;
  uint64_t v287;
  uint64_t v288;
  void *v289;
  const char *v290;
  unint64_t v291;
  unint64_t v292;
  __int16 v293;
  void *v294;
  uint64_t v295;
  _BYTE v296[512];
  const char *v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  uint64_t v303;
  int v304;
  void **p_p;
  uint64_t v306;
  std::error_code v307;
  std::error_code v308;

  v3 = (llvm::MetadataLoader::MetadataLoaderImpl *)this;
  v306 = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::EnterSubBlock(this[25], 0, 22, a2);
  if (*a2)
    return;
  v294 = v296;
  v295 = 0x4000000000;
  v277 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
  v279 = a2;
  v280 = &unk_1E0E203C0;
  v278 = v3;
  while (2)
  {
    v281 = v2;
    v6 = (uint64_t *)*((_QWORD *)v3 + 25);
    v7 = (unsigned int *)(v6 + 4);
    v8 = (unint64_t *)(v6 + 2);
    v9 = (int8x8_t *)(v6 + 3);
    while (1)
    {
      while (1)
      {
LABEL_7:
        while (1)
        {
          v11 = *v7;
          if (!*v7)
            break;
          v12 = *((_DWORD *)v6 + 9);
          v13 = (int8x8_t)v6[3];
          if (v11 < v12)
          {
            v15 = v6[1];
            v14 = v6[2];
            v12 -= v11;
            LODWORD(v283) = v12;
            v16 = v15 - v14;
            if (v15 <= v14)
              goto LABEL_138;
            goto LABEL_14;
          }
LABEL_26:
          v22 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v12) & *(_QWORD *)&v13;
          *v9 = (int8x8_t)(*(_QWORD *)&v13 >> v12);
          *v7 = v11 - v12;
          if ((_DWORD)v22 == 1)
            goto LABEL_27;
LABEL_36:
          if ((_DWORD)v22 != 2)
          {
            if ((_DWORD)v22)
            {
              v28 = (v22 << 32) | 3;
            }
            else if (*((_DWORD *)v6 + 18))
            {
              if (*v7 < 0x20)
              {
                v271 = 0;
              }
              else
              {
                *v9 = (int8x8_t)(*(unint64_t *)v9 >> (*(_BYTE *)v7 - 32));
                v271 = 32;
              }
              *((_DWORD *)v6 + 8) = v271;
              llvm::BitstreamCursor::popBlockScope((llvm::BitstreamCursor *)v6);
              v28 = 1;
            }
            else
            {
LABEL_148:
              v28 = 0;
            }
            v280 = (void *)HIDWORD(v28);
            v3 = v278;
            v270 = v279;
            *v279 = 0;
            v2 = v28;
            if ((_DWORD)v28 == 2)
              goto LABEL_161;
            goto LABEL_154;
          }
          llvm::BitstreamCursor::ReadAbbrevRecord((char **)v6, (unint64_t *)&v297);
LABEL_101:
          v10 = (void *)v297;
          if (v297)
            goto LABEL_142;
        }
        v15 = v6[1];
        v14 = v6[2];
        if (v15 <= v14)
          goto LABEL_148;
        v12 = *((_DWORD *)v6 + 9);
        if (!v12)
        {
          v13 = *v9;
          goto LABEL_26;
        }
        v13 = 0;
        LODWORD(v283) = *((_DWORD *)v6 + 9);
        v16 = v15 - v14;
        if (v15 <= v14)
        {
LABEL_138:
          v268 = std::generic_category();
          __p = 0;
          v287 = 0;
          v288 = 0;
          v298 = 0;
          v302 = 0;
          v303 = 0;
          v304 = 1;
          v300 = 0;
          v301 = 0;
          v299 = 0;
          v297 = (const char *)&unk_1E0E22B10;
          p_p = &__p;
          llvm::raw_ostream::SetBufferAndMode((uint64_t)&v297, 0, 0, 0);
          v289 = &unk_1E0E203C0;
          v290 = "Unexpected end of file reading %u of %u bytes";
          v291 = *v8;
          v292 = v15;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v297, (uint64_t)&v289);
          v269 = p_p;
          v10 = operator new(0x38uLL);
          v293 = 260;
          v289 = v269;
          llvm::StringError::StringError((uint64_t)v10, (llvm::Twine *)&v289, 5, (uint64_t)v268);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v297);
          if ((SHIBYTE(v288) & 0x80000000) == 0)
            goto LABEL_142;
          operator delete(__p);
          v3 = v278;
          v270 = v279;
          v2 = v281;
          *v279 = (uint64_t)v10;
          if (!v10)
            goto LABEL_143;
LABEL_164:
          v276 = v294;
          if (v294 != v296)
            goto LABEL_165;
          return;
        }
LABEL_14:
        v17 = *v6;
        v18 = (unsigned int *)(*v6 + v14);
        if (v15 >= v14 + 8)
        {
          v20 = *(_QWORD *)v18;
          *v9 = (int8x8_t)v20;
          v16 = 8;
          goto LABEL_34;
        }
        *v9 = 0;
        if (!v16)
        {
          v20 = 0;
          goto LABEL_34;
        }
        if (v16 < 8uLL || ((unint64_t)v9 < v17 + v14 + v16 ? (v19 = v18 >= v7) : (v19 = 1), !v19))
        {
          v21 = 0;
          v20 = 0;
LABEL_30:
          v23 = v16 - v21;
          v24 = 8 * v21;
          v25 = (unsigned __int8 *)(v17 + v21 + v14);
          do
          {
            v26 = *v25++;
            v5 = (llvm *)(v24 & 0xFFFFFFF8);
            v20 |= (unint64_t)v26 << (v24 & 0xF8);
            *v9 = (int8x8_t)v20;
            v24 += 8;
            --v23;
          }
          while (v23);
          goto LABEL_34;
        }
        if (v16 >= 0x10uLL)
        {
          v21 = v16 - (unint64_t)(v16 & 0xF);
          v137 = (int64x2_t)xmmword_181267BA0;
          v138 = (int64x2_t)xmmword_181267BB0;
          v139 = (int64x2_t)xmmword_181267BC0;
          v140 = 0uLL;
          v141 = 0uLL;
          v142 = (int64x2_t)xmmword_181267BD0;
          v5 = (llvm *)v21;
          v143 = (int64x2_t)xmmword_181233120;
          v144 = (int64x2_t)xmmword_181233290;
          v145 = (int64x2_t)xmmword_181267BE0;
          v146 = (int64x2_t)xmmword_1812332B0;
          v147 = 0uLL;
          v148 = 0uLL;
          v149 = 0uLL;
          v150 = 0uLL;
          v151 = 0uLL;
          v152 = 0uLL;
          do
          {
            v153 = *(uint8x16_t *)v18;
            v18 += 4;
            v154 = vmovl_u8(*(uint8x8_t *)v153.i8);
            v155 = vmovl_high_u8(v153);
            v156 = vmovl_u16(*(uint16x4_t *)v155.i8);
            v157 = vmovl_high_u16(v155);
            v158 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
            v159 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v146, 3uLL), v158);
            v160 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v142, 3uLL), v158);
            v161 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v145, 3uLL), v158);
            v162 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v144, 3uLL), v158);
            v163 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v139, 3uLL), v158);
            v164 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v143, 3uLL), v158);
            v165 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v138, 3uLL), v158);
            v166.i64[0] = v157.u32[2];
            v166.i64[1] = v157.u32[3];
            v167 = (int8x16_t)vshlq_u64(v166, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v137, 3uLL), v158));
            v168 = vmovl_u16(*(uint16x4_t *)v154.i8);
            v166.i64[0] = v157.u32[0];
            v166.i64[1] = v157.u32[1];
            v169 = (int8x16_t)vshlq_u64(v166, v165);
            v166.i64[0] = v168.u32[0];
            v166.i64[1] = v168.u32[1];
            v170 = (int8x16_t)vshlq_u64(v166, v164);
            v166.i64[0] = v156.u32[2];
            v166.i64[1] = v156.u32[3];
            v171 = (int8x16_t)vshlq_u64(v166, v163);
            v172 = vmovl_high_u16(v154);
            v166.i64[0] = v168.u32[2];
            v166.i64[1] = v168.u32[3];
            v173 = (int8x16_t)vshlq_u64(v166, v162);
            v166.i64[0] = v172.u32[0];
            v166.i64[1] = v172.u32[1];
            v174 = (int8x16_t)vshlq_u64(v166, v161);
            v166.i64[0] = v156.u32[0];
            v166.i64[1] = v156.u32[1];
            v175 = (int8x16_t)vshlq_u64(v166, v160);
            v166.i64[0] = v172.u32[2];
            v166.i64[1] = v172.u32[3];
            v148 = vorrq_s8((int8x16_t)vshlq_u64(v166, v159), v148);
            v149 = vorrq_s8(v175, v149);
            v147 = vorrq_s8(v174, v147);
            v141 = vorrq_s8(v173, v141);
            v150 = vorrq_s8(v171, v150);
            v140 = vorrq_s8(v170, v140);
            v151 = vorrq_s8(v169, v151);
            v152 = vorrq_s8(v167, v152);
            v176 = vdupq_n_s64(0x10uLL);
            v145 = vaddq_s64(v145, v176);
            v144 = vaddq_s64(v144, v176);
            v143 = vaddq_s64(v143, v176);
            v146 = vaddq_s64(v146, v176);
            v142 = vaddq_s64(v142, v176);
            v139 = vaddq_s64(v139, v176);
            v138 = vaddq_s64(v138, v176);
            v137 = vaddq_s64(v137, v176);
            v5 = (llvm *)((char *)v5 - 16);
          }
          while (v5);
          v177 = vorrq_s8(vorrq_s8(vorrq_s8(v140, v149), vorrq_s8(v147, v151)), vorrq_s8(vorrq_s8(v141, v150), vorrq_s8(v148, v152)));
          *(int8x8_t *)v177.i8 = vorr_s8(*(int8x8_t *)v177.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL));
          *v9 = *(int8x8_t *)v177.i8;
          v20 = v177.i64[0];
          if ((v16 & 0xF) == 0)
            goto LABEL_34;
          if ((v16 & 0xF) < 8uLL)
            goto LABEL_30;
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
        v178 = vdupq_n_s64(v21);
        v179 = vaddq_s64(v178, (int64x2_t)xmmword_1812332B0);
        v180 = (int8x16_t)v20;
        v181 = v14 + v21;
        v182 = v21 + (v16 & 7);
        v21 = v16 - (unint64_t)(v16 & 7);
        v183 = vaddq_s64(v178, (int64x2_t)xmmword_181267BE0);
        v184 = vaddq_s64(v178, (int64x2_t)xmmword_181233290);
        v185 = vaddq_s64(v178, (int64x2_t)xmmword_181233120);
        v186 = 0uLL;
        v187 = (uint8x8_t *)(v17 + v181);
        v5 = (llvm *)(v182 - v16);
        v188 = 0uLL;
        v189 = 0uLL;
        do
        {
          v190 = *v187++;
          v191 = vmovl_u8(v190);
          v192 = vmovl_high_u16(v191);
          v193.i64[0] = v192.u32[2];
          v193.i64[1] = v192.u32[3];
          v194 = v193;
          v193.i64[0] = v192.u32[0];
          v193.i64[1] = v192.u32[1];
          v195 = v193;
          v196 = vmovl_u16(*(uint16x4_t *)v191.i8);
          v193.i64[0] = v196.u32[2];
          v193.i64[1] = v196.u32[3];
          v197 = v193;
          v193.i64[0] = v196.u32[0];
          v193.i64[1] = v196.u32[1];
          v198 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
          v189 = vorrq_s8((int8x16_t)vshlq_u64(v194, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v179, 3uLL), v198)), v189);
          v188 = vorrq_s8((int8x16_t)vshlq_u64(v195, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v183, 3uLL), v198)), v188);
          v186 = vorrq_s8((int8x16_t)vshlq_u64(v197, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v184, 3uLL), v198)), v186);
          v199 = vdupq_n_s64(8uLL);
          v180 = vorrq_s8((int8x16_t)vshlq_u64(v193, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v185, 3uLL), v198)), v180);
          v183 = vaddq_s64(v183, v199);
          v184 = vaddq_s64(v184, v199);
          v185 = vaddq_s64(v185, v199);
          v179 = vaddq_s64(v179, v199);
          v5 = (llvm *)((char *)v5 + 8);
        }
        while (v5);
        v200 = vorrq_s8(vorrq_s8(v180, v188), vorrq_s8(v186, v189));
        *(int8x8_t *)v200.i8 = vorr_s8(*(int8x8_t *)v200.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v200, v200, 8uLL));
        *v9 = *(int8x8_t *)v200.i8;
        v20 = v200.i64[0];
        if ((v16 & 7) != 0)
          goto LABEL_30;
LABEL_34:
        *v8 = v14 + v16;
        *v7 = 8 * v16;
        if (8 * v16 < v12)
        {
          llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)v6 + 8, (int *)&v283, (uint64_t *)&v284);
          v10 = v284;
          goto LABEL_142;
        }
        *v9 = (int8x8_t)(v20 >> v12);
        *v7 = 8 * v16 - v12;
        v27 = (v20 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v12)) << v11;
        v22 = v27 | *(_QWORD *)&v13;
        if ((v27 | v13.i32[0]) != 1)
          goto LABEL_36;
LABEL_27:
        llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)v6, 8u, (uint64_t)&v297);
        if ((v298 & 1) != 0)
        {
          v272 = v297;
          v3 = v278;
          v270 = v279;
          v2 = v281;
          *v279 = (uint64_t)v297;
          if (!v272)
            goto LABEL_143;
          goto LABEL_164;
        }
        v29 = *v7;
        if (*v7 < 4)
          break;
        v43 = *(_QWORD *)v9 & 0xFLL;
        *v9 = (int8x8_t)(*(unint64_t *)v9 >> 4);
        *v7 = v29 - 4;
        if ((v43 & 8) != 0)
          goto LABEL_60;
LABEL_58:
        if (*v7 < 0x20)
        {
          v46 = 0;
        }
        else
        {
          *v9 = (int8x8_t)(*(unint64_t *)v9 >> (*(_BYTE *)v7 - 32));
          v46 = 32;
        }
        *((_DWORD *)v6 + 8) = v46;
        llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)v6, 0x20u, (uint64_t)&v297);
        if ((v298 & 1) != 0)
          goto LABEL_101;
        v132 = v6[1];
        v131 = v6[2];
        v133 = *((unsigned int *)v6 + 8);
        v134 = 8 * v131 - v133 + 32 * v297;
        v289 = (void *)v134;
        if ((_DWORD)v133 || v132 > v131)
        {
          if (v132 >= v134 >> 3)
          {
            *v8 = (v134 >> 3) & 0x1FFFFFFFFFFFFFF8;
            *v7 = 0;
            if ((v134 & 0x3F) != 0)
            {
              llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)v6, v134 & 0x3F, (uint64_t)&v297);
              if ((v298 & 1) != 0)
              {
                v282 = v297;
                if (v297)
                {
                  v10 = (void *)v282;
                  goto LABEL_142;
                }
              }
            }
            v282 = 0;
          }
          else
          {
            v297 = (const char *)(8 * v131 - v133);
            llvm::createStringError<unsigned long,unsigned long long>(0x5Cu, (uint64_t)"can't skip to bit %zu from %llu", &v289, (uint64_t *)&v297, (uint64_t *)&v282);
            v10 = (void *)v282;
            if (v282)
              goto LABEL_142;
          }
        }
        else
        {
          *(_QWORD *)&v307.__val_ = std::generic_category();
          v307.__cat_ = (const std::error_category *)"can't skip block: already at end of stream";
          llvm::createStringError((llvm *)0x5C, v307, &v282);
          v10 = (void *)v282;
          if (v282)
            goto LABEL_142;
        }
      }
      if (!v29)
        break;
      v30 = *v9;
      v31 = 4 - v29;
      LODWORD(v284) = 4 - v29;
      v33 = (const char *)v6[1];
      v32 = v6[2];
      v34 = (_DWORD)v33 - v32;
      if ((unint64_t)v33 > v32)
        goto LABEL_42;
LABEL_55:
      v297 = v33;
      llvm::createStringError<unsigned long,unsigned long>(5u, (uint64_t)"Unexpected end of file reading %u of %u bytes", v6 + 2, (uint64_t *)&v297, (uint64_t *)&v289);
      v10 = v289;
      if (!v289)
      {
        v44 = *v7 - v31;
        if (*v7 < v31)
          goto LABEL_105;
        goto LABEL_57;
      }
LABEL_106:
      if (v10)
        goto LABEL_142;
    }
    v30.i8[0] = 0;
    v31 = 4;
    LODWORD(v284) = 4;
    v33 = (const char *)v6[1];
    v32 = v6[2];
    v34 = (_DWORD)v33 - v32;
    if ((unint64_t)v33 <= v32)
      goto LABEL_55;
LABEL_42:
    v35 = *v6;
    v36 = (unsigned int *)(*v6 + v32);
    if ((unint64_t)v33 >= v32 + 8)
    {
      *v9 = *(int8x8_t *)v36;
      v34 = 8;
      goto LABEL_104;
    }
    *v9 = 0;
    if (!v34)
      goto LABEL_104;
    if (v34 >= 8uLL && ((unint64_t)v9 >= v35 + v32 + v34 || v36 >= v7))
    {
      if (v34 >= 0x10uLL)
      {
        v37 = v34 - (unint64_t)(v34 & 0xF);
        v201 = (int64x2_t)xmmword_1812332B0;
        v202 = (int64x2_t)xmmword_181267BE0;
        v203 = (int64x2_t)xmmword_181233290;
        v204 = 0uLL;
        v205 = 0uLL;
        v206 = (int64x2_t)xmmword_181233120;
        v207 = v37;
        v208 = (int64x2_t)xmmword_181267BD0;
        v209 = (int64x2_t)xmmword_181267BC0;
        v210 = (int64x2_t)xmmword_181267BB0;
        v211 = (int64x2_t)xmmword_181267BA0;
        v212 = 0uLL;
        v213 = 0uLL;
        v214 = 0uLL;
        v215 = 0uLL;
        v216 = 0uLL;
        v217 = 0uLL;
        do
        {
          v218 = *(uint8x16_t *)v36;
          v36 += 4;
          v219 = vmovl_u8(*(uint8x8_t *)v218.i8);
          v220 = vmovl_high_u8(v218);
          v221 = vmovl_u16(*(uint16x4_t *)v220.i8);
          v222 = vmovl_high_u16(v220);
          v223 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
          v224 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v201, 3uLL), v223);
          v225 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v208, 3uLL), v223);
          v226 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v202, 3uLL), v223);
          v227 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v203, 3uLL), v223);
          v228 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v209, 3uLL), v223);
          v229 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v206, 3uLL), v223);
          v230 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v210, 3uLL), v223);
          v231.i64[0] = v222.u32[2];
          v231.i64[1] = v222.u32[3];
          v232 = (int8x16_t)vshlq_u64(v231, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v211, 3uLL), v223));
          v233 = vmovl_u16(*(uint16x4_t *)v219.i8);
          v231.i64[0] = v222.u32[0];
          v231.i64[1] = v222.u32[1];
          v234 = (int8x16_t)vshlq_u64(v231, v230);
          v231.i64[0] = v233.u32[0];
          v231.i64[1] = v233.u32[1];
          v235 = (int8x16_t)vshlq_u64(v231, v229);
          v231.i64[0] = v221.u32[2];
          v231.i64[1] = v221.u32[3];
          v236 = (int8x16_t)vshlq_u64(v231, v228);
          v237 = vmovl_high_u16(v219);
          v231.i64[0] = v233.u32[2];
          v231.i64[1] = v233.u32[3];
          v238 = (int8x16_t)vshlq_u64(v231, v227);
          v231.i64[0] = v237.u32[0];
          v231.i64[1] = v237.u32[1];
          v239 = (int8x16_t)vshlq_u64(v231, v226);
          v231.i64[0] = v221.u32[0];
          v231.i64[1] = v221.u32[1];
          v240 = (int8x16_t)vshlq_u64(v231, v225);
          v231.i64[0] = v237.u32[2];
          v231.i64[1] = v237.u32[3];
          v213 = vorrq_s8((int8x16_t)vshlq_u64(v231, v224), v213);
          v214 = vorrq_s8(v240, v214);
          v212 = vorrq_s8(v239, v212);
          v205 = vorrq_s8(v238, v205);
          v215 = vorrq_s8(v236, v215);
          v204 = vorrq_s8(v235, v204);
          v216 = vorrq_s8(v234, v216);
          v217 = vorrq_s8(v232, v217);
          v241 = vdupq_n_s64(0x10uLL);
          v202 = vaddq_s64(v202, v241);
          v203 = vaddq_s64(v203, v241);
          v206 = vaddq_s64(v206, v241);
          v201 = vaddq_s64(v201, v241);
          v208 = vaddq_s64(v208, v241);
          v209 = vaddq_s64(v209, v241);
          v210 = vaddq_s64(v210, v241);
          v211 = vaddq_s64(v211, v241);
          v207 -= 16;
        }
        while (v207);
        v242 = vorrq_s8(vorrq_s8(vorrq_s8(v204, v214), vorrq_s8(v212, v216)), vorrq_s8(vorrq_s8(v205, v215), vorrq_s8(v213, v217)));
        v243 = vorr_s8(*(int8x8_t *)v242.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v242, v242, 8uLL));
        *v9 = v243;
        if ((v34 & 0xF) == 0)
          goto LABEL_104;
        v38 = v243;
        if ((v34 & 0xF) < 8uLL)
          goto LABEL_48;
      }
      else
      {
        v38 = 0;
        v37 = 0;
      }
      v244 = vdupq_n_s64(v37);
      v245 = vaddq_s64(v244, (int64x2_t)xmmword_1812332B0);
      v246 = (int8x16_t)(unint64_t)v38;
      v247 = v37 + v32;
      v248 = v37 + (v34 & 7);
      v37 = v34 - (unint64_t)(v34 & 7);
      v249 = vaddq_s64(v244, (int64x2_t)xmmword_181267BE0);
      v250 = vaddq_s64(v244, (int64x2_t)xmmword_181233290);
      v251 = vaddq_s64(v244, (int64x2_t)xmmword_181233120);
      v252 = 0uLL;
      v253 = (uint8x8_t *)(v35 + v247);
      v254 = v248 - v34;
      v255 = 0uLL;
      v256 = 0uLL;
      do
      {
        v257 = *v253++;
        v258 = vmovl_u8(v257);
        v259 = vmovl_high_u16(v258);
        v260.i64[0] = v259.u32[2];
        v260.i64[1] = v259.u32[3];
        v261 = v260;
        v260.i64[0] = v259.u32[0];
        v260.i64[1] = v259.u32[1];
        v262 = v260;
        v263 = vmovl_u16(*(uint16x4_t *)v258.i8);
        v260.i64[0] = v263.u32[2];
        v260.i64[1] = v263.u32[3];
        v264 = v260;
        v260.i64[0] = v263.u32[0];
        v260.i64[1] = v263.u32[1];
        v256 = vorrq_s8((int8x16_t)vshlq_u64(v261, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v245, 3uLL), v277)), v256);
        v255 = vorrq_s8((int8x16_t)vshlq_u64(v262, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v249, 3uLL), v277)), v255);
        v252 = vorrq_s8((int8x16_t)vshlq_u64(v264, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v250, 3uLL), v277)), v252);
        v265 = vdupq_n_s64(8uLL);
        v246 = vorrq_s8((int8x16_t)vshlq_u64(v260, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v251, 3uLL), v277)), v246);
        v249 = vaddq_s64(v249, v265);
        v250 = vaddq_s64(v250, v265);
        v251 = vaddq_s64(v251, v265);
        v245 = vaddq_s64(v245, v265);
        v254 += 8;
      }
      while (v254);
      v266 = vorrq_s8(vorrq_s8(v246, v255), vorrq_s8(v252, v256));
      v267 = vorr_s8(*(int8x8_t *)v266.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v266, v266, 8uLL));
      *v9 = v267;
      if ((v34 & 7) != 0)
      {
        v38 = v267;
        goto LABEL_48;
      }
    }
    else
    {
      v37 = 0;
      v38 = 0;
LABEL_48:
      v39 = v34 - v37;
      v40 = 8 * v37;
      v41 = (unsigned __int8 *)(v35 + v37 + v32);
      do
      {
        v42 = *v41++;
        *(_QWORD *)&v38 |= (unint64_t)v42 << (v40 & 0xF8);
        *v9 = v38;
        v40 += 8;
        --v39;
      }
      while (v39);
    }
LABEL_104:
    *v8 = v32 + v34;
    *v7 = 8 * v34;
    v44 = 8 * v34 - v31;
    if (8 * v34 < v31)
    {
LABEL_105:
      llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)v6 + 8, (int *)&v284, (uint64_t *)&__p);
      v10 = __p;
      goto LABEL_106;
    }
LABEL_57:
    v45 = *v9;
    *v9 = (int8x8_t)(*(unint64_t *)v9 >> v31);
    *v7 = v44;
    if (!((v45.i32[0] << v29) & 8 | v30.i8[0] & 8))
      goto LABEL_58;
LABEL_60:
    v47 = 0;
    v48 = *v7;
    while (1)
    {
LABEL_62:
      if (v47 >= 0x1D)
      {
        *(_QWORD *)&v308.__val_ = std::generic_category();
        v308.__cat_ = (const std::error_category *)"Unterminated VBR";
        llvm::createStringError((llvm *)0x5C, v308, &v283);
        v10 = v283;
        if (!v283)
          goto LABEL_7;
        goto LABEL_142;
      }
      if (v48 < 4)
        break;
      v49 = *(_QWORD *)v9 & 0xFLL;
      *v9 = (int8x8_t)(*(unint64_t *)v9 >> 4);
      *v7 = v48 - 4;
      v48 -= 4;
      v47 += 3;
      if ((v49 & 8) == 0)
        goto LABEL_58;
    }
    if (v48)
    {
      v50 = *v9;
      v51 = 4 - v48;
      v285 = 4 - v48;
      v53 = v6[1];
      v52 = v6[2];
      v54 = v53 - v52;
      if (v53 <= v52)
        goto LABEL_113;
    }
    else
    {
      v50 = 0;
      v51 = 4;
      v285 = 4;
      v53 = v6[1];
      v52 = v6[2];
      v54 = v53 - v52;
      if (v53 <= v52)
      {
LABEL_113:
        v135 = std::generic_category();
        __p = 0;
        v287 = 0;
        v288 = 0;
        v298 = 0;
        v302 = 0;
        v303 = 0;
        v304 = 1;
        v300 = 0;
        v301 = 0;
        v299 = 0;
        v297 = (const char *)&unk_1E0E22B10;
        p_p = &__p;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v297, 0, 0, 0);
        v289 = &unk_1E0E203C0;
        v290 = "Unexpected end of file reading %u of %u bytes";
        v291 = *v8;
        v292 = v53;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v297, (uint64_t)&v289);
        v136 = p_p;
        v10 = operator new(0x38uLL);
        v293 = 260;
        v289 = v136;
        llvm::StringError::StringError((uint64_t)v10, (llvm::Twine *)&v289, 5, (uint64_t)v135);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v297);
        if (SHIBYTE(v288) < 0)
          operator delete(__p);
        goto LABEL_106;
      }
    }
    v55 = *v6;
    v56 = (unsigned int *)(*v6 + v52);
    if (v53 >= v52 + 8)
    {
      v58 = *(_QWORD *)v56;
      *v9 = (int8x8_t)v58;
      v54 = 8;
    }
    else
    {
      *v9 = 0;
      if (v54)
      {
        if (v54 < 8uLL || ((unint64_t)v9 < v55 + v52 + v54 ? (v57 = v56 >= v7) : (v57 = 1), !v57))
        {
          v59 = 0;
          v58 = 0;
          goto LABEL_80;
        }
        if (v54 >= 0x10uLL)
        {
          v59 = v54 - (unint64_t)(v54 & 0xF);
          v65 = (int64x2_t)xmmword_181267BA0;
          v66 = (int64x2_t)xmmword_181267BB0;
          v67 = (int64x2_t)xmmword_181267BC0;
          v68 = (int64x2_t)xmmword_181267BD0;
          v69 = (int64x2_t)xmmword_1812332B0;
          v70 = (int64x2_t)xmmword_181267BE0;
          v71 = 0uLL;
          v72 = v59;
          v73 = 0uLL;
          v74 = 0uLL;
          v75 = 0uLL;
          v76 = 0uLL;
          v77 = 0uLL;
          v78 = (int64x2_t)xmmword_181233290;
          v79 = 0uLL;
          v80 = 0uLL;
          v81 = (int64x2_t)xmmword_181233120;
          do
          {
            v82 = *(uint8x16_t *)v56;
            v56 += 4;
            v83 = vmovl_u8(*(uint8x8_t *)v82.i8);
            v84 = vmovl_high_u8(v82);
            v85 = vmovl_u16(*(uint16x4_t *)v84.i8);
            v86 = vmovl_high_u16(v84);
            v87 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
            v88 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v69, 3uLL), v87);
            v89 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v68, 3uLL), v87);
            v90 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v70, 3uLL), v87);
            v91 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v78, 3uLL), v87);
            v92 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v67, 3uLL), v87);
            v93 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v81, 3uLL), v87);
            v94 = (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v66, 3uLL), v87);
            v95.i64[0] = v86.u32[2];
            v95.i64[1] = v86.u32[3];
            v96 = (int8x16_t)vshlq_u64(v95, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v65, 3uLL), v87));
            v97 = vmovl_u16(*(uint16x4_t *)v83.i8);
            v95.i64[0] = v86.u32[0];
            v95.i64[1] = v86.u32[1];
            v98 = (int8x16_t)vshlq_u64(v95, v94);
            v95.i64[0] = v97.u32[0];
            v95.i64[1] = v97.u32[1];
            v99 = (int8x16_t)vshlq_u64(v95, v93);
            v95.i64[0] = v85.u32[2];
            v95.i64[1] = v85.u32[3];
            v100 = (int8x16_t)vshlq_u64(v95, v92);
            v101 = vmovl_high_u16(v83);
            v95.i64[0] = v97.u32[2];
            v95.i64[1] = v97.u32[3];
            v102 = (int8x16_t)vshlq_u64(v95, v91);
            v95.i64[0] = v101.u32[0];
            v95.i64[1] = v101.u32[1];
            v103 = (int8x16_t)vshlq_u64(v95, v90);
            v95.i64[0] = v85.u32[0];
            v95.i64[1] = v85.u32[1];
            v104 = (int8x16_t)vshlq_u64(v95, v89);
            v95.i64[0] = v101.u32[2];
            v95.i64[1] = v101.u32[3];
            v75 = vorrq_s8((int8x16_t)vshlq_u64(v95, v88), v75);
            v76 = vorrq_s8(v104, v76);
            v74 = vorrq_s8(v103, v74);
            v73 = vorrq_s8(v102, v73);
            v77 = vorrq_s8(v100, v77);
            v71 = vorrq_s8(v99, v71);
            v79 = vorrq_s8(v98, v79);
            v80 = vorrq_s8(v96, v80);
            v105 = vdupq_n_s64(0x10uLL);
            v70 = vaddq_s64(v70, v105);
            v78 = vaddq_s64(v78, v105);
            v81 = vaddq_s64(v81, v105);
            v69 = vaddq_s64(v69, v105);
            v68 = vaddq_s64(v68, v105);
            v67 = vaddq_s64(v67, v105);
            v66 = vaddq_s64(v66, v105);
            v65 = vaddq_s64(v65, v105);
            v72 -= 16;
          }
          while (v72);
          v106 = vorrq_s8(vorrq_s8(vorrq_s8(v71, v76), vorrq_s8(v74, v79)), vorrq_s8(vorrq_s8(v73, v77), vorrq_s8(v75, v80)));
          *(int8x8_t *)v106.i8 = vorr_s8(*(int8x8_t *)v106.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL));
          *v9 = *(int8x8_t *)v106.i8;
          v58 = v106.i64[0];
          if ((v54 & 0xF) != 0)
          {
            if ((v54 & 0xF) < 8uLL)
              goto LABEL_80;
            goto LABEL_91;
          }
        }
        else
        {
          v58 = 0;
          v59 = 0;
LABEL_91:
          v107 = vdupq_n_s64(v59);
          v108 = vaddq_s64(v107, (int64x2_t)xmmword_1812332B0);
          v109 = (int8x16_t)v58;
          v110 = v59 + v52;
          v111 = v59 + (v54 & 7);
          v59 = v54 - (unint64_t)(v54 & 7);
          v112 = vaddq_s64(v107, (int64x2_t)xmmword_181267BE0);
          v113 = vaddq_s64(v107, (int64x2_t)xmmword_181233290);
          v114 = vaddq_s64(v107, (int64x2_t)xmmword_181233120);
          v115 = 0uLL;
          v116 = (uint8x8_t *)(v55 + v110);
          v117 = v111 - v54;
          v118 = 0uLL;
          v119 = 0uLL;
          do
          {
            v120 = *v116++;
            v121 = vmovl_u8(v120);
            v122 = vmovl_high_u16(v121);
            v123.i64[0] = v122.u32[2];
            v123.i64[1] = v122.u32[3];
            v124 = v123;
            v123.i64[0] = v122.u32[0];
            v123.i64[1] = v122.u32[1];
            v125 = v123;
            v126 = vmovl_u16(*(uint16x4_t *)v121.i8);
            v123.i64[0] = v126.u32[2];
            v123.i64[1] = v126.u32[3];
            v127 = v123;
            v123.i64[0] = v126.u32[0];
            v123.i64[1] = v126.u32[1];
            v128 = (int8x16_t)vdupq_n_s64(0xFFFFFFF8uLL);
            v119 = vorrq_s8((int8x16_t)vshlq_u64(v124, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v108, 3uLL), v128)), v119);
            v118 = vorrq_s8((int8x16_t)vshlq_u64(v125, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v112, 3uLL), v128)), v118);
            v115 = vorrq_s8((int8x16_t)vshlq_u64(v127, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v113, 3uLL), v128)), v115);
            v129 = vdupq_n_s64(8uLL);
            v109 = vorrq_s8((int8x16_t)vshlq_u64(v123, (uint64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v114, 3uLL), v128)), v109);
            v112 = vaddq_s64(v112, v129);
            v113 = vaddq_s64(v113, v129);
            v114 = vaddq_s64(v114, v129);
            v108 = vaddq_s64(v108, v129);
            v117 += 8;
          }
          while (v117);
          v130 = vorrq_s8(vorrq_s8(v109, v118), vorrq_s8(v115, v119));
          *(int8x8_t *)v130.i8 = vorr_s8(*(int8x8_t *)v130.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL));
          *v9 = *(int8x8_t *)v130.i8;
          v58 = v130.i64[0];
          if ((v54 & 7) != 0)
          {
LABEL_80:
            v60 = v54 - v59;
            v61 = 8 * v59;
            v62 = (unsigned __int8 *)(v55 + v59 + v52);
            do
            {
              v63 = *v62++;
              v58 |= (unint64_t)v63 << (v61 & 0xF8);
              *v9 = (int8x8_t)v58;
              v61 += 8;
              --v60;
            }
            while (v60);
          }
        }
      }
      else
      {
        v58 = 0;
      }
    }
    *v8 = v52 + v54;
    *v7 = 8 * v54;
    if (8 * v54 >= v51)
    {
      *v9 = (int8x8_t)(v58 >> v51);
      *v7 = 8 * v54 - v51;
      v64 = (v58 << v48) & 0xF | *(_QWORD *)&v50;
      v48 = 8 * v54 - v51;
      v47 += 3;
      if ((v64 & 8) == 0)
        goto LABEL_58;
      goto LABEL_62;
    }
    llvm::createStringError<unsigned int,unsigned int>(5u, (uint64_t)"Unexpected end of file reading %u of %u bits", (int *)v6 + 8, (int *)&v285, (uint64_t *)&v284);
    v10 = v284;
    if (!v284)
      goto LABEL_7;
LABEL_142:
    v3 = v278;
    v270 = v279;
    v2 = v281;
    *v279 = (uint64_t)v10;
    if (v10)
      goto LABEL_164;
LABEL_143:
    if (v2 != 2)
    {
LABEL_154:
      if (v2 == 1)
      {
        *v270 = 0;
        goto LABEL_164;
      }
      if (!v2)
        break;
      LODWORD(v295) = 0;
      llvm::BitstreamCursor::readRecord(*((llvm::SimpleBitstreamCursor **)v3 + 25), (int)v280, (uint64_t)&v294, 0, (uint64_t)&v297);
      if ((v298 & 1) != 0)
      {
        *v270 = (uint64_t)v297;
        v276 = v294;
        if (v294 == v296)
          return;
        goto LABEL_165;
      }
      if ((_DWORD)v297 == 6)
      {
        llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord((uint64_t)v3, (unsigned int *)&v294, v270);
        v273 = *v270;
        if ((v298 & 1) != 0)
        {
          v5 = (llvm *)v297;
          v297 = 0;
          if (v5)
            v5 = (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v5 + 8))(v5);
        }
        if (v273)
          goto LABEL_164;
      }
      continue;
    }
    break;
  }
LABEL_161:
  v297 = "Malformed block";
  LOWORD(v301) = 259;
  v274 = llvm::BitcodeErrorCategory(v5);
  v275 = operator new(0x38uLL);
  *v270 = llvm::StringError::StringError((uint64_t)v275, (llvm::Twine *)&v297, 1, (uint64_t)v274);
  v276 = v294;
  if (v294 == v296)
    return;
LABEL_165:
  free(v276);
}

llvm ***llvm::MetadataLoader::operator=(llvm ***a1, llvm ***a2)
{
  llvm **v3;
  llvm **v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
    llvm::MetadataLoader::MetadataLoaderImpl::~MetadataLoaderImpl(v4);
  return a1;
}

_QWORD *llvm::MetadataLoader::MetadataLoader(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void llvm::MetadataLoader::~MetadataLoader(llvm ***this)
{
  llvm **v2;

  v2 = *this;
  *this = 0;
  if (v2)
    llvm::MetadataLoader::MetadataLoaderImpl::~MetadataLoaderImpl(v2);
}

_QWORD *std::make_unique[abi:nn180100]<llvm::MetadataLoader::MetadataLoaderImpl,llvm::BitstreamCursor &,llvm::Module &,llvm::BitcodeReaderValueList &,llvm::MetadataLoaderCallbacks,BOOL &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, _QWORD *a6@<X8>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x438uLL);
  v13 = *(_QWORD *)(a4 + 24);
  if (v13)
  {
    if (v13 == a4)
    {
      v23 = v22;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v22);
      v14 = v24;
      v15 = *(_BYTE **)(a4 + 56);
      if (!v15)
        goto LABEL_10;
    }
    else
    {
      v23 = *(_BYTE **)(a4 + 24);
      *(_QWORD *)(a4 + 24) = 0;
      v14 = v24;
      v15 = *(_BYTE **)(a4 + 56);
      if (!v15)
      {
LABEL_10:
        v25 = 0;
        v16 = v26;
        v26[0] = 0;
        v28 = 0;
        if (!*(_BYTE *)(a4 + 96))
          goto LABEL_19;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v23 = 0;
    v14 = v24;
    v15 = *(_BYTE **)(a4 + 56);
    if (!v15)
      goto LABEL_10;
  }
  if (v15 == (_BYTE *)(a4 + 32))
  {
    v25 = v24;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v15 + 24))(v15, v24);
    v16 = v26;
    v26[0] = 0;
    v28 = 0;
    if (!*(_BYTE *)(a4 + 96))
      goto LABEL_19;
  }
  else
  {
    v25 = v15;
    *(_QWORD *)(a4 + 56) = 0;
    v16 = v26;
    v26[0] = 0;
    v28 = 0;
    if (!*(_BYTE *)(a4 + 96))
      goto LABEL_19;
  }
LABEL_13:
  v17 = *(_QWORD *)(a4 + 88);
  if (v17)
  {
    if (v17 == a4 + 64)
    {
      v27 = v26;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a4 + 64) + 24))(a4 + 64, v26);
    }
    else
    {
      v27 = *(_BYTE **)(a4 + 88);
      *(_QWORD *)(a4 + 88) = 0;
    }
  }
  else
  {
    v27 = 0;
  }
  v28 = 1;
LABEL_19:
  llvm::MetadataLoader::MetadataLoaderImpl::MetadataLoaderImpl((uint64_t)v12, a1, a2, a3, (uint64_t)v22, *a5);
  *a6 = v12;
  if (!v28)
    goto LABEL_25;
  if (v27 == v26)
  {
    v18 = 4;
  }
  else
  {
    if (!v27)
      goto LABEL_25;
    v18 = 5;
    v16 = v27;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v18))(v16);
LABEL_25:
  if (v25 == v24)
  {
    v19 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_30;
    v19 = 5;
    v14 = v25;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v19))(v14);
LABEL_30:
  result = v23;
  if (v23 == v22)
  {
    v21 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      return result;
    v21 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
}

_QWORD *llvm::MetadataLoader::MetadataLoader(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, uint64_t a6)
{
  char v8;

  v8 = a5;
  std::make_unique[abi:nn180100]<llvm::MetadataLoader::MetadataLoaderImpl,llvm::BitstreamCursor &,llvm::Module &,llvm::BitcodeReaderValueList &,llvm::MetadataLoaderCallbacks,BOOL &>(a2, a3, a4, a6, &v8, a1);
  return a1;
}

void llvm::MetadataLoader::parseMetadata(llvm::BitstreamCursor ***this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*this, a2, a3);
}

BOOL llvm::MetadataLoader::hasFwdRefs(llvm::MetadataLoader *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 24) > 1u;
}

unsigned __int8 *llvm::MetadataLoader::getMetadataFwdRefOrLoad(llvm::MetadataLoader::MetadataLoaderImpl **this, unsigned int a2)
{
  return llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(*this, a2);
}

uint64_t llvm::MetadataLoader::lookupSubprogramForFunction(llvm::MetadataLoader *this, llvm::Function *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  llvm::Function *v7;
  int v9;
  int v10;

  v2 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 752) & 1) != 0)
  {
    v4 = v2 + 760;
    v3 = 16;
  }
  else
  {
    v3 = *(_DWORD *)(v2 + 768);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(v2 + 760);
  }
  v5 = v3 - 1;
  v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = *(llvm::Function **)(v4 + 16 * v6);
  if (v7 == a2)
    return *(_QWORD *)(v4 + 16 * v6 + 8);
  v9 = 1;
  while (v7 != (llvm::Function *)-4096)
  {
    v10 = v6 + v9++;
    v6 = v10 & v5;
    v7 = *(llvm::Function **)(v4 + 16 * v6);
    if (v7 == a2)
      return *(_QWORD *)(v4 + 16 * v6 + 8);
  }
  return 0;
}

void llvm::MetadataLoader::parseMetadataAttachment(uint64_t *a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(*a1, a2, a3, a4);
}

void llvm::MetadataLoader::parseMetadataKinds(llvm::BitstreamCursor ***this@<X0>, uint64_t *a2@<X8>)
{
  llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(*this, a2);
}

uint64_t llvm::MetadataLoader::setStripTBAA(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 1040) = a2;
  return this;
}

uint64_t llvm::MetadataLoader::isStrippingTBAA(llvm::MetadataLoader *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 1040);
}

void llvm::MetadataLoader::shrinkTo(llvm::MetadataLoader *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;

  v2 = *(_QWORD *)this;
  v3 = *(unsigned int *)(*(_QWORD *)this + 8);
  if ((_DWORD)v3 != a2)
  {
    v5 = a2;
    if (v3 <= a2)
    {
      if (*(_DWORD *)(v2 + 12) < a2)
      {
        llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::grow(*(_QWORD *)this, a2);
        v3 = *(unsigned int *)(v2 + 8);
      }
      if (v5 != v3)
        bzero((void *)(*(_QWORD *)v2 + 8 * v3), 8 * (v5 - v3));
    }
    else
    {
      v6 = 8 * v3;
      v7 = 8 * a2 - v6;
      v8 = (unsigned __int8 **)(v6 + *(_QWORD *)v2 - 8);
      do
      {
        if (*v8)
          llvm::MetadataTracking::untrack((uint64_t)v8, *v8);
        --v8;
        v7 += 8;
      }
      while (v7);
    }
    *(_DWORD *)(v2 + 8) = a2;
  }
}

void llvm::MetadataLoader::upgradeDebugIntrinsics(llvm::MetadataLoader::MetadataLoaderImpl **this, llvm::Function *a2)
{
  llvm::MetadataLoader::MetadataLoaderImpl::upgradeDeclareExpressions(*this, a2);
}

uint64_t llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *i;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v14 = 0;
        v15 = (_DWORD *)*a2;
        v16 = *(_DWORD **)a1;
        do
        {
          v16[v14] = v15[v14];
          if (v15 != v16)
            std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((uint64_t)&v16[v14 + 2], *(_QWORD **)&v15[v14 + 2], *(_QWORD **)&v15[v14 + 4], (uint64_t)(*(_QWORD *)&v15[v14 + 4] - *(_QWORD *)&v15[v14 + 2]) >> 4);
          v14 += 8;
        }
        while (8 * v4 != v14);
        v17 = &v16[v14];
        v18 = *(_DWORD **)a1;
        v5 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v18 = *(_DWORD **)a1;
        v17 = *(_DWORD **)a1;
      }
      for (i = &v18[8 * v5]; i != v17; i -= 8)
      {
        v26 = *((_QWORD *)i - 3);
        if (v26)
        {
          v27 = *((_QWORD *)i - 2);
          v25 = (void *)*((_QWORD *)i - 3);
          if (v27 != v26)
          {
            do
            {
              v28 = *(std::__shared_weak_count **)(v27 - 8);
              if (v28)
              {
                p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldaxr(p_shared_owners);
                while (__stlxr(v30 - 1, p_shared_owners));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
              }
              v27 -= 16;
            }
            while (v27 != v26);
            v25 = (void *)*((_QWORD *)i - 3);
          }
          *((_QWORD *)i - 2) = v26;
          operator delete(v25);
        }
      }
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (!(_DWORD)v5)
      {
        v5 = 0;
        v22 = *((unsigned int *)a2 + 2);
        if (!*((_DWORD *)a2 + 2))
          goto LABEL_31;
        goto LABEL_49;
      }
      v19 = *a2;
      v20 = *(_DWORD **)a1;
      v21 = 32 * v5;
      do
      {
        *v20 = *(_DWORD *)v19;
        if ((_DWORD *)v19 != v20)
          std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((uint64_t)(v20 + 2), *(_QWORD **)(v19 + 8), *(_QWORD **)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 4);
        v19 += 32;
        v20 += 8;
        v21 -= 32;
      }
      while (v21);
    }
    else
    {
      if ((_DWORD)v5)
      {
        v6 = *(_DWORD **)a1;
        v7 = *(_QWORD *)a1 + 32 * v5;
        do
        {
          v9 = *(_QWORD *)(v7 - 24);
          if (v9)
          {
            v10 = *(_QWORD *)(v7 - 16);
            v8 = *(void **)(v7 - 24);
            if (v10 != v9)
            {
              do
              {
                v11 = *(std::__shared_weak_count **)(v10 - 8);
                if (v11)
                {
                  v12 = (unint64_t *)&v11->__shared_owners_;
                  do
                    v13 = __ldaxr(v12);
                  while (__stlxr(v13 - 1, v12));
                  if (!v13)
                  {
                    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                    std::__shared_weak_count::__release_weak(v11);
                  }
                }
                v10 -= 16;
              }
              while (v10 != v9);
              v8 = *(void **)(v7 - 24);
            }
            *(_QWORD *)(v7 - 16) = v9;
            operator delete(v8);
          }
          v7 -= 32;
        }
        while ((_DWORD *)v7 != v6);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow(a1, v4);
      v5 = 0;
    }
    v22 = *((unsigned int *)a2 + 2);
    if (v5 == v22)
    {
LABEL_31:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
LABEL_49:
    v31 = *a2;
    v32 = *a2 + 32 * v22;
    v33 = 32 * v5;
    v34 = *(_QWORD *)a1 + 32 * v5;
    v35 = v31 + v33;
    do
    {
      *(_DWORD *)v34 = *(_DWORD *)v35;
      *(_QWORD *)(v34 + 16) = 0;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 8) = 0;
      v36 = *(char **)(v35 + 8);
      v37 = *(char **)(v35 + 16);
      v38 = v37 - v36;
      if (v37 != v36)
      {
        if (v38 < 0)
          abort();
        v39 = v38 >> 4;
        v40 = operator new(v38);
        *(_QWORD *)(v34 + 8) = v40;
        *(_QWORD *)(v34 + 16) = v40;
        *(_QWORD *)(v34 + 24) = &v40[2 * v39];
        do
        {
          v41 = *((_QWORD *)v36 + 1);
          *v40 = *(_QWORD *)v36;
          v40[1] = v41;
          if (v41)
          {
            v42 = (unint64_t *)(v41 + 8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v36 += 16;
          v40 += 2;
        }
        while (v36 != v37);
        *(_QWORD *)(v34 + 16) = v40;
      }
      v35 += 32;
      v34 += 32;
    }
    while (v35 != v32);
    goto LABEL_31;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::grow(uint64_t a1, unint64_t a2)
{
  unsigned __int8 **v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  int v14;
  unint64_t v15;

  v15 = 0;
  v3 = (unsigned __int8 **)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v15);
  v5 = v4;
  v6 = *(unsigned __int8 ***)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = (unsigned __int8 **)v4;
    do
    {
      *v9 = *v6;
      if (*v6)
      {
        llvm::MetadataTracking::retrack((uint64_t)v6, *v6, (uint64_t)v9);
        *v6 = 0;
      }
      ++v9;
      ++v6;
      v8 -= 8;
    }
    while (v8);
    v6 = *(unsigned __int8 ***)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = v10;
      v12 = v6 - 1;
      do
      {
        v13 = v12[v11];
        if (v13)
          llvm::MetadataTracking::untrack((uint64_t)&v12[v11], v13);
        --v11;
      }
      while (v11 * 8);
      v6 = *(unsigned __int8 ***)a1;
    }
  }
  v14 = v15;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v14;
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUVariables(llvm::MetadataLoader::MetadataLoaderImpl *this)
{
  llvm::Module *v2;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v4;
  int NumOperands;
  int v6;
  unsigned int i;
  uint64_t Operand;
  unint64_t v9;
  llvm::MDNode *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  llvm::MDNode *Impl;
  llvm::MDNode *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::BytecodeWriterConfig *v21;
  llvm::MDNode **v22;
  uint64_t v23;
  llvm::MDNode *v24;
  _QWORD *v25;
  llvm::MDNode *v26;
  void *v27;
  uint64_t v28;
  _WORD v29[12];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 1042))
  {
    v2 = (llvm::Module *)*((_QWORD *)this + 27);
    v27 = "llvm.dbg.cu";
    v29[8] = 259;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const char **)&v27);
    if (NamedMetadata)
    {
      v4 = NamedMetadata;
      NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
      if (NumOperands)
      {
        v6 = NumOperands;
        for (i = 0; i != v6; ++i)
        {
          Operand = llvm::NamedMDNode::getOperand(v4, i);
          v9 = *(_QWORD *)(Operand - 16);
          if ((v9 & 2) != 0)
          {
            v10 = *(llvm::MDNode **)(*(_QWORD *)(Operand - 32) + 48);
            if (!v10)
              continue;
          }
          else
          {
            v10 = *(llvm::MDNode **)(Operand - 16 - 8 * ((v9 >> 2) & 0xF) + 48);
            if (!v10)
              continue;
          }
          if (*(_BYTE *)v10 == 5)
          {
            v11 = 0;
            v12 = (unint64_t *)((char *)v10 - 16);
            while (1)
            {
              v13 = *v12;
              if ((*v12 & 2) != 0)
              {
                if (v11 >= *((unsigned int *)v10 - 6))
                  break;
                v14 = *(_BYTE **)(*((_QWORD *)v10 - 4) + 8 * v11);
                if (v14)
                {
LABEL_19:
                  if (*v14 == 25)
                  {
                    v15 = (_QWORD *)*((_QWORD *)this + 26);
                    Impl = llvm::DIExpression::getImpl((uint64_t)v15, 0, 0, 0, 1);
                    v17 = llvm::DIGlobalVariableExpression::getImpl(v15, (uint64_t)v14, (uint64_t)Impl, 1, 1);
                    llvm::MDNode::replaceOperandWith(v10, v11, v17);
                  }
                }
              }
              else
              {
                if (v11 >= ((v13 >> 6) & 0xF))
                  break;
                v14 = (_BYTE *)v12[v11 - ((v13 >> 2) & 0xF)];
                if (v14)
                  goto LABEL_19;
              }
              ++v11;
            }
          }
        }
      }
    }
    v18 = *((_QWORD *)this + 27);
    v19 = v18 + 8;
    v20 = *(_QWORD *)(v18 + 16);
    if (v20 != v18 + 8)
    {
      do
      {
        if (v20)
          v21 = (mlir::BytecodeWriterConfig *)(v20 - 56);
        else
          v21 = 0;
        v27 = v29;
        v28 = 0x100000000;
        llvm::Value::getMetadata(v21, 0, (uint64_t)&v27);
        llvm::Value::eraseMetadata(v21, 0);
        v22 = (llvm::MDNode **)v27;
        if ((_DWORD)v28)
        {
          v23 = 8 * v28;
          do
          {
            v24 = *v22;
            if (*(_BYTE *)*v22 == 25)
            {
              v25 = (_QWORD *)*((_QWORD *)this + 26);
              v26 = llvm::DIExpression::getImpl((uint64_t)v25, 0, 0, 0, 1);
              v24 = llvm::DIGlobalVariableExpression::getImpl(v25, (uint64_t)v24, (uint64_t)v26, 1, 1);
            }
            llvm::Value::addMetadata(v21, 0, v24);
            ++v22;
            v23 -= 8;
          }
          while (v23);
          v22 = (llvm::MDNode **)v27;
        }
        if (v22 != (llvm::MDNode **)v29)
          free(v22);
        v20 = *(_QWORD *)(v20 + 8);
      }
      while (v20 != v19);
    }
  }
}

llvm::NamedMDNode *llvm::MetadataLoader::MetadataLoaderImpl::upgradeCULocals(llvm::MetadataLoader::MetadataLoaderImpl *this)
{
  llvm::Module *v2;
  llvm::NamedMDNode *result;
  llvm::NamedMDNode *v4;
  unsigned int v5;
  _QWORD **v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  llvm *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  llvm::DILocalScope *EnclosingSubprogram;
  llvm::DILocalScope *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD **v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _DWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  llvm::Metadata *v79;
  llvm::MDNode *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  const void *v102;
  uint64_t v103;
  _QWORD *v104;
  llvm::Metadata *Impl;
  _QWORD *v106;
  _QWORD *v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  llvm::NamedMDNode *v118;
  int v119;
  unsigned int v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  llvm *v124;
  uint64_t v125;
  unsigned int v126;
  void *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  _BYTE v131[48];
  void *v132;
  uint64_t v133;
  _WORD v134[24];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::Module *)*((_QWORD *)this + 27);
  v132 = "llvm.dbg.cu";
  v134[8] = 259;
  result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const char **)&v132);
  if (result)
  {
    v4 = result;
    result = (llvm::NamedMDNode *)llvm::NamedMDNode::getNumOperands(result);
    v119 = (int)result;
    if ((_DWORD)result)
    {
      v5 = 0;
      v6 = &v122;
      do
      {
        v120 = v5;
        result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v4, v5);
        if (*(_BYTE *)result == 17)
        {
          v8 = (_QWORD *)((char *)result - 16);
          v7 = *((_QWORD *)result - 2);
          if ((v7 & 2) != 0)
          {
            if (*(_QWORD *)(*((_QWORD *)result - 4) + 56))
            {
LABEL_11:
              v124 = 0;
              v125 = 0;
              v126 = 0;
              v127 = &v129;
              v128 = 0;
              v118 = result;
              if ((*v8 & 2) != 0)
              {
                v9 = *(_QWORD *)(*((_QWORD *)result - 4) + 56);
                v11 = v9 - 16;
                v10 = *(_QWORD *)(v9 - 16);
                if ((v10 & 2) != 0)
                  goto LABEL_13;
              }
              else
              {
                v9 = v8[-((*v8 >> 2) & 0xFLL) + 7];
                v11 = v9 - 16;
                v10 = *(_QWORD *)(v9 - 16);
                if ((v10 & 2) != 0)
                {
LABEL_13:
                  v12 = *(uint64_t **)(v9 - 32);
                  v13 = *(unsigned int *)(v9 - 24);
                  if (!*(_DWORD *)(v9 - 24))
                    goto LABEL_138;
LABEL_17:
                  v14 = 0;
                  v15 = &v12[v13];
                  while (2)
                  {
                    v19 = *v12;
                    v20 = *(_QWORD *)(*v12 - 16);
                    if ((v20 & 2) != 0)
                    {
                      v21 = **(unsigned __int8 ***)(v19 - 32);
                      if (!v21)
                        goto LABEL_19;
                    }
                    else
                    {
                      v21 = *(unsigned __int8 **)(*v12 - 16 - 8 * ((v20 >> 2) & 0xF));
                      if (!v21)
                        goto LABEL_19;
                    }
                    if (*v21 - 18 > 2)
                      goto LABEL_19;
                    v22 = v126;
                    if (!v126)
                      goto LABEL_46;
                    v16 = (v126 - 1) & ((v19 >> 4) ^ (v19 >> 9));
                    v17 = (_QWORD *)((char *)v124 + 8 * v16);
                    v18 = *v17;
                    if (v19 == *v17)
                      goto LABEL_19;
                    v25 = 0;
                    v26 = 1;
                    while (v18 != -4096)
                    {
                      if (v25)
                        v27 = 0;
                      else
                        v27 = v18 == -8192;
                      if (v27)
                        v25 = v17;
                      v28 = v16 + v26++;
                      v16 = v28 & (v126 - 1);
                      v17 = (_QWORD *)((char *)v124 + 8 * v16);
                      v18 = *v17;
                      if (v19 == *v17)
                        goto LABEL_19;
                    }
                    v29 = (char *)(v25 ? v25 : v17);
                    if (4 * (int)v125 + 4 < 3 * v126)
                    {
                      if (v126 + ~(_DWORD)v125 - HIDWORD(v125) <= v126 >> 3)
                        goto LABEL_47;
                      v23 = *(_QWORD *)v29;
                      LODWORD(v125) = v125 + 1;
                      if (v23 != -4096)
                        goto LABEL_29;
                    }
                    else
                    {
LABEL_46:
                      v22 = 2 * v126;
LABEL_47:
                      llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow((uint64_t)&v124, v22);
                      v30 = v126 - 1;
                      v31 = (v126 - 1) & ((v19 >> 4) ^ (v19 >> 9));
                      v29 = (char *)v124 + 8 * v31;
                      v32 = *(_QWORD *)v29;
                      if (v19 == *(_QWORD *)v29)
                      {
LABEL_48:
                        LODWORD(v125) = v125 + 1;
                        if (v19 == -4096)
                          goto LABEL_30;
                      }
                      else
                      {
                        v33 = 0;
                        v34 = 1;
                        while (v32 != -4096)
                        {
                          if (v33)
                            v35 = 0;
                          else
                            v35 = v32 == -8192;
                          if (v35)
                            v33 = v29;
                          v36 = v31 + v34++;
                          v31 = v36 & v30;
                          v29 = (char *)v124 + 8 * (v36 & v30);
                          v32 = *(_QWORD *)v29;
                          if (v19 == *(_QWORD *)v29)
                            goto LABEL_48;
                        }
                        if (v33)
                          v29 = v33;
                        v37 = *(_QWORD *)v29;
                        LODWORD(v125) = v125 + 1;
                        if (v37 == -4096)
                          goto LABEL_30;
                      }
LABEL_29:
                      --HIDWORD(v125);
                    }
LABEL_30:
                    *(_QWORD *)v29 = v19;
                    v24 = v128;
                    if (v128 >= (unint64_t)HIDWORD(v128))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, &v129, v128 + 1, 8);
                      v24 = v128;
                    }
                    *((_QWORD *)v127 + v24) = v19;
                    v14 = v128 + 1;
                    LODWORD(v128) = v128 + 1;
LABEL_19:
                    if (++v12 == v15)
                    {
                      if (!v14)
                        goto LABEL_138;
                      v132 = v134;
                      v133 = 0x600000000;
                      if ((*v8 & 2) != 0)
                      {
                        v38 = *(_QWORD *)(*((_QWORD *)v118 - 4) + 56);
                        v40 = v38 - 16;
                        v39 = *(_QWORD *)(v38 - 16);
                        if ((v39 & 2) == 0)
                          goto LABEL_85;
LABEL_66:
                        v41 = *(uint64_t **)(v38 - 32);
                        v42 = *(unsigned int *)(v38 - 24);
                        if (v42)
                          goto LABEL_67;
LABEL_86:
                        v122 = 0;
                        v123 = 0;
                        v121 = &v122;
                        v51 = (uint64_t *)v127;
                        v52 = (char *)v127 + 8 * v14;
LABEL_93:
                        v54 = *v51;
                        v55 = *(_QWORD *)(*v51 - 16);
                        if ((v55 & 2) != 0)
                        {
                          EnclosingSubprogram = llvm::MetadataLoader::MetadataLoaderImpl::findEnclosingSubprogram(this, **(llvm::DILocalScope ***)(v54 - 32));
                          if (!EnclosingSubprogram)
                            goto LABEL_92;
                        }
                        else
                        {
                          EnclosingSubprogram = llvm::MetadataLoader::MetadataLoaderImpl::findEnclosingSubprogram(this, *(llvm::DILocalScope **)(*v51 - 16 - 8 * ((v55 >> 2) & 0xF)));
                          if (!EnclosingSubprogram)
                            goto LABEL_92;
                        }
                        v57 = EnclosingSubprogram;
                        v58 = v122;
                        v59 = v6;
                        v60 = v6;
                        if (v122)
                        {
                          do
                          {
                            while (1)
                            {
                              v6 = (_QWORD **)v58;
                              v61 = v58[4];
                              if ((unint64_t)EnclosingSubprogram >= v61)
                                break;
                              v58 = *v6;
                              v59 = v6;
                              if (!*v6)
                                goto LABEL_104;
                            }
                            if (v61 >= (unint64_t)EnclosingSubprogram)
                            {
                              v64 = v6 + 6;
                              v53 = *((unsigned int *)v6 + 12);
                              v63 = v6 + 5;
                              if (v53 >= *((unsigned int *)v6 + 13))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v6 + 5), v6 + 7, v53 + 1, 8);
                                v53 = *((unsigned int *)v6 + 12);
                              }
                              v6 = v60;
                              goto LABEL_91;
                            }
                            v58 = v6[1];
                          }
                          while (v58);
                          v59 = v6 + 1;
                        }
LABEL_104:
                        v62 = operator new(0x68uLL);
                        v62[4] = v57;
                        v62[5] = v62 + 7;
                        v63 = v62 + 5;
                        v62[6] = 0x600000000;
                        v64 = v62 + 6;
                        *v62 = 0;
                        v62[1] = 0;
                        v62[2] = v6;
                        *v59 = v62;
                        if (*v121)
                        {
                          v121 = (_QWORD *)*v121;
                          v62 = (_QWORD *)*v59;
                        }
                        v6 = v60;
                        v65 = v122;
                        v27 = v62 == v122;
                        *((_BYTE *)v62 + 24) = v62 == v122;
                        if (v27)
                          goto LABEL_90;
                        while (1)
                        {
                          v66 = v62[2];
                          if (*(_BYTE *)(v66 + 24))
                            goto LABEL_90;
                          v67 = *(_QWORD **)(v66 + 16);
                          v68 = *v67;
                          if (*v67 == v66)
                          {
                            v71 = v67[1];
                            if (!v71 || (v72 = *(unsigned __int8 *)(v71 + 24), v69 = (_BYTE *)(v71 + 24), v72))
                            {
                              if (*(_QWORD **)v66 == v62)
                              {
                                *(_BYTE *)(v66 + 24) = 1;
                                *((_BYTE *)v67 + 24) = 0;
                                v75 = *(_QWORD *)(v66 + 8);
                                *v67 = v75;
                                if (v75)
                                  goto LABEL_121;
                              }
                              else
                              {
                                v73 = *(uint64_t **)(v66 + 8);
                                v74 = *v73;
                                *(_QWORD *)(v66 + 8) = *v73;
                                if (v74)
                                {
                                  *(_QWORD *)(v74 + 16) = v66;
                                  v67 = *(_QWORD **)(v66 + 16);
                                }
                                v73[2] = (uint64_t)v67;
                                *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v73;
                                *v73 = v66;
                                *(_QWORD *)(v66 + 16) = v73;
                                v67 = (_QWORD *)v73[2];
                                v66 = *v67;
                                *((_BYTE *)v73 + 24) = 1;
                                *((_BYTE *)v67 + 24) = 0;
                                v75 = *(_QWORD *)(v66 + 8);
                                *v67 = v75;
                                if (v75)
LABEL_121:
                                  *(_QWORD *)(v75 + 16) = v67;
                              }
                              *(_QWORD *)(v66 + 16) = v67[2];
                              *(_QWORD *)(v67[2] + 8 * (*(_QWORD *)v67[2] != (_QWORD)v67)) = v66;
                              *(_QWORD *)(v66 + 8) = v67;
LABEL_89:
                              v67[2] = v66;
LABEL_90:
                              v53 = 0;
                              ++v123;
LABEL_91:
                              *(_QWORD *)(*v63 + 8 * v53) = v54;
                              ++*v64;
LABEL_92:
                              if (++v51 == (uint64_t *)v52)
                              {
                                v78 = v121;
                                if (v121 == v6)
                                  goto LABEL_136;
                                while (2)
                                {
                                  v80 = (llvm::MDNode *)v78[4];
                                  v81 = *((_QWORD *)v80 - 2);
                                  if ((v81 & 2) != 0)
                                  {
                                    v82 = *(_QWORD *)(*((_QWORD *)v80 - 4) + 56);
                                    if (!v82)
                                      goto LABEL_146;
LABEL_143:
                                    v83 = *(_QWORD *)(v82 - 16);
                                    if ((v83 & 2) != 0)
                                    {
                                      v84 = *(_QWORD *)(v82 - 32);
                                      v85 = *(unsigned int *)(v82 - 24);
                                    }
                                    else
                                    {
                                      v84 = v82 - 16 - 8 * ((v83 >> 2) & 0xF);
                                      v85 = (v83 >> 6) & 0xF;
                                    }
                                    v86 = (uint64_t *)(v84 + 8 * v85);
                                  }
                                  else
                                  {
                                    v82 = ((_QWORD *)v80 - ((v81 >> 2) & 0xF))[5];
                                    if (v82)
                                      goto LABEL_143;
LABEL_146:
                                    v84 = 0;
                                    v86 = 0;
                                  }
                                  v129 = v131;
                                  v130 = 0x600000000;
                                  if ((uint64_t *)v84 == v86)
                                    v87 = 0;
                                  else
                                    v87 = (((unint64_t)v86 - v84 - 8) >> 3) + 1;
                                  if (v87 < 7)
                                  {
                                    v88 = 0;
                                    v89 = 0;
                                    if ((uint64_t *)v84 == v86)
                                      goto LABEL_164;
                                  }
                                  else
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v131, v87, 8);
                                    v88 = v130;
                                    v89 = v130;
                                    if ((uint64_t *)v84 == v86)
                                      goto LABEL_164;
                                  }
                                  v90 = (char *)v129 + 8 * v88;
                                  v91 = (unint64_t)v86 - v84 - 8;
                                  if (v91 < 0x38)
                                  {
                                    v92 = (uint64_t *)v84;
                                    goto LABEL_163;
                                  }
                                  v93 = 8 * v88;
                                  if ((unint64_t)v129 + 8 * v88 - v84 < 0x20)
                                  {
                                    v92 = (uint64_t *)v84;
                                    goto LABEL_163;
                                  }
                                  v94 = (v91 >> 3) + 1;
                                  v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
                                  v90 = (_QWORD *)((char *)v90 + v95);
                                  v92 = (uint64_t *)(v84 + v95);
                                  v96 = (__int128 *)(v84 + 16);
                                  v97 = (char *)v129 + v93 + 16;
                                  v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    v99 = *v96;
                                    *(v97 - 1) = *(v96 - 1);
                                    *v97 = v99;
                                    v96 += 2;
                                    v97 += 2;
                                    v98 -= 4;
                                  }
                                  while (v98);
                                  if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
                                    do
                                    {
LABEL_163:
                                      v100 = *v92++;
                                      *v90++ = v100;
                                    }
                                    while (v92 != v86);
                                  }
LABEL_164:
                                  v101 = (v89 + v87);
                                  LODWORD(v130) = v101;
                                  v102 = (const void *)v78[5];
                                  v103 = *((unsigned int *)v78 + 12);
                                  if (v103 + v101 > (unint64_t)HIDWORD(v130))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v131, v103 + v101, 8);
                                    LODWORD(v101) = v130;
                                  }
                                  v104 = v129;
                                  if ((_DWORD)v103)
                                  {
                                    memcpy((char *)v129 + 8 * v101, v102, 8 * v103);
                                    LODWORD(v101) = v130;
                                    v104 = v129;
                                  }
                                  LODWORD(v130) = v101 + v103;
                                  Impl = (llvm::Metadata *)llvm::MDTuple::getImpl(*((_QWORD *)this + 26), v104, (v101 + v103), 0, 1);
                                  llvm::MDNode::replaceOperandWith(v80, 7u, Impl);
                                  if (v129 != v131)
                                    free(v129);
                                  v106 = (_QWORD *)v78[1];
                                  if (v106)
                                  {
                                    do
                                    {
                                      v107 = v106;
                                      v106 = (_QWORD *)*v106;
                                    }
                                    while (v106);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v107 = (_QWORD *)v78[2];
                                      v27 = *v107 == (_QWORD)v78;
                                      v78 = v107;
                                    }
                                    while (!v27);
                                  }
                                  v78 = v107;
                                  if (v107 == v6)
                                    goto LABEL_136;
                                  continue;
                                }
                              }
                              goto LABEL_93;
                            }
                          }
                          else if (!v68 || (v70 = *(unsigned __int8 *)(v68 + 24), v69 = (_BYTE *)(v68 + 24), v70))
                          {
                            if (*(_QWORD **)v66 == v62)
                            {
                              v77 = v62[1];
                              *(_QWORD *)v66 = v77;
                              if (v77)
                              {
                                *(_QWORD *)(v77 + 16) = v66;
                                v67 = *(_QWORD **)(v66 + 16);
                              }
                              v62[2] = v67;
                              *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v62;
                              v62[1] = v66;
                              *(_QWORD *)(v66 + 16) = v62;
                              v67 = (_QWORD *)v62[2];
                              *((_BYTE *)v62 + 24) = 1;
                              *((_BYTE *)v67 + 24) = 0;
                              v66 = v67[1];
                              v76 = *(_QWORD **)v66;
                              v67[1] = *(_QWORD *)v66;
                              if (!v76)
                                goto LABEL_88;
                            }
                            else
                            {
                              *(_BYTE *)(v66 + 24) = 1;
                              *((_BYTE *)v67 + 24) = 0;
                              v66 = v67[1];
                              v76 = *(_QWORD **)v66;
                              v67[1] = *(_QWORD *)v66;
                              if (!v76)
                                goto LABEL_88;
                            }
                            v76[2] = v67;
LABEL_88:
                            *(_QWORD *)(v66 + 16) = v67[2];
                            *(_QWORD *)(v67[2] + 8 * (*(_QWORD *)v67[2] != (_QWORD)v67)) = v66;
                            *(_QWORD *)v66 = v67;
                            goto LABEL_89;
                          }
                          *(_BYTE *)(v66 + 24) = 1;
                          v62 = v67;
                          *((_BYTE *)v67 + 24) = v67 == v65;
                          *v69 = 1;
                          if (v67 == v65)
                            goto LABEL_90;
                        }
                      }
                      v38 = v8[-((*v8 >> 2) & 0xFLL) + 7];
                      v40 = v38 - 16;
                      v39 = *(_QWORD *)(v38 - 16);
                      if ((v39 & 2) != 0)
                        goto LABEL_66;
LABEL_85:
                      v41 = (uint64_t *)(v40 - 8 * ((v39 >> 2) & 0xF));
                      v42 = (v39 >> 6) & 0xF;
                      if (!v42)
                        goto LABEL_86;
LABEL_67:
                      v43 = 0;
                      v44 = &v41[v42];
                      while (1)
                      {
                        v45 = *v41;
                        if (v126)
                        {
                          LODWORD(v46) = ((v45 >> 4) ^ (v45 >> 9)) & (v126 - 1);
                          v47 = (llvm *)((char *)v124 + 8 * v46);
                          v48 = *(_QWORD *)v47;
                          if (*(_QWORD *)v47 == v45)
                          {
                            if (v47 != (llvm *)((char *)v124 + 8 * v126))
                              goto LABEL_69;
                          }
                          else
                          {
                            v49 = 1;
                            do
                            {
                              if (v48 == -4096)
                                goto LABEL_73;
                              v50 = v46 + v49++;
                              v46 = v50 & (v126 - 1);
                              v48 = *((_QWORD *)v124 + v46);
                            }
                            while (v48 != v45);
                            if ((char *)v124 + 8 * v46 != (char *)v124 + 8 * v126)
                            {
LABEL_69:
                              if (++v41 == v44)
                                goto LABEL_82;
                              continue;
                            }
                          }
                        }
LABEL_73:
                        if (v43 >= HIDWORD(v133))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v134, v43 + 1, 8);
                          v43 = v133;
                        }
                        *((_QWORD *)v132 + v43) = v45;
                        v43 = v133 + 1;
                        LODWORD(v133) = v133 + 1;
                        if (++v41 == v44)
                        {
LABEL_82:
                          v122 = 0;
                          v123 = 0;
                          v121 = &v122;
                          if ((_DWORD)v128)
                          {
                            v51 = (uint64_t *)v127;
                            v52 = (char *)v127 + 8 * v128;
                            goto LABEL_93;
                          }
LABEL_136:
                          v79 = (llvm::Metadata *)llvm::MDTuple::getImpl(*((_QWORD *)this + 26), v132, v133, 0, 1);
                          llvm::MDNode::replaceOperandWith(v118, 7u, v79);
                          std::__tree<std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>,std::__map_value_compare<llvm::DISubprogram *,std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>,std::less<llvm::DISubprogram *>,true>,std::allocator<std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>>>::destroy((uint64_t)&v121, v122);
                          if (v132 != v134)
                            free(v132);
LABEL_138:
                          if (v127 != &v129)
                            free(v127);
                          llvm::deallocate_buffer(v124, (void *)(8 * v126));
                        }
                      }
                    }
                    continue;
                  }
                }
              }
              v12 = (uint64_t *)(v11 - 8 * ((v10 >> 2) & 0xF));
              v13 = (v10 >> 6) & 0xF;
              if (!v13)
                goto LABEL_138;
              goto LABEL_17;
            }
          }
          else if (v8[-((v7 >> 2) & 0xF) + 7])
          {
            goto LABEL_11;
          }
        }
        v5 = v120 + 1;
      }
      while (v120 + 1 != v119);
    }
  }
  v108 = *((_DWORD *)this + 264);
  if (v108 || *((_DWORD *)this + 265))
  {
    result = (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 1048);
    v109 = *((unsigned int *)this + 266);
    if (v109 > 4 * v108 && v109 >= 0x41)
      return (llvm::NamedMDNode *)llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)result);
    if (!(_DWORD)v109)
      goto LABEL_190;
    v110 = *(_QWORD **)result;
    v111 = (v109 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v111)
    {
      v112 = v111 + 1;
      v113 = (v111 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v114 = &v110[2 * v113];
      v115 = v110 + 2;
      v116 = v113;
      do
      {
        *(v115 - 2) = -4096;
        *v115 = -4096;
        v115 += 4;
        v116 -= 2;
      }
      while (v116);
      if (v112 == v113)
        goto LABEL_190;
    }
    else
    {
      v114 = *(_QWORD **)result;
    }
    v117 = &v110[2 * v109];
    do
    {
      *v114 = -4096;
      v114 += 2;
    }
    while (v114 != v117);
LABEL_190:
    *((_QWORD *)this + 132) = 0;
  }
  return result;
}

llvm::DILocalScope *llvm::MetadataLoader::MetadataLoaderImpl::findEnclosingSubprogram(llvm::MetadataLoader::MetadataLoaderImpl *this, llvm::DILocalScope *a2)
{
  llvm::DILocalScope *v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  llvm::DILocalScope **v9;
  llvm::DILocalScope *v10;
  llvm::DILocalScope **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  llvm::DILocalScope *v15;
  llvm::DIScope *v16;
  llvm::DIScope *Scope;
  uint64_t v18;
  llvm::DIScope **v19;
  llvm::DIScope *v20;
  int v21;
  int v22;
  llvm::DIScope *v23;
  unsigned int v24;
  unsigned int v25;
  llvm::DIScope **v26;
  int v27;
  llvm::DIScope *v28;
  llvm::DIScope *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  llvm::DIScope *v33;
  unsigned int v34;
  unsigned int v35;
  llvm::DIScope **v36;
  llvm::DIScope *v37;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  llvm::DILocalScope *v43;
  llvm::DIScope **v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  llvm::DIScope *v52;
  llvm::DIScope **v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  llvm::DIScope *v60;
  llvm::DILocalScope **v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  llvm::DILocalScope *v65;
  llvm::DIScope **v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  llvm::DIScope *v70;
  llvm::DIScope **v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  llvm::DIScope *v75;
  int64x2_t v76;
  unsigned int v77;
  llvm::DIScope *v78;
  char v79[31];

  v2 = a2;
  v78 = a2;
  if (!a2)
    return v2;
  v4 = (_QWORD *)((char *)this + 1048);
  v5 = *((_DWORD *)this + 266);
  if (!v5)
    goto LABEL_60;
  v6 = *((_QWORD *)this + 131);
  v7 = v5 - 1;
  v8 = (v5 - 1) & ((v2 >> 4) ^ (v2 >> 9));
  v9 = (llvm::DILocalScope **)(v6 + 16 * v8);
  v10 = *v9;
  if (*v9 == v2)
    goto LABEL_18;
  v11 = 0;
  v12 = 1;
  while (v10 != (llvm::DILocalScope *)-4096)
  {
    if (v11)
      v13 = 0;
    else
      v13 = v10 == (llvm::DILocalScope *)-8192;
    if (v13)
      v11 = v9;
    v14 = v8 + v12++;
    v8 = v14 & v7;
    v9 = (llvm::DILocalScope **)(v6 + 16 * (v14 & v7));
    v10 = *v9;
    if (*v9 == v2)
      goto LABEL_18;
  }
  if (v11)
    v9 = v11;
  v39 = *((_DWORD *)this + 264);
  if (4 * v39 + 4 >= 3 * v5)
  {
LABEL_60:
    v5 *= 2;
LABEL_61:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)this + 1048, v5);
    v40 = *((_QWORD *)this + 131);
    v41 = *((_DWORD *)this + 266) - 1;
    v42 = ((v2 >> 4) ^ (v2 >> 9)) & v41;
    v9 = (llvm::DILocalScope **)(v40 + 16 * v42);
    v43 = *v9;
    if (*v9 == v2)
    {
LABEL_62:
      ++*((_DWORD *)this + 264);
      if (v2 == (llvm::DILocalScope *)-4096)
        goto LABEL_17;
    }
    else
    {
      v61 = 0;
      v62 = 1;
      while (v43 != (llvm::DILocalScope *)-4096)
      {
        if (v61)
          v63 = 0;
        else
          v63 = v43 == (llvm::DILocalScope *)-8192;
        if (v63)
          v61 = v9;
        v64 = v42 + v62++;
        v42 = v64 & v41;
        v9 = (llvm::DILocalScope **)(v40 + 16 * (v64 & v41));
        v43 = *v9;
        if (*v9 == v2)
          goto LABEL_62;
      }
      if (v61)
        v9 = v61;
      v65 = *v9;
      ++*((_DWORD *)this + 264);
      if (v65 == (llvm::DILocalScope *)-4096)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v5 + ~v39 - *((_DWORD *)this + 265) <= v5 >> 3)
    goto LABEL_61;
  v15 = *v9;
  ++*((_DWORD *)this + 264);
  if (v15 != (llvm::DILocalScope *)-4096)
LABEL_16:
    --*((_DWORD *)this + 265);
LABEL_17:
  *v9 = v2;
  v9[1] = 0;
LABEL_18:
  v2 = v9[1];
  if (!v2)
  {
    v16 = v78;
    v76 = 0uLL;
    v77 = 0;
    if (!v78)
      goto LABEL_51;
    Scope = v78;
    while (1)
    {
      if (*(_BYTE *)Scope == 18)
        goto LABEL_36;
      Scope = (llvm::DIScope *)llvm::DIScope::getScope(Scope);
      if (Scope && *(unsigned __int8 *)Scope - 18 >= 3)
        Scope = 0;
      v78 = Scope;
      if (v77)
      {
        LODWORD(v18) = (v77 - 1) & ((Scope >> 4) ^ (Scope >> 9));
        v19 = (llvm::DIScope **)(v76.i64[0] + 8 * v18);
        v20 = *v19;
        if (*v19 != Scope)
        {
          v21 = 1;
          do
          {
            if (v20 == (llvm::DIScope *)-4096)
              goto LABEL_31;
            v22 = v18 + v21++;
            v18 = v22 & (v77 - 1);
            v20 = *(llvm::DIScope **)(v76.i64[0] + 8 * v18);
          }
          while (v20 != Scope);
          v19 = (llvm::DIScope **)(v76.i64[0] + 8 * v18);
        }
      }
      else
      {
LABEL_31:
        v19 = (llvm::DIScope **)(v76.i64[0] + 8 * v77);
      }
      if (v19 != (llvm::DIScope **)(v76.i64[0] + 8 * v77))
        break;
      llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(&v76, (uint64_t *)&v78, (uint64_t)v79);
      Scope = v78;
      if (!v78)
        goto LABEL_51;
    }
    if (Scope)
    {
LABEL_36:
      if (*(_BYTE *)Scope == 18)
        v23 = Scope;
      else
        v23 = 0;
      v24 = *((_DWORD *)this + 266);
      v25 = v16 >> 4;
      if (!v24)
      {
LABEL_40:
        v26 = 0;
        v27 = *((_DWORD *)this + 264);
        if (4 * v27 + 4 < 3 * v24)
          goto LABEL_41;
        goto LABEL_92;
      }
    }
    else
    {
LABEL_51:
      v23 = 0;
      v24 = *((_DWORD *)this + 266);
      v25 = v16 >> 4;
      if (!v24)
        goto LABEL_40;
    }
    v30 = *((_QWORD *)this + 131);
    v31 = v24 - 1;
    v32 = (v24 - 1) & (v25 ^ (v16 >> 9));
    v26 = (llvm::DIScope **)(v30 + 16 * v32);
    v33 = *v26;
    if (v16 == *v26)
    {
      v26[1] = v23;
LABEL_54:
      v34 = v24 - 1;
      v35 = (v24 - 1) & (v25 ^ (v16 >> 9));
      v36 = (llvm::DIScope **)(*v4 + 16 * v35);
      v37 = *v36;
      if (v16 == *v36)
LABEL_55:
        llvm::deallocate_buffer((llvm *)v76.i64[0], (void *)(8 * v77));
      v44 = 0;
      v45 = 1;
      while (v37 != (llvm::DIScope *)-4096)
      {
        if (v44)
          v46 = 0;
        else
          v46 = v37 == (llvm::DIScope *)-8192;
        if (v46)
          v44 = v36;
        v47 = v35 + v45++;
        v35 = v47 & v34;
        v36 = (llvm::DIScope **)(*v4 + 16 * (v47 & v34));
        v37 = *v36;
        if (v16 == *v36)
          goto LABEL_55;
      }
      if (v44)
        v36 = v44;
      v48 = *((_DWORD *)this + 264);
      if (4 * v48 + 4 < 3 * v24)
      {
        if (v24 + ~v48 - *((_DWORD *)this + 265) > v24 >> 3)
        {
          v29 = *v36;
          ++*((_DWORD *)this + 264);
          if (v29 == (llvm::DIScope *)-4096)
          {
LABEL_50:
            *v36 = v16;
            v36[1] = 0;
            goto LABEL_55;
          }
LABEL_49:
          --*((_DWORD *)this + 265);
          goto LABEL_50;
        }
LABEL_77:
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v24);
        v49 = *((_QWORD *)this + 131);
        v50 = *((_DWORD *)this + 266) - 1;
        v51 = v50 & (v25 ^ (v16 >> 9));
        v36 = (llvm::DIScope **)(v49 + 16 * v51);
        v52 = *v36;
        if (v16 == *v36)
        {
LABEL_78:
          ++*((_DWORD *)this + 264);
          if (v16 == (llvm::DIScope *)-4096)
            goto LABEL_50;
        }
        else
        {
          v71 = 0;
          v72 = 1;
          while (v52 != (llvm::DIScope *)-4096)
          {
            if (v71)
              v73 = 0;
            else
              v73 = v52 == (llvm::DIScope *)-8192;
            if (v73)
              v71 = v36;
            v74 = v51 + v72++;
            v51 = v74 & v50;
            v36 = (llvm::DIScope **)(v49 + 16 * (v74 & v50));
            v52 = *v36;
            if (v16 == *v36)
              goto LABEL_78;
          }
          if (v71)
            v36 = v71;
          v75 = *v36;
          ++*((_DWORD *)this + 264);
          if (v75 == (llvm::DIScope *)-4096)
            goto LABEL_50;
        }
        goto LABEL_49;
      }
LABEL_76:
      v24 *= 2;
      goto LABEL_77;
    }
    v53 = 0;
    v54 = 1;
    while (v33 != (llvm::DIScope *)-4096)
    {
      if (v53)
        v55 = 0;
      else
        v55 = v33 == (llvm::DIScope *)-8192;
      if (v55)
        v53 = v26;
      v56 = v32 + v54++;
      v32 = v56 & v31;
      v26 = (llvm::DIScope **)(v30 + 16 * (v56 & v31));
      v33 = *v26;
      if (v16 == *v26)
        goto LABEL_45;
    }
    if (v53)
      v26 = v53;
    v27 = *((_DWORD *)this + 264);
    if (4 * v27 + 4 < 3 * v24)
    {
LABEL_41:
      if (v24 + ~v27 - *((_DWORD *)this + 265) > v24 >> 3)
      {
        v28 = *v26;
        ++*((_DWORD *)this + 264);
        if (v28 == (llvm::DIScope *)-4096)
        {
LABEL_44:
          *v26 = v16;
          v26[1] = 0;
LABEL_45:
          v26[1] = v23;
          if (!v24)
            goto LABEL_76;
          goto LABEL_54;
        }
LABEL_43:
        --*((_DWORD *)this + 265);
        goto LABEL_44;
      }
LABEL_93:
      llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v24);
      v57 = *((_QWORD *)this + 131);
      v24 = *((_DWORD *)this + 266);
      v58 = v24 - 1;
      v59 = (v24 - 1) & (v25 ^ (v16 >> 9));
      v26 = (llvm::DIScope **)(v57 + 16 * v59);
      v60 = *v26;
      if (v16 == *v26)
      {
LABEL_94:
        ++*((_DWORD *)this + 264);
        if (v16 == (llvm::DIScope *)-4096)
          goto LABEL_44;
      }
      else
      {
        v66 = 0;
        v67 = 1;
        while (v60 != (llvm::DIScope *)-4096)
        {
          if (v66)
            v68 = 0;
          else
            v68 = v60 == (llvm::DIScope *)-8192;
          if (v68)
            v66 = v26;
          v69 = v59 + v67++;
          v59 = v69 & v58;
          v26 = (llvm::DIScope **)(v57 + 16 * (v69 & v58));
          v60 = *v26;
          if (v16 == *v26)
            goto LABEL_94;
        }
        if (v66)
          v26 = v66;
        v70 = *v26;
        ++*((_DWORD *)this + 264);
        if (v70 == (llvm::DIScope *)-4096)
          goto LABEL_44;
      }
      goto LABEL_43;
    }
LABEL_92:
    v24 *= 2;
    goto LABEL_93;
  }
  return v2;
}

void std::__tree<std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>,std::__map_value_compare<llvm::DISubprogram *,std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>,std::less<llvm::DISubprogram *>,true>,std::allocator<std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2)
  {
    std::__tree<std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>,std::__map_value_compare<llvm::DISubprogram *,std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>,std::less<llvm::DISubprogram *>,true>,std::allocator<std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>,std::__map_value_compare<llvm::DISubprogram *,std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>,std::less<llvm::DISubprogram *>,true>,std::allocator<std::__value_type<llvm::DISubprogram *,llvm::SmallVector<llvm::Metadata *,6u>>>>::destroy(a1, a2[1]);
    v4 = (_QWORD *)a2[5];
    if (v4 != a2 + 7)
      free(v4);
    operator delete(a2);
  }
}

uint64_t std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 8];
    v6 = (uint64_t)*v5;
    v7 = (uint64_t)*v5 + 16 * v4;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v4);
    if (v7 != v8)
    {
      do
      {
        v9 = *(_QWORD **)(v7 + 8);
        if (v9)
        {
          *v9 = 0;
          v6 = (uint64_t)*v5;
        }
        v7 += 16;
        if (v7 - v6 == 4096)
        {
          v10 = (uint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 128;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 256;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucket<unsigned int const&,llvm::detail::DenseSetEmpty&>(_DWORD *__b, char *a2, _DWORD *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  char *v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *__b;
  v7 = *__b >> 1;
  if ((*__b & 1) != 0)
    v8 = 1;
  else
    v8 = __b[4];
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - __b[1] > v8 >> 3)
  {
    v9 = *__b & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow((uint64_t)__b, v8);
  v11 = (char *)(__b + 2);
  v6 = *__b;
  if ((*__b & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    v12 = __b[4];
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = (char *)*((_QWORD *)__b + 1);
  }
  v9 = *__b & 1;
  v13 = v12 - 1;
  v14 = (37 * *a3) & (v12 - 1);
  a2 = &v11[4 * v14];
  v15 = *(_DWORD *)a2;
  if (*a3 != *(_DWORD *)a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -1)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -2;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = &v11[4 * (v19 & v13)];
      v15 = *(_DWORD *)a2;
      if (*a3 == *(_DWORD *)a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *__b = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(_DWORD *)a2 != -1)
    --__b[1];
  *(_DWORD *)a2 = *a3;
  return a2;
}

uint64_t llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t __b, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  llvm *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void *v12;
  void *buffer;
  BOOL v14;
  unsigned int v15;
  llvm *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  _DWORD *v21;
  int v22;
  int v23;
  _DWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  int *v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  int v35;
  int v36;
  _DWORD *v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = a2;
  v3 = __b;
  if (a2 >= 2)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  v7 = *(_DWORD *)__b;
  if ((*(_DWORD *)__b & 1) == 0)
  {
    v8 = *(llvm **)(__b + 8);
    v9 = *(unsigned int *)(__b + 16);
    if (v2 > 1)
    {
      buffer = llvm::allocate_buffer(4 * v2, (std::align_val_t)4uLL);
      *(_QWORD *)(v3 + 8) = buffer;
      *(_QWORD *)(v3 + 16) = v2;
      v14 = (*(_DWORD *)v3 & 1) == 0;
      *(_QWORD *)v3 = *(_DWORD *)v3 & 1;
      if (v14)
        v15 = v2;
      else
        v15 = 1;
      if (!v14)
        buffer = (void *)(v3 + 8);
      memset(buffer, 255, 4 * v15);
      if (!(_DWORD)v9)
        goto LABEL_40;
    }
    else
    {
      *(_QWORD *)__b = 1;
      memset((void *)(__b + 8), 255, 4uLL);
      if (!(_DWORD)v9)
        goto LABEL_40;
    }
    v16 = v8;
    do
    {
      v23 = *(_DWORD *)v16;
      if (*(_DWORD *)v16 <= 0xFFFFFFFD)
      {
        if ((*(_BYTE *)v3 & 1) != 0)
        {
          v18 = 1;
          v17 = v3 + 8;
        }
        else
        {
          v17 = *(_QWORD *)(v3 + 8);
          v18 = *(_DWORD *)(v3 + 16);
        }
        v19 = v18 - 1;
        v20 = (v18 - 1) & (37 * v23);
        v21 = (_DWORD *)(v17 + 4 * v20);
        v22 = *v21;
        if (v23 != *v21)
        {
          v24 = 0;
          v25 = 1;
          while (v22 != -1)
          {
            if (v24)
              v26 = 0;
            else
              v26 = v22 == -2;
            if (v26)
              v24 = v21;
            v27 = v20 + v25++;
            v20 = v27 & v19;
            v21 = (_DWORD *)(v17 + 4 * (v27 & v19));
            v22 = *v21;
            if (v23 == *v21)
              goto LABEL_23;
          }
          if (v24)
            v21 = v24;
        }
LABEL_23:
        *v21 = v23;
        *(_DWORD *)v3 += 2;
      }
      v16 = (llvm *)((char *)v16 + 4);
    }
    while (v16 != (llvm *)((char *)v8 + 4 * v9));
LABEL_40:
    llvm::deallocate_buffer(v8, (void *)(4 * v9));
  }
  v10 = &v40;
  if (*(_DWORD *)(__b + 8) > 0xFFFFFFFD)
  {
    if (v2 < 2)
      goto LABEL_11;
LABEL_42:
    *(_DWORD *)__b = v7 & 0xFFFFFFFE;
    __b = (uint64_t)llvm::allocate_buffer(4 * v2, (std::align_val_t)4uLL);
    *(_QWORD *)(v3 + 8) = __b;
    *(_QWORD *)(v3 + 16) = v2;
    v28 = *(_DWORD *)v3;
    *(_QWORD *)v3 = *(_DWORD *)v3 & 1;
    if ((v28 & 1) == 0)
      goto LABEL_12;
LABEL_43:
    v11 = 1;
    v12 = (void *)(v3 + 8);
    goto LABEL_44;
  }
  v40 = *(_DWORD *)(__b + 8);
  v10 = (int *)&v41;
  if (v2 >= 2)
    goto LABEL_42;
LABEL_11:
  *(_QWORD *)__b = v7 & 1;
  if ((v7 & 1) != 0)
    goto LABEL_43;
LABEL_12:
  v11 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v11)
    goto LABEL_45;
  v12 = *(void **)(v3 + 8);
LABEL_44:
  __b = (uint64_t)memset(v12, 255, 4 * v11);
LABEL_45:
  if (&v40 != v10)
  {
    v29 = &v40;
    do
    {
      v36 = *v29;
      if (*v29 <= 0xFFFFFFFD)
      {
        if ((*(_BYTE *)v3 & 1) != 0)
        {
          v31 = 1;
          v30 = v3 + 8;
        }
        else
        {
          v30 = *(_QWORD *)(v3 + 8);
          v31 = *(_DWORD *)(v3 + 16);
        }
        v32 = v31 - 1;
        v33 = (v31 - 1) & (37 * v36);
        v34 = (_DWORD *)(v30 + 4 * v33);
        v35 = *v34;
        if (v36 != *v34)
        {
          v37 = 0;
          __b = 1;
          while (v35 != -1)
          {
            if (v37)
              v38 = 0;
            else
              v38 = v35 == -2;
            if (v38)
              v37 = v34;
            v39 = v33 + __b;
            __b = (__b + 1);
            v33 = v39 & v32;
            v34 = (_DWORD *)(v30 + 4 * (v39 & v32));
            v35 = *v34;
            if (v36 == *v34)
              goto LABEL_49;
          }
          if (v37)
            v34 = v37;
        }
LABEL_49:
        *v34 = v36;
        *(_DWORD *)v3 += 2;
      }
      ++v29;
    }
    while (v29 != v10);
  }
  return __b;
}

